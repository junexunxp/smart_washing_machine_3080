###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.3.193/W32 for ARM         10/Jun/2019  13:48:42
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\Development\smart_washing_machine_3080\mbedtls\library\pkparse.c
#    Command line =  
#        -f C:\Users\nxf42695\AppData\Local\Temp\1\EW336E.tmp
#        (C:\Development\smart_washing_machine_3080\mbedtls\library\pkparse.c
#        -D DEBUG -D USE_RTOS -D XIP_EXTERNAL_FLASH=1 -D
#        XIP_BOOT_HEADER_ENABLE=1 -D CPU_MIMXRT1052DVL6B -D FSL_RTOS_FREE_RTOS
#        -D PRINTF_ADVANCED_ENABLE -D
#        "MBEDTLS_CONFIG_FILE=\"ksdk_mbedtls_config.h\"" -lC
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list -lA
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list
#        --diag_suppress Pa082,Pa050 -o
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_d16 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" --preinclude
#        C:\Development\smart_washing_machine_3080/source\app_preinclude.h -I
#        C:\Development\smart_washing_machine_3080/board\ -I
#        C:\Development\smart_washing_machine_3080/source\ -I
#        C:\Development\smart_washing_machine_3080/CMSIS\ -I
#        C:\Development\smart_washing_machine_3080/amazon-freertos/freertos/portable\
#        -I C:\Development\smart_washing_machine_3080/amazon-freertos/include\
#        -I C:\Development\smart_washing_machine_3080/component/lists\ -I
#        C:\Development\smart_washing_machine_3080/component/serial_manager\ -I
#        C:\Development\smart_washing_machine_3080/component/uart\ -I
#        C:\Development\smart_washing_machine_3080/component/kv\ -I
#        C:\Development\smart_washing_machine_3080/component/kv/include\ -I
#        C:\Development\smart_washing_machine_3080/device\ -I
#        C:\Development\smart_washing_machine_3080/doc\ -I
#        C:\Development\smart_washing_machine_3080/drivers\ -I
#        C:\Development\smart_washing_machine_3080/src\ -I
#        C:\Development\smart_washing_machine_3080/startup\ -I
#        C:\Development\smart_washing_machine_3080/utilities\ -I
#        C:\Development\smart_washing_machine_3080/xip\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\atm\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_model\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_sign\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\infra\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\mqtt\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\external_libs\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\coap_cloud\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\CoAPPacket\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\server\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\os\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\awss_reset\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\mbedtls\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\ -I
#        C:\Development\smart_washing_machine_3080\mbedtls\port\ksdk\ -Om)
#    Locale       =  C
#    List file    =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list\pkparse.lst
#    Object file  =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj\pkparse.o
#
###############################################################################

C:\Development\smart_washing_machine_3080\mbedtls\library\pkparse.c
      1          /*
      2           *  Public Key layer for parsing key files and structures
      3           *
      4           *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
      5           *  SPDX-License-Identifier: Apache-2.0
      6           *
      7           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
      8           *  not use this file except in compliance with the License.
      9           *  You may obtain a copy of the License at
     10           *
     11           *  http://www.apache.org/licenses/LICENSE-2.0
     12           *
     13           *  Unless required by applicable law or agreed to in writing, software
     14           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     15           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     16           *  See the License for the specific language governing permissions and
     17           *  limitations under the License.
     18           *
     19           *  This file is part of mbed TLS (https://tls.mbed.org)
     20           */
     21          
     22          #if !defined(MBEDTLS_CONFIG_FILE)
     23          #include "mbedtls/config.h"
     24          #else
     25          #include MBEDTLS_CONFIG_FILE
     26          #endif
     27          
     28          #if defined(MBEDTLS_PK_PARSE_C)
     29          
     30          #include "mbedtls/pk.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp mbedtls_rsa_context *mbedtls_pk_rsa(mbedtls_pk_context const)
   \                     mbedtls_pk_rsa: (+1)
   \        0x0   0x4608             MOV      R0,R1
   \        0x2   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp mbedtls_ecp_keypair *mbedtls_pk_ec(mbedtls_pk_context const)
   \                     mbedtls_pk_ec: (+1)
   \        0x0   0x4608             MOV      R0,R1
   \        0x2   0x4770             BX       LR               ;; return
     31          #include "mbedtls/asn1.h"
     32          #include "mbedtls/oid.h"
     33          #include "mbedtls/platform_util.h"
     34          
     35          #include <string.h>
     36          
     37          #if defined(MBEDTLS_RSA_C)
     38          #include "mbedtls/rsa.h"
     39          #endif
     40          #if defined(MBEDTLS_ECP_C)
     41          #include "mbedtls/ecp.h"
     42          #endif
     43          #if defined(MBEDTLS_ECDSA_C)
     44          #include "mbedtls/ecdsa.h"
     45          #endif
     46          #if defined(MBEDTLS_PEM_PARSE_C)
     47          #include "mbedtls/pem.h"
     48          #endif
     49          #if defined(MBEDTLS_PKCS5_C)
     50          #include "mbedtls/pkcs5.h"
     51          #endif
     52          #if defined(MBEDTLS_PKCS12_C)
     53          #include "mbedtls/pkcs12.h"
     54          #endif
     55          
     56          #if defined(MBEDTLS_PLATFORM_C)
     57          #include "mbedtls/platform.h"
     58          #else
     59          #include <stdlib.h>
     60          #define mbedtls_calloc    calloc
     61          #define mbedtls_free       free
     62          #endif
     63          
     64          #if defined(MBEDTLS_FS_IO)
     65          /*
     66           * Load all data from a file into a given buffer.
     67           *
     68           * The file is expected to contain either PEM or DER encoded data.
     69           * A terminating null byte is always appended. It is included in the announced
     70           * length only if the data looks like it is PEM encoded.
     71           */
     72          int mbedtls_pk_load_file( const char *path, unsigned char **buf, size_t *n )
     73          {
     74              FILE *f;
     75              long size;
     76          
     77              if( ( f = fopen( path, "rb" ) ) == NULL )
     78                  return( MBEDTLS_ERR_PK_FILE_IO_ERROR );
     79          
     80              fseek( f, 0, SEEK_END );
     81              if( ( size = ftell( f ) ) == -1 )
     82              {
     83                  fclose( f );
     84                  return( MBEDTLS_ERR_PK_FILE_IO_ERROR );
     85              }
     86              fseek( f, 0, SEEK_SET );
     87          
     88              *n = (size_t) size;
     89          
     90              if( *n + 1 == 0 ||
     91                  ( *buf = mbedtls_calloc( 1, *n + 1 ) ) == NULL )
     92              {
     93                  fclose( f );
     94                  return( MBEDTLS_ERR_PK_ALLOC_FAILED );
     95              }
     96          
     97              if( fread( *buf, 1, *n, f ) != *n )
     98              {
     99                  fclose( f );
    100          
    101                  mbedtls_platform_zeroize( *buf, *n );
    102                  mbedtls_free( *buf );
    103          
    104                  return( MBEDTLS_ERR_PK_FILE_IO_ERROR );
    105              }
    106          
    107              fclose( f );
    108          
    109              (*buf)[*n] = '\0';
    110          
    111              if( strstr( (const char *) *buf, "-----BEGIN " ) != NULL )
    112                  ++*n;
    113          
    114              return( 0 );
    115          }
    116          
    117          /*
    118           * Load and parse a private key
    119           */
    120          int mbedtls_pk_parse_keyfile( mbedtls_pk_context *ctx,
    121                                const char *path, const char *pwd )
    122          {
    123              int ret;
    124              size_t n;
    125              unsigned char *buf;
    126          
    127              if( ( ret = mbedtls_pk_load_file( path, &buf, &n ) ) != 0 )
    128                  return( ret );
    129          
    130              if( pwd == NULL )
    131                  ret = mbedtls_pk_parse_key( ctx, buf, n, NULL, 0 );
    132              else
    133                  ret = mbedtls_pk_parse_key( ctx, buf, n,
    134                          (const unsigned char *) pwd, strlen( pwd ) );
    135          
    136              mbedtls_platform_zeroize( buf, n );
    137              mbedtls_free( buf );
    138          
    139              return( ret );
    140          }
    141          
    142          /*
    143           * Load and parse a public key
    144           */
    145          int mbedtls_pk_parse_public_keyfile( mbedtls_pk_context *ctx, const char *path )
    146          {
    147              int ret;
    148              size_t n;
    149              unsigned char *buf;
    150          
    151              if( ( ret = mbedtls_pk_load_file( path, &buf, &n ) ) != 0 )
    152                  return( ret );
    153          
    154              ret = mbedtls_pk_parse_public_key( ctx, buf, n );
    155          
    156              mbedtls_platform_zeroize( buf, n );
    157              mbedtls_free( buf );
    158          
    159              return( ret );
    160          }
    161          #endif /* MBEDTLS_FS_IO */
    162          
    163          #if defined(MBEDTLS_ECP_C)
    164          /* Minimally parse an ECParameters buffer to and mbedtls_asn1_buf
    165           *
    166           * ECParameters ::= CHOICE {
    167           *   namedCurve         OBJECT IDENTIFIER
    168           *   specifiedCurve     SpecifiedECDomain -- = SEQUENCE { ... }
    169           *   -- implicitCurve   NULL
    170           * }
    171           */

   \                                 In section .text, align 2, keep-with-next
    172          static int pk_get_ecparams( unsigned char **p, const unsigned char *end,
    173                                      mbedtls_asn1_buf *params )
    174          {
   \                     pk_get_ecparams: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
   \        0x6   0x4616             MOV      R6,R2
    175              int ret;
    176          
    177              if ( end - *p < 1 )
   \        0x8   0x6820             LDR      R0,[R4, #+0]
   \        0xA   0x1A28             SUBS     R0,R5,R0
   \        0xC   0x2801             CMP      R0,#+1
   \        0xE   0xDA02             BGE.N    ??pk_get_ecparams_0
    178                  return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
    179                          MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   \       0x10   0x....'....        LDR.W    R0,??DataTable11  ;; 0xffffc2a0
   \       0x14   0xBD70             POP      {R4-R6,PC}
    180          
    181              /* Tag may be either OID or SEQUENCE */
    182              params->tag = **p;
   \                     ??pk_get_ecparams_0: (+1)
   \       0x16   0x6820             LDR      R0,[R4, #+0]
   \       0x18   0x7800             LDRB     R0,[R0, #+0]
   \       0x1A   0x6030             STR      R0,[R6, #+0]
    183              if( params->tag != MBEDTLS_ASN1_OID
    184          #if defined(MBEDTLS_PK_PARSE_EC_EXTENDED)
    185                      && params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE )
    186          #endif
    187                      )
   \       0x1C   0x2806             CMP      R0,#+6
   \       0x1E   0xD004             BEQ.N    ??pk_get_ecparams_1
   \       0x20   0x2830             CMP      R0,#+48
   \       0x22   0xD002             BEQ.N    ??pk_get_ecparams_1
    188              {
    189                  return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
    190                          MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
   \       0x24   0x....'....        LDR.W    R0,??DataTable11_1  ;; 0xffffc29e
   \       0x28   0xBD70             POP      {R4-R6,PC}
    191              }
    192          
    193              if( ( ret = mbedtls_asn1_get_tag( p, end, &params->len, params->tag ) ) != 0 )
   \                     ??pk_get_ecparams_1: (+1)
   \       0x2A   0x4603             MOV      R3,R0
   \       0x2C   0x1D32             ADDS     R2,R6,#+4
   \       0x2E   0x4620             MOV      R0,R4
   \       0x30   0x....'....        BL       mbedtls_asn1_get_tag
   \       0x34   0x2800             CMP      R0,#+0
   \       0x36   0xD002             BEQ.N    ??pk_get_ecparams_2
    194              {
    195                  return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
   \       0x38   0xF5A0 0x5074      SUB      R0,R0,#+15616
   \       0x3C   0xBD70             POP      {R4-R6,PC}
    196              }
    197          
    198              params->p = *p;
   \                     ??pk_get_ecparams_2: (+1)
   \       0x3E   0x6820             LDR      R0,[R4, #+0]
   \       0x40   0x60B0             STR      R0,[R6, #+8]
    199              *p += params->len;
   \       0x42   0x6820             LDR      R0,[R4, #+0]
   \       0x44   0x6871             LDR      R1,[R6, #+4]
   \       0x46   0x4408             ADD      R0,R0,R1
   \       0x48   0x6020             STR      R0,[R4, #+0]
    200          
    201              if( *p != end )
   \       0x4A   0x42A8             CMP      R0,R5
   \       0x4C   0xD002             BEQ.N    ??pk_get_ecparams_3
    202                  return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
    203                          MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   \       0x4E   0x....'....        LDR.W    R0,??DataTable11_2  ;; 0xffffc29a
   \       0x52   0xBD70             POP      {R4-R6,PC}
    204          
    205              return( 0 );
   \                     ??pk_get_ecparams_3: (+1)
   \       0x54   0x2000             MOVS     R0,#+0
   \       0x56   0xBD70             POP      {R4-R6,PC}       ;; return
    206          }
    207          
    208          #if defined(MBEDTLS_PK_PARSE_EC_EXTENDED)
    209          /*
    210           * Parse a SpecifiedECDomain (SEC 1 C.2) and (mostly) fill the group with it.
    211           * WARNING: the resulting group should only be used with
    212           * pk_group_id_from_specified(), since its base point may not be set correctly
    213           * if it was encoded compressed.
    214           *
    215           *  SpecifiedECDomain ::= SEQUENCE {
    216           *      version SpecifiedECDomainVersion(ecdpVer1 | ecdpVer2 | ecdpVer3, ...),
    217           *      fieldID FieldID {{FieldTypes}},
    218           *      curve Curve,
    219           *      base ECPoint,
    220           *      order INTEGER,
    221           *      cofactor INTEGER OPTIONAL,
    222           *      hash HashAlgorithm OPTIONAL,
    223           *      ...
    224           *  }
    225           *
    226           * We only support prime-field as field type, and ignore hash and cofactor.
    227           */

   \                                 In section .text, align 2, keep-with-next
    228          static int pk_group_from_specified( const mbedtls_asn1_buf *params, mbedtls_ecp_group *grp )
    229          {
   \                     pk_group_from_specified: (+1)
   \        0x0   0xB57F             PUSH     {R0-R6,LR}
   \        0x2   0x460C             MOV      R4,R1
    230              int ret;
    231              unsigned char *p = params->p;
   \        0x4   0x6881             LDR      R1,[R0, #+8]
   \        0x6   0x9100             STR      R1,[SP, #+0]
    232              const unsigned char * const end = params->p + params->len;
   \        0x8   0x6881             LDR      R1,[R0, #+8]
   \        0xA   0x6840             LDR      R0,[R0, #+4]
   \        0xC   0x180D             ADDS     R5,R1,R0
    233              const unsigned char *end_field, *end_curve;
    234              size_t len;
    235              int ver;
    236          
    237              /* SpecifiedECDomainVersion ::= INTEGER { 1, 2, 3 } */
    238              if( ( ret = mbedtls_asn1_get_int( &p, end, &ver ) ) != 0 )
   \        0xE   0xAA02             ADD      R2,SP,#+8
   \       0x10   0x4629             MOV      R1,R5
   \       0x12   0x4668             MOV      R0,SP
   \       0x14   0x....'....        BL       mbedtls_asn1_get_int
   \       0x18   0x2800             CMP      R0,#+0
   \       0x1A   0xD002             BEQ.N    ??pk_group_from_specified_0
    239                  return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
   \       0x1C   0xF5A0 0x5074      SUB      R0,R0,#+15616
   \       0x20   0xE0DF             B.N      ??pk_group_from_specified_1
    240          
    241              if( ver < 1 || ver > 3 )
   \                     ??pk_group_from_specified_0: (+1)
   \       0x22   0x9802             LDR      R0,[SP, #+8]
   \       0x24   0x1E40             SUBS     R0,R0,#+1
   \       0x26   0x2803             CMP      R0,#+3
   \       0x28   0xF080 0x80C3      BCS.W    ??pk_group_from_specified_2
    242                  return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
    243          
    244              /*
    245               * FieldID { FIELD-ID:IOSet } ::= SEQUENCE { -- Finite field
    246               *       fieldType FIELD-ID.&id({IOSet}),
    247               *       parameters FIELD-ID.&Type({IOSet}{@fieldType})
    248               * }
    249               */
    250              if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
    251                      MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
   \       0x2C   0x2330             MOVS     R3,#+48
   \       0x2E   0xAA01             ADD      R2,SP,#+4
   \       0x30   0x4629             MOV      R1,R5
   \       0x32   0x4668             MOV      R0,SP
   \       0x34   0x....'....        BL       mbedtls_asn1_get_tag
   \       0x38   0x2800             CMP      R0,#+0
   \       0x3A   0xF040 0x80D2      BNE.W    ??pk_group_from_specified_1
    252                  return( ret );
    253          
    254              end_field = p + len;
   \       0x3E   0x9800             LDR      R0,[SP, #+0]
   \       0x40   0x9901             LDR      R1,[SP, #+4]
   \       0x42   0x1846             ADDS     R6,R0,R1
    255          
    256              /*
    257               * FIELD-ID ::= TYPE-IDENTIFIER
    258               * FieldTypes FIELD-ID ::= {
    259               *       { Prime-p IDENTIFIED BY prime-field } |
    260               *       { Characteristic-two IDENTIFIED BY characteristic-two-field }
    261               * }
    262               * prime-field OBJECT IDENTIFIER ::= { id-fieldType 1 }
    263               */
    264              if( ( ret = mbedtls_asn1_get_tag( &p, end_field, &len, MBEDTLS_ASN1_OID ) ) != 0 )
   \       0x44   0x2306             MOVS     R3,#+6
   \       0x46   0xAA01             ADD      R2,SP,#+4
   \       0x48   0x4631             MOV      R1,R6
   \       0x4A   0x4668             MOV      R0,SP
   \       0x4C   0x....'....        BL       mbedtls_asn1_get_tag
   \       0x50   0x2800             CMP      R0,#+0
   \       0x52   0xF040 0x80C6      BNE.W    ??pk_group_from_specified_1
    265                  return( ret );
    266          
    267              if( len != MBEDTLS_OID_SIZE( MBEDTLS_OID_ANSI_X9_62_PRIME_FIELD ) ||
    268                  memcmp( p, MBEDTLS_OID_ANSI_X9_62_PRIME_FIELD, len ) != 0 )
   \       0x56   0x9801             LDR      R0,[SP, #+4]
   \       0x58   0x2807             CMP      R0,#+7
   \       0x5A   0xD107             BNE.N    ??pk_group_from_specified_3
   \       0x5C   0x2207             MOVS     R2,#+7
   \       0x5E   0x....'....        LDR.W    R1,??DataTable11_3
   \       0x62   0x9800             LDR      R0,[SP, #+0]
   \       0x64   0x....'....        BL       memcmp
   \       0x68   0x2800             CMP      R0,#+0
   \       0x6A   0xD002             BEQ.N    ??pk_group_from_specified_4
    269              {
    270                  return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );
   \                     ??pk_group_from_specified_3: (+1)
   \       0x6C   0x....'....        LDR.W    R0,??DataTable11_4  ;; 0xffffc680
   \       0x70   0xE0B7             B.N      ??pk_group_from_specified_1
    271              }
    272          
    273              p += len;
   \                     ??pk_group_from_specified_4: (+1)
   \       0x72   0x9800             LDR      R0,[SP, #+0]
   \       0x74   0x1DC0             ADDS     R0,R0,#+7
   \       0x76   0x9000             STR      R0,[SP, #+0]
    274          
    275              /* Prime-p ::= INTEGER -- Field of size p. */
    276              if( ( ret = mbedtls_asn1_get_mpi( &p, end_field, &grp->P ) ) != 0 )
   \       0x78   0x1D22             ADDS     R2,R4,#+4
   \       0x7A   0x4631             MOV      R1,R6
   \       0x7C   0x4668             MOV      R0,SP
   \       0x7E   0x....'....        BL       mbedtls_asn1_get_mpi
   \       0x82   0x2800             CMP      R0,#+0
   \       0x84   0xD002             BEQ.N    ??pk_group_from_specified_5
    277                  return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
   \       0x86   0xF5A0 0x5074      SUB      R0,R0,#+15616
   \       0x8A   0xE0AA             B.N      ??pk_group_from_specified_1
    278          
    279              grp->pbits = mbedtls_mpi_bitlen( &grp->P );
   \                     ??pk_group_from_specified_5: (+1)
   \       0x8C   0x1D20             ADDS     R0,R4,#+4
   \       0x8E   0x....'....        BL       mbedtls_mpi_bitlen
   \       0x92   0x65A0             STR      R0,[R4, #+88]
    280          
    281              if( p != end_field )
   \       0x94   0x9800             LDR      R0,[SP, #+0]
   \       0x96   0x42B0             CMP      R0,R6
   \       0x98   0xD148             BNE.N    ??pk_group_from_specified_6
    282                  return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
    283                          MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    284          
    285              /*
    286               * Curve ::= SEQUENCE {
    287               *       a FieldElement,
    288               *       b FieldElement,
    289               *       seed BIT STRING OPTIONAL
    290               *       -- Shall be present if used in SpecifiedECDomain
    291               *       -- with version equal to ecdpVer2 or ecdpVer3
    292               * }
    293               */
    294              if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
    295                      MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
   \       0x9A   0x2330             MOVS     R3,#+48
   \       0x9C   0xAA01             ADD      R2,SP,#+4
   \       0x9E   0x4629             MOV      R1,R5
   \       0xA0   0x4668             MOV      R0,SP
   \       0xA2   0x....'....        BL       mbedtls_asn1_get_tag
   \       0xA6   0x2800             CMP      R0,#+0
   \       0xA8   0xF040 0x809B      BNE.W    ??pk_group_from_specified_1
    296                  return( ret );
    297          
    298              end_curve = p + len;
   \       0xAC   0x9800             LDR      R0,[SP, #+0]
   \       0xAE   0x9901             LDR      R1,[SP, #+4]
   \       0xB0   0x1846             ADDS     R6,R0,R1
    299          
    300              /*
    301               * FieldElement ::= OCTET STRING
    302               * containing an integer in the case of a prime field
    303               */
    304              if( ( ret = mbedtls_asn1_get_tag( &p, end_curve, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 ||
    305                  ( ret = mbedtls_mpi_read_binary( &grp->A, p, len ) ) != 0 )
   \       0xB2   0x2304             MOVS     R3,#+4
   \       0xB4   0xAA01             ADD      R2,SP,#+4
   \       0xB6   0x4631             MOV      R1,R6
   \       0xB8   0x4668             MOV      R0,SP
   \       0xBA   0x....'....        BL       mbedtls_asn1_get_tag
   \       0xBE   0x2800             CMP      R0,#+0
   \       0xC0   0xD107             BNE.N    ??pk_group_from_specified_7
   \       0xC2   0x9A01             LDR      R2,[SP, #+4]
   \       0xC4   0x9900             LDR      R1,[SP, #+0]
   \       0xC6   0xF104 0x0010      ADD      R0,R4,#+16
   \       0xCA   0x....'....        BL       mbedtls_mpi_read_binary
   \       0xCE   0x2800             CMP      R0,#+0
   \       0xD0   0xD002             BEQ.N    ??pk_group_from_specified_8
    306              {
    307                  return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
   \                     ??pk_group_from_specified_7: (+1)
   \       0xD2   0xF5A0 0x5074      SUB      R0,R0,#+15616
   \       0xD6   0xE084             B.N      ??pk_group_from_specified_1
    308              }
    309          
    310              p += len;
   \                     ??pk_group_from_specified_8: (+1)
   \       0xD8   0x9800             LDR      R0,[SP, #+0]
   \       0xDA   0x9901             LDR      R1,[SP, #+4]
   \       0xDC   0x4408             ADD      R0,R0,R1
   \       0xDE   0x9000             STR      R0,[SP, #+0]
    311          
    312              if( ( ret = mbedtls_asn1_get_tag( &p, end_curve, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 ||
    313                  ( ret = mbedtls_mpi_read_binary( &grp->B, p, len ) ) != 0 )
   \       0xE0   0x2304             MOVS     R3,#+4
   \       0xE2   0xAA01             ADD      R2,SP,#+4
   \       0xE4   0x4631             MOV      R1,R6
   \       0xE6   0x4668             MOV      R0,SP
   \       0xE8   0x....'....        BL       mbedtls_asn1_get_tag
   \       0xEC   0x2800             CMP      R0,#+0
   \       0xEE   0xD107             BNE.N    ??pk_group_from_specified_9
   \       0xF0   0x9A01             LDR      R2,[SP, #+4]
   \       0xF2   0x9900             LDR      R1,[SP, #+0]
   \       0xF4   0xF104 0x001C      ADD      R0,R4,#+28
   \       0xF8   0x....'....        BL       mbedtls_mpi_read_binary
   \       0xFC   0x2800             CMP      R0,#+0
   \       0xFE   0xD002             BEQ.N    ??pk_group_from_specified_10
    314              {
    315                  return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
   \                     ??pk_group_from_specified_9: (+1)
   \      0x100   0xF5A0 0x5074      SUB      R0,R0,#+15616
   \      0x104   0xE06D             B.N      ??pk_group_from_specified_1
    316              }
    317          
    318              p += len;
   \                     ??pk_group_from_specified_10: (+1)
   \      0x106   0x9800             LDR      R0,[SP, #+0]
   \      0x108   0x9901             LDR      R1,[SP, #+4]
   \      0x10A   0x4408             ADD      R0,R0,R1
   \      0x10C   0x9000             STR      R0,[SP, #+0]
    319          
    320              /* Ignore seed BIT STRING OPTIONAL */
    321              if( ( ret = mbedtls_asn1_get_tag( &p, end_curve, &len, MBEDTLS_ASN1_BIT_STRING ) ) == 0 )
   \      0x10E   0x2303             MOVS     R3,#+3
   \      0x110   0xAA01             ADD      R2,SP,#+4
   \      0x112   0x4631             MOV      R1,R6
   \      0x114   0x4668             MOV      R0,SP
   \      0x116   0x....'....        BL       mbedtls_asn1_get_tag
   \      0x11A   0x2800             CMP      R0,#+0
   \      0x11C   0xD103             BNE.N    ??pk_group_from_specified_11
    322                  p += len;
   \      0x11E   0x9800             LDR      R0,[SP, #+0]
   \      0x120   0x9901             LDR      R1,[SP, #+4]
   \      0x122   0x4408             ADD      R0,R0,R1
   \      0x124   0x9000             STR      R0,[SP, #+0]
    323          
    324              if( p != end_curve )
   \                     ??pk_group_from_specified_11: (+1)
   \      0x126   0x9800             LDR      R0,[SP, #+0]
   \      0x128   0x42B0             CMP      R0,R6
   \      0x12A   0xD002             BEQ.N    ??pk_group_from_specified_12
    325                  return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
    326                          MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   \                     ??pk_group_from_specified_6: (+1)
   \      0x12C   0x....'....        LDR.W    R0,??DataTable11_2  ;; 0xffffc29a
   \      0x130   0xE057             B.N      ??pk_group_from_specified_1
    327          
    328              /*
    329               * ECPoint ::= OCTET STRING
    330               */
    331              if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
   \                     ??pk_group_from_specified_12: (+1)
   \      0x132   0x2304             MOVS     R3,#+4
   \      0x134   0xAA01             ADD      R2,SP,#+4
   \      0x136   0x4629             MOV      R1,R5
   \      0x138   0x4668             MOV      R0,SP
   \      0x13A   0x....'....        BL       mbedtls_asn1_get_tag
   \      0x13E   0x2800             CMP      R0,#+0
   \      0x140   0xD002             BEQ.N    ??pk_group_from_specified_13
    332                  return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
   \      0x142   0xF5A0 0x5074      SUB      R0,R0,#+15616
   \      0x146   0xE04C             B.N      ??pk_group_from_specified_1
    333          
    334              if( ( ret = mbedtls_ecp_point_read_binary( grp, &grp->G,
    335                                                ( const unsigned char *) p, len ) ) != 0 )
   \                     ??pk_group_from_specified_13: (+1)
   \      0x148   0x9B01             LDR      R3,[SP, #+4]
   \      0x14A   0x9A00             LDR      R2,[SP, #+0]
   \      0x14C   0xF104 0x0128      ADD      R1,R4,#+40
   \      0x150   0x4620             MOV      R0,R4
   \      0x152   0x....'....        BL       mbedtls_ecp_point_read_binary
   \      0x156   0x2800             CMP      R0,#+0
   \      0x158   0xD02E             BEQ.N    ??pk_group_from_specified_14
    336              {
    337                  /*
    338                   * If we can't read the point because it's compressed, cheat by
    339                   * reading only the X coordinate and the parity bit of Y.
    340                   */
    341                  if( ret != MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE ||
    342                      ( p[0] != 0x02 && p[0] != 0x03 ) ||
    343                      len != mbedtls_mpi_size( &grp->P ) + 1 ||
    344                      mbedtls_mpi_read_binary( &grp->G.X, p + 1, len - 1 ) != 0 ||
    345                      mbedtls_mpi_lset( &grp->G.Y, p[0] - 2 ) != 0 ||
    346                      mbedtls_mpi_lset( &grp->G.Z, 1 ) != 0 )
   \      0x15A   0xF510 0x4F9D      CMN      R0,#+20096
   \      0x15E   0xD128             BNE.N    ??pk_group_from_specified_2
   \      0x160   0x9800             LDR      R0,[SP, #+0]
   \      0x162   0x7800             LDRB     R0,[R0, #+0]
   \      0x164   0x2802             CMP      R0,#+2
   \      0x166   0xD003             BEQ.N    ??pk_group_from_specified_15
   \      0x168   0x9800             LDR      R0,[SP, #+0]
   \      0x16A   0x7800             LDRB     R0,[R0, #+0]
   \      0x16C   0x2803             CMP      R0,#+3
   \      0x16E   0xD120             BNE.N    ??pk_group_from_specified_2
   \                     ??pk_group_from_specified_15: (+1)
   \      0x170   0x1D20             ADDS     R0,R4,#+4
   \      0x172   0x....'....        BL       mbedtls_mpi_size
   \      0x176   0x9901             LDR      R1,[SP, #+4]
   \      0x178   0x1C40             ADDS     R0,R0,#+1
   \      0x17A   0x4281             CMP      R1,R0
   \      0x17C   0xD119             BNE.N    ??pk_group_from_specified_2
   \      0x17E   0x460A             MOV      R2,R1
   \      0x180   0x1E52             SUBS     R2,R2,#+1
   \      0x182   0x9800             LDR      R0,[SP, #+0]
   \      0x184   0x1C41             ADDS     R1,R0,#+1
   \      0x186   0xF104 0x0028      ADD      R0,R4,#+40
   \      0x18A   0x....'....        BL       mbedtls_mpi_read_binary
   \      0x18E   0x2800             CMP      R0,#+0
   \      0x190   0xD10F             BNE.N    ??pk_group_from_specified_2
   \      0x192   0x9800             LDR      R0,[SP, #+0]
   \      0x194   0x7801             LDRB     R1,[R0, #+0]
   \      0x196   0x1E89             SUBS     R1,R1,#+2
   \      0x198   0xF104 0x0034      ADD      R0,R4,#+52
   \      0x19C   0x....'....        BL       mbedtls_mpi_lset
   \      0x1A0   0x2800             CMP      R0,#+0
   \      0x1A2   0xD106             BNE.N    ??pk_group_from_specified_2
   \      0x1A4   0x2101             MOVS     R1,#+1
   \      0x1A6   0xF104 0x0040      ADD      R0,R4,#+64
   \      0x1AA   0x....'....        BL       mbedtls_mpi_lset
   \      0x1AE   0x2800             CMP      R0,#+0
   \      0x1B0   0xD002             BEQ.N    ??pk_group_from_specified_14
    347                  {
    348                      return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
   \                     ??pk_group_from_specified_2: (+1)
   \      0x1B2   0x....'....        LDR.W    R0,??DataTable12  ;; 0xffffc300
   \      0x1B6   0xE014             B.N      ??pk_group_from_specified_1
    349                  }
    350              }
    351          
    352              p += len;
   \                     ??pk_group_from_specified_14: (+1)
   \      0x1B8   0x9800             LDR      R0,[SP, #+0]
   \      0x1BA   0x9901             LDR      R1,[SP, #+4]
   \      0x1BC   0x4408             ADD      R0,R0,R1
   \      0x1BE   0x9000             STR      R0,[SP, #+0]
    353          
    354              /*
    355               * order INTEGER
    356               */
    357              if( ( ret = mbedtls_asn1_get_mpi( &p, end, &grp->N ) ) != 0 )
   \      0x1C0   0xF104 0x024C      ADD      R2,R4,#+76
   \      0x1C4   0x4629             MOV      R1,R5
   \      0x1C6   0x4668             MOV      R0,SP
   \      0x1C8   0x....'....        BL       mbedtls_asn1_get_mpi
   \      0x1CC   0x2800             CMP      R0,#+0
   \      0x1CE   0xD002             BEQ.N    ??pk_group_from_specified_16
    358                  return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
   \      0x1D0   0xF5A0 0x5074      SUB      R0,R0,#+15616
   \      0x1D4   0xE005             B.N      ??pk_group_from_specified_1
    359          
    360              grp->nbits = mbedtls_mpi_bitlen( &grp->N );
   \                     ??pk_group_from_specified_16: (+1)
   \      0x1D6   0xF104 0x004C      ADD      R0,R4,#+76
   \      0x1DA   0x....'....        BL       mbedtls_mpi_bitlen
   \      0x1DE   0x65E0             STR      R0,[R4, #+92]
    361          
    362              /*
    363               * Allow optional elements by purposefully not enforcing p == end here.
    364               */
    365          
    366              return( 0 );
   \      0x1E0   0x2000             MOVS     R0,#+0
   \                     ??pk_group_from_specified_1: (+1)
   \      0x1E2   0xB004             ADD      SP,SP,#+16
   \      0x1E4   0xBD70             POP      {R4-R6,PC}       ;; return
    367          }
    368          
    369          /*
    370           * Find the group id associated with an (almost filled) group as generated by
    371           * pk_group_from_specified(), or return an error if unknown.
    372           */

   \                                 In section .text, align 2, keep-with-next
    373          static int pk_group_id_from_group( const mbedtls_ecp_group *grp, mbedtls_ecp_group_id *grp_id )
    374          {
   \                     pk_group_id_from_group: (+1)
   \        0x0   0xE92D 0x41F8      PUSH     {R3-R8,LR}
   \        0x4   0xB09F             SUB      SP,SP,#+124
   \        0x6   0x4606             MOV      R6,R0
   \        0x8   0x460D             MOV      R5,R1
    375              int ret = 0;
   \        0xA   0x2400             MOVS     R4,#+0
    376              mbedtls_ecp_group ref;
    377              const mbedtls_ecp_group_id *id;
    378          
    379              mbedtls_ecp_group_init( &ref );
   \        0xC   0x4668             MOV      R0,SP
   \        0xE   0x....'....        BL       mbedtls_ecp_group_init
    380          
    381              for( id = mbedtls_ecp_grp_id_list(); *id != MBEDTLS_ECP_DP_NONE; id++ )
   \       0x12   0x....'....        BL       mbedtls_ecp_grp_id_list
   \       0x16   0x4607             MOV      R7,R0
   \                     ??pk_group_id_from_group_0: (+1)
   \       0x18   0x7838             LDRB     R0,[R7, #+0]
   \       0x1A   0x2800             CMP      R0,#+0
   \       0x1C   0xD047             BEQ.N    ??pk_group_id_from_group_1
    382              {
    383                  /* Load the group associated to that id */
    384                  mbedtls_ecp_group_free( &ref );
   \       0x1E   0x4668             MOV      R0,SP
   \       0x20   0x....'....        BL       mbedtls_ecp_group_free
    385                  MBEDTLS_MPI_CHK( mbedtls_ecp_group_load( &ref, *id ) );
   \       0x24   0x7839             LDRB     R1,[R7, #+0]
   \       0x26   0x4668             MOV      R0,SP
   \       0x28   0x....'....        BL       mbedtls_ecp_group_load
   \       0x2C   0x0004             MOVS     R4,R0
   \       0x2E   0xD13E             BNE.N    ??pk_group_id_from_group_1
    386          
    387                  /* Compare to the group we were given, starting with easy tests */
    388                  if( grp->pbits == ref.pbits && grp->nbits == ref.nbits &&
    389                      mbedtls_mpi_cmp_mpi( &grp->P, &ref.P ) == 0 &&
    390                      mbedtls_mpi_cmp_mpi( &grp->A, &ref.A ) == 0 &&
    391                      mbedtls_mpi_cmp_mpi( &grp->B, &ref.B ) == 0 &&
    392                      mbedtls_mpi_cmp_mpi( &grp->N, &ref.N ) == 0 &&
    393                      mbedtls_mpi_cmp_mpi( &grp->G.X, &ref.G.X ) == 0 &&
    394                      mbedtls_mpi_cmp_mpi( &grp->G.Z, &ref.G.Z ) == 0 &&
    395                      /* For Y we may only know the parity bit, so compare only that */
    396                      mbedtls_mpi_get_bit( &grp->G.Y, 0 ) == mbedtls_mpi_get_bit( &ref.G.Y, 0 ) )
   \       0x30   0x6DB0             LDR      R0,[R6, #+88]
   \       0x32   0x9916             LDR      R1,[SP, #+88]
   \       0x34   0x4288             CMP      R0,R1
   \       0x36   0xD138             BNE.N    ??pk_group_id_from_group_2
   \       0x38   0x6DF0             LDR      R0,[R6, #+92]
   \       0x3A   0x9917             LDR      R1,[SP, #+92]
   \       0x3C   0x4288             CMP      R0,R1
   \       0x3E   0xD134             BNE.N    ??pk_group_id_from_group_2
   \       0x40   0xA901             ADD      R1,SP,#+4
   \       0x42   0x1D30             ADDS     R0,R6,#+4
   \       0x44   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \       0x48   0x2800             CMP      R0,#+0
   \       0x4A   0xD12E             BNE.N    ??pk_group_id_from_group_2
   \       0x4C   0xA904             ADD      R1,SP,#+16
   \       0x4E   0xF106 0x0010      ADD      R0,R6,#+16
   \       0x52   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \       0x56   0x2800             CMP      R0,#+0
   \       0x58   0xD127             BNE.N    ??pk_group_id_from_group_2
   \       0x5A   0xA907             ADD      R1,SP,#+28
   \       0x5C   0xF106 0x001C      ADD      R0,R6,#+28
   \       0x60   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \       0x64   0x2800             CMP      R0,#+0
   \       0x66   0xD120             BNE.N    ??pk_group_id_from_group_2
   \       0x68   0xA913             ADD      R1,SP,#+76
   \       0x6A   0xF106 0x004C      ADD      R0,R6,#+76
   \       0x6E   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \       0x72   0x2800             CMP      R0,#+0
   \       0x74   0xD119             BNE.N    ??pk_group_id_from_group_2
   \       0x76   0xA90A             ADD      R1,SP,#+40
   \       0x78   0xF106 0x0028      ADD      R0,R6,#+40
   \       0x7C   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \       0x80   0x2800             CMP      R0,#+0
   \       0x82   0xD112             BNE.N    ??pk_group_id_from_group_2
   \       0x84   0xA910             ADD      R1,SP,#+64
   \       0x86   0xF106 0x0040      ADD      R0,R6,#+64
   \       0x8A   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \       0x8E   0x2800             CMP      R0,#+0
   \       0x90   0xD10B             BNE.N    ??pk_group_id_from_group_2
   \       0x92   0x2100             MOVS     R1,#+0
   \       0x94   0xF106 0x0034      ADD      R0,R6,#+52
   \       0x98   0x....'....        BL       mbedtls_mpi_get_bit
   \       0x9C   0x4680             MOV      R8,R0
   \       0x9E   0x2100             MOVS     R1,#+0
   \       0xA0   0xA80D             ADD      R0,SP,#+52
   \       0xA2   0x....'....        BL       mbedtls_mpi_get_bit
   \       0xA6   0x4580             CMP      R8,R0
   \       0xA8   0xD001             BEQ.N    ??pk_group_id_from_group_1
    397                  {
    398                      break;
    399                  }
    400          
    401              }
   \                     ??pk_group_id_from_group_2: (+1)
   \       0xAA   0x1C7F             ADDS     R7,R7,#+1
   \       0xAC   0xE7B4             B.N      ??pk_group_id_from_group_0
    402          
    403          cleanup:
    404              mbedtls_ecp_group_free( &ref );
   \                     ??pk_group_id_from_group_1: (+1)
   \       0xAE   0x4668             MOV      R0,SP
   \       0xB0   0x....'....        BL       mbedtls_ecp_group_free
    405          
    406              *grp_id = *id;
   \       0xB4   0x7838             LDRB     R0,[R7, #+0]
   \       0xB6   0x7028             STRB     R0,[R5, #+0]
    407          
    408              if( ret == 0 && *id == MBEDTLS_ECP_DP_NONE )
   \       0xB8   0x2C00             CMP      R4,#+0
   \       0xBA   0xD104             BNE.N    ??pk_group_id_from_group_3
   \       0xBC   0x7838             LDRB     R0,[R7, #+0]
   \       0xBE   0x2800             CMP      R0,#+0
   \       0xC0   0xD101             BNE.N    ??pk_group_id_from_group_3
    409                  ret = MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE;
   \       0xC2   0x....'....        LDR.W    R4,??DataTable12_1  ;; 0xffffb180
    410          
    411              return( ret );
   \                     ??pk_group_id_from_group_3: (+1)
   \       0xC6   0x4620             MOV      R0,R4
   \       0xC8   0xB020             ADD      SP,SP,#+128
   \       0xCA   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    412          }
    413          
    414          /*
    415           * Parse a SpecifiedECDomain (SEC 1 C.2) and find the associated group ID
    416           */

   \                                 In section .text, align 2, keep-with-next
    417          static int pk_group_id_from_specified( const mbedtls_asn1_buf *params,
    418                                                 mbedtls_ecp_group_id *grp_id )
    419          {
   \                     pk_group_id_from_specified: (+1)
   \        0x0   0xB530             PUSH     {R4,R5,LR}
   \        0x2   0xB09F             SUB      SP,SP,#+124
   \        0x4   0x4604             MOV      R4,R0
   \        0x6   0x460D             MOV      R5,R1
    420              int ret;
    421              mbedtls_ecp_group grp;
    422          
    423              mbedtls_ecp_group_init( &grp );
   \        0x8   0x4668             MOV      R0,SP
   \        0xA   0x....'....        BL       mbedtls_ecp_group_init
    424          
    425              if( ( ret = pk_group_from_specified( params, &grp ) ) != 0 )
   \        0xE   0x4669             MOV      R1,SP
   \       0x10   0x4620             MOV      R0,R4
   \       0x12   0x....'....        BL       pk_group_from_specified
   \       0x16   0x0004             MOVS     R4,R0
   \       0x18   0xD104             BNE.N    ??pk_group_id_from_specified_0
    426                  goto cleanup;
    427          
    428              ret = pk_group_id_from_group( &grp, grp_id );
   \       0x1A   0x4629             MOV      R1,R5
   \       0x1C   0x4668             MOV      R0,SP
   \       0x1E   0x....'....        BL       pk_group_id_from_group
   \       0x22   0x4604             MOV      R4,R0
    429          
    430          cleanup:
    431              mbedtls_ecp_group_free( &grp );
   \                     ??pk_group_id_from_specified_0: (+1)
   \       0x24   0x4668             MOV      R0,SP
   \       0x26   0x....'....        BL       mbedtls_ecp_group_free
    432          
    433              return( ret );
   \       0x2A   0x4620             MOV      R0,R4
   \       0x2C   0xB01F             ADD      SP,SP,#+124
   \       0x2E   0xBD30             POP      {R4,R5,PC}       ;; return
    434          }
    435          #endif /* MBEDTLS_PK_PARSE_EC_EXTENDED */
    436          
    437          /*
    438           * Use EC parameters to initialise an EC group
    439           *
    440           * ECParameters ::= CHOICE {
    441           *   namedCurve         OBJECT IDENTIFIER
    442           *   specifiedCurve     SpecifiedECDomain -- = SEQUENCE { ... }
    443           *   -- implicitCurve   NULL
    444           */

   \                                 In section .text, align 2, keep-with-next
    445          static int pk_use_ecparams( const mbedtls_asn1_buf *params, mbedtls_ecp_group *grp )
    446          {
   \                     pk_use_ecparams: (+1)
   \        0x0   0xB51C             PUSH     {R2-R4,LR}
   \        0x2   0x460C             MOV      R4,R1
    447              int ret;
    448              mbedtls_ecp_group_id grp_id;
    449          
    450              if( params->tag == MBEDTLS_ASN1_OID )
   \        0x4   0x6801             LDR      R1,[R0, #+0]
   \        0x6   0x2906             CMP      R1,#+6
   \        0x8   0x4669             MOV      R1,SP
   \        0xA   0xD106             BNE.N    ??pk_use_ecparams_0
    451              {
    452                  if( mbedtls_oid_get_ec_grp( params, &grp_id ) != 0 )
   \        0xC   0x....'....        BL       mbedtls_oid_get_ec_grp
   \       0x10   0x2800             CMP      R0,#+0
   \       0x12   0xD006             BEQ.N    ??pk_use_ecparams_1
    453                      return( MBEDTLS_ERR_PK_UNKNOWN_NAMED_CURVE );
   \       0x14   0x....'....        LDR.W    R0,??DataTable12_2  ;; 0xffffc600
   \       0x18   0xBD16             POP      {R1,R2,R4,PC}
    454              }
    455              else
    456              {
    457          #if defined(MBEDTLS_PK_PARSE_EC_EXTENDED)
    458                  if( ( ret = pk_group_id_from_specified( params, &grp_id ) ) != 0 )
   \                     ??pk_use_ecparams_0: (+1)
   \       0x1A   0x....'....        BL       pk_group_id_from_specified
   \       0x1E   0x2800             CMP      R0,#+0
   \       0x20   0xD111             BNE.N    ??pk_use_ecparams_2
    459                      return( ret );
    460          #else
    461                  return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
    462          #endif
    463              }
    464          
    465              /*
    466               * grp may already be initilialized; if so, make sure IDs match
    467               */
    468              if( grp->id != MBEDTLS_ECP_DP_NONE && grp->id != grp_id )
   \                     ??pk_use_ecparams_1: (+1)
   \       0x22   0x7820             LDRB     R0,[R4, #+0]
   \       0x24   0x2800             CMP      R0,#+0
   \       0x26   0xD006             BEQ.N    ??pk_use_ecparams_3
   \       0x28   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \       0x2C   0x4288             CMP      R0,R1
   \       0x2E   0xD002             BEQ.N    ??pk_use_ecparams_3
    469                  return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
   \       0x30   0x....'....        LDR.W    R0,??DataTable12  ;; 0xffffc300
   \       0x34   0xBD16             POP      {R1,R2,R4,PC}
    470          
    471              if( ( ret = mbedtls_ecp_group_load( grp, grp_id ) ) != 0 )
   \                     ??pk_use_ecparams_3: (+1)
   \       0x36   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \       0x3A   0x4620             MOV      R0,R4
   \       0x3C   0x....'....        BL       mbedtls_ecp_group_load
   \       0x40   0x2800             CMP      R0,#+0
   \       0x42   0xD100             BNE.N    ??pk_use_ecparams_2
    472                  return( ret );
    473          
    474              return( 0 );
   \       0x44   0x2000             MOVS     R0,#+0
   \                     ??pk_use_ecparams_2: (+1)
   \       0x46   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    475          }
    476          
    477          /*
    478           * EC public key is an EC point
    479           *
    480           * The caller is responsible for clearing the structure upon failure if
    481           * desired. Take care to pass along the possible ECP_FEATURE_UNAVAILABLE
    482           * return code of mbedtls_ecp_point_read_binary() and leave p in a usable state.
    483           */

   \                                 In section .text, align 2, keep-with-next
    484          static int pk_get_ecpubkey( unsigned char **p, const unsigned char *end,
    485                                      mbedtls_ecp_keypair *key )
    486          {
   \                     pk_get_ecpubkey: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
   \        0x6   0x4616             MOV      R6,R2
    487              int ret;
    488          
    489              if( ( ret = mbedtls_ecp_point_read_binary( &key->grp, &key->Q,
    490                              (const unsigned char *) *p, end - *p ) ) == 0 )
   \        0x8   0x6823             LDR      R3,[R4, #+0]
   \        0xA   0x1AEB             SUBS     R3,R5,R3
   \        0xC   0x6822             LDR      R2,[R4, #+0]
   \        0xE   0xF106 0x0188      ADD      R1,R6,#+136
   \       0x12   0x4630             MOV      R0,R6
   \       0x14   0x....'....        BL       mbedtls_ecp_point_read_binary
   \       0x18   0x2800             CMP      R0,#+0
   \       0x1A   0xD104             BNE.N    ??pk_get_ecpubkey_0
    491              {
    492                  ret = mbedtls_ecp_check_pubkey( &key->grp, &key->Q );
   \       0x1C   0xF106 0x0188      ADD      R1,R6,#+136
   \       0x20   0x4630             MOV      R0,R6
   \       0x22   0x....'....        BL       mbedtls_ecp_check_pubkey
    493              }
    494          
    495              /*
    496               * We know mbedtls_ecp_point_read_binary consumed all bytes or failed
    497               */
    498              *p = (unsigned char *) end;
   \                     ??pk_get_ecpubkey_0: (+1)
   \       0x26   0x6025             STR      R5,[R4, #+0]
    499          
    500              return( ret );
   \       0x28   0xBD70             POP      {R4-R6,PC}       ;; return
    501          }
    502          #endif /* MBEDTLS_ECP_C */
    503          
    504          #if defined(MBEDTLS_RSA_C)
    505          /*
    506           *  RSAPublicKey ::= SEQUENCE {
    507           *      modulus           INTEGER,  -- n
    508           *      publicExponent    INTEGER   -- e
    509           *  }
    510           */

   \                                 In section .text, align 2, keep-with-next
    511          static int pk_get_rsapubkey( unsigned char **p,
    512                                       const unsigned char *end,
    513                                       mbedtls_rsa_context *rsa )
    514          {
   \                     pk_get_rsapubkey: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0xB088             SUB      SP,SP,#+32
   \        0x4   0x4604             MOV      R4,R0
   \        0x6   0x460D             MOV      R5,R1
   \        0x8   0x4616             MOV      R6,R2
    515              int ret;
    516              size_t len;
    517          
    518              if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
    519                      MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
   \        0xA   0x2330             MOVS     R3,#+48
   \        0xC   0xAA07             ADD      R2,SP,#+28
   \        0xE   0x....'....        BL       mbedtls_asn1_get_tag
   \       0x12   0x2800             CMP      R0,#+0
   \       0x14   0xD12B             BNE.N    ??pk_get_rsapubkey_0
    520                  return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
    521          
    522              if( *p + len != end )
   \       0x16   0x6820             LDR      R0,[R4, #+0]
   \       0x18   0x9907             LDR      R1,[SP, #+28]
   \       0x1A   0x4408             ADD      R0,R0,R1
   \       0x1C   0x42A8             CMP      R0,R5
   \       0x1E   0xD002             BEQ.N    ??pk_get_rsapubkey_1
    523                  return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
    524                          MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   \       0x20   0x....'....        LDR.W    R0,??DataTable13  ;; 0xffffc49a
   \       0x24   0xE050             B.N      ??pk_get_rsapubkey_2
    525          
    526              /* Import N */
    527              if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
   \                     ??pk_get_rsapubkey_1: (+1)
   \       0x26   0x2302             MOVS     R3,#+2
   \       0x28   0xAA07             ADD      R2,SP,#+28
   \       0x2A   0x4629             MOV      R1,R5
   \       0x2C   0x4620             MOV      R0,R4
   \       0x2E   0x....'....        BL       mbedtls_asn1_get_tag
   \       0x32   0x2800             CMP      R0,#+0
   \       0x34   0xD11B             BNE.N    ??pk_get_rsapubkey_0
    528                  return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
    529          
    530              if( ( ret = mbedtls_rsa_import_raw( rsa, *p, len, NULL, 0, NULL, 0,
    531                                                  NULL, 0, NULL, 0 ) ) != 0 )
   \       0x36   0x2000             MOVS     R0,#+0
   \       0x38   0x9006             STR      R0,[SP, #+24]
   \       0x3A   0x9005             STR      R0,[SP, #+20]
   \       0x3C   0x9004             STR      R0,[SP, #+16]
   \       0x3E   0x9003             STR      R0,[SP, #+12]
   \       0x40   0x9002             STR      R0,[SP, #+8]
   \       0x42   0x9001             STR      R0,[SP, #+4]
   \       0x44   0x9000             STR      R0,[SP, #+0]
   \       0x46   0x4603             MOV      R3,R0
   \       0x48   0x9A07             LDR      R2,[SP, #+28]
   \       0x4A   0x6821             LDR      R1,[R4, #+0]
   \       0x4C   0x4630             MOV      R0,R6
   \       0x4E   0x....'....        BL       mbedtls_rsa_import_raw
   \       0x52   0x2800             CMP      R0,#+0
   \       0x54   0xD12E             BNE.N    ??pk_get_rsapubkey_3
    532                  return( MBEDTLS_ERR_PK_INVALID_PUBKEY );
    533          
    534              *p += len;
   \       0x56   0x6820             LDR      R0,[R4, #+0]
   \       0x58   0x9907             LDR      R1,[SP, #+28]
   \       0x5A   0x4408             ADD      R0,R0,R1
   \       0x5C   0x6020             STR      R0,[R4, #+0]
    535          
    536              /* Import E */
    537              if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
   \       0x5E   0x2302             MOVS     R3,#+2
   \       0x60   0xAA07             ADD      R2,SP,#+28
   \       0x62   0x4629             MOV      R1,R5
   \       0x64   0x4620             MOV      R0,R4
   \       0x66   0x....'....        BL       mbedtls_asn1_get_tag
   \       0x6A   0x2800             CMP      R0,#+0
   \       0x6C   0xD002             BEQ.N    ??pk_get_rsapubkey_4
    538                  return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
   \                     ??pk_get_rsapubkey_0: (+1)
   \       0x6E   0xF5A0 0x506C      SUB      R0,R0,#+15104
   \       0x72   0xE029             B.N      ??pk_get_rsapubkey_2
    539          
    540              if( ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
    541                                                  NULL, 0, *p, len ) ) != 0 )
   \                     ??pk_get_rsapubkey_4: (+1)
   \       0x74   0x9807             LDR      R0,[SP, #+28]
   \       0x76   0x9006             STR      R0,[SP, #+24]
   \       0x78   0x6820             LDR      R0,[R4, #+0]
   \       0x7A   0x9005             STR      R0,[SP, #+20]
   \       0x7C   0x2000             MOVS     R0,#+0
   \       0x7E   0x9004             STR      R0,[SP, #+16]
   \       0x80   0x9003             STR      R0,[SP, #+12]
   \       0x82   0x9002             STR      R0,[SP, #+8]
   \       0x84   0x9001             STR      R0,[SP, #+4]
   \       0x86   0x9000             STR      R0,[SP, #+0]
   \       0x88   0x4603             MOV      R3,R0
   \       0x8A   0x4602             MOV      R2,R0
   \       0x8C   0x4601             MOV      R1,R0
   \       0x8E   0x4630             MOV      R0,R6
   \       0x90   0x....'....        BL       mbedtls_rsa_import_raw
   \       0x94   0x2800             CMP      R0,#+0
   \       0x96   0xD10D             BNE.N    ??pk_get_rsapubkey_3
    542                  return( MBEDTLS_ERR_PK_INVALID_PUBKEY );
    543          
    544              *p += len;
   \       0x98   0x6820             LDR      R0,[R4, #+0]
   \       0x9A   0x9907             LDR      R1,[SP, #+28]
   \       0x9C   0x4408             ADD      R0,R0,R1
   \       0x9E   0x6020             STR      R0,[R4, #+0]
    545          
    546              if( mbedtls_rsa_complete( rsa ) != 0 ||
    547                  mbedtls_rsa_check_pubkey( rsa ) != 0 )
   \       0xA0   0x4630             MOV      R0,R6
   \       0xA2   0x....'....        BL       mbedtls_rsa_complete
   \       0xA6   0x2800             CMP      R0,#+0
   \       0xA8   0xD104             BNE.N    ??pk_get_rsapubkey_3
   \       0xAA   0x4630             MOV      R0,R6
   \       0xAC   0x....'....        BL       mbedtls_rsa_check_pubkey
   \       0xB0   0x2800             CMP      R0,#+0
   \       0xB2   0xD002             BEQ.N    ??pk_get_rsapubkey_5
    548              {
    549                  return( MBEDTLS_ERR_PK_INVALID_PUBKEY );
   \                     ??pk_get_rsapubkey_3: (+1)
   \       0xB4   0x....'....        LDR.W    R0,??DataTable13_1  ;; 0xffffc500
   \       0xB8   0xE006             B.N      ??pk_get_rsapubkey_2
    550              }
    551          
    552              if( *p != end )
   \                     ??pk_get_rsapubkey_5: (+1)
   \       0xBA   0x6820             LDR      R0,[R4, #+0]
   \       0xBC   0x42A8             CMP      R0,R5
   \       0xBE   0xD002             BEQ.N    ??pk_get_rsapubkey_6
    553                  return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
    554                          MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   \       0xC0   0x....'....        LDR.W    R0,??DataTable13  ;; 0xffffc49a
   \       0xC4   0xE000             B.N      ??pk_get_rsapubkey_2
    555          
    556              return( 0 );
   \                     ??pk_get_rsapubkey_6: (+1)
   \       0xC6   0x2000             MOVS     R0,#+0
   \                     ??pk_get_rsapubkey_2: (+1)
   \       0xC8   0xB008             ADD      SP,SP,#+32
   \       0xCA   0xBD70             POP      {R4-R6,PC}       ;; return
    557          }
    558          #endif /* MBEDTLS_RSA_C */
    559          
    560          /* Get a PK algorithm identifier
    561           *
    562           *  AlgorithmIdentifier  ::=  SEQUENCE  {
    563           *       algorithm               OBJECT IDENTIFIER,
    564           *       parameters              ANY DEFINED BY algorithm OPTIONAL  }
    565           */

   \                                 In section .text, align 2, keep-with-next
    566          static int pk_get_pk_alg( unsigned char **p,
    567                                    const unsigned char *end,
    568                                    mbedtls_pk_type_t *pk_alg, mbedtls_asn1_buf *params )
    569          {
   \                     pk_get_pk_alg: (+1)
   \        0x0   0xB5FE             PUSH     {R1-R7,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
   \        0x6   0x4616             MOV      R6,R2
   \        0x8   0x461F             MOV      R7,R3
    570              int ret;
    571              mbedtls_asn1_buf alg_oid;
    572          
    573              memset( params, 0, sizeof(mbedtls_asn1_buf) );
   \        0xA   0x2200             MOVS     R2,#+0
   \        0xC   0x210C             MOVS     R1,#+12
   \        0xE   0x4638             MOV      R0,R7
   \       0x10   0x....'....        BL       __aeabi_memset4
    574          
    575              if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
   \       0x14   0x463B             MOV      R3,R7
   \       0x16   0x466A             MOV      R2,SP
   \       0x18   0x4629             MOV      R1,R5
   \       0x1A   0x4620             MOV      R0,R4
   \       0x1C   0x....'....        BL       mbedtls_asn1_get_alg
   \       0x20   0x2800             CMP      R0,#+0
   \       0x22   0xD002             BEQ.N    ??pk_get_pk_alg_0
    576                  return( MBEDTLS_ERR_PK_INVALID_ALG + ret );
   \       0x24   0xF5A0 0x506A      SUB      R0,R0,#+14976
   \       0x28   0xBDFE             POP      {R1-R7,PC}
    577          
    578              if( mbedtls_oid_get_pk_alg( &alg_oid, pk_alg ) != 0 )
   \                     ??pk_get_pk_alg_0: (+1)
   \       0x2A   0x4631             MOV      R1,R6
   \       0x2C   0x4668             MOV      R0,SP
   \       0x2E   0x....'....        BL       mbedtls_oid_get_pk_alg
   \       0x32   0x2800             CMP      R0,#+0
   \       0x34   0xD002             BEQ.N    ??pk_get_pk_alg_1
    579                  return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
   \       0x36   0x....'....        LDR.W    R0,??DataTable13_2  ;; 0xffffc380
   \       0x3A   0xBDFE             POP      {R1-R7,PC}
    580          
    581              /*
    582               * No parameters with RSA (only for EC)
    583               */
    584              if( *pk_alg == MBEDTLS_PK_RSA &&
    585                      ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
    586                          params->len != 0 ) )
   \                     ??pk_get_pk_alg_1: (+1)
   \       0x3C   0x7830             LDRB     R0,[R6, #+0]
   \       0x3E   0x2801             CMP      R0,#+1
   \       0x40   0xD10A             BNE.N    ??pk_get_pk_alg_2
   \       0x42   0x6838             LDR      R0,[R7, #+0]
   \       0x44   0x2805             CMP      R0,#+5
   \       0x46   0xD001             BEQ.N    ??pk_get_pk_alg_3
   \       0x48   0x2800             CMP      R0,#+0
   \       0x4A   0xD102             BNE.N    ??pk_get_pk_alg_4
   \                     ??pk_get_pk_alg_3: (+1)
   \       0x4C   0x6878             LDR      R0,[R7, #+4]
   \       0x4E   0x2800             CMP      R0,#+0
   \       0x50   0xD002             BEQ.N    ??pk_get_pk_alg_2
    587              {
    588                  return( MBEDTLS_ERR_PK_INVALID_ALG );
   \                     ??pk_get_pk_alg_4: (+1)
   \       0x52   0x....'....        LDR.W    R0,??DataTable13_3  ;; 0xffffc580
   \       0x56   0xBDFE             POP      {R1-R7,PC}
    589              }
    590          
    591              return( 0 );
   \                     ??pk_get_pk_alg_2: (+1)
   \       0x58   0x2000             MOVS     R0,#+0
   \       0x5A   0xBDFE             POP      {R1-R7,PC}       ;; return
    592          }
    593          
    594          /*
    595           *  SubjectPublicKeyInfo  ::=  SEQUENCE  {
    596           *       algorithm            AlgorithmIdentifier,
    597           *       subjectPublicKey     BIT STRING }
    598           */

   \                                 In section .text, align 2, keep-with-next
    599          int mbedtls_pk_parse_subpubkey( unsigned char **p, const unsigned char *end,
    600                                  mbedtls_pk_context *pk )
    601          {
   \                     mbedtls_pk_parse_subpubkey: (+1)
   \        0x0   0xB5F0             PUSH     {R4-R7,LR}
   \        0x2   0xB085             SUB      SP,SP,#+20
   \        0x4   0x4605             MOV      R5,R0
   \        0x6   0x4616             MOV      R6,R2
    602              int ret;
    603              size_t len;
    604              mbedtls_asn1_buf alg_params;
    605              mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
   \        0x8   0x2000             MOVS     R0,#+0
   \        0xA   0xF88D 0x0000      STRB     R0,[SP, #+0]
    606              const mbedtls_pk_info_t *pk_info;
    607          
    608              if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
    609                              MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
   \        0xE   0x2330             MOVS     R3,#+48
   \       0x10   0xAA01             ADD      R2,SP,#+4
   \       0x12   0x4628             MOV      R0,R5
   \       0x14   0x....'....        BL       mbedtls_asn1_get_tag
   \       0x18   0x2800             CMP      R0,#+0
   \       0x1A   0xD002             BEQ.N    ??mbedtls_pk_parse_subpubkey_0
    610              {
    611                  return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
   \       0x1C   0xF5A0 0x5074      SUB      R0,R0,#+15616
   \       0x20   0xE062             B.N      ??mbedtls_pk_parse_subpubkey_1
    612              }
    613          
    614              end = *p + len;
   \                     ??mbedtls_pk_parse_subpubkey_0: (+1)
   \       0x22   0x6828             LDR      R0,[R5, #+0]
   \       0x24   0x9901             LDR      R1,[SP, #+4]
   \       0x26   0x1847             ADDS     R7,R0,R1
    615          
    616              if( ( ret = pk_get_pk_alg( p, end, &pk_alg, &alg_params ) ) != 0 )
   \       0x28   0xAB02             ADD      R3,SP,#+8
   \       0x2A   0x466A             MOV      R2,SP
   \       0x2C   0x4639             MOV      R1,R7
   \       0x2E   0x4628             MOV      R0,R5
   \       0x30   0x....'....        BL       pk_get_pk_alg
   \       0x34   0x0004             MOVS     R4,R0
   \       0x36   0xD156             BNE.N    ??mbedtls_pk_parse_subpubkey_2
    617                  return( ret );
    618          
    619              if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
   \       0x38   0xAA01             ADD      R2,SP,#+4
   \       0x3A   0x4639             MOV      R1,R7
   \       0x3C   0x4628             MOV      R0,R5
   \       0x3E   0x....'....        BL       mbedtls_asn1_get_bitstring_null
   \       0x42   0x2800             CMP      R0,#+0
   \       0x44   0xD002             BEQ.N    ??mbedtls_pk_parse_subpubkey_3
    620                  return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
   \       0x46   0xF5A0 0x506C      SUB      R0,R0,#+15104
   \       0x4A   0xE04D             B.N      ??mbedtls_pk_parse_subpubkey_1
    621          
    622              if( *p + len != end )
   \                     ??mbedtls_pk_parse_subpubkey_3: (+1)
   \       0x4C   0x6828             LDR      R0,[R5, #+0]
   \       0x4E   0x9901             LDR      R1,[SP, #+4]
   \       0x50   0x4408             ADD      R0,R0,R1
   \       0x52   0x42B8             CMP      R0,R7
   \       0x54   0xD002             BEQ.N    ??mbedtls_pk_parse_subpubkey_4
    623                  return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
    624                          MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   \       0x56   0x....'....        LDR.W    R0,??DataTable13  ;; 0xffffc49a
   \       0x5A   0xE045             B.N      ??mbedtls_pk_parse_subpubkey_1
    625          
    626              if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
   \                     ??mbedtls_pk_parse_subpubkey_4: (+1)
   \       0x5C   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \       0x60   0x....'....        BL       mbedtls_pk_info_from_type
   \       0x64   0x2800             CMP      R0,#+0
   \       0x66   0xD102             BNE.N    ??mbedtls_pk_parse_subpubkey_5
    627                  return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
   \       0x68   0x....'....        LDR.W    R0,??DataTable13_2  ;; 0xffffc380
   \       0x6C   0xE03C             B.N      ??mbedtls_pk_parse_subpubkey_1
    628          
    629              if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 )
   \                     ??mbedtls_pk_parse_subpubkey_5: (+1)
   \       0x6E   0x4601             MOV      R1,R0
   \       0x70   0x4630             MOV      R0,R6
   \       0x72   0x....'....        BL       mbedtls_pk_setup
   \       0x76   0x0004             MOVS     R4,R0
   \       0x78   0xD135             BNE.N    ??mbedtls_pk_parse_subpubkey_2
    630                  return( ret );
    631          
    632          #if defined(MBEDTLS_RSA_C)
    633              if( pk_alg == MBEDTLS_PK_RSA )
   \       0x7A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \       0x7E   0x2801             CMP      R0,#+1
   \       0x80   0xD10A             BNE.N    ??mbedtls_pk_parse_subpubkey_6
    634              {
    635                  ret = pk_get_rsapubkey( p, end, mbedtls_pk_rsa( *pk ) );
   \       0x82   0xE9D6 0x0100      LDRD     R0,R1,[R6, #+0]
   \       0x86   0x....'....        BL       mbedtls_pk_rsa
   \       0x8A   0x4602             MOV      R2,R0
   \       0x8C   0x4639             MOV      R1,R7
   \       0x8E   0x4628             MOV      R0,R5
   \       0x90   0x....'....        BL       pk_get_rsapubkey
   \       0x94   0x4604             MOV      R4,R0
   \       0x96   0xE01A             B.N      ??mbedtls_pk_parse_subpubkey_7
    636              } else
    637          #endif /* MBEDTLS_RSA_C */
    638          #if defined(MBEDTLS_ECP_C)
    639              if( pk_alg == MBEDTLS_PK_ECKEY_DH || pk_alg == MBEDTLS_PK_ECKEY )
   \                     ??mbedtls_pk_parse_subpubkey_6: (+1)
   \       0x98   0x2803             CMP      R0,#+3
   \       0x9A   0xD001             BEQ.N    ??mbedtls_pk_parse_subpubkey_8
   \       0x9C   0x2802             CMP      R0,#+2
   \       0x9E   0xD114             BNE.N    ??mbedtls_pk_parse_subpubkey_9
    640              {
    641                  ret = pk_use_ecparams( &alg_params, &mbedtls_pk_ec( *pk )->grp );
   \                     ??mbedtls_pk_parse_subpubkey_8: (+1)
   \       0xA0   0xE9D6 0x0100      LDRD     R0,R1,[R6, #+0]
   \       0xA4   0x....'....        BL       mbedtls_pk_ec
   \       0xA8   0x4601             MOV      R1,R0
   \       0xAA   0xA802             ADD      R0,SP,#+8
   \       0xAC   0x....'....        BL       pk_use_ecparams
   \       0xB0   0x0004             MOVS     R4,R0
    642                  if( ret == 0 )
   \       0xB2   0xD10C             BNE.N    ??mbedtls_pk_parse_subpubkey_7
    643                      ret = pk_get_ecpubkey( p, end, mbedtls_pk_ec( *pk ) );
   \       0xB4   0xE9D6 0x0100      LDRD     R0,R1,[R6, #+0]
   \       0xB8   0x....'....        BL       mbedtls_pk_ec
   \       0xBC   0x4602             MOV      R2,R0
   \       0xBE   0x4639             MOV      R1,R7
   \       0xC0   0x4628             MOV      R0,R5
   \       0xC2   0x....'....        BL       pk_get_ecpubkey
   \       0xC6   0x4604             MOV      R4,R0
   \       0xC8   0xE001             B.N      ??mbedtls_pk_parse_subpubkey_7
    644              } else
    645          #endif /* MBEDTLS_ECP_C */
    646                  ret = MBEDTLS_ERR_PK_UNKNOWN_PK_ALG;
   \                     ??mbedtls_pk_parse_subpubkey_9: (+1)
   \       0xCA   0x....'....        LDR.W    R4,??DataTable13_2  ;; 0xffffc380
    647          
    648              if( ret == 0 && *p != end )
   \                     ??mbedtls_pk_parse_subpubkey_7: (+1)
   \       0xCE   0x2C00             CMP      R4,#+0
   \       0xD0   0xD104             BNE.N    ??mbedtls_pk_parse_subpubkey_10
   \       0xD2   0x6828             LDR      R0,[R5, #+0]
   \       0xD4   0x42B8             CMP      R0,R7
   \       0xD6   0xD001             BEQ.N    ??mbedtls_pk_parse_subpubkey_10
    649                  ret = MBEDTLS_ERR_PK_INVALID_PUBKEY
    650                        MBEDTLS_ERR_ASN1_LENGTH_MISMATCH;
   \       0xD8   0x....'....        LDR.W    R4,??DataTable13  ;; 0xffffc49a
    651          
    652              if( ret != 0 )
   \                     ??mbedtls_pk_parse_subpubkey_10: (+1)
   \       0xDC   0x2C00             CMP      R4,#+0
   \       0xDE   0xD002             BEQ.N    ??mbedtls_pk_parse_subpubkey_2
    653                  mbedtls_pk_free( pk );
   \       0xE0   0x4630             MOV      R0,R6
   \       0xE2   0x....'....        BL       mbedtls_pk_free
    654          
    655              return( ret );
   \                     ??mbedtls_pk_parse_subpubkey_2: (+1)
   \       0xE6   0x4620             MOV      R0,R4
   \                     ??mbedtls_pk_parse_subpubkey_1: (+1)
   \       0xE8   0xB005             ADD      SP,SP,#+20
   \       0xEA   0xBDF0             POP      {R4-R7,PC}       ;; return
    656          }
    657          
    658          #if defined(MBEDTLS_RSA_C)
    659          /*
    660           * Parse a PKCS#1 encoded private RSA key
    661           */

   \                                 In section .text, align 2, keep-with-next
    662          static int pk_parse_key_pkcs1_der( mbedtls_rsa_context *rsa,
    663                                             const unsigned char *key,
    664                                             size_t keylen )
    665          {
   \                     pk_parse_key_pkcs1_der: (+1)
   \        0x0   0xB578             PUSH     {R3-R6,LR}
   \        0x2   0xB08D             SUB      SP,SP,#+52
   \        0x4   0x4606             MOV      R6,R0
   \        0x6   0x460C             MOV      R4,R1
   \        0x8   0x4615             MOV      R5,R2
    666              int ret, version;
    667              size_t len;
    668              unsigned char *p, *end;
    669          
    670              mbedtls_mpi T;
    671              mbedtls_mpi_init( &T );
   \        0xA   0xA80A             ADD      R0,SP,#+40
   \        0xC   0x....'....        BL       mbedtls_mpi_init
    672          
    673              p = (unsigned char *) key;
   \       0x10   0x9407             STR      R4,[SP, #+28]
    674              end = p + keylen;
    675          
    676              /*
    677               * This function parses the RSAPrivateKey (PKCS#1)
    678               *
    679               *  RSAPrivateKey ::= SEQUENCE {
    680               *      version           Version,
    681               *      modulus           INTEGER,  -- n
    682               *      publicExponent    INTEGER,  -- e
    683               *      privateExponent   INTEGER,  -- d
    684               *      prime1            INTEGER,  -- p
    685               *      prime2            INTEGER,  -- q
    686               *      exponent1         INTEGER,  -- d mod (p-1)
    687               *      exponent2         INTEGER,  -- d mod (q-1)
    688               *      coefficient       INTEGER,  -- (inverse of q) mod p
    689               *      otherPrimeInfos   OtherPrimeInfos OPTIONAL
    690               *  }
    691               */
    692              if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
    693                      MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
   \       0x12   0x2330             MOVS     R3,#+48
   \       0x14   0xAA08             ADD      R2,SP,#+32
   \       0x16   0x4620             MOV      R0,R4
   \       0x18   0x1941             ADDS     R1,R0,R5
   \       0x1A   0xA807             ADD      R0,SP,#+28
   \       0x1C   0x....'....        BL       mbedtls_asn1_get_tag
   \       0x20   0x2800             CMP      R0,#+0
   \       0x22   0xD109             BNE.N    ??pk_parse_key_pkcs1_der_0
    694              {
    695                  return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    696              }
    697          
    698              end = p + len;
   \       0x24   0x9807             LDR      R0,[SP, #+28]
   \       0x26   0x9908             LDR      R1,[SP, #+32]
   \       0x28   0x1845             ADDS     R5,R0,R1
    699          
    700              if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
   \       0x2A   0xAA09             ADD      R2,SP,#+36
   \       0x2C   0x4629             MOV      R1,R5
   \       0x2E   0xA807             ADD      R0,SP,#+28
   \       0x30   0x....'....        BL       mbedtls_asn1_get_int
   \       0x34   0x2800             CMP      R0,#+0
   \       0x36   0xD002             BEQ.N    ??pk_parse_key_pkcs1_der_1
    701              {
    702                  return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
   \                     ??pk_parse_key_pkcs1_der_0: (+1)
   \       0x38   0xF5A0 0x5074      SUB      R0,R0,#+15616
   \       0x3C   0xE0CE             B.N      ??pk_parse_key_pkcs1_der_2
    703              }
    704          
    705              if( version != 0 )
   \                     ??pk_parse_key_pkcs1_der_1: (+1)
   \       0x3E   0x9809             LDR      R0,[SP, #+36]
   \       0x40   0x2800             CMP      R0,#+0
   \       0x42   0xD002             BEQ.N    ??pk_parse_key_pkcs1_der_3
    706              {
    707                  return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );
   \       0x44   0x....'....        LDR.W    R0,??DataTable13_4  ;; 0xffffc280
   \       0x48   0xE0C8             B.N      ??pk_parse_key_pkcs1_der_2
    708              }
    709          
    710              /* Import N */
    711              if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
    712                                                MBEDTLS_ASN1_INTEGER ) ) != 0 ||
    713                  ( ret = mbedtls_rsa_import_raw( rsa, p, len, NULL, 0, NULL, 0,
    714                                                  NULL, 0, NULL, 0 ) ) != 0 )
   \                     ??pk_parse_key_pkcs1_der_3: (+1)
   \       0x4A   0x2302             MOVS     R3,#+2
   \       0x4C   0xAA08             ADD      R2,SP,#+32
   \       0x4E   0x4629             MOV      R1,R5
   \       0x50   0xA807             ADD      R0,SP,#+28
   \       0x52   0x....'....        BL       mbedtls_asn1_get_tag
   \       0x56   0x0004             MOVS     R4,R0
   \       0x58   0xF040 0x80AE      BNE.W    ??pk_parse_key_pkcs1_der_4
   \       0x5C   0x2000             MOVS     R0,#+0
   \       0x5E   0x9006             STR      R0,[SP, #+24]
   \       0x60   0x9005             STR      R0,[SP, #+20]
   \       0x62   0x9004             STR      R0,[SP, #+16]
   \       0x64   0x9003             STR      R0,[SP, #+12]
   \       0x66   0x9002             STR      R0,[SP, #+8]
   \       0x68   0x9001             STR      R0,[SP, #+4]
   \       0x6A   0x9000             STR      R0,[SP, #+0]
   \       0x6C   0x4603             MOV      R3,R0
   \       0x6E   0x9A08             LDR      R2,[SP, #+32]
   \       0x70   0x9907             LDR      R1,[SP, #+28]
   \       0x72   0x4630             MOV      R0,R6
   \       0x74   0x....'....        BL       mbedtls_rsa_import_raw
   \       0x78   0x0004             MOVS     R4,R0
   \       0x7A   0xF040 0x809D      BNE.W    ??pk_parse_key_pkcs1_der_4
    715                  goto cleanup;
    716              p += len;
   \       0x7E   0x9807             LDR      R0,[SP, #+28]
   \       0x80   0x9908             LDR      R1,[SP, #+32]
   \       0x82   0x4408             ADD      R0,R0,R1
   \       0x84   0x9007             STR      R0,[SP, #+28]
    717          
    718              /* Import E */
    719              if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
    720                                                MBEDTLS_ASN1_INTEGER ) ) != 0 ||
    721                  ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
    722                                                  NULL, 0, p, len ) ) != 0 )
   \       0x86   0x2302             MOVS     R3,#+2
   \       0x88   0xAA08             ADD      R2,SP,#+32
   \       0x8A   0x4629             MOV      R1,R5
   \       0x8C   0xA807             ADD      R0,SP,#+28
   \       0x8E   0x....'....        BL       mbedtls_asn1_get_tag
   \       0x92   0x0004             MOVS     R4,R0
   \       0x94   0xF040 0x8090      BNE.W    ??pk_parse_key_pkcs1_der_4
   \       0x98   0x9808             LDR      R0,[SP, #+32]
   \       0x9A   0x9006             STR      R0,[SP, #+24]
   \       0x9C   0x9807             LDR      R0,[SP, #+28]
   \       0x9E   0x9005             STR      R0,[SP, #+20]
   \       0xA0   0x2000             MOVS     R0,#+0
   \       0xA2   0x9004             STR      R0,[SP, #+16]
   \       0xA4   0x9003             STR      R0,[SP, #+12]
   \       0xA6   0x9002             STR      R0,[SP, #+8]
   \       0xA8   0x9001             STR      R0,[SP, #+4]
   \       0xAA   0x9000             STR      R0,[SP, #+0]
   \       0xAC   0x4603             MOV      R3,R0
   \       0xAE   0x4602             MOV      R2,R0
   \       0xB0   0x4601             MOV      R1,R0
   \       0xB2   0x4630             MOV      R0,R6
   \       0xB4   0x....'....        BL       mbedtls_rsa_import_raw
   \       0xB8   0x0004             MOVS     R4,R0
   \       0xBA   0xD17D             BNE.N    ??pk_parse_key_pkcs1_der_4
    723                  goto cleanup;
    724              p += len;
   \       0xBC   0x9807             LDR      R0,[SP, #+28]
   \       0xBE   0x9908             LDR      R1,[SP, #+32]
   \       0xC0   0x4408             ADD      R0,R0,R1
   \       0xC2   0x9007             STR      R0,[SP, #+28]
    725          
    726              /* Import D */
    727              if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
    728                                                MBEDTLS_ASN1_INTEGER ) ) != 0 ||
    729                  ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
    730                                                  p, len, NULL, 0 ) ) != 0 )
   \       0xC4   0x2302             MOVS     R3,#+2
   \       0xC6   0xAA08             ADD      R2,SP,#+32
   \       0xC8   0x4629             MOV      R1,R5
   \       0xCA   0xA807             ADD      R0,SP,#+28
   \       0xCC   0x....'....        BL       mbedtls_asn1_get_tag
   \       0xD0   0x0004             MOVS     R4,R0
   \       0xD2   0xD171             BNE.N    ??pk_parse_key_pkcs1_der_4
   \       0xD4   0x2000             MOVS     R0,#+0
   \       0xD6   0x9006             STR      R0,[SP, #+24]
   \       0xD8   0x9005             STR      R0,[SP, #+20]
   \       0xDA   0x9808             LDR      R0,[SP, #+32]
   \       0xDC   0x9004             STR      R0,[SP, #+16]
   \       0xDE   0x9807             LDR      R0,[SP, #+28]
   \       0xE0   0x9003             STR      R0,[SP, #+12]
   \       0xE2   0x2000             MOVS     R0,#+0
   \       0xE4   0x9002             STR      R0,[SP, #+8]
   \       0xE6   0x9001             STR      R0,[SP, #+4]
   \       0xE8   0x9000             STR      R0,[SP, #+0]
   \       0xEA   0x4603             MOV      R3,R0
   \       0xEC   0x4602             MOV      R2,R0
   \       0xEE   0x4601             MOV      R1,R0
   \       0xF0   0x4630             MOV      R0,R6
   \       0xF2   0x....'....        BL       mbedtls_rsa_import_raw
   \       0xF6   0x0004             MOVS     R4,R0
   \       0xF8   0xD15E             BNE.N    ??pk_parse_key_pkcs1_der_4
    731                  goto cleanup;
    732              p += len;
   \       0xFA   0x9807             LDR      R0,[SP, #+28]
   \       0xFC   0x9908             LDR      R1,[SP, #+32]
   \       0xFE   0x4408             ADD      R0,R0,R1
   \      0x100   0x9007             STR      R0,[SP, #+28]
    733          
    734              /* Import P */
    735              if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
    736                                                MBEDTLS_ASN1_INTEGER ) ) != 0 ||
    737                  ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, p, len, NULL, 0,
    738                                                  NULL, 0, NULL, 0 ) ) != 0 )
   \      0x102   0x2302             MOVS     R3,#+2
   \      0x104   0xAA08             ADD      R2,SP,#+32
   \      0x106   0x4629             MOV      R1,R5
   \      0x108   0xA807             ADD      R0,SP,#+28
   \      0x10A   0x....'....        BL       mbedtls_asn1_get_tag
   \      0x10E   0x0004             MOVS     R4,R0
   \      0x110   0xD152             BNE.N    ??pk_parse_key_pkcs1_der_4
   \      0x112   0x2000             MOVS     R0,#+0
   \      0x114   0x9006             STR      R0,[SP, #+24]
   \      0x116   0x9005             STR      R0,[SP, #+20]
   \      0x118   0x9004             STR      R0,[SP, #+16]
   \      0x11A   0x9003             STR      R0,[SP, #+12]
   \      0x11C   0x9002             STR      R0,[SP, #+8]
   \      0x11E   0x9001             STR      R0,[SP, #+4]
   \      0x120   0x9808             LDR      R0,[SP, #+32]
   \      0x122   0x9000             STR      R0,[SP, #+0]
   \      0x124   0x9B07             LDR      R3,[SP, #+28]
   \      0x126   0x2200             MOVS     R2,#+0
   \      0x128   0x4611             MOV      R1,R2
   \      0x12A   0x4630             MOV      R0,R6
   \      0x12C   0x....'....        BL       mbedtls_rsa_import_raw
   \      0x130   0x0004             MOVS     R4,R0
   \      0x132   0xD141             BNE.N    ??pk_parse_key_pkcs1_der_4
    739                  goto cleanup;
    740              p += len;
   \      0x134   0x9807             LDR      R0,[SP, #+28]
   \      0x136   0x9908             LDR      R1,[SP, #+32]
   \      0x138   0x4408             ADD      R0,R0,R1
   \      0x13A   0x9007             STR      R0,[SP, #+28]
    741          
    742              /* Import Q */
    743              if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
    744                                                MBEDTLS_ASN1_INTEGER ) ) != 0 ||
    745                  ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, p, len,
    746                                                  NULL, 0, NULL, 0 ) ) != 0 )
   \      0x13C   0x2302             MOVS     R3,#+2
   \      0x13E   0xAA08             ADD      R2,SP,#+32
   \      0x140   0x4629             MOV      R1,R5
   \      0x142   0xA807             ADD      R0,SP,#+28
   \      0x144   0x....'....        BL       mbedtls_asn1_get_tag
   \      0x148   0x0004             MOVS     R4,R0
   \      0x14A   0xD135             BNE.N    ??pk_parse_key_pkcs1_der_4
   \      0x14C   0x2000             MOVS     R0,#+0
   \      0x14E   0x9006             STR      R0,[SP, #+24]
   \      0x150   0x9005             STR      R0,[SP, #+20]
   \      0x152   0x9004             STR      R0,[SP, #+16]
   \      0x154   0x9003             STR      R0,[SP, #+12]
   \      0x156   0x9808             LDR      R0,[SP, #+32]
   \      0x158   0x9002             STR      R0,[SP, #+8]
   \      0x15A   0x9807             LDR      R0,[SP, #+28]
   \      0x15C   0x9001             STR      R0,[SP, #+4]
   \      0x15E   0x2000             MOVS     R0,#+0
   \      0x160   0x9000             STR      R0,[SP, #+0]
   \      0x162   0x4603             MOV      R3,R0
   \      0x164   0x4602             MOV      R2,R0
   \      0x166   0x4601             MOV      R1,R0
   \      0x168   0x4630             MOV      R0,R6
   \      0x16A   0x....'....        BL       mbedtls_rsa_import_raw
   \      0x16E   0x0004             MOVS     R4,R0
   \      0x170   0xD122             BNE.N    ??pk_parse_key_pkcs1_der_4
    747                  goto cleanup;
    748              p += len;
   \      0x172   0x9807             LDR      R0,[SP, #+28]
   \      0x174   0x9908             LDR      R1,[SP, #+32]
   \      0x176   0x4408             ADD      R0,R0,R1
   \      0x178   0x9007             STR      R0,[SP, #+28]
    749          
    750              /* Complete the RSA private key */
    751              if( ( ret = mbedtls_rsa_complete( rsa ) ) != 0 )
   \      0x17A   0x4630             MOV      R0,R6
   \      0x17C   0x....'....        BL       mbedtls_rsa_complete
   \      0x180   0x0004             MOVS     R4,R0
   \      0x182   0xD119             BNE.N    ??pk_parse_key_pkcs1_der_4
    752                  goto cleanup;
    753          
    754              /* Check optional parameters */
    755              if( ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
    756                  ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
    757                  ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 )
   \      0x184   0xAA0A             ADD      R2,SP,#+40
   \      0x186   0x4629             MOV      R1,R5
   \      0x188   0xA807             ADD      R0,SP,#+28
   \      0x18A   0x....'....        BL       mbedtls_asn1_get_mpi
   \      0x18E   0x0004             MOVS     R4,R0
   \      0x190   0xD112             BNE.N    ??pk_parse_key_pkcs1_der_4
   \      0x192   0xAA0A             ADD      R2,SP,#+40
   \      0x194   0x4629             MOV      R1,R5
   \      0x196   0xA807             ADD      R0,SP,#+28
   \      0x198   0x....'....        BL       mbedtls_asn1_get_mpi
   \      0x19C   0x0004             MOVS     R4,R0
   \      0x19E   0xD10B             BNE.N    ??pk_parse_key_pkcs1_der_4
   \      0x1A0   0xAA0A             ADD      R2,SP,#+40
   \      0x1A2   0x4629             MOV      R1,R5
   \      0x1A4   0xA807             ADD      R0,SP,#+28
   \      0x1A6   0x....'....        BL       mbedtls_asn1_get_mpi
   \      0x1AA   0x0004             MOVS     R4,R0
   \      0x1AC   0xD104             BNE.N    ??pk_parse_key_pkcs1_der_4
    758                  goto cleanup;
    759          
    760              if( p != end )
   \      0x1AE   0x9807             LDR      R0,[SP, #+28]
   \      0x1B0   0x42A8             CMP      R0,R5
   \      0x1B2   0xD001             BEQ.N    ??pk_parse_key_pkcs1_der_4
    761              {
    762                  ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
    763                        MBEDTLS_ERR_ASN1_LENGTH_MISMATCH ;
   \      0x1B4   0x....'....        LDR.W    R4,??DataTable11_2  ;; 0xffffc29a
    764              }
    765          
    766          cleanup:
    767          
    768              mbedtls_mpi_free( &T );
   \                     ??pk_parse_key_pkcs1_der_4: (+1)
   \      0x1B8   0xA80A             ADD      R0,SP,#+40
   \      0x1BA   0x....'....        BL       mbedtls_mpi_free
    769          
    770              if( ret != 0 )
   \      0x1BE   0x2C00             CMP      R4,#+0
   \      0x1C0   0xD00B             BEQ.N    ??pk_parse_key_pkcs1_der_5
    771              {
    772                  /* Wrap error code if it's coming from a lower level */
    773                  if( ( ret & 0xff80 ) == 0 )
   \      0x1C2   0xF64F 0x7080      MOVW     R0,#+65408
   \      0x1C6   0x4204             TST      R4,R0
   \      0x1C8   0xD102             BNE.N    ??pk_parse_key_pkcs1_der_6
    774                      ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret;
   \      0x1CA   0xF5A4 0x5474      SUB      R4,R4,#+15616
   \      0x1CE   0xE001             B.N      ??pk_parse_key_pkcs1_der_7
    775                  else
    776                      ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT;
   \                     ??pk_parse_key_pkcs1_der_6: (+1)
   \      0x1D0   0x....'....        LDR.W    R4,??DataTable12  ;; 0xffffc300
    777          
    778                  mbedtls_rsa_free( rsa );
   \                     ??pk_parse_key_pkcs1_der_7: (+1)
   \      0x1D4   0x4630             MOV      R0,R6
   \      0x1D6   0x....'....        BL       mbedtls_rsa_free
    779              }
    780          
    781              return( ret );
   \                     ??pk_parse_key_pkcs1_der_5: (+1)
   \      0x1DA   0x4620             MOV      R0,R4
   \                     ??pk_parse_key_pkcs1_der_2: (+1)
   \      0x1DC   0xB00E             ADD      SP,SP,#+56
   \      0x1DE   0xBD70             POP      {R4-R6,PC}       ;; return
    782          }
    783          #endif /* MBEDTLS_RSA_C */
    784          
    785          #if defined(MBEDTLS_ECP_C)
    786          /*
    787           * Parse a SEC1 encoded private EC key
    788           */

   \                                 In section .text, align 2, keep-with-next
    789          static int pk_parse_key_sec1_der( mbedtls_ecp_keypair *eck,
    790                                            const unsigned char *key,
    791                                            size_t keylen )
    792          {
   \                     pk_parse_key_sec1_der: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0xB088             SUB      SP,SP,#+32
   \        0x4   0x4606             MOV      R6,R0
   \        0x6   0x4610             MOV      R0,R2
    793              int ret;
    794              int version, pubkey_done;
    795              size_t len;
    796              mbedtls_asn1_buf params;
    797              unsigned char *p = (unsigned char *) key;
   \        0x8   0x9102             STR      R1,[SP, #+8]
    798              unsigned char *end = p + keylen;
    799              unsigned char *end2;
    800          
    801              /*
    802               * RFC 5915, or SEC1 Appendix C.4
    803               *
    804               * ECPrivateKey ::= SEQUENCE {
    805               *      version        INTEGER { ecPrivkeyVer1(1) } (ecPrivkeyVer1),
    806               *      privateKey     OCTET STRING,
    807               *      parameters [0] ECParameters {{ NamedCurve }} OPTIONAL,
    808               *      publicKey  [1] BIT STRING OPTIONAL
    809               *    }
    810               */
    811              if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
    812                      MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
   \        0xA   0x2330             MOVS     R3,#+48
   \        0xC   0xAA03             ADD      R2,SP,#+12
   \        0xE   0x4401             ADD      R1,R1,R0
   \       0x10   0xA802             ADD      R0,SP,#+8
   \       0x12   0x....'....        BL       mbedtls_asn1_get_tag
   \       0x16   0x2800             CMP      R0,#+0
   \       0x18   0xD156             BNE.N    ??pk_parse_key_sec1_der_0
    813              {
    814                  return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    815              }
    816          
    817              end = p + len;
   \       0x1A   0x9802             LDR      R0,[SP, #+8]
   \       0x1C   0x9903             LDR      R1,[SP, #+12]
   \       0x1E   0x1847             ADDS     R7,R0,R1
    818          
    819              if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
   \       0x20   0xAA04             ADD      R2,SP,#+16
   \       0x22   0x4639             MOV      R1,R7
   \       0x24   0xA802             ADD      R0,SP,#+8
   \       0x26   0x....'....        BL       mbedtls_asn1_get_int
   \       0x2A   0x2800             CMP      R0,#+0
   \       0x2C   0xD14C             BNE.N    ??pk_parse_key_sec1_der_0
    820                  return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    821          
    822              if( version != 1 )
   \       0x2E   0x9804             LDR      R0,[SP, #+16]
   \       0x30   0x2801             CMP      R0,#+1
   \       0x32   0xD002             BEQ.N    ??pk_parse_key_sec1_der_1
    823                  return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );
   \       0x34   0x....'....        LDR.W    R0,??DataTable13_4  ;; 0xffffc280
   \       0x38   0xE086             B.N      ??pk_parse_key_sec1_der_2
    824          
    825              if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
   \                     ??pk_parse_key_sec1_der_1: (+1)
   \       0x3A   0x2304             MOVS     R3,#+4
   \       0x3C   0xAA03             ADD      R2,SP,#+12
   \       0x3E   0x4639             MOV      R1,R7
   \       0x40   0xA802             ADD      R0,SP,#+8
   \       0x42   0x....'....        BL       mbedtls_asn1_get_tag
   \       0x46   0x2800             CMP      R0,#+0
   \       0x48   0xD13E             BNE.N    ??pk_parse_key_sec1_der_0
    826                  return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    827          
    828              if( ( ret = mbedtls_mpi_read_binary( &eck->d, p, len ) ) != 0 )
   \       0x4A   0x9A03             LDR      R2,[SP, #+12]
   \       0x4C   0x9902             LDR      R1,[SP, #+8]
   \       0x4E   0xF106 0x007C      ADD      R0,R6,#+124
   \       0x52   0x....'....        BL       mbedtls_mpi_read_binary
   \       0x56   0x0004             MOVS     R4,R0
   \       0x58   0xD162             BNE.N    ??pk_parse_key_sec1_der_3
    829              {
    830                  mbedtls_ecp_keypair_free( eck );
    831                  return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    832              }
    833          
    834              p += len;
   \       0x5A   0x9802             LDR      R0,[SP, #+8]
   \       0x5C   0x9903             LDR      R1,[SP, #+12]
   \       0x5E   0x4408             ADD      R0,R0,R1
   \       0x60   0x9002             STR      R0,[SP, #+8]
    835          
    836              pubkey_done = 0;
   \       0x62   0x2500             MOVS     R5,#+0
    837              if( p != end )
   \       0x64   0x42B8             CMP      R0,R7
   \       0x66   0xD01A             BEQ.N    ??pk_parse_key_sec1_der_4
    838              {
    839                  /*
    840                   * Is 'parameters' present?
    841                   */
    842                  if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
    843                                  MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 0 ) ) == 0 )
   \       0x68   0x23A0             MOVS     R3,#+160
   \       0x6A   0xAA03             ADD      R2,SP,#+12
   \       0x6C   0x4639             MOV      R1,R7
   \       0x6E   0xA802             ADD      R0,SP,#+8
   \       0x70   0x....'....        BL       mbedtls_asn1_get_tag
   \       0x74   0x0004             MOVS     R4,R0
   \       0x76   0xD10F             BNE.N    ??pk_parse_key_sec1_der_5
    844                  {
    845                      if( ( ret = pk_get_ecparams( &p, p + len, &params) ) != 0 ||
    846                          ( ret = pk_use_ecparams( &params, &eck->grp )  ) != 0 )
   \       0x78   0xAA05             ADD      R2,SP,#+20
   \       0x7A   0x9802             LDR      R0,[SP, #+8]
   \       0x7C   0x9903             LDR      R1,[SP, #+12]
   \       0x7E   0x4401             ADD      R1,R0,R1
   \       0x80   0xA802             ADD      R0,SP,#+8
   \       0x82   0x....'....        BL       pk_get_ecparams
   \       0x86   0x0004             MOVS     R4,R0
   \       0x88   0xD158             BNE.N    ??pk_parse_key_sec1_der_6
   \       0x8A   0x4631             MOV      R1,R6
   \       0x8C   0xA805             ADD      R0,SP,#+20
   \       0x8E   0x....'....        BL       pk_use_ecparams
   \       0x92   0x0004             MOVS     R4,R0
   \       0x94   0xD152             BNE.N    ??pk_parse_key_sec1_der_6
   \       0x96   0xE002             B.N      ??pk_parse_key_sec1_der_4
    847                      {
    848                          mbedtls_ecp_keypair_free( eck );
    849                          return( ret );
    850                      }
    851                  }
    852                  else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   \                     ??pk_parse_key_sec1_der_5: (+1)
   \       0x98   0xF114 0x0F62      CMN      R4,#+98
   \       0x9C   0xD140             BNE.N    ??pk_parse_key_sec1_der_3
    853                  {
    854                      mbedtls_ecp_keypair_free( eck );
    855                      return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    856                  }
    857              }
    858          
    859              if( p != end )
   \                     ??pk_parse_key_sec1_der_4: (+1)
   \       0x9E   0x9802             LDR      R0,[SP, #+8]
   \       0xA0   0x42B8             CMP      R0,R7
   \       0xA2   0xD02D             BEQ.N    ??pk_parse_key_sec1_der_7
    860              {
    861                  /*
    862                   * Is 'publickey' present? If not, or if we can't read it (eg because it
    863                   * is compressed), create it from the private key.
    864                   */
    865                  if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
    866                                  MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 1 ) ) == 0 )
   \       0xA4   0x23A1             MOVS     R3,#+161
   \       0xA6   0xAA03             ADD      R2,SP,#+12
   \       0xA8   0x4639             MOV      R1,R7
   \       0xAA   0xA802             ADD      R0,SP,#+8
   \       0xAC   0x....'....        BL       mbedtls_asn1_get_tag
   \       0xB0   0x0004             MOVS     R4,R0
   \       0xB2   0xD122             BNE.N    ??pk_parse_key_sec1_der_8
    867                  {
    868                      end2 = p + len;
   \       0xB4   0x9802             LDR      R0,[SP, #+8]
   \       0xB6   0x9903             LDR      R1,[SP, #+12]
   \       0xB8   0x1844             ADDS     R4,R0,R1
    869          
    870                      if( ( ret = mbedtls_asn1_get_bitstring_null( &p, end2, &len ) ) != 0 )
   \       0xBA   0xAA03             ADD      R2,SP,#+12
   \       0xBC   0x4621             MOV      R1,R4
   \       0xBE   0xA802             ADD      R0,SP,#+8
   \       0xC0   0x....'....        BL       mbedtls_asn1_get_bitstring_null
   \       0xC4   0x2800             CMP      R0,#+0
   \       0xC6   0xD002             BEQ.N    ??pk_parse_key_sec1_der_9
    871                          return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
   \                     ??pk_parse_key_sec1_der_0: (+1)
   \       0xC8   0xF5A0 0x5074      SUB      R0,R0,#+15616
   \       0xCC   0xE03C             B.N      ??pk_parse_key_sec1_der_2
    872          
    873                      if( p + len != end2 )
   \                     ??pk_parse_key_sec1_der_9: (+1)
   \       0xCE   0x9802             LDR      R0,[SP, #+8]
   \       0xD0   0x9903             LDR      R1,[SP, #+12]
   \       0xD2   0x4408             ADD      R0,R0,R1
   \       0xD4   0x42A0             CMP      R0,R4
   \       0xD6   0xD001             BEQ.N    ??pk_parse_key_sec1_der_10
    874                          return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
    875                                  MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   \       0xD8   0x....             LDR.N    R0,??DataTable11_2  ;; 0xffffc29a
   \       0xDA   0xE035             B.N      ??pk_parse_key_sec1_der_2
    876          
    877                      if( ( ret = pk_get_ecpubkey( &p, end2, eck ) ) == 0 )
   \                     ??pk_parse_key_sec1_der_10: (+1)
   \       0xDC   0x4632             MOV      R2,R6
   \       0xDE   0x4621             MOV      R1,R4
   \       0xE0   0xA802             ADD      R0,SP,#+8
   \       0xE2   0x....'....        BL       pk_get_ecpubkey
   \       0xE6   0x2800             CMP      R0,#+0
   \       0xE8   0xD101             BNE.N    ??pk_parse_key_sec1_der_11
    878                          pubkey_done = 1;
   \       0xEA   0x2501             MOVS     R5,#+1
   \       0xEC   0xE008             B.N      ??pk_parse_key_sec1_der_7
    879                      else
    880                      {
    881                          /*
    882                           * The only acceptable failure mode of pk_get_ecpubkey() above
    883                           * is if the point format is not recognized.
    884                           */
    885                          if( ret != MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE )
   \                     ??pk_parse_key_sec1_der_11: (+1)
   \       0xEE   0xF510 0x4F9D      CMN      R0,#+20096
   \       0xF2   0xD005             BEQ.N    ??pk_parse_key_sec1_der_7
    886                              return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
   \       0xF4   0x....'....        LDR.W    R0,??DataTable12  ;; 0xffffc300
   \       0xF8   0xE026             B.N      ??pk_parse_key_sec1_der_2
    887                      }
    888                  }
    889                  else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   \                     ??pk_parse_key_sec1_der_8: (+1)
   \       0xFA   0xF114 0x0F62      CMN      R4,#+98
   \       0xFE   0xD10F             BNE.N    ??pk_parse_key_sec1_der_3
    890                  {
    891                      mbedtls_ecp_keypair_free( eck );
    892                      return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    893                  }
    894              }
    895          
    896              if( ! pubkey_done &&
    897                  ( ret = mbedtls_ecp_mul( &eck->grp, &eck->Q, &eck->d, &eck->grp.G,
    898                                                                NULL, NULL ) ) != 0 )
   \                     ??pk_parse_key_sec1_der_7: (+1)
   \      0x100   0x2D00             CMP      R5,#+0
   \      0x102   0xD114             BNE.N    ??pk_parse_key_sec1_der_12
   \      0x104   0x2000             MOVS     R0,#+0
   \      0x106   0x9001             STR      R0,[SP, #+4]
   \      0x108   0x9000             STR      R0,[SP, #+0]
   \      0x10A   0xF106 0x0328      ADD      R3,R6,#+40
   \      0x10E   0xF106 0x027C      ADD      R2,R6,#+124
   \      0x112   0xF106 0x0188      ADD      R1,R6,#+136
   \      0x116   0x4630             MOV      R0,R6
   \      0x118   0x....'....        BL       mbedtls_ecp_mul
   \      0x11C   0x0004             MOVS     R4,R0
   \      0x11E   0xD006             BEQ.N    ??pk_parse_key_sec1_der_12
    899              {
    900                  mbedtls_ecp_keypair_free( eck );
   \                     ??pk_parse_key_sec1_der_3: (+1)
   \      0x120   0x4630             MOV      R0,R6
   \      0x122   0x....'....        BL       mbedtls_ecp_keypair_free
    901                  return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
   \      0x126   0xF5A4 0x5474      SUB      R4,R4,#+15616
   \      0x12A   0x4620             MOV      R0,R4
   \      0x12C   0xE00C             B.N      ??pk_parse_key_sec1_der_2
    902              }
    903          
    904              if( ( ret = mbedtls_ecp_check_privkey( &eck->grp, &eck->d ) ) != 0 )
   \                     ??pk_parse_key_sec1_der_12: (+1)
   \      0x12E   0xF106 0x017C      ADD      R1,R6,#+124
   \      0x132   0x4630             MOV      R0,R6
   \      0x134   0x....'....        BL       mbedtls_ecp_check_privkey
   \      0x138   0x0004             MOVS     R4,R0
   \      0x13A   0xD004             BEQ.N    ??pk_parse_key_sec1_der_13
    905              {
    906                  mbedtls_ecp_keypair_free( eck );
   \                     ??pk_parse_key_sec1_der_6: (+1)
   \      0x13C   0x4630             MOV      R0,R6
   \      0x13E   0x....'....        BL       mbedtls_ecp_keypair_free
    907                  return( ret );
   \      0x142   0x4620             MOV      R0,R4
   \      0x144   0xE000             B.N      ??pk_parse_key_sec1_der_2
    908              }
    909          
    910              return( 0 );
   \                     ??pk_parse_key_sec1_der_13: (+1)
   \      0x146   0x2000             MOVS     R0,#+0
   \                     ??pk_parse_key_sec1_der_2: (+1)
   \      0x148   0xB009             ADD      SP,SP,#+36
   \      0x14A   0xBDF0             POP      {R4-R7,PC}       ;; return
    911          }
    912          #endif /* MBEDTLS_ECP_C */
    913          
    914          /*
    915           * Parse an unencrypted PKCS#8 encoded private key
    916           *
    917           * Notes:
    918           *
    919           * - This function does not own the key buffer. It is the
    920           *   responsibility of the caller to take care of zeroizing
    921           *   and freeing it after use.
    922           *
    923           * - The function is responsible for freeing the provided
    924           *   PK context on failure.
    925           *
    926           */

   \                                 In section .text, align 2, keep-with-next
    927          static int pk_parse_key_pkcs8_unencrypted_der(
    928                                              mbedtls_pk_context *pk,
    929                                              const unsigned char* key,
    930                                              size_t keylen )
    931          {
   \                     pk_parse_key_pkcs8_unencrypted_der: (+1)
   \        0x0   0xB530             PUSH     {R4,R5,LR}
   \        0x2   0xB087             SUB      SP,SP,#+28
   \        0x4   0x4605             MOV      R5,R0
   \        0x6   0x4610             MOV      R0,R2
    932              int ret, version;
    933              size_t len;
    934              mbedtls_asn1_buf params;
    935              unsigned char *p = (unsigned char *) key;
   \        0x8   0x9101             STR      R1,[SP, #+4]
    936              unsigned char *end = p + keylen;
    937              mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
   \        0xA   0x2100             MOVS     R1,#+0
   \        0xC   0xF88D 0x1000      STRB     R1,[SP, #+0]
    938              const mbedtls_pk_info_t *pk_info;
    939          
    940              /*
    941               * This function parses the PrivateKeyInfo object (PKCS#8 v1.2 = RFC 5208)
    942               *
    943               *    PrivateKeyInfo ::= SEQUENCE {
    944               *      version                   Version,
    945               *      privateKeyAlgorithm       PrivateKeyAlgorithmIdentifier,
    946               *      privateKey                PrivateKey,
    947               *      attributes           [0]  IMPLICIT Attributes OPTIONAL }
    948               *
    949               *    Version ::= INTEGER
    950               *    PrivateKeyAlgorithmIdentifier ::= AlgorithmIdentifier
    951               *    PrivateKey ::= OCTET STRING
    952               *
    953               *  The PrivateKey OCTET STRING is a SEC1 ECPrivateKey
    954               */
    955          
    956              if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
    957                      MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
   \       0x10   0x2330             MOVS     R3,#+48
   \       0x12   0xAA02             ADD      R2,SP,#+8
   \       0x14   0x9901             LDR      R1,[SP, #+4]
   \       0x16   0x4401             ADD      R1,R1,R0
   \       0x18   0xA801             ADD      R0,SP,#+4
   \       0x1A   0x....'....        BL       mbedtls_asn1_get_tag
   \       0x1E   0x2800             CMP      R0,#+0
   \       0x20   0xD11F             BNE.N    ??pk_parse_key_pkcs8_unencrypted_der_0
    958              {
    959                  return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    960              }
    961          
    962              end = p + len;
   \       0x22   0x9801             LDR      R0,[SP, #+4]
   \       0x24   0x9902             LDR      R1,[SP, #+8]
   \       0x26   0x1844             ADDS     R4,R0,R1
    963          
    964              if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
   \       0x28   0xAA03             ADD      R2,SP,#+12
   \       0x2A   0x4621             MOV      R1,R4
   \       0x2C   0xA801             ADD      R0,SP,#+4
   \       0x2E   0x....'....        BL       mbedtls_asn1_get_int
   \       0x32   0x2800             CMP      R0,#+0
   \       0x34   0xD115             BNE.N    ??pk_parse_key_pkcs8_unencrypted_der_0
    965                  return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    966          
    967              if( version != 0 )
   \       0x36   0x9903             LDR      R1,[SP, #+12]
   \       0x38   0x2900             CMP      R1,#+0
   \       0x3A   0xD002             BEQ.N    ??pk_parse_key_pkcs8_unencrypted_der_1
    968                  return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION + ret );
   \       0x3C   0xF5A0 0x5076      SUB      R0,R0,#+15744
   \       0x40   0xE032             B.N      ??pk_parse_key_pkcs8_unencrypted_der_2
    969          
    970              if( ( ret = pk_get_pk_alg( &p, end, &pk_alg, &params ) ) != 0 )
   \                     ??pk_parse_key_pkcs8_unencrypted_der_1: (+1)
   \       0x42   0xAB04             ADD      R3,SP,#+16
   \       0x44   0x466A             MOV      R2,SP
   \       0x46   0x4621             MOV      R1,R4
   \       0x48   0xA801             ADD      R0,SP,#+4
   \       0x4A   0x....'....        BL       pk_get_pk_alg
   \       0x4E   0x2800             CMP      R0,#+0
   \       0x50   0xD107             BNE.N    ??pk_parse_key_pkcs8_unencrypted_der_0
    971                  return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    972          
    973              if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
   \       0x52   0x2304             MOVS     R3,#+4
   \       0x54   0xAA02             ADD      R2,SP,#+8
   \       0x56   0x4621             MOV      R1,R4
   \       0x58   0xA801             ADD      R0,SP,#+4
   \       0x5A   0x....'....        BL       mbedtls_asn1_get_tag
   \       0x5E   0x2800             CMP      R0,#+0
   \       0x60   0xD002             BEQ.N    ??pk_parse_key_pkcs8_unencrypted_der_3
    974                  return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
   \                     ??pk_parse_key_pkcs8_unencrypted_der_0: (+1)
   \       0x62   0xF5A0 0x5074      SUB      R0,R0,#+15616
   \       0x66   0xE01F             B.N      ??pk_parse_key_pkcs8_unencrypted_der_2
    975          
    976              if( len < 1 )
   \                     ??pk_parse_key_pkcs8_unencrypted_der_3: (+1)
   \       0x68   0x9802             LDR      R0,[SP, #+8]
   \       0x6A   0x2800             CMP      R0,#+0
   \       0x6C   0xD101             BNE.N    ??pk_parse_key_pkcs8_unencrypted_der_4
    977                  return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
    978                          MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   \       0x6E   0x....             LDR.N    R0,??DataTable11  ;; 0xffffc2a0
   \       0x70   0xE01A             B.N      ??pk_parse_key_pkcs8_unencrypted_der_2
    979          
    980              if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
   \                     ??pk_parse_key_pkcs8_unencrypted_der_4: (+1)
   \       0x72   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \       0x76   0x....'....        BL       mbedtls_pk_info_from_type
   \       0x7A   0x2800             CMP      R0,#+0
   \       0x7C   0xD033             BEQ.N    ??pk_parse_key_pkcs8_unencrypted_der_5
    981                  return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
    982          
    983              if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 )
   \       0x7E   0x4601             MOV      R1,R0
   \       0x80   0x4628             MOV      R0,R5
   \       0x82   0x....'....        BL       mbedtls_pk_setup
   \       0x86   0x2800             CMP      R0,#+0
   \       0x88   0xD10E             BNE.N    ??pk_parse_key_pkcs8_unencrypted_der_2
    984                  return( ret );
    985          
    986          #if defined(MBEDTLS_RSA_C)
    987              if( pk_alg == MBEDTLS_PK_RSA )
   \       0x8A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \       0x8E   0x2801             CMP      R0,#+1
   \       0x90   0xD10C             BNE.N    ??pk_parse_key_pkcs8_unencrypted_der_6
    988              {
    989                  if( ( ret = pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ), p, len ) ) != 0 )
   \       0x92   0xE9D5 0x0100      LDRD     R0,R1,[R5, #+0]
   \       0x96   0x....'....        BL       mbedtls_pk_rsa
   \       0x9A   0x9A02             LDR      R2,[SP, #+8]
   \       0x9C   0x9901             LDR      R1,[SP, #+4]
   \       0x9E   0x....'....        BL       pk_parse_key_pkcs1_der
   \       0xA2   0x0004             MOVS     R4,R0
   \       0xA4   0xD11A             BNE.N    ??pk_parse_key_pkcs8_unencrypted_der_7
    990                  {
    991                      mbedtls_pk_free( pk );
    992                      return( ret );
    993                  }
    994              } else
    995          #endif /* MBEDTLS_RSA_C */
    996          #if defined(MBEDTLS_ECP_C)
    997              if( pk_alg == MBEDTLS_PK_ECKEY || pk_alg == MBEDTLS_PK_ECKEY_DH )
    998              {
    999                  if( ( ret = pk_use_ecparams( &params, &mbedtls_pk_ec( *pk )->grp ) ) != 0 ||
   1000                      ( ret = pk_parse_key_sec1_der( mbedtls_pk_ec( *pk ), p, len )  ) != 0 )
   1001                  {
   1002                      mbedtls_pk_free( pk );
   1003                      return( ret );
   1004                  }
   1005              } else
   1006          #endif /* MBEDTLS_ECP_C */
   1007                  return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
   1008          
   1009              return( 0 );
   \                     ??pk_parse_key_pkcs8_unencrypted_der_8: (+1)
   \       0xA6   0x2000             MOVS     R0,#+0
   \                     ??pk_parse_key_pkcs8_unencrypted_der_2: (+1)
   \       0xA8   0xB007             ADD      SP,SP,#+28
   \       0xAA   0xBD30             POP      {R4,R5,PC}       ;; return
   \                     ??pk_parse_key_pkcs8_unencrypted_der_6: (+1)
   \       0xAC   0x2802             CMP      R0,#+2
   \       0xAE   0xD001             BEQ.N    ??pk_parse_key_pkcs8_unencrypted_der_9
   \       0xB0   0x2803             CMP      R0,#+3
   \       0xB2   0xD118             BNE.N    ??pk_parse_key_pkcs8_unencrypted_der_5
   \                     ??pk_parse_key_pkcs8_unencrypted_der_9: (+1)
   \       0xB4   0xE9D5 0x0100      LDRD     R0,R1,[R5, #+0]
   \       0xB8   0x....'....        BL       mbedtls_pk_ec
   \       0xBC   0x4601             MOV      R1,R0
   \       0xBE   0xA804             ADD      R0,SP,#+16
   \       0xC0   0x....'....        BL       pk_use_ecparams
   \       0xC4   0x0004             MOVS     R4,R0
   \       0xC6   0xD109             BNE.N    ??pk_parse_key_pkcs8_unencrypted_der_7
   \       0xC8   0xE9D5 0x0100      LDRD     R0,R1,[R5, #+0]
   \       0xCC   0x....'....        BL       mbedtls_pk_ec
   \       0xD0   0x9A02             LDR      R2,[SP, #+8]
   \       0xD2   0x9901             LDR      R1,[SP, #+4]
   \       0xD4   0x....'....        BL       pk_parse_key_sec1_der
   \       0xD8   0x0004             MOVS     R4,R0
   \       0xDA   0xD0E4             BEQ.N    ??pk_parse_key_pkcs8_unencrypted_der_8
   \                     ??pk_parse_key_pkcs8_unencrypted_der_7: (+1)
   \       0xDC   0x4628             MOV      R0,R5
   \       0xDE   0x....'....        BL       mbedtls_pk_free
   \       0xE2   0x4620             MOV      R0,R4
   \       0xE4   0xE7E0             B.N      ??pk_parse_key_pkcs8_unencrypted_der_2
   \                     ??pk_parse_key_pkcs8_unencrypted_der_5: (+1)
   \       0xE6   0x....'....        LDR.W    R0,??DataTable13_2  ;; 0xffffc380
   \       0xEA   0xE7DD             B.N      ??pk_parse_key_pkcs8_unencrypted_der_2
   1010          }
   1011          
   1012          /*
   1013           * Parse an encrypted PKCS#8 encoded private key
   1014           *
   1015           * To save space, the decryption happens in-place on the given key buffer.
   1016           * Also, while this function may modify the keybuffer, it doesn't own it,
   1017           * and instead it is the responsibility of the caller to zeroize and properly
   1018           * free it after use.
   1019           *
   1020           */
   1021          #if defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)

   \                                 In section .text, align 2, keep-with-next
   1022          static int pk_parse_key_pkcs8_encrypted_der(
   1023                                              mbedtls_pk_context *pk,
   1024                                              unsigned char *key, size_t keylen,
   1025                                              const unsigned char *pwd, size_t pwdlen )
   1026          {
   \                     pk_parse_key_pkcs8_encrypted_der: (+1)
   \        0x0   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \        0x4   0xB08E             SUB      SP,SP,#+56
   \        0x6   0x4606             MOV      R6,R0
   \        0x8   0x4610             MOV      R0,R2
   \        0xA   0x461F             MOV      R7,R3
   \        0xC   0x9C14             LDR      R4,[SP, #+80]
   1027              int ret, decrypted = 0;
   \        0xE   0x2500             MOVS     R5,#+0
   1028              size_t len;
   1029              unsigned char *buf;
   1030              unsigned char *p, *end;
   1031              mbedtls_asn1_buf pbe_alg_oid, pbe_params;
   1032          #if defined(MBEDTLS_PKCS12_C)
   1033              mbedtls_cipher_type_t cipher_alg;
   1034              mbedtls_md_type_t md_alg;
   1035          #endif
   1036          
   1037              p = key;
   \       0x10   0x9106             STR      R1,[SP, #+24]
   1038              end = p + keylen;
   1039          
   1040              if( pwdlen == 0 )
   \       0x12   0x2C00             CMP      R4,#+0
   \       0x14   0xD102             BNE.N    ??pk_parse_key_pkcs8_encrypted_der_0
   1041                  return( MBEDTLS_ERR_PK_PASSWORD_REQUIRED );
   \       0x16   0x....'....        LDR.W    R0,??DataTable13_5  ;; 0xffffc400
   \       0x1A   0xE095             B.N      ??pk_parse_key_pkcs8_encrypted_der_1
   1042          
   1043              /*
   1044               * This function parses the EncryptedPrivateKeyInfo object (PKCS#8)
   1045               *
   1046               *  EncryptedPrivateKeyInfo ::= SEQUENCE {
   1047               *    encryptionAlgorithm  EncryptionAlgorithmIdentifier,
   1048               *    encryptedData        EncryptedData
   1049               *  }
   1050               *
   1051               *  EncryptionAlgorithmIdentifier ::= AlgorithmIdentifier
   1052               *
   1053               *  EncryptedData ::= OCTET STRING
   1054               *
   1055               *  The EncryptedData OCTET STRING is a PKCS#8 PrivateKeyInfo
   1056               *
   1057               */
   1058              if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
   1059                      MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
   \                     ??pk_parse_key_pkcs8_encrypted_der_0: (+1)
   \       0x1C   0x2330             MOVS     R3,#+48
   \       0x1E   0xAA07             ADD      R2,SP,#+28
   \       0x20   0x4401             ADD      R1,R1,R0
   \       0x22   0xA806             ADD      R0,SP,#+24
   \       0x24   0x....'....        BL       mbedtls_asn1_get_tag
   \       0x28   0x2800             CMP      R0,#+0
   \       0x2A   0xD113             BNE.N    ??pk_parse_key_pkcs8_encrypted_der_2
   1060              {
   1061                  return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
   1062              }
   1063          
   1064              end = p + len;
   \       0x2C   0x9806             LDR      R0,[SP, #+24]
   \       0x2E   0x9907             LDR      R1,[SP, #+28]
   \       0x30   0xEB00 0x0801      ADD      R8,R0,R1
   1065          
   1066              if( ( ret = mbedtls_asn1_get_alg( &p, end, &pbe_alg_oid, &pbe_params ) ) != 0 )
   \       0x34   0xAB0B             ADD      R3,SP,#+44
   \       0x36   0xAA08             ADD      R2,SP,#+32
   \       0x38   0x4641             MOV      R1,R8
   \       0x3A   0xA806             ADD      R0,SP,#+24
   \       0x3C   0x....'....        BL       mbedtls_asn1_get_alg
   \       0x40   0x2800             CMP      R0,#+0
   \       0x42   0xD107             BNE.N    ??pk_parse_key_pkcs8_encrypted_der_2
   1067                  return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
   1068          
   1069              if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
   \       0x44   0x2304             MOVS     R3,#+4
   \       0x46   0xAA07             ADD      R2,SP,#+28
   \       0x48   0x4641             MOV      R1,R8
   \       0x4A   0xA806             ADD      R0,SP,#+24
   \       0x4C   0x....'....        BL       mbedtls_asn1_get_tag
   \       0x50   0x2800             CMP      R0,#+0
   \       0x52   0xD002             BEQ.N    ??pk_parse_key_pkcs8_encrypted_der_3
   1070                  return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
   \                     ??pk_parse_key_pkcs8_encrypted_der_2: (+1)
   \       0x54   0xF5A0 0x5074      SUB      R0,R0,#+15616
   \       0x58   0xE076             B.N      ??pk_parse_key_pkcs8_encrypted_der_1
   1071          
   1072              buf = p;
   \                     ??pk_parse_key_pkcs8_encrypted_der_3: (+1)
   \       0x5A   0xF8DD 0x8018      LDR      R8,[SP, #+24]
   1073          
   1074              /*
   1075               * Decrypt EncryptedData with appropriate PBE
   1076               */
   1077          #if defined(MBEDTLS_PKCS12_C)
   1078              if( mbedtls_oid_get_pkcs12_pbe_alg( &pbe_alg_oid, &md_alg, &cipher_alg ) == 0 )
   \       0x5E   0xF10D 0x0215      ADD      R2,SP,#+21
   \       0x62   0xA905             ADD      R1,SP,#+20
   \       0x64   0xA808             ADD      R0,SP,#+32
   \       0x66   0x....'....        BL       mbedtls_oid_get_pkcs12_pbe_alg
   \       0x6A   0x2800             CMP      R0,#+0
   \       0x6C   0xD117             BNE.N    ??pk_parse_key_pkcs8_encrypted_der_4
   1079              {
   1080                  if( ( ret = mbedtls_pkcs12_pbe( &pbe_params, MBEDTLS_PKCS12_PBE_DECRYPT,
   1081                                          cipher_alg, md_alg,
   1082                                          pwd, pwdlen, p, len, buf ) ) != 0 )
   \       0x6E   0xF8CD 0x8010      STR      R8,[SP, #+16]
   \       0x72   0x9807             LDR      R0,[SP, #+28]
   \       0x74   0x9003             STR      R0,[SP, #+12]
   \       0x76   0x9806             LDR      R0,[SP, #+24]
   \       0x78   0x9002             STR      R0,[SP, #+8]
   \       0x7A   0x9401             STR      R4,[SP, #+4]
   \       0x7C   0x9700             STR      R7,[SP, #+0]
   \       0x7E   0xF89D 0x3014      LDRB     R3,[SP, #+20]
   \       0x82   0xF89D 0x2015      LDRB     R2,[SP, #+21]
   \       0x86   0x4629             MOV      R1,R5
   \       0x88   0xA80B             ADD      R0,SP,#+44
   \       0x8A   0x....'....        BL       mbedtls_pkcs12_pbe
   \       0x8E   0x2800             CMP      R0,#+0
   \       0x90   0xD050             BEQ.N    ??pk_parse_key_pkcs8_encrypted_der_5
   1083                  {
   1084                      if( ret == MBEDTLS_ERR_PKCS12_PASSWORD_MISMATCH )
   \       0x92   0xF510 0x5FF0      CMN      R0,#+7680
   \       0x96   0xD157             BNE.N    ??pk_parse_key_pkcs8_encrypted_der_1
   1085                          return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );
   \       0x98   0x....'....        LDR.W    R0,??DataTable13_6  ;; 0xffffc480
   \       0x9C   0xE054             B.N      ??pk_parse_key_pkcs8_encrypted_der_1
   1086          
   1087                      return( ret );
   1088                  }
   1089          
   1090                  decrypted = 1;
   1091              }
   1092              else if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS12_PBE_SHA1_RC4_128, &pbe_alg_oid ) == 0 )
   \                     ??pk_parse_key_pkcs8_encrypted_der_4: (+1)
   \       0x9E   0x9809             LDR      R0,[SP, #+36]
   \       0xA0   0x280A             CMP      R0,#+10
   \       0xA2   0xD10A             BNE.N    ??pk_parse_key_pkcs8_encrypted_der_6
   \       0xA4   0x220A             MOVS     R2,#+10
   \       0xA6   0x990A             LDR      R1,[SP, #+40]
   \       0xA8   0x....'....        LDR.W    R0,??DataTable13_7
   \       0xAC   0x....'....        BL       memcmp
   \       0xB0   0x1E40             SUBS     R0,R0,#+1
   \       0xB2   0x4180             SBCS     R0,R0,R0
   \       0xB4   0x43C0             MVNS     R0,R0
   \       0xB6   0x0FC0             LSRS     R0,R0,#+31
   \       0xB8   0xE000             B.N      ??pk_parse_key_pkcs8_encrypted_der_7
   \                     ??pk_parse_key_pkcs8_encrypted_der_6: (+1)
   \       0xBA   0x2001             MOVS     R0,#+1
   \                     ??pk_parse_key_pkcs8_encrypted_der_7: (+1)
   \       0xBC   0x2800             CMP      R0,#+0
   \       0xBE   0xD114             BNE.N    ??pk_parse_key_pkcs8_encrypted_der_8
   1093              {
   1094                  if( ( ret = mbedtls_pkcs12_pbe_sha1_rc4_128( &pbe_params,
   1095                                                       MBEDTLS_PKCS12_PBE_DECRYPT,
   1096                                                       pwd, pwdlen,
   1097                                                       p, len, buf ) ) != 0 )
   \       0xC0   0xF8CD 0x8008      STR      R8,[SP, #+8]
   \       0xC4   0x9807             LDR      R0,[SP, #+28]
   \       0xC6   0x9001             STR      R0,[SP, #+4]
   \       0xC8   0x9806             LDR      R0,[SP, #+24]
   \       0xCA   0x9000             STR      R0,[SP, #+0]
   \       0xCC   0x4623             MOV      R3,R4
   \       0xCE   0x463A             MOV      R2,R7
   \       0xD0   0x4629             MOV      R1,R5
   \       0xD2   0xA80B             ADD      R0,SP,#+44
   \       0xD4   0x....'....        BL       mbedtls_pkcs12_pbe_sha1_rc4_128
   \       0xD8   0x2800             CMP      R0,#+0
   \       0xDA   0xD135             BNE.N    ??pk_parse_key_pkcs8_encrypted_der_1
   1098                  {
   1099                      return( ret );
   1100                  }
   1101          
   1102                  // Best guess for password mismatch when using RC4. If first tag is
   1103                  // not MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE
   1104                  //
   1105                  if( *buf != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
   \       0xDC   0xF898 0x0000      LDRB     R0,[R8, #+0]
   \       0xE0   0x2830             CMP      R0,#+48
   \       0xE2   0xD027             BEQ.N    ??pk_parse_key_pkcs8_encrypted_der_5
   1106                      return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );
   \       0xE4   0x....'....        LDR.W    R0,??DataTable13_6  ;; 0xffffc480
   \       0xE8   0xE02E             B.N      ??pk_parse_key_pkcs8_encrypted_der_1
   1107          
   1108                  decrypted = 1;
   1109              }
   1110              else
   1111          #endif /* MBEDTLS_PKCS12_C */
   1112          #if defined(MBEDTLS_PKCS5_C)
   1113              if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS5_PBES2, &pbe_alg_oid ) == 0 )
   \                     ??pk_parse_key_pkcs8_encrypted_der_8: (+1)
   \       0xEA   0x9809             LDR      R0,[SP, #+36]
   \       0xEC   0x2809             CMP      R0,#+9
   \       0xEE   0xD10A             BNE.N    ??pk_parse_key_pkcs8_encrypted_der_9
   \       0xF0   0x2209             MOVS     R2,#+9
   \       0xF2   0x990A             LDR      R1,[SP, #+40]
   \       0xF4   0x....'....        LDR.W    R0,??DataTable13_8
   \       0xF8   0x....'....        BL       memcmp
   \       0xFC   0x1E40             SUBS     R0,R0,#+1
   \       0xFE   0x4180             SBCS     R0,R0,R0
   \      0x100   0x43C0             MVNS     R0,R0
   \      0x102   0x0FC0             LSRS     R0,R0,#+31
   \      0x104   0xE000             B.N      ??pk_parse_key_pkcs8_encrypted_der_10
   \                     ??pk_parse_key_pkcs8_encrypted_der_9: (+1)
   \      0x106   0x2001             MOVS     R0,#+1
   \                     ??pk_parse_key_pkcs8_encrypted_der_10: (+1)
   \      0x108   0x2800             CMP      R0,#+0
   \      0x10A   0xD114             BNE.N    ??pk_parse_key_pkcs8_encrypted_der_11
   1114              {
   1115                  if( ( ret = mbedtls_pkcs5_pbes2( &pbe_params, MBEDTLS_PKCS5_DECRYPT, pwd, pwdlen,
   1116                                            p, len, buf ) ) != 0 )
   \      0x10C   0xF8CD 0x8008      STR      R8,[SP, #+8]
   \      0x110   0x9807             LDR      R0,[SP, #+28]
   \      0x112   0x9001             STR      R0,[SP, #+4]
   \      0x114   0x9806             LDR      R0,[SP, #+24]
   \      0x116   0x9000             STR      R0,[SP, #+0]
   \      0x118   0x4623             MOV      R3,R4
   \      0x11A   0x463A             MOV      R2,R7
   \      0x11C   0x4629             MOV      R1,R5
   \      0x11E   0xA80B             ADD      R0,SP,#+44
   \      0x120   0x....'....        BL       mbedtls_pkcs5_pbes2
   \      0x124   0x2800             CMP      R0,#+0
   \      0x126   0xD005             BEQ.N    ??pk_parse_key_pkcs8_encrypted_der_5
   1117                  {
   1118                      if( ret == MBEDTLS_ERR_PKCS5_PASSWORD_MISMATCH )
   \      0x128   0xF510 0x5F38      CMN      R0,#+11776
   \      0x12C   0xD10C             BNE.N    ??pk_parse_key_pkcs8_encrypted_der_1
   1119                          return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );
   \      0x12E   0x....'....        LDR.W    R0,??DataTable13_6  ;; 0xffffc480
   \      0x132   0xE009             B.N      ??pk_parse_key_pkcs8_encrypted_der_1
   1120          
   1121                      return( ret );
   1122                  }
   1123          
   1124                  decrypted = 1;
   \                     ??pk_parse_key_pkcs8_encrypted_der_5: (+1)
   \      0x134   0x2501             MOVS     R5,#+1
   1125              }
   1126              else
   1127          #endif /* MBEDTLS_PKCS5_C */
   1128              {
   1129                  ((void) pwd);
   1130              }
   1131          
   1132              if( decrypted == 0 )
   \                     ??pk_parse_key_pkcs8_encrypted_der_11: (+1)
   \      0x136   0x2D00             CMP      R5,#+0
   \      0x138   0xD101             BNE.N    ??pk_parse_key_pkcs8_encrypted_der_12
   1133                  return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );
   \      0x13A   0x....             LDR.N    R0,??DataTable11_4  ;; 0xffffc680
   \      0x13C   0xE004             B.N      ??pk_parse_key_pkcs8_encrypted_der_1
   1134          
   1135              return( pk_parse_key_pkcs8_unencrypted_der( pk, buf, len ) );
   \                     ??pk_parse_key_pkcs8_encrypted_der_12: (+1)
   \      0x13E   0x9A07             LDR      R2,[SP, #+28]
   \      0x140   0x4641             MOV      R1,R8
   \      0x142   0x4630             MOV      R0,R6
   \      0x144   0x....'....        BL       pk_parse_key_pkcs8_unencrypted_der
   \                     ??pk_parse_key_pkcs8_encrypted_der_1: (+1)
   \      0x148   0xB00E             ADD      SP,SP,#+56
   \      0x14A   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   1136          }
   1137          #endif /* MBEDTLS_PKCS12_C || MBEDTLS_PKCS5_C */
   1138          
   1139          /*
   1140           * Parse a private key
   1141           */

   \                                 In section .text, align 2, keep-with-next
   1142          int mbedtls_pk_parse_key( mbedtls_pk_context *pk,
   1143                            const unsigned char *key, size_t keylen,
   1144                            const unsigned char *pwd, size_t pwdlen )
   1145          {
   \                     mbedtls_pk_parse_key: (+1)
   \        0x0   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \        0x4   0xB087             SUB      SP,SP,#+28
   \        0x6   0x4607             MOV      R7,R0
   \        0x8   0x4688             MOV      R8,R1
   \        0xA   0x4614             MOV      R4,R2
   \        0xC   0x4699             MOV      R9,R3
   \        0xE   0xF8DD 0xA040      LDR      R10,[SP, #+64]
   1146              int ret;
   1147              const mbedtls_pk_info_t *pk_info;
   1148          
   1149          #if defined(MBEDTLS_PEM_PARSE_C)
   1150              size_t len;
   1151              mbedtls_pem_context pem;
   1152          
   1153              mbedtls_pem_init( &pem );
   \       0x12   0xA803             ADD      R0,SP,#+12
   \       0x14   0x....'....        BL       mbedtls_pem_init
   1154          
   1155          #if defined(MBEDTLS_RSA_C)
   1156              /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
   1157              if( keylen == 0 || key[keylen - 1] != '\0' )
   \       0x18   0x2C00             CMP      R4,#+0
   \       0x1A   0xD005             BEQ.N    ??mbedtls_pk_parse_key_0
   \       0x1C   0xEB08 0x0004      ADD      R0,R8,R4
   \       0x20   0xF810 0x0C01      LDRB     R0,[R0, #-1]
   \       0x24   0x2800             CMP      R0,#+0
   \       0x26   0xD002             BEQ.N    ??mbedtls_pk_parse_key_1
   1158                  ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
   \                     ??mbedtls_pk_parse_key_0: (+1)
   \       0x28   0x....'....        LDR.W    R5,??DataTable13_9  ;; 0xffffef80
   \       0x2C   0xE00E             B.N      ??mbedtls_pk_parse_key_2
   1159              else
   1160                  ret = mbedtls_pem_read_buffer( &pem,
   1161                                         "-----BEGIN RSA PRIVATE KEY-----",
   1162                                         "-----END RSA PRIVATE KEY-----",
   1163                                         key, pwd, pwdlen, &len );
   \                     ??mbedtls_pk_parse_key_1: (+1)
   \       0x2E   0xA806             ADD      R0,SP,#+24
   \       0x30   0x9002             STR      R0,[SP, #+8]
   \       0x32   0xF8CD 0xA004      STR      R10,[SP, #+4]
   \       0x36   0xF8CD 0x9000      STR      R9,[SP, #+0]
   \       0x3A   0x4643             MOV      R3,R8
   \       0x3C   0x....'....        LDR.W    R2,??DataTable13_10
   \       0x40   0x....'....        LDR.W    R1,??DataTable13_11
   \       0x44   0xA803             ADD      R0,SP,#+12
   \       0x46   0x....'....        BL       mbedtls_pem_read_buffer
   \       0x4A   0x4605             MOV      R5,R0
   1164          
   1165              if( ret == 0 )
   \                     ??mbedtls_pk_parse_key_2: (+1)
   \       0x4C   0x2D00             CMP      R5,#+0
   \       0x4E   0xD117             BNE.N    ??mbedtls_pk_parse_key_3
   1166              {
   1167                  pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA );
   \       0x50   0x2001             MOVS     R0,#+1
   \       0x52   0x....'....        BL       mbedtls_pk_info_from_type
   1168                  if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 ||
   1169                      ( ret = pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ),
   1170                                                      pem.buf, pem.buflen ) ) != 0 )
   \       0x56   0x4601             MOV      R1,R0
   \       0x58   0x4638             MOV      R0,R7
   \       0x5A   0x....'....        BL       mbedtls_pk_setup
   \       0x5E   0x0004             MOVS     R4,R0
   \       0x60   0xD10A             BNE.N    ??mbedtls_pk_parse_key_4
   \       0x62   0xE9D7 0x0100      LDRD     R0,R1,[R7, #+0]
   \       0x66   0x....'....        BL       mbedtls_pk_rsa
   \       0x6A   0x9A04             LDR      R2,[SP, #+16]
   \       0x6C   0x9903             LDR      R1,[SP, #+12]
   \       0x6E   0x....'....        BL       pk_parse_key_pkcs1_der
   \       0x72   0x0004             MOVS     R4,R0
   \       0x74   0xF000 0x8091      BEQ.W    ??mbedtls_pk_parse_key_5
   1171                  {
   1172                      mbedtls_pk_free( pk );
   \                     ??mbedtls_pk_parse_key_4: (+1)
   \       0x78   0x4638             MOV      R0,R7
   \       0x7A   0x....'....        BL       mbedtls_pk_free
   \       0x7E   0xE08C             B.N      ??mbedtls_pk_parse_key_5
   1173                  }
   1174          
   1175                  mbedtls_pem_free( &pem );
   1176                  return( ret );
   1177              }
   1178              else if( ret == MBEDTLS_ERR_PEM_PASSWORD_MISMATCH )
   \                     ??mbedtls_pk_parse_key_3: (+1)
   \       0x80   0xF515 0x5F9C      CMN      R5,#+4992
   \       0x84   0xD03B             BEQ.N    ??mbedtls_pk_parse_key_6
   1179                  return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );
   1180              else if( ret == MBEDTLS_ERR_PEM_PASSWORD_REQUIRED )
   \       0x86   0x....'....        LDR.W    R6,??DataTable13_12  ;; 0xffffed00
   \       0x8A   0x42B5             CMP      R5,R6
   \       0x8C   0xD03B             BEQ.N    ??mbedtls_pk_parse_key_7
   1181                  return( MBEDTLS_ERR_PK_PASSWORD_REQUIRED );
   1182              else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
   \       0x8E   0x....'....        LDR.W    R11,??DataTable13_9  ;; 0xffffef80
   \       0x92   0x455D             CMP      R5,R11
   \       0x94   0xF040 0x80B0      BNE.W    ??mbedtls_pk_parse_key_8
   1183                  return( ret );
   1184          #endif /* MBEDTLS_RSA_C */
   1185          
   1186          #if defined(MBEDTLS_ECP_C)
   1187              /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
   1188              if( keylen == 0 || key[keylen - 1] != '\0' )
   \       0x98   0x2C00             CMP      R4,#+0
   \       0x9A   0xD014             BEQ.N    ??mbedtls_pk_parse_key_9
   \       0x9C   0xEB08 0x0004      ADD      R0,R8,R4
   \       0xA0   0xF810 0x0C01      LDRB     R0,[R0, #-1]
   \       0xA4   0x2800             CMP      R0,#+0
   \       0xA6   0xD10E             BNE.N    ??mbedtls_pk_parse_key_9
   1189                  ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
   1190              else
   1191                  ret = mbedtls_pem_read_buffer( &pem,
   1192                                         "-----BEGIN EC PRIVATE KEY-----",
   1193                                         "-----END EC PRIVATE KEY-----",
   1194                                         key, pwd, pwdlen, &len );
   \       0xA8   0xA806             ADD      R0,SP,#+24
   \       0xAA   0x9002             STR      R0,[SP, #+8]
   \       0xAC   0xF8CD 0xA004      STR      R10,[SP, #+4]
   \       0xB0   0xF8CD 0x9000      STR      R9,[SP, #+0]
   \       0xB4   0x4643             MOV      R3,R8
   \       0xB6   0x....'....        LDR.W    R2,??DataTable13_13
   \       0xBA   0x....'....        LDR.W    R1,??DataTable13_14
   \       0xBE   0xA803             ADD      R0,SP,#+12
   \       0xC0   0x....'....        BL       mbedtls_pem_read_buffer
   \       0xC4   0x4605             MOV      R5,R0
   1195              if( ret == 0 )
   \                     ??mbedtls_pk_parse_key_9: (+1)
   \       0xC6   0x2D00             CMP      R5,#+0
   \       0xC8   0xD116             BNE.N    ??mbedtls_pk_parse_key_10
   1196              {
   1197                  pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_ECKEY );
   \       0xCA   0x2002             MOVS     R0,#+2
   \       0xCC   0x....'....        BL       mbedtls_pk_info_from_type
   1198          
   1199                  if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 ||
   1200                      ( ret = pk_parse_key_sec1_der( mbedtls_pk_ec( *pk ),
   1201                                                     pem.buf, pem.buflen ) ) != 0 )
   \       0xD0   0x4601             MOV      R1,R0
   \       0xD2   0x4638             MOV      R0,R7
   \       0xD4   0x....'....        BL       mbedtls_pk_setup
   \       0xD8   0x0004             MOVS     R4,R0
   \       0xDA   0xD109             BNE.N    ??mbedtls_pk_parse_key_11
   \       0xDC   0xE9D7 0x0100      LDRD     R0,R1,[R7, #+0]
   \       0xE0   0x....'....        BL       mbedtls_pk_ec
   \       0xE4   0x9A04             LDR      R2,[SP, #+16]
   \       0xE6   0x9903             LDR      R1,[SP, #+12]
   \       0xE8   0x....'....        BL       pk_parse_key_sec1_der
   \       0xEC   0x0004             MOVS     R4,R0
   \       0xEE   0xD054             BEQ.N    ??mbedtls_pk_parse_key_5
   1202                  {
   1203                      mbedtls_pk_free( pk );
   \                     ??mbedtls_pk_parse_key_11: (+1)
   \       0xF0   0x4638             MOV      R0,R7
   \       0xF2   0x....'....        BL       mbedtls_pk_free
   \       0xF6   0xE050             B.N      ??mbedtls_pk_parse_key_5
   1204                  }
   1205          
   1206                  mbedtls_pem_free( &pem );
   1207                  return( ret );
   1208              }
   1209              else if( ret == MBEDTLS_ERR_PEM_PASSWORD_MISMATCH )
   \                     ??mbedtls_pk_parse_key_10: (+1)
   \       0xF8   0xF515 0x5F9C      CMN      R5,#+4992
   \       0xFC   0xD101             BNE.N    ??mbedtls_pk_parse_key_12
   1210                  return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );
   \                     ??mbedtls_pk_parse_key_6: (+1)
   \       0xFE   0x....             LDR.N    R0,??DataTable13_6  ;; 0xffffc480
   \      0x100   0xE0B5             B.N      ??mbedtls_pk_parse_key_13
   1211              else if( ret == MBEDTLS_ERR_PEM_PASSWORD_REQUIRED )
   \                     ??mbedtls_pk_parse_key_12: (+1)
   \      0x102   0x42B5             CMP      R5,R6
   \      0x104   0xD101             BNE.N    ??mbedtls_pk_parse_key_14
   1212                  return( MBEDTLS_ERR_PK_PASSWORD_REQUIRED );
   \                     ??mbedtls_pk_parse_key_7: (+1)
   \      0x106   0x....             LDR.N    R0,??DataTable13_5  ;; 0xffffc400
   \      0x108   0xE0B1             B.N      ??mbedtls_pk_parse_key_13
   1213              else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
   \                     ??mbedtls_pk_parse_key_14: (+1)
   \      0x10A   0x455D             CMP      R5,R11
   \      0x10C   0xD174             BNE.N    ??mbedtls_pk_parse_key_8
   1214                  return( ret );
   1215          #endif /* MBEDTLS_ECP_C */
   1216          
   1217              /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
   1218              if( keylen == 0 || key[keylen - 1] != '\0' )
   \      0x10E   0x2C00             CMP      R4,#+0
   \      0x110   0xD011             BEQ.N    ??mbedtls_pk_parse_key_15
   \      0x112   0xEB08 0x0004      ADD      R0,R8,R4
   \      0x116   0xF810 0x0C01      LDRB     R0,[R0, #-1]
   \      0x11A   0x2800             CMP      R0,#+0
   \      0x11C   0xD10B             BNE.N    ??mbedtls_pk_parse_key_15
   1219                  ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
   1220              else
   1221                  ret = mbedtls_pem_read_buffer( &pem,
   1222                                         "-----BEGIN PRIVATE KEY-----",
   1223                                         "-----END PRIVATE KEY-----",
   1224                                         key, NULL, 0, &len );
   \      0x11E   0xA806             ADD      R0,SP,#+24
   \      0x120   0x9002             STR      R0,[SP, #+8]
   \      0x122   0x2000             MOVS     R0,#+0
   \      0x124   0x9001             STR      R0,[SP, #+4]
   \      0x126   0x9000             STR      R0,[SP, #+0]
   \      0x128   0x4643             MOV      R3,R8
   \      0x12A   0x....             LDR.N    R2,??DataTable13_15
   \      0x12C   0x....             LDR.N    R1,??DataTable13_16
   \      0x12E   0xA803             ADD      R0,SP,#+12
   \      0x130   0x....'....        BL       mbedtls_pem_read_buffer
   \      0x134   0x4605             MOV      R5,R0
   1225              if( ret == 0 )
   \                     ??mbedtls_pk_parse_key_15: (+1)
   \      0x136   0x2D00             CMP      R5,#+0
   \      0x138   0xD10A             BNE.N    ??mbedtls_pk_parse_key_16
   1226              {
   1227                  if( ( ret = pk_parse_key_pkcs8_unencrypted_der( pk,
   1228                                                          pem.buf, pem.buflen ) ) != 0 )
   \      0x13A   0x9A04             LDR      R2,[SP, #+16]
   \      0x13C   0x9903             LDR      R1,[SP, #+12]
   \      0x13E   0x4638             MOV      R0,R7
   \      0x140   0x....'....        BL       pk_parse_key_pkcs8_unencrypted_der
   \      0x144   0x0004             MOVS     R4,R0
   \      0x146   0xD028             BEQ.N    ??mbedtls_pk_parse_key_5
   1229                  {
   1230                      mbedtls_pk_free( pk );
   \      0x148   0x4638             MOV      R0,R7
   \      0x14A   0x....'....        BL       mbedtls_pk_free
   \      0x14E   0xE024             B.N      ??mbedtls_pk_parse_key_5
   1231                  }
   1232          
   1233                  mbedtls_pem_free( &pem );
   1234                  return( ret );
   1235              }
   1236              else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
   \                     ??mbedtls_pk_parse_key_16: (+1)
   \      0x150   0x455D             CMP      R5,R11
   \      0x152   0xD151             BNE.N    ??mbedtls_pk_parse_key_8
   1237                  return( ret );
   1238          
   1239          #if defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
   1240              /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
   1241              if( keylen == 0 || key[keylen - 1] != '\0' )
   \      0x154   0x2C00             CMP      R4,#+0
   \      0x156   0xD011             BEQ.N    ??mbedtls_pk_parse_key_17
   \      0x158   0xEB08 0x0004      ADD      R0,R8,R4
   \      0x15C   0xF810 0x0C01      LDRB     R0,[R0, #-1]
   \      0x160   0x2800             CMP      R0,#+0
   \      0x162   0xD10B             BNE.N    ??mbedtls_pk_parse_key_17
   1242                  ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
   1243              else
   1244                  ret = mbedtls_pem_read_buffer( &pem,
   1245                                         "-----BEGIN ENCRYPTED PRIVATE KEY-----",
   1246                                         "-----END ENCRYPTED PRIVATE KEY-----",
   1247                                         key, NULL, 0, &len );
   \      0x164   0xA806             ADD      R0,SP,#+24
   \      0x166   0x9002             STR      R0,[SP, #+8]
   \      0x168   0x2000             MOVS     R0,#+0
   \      0x16A   0x9001             STR      R0,[SP, #+4]
   \      0x16C   0x9000             STR      R0,[SP, #+0]
   \      0x16E   0x4643             MOV      R3,R8
   \      0x170   0x....             LDR.N    R2,??DataTable13_17
   \      0x172   0x....             LDR.N    R1,??DataTable13_18
   \      0x174   0xA803             ADD      R0,SP,#+12
   \      0x176   0x....'....        BL       mbedtls_pem_read_buffer
   \      0x17A   0x4605             MOV      R5,R0
   1248              if( ret == 0 )
   \                     ??mbedtls_pk_parse_key_17: (+1)
   \      0x17C   0x2D00             CMP      R5,#+0
   \      0x17E   0xD111             BNE.N    ??mbedtls_pk_parse_key_18
   1249              {
   1250                  if( ( ret = pk_parse_key_pkcs8_encrypted_der( pk,
   1251                                                                pem.buf, pem.buflen,
   1252                                                                pwd, pwdlen ) ) != 0 )
   \      0x180   0xF8CD 0xA000      STR      R10,[SP, #+0]
   \      0x184   0x464B             MOV      R3,R9
   \      0x186   0x9A04             LDR      R2,[SP, #+16]
   \      0x188   0x9903             LDR      R1,[SP, #+12]
   \      0x18A   0x4638             MOV      R0,R7
   \      0x18C   0x....'....        BL       pk_parse_key_pkcs8_encrypted_der
   \      0x190   0x0004             MOVS     R4,R0
   \      0x192   0xD002             BEQ.N    ??mbedtls_pk_parse_key_5
   1253                  {
   1254                      mbedtls_pk_free( pk );
   \      0x194   0x4638             MOV      R0,R7
   \      0x196   0x....'....        BL       mbedtls_pk_free
   1255                  }
   1256          
   1257                  mbedtls_pem_free( &pem );
   \                     ??mbedtls_pk_parse_key_5: (+1)
   \      0x19A   0xA803             ADD      R0,SP,#+12
   \      0x19C   0x....'....        BL       mbedtls_pem_free
   1258                  return( ret );
   \      0x1A0   0x4620             MOV      R0,R4
   \      0x1A2   0xE064             B.N      ??mbedtls_pk_parse_key_13
   1259              }
   1260              else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
   \                     ??mbedtls_pk_parse_key_18: (+1)
   \      0x1A4   0x455D             CMP      R5,R11
   \      0x1A6   0xD127             BNE.N    ??mbedtls_pk_parse_key_8
   1261                  return( ret );
   1262          #endif /* MBEDTLS_PKCS12_C || MBEDTLS_PKCS5_C */
   1263          #else
   1264              ((void) pwd);
   1265              ((void) pwdlen);
   1266          #endif /* MBEDTLS_PEM_PARSE_C */
   1267          
   1268              /*
   1269               * At this point we only know it's not a PEM formatted key. Could be any
   1270               * of the known DER encoded private key formats
   1271               *
   1272               * We try the different DER format parsers to see if one passes without
   1273               * error
   1274               */
   1275          #if defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
   1276              {
   1277                  unsigned char *key_copy;
   1278          
   1279                  if( keylen == 0 )
   \      0x1A8   0x2C00             CMP      R4,#+0
   \      0x1AA   0xD101             BNE.N    ??mbedtls_pk_parse_key_19
   1280                      return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
   \      0x1AC   0x....             LDR.N    R0,??DataTable12  ;; 0xffffc300
   \      0x1AE   0xE05E             B.N      ??mbedtls_pk_parse_key_13
   1281          
   1282                  if( ( key_copy = mbedtls_calloc( 1, keylen ) ) == NULL )
   \                     ??mbedtls_pk_parse_key_19: (+1)
   \      0x1B0   0x4621             MOV      R1,R4
   \      0x1B2   0x2001             MOVS     R0,#+1
   \      0x1B4   0x....'....        BL       mbedtls_calloc
   \      0x1B8   0x0006             MOVS     R6,R0
   \      0x1BA   0xD101             BNE.N    ??mbedtls_pk_parse_key_20
   1283                      return( MBEDTLS_ERR_PK_ALLOC_FAILED );
   \      0x1BC   0x....             LDR.N    R0,??DataTable13_19  ;; 0xffffc080
   \      0x1BE   0xE056             B.N      ??mbedtls_pk_parse_key_13
   1284          
   1285                  memcpy( key_copy, key, keylen );
   \                     ??mbedtls_pk_parse_key_20: (+1)
   \      0x1C0   0x4622             MOV      R2,R4
   \      0x1C2   0x4641             MOV      R1,R8
   \      0x1C4   0x....'....        BL       __aeabi_memcpy
   1286          
   1287                  ret = pk_parse_key_pkcs8_encrypted_der( pk, key_copy, keylen,
   1288                                                          pwd, pwdlen );
   \      0x1C8   0xF8CD 0xA000      STR      R10,[SP, #+0]
   \      0x1CC   0x464B             MOV      R3,R9
   \      0x1CE   0x4622             MOV      R2,R4
   \      0x1D0   0x4631             MOV      R1,R6
   \      0x1D2   0x4638             MOV      R0,R7
   \      0x1D4   0x....'....        BL       pk_parse_key_pkcs8_encrypted_der
   \      0x1D8   0x4605             MOV      R5,R0
   1289          
   1290                  mbedtls_platform_zeroize( key_copy, keylen );
   \      0x1DA   0x4621             MOV      R1,R4
   \      0x1DC   0x4630             MOV      R0,R6
   \      0x1DE   0x....'....        BL       mbedtls_platform_zeroize
   1291                  mbedtls_free( key_copy );
   \      0x1E2   0x4630             MOV      R0,R6
   \      0x1E4   0x....'....        BL       mbedtls_free
   1292              }
   1293          
   1294              if( ret == 0 )
   \      0x1E8   0x2D00             CMP      R5,#+0
   \      0x1EA   0xD03F             BEQ.N    ??mbedtls_pk_parse_key_21
   1295                  return( 0 );
   1296          
   1297              mbedtls_pk_free( pk );
   \      0x1EC   0x4638             MOV      R0,R7
   \      0x1EE   0x....'....        BL       mbedtls_pk_free
   1298          
   1299              if( ret == MBEDTLS_ERR_PK_PASSWORD_MISMATCH )
   \      0x1F2   0xF515 0x5F6E      CMN      R5,#+15232
   \      0x1F6   0xD101             BNE.N    ??mbedtls_pk_parse_key_22
   1300              {
   1301                  return( ret );
   \                     ??mbedtls_pk_parse_key_8: (+1)
   \      0x1F8   0x4628             MOV      R0,R5
   \      0x1FA   0xE038             B.N      ??mbedtls_pk_parse_key_13
   1302              }
   1303          #endif /* MBEDTLS_PKCS12_C || MBEDTLS_PKCS5_C */
   1304          
   1305              if( ( ret = pk_parse_key_pkcs8_unencrypted_der( pk, key, keylen ) ) == 0 )
   \                     ??mbedtls_pk_parse_key_22: (+1)
   \      0x1FC   0x4622             MOV      R2,R4
   \      0x1FE   0x4641             MOV      R1,R8
   \      0x200   0x4638             MOV      R0,R7
   \      0x202   0x....'....        BL       pk_parse_key_pkcs8_unencrypted_der
   \      0x206   0x2800             CMP      R0,#+0
   \      0x208   0xD030             BEQ.N    ??mbedtls_pk_parse_key_21
   1306                  return( 0 );
   1307          
   1308              mbedtls_pk_free( pk );
   \      0x20A   0x4638             MOV      R0,R7
   \      0x20C   0x....'....        BL       mbedtls_pk_free
   1309          
   1310          #if defined(MBEDTLS_RSA_C)
   1311          
   1312              pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA );
   \      0x210   0x2001             MOVS     R0,#+1
   \      0x212   0x....'....        BL       mbedtls_pk_info_from_type
   1313              if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 ||
   1314                  ( ret = pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ),
   1315                                                  key, keylen ) ) != 0 )
   \      0x216   0x4601             MOV      R1,R0
   \      0x218   0x4638             MOV      R0,R7
   \      0x21A   0x....'....        BL       mbedtls_pk_setup
   \      0x21E   0x2800             CMP      R0,#+0
   \      0x220   0xD109             BNE.N    ??mbedtls_pk_parse_key_23
   \      0x222   0xE9D7 0x0100      LDRD     R0,R1,[R7, #+0]
   \      0x226   0x....'....        BL       mbedtls_pk_rsa
   \      0x22A   0x4622             MOV      R2,R4
   \      0x22C   0x4641             MOV      R1,R8
   \      0x22E   0x....'....        BL       pk_parse_key_pkcs1_der
   \      0x232   0x2800             CMP      R0,#+0
   \      0x234   0xD01A             BEQ.N    ??mbedtls_pk_parse_key_21
   1316              {
   1317                  mbedtls_pk_free( pk );
   \                     ??mbedtls_pk_parse_key_23: (+1)
   \      0x236   0x4638             MOV      R0,R7
   \      0x238   0x....'....        BL       mbedtls_pk_free
   1318              }
   1319              else
   1320              {
   1321                  return( 0 );
   1322              }
   1323          
   1324          #endif /* MBEDTLS_RSA_C */
   1325          
   1326          #if defined(MBEDTLS_ECP_C)
   1327          
   1328              pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_ECKEY );
   \      0x23C   0x2002             MOVS     R0,#+2
   \      0x23E   0x....'....        BL       mbedtls_pk_info_from_type
   1329              if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 ||
   1330                  ( ret = pk_parse_key_sec1_der( mbedtls_pk_ec( *pk ),
   1331                                                 key, keylen ) ) != 0 )
   \      0x242   0x4601             MOV      R1,R0
   \      0x244   0x4638             MOV      R0,R7
   \      0x246   0x....'....        BL       mbedtls_pk_setup
   \      0x24A   0x2800             CMP      R0,#+0
   \      0x24C   0xD109             BNE.N    ??mbedtls_pk_parse_key_24
   \      0x24E   0xE9D7 0x0100      LDRD     R0,R1,[R7, #+0]
   \      0x252   0x....'....        BL       mbedtls_pk_ec
   \      0x256   0x4622             MOV      R2,R4
   \      0x258   0x4641             MOV      R1,R8
   \      0x25A   0x....'....        BL       pk_parse_key_sec1_der
   \      0x25E   0x2800             CMP      R0,#+0
   \      0x260   0xD004             BEQ.N    ??mbedtls_pk_parse_key_21
   1332              {
   1333                  mbedtls_pk_free( pk );
   \                     ??mbedtls_pk_parse_key_24: (+1)
   \      0x262   0x4638             MOV      R0,R7
   \      0x264   0x....'....        BL       mbedtls_pk_free
   1334              }
   1335              else
   1336              {
   1337                  return( 0 );
   1338              }
   1339          
   1340          #endif /* MBEDTLS_ECP_C */
   1341          
   1342              return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
   \      0x268   0x....             LDR.N    R0,??DataTable12  ;; 0xffffc300
   \      0x26A   0xE000             B.N      ??mbedtls_pk_parse_key_13
   \                     ??mbedtls_pk_parse_key_21: (+1)
   \      0x26C   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_pk_parse_key_13: (+1)
   \      0x26E   0xB007             ADD      SP,SP,#+28
   \      0x270   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   1343          }
   1344          
   1345          /*
   1346           * Parse a public key
   1347           */

   \                                 In section .text, align 2, keep-with-next
   1348          int mbedtls_pk_parse_public_key( mbedtls_pk_context *ctx,
   1349                                   const unsigned char *key, size_t keylen )
   1350          {
   \                     mbedtls_pk_parse_public_key: (+1)
   \        0x0   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \        0x4   0xB088             SUB      SP,SP,#+32
   \        0x6   0x4606             MOV      R6,R0
   \        0x8   0x460F             MOV      R7,R1
   \        0xA   0x4615             MOV      R5,R2
   1351              int ret;
   1352              unsigned char *p;
   1353          #if defined(MBEDTLS_RSA_C)
   1354              const mbedtls_pk_info_t *pk_info;
   1355          #endif
   1356          #if defined(MBEDTLS_PEM_PARSE_C)
   1357              size_t len;
   1358              mbedtls_pem_context pem;
   1359          
   1360              mbedtls_pem_init( &pem );
   \        0xC   0xA804             ADD      R0,SP,#+16
   \        0xE   0x....'....        BL       mbedtls_pem_init
   1361          #if defined(MBEDTLS_RSA_C)
   1362              /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
   1363              if( keylen == 0 || key[keylen - 1] != '\0' )
   \       0x12   0x2D00             CMP      R5,#+0
   \       0x14   0xD004             BEQ.N    ??mbedtls_pk_parse_public_key_0
   \       0x16   0x1978             ADDS     R0,R7,R5
   \       0x18   0xF810 0x0C01      LDRB     R0,[R0, #-1]
   \       0x1C   0x2800             CMP      R0,#+0
   \       0x1E   0xD001             BEQ.N    ??mbedtls_pk_parse_public_key_1
   1364                  ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
   \                     ??mbedtls_pk_parse_public_key_0: (+1)
   \       0x20   0x....             LDR.N    R4,??DataTable13_9  ;; 0xffffef80
   \       0x22   0xE00B             B.N      ??mbedtls_pk_parse_public_key_2
   1365              else
   1366                  ret = mbedtls_pem_read_buffer( &pem,
   1367                                         "-----BEGIN RSA PUBLIC KEY-----",
   1368                                         "-----END RSA PUBLIC KEY-----",
   1369                                         key, NULL, 0, &len );
   \                     ??mbedtls_pk_parse_public_key_1: (+1)
   \       0x24   0xA807             ADD      R0,SP,#+28
   \       0x26   0x9002             STR      R0,[SP, #+8]
   \       0x28   0x2000             MOVS     R0,#+0
   \       0x2A   0x9001             STR      R0,[SP, #+4]
   \       0x2C   0x9000             STR      R0,[SP, #+0]
   \       0x2E   0x463B             MOV      R3,R7
   \       0x30   0x....             LDR.N    R2,??DataTable13_20
   \       0x32   0x....             LDR.N    R1,??DataTable13_21
   \       0x34   0xA804             ADD      R0,SP,#+16
   \       0x36   0x....'....        BL       mbedtls_pem_read_buffer
   \       0x3A   0x4604             MOV      R4,R0
   1370          
   1371              if( ret == 0 )
   \                     ??mbedtls_pk_parse_public_key_2: (+1)
   \       0x3C   0x2C00             CMP      R4,#+0
   \       0x3E   0xD11D             BNE.N    ??mbedtls_pk_parse_public_key_3
   1372              {
   1373                  p = pem.buf;
   \       0x40   0x9804             LDR      R0,[SP, #+16]
   \       0x42   0x9003             STR      R0,[SP, #+12]
   1374                  if( ( pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA ) ) == NULL )
   \       0x44   0x2001             MOVS     R0,#+1
   \       0x46   0x....'....        BL       mbedtls_pk_info_from_type
   \       0x4A   0x2800             CMP      R0,#+0
   \       0x4C   0xD04C             BEQ.N    ??mbedtls_pk_parse_public_key_4
   1375                      return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
   1376          
   1377                  if( ( ret = mbedtls_pk_setup( ctx, pk_info ) ) != 0 )
   \       0x4E   0x4601             MOV      R1,R0
   \       0x50   0x4630             MOV      R0,R6
   \       0x52   0x....'....        BL       mbedtls_pk_setup
   \       0x56   0x2800             CMP      R0,#+0
   \       0x58   0xD16C             BNE.N    ??mbedtls_pk_parse_public_key_5
   1378                      return( ret );
   1379          
   1380                  if ( ( ret = pk_get_rsapubkey( &p, p + pem.buflen, mbedtls_pk_rsa( *ctx ) ) ) != 0 )
   \       0x5A   0xE9D6 0x0100      LDRD     R0,R1,[R6, #+0]
   \       0x5E   0x....'....        BL       mbedtls_pk_rsa
   \       0x62   0x4602             MOV      R2,R0
   \       0x64   0x9803             LDR      R0,[SP, #+12]
   \       0x66   0x9905             LDR      R1,[SP, #+20]
   \       0x68   0x4401             ADD      R1,R0,R1
   \       0x6A   0xA803             ADD      R0,SP,#+12
   \       0x6C   0x....'....        BL       pk_get_rsapubkey
   \       0x70   0x0004             MOVS     R4,R0
   \       0x72   0xD02C             BEQ.N    ??mbedtls_pk_parse_public_key_6
   1381                      mbedtls_pk_free( ctx );
   \       0x74   0x4630             MOV      R0,R6
   \       0x76   0x....'....        BL       mbedtls_pk_free
   \       0x7A   0xE028             B.N      ??mbedtls_pk_parse_public_key_6
   1382          
   1383                  mbedtls_pem_free( &pem );
   1384                  return( ret );
   1385              }
   1386              else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
   \                     ??mbedtls_pk_parse_public_key_3: (+1)
   \       0x7C   0x....'....        LDR.W    R8,??DataTable13_9  ;; 0xffffef80
   \       0x80   0x4544             CMP      R4,R8
   \       0x82   0xD124             BNE.N    ??mbedtls_pk_parse_public_key_6
   1387              {
   1388                  mbedtls_pem_free( &pem );
   1389                  return( ret );
   1390              }
   1391          #endif /* MBEDTLS_RSA_C */
   1392          
   1393              /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
   1394              if( keylen == 0 || key[keylen - 1] != '\0' )
   \       0x84   0x2D00             CMP      R5,#+0
   \       0x86   0xD010             BEQ.N    ??mbedtls_pk_parse_public_key_7
   \       0x88   0x1978             ADDS     R0,R7,R5
   \       0x8A   0xF810 0x0C01      LDRB     R0,[R0, #-1]
   \       0x8E   0x2800             CMP      R0,#+0
   \       0x90   0xD10B             BNE.N    ??mbedtls_pk_parse_public_key_7
   1395                  ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
   1396              else
   1397                  ret = mbedtls_pem_read_buffer( &pem,
   1398                          "-----BEGIN PUBLIC KEY-----",
   1399                          "-----END PUBLIC KEY-----",
   1400                          key, NULL, 0, &len );
   \       0x92   0xA807             ADD      R0,SP,#+28
   \       0x94   0x9002             STR      R0,[SP, #+8]
   \       0x96   0x2000             MOVS     R0,#+0
   \       0x98   0x9001             STR      R0,[SP, #+4]
   \       0x9A   0x9000             STR      R0,[SP, #+0]
   \       0x9C   0x463B             MOV      R3,R7
   \       0x9E   0x....             LDR.N    R2,??DataTable13_22
   \       0xA0   0x....             LDR.N    R1,??DataTable13_23
   \       0xA2   0xA804             ADD      R0,SP,#+16
   \       0xA4   0x....'....        BL       mbedtls_pem_read_buffer
   \       0xA8   0x4604             MOV      R4,R0
   1401          
   1402              if( ret == 0 )
   \                     ??mbedtls_pk_parse_public_key_7: (+1)
   \       0xAA   0x2C00             CMP      R4,#+0
   \       0xAC   0xD10D             BNE.N    ??mbedtls_pk_parse_public_key_8
   1403              {
   1404                  /*
   1405                   * Was PEM encoded
   1406                   */
   1407                  p = pem.buf;
   \       0xAE   0x9804             LDR      R0,[SP, #+16]
   \       0xB0   0x9003             STR      R0,[SP, #+12]
   1408          
   1409                  ret = mbedtls_pk_parse_subpubkey( &p,  p + pem.buflen, ctx );
   \       0xB2   0x4632             MOV      R2,R6
   \       0xB4   0x9905             LDR      R1,[SP, #+20]
   \       0xB6   0x4401             ADD      R1,R0,R1
   \       0xB8   0xA803             ADD      R0,SP,#+12
   \       0xBA   0x....'....        BL       mbedtls_pk_parse_subpubkey
   \       0xBE   0x4604             MOV      R4,R0
   1410                  mbedtls_pem_free( &pem );
   \       0xC0   0xA804             ADD      R0,SP,#+16
   \       0xC2   0x....'....        BL       mbedtls_pem_free
   1411                  return( ret );
   \       0xC6   0x4620             MOV      R0,R4
   \       0xC8   0xE034             B.N      ??mbedtls_pk_parse_public_key_5
   1412              }
   1413              else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
   \                     ??mbedtls_pk_parse_public_key_8: (+1)
   \       0xCA   0x4544             CMP      R4,R8
   \       0xCC   0xD004             BEQ.N    ??mbedtls_pk_parse_public_key_9
   1414              {
   1415                  mbedtls_pem_free( &pem );
   \                     ??mbedtls_pk_parse_public_key_6: (+1)
   \       0xCE   0xA804             ADD      R0,SP,#+16
   \       0xD0   0x....'....        BL       mbedtls_pem_free
   1416                  return( ret );
   \       0xD4   0x4620             MOV      R0,R4
   \       0xD6   0xE02D             B.N      ??mbedtls_pk_parse_public_key_5
   1417              }
   1418              mbedtls_pem_free( &pem );
   \                     ??mbedtls_pk_parse_public_key_9: (+1)
   \       0xD8   0xA804             ADD      R0,SP,#+16
   \       0xDA   0x....'....        BL       mbedtls_pem_free
   1419          #endif /* MBEDTLS_PEM_PARSE_C */
   1420          
   1421          #if defined(MBEDTLS_RSA_C)
   1422              if( ( pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA ) ) == NULL )
   \       0xDE   0x2001             MOVS     R0,#+1
   \       0xE0   0x....'....        BL       mbedtls_pk_info_from_type
   \       0xE4   0x2800             CMP      R0,#+0
   \       0xE6   0xD101             BNE.N    ??mbedtls_pk_parse_public_key_10
   1423                  return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
   \                     ??mbedtls_pk_parse_public_key_4: (+1)
   \       0xE8   0x....             LDR.N    R0,??DataTable13_2  ;; 0xffffc380
   \       0xEA   0xE023             B.N      ??mbedtls_pk_parse_public_key_5
   1424          
   1425              if( ( ret = mbedtls_pk_setup( ctx, pk_info ) ) != 0 )
   \                     ??mbedtls_pk_parse_public_key_10: (+1)
   \       0xEC   0x4601             MOV      R1,R0
   \       0xEE   0x4630             MOV      R0,R6
   \       0xF0   0x....'....        BL       mbedtls_pk_setup
   \       0xF4   0x2800             CMP      R0,#+0
   \       0xF6   0xD11D             BNE.N    ??mbedtls_pk_parse_public_key_5
   1426                  return( ret );
   1427          
   1428              p = (unsigned char *)key;
   \       0xF8   0x9703             STR      R7,[SP, #+12]
   1429              ret = pk_get_rsapubkey( &p, p + keylen, mbedtls_pk_rsa( *ctx ) );
   \       0xFA   0xE9D6 0x0100      LDRD     R0,R1,[R6, #+0]
   \       0xFE   0x....'....        BL       mbedtls_pk_rsa
   \      0x102   0x4602             MOV      R2,R0
   \      0x104   0x9803             LDR      R0,[SP, #+12]
   \      0x106   0x1941             ADDS     R1,R0,R5
   \      0x108   0xA803             ADD      R0,SP,#+12
   \      0x10A   0x....'....        BL       pk_get_rsapubkey
   \      0x10E   0x0004             MOVS     R4,R0
   1430              if( ret == 0 )
   \      0x110   0xD101             BNE.N    ??mbedtls_pk_parse_public_key_11
   1431              {
   1432                  return( ret );
   \      0x112   0x2000             MOVS     R0,#+0
   \      0x114   0xE00E             B.N      ??mbedtls_pk_parse_public_key_5
   1433              }
   1434              mbedtls_pk_free( ctx );
   \                     ??mbedtls_pk_parse_public_key_11: (+1)
   \      0x116   0x4630             MOV      R0,R6
   \      0x118   0x....'....        BL       mbedtls_pk_free
   1435              if( ret != ( MBEDTLS_ERR_PK_INVALID_PUBKEY + MBEDTLS_ERR_ASN1_UNEXPECTED_TAG ) )
   \      0x11C   0x....             LDR.N    R0,??DataTable13_24  ;; 0xffffc49e
   \      0x11E   0x4284             CMP      R4,R0
   \      0x120   0xD001             BEQ.N    ??mbedtls_pk_parse_public_key_12
   1436              {
   1437                  return( ret );
   \      0x122   0x4620             MOV      R0,R4
   \      0x124   0xE006             B.N      ??mbedtls_pk_parse_public_key_5
   1438              }
   1439          #endif /* MBEDTLS_RSA_C */
   1440              p = (unsigned char *) key;
   \                     ??mbedtls_pk_parse_public_key_12: (+1)
   \      0x126   0x9703             STR      R7,[SP, #+12]
   1441          
   1442              ret = mbedtls_pk_parse_subpubkey( &p, p + keylen, ctx );
   1443          
   1444              return( ret );
   \      0x128   0x4632             MOV      R2,R6
   \      0x12A   0x4638             MOV      R0,R7
   \      0x12C   0x1941             ADDS     R1,R0,R5
   \      0x12E   0xA803             ADD      R0,SP,#+12
   \      0x130   0x....'....        BL       mbedtls_pk_parse_subpubkey
   \                     ??mbedtls_pk_parse_public_key_5: (+1)
   \      0x134   0xB008             ADD      SP,SP,#+32
   \      0x136   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   1445          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \        0x0   0xFFFF'C2A0        DC32     0xffffc2a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_1:
   \        0x0   0xFFFF'C29E        DC32     0xffffc29e

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_2:
   \        0x0   0xFFFF'C29A        DC32     0xffffc29a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_3:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_4:
   \        0x0   0xFFFF'C680        DC32     0xffffc680

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \        0x0   0xFFFF'C300        DC32     0xffffc300

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_1:
   \        0x0   0xFFFF'B180        DC32     0xffffb180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_2:
   \        0x0   0xFFFF'C600        DC32     0xffffc600

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13:
   \        0x0   0xFFFF'C49A        DC32     0xffffc49a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_1:
   \        0x0   0xFFFF'C500        DC32     0xffffc500

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_2:
   \        0x0   0xFFFF'C380        DC32     0xffffc380

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_3:
   \        0x0   0xFFFF'C580        DC32     0xffffc580

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_4:
   \        0x0   0xFFFF'C280        DC32     0xffffc280

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_5:
   \        0x0   0xFFFF'C400        DC32     0xffffc400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_6:
   \        0x0   0xFFFF'C480        DC32     0xffffc480

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_7:
   \        0x0   0x....'....        DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_8:
   \        0x0   0x....'....        DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_9:
   \        0x0   0xFFFF'EF80        DC32     0xffffef80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_10:
   \        0x0   0x....'....        DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_11:
   \        0x0   0x....'....        DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_12:
   \        0x0   0xFFFF'ED00        DC32     0xffffed00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_13:
   \        0x0   0x....'....        DC32     ?_6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_14:
   \        0x0   0x....'....        DC32     ?_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_15:
   \        0x0   0x....'....        DC32     ?_8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_16:
   \        0x0   0x....'....        DC32     ?_7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_17:
   \        0x0   0x....'....        DC32     ?_10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_18:
   \        0x0   0x....'....        DC32     ?_9

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_19:
   \        0x0   0xFFFF'C080        DC32     0xffffc080

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_20:
   \        0x0   0x....'....        DC32     ?_12

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_21:
   \        0x0   0x....'....        DC32     ?_11

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_22:
   \        0x0   0x....'....        DC32     ?_14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_23:
   \        0x0   0x....'....        DC32     ?_13

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_24:
   \        0x0   0xFFFF'C49E        DC32     0xffffc49e

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x2A 0x86          DC8 "*\206H\316=\001\001"
   \              0x48 0xCE    
   \              0x3D 0x01    
   \              0x01 0x00    

   \                                 In section .rodata, align 4
   \                     ?_1:
   \        0x0   0x2A 0x86          DC8 "*\206H\206\367\015\001\014\001\001"
   \              0x48 0x86    
   \              0xF7 0x0D    
   \              0x01 0x0C    
   \              0x01 0x01    
   \              0x00         
   \        0xB   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_2:
   \        0x0   0x2A 0x86          DC8 "*\206H\206\367\015\001\005\015"
   \              0x48 0x86    
   \              0xF7 0x0D    
   \              0x01 0x05    
   \              0x0D 0x00    
   \        0xA   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_3:
   \        0x0   0x2D 0x2D          DC8 "-----BEGIN RSA PRIVATE KEY-----"
   \              0x2D 0x2D    
   \              0x2D 0x42    
   \              0x45 0x47    
   \              0x49 0x4E    
   \              0x20 0x52    
   \              0x53 0x41    
   \              0x20 0x50    
   \              0x52 0x49    
   \              0x56 0x41    
   \              0x54 0x45    
   \              0x20 0x4B    
   \              0x45 0x59    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x00    

   \                                 In section .rodata, align 4
   \                     ?_4:
   \        0x0   0x2D 0x2D          DC8 "-----END RSA PRIVATE KEY-----"
   \              0x2D 0x2D    
   \              0x2D 0x45    
   \              0x4E 0x44    
   \              0x20 0x52    
   \              0x53 0x41    
   \              0x20 0x50    
   \              0x52 0x49    
   \              0x56 0x41    
   \              0x54 0x45    
   \              0x20 0x4B    
   \              0x45 0x59    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x00    
   \       0x1E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_5:
   \        0x0   0x2D 0x2D          DC8 "-----BEGIN EC PRIVATE KEY-----"
   \              0x2D 0x2D    
   \              0x2D 0x42    
   \              0x45 0x47    
   \              0x49 0x4E    
   \              0x20 0x45    
   \              0x43 0x20    
   \              0x50 0x52    
   \              0x49 0x56    
   \              0x41 0x54    
   \              0x45 0x20    
   \              0x4B 0x45    
   \              0x59 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x00         
   \       0x1F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_6:
   \        0x0   0x2D 0x2D          DC8 "-----END EC PRIVATE KEY-----"
   \              0x2D 0x2D    
   \              0x2D 0x45    
   \              0x4E 0x44    
   \              0x20 0x45    
   \              0x43 0x20    
   \              0x50 0x52    
   \              0x49 0x56    
   \              0x41 0x54    
   \              0x45 0x20    
   \              0x4B 0x45    
   \              0x59 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x00         
   \       0x1D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_7:
   \        0x0   0x2D 0x2D          DC8 "-----BEGIN PRIVATE KEY-----"
   \              0x2D 0x2D    
   \              0x2D 0x42    
   \              0x45 0x47    
   \              0x49 0x4E    
   \              0x20 0x50    
   \              0x52 0x49    
   \              0x56 0x41    
   \              0x54 0x45    
   \              0x20 0x4B    
   \              0x45 0x59    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x00    

   \                                 In section .rodata, align 4
   \                     ?_8:
   \        0x0   0x2D 0x2D          DC8 "-----END PRIVATE KEY-----"
   \              0x2D 0x2D    
   \              0x2D 0x45    
   \              0x4E 0x44    
   \              0x20 0x50    
   \              0x52 0x49    
   \              0x56 0x41    
   \              0x54 0x45    
   \              0x20 0x4B    
   \              0x45 0x59    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x00    
   \       0x1A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_9:
   \        0x0   0x2D 0x2D          DC8 "-----BEGIN ENCRYPTED PRIVATE KEY-----"
   \              0x2D 0x2D    
   \              0x2D 0x42    
   \              0x45 0x47    
   \              0x49 0x4E    
   \              0x20 0x45    
   \              0x4E 0x43    
   \              0x52 0x59    
   \              0x50 0x54    
   \              0x45 0x44    
   \              0x20 0x50    
   \              0x52 0x49    
   \              0x56 0x41    
   \              0x54 0x45    
   \              0x20 0x4B    
   \              0x45 0x59    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x00    
   \       0x26   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_10:
   \        0x0   0x2D 0x2D          DC8 "-----END ENCRYPTED PRIVATE KEY-----"
   \              0x2D 0x2D    
   \              0x2D 0x45    
   \              0x4E 0x44    
   \              0x20 0x45    
   \              0x4E 0x43    
   \              0x52 0x59    
   \              0x50 0x54    
   \              0x45 0x44    
   \              0x20 0x50    
   \              0x52 0x49    
   \              0x56 0x41    
   \              0x54 0x45    
   \              0x20 0x4B    
   \              0x45 0x59    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x00    

   \                                 In section .rodata, align 4
   \                     ?_11:
   \        0x0   0x2D 0x2D          DC8 "-----BEGIN RSA PUBLIC KEY-----"
   \              0x2D 0x2D    
   \              0x2D 0x42    
   \              0x45 0x47    
   \              0x49 0x4E    
   \              0x20 0x52    
   \              0x53 0x41    
   \              0x20 0x50    
   \              0x55 0x42    
   \              0x4C 0x49    
   \              0x43 0x20    
   \              0x4B 0x45    
   \              0x59 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x00         
   \       0x1F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_12:
   \        0x0   0x2D 0x2D          DC8 "-----END RSA PUBLIC KEY-----"
   \              0x2D 0x2D    
   \              0x2D 0x45    
   \              0x4E 0x44    
   \              0x20 0x52    
   \              0x53 0x41    
   \              0x20 0x50    
   \              0x55 0x42    
   \              0x4C 0x49    
   \              0x43 0x20    
   \              0x4B 0x45    
   \              0x59 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x00         
   \       0x1D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_13:
   \        0x0   0x2D 0x2D          DC8 "-----BEGIN PUBLIC KEY-----"
   \              0x2D 0x2D    
   \              0x2D 0x42    
   \              0x45 0x47    
   \              0x49 0x4E    
   \              0x20 0x50    
   \              0x55 0x42    
   \              0x4C 0x49    
   \              0x43 0x20    
   \              0x4B 0x45    
   \              0x59 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x00         
   \       0x1B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_14:
   \        0x0   0x2D 0x2D          DC8 "-----END PUBLIC KEY-----"
   \              0x2D 0x2D    
   \              0x2D 0x45    
   \              0x4E 0x44    
   \              0x20 0x50    
   \              0x55 0x42    
   \              0x4C 0x49    
   \              0x43 0x20    
   \              0x4B 0x45    
   \              0x59 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x00         
   \       0x19   0x00 0x00          DC8 0, 0, 0
   \              0x00         
   1446          
   1447          #endif /* MBEDTLS_PK_PARSE_C */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   mbedtls_pk_ec
      64   mbedtls_pk_parse_key
        64   -> __aeabi_memcpy
        64   -> mbedtls_calloc
        64   -> mbedtls_free
        64   -> mbedtls_pem_free
        64   -> mbedtls_pem_init
        64   -> mbedtls_pem_read_buffer
        64   -> mbedtls_pk_ec
        64   -> mbedtls_pk_free
        64   -> mbedtls_pk_info_from_type
        64   -> mbedtls_pk_rsa
        64   -> mbedtls_pk_setup
        64   -> mbedtls_platform_zeroize
        64   -> pk_parse_key_pkcs1_der
        64   -> pk_parse_key_pkcs8_encrypted_der
        64   -> pk_parse_key_pkcs8_unencrypted_der
        64   -> pk_parse_key_sec1_der
      56   mbedtls_pk_parse_public_key
        56   -> mbedtls_pem_free
        56   -> mbedtls_pem_init
        56   -> mbedtls_pem_read_buffer
        56   -> mbedtls_pk_free
        56   -> mbedtls_pk_info_from_type
        56   -> mbedtls_pk_parse_subpubkey
        56   -> mbedtls_pk_rsa
        56   -> mbedtls_pk_setup
        56   -> pk_get_rsapubkey
      40   mbedtls_pk_parse_subpubkey
        40   -> mbedtls_asn1_get_bitstring_null
        40   -> mbedtls_asn1_get_tag
        40   -> mbedtls_pk_ec
        40   -> mbedtls_pk_free
        40   -> mbedtls_pk_info_from_type
        40   -> mbedtls_pk_rsa
        40   -> mbedtls_pk_setup
        40   -> pk_get_ecpubkey
        40   -> pk_get_pk_alg
        40   -> pk_get_rsapubkey
        40   -> pk_use_ecparams
       0   mbedtls_pk_rsa
      16   pk_get_ecparams
        16   -> mbedtls_asn1_get_tag
      16   pk_get_ecpubkey
        16   -> mbedtls_ecp_check_pubkey
        16   -> mbedtls_ecp_point_read_binary
      32   pk_get_pk_alg
        32   -> __aeabi_memset4
        32   -> mbedtls_asn1_get_alg
        32   -> mbedtls_oid_get_pk_alg
      48   pk_get_rsapubkey
        48   -> mbedtls_asn1_get_tag
        48   -> mbedtls_rsa_check_pubkey
        48   -> mbedtls_rsa_complete
        48   -> mbedtls_rsa_import_raw
      32   pk_group_from_specified
        32   -> mbedtls_asn1_get_int
        32   -> mbedtls_asn1_get_mpi
        32   -> mbedtls_asn1_get_tag
        32   -> mbedtls_ecp_point_read_binary
        32   -> mbedtls_mpi_bitlen
        32   -> mbedtls_mpi_lset
        32   -> mbedtls_mpi_read_binary
        32   -> mbedtls_mpi_size
        32   -> memcmp
     152   pk_group_id_from_group
       152   -> mbedtls_ecp_group_free
       152   -> mbedtls_ecp_group_init
       152   -> mbedtls_ecp_group_load
       152   -> mbedtls_ecp_grp_id_list
       152   -> mbedtls_mpi_cmp_mpi
       152   -> mbedtls_mpi_get_bit
     136   pk_group_id_from_specified
       136   -> mbedtls_ecp_group_free
       136   -> mbedtls_ecp_group_init
       136   -> pk_group_from_specified
       136   -> pk_group_id_from_group
      72   pk_parse_key_pkcs1_der
        72   -> mbedtls_asn1_get_int
        72   -> mbedtls_asn1_get_mpi
        72   -> mbedtls_asn1_get_tag
        72   -> mbedtls_mpi_free
        72   -> mbedtls_mpi_init
        72   -> mbedtls_rsa_complete
        72   -> mbedtls_rsa_free
        72   -> mbedtls_rsa_import_raw
      80   pk_parse_key_pkcs8_encrypted_der
        80   -> mbedtls_asn1_get_alg
        80   -> mbedtls_asn1_get_tag
        80   -> mbedtls_oid_get_pkcs12_pbe_alg
        80   -> mbedtls_pkcs12_pbe
        80   -> mbedtls_pkcs12_pbe_sha1_rc4_128
        80   -> mbedtls_pkcs5_pbes2
        80   -> memcmp
        80   -> pk_parse_key_pkcs8_unencrypted_der
      40   pk_parse_key_pkcs8_unencrypted_der
        40   -> mbedtls_asn1_get_int
        40   -> mbedtls_asn1_get_tag
        40   -> mbedtls_pk_ec
        40   -> mbedtls_pk_free
        40   -> mbedtls_pk_info_from_type
        40   -> mbedtls_pk_rsa
        40   -> mbedtls_pk_setup
        40   -> pk_get_pk_alg
        40   -> pk_parse_key_pkcs1_der
        40   -> pk_parse_key_sec1_der
        40   -> pk_use_ecparams
      56   pk_parse_key_sec1_der
        56   -> mbedtls_asn1_get_bitstring_null
        56   -> mbedtls_asn1_get_int
        56   -> mbedtls_asn1_get_tag
        56   -> mbedtls_ecp_check_privkey
        56   -> mbedtls_ecp_keypair_free
        56   -> mbedtls_ecp_mul
        56   -> mbedtls_mpi_read_binary
        56   -> pk_get_ecparams
        56   -> pk_get_ecpubkey
        56   -> pk_use_ecparams
      16   pk_use_ecparams
        16   -> mbedtls_ecp_group_load
        16   -> mbedtls_oid_get_ec_grp
        16   -> pk_group_id_from_specified


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable11
       4  ??DataTable11_1
       4  ??DataTable11_2
       4  ??DataTable11_3
       4  ??DataTable11_4
       4  ??DataTable12
       4  ??DataTable12_1
       4  ??DataTable12_2
       4  ??DataTable13
       4  ??DataTable13_1
       4  ??DataTable13_10
       4  ??DataTable13_11
       4  ??DataTable13_12
       4  ??DataTable13_13
       4  ??DataTable13_14
       4  ??DataTable13_15
       4  ??DataTable13_16
       4  ??DataTable13_17
       4  ??DataTable13_18
       4  ??DataTable13_19
       4  ??DataTable13_2
       4  ??DataTable13_20
       4  ??DataTable13_21
       4  ??DataTable13_22
       4  ??DataTable13_23
       4  ??DataTable13_24
       4  ??DataTable13_3
       4  ??DataTable13_4
       4  ??DataTable13_5
       4  ??DataTable13_6
       4  ??DataTable13_7
       4  ??DataTable13_8
       4  ??DataTable13_9
       8  ?_0
      12  ?_1
      36  ?_10
      32  ?_11
      32  ?_12
      28  ?_13
      28  ?_14
      12  ?_2
      32  ?_3
      32  ?_4
      32  ?_5
      32  ?_6
      28  ?_7
      28  ?_8
      40  ?_9
       4  mbedtls_pk_ec
     628  mbedtls_pk_parse_key
     314  mbedtls_pk_parse_public_key
     236  mbedtls_pk_parse_subpubkey
       4  mbedtls_pk_rsa
      88  pk_get_ecparams
      42  pk_get_ecpubkey
      92  pk_get_pk_alg
     204  pk_get_rsapubkey
     486  pk_group_from_specified
     206  pk_group_id_from_group
      48  pk_group_id_from_specified
     480  pk_parse_key_pkcs1_der
     334  pk_parse_key_pkcs8_encrypted_der
     236  pk_parse_key_pkcs8_unencrypted_der
     332  pk_parse_key_sec1_der
      72  pk_use_ecparams

 
   412 bytes in section .rodata
 3 938 bytes in section .text
 
 3 938 bytes of CODE  memory
   412 bytes of CONST memory

Errors: none
Warnings: none
