###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.3.193/W32 for ARM         10/Jun/2019  13:48:09
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\CoAPPacket\CoAPSerialize_common.c
#    Command line =  
#        -f C:\Users\nxf42695\AppData\Local\Temp\1\EWB1EC.tmp
#        (C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\CoAPPacket\CoAPSerialize_common.c
#        -D DEBUG -D USE_RTOS -D XIP_EXTERNAL_FLASH=1 -D
#        XIP_BOOT_HEADER_ENABLE=1 -D CPU_MIMXRT1052DVL6B -D FSL_RTOS_FREE_RTOS
#        -D PRINTF_ADVANCED_ENABLE -D
#        "MBEDTLS_CONFIG_FILE=\"ksdk_mbedtls_config.h\"" -lC
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list -lA
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list
#        --diag_suppress Pa082,Pa050 -o
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_d16 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" --preinclude
#        C:\Development\smart_washing_machine_3080/source\app_preinclude.h -I
#        C:\Development\smart_washing_machine_3080/board\ -I
#        C:\Development\smart_washing_machine_3080/source\ -I
#        C:\Development\smart_washing_machine_3080/CMSIS\ -I
#        C:\Development\smart_washing_machine_3080/amazon-freertos/freertos/portable\
#        -I C:\Development\smart_washing_machine_3080/amazon-freertos/include\
#        -I C:\Development\smart_washing_machine_3080/component/lists\ -I
#        C:\Development\smart_washing_machine_3080/component/serial_manager\ -I
#        C:\Development\smart_washing_machine_3080/component/uart\ -I
#        C:\Development\smart_washing_machine_3080/component/kv\ -I
#        C:\Development\smart_washing_machine_3080/component/kv/include\ -I
#        C:\Development\smart_washing_machine_3080/device\ -I
#        C:\Development\smart_washing_machine_3080/doc\ -I
#        C:\Development\smart_washing_machine_3080/drivers\ -I
#        C:\Development\smart_washing_machine_3080/src\ -I
#        C:\Development\smart_washing_machine_3080/startup\ -I
#        C:\Development\smart_washing_machine_3080/utilities\ -I
#        C:\Development\smart_washing_machine_3080/xip\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\atm\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_model\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_sign\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\infra\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\mqtt\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\external_libs\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\coap_cloud\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\CoAPPacket\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\server\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\os\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\awss_reset\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\mbedtls\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\ -I
#        C:\Development\smart_washing_machine_3080\mbedtls\port\ksdk\ -Om)
#    Locale       =  C
#    List file    =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list\CoAPSerialize_common.lst
#    Object file  =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj\CoAPSerialize_common.o
#
###############################################################################

C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\CoAPPacket\CoAPSerialize_common.c
      1          /*
      2           * Copyright (C) 2015-2018 Alibaba Group Holding Limited
      3           */
      4          
      5          
      6          
      7          
      8          #include <stdio.h>
      9          #include <string.h>
     10          #include "CoAPSerialize.h"
     11          #include "iotx_coap_internal.h"
     12          

   \                                 In section .text, align 2, keep-with-next
     13          int CoAPSerialize_Header(CoAPMessage *msg, unsigned char *buf, unsigned short buflen)
     14          {
     15              if(4 > buflen){
   \                     CoAPSerialize_Header: (+1)
   \        0x0   0x2A04             CMP      R2,#+4
   \        0x2   0xDA01             BGE.N    ??CoAPSerialize_Header_0
     16                  return 0;
   \        0x4   0x2000             MOVS     R0,#+0
   \        0x6   0x4770             BX       LR
     17              }
     18              buf[0] = (((msg->header.version & 0x3) << 6) | ((msg->header.type & 0x3) << 4))
     19                          | (msg->header.tokenlen & 0x0F);
   \                     ??CoAPSerialize_Header_0: (+1)
   \        0x8   0x7802             LDRB     R2,[R0, #+0]
   \        0xA   0x4613             MOV      R3,R2
   \        0xC   0x009B             LSLS     R3,R3,#+2
   \        0xE   0xF003 0x0330      AND      R3,R3,#0x30
   \       0x12   0xEA43 0x1382      ORR      R3,R3,R2, LSL #+6
   \       0x16   0xEA43 0x1312      ORR      R3,R3,R2, LSR #+4
   \       0x1A   0x700B             STRB     R3,[R1, #+0]
     20          
     21              buf[1] = msg->header.code;
   \       0x1C   0x7842             LDRB     R2,[R0, #+1]
   \       0x1E   0x704A             STRB     R2,[R1, #+1]
     22              buf[2] = (msg->header.msgid & 0xFF00) >> 8;
   \       0x20   0x8842             LDRH     R2,[R0, #+2]
   \       0x22   0x0A12             LSRS     R2,R2,#+8
   \       0x24   0x708A             STRB     R2,[R1, #+2]
     23              buf[3] = (msg->header.msgid & 0x00FF);
   \       0x26   0x8840             LDRH     R0,[R0, #+2]
   \       0x28   0x70C8             STRB     R0,[R1, #+3]
     24          
     25              return 4;
   \       0x2A   0x2004             MOVS     R0,#+4
   \       0x2C   0x4770             BX       LR               ;; return
     26          }
     27          

   \                                 In section .text, align 2, keep-with-next
     28          int CoAPSerialize_Token(CoAPMessage *msg, unsigned char * buf, unsigned short buflen)
     29          {
   \                     CoAPSerialize_Token: (+1)
   \        0x0   0xB410             PUSH     {R4}
     30              int i = 0;
   \        0x2   0x2300             MOVS     R3,#+0
     31          
     32              if(buflen < msg->header.tokenlen){
   \        0x4   0x7804             LDRB     R4,[R0, #+0]
   \        0x6   0xEBB2 0x1F14      CMP      R2,R4, LSR #+4
   \        0xA   0xD205             BCS.N    ??CoAPSerialize_Token_0
     33                  return 0;
   \        0xC   0x4618             MOV      R0,R3
   \        0xE   0xE009             B.N      ??CoAPSerialize_Token_1
     34              }
     35              for (i = 0; i < msg->header.tokenlen; i++){
     36                  buf[i] = msg->token[i];
   \                     ??CoAPSerialize_Token_2: (+1)
   \       0x10   0x18C2             ADDS     R2,R0,R3
   \       0x12   0x7912             LDRB     R2,[R2, #+4]
   \       0x14   0x54CA             STRB     R2,[R1, R3]
     37              }
   \       0x16   0x1C5B             ADDS     R3,R3,#+1
   \                     ??CoAPSerialize_Token_0: (+1)
   \       0x18   0x7802             LDRB     R2,[R0, #+0]
   \       0x1A   0xEBB3 0x1F12      CMP      R3,R2, LSR #+4
   \       0x1E   0xDBF7             BLT.N    ??CoAPSerialize_Token_2
     38              return msg->header.tokenlen;
   \       0x20   0x7800             LDRB     R0,[R0, #+0]
   \       0x22   0x0900             LSRS     R0,R0,#+4
   \                     ??CoAPSerialize_Token_1: (+1)
   \       0x24   0xBC10             POP      {R4}
   \       0x26   0x4770             BX       LR               ;; return
     39          }
     40          

   \                                 In section .text, align 2, keep-with-next
     41          static unsigned short CoAPSerialize_Option(CoAPMsgOption *option, unsigned char *buf)
     42          {
   \                     CoAPSerialize_Option: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
     43              unsigned char *ptr   = buf;
     44          
     45              if(269 <= option->num){
   \        0x6   0xF240 0x100D      MOVW     R0,#+269
   \        0xA   0x8821             LDRH     R1,[R4, #+0]
   \        0xC   0x4281             CMP      R1,R0
   \        0xE   0xDB02             BLT.N    ??CoAPSerialize_Option_0
     46                  *ptr = ((14 & 0x0F) << 4);
   \       0x10   0x21E0             MOVS     R1,#+224
   \       0x12   0x7029             STRB     R1,[R5, #+0]
   \       0x14   0xE006             B.N      ??CoAPSerialize_Option_1
     47              }
     48              else if(13 <= option->num){
   \                     ??CoAPSerialize_Option_0: (+1)
   \       0x16   0x290D             CMP      R1,#+13
   \       0x18   0xDB02             BLT.N    ??CoAPSerialize_Option_2
     49                  *ptr = ((13 & 0x0F) << 4);
   \       0x1A   0x21D0             MOVS     R1,#+208
   \       0x1C   0x7029             STRB     R1,[R5, #+0]
   \       0x1E   0xE001             B.N      ??CoAPSerialize_Option_1
     50              }
     51              else{
     52                  *ptr = option->num << 4;
   \                     ??CoAPSerialize_Option_2: (+1)
   \       0x20   0x0109             LSLS     R1,R1,#+4
   \       0x22   0x7029             STRB     R1,[R5, #+0]
     53              }
     54          
     55              if (269 <= option->len){
   \                     ??CoAPSerialize_Option_1: (+1)
   \       0x24   0x8861             LDRH     R1,[R4, #+2]
   \       0x26   0x4281             CMP      R1,R0
   \       0x28   0xDB04             BLT.N    ??CoAPSerialize_Option_3
     56                  *ptr |=  (14 & 0x0F);
   \       0x2A   0x7829             LDRB     R1,[R5, #+0]
   \       0x2C   0xF041 0x010E      ORR      R1,R1,#0xE
   \       0x30   0x7029             STRB     R1,[R5, #+0]
   \       0x32   0xE00B             B.N      ??CoAPSerialize_Option_4
     57              }
     58              else if(13 <= option->len){
   \                     ??CoAPSerialize_Option_3: (+1)
   \       0x34   0x290D             CMP      R1,#+13
   \       0x36   0x7829             LDRB     R1,[R5, #+0]
   \       0x38   0xDB03             BLT.N    ??CoAPSerialize_Option_5
     59                  *ptr |= (13 & 0x0F);
   \       0x3A   0xF041 0x010D      ORR      R1,R1,#0xD
   \       0x3E   0x7029             STRB     R1,[R5, #+0]
   \       0x40   0xE004             B.N      ??CoAPSerialize_Option_4
     60              }
     61              else{
     62                  *ptr |= (option->len & 0x0F);
   \                     ??CoAPSerialize_Option_5: (+1)
   \       0x42   0x78A2             LDRB     R2,[R4, #+2]
   \       0x44   0xF002 0x020F      AND      R2,R2,#0xF
   \       0x48   0x4311             ORRS     R1,R2,R1
   \       0x4A   0x7029             STRB     R1,[R5, #+0]
     63              }
     64              ptr ++;
   \                     ??CoAPSerialize_Option_4: (+1)
   \       0x4C   0x1C6E             ADDS     R6,R5,#+1
     65          
     66              if (269 <= option->num){
   \       0x4E   0x8821             LDRH     R1,[R4, #+0]
   \       0x50   0x4281             CMP      R1,R0
   \       0x52   0xDB09             BLT.N    ??CoAPSerialize_Option_6
     67                  *ptr     = (unsigned char)(((option->num - 269) & 0xFF00) >> 8);
   \       0x54   0xF2A1 0x110D      SUBW     R1,R1,#+269
   \       0x58   0x1209             ASRS     R1,R1,#+8
   \       0x5A   0xF806 0x1B01      STRB     R1,[R6], #+1
     68                  *(ptr+1) = (unsigned char)(((option->num - 269) & 0x00FF));
   \       0x5E   0x8821             LDRH     R1,[R4, #+0]
   \       0x60   0x390D             SUBS     R1,R1,#+13
   \       0x62   0xF806 0x1B01      STRB     R1,[R6], #+1
     69                  ptr += 2;
   \       0x66   0xE004             B.N      ??CoAPSerialize_Option_7
     70              }
     71              else if(13 <= option->num){
   \                     ??CoAPSerialize_Option_6: (+1)
   \       0x68   0x290D             CMP      R1,#+13
   \       0x6A   0xDB02             BLT.N    ??CoAPSerialize_Option_7
     72                  *ptr    = (unsigned char)(option->num - 13);
   \       0x6C   0x390D             SUBS     R1,R1,#+13
   \       0x6E   0xF806 0x1B01      STRB     R1,[R6], #+1
     73                  ptr ++;
     74              }
     75          
     76          
     77              if (269 <= option->len){
   \                     ??CoAPSerialize_Option_7: (+1)
   \       0x72   0x8861             LDRH     R1,[R4, #+2]
   \       0x74   0x4281             CMP      R1,R0
   \       0x76   0x4608             MOV      R0,R1
   \       0x78   0xDB09             BLT.N    ??CoAPSerialize_Option_8
     78                  *ptr     = (unsigned char)(((option->len - 269) & 0xFF00) >> 8);
   \       0x7A   0xF2A0 0x100D      SUBW     R0,R0,#+269
   \       0x7E   0x1200             ASRS     R0,R0,#+8
   \       0x80   0xF806 0x0B01      STRB     R0,[R6], #+1
     79                  *(ptr+1) = (unsigned char)(((option->len - 269) & 0x00FF));
   \       0x84   0x8860             LDRH     R0,[R4, #+2]
   \       0x86   0x380D             SUBS     R0,R0,#+13
   \       0x88   0xF806 0x0B01      STRB     R0,[R6], #+1
     80                  ptr += 2;
   \       0x8C   0xE004             B.N      ??CoAPSerialize_Option_9
     81              }
     82              else if(13 <= option->len){
   \                     ??CoAPSerialize_Option_8: (+1)
   \       0x8E   0x280D             CMP      R0,#+13
   \       0x90   0xDB02             BLT.N    ??CoAPSerialize_Option_9
     83                  *ptr = (unsigned char)(option->len - 13);
   \       0x92   0x380D             SUBS     R0,R0,#+13
   \       0x94   0xF806 0x0B01      STRB     R0,[R6], #+1
     84                  ptr ++;
     85              }
     86          
     87          
     88              memcpy(ptr, option->val, option->len);
   \                     ??CoAPSerialize_Option_9: (+1)
   \       0x98   0x8862             LDRH     R2,[R4, #+2]
   \       0x9A   0x6861             LDR      R1,[R4, #+4]
   \       0x9C   0x4630             MOV      R0,R6
   \       0x9E   0x....'....        BL       __aeabi_memcpy
     89              ptr += option->len;
     90          
     91              return (int)(ptr - buf);
   \       0xA2   0x8860             LDRH     R0,[R4, #+2]
   \       0xA4   0x4430             ADD      R0,R6,R0
   \       0xA6   0x1B45             SUBS     R5,R0,R5
   \       0xA8   0x4628             MOV      R0,R5
   \       0xAA   0xB280             UXTH     R0,R0
   \       0xAC   0xBD70             POP      {R4-R6,PC}       ;; return
     92          }
     93          

   \                                 In section .text, align 2, keep-with-next
     94          unsigned short CoAPSerialize_Options(CoAPMessage *msg,  unsigned char * buf, unsigned short buflen)
     95          {
   \                     CoAPSerialize_Options: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
     96              int i      = 0;
   \        0x6   0x2600             MOVS     R6,#+0
     97              unsigned short count  = 0;
   \        0x8   0x4637             MOV      R7,R6
     98          
     99              for (i = 0; i < msg->optcount; i++)
   \        0xA   0xE001             B.N      ??CoAPSerialize_Options_0
    100              {
    101                  unsigned short len = 0;
    102                  len = CoAPSerialize_Option(&msg->options[i], &buf[count]);
    103                  if (0 < len){
    104                      count += len;
   \                     ??CoAPSerialize_Options_1: (+1)
   \        0xC   0x19C7             ADDS     R7,R0,R7
    105                  }
   \        0xE   0x1C76             ADDS     R6,R6,#+1
   \                     ??CoAPSerialize_Options_0: (+1)
   \       0x10   0xF894 0x006C      LDRB     R0,[R4, #+108]
   \       0x14   0x4286             CMP      R6,R0
   \       0x16   0x4638             MOV      R0,R7
   \       0x18   0xB280             UXTH     R0,R0
   \       0x1A   0xDA08             BGE.N    ??CoAPSerialize_Options_2
   \       0x1C   0x1829             ADDS     R1,R5,R0
   \       0x1E   0xEB04 0x00C6      ADD      R0,R4,R6, LSL #+3
   \       0x22   0x300C             ADDS     R0,R0,#+12
   \       0x24   0x....'....        BL       CoAPSerialize_Option
   \       0x28   0x2800             CMP      R0,#+0
   \       0x2A   0xD1EF             BNE.N    ??CoAPSerialize_Options_1
    106                  else{
    107                      return 0;
   \       0x2C   0x2000             MOVS     R0,#+0
    108                  }
    109              }
    110          
    111              return count;
   \                     ??CoAPSerialize_Options_2: (+1)
   \       0x2E   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    112          }
    113          

   \                                 In section .text, align 2, keep-with-next
    114          static unsigned short CoAPSerialize_OptionLen(CoAPMsgOption *option)
    115          {
   \                     CoAPSerialize_OptionLen: (+1)
   \        0x0   0x4601             MOV      R1,R0
    116              unsigned short  len  = 1;
   \        0x2   0x2001             MOVS     R0,#+1
    117          
    118              if(269 <= option->num){
   \        0x4   0xF240 0x120D      MOVW     R2,#+269
   \        0x8   0x880B             LDRH     R3,[R1, #+0]
   \        0xA   0x4293             CMP      R3,R2
   \        0xC   0xDB01             BLT.N    ??CoAPSerialize_OptionLen_0
    119                  len += 2;
   \        0xE   0x2003             MOVS     R0,#+3
   \       0x10   0xE002             B.N      ??CoAPSerialize_OptionLen_1
    120              }
    121              else if(13 <= option->num){
   \                     ??CoAPSerialize_OptionLen_0: (+1)
   \       0x12   0x2B0D             CMP      R3,#+13
   \       0x14   0xDB00             BLT.N    ??CoAPSerialize_OptionLen_1
    122                  len += 1;
   \       0x16   0x2002             MOVS     R0,#+2
    123              }
    124              else{
    125              }
    126          
    127              if (269 <= option->len){
   \                     ??CoAPSerialize_OptionLen_1: (+1)
   \       0x18   0x884B             LDRH     R3,[R1, #+2]
   \       0x1A   0x4293             CMP      R3,R2
   \       0x1C   0xDB01             BLT.N    ??CoAPSerialize_OptionLen_2
    128                  len += 2;
   \       0x1E   0x1C80             ADDS     R0,R0,#+2
   \       0x20   0xE003             B.N      ??CoAPSerialize_OptionLen_3
    129              }
    130              else if(13 <= option->len){
   \                     ??CoAPSerialize_OptionLen_2: (+1)
   \       0x22   0x461A             MOV      R2,R3
   \       0x24   0x2A0D             CMP      R2,#+13
   \       0x26   0xDB00             BLT.N    ??CoAPSerialize_OptionLen_3
    131                  len += 1;
   \       0x28   0x1C40             ADDS     R0,R0,#+1
    132              }
    133              else{
    134              }
    135          
    136              len += option->len;
    137              return len;
   \                     ??CoAPSerialize_OptionLen_3: (+1)
   \       0x2A   0x4619             MOV      R1,R3
   \       0x2C   0x1808             ADDS     R0,R1,R0
   \       0x2E   0xB280             UXTH     R0,R0
   \       0x30   0x4770             BX       LR               ;; return
    138          }
    139          
    140          

   \                                 In section .text, align 2, keep-with-next
    141          unsigned short CoAPSerialize_OptionsLen(CoAPMessage *msg)
    142          {
   \                     CoAPSerialize_OptionsLen: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4604             MOV      R4,R0
    143              int i      = 0;
   \        0x4   0x2500             MOVS     R5,#+0
    144              unsigned short count  = 0;
   \        0x6   0x462E             MOV      R6,R5
    145          
    146              for (i = 0; i < msg->optcount; i++)
   \        0x8   0xE001             B.N      ??CoAPSerialize_OptionsLen_0
    147              {
    148                  unsigned short len = 0;
    149                  len = CoAPSerialize_OptionLen(&msg->options[i]);
    150                  if (0 < len){
    151                      count += len;
   \                     ??CoAPSerialize_OptionsLen_1: (+1)
   \        0xA   0x1986             ADDS     R6,R0,R6
    152                  }
   \        0xC   0x1C6D             ADDS     R5,R5,#+1
   \                     ??CoAPSerialize_OptionsLen_0: (+1)
   \        0xE   0xF894 0x006C      LDRB     R0,[R4, #+108]
   \       0x12   0x4285             CMP      R5,R0
   \       0x14   0xDA08             BGE.N    ??CoAPSerialize_OptionsLen_2
   \       0x16   0xEB04 0x00C5      ADD      R0,R4,R5, LSL #+3
   \       0x1A   0x300C             ADDS     R0,R0,#+12
   \       0x1C   0x....'....        BL       CoAPSerialize_OptionLen
   \       0x20   0x2800             CMP      R0,#+0
   \       0x22   0xD1F2             BNE.N    ??CoAPSerialize_OptionsLen_1
    153                  else{
    154                      return 0;
   \       0x24   0x2000             MOVS     R0,#+0
   \       0x26   0xBD70             POP      {R4-R6,PC}
    155                  }
    156              }
    157          
    158              return count;
   \                     ??CoAPSerialize_OptionsLen_2: (+1)
   \       0x28   0x4630             MOV      R0,R6
   \       0x2A   0xB280             UXTH     R0,R0
   \       0x2C   0xBD70             POP      {R4-R6,PC}       ;; return
    159          }
    160          
    161          

   \                                 In section .text, align 2, keep-with-next
    162          int CoAPSerialize_Payload(CoAPMessage *msg, unsigned char *buf, int buflen)
    163          {
   \                     CoAPSerialize_Payload: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x4608             MOV      R0,R1
    164              if(msg->payloadlen + 1 > buflen){
   \        0x6   0xF8B4 0x106E      LDRH     R1,[R4, #+110]
   \        0xA   0x1C49             ADDS     R1,R1,#+1
   \        0xC   0x428A             CMP      R2,R1
   \        0xE   0xDB12             BLT.N    ??CoAPSerialize_Payload_0
    165                  return 0;
    166              }
    167              if(msg->payloadlen > 0 && NULL != msg->payload)
   \       0x10   0xF8B4 0x106E      LDRH     R1,[R4, #+110]
   \       0x14   0x2900             CMP      R1,#+0
   \       0x16   0xD00E             BEQ.N    ??CoAPSerialize_Payload_0
   \       0x18   0x6F21             LDR      R1,[R4, #+112]
   \       0x1A   0x2900             CMP      R1,#+0
   \       0x1C   0xD00B             BEQ.N    ??CoAPSerialize_Payload_0
    168              {
    169                  *buf = 0xFF;
   \       0x1E   0x21FF             MOVS     R1,#+255
   \       0x20   0xF800 0x1B01      STRB     R1,[R0], #+1
    170                  buf ++;
    171                  memcpy(buf, msg->payload, msg->payloadlen);
   \       0x24   0xF8B4 0x206E      LDRH     R2,[R4, #+110]
   \       0x28   0x6F21             LDR      R1,[R4, #+112]
   \       0x2A   0x....'....        BL       __aeabi_memcpy
    172                  return msg->payloadlen + 1;
   \       0x2E   0xF8B4 0x006E      LDRH     R0,[R4, #+110]
   \       0x32   0x1C40             ADDS     R0,R0,#+1
   \       0x34   0xBD10             POP      {R4,PC}
    173              }
    174              else{
    175                  return 0;
   \                     ??CoAPSerialize_Payload_0: (+1)
   \       0x36   0x2000             MOVS     R0,#+0
   \       0x38   0xBD10             POP      {R4,PC}          ;; return
    176              }
    177          }
    178          
    179          

   \                                 In section .text, align 2, keep-with-next
    180          unsigned short CoAPSerialize_MessageLength(CoAPMessage *msg)
    181          {
   \                     CoAPSerialize_MessageLength: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4604             MOV      R4,R0
    182              unsigned short msglen = 4;
    183          
    184              msglen += msg->header.tokenlen;
   \        0x4   0x7825             LDRB     R5,[R4, #+0]
   \        0x6   0x092D             LSRS     R5,R5,#+4
   \        0x8   0x1D2D             ADDS     R5,R5,#+4
    185              msglen += CoAPSerialize_OptionsLen(msg);
   \        0xA   0x....'....        BL       CoAPSerialize_OptionsLen
   \        0xE   0x1945             ADDS     R5,R0,R5
    186          
    187              if(0 < msg->payloadlen){
   \       0x10   0xF8B4 0x006E      LDRH     R0,[R4, #+110]
   \       0x14   0x2800             CMP      R0,#+0
   \       0x16   0xD001             BEQ.N    ??CoAPSerialize_MessageLength_0
    188                  msglen += msg->payloadlen;
    189                  msglen += 1; /*CoAP payload marker*/
   \       0x18   0x1C40             ADDS     R0,R0,#+1
   \       0x1A   0x1945             ADDS     R5,R0,R5
    190              }
    191          
    192              return msglen;
   \                     ??CoAPSerialize_MessageLength_0: (+1)
   \       0x1C   0x4628             MOV      R0,R5
   \       0x1E   0xB280             UXTH     R0,R0
   \       0x20   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    193          }
    194          

   \                                 In section .text, align 2, keep-with-next
    195          int CoAPSerialize_Message(CoAPMessage *msg, unsigned char *buf, unsigned short buflen)
    196          {
   \                     CoAPSerialize_Message: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x4605             MOV      R5,R0
   \        0x4   0x460C             MOV      R4,R1
   \        0x6   0x4617             MOV      R7,R2
    197              unsigned char *ptr   = buf;
    198              unsigned short count = 0;
    199              unsigned short remlen  = buflen;
    200          
    201              if(NULL == buf || NULL == msg){
   \        0x8   0x2C00             CMP      R4,#+0
   \        0xA   0xD001             BEQ.N    ??CoAPSerialize_Message_0
   \        0xC   0x2D00             CMP      R5,#+0
   \        0xE   0xD102             BNE.N    ??CoAPSerialize_Message_1
    202                  return COAP_ERROR_INVALID_PARAM;
   \                     ??CoAPSerialize_Message_0: (+1)
   \       0x10   0xF240 0x1001      MOVW     R0,#+257
   \       0x14   0xBDF2             POP      {R1,R4-R7,PC}
    203              }
    204          
    205              count = CoAPSerialize_Header(msg, ptr, remlen);
   \                     ??CoAPSerialize_Message_1: (+1)
   \       0x16   0x....'....        BL       CoAPSerialize_Header
   \       0x1A   0x4606             MOV      R6,R0
   \       0x1C   0xB2B6             UXTH     R6,R6
    206              ptr += count;
   \       0x1E   0x4434             ADD      R4,R4,R6
    207              remlen -= count;
   \       0x20   0x1BBE             SUBS     R6,R7,R6
    208          
    209              count = CoAPSerialize_Token(msg, ptr, remlen);
   \       0x22   0x4632             MOV      R2,R6
   \       0x24   0xB292             UXTH     R2,R2
   \       0x26   0x4621             MOV      R1,R4
   \       0x28   0x4628             MOV      R0,R5
   \       0x2A   0x....'....        BL       CoAPSerialize_Token
   \       0x2E   0xB280             UXTH     R0,R0
    210              ptr += count;
   \       0x30   0x4404             ADD      R4,R4,R0
    211              remlen -= count;
   \       0x32   0x1A36             SUBS     R6,R6,R0
    212          
    213              count = CoAPSerialize_Options(msg, ptr, remlen);
   \       0x34   0x4632             MOV      R2,R6
   \       0x36   0xB292             UXTH     R2,R2
   \       0x38   0x4621             MOV      R1,R4
   \       0x3A   0x4628             MOV      R0,R5
   \       0x3C   0x....'....        BL       CoAPSerialize_Options
    214              ptr += count;
    215              remlen -= count;
   \       0x40   0x1A36             SUBS     R6,R6,R0
    216          
    217              count = CoAPSerialize_Payload(msg, ptr, remlen);
   \       0x42   0x4632             MOV      R2,R6
   \       0x44   0xB292             UXTH     R2,R2
   \       0x46   0x1821             ADDS     R1,R4,R0
   \       0x48   0x4628             MOV      R0,R5
   \       0x4A   0x....'....        BL       CoAPSerialize_Payload
   \       0x4E   0xB280             UXTH     R0,R0
    218              ptr += count;
    219              remlen -= count;
    220          
    221              return (buflen-remlen);
   \       0x50   0x1A36             SUBS     R6,R6,R0
   \       0x52   0xB2B6             UXTH     R6,R6
   \       0x54   0x1BBF             SUBS     R7,R7,R6
   \       0x56   0x4638             MOV      R0,R7
   \       0x58   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    222          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   CoAPSerialize_Header
      24   CoAPSerialize_Message
        24   -> CoAPSerialize_Header
        24   -> CoAPSerialize_Options
        24   -> CoAPSerialize_Payload
        24   -> CoAPSerialize_Token
      16   CoAPSerialize_MessageLength
        16   -> CoAPSerialize_OptionsLen
      16   CoAPSerialize_Option
        16   -> __aeabi_memcpy
       0   CoAPSerialize_OptionLen
      24   CoAPSerialize_Options
        24   -> CoAPSerialize_Option
      16   CoAPSerialize_OptionsLen
        16   -> CoAPSerialize_OptionLen
       8   CoAPSerialize_Payload
         8   -> __aeabi_memcpy
       4   CoAPSerialize_Token


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      46  CoAPSerialize_Header
      90  CoAPSerialize_Message
      34  CoAPSerialize_MessageLength
     174  CoAPSerialize_Option
      50  CoAPSerialize_OptionLen
      48  CoAPSerialize_Options
      46  CoAPSerialize_OptionsLen
      58  CoAPSerialize_Payload
      40  CoAPSerialize_Token

 
 586 bytes in section .text
 
 586 bytes of CODE memory

Errors: none
Warnings: none
