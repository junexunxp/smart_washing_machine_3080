###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.3.193/W32 for ARM         10/Jun/2019  13:48:47
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\Development\smart_washing_machine_3080\mbedtls\library\sha256.c
#    Command line =  
#        -f C:\Users\nxf42695\AppData\Local\Temp\1\EW457E.tmp
#        (C:\Development\smart_washing_machine_3080\mbedtls\library\sha256.c -D
#        DEBUG -D USE_RTOS -D XIP_EXTERNAL_FLASH=1 -D XIP_BOOT_HEADER_ENABLE=1
#        -D CPU_MIMXRT1052DVL6B -D FSL_RTOS_FREE_RTOS -D PRINTF_ADVANCED_ENABLE
#        -D "MBEDTLS_CONFIG_FILE=\"ksdk_mbedtls_config.h\"" -lC
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list -lA
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list
#        --diag_suppress Pa082,Pa050 -o
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_d16 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" --preinclude
#        C:\Development\smart_washing_machine_3080/source\app_preinclude.h -I
#        C:\Development\smart_washing_machine_3080/board\ -I
#        C:\Development\smart_washing_machine_3080/source\ -I
#        C:\Development\smart_washing_machine_3080/CMSIS\ -I
#        C:\Development\smart_washing_machine_3080/amazon-freertos/freertos/portable\
#        -I C:\Development\smart_washing_machine_3080/amazon-freertos/include\
#        -I C:\Development\smart_washing_machine_3080/component/lists\ -I
#        C:\Development\smart_washing_machine_3080/component/serial_manager\ -I
#        C:\Development\smart_washing_machine_3080/component/uart\ -I
#        C:\Development\smart_washing_machine_3080/component/kv\ -I
#        C:\Development\smart_washing_machine_3080/component/kv/include\ -I
#        C:\Development\smart_washing_machine_3080/device\ -I
#        C:\Development\smart_washing_machine_3080/doc\ -I
#        C:\Development\smart_washing_machine_3080/drivers\ -I
#        C:\Development\smart_washing_machine_3080/src\ -I
#        C:\Development\smart_washing_machine_3080/startup\ -I
#        C:\Development\smart_washing_machine_3080/utilities\ -I
#        C:\Development\smart_washing_machine_3080/xip\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\atm\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_model\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_sign\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\infra\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\mqtt\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\external_libs\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\coap_cloud\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\CoAPPacket\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\server\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\os\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\awss_reset\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\mbedtls\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\ -I
#        C:\Development\smart_washing_machine_3080\mbedtls\port\ksdk\ -Om)
#    Locale       =  C
#    List file    =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list\sha256.lst
#    Object file  =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj\sha256.o
#
###############################################################################

C:\Development\smart_washing_machine_3080\mbedtls\library\sha256.c
      1          /*
      2           *  FIPS-180-2 compliant SHA-256 implementation
      3           *
      4           *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
      5           *  SPDX-License-Identifier: Apache-2.0
      6           *
      7           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
      8           *  not use this file except in compliance with the License.
      9           *  You may obtain a copy of the License at
     10           *
     11           *  http://www.apache.org/licenses/LICENSE-2.0
     12           *
     13           *  Unless required by applicable law or agreed to in writing, software
     14           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     15           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     16           *  See the License for the specific language governing permissions and
     17           *  limitations under the License.
     18           *
     19           *  This file is part of mbed TLS (https://tls.mbed.org)
     20           */
     21          /*
     22           *  The SHA-256 Secure Hash Standard was published by NIST in 2002.
     23           *
     24           *  http://csrc.nist.gov/publications/fips/fips180-2/fips180-2.pdf
     25           */
     26          
     27          #if !defined(MBEDTLS_CONFIG_FILE)
     28          #include "mbedtls/config.h"
     29          #else
     30          #include MBEDTLS_CONFIG_FILE
     31          #endif
     32          
     33          #if defined(MBEDTLS_SHA256_C)
     34          
     35          #include "mbedtls/sha256.h"
     36          #include "mbedtls/platform_util.h"
     37          
     38          #include <string.h>
     39          
     40          #if defined(MBEDTLS_SELF_TEST)
     41          #if defined(MBEDTLS_PLATFORM_C)
     42          #include "mbedtls/platform.h"
     43          #else
     44          #include <stdio.h>
     45          #include <stdlib.h>
     46          #define mbedtls_printf printf
     47          #define mbedtls_calloc    calloc
     48          #define mbedtls_free       free
     49          #endif /* MBEDTLS_PLATFORM_C */
     50          #endif /* MBEDTLS_SELF_TEST */
     51          
     52          #if !defined(MBEDTLS_SHA256_ALT)
     53          
     54          /*
     55           * 32-bit integer manipulation macros (big endian)
     56           */
     57          #ifndef GET_UINT32_BE
     58          #define GET_UINT32_BE(n,b,i)                            \
     59          do {                                                    \
     60              (n) = ( (uint32_t) (b)[(i)    ] << 24 )             \
     61                  | ( (uint32_t) (b)[(i) + 1] << 16 )             \
     62                  | ( (uint32_t) (b)[(i) + 2] <<  8 )             \
     63                  | ( (uint32_t) (b)[(i) + 3]       );            \
     64          } while( 0 )
     65          #endif
     66          
     67          #ifndef PUT_UINT32_BE
     68          #define PUT_UINT32_BE(n,b,i)                            \
     69          do {                                                    \
     70              (b)[(i)    ] = (unsigned char) ( (n) >> 24 );       \
     71              (b)[(i) + 1] = (unsigned char) ( (n) >> 16 );       \
     72              (b)[(i) + 2] = (unsigned char) ( (n) >>  8 );       \
     73              (b)[(i) + 3] = (unsigned char) ( (n)       );       \
     74          } while( 0 )
     75          #endif
     76          

   \                                 In section .text, align 2, keep-with-next
     77          void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
     78          {
     79              memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
   \                     mbedtls_sha256_init: (+1)
   \        0x0   0x2200             MOVS     R2,#+0
   \        0x2   0x216C             MOVS     R1,#+108
   \        0x4   0x....'....        B.W      __aeabi_memset4
     80          }
     81          

   \                                 In section .text, align 2, keep-with-next
     82          void mbedtls_sha256_free( mbedtls_sha256_context *ctx )
     83          {
     84              if( ctx == NULL )
   \                     mbedtls_sha256_free: (+1)
   \        0x0   0x2800             CMP      R0,#+0
   \        0x2   0xD002             BEQ.N    ??mbedtls_sha256_free_0
     85                  return;
     86          
     87              mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha256_context ) );
   \        0x4   0x216C             MOVS     R1,#+108
   \        0x6   0x....'....        B.W      mbedtls_platform_zeroize
   \                     ??mbedtls_sha256_free_0: (+1)
   \        0xA   0x4770             BX       LR               ;; return
     88          }
     89          

   \                                 In section .text, align 2, keep-with-next
     90          void mbedtls_sha256_clone( mbedtls_sha256_context *dst,
     91                                     const mbedtls_sha256_context *src )
     92          {
     93              *dst = *src;
   \                     mbedtls_sha256_clone: (+1)
   \        0x0   0x226C             MOVS     R2,#+108
   \        0x2   0x....'....        B.W      __aeabi_memcpy4
     94          }
     95          
     96          /*
     97           * SHA-256 context setup
     98           */

   \                                 In section .text, align 2, keep-with-next
     99          int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
    100          {
    101              ctx->total[0] = 0;
   \                     mbedtls_sha256_starts_ret: (+1)
   \        0x0   0x2200             MOVS     R2,#+0
   \        0x2   0x6002             STR      R2,[R0, #+0]
    102              ctx->total[1] = 0;
   \        0x4   0x6042             STR      R2,[R0, #+4]
    103          
    104              if( is224 == 0 )
   \        0x6   0x2900             CMP      R1,#+0
   \        0x8   0xD118             BNE.N    ??mbedtls_sha256_starts_ret_0
    105              {
    106                  /* SHA-256 */
    107                  ctx->state[0] = 0x6A09E667;
   \        0xA   0x....'....        LDR.W    R2,??DataTable2  ;; 0x6a09e667
   \        0xE   0x6082             STR      R2,[R0, #+8]
    108                  ctx->state[1] = 0xBB67AE85;
   \       0x10   0x....'....        LDR.W    R2,??DataTable2_1  ;; 0xbb67ae85
   \       0x14   0x60C2             STR      R2,[R0, #+12]
    109                  ctx->state[2] = 0x3C6EF372;
   \       0x16   0x....'....        LDR.W    R2,??DataTable2_2  ;; 0x3c6ef372
   \       0x1A   0x6102             STR      R2,[R0, #+16]
    110                  ctx->state[3] = 0xA54FF53A;
   \       0x1C   0x....'....        LDR.W    R2,??DataTable2_3  ;; 0xa54ff53a
   \       0x20   0x6142             STR      R2,[R0, #+20]
    111                  ctx->state[4] = 0x510E527F;
   \       0x22   0x....'....        LDR.W    R2,??DataTable2_4  ;; 0x510e527f
   \       0x26   0x6182             STR      R2,[R0, #+24]
    112                  ctx->state[5] = 0x9B05688C;
   \       0x28   0x....'....        LDR.W    R2,??DataTable2_5  ;; 0x9b05688c
   \       0x2C   0x61C2             STR      R2,[R0, #+28]
    113                  ctx->state[6] = 0x1F83D9AB;
   \       0x2E   0x....'....        LDR.W    R2,??DataTable2_6  ;; 0x1f83d9ab
   \       0x32   0x6202             STR      R2,[R0, #+32]
    114                  ctx->state[7] = 0x5BE0CD19;
   \       0x34   0x....'....        LDR.W    R2,??DataTable3  ;; 0x5be0cd19
   \       0x38   0x6242             STR      R2,[R0, #+36]
   \       0x3A   0xE017             B.N      ??mbedtls_sha256_starts_ret_1
    115              }
    116              else
    117              {
    118                  /* SHA-224 */
    119                  ctx->state[0] = 0xC1059ED8;
   \                     ??mbedtls_sha256_starts_ret_0: (+1)
   \       0x3C   0x....'....        LDR.W    R2,??DataTable3_1  ;; 0xc1059ed8
   \       0x40   0x6082             STR      R2,[R0, #+8]
    120                  ctx->state[1] = 0x367CD507;
   \       0x42   0x....'....        LDR.W    R2,??DataTable3_2  ;; 0x367cd507
   \       0x46   0x60C2             STR      R2,[R0, #+12]
    121                  ctx->state[2] = 0x3070DD17;
   \       0x48   0x....'....        LDR.W    R2,??DataTable3_3  ;; 0x3070dd17
   \       0x4C   0x6102             STR      R2,[R0, #+16]
    122                  ctx->state[3] = 0xF70E5939;
   \       0x4E   0x....'....        LDR.W    R2,??DataTable3_4  ;; 0xf70e5939
   \       0x52   0x6142             STR      R2,[R0, #+20]
    123                  ctx->state[4] = 0xFFC00B31;
   \       0x54   0x....'....        LDR.W    R2,??DataTable3_5  ;; 0xffc00b31
   \       0x58   0x6182             STR      R2,[R0, #+24]
    124                  ctx->state[5] = 0x68581511;
   \       0x5A   0x....'....        LDR.W    R2,??DataTable3_6  ;; 0x68581511
   \       0x5E   0x61C2             STR      R2,[R0, #+28]
    125                  ctx->state[6] = 0x64F98FA7;
   \       0x60   0x....'....        LDR.W    R2,??DataTable3_7  ;; 0x64f98fa7
   \       0x64   0x6202             STR      R2,[R0, #+32]
    126                  ctx->state[7] = 0xBEFA4FA4;
   \       0x66   0x....'....        LDR.W    R2,??DataTable3_8  ;; 0xbefa4fa4
   \       0x6A   0x6242             STR      R2,[R0, #+36]
    127              }
    128          
    129              ctx->is224 = is224;
   \                     ??mbedtls_sha256_starts_ret_1: (+1)
   \       0x6C   0x6681             STR      R1,[R0, #+104]
    130          
    131              return( 0 );
   \       0x6E   0x2000             MOVS     R0,#+0
   \       0x70   0x4770             BX       LR               ;; return
    132          }
    133          
    134          #if !defined(MBEDTLS_DEPRECATED_REMOVED)

   \                                 In section .text, align 2, keep-with-next
    135          void mbedtls_sha256_starts( mbedtls_sha256_context *ctx,
    136                                      int is224 )
    137          {
    138              mbedtls_sha256_starts_ret( ctx, is224 );
   \                     mbedtls_sha256_starts: (+1)
   \        0x0   0x....             B.N      mbedtls_sha256_starts_ret
    139          }
    140          #endif
    141          
    142          #if !defined(MBEDTLS_SHA256_PROCESS_ALT)

   \                                 In section .rodata, align 4
    143          static const uint32_t K[] =
   \                     K:
   \        0x0   0x428A'2F98        DC32 1116352408, 1899447441, 3049323471, 3921009573, 961987163
   \              0x7137'4491  
   \              0xB5C0'FBCF  
   \              0xE9B5'DBA5  
   \              0x3956'C25B  
   \       0x14   0x59F1'11F1        DC32 1508970993, 2453635748, 2870763221, 3624381080, 310598401
   \              0x923F'82A4  
   \              0xAB1C'5ED5  
   \              0xD807'AA98  
   \              0x1283'5B01  
   \       0x28   0x2431'85BE        DC32 607225278, 1426881987, 1925078388, 2162078206, 2614888103
   \              0x550C'7DC3  
   \              0x72BE'5D74  
   \              0x80DE'B1FE  
   \              0x9BDC'06A7  
   \       0x3C   0xC19B'F174        DC32 3248222580, 3835390401, 4022224774, 264347078, 604807628
   \              0xE49B'69C1  
   \              0xEFBE'4786  
   \              0x0FC1'9DC6  
   \              0x240C'A1CC  
   \       0x50   0x2DE9'2C6F        DC32 770255983, 1249150122, 1555081692, 1996064986, 2554220882
   \              0x4A74'84AA  
   \              0x5CB0'A9DC  
   \              0x76F9'88DA  
   \              0x983E'5152  
   \       0x64   0xA831'C66D        DC32 2821834349, 2952996808, 3210313671, 3336571891, 3584528711
   \              0xB003'27C8  
   \              0xBF59'7FC7  
   \              0xC6E0'0BF3  
   \              0xD5A7'9147  
   \       0x78   0x06CA'6351        DC32 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291
   \              0x1429'2967  
   \              0x27B7'0A85  
   \              0x2E1B'2138  
   \              0x4D2C'6DFC  
   \              0x5338'0D13  
   \       0x90   0x650A'7354        DC32 1695183700, 1986661051, 2177026350, 2456956037, 2730485921
   \              0x766A'0ABB  
   \              0x81C2'C92E  
   \              0x9272'2C85  
   \              0xA2BF'E8A1  
   \       0xA4   0xA81A'664B        DC32 2820302411, 3259730800, 3345764771, 3516065817, 3600352804
   \              0xC24B'8B70  
   \              0xC76C'51A3  
   \              0xD192'E819  
   \              0xD699'0624  
   \       0xB8   0xF40E'3585        DC32 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877
   \              0x106A'A070  
   \              0x19A4'C116  
   \              0x1E37'6C08  
   \              0x2748'774C  
   \              0x34B0'BCB5  
   \       0xD0   0x391C'0CB3        DC32 958139571, 1322822218, 1537002063, 1747873779, 1955562222
   \              0x4ED8'AA4A  
   \              0x5B9C'CA4F  
   \              0x682E'6FF3  
   \              0x748F'82EE  
   \       0xE4   0x78A5'636F        DC32 2024104815, 2227730452, 2361852424, 2428436474, 2756734187
   \              0x84C8'7814  
   \              0x8CC7'0208  
   \              0x90BE'FFFA  
   \              0xA450'6CEB  
   \       0xF8   0xBEF9'A3F7        DC32 3204031479, 3329325298
   \              0xC671'78F2  
    144          {
    145              0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
    146              0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
    147              0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
    148              0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
    149              0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
    150              0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
    151              0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
    152              0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
    153              0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
    154              0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
    155              0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
    156              0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
    157              0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
    158              0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
    159              0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
    160              0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2,
    161          };
    162          
    163          #define  SHR(x,n) ((x & 0xFFFFFFFF) >> n)
    164          #define ROTR(x,n) (SHR(x,n) | (x << (32 - n)))
    165          
    166          #define S0(x) (ROTR(x, 7) ^ ROTR(x,18) ^  SHR(x, 3))
    167          #define S1(x) (ROTR(x,17) ^ ROTR(x,19) ^  SHR(x,10))
    168          
    169          #define S2(x) (ROTR(x, 2) ^ ROTR(x,13) ^ ROTR(x,22))
    170          #define S3(x) (ROTR(x, 6) ^ ROTR(x,11) ^ ROTR(x,25))
    171          
    172          #define F0(x,y,z) ((x & y) | (z & (x | y)))
    173          #define F1(x,y,z) (z ^ (x & (y ^ z)))
    174          
    175          #define R(t)                                    \
    176          (                                               \
    177              W[t] = S1(W[t -  2]) + W[t -  7] +          \
    178                     S0(W[t - 15]) + W[t - 16]            \
    179          )
    180          
    181          #define P(a,b,c,d,e,f,g,h,x,K)                  \
    182          {                                               \
    183              temp1 = h + S3(e) + F1(e,f,g) + K + x;      \
    184              temp2 = S2(a) + F0(a,b,c);                  \
    185              d += temp1; h = temp1 + temp2;              \
    186          }
    187          

   \                                 In section .text, align 2, keep-with-next
    188          int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
    189                                          const unsigned char data[64] )
    190          {
   \                     mbedtls_internal_sha256_process: (+1)
   \        0x0   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \        0x4   0xB0C8             SUB      SP,SP,#+288
    191              uint32_t temp1, temp2, W[64];
    192              uint32_t A[8];
    193              unsigned int i;
    194          
    195              for( i = 0; i < 8; i++ )
   \        0x6   0x2200             MOVS     R2,#+0
   \        0x8   0x466C             MOV      R4,SP
   \        0xA   0xE005             B.N      ??mbedtls_internal_sha256_process_0
    196                  A[i] = ctx->state[i];
   \                     ??mbedtls_internal_sha256_process_1: (+1)
   \        0xC   0xEB00 0x0382      ADD      R3,R0,R2, LSL #+2
   \       0x10   0x689B             LDR      R3,[R3, #+8]
   \       0x12   0xF844 0x3022      STR      R3,[R4, R2, LSL #+2]
   \       0x16   0x1C52             ADDS     R2,R2,#+1
   \                     ??mbedtls_internal_sha256_process_0: (+1)
   \       0x18   0x2A08             CMP      R2,#+8
   \       0x1A   0xD3F7             BCC.N    ??mbedtls_internal_sha256_process_1
    197          
    198          #if defined(MBEDTLS_SHA256_SMALLER)
    199              for( i = 0; i < 64; i++ )
    200              {
    201                  if( i < 16 )
    202                      GET_UINT32_BE( W[i], data, 4 * i );
    203                  else
    204                      R( i );
    205          
    206                  P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i], K[i] );
    207          
    208                  temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
    209                  A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    210              }
    211          #else /* MBEDTLS_SHA256_SMALLER */
    212              for( i = 0; i < 16; i++ )
   \       0x1C   0x2200             MOVS     R2,#+0
   \       0x1E   0xE014             B.N      ??mbedtls_internal_sha256_process_2
    213                  GET_UINT32_BE( W[i], data, 4 * i );
   \                     ??mbedtls_internal_sha256_process_3: (+1)
   \       0x20   0xF811 0x3022      LDRB     R3,[R1, R2, LSL #+2]
   \       0x24   0xEB01 0x0482      ADD      R4,R1,R2, LSL #+2
   \       0x28   0x7864             LDRB     R4,[R4, #+1]
   \       0x2A   0x0424             LSLS     R4,R4,#+16
   \       0x2C   0xEA44 0x6403      ORR      R4,R4,R3, LSL #+24
   \       0x30   0xEB01 0x0382      ADD      R3,R1,R2, LSL #+2
   \       0x34   0x789B             LDRB     R3,[R3, #+2]
   \       0x36   0xEA44 0x2403      ORR      R4,R4,R3, LSL #+8
   \       0x3A   0xEB01 0x0382      ADD      R3,R1,R2, LSL #+2
   \       0x3E   0x78DB             LDRB     R3,[R3, #+3]
   \       0x40   0x431C             ORRS     R4,R3,R4
   \       0x42   0xAB08             ADD      R3,SP,#+32
   \       0x44   0xF843 0x4022      STR      R4,[R3, R2, LSL #+2]
   \       0x48   0x1C52             ADDS     R2,R2,#+1
   \                     ??mbedtls_internal_sha256_process_2: (+1)
   \       0x4A   0x2A10             CMP      R2,#+16
   \       0x4C   0xD3E8             BCC.N    ??mbedtls_internal_sha256_process_3
    214          
    215              for( i = 0; i < 16; i += 8 )
   \       0x4E   0x2100             MOVS     R1,#+0
   \       0x50   0x466B             MOV      R3,SP
   \       0x52   0xE1AE             B.N      ??mbedtls_internal_sha256_process_4
    216              {
    217                  P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
   \                     ??mbedtls_internal_sha256_process_5: (+1)
   \       0x54   0x....'....        LDR.W    R2,??DataTable3_9
   \       0x58   0x69DC             LDR      R4,[R3, #+28]
   \       0x5A   0x691D             LDR      R5,[R3, #+16]
   \       0x5C   0x462E             MOV      R6,R5
   \       0x5E   0xEA4F 0x26F6      ROR      R6,R6,#+11
   \       0x62   0xEA86 0x16B5      EOR      R6,R6,R5, ROR #+6
   \       0x66   0xEA86 0x6675      EOR      R6,R6,R5, ROR #+25
   \       0x6A   0x1934             ADDS     R4,R6,R4
   \       0x6C   0x699D             LDR      R5,[R3, #+24]
   \       0x6E   0x691E             LDR      R6,[R3, #+16]
   \       0x70   0x695F             LDR      R7,[R3, #+20]
   \       0x72   0x46AC             MOV      R12,R5
   \       0x74   0xEA8C 0x0707      EOR      R7,R12,R7
   \       0x78   0x403E             ANDS     R6,R7,R6
   \       0x7A   0x4075             EORS     R5,R6,R5
   \       0x7C   0x192C             ADDS     R4,R5,R4
   \       0x7E   0xF852 0x5021      LDR      R5,[R2, R1, LSL #+2]
   \       0x82   0x192C             ADDS     R4,R5,R4
   \       0x84   0xAD08             ADD      R5,SP,#+32
   \       0x86   0xF855 0x5021      LDR      R5,[R5, R1, LSL #+2]
   \       0x8A   0x192C             ADDS     R4,R5,R4
   \       0x8C   0x9E00             LDR      R6,[SP, #+0]
   \       0x8E   0x4635             MOV      R5,R6
   \       0x90   0xEA4F 0x3575      ROR      R5,R5,#+13
   \       0x94   0xEA85 0x05B6      EOR      R5,R5,R6, ROR #+2
   \       0x98   0xEA85 0x55B6      EOR      R5,R5,R6, ROR #+22
   \       0x9C   0x685F             LDR      R7,[R3, #+4]
   \       0x9E   0x403E             ANDS     R6,R7,R6
   \       0xA0   0x689F             LDR      R7,[R3, #+8]
   \       0xA2   0xF8DD 0xC000      LDR      R12,[SP, #+0]
   \       0xA6   0xF8D3 0xE004      LDR      LR,[R3, #+4]
   \       0xAA   0xEA4E 0x0C0C      ORR      R12,LR,R12
   \       0xAE   0xEA0C 0x0707      AND      R7,R12,R7
   \       0xB2   0x433E             ORRS     R6,R7,R6
   \       0xB4   0x1975             ADDS     R5,R6,R5
   \       0xB6   0x68DE             LDR      R6,[R3, #+12]
   \       0xB8   0x19A6             ADDS     R6,R4,R6
   \       0xBA   0x60DE             STR      R6,[R3, #+12]
   \       0xBC   0x192C             ADDS     R4,R5,R4
   \       0xBE   0x61DC             STR      R4,[R3, #+28]
    218                  P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
   \       0xC0   0x699C             LDR      R4,[R3, #+24]
   \       0xC2   0x68DD             LDR      R5,[R3, #+12]
   \       0xC4   0x462E             MOV      R6,R5
   \       0xC6   0xEA4F 0x26F6      ROR      R6,R6,#+11
   \       0xCA   0xEA86 0x16B5      EOR      R6,R6,R5, ROR #+6
   \       0xCE   0xEA86 0x6675      EOR      R6,R6,R5, ROR #+25
   \       0xD2   0x1934             ADDS     R4,R6,R4
   \       0xD4   0x695D             LDR      R5,[R3, #+20]
   \       0xD6   0x68DE             LDR      R6,[R3, #+12]
   \       0xD8   0x691F             LDR      R7,[R3, #+16]
   \       0xDA   0x46AC             MOV      R12,R5
   \       0xDC   0xEA8C 0x0707      EOR      R7,R12,R7
   \       0xE0   0x403E             ANDS     R6,R7,R6
   \       0xE2   0x4075             EORS     R5,R6,R5
   \       0xE4   0x192C             ADDS     R4,R5,R4
   \       0xE6   0xEB02 0x0581      ADD      R5,R2,R1, LSL #+2
   \       0xEA   0x686D             LDR      R5,[R5, #+4]
   \       0xEC   0x192C             ADDS     R4,R5,R4
   \       0xEE   0xAD08             ADD      R5,SP,#+32
   \       0xF0   0xEB05 0x0581      ADD      R5,R5,R1, LSL #+2
   \       0xF4   0x686D             LDR      R5,[R5, #+4]
   \       0xF6   0x192C             ADDS     R4,R5,R4
   \       0xF8   0x69DE             LDR      R6,[R3, #+28]
   \       0xFA   0x4635             MOV      R5,R6
   \       0xFC   0xEA4F 0x3575      ROR      R5,R5,#+13
   \      0x100   0xEA85 0x05B6      EOR      R5,R5,R6, ROR #+2
   \      0x104   0xEA85 0x55B6      EOR      R5,R5,R6, ROR #+22
   \      0x108   0x9F00             LDR      R7,[SP, #+0]
   \      0x10A   0x403E             ANDS     R6,R7,R6
   \      0x10C   0x685F             LDR      R7,[R3, #+4]
   \      0x10E   0xF8D3 0xC01C      LDR      R12,[R3, #+28]
   \      0x112   0xF8DD 0xE000      LDR      LR,[SP, #+0]
   \      0x116   0xEA4E 0x0C0C      ORR      R12,LR,R12
   \      0x11A   0xEA0C 0x0707      AND      R7,R12,R7
   \      0x11E   0x433E             ORRS     R6,R7,R6
   \      0x120   0x1975             ADDS     R5,R6,R5
   \      0x122   0x689E             LDR      R6,[R3, #+8]
   \      0x124   0x19A6             ADDS     R6,R4,R6
   \      0x126   0x609E             STR      R6,[R3, #+8]
   \      0x128   0x192C             ADDS     R4,R5,R4
   \      0x12A   0x619C             STR      R4,[R3, #+24]
    219                  P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
   \      0x12C   0x695C             LDR      R4,[R3, #+20]
   \      0x12E   0x689D             LDR      R5,[R3, #+8]
   \      0x130   0x462E             MOV      R6,R5
   \      0x132   0xEA4F 0x26F6      ROR      R6,R6,#+11
   \      0x136   0xEA86 0x16B5      EOR      R6,R6,R5, ROR #+6
   \      0x13A   0xEA86 0x6675      EOR      R6,R6,R5, ROR #+25
   \      0x13E   0x1934             ADDS     R4,R6,R4
   \      0x140   0x691D             LDR      R5,[R3, #+16]
   \      0x142   0x689E             LDR      R6,[R3, #+8]
   \      0x144   0x68DF             LDR      R7,[R3, #+12]
   \      0x146   0x46AC             MOV      R12,R5
   \      0x148   0xEA8C 0x0707      EOR      R7,R12,R7
   \      0x14C   0x403E             ANDS     R6,R7,R6
   \      0x14E   0x4075             EORS     R5,R6,R5
   \      0x150   0x192C             ADDS     R4,R5,R4
   \      0x152   0xEB02 0x0581      ADD      R5,R2,R1, LSL #+2
   \      0x156   0x68AD             LDR      R5,[R5, #+8]
   \      0x158   0x192C             ADDS     R4,R5,R4
   \      0x15A   0xAD08             ADD      R5,SP,#+32
   \      0x15C   0xEB05 0x0581      ADD      R5,R5,R1, LSL #+2
   \      0x160   0x68AD             LDR      R5,[R5, #+8]
   \      0x162   0x192C             ADDS     R4,R5,R4
   \      0x164   0x699E             LDR      R6,[R3, #+24]
   \      0x166   0x4635             MOV      R5,R6
   \      0x168   0xEA4F 0x3575      ROR      R5,R5,#+13
   \      0x16C   0xEA85 0x05B6      EOR      R5,R5,R6, ROR #+2
   \      0x170   0xEA85 0x55B6      EOR      R5,R5,R6, ROR #+22
   \      0x174   0x69DF             LDR      R7,[R3, #+28]
   \      0x176   0x403E             ANDS     R6,R7,R6
   \      0x178   0x9F00             LDR      R7,[SP, #+0]
   \      0x17A   0xF8D3 0xC018      LDR      R12,[R3, #+24]
   \      0x17E   0xF8D3 0xE01C      LDR      LR,[R3, #+28]
   \      0x182   0xEA4E 0x0C0C      ORR      R12,LR,R12
   \      0x186   0xEA0C 0x0707      AND      R7,R12,R7
   \      0x18A   0x433E             ORRS     R6,R7,R6
   \      0x18C   0x1975             ADDS     R5,R6,R5
   \      0x18E   0x685E             LDR      R6,[R3, #+4]
   \      0x190   0x19A6             ADDS     R6,R4,R6
   \      0x192   0x605E             STR      R6,[R3, #+4]
   \      0x194   0x192C             ADDS     R4,R5,R4
   \      0x196   0x615C             STR      R4,[R3, #+20]
    220                  P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
   \      0x198   0x691C             LDR      R4,[R3, #+16]
   \      0x19A   0x685D             LDR      R5,[R3, #+4]
   \      0x19C   0x462E             MOV      R6,R5
   \      0x19E   0xEA4F 0x26F6      ROR      R6,R6,#+11
   \      0x1A2   0xEA86 0x16B5      EOR      R6,R6,R5, ROR #+6
   \      0x1A6   0xEA86 0x6675      EOR      R6,R6,R5, ROR #+25
   \      0x1AA   0x1934             ADDS     R4,R6,R4
   \      0x1AC   0x68DD             LDR      R5,[R3, #+12]
   \      0x1AE   0x685E             LDR      R6,[R3, #+4]
   \      0x1B0   0x689F             LDR      R7,[R3, #+8]
   \      0x1B2   0x46AC             MOV      R12,R5
   \      0x1B4   0xEA8C 0x0707      EOR      R7,R12,R7
   \      0x1B8   0x403E             ANDS     R6,R7,R6
   \      0x1BA   0x4075             EORS     R5,R6,R5
   \      0x1BC   0x192C             ADDS     R4,R5,R4
   \      0x1BE   0xEB02 0x0581      ADD      R5,R2,R1, LSL #+2
   \      0x1C2   0x68ED             LDR      R5,[R5, #+12]
   \      0x1C4   0x192C             ADDS     R4,R5,R4
   \      0x1C6   0xAD08             ADD      R5,SP,#+32
   \      0x1C8   0xEB05 0x0581      ADD      R5,R5,R1, LSL #+2
   \      0x1CC   0x68ED             LDR      R5,[R5, #+12]
   \      0x1CE   0x192C             ADDS     R4,R5,R4
   \      0x1D0   0x695E             LDR      R6,[R3, #+20]
   \      0x1D2   0x4635             MOV      R5,R6
   \      0x1D4   0xEA4F 0x3575      ROR      R5,R5,#+13
   \      0x1D8   0xEA85 0x05B6      EOR      R5,R5,R6, ROR #+2
   \      0x1DC   0xEA85 0x55B6      EOR      R5,R5,R6, ROR #+22
   \      0x1E0   0x699F             LDR      R7,[R3, #+24]
   \      0x1E2   0x403E             ANDS     R6,R7,R6
   \      0x1E4   0x69DF             LDR      R7,[R3, #+28]
   \      0x1E6   0xF8D3 0xC014      LDR      R12,[R3, #+20]
   \      0x1EA   0xF8D3 0xE018      LDR      LR,[R3, #+24]
   \      0x1EE   0xEA4E 0x0C0C      ORR      R12,LR,R12
   \      0x1F2   0xEA0C 0x0707      AND      R7,R12,R7
   \      0x1F6   0x433E             ORRS     R6,R7,R6
   \      0x1F8   0x1975             ADDS     R5,R6,R5
   \      0x1FA   0x9E00             LDR      R6,[SP, #+0]
   \      0x1FC   0x19A6             ADDS     R6,R4,R6
   \      0x1FE   0x9600             STR      R6,[SP, #+0]
   \      0x200   0x192C             ADDS     R4,R5,R4
   \      0x202   0x611C             STR      R4,[R3, #+16]
    221                  P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
   \      0x204   0x68DC             LDR      R4,[R3, #+12]
   \      0x206   0x9D00             LDR      R5,[SP, #+0]
   \      0x208   0x462E             MOV      R6,R5
   \      0x20A   0xEA4F 0x26F6      ROR      R6,R6,#+11
   \      0x20E   0xEA86 0x16B5      EOR      R6,R6,R5, ROR #+6
   \      0x212   0xEA86 0x6675      EOR      R6,R6,R5, ROR #+25
   \      0x216   0x1934             ADDS     R4,R6,R4
   \      0x218   0x689D             LDR      R5,[R3, #+8]
   \      0x21A   0x9E00             LDR      R6,[SP, #+0]
   \      0x21C   0x685F             LDR      R7,[R3, #+4]
   \      0x21E   0x46AC             MOV      R12,R5
   \      0x220   0xEA8C 0x0707      EOR      R7,R12,R7
   \      0x224   0x403E             ANDS     R6,R7,R6
   \      0x226   0x4075             EORS     R5,R6,R5
   \      0x228   0x192C             ADDS     R4,R5,R4
   \      0x22A   0xEB02 0x0581      ADD      R5,R2,R1, LSL #+2
   \      0x22E   0x692D             LDR      R5,[R5, #+16]
   \      0x230   0x192C             ADDS     R4,R5,R4
   \      0x232   0xAD08             ADD      R5,SP,#+32
   \      0x234   0xEB05 0x0581      ADD      R5,R5,R1, LSL #+2
   \      0x238   0x692D             LDR      R5,[R5, #+16]
   \      0x23A   0x192C             ADDS     R4,R5,R4
   \      0x23C   0x691E             LDR      R6,[R3, #+16]
   \      0x23E   0x4635             MOV      R5,R6
   \      0x240   0xEA4F 0x3575      ROR      R5,R5,#+13
   \      0x244   0xEA85 0x05B6      EOR      R5,R5,R6, ROR #+2
   \      0x248   0xEA85 0x55B6      EOR      R5,R5,R6, ROR #+22
   \      0x24C   0x695F             LDR      R7,[R3, #+20]
   \      0x24E   0x403E             ANDS     R6,R7,R6
   \      0x250   0x699F             LDR      R7,[R3, #+24]
   \      0x252   0xF8D3 0xC010      LDR      R12,[R3, #+16]
   \      0x256   0xF8D3 0xE014      LDR      LR,[R3, #+20]
   \      0x25A   0xEA4E 0x0C0C      ORR      R12,LR,R12
   \      0x25E   0xEA0C 0x0707      AND      R7,R12,R7
   \      0x262   0x433E             ORRS     R6,R7,R6
   \      0x264   0x1975             ADDS     R5,R6,R5
   \      0x266   0x69DE             LDR      R6,[R3, #+28]
   \      0x268   0x19A6             ADDS     R6,R4,R6
   \      0x26A   0x61DE             STR      R6,[R3, #+28]
   \      0x26C   0x192C             ADDS     R4,R5,R4
   \      0x26E   0x60DC             STR      R4,[R3, #+12]
    222                  P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
   \      0x270   0x689C             LDR      R4,[R3, #+8]
   \      0x272   0x69DD             LDR      R5,[R3, #+28]
   \      0x274   0x462E             MOV      R6,R5
   \      0x276   0xEA4F 0x26F6      ROR      R6,R6,#+11
   \      0x27A   0xEA86 0x16B5      EOR      R6,R6,R5, ROR #+6
   \      0x27E   0xEA86 0x6675      EOR      R6,R6,R5, ROR #+25
   \      0x282   0x1934             ADDS     R4,R6,R4
   \      0x284   0x685D             LDR      R5,[R3, #+4]
   \      0x286   0x69DE             LDR      R6,[R3, #+28]
   \      0x288   0x9F00             LDR      R7,[SP, #+0]
   \      0x28A   0x46AC             MOV      R12,R5
   \      0x28C   0xEA8C 0x0707      EOR      R7,R12,R7
   \      0x290   0x403E             ANDS     R6,R7,R6
   \      0x292   0x4075             EORS     R5,R6,R5
   \      0x294   0x192C             ADDS     R4,R5,R4
   \      0x296   0xEB02 0x0581      ADD      R5,R2,R1, LSL #+2
   \      0x29A   0x696D             LDR      R5,[R5, #+20]
   \      0x29C   0x192C             ADDS     R4,R5,R4
   \      0x29E   0xAD08             ADD      R5,SP,#+32
   \      0x2A0   0xEB05 0x0581      ADD      R5,R5,R1, LSL #+2
   \      0x2A4   0x696D             LDR      R5,[R5, #+20]
   \      0x2A6   0x192C             ADDS     R4,R5,R4
   \      0x2A8   0x68DE             LDR      R6,[R3, #+12]
   \      0x2AA   0x4635             MOV      R5,R6
   \      0x2AC   0xEA4F 0x3575      ROR      R5,R5,#+13
   \      0x2B0   0xEA85 0x05B6      EOR      R5,R5,R6, ROR #+2
   \      0x2B4   0xEA85 0x55B6      EOR      R5,R5,R6, ROR #+22
   \      0x2B8   0x691F             LDR      R7,[R3, #+16]
   \      0x2BA   0x403E             ANDS     R6,R7,R6
   \      0x2BC   0x695F             LDR      R7,[R3, #+20]
   \      0x2BE   0xF8D3 0xC00C      LDR      R12,[R3, #+12]
   \      0x2C2   0xF8D3 0xE010      LDR      LR,[R3, #+16]
   \      0x2C6   0xEA4E 0x0C0C      ORR      R12,LR,R12
   \      0x2CA   0xEA0C 0x0707      AND      R7,R12,R7
   \      0x2CE   0x433E             ORRS     R6,R7,R6
   \      0x2D0   0x1975             ADDS     R5,R6,R5
   \      0x2D2   0x699E             LDR      R6,[R3, #+24]
   \      0x2D4   0x19A6             ADDS     R6,R4,R6
   \      0x2D6   0x619E             STR      R6,[R3, #+24]
   \      0x2D8   0x192C             ADDS     R4,R5,R4
   \      0x2DA   0x609C             STR      R4,[R3, #+8]
    223                  P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
   \      0x2DC   0x685C             LDR      R4,[R3, #+4]
   \      0x2DE   0x699D             LDR      R5,[R3, #+24]
   \      0x2E0   0x462E             MOV      R6,R5
   \      0x2E2   0xEA4F 0x26F6      ROR      R6,R6,#+11
   \      0x2E6   0xEA86 0x16B5      EOR      R6,R6,R5, ROR #+6
   \      0x2EA   0xEA86 0x6675      EOR      R6,R6,R5, ROR #+25
   \      0x2EE   0x1934             ADDS     R4,R6,R4
   \      0x2F0   0x9D00             LDR      R5,[SP, #+0]
   \      0x2F2   0x699E             LDR      R6,[R3, #+24]
   \      0x2F4   0x69DF             LDR      R7,[R3, #+28]
   \      0x2F6   0x46AC             MOV      R12,R5
   \      0x2F8   0xEA8C 0x0707      EOR      R7,R12,R7
   \      0x2FC   0x403E             ANDS     R6,R7,R6
   \      0x2FE   0x4075             EORS     R5,R6,R5
   \      0x300   0x192C             ADDS     R4,R5,R4
   \      0x302   0xEB02 0x0581      ADD      R5,R2,R1, LSL #+2
   \      0x306   0x69AD             LDR      R5,[R5, #+24]
   \      0x308   0x192C             ADDS     R4,R5,R4
   \      0x30A   0xAD08             ADD      R5,SP,#+32
   \      0x30C   0xEB05 0x0581      ADD      R5,R5,R1, LSL #+2
   \      0x310   0x69AD             LDR      R5,[R5, #+24]
   \      0x312   0x192C             ADDS     R4,R5,R4
   \      0x314   0x689E             LDR      R6,[R3, #+8]
   \      0x316   0x4635             MOV      R5,R6
   \      0x318   0xEA4F 0x3575      ROR      R5,R5,#+13
   \      0x31C   0xEA85 0x05B6      EOR      R5,R5,R6, ROR #+2
   \      0x320   0xEA85 0x55B6      EOR      R5,R5,R6, ROR #+22
   \      0x324   0x68DF             LDR      R7,[R3, #+12]
   \      0x326   0x403E             ANDS     R6,R7,R6
   \      0x328   0x691F             LDR      R7,[R3, #+16]
   \      0x32A   0xF8D3 0xC008      LDR      R12,[R3, #+8]
   \      0x32E   0xF8D3 0xE00C      LDR      LR,[R3, #+12]
   \      0x332   0xEA4E 0x0C0C      ORR      R12,LR,R12
   \      0x336   0xEA0C 0x0707      AND      R7,R12,R7
   \      0x33A   0x433E             ORRS     R6,R7,R6
   \      0x33C   0x1975             ADDS     R5,R6,R5
   \      0x33E   0x695E             LDR      R6,[R3, #+20]
   \      0x340   0x19A6             ADDS     R6,R4,R6
   \      0x342   0x615E             STR      R6,[R3, #+20]
   \      0x344   0x192C             ADDS     R4,R5,R4
   \      0x346   0x605C             STR      R4,[R3, #+4]
    224                  P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
   \      0x348   0x9C00             LDR      R4,[SP, #+0]
   \      0x34A   0x695D             LDR      R5,[R3, #+20]
   \      0x34C   0x462E             MOV      R6,R5
   \      0x34E   0xEA4F 0x26F6      ROR      R6,R6,#+11
   \      0x352   0xEA86 0x16B5      EOR      R6,R6,R5, ROR #+6
   \      0x356   0xEA86 0x6675      EOR      R6,R6,R5, ROR #+25
   \      0x35A   0x1934             ADDS     R4,R6,R4
   \      0x35C   0x69DD             LDR      R5,[R3, #+28]
   \      0x35E   0x695E             LDR      R6,[R3, #+20]
   \      0x360   0x699F             LDR      R7,[R3, #+24]
   \      0x362   0x46AC             MOV      R12,R5
   \      0x364   0xEA8C 0x0707      EOR      R7,R12,R7
   \      0x368   0x403E             ANDS     R6,R7,R6
   \      0x36A   0x4075             EORS     R5,R6,R5
   \      0x36C   0x192C             ADDS     R4,R5,R4
   \      0x36E   0xEB02 0x0281      ADD      R2,R2,R1, LSL #+2
   \      0x372   0x69D2             LDR      R2,[R2, #+28]
   \      0x374   0x1914             ADDS     R4,R2,R4
   \      0x376   0xAA08             ADD      R2,SP,#+32
   \      0x378   0xEB02 0x0281      ADD      R2,R2,R1, LSL #+2
   \      0x37C   0x69D2             LDR      R2,[R2, #+28]
   \      0x37E   0x1914             ADDS     R4,R2,R4
   \      0x380   0x685D             LDR      R5,[R3, #+4]
   \      0x382   0x462A             MOV      R2,R5
   \      0x384   0xEA4F 0x3272      ROR      R2,R2,#+13
   \      0x388   0xEA82 0x02B5      EOR      R2,R2,R5, ROR #+2
   \      0x38C   0xEA82 0x52B5      EOR      R2,R2,R5, ROR #+22
   \      0x390   0x689E             LDR      R6,[R3, #+8]
   \      0x392   0x4035             ANDS     R5,R6,R5
   \      0x394   0x68DE             LDR      R6,[R3, #+12]
   \      0x396   0x685F             LDR      R7,[R3, #+4]
   \      0x398   0xF8D3 0xC008      LDR      R12,[R3, #+8]
   \      0x39C   0xEA4C 0x0707      ORR      R7,R12,R7
   \      0x3A0   0x403E             ANDS     R6,R7,R6
   \      0x3A2   0x4335             ORRS     R5,R6,R5
   \      0x3A4   0x18AA             ADDS     R2,R5,R2
   \      0x3A6   0x691D             LDR      R5,[R3, #+16]
   \      0x3A8   0x1965             ADDS     R5,R4,R5
   \      0x3AA   0x611D             STR      R5,[R3, #+16]
   \      0x3AC   0x1914             ADDS     R4,R2,R4
   \      0x3AE   0x9400             STR      R4,[SP, #+0]
    225              }
   \      0x3B0   0x3108             ADDS     R1,R1,#+8
   \                     ??mbedtls_internal_sha256_process_4: (+1)
   \      0x3B2   0x2910             CMP      R1,#+16
   \      0x3B4   0xF4FF 0xAE4E      BCC.W    ??mbedtls_internal_sha256_process_5
    226          
    227              for( i = 16; i < 64; i += 8 )
   \      0x3B8   0x2110             MOVS     R1,#+16
   \      0x3BA   0xE35A             B.N      ??mbedtls_internal_sha256_process_6
    228              {
    229                  P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
   \                     ??mbedtls_internal_sha256_process_7: (+1)
   \      0x3BC   0xAA08             ADD      R2,SP,#+32
   \      0x3BE   0xAB08             ADD      R3,SP,#+32
   \      0x3C0   0xEB03 0x0381      ADD      R3,R3,R1, LSL #+2
   \      0x3C4   0xF853 0x4C08      LDR      R4,[R3, #-8]
   \      0x3C8   0x4623             MOV      R3,R4
   \      0x3CA   0xEA4F 0x43F3      ROR      R3,R3,#+19
   \      0x3CE   0xEA83 0x4374      EOR      R3,R3,R4, ROR #+17
   \      0x3D2   0xAC08             ADD      R4,SP,#+32
   \      0x3D4   0xEB04 0x0481      ADD      R4,R4,R1, LSL #+2
   \      0x3D8   0xF854 0x4C08      LDR      R4,[R4, #-8]
   \      0x3DC   0xEA83 0x2394      EOR      R3,R3,R4, LSR #+10
   \      0x3E0   0xAC08             ADD      R4,SP,#+32
   \      0x3E2   0xEB04 0x0481      ADD      R4,R4,R1, LSL #+2
   \      0x3E6   0xF854 0x4C1C      LDR      R4,[R4, #-28]
   \      0x3EA   0x18E3             ADDS     R3,R4,R3
   \      0x3EC   0xAC08             ADD      R4,SP,#+32
   \      0x3EE   0xEB04 0x0481      ADD      R4,R4,R1, LSL #+2
   \      0x3F2   0xF854 0x4C3C      LDR      R4,[R4, #-60]
   \      0x3F6   0x4625             MOV      R5,R4
   \      0x3F8   0xEA4F 0x45B5      ROR      R5,R5,#+18
   \      0x3FC   0xEA85 0x15F4      EOR      R5,R5,R4, ROR #+7
   \      0x400   0xAC08             ADD      R4,SP,#+32
   \      0x402   0xEB04 0x0481      ADD      R4,R4,R1, LSL #+2
   \      0x406   0xF854 0x4C3C      LDR      R4,[R4, #-60]
   \      0x40A   0xEA85 0x05D4      EOR      R5,R5,R4, LSR #+3
   \      0x40E   0x18EB             ADDS     R3,R5,R3
   \      0x410   0xAC08             ADD      R4,SP,#+32
   \      0x412   0xEB04 0x0481      ADD      R4,R4,R1, LSL #+2
   \      0x416   0xF854 0x4C40      LDR      R4,[R4, #-64]
   \      0x41A   0x18E3             ADDS     R3,R4,R3
   \      0x41C   0xF842 0x3021      STR      R3,[R2, R1, LSL #+2]
   \      0x420   0x....'....        LDR.W    R3,??DataTable3_9
   \      0x424   0x466C             MOV      R4,SP
   \      0x426   0x69E5             LDR      R5,[R4, #+28]
   \      0x428   0x6926             LDR      R6,[R4, #+16]
   \      0x42A   0x4637             MOV      R7,R6
   \      0x42C   0xEA4F 0x27F7      ROR      R7,R7,#+11
   \      0x430   0xEA87 0x17B6      EOR      R7,R7,R6, ROR #+6
   \      0x434   0xEA87 0x6776      EOR      R7,R7,R6, ROR #+25
   \      0x438   0x197D             ADDS     R5,R7,R5
   \      0x43A   0x69A6             LDR      R6,[R4, #+24]
   \      0x43C   0x6927             LDR      R7,[R4, #+16]
   \      0x43E   0xF8D4 0xC014      LDR      R12,[R4, #+20]
   \      0x442   0x46B6             MOV      LR,R6
   \      0x444   0xEA8E 0x0C0C      EOR      R12,LR,R12
   \      0x448   0xEA0C 0x0707      AND      R7,R12,R7
   \      0x44C   0x407E             EORS     R6,R7,R6
   \      0x44E   0x1975             ADDS     R5,R6,R5
   \      0x450   0xF853 0x6021      LDR      R6,[R3, R1, LSL #+2]
   \      0x454   0x1975             ADDS     R5,R6,R5
   \      0x456   0xF852 0x6021      LDR      R6,[R2, R1, LSL #+2]
   \      0x45A   0x1975             ADDS     R5,R6,R5
   \      0x45C   0x9F00             LDR      R7,[SP, #+0]
   \      0x45E   0x463E             MOV      R6,R7
   \      0x460   0xEA4F 0x3676      ROR      R6,R6,#+13
   \      0x464   0xEA86 0x06B7      EOR      R6,R6,R7, ROR #+2
   \      0x468   0xEA86 0x56B7      EOR      R6,R6,R7, ROR #+22
   \      0x46C   0xF8D4 0xC004      LDR      R12,[R4, #+4]
   \      0x470   0xEA0C 0x0707      AND      R7,R12,R7
   \      0x474   0xF8D4 0xC008      LDR      R12,[R4, #+8]
   \      0x478   0xF8DD 0xE000      LDR      LR,[SP, #+0]
   \      0x47C   0xF8D4 0x8004      LDR      R8,[R4, #+4]
   \      0x480   0xEA48 0x0E0E      ORR      LR,R8,LR
   \      0x484   0xEA0E 0x0C0C      AND      R12,LR,R12
   \      0x488   0xEA4C 0x0707      ORR      R7,R12,R7
   \      0x48C   0x19BE             ADDS     R6,R7,R6
   \      0x48E   0x68E7             LDR      R7,[R4, #+12]
   \      0x490   0x19EF             ADDS     R7,R5,R7
   \      0x492   0x60E7             STR      R7,[R4, #+12]
   \      0x494   0x1975             ADDS     R5,R6,R5
   \      0x496   0x61E5             STR      R5,[R4, #+28]
    230                  P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
   \      0x498   0xAD08             ADD      R5,SP,#+32
   \      0x49A   0xEB05 0x0581      ADD      R5,R5,R1, LSL #+2
   \      0x49E   0xF855 0x5C04      LDR      R5,[R5, #-4]
   \      0x4A2   0x462E             MOV      R6,R5
   \      0x4A4   0xEA4F 0x46F6      ROR      R6,R6,#+19
   \      0x4A8   0xEA86 0x4675      EOR      R6,R6,R5, ROR #+17
   \      0x4AC   0xAD08             ADD      R5,SP,#+32
   \      0x4AE   0xEB05 0x0581      ADD      R5,R5,R1, LSL #+2
   \      0x4B2   0xF855 0x5C04      LDR      R5,[R5, #-4]
   \      0x4B6   0xEA86 0x2695      EOR      R6,R6,R5, LSR #+10
   \      0x4BA   0xAD08             ADD      R5,SP,#+32
   \      0x4BC   0xEB05 0x0581      ADD      R5,R5,R1, LSL #+2
   \      0x4C0   0xF855 0x5C18      LDR      R5,[R5, #-24]
   \      0x4C4   0x19AE             ADDS     R6,R5,R6
   \      0x4C6   0xAD08             ADD      R5,SP,#+32
   \      0x4C8   0xEB05 0x0581      ADD      R5,R5,R1, LSL #+2
   \      0x4CC   0xF855 0x5C38      LDR      R5,[R5, #-56]
   \      0x4D0   0x462F             MOV      R7,R5
   \      0x4D2   0xEA4F 0x47B7      ROR      R7,R7,#+18
   \      0x4D6   0xEA87 0x17F5      EOR      R7,R7,R5, ROR #+7
   \      0x4DA   0xAD08             ADD      R5,SP,#+32
   \      0x4DC   0xEB05 0x0581      ADD      R5,R5,R1, LSL #+2
   \      0x4E0   0xF855 0x5C38      LDR      R5,[R5, #-56]
   \      0x4E4   0xEA87 0x07D5      EOR      R7,R7,R5, LSR #+3
   \      0x4E8   0x19BE             ADDS     R6,R7,R6
   \      0x4EA   0xAD08             ADD      R5,SP,#+32
   \      0x4EC   0xEB05 0x0581      ADD      R5,R5,R1, LSL #+2
   \      0x4F0   0xF855 0x5C3C      LDR      R5,[R5, #-60]
   \      0x4F4   0x19AE             ADDS     R6,R5,R6
   \      0x4F6   0xAD08             ADD      R5,SP,#+32
   \      0x4F8   0xEB05 0x0581      ADD      R5,R5,R1, LSL #+2
   \      0x4FC   0x606E             STR      R6,[R5, #+4]
   \      0x4FE   0x69A5             LDR      R5,[R4, #+24]
   \      0x500   0x68E6             LDR      R6,[R4, #+12]
   \      0x502   0x4637             MOV      R7,R6
   \      0x504   0xEA4F 0x27F7      ROR      R7,R7,#+11
   \      0x508   0xEA87 0x17B6      EOR      R7,R7,R6, ROR #+6
   \      0x50C   0xEA87 0x6776      EOR      R7,R7,R6, ROR #+25
   \      0x510   0x197D             ADDS     R5,R7,R5
   \      0x512   0x6966             LDR      R6,[R4, #+20]
   \      0x514   0x68E7             LDR      R7,[R4, #+12]
   \      0x516   0xF8D4 0xC010      LDR      R12,[R4, #+16]
   \      0x51A   0x46B6             MOV      LR,R6
   \      0x51C   0xEA8E 0x0C0C      EOR      R12,LR,R12
   \      0x520   0xEA0C 0x0707      AND      R7,R12,R7
   \      0x524   0x407E             EORS     R6,R7,R6
   \      0x526   0x1975             ADDS     R5,R6,R5
   \      0x528   0xEB03 0x0681      ADD      R6,R3,R1, LSL #+2
   \      0x52C   0x6876             LDR      R6,[R6, #+4]
   \      0x52E   0x1975             ADDS     R5,R6,R5
   \      0x530   0xAE08             ADD      R6,SP,#+32
   \      0x532   0xEB06 0x0681      ADD      R6,R6,R1, LSL #+2
   \      0x536   0x6876             LDR      R6,[R6, #+4]
   \      0x538   0x1975             ADDS     R5,R6,R5
   \      0x53A   0x69E7             LDR      R7,[R4, #+28]
   \      0x53C   0x463E             MOV      R6,R7
   \      0x53E   0xEA4F 0x3676      ROR      R6,R6,#+13
   \      0x542   0xEA86 0x06B7      EOR      R6,R6,R7, ROR #+2
   \      0x546   0xEA86 0x56B7      EOR      R6,R6,R7, ROR #+22
   \      0x54A   0xF8DD 0xC000      LDR      R12,[SP, #+0]
   \      0x54E   0xEA0C 0x0707      AND      R7,R12,R7
   \      0x552   0xF8D4 0xC004      LDR      R12,[R4, #+4]
   \      0x556   0xF8D4 0xE01C      LDR      LR,[R4, #+28]
   \      0x55A   0xF8DD 0x8000      LDR      R8,[SP, #+0]
   \      0x55E   0xEA48 0x0E0E      ORR      LR,R8,LR
   \      0x562   0xEA0E 0x0C0C      AND      R12,LR,R12
   \      0x566   0xEA4C 0x0707      ORR      R7,R12,R7
   \      0x56A   0x19BE             ADDS     R6,R7,R6
   \      0x56C   0x68A7             LDR      R7,[R4, #+8]
   \      0x56E   0x19EF             ADDS     R7,R5,R7
   \      0x570   0x60A7             STR      R7,[R4, #+8]
   \      0x572   0x1975             ADDS     R5,R6,R5
   \      0x574   0x61A5             STR      R5,[R4, #+24]
    231                  P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
   \      0x576   0xF852 0x6021      LDR      R6,[R2, R1, LSL #+2]
   \      0x57A   0x4635             MOV      R5,R6
   \      0x57C   0xEA4F 0x45F5      ROR      R5,R5,#+19
   \      0x580   0xEA85 0x4576      EOR      R5,R5,R6, ROR #+17
   \      0x584   0xEA85 0x2596      EOR      R5,R5,R6, LSR #+10
   \      0x588   0xAE08             ADD      R6,SP,#+32
   \      0x58A   0xEB06 0x0681      ADD      R6,R6,R1, LSL #+2
   \      0x58E   0xF856 0x6C14      LDR      R6,[R6, #-20]
   \      0x592   0x1975             ADDS     R5,R6,R5
   \      0x594   0xAE08             ADD      R6,SP,#+32
   \      0x596   0xEB06 0x0681      ADD      R6,R6,R1, LSL #+2
   \      0x59A   0xF856 0x6C34      LDR      R6,[R6, #-52]
   \      0x59E   0x4637             MOV      R7,R6
   \      0x5A0   0xEA4F 0x47B7      ROR      R7,R7,#+18
   \      0x5A4   0xEA87 0x17F6      EOR      R7,R7,R6, ROR #+7
   \      0x5A8   0xAE08             ADD      R6,SP,#+32
   \      0x5AA   0xEB06 0x0681      ADD      R6,R6,R1, LSL #+2
   \      0x5AE   0xF856 0x6C34      LDR      R6,[R6, #-52]
   \      0x5B2   0xEA87 0x07D6      EOR      R7,R7,R6, LSR #+3
   \      0x5B6   0x197D             ADDS     R5,R7,R5
   \      0x5B8   0xAE08             ADD      R6,SP,#+32
   \      0x5BA   0xEB06 0x0681      ADD      R6,R6,R1, LSL #+2
   \      0x5BE   0xF856 0x6C38      LDR      R6,[R6, #-56]
   \      0x5C2   0x1975             ADDS     R5,R6,R5
   \      0x5C4   0xAE08             ADD      R6,SP,#+32
   \      0x5C6   0xEB06 0x0681      ADD      R6,R6,R1, LSL #+2
   \      0x5CA   0x60B5             STR      R5,[R6, #+8]
   \      0x5CC   0x6965             LDR      R5,[R4, #+20]
   \      0x5CE   0x68A6             LDR      R6,[R4, #+8]
   \      0x5D0   0x4637             MOV      R7,R6
   \      0x5D2   0xEA4F 0x27F7      ROR      R7,R7,#+11
   \      0x5D6   0xEA87 0x17B6      EOR      R7,R7,R6, ROR #+6
   \      0x5DA   0xEA87 0x6776      EOR      R7,R7,R6, ROR #+25
   \      0x5DE   0x197D             ADDS     R5,R7,R5
   \      0x5E0   0x6926             LDR      R6,[R4, #+16]
   \      0x5E2   0x68A7             LDR      R7,[R4, #+8]
   \      0x5E4   0xF8D4 0xC00C      LDR      R12,[R4, #+12]
   \      0x5E8   0x46B6             MOV      LR,R6
   \      0x5EA   0xEA8E 0x0C0C      EOR      R12,LR,R12
   \      0x5EE   0xEA0C 0x0707      AND      R7,R12,R7
   \      0x5F2   0x407E             EORS     R6,R7,R6
   \      0x5F4   0x1975             ADDS     R5,R6,R5
   \      0x5F6   0xEB03 0x0681      ADD      R6,R3,R1, LSL #+2
   \      0x5FA   0x68B6             LDR      R6,[R6, #+8]
   \      0x5FC   0x1975             ADDS     R5,R6,R5
   \      0x5FE   0xAE08             ADD      R6,SP,#+32
   \      0x600   0xEB06 0x0681      ADD      R6,R6,R1, LSL #+2
   \      0x604   0x68B6             LDR      R6,[R6, #+8]
   \      0x606   0x1975             ADDS     R5,R6,R5
   \      0x608   0x69A7             LDR      R7,[R4, #+24]
   \      0x60A   0x463E             MOV      R6,R7
   \      0x60C   0xEA4F 0x3676      ROR      R6,R6,#+13
   \      0x610   0xEA86 0x06B7      EOR      R6,R6,R7, ROR #+2
   \      0x614   0xEA86 0x56B7      EOR      R6,R6,R7, ROR #+22
   \      0x618   0xF8D4 0xC01C      LDR      R12,[R4, #+28]
   \      0x61C   0xEA0C 0x0707      AND      R7,R12,R7
   \      0x620   0xF8DD 0xC000      LDR      R12,[SP, #+0]
   \      0x624   0xF8D4 0xE018      LDR      LR,[R4, #+24]
   \      0x628   0xF8D4 0x801C      LDR      R8,[R4, #+28]
   \      0x62C   0xEA48 0x0E0E      ORR      LR,R8,LR
   \      0x630   0xEA0E 0x0C0C      AND      R12,LR,R12
   \      0x634   0xEA4C 0x0707      ORR      R7,R12,R7
   \      0x638   0x19BE             ADDS     R6,R7,R6
   \      0x63A   0x6867             LDR      R7,[R4, #+4]
   \      0x63C   0x19EF             ADDS     R7,R5,R7
   \      0x63E   0x6067             STR      R7,[R4, #+4]
   \      0x640   0x1975             ADDS     R5,R6,R5
   \      0x642   0x6165             STR      R5,[R4, #+20]
    232                  P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
   \      0x644   0xAD08             ADD      R5,SP,#+32
   \      0x646   0xEB05 0x0581      ADD      R5,R5,R1, LSL #+2
   \      0x64A   0x686D             LDR      R5,[R5, #+4]
   \      0x64C   0x462E             MOV      R6,R5
   \      0x64E   0xEA4F 0x46F6      ROR      R6,R6,#+19
   \      0x652   0xEA86 0x4675      EOR      R6,R6,R5, ROR #+17
   \      0x656   0xAD08             ADD      R5,SP,#+32
   \      0x658   0xEB05 0x0581      ADD      R5,R5,R1, LSL #+2
   \      0x65C   0x686D             LDR      R5,[R5, #+4]
   \      0x65E   0xEA86 0x2695      EOR      R6,R6,R5, LSR #+10
   \      0x662   0xAD08             ADD      R5,SP,#+32
   \      0x664   0xEB05 0x0581      ADD      R5,R5,R1, LSL #+2
   \      0x668   0xF855 0x5C10      LDR      R5,[R5, #-16]
   \      0x66C   0x19AE             ADDS     R6,R5,R6
   \      0x66E   0xAD08             ADD      R5,SP,#+32
   \      0x670   0xEB05 0x0581      ADD      R5,R5,R1, LSL #+2
   \      0x674   0xF855 0x5C30      LDR      R5,[R5, #-48]
   \      0x678   0x462F             MOV      R7,R5
   \      0x67A   0xEA4F 0x47B7      ROR      R7,R7,#+18
   \      0x67E   0xEA87 0x17F5      EOR      R7,R7,R5, ROR #+7
   \      0x682   0xAD08             ADD      R5,SP,#+32
   \      0x684   0xEB05 0x0581      ADD      R5,R5,R1, LSL #+2
   \      0x688   0xF855 0x5C30      LDR      R5,[R5, #-48]
   \      0x68C   0xEA87 0x07D5      EOR      R7,R7,R5, LSR #+3
   \      0x690   0x19BE             ADDS     R6,R7,R6
   \      0x692   0xAD08             ADD      R5,SP,#+32
   \      0x694   0xEB05 0x0581      ADD      R5,R5,R1, LSL #+2
   \      0x698   0xF855 0x5C34      LDR      R5,[R5, #-52]
   \      0x69C   0x19AE             ADDS     R6,R5,R6
   \      0x69E   0xAD08             ADD      R5,SP,#+32
   \      0x6A0   0xEB05 0x0581      ADD      R5,R5,R1, LSL #+2
   \      0x6A4   0x60EE             STR      R6,[R5, #+12]
   \      0x6A6   0x6925             LDR      R5,[R4, #+16]
   \      0x6A8   0x6866             LDR      R6,[R4, #+4]
   \      0x6AA   0x4637             MOV      R7,R6
   \      0x6AC   0xEA4F 0x27F7      ROR      R7,R7,#+11
   \      0x6B0   0xEA87 0x17B6      EOR      R7,R7,R6, ROR #+6
   \      0x6B4   0xEA87 0x6776      EOR      R7,R7,R6, ROR #+25
   \      0x6B8   0x197D             ADDS     R5,R7,R5
   \      0x6BA   0x68E6             LDR      R6,[R4, #+12]
   \      0x6BC   0x6867             LDR      R7,[R4, #+4]
   \      0x6BE   0xF8D4 0xC008      LDR      R12,[R4, #+8]
   \      0x6C2   0x46B6             MOV      LR,R6
   \      0x6C4   0xEA8E 0x0C0C      EOR      R12,LR,R12
   \      0x6C8   0xEA0C 0x0707      AND      R7,R12,R7
   \      0x6CC   0x407E             EORS     R6,R7,R6
   \      0x6CE   0x1975             ADDS     R5,R6,R5
   \      0x6D0   0xEB03 0x0681      ADD      R6,R3,R1, LSL #+2
   \      0x6D4   0x68F6             LDR      R6,[R6, #+12]
   \      0x6D6   0x1975             ADDS     R5,R6,R5
   \      0x6D8   0xAE08             ADD      R6,SP,#+32
   \      0x6DA   0xEB06 0x0681      ADD      R6,R6,R1, LSL #+2
   \      0x6DE   0x68F6             LDR      R6,[R6, #+12]
   \      0x6E0   0x1975             ADDS     R5,R6,R5
   \      0x6E2   0x6967             LDR      R7,[R4, #+20]
   \      0x6E4   0x463E             MOV      R6,R7
   \      0x6E6   0xEA4F 0x3676      ROR      R6,R6,#+13
   \      0x6EA   0xEA86 0x06B7      EOR      R6,R6,R7, ROR #+2
   \      0x6EE   0xEA86 0x56B7      EOR      R6,R6,R7, ROR #+22
   \      0x6F2   0xF8D4 0xC018      LDR      R12,[R4, #+24]
   \      0x6F6   0xEA0C 0x0707      AND      R7,R12,R7
   \      0x6FA   0xF8D4 0xC01C      LDR      R12,[R4, #+28]
   \      0x6FE   0xF8D4 0xE014      LDR      LR,[R4, #+20]
   \      0x702   0xF8D4 0x8018      LDR      R8,[R4, #+24]
   \      0x706   0xEA48 0x0E0E      ORR      LR,R8,LR
   \      0x70A   0xEA0E 0x0C0C      AND      R12,LR,R12
   \      0x70E   0xEA4C 0x0707      ORR      R7,R12,R7
   \      0x712   0x19BE             ADDS     R6,R7,R6
   \      0x714   0x9F00             LDR      R7,[SP, #+0]
   \      0x716   0x19EF             ADDS     R7,R5,R7
   \      0x718   0x9700             STR      R7,[SP, #+0]
   \      0x71A   0x1975             ADDS     R5,R6,R5
   \      0x71C   0x6125             STR      R5,[R4, #+16]
    233                  P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
   \      0x71E   0xAD08             ADD      R5,SP,#+32
   \      0x720   0xEB05 0x0581      ADD      R5,R5,R1, LSL #+2
   \      0x724   0x68AD             LDR      R5,[R5, #+8]
   \      0x726   0x462E             MOV      R6,R5
   \      0x728   0xEA4F 0x46F6      ROR      R6,R6,#+19
   \      0x72C   0xEA86 0x4675      EOR      R6,R6,R5, ROR #+17
   \      0x730   0xAD08             ADD      R5,SP,#+32
   \      0x732   0xEB05 0x0581      ADD      R5,R5,R1, LSL #+2
   \      0x736   0x68AD             LDR      R5,[R5, #+8]
   \      0x738   0xEA86 0x2695      EOR      R6,R6,R5, LSR #+10
   \      0x73C   0xAD08             ADD      R5,SP,#+32
   \      0x73E   0xEB05 0x0581      ADD      R5,R5,R1, LSL #+2
   \      0x742   0xF855 0x5C0C      LDR      R5,[R5, #-12]
   \      0x746   0x19AE             ADDS     R6,R5,R6
   \      0x748   0xAD08             ADD      R5,SP,#+32
   \      0x74A   0xEB05 0x0581      ADD      R5,R5,R1, LSL #+2
   \      0x74E   0xF855 0x5C2C      LDR      R5,[R5, #-44]
   \      0x752   0x462F             MOV      R7,R5
   \      0x754   0xEA4F 0x47B7      ROR      R7,R7,#+18
   \      0x758   0xEA87 0x17F5      EOR      R7,R7,R5, ROR #+7
   \      0x75C   0xAD08             ADD      R5,SP,#+32
   \      0x75E   0xEB05 0x0581      ADD      R5,R5,R1, LSL #+2
   \      0x762   0xF855 0x5C2C      LDR      R5,[R5, #-44]
   \      0x766   0xEA87 0x07D5      EOR      R7,R7,R5, LSR #+3
   \      0x76A   0x19BE             ADDS     R6,R7,R6
   \      0x76C   0xAD08             ADD      R5,SP,#+32
   \      0x76E   0xEB05 0x0581      ADD      R5,R5,R1, LSL #+2
   \      0x772   0xF855 0x5C30      LDR      R5,[R5, #-48]
   \      0x776   0x19AE             ADDS     R6,R5,R6
   \      0x778   0xAD08             ADD      R5,SP,#+32
   \      0x77A   0xEB05 0x0581      ADD      R5,R5,R1, LSL #+2
   \      0x77E   0x612E             STR      R6,[R5, #+16]
   \      0x780   0x68E5             LDR      R5,[R4, #+12]
   \      0x782   0x9E00             LDR      R6,[SP, #+0]
   \      0x784   0x4637             MOV      R7,R6
   \      0x786   0xEA4F 0x27F7      ROR      R7,R7,#+11
   \      0x78A   0xEA87 0x17B6      EOR      R7,R7,R6, ROR #+6
   \      0x78E   0xEA87 0x6776      EOR      R7,R7,R6, ROR #+25
   \      0x792   0x197D             ADDS     R5,R7,R5
   \      0x794   0x68A6             LDR      R6,[R4, #+8]
   \      0x796   0x9F00             LDR      R7,[SP, #+0]
   \      0x798   0xF8D4 0xC004      LDR      R12,[R4, #+4]
   \      0x79C   0x46B6             MOV      LR,R6
   \      0x79E   0xEA8E 0x0C0C      EOR      R12,LR,R12
   \      0x7A2   0xEA0C 0x0707      AND      R7,R12,R7
   \      0x7A6   0x407E             EORS     R6,R7,R6
   \      0x7A8   0x1975             ADDS     R5,R6,R5
   \      0x7AA   0xEB03 0x0681      ADD      R6,R3,R1, LSL #+2
   \      0x7AE   0x6936             LDR      R6,[R6, #+16]
   \      0x7B0   0x1975             ADDS     R5,R6,R5
   \      0x7B2   0xAE08             ADD      R6,SP,#+32
   \      0x7B4   0xEB06 0x0681      ADD      R6,R6,R1, LSL #+2
   \      0x7B8   0x6936             LDR      R6,[R6, #+16]
   \      0x7BA   0x1975             ADDS     R5,R6,R5
   \      0x7BC   0x6927             LDR      R7,[R4, #+16]
   \      0x7BE   0x463E             MOV      R6,R7
   \      0x7C0   0xEA4F 0x3676      ROR      R6,R6,#+13
   \      0x7C4   0xEA86 0x06B7      EOR      R6,R6,R7, ROR #+2
   \      0x7C8   0xEA86 0x56B7      EOR      R6,R6,R7, ROR #+22
   \      0x7CC   0xF8D4 0xC014      LDR      R12,[R4, #+20]
   \      0x7D0   0xEA0C 0x0707      AND      R7,R12,R7
   \      0x7D4   0xF8D4 0xC018      LDR      R12,[R4, #+24]
   \      0x7D8   0xF8D4 0xE010      LDR      LR,[R4, #+16]
   \      0x7DC   0xF8D4 0x8014      LDR      R8,[R4, #+20]
   \      0x7E0   0xEA48 0x0E0E      ORR      LR,R8,LR
   \      0x7E4   0xEA0E 0x0C0C      AND      R12,LR,R12
   \      0x7E8   0xEA4C 0x0707      ORR      R7,R12,R7
   \      0x7EC   0x19BE             ADDS     R6,R7,R6
   \      0x7EE   0x69E7             LDR      R7,[R4, #+28]
   \      0x7F0   0x19EF             ADDS     R7,R5,R7
   \      0x7F2   0x61E7             STR      R7,[R4, #+28]
   \      0x7F4   0x1975             ADDS     R5,R6,R5
   \      0x7F6   0x60E5             STR      R5,[R4, #+12]
    234                  P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
   \      0x7F8   0xAD08             ADD      R5,SP,#+32
   \      0x7FA   0xEB05 0x0581      ADD      R5,R5,R1, LSL #+2
   \      0x7FE   0x68ED             LDR      R5,[R5, #+12]
   \      0x800   0x462E             MOV      R6,R5
   \      0x802   0xEA4F 0x46F6      ROR      R6,R6,#+19
   \      0x806   0xEA86 0x4675      EOR      R6,R6,R5, ROR #+17
   \      0x80A   0xAD08             ADD      R5,SP,#+32
   \      0x80C   0xEB05 0x0581      ADD      R5,R5,R1, LSL #+2
   \      0x810   0x68ED             LDR      R5,[R5, #+12]
   \      0x812   0xEA86 0x2695      EOR      R6,R6,R5, LSR #+10
   \      0x816   0xAD08             ADD      R5,SP,#+32
   \      0x818   0xEB05 0x0581      ADD      R5,R5,R1, LSL #+2
   \      0x81C   0xF855 0x5C08      LDR      R5,[R5, #-8]
   \      0x820   0x19AE             ADDS     R6,R5,R6
   \      0x822   0xAD08             ADD      R5,SP,#+32
   \      0x824   0xEB05 0x0581      ADD      R5,R5,R1, LSL #+2
   \      0x828   0xF855 0x5C28      LDR      R5,[R5, #-40]
   \      0x82C   0x462F             MOV      R7,R5
   \      0x82E   0xEA4F 0x47B7      ROR      R7,R7,#+18
   \      0x832   0xEA87 0x17F5      EOR      R7,R7,R5, ROR #+7
   \      0x836   0xAD08             ADD      R5,SP,#+32
   \      0x838   0xEB05 0x0581      ADD      R5,R5,R1, LSL #+2
   \      0x83C   0xF855 0x5C28      LDR      R5,[R5, #-40]
   \      0x840   0xEA87 0x07D5      EOR      R7,R7,R5, LSR #+3
   \      0x844   0x19BE             ADDS     R6,R7,R6
   \      0x846   0xAD08             ADD      R5,SP,#+32
   \      0x848   0xEB05 0x0581      ADD      R5,R5,R1, LSL #+2
   \      0x84C   0xF855 0x5C2C      LDR      R5,[R5, #-44]
   \      0x850   0x19AE             ADDS     R6,R5,R6
   \      0x852   0xAD08             ADD      R5,SP,#+32
   \      0x854   0xEB05 0x0581      ADD      R5,R5,R1, LSL #+2
   \      0x858   0x616E             STR      R6,[R5, #+20]
   \      0x85A   0x68A5             LDR      R5,[R4, #+8]
   \      0x85C   0x69E6             LDR      R6,[R4, #+28]
   \      0x85E   0x4637             MOV      R7,R6
   \      0x860   0xEA4F 0x27F7      ROR      R7,R7,#+11
   \      0x864   0xEA87 0x17B6      EOR      R7,R7,R6, ROR #+6
   \      0x868   0xEA87 0x6776      EOR      R7,R7,R6, ROR #+25
   \      0x86C   0x197D             ADDS     R5,R7,R5
   \      0x86E   0x6866             LDR      R6,[R4, #+4]
   \      0x870   0x69E7             LDR      R7,[R4, #+28]
   \      0x872   0xF8DD 0xC000      LDR      R12,[SP, #+0]
   \      0x876   0x46B6             MOV      LR,R6
   \      0x878   0xEA8E 0x0C0C      EOR      R12,LR,R12
   \      0x87C   0xEA0C 0x0707      AND      R7,R12,R7
   \      0x880   0x407E             EORS     R6,R7,R6
   \      0x882   0x1975             ADDS     R5,R6,R5
   \      0x884   0xEB03 0x0681      ADD      R6,R3,R1, LSL #+2
   \      0x888   0x6976             LDR      R6,[R6, #+20]
   \      0x88A   0x1975             ADDS     R5,R6,R5
   \      0x88C   0xAE08             ADD      R6,SP,#+32
   \      0x88E   0xEB06 0x0681      ADD      R6,R6,R1, LSL #+2
   \      0x892   0x6976             LDR      R6,[R6, #+20]
   \      0x894   0x1975             ADDS     R5,R6,R5
   \      0x896   0x68E7             LDR      R7,[R4, #+12]
   \      0x898   0x463E             MOV      R6,R7
   \      0x89A   0xEA4F 0x3676      ROR      R6,R6,#+13
   \      0x89E   0xEA86 0x06B7      EOR      R6,R6,R7, ROR #+2
   \      0x8A2   0xEA86 0x56B7      EOR      R6,R6,R7, ROR #+22
   \      0x8A6   0xF8D4 0xC010      LDR      R12,[R4, #+16]
   \      0x8AA   0xEA0C 0x0707      AND      R7,R12,R7
   \      0x8AE   0xF8D4 0xC014      LDR      R12,[R4, #+20]
   \      0x8B2   0xF8D4 0xE00C      LDR      LR,[R4, #+12]
   \      0x8B6   0xF8D4 0x8010      LDR      R8,[R4, #+16]
   \      0x8BA   0xEA48 0x0E0E      ORR      LR,R8,LR
   \      0x8BE   0xEA0E 0x0C0C      AND      R12,LR,R12
   \      0x8C2   0xEA4C 0x0707      ORR      R7,R12,R7
   \      0x8C6   0x19BE             ADDS     R6,R7,R6
   \      0x8C8   0x69A7             LDR      R7,[R4, #+24]
   \      0x8CA   0x19EF             ADDS     R7,R5,R7
   \      0x8CC   0x61A7             STR      R7,[R4, #+24]
   \      0x8CE   0x1975             ADDS     R5,R6,R5
   \      0x8D0   0x60A5             STR      R5,[R4, #+8]
    235                  P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
   \      0x8D2   0xAD08             ADD      R5,SP,#+32
   \      0x8D4   0xEB05 0x0581      ADD      R5,R5,R1, LSL #+2
   \      0x8D8   0x692D             LDR      R5,[R5, #+16]
   \      0x8DA   0x462E             MOV      R6,R5
   \      0x8DC   0xEA4F 0x46F6      ROR      R6,R6,#+19
   \      0x8E0   0xEA86 0x4675      EOR      R6,R6,R5, ROR #+17
   \      0x8E4   0xAD08             ADD      R5,SP,#+32
   \      0x8E6   0xEB05 0x0581      ADD      R5,R5,R1, LSL #+2
   \      0x8EA   0x692D             LDR      R5,[R5, #+16]
   \      0x8EC   0xEA86 0x2695      EOR      R6,R6,R5, LSR #+10
   \      0x8F0   0xAD08             ADD      R5,SP,#+32
   \      0x8F2   0xEB05 0x0581      ADD      R5,R5,R1, LSL #+2
   \      0x8F6   0xF855 0x5C04      LDR      R5,[R5, #-4]
   \      0x8FA   0x19AE             ADDS     R6,R5,R6
   \      0x8FC   0xAD08             ADD      R5,SP,#+32
   \      0x8FE   0xEB05 0x0581      ADD      R5,R5,R1, LSL #+2
   \      0x902   0xF855 0x5C24      LDR      R5,[R5, #-36]
   \      0x906   0x462F             MOV      R7,R5
   \      0x908   0xEA4F 0x47B7      ROR      R7,R7,#+18
   \      0x90C   0xEA87 0x17F5      EOR      R7,R7,R5, ROR #+7
   \      0x910   0xAD08             ADD      R5,SP,#+32
   \      0x912   0xEB05 0x0581      ADD      R5,R5,R1, LSL #+2
   \      0x916   0xF855 0x5C24      LDR      R5,[R5, #-36]
   \      0x91A   0xEA87 0x07D5      EOR      R7,R7,R5, LSR #+3
   \      0x91E   0x19BE             ADDS     R6,R7,R6
   \      0x920   0xAD08             ADD      R5,SP,#+32
   \      0x922   0xEB05 0x0581      ADD      R5,R5,R1, LSL #+2
   \      0x926   0xF855 0x5C28      LDR      R5,[R5, #-40]
   \      0x92A   0x19AE             ADDS     R6,R5,R6
   \      0x92C   0xAD08             ADD      R5,SP,#+32
   \      0x92E   0xEB05 0x0581      ADD      R5,R5,R1, LSL #+2
   \      0x932   0x61AE             STR      R6,[R5, #+24]
   \      0x934   0x6865             LDR      R5,[R4, #+4]
   \      0x936   0x69A6             LDR      R6,[R4, #+24]
   \      0x938   0x4637             MOV      R7,R6
   \      0x93A   0xEA4F 0x27F7      ROR      R7,R7,#+11
   \      0x93E   0xEA87 0x17B6      EOR      R7,R7,R6, ROR #+6
   \      0x942   0xEA87 0x6776      EOR      R7,R7,R6, ROR #+25
   \      0x946   0x197D             ADDS     R5,R7,R5
   \      0x948   0x9E00             LDR      R6,[SP, #+0]
   \      0x94A   0x69A7             LDR      R7,[R4, #+24]
   \      0x94C   0xF8D4 0xC01C      LDR      R12,[R4, #+28]
   \      0x950   0x46B6             MOV      LR,R6
   \      0x952   0xEA8E 0x0C0C      EOR      R12,LR,R12
   \      0x956   0xEA0C 0x0707      AND      R7,R12,R7
   \      0x95A   0x407E             EORS     R6,R7,R6
   \      0x95C   0x1975             ADDS     R5,R6,R5
   \      0x95E   0xEB03 0x0681      ADD      R6,R3,R1, LSL #+2
   \      0x962   0x69B6             LDR      R6,[R6, #+24]
   \      0x964   0x1975             ADDS     R5,R6,R5
   \      0x966   0xAE08             ADD      R6,SP,#+32
   \      0x968   0xEB06 0x0681      ADD      R6,R6,R1, LSL #+2
   \      0x96C   0x69B6             LDR      R6,[R6, #+24]
   \      0x96E   0x1975             ADDS     R5,R6,R5
   \      0x970   0x68A7             LDR      R7,[R4, #+8]
   \      0x972   0x463E             MOV      R6,R7
   \      0x974   0xEA4F 0x3676      ROR      R6,R6,#+13
   \      0x978   0xEA86 0x06B7      EOR      R6,R6,R7, ROR #+2
   \      0x97C   0xEA86 0x56B7      EOR      R6,R6,R7, ROR #+22
   \      0x980   0xF8D4 0xC00C      LDR      R12,[R4, #+12]
   \      0x984   0xEA0C 0x0707      AND      R7,R12,R7
   \      0x988   0xF8D4 0xC010      LDR      R12,[R4, #+16]
   \      0x98C   0xF8D4 0xE008      LDR      LR,[R4, #+8]
   \      0x990   0xF8D4 0x800C      LDR      R8,[R4, #+12]
   \      0x994   0xEA48 0x0E0E      ORR      LR,R8,LR
   \      0x998   0xEA0E 0x0C0C      AND      R12,LR,R12
   \      0x99C   0xEA4C 0x0707      ORR      R7,R12,R7
   \      0x9A0   0x19BE             ADDS     R6,R7,R6
   \      0x9A2   0x6967             LDR      R7,[R4, #+20]
   \      0x9A4   0x19EF             ADDS     R7,R5,R7
   \      0x9A6   0x6167             STR      R7,[R4, #+20]
   \      0x9A8   0x1975             ADDS     R5,R6,R5
   \      0x9AA   0x6065             STR      R5,[R4, #+4]
    236                  P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
   \      0x9AC   0xAD08             ADD      R5,SP,#+32
   \      0x9AE   0xEB05 0x0581      ADD      R5,R5,R1, LSL #+2
   \      0x9B2   0x696D             LDR      R5,[R5, #+20]
   \      0x9B4   0x462E             MOV      R6,R5
   \      0x9B6   0xEA4F 0x46F6      ROR      R6,R6,#+19
   \      0x9BA   0xEA86 0x4675      EOR      R6,R6,R5, ROR #+17
   \      0x9BE   0xAD08             ADD      R5,SP,#+32
   \      0x9C0   0xEB05 0x0581      ADD      R5,R5,R1, LSL #+2
   \      0x9C4   0x696D             LDR      R5,[R5, #+20]
   \      0x9C6   0xEA86 0x2695      EOR      R6,R6,R5, LSR #+10
   \      0x9CA   0xF852 0x2021      LDR      R2,[R2, R1, LSL #+2]
   \      0x9CE   0x1996             ADDS     R6,R2,R6
   \      0x9D0   0xAA08             ADD      R2,SP,#+32
   \      0x9D2   0xEB02 0x0281      ADD      R2,R2,R1, LSL #+2
   \      0x9D6   0xF852 0x2C20      LDR      R2,[R2, #-32]
   \      0x9DA   0x4615             MOV      R5,R2
   \      0x9DC   0xEA4F 0x45B5      ROR      R5,R5,#+18
   \      0x9E0   0xEA85 0x15F2      EOR      R5,R5,R2, ROR #+7
   \      0x9E4   0xAA08             ADD      R2,SP,#+32
   \      0x9E6   0xEB02 0x0281      ADD      R2,R2,R1, LSL #+2
   \      0x9EA   0xF852 0x2C20      LDR      R2,[R2, #-32]
   \      0x9EE   0xEA85 0x05D2      EOR      R5,R5,R2, LSR #+3
   \      0x9F2   0x19AE             ADDS     R6,R5,R6
   \      0x9F4   0xAA08             ADD      R2,SP,#+32
   \      0x9F6   0xEB02 0x0281      ADD      R2,R2,R1, LSL #+2
   \      0x9FA   0xF852 0x2C24      LDR      R2,[R2, #-36]
   \      0x9FE   0x1996             ADDS     R6,R2,R6
   \      0xA00   0xAA08             ADD      R2,SP,#+32
   \      0xA02   0xEB02 0x0281      ADD      R2,R2,R1, LSL #+2
   \      0xA06   0x61D6             STR      R6,[R2, #+28]
   \      0xA08   0x9A00             LDR      R2,[SP, #+0]
   \      0xA0A   0x6965             LDR      R5,[R4, #+20]
   \      0xA0C   0x462E             MOV      R6,R5
   \      0xA0E   0xEA4F 0x26F6      ROR      R6,R6,#+11
   \      0xA12   0xEA86 0x16B5      EOR      R6,R6,R5, ROR #+6
   \      0xA16   0xEA86 0x6675      EOR      R6,R6,R5, ROR #+25
   \      0xA1A   0x18B2             ADDS     R2,R6,R2
   \      0xA1C   0x69E5             LDR      R5,[R4, #+28]
   \      0xA1E   0x6966             LDR      R6,[R4, #+20]
   \      0xA20   0x69A7             LDR      R7,[R4, #+24]
   \      0xA22   0x46AC             MOV      R12,R5
   \      0xA24   0xEA8C 0x0707      EOR      R7,R12,R7
   \      0xA28   0x403E             ANDS     R6,R7,R6
   \      0xA2A   0x4075             EORS     R5,R6,R5
   \      0xA2C   0x18AA             ADDS     R2,R5,R2
   \      0xA2E   0xEB03 0x0381      ADD      R3,R3,R1, LSL #+2
   \      0xA32   0x69DB             LDR      R3,[R3, #+28]
   \      0xA34   0x189A             ADDS     R2,R3,R2
   \      0xA36   0xAB08             ADD      R3,SP,#+32
   \      0xA38   0xEB03 0x0381      ADD      R3,R3,R1, LSL #+2
   \      0xA3C   0x69DB             LDR      R3,[R3, #+28]
   \      0xA3E   0x189A             ADDS     R2,R3,R2
   \      0xA40   0x6865             LDR      R5,[R4, #+4]
   \      0xA42   0x462B             MOV      R3,R5
   \      0xA44   0xEA4F 0x3373      ROR      R3,R3,#+13
   \      0xA48   0xEA83 0x03B5      EOR      R3,R3,R5, ROR #+2
   \      0xA4C   0xEA83 0x53B5      EOR      R3,R3,R5, ROR #+22
   \      0xA50   0x68A6             LDR      R6,[R4, #+8]
   \      0xA52   0x4035             ANDS     R5,R6,R5
   \      0xA54   0x68E6             LDR      R6,[R4, #+12]
   \      0xA56   0x6867             LDR      R7,[R4, #+4]
   \      0xA58   0xF8D4 0xC008      LDR      R12,[R4, #+8]
   \      0xA5C   0xEA4C 0x0707      ORR      R7,R12,R7
   \      0xA60   0x403E             ANDS     R6,R7,R6
   \      0xA62   0x4335             ORRS     R5,R6,R5
   \      0xA64   0x18EB             ADDS     R3,R5,R3
   \      0xA66   0x6925             LDR      R5,[R4, #+16]
   \      0xA68   0x1955             ADDS     R5,R2,R5
   \      0xA6A   0x6125             STR      R5,[R4, #+16]
   \      0xA6C   0x189A             ADDS     R2,R3,R2
   \      0xA6E   0x9200             STR      R2,[SP, #+0]
    237              }
   \      0xA70   0x3108             ADDS     R1,R1,#+8
   \                     ??mbedtls_internal_sha256_process_6: (+1)
   \      0xA72   0x2940             CMP      R1,#+64
   \      0xA74   0xF4FF 0xACA2      BCC.W    ??mbedtls_internal_sha256_process_7
    238          #endif /* MBEDTLS_SHA256_SMALLER */
    239          
    240              for( i = 0; i < 8; i++ )
   \      0xA78   0x2100             MOVS     R1,#+0
   \      0xA7A   0xE00A             B.N      ??mbedtls_internal_sha256_process_8
    241                  ctx->state[i] += A[i];
   \                     ??mbedtls_internal_sha256_process_9: (+1)
   \      0xA7C   0xEB00 0x0281      ADD      R2,R0,R1, LSL #+2
   \      0xA80   0x6892             LDR      R2,[R2, #+8]
   \      0xA82   0x466B             MOV      R3,SP
   \      0xA84   0xF853 0x3021      LDR      R3,[R3, R1, LSL #+2]
   \      0xA88   0x189A             ADDS     R2,R3,R2
   \      0xA8A   0xEB00 0x0381      ADD      R3,R0,R1, LSL #+2
   \      0xA8E   0x609A             STR      R2,[R3, #+8]
   \      0xA90   0x1C49             ADDS     R1,R1,#+1
   \                     ??mbedtls_internal_sha256_process_8: (+1)
   \      0xA92   0x2908             CMP      R1,#+8
   \      0xA94   0xD3F2             BCC.N    ??mbedtls_internal_sha256_process_9
    242          
    243              return( 0 );
   \      0xA96   0x2000             MOVS     R0,#+0
   \      0xA98   0xB048             ADD      SP,SP,#+288
   \      0xA9A   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    244          }
    245          
    246          #if !defined(MBEDTLS_DEPRECATED_REMOVED)

   \                                 In section .text, align 2, keep-with-next
    247          void mbedtls_sha256_process( mbedtls_sha256_context *ctx,
    248                                       const unsigned char data[64] )
    249          {
    250              mbedtls_internal_sha256_process( ctx, data );
   \                     mbedtls_sha256_process: (+1)
   \        0x0   0x....'....        B.W      mbedtls_internal_sha256_process
    251          }
    252          #endif
    253          #endif /* !MBEDTLS_SHA256_PROCESS_ALT */
    254          
    255          /*
    256           * SHA-256 process buffer
    257           */

   \                                 In section .text, align 2, keep-with-next
    258          int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
    259                                         const unsigned char *input,
    260                                         size_t ilen )
    261          {
   \                     mbedtls_sha256_update_ret: (+1)
   \        0x0   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \        0x4   0x4680             MOV      R8,R0
   \        0x6   0x460E             MOV      R6,R1
   \        0x8   0x0014             MOVS     R4,R2
    262              int ret;
    263              size_t fill;
    264              uint32_t left;
    265          
    266              if( ilen == 0 )
   \        0xA   0xD03C             BEQ.N    ??mbedtls_sha256_update_ret_0
    267                  return( 0 );
    268          
    269              left = ctx->total[0] & 0x3F;
   \        0xC   0xF898 0x5000      LDRB     R5,[R8, #+0]
   \       0x10   0xF005 0x053F      AND      R5,R5,#0x3F
    270              fill = 64 - left;
   \       0x14   0xF1C5 0x0740      RSB      R7,R5,#+64
    271          
    272              ctx->total[0] += (uint32_t) ilen;
   \       0x18   0xF8D8 0x0000      LDR      R0,[R8, #+0]
   \       0x1C   0x1820             ADDS     R0,R4,R0
   \       0x1E   0xF8C8 0x0000      STR      R0,[R8, #+0]
    273              ctx->total[0] &= 0xFFFFFFFF;
   \       0x22   0xF8C8 0x0000      STR      R0,[R8, #+0]
    274          
    275              if( ctx->total[0] < (uint32_t) ilen )
   \       0x26   0x42A0             CMP      R0,R4
   \       0x28   0xD204             BCS.N    ??mbedtls_sha256_update_ret_1
    276                  ctx->total[1]++;
   \       0x2A   0xF8D8 0x0004      LDR      R0,[R8, #+4]
   \       0x2E   0x1C40             ADDS     R0,R0,#+1
   \       0x30   0xF8C8 0x0004      STR      R0,[R8, #+4]
    277          
    278              if( left && ilen >= fill )
   \                     ??mbedtls_sha256_update_ret_1: (+1)
   \       0x34   0x2D00             CMP      R5,#+0
   \       0x36   0xD014             BEQ.N    ??mbedtls_sha256_update_ret_2
   \       0x38   0x42BC             CMP      R4,R7
   \       0x3A   0xD312             BCC.N    ??mbedtls_sha256_update_ret_2
    279              {
    280                  memcpy( (void *) (ctx->buffer + left), input, fill );
   \       0x3C   0x463A             MOV      R2,R7
   \       0x3E   0xEB08 0x0005      ADD      R0,R8,R5
   \       0x42   0x3028             ADDS     R0,R0,#+40
   \       0x44   0x....'....        BL       __aeabi_memcpy
    281          
    282                  if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
   \       0x48   0xF108 0x0128      ADD      R1,R8,#+40
   \       0x4C   0x4640             MOV      R0,R8
   \       0x4E   0x....'....        BL       mbedtls_internal_sha256_process
   \       0x52   0x2800             CMP      R0,#+0
   \       0x54   0xD118             BNE.N    ??mbedtls_sha256_update_ret_3
    283                      return( ret );
    284          
    285                  input += fill;
   \       0x56   0x443E             ADD      R6,R6,R7
    286                  ilen  -= fill;
   \       0x58   0x1BE4             SUBS     R4,R4,R7
    287                  left = 0;
   \       0x5A   0x2500             MOVS     R5,#+0
   \       0x5C   0xE001             B.N      ??mbedtls_sha256_update_ret_2
    288              }
    289          
    290              while( ilen >= 64 )
    291              {
    292                  if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
    293                      return( ret );
    294          
    295                  input += 64;
   \                     ??mbedtls_sha256_update_ret_4: (+1)
   \       0x5E   0x3640             ADDS     R6,R6,#+64
    296                  ilen  -= 64;
   \       0x60   0x3C40             SUBS     R4,R4,#+64
   \                     ??mbedtls_sha256_update_ret_2: (+1)
   \       0x62   0x2C40             CMP      R4,#+64
   \       0x64   0xD306             BCC.N    ??mbedtls_sha256_update_ret_5
   \       0x66   0x4631             MOV      R1,R6
   \       0x68   0x4640             MOV      R0,R8
   \       0x6A   0x....'....        BL       mbedtls_internal_sha256_process
   \       0x6E   0x2800             CMP      R0,#+0
   \       0x70   0xD0F5             BEQ.N    ??mbedtls_sha256_update_ret_4
   \       0x72   0xE009             B.N      ??mbedtls_sha256_update_ret_3
    297              }
    298          
    299              if( ilen > 0 )
   \                     ??mbedtls_sha256_update_ret_5: (+1)
   \       0x74   0x2C00             CMP      R4,#+0
   \       0x76   0xD006             BEQ.N    ??mbedtls_sha256_update_ret_0
    300                  memcpy( (void *) (ctx->buffer + left), input, ilen );
   \       0x78   0x4622             MOV      R2,R4
   \       0x7A   0x4631             MOV      R1,R6
   \       0x7C   0xEB08 0x0005      ADD      R0,R8,R5
   \       0x80   0x3028             ADDS     R0,R0,#+40
   \       0x82   0x....'....        BL       __aeabi_memcpy
    301          
    302              return( 0 );
   \                     ??mbedtls_sha256_update_ret_0: (+1)
   \       0x86   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_sha256_update_ret_3: (+1)
   \       0x88   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    303          }
    304          
    305          #if !defined(MBEDTLS_DEPRECATED_REMOVED)

   \                                 In section .text, align 2, keep-with-next
    306          void mbedtls_sha256_update( mbedtls_sha256_context *ctx,
    307                                      const unsigned char *input,
    308                                      size_t ilen )
    309          {
    310              mbedtls_sha256_update_ret( ctx, input, ilen );
   \                     mbedtls_sha256_update: (+1)
   \        0x0   0x....             B.N      mbedtls_sha256_update_ret
    311          }
    312          #endif
    313          
    314          /*
    315           * SHA-256 final digest
    316           */

   \                                 In section .text, align 2, keep-with-next
    317          int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
    318                                         unsigned char output[32] )
    319          {
   \                     mbedtls_sha256_finish_ret: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
    320              int ret;
    321              uint32_t used;
    322              uint32_t high, low;
    323          
    324              /*
    325               * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
    326               */
    327              used = ctx->total[0] & 0x3F;
   \        0x6   0x7820             LDRB     R0,[R4, #+0]
   \        0x8   0xF000 0x003F      AND      R0,R0,#0x3F
    328          
    329              ctx->buffer[used++] = 0x80;
   \        0xC   0x2180             MOVS     R1,#+128
   \        0xE   0x1822             ADDS     R2,R4,R0
   \       0x10   0xF882 0x1028      STRB     R1,[R2, #+40]
   \       0x14   0x1C40             ADDS     R0,R0,#+1
    330          
    331              if( used <= 56 )
   \       0x16   0x2839             CMP      R0,#+57
   \       0x18   0xD207             BCS.N    ??mbedtls_sha256_finish_ret_0
    332              {
    333                  /* Enough room for padding + length in current block */
    334                  memset( ctx->buffer + used, 0, 56 - used );
   \       0x1A   0x2200             MOVS     R2,#+0
   \       0x1C   0xF1C0 0x0138      RSB      R1,R0,#+56
   \       0x20   0x4420             ADD      R0,R4,R0
   \       0x22   0x3028             ADDS     R0,R0,#+40
   \       0x24   0x....'....        BL       __aeabi_memset
    335              }
   \       0x28   0xE014             B.N      ??mbedtls_sha256_finish_ret_1
    336              else
    337              {
    338                  /* We'll need an extra block */
    339                  memset( ctx->buffer + used, 0, 64 - used );
   \                     ??mbedtls_sha256_finish_ret_0: (+1)
   \       0x2A   0x2200             MOVS     R2,#+0
   \       0x2C   0xF1C0 0x0140      RSB      R1,R0,#+64
   \       0x30   0x4420             ADD      R0,R4,R0
   \       0x32   0x3028             ADDS     R0,R0,#+40
   \       0x34   0x....'....        BL       __aeabi_memset
    340          
    341                  if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
   \       0x38   0xF104 0x0128      ADD      R1,R4,#+40
   \       0x3C   0x4620             MOV      R0,R4
   \       0x3E   0x....'....        BL       mbedtls_internal_sha256_process
   \       0x42   0x2800             CMP      R0,#+0
   \       0x44   0xF040 0x808B      BNE.W    ??mbedtls_sha256_finish_ret_2
    342                      return( ret );
    343          
    344                  memset( ctx->buffer, 0, 56 );
   \       0x48   0x2200             MOVS     R2,#+0
   \       0x4A   0x2138             MOVS     R1,#+56
   \       0x4C   0xF104 0x0028      ADD      R0,R4,#+40
   \       0x50   0x....'....        BL       __aeabi_memset4
    345              }
    346          
    347              /*
    348               * Add message length
    349               */
    350              high = ( ctx->total[0] >> 29 )
    351                   | ( ctx->total[1] <<  3 );
   \                     ??mbedtls_sha256_finish_ret_1: (+1)
   \       0x54   0x6821             LDR      R1,[R4, #+0]
   \       0x56   0x6860             LDR      R0,[R4, #+4]
   \       0x58   0x00C0             LSLS     R0,R0,#+3
   \       0x5A   0xEA40 0x7051      ORR      R0,R0,R1, LSR #+29
    352              low  = ( ctx->total[0] <<  3 );
   \       0x5E   0x00C9             LSLS     R1,R1,#+3
    353          
    354              PUT_UINT32_BE( high, ctx->buffer, 56 );
   \       0x60   0x4602             MOV      R2,R0
   \       0x62   0x0E12             LSRS     R2,R2,#+24
   \       0x64   0xF884 0x2060      STRB     R2,[R4, #+96]
   \       0x68   0x4602             MOV      R2,R0
   \       0x6A   0x0C12             LSRS     R2,R2,#+16
   \       0x6C   0xF884 0x2061      STRB     R2,[R4, #+97]
   \       0x70   0x4602             MOV      R2,R0
   \       0x72   0x0A12             LSRS     R2,R2,#+8
   \       0x74   0xF884 0x2062      STRB     R2,[R4, #+98]
   \       0x78   0xF884 0x0063      STRB     R0,[R4, #+99]
    355              PUT_UINT32_BE( low,  ctx->buffer, 60 );
   \       0x7C   0x4608             MOV      R0,R1
   \       0x7E   0x0E00             LSRS     R0,R0,#+24
   \       0x80   0xF884 0x0064      STRB     R0,[R4, #+100]
   \       0x84   0x4608             MOV      R0,R1
   \       0x86   0x0C00             LSRS     R0,R0,#+16
   \       0x88   0xF884 0x0065      STRB     R0,[R4, #+101]
   \       0x8C   0x4608             MOV      R0,R1
   \       0x8E   0x0A00             LSRS     R0,R0,#+8
   \       0x90   0xF884 0x0066      STRB     R0,[R4, #+102]
   \       0x94   0xF884 0x1067      STRB     R1,[R4, #+103]
    356          
    357              if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
   \       0x98   0xF104 0x0128      ADD      R1,R4,#+40
   \       0x9C   0x4620             MOV      R0,R4
   \       0x9E   0x....'....        BL       mbedtls_internal_sha256_process
   \       0xA2   0x2800             CMP      R0,#+0
   \       0xA4   0xD15B             BNE.N    ??mbedtls_sha256_finish_ret_2
    358                  return( ret );
    359          
    360              /*
    361               * Output final state
    362               */
    363              PUT_UINT32_BE( ctx->state[0], output,  0 );
   \       0xA6   0x68A0             LDR      R0,[R4, #+8]
   \       0xA8   0x0E00             LSRS     R0,R0,#+24
   \       0xAA   0x7028             STRB     R0,[R5, #+0]
   \       0xAC   0x68A0             LDR      R0,[R4, #+8]
   \       0xAE   0x0C00             LSRS     R0,R0,#+16
   \       0xB0   0x7068             STRB     R0,[R5, #+1]
   \       0xB2   0x68A0             LDR      R0,[R4, #+8]
   \       0xB4   0x0A00             LSRS     R0,R0,#+8
   \       0xB6   0x70A8             STRB     R0,[R5, #+2]
   \       0xB8   0x68A0             LDR      R0,[R4, #+8]
   \       0xBA   0x70E8             STRB     R0,[R5, #+3]
    364              PUT_UINT32_BE( ctx->state[1], output,  4 );
   \       0xBC   0x68E0             LDR      R0,[R4, #+12]
   \       0xBE   0x0E00             LSRS     R0,R0,#+24
   \       0xC0   0x7128             STRB     R0,[R5, #+4]
   \       0xC2   0x68E0             LDR      R0,[R4, #+12]
   \       0xC4   0x0C00             LSRS     R0,R0,#+16
   \       0xC6   0x7168             STRB     R0,[R5, #+5]
   \       0xC8   0x68E0             LDR      R0,[R4, #+12]
   \       0xCA   0x0A00             LSRS     R0,R0,#+8
   \       0xCC   0x71A8             STRB     R0,[R5, #+6]
   \       0xCE   0x68E0             LDR      R0,[R4, #+12]
   \       0xD0   0x71E8             STRB     R0,[R5, #+7]
    365              PUT_UINT32_BE( ctx->state[2], output,  8 );
   \       0xD2   0x6920             LDR      R0,[R4, #+16]
   \       0xD4   0x0E00             LSRS     R0,R0,#+24
   \       0xD6   0x7228             STRB     R0,[R5, #+8]
   \       0xD8   0x6920             LDR      R0,[R4, #+16]
   \       0xDA   0x0C00             LSRS     R0,R0,#+16
   \       0xDC   0x7268             STRB     R0,[R5, #+9]
   \       0xDE   0x6920             LDR      R0,[R4, #+16]
   \       0xE0   0x0A00             LSRS     R0,R0,#+8
   \       0xE2   0x72A8             STRB     R0,[R5, #+10]
   \       0xE4   0x6920             LDR      R0,[R4, #+16]
   \       0xE6   0x72E8             STRB     R0,[R5, #+11]
    366              PUT_UINT32_BE( ctx->state[3], output, 12 );
   \       0xE8   0x6960             LDR      R0,[R4, #+20]
   \       0xEA   0x0E00             LSRS     R0,R0,#+24
   \       0xEC   0x7328             STRB     R0,[R5, #+12]
   \       0xEE   0x6960             LDR      R0,[R4, #+20]
   \       0xF0   0x0C00             LSRS     R0,R0,#+16
   \       0xF2   0x7368             STRB     R0,[R5, #+13]
   \       0xF4   0x6960             LDR      R0,[R4, #+20]
   \       0xF6   0x0A00             LSRS     R0,R0,#+8
   \       0xF8   0x73A8             STRB     R0,[R5, #+14]
   \       0xFA   0x6960             LDR      R0,[R4, #+20]
   \       0xFC   0x73E8             STRB     R0,[R5, #+15]
    367              PUT_UINT32_BE( ctx->state[4], output, 16 );
   \       0xFE   0x69A0             LDR      R0,[R4, #+24]
   \      0x100   0x0E00             LSRS     R0,R0,#+24
   \      0x102   0x7428             STRB     R0,[R5, #+16]
   \      0x104   0x69A0             LDR      R0,[R4, #+24]
   \      0x106   0x0C00             LSRS     R0,R0,#+16
   \      0x108   0x7468             STRB     R0,[R5, #+17]
   \      0x10A   0x69A0             LDR      R0,[R4, #+24]
   \      0x10C   0x0A00             LSRS     R0,R0,#+8
   \      0x10E   0x74A8             STRB     R0,[R5, #+18]
   \      0x110   0x69A0             LDR      R0,[R4, #+24]
   \      0x112   0x74E8             STRB     R0,[R5, #+19]
    368              PUT_UINT32_BE( ctx->state[5], output, 20 );
   \      0x114   0x69E0             LDR      R0,[R4, #+28]
   \      0x116   0x0E00             LSRS     R0,R0,#+24
   \      0x118   0x7528             STRB     R0,[R5, #+20]
   \      0x11A   0x69E0             LDR      R0,[R4, #+28]
   \      0x11C   0x0C00             LSRS     R0,R0,#+16
   \      0x11E   0x7568             STRB     R0,[R5, #+21]
   \      0x120   0x69E0             LDR      R0,[R4, #+28]
   \      0x122   0x0A00             LSRS     R0,R0,#+8
   \      0x124   0x75A8             STRB     R0,[R5, #+22]
   \      0x126   0x69E0             LDR      R0,[R4, #+28]
   \      0x128   0x75E8             STRB     R0,[R5, #+23]
    369              PUT_UINT32_BE( ctx->state[6], output, 24 );
   \      0x12A   0x6A20             LDR      R0,[R4, #+32]
   \      0x12C   0x0E00             LSRS     R0,R0,#+24
   \      0x12E   0x7628             STRB     R0,[R5, #+24]
   \      0x130   0x6A20             LDR      R0,[R4, #+32]
   \      0x132   0x0C00             LSRS     R0,R0,#+16
   \      0x134   0x7668             STRB     R0,[R5, #+25]
   \      0x136   0x6A20             LDR      R0,[R4, #+32]
   \      0x138   0x0A00             LSRS     R0,R0,#+8
   \      0x13A   0x76A8             STRB     R0,[R5, #+26]
   \      0x13C   0x6A20             LDR      R0,[R4, #+32]
   \      0x13E   0x76E8             STRB     R0,[R5, #+27]
    370          
    371              if( ctx->is224 == 0 )
   \      0x140   0x6EA0             LDR      R0,[R4, #+104]
   \      0x142   0x2800             CMP      R0,#+0
   \      0x144   0xD10A             BNE.N    ??mbedtls_sha256_finish_ret_3
    372                  PUT_UINT32_BE( ctx->state[7], output, 28 );
   \      0x146   0x6A60             LDR      R0,[R4, #+36]
   \      0x148   0x0E00             LSRS     R0,R0,#+24
   \      0x14A   0x7728             STRB     R0,[R5, #+28]
   \      0x14C   0x6A60             LDR      R0,[R4, #+36]
   \      0x14E   0x0C00             LSRS     R0,R0,#+16
   \      0x150   0x7768             STRB     R0,[R5, #+29]
   \      0x152   0x6A60             LDR      R0,[R4, #+36]
   \      0x154   0x0A00             LSRS     R0,R0,#+8
   \      0x156   0x77A8             STRB     R0,[R5, #+30]
   \      0x158   0x6A60             LDR      R0,[R4, #+36]
   \      0x15A   0x77E8             STRB     R0,[R5, #+31]
    373          
    374              return( 0 );
   \                     ??mbedtls_sha256_finish_ret_3: (+1)
   \      0x15C   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_sha256_finish_ret_2: (+1)
   \      0x15E   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    375          }
    376          
    377          #if !defined(MBEDTLS_DEPRECATED_REMOVED)

   \                                 In section .text, align 2, keep-with-next
    378          void mbedtls_sha256_finish( mbedtls_sha256_context *ctx,
    379                                      unsigned char output[32] )
    380          {
    381              mbedtls_sha256_finish_ret( ctx, output );
   \                     mbedtls_sha256_finish: (+1)
   \        0x0   0x....             B.N      mbedtls_sha256_finish_ret
    382          }
    383          #endif
    384          
    385          #endif /* !MBEDTLS_SHA256_ALT */
    386          
    387          /*
    388           * output = SHA-256( input buffer )
    389           */

   \                                 In section .text, align 2, keep-with-next
    390          int mbedtls_sha256_ret( const unsigned char *input,
    391                                  size_t ilen,
    392                                  unsigned char output[32],
    393                                  int is224 )
    394          {
   \                     mbedtls_sha256_ret: (+1)
   \        0x0   0xB5F0             PUSH     {R4-R7,LR}
   \        0x2   0xB09B             SUB      SP,SP,#+108
   \        0x4   0x4605             MOV      R5,R0
   \        0x6   0x460E             MOV      R6,R1
   \        0x8   0x4617             MOV      R7,R2
   \        0xA   0x461C             MOV      R4,R3
    395              int ret;
    396              mbedtls_sha256_context ctx;
    397          
    398              mbedtls_sha256_init( &ctx );
   \        0xC   0x4668             MOV      R0,SP
   \        0xE   0x....'....        BL       mbedtls_sha256_init
    399          
    400              if( ( ret = mbedtls_sha256_starts_ret( &ctx, is224 ) ) != 0 )
   \       0x12   0x4621             MOV      R1,R4
   \       0x14   0x4668             MOV      R0,SP
   \       0x16   0x....'....        BL       mbedtls_sha256_starts_ret
   \       0x1A   0x0004             MOVS     R4,R0
   \       0x1C   0xD10B             BNE.N    ??mbedtls_sha256_ret_0
    401                  goto exit;
    402          
    403              if( ( ret = mbedtls_sha256_update_ret( &ctx, input, ilen ) ) != 0 )
   \       0x1E   0x4632             MOV      R2,R6
   \       0x20   0x4629             MOV      R1,R5
   \       0x22   0x4668             MOV      R0,SP
   \       0x24   0x....'....        BL       mbedtls_sha256_update_ret
   \       0x28   0x0004             MOVS     R4,R0
   \       0x2A   0xD104             BNE.N    ??mbedtls_sha256_ret_0
    404                  goto exit;
    405          
    406              if( ( ret = mbedtls_sha256_finish_ret( &ctx, output ) ) != 0 )
   \       0x2C   0x4639             MOV      R1,R7
   \       0x2E   0x4668             MOV      R0,SP
   \       0x30   0x....'....        BL       mbedtls_sha256_finish_ret
   \       0x34   0x4604             MOV      R4,R0
    407                  goto exit;
    408          
    409          exit:
    410              mbedtls_sha256_free( &ctx );
   \                     ??mbedtls_sha256_ret_0: (+1)
   \       0x36   0x4668             MOV      R0,SP
   \       0x38   0x....'....        BL       mbedtls_sha256_free
    411          
    412              return( ret );
   \       0x3C   0x4620             MOV      R0,R4
   \       0x3E   0xB01B             ADD      SP,SP,#+108
   \       0x40   0xBDF0             POP      {R4-R7,PC}       ;; return
    413          }
    414          
    415          #if !defined(MBEDTLS_DEPRECATED_REMOVED)

   \                                 In section .text, align 2, keep-with-next
    416          void mbedtls_sha256( const unsigned char *input,
    417                               size_t ilen,
    418                               unsigned char output[32],
    419                               int is224 )
    420          {
    421              mbedtls_sha256_ret( input, ilen, output, is224 );
   \                     mbedtls_sha256: (+1)
   \        0x0   0x....             B.N      mbedtls_sha256_ret
    422          }
    423          #endif
    424          
    425          #if defined(MBEDTLS_SELF_TEST)
    426          /*
    427           * FIPS-180-2 test vectors
    428           */

   \                                 In section .rodata, align 4
    429          static const unsigned char sha256_test_buf[3][57] =
   \                     sha256_test_buf:
   \        0x0   0x61 0x62          DC8 "abc"
   \              0x63 0x00    
   \        0x4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \       0x14   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \       0x24   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \       0x39   0x61 0x62          DC8 61H, 62H, 63H, 64H, 62H, 63H, 64H, 65H
   \              0x63 0x64    
   \              0x62 0x63    
   \              0x64 0x65    
   \       0x41   0x63 0x64          DC8 63H, 64H, 65H, 66H, 64H, 65H, 66H, 67H
   \              0x65 0x66    
   \              0x64 0x65    
   \              0x66 0x67    
   \       0x49   0x65 0x66          DC8 65H, 66H, 67H, 68H, 66H, 67H, 68H, 69H
   \              0x67 0x68    
   \              0x66 0x67    
   \              0x68 0x69    
   \       0x51   0x67 0x68          DC8 67H, 68H, 69H, 6AH, 68H, 69H, 6AH, 6BH
   \              0x69 0x6A    
   \              0x68 0x69    
   \              0x6A 0x6B    
   \       0x59   0x69 0x6A          DC8 69H, 6AH, 6BH, 6CH, 6AH, 6BH, 6CH, 6DH
   \              0x6B 0x6C    
   \              0x6A 0x6B    
   \              0x6C 0x6D    
   \       0x61   0x6B 0x6C          DC8 6BH, 6CH, 6DH, 6EH, 6CH, 6DH, 6EH, 6FH
   \              0x6D 0x6E    
   \              0x6C 0x6D    
   \              0x6E 0x6F    
   \       0x69   0x6D 0x6E          DC8 6DH, 6EH, 6FH, 70H, 6EH, 6FH, 70H, 71H
   \              0x6F 0x70    
   \              0x6E 0x6F    
   \              0x70 0x71    
   \       0x71   0x00               DC8 0
   \       0x72   0x00               DC8 ""
   \       0x73   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \       0x83   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \       0x93   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \       0xA3   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
    430          {
    431              { "abc" },
    432              { "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq" },
    433              { "" }
    434          };
    435          

   \                                 In section .rodata, align 4
    436          static const size_t sha256_test_buflen[3] =
   \                     sha256_test_buflen:
   \        0x0   0x0000'0003        DC32 3, 56, 1000
   \              0x0000'0038  
   \              0x0000'03E8  
    437          {
    438              3, 56, 1000
    439          };
    440          

   \                                 In section .rodata, align 4
    441          static const unsigned char sha256_test_sum[6][32] =
   \                     sha256_test_sum:
   \        0x0   0x23 0x09          DC8 35, 9, 125, 34, 52, 5, 216, 34, 134, 66, 164, 119, 189, 162, 85
   \              0x7D 0x22    
   \              0x34 0x05    
   \              0xD8 0x22    
   \              0x86 0x42    
   \              0xA4 0x77    
   \              0xBD 0xA2    
   \              0x55         
   \        0xF   0xB3 0x2A          DC8 179, 42, 173, 188, 228, 189, 160, 179, 247, 227, 108, 157, 167, 0
   \              0xAD 0xBC    
   \              0xE4 0xBD    
   \              0xA0 0xB3    
   \              0xF7 0xE3    
   \              0x6C 0x9D    
   \              0xA7 0x00    
   \       0x1D   0x00 0x00          DC8 0, 0, 0, 117, 56, 139, 22, 81, 39, 118, 204, 93, 186, 93, 161, 253
   \              0x00 0x75    
   \              0x38 0x8B    
   \              0x16 0x51    
   \              0x27 0x76    
   \              0xCC 0x5D    
   \              0xBA 0x5D    
   \              0xA1 0xFD    
   \       0x2D   0x89 0x01          DC8 137, 1, 80, 176, 198, 69, 92, 180, 245, 139, 25, 82, 82, 37, 37, 0
   \              0x50 0xB0    
   \              0xC6 0x45    
   \              0x5C 0xB4    
   \              0xF5 0x8B    
   \              0x19 0x52    
   \              0x52 0x25    
   \              0x25 0x00    
   \       0x3D   0x00 0x00          DC8 0, 0, 0, 32, 121, 70, 85, 152, 12, 145, 216, 187, 180, 193, 234
   \              0x00 0x20    
   \              0x79 0x46    
   \              0x55 0x98    
   \              0x0C 0x91    
   \              0xD8 0xBB    
   \              0xB4 0xC1    
   \              0xEA         
   \       0x4C   0x97 0x61          DC8 151, 97, 138, 75, 240, 63, 66, 88, 25, 72, 178, 238, 78, 231, 173
   \              0x8A 0x4B    
   \              0xF0 0x3F    
   \              0x42 0x58    
   \              0x19 0x48    
   \              0xB2 0xEE    
   \              0x4E 0xE7    
   \              0xAD         
   \       0x5B   0x67 0x00          DC8 103, 0, 0, 0, 0, 186, 120, 22, 191, 143, 1, 207, 234, 65, 65, 64
   \              0x00 0x00    
   \              0x00 0xBA    
   \              0x78 0x16    
   \              0xBF 0x8F    
   \              0x01 0xCF    
   \              0xEA 0x41    
   \              0x41 0x40    
   \       0x6B   0xDE 0x5D          DC8 222, 93, 174, 34, 35, 176, 3, 97, 163, 150, 23, 122, 156, 180, 16
   \              0xAE 0x22    
   \              0x23 0xB0    
   \              0x03 0x61    
   \              0xA3 0x96    
   \              0x17 0x7A    
   \              0x9C 0xB4    
   \              0x10         
   \       0x7A   0xFF 0x61          DC8 255, 97, 242, 0, 21, 173, 36, 141, 106, 97, 210, 6, 56, 184, 229
   \              0xF2 0x00    
   \              0x15 0xAD    
   \              0x24 0x8D    
   \              0x6A 0x61    
   \              0xD2 0x06    
   \              0x38 0xB8    
   \              0xE5         
   \       0x89   0xC0 0x26          DC8 192, 38, 147, 12, 62, 96, 57, 163, 60, 228, 89, 100, 255, 33, 103
   \              0x93 0x0C    
   \              0x3E 0x60    
   \              0x39 0xA3    
   \              0x3C 0xE4    
   \              0x59 0x64    
   \              0xFF 0x21    
   \              0x67         
   \       0x98   0xF6 0xEC          DC8 246, 236, 237, 212, 25, 219, 6, 193, 205, 199, 110, 92, 153, 20
   \              0xED 0xD4    
   \              0x19 0xDB    
   \              0x06 0xC1    
   \              0xCD 0xC7    
   \              0x6E 0x5C    
   \              0x99 0x14    
   \       0xA6   0xFB 0x92          DC8 251, 146, 129, 161, 199, 226, 132, 215, 62, 103, 241, 128, 154, 72
   \              0x81 0xA1    
   \              0xC7 0xE2    
   \              0x84 0xD7    
   \              0x3E 0x67    
   \              0xF1 0x80    
   \              0x9A 0x48    
   \       0xB4   0xA4 0x97          DC8 164, 151, 32, 14, 4, 109, 57, 204, 199, 17, 44, 208
   \              0x20 0x0E    
   \              0x04 0x6D    
   \              0x39 0xCC    
   \              0xC7 0x11    
   \              0x2C 0xD0    
    442          {
    443              /*
    444               * SHA-224 test vectors
    445               */
    446              { 0x23, 0x09, 0x7D, 0x22, 0x34, 0x05, 0xD8, 0x22,
    447                0x86, 0x42, 0xA4, 0x77, 0xBD, 0xA2, 0x55, 0xB3,
    448                0x2A, 0xAD, 0xBC, 0xE4, 0xBD, 0xA0, 0xB3, 0xF7,
    449                0xE3, 0x6C, 0x9D, 0xA7 },
    450              { 0x75, 0x38, 0x8B, 0x16, 0x51, 0x27, 0x76, 0xCC,
    451                0x5D, 0xBA, 0x5D, 0xA1, 0xFD, 0x89, 0x01, 0x50,
    452                0xB0, 0xC6, 0x45, 0x5C, 0xB4, 0xF5, 0x8B, 0x19,
    453                0x52, 0x52, 0x25, 0x25 },
    454              { 0x20, 0x79, 0x46, 0x55, 0x98, 0x0C, 0x91, 0xD8,
    455                0xBB, 0xB4, 0xC1, 0xEA, 0x97, 0x61, 0x8A, 0x4B,
    456                0xF0, 0x3F, 0x42, 0x58, 0x19, 0x48, 0xB2, 0xEE,
    457                0x4E, 0xE7, 0xAD, 0x67 },
    458          
    459              /*
    460               * SHA-256 test vectors
    461               */
    462              { 0xBA, 0x78, 0x16, 0xBF, 0x8F, 0x01, 0xCF, 0xEA,
    463                0x41, 0x41, 0x40, 0xDE, 0x5D, 0xAE, 0x22, 0x23,
    464                0xB0, 0x03, 0x61, 0xA3, 0x96, 0x17, 0x7A, 0x9C,
    465                0xB4, 0x10, 0xFF, 0x61, 0xF2, 0x00, 0x15, 0xAD },
    466              { 0x24, 0x8D, 0x6A, 0x61, 0xD2, 0x06, 0x38, 0xB8,
    467                0xE5, 0xC0, 0x26, 0x93, 0x0C, 0x3E, 0x60, 0x39,
    468                0xA3, 0x3C, 0xE4, 0x59, 0x64, 0xFF, 0x21, 0x67,
    469                0xF6, 0xEC, 0xED, 0xD4, 0x19, 0xDB, 0x06, 0xC1 },
    470              { 0xCD, 0xC7, 0x6E, 0x5C, 0x99, 0x14, 0xFB, 0x92,
    471                0x81, 0xA1, 0xC7, 0xE2, 0x84, 0xD7, 0x3E, 0x67,
    472                0xF1, 0x80, 0x9A, 0x48, 0xA4, 0x97, 0x20, 0x0E,
    473                0x04, 0x6D, 0x39, 0xCC, 0xC7, 0x11, 0x2C, 0xD0 }
    474          };
    475          
    476          /*
    477           * Checkup routine
    478           */

   \                                 In section .text, align 2, keep-with-next
    479          int mbedtls_sha256_self_test( int verbose )
    480          {
   \                     mbedtls_sha256_self_test: (+1)
   \        0x0   0xE92D 0x43F0      PUSH     {R4-R9,LR}
   \        0x4   0xB0A3             SUB      SP,SP,#+140
   \        0x6   0x4605             MOV      R5,R0
    481              int i, j, k, buflen, ret = 0;
   \        0x8   0x2400             MOVS     R4,#+0
    482              unsigned char *buf;
    483              unsigned char sha256sum[32];
    484              mbedtls_sha256_context ctx;
    485          
    486              buf = mbedtls_calloc( 1024, sizeof(unsigned char) );
   \        0xA   0x2101             MOVS     R1,#+1
   \        0xC   0xF44F 0x6080      MOV      R0,#+1024
   \       0x10   0x....'....        BL       mbedtls_calloc
   \       0x14   0x0006             MOVS     R6,R0
    487              if( NULL == buf )
   \       0x16   0xD106             BNE.N    ??mbedtls_sha256_self_test_0
    488              {
    489                  if( verbose != 0 )
   \       0x18   0x2D00             CMP      R5,#+0
   \       0x1A   0xD002             BEQ.N    ??mbedtls_sha256_self_test_1
    490                      mbedtls_printf( "Buffer allocation failed\n\r" );
   \       0x1C   0x....             LDR.N    R0,??DataTable3_11
   \       0x1E   0x....'....        BL       DbgConsole_Printf
    491          
    492                  return( 1 );
   \                     ??mbedtls_sha256_self_test_1: (+1)
   \       0x22   0x2001             MOVS     R0,#+1
   \       0x24   0xE071             B.N      ??mbedtls_sha256_self_test_2
    493              }
    494          
    495              mbedtls_sha256_init( &ctx );
   \                     ??mbedtls_sha256_self_test_0: (+1)
   \       0x26   0xA808             ADD      R0,SP,#+32
   \       0x28   0x....'....        BL       mbedtls_sha256_init
    496          
    497          #ifdef MBEDTLS_SHA256_ALT_NO_224 /* Skip SHA-224 tests, it would fail. */
    498              for( i = 3; i < 6; i++ )
    499          #else
    500              for( i = 0; i < 6; i++ )
   \       0x2C   0x46A0             MOV      R8,R4
   \       0x2E   0xE018             B.N      ??mbedtls_sha256_self_test_3
    501          #endif
    502              {
    503                  j = i % 3;
    504                  k = i < 3;
    505          
    506                  if( verbose != 0 )
    507                      mbedtls_printf( "  SHA-%d test #%d: ", 256 - k * 32, j + 1 );
    508          
    509                  if( ( ret = mbedtls_sha256_starts_ret( &ctx, k ) ) != 0 )
    510                      goto fail;
    511          
    512                  if( j == 2 )
    513                  {
    514                      memset( buf, 'a', buflen = 1000 );
    515          
    516                      for( j = 0; j < 1000; j++ )
    517                      {
    518                          ret = mbedtls_sha256_update_ret( &ctx, buf, buflen );
    519                          if( ret != 0 )
    520                              goto fail;
    521                      }
    522          
    523                  }
    524                  else
    525                  {
    526                      ret = mbedtls_sha256_update_ret( &ctx, sha256_test_buf[j],
    527                                                       sha256_test_buflen[j] );
    528                      if( ret != 0 )
    529                           goto fail;
    530                  }
    531          
    532                  if( ( ret = mbedtls_sha256_finish_ret( &ctx, sha256sum ) ) != 0 )
   \                     ??mbedtls_sha256_self_test_4: (+1)
   \       0x30   0x4669             MOV      R1,SP
   \       0x32   0xA808             ADD      R0,SP,#+32
   \       0x34   0x....'....        BL       mbedtls_sha256_finish_ret
   \       0x38   0x0004             MOVS     R4,R0
   \       0x3A   0xD15A             BNE.N    ??mbedtls_sha256_self_test_5
    533                      goto fail;
    534          
    535          
    536                  if( memcmp( sha256sum, sha256_test_sum[i], 32 - k * 4 ) != 0 )
   \       0x3C   0x00BF             LSLS     R7,R7,#+2
   \       0x3E   0xF1C7 0x0720      RSB      R7,R7,#+32
   \       0x42   0x463A             MOV      R2,R7
   \       0x44   0x....             LDR.N    R0,??DataTable3_12
   \       0x46   0xEB00 0x1148      ADD      R1,R0,R8, LSL #+5
   \       0x4A   0x4668             MOV      R0,SP
   \       0x4C   0x....'....        BL       memcmp
   \       0x50   0x2800             CMP      R0,#+0
   \       0x52   0xD14D             BNE.N    ??mbedtls_sha256_self_test_6
    537                  {
    538                      ret = 1;
    539                      goto fail;
    540                  }
    541          
    542                  if( verbose != 0 )
   \       0x54   0x2D00             CMP      R5,#+0
   \       0x56   0xD002             BEQ.N    ??mbedtls_sha256_self_test_7
    543                      mbedtls_printf( "passed\n\r" );
   \       0x58   0x....             LDR.N    R0,??DataTable3_13
   \       0x5A   0x....'....        BL       DbgConsole_Printf
   \                     ??mbedtls_sha256_self_test_7: (+1)
   \       0x5E   0xF108 0x0801      ADD      R8,R8,#+1
   \                     ??mbedtls_sha256_self_test_3: (+1)
   \       0x62   0xF1B8 0x0F06      CMP      R8,#+6
   \       0x66   0xDA53             BGE.N    ??mbedtls_sha256_self_test_8
   \       0x68   0x2003             MOVS     R0,#+3
   \       0x6A   0xFB98 0xF9F0      SDIV     R9,R8,R0
   \       0x6E   0xEB09 0x0949      ADD      R9,R9,R9, LSL #+1
   \       0x72   0xEBA8 0x0909      SUB      R9,R8,R9
   \       0x76   0xF1B8 0x0F03      CMP      R8,#+3
   \       0x7A   0xDA01             BGE.N    ??mbedtls_sha256_self_test_9
   \       0x7C   0x2701             MOVS     R7,#+1
   \       0x7E   0xE000             B.N      ??mbedtls_sha256_self_test_10
   \                     ??mbedtls_sha256_self_test_9: (+1)
   \       0x80   0x2700             MOVS     R7,#+0
   \                     ??mbedtls_sha256_self_test_10: (+1)
   \       0x82   0x2D00             CMP      R5,#+0
   \       0x84   0xD007             BEQ.N    ??mbedtls_sha256_self_test_11
   \       0x86   0xF109 0x0201      ADD      R2,R9,#+1
   \       0x8A   0x0179             LSLS     R1,R7,#+5
   \       0x8C   0xF5C1 0x7180      RSB      R1,R1,#+256
   \       0x90   0x....             LDR.N    R0,??DataTable3_14
   \       0x92   0x....'....        BL       DbgConsole_Printf
   \                     ??mbedtls_sha256_self_test_11: (+1)
   \       0x96   0x4639             MOV      R1,R7
   \       0x98   0xA808             ADD      R0,SP,#+32
   \       0x9A   0x....'....        BL       mbedtls_sha256_starts_ret
   \       0x9E   0x0004             MOVS     R4,R0
   \       0xA0   0xD127             BNE.N    ??mbedtls_sha256_self_test_5
   \       0xA2   0xF1B9 0x0F02      CMP      R9,#+2
   \       0xA6   0xD115             BNE.N    ??mbedtls_sha256_self_test_12
   \       0xA8   0x2261             MOVS     R2,#+97
   \       0xAA   0xF44F 0x717A      MOV      R1,#+1000
   \       0xAE   0x4630             MOV      R0,R6
   \       0xB0   0x....'....        BL       __aeabi_memset
   \       0xB4   0xF04F 0x0900      MOV      R9,#+0
   \                     ??mbedtls_sha256_self_test_13: (+1)
   \       0xB8   0xF5B9 0x7F7A      CMP      R9,#+1000
   \       0xBC   0xDAB8             BGE.N    ??mbedtls_sha256_self_test_4
   \       0xBE   0xF44F 0x727A      MOV      R2,#+1000
   \       0xC2   0x4631             MOV      R1,R6
   \       0xC4   0xA808             ADD      R0,SP,#+32
   \       0xC6   0x....'....        BL       mbedtls_sha256_update_ret
   \       0xCA   0x0004             MOVS     R4,R0
   \       0xCC   0xD111             BNE.N    ??mbedtls_sha256_self_test_5
   \       0xCE   0xF109 0x0901      ADD      R9,R9,#+1
   \       0xD2   0xE7F1             B.N      ??mbedtls_sha256_self_test_13
   \                     ??mbedtls_sha256_self_test_12: (+1)
   \       0xD4   0x....             LDR.N    R0,??DataTable3_15
   \       0xD6   0xF850 0x2029      LDR      R2,[R0, R9, LSL #+2]
   \       0xDA   0x....             LDR.N    R1,??DataTable3_16
   \       0xDC   0x2039             MOVS     R0,#+57
   \       0xDE   0xFB00 0xF909      MUL      R9,R0,R9
   \       0xE2   0x4449             ADD      R1,R1,R9
   \       0xE4   0xA808             ADD      R0,SP,#+32
   \       0xE6   0x....'....        BL       mbedtls_sha256_update_ret
   \       0xEA   0x0004             MOVS     R4,R0
   \       0xEC   0xD101             BNE.N    ??mbedtls_sha256_self_test_5
   \       0xEE   0xE79F             B.N      ??mbedtls_sha256_self_test_4
   \                     ??mbedtls_sha256_self_test_6: (+1)
   \       0xF0   0x2401             MOVS     R4,#+1
    544              }
    545          
    546              if( verbose != 0 )
    547                  mbedtls_printf( "\n\r" );
    548          
    549              goto exit;
    550          
    551          fail:
    552              if( verbose != 0 )
   \                     ??mbedtls_sha256_self_test_5: (+1)
   \       0xF2   0x2D00             CMP      R5,#+0
   \       0xF4   0xD002             BEQ.N    ??mbedtls_sha256_self_test_14
    553                  mbedtls_printf( "failed\n\r" );
   \       0xF6   0x....             LDR.N    R0,??DataTable3_17
   \       0xF8   0x....'....        BL       DbgConsole_Printf
    554          
    555          exit:
    556              mbedtls_sha256_free( &ctx );
   \                     ??mbedtls_sha256_self_test_14: (+1)
   \       0xFC   0xA808             ADD      R0,SP,#+32
   \       0xFE   0x....'....        BL       mbedtls_sha256_free
    557              mbedtls_free( buf );
   \      0x102   0x4630             MOV      R0,R6
   \      0x104   0x....'....        BL       mbedtls_free
    558          
    559              return( ret );
   \      0x108   0x4620             MOV      R0,R4
   \                     ??mbedtls_sha256_self_test_2: (+1)
   \      0x10A   0xB023             ADD      SP,SP,#+140
   \      0x10C   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
   \                     ??mbedtls_sha256_self_test_8: (+1)
   \      0x110   0x2D00             CMP      R5,#+0
   \      0x112   0xD0F3             BEQ.N    ??mbedtls_sha256_self_test_14
   \      0x114   0x....             ADR.N    R0,??DataTable3_10  ;; 0x0A, 0x0D, 0x00, 0x00
   \      0x116   0x....'....        BL       DbgConsole_Printf
   \      0x11A   0xE7EF             B.N      ??mbedtls_sha256_self_test_14
    560          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \        0x0   0x6A09'E667        DC32     0x6a09e667

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \        0x0   0xBB67'AE85        DC32     0xbb67ae85

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \        0x0   0x3C6E'F372        DC32     0x3c6ef372

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \        0x0   0xA54F'F53A        DC32     0xa54ff53a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \        0x0   0x510E'527F        DC32     0x510e527f

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \        0x0   0x9B05'688C        DC32     0x9b05688c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \        0x0   0x1F83'D9AB        DC32     0x1f83d9ab

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \        0x0   0x5BE0'CD19        DC32     0x5be0cd19

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \        0x0   0xC105'9ED8        DC32     0xc1059ed8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \        0x0   0x367C'D507        DC32     0x367cd507

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \        0x0   0x3070'DD17        DC32     0x3070dd17

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \        0x0   0xF70E'5939        DC32     0xf70e5939

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \        0x0   0xFFC0'0B31        DC32     0xffc00b31

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \        0x0   0x6858'1511        DC32     0x68581511

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \        0x0   0x64F9'8FA7        DC32     0x64f98fa7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \        0x0   0xBEFA'4FA4        DC32     0xbefa4fa4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_9:
   \        0x0   0x....'....        DC32     K

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_10:
   \        0x0   0x0A 0x0D          DC8      0x0A, 0x0D, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_11:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_12:
   \        0x0   0x....'....        DC32     sha256_test_sum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_13:
   \        0x0   0x....'....        DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_14:
   \        0x0   0x....'....        DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_15:
   \        0x0   0x....'....        DC32     sha256_test_buflen

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_16:
   \        0x0   0x....'....        DC32     sha256_test_buf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_17:
   \        0x0   0x....'....        DC32     ?_4

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x42 0x75          DC8 "Buffer allocation failed\012\015"
   \              0x66 0x66    
   \              0x65 0x72    
   \              0x20 0x61    
   \              0x6C 0x6C    
   \              0x6F 0x63    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x66 0x61    
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x0A 0x0D    
   \              0x00         
   \       0x1B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_1:
   \        0x0   0x20 0x20          DC8 "  SHA-%d test #%d: "
   \              0x53 0x48    
   \              0x41 0x2D    
   \              0x25 0x64    
   \              0x20 0x74    
   \              0x65 0x73    
   \              0x74 0x20    
   \              0x23 0x25    
   \              0x64 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_2:
   \        0x0   0x70 0x61          DC8 "passed\012\015"
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x0A 0x0D    
   \              0x00         
   \        0x9   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \        0x0   0x0A 0x0D          DC8 "\012\015"
   \              0x00         
   \        0x3   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_4:
   \        0x0   0x66 0x61          DC8 "failed\012\015"
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x0A 0x0D    
   \              0x00         
   \        0x9   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    561          
    562          #endif /* MBEDTLS_SELF_TEST */
    563          
    564          #endif /* MBEDTLS_SHA256_C */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
     312   mbedtls_internal_sha256_process
       0   mbedtls_sha256
         0   -> mbedtls_sha256_ret
       0   mbedtls_sha256_clone
         0   -> __aeabi_memcpy4
       0   mbedtls_sha256_finish
         0   -> mbedtls_sha256_finish_ret
      16   mbedtls_sha256_finish_ret
        16   -> __aeabi_memset
        16   -> __aeabi_memset4
        16   -> mbedtls_internal_sha256_process
       0   mbedtls_sha256_free
         0   -> mbedtls_platform_zeroize
       0   mbedtls_sha256_init
         0   -> __aeabi_memset4
       0   mbedtls_sha256_process
         0   -> mbedtls_internal_sha256_process
     128   mbedtls_sha256_ret
       128   -> mbedtls_sha256_finish_ret
       128   -> mbedtls_sha256_free
       128   -> mbedtls_sha256_init
       128   -> mbedtls_sha256_starts_ret
       128   -> mbedtls_sha256_update_ret
     168   mbedtls_sha256_self_test
       168   -> DbgConsole_Printf
       168   -> __aeabi_memset
       168   -> mbedtls_calloc
       168   -> mbedtls_free
       168   -> mbedtls_sha256_finish_ret
       168   -> mbedtls_sha256_free
       168   -> mbedtls_sha256_init
       168   -> mbedtls_sha256_starts_ret
       168   -> mbedtls_sha256_update_ret
       168   -> memcmp
       0   mbedtls_sha256_starts
         0   -> mbedtls_sha256_starts_ret
       0   mbedtls_sha256_starts_ret
       0   mbedtls_sha256_update
         0   -> mbedtls_sha256_update_ret
      24   mbedtls_sha256_update_ret
        24   -> __aeabi_memcpy
        24   -> mbedtls_internal_sha256_process


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_10
       4  ??DataTable3_11
       4  ??DataTable3_12
       4  ??DataTable3_13
       4  ??DataTable3_14
       4  ??DataTable3_15
       4  ??DataTable3_16
       4  ??DataTable3_17
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
      28  ?_0
      20  ?_1
      12  ?_2
       4  ?_3
      12  ?_4
     256  K
    2718  mbedtls_internal_sha256_process
       2  mbedtls_sha256
       6  mbedtls_sha256_clone
       2  mbedtls_sha256_finish
     352  mbedtls_sha256_finish_ret
      12  mbedtls_sha256_free
       8  mbedtls_sha256_init
       4  mbedtls_sha256_process
      66  mbedtls_sha256_ret
     284  mbedtls_sha256_self_test
       2  mbedtls_sha256_starts
     114  mbedtls_sha256_starts_ret
       2  mbedtls_sha256_update
     140  mbedtls_sha256_update_ret
     172  sha256_test_buf
      12  sha256_test_buflen
     192  sha256_test_sum

 
   708 bytes in section .rodata
 3 812 bytes in section .text
 
 3 812 bytes of CODE  memory
   708 bytes of CONST memory

Errors: none
Warnings: none
