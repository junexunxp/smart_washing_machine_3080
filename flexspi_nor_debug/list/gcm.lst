###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.3.193/W32 for ARM         10/Jun/2019  13:48:25
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\Development\smart_washing_machine_3080\mbedtls\library\gcm.c
#    Command line =  
#        -f C:\Users\nxf42695\AppData\Local\Temp\1\EWEF2D.tmp
#        (C:\Development\smart_washing_machine_3080\mbedtls\library\gcm.c -D
#        DEBUG -D USE_RTOS -D XIP_EXTERNAL_FLASH=1 -D XIP_BOOT_HEADER_ENABLE=1
#        -D CPU_MIMXRT1052DVL6B -D FSL_RTOS_FREE_RTOS -D PRINTF_ADVANCED_ENABLE
#        -D "MBEDTLS_CONFIG_FILE=\"ksdk_mbedtls_config.h\"" -lC
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list -lA
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list
#        --diag_suppress Pa082,Pa050 -o
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_d16 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" --preinclude
#        C:\Development\smart_washing_machine_3080/source\app_preinclude.h -I
#        C:\Development\smart_washing_machine_3080/board\ -I
#        C:\Development\smart_washing_machine_3080/source\ -I
#        C:\Development\smart_washing_machine_3080/CMSIS\ -I
#        C:\Development\smart_washing_machine_3080/amazon-freertos/freertos/portable\
#        -I C:\Development\smart_washing_machine_3080/amazon-freertos/include\
#        -I C:\Development\smart_washing_machine_3080/component/lists\ -I
#        C:\Development\smart_washing_machine_3080/component/serial_manager\ -I
#        C:\Development\smart_washing_machine_3080/component/uart\ -I
#        C:\Development\smart_washing_machine_3080/component/kv\ -I
#        C:\Development\smart_washing_machine_3080/component/kv/include\ -I
#        C:\Development\smart_washing_machine_3080/device\ -I
#        C:\Development\smart_washing_machine_3080/doc\ -I
#        C:\Development\smart_washing_machine_3080/drivers\ -I
#        C:\Development\smart_washing_machine_3080/src\ -I
#        C:\Development\smart_washing_machine_3080/startup\ -I
#        C:\Development\smart_washing_machine_3080/utilities\ -I
#        C:\Development\smart_washing_machine_3080/xip\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\atm\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_model\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_sign\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\infra\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\mqtt\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\external_libs\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\coap_cloud\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\CoAPPacket\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\server\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\os\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\awss_reset\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\mbedtls\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\ -I
#        C:\Development\smart_washing_machine_3080\mbedtls\port\ksdk\ -Om)
#    Locale       =  C
#    List file    =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list\gcm.lst
#    Object file  =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj\gcm.o
#
###############################################################################

C:\Development\smart_washing_machine_3080\mbedtls\library\gcm.c
      1          /*
      2           *  NIST SP800-38D compliant GCM implementation
      3           *
      4           *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
      5           *  SPDX-License-Identifier: Apache-2.0
      6           *
      7           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
      8           *  not use this file except in compliance with the License.
      9           *  You may obtain a copy of the License at
     10           *
     11           *  http://www.apache.org/licenses/LICENSE-2.0
     12           *
     13           *  Unless required by applicable law or agreed to in writing, software
     14           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     15           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     16           *  See the License for the specific language governing permissions and
     17           *  limitations under the License.
     18           *
     19           *  This file is part of mbed TLS (https://tls.mbed.org)
     20           */
     21          
     22          /*
     23           * http://csrc.nist.gov/publications/nistpubs/800-38D/SP-800-38D.pdf
     24           *
     25           * See also:
     26           * [MGV] http://csrc.nist.gov/groups/ST/toolkit/BCM/documents/proposedmodes/gcm/gcm-revised-spec.pdf
     27           *
     28           * We use the algorithm described as Shoup's method with 4-bit tables in
     29           * [MGV] 4.1, pp. 12-13, to enhance speed without using too much memory.
     30           */
     31          
     32          #if !defined(MBEDTLS_CONFIG_FILE)
     33          #include "mbedtls/config.h"
     34          #else
     35          #include MBEDTLS_CONFIG_FILE
     36          #endif
     37          
     38          #if defined(MBEDTLS_GCM_C)
     39          
     40          #include "mbedtls/gcm.h"
     41          #include "mbedtls/platform_util.h"
     42          
     43          #include <string.h>
     44          
     45          #if defined(MBEDTLS_AESNI_C)
     46          #include "mbedtls/aesni.h"
     47          #endif
     48          
     49          #if defined(MBEDTLS_SELF_TEST) && defined(MBEDTLS_AES_C)
     50          #include "mbedtls/aes.h"
     51          #if defined(MBEDTLS_PLATFORM_C)
     52          #include "mbedtls/platform.h"
     53          #else
     54          #include <stdio.h>
     55          #define mbedtls_printf printf
     56          #endif /* MBEDTLS_PLATFORM_C */
     57          #endif /* MBEDTLS_SELF_TEST && MBEDTLS_AES_C */
     58          
     59          #if !defined(MBEDTLS_GCM_ALT)
     60          
     61          /*
     62           * 32-bit integer manipulation macros (big endian)
     63           */
     64          #ifndef GET_UINT32_BE
     65          #define GET_UINT32_BE(n,b,i)                            \
     66          {                                                       \
     67              (n) = ( (uint32_t) (b)[(i)    ] << 24 )             \
     68                  | ( (uint32_t) (b)[(i) + 1] << 16 )             \
     69                  | ( (uint32_t) (b)[(i) + 2] <<  8 )             \
     70                  | ( (uint32_t) (b)[(i) + 3]       );            \
     71          }
     72          #endif
     73          
     74          #ifndef PUT_UINT32_BE
     75          #define PUT_UINT32_BE(n,b,i)                            \
     76          {                                                       \
     77              (b)[(i)    ] = (unsigned char) ( (n) >> 24 );       \
     78              (b)[(i) + 1] = (unsigned char) ( (n) >> 16 );       \
     79              (b)[(i) + 2] = (unsigned char) ( (n) >>  8 );       \
     80              (b)[(i) + 3] = (unsigned char) ( (n)       );       \
     81          }
     82          #endif
     83          
     84          /*
     85           * Initialize a context
     86           */

   \                                 In section .text, align 2, keep-with-next
     87          void mbedtls_gcm_init( mbedtls_gcm_context *ctx )
     88          {
     89              memset( ctx, 0, sizeof( mbedtls_gcm_context ) );
   \                     mbedtls_gcm_init: (+1)
   \        0x0   0x2200             MOVS     R2,#+0
   \        0x2   0xF44F 0x71C4      MOV      R1,#+392
   \        0x6   0x....'....        B.W      __aeabi_memset4
     90          }
     91          
     92          /*
     93           * Precompute small multiples of H, that is set
     94           *      HH[i] || HL[i] = H times i,
     95           * where i is seen as a field element as in [MGV], ie high-order bits
     96           * correspond to low powers of P. The result is stored in the same way, that
     97           * is the high-order bit of HH corresponds to P^0 and the low-order bit of HL
     98           * corresponds to P^127.
     99           */

   \                                 In section .text, align 2, keep-with-next
    100          static int gcm_gen_table( mbedtls_gcm_context *ctx )
    101          {
   \                     gcm_gen_table: (+1)
   \        0x0   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \        0x4   0xB086             SUB      SP,SP,#+24
   \        0x6   0x4604             MOV      R4,R0
    102              int ret, i, j;
    103              uint64_t hi, lo;
    104              uint64_t vl, vh;
    105              unsigned char h[16];
    106              size_t olen = 0;
   \        0x8   0x2000             MOVS     R0,#+0
   \        0xA   0x9001             STR      R0,[SP, #+4]
    107          
    108              memset( h, 0, 16 );
   \        0xC   0x4602             MOV      R2,R0
   \        0xE   0x2110             MOVS     R1,#+16
   \       0x10   0xA802             ADD      R0,SP,#+8
   \       0x12   0x....'....        BL       __aeabi_memset4
    109              if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, h, 16, h, &olen ) ) != 0 )
   \       0x16   0xA801             ADD      R0,SP,#+4
   \       0x18   0x9000             STR      R0,[SP, #+0]
   \       0x1A   0xAB02             ADD      R3,SP,#+8
   \       0x1C   0x2210             MOVS     R2,#+16
   \       0x1E   0xA902             ADD      R1,SP,#+8
   \       0x20   0x4620             MOV      R0,R4
   \       0x22   0x....'....        BL       mbedtls_cipher_update
   \       0x26   0x2800             CMP      R0,#+0
   \       0x28   0xF040 0x8086      BNE.W    ??gcm_gen_table_0
    110                  return( ret );
    111          
    112              /* pack h as two 64-bits ints, big-endian */
    113              GET_UINT32_BE( hi, h,  0  );
    114              GET_UINT32_BE( lo, h,  4  );
    115              vh = (uint64_t) hi << 32 | lo;
   \       0x2C   0xA902             ADD      R1,SP,#+8
   \       0x2E   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \       0x32   0x784F             LDRB     R7,[R1, #+1]
   \       0x34   0x043F             LSLS     R7,R7,#+16
   \       0x36   0xEA47 0x6700      ORR      R7,R7,R0, LSL #+24
   \       0x3A   0x7888             LDRB     R0,[R1, #+2]
   \       0x3C   0xEA47 0x2700      ORR      R7,R7,R0, LSL #+8
   \       0x40   0x78C8             LDRB     R0,[R1, #+3]
   \       0x42   0x4307             ORRS     R7,R0,R7
   \       0x44   0x7908             LDRB     R0,[R1, #+4]
   \       0x46   0xF89D 0x600D      LDRB     R6,[SP, #+13]
   \       0x4A   0x0436             LSLS     R6,R6,#+16
   \       0x4C   0xEA46 0x6600      ORR      R6,R6,R0, LSL #+24
   \       0x50   0xF89D 0x000E      LDRB     R0,[SP, #+14]
   \       0x54   0xEA46 0x2600      ORR      R6,R6,R0, LSL #+8
   \       0x58   0xF89D 0x000F      LDRB     R0,[SP, #+15]
   \       0x5C   0x4306             ORRS     R6,R0,R6
    116          
    117              GET_UINT32_BE( hi, h,  8  );
    118              GET_UINT32_BE( lo, h,  12 );
    119              vl = (uint64_t) hi << 32 | lo;
   \       0x5E   0x7A08             LDRB     R0,[R1, #+8]
   \       0x60   0x7A4B             LDRB     R3,[R1, #+9]
   \       0x62   0x041B             LSLS     R3,R3,#+16
   \       0x64   0xEA43 0x6300      ORR      R3,R3,R0, LSL #+24
   \       0x68   0xF89D 0x0012      LDRB     R0,[SP, #+18]
   \       0x6C   0xEA43 0x2300      ORR      R3,R3,R0, LSL #+8
   \       0x70   0xF89D 0x0013      LDRB     R0,[SP, #+19]
   \       0x74   0x4303             ORRS     R3,R0,R3
   \       0x76   0xF89D 0x0014      LDRB     R0,[SP, #+20]
   \       0x7A   0xF89D 0x2015      LDRB     R2,[SP, #+21]
   \       0x7E   0x0412             LSLS     R2,R2,#+16
   \       0x80   0xEA42 0x6200      ORR      R2,R2,R0, LSL #+24
   \       0x84   0xF89D 0x0016      LDRB     R0,[SP, #+22]
   \       0x88   0xEA42 0x2200      ORR      R2,R2,R0, LSL #+8
   \       0x8C   0xF89D 0x0017      LDRB     R0,[SP, #+23]
   \       0x90   0x4302             ORRS     R2,R0,R2
    120          
    121              /* 8 = 1000 corresponds to 1 in GF(2^128) */
    122              ctx->HL[8] = vl;
   \       0x92   0xE9C4 0x2320      STRD     R2,R3,[R4, #+128]
    123              ctx->HH[8] = vh;
   \       0x96   0xE9C4 0x6740      STRD     R6,R7,[R4, #+256]
    124          
    125          #if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    126              /* With CLMUL support, we need only h, not the rest of the table */
    127              if( mbedtls_aesni_has_support( MBEDTLS_AESNI_CLMUL ) )
    128                  return( 0 );
    129          #endif
    130          
    131              /* 0 corresponds to 0 in GF(2^128) */
    132              ctx->HH[0] = 0;
   \       0x9A   0x2000             MOVS     R0,#+0
   \       0x9C   0x4601             MOV      R1,R0
   \       0x9E   0xE9C4 0x0130      STRD     R0,R1,[R4, #+192]
    133              ctx->HL[0] = 0;
   \       0xA2   0xE9C4 0x0110      STRD     R0,R1,[R4, #+64]
    134          
    135              for( i = 4; i > 0; i >>= 1 )
   \       0xA6   0x2504             MOVS     R5,#+4
   \       0xA8   0xE017             B.N      ??gcm_gen_table_1
    136              {
    137                  uint32_t T = ( vl & 1 ) * 0xe1000000U;
   \                     ??gcm_gen_table_2: (+1)
   \       0xAA   0x4610             MOV      R0,R2
   \       0xAC   0xF000 0x0001      AND      R0,R0,#0x1
   \       0xB0   0xEBA0 0x1140      SUB      R1,R0,R0, LSL #+5
   \       0xB4   0x0608             LSLS     R0,R1,#+24
    138                  vl  = ( vh << 63 ) | ( vl >> 1 );
   \       0xB6   0x46B0             MOV      R8,R6
   \       0xB8   0x085B             LSRS     R3,R3,#+1
   \       0xBA   0xEA4F 0x0232      RRX      R2,R2
   \       0xBE   0xEA43 0x73C8      ORR      R3,R3,R8, LSL #+31
    139                  vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
   \       0xC2   0x087F             LSRS     R7,R7,#+1
   \       0xC4   0xEA4F 0x0636      RRX      R6,R6
   \       0xC8   0x4601             MOV      R1,R0
   \       0xCA   0x404F             EORS     R7,R7,R1
    140          
    141                  ctx->HL[i] = vl;
   \       0xCC   0xEB04 0x00C5      ADD      R0,R4,R5, LSL #+3
   \       0xD0   0xE9C0 0x2310      STRD     R2,R3,[R0, #+64]
    142                  ctx->HH[i] = vh;
   \       0xD4   0xE9C0 0x6730      STRD     R6,R7,[R0, #+192]
    143              }
   \       0xD8   0x106D             ASRS     R5,R5,#+1
   \                     ??gcm_gen_table_1: (+1)
   \       0xDA   0x2D01             CMP      R5,#+1
   \       0xDC   0xDAE5             BGE.N    ??gcm_gen_table_2
    144          
    145              for( i = 2; i <= 8; i *= 2 )
   \       0xDE   0x2502             MOVS     R5,#+2
   \       0xE0   0xE01B             B.N      ??gcm_gen_table_3
    146              {
    147                  uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
    148                  vh = *HiH;
    149                  vl = *HiL;
    150                  for( j = 1; j < i; j++ )
    151                  {
    152                      HiH[j] = vh ^ ctx->HH[j];
   \                     ??gcm_gen_table_4: (+1)
   \       0xE2   0xEB04 0x0EC6      ADD      LR,R4,R6, LSL #+3
   \       0xE6   0xE9DE 0x8930      LDRD     R8,R9,[LR, #+192]
   \       0xEA   0xEA80 0x0808      EOR      R8,R0,R8
   \       0xEE   0xEA81 0x0909      EOR      R9,R1,R9
   \       0xF2   0xEB0C 0x0EC6      ADD      LR,R12,R6, LSL #+3
   \       0xF6   0xE9CE 0x8900      STRD     R8,R9,[LR, #+0]
    153                      HiL[j] = vl ^ ctx->HL[j];
   \       0xFA   0xEB04 0x0EC6      ADD      LR,R4,R6, LSL #+3
   \       0xFE   0xE9DE 0x8910      LDRD     R8,R9,[LR, #+64]
   \      0x102   0xEA82 0x0808      EOR      R8,R2,R8
   \      0x106   0xEA83 0x0909      EOR      R9,R3,R9
   \      0x10A   0xEB07 0x0EC6      ADD      LR,R7,R6, LSL #+3
   \      0x10E   0xE9CE 0x8900      STRD     R8,R9,[LR, #+0]
    154                  }
   \      0x112   0x1C76             ADDS     R6,R6,#+1
   \                     ??gcm_gen_table_5: (+1)
   \      0x114   0x42AE             CMP      R6,R5
   \      0x116   0xDBE4             BLT.N    ??gcm_gen_table_4
   \      0x118   0x006D             LSLS     R5,R5,#+1
   \                     ??gcm_gen_table_3: (+1)
   \      0x11A   0x2D09             CMP      R5,#+9
   \      0x11C   0xDA0B             BGE.N    ??gcm_gen_table_6
   \      0x11E   0xEB04 0x00C5      ADD      R0,R4,R5, LSL #+3
   \      0x122   0xF100 0x0740      ADD      R7,R0,#+64
   \      0x126   0xF100 0x0CC0      ADD      R12,R0,#+192
   \      0x12A   0xE9DC 0x0100      LDRD     R0,R1,[R12, #+0]
   \      0x12E   0xE9D7 0x2300      LDRD     R2,R3,[R7, #+0]
   \      0x132   0x2601             MOVS     R6,#+1
   \      0x134   0xE7EE             B.N      ??gcm_gen_table_5
    155              }
    156          
    157              return( 0 );
   \                     ??gcm_gen_table_6: (+1)
   \      0x136   0x2000             MOVS     R0,#+0
   \                     ??gcm_gen_table_0: (+1)
   \      0x138   0xB007             ADD      SP,SP,#+28
   \      0x13A   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
    158          }
    159          

   \                                 In section .text, align 2, keep-with-next
    160          int mbedtls_gcm_setkey( mbedtls_gcm_context *ctx,
    161                                  mbedtls_cipher_id_t cipher,
    162                                  const unsigned char *key,
    163                                  unsigned int keybits )
    164          {
   \                     mbedtls_gcm_setkey: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x4605             MOV      R5,R0
   \        0x4   0x4608             MOV      R0,R1
   \        0x6   0x4616             MOV      R6,R2
   \        0x8   0x461F             MOV      R7,R3
    165              int ret;
    166              const mbedtls_cipher_info_t *cipher_info;
    167          
    168              cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
   \        0xA   0x2201             MOVS     R2,#+1
   \        0xC   0x4639             MOV      R1,R7
   \        0xE   0x....'....        BL       mbedtls_cipher_info_from_values
   \       0x12   0x0004             MOVS     R4,R0
    169              if( cipher_info == NULL )
   \       0x14   0xD002             BEQ.N    ??mbedtls_gcm_setkey_0
    170                  return( MBEDTLS_ERR_GCM_BAD_INPUT );
    171          
    172              if( cipher_info->block_size != 16 )
   \       0x16   0x6960             LDR      R0,[R4, #+20]
   \       0x18   0x2810             CMP      R0,#+16
   \       0x1A   0xD002             BEQ.N    ??mbedtls_gcm_setkey_1
    173                  return( MBEDTLS_ERR_GCM_BAD_INPUT );
   \                     ??mbedtls_gcm_setkey_0: (+1)
   \       0x1C   0xF06F 0x0013      MVN      R0,#+19
   \       0x20   0xBDF2             POP      {R1,R4-R7,PC}
    174          
    175              mbedtls_cipher_free( &ctx->cipher_ctx );
   \                     ??mbedtls_gcm_setkey_1: (+1)
   \       0x22   0x4628             MOV      R0,R5
   \       0x24   0x....'....        BL       mbedtls_cipher_free
    176          
    177              if( ( ret = mbedtls_cipher_setup( &ctx->cipher_ctx, cipher_info ) ) != 0 )
   \       0x28   0x4621             MOV      R1,R4
   \       0x2A   0x4628             MOV      R0,R5
   \       0x2C   0x....'....        BL       mbedtls_cipher_setup
   \       0x30   0x2800             CMP      R0,#+0
   \       0x32   0xD10D             BNE.N    ??mbedtls_gcm_setkey_2
    178                  return( ret );
    179          
    180              if( ( ret = mbedtls_cipher_setkey( &ctx->cipher_ctx, key, keybits,
    181                                         MBEDTLS_ENCRYPT ) ) != 0 )
   \       0x34   0x2301             MOVS     R3,#+1
   \       0x36   0x463A             MOV      R2,R7
   \       0x38   0x4631             MOV      R1,R6
   \       0x3A   0x4628             MOV      R0,R5
   \       0x3C   0x....'....        BL       mbedtls_cipher_setkey
   \       0x40   0x2800             CMP      R0,#+0
   \       0x42   0xD105             BNE.N    ??mbedtls_gcm_setkey_2
    182              {
    183                  return( ret );
    184              }
    185          
    186              if( ( ret = gcm_gen_table( ctx ) ) != 0 )
   \       0x44   0x4628             MOV      R0,R5
   \       0x46   0x....'....        BL       gcm_gen_table
   \       0x4A   0x2800             CMP      R0,#+0
   \       0x4C   0xD100             BNE.N    ??mbedtls_gcm_setkey_2
    187                  return( ret );
    188          
    189              return( 0 );
   \       0x4E   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_gcm_setkey_2: (+1)
   \       0x50   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    190          }
    191          
    192          /*
    193           * Shoup's method for multiplication use this table with
    194           *      last4[x] = x times P^128
    195           * where x and last4[x] are seen as elements of GF(2^128) as in [MGV]
    196           */

   \                                 In section .rodata, align 8
    197          static const uint64_t last4[16] =
   \                     last4:
   \        0x0   0x0000'0000'0      DC64 0, 7200, 14400, 9312, 28800, 27808, 18624, 21728, 57600, 64800
   \              000'0000 0x00
   \              00'0000'0000'
   \              1C20 0x0000'0
   \              000'0000'3840
   \               0x0000'0000'
   \              0000'2460 0x0
   \              000'0000'0000
   \              '7080 0x0000'
   \              0000'0000'6CA
   \              0 0x0000'0000
   \              '0000'48C0 0x
   \              0000'0000'000
   \              0'54E0 0x0000
   \              '0000'0000'E1
   \              00 0x0000'000
   \              0'0000'FD20  
   \       0x50   0x0000'0000'0      DC64 55616, 50528, 37248, 36256, 43456, 46560
   \              000'D940 0x00
   \              00'0000'0000'
   \              C560 0x0000'0
   \              000'0000'9180
   \               0x0000'0000'
   \              0000'8DA0 0x0
   \              000'0000'0000
   \              'A9C0 0x0000'
   \              0000'0000'B5E
   \              0            
    198          {
    199              0x0000, 0x1c20, 0x3840, 0x2460,
    200              0x7080, 0x6ca0, 0x48c0, 0x54e0,
    201              0xe100, 0xfd20, 0xd940, 0xc560,
    202              0x9180, 0x8da0, 0xa9c0, 0xb5e0
    203          };
    204          
    205          /*
    206           * Sets output to x times H using the precomputed tables.
    207           * x and output are seen as elements of GF(2^128) as in [MGV].
    208           */

   \                                 In section .text, align 2, keep-with-next
    209          static void gcm_mult( mbedtls_gcm_context *ctx, const unsigned char x[16],
    210                                unsigned char output[16] )
    211          {
   \                     gcm_mult: (+1)
   \        0x0   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \        0x4   0x4691             MOV      R9,R2
    212              int i = 0;
    213              unsigned char lo, hi, rem;
    214              uint64_t zh, zl;
    215          
    216          #if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    217              if( mbedtls_aesni_has_support( MBEDTLS_AESNI_CLMUL ) ) {
    218                  unsigned char h[16];
    219          
    220                  PUT_UINT32_BE( ctx->HH[8] >> 32, h,  0 );
    221                  PUT_UINT32_BE( ctx->HH[8],       h,  4 );
    222                  PUT_UINT32_BE( ctx->HL[8] >> 32, h,  8 );
    223                  PUT_UINT32_BE( ctx->HL[8],       h, 12 );
    224          
    225                  mbedtls_aesni_gcm_mult( output, x, h );
    226                  return;
    227              }
    228          #endif /* MBEDTLS_AESNI_C && MBEDTLS_HAVE_X86_64 */
    229          
    230              lo = x[15] & 0xf;
   \        0x6   0x7BCC             LDRB     R4,[R1, #+15]
   \        0x8   0xF004 0x040F      AND      R4,R4,#0xF
    231          
    232              zh = ctx->HH[lo];
   \        0xC   0xEB00 0x02C4      ADD      R2,R0,R4, LSL #+3
   \       0x10   0xE9D2 0x2330      LDRD     R2,R3,[R2, #+192]
    233              zl = ctx->HL[lo];
   \       0x14   0xEB00 0x04C4      ADD      R4,R0,R4, LSL #+3
   \       0x18   0xE9D4 0x4510      LDRD     R4,R5,[R4, #+64]
    234          
    235              for( i = 15; i >= 0; i-- )
   \       0x1C   0x260F             MOVS     R6,#+15
   \       0x1E   0x4680             MOV      R8,R0
   \       0x20   0x468A             MOV      R10,R1
   \       0x22   0x4620             MOV      R0,R4
   \       0x24   0x4629             MOV      R1,R5
   \       0x26   0xE052             B.N      ??gcm_mult_0
    236              {
    237                  lo = x[i] & 0xf;
   \                     ??gcm_mult_1: (+1)
   \       0x28   0xF81A 0x7006      LDRB     R7,[R10, R6]
   \       0x2C   0xF007 0x070F      AND      R7,R7,#0xF
    238                  hi = x[i] >> 4;
   \       0x30   0xF81A 0xC006      LDRB     R12,[R10, R6]
   \       0x34   0xEA4F 0x1C1C      LSR      R12,R12,#+4
    239          
    240                  if( i != 15 )
   \       0x38   0x2E0F             CMP      R6,#+15
   \       0x3A   0xD023             BEQ.N    ??gcm_mult_2
    241                  {
    242                      rem = (unsigned char) zl & 0xf;
   \       0x3C   0x4686             MOV      LR,R0
   \       0x3E   0xF00E 0x0E0F      AND      LR,LR,#0xF
    243                      zl = ( zh << 60 ) | ( zl >> 4 );
   \       0x42   0x4614             MOV      R4,R2
   \       0x44   0x0725             LSLS     R5,R4,#+28
   \       0x46   0x2400             MOVS     R4,#+0
   \       0x48   0x0900             LSRS     R0,R0,#+4
   \       0x4A   0xEA40 0x7001      ORR      R0,R0,R1, LSL #+28
   \       0x4E   0x4304             ORRS     R4,R4,R0
   \       0x50   0xEA55 0x1511      ORRS     R5,R5,R1, LSR #+4
    244                      zh = ( zh >> 4 );
    245                      zh ^= (uint64_t) last4[rem] << 48;
    246                      zh ^= ctx->HH[lo];
   \       0x54   0x0912             LSRS     R2,R2,#+4
   \       0x56   0xEA42 0x7203      ORR      R2,R2,R3, LSL #+28
   \       0x5A   0x....'....        LDR.W    R0,??DataTable2_2
   \       0x5E   0xEB00 0x00CE      ADD      R0,R0,LR, LSL #+3
   \       0x62   0xE9D0 0x0100      LDRD     R0,R1,[R0, #+0]
   \       0x66   0x0401             LSLS     R1,R0,#+16
   \       0x68   0xEA91 0x1313      EORS     R3,R1,R3, LSR #+4
   \       0x6C   0xEB08 0x00C7      ADD      R0,R8,R7, LSL #+3
   \       0x70   0xE9D0 0x0130      LDRD     R0,R1,[R0, #+192]
   \       0x74   0x4042             EORS     R2,R2,R0
   \       0x76   0x404B             EORS     R3,R3,R1
    247                      zl ^= ctx->HL[lo];
   \       0x78   0xEB08 0x00C7      ADD      R0,R8,R7, LSL #+3
   \       0x7C   0xE9D0 0x0110      LDRD     R0,R1,[R0, #+64]
   \       0x80   0x4060             EORS     R0,R4,R0
   \       0x82   0x4069             EORS     R1,R5,R1
    248          
    249                  }
    250          
    251                  rem = (unsigned char) zl & 0xf;
   \                     ??gcm_mult_2: (+1)
   \       0x84   0x4607             MOV      R7,R0
   \       0x86   0xF007 0x070F      AND      R7,R7,#0xF
    252                  zl = ( zh << 60 ) | ( zl >> 4 );
   \       0x8A   0x4614             MOV      R4,R2
   \       0x8C   0x0900             LSRS     R0,R0,#+4
   \       0x8E   0xEA40 0x7001      ORR      R0,R0,R1, LSL #+28
   \       0x92   0x0909             LSRS     R1,R1,#+4
   \       0x94   0xEA51 0x7104      ORRS     R1,R1,R4, LSL #+28
    253                  zh = ( zh >> 4 );
    254                  zh ^= (uint64_t) last4[rem] << 48;
    255                  zh ^= ctx->HH[hi];
   \       0x98   0x0912             LSRS     R2,R2,#+4
   \       0x9A   0xEA42 0x7203      ORR      R2,R2,R3, LSL #+28
   \       0x9E   0x....'....        LDR.W    R4,??DataTable2_2
   \       0xA2   0xEB04 0x04C7      ADD      R4,R4,R7, LSL #+3
   \       0xA6   0xE9D4 0x4500      LDRD     R4,R5,[R4, #+0]
   \       0xAA   0x0425             LSLS     R5,R4,#+16
   \       0xAC   0x2400             MOVS     R4,#+0
   \       0xAE   0x4054             EORS     R4,R2,R4
   \       0xB0   0xEA95 0x1513      EORS     R5,R5,R3, LSR #+4
   \       0xB4   0xEB08 0x02CC      ADD      R2,R8,R12, LSL #+3
   \       0xB8   0xE9D2 0x2330      LDRD     R2,R3,[R2, #+192]
   \       0xBC   0x4062             EORS     R2,R4,R2
   \       0xBE   0x406B             EORS     R3,R5,R3
    256                  zl ^= ctx->HL[hi];
   \       0xC0   0xEB08 0x04CC      ADD      R4,R8,R12, LSL #+3
   \       0xC4   0xE9D4 0x4510      LDRD     R4,R5,[R4, #+64]
   \       0xC8   0x4060             EORS     R0,R0,R4
   \       0xCA   0x4069             EORS     R1,R1,R5
    257              }
   \       0xCC   0x1E76             SUBS     R6,R6,#+1
   \                     ??gcm_mult_0: (+1)
   \       0xCE   0x2E00             CMP      R6,#+0
   \       0xD0   0xD5AA             BPL.N    ??gcm_mult_1
   \       0xD2   0x4604             MOV      R4,R0
   \       0xD4   0x460D             MOV      R5,R1
    258          
    259              PUT_UINT32_BE( zh >> 32, output, 0 );
   \       0xD6   0x4619             MOV      R1,R3
   \       0xD8   0x0E08             LSRS     R0,R1,#+24
   \       0xDA   0xF889 0x0000      STRB     R0,[R9, #+0]
   \       0xDE   0x0C08             LSRS     R0,R1,#+16
   \       0xE0   0xF889 0x0001      STRB     R0,[R9, #+1]
   \       0xE4   0x0A08             LSRS     R0,R1,#+8
   \       0xE6   0xF889 0x0002      STRB     R0,[R9, #+2]
   \       0xEA   0xF889 0x3003      STRB     R3,[R9, #+3]
    260              PUT_UINT32_BE( zh, output, 4 );
   \       0xEE   0x4610             MOV      R0,R2
   \       0xF0   0x0E00             LSRS     R0,R0,#+24
   \       0xF2   0xF889 0x0004      STRB     R0,[R9, #+4]
   \       0xF6   0x4610             MOV      R0,R2
   \       0xF8   0x0C00             LSRS     R0,R0,#+16
   \       0xFA   0xF889 0x0005      STRB     R0,[R9, #+5]
   \       0xFE   0x4610             MOV      R0,R2
   \      0x100   0xB280             UXTH     R0,R0
   \      0x102   0x0A00             LSRS     R0,R0,#+8
   \      0x104   0xF889 0x0006      STRB     R0,[R9, #+6]
   \      0x108   0xF889 0x2007      STRB     R2,[R9, #+7]
    261              PUT_UINT32_BE( zl >> 32, output, 8 );
   \      0x10C   0x4629             MOV      R1,R5
   \      0x10E   0x0E08             LSRS     R0,R1,#+24
   \      0x110   0xF889 0x0008      STRB     R0,[R9, #+8]
   \      0x114   0x0C08             LSRS     R0,R1,#+16
   \      0x116   0xF889 0x0009      STRB     R0,[R9, #+9]
   \      0x11A   0x0A08             LSRS     R0,R1,#+8
   \      0x11C   0xF889 0x000A      STRB     R0,[R9, #+10]
   \      0x120   0xF889 0x500B      STRB     R5,[R9, #+11]
    262              PUT_UINT32_BE( zl, output, 12 );
   \      0x124   0x4620             MOV      R0,R4
   \      0x126   0x0E00             LSRS     R0,R0,#+24
   \      0x128   0xF889 0x000C      STRB     R0,[R9, #+12]
   \      0x12C   0x4620             MOV      R0,R4
   \      0x12E   0x0C00             LSRS     R0,R0,#+16
   \      0x130   0xF889 0x000D      STRB     R0,[R9, #+13]
   \      0x134   0x4620             MOV      R0,R4
   \      0x136   0xB280             UXTH     R0,R0
   \      0x138   0x0A00             LSRS     R0,R0,#+8
   \      0x13A   0xF889 0x000E      STRB     R0,[R9, #+14]
   \      0x13E   0xF889 0x400F      STRB     R4,[R9, #+15]
    263          }
   \      0x142   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    264          

   \                                 In section .text, align 2, keep-with-next
    265          int mbedtls_gcm_starts( mbedtls_gcm_context *ctx,
    266                          int mode,
    267                          const unsigned char *iv,
    268                          size_t iv_len,
    269                          const unsigned char *add,
    270                          size_t add_len )
    271          {
   \                     mbedtls_gcm_starts: (+1)
   \        0x0   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \        0x4   0xB086             SUB      SP,SP,#+24
   \        0x6   0x460F             MOV      R7,R1
   \        0x8   0x4616             MOV      R6,R2
   \        0xA   0x461C             MOV      R4,R3
    272              int ret;
    273              unsigned char work_buf[16];
    274              size_t i;
    275              const unsigned char *p;
    276              size_t use_len, olen = 0;
   \        0xC   0x2100             MOVS     R1,#+0
   \        0xE   0x9101             STR      R1,[SP, #+4]
    277          
    278              /* IV and AD are limited to 2^64 bits, so 2^61 bytes */
    279              /* IV is not allowed to be zero length */
    280              if( iv_len == 0 ||
    281                ( (uint64_t) iv_len  ) >> 61 != 0 ||
    282                ( (uint64_t) add_len ) >> 61 != 0 )
   \       0x10   0x2C00             CMP      R4,#+0
   \       0x12   0xD020             BEQ.N    ??mbedtls_gcm_starts_0
   \       0x14   0x4605             MOV      R5,R0
    283              {
    284                  return( MBEDTLS_ERR_GCM_BAD_INPUT );
    285              }
    286          
    287              memset( ctx->y, 0x00, sizeof(ctx->y) );
   \       0x16   0x460A             MOV      R2,R1
   \       0x18   0x2110             MOVS     R1,#+16
   \       0x1A   0xF505 0x70B0      ADD      R0,R5,#+352
   \       0x1E   0x....'....        BL       __aeabi_memset4
    288              memset( ctx->buf, 0x00, sizeof(ctx->buf) );
   \       0x22   0x2200             MOVS     R2,#+0
   \       0x24   0x2110             MOVS     R1,#+16
   \       0x26   0xF505 0x70B8      ADD      R0,R5,#+368
   \       0x2A   0x....'....        BL       __aeabi_memset4
    289          
    290              ctx->mode = mode;
   \       0x2E   0xF8C5 0x7180      STR      R7,[R5, #+384]
    291              ctx->len = 0;
   \       0x32   0x2000             MOVS     R0,#+0
   \       0x34   0x4601             MOV      R1,R0
   \       0x36   0xE9C5 0x0150      STRD     R0,R1,[R5, #+320]
    292              ctx->add_len = 0;
   \       0x3A   0xE9C5 0x0152      STRD     R0,R1,[R5, #+328]
    293          
    294              if( iv_len == 12 )
   \       0x3E   0x2C0C             CMP      R4,#+12
   \       0x40   0xD10C             BNE.N    ??mbedtls_gcm_starts_1
    295              {
    296                  memcpy( ctx->y, iv, iv_len );
   \       0x42   0x220C             MOVS     R2,#+12
   \       0x44   0x4631             MOV      R1,R6
   \       0x46   0xF505 0x70B0      ADD      R0,R5,#+352
   \       0x4A   0x....'....        BL       __aeabi_memcpy
    297                  ctx->y[15] = 1;
   \       0x4E   0x2001             MOVS     R0,#+1
   \       0x50   0xF885 0x016F      STRB     R0,[R5, #+367]
   \       0x54   0xE048             B.N      ??mbedtls_gcm_starts_2
    298              }
   \                     ??mbedtls_gcm_starts_0: (+1)
   \       0x56   0xF06F 0x0013      MVN      R0,#+19
   \       0x5A   0xE075             B.N      ??mbedtls_gcm_starts_3
    299              else
    300              {
    301                  memset( work_buf, 0x00, 16 );
   \                     ??mbedtls_gcm_starts_1: (+1)
   \       0x5C   0x4602             MOV      R2,R0
   \       0x5E   0x2110             MOVS     R1,#+16
   \       0x60   0xA802             ADD      R0,SP,#+8
   \       0x62   0x....'....        BL       __aeabi_memset4
    302                  PUT_UINT32_BE( iv_len * 8, work_buf, 12 );
   \       0x66   0xAF02             ADD      R7,SP,#+8
   \       0x68   0x4620             MOV      R0,R4
   \       0x6A   0x0D40             LSRS     R0,R0,#+21
   \       0x6C   0x7338             STRB     R0,[R7, #+12]
   \       0x6E   0x4620             MOV      R0,R4
   \       0x70   0x0B40             LSRS     R0,R0,#+13
   \       0x72   0x7378             STRB     R0,[R7, #+13]
   \       0x74   0x4620             MOV      R0,R4
   \       0x76   0x0940             LSRS     R0,R0,#+5
   \       0x78   0xF88D 0x0016      STRB     R0,[SP, #+22]
   \       0x7C   0x00E0             LSLS     R0,R4,#+3
   \       0x7E   0xF88D 0x0017      STRB     R0,[SP, #+23]
    303          
    304                  p = iv;
   \       0x82   0x2C00             CMP      R4,#+0
   \       0x84   0xE014             B.N      ??mbedtls_gcm_starts_4
    305                  while( iv_len > 0 )
    306                  {
    307                      use_len = ( iv_len < 16 ) ? iv_len : 16;
    308          
    309                      for( i = 0; i < use_len; i++ )
    310                          ctx->y[i] ^= p[i];
   \                     ??mbedtls_gcm_starts_5: (+1)
   \       0x86   0x1829             ADDS     R1,R5,R0
   \       0x88   0xF891 0x1160      LDRB     R1,[R1, #+352]
   \       0x8C   0x5C32             LDRB     R2,[R6, R0]
   \       0x8E   0x4051             EORS     R1,R2,R1
   \       0x90   0x182A             ADDS     R2,R5,R0
   \       0x92   0xF882 0x1160      STRB     R1,[R2, #+352]
   \       0x96   0x1C40             ADDS     R0,R0,#+1
   \                     ??mbedtls_gcm_starts_6: (+1)
   \       0x98   0x4540             CMP      R0,R8
   \       0x9A   0xD3F4             BCC.N    ??mbedtls_gcm_starts_5
    311          
    312                      gcm_mult( ctx, ctx->y, ctx->y );
   \       0x9C   0xF505 0x72B0      ADD      R2,R5,#+352
   \       0xA0   0xF505 0x71B0      ADD      R1,R5,#+352
   \       0xA4   0x4628             MOV      R0,R5
   \       0xA6   0x....'....        BL       gcm_mult
    313          
    314                      iv_len -= use_len;
   \       0xAA   0xEBB4 0x0408      SUBS     R4,R4,R8
    315                      p += use_len;
   \       0xAE   0x4446             ADD      R6,R6,R8
   \                     ??mbedtls_gcm_starts_4: (+1)
   \       0xB0   0xD006             BEQ.N    ??mbedtls_gcm_starts_7
   \       0xB2   0xF04F 0x0810      MOV      R8,#+16
   \       0xB6   0x2C10             CMP      R4,#+16
   \       0xB8   0xD800             BHI.N    ??mbedtls_gcm_starts_8
   \       0xBA   0x46A0             MOV      R8,R4
   \                     ??mbedtls_gcm_starts_8: (+1)
   \       0xBC   0x2000             MOVS     R0,#+0
   \       0xBE   0xE7EB             B.N      ??mbedtls_gcm_starts_6
    316                  }
    317          
    318                  for( i = 0; i < 16; i++ )
   \                     ??mbedtls_gcm_starts_7: (+1)
   \       0xC0   0x2000             MOVS     R0,#+0
   \       0xC2   0xE008             B.N      ??mbedtls_gcm_starts_9
    319                      ctx->y[i] ^= work_buf[i];
   \                     ??mbedtls_gcm_starts_10: (+1)
   \       0xC4   0x1829             ADDS     R1,R5,R0
   \       0xC6   0xF891 0x1160      LDRB     R1,[R1, #+352]
   \       0xCA   0x5C3A             LDRB     R2,[R7, R0]
   \       0xCC   0x4051             EORS     R1,R2,R1
   \       0xCE   0x182A             ADDS     R2,R5,R0
   \       0xD0   0xF882 0x1160      STRB     R1,[R2, #+352]
   \       0xD4   0x1C40             ADDS     R0,R0,#+1
   \                     ??mbedtls_gcm_starts_9: (+1)
   \       0xD6   0x2810             CMP      R0,#+16
   \       0xD8   0xD3F4             BCC.N    ??mbedtls_gcm_starts_10
    320          
    321                  gcm_mult( ctx, ctx->y, ctx->y );
   \       0xDA   0xF505 0x72B0      ADD      R2,R5,#+352
   \       0xDE   0xF505 0x71B0      ADD      R1,R5,#+352
   \       0xE2   0x4628             MOV      R0,R5
   \       0xE4   0x....'....        BL       gcm_mult
    322              }
    323          
    324              if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ctx->base_ectr,
    325                                       &olen ) ) != 0 )
   \                     ??mbedtls_gcm_starts_2: (+1)
   \       0xE8   0xA801             ADD      R0,SP,#+4
   \       0xEA   0x9000             STR      R0,[SP, #+0]
   \       0xEC   0xF505 0x73A8      ADD      R3,R5,#+336
   \       0xF0   0x2210             MOVS     R2,#+16
   \       0xF2   0xF505 0x71B0      ADD      R1,R5,#+352
   \       0xF6   0x4628             MOV      R0,R5
   \       0xF8   0x....'....        BL       mbedtls_cipher_update
   \       0xFC   0x2800             CMP      R0,#+0
   \       0xFE   0xD123             BNE.N    ??mbedtls_gcm_starts_3
    326              {
    327                  return( ret );
   \      0x100   0x9C0D             LDR      R4,[SP, #+52]
   \      0x102   0x9E0C             LDR      R6,[SP, #+48]
    328              }
    329          
    330              ctx->add_len = add_len;
   \      0x104   0x4620             MOV      R0,R4
   \      0x106   0x2100             MOVS     R1,#+0
   \      0x108   0xE9C5 0x0152      STRD     R0,R1,[R5, #+328]
    331              p = add;
   \      0x10C   0x2C00             CMP      R4,#+0
   \      0x10E   0xE013             B.N      ??mbedtls_gcm_starts_11
    332              while( add_len > 0 )
    333              {
    334                  use_len = ( add_len < 16 ) ? add_len : 16;
    335          
    336                  for( i = 0; i < use_len; i++ )
    337                      ctx->buf[i] ^= p[i];
   \                     ??mbedtls_gcm_starts_12: (+1)
   \      0x110   0x1829             ADDS     R1,R5,R0
   \      0x112   0xF891 0x1170      LDRB     R1,[R1, #+368]
   \      0x116   0x5C32             LDRB     R2,[R6, R0]
   \      0x118   0x4051             EORS     R1,R2,R1
   \      0x11A   0x182A             ADDS     R2,R5,R0
   \      0x11C   0xF882 0x1170      STRB     R1,[R2, #+368]
   \      0x120   0x1C40             ADDS     R0,R0,#+1
   \                     ??mbedtls_gcm_starts_13: (+1)
   \      0x122   0x42B8             CMP      R0,R7
   \      0x124   0xD3F4             BCC.N    ??mbedtls_gcm_starts_12
    338          
    339                  gcm_mult( ctx, ctx->buf, ctx->buf );
   \      0x126   0xF505 0x72B8      ADD      R2,R5,#+368
   \      0x12A   0xF505 0x71B8      ADD      R1,R5,#+368
   \      0x12E   0x4628             MOV      R0,R5
   \      0x130   0x....'....        BL       gcm_mult
    340          
    341                  add_len -= use_len;
   \      0x134   0x1BE4             SUBS     R4,R4,R7
    342                  p += use_len;
   \      0x136   0x443E             ADD      R6,R6,R7
   \                     ??mbedtls_gcm_starts_11: (+1)
   \      0x138   0xD005             BEQ.N    ??mbedtls_gcm_starts_14
   \      0x13A   0x2710             MOVS     R7,#+16
   \      0x13C   0x2C10             CMP      R4,#+16
   \      0x13E   0xD800             BHI.N    ??mbedtls_gcm_starts_15
   \      0x140   0x4627             MOV      R7,R4
   \                     ??mbedtls_gcm_starts_15: (+1)
   \      0x142   0x2000             MOVS     R0,#+0
   \      0x144   0xE7ED             B.N      ??mbedtls_gcm_starts_13
    343              }
    344          
    345              return( 0 );
   \                     ??mbedtls_gcm_starts_14: (+1)
   \      0x146   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_gcm_starts_3: (+1)
   \      0x148   0xB006             ADD      SP,SP,#+24
   \      0x14A   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    346          }
    347          

   \                                 In section .text, align 2, keep-with-next
    348          int mbedtls_gcm_update( mbedtls_gcm_context *ctx,
    349                          size_t length,
    350                          const unsigned char *input,
    351                          unsigned char *output )
    352          {
   \                     mbedtls_gcm_update: (+1)
   \        0x0   0xE92D 0x4DF0      PUSH     {R4-R8,R10,R11,LR}
   \        0x4   0xB086             SUB      SP,SP,#+24
   \        0x6   0x460E             MOV      R6,R1
    353              int ret;
    354              unsigned char ectr[16];
    355              size_t i;
    356              const unsigned char *p;
    357              unsigned char *out_p = output;
   \        0x8   0x4698             MOV      R8,R3
    358              size_t use_len, olen = 0;
   \        0xA   0x2100             MOVS     R1,#+0
   \        0xC   0x9101             STR      R1,[SP, #+4]
    359          
    360              if( output > input && (size_t) ( output - input ) < length )
   \        0xE   0x429A             CMP      R2,R3
   \       0x10   0xD202             BCS.N    ??mbedtls_gcm_update_0
   \       0x12   0x1A9B             SUBS     R3,R3,R2
   \       0x14   0x42B3             CMP      R3,R6
   \       0x16   0xD319             BCC.N    ??mbedtls_gcm_update_1
   \                     ??mbedtls_gcm_update_0: (+1)
   \       0x18   0x4604             MOV      R4,R0
    361                  return( MBEDTLS_ERR_GCM_BAD_INPUT );
    362          
    363              /* Total length is restricted to 2^39 - 256 bits, ie 2^36 - 2^5 bytes
    364               * Also check for possible overflow */
    365              if( ctx->len + length < ctx->len ||
    366                  (uint64_t) ctx->len + length > 0xFFFFFFFE0ull )
   \       0x1A   0xE9D4 0x0150      LDRD     R0,R1,[R4, #+320]
   \       0x1E   0x2700             MOVS     R7,#+0
   \       0x20   0x1980             ADDS     R0,R0,R6
   \       0x22   0x4179             ADCS     R1,R1,R7
   \       0x24   0xE9D4 0xAB50      LDRD     R10,R11,[R4, #+320]
   \       0x28   0x4559             CMP      R1,R11
   \       0x2A   0xD30F             BCC.N    ??mbedtls_gcm_update_1
   \       0x2C   0xD801             BHI.N    ??mbedtls_gcm_update_2
   \       0x2E   0x4550             CMP      R0,R10
   \       0x30   0xD30C             BCC.N    ??mbedtls_gcm_update_1
   \                     ??mbedtls_gcm_update_2: (+1)
   \       0x32   0xE9D4 0x0150      LDRD     R0,R1,[R4, #+320]
   \       0x36   0x1980             ADDS     R0,R0,R6
   \       0x38   0x4179             ADCS     R1,R1,R7
   \       0x3A   0xF06F 0x0A1E      MVN      R10,#+30
   \       0x3E   0xF04F 0x0B0F      MOV      R11,#+15
   \       0x42   0x4559             CMP      R1,R11
   \       0x44   0xD305             BCC.N    ??mbedtls_gcm_update_3
   \       0x46   0xD801             BHI.N    ??mbedtls_gcm_update_1
   \       0x48   0x4550             CMP      R0,R10
   \       0x4A   0xD302             BCC.N    ??mbedtls_gcm_update_3
    367              {
    368                  return( MBEDTLS_ERR_GCM_BAD_INPUT );
   \                     ??mbedtls_gcm_update_1: (+1)
   \       0x4C   0xF06F 0x0013      MVN      R0,#+19
   \       0x50   0xE049             B.N      ??mbedtls_gcm_update_4
    369              }
    370          
    371              ctx->len += length;
   \                     ??mbedtls_gcm_update_3: (+1)
   \       0x52   0xE9D4 0x0150      LDRD     R0,R1,[R4, #+320]
   \       0x56   0x1980             ADDS     R0,R0,R6
   \       0x58   0x4179             ADCS     R1,R1,R7
   \       0x5A   0xE9C4 0x0150      STRD     R0,R1,[R4, #+320]
    372          
    373              p = input;
   \       0x5E   0x4615             MOV      R5,R2
   \       0x60   0xE029             B.N      ??mbedtls_gcm_update_5
    374              while( length > 0 )
    375              {
    376                  use_len = ( length < 16 ) ? length : 16;
    377          
    378                  for( i = 16; i > 12; i-- )
    379                      if( ++ctx->y[i - 1] != 0 )
    380                          break;
    381          
    382                  if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ectr,
    383                                             &olen ) ) != 0 )
    384                  {
    385                      return( ret );
    386                  }
    387          
    388                  for( i = 0; i < use_len; i++ )
    389                  {
    390                      if( ctx->mode == MBEDTLS_GCM_DECRYPT )
   \                     ??mbedtls_gcm_update_6: (+1)
   \       0x62   0xF8D4 0x0180      LDR      R0,[R4, #+384]
   \       0x66   0x2800             CMP      R0,#+0
   \       0x68   0xD107             BNE.N    ??mbedtls_gcm_update_7
    391                          ctx->buf[i] ^= p[i];
   \       0x6A   0x18A0             ADDS     R0,R4,R2
   \       0x6C   0xF890 0x0170      LDRB     R0,[R0, #+368]
   \       0x70   0x5CAB             LDRB     R3,[R5, R2]
   \       0x72   0x4058             EORS     R0,R3,R0
   \       0x74   0x18A3             ADDS     R3,R4,R2
   \       0x76   0xF883 0x0170      STRB     R0,[R3, #+368]
    392                      out_p[i] = ectr[i] ^ p[i];
   \                     ??mbedtls_gcm_update_7: (+1)
   \       0x7A   0xA802             ADD      R0,SP,#+8
   \       0x7C   0x5C80             LDRB     R0,[R0, R2]
   \       0x7E   0x5CAB             LDRB     R3,[R5, R2]
   \       0x80   0x4058             EORS     R0,R3,R0
   \       0x82   0x5488             STRB     R0,[R1, R2]
    393                      if( ctx->mode == MBEDTLS_GCM_ENCRYPT )
   \       0x84   0xF8D4 0x0180      LDR      R0,[R4, #+384]
   \       0x88   0x2801             CMP      R0,#+1
   \       0x8A   0xD107             BNE.N    ??mbedtls_gcm_update_8
    394                          ctx->buf[i] ^= out_p[i];
   \       0x8C   0x18A0             ADDS     R0,R4,R2
   \       0x8E   0xF890 0x0170      LDRB     R0,[R0, #+368]
   \       0x92   0x5C8B             LDRB     R3,[R1, R2]
   \       0x94   0x4058             EORS     R0,R3,R0
   \       0x96   0x18A3             ADDS     R3,R4,R2
   \       0x98   0xF883 0x0170      STRB     R0,[R3, #+368]
    395                  }
   \                     ??mbedtls_gcm_update_8: (+1)
   \       0x9C   0x1C52             ADDS     R2,R2,#+1
   \                     ??mbedtls_gcm_update_9: (+1)
   \       0x9E   0x42BA             CMP      R2,R7
   \       0xA0   0xD3DF             BCC.N    ??mbedtls_gcm_update_6
    396          
    397                  gcm_mult( ctx, ctx->buf, ctx->buf );
   \       0xA2   0xF504 0x72B8      ADD      R2,R4,#+368
   \       0xA6   0xF504 0x71B8      ADD      R1,R4,#+368
   \       0xAA   0x4620             MOV      R0,R4
   \       0xAC   0x....'....        BL       gcm_mult
    398          
    399                  length -= use_len;
   \       0xB0   0x1BF6             SUBS     R6,R6,R7
    400                  p += use_len;
   \       0xB2   0x443D             ADD      R5,R5,R7
    401                  out_p += use_len;
   \       0xB4   0x44B8             ADD      R8,R8,R7
   \                     ??mbedtls_gcm_update_5: (+1)
   \       0xB6   0x2E00             CMP      R6,#+0
   \       0xB8   0xD014             BEQ.N    ??mbedtls_gcm_update_10
   \       0xBA   0x2710             MOVS     R7,#+16
   \       0xBC   0x2E10             CMP      R6,#+16
   \       0xBE   0xD800             BHI.N    ??mbedtls_gcm_update_11
   \       0xC0   0x4637             MOV      R7,R6
   \                     ??mbedtls_gcm_update_11: (+1)
   \       0xC2   0x2110             MOVS     R1,#+16
   \                     ??mbedtls_gcm_update_12: (+1)
   \       0xC4   0x290D             CMP      R1,#+13
   \       0xC6   0xD311             BCC.N    ??mbedtls_gcm_update_13
   \       0xC8   0x1860             ADDS     R0,R4,R1
   \       0xCA   0xF890 0x015F      LDRB     R0,[R0, #+351]
   \       0xCE   0x1C40             ADDS     R0,R0,#+1
   \       0xD0   0x1862             ADDS     R2,R4,R1
   \       0xD2   0xF882 0x015F      STRB     R0,[R2, #+351]
   \       0xD6   0x1860             ADDS     R0,R4,R1
   \       0xD8   0xF890 0x015F      LDRB     R0,[R0, #+351]
   \       0xDC   0x2800             CMP      R0,#+0
   \       0xDE   0xD105             BNE.N    ??mbedtls_gcm_update_13
   \       0xE0   0x1E49             SUBS     R1,R1,#+1
   \       0xE2   0xE7EF             B.N      ??mbedtls_gcm_update_12
    402              }
    403          
    404              return( 0 );
   \                     ??mbedtls_gcm_update_10: (+1)
   \       0xE4   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_gcm_update_4: (+1)
   \       0xE6   0xB006             ADD      SP,SP,#+24
   \       0xE8   0xE8BD 0x8DF0      POP      {R4-R8,R10,R11,PC}  ;; return
   \                     ??mbedtls_gcm_update_13: (+1)
   \       0xEC   0xA801             ADD      R0,SP,#+4
   \       0xEE   0x9000             STR      R0,[SP, #+0]
   \       0xF0   0xAB02             ADD      R3,SP,#+8
   \       0xF2   0x2210             MOVS     R2,#+16
   \       0xF4   0xF504 0x71B0      ADD      R1,R4,#+352
   \       0xF8   0x4620             MOV      R0,R4
   \       0xFA   0x....'....        BL       mbedtls_cipher_update
   \       0xFE   0x2800             CMP      R0,#+0
   \      0x100   0xD1F1             BNE.N    ??mbedtls_gcm_update_4
   \      0x102   0x2200             MOVS     R2,#+0
   \      0x104   0x4641             MOV      R1,R8
   \      0x106   0xE7CA             B.N      ??mbedtls_gcm_update_9
    405          }
    406          

   \                                 In section .text, align 2, keep-with-next
    407          int mbedtls_gcm_finish( mbedtls_gcm_context *ctx,
    408                          unsigned char *tag,
    409                          size_t tag_len )
    410          {
   \                     mbedtls_gcm_finish: (+1)
   \        0x0   0xE92D 0x47FF      PUSH     {R0-R10,LR}
   \        0x4   0x4682             MOV      R10,R0
   \        0x6   0x4691             MOV      R9,R2
    411              unsigned char work_buf[16];
    412              size_t i;
    413              uint64_t orig_len = ctx->len * 8;
   \        0x8   0xE9DA 0x4550      LDRD     R4,R5,[R10, #+320]
   \        0xC   0x00ED             LSLS     R5,R5,#+3
   \        0xE   0xEA45 0x7554      ORR      R5,R5,R4, LSR #+29
   \       0x12   0x00E4             LSLS     R4,R4,#+3
    414              uint64_t orig_add_len = ctx->add_len * 8;
   \       0x14   0xE9DA 0x6752      LDRD     R6,R7,[R10, #+328]
   \       0x18   0x00FF             LSLS     R7,R7,#+3
   \       0x1A   0xEA47 0x7756      ORR      R7,R7,R6, LSR #+29
   \       0x1E   0x00F6             LSLS     R6,R6,#+3
    415          
    416              if( tag_len > 16 || tag_len < 4 )
   \       0x20   0xF1A9 0x0004      SUB      R0,R9,#+4
   \       0x24   0x280D             CMP      R0,#+13
   \       0x26   0xD302             BCC.N    ??mbedtls_gcm_finish_0
    417                  return( MBEDTLS_ERR_GCM_BAD_INPUT );
   \       0x28   0xF06F 0x0013      MVN      R0,#+19
   \       0x2C   0xE069             B.N      ??mbedtls_gcm_finish_1
   \                     ??mbedtls_gcm_finish_0: (+1)
   \       0x2E   0x4688             MOV      R8,R1
    418          
    419              memcpy( tag, ctx->base_ectr, tag_len );
   \       0x30   0xF50A 0x71A8      ADD      R1,R10,#+336
   \       0x34   0x4640             MOV      R0,R8
   \       0x36   0x....'....        BL       __aeabi_memcpy
    420          
    421              if( orig_len || orig_add_len )
   \       0x3A   0xEA44 0x0006      ORR      R0,R4,R6
   \       0x3E   0xEA55 0x0107      ORRS     R1,R5,R7
   \       0x42   0xD101             BNE.N    ??mbedtls_gcm_finish_2
   \       0x44   0x2800             CMP      R0,#+0
   \       0x46   0xD05B             BEQ.N    ??mbedtls_gcm_finish_3
    422              {
    423                  memset( work_buf, 0x00, 16 );
   \                     ??mbedtls_gcm_finish_2: (+1)
   \       0x48   0x2200             MOVS     R2,#+0
   \       0x4A   0x2110             MOVS     R1,#+16
   \       0x4C   0x4668             MOV      R0,SP
   \       0x4E   0x....'....        BL       __aeabi_memset4
    424          
    425                  PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
   \       0x52   0x4639             MOV      R1,R7
   \       0x54   0x0E08             LSRS     R0,R1,#+24
   \       0x56   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \       0x5A   0x466A             MOV      R2,SP
   \       0x5C   0x0C08             LSRS     R0,R1,#+16
   \       0x5E   0x7050             STRB     R0,[R2, #+1]
   \       0x60   0x0A08             LSRS     R0,R1,#+8
   \       0x62   0xF88D 0x0002      STRB     R0,[SP, #+2]
   \       0x66   0x70D7             STRB     R7,[R2, #+3]
    426                  PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
   \       0x68   0x4630             MOV      R0,R6
   \       0x6A   0x0E00             LSRS     R0,R0,#+24
   \       0x6C   0xF88D 0x0004      STRB     R0,[SP, #+4]
   \       0x70   0x4630             MOV      R0,R6
   \       0x72   0x0C00             LSRS     R0,R0,#+16
   \       0x74   0xF88D 0x0005      STRB     R0,[SP, #+5]
   \       0x78   0x4630             MOV      R0,R6
   \       0x7A   0xB280             UXTH     R0,R0
   \       0x7C   0x0A00             LSRS     R0,R0,#+8
   \       0x7E   0xF88D 0x0006      STRB     R0,[SP, #+6]
   \       0x82   0xF88D 0x6007      STRB     R6,[SP, #+7]
    427                  PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
   \       0x86   0x4629             MOV      R1,R5
   \       0x88   0x0E08             LSRS     R0,R1,#+24
   \       0x8A   0x7210             STRB     R0,[R2, #+8]
   \       0x8C   0x0C08             LSRS     R0,R1,#+16
   \       0x8E   0xF88D 0x0009      STRB     R0,[SP, #+9]
   \       0x92   0x0A08             LSRS     R0,R1,#+8
   \       0x94   0xF88D 0x000A      STRB     R0,[SP, #+10]
   \       0x98   0x4628             MOV      R0,R5
   \       0x9A   0xF88D 0x000B      STRB     R0,[SP, #+11]
    428                  PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );
   \       0x9E   0x4620             MOV      R0,R4
   \       0xA0   0x0E00             LSRS     R0,R0,#+24
   \       0xA2   0xF88D 0x000C      STRB     R0,[SP, #+12]
   \       0xA6   0x4620             MOV      R0,R4
   \       0xA8   0x0C00             LSRS     R0,R0,#+16
   \       0xAA   0x7350             STRB     R0,[R2, #+13]
   \       0xAC   0x4620             MOV      R0,R4
   \       0xAE   0xB280             UXTH     R0,R0
   \       0xB0   0x0A00             LSRS     R0,R0,#+8
   \       0xB2   0xF88D 0x000E      STRB     R0,[SP, #+14]
   \       0xB6   0xF88D 0x400F      STRB     R4,[SP, #+15]
    429          
    430                  for( i = 0; i < 16; i++ )
   \       0xBA   0x2000             MOVS     R0,#+0
   \       0xBC   0x4654             MOV      R4,R10
   \       0xBE   0xE008             B.N      ??mbedtls_gcm_finish_4
    431                      ctx->buf[i] ^= work_buf[i];
   \                     ??mbedtls_gcm_finish_5: (+1)
   \       0xC0   0x1821             ADDS     R1,R4,R0
   \       0xC2   0xF891 0x1170      LDRB     R1,[R1, #+368]
   \       0xC6   0x5C13             LDRB     R3,[R2, R0]
   \       0xC8   0x4059             EORS     R1,R3,R1
   \       0xCA   0x1823             ADDS     R3,R4,R0
   \       0xCC   0xF883 0x1170      STRB     R1,[R3, #+368]
   \       0xD0   0x1C40             ADDS     R0,R0,#+1
   \                     ??mbedtls_gcm_finish_4: (+1)
   \       0xD2   0x2810             CMP      R0,#+16
   \       0xD4   0xD3F4             BCC.N    ??mbedtls_gcm_finish_5
    432          
    433                  gcm_mult( ctx, ctx->buf, ctx->buf );
   \       0xD6   0xF504 0x72B8      ADD      R2,R4,#+368
   \       0xDA   0xF504 0x71B8      ADD      R1,R4,#+368
   \       0xDE   0x4620             MOV      R0,R4
   \       0xE0   0x....'....        BL       gcm_mult
    434          
    435                  for( i = 0; i < tag_len; i++ )
   \       0xE4   0x2100             MOVS     R1,#+0
   \       0xE6   0x4648             MOV      R0,R9
   \       0xE8   0xE008             B.N      ??mbedtls_gcm_finish_6
    436                      tag[i] ^= ctx->buf[i];
   \                     ??mbedtls_gcm_finish_7: (+1)
   \       0xEA   0xF818 0x2001      LDRB     R2,[R8, R1]
   \       0xEE   0x1863             ADDS     R3,R4,R1
   \       0xF0   0xF893 0x3170      LDRB     R3,[R3, #+368]
   \       0xF4   0x405A             EORS     R2,R3,R2
   \       0xF6   0xF808 0x2001      STRB     R2,[R8, R1]
   \       0xFA   0x1C49             ADDS     R1,R1,#+1
   \                     ??mbedtls_gcm_finish_6: (+1)
   \       0xFC   0x4281             CMP      R1,R0
   \       0xFE   0xD3F4             BCC.N    ??mbedtls_gcm_finish_7
    437              }
    438          
    439              return( 0 );
   \                     ??mbedtls_gcm_finish_3: (+1)
   \      0x100   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_gcm_finish_1: (+1)
   \      0x102   0xB004             ADD      SP,SP,#+16
   \      0x104   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    440          }
    441          
    442          #if !defined(MBEDTLS_GCM_CRYPT_ALT)

   \                                 In section .text, align 2, keep-with-next
    443          int mbedtls_gcm_crypt_and_tag( mbedtls_gcm_context *ctx,
    444                                 int mode,
    445                                 size_t length,
    446                                 const unsigned char *iv,
    447                                 size_t iv_len,
    448                                 const unsigned char *add,
    449                                 size_t add_len,
    450                                 const unsigned char *input,
    451                                 unsigned char *output,
    452                                 size_t tag_len,
    453                                 unsigned char *tag )
    454          {
   \                     mbedtls_gcm_crypt_and_tag: (+1)
   \        0x0   0xB57C             PUSH     {R2-R6,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x4615             MOV      R5,R2
   \        0x6   0x461A             MOV      R2,R3
   \        0x8   0x9B06             LDR      R3,[SP, #+24]
   \        0xA   0x9807             LDR      R0,[SP, #+28]
   \        0xC   0x9E08             LDR      R6,[SP, #+32]
    455              int ret;
    456          
    457              if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
   \        0xE   0x9601             STR      R6,[SP, #+4]
   \       0x10   0x9000             STR      R0,[SP, #+0]
   \       0x12   0x4620             MOV      R0,R4
   \       0x14   0x....'....        BL       mbedtls_gcm_starts
   \       0x18   0x2800             CMP      R0,#+0
   \       0x1A   0xD10F             BNE.N    ??mbedtls_gcm_crypt_and_tag_0
    458                  return( ret );
   \       0x1C   0x9B0A             LDR      R3,[SP, #+40]
   \       0x1E   0x9A09             LDR      R2,[SP, #+36]
    459          
    460              if( ( ret = mbedtls_gcm_update( ctx, length, input, output ) ) != 0 )
   \       0x20   0x4629             MOV      R1,R5
   \       0x22   0x4620             MOV      R0,R4
   \       0x24   0x....'....        BL       mbedtls_gcm_update
   \       0x28   0x2800             CMP      R0,#+0
   \       0x2A   0xD107             BNE.N    ??mbedtls_gcm_crypt_and_tag_0
    461                  return( ret );
   \       0x2C   0x990C             LDR      R1,[SP, #+48]
   \       0x2E   0x9A0B             LDR      R2,[SP, #+44]
    462          
    463              if( ( ret = mbedtls_gcm_finish( ctx, tag, tag_len ) ) != 0 )
   \       0x30   0x4620             MOV      R0,R4
   \       0x32   0x....'....        BL       mbedtls_gcm_finish
   \       0x36   0x2800             CMP      R0,#+0
   \       0x38   0xD100             BNE.N    ??mbedtls_gcm_crypt_and_tag_0
    464                  return( ret );
    465          
    466              return( 0 );
   \       0x3A   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_gcm_crypt_and_tag_0: (+1)
   \       0x3C   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
    467          }
    468          

   \                                 In section .text, align 2, keep-with-next
    469          int mbedtls_gcm_auth_decrypt( mbedtls_gcm_context *ctx,
    470                                size_t length,
    471                                const unsigned char *iv,
    472                                size_t iv_len,
    473                                const unsigned char *add,
    474                                size_t add_len,
    475                                const unsigned char *tag,
    476                                size_t tag_len,
    477                                const unsigned char *input,
    478                                unsigned char *output )
    479          {
   \                     mbedtls_gcm_auth_decrypt: (+1)
   \        0x0   0xB5F0             PUSH     {R4-R7,LR}
   \        0x2   0xB08B             SUB      SP,SP,#+44
   \        0x4   0x460C             MOV      R4,R1
   \        0x6   0x9910             LDR      R1,[SP, #+64]
   \        0x8   0x9F11             LDR      R7,[SP, #+68]
   \        0xA   0x9D13             LDR      R5,[SP, #+76]
   \        0xC   0xF8DD 0xC050      LDR      R12,[SP, #+80]
   \       0x10   0x9E15             LDR      R6,[SP, #+84]
    480              int ret;
    481              unsigned char check_tag[16];
    482              size_t i;
    483              int diff;
    484          
    485              if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
    486                                             iv, iv_len, add, add_len,
    487                                             input, output, tag_len, check_tag ) ) != 0 )
   \       0x12   0xF10D 0x0E1C      ADD      LR,SP,#+28
   \       0x16   0xF8CD 0xE018      STR      LR,[SP, #+24]
   \       0x1A   0x9505             STR      R5,[SP, #+20]
   \       0x1C   0x9604             STR      R6,[SP, #+16]
   \       0x1E   0xF8CD 0xC00C      STR      R12,[SP, #+12]
   \       0x22   0x9702             STR      R7,[SP, #+8]
   \       0x24   0x9101             STR      R1,[SP, #+4]
   \       0x26   0x9300             STR      R3,[SP, #+0]
   \       0x28   0x4613             MOV      R3,R2
   \       0x2A   0x4622             MOV      R2,R4
   \       0x2C   0x2100             MOVS     R1,#+0
   \       0x2E   0x....'....        BL       mbedtls_gcm_crypt_and_tag
   \       0x32   0x2800             CMP      R0,#+0
   \       0x34   0xD115             BNE.N    ??mbedtls_gcm_auth_decrypt_0
    488              {
    489                  return( ret );
    490              }
    491          
    492              /* Check tag in "constant-time" */
    493              for( diff = 0, i = 0; i < tag_len; i++ )
   \       0x36   0x2000             MOVS     R0,#+0
   \       0x38   0x4602             MOV      R2,R0
   \       0x3A   0x9912             LDR      R1,[SP, #+72]
   \       0x3C   0xE005             B.N      ??mbedtls_gcm_auth_decrypt_1
    494                  diff |= tag[i] ^ check_tag[i];
   \                     ??mbedtls_gcm_auth_decrypt_2: (+1)
   \       0x3E   0x5C8B             LDRB     R3,[R1, R2]
   \       0x40   0xAF07             ADD      R7,SP,#+28
   \       0x42   0x5CBF             LDRB     R7,[R7, R2]
   \       0x44   0x407B             EORS     R3,R7,R3
   \       0x46   0x4318             ORRS     R0,R3,R0
   \       0x48   0x1C52             ADDS     R2,R2,#+1
   \                     ??mbedtls_gcm_auth_decrypt_1: (+1)
   \       0x4A   0x42AA             CMP      R2,R5
   \       0x4C   0xD3F7             BCC.N    ??mbedtls_gcm_auth_decrypt_2
    495          
    496              if( diff != 0 )
   \       0x4E   0x2800             CMP      R0,#+0
   \       0x50   0xD006             BEQ.N    ??mbedtls_gcm_auth_decrypt_3
    497              {
    498                  mbedtls_platform_zeroize( output, length );
   \       0x52   0x4621             MOV      R1,R4
   \       0x54   0x4630             MOV      R0,R6
   \       0x56   0x....'....        BL       mbedtls_platform_zeroize
    499                  return( MBEDTLS_ERR_GCM_AUTH_FAILED );
   \       0x5A   0xF06F 0x0011      MVN      R0,#+17
   \       0x5E   0xE000             B.N      ??mbedtls_gcm_auth_decrypt_0
    500              }
    501          
    502              return( 0 );
   \                     ??mbedtls_gcm_auth_decrypt_3: (+1)
   \       0x60   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_gcm_auth_decrypt_0: (+1)
   \       0x62   0xB00B             ADD      SP,SP,#+44
   \       0x64   0xBDF0             POP      {R4-R7,PC}       ;; return
    503          }
    504          #endif /* !MBEDTLS_GCM_CRYPT_ALT */
    505          

   \                                 In section .text, align 2, keep-with-next
    506          void mbedtls_gcm_free( mbedtls_gcm_context *ctx )
    507          {
   \                     mbedtls_gcm_free: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x4604             MOV      R4,R0
    508              mbedtls_cipher_free( &ctx->cipher_ctx );
   \        0x4   0x....'....        BL       mbedtls_cipher_free
    509              mbedtls_platform_zeroize( ctx, sizeof( mbedtls_gcm_context ) );
   \        0x8   0xF44F 0x71C4      MOV      R1,#+392
   \        0xC   0x4620             MOV      R0,R4
   \        0xE   0xE8BD 0x4010      POP      {R4,LR}
   \       0x12   0x....'....        B.W      mbedtls_platform_zeroize
    510          }
    511          
    512          #endif /* !MBEDTLS_GCM_ALT */
    513          
    514          #if defined(MBEDTLS_SELF_TEST) && defined(MBEDTLS_AES_C)
    515          /*
    516           * AES-GCM test vectors from:
    517           *
    518           * http://csrc.nist.gov/groups/STM/cavp/documents/mac/gcmtestvectors.zip
    519           */
    520          #define MAX_TESTS   6
    521          

   \                                 In section .rodata, align 4
    522          static const int key_index[MAX_TESTS] =
   \                     key_index:
   \        0x0   0x0000'0000        DC32 0, 0, 1, 1, 1, 1
   \              0x0000'0000  
   \              0x0000'0001  
   \              0x0000'0001  
   \              0x0000'0001  
   \              0x0000'0001  
    523              { 0, 0, 1, 1, 1, 1 };
    524          

   \                                 In section .rodata, align 8
    525          static const unsigned char key[MAX_TESTS][32] __attribute__((aligned)) =
   \                     key:
   \        0x0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \       0x17   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 254, 255, 233, 146, 134, 101, 115, 28
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0xFE    
   \              0xFF 0xE9    
   \              0x92 0x86    
   \              0x65 0x73    
   \              0x1C         
   \       0x28   0x6D 0x6A          DC8 109, 106, 143, 148, 103, 48, 131, 8, 254, 255, 233, 146, 134, 101
   \              0x8F 0x94    
   \              0x67 0x30    
   \              0x83 0x08    
   \              0xFE 0xFF    
   \              0xE9 0x92    
   \              0x86 0x65    
   \       0x36   0x73 0x1C          DC8 115, 28, 109, 106, 143, 148, 103, 48, 131, 8, 0, 0, 0, 0, 0, 0, 0
   \              0x6D 0x6A    
   \              0x8F 0x94    
   \              0x67 0x30    
   \              0x83 0x08    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \       0x47   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \       0x5E   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \       0x75   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \       0x8C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \       0xA3   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \       0xBA   0x00 0x00          DC8 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
    526          {
    527              { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    528                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    529                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    530                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    531              { 0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c,
    532                0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30, 0x83, 0x08,
    533                0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c,
    534                0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30, 0x83, 0x08 },
    535          };
    536          

   \                                 In section .rodata, align 4
    537          static const size_t iv_len[MAX_TESTS] =
   \                     iv_len:
   \        0x0   0x0000'000C        DC32 12, 12, 12, 12, 8, 60
   \              0x0000'000C  
   \              0x0000'000C  
   \              0x0000'000C  
   \              0x0000'0008  
   \              0x0000'003C  
    538              { 12, 12, 12, 12, 8, 60 };
    539          

   \                                 In section .rodata, align 4
    540          static const int iv_index[MAX_TESTS] =
   \                     iv_index:
   \        0x0   0x0000'0000        DC32 0, 0, 1, 1, 1, 2
   \              0x0000'0000  
   \              0x0000'0001  
   \              0x0000'0001  
   \              0x0000'0001  
   \              0x0000'0002  
    541              { 0, 0, 1, 1, 1, 2 };
    542          

   \                                 In section .rodata, align 4
    543          static const unsigned char iv[MAX_TESTS][64] =
   \                     iv:
   \        0x0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \       0x17   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \       0x2E   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 202, 254, 186
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0xCA 0xFE    
   \              0xBA         
   \       0x43   0xBE 0xFA          DC8 190, 250, 206, 219, 173, 222, 202, 248, 136, 0, 0, 0, 0, 0, 0, 0, 0
   \              0xCE 0xDB    
   \              0xAD 0xDE    
   \              0xCA 0xF8    
   \              0x88 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \       0x54   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \       0x6B   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 147
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x93    
   \       0x81   0x13 0x22          DC8 19, 34, 93, 248, 132, 6, 229, 85, 144, 156, 90, 255, 82, 105, 170
   \              0x5D 0xF8    
   \              0x84 0x06    
   \              0xE5 0x55    
   \              0x90 0x9C    
   \              0x5A 0xFF    
   \              0x52 0x69    
   \              0xAA         
   \       0x90   0x6A 0x7A          DC8 106, 122, 149, 56, 83, 79, 125, 161, 228, 195, 3, 210, 163, 24, 167
   \              0x95 0x38    
   \              0x53 0x4F    
   \              0x7D 0xA1    
   \              0xE4 0xC3    
   \              0x03 0xD2    
   \              0xA3 0x18    
   \              0xA7         
   \       0x9F   0x28 0xC3          DC8 40, 195, 192, 201, 81, 86, 128, 149, 57, 252, 240, 226, 66, 154
   \              0xC0 0xC9    
   \              0x51 0x56    
   \              0x80 0x95    
   \              0x39 0xFC    
   \              0xF0 0xE2    
   \              0x42 0x9A    
   \       0xAD   0x6B 0x52          DC8 107, 82, 84, 22, 174, 219, 245, 160, 222, 106, 87, 166, 55, 179
   \              0x54 0x16    
   \              0xAE 0xDB    
   \              0xF5 0xA0    
   \              0xDE 0x6A    
   \              0x57 0xA6    
   \              0x37 0xB3    
   \       0xBB   0x9B 0x00          DC8 155, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \       0xD1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \       0xE8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \       0xFF   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \      0x116   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \      0x12D   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \      0x144   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \      0x15B   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \      0x172   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
    544          {
    545              { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    546                0x00, 0x00, 0x00, 0x00 },
    547              { 0xca, 0xfe, 0xba, 0xbe, 0xfa, 0xce, 0xdb, 0xad,
    548                0xde, 0xca, 0xf8, 0x88 },
    549              { 0x93, 0x13, 0x22, 0x5d, 0xf8, 0x84, 0x06, 0xe5,
    550                0x55, 0x90, 0x9c, 0x5a, 0xff, 0x52, 0x69, 0xaa,
    551                0x6a, 0x7a, 0x95, 0x38, 0x53, 0x4f, 0x7d, 0xa1,
    552                0xe4, 0xc3, 0x03, 0xd2, 0xa3, 0x18, 0xa7, 0x28,
    553                0xc3, 0xc0, 0xc9, 0x51, 0x56, 0x80, 0x95, 0x39,
    554                0xfc, 0xf0, 0xe2, 0x42, 0x9a, 0x6b, 0x52, 0x54,
    555                0x16, 0xae, 0xdb, 0xf5, 0xa0, 0xde, 0x6a, 0x57,
    556                0xa6, 0x37, 0xb3, 0x9b },
    557          };
    558          

   \                                 In section .rodata, align 4
    559          static const size_t add_len[MAX_TESTS] =
   \                     add_len:
   \        0x0   0x0000'0000        DC32 0, 0, 0, 20, 20, 20
   \              0x0000'0000  
   \              0x0000'0000  
   \              0x0000'0014  
   \              0x0000'0014  
   \              0x0000'0014  
    560              { 0, 0, 0, 20, 20, 20 };
    561          

   \                                 In section .rodata, align 4
    562          static const int add_index[MAX_TESTS] =
   \                     add_index:
   \        0x0   0x0000'0000        DC32 0, 0, 0, 1, 1, 1
   \              0x0000'0000  
   \              0x0000'0000  
   \              0x0000'0001  
   \              0x0000'0001  
   \              0x0000'0001  
    563              { 0, 0, 0, 1, 1, 1 };
    564          

   \                                 In section .rodata, align 4
    565          static const unsigned char additional[MAX_TESTS][64] =
   \                     additional:
   \        0x0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \       0x17   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \       0x2E   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254, 237, 250
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0xFE 0xED    
   \              0xFA         
   \       0x43   0xCE 0xDE          DC8 206, 222, 173, 190, 239, 254, 237, 250, 206, 222, 173, 190, 239
   \              0xAD 0xBE    
   \              0xEF 0xFE    
   \              0xED 0xFA    
   \              0xCE 0xDE    
   \              0xAD 0xBE    
   \              0xEF         
   \       0x50   0xAB 0xAD          DC8 171, 173, 218, 210, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0xDA 0xD2    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \       0x64   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \       0x7B   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \       0x92   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \       0xA9   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \       0xC0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \       0xD7   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \       0xEE   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \      0x105   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \      0x11C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \      0x133   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \      0x14A   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \      0x161   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \      0x178   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
    566          {
    567              { 0x00 },
    568              { 0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad, 0xbe, 0xef,
    569                0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad, 0xbe, 0xef,
    570                0xab, 0xad, 0xda, 0xd2 },
    571          };
    572          

   \                                 In section .rodata, align 4
    573          static const size_t pt_len[MAX_TESTS] =
   \                     pt_len:
   \        0x0   0x0000'0000        DC32 0, 16, 64, 60, 60, 60
   \              0x0000'0010  
   \              0x0000'0040  
   \              0x0000'003C  
   \              0x0000'003C  
   \              0x0000'003C  
    574              { 0, 16, 64, 60, 60, 60 };
    575          

   \                                 In section .rodata, align 4
    576          static const int pt_index[MAX_TESTS] =
   \                     pt_index:
   \        0x0   0x0000'0000        DC32 0, 0, 1, 1, 1, 1
   \              0x0000'0000  
   \              0x0000'0001  
   \              0x0000'0001  
   \              0x0000'0001  
   \              0x0000'0001  
    577              { 0, 0, 1, 1, 1, 1 };
    578          

   \                                 In section .rodata, align 4
    579          static const unsigned char pt[MAX_TESTS][64] =
   \                     pt:
   \        0x0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \       0x17   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \       0x2E   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217, 49, 50
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0xD9 0x31    
   \              0x32         
   \       0x43   0x25 0xF8          DC8 37, 248, 132, 6, 229, 165, 89, 9, 197, 175, 245, 38, 154, 134, 167
   \              0x84 0x06    
   \              0xE5 0xA5    
   \              0x59 0x09    
   \              0xC5 0xAF    
   \              0xF5 0x26    
   \              0x9A 0x86    
   \              0xA7         
   \       0x52   0xA9 0x53          DC8 169, 83, 21, 52, 247, 218, 46, 76, 48, 61, 138, 49, 138, 114, 28
   \              0x15 0x34    
   \              0xF7 0xDA    
   \              0x2E 0x4C    
   \              0x30 0x3D    
   \              0x8A 0x31    
   \              0x8A 0x72    
   \              0x1C         
   \       0x61   0x3C 0x0C          DC8 60, 12, 149, 149, 104, 9, 83, 47, 207, 14, 36, 73, 166, 181, 37
   \              0x95 0x95    
   \              0x68 0x09    
   \              0x53 0x2F    
   \              0xCF 0x0E    
   \              0x24 0x49    
   \              0xA6 0xB5    
   \              0x25         
   \       0x70   0xB1 0x6A          DC8 177, 106, 237, 245, 170, 13, 230, 87, 186, 99, 123, 57, 26, 175
   \              0xED 0xF5    
   \              0xAA 0x0D    
   \              0xE6 0x57    
   \              0xBA 0x63    
   \              0x7B 0x39    
   \              0x1A 0xAF    
   \       0x7E   0xD2 0x55          DC8 210, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \       0x94   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \       0xAB   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \       0xC2   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \       0xD9   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \       0xF0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \      0x107   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \      0x11E   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \      0x135   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \      0x14C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \      0x163   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \      0x17A   0x00 0x00          DC8 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
    580          {
    581              { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    582                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    583              { 0xd9, 0x31, 0x32, 0x25, 0xf8, 0x84, 0x06, 0xe5,
    584                0xa5, 0x59, 0x09, 0xc5, 0xaf, 0xf5, 0x26, 0x9a,
    585                0x86, 0xa7, 0xa9, 0x53, 0x15, 0x34, 0xf7, 0xda,
    586                0x2e, 0x4c, 0x30, 0x3d, 0x8a, 0x31, 0x8a, 0x72,
    587                0x1c, 0x3c, 0x0c, 0x95, 0x95, 0x68, 0x09, 0x53,
    588                0x2f, 0xcf, 0x0e, 0x24, 0x49, 0xa6, 0xb5, 0x25,
    589                0xb1, 0x6a, 0xed, 0xf5, 0xaa, 0x0d, 0xe6, 0x57,
    590                0xba, 0x63, 0x7b, 0x39, 0x1a, 0xaf, 0xd2, 0x55 },
    591          };
    592          

   \                                 In section .rodata, align 4
    593          static const unsigned char ct[MAX_TESTS * 3][64] =
   \                     ct:
   \        0x0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \       0x17   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \       0x2E   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 136, 218
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x03 0x88    
   \              0xDA         
   \       0x43   0xCE 0x60          DC8 206, 96, 182, 163, 146, 243, 40, 194, 185, 113, 178, 254, 120, 0, 0
   \              0xB6 0xA3    
   \              0x92 0xF3    
   \              0x28 0xC2    
   \              0xB9 0x71    
   \              0xB2 0xFE    
   \              0x78 0x00    
   \              0x00         
   \       0x52   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \       0x69   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \       0x80   0x42 0x83          DC8 66, 131, 30, 194, 33, 119, 116, 36, 75, 114, 33, 183, 132, 208, 212
   \              0x1E 0xC2    
   \              0x21 0x77    
   \              0x74 0x24    
   \              0x4B 0x72    
   \              0x21 0xB7    
   \              0x84 0xD0    
   \              0xD4         
   \       0x8F   0x9C 0xE3          DC8 156, 227, 170, 33, 47, 44, 2, 164, 224, 53, 193, 126, 35, 41, 172
   \              0xAA 0x21    
   \              0x2F 0x2C    
   \              0x02 0xA4    
   \              0xE0 0x35    
   \              0xC1 0x7E    
   \              0x23 0x29    
   \              0xAC         
   \       0x9E   0xA1 0x2E          DC8 161, 46, 33, 213, 20, 178, 84, 102, 147, 28, 125, 143, 106, 90, 172
   \              0x21 0xD5    
   \              0x14 0xB2    
   \              0x54 0x66    
   \              0x93 0x1C    
   \              0x7D 0x8F    
   \              0x6A 0x5A    
   \              0xAC         
   \       0xAD   0x84 0xAA          DC8 132, 170, 5, 27, 163, 11, 57, 106, 10, 172, 151, 61, 88, 224, 145
   \              0x05 0x1B    
   \              0xA3 0x0B    
   \              0x39 0x6A    
   \              0x0A 0xAC    
   \              0x97 0x3D    
   \              0x58 0xE0    
   \              0x91         
   \       0xBC   0x47 0x3F          DC8 71, 63, 89, 133, 66, 131, 30, 194, 33, 119, 116, 36, 75, 114, 33
   \              0x59 0x85    
   \              0x42 0x83    
   \              0x1E 0xC2    
   \              0x21 0x77    
   \              0x74 0x24    
   \              0x4B 0x72    
   \              0x21         
   \       0xCB   0xB7 0x84          DC8 183, 132, 208, 212, 156, 227, 170, 33, 47, 44, 2, 164, 224, 53, 193
   \              0xD0 0xD4    
   \              0x9C 0xE3    
   \              0xAA 0x21    
   \              0x2F 0x2C    
   \              0x02 0xA4    
   \              0xE0 0x35    
   \              0xC1         
   \       0xDA   0x7E 0x23          DC8 126, 35, 41, 172, 161, 46, 33, 213, 20, 178, 84, 102, 147, 28, 125
   \              0x29 0xAC    
   \              0xA1 0x2E    
   \              0x21 0xD5    
   \              0x14 0xB2    
   \              0x54 0x66    
   \              0x93 0x1C    
   \              0x7D         
   \       0xE9   0x8F 0x6A          DC8 143, 106, 90, 172, 132, 170, 5, 27, 163, 11, 57, 106, 10, 172, 151
   \              0x5A 0xAC    
   \              0x84 0xAA    
   \              0x05 0x1B    
   \              0xA3 0x0B    
   \              0x39 0x6A    
   \              0x0A 0xAC    
   \              0x97         
   \       0xF8   0x3D 0x58          DC8 61, 88, 224, 145, 0, 0, 0, 0, 97, 53, 59, 76, 40, 6, 147, 74, 119
   \              0xE0 0x91    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x61 0x35    
   \              0x3B 0x4C    
   \              0x28 0x06    
   \              0x93 0x4A    
   \              0x77         
   \      0x109   0x7F 0xF5          DC8 127, 245, 31, 162, 42, 71, 85, 105, 155, 42, 113, 79, 205, 198, 248
   \              0x1F 0xA2    
   \              0x2A 0x47    
   \              0x55 0x69    
   \              0x9B 0x2A    
   \              0x71 0x4F    
   \              0xCD 0xC6    
   \              0xF8         
   \      0x118   0x37 0x66          DC8 55, 102, 229, 249, 123, 108, 116, 35, 115, 128, 105, 0, 228, 159
   \              0xE5 0xF9    
   \              0x7B 0x6C    
   \              0x74 0x23    
   \              0x73 0x80    
   \              0x69 0x00    
   \              0xE4 0x9F    
   \      0x126   0x24 0xB2          DC8 36, 178, 43, 9, 117, 68, 212, 137, 107, 66, 73, 137, 181, 225, 235
   \              0x2B 0x09    
   \              0x75 0x44    
   \              0xD4 0x89    
   \              0x6B 0x42    
   \              0x49 0x89    
   \              0xB5 0xE1    
   \              0xEB         
   \      0x135   0xAC 0x0F          DC8 172, 15, 7, 194, 63, 69, 152, 0, 0, 0, 0, 140, 226, 73, 152, 98, 86
   \              0x07 0xC2    
   \              0x3F 0x45    
   \              0x98 0x00    
   \              0x00 0x00    
   \              0x00 0x8C    
   \              0xE2 0x49    
   \              0x98 0x62    
   \              0x56         
   \      0x146   0x15 0xB6          DC8 21, 182, 3, 160, 51, 172, 161, 63, 184, 148, 190, 145, 18, 165, 195
   \              0x03 0xA0    
   \              0x33 0xAC    
   \              0xA1 0x3F    
   \              0xB8 0x94    
   \              0xBE 0x91    
   \              0x12 0xA5    
   \              0xC3         
   \      0x155   0xA2 0x11          DC8 162, 17, 168, 186, 38, 42, 60, 202, 126, 44, 167, 1, 228, 169, 164
   \              0xA8 0xBA    
   \              0x26 0x2A    
   \              0x3C 0xCA    
   \              0x7E 0x2C    
   \              0xA7 0x01    
   \              0xE4 0xA9    
   \              0xA4         
   \      0x164   0xFB 0xA4          DC8 251, 164, 60, 144, 204, 220, 178, 129, 212, 140, 124, 111, 214, 40
   \              0x3C 0x90    
   \              0xCC 0xDC    
   \              0xB2 0x81    
   \              0xD4 0x8C    
   \              0x7C 0x6F    
   \              0xD6 0x28    
   \      0x172   0x75 0xD2          DC8 117, 210, 172, 164, 23, 3, 76, 52, 174, 229, 0, 0, 0, 0, 0, 0, 0, 0
   \              0xAC 0xA4    
   \              0x17 0x03    
   \              0x4C 0x34    
   \              0xAE 0xE5    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x184   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \      0x19B   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \      0x1B2   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 152, 231, 36, 124, 7, 240
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x98 0xE7    
   \              0x24 0x7C    
   \              0x07 0xF0    
   \      0x1C6   0xFE 0x41          DC8 254, 65, 28, 38, 126, 67, 132, 176, 246, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x1C 0x26    
   \              0x7E 0x43    
   \              0x84 0xB0    
   \              0xF6 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x1D8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \      0x1EF   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 128, 202, 11
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x39    
   \              0x80 0xCA    
   \              0x0B         
   \      0x204   0x3C 0x00          DC8 60, 0, 232, 65, 235, 6, 250, 196, 135, 42, 39, 87, 133, 158, 28
   \              0xE8 0x41    
   \              0xEB 0x06    
   \              0xFA 0xC4    
   \              0x87 0x2A    
   \              0x27 0x57    
   \              0x85 0x9E    
   \              0x1C         
   \      0x213   0xEA 0xA6          DC8 234, 166, 239, 217, 132, 98, 133, 147, 180, 12, 161, 225, 156, 125
   \              0xEF 0xD9    
   \              0x84 0x62    
   \              0x85 0x93    
   \              0xB4 0x0C    
   \              0xA1 0xE1    
   \              0x9C 0x7D    
   \      0x221   0x77 0x3D          DC8 119, 61, 0, 193, 68, 197, 37, 172, 97, 157, 24, 200, 74, 63, 71, 24
   \              0x00 0xC1    
   \              0x44 0xC5    
   \              0x25 0xAC    
   \              0x61 0x9D    
   \              0x18 0xC8    
   \              0x4A 0x3F    
   \              0x47 0x18    
   \      0x231   0xE2 0x44          DC8 226, 68, 139, 47, 227, 36, 217, 204, 218, 39, 16, 172, 173, 226, 86
   \              0x8B 0x2F    
   \              0xE3 0x24    
   \              0xD9 0xCC    
   \              0xDA 0x27    
   \              0x10 0xAC    
   \              0xAD 0xE2    
   \              0x56         
   \      0x240   0x39 0x80          DC8 57, 128, 202, 11, 60, 0, 232, 65, 235, 6, 250, 196, 135, 42, 39, 87
   \              0xCA 0x0B    
   \              0x3C 0x00    
   \              0xE8 0x41    
   \              0xEB 0x06    
   \              0xFA 0xC4    
   \              0x87 0x2A    
   \              0x27 0x57    
   \      0x250   0x85 0x9E          DC8 133, 158, 28, 234, 166, 239, 217, 132, 98, 133, 147, 180, 12, 161
   \              0x1C 0xEA    
   \              0xA6 0xEF    
   \              0xD9 0x84    
   \              0x62 0x85    
   \              0x93 0xB4    
   \              0x0C 0xA1    
   \      0x25E   0xE1 0x9C          DC8 225, 156, 125, 119, 61, 0, 193, 68, 197, 37, 172, 97, 157, 24, 200
   \              0x7D 0x77    
   \              0x3D 0x00    
   \              0xC1 0x44    
   \              0xC5 0x25    
   \              0xAC 0x61    
   \              0x9D 0x18    
   \              0xC8         
   \      0x26D   0x4A 0x3F          DC8 74, 63, 71, 24, 226, 68, 139, 47, 227, 36, 217, 204, 218, 39, 16, 0
   \              0x47 0x18    
   \              0xE2 0x44    
   \              0x8B 0x2F    
   \              0xE3 0x24    
   \              0xD9 0xCC    
   \              0xDA 0x27    
   \              0x10 0x00    
   \      0x27D   0x00 0x00          DC8 0, 0, 0, 15, 16, 245, 153, 174, 20, 161, 84, 237, 36, 179, 110, 37
   \              0x00 0x0F    
   \              0x10 0xF5    
   \              0x99 0xAE    
   \              0x14 0xA1    
   \              0x54 0xED    
   \              0x24 0xB3    
   \              0x6E 0x25    
   \      0x28D   0x32 0x4D          DC8 50, 77, 184, 197, 102, 99, 46, 242, 187, 179, 79, 131, 71, 40, 15
   \              0xB8 0xC5    
   \              0x66 0x63    
   \              0x2E 0xF2    
   \              0xBB 0xB3    
   \              0x4F 0x83    
   \              0x47 0x28    
   \              0x0F         
   \      0x29C   0xC4 0x50          DC8 196, 80, 112, 87, 253, 220, 41, 223, 154, 71, 31, 117, 198, 101, 65
   \              0x70 0x57    
   \              0xFD 0xDC    
   \              0x29 0xDF    
   \              0x9A 0x47    
   \              0x1F 0x75    
   \              0xC6 0x65    
   \              0x41         
   \      0x2AB   0xD4 0xD4          DC8 212, 212, 218, 209, 201, 233, 58, 25, 165, 142, 139, 71, 63, 160
   \              0xDA 0xD1    
   \              0xC9 0xE9    
   \              0x3A 0x19    
   \              0xA5 0x8E    
   \              0x8B 0x47    
   \              0x3F 0xA0    
   \      0x2B9   0xF0 0x62          DC8 240, 98, 247, 0, 0, 0, 0, 210, 126, 136, 104, 28, 227, 36, 60, 72
   \              0xF7 0x00    
   \              0x00 0x00    
   \              0x00 0xD2    
   \              0x7E 0x88    
   \              0x68 0x1C    
   \              0xE3 0x24    
   \              0x3C 0x48    
   \      0x2C9   0x30 0x16          DC8 48, 22, 90, 143, 220, 249, 255, 29, 233, 161, 216, 230, 180, 71
   \              0x5A 0x8F    
   \              0xDC 0xF9    
   \              0xFF 0x1D    
   \              0xE9 0xA1    
   \              0xD8 0xE6    
   \              0xB4 0x47    
   \      0x2D7   0xEF 0x6E          DC8 239, 110, 247, 183, 152, 40, 102, 110, 69, 129, 231, 144, 18, 175
   \              0xF7 0xB7    
   \              0x98 0x28    
   \              0x66 0x6E    
   \              0x45 0x81    
   \              0xE7 0x90    
   \              0x12 0xAF    
   \      0x2E5   0x34 0xDD          DC8 52, 221, 217, 226, 240, 55, 88, 155, 41, 45, 179, 230, 124, 3, 103
   \              0xD9 0xE2    
   \              0xF0 0x37    
   \              0x58 0x9B    
   \              0x29 0x2D    
   \              0xB3 0xE6    
   \              0x7C 0x03    
   \              0x67         
   \      0x2F4   0x45 0xFA          DC8 69, 250, 34, 231, 233, 183, 55, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x22 0xE7    
   \              0xE9 0xB7    
   \              0x37 0x3B    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \      0x307   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \      0x31E   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \      0x335   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 206, 167, 64, 61, 77, 96, 107, 110
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0xCE    
   \              0xA7 0x40    
   \              0x3D 0x4D    
   \              0x60 0x6B    
   \              0x6E         
   \      0x348   0x07 0x4E          DC8 7, 78, 197, 211, 186, 243, 157, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0xC5 0xD3    
   \              0xBA 0xF3    
   \              0x9D 0x18    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \      0x35B   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \      0x372   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82, 45, 193, 240, 153, 86
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x52 0x2D    
   \              0xC1 0xF0    
   \              0x99 0x56    
   \      0x386   0x7D 0x07          DC8 125, 7, 244, 127, 55, 163, 42, 132, 66, 125, 100, 58, 140, 220, 191
   \              0xF4 0x7F    
   \              0x37 0xA3    
   \              0x2A 0x84    
   \              0x42 0x7D    
   \              0x64 0x3A    
   \              0x8C 0xDC    
   \              0xBF         
   \      0x395   0xE5 0xC0          DC8 229, 192, 201, 117, 152, 162, 189, 37, 85, 209, 170, 140, 176, 142
   \              0xC9 0x75    
   \              0x98 0xA2    
   \              0xBD 0x25    
   \              0x55 0xD1    
   \              0xAA 0x8C    
   \              0xB0 0x8E    
   \      0x3A3   0x48 0x59          DC8 72, 89, 13, 187, 61, 167, 176, 139, 16, 86, 130, 136, 56, 197, 246
   \              0x0D 0xBB    
   \              0x3D 0xA7    
   \              0xB0 0x8B    
   \              0x10 0x56    
   \              0x82 0x88    
   \              0x38 0xC5    
   \              0xF6         
   \      0x3B2   0x1E 0x63          DC8 30, 99, 147, 186, 122, 10, 188, 201, 246, 98, 137, 128, 21, 173, 82
   \              0x93 0xBA    
   \              0x7A 0x0A    
   \              0xBC 0xC9    
   \              0xF6 0x62    
   \              0x89 0x80    
   \              0x15 0xAD    
   \              0x52         
   \      0x3C1   0x2D 0xC1          DC8 45, 193, 240, 153, 86, 125, 7, 244, 127, 55, 163, 42, 132, 66, 125
   \              0xF0 0x99    
   \              0x56 0x7D    
   \              0x07 0xF4    
   \              0x7F 0x37    
   \              0xA3 0x2A    
   \              0x84 0x42    
   \              0x7D         
   \      0x3D0   0x64 0x3A          DC8 100, 58, 140, 220, 191, 229, 192, 201, 117, 152, 162, 189, 37, 85
   \              0x8C 0xDC    
   \              0xBF 0xE5    
   \              0xC0 0xC9    
   \              0x75 0x98    
   \              0xA2 0xBD    
   \              0x25 0x55    
   \      0x3DE   0xD1 0xAA          DC8 209, 170, 140, 176, 142, 72, 89, 13, 187, 61, 167, 176, 139, 16, 86
   \              0x8C 0xB0    
   \              0x8E 0x48    
   \              0x59 0x0D    
   \              0xBB 0x3D    
   \              0xA7 0xB0    
   \              0x8B 0x10    
   \              0x56         
   \      0x3ED   0x82 0x88          DC8 130, 136, 56, 197, 246, 30, 99, 147, 186, 122, 10, 188, 201, 246
   \              0x38 0xC5    
   \              0xF6 0x1E    
   \              0x63 0x93    
   \              0xBA 0x7A    
   \              0x0A 0xBC    
   \              0xC9 0xF6    
   \      0x3FB   0x62 0x00          DC8 98, 0, 0, 0, 0, 195, 118, 45, 241, 202, 120, 125, 50, 174, 71, 193
   \              0x00 0x00    
   \              0x00 0xC3    
   \              0x76 0x2D    
   \              0xF1 0xCA    
   \              0x78 0x7D    
   \              0x32 0xAE    
   \              0x47 0xC1    
   \      0x40B   0x3B 0xF1          DC8 59, 241, 152, 68, 203, 175, 26, 225, 77, 11, 151, 106, 250, 197, 47
   \              0x98 0x44    
   \              0xCB 0xAF    
   \              0x1A 0xE1    
   \              0x4D 0x0B    
   \              0x97 0x6A    
   \              0xFA 0xC5    
   \              0x2F         
   \      0x41A   0xF7 0xD7          DC8 247, 215, 155, 186, 157, 224, 254, 181, 130, 211, 57, 52, 164, 240
   \              0x9B 0xBA    
   \              0x9D 0xE0    
   \              0xFE 0xB5    
   \              0x82 0xD3    
   \              0x39 0x34    
   \              0xA4 0xF0    
   \      0x428   0x95 0x4C          DC8 149, 76, 194, 54, 59, 199, 63, 120, 98, 172, 67, 14, 100, 171, 228
   \              0xC2 0x36    
   \              0x3B 0xC7    
   \              0x3F 0x78    
   \              0x62 0xAC    
   \              0x43 0x0E    
   \              0x64 0xAB    
   \              0xE4         
   \      0x437   0x99 0xF4          DC8 153, 244, 124, 155, 31, 0, 0, 0, 0, 90, 141, 239, 47, 12, 158, 83
   \              0x7C 0x9B    
   \              0x1F 0x00    
   \              0x00 0x00    
   \              0x00 0x5A    
   \              0x8D 0xEF    
   \              0x2F 0x0C    
   \              0x9E 0x53    
   \      0x447   0xF1 0xF7          DC8 241, 247, 93, 120, 83, 101, 158, 42, 32, 238, 178, 178, 42, 175
   \              0x5D 0x78    
   \              0x53 0x65    
   \              0x9E 0x2A    
   \              0x20 0xEE    
   \              0xB2 0xB2    
   \              0x2A 0xAF    
   \      0x455   0xDE 0x64          DC8 222, 100, 25, 160, 88, 171, 79, 111, 116, 107, 244, 15, 192, 195
   \              0x19 0xA0    
   \              0x58 0xAB    
   \              0x4F 0x6F    
   \              0x74 0x6B    
   \              0xF4 0x0F    
   \              0xC0 0xC3    
   \      0x463   0xB7 0x80          DC8 183, 128, 242, 68, 69, 45, 163, 235, 241, 197, 216, 44, 222, 162
   \              0xF2 0x44    
   \              0x45 0x2D    
   \              0xA3 0xEB    
   \              0xF1 0xC5    
   \              0xD8 0x2C    
   \              0xDE 0xA2    
   \      0x471   0x41 0x89          DC8 65, 137, 151, 32, 14, 248, 46, 68, 174, 126, 63, 0, 0, 0, 0
   \              0x97 0x20    
   \              0x0E 0xF8    
   \              0x2E 0x44    
   \              0xAE 0x7E    
   \              0x3F 0x00    
   \              0x00 0x00    
   \              0x00         
    594          {
    595              { 0x00 },
    596              { 0x03, 0x88, 0xda, 0xce, 0x60, 0xb6, 0xa3, 0x92,
    597                0xf3, 0x28, 0xc2, 0xb9, 0x71, 0xb2, 0xfe, 0x78 },
    598              { 0x42, 0x83, 0x1e, 0xc2, 0x21, 0x77, 0x74, 0x24,
    599                0x4b, 0x72, 0x21, 0xb7, 0x84, 0xd0, 0xd4, 0x9c,
    600                0xe3, 0xaa, 0x21, 0x2f, 0x2c, 0x02, 0xa4, 0xe0,
    601                0x35, 0xc1, 0x7e, 0x23, 0x29, 0xac, 0xa1, 0x2e,
    602                0x21, 0xd5, 0x14, 0xb2, 0x54, 0x66, 0x93, 0x1c,
    603                0x7d, 0x8f, 0x6a, 0x5a, 0xac, 0x84, 0xaa, 0x05,
    604                0x1b, 0xa3, 0x0b, 0x39, 0x6a, 0x0a, 0xac, 0x97,
    605                0x3d, 0x58, 0xe0, 0x91, 0x47, 0x3f, 0x59, 0x85 },
    606              { 0x42, 0x83, 0x1e, 0xc2, 0x21, 0x77, 0x74, 0x24,
    607                0x4b, 0x72, 0x21, 0xb7, 0x84, 0xd0, 0xd4, 0x9c,
    608                0xe3, 0xaa, 0x21, 0x2f, 0x2c, 0x02, 0xa4, 0xe0,
    609                0x35, 0xc1, 0x7e, 0x23, 0x29, 0xac, 0xa1, 0x2e,
    610                0x21, 0xd5, 0x14, 0xb2, 0x54, 0x66, 0x93, 0x1c,
    611                0x7d, 0x8f, 0x6a, 0x5a, 0xac, 0x84, 0xaa, 0x05,
    612                0x1b, 0xa3, 0x0b, 0x39, 0x6a, 0x0a, 0xac, 0x97,
    613                0x3d, 0x58, 0xe0, 0x91 },
    614              { 0x61, 0x35, 0x3b, 0x4c, 0x28, 0x06, 0x93, 0x4a,
    615                0x77, 0x7f, 0xf5, 0x1f, 0xa2, 0x2a, 0x47, 0x55,
    616                0x69, 0x9b, 0x2a, 0x71, 0x4f, 0xcd, 0xc6, 0xf8,
    617                0x37, 0x66, 0xe5, 0xf9, 0x7b, 0x6c, 0x74, 0x23,
    618                0x73, 0x80, 0x69, 0x00, 0xe4, 0x9f, 0x24, 0xb2,
    619                0x2b, 0x09, 0x75, 0x44, 0xd4, 0x89, 0x6b, 0x42,
    620                0x49, 0x89, 0xb5, 0xe1, 0xeb, 0xac, 0x0f, 0x07,
    621                0xc2, 0x3f, 0x45, 0x98 },
    622              { 0x8c, 0xe2, 0x49, 0x98, 0x62, 0x56, 0x15, 0xb6,
    623                0x03, 0xa0, 0x33, 0xac, 0xa1, 0x3f, 0xb8, 0x94,
    624                0xbe, 0x91, 0x12, 0xa5, 0xc3, 0xa2, 0x11, 0xa8,
    625                0xba, 0x26, 0x2a, 0x3c, 0xca, 0x7e, 0x2c, 0xa7,
    626                0x01, 0xe4, 0xa9, 0xa4, 0xfb, 0xa4, 0x3c, 0x90,
    627                0xcc, 0xdc, 0xb2, 0x81, 0xd4, 0x8c, 0x7c, 0x6f,
    628                0xd6, 0x28, 0x75, 0xd2, 0xac, 0xa4, 0x17, 0x03,
    629                0x4c, 0x34, 0xae, 0xe5 },
    630              { 0x00 },
    631              { 0x98, 0xe7, 0x24, 0x7c, 0x07, 0xf0, 0xfe, 0x41,
    632                0x1c, 0x26, 0x7e, 0x43, 0x84, 0xb0, 0xf6, 0x00 },
    633              { 0x39, 0x80, 0xca, 0x0b, 0x3c, 0x00, 0xe8, 0x41,
    634                0xeb, 0x06, 0xfa, 0xc4, 0x87, 0x2a, 0x27, 0x57,
    635                0x85, 0x9e, 0x1c, 0xea, 0xa6, 0xef, 0xd9, 0x84,
    636                0x62, 0x85, 0x93, 0xb4, 0x0c, 0xa1, 0xe1, 0x9c,
    637                0x7d, 0x77, 0x3d, 0x00, 0xc1, 0x44, 0xc5, 0x25,
    638                0xac, 0x61, 0x9d, 0x18, 0xc8, 0x4a, 0x3f, 0x47,
    639                0x18, 0xe2, 0x44, 0x8b, 0x2f, 0xe3, 0x24, 0xd9,
    640                0xcc, 0xda, 0x27, 0x10, 0xac, 0xad, 0xe2, 0x56 },
    641              { 0x39, 0x80, 0xca, 0x0b, 0x3c, 0x00, 0xe8, 0x41,
    642                0xeb, 0x06, 0xfa, 0xc4, 0x87, 0x2a, 0x27, 0x57,
    643                0x85, 0x9e, 0x1c, 0xea, 0xa6, 0xef, 0xd9, 0x84,
    644                0x62, 0x85, 0x93, 0xb4, 0x0c, 0xa1, 0xe1, 0x9c,
    645                0x7d, 0x77, 0x3d, 0x00, 0xc1, 0x44, 0xc5, 0x25,
    646                0xac, 0x61, 0x9d, 0x18, 0xc8, 0x4a, 0x3f, 0x47,
    647                0x18, 0xe2, 0x44, 0x8b, 0x2f, 0xe3, 0x24, 0xd9,
    648                0xcc, 0xda, 0x27, 0x10 },
    649              { 0x0f, 0x10, 0xf5, 0x99, 0xae, 0x14, 0xa1, 0x54,
    650                0xed, 0x24, 0xb3, 0x6e, 0x25, 0x32, 0x4d, 0xb8,
    651                0xc5, 0x66, 0x63, 0x2e, 0xf2, 0xbb, 0xb3, 0x4f,
    652                0x83, 0x47, 0x28, 0x0f, 0xc4, 0x50, 0x70, 0x57,
    653                0xfd, 0xdc, 0x29, 0xdf, 0x9a, 0x47, 0x1f, 0x75,
    654                0xc6, 0x65, 0x41, 0xd4, 0xd4, 0xda, 0xd1, 0xc9,
    655                0xe9, 0x3a, 0x19, 0xa5, 0x8e, 0x8b, 0x47, 0x3f,
    656                0xa0, 0xf0, 0x62, 0xf7 },
    657              { 0xd2, 0x7e, 0x88, 0x68, 0x1c, 0xe3, 0x24, 0x3c,
    658                0x48, 0x30, 0x16, 0x5a, 0x8f, 0xdc, 0xf9, 0xff,
    659                0x1d, 0xe9, 0xa1, 0xd8, 0xe6, 0xb4, 0x47, 0xef,
    660                0x6e, 0xf7, 0xb7, 0x98, 0x28, 0x66, 0x6e, 0x45,
    661                0x81, 0xe7, 0x90, 0x12, 0xaf, 0x34, 0xdd, 0xd9,
    662                0xe2, 0xf0, 0x37, 0x58, 0x9b, 0x29, 0x2d, 0xb3,
    663                0xe6, 0x7c, 0x03, 0x67, 0x45, 0xfa, 0x22, 0xe7,
    664                0xe9, 0xb7, 0x37, 0x3b },
    665              { 0x00 },
    666              { 0xce, 0xa7, 0x40, 0x3d, 0x4d, 0x60, 0x6b, 0x6e,
    667                0x07, 0x4e, 0xc5, 0xd3, 0xba, 0xf3, 0x9d, 0x18 },
    668              { 0x52, 0x2d, 0xc1, 0xf0, 0x99, 0x56, 0x7d, 0x07,
    669                0xf4, 0x7f, 0x37, 0xa3, 0x2a, 0x84, 0x42, 0x7d,
    670                0x64, 0x3a, 0x8c, 0xdc, 0xbf, 0xe5, 0xc0, 0xc9,
    671                0x75, 0x98, 0xa2, 0xbd, 0x25, 0x55, 0xd1, 0xaa,
    672                0x8c, 0xb0, 0x8e, 0x48, 0x59, 0x0d, 0xbb, 0x3d,
    673                0xa7, 0xb0, 0x8b, 0x10, 0x56, 0x82, 0x88, 0x38,
    674                0xc5, 0xf6, 0x1e, 0x63, 0x93, 0xba, 0x7a, 0x0a,
    675                0xbc, 0xc9, 0xf6, 0x62, 0x89, 0x80, 0x15, 0xad },
    676              { 0x52, 0x2d, 0xc1, 0xf0, 0x99, 0x56, 0x7d, 0x07,
    677                0xf4, 0x7f, 0x37, 0xa3, 0x2a, 0x84, 0x42, 0x7d,
    678                0x64, 0x3a, 0x8c, 0xdc, 0xbf, 0xe5, 0xc0, 0xc9,
    679                0x75, 0x98, 0xa2, 0xbd, 0x25, 0x55, 0xd1, 0xaa,
    680                0x8c, 0xb0, 0x8e, 0x48, 0x59, 0x0d, 0xbb, 0x3d,
    681                0xa7, 0xb0, 0x8b, 0x10, 0x56, 0x82, 0x88, 0x38,
    682                0xc5, 0xf6, 0x1e, 0x63, 0x93, 0xba, 0x7a, 0x0a,
    683                0xbc, 0xc9, 0xf6, 0x62 },
    684              { 0xc3, 0x76, 0x2d, 0xf1, 0xca, 0x78, 0x7d, 0x32,
    685                0xae, 0x47, 0xc1, 0x3b, 0xf1, 0x98, 0x44, 0xcb,
    686                0xaf, 0x1a, 0xe1, 0x4d, 0x0b, 0x97, 0x6a, 0xfa,
    687                0xc5, 0x2f, 0xf7, 0xd7, 0x9b, 0xba, 0x9d, 0xe0,
    688                0xfe, 0xb5, 0x82, 0xd3, 0x39, 0x34, 0xa4, 0xf0,
    689                0x95, 0x4c, 0xc2, 0x36, 0x3b, 0xc7, 0x3f, 0x78,
    690                0x62, 0xac, 0x43, 0x0e, 0x64, 0xab, 0xe4, 0x99,
    691                0xf4, 0x7c, 0x9b, 0x1f },
    692              { 0x5a, 0x8d, 0xef, 0x2f, 0x0c, 0x9e, 0x53, 0xf1,
    693                0xf7, 0x5d, 0x78, 0x53, 0x65, 0x9e, 0x2a, 0x20,
    694                0xee, 0xb2, 0xb2, 0x2a, 0xaf, 0xde, 0x64, 0x19,
    695                0xa0, 0x58, 0xab, 0x4f, 0x6f, 0x74, 0x6b, 0xf4,
    696                0x0f, 0xc0, 0xc3, 0xb7, 0x80, 0xf2, 0x44, 0x45,
    697                0x2d, 0xa3, 0xeb, 0xf1, 0xc5, 0xd8, 0x2c, 0xde,
    698                0xa2, 0x41, 0x89, 0x97, 0x20, 0x0e, 0xf8, 0x2e,
    699                0x44, 0xae, 0x7e, 0x3f },
    700          };
    701          

   \                                 In section .rodata, align 4
    702          static const unsigned char tag[MAX_TESTS * 3][16] =
   \                     tag:
   \        0x0   0x58 0xE2          DC8 88, 226, 252, 206, 250, 126, 48, 97, 54, 127, 29, 87, 164, 231, 69
   \              0xFC 0xCE    
   \              0xFA 0x7E    
   \              0x30 0x61    
   \              0x36 0x7F    
   \              0x1D 0x57    
   \              0xA4 0xE7    
   \              0x45         
   \        0xF   0x5A 0xAB          DC8 90, 171, 110, 71, 212, 44, 236, 19, 189, 245, 58, 103, 178, 18, 87
   \              0x6E 0x47    
   \              0xD4 0x2C    
   \              0xEC 0x13    
   \              0xBD 0xF5    
   \              0x3A 0x67    
   \              0xB2 0x12    
   \              0x57         
   \       0x1E   0xBD 0xDF          DC8 189, 223, 77, 92, 42, 243, 39, 205, 100, 166, 44, 243, 90, 189, 43
   \              0x4D 0x5C    
   \              0x2A 0xF3    
   \              0x27 0xCD    
   \              0x64 0xA6    
   \              0x2C 0xF3    
   \              0x5A 0xBD    
   \              0x2B         
   \       0x2D   0xA6 0xFA          DC8 166, 250, 180, 91, 201, 79, 188, 50, 33, 165, 219, 148, 250, 233
   \              0xB4 0x5B    
   \              0xC9 0x4F    
   \              0xBC 0x32    
   \              0x21 0xA5    
   \              0xDB 0x94    
   \              0xFA 0xE9    
   \       0x3B   0x5A 0xE7          DC8 90, 231, 18, 26, 71, 54, 18, 210, 231, 158, 59, 7, 133, 86, 27, 225
   \              0x12 0x1A    
   \              0x47 0x36    
   \              0x12 0xD2    
   \              0xE7 0x9E    
   \              0x3B 0x07    
   \              0x85 0x56    
   \              0x1B 0xE1    
   \       0x4B   0x4A 0xAC          DC8 74, 172, 162, 252, 203, 97, 156, 197, 174, 255, 254, 11, 250, 70
   \              0xA2 0xFC    
   \              0xCB 0x61    
   \              0x9C 0xC5    
   \              0xAE 0xFF    
   \              0xFE 0x0B    
   \              0xFA 0x46    
   \       0x59   0x2A 0xF4          DC8 42, 244, 60, 22, 153, 208, 80, 205, 51, 178, 138, 199, 115, 247, 75
   \              0x3C 0x16    
   \              0x99 0xD0    
   \              0x50 0xCD    
   \              0x33 0xB2    
   \              0x8A 0xC7    
   \              0x73 0xF7    
   \              0x4B         
   \       0x68   0xA0 0x0E          DC8 160, 14, 209, 243, 18, 87, 36, 53, 47, 245, 141, 128, 3, 57, 39
   \              0xD1 0xF3    
   \              0x12 0x57    
   \              0x24 0x35    
   \              0x2F 0xF5    
   \              0x8D 0x80    
   \              0x03 0x39    
   \              0x27         
   \       0x77   0xAB 0x8E          DC8 171, 142, 244, 212, 88, 117, 20, 240, 251, 153, 36, 167, 200, 88
   \              0xF4 0xD4    
   \              0x58 0x75    
   \              0x14 0xF0    
   \              0xFB 0x99    
   \              0x24 0xA7    
   \              0xC8 0x58    
   \       0x85   0x73 0x36          DC8 115, 54, 191, 177, 24, 2, 77, 184, 103, 74, 20, 37, 25, 73, 142
   \              0xBF 0xB1    
   \              0x18 0x02    
   \              0x4D 0xB8    
   \              0x67 0x4A    
   \              0x14 0x25    
   \              0x19 0x49    
   \              0x8E         
   \       0x94   0x80 0xF1          DC8 128, 241, 71, 143, 55, 186, 85, 189, 109, 39, 97, 140, 101, 220
   \              0x47 0x8F    
   \              0x37 0xBA    
   \              0x55 0xBD    
   \              0x6D 0x27    
   \              0x61 0x8C    
   \              0x65 0xDC    
   \       0xA2   0xC5 0x7F          DC8 197, 127, 207, 98, 58, 36, 9, 79, 204, 164, 13, 53, 51, 248, 220
   \              0xCF 0x62    
   \              0x3A 0x24    
   \              0x09 0x4F    
   \              0xCC 0xA4    
   \              0x0D 0x35    
   \              0x33 0xF8    
   \              0xDC         
   \       0xB1   0xF5 0x66          DC8 245, 102, 255, 41, 28, 37, 187, 184, 86, 143, 195, 211, 118, 166
   \              0xFF 0x29    
   \              0x1C 0x25    
   \              0xBB 0xB8    
   \              0x56 0x8F    
   \              0xC3 0xD3    
   \              0x76 0xA6    
   \       0xBF   0xD9 0x53          DC8 217, 83, 15, 138, 251, 199, 69, 54, 185, 169, 99, 180, 241, 196
   \              0x0F 0x8A    
   \              0xFB 0xC7    
   \              0x45 0x36    
   \              0xB9 0xA9    
   \              0x63 0xB4    
   \              0xF1 0xC4    
   \       0xCD   0xCB 0x73          DC8 203, 115, 139, 208, 209, 200, 167, 153, 153, 107, 240, 38, 91, 152
   \              0x8B 0xD0    
   \              0xD1 0xC8    
   \              0xA7 0x99    
   \              0x99 0x6B    
   \              0xF0 0x26    
   \              0x5B 0x98    
   \       0xDB   0xB5 0xD4          DC8 181, 212, 138, 185, 25, 176, 148, 218, 197, 217, 52, 113, 189, 236
   \              0x8A 0xB9    
   \              0x19 0xB0    
   \              0x94 0xDA    
   \              0xC5 0xD9    
   \              0x34 0x71    
   \              0xBD 0xEC    
   \       0xE9   0x1A 0x50          DC8 26, 80, 34, 112, 227, 204, 108, 118, 252, 110, 206, 15, 78, 23, 104
   \              0x22 0x70    
   \              0xE3 0xCC    
   \              0x6C 0x76    
   \              0xFC 0x6E    
   \              0xCE 0x0F    
   \              0x4E 0x17    
   \              0x68         
   \       0xF8   0xCD 0xDF          DC8 205, 223, 136, 83, 187, 45, 85, 27, 58, 51, 125, 191, 70, 167, 146
   \              0x88 0x53    
   \              0xBB 0x2D    
   \              0x55 0x1B    
   \              0x3A 0x33    
   \              0x7D 0xBF    
   \              0x46 0xA7    
   \              0x92         
   \      0x107   0xC4 0x5E          DC8 196, 94, 69, 73, 19, 254, 46, 168, 242, 164, 74, 130, 102, 238, 28
   \              0x45 0x49    
   \              0x13 0xFE    
   \              0x2E 0xA8    
   \              0xF2 0xA4    
   \              0x4A 0x82    
   \              0x66 0xEE    
   \              0x1C         
   \      0x116   0x8E 0xB0          DC8 142, 176, 200, 181, 212, 207, 90, 233, 241, 154
   \              0xC8 0xB5    
   \              0xD4 0xCF    
   \              0x5A 0xE9    
   \              0xF1 0x9A    
    703          {
    704              { 0x58, 0xe2, 0xfc, 0xce, 0xfa, 0x7e, 0x30, 0x61,
    705                0x36, 0x7f, 0x1d, 0x57, 0xa4, 0xe7, 0x45, 0x5a },
    706              { 0xab, 0x6e, 0x47, 0xd4, 0x2c, 0xec, 0x13, 0xbd,
    707                0xf5, 0x3a, 0x67, 0xb2, 0x12, 0x57, 0xbd, 0xdf },
    708              { 0x4d, 0x5c, 0x2a, 0xf3, 0x27, 0xcd, 0x64, 0xa6,
    709                0x2c, 0xf3, 0x5a, 0xbd, 0x2b, 0xa6, 0xfa, 0xb4 },
    710              { 0x5b, 0xc9, 0x4f, 0xbc, 0x32, 0x21, 0xa5, 0xdb,
    711                0x94, 0xfa, 0xe9, 0x5a, 0xe7, 0x12, 0x1a, 0x47 },
    712              { 0x36, 0x12, 0xd2, 0xe7, 0x9e, 0x3b, 0x07, 0x85,
    713                0x56, 0x1b, 0xe1, 0x4a, 0xac, 0xa2, 0xfc, 0xcb },
    714              { 0x61, 0x9c, 0xc5, 0xae, 0xff, 0xfe, 0x0b, 0xfa,
    715                0x46, 0x2a, 0xf4, 0x3c, 0x16, 0x99, 0xd0, 0x50 },
    716              { 0xcd, 0x33, 0xb2, 0x8a, 0xc7, 0x73, 0xf7, 0x4b,
    717                0xa0, 0x0e, 0xd1, 0xf3, 0x12, 0x57, 0x24, 0x35 },
    718              { 0x2f, 0xf5, 0x8d, 0x80, 0x03, 0x39, 0x27, 0xab,
    719                0x8e, 0xf4, 0xd4, 0x58, 0x75, 0x14, 0xf0, 0xfb },
    720              { 0x99, 0x24, 0xa7, 0xc8, 0x58, 0x73, 0x36, 0xbf,
    721                0xb1, 0x18, 0x02, 0x4d, 0xb8, 0x67, 0x4a, 0x14 },
    722              { 0x25, 0x19, 0x49, 0x8e, 0x80, 0xf1, 0x47, 0x8f,
    723                0x37, 0xba, 0x55, 0xbd, 0x6d, 0x27, 0x61, 0x8c },
    724              { 0x65, 0xdc, 0xc5, 0x7f, 0xcf, 0x62, 0x3a, 0x24,
    725                0x09, 0x4f, 0xcc, 0xa4, 0x0d, 0x35, 0x33, 0xf8 },
    726              { 0xdc, 0xf5, 0x66, 0xff, 0x29, 0x1c, 0x25, 0xbb,
    727                0xb8, 0x56, 0x8f, 0xc3, 0xd3, 0x76, 0xa6, 0xd9 },
    728              { 0x53, 0x0f, 0x8a, 0xfb, 0xc7, 0x45, 0x36, 0xb9,
    729                0xa9, 0x63, 0xb4, 0xf1, 0xc4, 0xcb, 0x73, 0x8b },
    730              { 0xd0, 0xd1, 0xc8, 0xa7, 0x99, 0x99, 0x6b, 0xf0,
    731                0x26, 0x5b, 0x98, 0xb5, 0xd4, 0x8a, 0xb9, 0x19 },
    732              { 0xb0, 0x94, 0xda, 0xc5, 0xd9, 0x34, 0x71, 0xbd,
    733                0xec, 0x1a, 0x50, 0x22, 0x70, 0xe3, 0xcc, 0x6c },
    734              { 0x76, 0xfc, 0x6e, 0xce, 0x0f, 0x4e, 0x17, 0x68,
    735                0xcd, 0xdf, 0x88, 0x53, 0xbb, 0x2d, 0x55, 0x1b },
    736              { 0x3a, 0x33, 0x7d, 0xbf, 0x46, 0xa7, 0x92, 0xc4,
    737                0x5e, 0x45, 0x49, 0x13, 0xfe, 0x2e, 0xa8, 0xf2 },
    738              { 0xa4, 0x4a, 0x82, 0x66, 0xee, 0x1c, 0x8e, 0xb0,
    739                0xc8, 0xb5, 0xd4, 0xcf, 0x5a, 0xe9, 0xf1, 0x9a },
    740          };
    741          

   \                                 In section .text, align 4, keep-with-next
    742          int mbedtls_gcm_self_test( int verbose )
    743          {
   \                     mbedtls_gcm_self_test: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \        0x4   0xB0FE             SUB      SP,SP,#+504
   \        0x6   0x4604             MOV      R4,R0
    744              mbedtls_gcm_context ctx;
    745              unsigned char buf[64];
    746              unsigned char tag_buf[16];
    747              int i, j, ret;
    748              mbedtls_cipher_id_t cipher = MBEDTLS_CIPHER_ID_AES;
    749          
    750              for( j = 0; j < 3; j++ )
   \        0x8   0xF04F 0x0A00      MOV      R10,#+0
   \        0xC   0x....'....        LDR.W    R5,??DataTable2_3
   \       0x10   0x....'....        LDR.W    R6,??DataTable2_4
   \       0x14   0x....'....        LDR.W    R7,??DataTable2_5
   \       0x18   0x....'....        LDR.W    R8,??DataTable2_6
   \       0x1C   0xE1D9             B.N      ??mbedtls_gcm_self_test_1
    751              {
    752                  int key_len = 128 + 64 * j;
    753          
    754                  #ifdef MBEDTLS_AES_ALT_NO_192
    755                  if (j == 1)
    756                  {
    757                      continue;
    758                  }
    759                  #endif
    760                  #ifdef MBEDTLS_AES_ALT_NO_256
    761                  if (j == 2)
    762                  {
    763                      continue;
    764                  }
    765                  #endif
    766          
    767                  for( i = 0; i < MAX_TESTS; i++ )
    768                  {
    769                      mbedtls_gcm_init( &ctx );
    770          
    771                      if( verbose != 0 )
    772                          mbedtls_printf( "  AES-GCM-%3d #%d (%s): ",
    773                                          key_len, i, "enc" );
    774          
    775                      ret = mbedtls_gcm_setkey( &ctx, cipher, key[key_index[i]],
    776                                                key_len );
    777                      /*
    778                       * AES-192 is an optional feature that may be unavailable when
    779                       * there is an alternative underlying implementation i.e. when
    780                       * MBEDTLS_AES_ALT is defined.
    781                       */
    782                      if( ret == MBEDTLS_ERR_AES_FEATURE_UNAVAILABLE && key_len == 192 )
    783                      {
    784                          mbedtls_printf( "skipped\n\r" );
    785                          break;
    786                      }
    787                      else if( ret != 0 )
   \                     ??mbedtls_gcm_self_test_2: (+1)
   \       0x1E   0x2800             CMP      R0,#+0
   \       0x20   0xF040 0x81EE      BNE.W    ??mbedtls_gcm_self_test_3
    788                      {
    789                          goto exit;
    790                      }
    791          
    792                      ret = mbedtls_gcm_crypt_and_tag( &ctx, MBEDTLS_GCM_ENCRYPT,
    793                                                  pt_len[i],
    794                                                  iv[iv_index[i]], iv_len[i],
    795                                                  additional[add_index[i]], add_len[i],
    796                                                  pt[pt_index[i]], buf, 16, tag_buf );
   \       0x24   0xA808             ADD      R0,SP,#+32
   \       0x26   0x9006             STR      R0,[SP, #+24]
   \       0x28   0x2010             MOVS     R0,#+16
   \       0x2A   0x9005             STR      R0,[SP, #+20]
   \       0x2C   0xA80C             ADD      R0,SP,#+48
   \       0x2E   0x9004             STR      R0,[SP, #+16]
   \       0x30   0xF856 0x002B      LDR      R0,[R6, R11, LSL #+2]
   \       0x34   0xEB07 0x1080      ADD      R0,R7,R0, LSL #+6
   \       0x38   0x9003             STR      R0,[SP, #+12]
   \       0x3A   0x....'....        LDR.W    R0,??DataTable2_7
   \       0x3E   0xF850 0x002B      LDR      R0,[R0, R11, LSL #+2]
   \       0x42   0x9002             STR      R0,[SP, #+8]
   \       0x44   0x....'....        LDR.W    R0,??DataTable2_8
   \       0x48   0x....'....        LDR.W    R1,??DataTable2_9
   \       0x4C   0xF851 0x102B      LDR      R1,[R1, R11, LSL #+2]
   \       0x50   0xEB00 0x1081      ADD      R0,R0,R1, LSL #+6
   \       0x54   0x9001             STR      R0,[SP, #+4]
   \       0x56   0x....'....        LDR.W    R0,??DataTable2_10
   \       0x5A   0xF850 0x002B      LDR      R0,[R0, R11, LSL #+2]
   \       0x5E   0x9000             STR      R0,[SP, #+0]
   \       0x60   0x....'....        LDR.W    R0,??DataTable2_11
   \       0x64   0x....'....        LDR.W    R1,??DataTable2_12
   \       0x68   0xF851 0x102B      LDR      R1,[R1, R11, LSL #+2]
   \       0x6C   0xEB10 0x1381      ADDS     R3,R0,R1, LSL #+6
   \       0x70   0xF855 0x202B      LDR      R2,[R5, R11, LSL #+2]
   \       0x74   0x2101             MOVS     R1,#+1
   \       0x76   0xA81C             ADD      R0,SP,#+112
   \       0x78   0x....'....        BL       mbedtls_gcm_crypt_and_tag
    797                      if( ret != 0 )
   \       0x7C   0x2800             CMP      R0,#+0
   \       0x7E   0xF040 0x81BF      BNE.W    ??mbedtls_gcm_self_test_3
    798                          goto exit;
    799          
    800                      if ( memcmp( buf, ct[j * 6 + i], pt_len[i] ) != 0 ||
    801                           memcmp( tag_buf, tag[j * 6 + i], 16 ) != 0 )
   \       0x82   0xF04F 0x0906      MOV      R9,#+6
   \       0x86   0xF855 0x202B      LDR      R2,[R5, R11, LSL #+2]
   \       0x8A   0xFB09 0xB00A      MLA      R0,R9,R10,R11
   \       0x8E   0xEB08 0x1180      ADD      R1,R8,R0, LSL #+6
   \       0x92   0xA80C             ADD      R0,SP,#+48
   \       0x94   0x....'....        BL       memcmp
   \       0x98   0x2800             CMP      R0,#+0
   \       0x9A   0xF040 0x81D1      BNE.W    ??mbedtls_gcm_self_test_4
   \       0x9E   0x2210             MOVS     R2,#+16
   \       0xA0   0x....'....        LDR.W    R0,??DataTable2_13
   \       0xA4   0xFB09 0xB10A      MLA      R1,R9,R10,R11
   \       0xA8   0xEB00 0x1101      ADD      R1,R0,R1, LSL #+4
   \       0xAC   0xA808             ADD      R0,SP,#+32
   \       0xAE   0x....'....        BL       memcmp
   \       0xB2   0x2800             CMP      R0,#+0
   \       0xB4   0xF040 0x81C4      BNE.W    ??mbedtls_gcm_self_test_4
    802                      {
    803                          ret = 1;
    804                          goto exit;
    805                      }
    806          
    807                      mbedtls_gcm_free( &ctx );
   \       0xB8   0xA81C             ADD      R0,SP,#+112
   \       0xBA   0x....'....        BL       mbedtls_gcm_free
    808          
    809                      if( verbose != 0 )
   \       0xBE   0x2C00             CMP      R4,#+0
   \       0xC0   0xD003             BEQ.N    ??mbedtls_gcm_self_test_5
    810                          mbedtls_printf( "passed\n\r" );
   \       0xC2   0x....'....        LDR.W    R0,??DataTable2_14
   \       0xC6   0x....'....        BL       DbgConsole_Printf
    811          
    812                      mbedtls_gcm_init( &ctx );
   \                     ??mbedtls_gcm_self_test_5: (+1)
   \       0xCA   0xA81C             ADD      R0,SP,#+112
   \       0xCC   0x....'....        BL       mbedtls_gcm_init
    813          
    814                      if( verbose != 0 )
   \       0xD0   0x2C00             CMP      R4,#+0
   \       0xD2   0xD006             BEQ.N    ??mbedtls_gcm_self_test_6
    815                          mbedtls_printf( "  AES-GCM-%3d #%d (%s): ",
    816                                          key_len, i, "dec" );
   \       0xD4   0xA3C4             ADR.N    R3,??mbedtls_gcm_self_test_0  ;; "dec"
   \       0xD6   0x465A             MOV      R2,R11
   \       0xD8   0x9907             LDR      R1,[SP, #+28]
   \       0xDA   0x....'....        LDR.W    R0,??DataTable2_15
   \       0xDE   0x....'....        BL       DbgConsole_Printf
    817          
    818                      ret = mbedtls_gcm_setkey( &ctx, cipher, key[key_index[i]],
    819                                                key_len );
   \                     ??mbedtls_gcm_self_test_6: (+1)
   \       0xE2   0x9B07             LDR      R3,[SP, #+28]
   \       0xE4   0x....'....        LDR.W    R0,??DataTable2_16
   \       0xE8   0x....'....        LDR.W    R1,??DataTable2_17
   \       0xEC   0xF851 0x102B      LDR      R1,[R1, R11, LSL #+2]
   \       0xF0   0xEB10 0x1241      ADDS     R2,R0,R1, LSL #+5
   \       0xF4   0x2102             MOVS     R1,#+2
   \       0xF6   0xA81C             ADD      R0,SP,#+112
   \       0xF8   0x....'....        BL       mbedtls_gcm_setkey
    820                      if( ret != 0 )
   \       0xFC   0x2800             CMP      R0,#+0
   \       0xFE   0xF040 0x817F      BNE.W    ??mbedtls_gcm_self_test_3
    821                          goto exit;
    822          
    823                      ret = mbedtls_gcm_crypt_and_tag( &ctx, MBEDTLS_GCM_DECRYPT,
    824                                                  pt_len[i],
    825                                                  iv[iv_index[i]], iv_len[i],
    826                                                  additional[add_index[i]], add_len[i],
    827                                                  ct[j * 6 + i], buf, 16, tag_buf );
   \      0x102   0xA808             ADD      R0,SP,#+32
   \      0x104   0x9006             STR      R0,[SP, #+24]
   \      0x106   0x2010             MOVS     R0,#+16
   \      0x108   0x9005             STR      R0,[SP, #+20]
   \      0x10A   0xA80C             ADD      R0,SP,#+48
   \      0x10C   0x9004             STR      R0,[SP, #+16]
   \      0x10E   0xFB09 0xB00A      MLA      R0,R9,R10,R11
   \      0x112   0xEB08 0x1080      ADD      R0,R8,R0, LSL #+6
   \      0x116   0x9003             STR      R0,[SP, #+12]
   \      0x118   0x....'....        LDR.W    R0,??DataTable2_7
   \      0x11C   0xF850 0x002B      LDR      R0,[R0, R11, LSL #+2]
   \      0x120   0x9002             STR      R0,[SP, #+8]
   \      0x122   0x....'....        LDR.W    R0,??DataTable2_8
   \      0x126   0x....'....        LDR.W    R1,??DataTable2_9
   \      0x12A   0xF851 0x102B      LDR      R1,[R1, R11, LSL #+2]
   \      0x12E   0xEB00 0x1081      ADD      R0,R0,R1, LSL #+6
   \      0x132   0x9001             STR      R0,[SP, #+4]
   \      0x134   0x....             LDR.N    R0,??DataTable2_10
   \      0x136   0xF850 0x002B      LDR      R0,[R0, R11, LSL #+2]
   \      0x13A   0x9000             STR      R0,[SP, #+0]
   \      0x13C   0x....             LDR.N    R0,??DataTable2_11
   \      0x13E   0x....             LDR.N    R1,??DataTable2_12
   \      0x140   0xF851 0x102B      LDR      R1,[R1, R11, LSL #+2]
   \      0x144   0xEB10 0x1381      ADDS     R3,R0,R1, LSL #+6
   \      0x148   0xF855 0x202B      LDR      R2,[R5, R11, LSL #+2]
   \      0x14C   0x2100             MOVS     R1,#+0
   \      0x14E   0xA81C             ADD      R0,SP,#+112
   \      0x150   0x....'....        BL       mbedtls_gcm_crypt_and_tag
    828          
    829                      if( ret != 0 )
   \      0x154   0x2800             CMP      R0,#+0
   \      0x156   0xF040 0x8153      BNE.W    ??mbedtls_gcm_self_test_3
    830                          goto exit;
    831          
    832                      if( memcmp( buf, pt[pt_index[i]], pt_len[i] ) != 0 ||
    833                          memcmp( tag_buf, tag[j * 6 + i], 16 ) != 0 )
   \      0x15A   0xF855 0x202B      LDR      R2,[R5, R11, LSL #+2]
   \      0x15E   0xF856 0x002B      LDR      R0,[R6, R11, LSL #+2]
   \      0x162   0xEB17 0x1180      ADDS     R1,R7,R0, LSL #+6
   \      0x166   0xA80C             ADD      R0,SP,#+48
   \      0x168   0x....'....        BL       memcmp
   \      0x16C   0x2800             CMP      R0,#+0
   \      0x16E   0xF040 0x8167      BNE.W    ??mbedtls_gcm_self_test_4
   \      0x172   0x2210             MOVS     R2,#+16
   \      0x174   0x....             LDR.N    R0,??DataTable2_13
   \      0x176   0xFB09 0xB10A      MLA      R1,R9,R10,R11
   \      0x17A   0xEB00 0x1101      ADD      R1,R0,R1, LSL #+4
   \      0x17E   0xA808             ADD      R0,SP,#+32
   \      0x180   0x....'....        BL       memcmp
   \      0x184   0x2800             CMP      R0,#+0
   \      0x186   0xF040 0x815B      BNE.W    ??mbedtls_gcm_self_test_4
    834                      {
    835                          ret = 1;
    836                          goto exit;
    837                      }
    838          
    839                      mbedtls_gcm_free( &ctx );
   \      0x18A   0xA81C             ADD      R0,SP,#+112
   \      0x18C   0x....'....        BL       mbedtls_gcm_free
    840          
    841                      if( verbose != 0 )
   \      0x190   0x2C00             CMP      R4,#+0
   \      0x192   0xD002             BEQ.N    ??mbedtls_gcm_self_test_7
    842                          mbedtls_printf( "passed\n\r" );
   \      0x194   0x....             LDR.N    R0,??DataTable2_14
   \      0x196   0x....'....        BL       DbgConsole_Printf
    843          
    844                      mbedtls_gcm_init( &ctx );
   \                     ??mbedtls_gcm_self_test_7: (+1)
   \      0x19A   0xA81C             ADD      R0,SP,#+112
   \      0x19C   0x....'....        BL       mbedtls_gcm_init
    845          
    846                      if( verbose != 0 )
   \      0x1A0   0x2C00             CMP      R4,#+0
   \      0x1A2   0xD005             BEQ.N    ??mbedtls_gcm_self_test_8
    847                          mbedtls_printf( "  AES-GCM-%3d #%d split (%s): ",
    848                                          key_len, i, "enc" );
   \      0x1A4   0x....             ADR.N    R3,??DataTable2  ;; "enc"
   \      0x1A6   0x465A             MOV      R2,R11
   \      0x1A8   0x9907             LDR      R1,[SP, #+28]
   \      0x1AA   0x....             LDR.N    R0,??DataTable2_18
   \      0x1AC   0x....'....        BL       DbgConsole_Printf
    849          
    850                      ret = mbedtls_gcm_setkey( &ctx, cipher, key[key_index[i]],
    851                                                key_len );
   \                     ??mbedtls_gcm_self_test_8: (+1)
   \      0x1B0   0x9B07             LDR      R3,[SP, #+28]
   \      0x1B2   0x....             LDR.N    R0,??DataTable2_16
   \      0x1B4   0x....             LDR.N    R1,??DataTable2_17
   \      0x1B6   0xF851 0x102B      LDR      R1,[R1, R11, LSL #+2]
   \      0x1BA   0xEB10 0x1241      ADDS     R2,R0,R1, LSL #+5
   \      0x1BE   0x2102             MOVS     R1,#+2
   \      0x1C0   0xA81C             ADD      R0,SP,#+112
   \      0x1C2   0x....'....        BL       mbedtls_gcm_setkey
    852                      if( ret != 0 )
   \      0x1C6   0x2800             CMP      R0,#+0
   \      0x1C8   0xF040 0x811A      BNE.W    ??mbedtls_gcm_self_test_3
    853                          goto exit;
    854          
    855                      ret = mbedtls_gcm_starts( &ctx, MBEDTLS_GCM_ENCRYPT,
    856                                                iv[iv_index[i]], iv_len[i],
    857                                                additional[add_index[i]], add_len[i] );
   \      0x1CC   0x....             LDR.N    R0,??DataTable2_7
   \      0x1CE   0xF850 0x002B      LDR      R0,[R0, R11, LSL #+2]
   \      0x1D2   0x9001             STR      R0,[SP, #+4]
   \      0x1D4   0x....             LDR.N    R0,??DataTable2_8
   \      0x1D6   0x....             LDR.N    R1,??DataTable2_9
   \      0x1D8   0xF851 0x102B      LDR      R1,[R1, R11, LSL #+2]
   \      0x1DC   0xEB00 0x1081      ADD      R0,R0,R1, LSL #+6
   \      0x1E0   0x9000             STR      R0,[SP, #+0]
   \      0x1E2   0x....             LDR.N    R0,??DataTable2_10
   \      0x1E4   0xF850 0x302B      LDR      R3,[R0, R11, LSL #+2]
   \      0x1E8   0x....             LDR.N    R0,??DataTable2_11
   \      0x1EA   0x....             LDR.N    R1,??DataTable2_12
   \      0x1EC   0xF851 0x102B      LDR      R1,[R1, R11, LSL #+2]
   \      0x1F0   0xEB10 0x1281      ADDS     R2,R0,R1, LSL #+6
   \      0x1F4   0x2101             MOVS     R1,#+1
   \      0x1F6   0xA81C             ADD      R0,SP,#+112
   \      0x1F8   0x....'....        BL       mbedtls_gcm_starts
    858                      if( ret != 0 )
   \      0x1FC   0x2800             CMP      R0,#+0
   \      0x1FE   0xF040 0x80FF      BNE.W    ??mbedtls_gcm_self_test_3
    859                          goto exit;
    860          
    861                      if( pt_len[i] > 32 )
   \      0x202   0xF855 0x002B      LDR      R0,[R5, R11, LSL #+2]
   \      0x206   0x2821             CMP      R0,#+33
   \      0x208   0xAB0C             ADD      R3,SP,#+48
   \      0x20A   0xF856 0x002B      LDR      R0,[R6, R11, LSL #+2]
   \      0x20E   0xF0C0 0x80ED      BCC.W    ??mbedtls_gcm_self_test_9
    862                      {
    863                          size_t rest_len = pt_len[i] - 32;
    864                          ret = mbedtls_gcm_update( &ctx, 32, pt[pt_index[i]], buf );
   \      0x212   0xEB17 0x1280      ADDS     R2,R7,R0, LSL #+6
   \      0x216   0x2120             MOVS     R1,#+32
   \      0x218   0xA81C             ADD      R0,SP,#+112
   \      0x21A   0x....'....        BL       mbedtls_gcm_update
    865                          if( ret != 0 )
   \      0x21E   0x2800             CMP      R0,#+0
   \      0x220   0xF040 0x80EE      BNE.W    ??mbedtls_gcm_self_test_3
    866                              goto exit;
    867          
    868                          ret = mbedtls_gcm_update( &ctx, rest_len, pt[pt_index[i]] + 32,
    869                                            buf + 32 );
   \      0x224   0xAB14             ADD      R3,SP,#+80
   \      0x226   0xF856 0x002B      LDR      R0,[R6, R11, LSL #+2]
   \      0x22A   0xEB07 0x1080      ADD      R0,R7,R0, LSL #+6
   \      0x22E   0xF100 0x0220      ADD      R2,R0,#+32
   \      0x232   0xF855 0x102B      LDR      R1,[R5, R11, LSL #+2]
   \      0x236   0x3920             SUBS     R1,R1,#+32
   \      0x238   0xA81C             ADD      R0,SP,#+112
   \      0x23A   0x....'....        BL       mbedtls_gcm_update
    870                          if( ret != 0 )
   \      0x23E   0x2800             CMP      R0,#+0
   \      0x240   0xF040 0x80DE      BNE.W    ??mbedtls_gcm_self_test_3
    871                              goto exit;
    872                      }
    873                      else
    874                      {
    875                          ret = mbedtls_gcm_update( &ctx, pt_len[i], pt[pt_index[i]], buf );
    876                          if( ret != 0 )
    877                              goto exit;
    878                      }
    879          
    880                      ret = mbedtls_gcm_finish( &ctx, tag_buf, 16 );
   \                     ??mbedtls_gcm_self_test_10: (+1)
   \      0x244   0x2210             MOVS     R2,#+16
   \      0x246   0xA908             ADD      R1,SP,#+32
   \      0x248   0xA81C             ADD      R0,SP,#+112
   \      0x24A   0x....'....        BL       mbedtls_gcm_finish
    881                      if( ret != 0 )
   \      0x24E   0x2800             CMP      R0,#+0
   \      0x250   0xF040 0x80D6      BNE.W    ??mbedtls_gcm_self_test_3
    882                          goto exit;
    883          
    884                      if( memcmp( buf, ct[j * 6 + i], pt_len[i] ) != 0 ||
    885                          memcmp( tag_buf, tag[j * 6 + i], 16 ) != 0 )
   \      0x254   0xF855 0x202B      LDR      R2,[R5, R11, LSL #+2]
   \      0x258   0xFB09 0xB00A      MLA      R0,R9,R10,R11
   \      0x25C   0xEB08 0x1180      ADD      R1,R8,R0, LSL #+6
   \      0x260   0xA80C             ADD      R0,SP,#+48
   \      0x262   0x....'....        BL       memcmp
   \      0x266   0x2800             CMP      R0,#+0
   \      0x268   0xF040 0x80EA      BNE.W    ??mbedtls_gcm_self_test_4
   \      0x26C   0x2210             MOVS     R2,#+16
   \      0x26E   0x....             LDR.N    R0,??DataTable2_13
   \      0x270   0xFB09 0xB10A      MLA      R1,R9,R10,R11
   \      0x274   0xEB00 0x1101      ADD      R1,R0,R1, LSL #+4
   \      0x278   0xA808             ADD      R0,SP,#+32
   \      0x27A   0x....'....        BL       memcmp
   \      0x27E   0x2800             CMP      R0,#+0
   \      0x280   0xF040 0x80DE      BNE.W    ??mbedtls_gcm_self_test_4
    886                      {
    887                          ret = 1;
    888                          goto exit;
    889                      }
    890          
    891                      mbedtls_gcm_free( &ctx );
   \      0x284   0xA81C             ADD      R0,SP,#+112
   \      0x286   0x....'....        BL       mbedtls_gcm_free
    892          
    893                      if( verbose != 0 )
   \      0x28A   0x2C00             CMP      R4,#+0
   \      0x28C   0xD002             BEQ.N    ??mbedtls_gcm_self_test_11
    894                          mbedtls_printf( "passed\n\r" );
   \      0x28E   0x....             LDR.N    R0,??DataTable2_14
   \      0x290   0x....'....        BL       DbgConsole_Printf
    895          
    896                      mbedtls_gcm_init( &ctx );
   \                     ??mbedtls_gcm_self_test_11: (+1)
   \      0x294   0xA81C             ADD      R0,SP,#+112
   \      0x296   0x....'....        BL       mbedtls_gcm_init
    897          
    898                      if( verbose != 0 )
   \      0x29A   0x2C00             CMP      R4,#+0
   \      0x29C   0xD005             BEQ.N    ??mbedtls_gcm_self_test_12
    899                          mbedtls_printf( "  AES-GCM-%3d #%d split (%s): ",
    900                                          key_len, i, "dec" );
   \      0x29E   0xA352             ADR.N    R3,??mbedtls_gcm_self_test_0  ;; "dec"
   \      0x2A0   0x465A             MOV      R2,R11
   \      0x2A2   0x9907             LDR      R1,[SP, #+28]
   \      0x2A4   0x....             LDR.N    R0,??DataTable2_18
   \      0x2A6   0x....'....        BL       DbgConsole_Printf
    901          
    902                      ret = mbedtls_gcm_setkey( &ctx, cipher, key[key_index[i]],
    903                                                key_len );
   \                     ??mbedtls_gcm_self_test_12: (+1)
   \      0x2AA   0x9B07             LDR      R3,[SP, #+28]
   \      0x2AC   0x....             LDR.N    R0,??DataTable2_16
   \      0x2AE   0x....             LDR.N    R1,??DataTable2_17
   \      0x2B0   0xF851 0x102B      LDR      R1,[R1, R11, LSL #+2]
   \      0x2B4   0xEB10 0x1241      ADDS     R2,R0,R1, LSL #+5
   \      0x2B8   0x2102             MOVS     R1,#+2
   \      0x2BA   0xA81C             ADD      R0,SP,#+112
   \      0x2BC   0x....'....        BL       mbedtls_gcm_setkey
    904                      if( ret != 0 )
   \      0x2C0   0x2800             CMP      R0,#+0
   \      0x2C2   0xF040 0x809D      BNE.W    ??mbedtls_gcm_self_test_3
    905                          goto exit;
    906          
    907                      ret = mbedtls_gcm_starts( &ctx, MBEDTLS_GCM_DECRYPT,
    908                                        iv[iv_index[i]], iv_len[i],
    909                                        additional[add_index[i]], add_len[i] );
   \      0x2C6   0x....             LDR.N    R0,??DataTable2_7
   \      0x2C8   0xF850 0x002B      LDR      R0,[R0, R11, LSL #+2]
   \      0x2CC   0x9001             STR      R0,[SP, #+4]
   \      0x2CE   0x....             LDR.N    R0,??DataTable2_8
   \      0x2D0   0x....             LDR.N    R1,??DataTable2_9
   \      0x2D2   0xF851 0x102B      LDR      R1,[R1, R11, LSL #+2]
   \      0x2D6   0xEB00 0x1081      ADD      R0,R0,R1, LSL #+6
   \      0x2DA   0x9000             STR      R0,[SP, #+0]
   \      0x2DC   0x....             LDR.N    R0,??DataTable2_10
   \      0x2DE   0xF850 0x302B      LDR      R3,[R0, R11, LSL #+2]
   \      0x2E2   0x....             LDR.N    R0,??DataTable2_11
   \      0x2E4   0x....             LDR.N    R1,??DataTable2_12
   \      0x2E6   0xF851 0x102B      LDR      R1,[R1, R11, LSL #+2]
   \      0x2EA   0xEB10 0x1281      ADDS     R2,R0,R1, LSL #+6
   \      0x2EE   0x2100             MOVS     R1,#+0
   \      0x2F0   0xA81C             ADD      R0,SP,#+112
   \      0x2F2   0x....'....        BL       mbedtls_gcm_starts
    910                      if( ret != 0 )
   \      0x2F6   0x2800             CMP      R0,#+0
   \      0x2F8   0xF040 0x8082      BNE.W    ??mbedtls_gcm_self_test_3
    911                          goto exit;
    912          
    913                      if( pt_len[i] > 32 )
   \      0x2FC   0xF855 0x002B      LDR      R0,[R5, R11, LSL #+2]
   \      0x300   0x2821             CMP      R0,#+33
   \      0x302   0xAB0C             ADD      R3,SP,#+48
   \      0x304   0xFB09 0xB00A      MLA      R0,R9,R10,R11
   \      0x308   0xD37C             BCC.N    ??mbedtls_gcm_self_test_13
    914                      {
    915                          size_t rest_len = pt_len[i] - 32;
    916                          ret = mbedtls_gcm_update( &ctx, 32, ct[j * 6 + i], buf );
   \      0x30A   0xEB08 0x1280      ADD      R2,R8,R0, LSL #+6
   \      0x30E   0x2120             MOVS     R1,#+32
   \      0x310   0xA81C             ADD      R0,SP,#+112
   \      0x312   0x....'....        BL       mbedtls_gcm_update
    917                          if( ret != 0 )
   \      0x316   0x2800             CMP      R0,#+0
   \      0x318   0xD172             BNE.N    ??mbedtls_gcm_self_test_3
    918                              goto exit;
    919          
    920                          ret = mbedtls_gcm_update( &ctx, rest_len, ct[j * 6 + i] + 32,
    921                                                    buf + 32 );
   \      0x31A   0xAB14             ADD      R3,SP,#+80
   \      0x31C   0xFB09 0xB00A      MLA      R0,R9,R10,R11
   \      0x320   0xEB08 0x1080      ADD      R0,R8,R0, LSL #+6
   \      0x324   0xF100 0x0220      ADD      R2,R0,#+32
   \      0x328   0xF855 0x102B      LDR      R1,[R5, R11, LSL #+2]
   \      0x32C   0x3920             SUBS     R1,R1,#+32
   \      0x32E   0xA81C             ADD      R0,SP,#+112
   \      0x330   0x....'....        BL       mbedtls_gcm_update
    922                          if( ret != 0 )
   \      0x334   0x2800             CMP      R0,#+0
   \      0x336   0xD163             BNE.N    ??mbedtls_gcm_self_test_3
    923                              goto exit;
    924                      }
    925                      else
    926                      {
    927                          ret = mbedtls_gcm_update( &ctx, pt_len[i], ct[j * 6 + i],
    928                                                    buf );
    929                          if( ret != 0 )
    930                              goto exit;
    931                      }
    932          
    933                      ret = mbedtls_gcm_finish( &ctx, tag_buf, 16 );
   \                     ??mbedtls_gcm_self_test_14: (+1)
   \      0x338   0x2210             MOVS     R2,#+16
   \      0x33A   0xA908             ADD      R1,SP,#+32
   \      0x33C   0xA81C             ADD      R0,SP,#+112
   \      0x33E   0x....'....        BL       mbedtls_gcm_finish
    934                      if( ret != 0 )
   \      0x342   0x2800             CMP      R0,#+0
   \      0x344   0xD15C             BNE.N    ??mbedtls_gcm_self_test_3
    935                          goto exit;
    936          
    937                      if( memcmp( buf, pt[pt_index[i]], pt_len[i] ) != 0 ||
    938                          memcmp( tag_buf, tag[j * 6 + i], 16 ) != 0 )
   \      0x346   0xF855 0x202B      LDR      R2,[R5, R11, LSL #+2]
   \      0x34A   0xF856 0x002B      LDR      R0,[R6, R11, LSL #+2]
   \      0x34E   0xEB17 0x1180      ADDS     R1,R7,R0, LSL #+6
   \      0x352   0xA80C             ADD      R0,SP,#+48
   \      0x354   0x....'....        BL       memcmp
   \      0x358   0x2800             CMP      R0,#+0
   \      0x35A   0xD171             BNE.N    ??mbedtls_gcm_self_test_4
   \      0x35C   0x2210             MOVS     R2,#+16
   \      0x35E   0x....             LDR.N    R0,??DataTable2_13
   \      0x360   0xFB09 0xB90A      MLA      R9,R9,R10,R11
   \      0x364   0xEB00 0x1109      ADD      R1,R0,R9, LSL #+4
   \      0x368   0xA808             ADD      R0,SP,#+32
   \      0x36A   0x....'....        BL       memcmp
   \      0x36E   0x2800             CMP      R0,#+0
   \      0x370   0xD166             BNE.N    ??mbedtls_gcm_self_test_4
    939                      {
    940                          ret = 1;
    941                          goto exit;
    942                      }
    943          
    944                      mbedtls_gcm_free( &ctx );
   \      0x372   0xA81C             ADD      R0,SP,#+112
   \      0x374   0x....'....        BL       mbedtls_gcm_free
    945          
    946                      if( verbose != 0 )
   \      0x378   0x2C00             CMP      R4,#+0
   \      0x37A   0xD002             BEQ.N    ??mbedtls_gcm_self_test_15
    947                          mbedtls_printf( "passed\n\r" );
   \      0x37C   0x....             LDR.N    R0,??DataTable2_14
   \      0x37E   0x....'....        BL       DbgConsole_Printf
   \                     ??mbedtls_gcm_self_test_15: (+1)
   \      0x382   0xF10B 0x0B01      ADD      R11,R11,#+1
   \                     ??mbedtls_gcm_self_test_16: (+1)
   \      0x386   0xF1BB 0x0F06      CMP      R11,#+6
   \      0x38A   0xDA20             BGE.N    ??mbedtls_gcm_self_test_17
   \      0x38C   0xA81C             ADD      R0,SP,#+112
   \      0x38E   0x....'....        BL       mbedtls_gcm_init
   \      0x392   0x2C00             CMP      R4,#+0
   \      0x394   0xD005             BEQ.N    ??mbedtls_gcm_self_test_18
   \      0x396   0x....             ADR.N    R3,??DataTable2  ;; "enc"
   \      0x398   0x465A             MOV      R2,R11
   \      0x39A   0x9907             LDR      R1,[SP, #+28]
   \      0x39C   0x....             LDR.N    R0,??DataTable2_15
   \      0x39E   0x....'....        BL       DbgConsole_Printf
   \                     ??mbedtls_gcm_self_test_18: (+1)
   \      0x3A2   0x9B07             LDR      R3,[SP, #+28]
   \      0x3A4   0x....             LDR.N    R0,??DataTable2_16
   \      0x3A6   0x....             LDR.N    R1,??DataTable2_17
   \      0x3A8   0xF851 0x102B      LDR      R1,[R1, R11, LSL #+2]
   \      0x3AC   0xEB10 0x1241      ADDS     R2,R0,R1, LSL #+5
   \      0x3B0   0x2102             MOVS     R1,#+2
   \      0x3B2   0xA81C             ADD      R0,SP,#+112
   \      0x3B4   0x....'....        BL       mbedtls_gcm_setkey
   \      0x3B8   0xF110 0x0F23      CMN      R0,#+35
   \      0x3BC   0xF47F 0xAE2F      BNE.W    ??mbedtls_gcm_self_test_2
   \      0x3C0   0x9907             LDR      R1,[SP, #+28]
   \      0x3C2   0x29C0             CMP      R1,#+192
   \      0x3C4   0xF47F 0xAE2B      BNE.W    ??mbedtls_gcm_self_test_2
   \      0x3C8   0x....             LDR.N    R0,??DataTable2_19
   \      0x3CA   0x....'....        BL       DbgConsole_Printf
   \                     ??mbedtls_gcm_self_test_17: (+1)
   \      0x3CE   0xF10A 0x0A01      ADD      R10,R10,#+1
   \                     ??mbedtls_gcm_self_test_1: (+1)
   \      0x3D2   0xF1BA 0x0F03      CMP      R10,#+3
   \      0x3D6   0xDA1F             BGE.N    ??mbedtls_gcm_self_test_19
   \      0x3D8   0xEA4F 0x108A      LSL      R0,R10,#+6
   \      0x3DC   0x3080             ADDS     R0,R0,#+128
   \      0x3DE   0xF04F 0x0B00      MOV      R11,#+0
   \      0x3E2   0x9007             STR      R0,[SP, #+28]
   \      0x3E4   0xE7CF             B.N      ??mbedtls_gcm_self_test_16
   \      0x3E6   0xBF00             Nop      
   \                     ??mbedtls_gcm_self_test_0:
   \      0x3E8   0x64 0x65          DC8      "dec"
   \              0x63 0x00    
   \                     ??mbedtls_gcm_self_test_9: (+1)
   \      0x3EC   0xEB17 0x1280      ADDS     R2,R7,R0, LSL #+6
   \      0x3F0   0xF855 0x102B      LDR      R1,[R5, R11, LSL #+2]
   \      0x3F4   0xA81C             ADD      R0,SP,#+112
   \      0x3F6   0x....'....        BL       mbedtls_gcm_update
   \      0x3FA   0x2800             CMP      R0,#+0
   \      0x3FC   0xF43F 0xAF22      BEQ.W    ??mbedtls_gcm_self_test_10
   \                     ??mbedtls_gcm_self_test_3: (+1)
   \      0x400   0x4605             MOV      R5,R0
   \      0x402   0xE00F             B.N      ??mbedtls_gcm_self_test_20
   \                     ??mbedtls_gcm_self_test_13: (+1)
   \      0x404   0xEB08 0x1280      ADD      R2,R8,R0, LSL #+6
   \      0x408   0xF855 0x102B      LDR      R1,[R5, R11, LSL #+2]
   \      0x40C   0xA81C             ADD      R0,SP,#+112
   \      0x40E   0x....'....        BL       mbedtls_gcm_update
   \      0x412   0x2800             CMP      R0,#+0
   \      0x414   0xD1F4             BNE.N    ??mbedtls_gcm_self_test_3
   \      0x416   0xE78F             B.N      ??mbedtls_gcm_self_test_14
    948                  }
    949              }
    950          
    951              if( verbose != 0 )
   \                     ??mbedtls_gcm_self_test_19: (+1)
   \      0x418   0x2C00             CMP      R4,#+0
   \      0x41A   0xD002             BEQ.N    ??mbedtls_gcm_self_test_21
    952                  mbedtls_printf( "\n\r" );
   \      0x41C   0x....             ADR.N    R0,??DataTable2_1  ;; 0x0A, 0x0D, 0x00, 0x00
   \      0x41E   0x....'....        BL       DbgConsole_Printf
    953          
    954              ret = 0;
   \                     ??mbedtls_gcm_self_test_21: (+1)
   \      0x422   0x2500             MOVS     R5,#+0
    955          
    956          exit:
    957              if( ret != 0 )
   \                     ??mbedtls_gcm_self_test_20: (+1)
   \      0x424   0x2D00             CMP      R5,#+0
   \      0x426   0xD007             BEQ.N    ??mbedtls_gcm_self_test_22
    958              {
    959                  if( verbose != 0 )
   \      0x428   0x2C00             CMP      R4,#+0
   \      0x42A   0xD002             BEQ.N    ??mbedtls_gcm_self_test_23
    960                      mbedtls_printf( "failed\n\r" );
   \      0x42C   0x....             LDR.N    R0,??DataTable2_20
   \      0x42E   0x....'....        BL       DbgConsole_Printf
    961                  mbedtls_gcm_free( &ctx );
   \                     ??mbedtls_gcm_self_test_23: (+1)
   \      0x432   0xA81C             ADD      R0,SP,#+112
   \      0x434   0x....'....        BL       mbedtls_gcm_free
    962              }
    963          
    964              return( ret );
   \                     ??mbedtls_gcm_self_test_22: (+1)
   \      0x438   0x4628             MOV      R0,R5
   \      0x43A   0xB07F             ADD      SP,SP,#+508
   \      0x43C   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   \                     ??mbedtls_gcm_self_test_4: (+1)
   \      0x440   0x2501             MOVS     R5,#+1
   \      0x442   0xE7EF             B.N      ??mbedtls_gcm_self_test_20
    965          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \        0x0   0x65 0x6E          DC8      "enc"
   \              0x63 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \        0x0   0x0A 0x0D          DC8      0x0A, 0x0D, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \        0x0   0x....'....        DC32     last4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \        0x0   0x....'....        DC32     pt_len

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \        0x0   0x....'....        DC32     pt_index

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \        0x0   0x....'....        DC32     pt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \        0x0   0x....'....        DC32     ct

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \        0x0   0x....'....        DC32     add_len

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \        0x0   0x....'....        DC32     additional

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_9:
   \        0x0   0x....'....        DC32     add_index

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_10:
   \        0x0   0x....'....        DC32     iv_len

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_11:
   \        0x0   0x....'....        DC32     iv

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_12:
   \        0x0   0x....'....        DC32     iv_index

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_13:
   \        0x0   0x....'....        DC32     tag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_14:
   \        0x0   0x....'....        DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_15:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_16:
   \        0x0   0x....'....        DC32     key

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_17:
   \        0x0   0x....'....        DC32     key_index

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_18:
   \        0x0   0x....'....        DC32     ?_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_19:
   \        0x0   0x....'....        DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_20:
   \        0x0   0x....'....        DC32     ?_7

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x20 0x20          DC8 "  AES-GCM-%3d #%d (%s): "
   \              0x41 0x45    
   \              0x53 0x2D    
   \              0x47 0x43    
   \              0x4D 0x2D    
   \              0x25 0x33    
   \              0x64 0x20    
   \              0x23 0x25    
   \              0x64 0x20    
   \              0x28 0x25    
   \              0x73 0x29    
   \              0x3A 0x20    
   \              0x00         
   \       0x19   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \        0x0   0x65 0x6E          DC8 "enc"
   \              0x63 0x00    

   \                                 In section .rodata, align 4
   \                     ?_2:
   \        0x0   0x73 0x6B          DC8 "skipped\012\015"
   \              0x69 0x70    
   \              0x70 0x65    
   \              0x64 0x0A    
   \              0x0D 0x00    
   \        0xA   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_3:
   \        0x0   0x70 0x61          DC8 "passed\012\015"
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x0A 0x0D    
   \              0x00         
   \        0x9   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \        0x0   0x64 0x65          DC8 "dec"
   \              0x63 0x00    

   \                                 In section .rodata, align 4
   \                     ?_5:
   \        0x0   0x20 0x20          DC8 "  AES-GCM-%3d #%d split (%s): "
   \              0x41 0x45    
   \              0x53 0x2D    
   \              0x47 0x43    
   \              0x4D 0x2D    
   \              0x25 0x33    
   \              0x64 0x20    
   \              0x23 0x25    
   \              0x64 0x20    
   \              0x73 0x70    
   \              0x6C 0x69    
   \              0x74 0x20    
   \              0x28 0x25    
   \              0x73 0x29    
   \              0x3A 0x20    
   \              0x00         
   \       0x1F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \        0x0   0x0A 0x0D          DC8 "\012\015"
   \              0x00         
   \        0x3   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_7:
   \        0x0   0x66 0x61          DC8 "failed\012\015"
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x0A 0x0D    
   \              0x00         
   \        0x9   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    966          
    967          #endif /* MBEDTLS_SELF_TEST && MBEDTLS_AES_C */
    968          
    969          #endif /* MBEDTLS_GCM_C */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      56   gcm_gen_table
        56   -> __aeabi_memset4
        56   -> mbedtls_cipher_update
      32   gcm_mult
      64   mbedtls_gcm_auth_decrypt
        64   -> mbedtls_gcm_crypt_and_tag
        64   -> mbedtls_platform_zeroize
      24   mbedtls_gcm_crypt_and_tag
        24   -> mbedtls_gcm_finish
        24   -> mbedtls_gcm_starts
        24   -> mbedtls_gcm_update
      48   mbedtls_gcm_finish
        48   -> __aeabi_memcpy
        48   -> __aeabi_memset4
        48   -> gcm_mult
       8   mbedtls_gcm_free
         8   -> mbedtls_cipher_free
         0   -> mbedtls_platform_zeroize
       0   mbedtls_gcm_init
         0   -> __aeabi_memset4
     544   mbedtls_gcm_self_test
       544   -> DbgConsole_Printf
       544   -> mbedtls_gcm_crypt_and_tag
       544   -> mbedtls_gcm_finish
       544   -> mbedtls_gcm_free
       544   -> mbedtls_gcm_init
       544   -> mbedtls_gcm_setkey
       544   -> mbedtls_gcm_starts
       544   -> mbedtls_gcm_update
       544   -> memcmp
      24   mbedtls_gcm_setkey
        24   -> gcm_gen_table
        24   -> mbedtls_cipher_free
        24   -> mbedtls_cipher_info_from_values
        24   -> mbedtls_cipher_setkey
        24   -> mbedtls_cipher_setup
      48   mbedtls_gcm_starts
        48   -> __aeabi_memcpy
        48   -> __aeabi_memset4
        48   -> gcm_mult
        48   -> mbedtls_cipher_update
      56   mbedtls_gcm_update
        56   -> gcm_mult
        56   -> mbedtls_cipher_update


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_10
       4  ??DataTable2_11
       4  ??DataTable2_12
       4  ??DataTable2_13
       4  ??DataTable2_14
       4  ??DataTable2_15
       4  ??DataTable2_16
       4  ??DataTable2_17
       4  ??DataTable2_18
       4  ??DataTable2_19
       4  ??DataTable2_2
       4  ??DataTable2_20
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable2_9
      28  ?_0
       4  ?_1
      12  ?_2
      12  ?_3
       4  ?_4
      32  ?_5
       4  ?_6
      12  ?_7
      24  add_index
      24  add_len
     384  additional
    1152  ct
     318  gcm_gen_table
     326  gcm_mult
     384  iv
      24  iv_index
      24  iv_len
     192  key
      24  key_index
     128  last4
     102  mbedtls_gcm_auth_decrypt
      62  mbedtls_gcm_crypt_and_tag
     264  mbedtls_gcm_finish
      22  mbedtls_gcm_free
      10  mbedtls_gcm_init
    1092  mbedtls_gcm_self_test
      82  mbedtls_gcm_setkey
     334  mbedtls_gcm_starts
     264  mbedtls_gcm_update
     384  pt
      24  pt_index
      24  pt_len
     288  tag

 
 3 188 bytes in section .rodata
 2 960 bytes in section .text
 
 2 960 bytes of CODE  memory
 3 188 bytes of CONST memory

Errors: none
Warnings: none
