###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.3.193/W32 for ARM         10/Jun/2019  13:48:26
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\Development\smart_washing_machine_3080\mbedtls\library\hmac_drbg.c
#    Command line =  
#        -f C:\Users\nxf42695\AppData\Local\Temp\1\EWF6D5.tmp
#        (C:\Development\smart_washing_machine_3080\mbedtls\library\hmac_drbg.c
#        -D DEBUG -D USE_RTOS -D XIP_EXTERNAL_FLASH=1 -D
#        XIP_BOOT_HEADER_ENABLE=1 -D CPU_MIMXRT1052DVL6B -D FSL_RTOS_FREE_RTOS
#        -D PRINTF_ADVANCED_ENABLE -D
#        "MBEDTLS_CONFIG_FILE=\"ksdk_mbedtls_config.h\"" -lC
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list -lA
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list
#        --diag_suppress Pa082,Pa050 -o
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_d16 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" --preinclude
#        C:\Development\smart_washing_machine_3080/source\app_preinclude.h -I
#        C:\Development\smart_washing_machine_3080/board\ -I
#        C:\Development\smart_washing_machine_3080/source\ -I
#        C:\Development\smart_washing_machine_3080/CMSIS\ -I
#        C:\Development\smart_washing_machine_3080/amazon-freertos/freertos/portable\
#        -I C:\Development\smart_washing_machine_3080/amazon-freertos/include\
#        -I C:\Development\smart_washing_machine_3080/component/lists\ -I
#        C:\Development\smart_washing_machine_3080/component/serial_manager\ -I
#        C:\Development\smart_washing_machine_3080/component/uart\ -I
#        C:\Development\smart_washing_machine_3080/component/kv\ -I
#        C:\Development\smart_washing_machine_3080/component/kv/include\ -I
#        C:\Development\smart_washing_machine_3080/device\ -I
#        C:\Development\smart_washing_machine_3080/doc\ -I
#        C:\Development\smart_washing_machine_3080/drivers\ -I
#        C:\Development\smart_washing_machine_3080/src\ -I
#        C:\Development\smart_washing_machine_3080/startup\ -I
#        C:\Development\smart_washing_machine_3080/utilities\ -I
#        C:\Development\smart_washing_machine_3080/xip\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\atm\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_model\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_sign\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\infra\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\mqtt\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\external_libs\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\coap_cloud\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\CoAPPacket\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\server\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\os\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\awss_reset\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\mbedtls\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\ -I
#        C:\Development\smart_washing_machine_3080\mbedtls\port\ksdk\ -Om)
#    Locale       =  C
#    List file    =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list\hmac_drbg.lst
#    Object file  =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj\hmac_drbg.o
#
###############################################################################

C:\Development\smart_washing_machine_3080\mbedtls\library\hmac_drbg.c
      1          /*
      2           *  HMAC_DRBG implementation (NIST SP 800-90)
      3           *
      4           *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
      5           *  SPDX-License-Identifier: Apache-2.0
      6           *
      7           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
      8           *  not use this file except in compliance with the License.
      9           *  You may obtain a copy of the License at
     10           *
     11           *  http://www.apache.org/licenses/LICENSE-2.0
     12           *
     13           *  Unless required by applicable law or agreed to in writing, software
     14           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     15           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     16           *  See the License for the specific language governing permissions and
     17           *  limitations under the License.
     18           *
     19           *  This file is part of mbed TLS (https://tls.mbed.org)
     20           */
     21          
     22          /*
     23           *  The NIST SP 800-90A DRBGs are described in the following publication.
     24           *  http://csrc.nist.gov/publications/nistpubs/800-90A/SP800-90A.pdf
     25           *  References below are based on rev. 1 (January 2012).
     26           */
     27          
     28          #if !defined(MBEDTLS_CONFIG_FILE)
     29          #include "mbedtls/config.h"
     30          #else
     31          #include MBEDTLS_CONFIG_FILE
     32          #endif
     33          
     34          #if defined(MBEDTLS_HMAC_DRBG_C)
     35          
     36          #include "mbedtls/hmac_drbg.h"
     37          #include "mbedtls/platform_util.h"
     38          
     39          #include <string.h>
     40          
     41          #if defined(MBEDTLS_FS_IO)
     42          #include <stdio.h>
     43          #endif
     44          
     45          #if defined(MBEDTLS_SELF_TEST)
     46          #if defined(MBEDTLS_PLATFORM_C)
     47          #include "mbedtls/platform.h"
     48          #else
     49          #include <stdio.h>
     50          #define mbedtls_printf printf
     51          #endif /* MBEDTLS_SELF_TEST */
     52          #endif /* MBEDTLS_PLATFORM_C */
     53          
     54          /*
     55           * HMAC_DRBG context initialization
     56           */

   \                                 In section .text, align 2, keep-with-next
     57          void mbedtls_hmac_drbg_init( mbedtls_hmac_drbg_context *ctx )
     58          {
     59              memset( ctx, 0, sizeof( mbedtls_hmac_drbg_context ) );
   \                     mbedtls_hmac_drbg_init: (+1)
   \        0x0   0x2200             MOVS     R2,#+0
   \        0x2   0x2164             MOVS     R1,#+100
   \        0x4   0x....'....        B.W      __aeabi_memset4
     60          
     61          #if defined(MBEDTLS_THREADING_C)
     62              mbedtls_mutex_init( &ctx->mutex );
     63          #endif
     64          }
     65          
     66          /*
     67           * HMAC_DRBG update, using optional additional data (10.1.2.2)
     68           */

   \                                 In section .text, align 2, keep-with-next
     69          void mbedtls_hmac_drbg_update( mbedtls_hmac_drbg_context *ctx,
     70                                 const unsigned char *additional, size_t add_len )
     71          {
   \                     mbedtls_hmac_drbg_update: (+1)
   \        0x0   0xE92D 0x41F8      PUSH     {R3-R8,LR}
   \        0x4   0xB091             SUB      SP,SP,#+68
   \        0x6   0x4606             MOV      R6,R0
   \        0x8   0x460C             MOV      R4,R1
   \        0xA   0x4615             MOV      R5,R2
     72              size_t md_len = mbedtls_md_get_size( ctx->md_ctx.md_info );
   \        0xC   0x6830             LDR      R0,[R6, #+0]
   \        0xE   0x....'....        BL       mbedtls_md_get_size
   \       0x12   0x4607             MOV      R7,R0
     73              unsigned char rounds = ( additional != NULL && add_len != 0 ) ? 2 : 1;
   \       0x14   0x2C00             CMP      R4,#+0
   \       0x16   0xD004             BEQ.N    ??mbedtls_hmac_drbg_update_0
   \       0x18   0x2D00             CMP      R5,#+0
   \       0x1A   0xD002             BEQ.N    ??mbedtls_hmac_drbg_update_0
   \       0x1C   0xF04F 0x0802      MOV      R8,#+2
   \       0x20   0xE001             B.N      ??mbedtls_hmac_drbg_update_1
   \                     ??mbedtls_hmac_drbg_update_0: (+1)
   \       0x22   0xF04F 0x0801      MOV      R8,#+1
     74              unsigned char sep[1];
     75              unsigned char K[MBEDTLS_MD_MAX_SIZE];
     76          
     77              for( sep[0] = 0; sep[0] < rounds; sep[0]++ )
   \                     ??mbedtls_hmac_drbg_update_1: (+1)
   \       0x26   0x2000             MOVS     R0,#+0
   \       0x28   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \       0x2C   0xE02E             B.N      ??mbedtls_hmac_drbg_update_2
     78              {
     79                  /* Step 1 or 4 */
     80                  mbedtls_md_hmac_reset( &ctx->md_ctx );
   \                     ??mbedtls_hmac_drbg_update_3: (+1)
   \       0x2E   0x4630             MOV      R0,R6
   \       0x30   0x....'....        BL       mbedtls_md_hmac_reset
     81                  mbedtls_md_hmac_update( &ctx->md_ctx, ctx->V, md_len );
   \       0x34   0x463A             MOV      R2,R7
   \       0x36   0xF106 0x010C      ADD      R1,R6,#+12
   \       0x3A   0x4630             MOV      R0,R6
   \       0x3C   0x....'....        BL       mbedtls_md_hmac_update
     82                  mbedtls_md_hmac_update( &ctx->md_ctx, sep, 1 );
   \       0x40   0x2201             MOVS     R2,#+1
   \       0x42   0x4669             MOV      R1,SP
   \       0x44   0x4630             MOV      R0,R6
   \       0x46   0x....'....        BL       mbedtls_md_hmac_update
     83                  if( rounds == 2 )
   \       0x4A   0xF1B8 0x0F02      CMP      R8,#+2
   \       0x4E   0xD104             BNE.N    ??mbedtls_hmac_drbg_update_4
     84                      mbedtls_md_hmac_update( &ctx->md_ctx, additional, add_len );
   \       0x50   0x462A             MOV      R2,R5
   \       0x52   0x4621             MOV      R1,R4
   \       0x54   0x4630             MOV      R0,R6
   \       0x56   0x....'....        BL       mbedtls_md_hmac_update
     85                  mbedtls_md_hmac_finish( &ctx->md_ctx, K );
   \                     ??mbedtls_hmac_drbg_update_4: (+1)
   \       0x5A   0xA901             ADD      R1,SP,#+4
   \       0x5C   0x4630             MOV      R0,R6
   \       0x5E   0x....'....        BL       mbedtls_md_hmac_finish
     86          
     87                  /* Step 2 or 5 */
     88                  mbedtls_md_hmac_starts( &ctx->md_ctx, K, md_len );
   \       0x62   0x463A             MOV      R2,R7
   \       0x64   0xA901             ADD      R1,SP,#+4
   \       0x66   0x4630             MOV      R0,R6
   \       0x68   0x....'....        BL       mbedtls_md_hmac_starts
     89                  mbedtls_md_hmac_update( &ctx->md_ctx, ctx->V, md_len );
   \       0x6C   0x463A             MOV      R2,R7
   \       0x6E   0xF106 0x010C      ADD      R1,R6,#+12
   \       0x72   0x4630             MOV      R0,R6
   \       0x74   0x....'....        BL       mbedtls_md_hmac_update
     90                  mbedtls_md_hmac_finish( &ctx->md_ctx, ctx->V );
   \       0x78   0xF106 0x010C      ADD      R1,R6,#+12
   \       0x7C   0x4630             MOV      R0,R6
   \       0x7E   0x....'....        BL       mbedtls_md_hmac_finish
     91              }
   \       0x82   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \       0x86   0x1C40             ADDS     R0,R0,#+1
   \       0x88   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \                     ??mbedtls_hmac_drbg_update_2: (+1)
   \       0x8C   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \       0x90   0x4540             CMP      R0,R8
   \       0x92   0xDBCC             BLT.N    ??mbedtls_hmac_drbg_update_3
     92          }
   \       0x94   0xB012             ADD      SP,SP,#+72
   \       0x96   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
     93          
     94          /*
     95           * Simplified HMAC_DRBG initialisation (for use with deterministic ECDSA)
     96           */

   \                                 In section .text, align 2, keep-with-next
     97          int mbedtls_hmac_drbg_seed_buf( mbedtls_hmac_drbg_context *ctx,
     98                                  const mbedtls_md_info_t * md_info,
     99                                  const unsigned char *data, size_t data_len )
    100          {
   \                     mbedtls_hmac_drbg_seed_buf: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
   \        0x6   0x4616             MOV      R6,R2
   \        0x8   0x461F             MOV      R7,R3
    101              int ret;
    102          
    103              if( ( ret = mbedtls_md_setup( &ctx->md_ctx, md_info, 1 ) ) != 0 )
   \        0xA   0x2201             MOVS     R2,#+1
   \        0xC   0x....'....        BL       mbedtls_md_setup
   \       0x10   0x2800             CMP      R0,#+0
   \       0x12   0xD117             BNE.N    ??mbedtls_hmac_drbg_seed_buf_0
    104                  return( ret );
    105          
    106              /*
    107               * Set initial working state.
    108               * Use the V memory location, which is currently all 0, to initialize the
    109               * MD context with an all-zero key. Then set V to its initial value.
    110               */
    111              mbedtls_md_hmac_starts( &ctx->md_ctx, ctx->V, mbedtls_md_get_size( md_info ) );
   \       0x14   0x4628             MOV      R0,R5
   \       0x16   0x....'....        BL       mbedtls_md_get_size
   \       0x1A   0x4602             MOV      R2,R0
   \       0x1C   0xF104 0x010C      ADD      R1,R4,#+12
   \       0x20   0x4620             MOV      R0,R4
   \       0x22   0x....'....        BL       mbedtls_md_hmac_starts
    112              memset( ctx->V, 0x01, mbedtls_md_get_size( md_info ) );
   \       0x26   0x4628             MOV      R0,R5
   \       0x28   0x....'....        BL       mbedtls_md_get_size
   \       0x2C   0x2201             MOVS     R2,#+1
   \       0x2E   0x4601             MOV      R1,R0
   \       0x30   0xF104 0x000C      ADD      R0,R4,#+12
   \       0x34   0x....'....        BL       __aeabi_memset4
    113          
    114              mbedtls_hmac_drbg_update( ctx, data, data_len );
   \       0x38   0x463A             MOV      R2,R7
   \       0x3A   0x4631             MOV      R1,R6
   \       0x3C   0x4620             MOV      R0,R4
   \       0x3E   0x....'....        BL       mbedtls_hmac_drbg_update
    115          
    116              return( 0 );
   \       0x42   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_hmac_drbg_seed_buf_0: (+1)
   \       0x44   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    117          }
    118          
    119          /*
    120           * HMAC_DRBG reseeding: 10.1.2.4 (arabic) + 9.2 (Roman)
    121           */

   \                                 In section .text, align 2, keep-with-next
    122          int mbedtls_hmac_drbg_reseed( mbedtls_hmac_drbg_context *ctx,
    123                                const unsigned char *additional, size_t len )
    124          {
   \                     mbedtls_hmac_drbg_reseed: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0xB0E0             SUB      SP,SP,#+384
   \        0x4   0x4606             MOV      R6,R0
   \        0x6   0x460D             MOV      R5,R1
   \        0x8   0x4614             MOV      R4,R2
    125              unsigned char seed[MBEDTLS_HMAC_DRBG_MAX_SEED_INPUT];
    126              size_t seedlen;
    127          
    128              /* III. Check input length */
    129              if( len > MBEDTLS_HMAC_DRBG_MAX_INPUT ||
    130                  ctx->entropy_len + len > MBEDTLS_HMAC_DRBG_MAX_SEED_INPUT )
   \        0xA   0xF240 0x1001      MOVW     R0,#+257
   \        0xE   0x4284             CMP      R4,R0
   \       0x10   0xD205             BCS.N    ??mbedtls_hmac_drbg_reseed_0
   \       0x12   0x6D30             LDR      R0,[R6, #+80]
   \       0x14   0x1820             ADDS     R0,R4,R0
   \       0x16   0xF240 0x1181      MOVW     R1,#+385
   \       0x1A   0x4288             CMP      R0,R1
   \       0x1C   0xD302             BCC.N    ??mbedtls_hmac_drbg_reseed_1
    131              {
    132                  return( MBEDTLS_ERR_HMAC_DRBG_INPUT_TOO_BIG );
   \                     ??mbedtls_hmac_drbg_reseed_0: (+1)
   \       0x1E   0xF06F 0x0004      MVN      R0,#+4
   \       0x22   0xE024             B.N      ??mbedtls_hmac_drbg_reseed_2
    133              }
    134          
    135              memset( seed, 0, MBEDTLS_HMAC_DRBG_MAX_SEED_INPUT );
   \                     ??mbedtls_hmac_drbg_reseed_1: (+1)
   \       0x24   0x2200             MOVS     R2,#+0
   \       0x26   0xF44F 0x71C0      MOV      R1,#+384
   \       0x2A   0x4668             MOV      R0,SP
   \       0x2C   0x....'....        BL       __aeabi_memset4
    136          
    137              /* IV. Gather entropy_len bytes of entropy for the seed */
    138              if( ctx->f_entropy( ctx->p_entropy, seed, ctx->entropy_len ) != 0 )
   \       0x30   0x6D32             LDR      R2,[R6, #+80]
   \       0x32   0x4669             MOV      R1,SP
   \       0x34   0x6E30             LDR      R0,[R6, #+96]
   \       0x36   0x6DF3             LDR      R3,[R6, #+92]
   \       0x38   0x4798             BLX      R3
   \       0x3A   0x2800             CMP      R0,#+0
   \       0x3C   0xD002             BEQ.N    ??mbedtls_hmac_drbg_reseed_3
    139                  return( MBEDTLS_ERR_HMAC_DRBG_ENTROPY_SOURCE_FAILED );
   \       0x3E   0xF06F 0x0008      MVN      R0,#+8
   \       0x42   0xE014             B.N      ??mbedtls_hmac_drbg_reseed_2
    140          
    141              seedlen = ctx->entropy_len;
   \                     ??mbedtls_hmac_drbg_reseed_3: (+1)
   \       0x44   0x6D37             LDR      R7,[R6, #+80]
    142          
    143              /* 1. Concatenate entropy and additional data if any */
    144              if( additional != NULL && len != 0 )
   \       0x46   0x2D00             CMP      R5,#+0
   \       0x48   0xD009             BEQ.N    ??mbedtls_hmac_drbg_reseed_4
   \       0x4A   0x2C00             CMP      R4,#+0
   \       0x4C   0xD007             BEQ.N    ??mbedtls_hmac_drbg_reseed_4
    145              {
    146                  memcpy( seed + seedlen, additional, len );
   \       0x4E   0x4622             MOV      R2,R4
   \       0x50   0x4629             MOV      R1,R5
   \       0x52   0x4668             MOV      R0,SP
   \       0x54   0x4438             ADD      R0,R0,R7
   \       0x56   0x....'....        BL       __aeabi_memcpy
    147                  seedlen += len;
   \       0x5A   0x19E4             ADDS     R4,R4,R7
   \       0x5C   0x4627             MOV      R7,R4
    148              }
    149          
    150              /* 2. Update state */
    151              mbedtls_hmac_drbg_update( ctx, seed, seedlen );
   \                     ??mbedtls_hmac_drbg_reseed_4: (+1)
   \       0x5E   0x463A             MOV      R2,R7
   \       0x60   0x4669             MOV      R1,SP
   \       0x62   0x4630             MOV      R0,R6
   \       0x64   0x....'....        BL       mbedtls_hmac_drbg_update
    152          
    153              /* 3. Reset reseed_counter */
    154              ctx->reseed_counter = 1;
   \       0x68   0x2001             MOVS     R0,#+1
   \       0x6A   0x64F0             STR      R0,[R6, #+76]
    155          
    156              /* 4. Done */
    157              return( 0 );
   \       0x6C   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_hmac_drbg_reseed_2: (+1)
   \       0x6E   0xB061             ADD      SP,SP,#+388
   \       0x70   0xBDF0             POP      {R4-R7,PC}       ;; return
    158          }
    159          
    160          /*
    161           * HMAC_DRBG initialisation (10.1.2.3 + 9.1)
    162           */

   \                                 In section .text, align 2, keep-with-next
    163          int mbedtls_hmac_drbg_seed( mbedtls_hmac_drbg_context *ctx,
    164                              const mbedtls_md_info_t * md_info,
    165                              int (*f_entropy)(void *, unsigned char *, size_t),
    166                              void *p_entropy,
    167                              const unsigned char *custom,
    168                              size_t len )
    169          {
   \                     mbedtls_hmac_drbg_seed: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
   \        0x6   0x4616             MOV      R6,R2
   \        0x8   0x461F             MOV      R7,R3
    170              int ret;
    171              size_t entropy_len, md_size;
    172          
    173              if( ( ret = mbedtls_md_setup( &ctx->md_ctx, md_info, 1 ) ) != 0 )
   \        0xA   0x2201             MOVS     R2,#+1
   \        0xC   0x....'....        BL       mbedtls_md_setup
   \       0x10   0x2800             CMP      R0,#+0
   \       0x12   0xD12A             BNE.N    ??mbedtls_hmac_drbg_seed_0
    174                  return( ret );
    175          
    176              md_size = mbedtls_md_get_size( md_info );
   \       0x14   0x4628             MOV      R0,R5
   \       0x16   0x....'....        BL       mbedtls_md_get_size
   \       0x1A   0x4605             MOV      R5,R0
    177          
    178              /*
    179               * Set initial working state.
    180               * Use the V memory location, which is currently all 0, to initialize the
    181               * MD context with an all-zero key. Then set V to its initial value.
    182               */
    183              mbedtls_md_hmac_starts( &ctx->md_ctx, ctx->V, md_size );
   \       0x1C   0x462A             MOV      R2,R5
   \       0x1E   0xF104 0x010C      ADD      R1,R4,#+12
   \       0x22   0x4620             MOV      R0,R4
   \       0x24   0x....'....        BL       mbedtls_md_hmac_starts
    184              memset( ctx->V, 0x01, md_size );
   \       0x28   0x2201             MOVS     R2,#+1
   \       0x2A   0x4629             MOV      R1,R5
   \       0x2C   0xF104 0x000C      ADD      R0,R4,#+12
   \       0x30   0x....'....        BL       __aeabi_memset4
    185          
    186              ctx->f_entropy = f_entropy;
   \       0x34   0x65E6             STR      R6,[R4, #+92]
    187              ctx->p_entropy = p_entropy;
   \       0x36   0x6627             STR      R7,[R4, #+96]
    188          
    189              ctx->reseed_interval = MBEDTLS_HMAC_DRBG_RESEED_INTERVAL;
   \       0x38   0xF242 0x7010      MOVW     R0,#+10000
   \       0x3C   0x65A0             STR      R0,[R4, #+88]
    190          
    191              /*
    192               * See SP800-57 5.6.1 (p. 65-66) for the security strength provided by
    193               * each hash function, then according to SP800-90A rev1 10.1 table 2,
    194               * min_entropy_len (in bits) is security_strength.
    195               *
    196               * (This also matches the sizes used in the NIST test vectors.)
    197               */
    198              entropy_len = md_size <= 20 ? 16 : /* 160-bits hash -> 128 bits */
    199                            md_size <= 28 ? 24 : /* 224-bits hash -> 192 bits */
    200                                            32;  /* better (256+) -> 256 bits */
   \       0x3E   0x2D15             CMP      R5,#+21
   \       0x40   0xD201             BCS.N    ??mbedtls_hmac_drbg_seed_1
   \       0x42   0x2510             MOVS     R5,#+16
   \       0x44   0xE004             B.N      ??mbedtls_hmac_drbg_seed_2
   \                     ??mbedtls_hmac_drbg_seed_1: (+1)
   \       0x46   0x2D1D             CMP      R5,#+29
   \       0x48   0xD201             BCS.N    ??mbedtls_hmac_drbg_seed_3
   \       0x4A   0x2518             MOVS     R5,#+24
   \       0x4C   0xE000             B.N      ??mbedtls_hmac_drbg_seed_2
   \                     ??mbedtls_hmac_drbg_seed_3: (+1)
   \       0x4E   0x2520             MOVS     R5,#+32
   \                     ??mbedtls_hmac_drbg_seed_2: (+1)
   \       0x50   0x9A07             LDR      R2,[SP, #+28]
   \       0x52   0x9906             LDR      R1,[SP, #+24]
    201          
    202              /*
    203               * For initialisation, use more entropy to emulate a nonce
    204               * (Again, matches test vectors.)
    205               */
    206              ctx->entropy_len = entropy_len * 3 / 2;
   \       0x54   0xEB05 0x0045      ADD      R0,R5,R5, LSL #+1
   \       0x58   0x0840             LSRS     R0,R0,#+1
   \       0x5A   0x6520             STR      R0,[R4, #+80]
    207          
    208              if( ( ret = mbedtls_hmac_drbg_reseed( ctx, custom, len ) ) != 0 )
   \       0x5C   0x4620             MOV      R0,R4
   \       0x5E   0x....'....        BL       mbedtls_hmac_drbg_reseed
   \       0x62   0x2800             CMP      R0,#+0
   \       0x64   0xD101             BNE.N    ??mbedtls_hmac_drbg_seed_0
    209                  return( ret );
    210          
    211              ctx->entropy_len = entropy_len;
   \       0x66   0x6525             STR      R5,[R4, #+80]
    212          
    213              return( 0 );
   \       0x68   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_hmac_drbg_seed_0: (+1)
   \       0x6A   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    214          }
    215          
    216          /*
    217           * Set prediction resistance
    218           */

   \                                 In section .text, align 2, keep-with-next
    219          void mbedtls_hmac_drbg_set_prediction_resistance( mbedtls_hmac_drbg_context *ctx,
    220                                                    int resistance )
    221          {
    222              ctx->prediction_resistance = resistance;
   \                     mbedtls_hmac_drbg_set_prediction_resistance: (+1)
   \        0x0   0x6541             STR      R1,[R0, #+84]
    223          }
   \        0x2   0x4770             BX       LR               ;; return
    224          
    225          /*
    226           * Set entropy length grabbed for reseeds
    227           */

   \                                 In section .text, align 2, keep-with-next
    228          void mbedtls_hmac_drbg_set_entropy_len( mbedtls_hmac_drbg_context *ctx, size_t len )
    229          {
    230              ctx->entropy_len = len;
   \                     mbedtls_hmac_drbg_set_entropy_len: (+1)
   \        0x0   0x6501             STR      R1,[R0, #+80]
    231          }
   \        0x2   0x4770             BX       LR               ;; return
    232          
    233          /*
    234           * Set reseed interval
    235           */

   \                                 In section .text, align 2, keep-with-next
    236          void mbedtls_hmac_drbg_set_reseed_interval( mbedtls_hmac_drbg_context *ctx, int interval )
    237          {
    238              ctx->reseed_interval = interval;
   \                     mbedtls_hmac_drbg_set_reseed_interval: (+1)
   \        0x0   0x6581             STR      R1,[R0, #+88]
    239          }
   \        0x2   0x4770             BX       LR               ;; return
    240          
    241          /*
    242           * HMAC_DRBG random function with optional additional data:
    243           * 10.1.2.5 (arabic) + 9.3 (Roman)
    244           */

   \                                 In section .text, align 2, keep-with-next
    245          int mbedtls_hmac_drbg_random_with_add( void *p_rng,
    246                                         unsigned char *output, size_t out_len,
    247                                         const unsigned char *additional, size_t add_len )
    248          {
   \                     mbedtls_hmac_drbg_random_with_add: (+1)
   \        0x0   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \        0x4   0x4681             MOV      R9,R0
   \        0x6   0x4688             MOV      R8,R1
   \        0x8   0x4614             MOV      R4,R2
   \        0xA   0x461D             MOV      R5,R3
    249              int ret;
    250              mbedtls_hmac_drbg_context *ctx = (mbedtls_hmac_drbg_context *) p_rng;
    251              size_t md_len = mbedtls_md_get_size( ctx->md_ctx.md_info );
   \        0xC   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \       0x10   0x....'....        BL       mbedtls_md_get_size
   \       0x14   0x4607             MOV      R7,R0
    252              size_t left = out_len;
    253              unsigned char *out = output;
    254          
    255              /* II. Check request length */
    256              if( out_len > MBEDTLS_HMAC_DRBG_MAX_REQUEST )
   \       0x16   0xF240 0x4001      MOVW     R0,#+1025
   \       0x1A   0x4284             CMP      R4,R0
   \       0x1C   0xD302             BCC.N    ??mbedtls_hmac_drbg_random_with_add_0
    257                  return( MBEDTLS_ERR_HMAC_DRBG_REQUEST_TOO_BIG );
   \       0x1E   0xF06F 0x0002      MVN      R0,#+2
   \       0x22   0xE04F             B.N      ??mbedtls_hmac_drbg_random_with_add_1
   \                     ??mbedtls_hmac_drbg_random_with_add_0: (+1)
   \       0x24   0x9E08             LDR      R6,[SP, #+32]
    258          
    259              /* III. Check input length */
    260              if( add_len > MBEDTLS_HMAC_DRBG_MAX_INPUT )
   \       0x26   0xF240 0x1001      MOVW     R0,#+257
   \       0x2A   0x4286             CMP      R6,R0
   \       0x2C   0xD302             BCC.N    ??mbedtls_hmac_drbg_random_with_add_2
    261                  return( MBEDTLS_ERR_HMAC_DRBG_INPUT_TOO_BIG );
   \       0x2E   0xF06F 0x0004      MVN      R0,#+4
   \       0x32   0xE047             B.N      ??mbedtls_hmac_drbg_random_with_add_1
    262          
    263              /* 1. (aka VII and IX) Check reseed counter and PR */
    264              if( ctx->f_entropy != NULL && /* For no-reseeding instances */
    265                  ( ctx->prediction_resistance == MBEDTLS_HMAC_DRBG_PR_ON ||
    266                    ctx->reseed_counter > ctx->reseed_interval ) )
   \                     ??mbedtls_hmac_drbg_random_with_add_2: (+1)
   \       0x34   0xF8D9 0x005C      LDR      R0,[R9, #+92]
   \       0x38   0x2800             CMP      R0,#+0
   \       0x3A   0xD011             BEQ.N    ??mbedtls_hmac_drbg_random_with_add_3
   \       0x3C   0xF8D9 0x0054      LDR      R0,[R9, #+84]
   \       0x40   0x2801             CMP      R0,#+1
   \       0x42   0xD005             BEQ.N    ??mbedtls_hmac_drbg_random_with_add_4
   \       0x44   0xF8D9 0x0058      LDR      R0,[R9, #+88]
   \       0x48   0xF8D9 0x104C      LDR      R1,[R9, #+76]
   \       0x4C   0x4288             CMP      R0,R1
   \       0x4E   0xDA07             BGE.N    ??mbedtls_hmac_drbg_random_with_add_3
    267              {
    268                  if( ( ret = mbedtls_hmac_drbg_reseed( ctx, additional, add_len ) ) != 0 )
   \                     ??mbedtls_hmac_drbg_random_with_add_4: (+1)
   \       0x50   0x4632             MOV      R2,R6
   \       0x52   0x4629             MOV      R1,R5
   \       0x54   0x4648             MOV      R0,R9
   \       0x56   0x....'....        BL       mbedtls_hmac_drbg_reseed
   \       0x5A   0x2800             CMP      R0,#+0
   \       0x5C   0xD132             BNE.N    ??mbedtls_hmac_drbg_random_with_add_1
    269                      return( ret );
    270          
    271                  add_len = 0; /* VII.4 */
   \       0x5E   0x2600             MOVS     R6,#+0
    272              }
    273          
    274              /* 2. Use additional data if any */
    275              if( additional != NULL && add_len != 0 )
   \                     ??mbedtls_hmac_drbg_random_with_add_3: (+1)
   \       0x60   0x2D00             CMP      R5,#+0
   \       0x62   0xD022             BEQ.N    ??mbedtls_hmac_drbg_random_with_add_5
   \       0x64   0x2E00             CMP      R6,#+0
   \       0x66   0xD020             BEQ.N    ??mbedtls_hmac_drbg_random_with_add_5
    276                  mbedtls_hmac_drbg_update( ctx, additional, add_len );
   \       0x68   0x4632             MOV      R2,R6
   \       0x6A   0x4629             MOV      R1,R5
   \       0x6C   0x4648             MOV      R0,R9
   \       0x6E   0x....'....        BL       mbedtls_hmac_drbg_update
   \       0x72   0xE01A             B.N      ??mbedtls_hmac_drbg_random_with_add_5
    277          
    278              /* 3, 4, 5. Generate bytes */
    279              while( left != 0 )
    280              {
    281                  size_t use_len = left > md_len ? md_len : left;
   \                     ??mbedtls_hmac_drbg_random_with_add_6: (+1)
   \       0x74   0x46BA             MOV      R10,R7
   \       0x76   0x42A7             CMP      R7,R4
   \       0x78   0xD900             BLS.N    ??mbedtls_hmac_drbg_random_with_add_7
   \       0x7A   0x46A2             MOV      R10,R4
    282          
    283                  mbedtls_md_hmac_reset( &ctx->md_ctx );
   \                     ??mbedtls_hmac_drbg_random_with_add_7: (+1)
   \       0x7C   0x4648             MOV      R0,R9
   \       0x7E   0x....'....        BL       mbedtls_md_hmac_reset
    284                  mbedtls_md_hmac_update( &ctx->md_ctx, ctx->V, md_len );
   \       0x82   0x463A             MOV      R2,R7
   \       0x84   0xF109 0x010C      ADD      R1,R9,#+12
   \       0x88   0x4648             MOV      R0,R9
   \       0x8A   0x....'....        BL       mbedtls_md_hmac_update
    285                  mbedtls_md_hmac_finish( &ctx->md_ctx, ctx->V );
   \       0x8E   0xF109 0x010C      ADD      R1,R9,#+12
   \       0x92   0x4648             MOV      R0,R9
   \       0x94   0x....'....        BL       mbedtls_md_hmac_finish
    286          
    287                  memcpy( out, ctx->V, use_len );
   \       0x98   0x4652             MOV      R2,R10
   \       0x9A   0xF109 0x010C      ADD      R1,R9,#+12
   \       0x9E   0x4640             MOV      R0,R8
   \       0xA0   0x....'....        BL       __aeabi_memcpy
    288                  out += use_len;
   \       0xA4   0x44D0             ADD      R8,R8,R10
    289                  left -= use_len;
   \       0xA6   0xEBA4 0x040A      SUB      R4,R4,R10
    290              }
   \                     ??mbedtls_hmac_drbg_random_with_add_5: (+1)
   \       0xAA   0x2C00             CMP      R4,#+0
   \       0xAC   0xD1E2             BNE.N    ??mbedtls_hmac_drbg_random_with_add_6
    291          
    292              /* 6. Update */
    293              mbedtls_hmac_drbg_update( ctx, additional, add_len );
   \       0xAE   0x4632             MOV      R2,R6
   \       0xB0   0x4629             MOV      R1,R5
   \       0xB2   0x4648             MOV      R0,R9
   \       0xB4   0x....'....        BL       mbedtls_hmac_drbg_update
    294          
    295              /* 7. Update reseed counter */
    296              ctx->reseed_counter++;
   \       0xB8   0xF8D9 0x004C      LDR      R0,[R9, #+76]
   \       0xBC   0x1C40             ADDS     R0,R0,#+1
   \       0xBE   0xF8C9 0x004C      STR      R0,[R9, #+76]
    297          
    298              /* 8. Done */
    299              return( 0 );
   \       0xC2   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_hmac_drbg_random_with_add_1: (+1)
   \       0xC4   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    300          }
    301          
    302          /*
    303           * HMAC_DRBG random function
    304           */

   \                                 In section .text, align 2, keep-with-next
    305          int mbedtls_hmac_drbg_random( void *p_rng, unsigned char *output, size_t out_len )
    306          {
   \                     mbedtls_hmac_drbg_random: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    307              int ret;
    308              mbedtls_hmac_drbg_context *ctx = (mbedtls_hmac_drbg_context *) p_rng;
    309          
    310          #if defined(MBEDTLS_THREADING_C)
    311              if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
    312                  return( ret );
    313          #endif
    314          
    315              ret = mbedtls_hmac_drbg_random_with_add( ctx, output, out_len, NULL, 0 );
    316          
    317          #if defined(MBEDTLS_THREADING_C)
    318              if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
    319                  return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
    320          #endif
    321          
    322              return( ret );
   \        0x2   0x2300             MOVS     R3,#+0
   \        0x4   0x9300             STR      R3,[SP, #+0]
   \        0x6   0x....'....        BL       mbedtls_hmac_drbg_random_with_add
   \        0xA   0xBD02             POP      {R1,PC}          ;; return
    323          }
    324          
    325          /*
    326           * Free an HMAC_DRBG context
    327           */

   \                                 In section .text, align 2, keep-with-next
    328          void mbedtls_hmac_drbg_free( mbedtls_hmac_drbg_context *ctx )
    329          {
   \                     mbedtls_hmac_drbg_free: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
    330              if( ctx == NULL )
   \        0x4   0xD007             BEQ.N    ??mbedtls_hmac_drbg_free_0
    331                  return;
    332          
    333          #if defined(MBEDTLS_THREADING_C)
    334              mbedtls_mutex_free( &ctx->mutex );
    335          #endif
    336              mbedtls_md_free( &ctx->md_ctx );
   \        0x6   0x....'....        BL       mbedtls_md_free
    337              mbedtls_platform_zeroize( ctx, sizeof( mbedtls_hmac_drbg_context ) );
   \        0xA   0x2164             MOVS     R1,#+100
   \        0xC   0x4620             MOV      R0,R4
   \        0xE   0xE8BD 0x4010      POP      {R4,LR}
   \       0x12   0x....'....        B.W      mbedtls_platform_zeroize
   \                     ??mbedtls_hmac_drbg_free_0: (+1)
   \       0x16   0xBD10             POP      {R4,PC}          ;; return
    338          }
    339          
    340          #if defined(MBEDTLS_FS_IO)
    341          int mbedtls_hmac_drbg_write_seed_file( mbedtls_hmac_drbg_context *ctx, const char *path )
    342          {
    343              int ret;
    344              FILE *f;
    345              unsigned char buf[ MBEDTLS_HMAC_DRBG_MAX_INPUT ];
    346          
    347              if( ( f = fopen( path, "wb" ) ) == NULL )
    348                  return( MBEDTLS_ERR_HMAC_DRBG_FILE_IO_ERROR );
    349          
    350              if( ( ret = mbedtls_hmac_drbg_random( ctx, buf, sizeof( buf ) ) ) != 0 )
    351                  goto exit;
    352          
    353              if( fwrite( buf, 1, sizeof( buf ), f ) != sizeof( buf ) )
    354              {
    355                  ret = MBEDTLS_ERR_HMAC_DRBG_FILE_IO_ERROR;
    356                  goto exit;
    357              }
    358          
    359              ret = 0;
    360          
    361          exit:
    362              fclose( f );
    363              mbedtls_platform_zeroize( buf, sizeof( buf ) );
    364          
    365              return( ret );
    366          }
    367          
    368          int mbedtls_hmac_drbg_update_seed_file( mbedtls_hmac_drbg_context *ctx, const char *path )
    369          {
    370              int ret = 0;
    371              FILE *f;
    372              size_t n;
    373              unsigned char buf[ MBEDTLS_HMAC_DRBG_MAX_INPUT ];
    374          
    375              if( ( f = fopen( path, "rb" ) ) == NULL )
    376                  return( MBEDTLS_ERR_HMAC_DRBG_FILE_IO_ERROR );
    377          
    378              fseek( f, 0, SEEK_END );
    379              n = (size_t) ftell( f );
    380              fseek( f, 0, SEEK_SET );
    381          
    382              if( n > MBEDTLS_HMAC_DRBG_MAX_INPUT )
    383              {
    384                  fclose( f );
    385                  return( MBEDTLS_ERR_HMAC_DRBG_INPUT_TOO_BIG );
    386              }
    387          
    388              if( fread( buf, 1, n, f ) != n )
    389                  ret = MBEDTLS_ERR_HMAC_DRBG_FILE_IO_ERROR;
    390              else
    391                  mbedtls_hmac_drbg_update( ctx, buf, n );
    392          
    393              fclose( f );
    394          
    395              mbedtls_platform_zeroize( buf, sizeof( buf ) );
    396          
    397              if( ret != 0 )
    398                  return( ret );
    399          
    400              return( mbedtls_hmac_drbg_write_seed_file( ctx, path ) );
    401          }
    402          #endif /* MBEDTLS_FS_IO */
    403          
    404          
    405          #if defined(MBEDTLS_SELF_TEST)
    406          
    407          #if !defined(MBEDTLS_SHA1_C)
    408          /* Dummy checkup routine */
    409          int mbedtls_hmac_drbg_self_test( int verbose )
    410          {
    411              (void) verbose;
    412              return( 0 );
    413          }
    414          #else
    415          
    416          #define OUTPUT_LEN  80
    417          
    418          /* From a NIST PR=true test vector */

   \                                 In section .rodata, align 4
    419          static const unsigned char entropy_pr[] = {
   \                     entropy_pr:
   \        0x0   0xA0 0xC9          DC8 160, 201, 171, 88, 241, 226, 229, 164, 222, 62, 189, 79, 247, 62
   \              0xAB 0x58    
   \              0xF1 0xE2    
   \              0xE5 0xA4    
   \              0xDE 0x3E    
   \              0xBD 0x4F    
   \              0xF7 0x3E    
   \        0xE   0x9C 0x5B          DC8 156, 91, 100, 239, 216, 202, 2, 140, 248, 17, 72, 165, 132, 254
   \              0x64 0xEF    
   \              0xD8 0xCA    
   \              0x02 0x8C    
   \              0xF8 0x11    
   \              0x48 0xA5    
   \              0x84 0xFE    
   \       0x1C   0x69 0xAB          DC8 105, 171, 90, 238, 66, 170, 77, 66, 23, 96, 153, 212, 94, 19, 151
   \              0x5A 0xEE    
   \              0x42 0xAA    
   \              0x4D 0x42    
   \              0x17 0x60    
   \              0x99 0xD4    
   \              0x5E 0x13    
   \              0x97         
   \       0x2B   0xDC 0x40          DC8 220, 64, 77, 134, 163, 123, 245, 89, 84, 117, 105, 81, 228
   \              0x4D 0x86    
   \              0xA3 0x7B    
   \              0xF5 0x59    
   \              0x54 0x75    
   \              0x69 0x51    
   \              0xE4         
    420              0xa0, 0xc9, 0xab, 0x58, 0xf1, 0xe2, 0xe5, 0xa4, 0xde, 0x3e, 0xbd, 0x4f,
    421              0xf7, 0x3e, 0x9c, 0x5b, 0x64, 0xef, 0xd8, 0xca, 0x02, 0x8c, 0xf8, 0x11,
    422              0x48, 0xa5, 0x84, 0xfe, 0x69, 0xab, 0x5a, 0xee, 0x42, 0xaa, 0x4d, 0x42,
    423              0x17, 0x60, 0x99, 0xd4, 0x5e, 0x13, 0x97, 0xdc, 0x40, 0x4d, 0x86, 0xa3,
    424              0x7b, 0xf5, 0x59, 0x54, 0x75, 0x69, 0x51, 0xe4 };

   \                                 In section .rodata, align 4
    425          static const unsigned char result_pr[OUTPUT_LEN] = {
   \                     result_pr:
   \        0x0   0x9A 0x00          DC8 154, 0, 162, 208, 14, 213, 155, 254, 49, 236, 177, 57, 155, 96, 129
   \              0xA2 0xD0    
   \              0x0E 0xD5    
   \              0x9B 0xFE    
   \              0x31 0xEC    
   \              0xB1 0x39    
   \              0x9B 0x60    
   \              0x81         
   \        0xF   0x48 0xD1          DC8 72, 209, 150, 157, 37, 13, 60, 30, 148, 16, 16, 152, 18, 147, 37
   \              0x96 0x9D    
   \              0x25 0x0D    
   \              0x3C 0x1E    
   \              0x94 0x10    
   \              0x10 0x98    
   \              0x12 0x93    
   \              0x25         
   \       0x1E   0xCA 0xB8          DC8 202, 184, 252, 204, 45, 84, 115, 25, 112, 192, 16, 122, 164, 137
   \              0xFC 0xCC    
   \              0x2D 0x54    
   \              0x73 0x19    
   \              0x70 0xC0    
   \              0x10 0x7A    
   \              0xA4 0x89    
   \       0x2C   0x25 0x19          DC8 37, 25, 149, 94, 75, 198, 0, 29, 127, 78, 106, 43, 248, 163, 1, 171
   \              0x95 0x5E    
   \              0x4B 0xC6    
   \              0x00 0x1D    
   \              0x7F 0x4E    
   \              0x6A 0x2B    
   \              0xF8 0xA3    
   \              0x01 0xAB    
   \       0x3C   0x46 0x05          DC8 70, 5, 92, 9, 166, 113, 136, 241, 167, 64, 238, 243, 225, 92, 2
   \              0x5C 0x09    
   \              0xA6 0x71    
   \              0x88 0xF1    
   \              0xA7 0x40    
   \              0xEE 0xF3    
   \              0xE1 0x5C    
   \              0x02         
   \       0x4B   0x9B 0x44          DC8 155, 68, 175, 3, 68
   \              0xAF 0x03    
   \              0x44         
    426              0x9a, 0x00, 0xa2, 0xd0, 0x0e, 0xd5, 0x9b, 0xfe, 0x31, 0xec, 0xb1, 0x39,
    427              0x9b, 0x60, 0x81, 0x48, 0xd1, 0x96, 0x9d, 0x25, 0x0d, 0x3c, 0x1e, 0x94,
    428              0x10, 0x10, 0x98, 0x12, 0x93, 0x25, 0xca, 0xb8, 0xfc, 0xcc, 0x2d, 0x54,
    429              0x73, 0x19, 0x70, 0xc0, 0x10, 0x7a, 0xa4, 0x89, 0x25, 0x19, 0x95, 0x5e,
    430              0x4b, 0xc6, 0x00, 0x1d, 0x7f, 0x4e, 0x6a, 0x2b, 0xf8, 0xa3, 0x01, 0xab,
    431              0x46, 0x05, 0x5c, 0x09, 0xa6, 0x71, 0x88, 0xf1, 0xa7, 0x40, 0xee, 0xf3,
    432              0xe1, 0x5c, 0x02, 0x9b, 0x44, 0xaf, 0x03, 0x44 };
    433          
    434          /* From a NIST PR=false test vector */

   \                                 In section .rodata, align 4
    435          static const unsigned char entropy_nopr[] = {
   \                     entropy_nopr:
   \        0x0   0x79 0x34          DC8 121, 52, 155, 191, 124, 221, 165, 121, 149, 87, 134, 102, 33, 201
   \              0x9B 0xBF    
   \              0x7C 0xDD    
   \              0xA5 0x79    
   \              0x95 0x57    
   \              0x86 0x66    
   \              0x21 0xC9    
   \        0xE   0x13 0x83          DC8 19, 131, 17, 70, 115, 58, 191, 140, 53, 200, 199, 33, 91, 91, 150
   \              0x11 0x46    
   \              0x73 0x3A    
   \              0xBF 0x8C    
   \              0x35 0xC8    
   \              0xC7 0x21    
   \              0x5B 0x5B    
   \              0x96         
   \       0x1D   0xC4 0x8E          DC8 196, 142, 155, 51, 140, 116, 227, 233, 157, 254, 223
   \              0x9B 0x33    
   \              0x8C 0x74    
   \              0xE3 0xE9    
   \              0x9D 0xFE    
   \              0xDF         
    436              0x79, 0x34, 0x9b, 0xbf, 0x7c, 0xdd, 0xa5, 0x79, 0x95, 0x57, 0x86, 0x66,
    437              0x21, 0xc9, 0x13, 0x83, 0x11, 0x46, 0x73, 0x3a, 0xbf, 0x8c, 0x35, 0xc8,
    438              0xc7, 0x21, 0x5b, 0x5b, 0x96, 0xc4, 0x8e, 0x9b, 0x33, 0x8c, 0x74, 0xe3,
    439              0xe9, 0x9d, 0xfe, 0xdf };

   \                                 In section .rodata, align 4
    440          static const unsigned char result_nopr[OUTPUT_LEN] = {
   \                     result_nopr:
   \        0x0   0xC6 0xA1          DC8 198, 161, 106, 184, 212, 32, 112, 111, 15, 52, 171, 127, 236, 90
   \              0x6A 0xB8    
   \              0xD4 0x20    
   \              0x70 0x6F    
   \              0x0F 0x34    
   \              0xAB 0x7F    
   \              0xEC 0x5A    
   \        0xE   0xDC 0xA9          DC8 220, 169, 216, 202, 58, 19, 62, 21, 156, 166, 172, 67, 198, 248
   \              0xD8 0xCA    
   \              0x3A 0x13    
   \              0x3E 0x15    
   \              0x9C 0xA6    
   \              0xAC 0x43    
   \              0xC6 0xF8    
   \       0x1C   0xA2 0xBE          DC8 162, 190, 34, 131, 74, 76, 10, 10, 255, 177, 13, 113, 148, 241, 193
   \              0x22 0x83    
   \              0x4A 0x4C    
   \              0x0A 0x0A    
   \              0xFF 0xB1    
   \              0x0D 0x71    
   \              0x94 0xF1    
   \              0xC1         
   \       0x2B   0xA5 0xCF          DC8 165, 207, 115, 34, 236, 26, 224, 150, 78, 212, 191, 18, 39, 70, 224
   \              0x73 0x22    
   \              0xEC 0x1A    
   \              0xE0 0x96    
   \              0x4E 0xD4    
   \              0xBF 0x12    
   \              0x27 0x46    
   \              0xE0         
   \       0x3A   0x87 0xFD          DC8 135, 253, 181, 179, 233, 27, 52, 147, 213, 187, 152, 250, 237, 73
   \              0xB5 0xB3    
   \              0xE9 0x1B    
   \              0x34 0x93    
   \              0xD5 0xBB    
   \              0x98 0xFA    
   \              0xED 0x49    
   \       0x48   0xE8 0x5F          DC8 232, 95, 19, 15, 200, 164, 89, 183
   \              0x13 0x0F    
   \              0xC8 0xA4    
   \              0x59 0xB7    
    441              0xc6, 0xa1, 0x6a, 0xb8, 0xd4, 0x20, 0x70, 0x6f, 0x0f, 0x34, 0xab, 0x7f,
    442              0xec, 0x5a, 0xdc, 0xa9, 0xd8, 0xca, 0x3a, 0x13, 0x3e, 0x15, 0x9c, 0xa6,
    443              0xac, 0x43, 0xc6, 0xf8, 0xa2, 0xbe, 0x22, 0x83, 0x4a, 0x4c, 0x0a, 0x0a,
    444              0xff, 0xb1, 0x0d, 0x71, 0x94, 0xf1, 0xc1, 0xa5, 0xcf, 0x73, 0x22, 0xec,
    445              0x1a, 0xe0, 0x96, 0x4e, 0xd4, 0xbf, 0x12, 0x27, 0x46, 0xe0, 0x87, 0xfd,
    446              0xb5, 0xb3, 0xe9, 0x1b, 0x34, 0x93, 0xd5, 0xbb, 0x98, 0xfa, 0xed, 0x49,
    447              0xe8, 0x5f, 0x13, 0x0f, 0xc8, 0xa4, 0x59, 0xb7 };
    448          
    449          /* "Entropy" from buffer */

   \                                 In section .bss, align 4
    450          static size_t test_offset;
   \                     test_offset:
   \        0x0                      DS8 4

   \                                 In section .text, align 2, keep-with-next
    451          static int hmac_drbg_self_test_entropy( void *data,
    452                                                  unsigned char *buf, size_t len )
    453          {
   \                     hmac_drbg_self_test_entropy: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x460B             MOV      R3,R1
   \        0x4   0x4614             MOV      R4,R2
    454              const unsigned char *p = data;
    455              memcpy( buf, p + test_offset, len );
   \        0x6   0x....             LDR.N    R5,??DataTable2_1
   \        0x8   0x6829             LDR      R1,[R5, #+0]
   \        0xA   0x4401             ADD      R1,R0,R1
   \        0xC   0x4618             MOV      R0,R3
   \        0xE   0x....'....        BL       __aeabi_memcpy
    456              test_offset += len;
   \       0x12   0x6828             LDR      R0,[R5, #+0]
   \       0x14   0x1824             ADDS     R4,R4,R0
   \       0x16   0x602C             STR      R4,[R5, #+0]
    457              return( 0 );
   \       0x18   0x2000             MOVS     R0,#+0
   \       0x1A   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    458          }
    459          
    460          #define CHK( c )    if( (c) != 0 )                          \
    461                              {                                       \
    462                                  if( verbose != 0 )                  \
    463                                      mbedtls_printf( "failed\n" );  \
    464                                  return( 1 );                        \
    465                              }
    466          
    467          /*
    468           * Checkup routine for HMAC_DRBG with SHA-1
    469           */

   \                                 In section .text, align 2, keep-with-next
    470          int mbedtls_hmac_drbg_self_test( int verbose )
    471          {
   \                     mbedtls_hmac_drbg_self_test: (+1)
   \        0x0   0xB5F0             PUSH     {R4-R7,LR}
   \        0x2   0xB0AF             SUB      SP,SP,#+188
   \        0x4   0x4604             MOV      R4,R0
    472              mbedtls_hmac_drbg_context ctx;
    473              unsigned char buf[OUTPUT_LEN];
    474              const mbedtls_md_info_t *md_info = mbedtls_md_info_from_type( MBEDTLS_MD_SHA1 );
   \        0x6   0x2004             MOVS     R0,#+4
   \        0x8   0x....'....        BL       mbedtls_md_info_from_type
   \        0xC   0x4605             MOV      R5,R0
    475          
    476              mbedtls_hmac_drbg_init( &ctx );
   \        0xE   0xA802             ADD      R0,SP,#+8
   \       0x10   0x....'....        BL       mbedtls_hmac_drbg_init
    477          
    478              /*
    479               * PR = True
    480               */
    481              if( verbose != 0 )
   \       0x14   0x2C00             CMP      R4,#+0
   \       0x16   0xD002             BEQ.N    ??mbedtls_hmac_drbg_self_test_0
    482                  mbedtls_printf( "  HMAC_DRBG (PR = True) : " );
   \       0x18   0x....             LDR.N    R0,??DataTable2_2
   \       0x1A   0x....'....        BL       DbgConsole_Printf
    483          
    484              test_offset = 0;
   \                     ??mbedtls_hmac_drbg_self_test_0: (+1)
   \       0x1E   0x....             LDR.N    R7,??DataTable2_1
   \       0x20   0x2000             MOVS     R0,#+0
   \       0x22   0x6038             STR      R0,[R7, #+0]
    485              CHK( mbedtls_hmac_drbg_seed( &ctx, md_info,
    486                                   hmac_drbg_self_test_entropy, (void *) entropy_pr,
    487                                   NULL, 0 ) );
   \       0x24   0x....             LDR.N    R6,??DataTable2_3
   \       0x26   0x9001             STR      R0,[SP, #+4]
   \       0x28   0x9000             STR      R0,[SP, #+0]
   \       0x2A   0x....             LDR.N    R3,??DataTable2_4
   \       0x2C   0x4632             MOV      R2,R6
   \       0x2E   0x4629             MOV      R1,R5
   \       0x30   0xA802             ADD      R0,SP,#+8
   \       0x32   0x....'....        BL       mbedtls_hmac_drbg_seed
   \       0x36   0x2800             CMP      R0,#+0
   \       0x38   0xD006             BEQ.N    ??mbedtls_hmac_drbg_self_test_1
   \       0x3A   0x2C00             CMP      R4,#+0
   \       0x3C   0xF000 0x8087      BEQ.W    ??mbedtls_hmac_drbg_self_test_2
   \       0x40   0x....             LDR.N    R0,??DataTable2_5
   \       0x42   0x....'....        BL       DbgConsole_Printf
   \       0x46   0xE082             B.N      ??mbedtls_hmac_drbg_self_test_2
    488              mbedtls_hmac_drbg_set_prediction_resistance( &ctx, MBEDTLS_HMAC_DRBG_PR_ON );
   \                     ??mbedtls_hmac_drbg_self_test_1: (+1)
   \       0x48   0x2101             MOVS     R1,#+1
   \       0x4A   0xA802             ADD      R0,SP,#+8
   \       0x4C   0x....'....        BL       mbedtls_hmac_drbg_set_prediction_resistance
    489              CHK( mbedtls_hmac_drbg_random( &ctx, buf, OUTPUT_LEN ) );
   \       0x50   0x2250             MOVS     R2,#+80
   \       0x52   0xA91B             ADD      R1,SP,#+108
   \       0x54   0xA802             ADD      R0,SP,#+8
   \       0x56   0x....'....        BL       mbedtls_hmac_drbg_random
   \       0x5A   0x2800             CMP      R0,#+0
   \       0x5C   0xD005             BEQ.N    ??mbedtls_hmac_drbg_self_test_3
   \       0x5E   0x2C00             CMP      R4,#+0
   \       0x60   0xD075             BEQ.N    ??mbedtls_hmac_drbg_self_test_2
   \       0x62   0x....             LDR.N    R0,??DataTable2_5
   \       0x64   0x....'....        BL       DbgConsole_Printf
   \       0x68   0xE071             B.N      ??mbedtls_hmac_drbg_self_test_2
    490              CHK( mbedtls_hmac_drbg_random( &ctx, buf, OUTPUT_LEN ) );
   \                     ??mbedtls_hmac_drbg_self_test_3: (+1)
   \       0x6A   0x2250             MOVS     R2,#+80
   \       0x6C   0xA91B             ADD      R1,SP,#+108
   \       0x6E   0xA802             ADD      R0,SP,#+8
   \       0x70   0x....'....        BL       mbedtls_hmac_drbg_random
   \       0x74   0x2800             CMP      R0,#+0
   \       0x76   0xD005             BEQ.N    ??mbedtls_hmac_drbg_self_test_4
   \       0x78   0x2C00             CMP      R4,#+0
   \       0x7A   0xD068             BEQ.N    ??mbedtls_hmac_drbg_self_test_2
   \       0x7C   0x....             LDR.N    R0,??DataTable2_5
   \       0x7E   0x....'....        BL       DbgConsole_Printf
   \       0x82   0xE064             B.N      ??mbedtls_hmac_drbg_self_test_2
    491              CHK( memcmp( buf, result_pr, OUTPUT_LEN ) );
   \                     ??mbedtls_hmac_drbg_self_test_4: (+1)
   \       0x84   0x2250             MOVS     R2,#+80
   \       0x86   0x....             LDR.N    R1,??DataTable2_6
   \       0x88   0xA81B             ADD      R0,SP,#+108
   \       0x8A   0x....'....        BL       memcmp
   \       0x8E   0x2800             CMP      R0,#+0
   \       0x90   0xD005             BEQ.N    ??mbedtls_hmac_drbg_self_test_5
   \       0x92   0x2C00             CMP      R4,#+0
   \       0x94   0xD05B             BEQ.N    ??mbedtls_hmac_drbg_self_test_2
   \       0x96   0x....             LDR.N    R0,??DataTable2_5
   \       0x98   0x....'....        BL       DbgConsole_Printf
   \       0x9C   0xE057             B.N      ??mbedtls_hmac_drbg_self_test_2
    492              mbedtls_hmac_drbg_free( &ctx );
   \                     ??mbedtls_hmac_drbg_self_test_5: (+1)
   \       0x9E   0xA802             ADD      R0,SP,#+8
   \       0xA0   0x....'....        BL       mbedtls_hmac_drbg_free
    493          
    494              mbedtls_hmac_drbg_free( &ctx );
   \       0xA4   0xA802             ADD      R0,SP,#+8
   \       0xA6   0x....'....        BL       mbedtls_hmac_drbg_free
    495          
    496              if( verbose != 0 )
   \       0xAA   0x2C00             CMP      R4,#+0
   \       0xAC   0xD002             BEQ.N    ??mbedtls_hmac_drbg_self_test_6
    497                  mbedtls_printf( "passed\n\r" );
   \       0xAE   0x....             LDR.N    R0,??DataTable2_7
   \       0xB0   0x....'....        BL       DbgConsole_Printf
    498          
    499              /*
    500               * PR = False
    501               */
    502              if( verbose != 0 )
   \                     ??mbedtls_hmac_drbg_self_test_6: (+1)
   \       0xB4   0x2C00             CMP      R4,#+0
   \       0xB6   0xD002             BEQ.N    ??mbedtls_hmac_drbg_self_test_7
    503                  mbedtls_printf( "  HMAC_DRBG (PR = False) : " );
   \       0xB8   0x....             LDR.N    R0,??DataTable2_8
   \       0xBA   0x....'....        BL       DbgConsole_Printf
    504          
    505              mbedtls_hmac_drbg_init( &ctx );
   \                     ??mbedtls_hmac_drbg_self_test_7: (+1)
   \       0xBE   0xA802             ADD      R0,SP,#+8
   \       0xC0   0x....'....        BL       mbedtls_hmac_drbg_init
    506          
    507              test_offset = 0;
   \       0xC4   0x2000             MOVS     R0,#+0
   \       0xC6   0x6038             STR      R0,[R7, #+0]
    508              CHK( mbedtls_hmac_drbg_seed( &ctx, md_info,
    509                                   hmac_drbg_self_test_entropy, (void *) entropy_nopr,
    510                                   NULL, 0 ) );
   \       0xC8   0x9001             STR      R0,[SP, #+4]
   \       0xCA   0x9000             STR      R0,[SP, #+0]
   \       0xCC   0x....             LDR.N    R3,??DataTable2_9
   \       0xCE   0x4632             MOV      R2,R6
   \       0xD0   0x4629             MOV      R1,R5
   \       0xD2   0xA802             ADD      R0,SP,#+8
   \       0xD4   0x....'....        BL       mbedtls_hmac_drbg_seed
   \       0xD8   0x2800             CMP      R0,#+0
   \       0xDA   0xD005             BEQ.N    ??mbedtls_hmac_drbg_self_test_8
   \       0xDC   0x2C00             CMP      R4,#+0
   \       0xDE   0xD036             BEQ.N    ??mbedtls_hmac_drbg_self_test_2
   \       0xE0   0x....             LDR.N    R0,??DataTable2_5
   \       0xE2   0x....'....        BL       DbgConsole_Printf
   \       0xE6   0xE032             B.N      ??mbedtls_hmac_drbg_self_test_2
    511              CHK( mbedtls_hmac_drbg_reseed( &ctx, NULL, 0 ) );
   \                     ??mbedtls_hmac_drbg_self_test_8: (+1)
   \       0xE8   0x2200             MOVS     R2,#+0
   \       0xEA   0x4611             MOV      R1,R2
   \       0xEC   0xA802             ADD      R0,SP,#+8
   \       0xEE   0x....'....        BL       mbedtls_hmac_drbg_reseed
   \       0xF2   0x2800             CMP      R0,#+0
   \       0xF4   0xD005             BEQ.N    ??mbedtls_hmac_drbg_self_test_9
   \       0xF6   0x2C00             CMP      R4,#+0
   \       0xF8   0xD029             BEQ.N    ??mbedtls_hmac_drbg_self_test_2
   \       0xFA   0x....             LDR.N    R0,??DataTable2_5
   \       0xFC   0x....'....        BL       DbgConsole_Printf
   \      0x100   0xE025             B.N      ??mbedtls_hmac_drbg_self_test_2
    512              CHK( mbedtls_hmac_drbg_random( &ctx, buf, OUTPUT_LEN ) );
   \                     ??mbedtls_hmac_drbg_self_test_9: (+1)
   \      0x102   0x2250             MOVS     R2,#+80
   \      0x104   0xA91B             ADD      R1,SP,#+108
   \      0x106   0xA802             ADD      R0,SP,#+8
   \      0x108   0x....'....        BL       mbedtls_hmac_drbg_random
   \      0x10C   0x2800             CMP      R0,#+0
   \      0x10E   0xD005             BEQ.N    ??mbedtls_hmac_drbg_self_test_10
   \      0x110   0x2C00             CMP      R4,#+0
   \      0x112   0xD01C             BEQ.N    ??mbedtls_hmac_drbg_self_test_2
   \      0x114   0x....             LDR.N    R0,??DataTable2_5
   \      0x116   0x....'....        BL       DbgConsole_Printf
   \      0x11A   0xE018             B.N      ??mbedtls_hmac_drbg_self_test_2
    513              CHK( mbedtls_hmac_drbg_random( &ctx, buf, OUTPUT_LEN ) );
   \                     ??mbedtls_hmac_drbg_self_test_10: (+1)
   \      0x11C   0x2250             MOVS     R2,#+80
   \      0x11E   0xA91B             ADD      R1,SP,#+108
   \      0x120   0xA802             ADD      R0,SP,#+8
   \      0x122   0x....'....        BL       mbedtls_hmac_drbg_random
   \      0x126   0x2800             CMP      R0,#+0
   \      0x128   0xD005             BEQ.N    ??mbedtls_hmac_drbg_self_test_11
   \      0x12A   0x2C00             CMP      R4,#+0
   \      0x12C   0xD00F             BEQ.N    ??mbedtls_hmac_drbg_self_test_2
   \      0x12E   0x....             LDR.N    R0,??DataTable2_5
   \      0x130   0x....'....        BL       DbgConsole_Printf
   \      0x134   0xE00B             B.N      ??mbedtls_hmac_drbg_self_test_2
    514              CHK( memcmp( buf, result_nopr, OUTPUT_LEN ) );
   \                     ??mbedtls_hmac_drbg_self_test_11: (+1)
   \      0x136   0x2250             MOVS     R2,#+80
   \      0x138   0x....             LDR.N    R1,??DataTable2_10
   \      0x13A   0xA81B             ADD      R0,SP,#+108
   \      0x13C   0x....'....        BL       memcmp
   \      0x140   0x2800             CMP      R0,#+0
   \      0x142   0xD006             BEQ.N    ??mbedtls_hmac_drbg_self_test_12
   \      0x144   0x2C00             CMP      R4,#+0
   \      0x146   0xD002             BEQ.N    ??mbedtls_hmac_drbg_self_test_2
   \      0x148   0x....             LDR.N    R0,??DataTable2_5
   \      0x14A   0x....'....        BL       DbgConsole_Printf
   \                     ??mbedtls_hmac_drbg_self_test_2: (+1)
   \      0x14E   0x2001             MOVS     R0,#+1
   \      0x150   0xE010             B.N      ??mbedtls_hmac_drbg_self_test_13
    515              mbedtls_hmac_drbg_free( &ctx );
   \                     ??mbedtls_hmac_drbg_self_test_12: (+1)
   \      0x152   0xA802             ADD      R0,SP,#+8
   \      0x154   0x....'....        BL       mbedtls_hmac_drbg_free
    516          
    517              mbedtls_hmac_drbg_free( &ctx );
   \      0x158   0xA802             ADD      R0,SP,#+8
   \      0x15A   0x....'....        BL       mbedtls_hmac_drbg_free
    518          
    519              if( verbose != 0 )
   \      0x15E   0x2C00             CMP      R4,#+0
   \      0x160   0xD002             BEQ.N    ??mbedtls_hmac_drbg_self_test_14
    520                  mbedtls_printf( "passed\n\r" );
   \      0x162   0x....             LDR.N    R0,??DataTable2_7
   \      0x164   0x....'....        BL       DbgConsole_Printf
    521          
    522              if( verbose != 0 )
   \                     ??mbedtls_hmac_drbg_self_test_14: (+1)
   \      0x168   0x2C00             CMP      R4,#+0
   \      0x16A   0xD002             BEQ.N    ??mbedtls_hmac_drbg_self_test_15
    523                  mbedtls_printf( "\n\r" );
   \      0x16C   0x....             ADR.N    R0,??DataTable2  ;; 0x0A, 0x0D, 0x00, 0x00
   \      0x16E   0x....'....        BL       DbgConsole_Printf
    524          
    525              return( 0 );
   \                     ??mbedtls_hmac_drbg_self_test_15: (+1)
   \      0x172   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_hmac_drbg_self_test_13: (+1)
   \      0x174   0xB02F             ADD      SP,SP,#+188
   \      0x176   0xBDF0             POP      {R4-R7,PC}       ;; return
    526          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \        0x0   0x0A 0x0D          DC8      0x0A, 0x0D, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \        0x0   0x....'....        DC32     test_offset

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \        0x0   0x....'....        DC32     hmac_drbg_self_test_entropy

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \        0x0   0x....'....        DC32     entropy_pr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \        0x0   0x....'....        DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \        0x0   0x....'....        DC32     result_pr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \        0x0   0x....'....        DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \        0x0   0x....'....        DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_9:
   \        0x0   0x....'....        DC32     entropy_nopr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_10:
   \        0x0   0x....'....        DC32     result_nopr

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x20 0x20          DC8 "  HMAC_DRBG (PR = True) : "
   \              0x48 0x4D    
   \              0x41 0x43    
   \              0x5F 0x44    
   \              0x52 0x42    
   \              0x47 0x20    
   \              0x28 0x50    
   \              0x52 0x20    
   \              0x3D 0x20    
   \              0x54 0x72    
   \              0x75 0x65    
   \              0x29 0x20    
   \              0x3A 0x20    
   \              0x00         
   \       0x1B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_1:
   \        0x0   0x66 0x61          DC8 "failed\012"
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_2:
   \        0x0   0x70 0x61          DC8 "passed\012\015"
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x0A 0x0D    
   \              0x00         
   \        0x9   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_3:
   \        0x0   0x20 0x20          DC8 "  HMAC_DRBG (PR = False) : "
   \              0x48 0x4D    
   \              0x41 0x43    
   \              0x5F 0x44    
   \              0x52 0x42    
   \              0x47 0x20    
   \              0x28 0x50    
   \              0x52 0x20    
   \              0x3D 0x20    
   \              0x46 0x61    
   \              0x6C 0x73    
   \              0x65 0x29    
   \              0x20 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \        0x0   0x0A 0x0D          DC8 "\012\015"
   \              0x00         
   \        0x3   0x00               DC8 0
    527          #endif /* MBEDTLS_SHA1_C */
    528          #endif /* MBEDTLS_SELF_TEST */
    529          
    530          #endif /* MBEDTLS_HMAC_DRBG_C */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   hmac_drbg_self_test_entropy
        16   -> __aeabi_memcpy
       8   mbedtls_hmac_drbg_free
         8   -> mbedtls_md_free
         0   -> mbedtls_platform_zeroize
       0   mbedtls_hmac_drbg_init
         0   -> __aeabi_memset4
       8   mbedtls_hmac_drbg_random
         8   -> mbedtls_hmac_drbg_random_with_add
      32   mbedtls_hmac_drbg_random_with_add
        32   -> __aeabi_memcpy
        32   -> mbedtls_hmac_drbg_reseed
        32   -> mbedtls_hmac_drbg_update
        32   -> mbedtls_md_get_size
        32   -> mbedtls_md_hmac_finish
        32   -> mbedtls_md_hmac_reset
        32   -> mbedtls_md_hmac_update
     408   mbedtls_hmac_drbg_reseed
       408   -- Indirect call
       408   -> __aeabi_memcpy
       408   -> __aeabi_memset4
       408   -> mbedtls_hmac_drbg_update
      24   mbedtls_hmac_drbg_seed
        24   -> __aeabi_memset4
        24   -> mbedtls_hmac_drbg_reseed
        24   -> mbedtls_md_get_size
        24   -> mbedtls_md_hmac_starts
        24   -> mbedtls_md_setup
      24   mbedtls_hmac_drbg_seed_buf
        24   -> __aeabi_memset4
        24   -> mbedtls_hmac_drbg_update
        24   -> mbedtls_md_get_size
        24   -> mbedtls_md_hmac_starts
        24   -> mbedtls_md_setup
     208   mbedtls_hmac_drbg_self_test
       208   -> DbgConsole_Printf
       208   -> mbedtls_hmac_drbg_free
       208   -> mbedtls_hmac_drbg_init
       208   -> mbedtls_hmac_drbg_random
       208   -> mbedtls_hmac_drbg_reseed
       208   -> mbedtls_hmac_drbg_seed
       208   -> mbedtls_hmac_drbg_set_prediction_resistance
       208   -> mbedtls_md_info_from_type
       208   -> memcmp
       0   mbedtls_hmac_drbg_set_entropy_len
       0   mbedtls_hmac_drbg_set_prediction_resistance
       0   mbedtls_hmac_drbg_set_reseed_interval
      96   mbedtls_hmac_drbg_update
        96   -> mbedtls_md_get_size
        96   -> mbedtls_md_hmac_finish
        96   -> mbedtls_md_hmac_reset
        96   -> mbedtls_md_hmac_starts
        96   -> mbedtls_md_hmac_update


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_10
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable2_9
      28  ?_0
       8  ?_1
      12  ?_2
      28  ?_3
       4  ?_4
      40  entropy_nopr
      56  entropy_pr
      28  hmac_drbg_self_test_entropy
      24  mbedtls_hmac_drbg_free
       8  mbedtls_hmac_drbg_init
      12  mbedtls_hmac_drbg_random
     200  mbedtls_hmac_drbg_random_with_add
     114  mbedtls_hmac_drbg_reseed
     108  mbedtls_hmac_drbg_seed
      70  mbedtls_hmac_drbg_seed_buf
     376  mbedtls_hmac_drbg_self_test
       4  mbedtls_hmac_drbg_set_entropy_len
       4  mbedtls_hmac_drbg_set_prediction_resistance
       4  mbedtls_hmac_drbg_set_reseed_interval
     154  mbedtls_hmac_drbg_update
      80  result_nopr
      80  result_pr
       4  test_offset

 
     4 bytes in section .bss
   336 bytes in section .rodata
 1 150 bytes in section .text
 
 1 150 bytes of CODE  memory
   336 bytes of CONST memory
     4 bytes of DATA  memory

Errors: none
Warnings: none
