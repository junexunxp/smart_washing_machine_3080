###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.3.193/W32 for ARM         10/Jun/2019  13:49:00
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\Development\smart_washing_machine_3080\mbedtls\library\x509write_csr.c
#    Command line =  
#        -f C:\Users\nxf42695\AppData\Local\Temp\1\EW7A23.tmp
#        (C:\Development\smart_washing_machine_3080\mbedtls\library\x509write_csr.c
#        -D DEBUG -D USE_RTOS -D XIP_EXTERNAL_FLASH=1 -D
#        XIP_BOOT_HEADER_ENABLE=1 -D CPU_MIMXRT1052DVL6B -D FSL_RTOS_FREE_RTOS
#        -D PRINTF_ADVANCED_ENABLE -D
#        "MBEDTLS_CONFIG_FILE=\"ksdk_mbedtls_config.h\"" -lC
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list -lA
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list
#        --diag_suppress Pa082,Pa050 -o
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_d16 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" --preinclude
#        C:\Development\smart_washing_machine_3080/source\app_preinclude.h -I
#        C:\Development\smart_washing_machine_3080/board\ -I
#        C:\Development\smart_washing_machine_3080/source\ -I
#        C:\Development\smart_washing_machine_3080/CMSIS\ -I
#        C:\Development\smart_washing_machine_3080/amazon-freertos/freertos/portable\
#        -I C:\Development\smart_washing_machine_3080/amazon-freertos/include\
#        -I C:\Development\smart_washing_machine_3080/component/lists\ -I
#        C:\Development\smart_washing_machine_3080/component/serial_manager\ -I
#        C:\Development\smart_washing_machine_3080/component/uart\ -I
#        C:\Development\smart_washing_machine_3080/component/kv\ -I
#        C:\Development\smart_washing_machine_3080/component/kv/include\ -I
#        C:\Development\smart_washing_machine_3080/device\ -I
#        C:\Development\smart_washing_machine_3080/doc\ -I
#        C:\Development\smart_washing_machine_3080/drivers\ -I
#        C:\Development\smart_washing_machine_3080/src\ -I
#        C:\Development\smart_washing_machine_3080/startup\ -I
#        C:\Development\smart_washing_machine_3080/utilities\ -I
#        C:\Development\smart_washing_machine_3080/xip\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\atm\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_model\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_sign\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\infra\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\mqtt\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\external_libs\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\coap_cloud\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\CoAPPacket\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\server\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\os\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\awss_reset\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\mbedtls\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\ -I
#        C:\Development\smart_washing_machine_3080\mbedtls\port\ksdk\ -Om)
#    Locale       =  C
#    List file    =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list\x509write_csr.lst
#    Object file  =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj\x509write_csr.o
#
###############################################################################

C:\Development\smart_washing_machine_3080\mbedtls\library\x509write_csr.c
      1          /*
      2           *  X.509 Certificate Signing Request writing
      3           *
      4           *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
      5           *  SPDX-License-Identifier: Apache-2.0
      6           *
      7           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
      8           *  not use this file except in compliance with the License.
      9           *  You may obtain a copy of the License at
     10           *
     11           *  http://www.apache.org/licenses/LICENSE-2.0
     12           *
     13           *  Unless required by applicable law or agreed to in writing, software
     14           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     15           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     16           *  See the License for the specific language governing permissions and
     17           *  limitations under the License.
     18           *
     19           *  This file is part of mbed TLS (https://tls.mbed.org)
     20           */
     21          /*
     22           * References:
     23           * - CSRs: PKCS#10 v1.7 aka RFC 2986
     24           * - attributes: PKCS#9 v2.0 aka RFC 2985
     25           */
     26          
     27          #if !defined(MBEDTLS_CONFIG_FILE)
     28          #include "mbedtls/config.h"
     29          #else
     30          #include MBEDTLS_CONFIG_FILE
     31          #endif
     32          
     33          #if defined(MBEDTLS_X509_CSR_WRITE_C)
     34          
     35          #include "mbedtls/x509_csr.h"
     36          #include "mbedtls/oid.h"
     37          #include "mbedtls/asn1write.h"
     38          #include "mbedtls/platform_util.h"
     39          
     40          #include <string.h>
     41          #include <stdlib.h>
     42          
     43          #if defined(MBEDTLS_PEM_WRITE_C)
     44          #include "mbedtls/pem.h"
     45          #endif
     46          

   \                                 In section .text, align 2, keep-with-next
     47          void mbedtls_x509write_csr_init( mbedtls_x509write_csr *ctx )
     48          {
     49              memset( ctx, 0, sizeof( mbedtls_x509write_csr ) );
   \                     mbedtls_x509write_csr_init: (+1)
   \        0x0   0x2200             MOVS     R2,#+0
   \        0x2   0x2110             MOVS     R1,#+16
   \        0x4   0x....'....        B.W      __aeabi_memset4
     50          }
     51          

   \                                 In section .text, align 2, keep-with-next
     52          void mbedtls_x509write_csr_free( mbedtls_x509write_csr *ctx )
     53          {
   \                     mbedtls_x509write_csr_free: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x4604             MOV      R4,R0
     54              mbedtls_asn1_free_named_data_list( &ctx->subject );
   \        0x4   0x1D20             ADDS     R0,R4,#+4
   \        0x6   0x....'....        BL       mbedtls_asn1_free_named_data_list
     55              mbedtls_asn1_free_named_data_list( &ctx->extensions );
   \        0xA   0xF104 0x000C      ADD      R0,R4,#+12
   \        0xE   0x....'....        BL       mbedtls_asn1_free_named_data_list
     56          
     57              mbedtls_platform_zeroize( ctx, sizeof( mbedtls_x509write_csr ) );
   \       0x12   0x2110             MOVS     R1,#+16
   \       0x14   0x4620             MOV      R0,R4
   \       0x16   0xE8BD 0x4010      POP      {R4,LR}
   \       0x1A   0x....'....        B.W      mbedtls_platform_zeroize
     58          }
     59          

   \                                 In section .text, align 2, keep-with-next
     60          void mbedtls_x509write_csr_set_md_alg( mbedtls_x509write_csr *ctx, mbedtls_md_type_t md_alg )
     61          {
     62              ctx->md_alg = md_alg;
   \                     mbedtls_x509write_csr_set_md_alg: (+1)
   \        0x0   0x7201             STRB     R1,[R0, #+8]
     63          }
   \        0x2   0x4770             BX       LR               ;; return
     64          

   \                                 In section .text, align 2, keep-with-next
     65          void mbedtls_x509write_csr_set_key( mbedtls_x509write_csr *ctx, mbedtls_pk_context *key )
     66          {
     67              ctx->key = key;
   \                     mbedtls_x509write_csr_set_key: (+1)
   \        0x0   0x6001             STR      R1,[R0, #+0]
     68          }
   \        0x2   0x4770             BX       LR               ;; return
     69          

   \                                 In section .text, align 2, keep-with-next
     70          int mbedtls_x509write_csr_set_subject_name( mbedtls_x509write_csr *ctx,
     71                                              const char *subject_name )
     72          {
     73              return mbedtls_x509_string_to_names( &ctx->subject, subject_name );
   \                     mbedtls_x509write_csr_set_subject_name: (+1)
   \        0x0   0x1D00             ADDS     R0,R0,#+4
   \        0x2   0x....'....        B.W      mbedtls_x509_string_to_names
     74          }
     75          

   \                                 In section .text, align 2, keep-with-next
     76          int mbedtls_x509write_csr_set_extension( mbedtls_x509write_csr *ctx,
     77                                           const char *oid, size_t oid_len,
     78                                           const unsigned char *val, size_t val_len )
     79          {
   \                     mbedtls_x509write_csr_set_extension: (+1)
   \        0x0   0xB51C             PUSH     {R2-R4,LR}
   \        0x2   0x9C04             LDR      R4,[SP, #+16]
     80              return mbedtls_x509_set_extension( &ctx->extensions, oid, oid_len,
     81                                         0, val, val_len );
   \        0x4   0x9401             STR      R4,[SP, #+4]
   \        0x6   0x9300             STR      R3,[SP, #+0]
   \        0x8   0x2300             MOVS     R3,#+0
   \        0xA   0x300C             ADDS     R0,R0,#+12
   \        0xC   0x....'....        BL       mbedtls_x509_set_extension
   \       0x10   0xBD16             POP      {R1,R2,R4,PC}    ;; return
     82          }
     83          

   \                                 In section .text, align 2, keep-with-next
     84          int mbedtls_x509write_csr_set_key_usage( mbedtls_x509write_csr *ctx, unsigned char key_usage )
     85          {
   \                     mbedtls_x509write_csr_set_key_usage: (+1)
   \        0x0   0xB512             PUSH     {R1,R4,LR}
   \        0x2   0xB083             SUB      SP,SP,#+12
   \        0x4   0x4604             MOV      R4,R0
     86              unsigned char buf[4];
     87              unsigned char *c;
     88              int ret;
     89          
     90              c = buf + 4;
   \        0x6   0xA802             ADD      R0,SP,#+8
   \        0x8   0x9002             STR      R0,[SP, #+8]
     91          
     92              if( ( ret = mbedtls_asn1_write_bitstring( &c, buf, &key_usage, 7 ) ) != 4 )
   \        0xA   0x2307             MOVS     R3,#+7
   \        0xC   0xAA03             ADD      R2,SP,#+12
   \        0xE   0xA901             ADD      R1,SP,#+4
   \       0x10   0x....'....        BL       mbedtls_asn1_write_bitstring
   \       0x14   0x2804             CMP      R0,#+4
   \       0x16   0xD10A             BNE.N    ??mbedtls_x509write_csr_set_key_usage_0
     93                  return( ret );
     94          
     95              ret = mbedtls_x509write_csr_set_extension( ctx, MBEDTLS_OID_KEY_USAGE,
     96                                                 MBEDTLS_OID_SIZE( MBEDTLS_OID_KEY_USAGE ),
     97                                                 buf, 4 );
   \       0x18   0x2004             MOVS     R0,#+4
   \       0x1A   0x9000             STR      R0,[SP, #+0]
   \       0x1C   0xAB01             ADD      R3,SP,#+4
   \       0x1E   0x2203             MOVS     R2,#+3
   \       0x20   0x....             ADR.N    R1,??DataTable4  ;; "U\035\017"
   \       0x22   0x4620             MOV      R0,R4
   \       0x24   0x....'....        BL       mbedtls_x509write_csr_set_extension
     98              if( ret != 0 )
   \       0x28   0x2800             CMP      R0,#+0
   \       0x2A   0xD100             BNE.N    ??mbedtls_x509write_csr_set_key_usage_0
     99                  return( ret );
    100          
    101              return( 0 );
   \       0x2C   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_x509write_csr_set_key_usage_0: (+1)
   \       0x2E   0xB004             ADD      SP,SP,#+16
   \       0x30   0xBD10             POP      {R4,PC}          ;; return
    102          }
    103          

   \                                 In section .text, align 2, keep-with-next
    104          int mbedtls_x509write_csr_set_ns_cert_type( mbedtls_x509write_csr *ctx,
    105                                              unsigned char ns_cert_type )
    106          {
   \                     mbedtls_x509write_csr_set_ns_cert_type: (+1)
   \        0x0   0xB512             PUSH     {R1,R4,LR}
   \        0x2   0xB083             SUB      SP,SP,#+12
   \        0x4   0x4604             MOV      R4,R0
    107              unsigned char buf[4];
    108              unsigned char *c;
    109              int ret;
    110          
    111              c = buf + 4;
   \        0x6   0xA802             ADD      R0,SP,#+8
   \        0x8   0x9002             STR      R0,[SP, #+8]
    112          
    113              if( ( ret = mbedtls_asn1_write_bitstring( &c, buf, &ns_cert_type, 8 ) ) != 4 )
   \        0xA   0x2308             MOVS     R3,#+8
   \        0xC   0xAA03             ADD      R2,SP,#+12
   \        0xE   0xA901             ADD      R1,SP,#+4
   \       0x10   0x....'....        BL       mbedtls_asn1_write_bitstring
   \       0x14   0x2804             CMP      R0,#+4
   \       0x16   0xD10A             BNE.N    ??mbedtls_x509write_csr_set_ns_cert_type_0
    114                  return( ret );
    115          
    116              ret = mbedtls_x509write_csr_set_extension( ctx, MBEDTLS_OID_NS_CERT_TYPE,
    117                                                 MBEDTLS_OID_SIZE( MBEDTLS_OID_NS_CERT_TYPE ),
    118                                                 buf, 4 );
   \       0x18   0x2004             MOVS     R0,#+4
   \       0x1A   0x9000             STR      R0,[SP, #+0]
   \       0x1C   0xAB01             ADD      R3,SP,#+4
   \       0x1E   0x2209             MOVS     R2,#+9
   \       0x20   0x....             LDR.N    R1,??DataTable4_1
   \       0x22   0x4620             MOV      R0,R4
   \       0x24   0x....'....        BL       mbedtls_x509write_csr_set_extension
    119              if( ret != 0 )
   \       0x28   0x2800             CMP      R0,#+0
   \       0x2A   0xD100             BNE.N    ??mbedtls_x509write_csr_set_ns_cert_type_0
    120                  return( ret );
    121          
    122              return( 0 );
   \       0x2C   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_x509write_csr_set_ns_cert_type_0: (+1)
   \       0x2E   0xB004             ADD      SP,SP,#+16
   \       0x30   0xBD10             POP      {R4,PC}          ;; return
    123          }
    124          

   \                                 In section .text, align 2, keep-with-next
    125          int mbedtls_x509write_csr_der( mbedtls_x509write_csr *ctx, unsigned char *buf, size_t size,
    126                                 int (*f_rng)(void *, unsigned char *, size_t),
    127                                 void *p_rng )
    128          {
   \                     mbedtls_x509write_csr_der: (+1)
   \        0x0   0xE92D 0x43F0      PUSH     {R4-R9,LR}
   \        0x4   0xF5AD 0x6D20      SUB      SP,SP,#+2560
   \        0x8   0xB099             SUB      SP,SP,#+100
   \        0xA   0x4607             MOV      R7,R0
   \        0xC   0x460D             MOV      R5,R1
   \        0xE   0x4616             MOV      R6,R2
   \       0x10   0x4698             MOV      R8,R3
    129              int ret;
    130              const char *sig_oid;
    131              size_t sig_oid_len = 0;
   \       0x12   0x2000             MOVS     R0,#+0
   \       0x14   0x9007             STR      R0,[SP, #+28]
    132              unsigned char *c, *c2;
    133              unsigned char hash[64];
    134              unsigned char sig[MBEDTLS_MPI_MAX_SIZE];
    135              unsigned char tmp_buf[2048];
    136              size_t pub_len = 0, sig_and_oid_len = 0, sig_len;
    137              size_t len = 0;
    138              mbedtls_pk_type_t pk_alg;
    139          
    140              /*
    141               * Prepare data to be signed in tmp_buf
    142               */
    143              c = tmp_buf + sizeof( tmp_buf );
   \       0x16   0xF640 0x0024      MOVW     R0,#+2084
   \       0x1A   0x4468             ADD      R0,R0,SP
   \       0x1C   0x9004             STR      R0,[SP, #+16]
    144          
    145              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_x509_write_extensions( &c, tmp_buf, ctx->extensions ) );
   \       0x1E   0x68FA             LDR      R2,[R7, #+12]
   \       0x20   0xA909             ADD      R1,SP,#+36
   \       0x22   0xA804             ADD      R0,SP,#+16
   \       0x24   0x....'....        BL       mbedtls_x509_write_extensions
   \       0x28   0x0004             MOVS     R4,R0
   \       0x2A   0xF100 0x80F0      BMI.W    ??mbedtls_x509write_csr_der_0
    146          
    147              if( len )
   \       0x2E   0xD03F             BEQ.N    ??mbedtls_x509write_csr_der_1
    148              {
    149                  MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &c, tmp_buf, len ) );
   \       0x30   0x4622             MOV      R2,R4
   \       0x32   0xA909             ADD      R1,SP,#+36
   \       0x34   0xA804             ADD      R0,SP,#+16
   \       0x36   0x....'....        BL       mbedtls_asn1_write_len
   \       0x3A   0x2800             CMP      R0,#+0
   \       0x3C   0xF100 0x80E7      BMI.W    ??mbedtls_x509write_csr_der_0
   \       0x40   0x1904             ADDS     R4,R0,R4
    150                  MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &c, tmp_buf, MBEDTLS_ASN1_CONSTRUCTED |
    151                                                                  MBEDTLS_ASN1_SEQUENCE ) );
   \       0x42   0x2230             MOVS     R2,#+48
   \       0x44   0xA909             ADD      R1,SP,#+36
   \       0x46   0xA804             ADD      R0,SP,#+16
   \       0x48   0x....'....        BL       mbedtls_asn1_write_tag
   \       0x4C   0x2800             CMP      R0,#+0
   \       0x4E   0xF100 0x80DE      BMI.W    ??mbedtls_x509write_csr_der_0
   \       0x52   0x1904             ADDS     R4,R0,R4
    152          
    153                  MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &c, tmp_buf, len ) );
   \       0x54   0x4622             MOV      R2,R4
   \       0x56   0xA909             ADD      R1,SP,#+36
   \       0x58   0xA804             ADD      R0,SP,#+16
   \       0x5A   0x....'....        BL       mbedtls_asn1_write_len
   \       0x5E   0x2800             CMP      R0,#+0
   \       0x60   0xF100 0x80D5      BMI.W    ??mbedtls_x509write_csr_der_0
   \       0x64   0x1904             ADDS     R4,R0,R4
    154                  MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &c, tmp_buf, MBEDTLS_ASN1_CONSTRUCTED |
    155                                                                  MBEDTLS_ASN1_SET ) );
   \       0x66   0x2231             MOVS     R2,#+49
   \       0x68   0xA909             ADD      R1,SP,#+36
   \       0x6A   0xA804             ADD      R0,SP,#+16
   \       0x6C   0x....'....        BL       mbedtls_asn1_write_tag
   \       0x70   0x2800             CMP      R0,#+0
   \       0x72   0xF100 0x80CC      BMI.W    ??mbedtls_x509write_csr_der_0
   \       0x76   0x1904             ADDS     R4,R0,R4
    156          
    157                  MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_oid( &c, tmp_buf, MBEDTLS_OID_PKCS9_CSR_EXT_REQ,
    158                                                    MBEDTLS_OID_SIZE( MBEDTLS_OID_PKCS9_CSR_EXT_REQ ) ) );
   \       0x78   0x2309             MOVS     R3,#+9
   \       0x7A   0x....             LDR.N    R2,??DataTable4_2
   \       0x7C   0xA909             ADD      R1,SP,#+36
   \       0x7E   0xA804             ADD      R0,SP,#+16
   \       0x80   0x....'....        BL       mbedtls_asn1_write_oid
   \       0x84   0x2800             CMP      R0,#+0
   \       0x86   0xF100 0x80C2      BMI.W    ??mbedtls_x509write_csr_der_0
   \       0x8A   0x1904             ADDS     R4,R0,R4
    159          
    160                  MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &c, tmp_buf, len ) );
   \       0x8C   0x4622             MOV      R2,R4
   \       0x8E   0xA909             ADD      R1,SP,#+36
   \       0x90   0xA804             ADD      R0,SP,#+16
   \       0x92   0x....'....        BL       mbedtls_asn1_write_len
   \       0x96   0x2800             CMP      R0,#+0
   \       0x98   0xF100 0x80B9      BMI.W    ??mbedtls_x509write_csr_der_0
   \       0x9C   0x1904             ADDS     R4,R0,R4
    161                  MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &c, tmp_buf, MBEDTLS_ASN1_CONSTRUCTED |
    162                                                                  MBEDTLS_ASN1_SEQUENCE ) );
   \       0x9E   0x2230             MOVS     R2,#+48
   \       0xA0   0xA909             ADD      R1,SP,#+36
   \       0xA2   0xA804             ADD      R0,SP,#+16
   \       0xA4   0x....'....        BL       mbedtls_asn1_write_tag
   \       0xA8   0x2800             CMP      R0,#+0
   \       0xAA   0xF100 0x80B0      BMI.W    ??mbedtls_x509write_csr_der_0
   \       0xAE   0x1904             ADDS     R4,R0,R4
    163              }
    164          
    165              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &c, tmp_buf, len ) );
   \                     ??mbedtls_x509write_csr_der_1: (+1)
   \       0xB0   0x4622             MOV      R2,R4
   \       0xB2   0xA909             ADD      R1,SP,#+36
   \       0xB4   0xA804             ADD      R0,SP,#+16
   \       0xB6   0x....'....        BL       mbedtls_asn1_write_len
   \       0xBA   0x2800             CMP      R0,#+0
   \       0xBC   0xF100 0x80A7      BMI.W    ??mbedtls_x509write_csr_der_0
   \       0xC0   0x1904             ADDS     R4,R0,R4
    166              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &c, tmp_buf, MBEDTLS_ASN1_CONSTRUCTED |
    167                                                              MBEDTLS_ASN1_CONTEXT_SPECIFIC ) );
   \       0xC2   0x22A0             MOVS     R2,#+160
   \       0xC4   0xA909             ADD      R1,SP,#+36
   \       0xC6   0xA804             ADD      R0,SP,#+16
   \       0xC8   0x....'....        BL       mbedtls_asn1_write_tag
   \       0xCC   0x2800             CMP      R0,#+0
   \       0xCE   0xF100 0x809E      BMI.W    ??mbedtls_x509write_csr_der_0
   \       0xD2   0x1904             ADDS     R4,R0,R4
    168          
    169              MBEDTLS_ASN1_CHK_ADD( pub_len, mbedtls_pk_write_pubkey_der( ctx->key,
    170                                                          tmp_buf, c - tmp_buf ) );
   \       0xD4   0x9A04             LDR      R2,[SP, #+16]
   \       0xD6   0xA809             ADD      R0,SP,#+36
   \       0xD8   0x1A12             SUBS     R2,R2,R0
   \       0xDA   0xA909             ADD      R1,SP,#+36
   \       0xDC   0x6838             LDR      R0,[R7, #+0]
   \       0xDE   0x....'....        BL       mbedtls_pk_write_pubkey_der
   \       0xE2   0x4681             MOV      R9,R0
   \       0xE4   0xF1B9 0x0F00      CMP      R9,#+0
   \       0xE8   0xF100 0x8091      BMI.W    ??mbedtls_x509write_csr_der_0
    171              c -= pub_len;
   \       0xEC   0x9804             LDR      R0,[SP, #+16]
   \       0xEE   0xF1C9 0x0100      RSB      R1,R9,#+0
   \       0xF2   0x4408             ADD      R0,R0,R1
   \       0xF4   0x9004             STR      R0,[SP, #+16]
    172              len += pub_len;
    173          
    174              /*
    175               *  Subject  ::=  Name
    176               */
    177              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_x509_write_names( &c, tmp_buf, ctx->subject ) );
   \       0xF6   0x687A             LDR      R2,[R7, #+4]
   \       0xF8   0xA909             ADD      R1,SP,#+36
   \       0xFA   0xA804             ADD      R0,SP,#+16
   \       0xFC   0x....'....        BL       mbedtls_x509_write_names
   \      0x100   0x2800             CMP      R0,#+0
   \      0x102   0xF100 0x8084      BMI.W    ??mbedtls_x509write_csr_der_0
   \      0x106   0x4481             ADD      R9,R0,R9
   \      0x108   0x444C             ADD      R4,R9,R4
    178          
    179              /*
    180               *  Version  ::=  INTEGER  {  v1(0), v2(1), v3(2)  }
    181               */
    182              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_int( &c, tmp_buf, 0 ) );
   \      0x10A   0x2200             MOVS     R2,#+0
   \      0x10C   0xA909             ADD      R1,SP,#+36
   \      0x10E   0xA804             ADD      R0,SP,#+16
   \      0x110   0x....'....        BL       mbedtls_asn1_write_int
   \      0x114   0x2800             CMP      R0,#+0
   \      0x116   0xD47A             BMI.N    ??mbedtls_x509write_csr_der_0
   \      0x118   0x1904             ADDS     R4,R0,R4
    183          
    184              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &c, tmp_buf, len ) );
   \      0x11A   0x4622             MOV      R2,R4
   \      0x11C   0xA909             ADD      R1,SP,#+36
   \      0x11E   0xA804             ADD      R0,SP,#+16
   \      0x120   0x....'....        BL       mbedtls_asn1_write_len
   \      0x124   0x2800             CMP      R0,#+0
   \      0x126   0xD472             BMI.N    ??mbedtls_x509write_csr_der_0
   \      0x128   0x1904             ADDS     R4,R0,R4
    185              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &c, tmp_buf, MBEDTLS_ASN1_CONSTRUCTED |
    186                                                              MBEDTLS_ASN1_SEQUENCE ) );
   \      0x12A   0x2230             MOVS     R2,#+48
   \      0x12C   0xA909             ADD      R1,SP,#+36
   \      0x12E   0xA804             ADD      R0,SP,#+16
   \      0x130   0x....'....        BL       mbedtls_asn1_write_tag
   \      0x134   0x2800             CMP      R0,#+0
   \      0x136   0xD46A             BMI.N    ??mbedtls_x509write_csr_der_0
   \      0x138   0xF8DD 0x9A80      LDR      R9,[SP, #+2688]
   \      0x13C   0x1904             ADDS     R4,R0,R4
    187          
    188              /*
    189               * Prepare signature
    190               */
    191              mbedtls_md( mbedtls_md_info_from_type( ctx->md_alg ), c, len, hash );
   \      0x13E   0x7A38             LDRB     R0,[R7, #+8]
   \      0x140   0x....'....        BL       mbedtls_md_info_from_type
   \      0x144   0xF640 0x2324      MOVW     R3,#+2596
   \      0x148   0x446B             ADD      R3,R3,SP
   \      0x14A   0x4622             MOV      R2,R4
   \      0x14C   0x9904             LDR      R1,[SP, #+16]
   \      0x14E   0x....'....        BL       mbedtls_md
    192          
    193              if( ( ret = mbedtls_pk_sign( ctx->key, ctx->md_alg, hash, 0, sig, &sig_len,
    194                                           f_rng, p_rng ) ) != 0 )
   \      0x152   0xF8CD 0x900C      STR      R9,[SP, #+12]
   \      0x156   0xF8CD 0x8008      STR      R8,[SP, #+8]
   \      0x15A   0xA806             ADD      R0,SP,#+24
   \      0x15C   0x9001             STR      R0,[SP, #+4]
   \      0x15E   0xF640 0x0024      MOVW     R0,#+2084
   \      0x162   0x4468             ADD      R0,R0,SP
   \      0x164   0x9000             STR      R0,[SP, #+0]
   \      0x166   0x2300             MOVS     R3,#+0
   \      0x168   0xF640 0x2224      MOVW     R2,#+2596
   \      0x16C   0x446A             ADD      R2,R2,SP
   \      0x16E   0x7A39             LDRB     R1,[R7, #+8]
   \      0x170   0x6838             LDR      R0,[R7, #+0]
   \      0x172   0x....'....        BL       mbedtls_pk_sign
   \      0x176   0x2800             CMP      R0,#+0
   \      0x178   0xD149             BNE.N    ??mbedtls_x509write_csr_der_0
    195              {
    196                  return( ret );
    197              }
    198          
    199              if( mbedtls_pk_can_do( ctx->key, MBEDTLS_PK_RSA ) )
   \      0x17A   0x2101             MOVS     R1,#+1
   \      0x17C   0x6838             LDR      R0,[R7, #+0]
   \      0x17E   0x....'....        BL       mbedtls_pk_can_do
   \      0x182   0x2800             CMP      R0,#+0
   \      0x184   0xD008             BEQ.N    ??mbedtls_x509write_csr_der_2
    200                  pk_alg = MBEDTLS_PK_RSA;
   \      0x186   0x2001             MOVS     R0,#+1
    201              else if( mbedtls_pk_can_do( ctx->key, MBEDTLS_PK_ECDSA ) )
    202                  pk_alg = MBEDTLS_PK_ECDSA;
    203              else
    204                  return( MBEDTLS_ERR_X509_INVALID_ALG );
    205          
    206              if( ( ret = mbedtls_oid_get_oid_by_sig_alg( pk_alg, ctx->md_alg,
    207                                                          &sig_oid, &sig_oid_len ) ) != 0 )
   \                     ??mbedtls_x509write_csr_der_3: (+1)
   \      0x188   0xAB07             ADD      R3,SP,#+28
   \      0x18A   0xAA08             ADD      R2,SP,#+32
   \      0x18C   0x7A39             LDRB     R1,[R7, #+8]
   \      0x18E   0x....'....        BL       mbedtls_oid_get_oid_by_sig_alg
   \      0x192   0x2800             CMP      R0,#+0
   \      0x194   0xD00A             BEQ.N    ??mbedtls_x509write_csr_der_4
    208              {
    209                  return( ret );
   \      0x196   0xE03A             B.N      ??mbedtls_x509write_csr_der_0
    210              }
   \                     ??mbedtls_x509write_csr_der_2: (+1)
   \      0x198   0x2104             MOVS     R1,#+4
   \      0x19A   0x6838             LDR      R0,[R7, #+0]
   \      0x19C   0x....'....        BL       mbedtls_pk_can_do
   \      0x1A0   0x2800             CMP      R0,#+0
   \      0x1A2   0xD001             BEQ.N    ??mbedtls_x509write_csr_der_5
   \      0x1A4   0x2004             MOVS     R0,#+4
   \      0x1A6   0xE7EF             B.N      ??mbedtls_x509write_csr_der_3
   \                     ??mbedtls_x509write_csr_der_5: (+1)
   \      0x1A8   0x....             LDR.N    R0,??DataTable4_3  ;; 0xffffdd00
   \      0x1AA   0xE030             B.N      ??mbedtls_x509write_csr_der_0
    211          
    212              /*
    213               * Write data to output buffer
    214               */
    215              c2 = buf + size;
   \                     ??mbedtls_x509write_csr_der_4: (+1)
   \      0x1AC   0x19A8             ADDS     R0,R5,R6
   \      0x1AE   0x9005             STR      R0,[SP, #+20]
    216              MBEDTLS_ASN1_CHK_ADD( sig_and_oid_len, mbedtls_x509_write_sig( &c2, buf,
    217                                                  sig_oid, sig_oid_len, sig, sig_len ) );
   \      0x1B0   0x9806             LDR      R0,[SP, #+24]
   \      0x1B2   0x9001             STR      R0,[SP, #+4]
   \      0x1B4   0xF640 0x0024      MOVW     R0,#+2084
   \      0x1B8   0x4468             ADD      R0,R0,SP
   \      0x1BA   0x9000             STR      R0,[SP, #+0]
   \      0x1BC   0x9B07             LDR      R3,[SP, #+28]
   \      0x1BE   0x9A08             LDR      R2,[SP, #+32]
   \      0x1C0   0x4629             MOV      R1,R5
   \      0x1C2   0xA805             ADD      R0,SP,#+20
   \      0x1C4   0x....'....        BL       mbedtls_x509_write_sig
   \      0x1C8   0x0006             MOVS     R6,R0
   \      0x1CA   0xD420             BMI.N    ??mbedtls_x509write_csr_der_0
    218          
    219              if( len > (size_t)( c2 - buf ) )
   \      0x1CC   0x9805             LDR      R0,[SP, #+20]
   \      0x1CE   0x1B40             SUBS     R0,R0,R5
   \      0x1D0   0x42A0             CMP      R0,R4
   \      0x1D2   0xD202             BCS.N    ??mbedtls_x509write_csr_der_6
    220                  return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
   \      0x1D4   0xF06F 0x006B      MVN      R0,#+107
   \      0x1D8   0xE019             B.N      ??mbedtls_x509write_csr_der_0
    221          
    222              c2 -= len;
   \                     ??mbedtls_x509write_csr_der_6: (+1)
   \      0x1DA   0x9805             LDR      R0,[SP, #+20]
   \      0x1DC   0x4261             RSBS     R1,R4,#+0
   \      0x1DE   0x4408             ADD      R0,R0,R1
   \      0x1E0   0x9005             STR      R0,[SP, #+20]
    223              memcpy( c2, c, len );
   \      0x1E2   0x4622             MOV      R2,R4
   \      0x1E4   0x9904             LDR      R1,[SP, #+16]
   \      0x1E6   0x....'....        BL       __aeabi_memcpy
    224          
    225              len += sig_and_oid_len;
   \      0x1EA   0x1936             ADDS     R6,R6,R4
    226              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &c2, buf, len ) );
   \      0x1EC   0x4632             MOV      R2,R6
   \      0x1EE   0x4629             MOV      R1,R5
   \      0x1F0   0xA805             ADD      R0,SP,#+20
   \      0x1F2   0x....'....        BL       mbedtls_asn1_write_len
   \      0x1F6   0x2800             CMP      R0,#+0
   \      0x1F8   0xD409             BMI.N    ??mbedtls_x509write_csr_der_0
   \      0x1FA   0x1986             ADDS     R6,R0,R6
    227              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &c2, buf, MBEDTLS_ASN1_CONSTRUCTED |
    228                                                           MBEDTLS_ASN1_SEQUENCE ) );
   \      0x1FC   0x2230             MOVS     R2,#+48
   \      0x1FE   0x4629             MOV      R1,R5
   \      0x200   0xA805             ADD      R0,SP,#+20
   \      0x202   0x....'....        BL       mbedtls_asn1_write_tag
   \      0x206   0x2800             CMP      R0,#+0
   \      0x208   0xD401             BMI.N    ??mbedtls_x509write_csr_der_0
    229          
    230              return( (int) len );
   \      0x20A   0x1986             ADDS     R6,R0,R6
   \      0x20C   0x4630             MOV      R0,R6
   \                     ??mbedtls_x509write_csr_der_0: (+1)
   \      0x20E   0xF50D 0x6D20      ADD      SP,SP,#+2560
   \      0x212   0xB019             ADD      SP,SP,#+100
   \      0x214   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
    231          }
    232          
    233          #define PEM_BEGIN_CSR           "-----BEGIN CERTIFICATE REQUEST-----\n"
    234          #define PEM_END_CSR             "-----END CERTIFICATE REQUEST-----\n"
    235          
    236          #if defined(MBEDTLS_PEM_WRITE_C)

   \                                 In section .text, align 2, keep-with-next
    237          int mbedtls_x509write_csr_pem( mbedtls_x509write_csr *ctx, unsigned char *buf, size_t size,
    238                                 int (*f_rng)(void *, unsigned char *, size_t),
    239                                 void *p_rng )
    240          {
   \                     mbedtls_x509write_csr_pem: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0xF5AD 0x5D80      SUB      SP,SP,#+4096
   \        0x6   0xB084             SUB      SP,SP,#+16
   \        0x8   0x460C             MOV      R4,R1
   \        0xA   0x4615             MOV      R5,R2
   \        0xC   0xF50D 0x5180      ADD      R1,SP,#+4096
   \       0x10   0x6A09             LDR      R1,[R1, #+32]
    241              int ret;
    242              unsigned char output_buf[4096];
    243              size_t olen = 0;
   \       0x12   0x2200             MOVS     R2,#+0
   \       0x14   0x9203             STR      R2,[SP, #+12]
    244          
    245              if( ( ret = mbedtls_x509write_csr_der( ctx, output_buf, sizeof(output_buf),
    246                                             f_rng, p_rng ) ) < 0 )
   \       0x16   0x9100             STR      R1,[SP, #+0]
   \       0x18   0xF44F 0x5280      MOV      R2,#+4096
   \       0x1C   0xA904             ADD      R1,SP,#+16
   \       0x1E   0x....'....        BL       mbedtls_x509write_csr_der
   \       0x22   0x2800             CMP      R0,#+0
   \       0x24   0xD410             BMI.N    ??mbedtls_x509write_csr_pem_0
    247              {
    248                  return( ret );
    249              }
    250          
    251              if( ( ret = mbedtls_pem_write_buffer( PEM_BEGIN_CSR, PEM_END_CSR,
    252                                            output_buf + sizeof(output_buf) - ret,
    253                                            ret, buf, size, &olen ) ) != 0 )
   \       0x26   0xA903             ADD      R1,SP,#+12
   \       0x28   0x9102             STR      R1,[SP, #+8]
   \       0x2A   0x9501             STR      R5,[SP, #+4]
   \       0x2C   0x9400             STR      R4,[SP, #+0]
   \       0x2E   0x4603             MOV      R3,R0
   \       0x30   0xA904             ADD      R1,SP,#+16
   \       0x32   0x4240             RSBS     R0,R0,#+0
   \       0x34   0x4408             ADD      R0,R1,R0
   \       0x36   0xF500 0x5280      ADD      R2,R0,#+4096
   \       0x3A   0x....             LDR.N    R1,??DataTable4_4
   \       0x3C   0x....             LDR.N    R0,??DataTable4_5
   \       0x3E   0x....'....        BL       mbedtls_pem_write_buffer
   \       0x42   0x2800             CMP      R0,#+0
   \       0x44   0xD100             BNE.N    ??mbedtls_x509write_csr_pem_0
    254              {
    255                  return( ret );
    256              }
    257          
    258              return( 0 );
   \       0x46   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_x509write_csr_pem_0: (+1)
   \       0x48   0xF50D 0x5D80      ADD      SP,SP,#+4096
   \       0x4C   0xB005             ADD      SP,SP,#+20
   \       0x4E   0xBD30             POP      {R4,R5,PC}       ;; return
    259          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \        0x0   0x55 0x1D          DC8      "U\035\017"
   \              0x0F 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \        0x0   0x....'....        DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \        0x0   0x....'....        DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \        0x0   0xFFFF'DD00        DC32     0xffffdd00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \        0x0   0x....'....        DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \        0x0   0x....'....        DC32     ?_3

   \                                 In section .rodata, align 4
   \        0x0   0x55 0x1D          DC8 "U\035\017"
   \              0x0F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_1:
   \        0x0   0x60 0x86          DC8 "`\206H\001\206\370B\001\001"
   \              0x48 0x01    
   \              0x86 0xF8    
   \              0x42 0x01    
   \              0x01 0x00    
   \        0xA   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_2:
   \        0x0   0x2A 0x86          DC8 "*\206H\206\367\015\001\t\016"
   \              0x48 0x86    
   \              0xF7 0x0D    
   \              0x01 0x09    
   \              0x0E 0x00    
   \        0xA   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_3:
   \        0x0   0x2D 0x2D          DC8 "-----BEGIN CERTIFICATE REQUEST-----\012"
   \              0x2D 0x2D    
   \              0x2D 0x42    
   \              0x45 0x47    
   \              0x49 0x4E    
   \              0x20 0x43    
   \              0x45 0x52    
   \              0x54 0x49    
   \              0x46 0x49    
   \              0x43 0x41    
   \              0x54 0x45    
   \              0x20 0x52    
   \              0x45 0x51    
   \              0x55 0x45    
   \              0x53 0x54    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x0A    
   \              0x00         
   \       0x25   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_4:
   \        0x0   0x2D 0x2D          DC8 "-----END CERTIFICATE REQUEST-----\012"
   \              0x2D 0x2D    
   \              0x2D 0x45    
   \              0x4E 0x44    
   \              0x20 0x43    
   \              0x45 0x52    
   \              0x54 0x49    
   \              0x46 0x49    
   \              0x43 0x41    
   \              0x54 0x45    
   \              0x20 0x52    
   \              0x45 0x51    
   \              0x55 0x45    
   \              0x53 0x54    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x0A    
   \              0x00         
   \       0x23   0x00               DC8 0
    260          #endif /* MBEDTLS_PEM_WRITE_C */
    261          
    262          #endif /* MBEDTLS_X509_CSR_WRITE_C */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
    2688   mbedtls_x509write_csr_der
      2688   -> __aeabi_memcpy
      2688   -> mbedtls_asn1_write_int
      2688   -> mbedtls_asn1_write_len
      2688   -> mbedtls_asn1_write_oid
      2688   -> mbedtls_asn1_write_tag
      2688   -> mbedtls_md
      2688   -> mbedtls_md_info_from_type
      2688   -> mbedtls_oid_get_oid_by_sig_alg
      2688   -> mbedtls_pk_can_do
      2688   -> mbedtls_pk_sign
      2688   -> mbedtls_pk_write_pubkey_der
      2688   -> mbedtls_x509_write_extensions
      2688   -> mbedtls_x509_write_names
      2688   -> mbedtls_x509_write_sig
       8   mbedtls_x509write_csr_free
         8   -> mbedtls_asn1_free_named_data_list
         0   -> mbedtls_platform_zeroize
       0   mbedtls_x509write_csr_init
         0   -> __aeabi_memset4
    4128   mbedtls_x509write_csr_pem
      4128   -> mbedtls_pem_write_buffer
      4128   -> mbedtls_x509write_csr_der
      16   mbedtls_x509write_csr_set_extension
        16   -> mbedtls_x509_set_extension
       0   mbedtls_x509write_csr_set_key
      24   mbedtls_x509write_csr_set_key_usage
        24   -> mbedtls_asn1_write_bitstring
        24   -> mbedtls_x509write_csr_set_extension
       0   mbedtls_x509write_csr_set_md_alg
      24   mbedtls_x509write_csr_set_ns_cert_type
        24   -> mbedtls_asn1_write_bitstring
        24   -> mbedtls_x509write_csr_set_extension
       0   mbedtls_x509write_csr_set_subject_name
         0   -> mbedtls_x509_string_to_names


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ?_0
      12  ?_1
      12  ?_2
      40  ?_3
      36  ?_4
     536  mbedtls_x509write_csr_der
      30  mbedtls_x509write_csr_free
       8  mbedtls_x509write_csr_init
      80  mbedtls_x509write_csr_pem
      18  mbedtls_x509write_csr_set_extension
       4  mbedtls_x509write_csr_set_key
      50  mbedtls_x509write_csr_set_key_usage
       4  mbedtls_x509write_csr_set_md_alg
      50  mbedtls_x509write_csr_set_ns_cert_type
       6  mbedtls_x509write_csr_set_subject_name

 
 104 bytes in section .rodata
 810 bytes in section .text
 
 810 bytes of CODE  memory
 104 bytes of CONST memory

Errors: none
Warnings: none
