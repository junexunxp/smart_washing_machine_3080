###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.3.193/W32 for ARM         10/Jun/2019  13:48:34
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\Development\smart_washing_machine_3080\mbedtls\library\md.c
#    Command line =  
#        -f C:\Users\nxf42695\AppData\Local\Temp\1\EW13D4.tmp
#        (C:\Development\smart_washing_machine_3080\mbedtls\library\md.c -D
#        DEBUG -D USE_RTOS -D XIP_EXTERNAL_FLASH=1 -D XIP_BOOT_HEADER_ENABLE=1
#        -D CPU_MIMXRT1052DVL6B -D FSL_RTOS_FREE_RTOS -D PRINTF_ADVANCED_ENABLE
#        -D "MBEDTLS_CONFIG_FILE=\"ksdk_mbedtls_config.h\"" -lC
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list -lA
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list
#        --diag_suppress Pa082,Pa050 -o
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_d16 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" --preinclude
#        C:\Development\smart_washing_machine_3080/source\app_preinclude.h -I
#        C:\Development\smart_washing_machine_3080/board\ -I
#        C:\Development\smart_washing_machine_3080/source\ -I
#        C:\Development\smart_washing_machine_3080/CMSIS\ -I
#        C:\Development\smart_washing_machine_3080/amazon-freertos/freertos/portable\
#        -I C:\Development\smart_washing_machine_3080/amazon-freertos/include\
#        -I C:\Development\smart_washing_machine_3080/component/lists\ -I
#        C:\Development\smart_washing_machine_3080/component/serial_manager\ -I
#        C:\Development\smart_washing_machine_3080/component/uart\ -I
#        C:\Development\smart_washing_machine_3080/component/kv\ -I
#        C:\Development\smart_washing_machine_3080/component/kv/include\ -I
#        C:\Development\smart_washing_machine_3080/device\ -I
#        C:\Development\smart_washing_machine_3080/doc\ -I
#        C:\Development\smart_washing_machine_3080/drivers\ -I
#        C:\Development\smart_washing_machine_3080/src\ -I
#        C:\Development\smart_washing_machine_3080/startup\ -I
#        C:\Development\smart_washing_machine_3080/utilities\ -I
#        C:\Development\smart_washing_machine_3080/xip\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\atm\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_model\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_sign\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\infra\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\mqtt\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\external_libs\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\coap_cloud\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\CoAPPacket\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\server\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\os\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\awss_reset\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\mbedtls\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\ -I
#        C:\Development\smart_washing_machine_3080\mbedtls\port\ksdk\ -Om)
#    Locale       =  C
#    List file    =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list\md.lst
#    Object file  =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj\md.o
#
###############################################################################

C:\Development\smart_washing_machine_3080\mbedtls\library\md.c
      1          /**
      2           * \file mbedtls_md.c
      3           *
      4           * \brief Generic message digest wrapper for mbed TLS
      5           *
      6           * \author Adriaan de Jong <dejong@fox-it.com>
      7           *
      8           *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
      9           *  SPDX-License-Identifier: Apache-2.0
     10           *
     11           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
     12           *  not use this file except in compliance with the License.
     13           *  You may obtain a copy of the License at
     14           *
     15           *  http://www.apache.org/licenses/LICENSE-2.0
     16           *
     17           *  Unless required by applicable law or agreed to in writing, software
     18           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     19           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     20           *  See the License for the specific language governing permissions and
     21           *  limitations under the License.
     22           *
     23           *  This file is part of mbed TLS (https://tls.mbed.org)
     24           */
     25          
     26          #if !defined(MBEDTLS_CONFIG_FILE)
     27          #include "mbedtls/config.h"
     28          #else
     29          #include MBEDTLS_CONFIG_FILE
     30          #endif
     31          
     32          #if defined(MBEDTLS_MD_C)
     33          
     34          #include "mbedtls/md.h"
     35          #include "mbedtls/md_internal.h"
     36          #include "mbedtls/platform_util.h"
     37          
     38          #if defined(MBEDTLS_PLATFORM_C)
     39          #include "mbedtls/platform.h"
     40          #else
     41          #include <stdlib.h>
     42          #define mbedtls_calloc    calloc
     43          #define mbedtls_free       free
     44          #endif
     45          
     46          #include <string.h>
     47          
     48          #if defined(MBEDTLS_FS_IO)
     49          #include <stdio.h>
     50          #endif
     51          
     52          /*
     53           * Reminder: update profiles in x509_crt.c when adding a new hash!
     54           */

   \                                 In section .rodata, align 4
     55          static const int supported_digests[] = {
   \                     supported_digests:
   \        0x0   0x0000'0008        DC32 8, 7, 6, 5, 4, 3, 0
   \              0x0000'0007  
   \              0x0000'0006  
   \              0x0000'0005  
   \              0x0000'0004  
   \              0x0000'0003  
   \              0x0000'0000  
     56          
     57          #if defined(MBEDTLS_SHA512_C)
     58                  MBEDTLS_MD_SHA512,
     59                  MBEDTLS_MD_SHA384,
     60          #endif
     61          
     62          #if defined(MBEDTLS_SHA256_C)
     63                  MBEDTLS_MD_SHA256,
     64                  MBEDTLS_MD_SHA224,
     65          #endif
     66          
     67          #if defined(MBEDTLS_SHA1_C)
     68                  MBEDTLS_MD_SHA1,
     69          #endif
     70          
     71          #if defined(MBEDTLS_RIPEMD160_C)
     72                  MBEDTLS_MD_RIPEMD160,
     73          #endif
     74          
     75          #if defined(MBEDTLS_MD5_C)
     76                  MBEDTLS_MD_MD5,
     77          #endif
     78          
     79          #if defined(MBEDTLS_MD4_C)
     80                  MBEDTLS_MD_MD4,
     81          #endif
     82          
     83          #if defined(MBEDTLS_MD2_C)
     84                  MBEDTLS_MD_MD2,
     85          #endif
     86          
     87                  MBEDTLS_MD_NONE
     88          };
     89          

   \                                 In section .text, align 2, keep-with-next
     90          const int *mbedtls_md_list( void )
     91          {
     92              return( supported_digests );
   \                     mbedtls_md_list: (+1)
   \        0x0   0x....'....        LDR.W    R0,??DataTable14
   \        0x4   0x4770             BX       LR               ;; return
     93          }
     94          

   \                                 In section .text, align 2, keep-with-next
     95          const mbedtls_md_info_t *mbedtls_md_info_from_string( const char *md_name )
     96          {
   \                     mbedtls_md_info_from_string: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
     97              if( NULL == md_name )
   \        0x4   0xD101             BNE.N    ??mbedtls_md_info_from_string_0
     98                  return( NULL );
   \        0x6   0x2000             MOVS     R0,#+0
   \        0x8   0xBD10             POP      {R4,PC}
     99          
    100              /* Get the appropriate digest information */
    101          #if defined(MBEDTLS_MD2_C)
    102              if( !strcmp( "MD2", md_name ) )
    103                  return mbedtls_md_info_from_type( MBEDTLS_MD_MD2 );
    104          #endif
    105          #if defined(MBEDTLS_MD4_C)
    106              if( !strcmp( "MD4", md_name ) )
    107                  return mbedtls_md_info_from_type( MBEDTLS_MD_MD4 );
    108          #endif
    109          #if defined(MBEDTLS_MD5_C)
    110              if( !strcmp( "MD5", md_name ) )
   \                     ??mbedtls_md_info_from_string_0: (+1)
   \        0xA   0x4621             MOV      R1,R4
   \        0xC   0x....             ADR.N    R0,??DataTable8  ;; "MD5"
   \        0xE   0x....'....        BL       strcmp
   \       0x12   0x2800             CMP      R0,#+0
   \       0x14   0xD103             BNE.N    ??mbedtls_md_info_from_string_1
    111                  return mbedtls_md_info_from_type( MBEDTLS_MD_MD5 );
   \       0x16   0x2003             MOVS     R0,#+3
   \       0x18   0xE8BD 0x4010      POP      {R4,LR}
   \       0x1C   0x....             B.N      mbedtls_md_info_from_type
    112          #endif
    113          #if defined(MBEDTLS_RIPEMD160_C)
    114              if( !strcmp( "RIPEMD160", md_name ) )
    115                  return mbedtls_md_info_from_type( MBEDTLS_MD_RIPEMD160 );
    116          #endif
    117          #if defined(MBEDTLS_SHA1_C)
    118              if( !strcmp( "SHA1", md_name ) || !strcmp( "SHA", md_name ) )
   \                     ??mbedtls_md_info_from_string_1: (+1)
   \       0x1E   0x4621             MOV      R1,R4
   \       0x20   0x....'....        LDR.W    R0,??DataTable14_1
   \       0x24   0x....'....        BL       strcmp
   \       0x28   0x2800             CMP      R0,#+0
   \       0x2A   0xD005             BEQ.N    ??mbedtls_md_info_from_string_2
   \       0x2C   0x4621             MOV      R1,R4
   \       0x2E   0x....             ADR.N    R0,??DataTable9  ;; "SHA"
   \       0x30   0x....'....        BL       strcmp
   \       0x34   0x2800             CMP      R0,#+0
   \       0x36   0xD103             BNE.N    ??mbedtls_md_info_from_string_3
    119                  return mbedtls_md_info_from_type( MBEDTLS_MD_SHA1 );
   \                     ??mbedtls_md_info_from_string_2: (+1)
   \       0x38   0x2004             MOVS     R0,#+4
   \       0x3A   0xE8BD 0x4010      POP      {R4,LR}
   \       0x3E   0x....             B.N      mbedtls_md_info_from_type
    120          #endif
    121          #if defined(MBEDTLS_SHA256_C)
    122              if( !strcmp( "SHA224", md_name ) )
   \                     ??mbedtls_md_info_from_string_3: (+1)
   \       0x40   0x4621             MOV      R1,R4
   \       0x42   0x....'....        LDR.W    R0,??DataTable14_2
   \       0x46   0x....'....        BL       strcmp
   \       0x4A   0x2800             CMP      R0,#+0
   \       0x4C   0xD103             BNE.N    ??mbedtls_md_info_from_string_4
    123                  return mbedtls_md_info_from_type( MBEDTLS_MD_SHA224 );
   \       0x4E   0x2005             MOVS     R0,#+5
   \       0x50   0xE8BD 0x4010      POP      {R4,LR}
   \       0x54   0x....             B.N      mbedtls_md_info_from_type
    124              if( !strcmp( "SHA256", md_name ) )
   \                     ??mbedtls_md_info_from_string_4: (+1)
   \       0x56   0x4621             MOV      R1,R4
   \       0x58   0x....'....        LDR.W    R0,??DataTable14_3
   \       0x5C   0x....'....        BL       strcmp
   \       0x60   0x2800             CMP      R0,#+0
   \       0x62   0xD103             BNE.N    ??mbedtls_md_info_from_string_5
    125                  return mbedtls_md_info_from_type( MBEDTLS_MD_SHA256 );
   \       0x64   0x2006             MOVS     R0,#+6
   \       0x66   0xE8BD 0x4010      POP      {R4,LR}
   \       0x6A   0x....             B.N      mbedtls_md_info_from_type
    126          #endif
    127          #if defined(MBEDTLS_SHA512_C)
    128              if( !strcmp( "SHA384", md_name ) )
   \                     ??mbedtls_md_info_from_string_5: (+1)
   \       0x6C   0x4621             MOV      R1,R4
   \       0x6E   0x....'....        LDR.W    R0,??DataTable14_4
   \       0x72   0x....'....        BL       strcmp
   \       0x76   0x2800             CMP      R0,#+0
   \       0x78   0xD103             BNE.N    ??mbedtls_md_info_from_string_6
    129                  return mbedtls_md_info_from_type( MBEDTLS_MD_SHA384 );
   \       0x7A   0x2007             MOVS     R0,#+7
   \       0x7C   0xE8BD 0x4010      POP      {R4,LR}
   \       0x80   0x....             B.N      mbedtls_md_info_from_type
    130              if( !strcmp( "SHA512", md_name ) )
   \                     ??mbedtls_md_info_from_string_6: (+1)
   \       0x82   0x4621             MOV      R1,R4
   \       0x84   0x....'....        LDR.W    R0,??DataTable14_5
   \       0x88   0x....'....        BL       strcmp
   \       0x8C   0x2800             CMP      R0,#+0
   \       0x8E   0xD103             BNE.N    ??mbedtls_md_info_from_string_7
    131                  return mbedtls_md_info_from_type( MBEDTLS_MD_SHA512 );
   \       0x90   0x2008             MOVS     R0,#+8
   \       0x92   0xE8BD 0x4010      POP      {R4,LR}
   \       0x96   0x....             B.N      mbedtls_md_info_from_type
    132          #endif
    133              return( NULL );
   \                     ??mbedtls_md_info_from_string_7: (+1)
   \       0x98   0x2000             MOVS     R0,#+0
   \       0x9A   0xBD10             POP      {R4,PC}          ;; return
    134          }
    135          

   \                                 In section .text, align 4, keep-with-next
    136          const mbedtls_md_info_t *mbedtls_md_info_from_type( mbedtls_md_type_t md_type )
    137          {
    138              switch( md_type )
   \                     mbedtls_md_info_from_type: (+1)
   \        0x0   0x1EC0             SUBS     R0,R0,#+3
   \        0x2   0x2805             CMP      R0,#+5
   \        0x4   0xD816             BHI.N    ??mbedtls_md_info_from_type_1
   \        0x6   0xE8DF 0xF000      TBB      [PC, R0]
   \                     ??mbedtls_md_info_from_type_0:
   \        0xA   0x03 0x06          DC8      0x3,0x6,0x9,0xC
   \              0x09 0x0C    
   \        0xE   0x0F 0x12          DC8      0xF,0x12
    139              {
    140          #if defined(MBEDTLS_MD2_C)
    141                  case MBEDTLS_MD_MD2:
    142                      return( &mbedtls_md2_info );
    143          #endif
    144          #if defined(MBEDTLS_MD4_C)
    145                  case MBEDTLS_MD_MD4:
    146                      return( &mbedtls_md4_info );
    147          #endif
    148          #if defined(MBEDTLS_MD5_C)
    149                  case MBEDTLS_MD_MD5:
    150                      return( &mbedtls_md5_info );
   \                     ??mbedtls_md_info_from_type_2: (+1)
   \       0x10   0x....'....        LDR.W    R0,??DataTable14_6
   \       0x14   0x4770             BX       LR
    151          #endif
    152          #if defined(MBEDTLS_RIPEMD160_C)
    153                  case MBEDTLS_MD_RIPEMD160:
    154                      return( &mbedtls_ripemd160_info );
    155          #endif
    156          #if defined(MBEDTLS_SHA1_C)
    157                  case MBEDTLS_MD_SHA1:
    158                      return( &mbedtls_sha1_info );
   \                     ??mbedtls_md_info_from_type_3: (+1)
   \       0x16   0x....'....        LDR.W    R0,??DataTable14_7
   \       0x1A   0x4770             BX       LR
    159          #endif
    160          #if defined(MBEDTLS_SHA256_C)
    161                  case MBEDTLS_MD_SHA224:
    162                      return( &mbedtls_sha224_info );
   \                     ??mbedtls_md_info_from_type_4: (+1)
   \       0x1C   0x....'....        LDR.W    R0,??DataTable14_8
   \       0x20   0x4770             BX       LR
    163                  case MBEDTLS_MD_SHA256:
    164                      return( &mbedtls_sha256_info );
   \                     ??mbedtls_md_info_from_type_5: (+1)
   \       0x22   0x....'....        LDR.W    R0,??DataTable14_9
   \       0x26   0x4770             BX       LR
    165          #endif
    166          #if defined(MBEDTLS_SHA512_C)
    167                  case MBEDTLS_MD_SHA384:
    168                      return( &mbedtls_sha384_info );
   \                     ??mbedtls_md_info_from_type_6: (+1)
   \       0x28   0x....'....        LDR.W    R0,??DataTable14_10
   \       0x2C   0x4770             BX       LR
    169                  case MBEDTLS_MD_SHA512:
    170                      return( &mbedtls_sha512_info );
   \                     ??mbedtls_md_info_from_type_7: (+1)
   \       0x2E   0x....'....        LDR.W    R0,??DataTable14_11
   \       0x32   0x4770             BX       LR
    171          #endif
    172                  default:
    173                      return( NULL );
   \                     ??mbedtls_md_info_from_type_1: (+1)
   \       0x34   0x2000             MOVS     R0,#+0
   \       0x36   0x4770             BX       LR               ;; return
    174              }
    175          }
    176          

   \                                 In section .text, align 2, keep-with-next
    177          void mbedtls_md_init( mbedtls_md_context_t *ctx )
    178          {
    179              memset( ctx, 0, sizeof( mbedtls_md_context_t ) );
   \                     mbedtls_md_init: (+1)
   \        0x0   0x2200             MOVS     R2,#+0
   \        0x2   0x210C             MOVS     R1,#+12
   \        0x4   0x....'....        B.W      __aeabi_memset4
    180          }
    181          

   \                                 In section .text, align 2, keep-with-next
    182          void mbedtls_md_free( mbedtls_md_context_t *ctx )
    183          {
   \                     mbedtls_md_free: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
    184              if( ctx == NULL || ctx->md_info == NULL )
   \        0x4   0xD01A             BEQ.N    ??mbedtls_md_free_0
   \        0x6   0x6820             LDR      R0,[R4, #+0]
   \        0x8   0x2800             CMP      R0,#+0
   \        0xA   0xD017             BEQ.N    ??mbedtls_md_free_0
    185                  return;
    186          
    187              if( ctx->md_ctx != NULL )
   \        0xC   0x6860             LDR      R0,[R4, #+4]
   \        0xE   0x2800             CMP      R0,#+0
   \       0x10   0xD002             BEQ.N    ??mbedtls_md_free_1
    188                  ctx->md_info->ctx_free_func( ctx->md_ctx );
   \       0x12   0x6821             LDR      R1,[R4, #+0]
   \       0x14   0x6A49             LDR      R1,[R1, #+36]
   \       0x16   0x4788             BLX      R1
    189          
    190              if( ctx->hmac_ctx != NULL )
   \                     ??mbedtls_md_free_1: (+1)
   \       0x18   0x68A0             LDR      R0,[R4, #+8]
   \       0x1A   0x2800             CMP      R0,#+0
   \       0x1C   0xD008             BEQ.N    ??mbedtls_md_free_2
    191              {
    192                  mbedtls_platform_zeroize( ctx->hmac_ctx,
    193                                            2 * ctx->md_info->block_size );
   \       0x1E   0x6820             LDR      R0,[R4, #+0]
   \       0x20   0x68C1             LDR      R1,[R0, #+12]
   \       0x22   0x0049             LSLS     R1,R1,#+1
   \       0x24   0x68A0             LDR      R0,[R4, #+8]
   \       0x26   0x....'....        BL       mbedtls_platform_zeroize
    194                  mbedtls_free( ctx->hmac_ctx );
   \       0x2A   0x68A0             LDR      R0,[R4, #+8]
   \       0x2C   0x....'....        BL       mbedtls_free
    195              }
    196          
    197              mbedtls_platform_zeroize( ctx, sizeof( mbedtls_md_context_t ) );
   \                     ??mbedtls_md_free_2: (+1)
   \       0x30   0x210C             MOVS     R1,#+12
   \       0x32   0x4620             MOV      R0,R4
   \       0x34   0xE8BD 0x4010      POP      {R4,LR}
   \       0x38   0x....'....        B.W      mbedtls_platform_zeroize
   \                     ??mbedtls_md_free_0: (+1)
   \       0x3C   0xBD10             POP      {R4,PC}          ;; return
    198          }
    199          

   \                                 In section .text, align 2, keep-with-next
    200          int mbedtls_md_clone( mbedtls_md_context_t *dst,
    201                                const mbedtls_md_context_t *src )
    202          {
   \                     mbedtls_md_clone: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   \        0x2   0x0002             MOVS     R2,R0
    203              if( dst == NULL || dst->md_info == NULL ||
    204                  src == NULL || src->md_info == NULL ||
    205                  dst->md_info != src->md_info )
   \        0x4   0xD00B             BEQ.N    ??mbedtls_md_clone_0
   \        0x6   0x6810             LDR      R0,[R2, #+0]
   \        0x8   0x2800             CMP      R0,#+0
   \        0xA   0xD008             BEQ.N    ??mbedtls_md_clone_0
   \        0xC   0x2900             CMP      R1,#+0
   \        0xE   0xD006             BEQ.N    ??mbedtls_md_clone_0
   \       0x10   0x6808             LDR      R0,[R1, #+0]
   \       0x12   0x2800             CMP      R0,#+0
   \       0x14   0xD003             BEQ.N    ??mbedtls_md_clone_0
   \       0x16   0x6810             LDR      R0,[R2, #+0]
   \       0x18   0x680B             LDR      R3,[R1, #+0]
   \       0x1A   0x4298             CMP      R0,R3
   \       0x1C   0xD001             BEQ.N    ??mbedtls_md_clone_1
    206              {
    207                  return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
   \                     ??mbedtls_md_clone_0: (+1)
   \       0x1E   0x....             LDR.N    R0,??DataTable14_12  ;; 0xffffaf00
   \       0x20   0xBD02             POP      {R1,PC}
    208              }
    209          
    210              dst->md_info->clone_func( dst->md_ctx, src->md_ctx );
   \                     ??mbedtls_md_clone_1: (+1)
   \       0x22   0x6849             LDR      R1,[R1, #+4]
   \       0x24   0x6850             LDR      R0,[R2, #+4]
   \       0x26   0x6812             LDR      R2,[R2, #+0]
   \       0x28   0x6A92             LDR      R2,[R2, #+40]
   \       0x2A   0x4790             BLX      R2
    211          
    212              return( 0 );
   \       0x2C   0x2000             MOVS     R0,#+0
   \       0x2E   0xBD02             POP      {R1,PC}          ;; return
    213          }
    214          
    215          #if ! defined(MBEDTLS_DEPRECATED_REMOVED)

   \                                 In section .text, align 2, keep-with-next
    216          int mbedtls_md_init_ctx( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info )
    217          {
    218              return mbedtls_md_setup( ctx, md_info, 1 );
   \                     mbedtls_md_init_ctx: (+1)
   \        0x0   0x2201             MOVS     R2,#+1
   \        0x2                      REQUIRE mbedtls_md_setup
   \        0x2                      ;; // Fall through to label mbedtls_md_setup
    219          }
    220          #endif
    221          

   \                                 In section .text, align 2, keep-with-next
    222          int mbedtls_md_setup( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info, int hmac )
    223          {
   \                     mbedtls_md_setup: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4606             MOV      R6,R0
   \        0x4   0x460D             MOV      R5,R1
   \        0x6   0x4614             MOV      R4,R2
    224              if( md_info == NULL || ctx == NULL )
   \        0x8   0x2D00             CMP      R5,#+0
   \        0xA   0xD001             BEQ.N    ??mbedtls_md_setup_0
   \        0xC   0x2E00             CMP      R6,#+0
   \        0xE   0xD101             BNE.N    ??mbedtls_md_setup_1
    225                  return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
   \                     ??mbedtls_md_setup_0: (+1)
   \       0x10   0x....             LDR.N    R0,??DataTable14_12  ;; 0xffffaf00
   \       0x12   0xBD70             POP      {R4-R6,PC}
    226          
    227              if( ( ctx->md_ctx = md_info->ctx_alloc_func() ) == NULL )
   \                     ??mbedtls_md_setup_1: (+1)
   \       0x14   0x6A28             LDR      R0,[R5, #+32]
   \       0x16   0x4780             BLX      R0
   \       0x18   0x6070             STR      R0,[R6, #+4]
   \       0x1A   0x2800             CMP      R0,#+0
   \       0x1C   0xD101             BNE.N    ??mbedtls_md_setup_2
    228                  return( MBEDTLS_ERR_MD_ALLOC_FAILED );
   \       0x1E   0x....             LDR.N    R0,??DataTable14_13  ;; 0xffffae80
   \       0x20   0xBD70             POP      {R4-R6,PC}
    229          
    230              if( hmac != 0 )
   \                     ??mbedtls_md_setup_2: (+1)
   \       0x22   0x2C00             CMP      R4,#+0
   \       0x24   0xD00B             BEQ.N    ??mbedtls_md_setup_3
    231              {
    232                  ctx->hmac_ctx = mbedtls_calloc( 2, md_info->block_size );
   \       0x26   0x68E9             LDR      R1,[R5, #+12]
   \       0x28   0x2002             MOVS     R0,#+2
   \       0x2A   0x....'....        BL       mbedtls_calloc
   \       0x2E   0x60B0             STR      R0,[R6, #+8]
    233                  if( ctx->hmac_ctx == NULL )
   \       0x30   0x2800             CMP      R0,#+0
   \       0x32   0xD104             BNE.N    ??mbedtls_md_setup_3
    234                  {
    235                      md_info->ctx_free_func( ctx->md_ctx );
   \       0x34   0x6870             LDR      R0,[R6, #+4]
   \       0x36   0x6A69             LDR      R1,[R5, #+36]
   \       0x38   0x4788             BLX      R1
    236                      return( MBEDTLS_ERR_MD_ALLOC_FAILED );
   \       0x3A   0x....             LDR.N    R0,??DataTable14_13  ;; 0xffffae80
   \       0x3C   0xBD70             POP      {R4-R6,PC}
    237                  }
    238              }
    239          
    240              ctx->md_info = md_info;
   \                     ??mbedtls_md_setup_3: (+1)
   \       0x3E   0x6035             STR      R5,[R6, #+0]
    241          
    242              return( 0 );
   \       0x40   0x2000             MOVS     R0,#+0
   \       0x42   0xBD70             POP      {R4-R6,PC}       ;; return
    243          }
    244          

   \                                 In section .text, align 2, keep-with-next
    245          int mbedtls_md_starts( mbedtls_md_context_t *ctx )
    246          {
   \                     mbedtls_md_starts: (+1)
   \        0x0   0x0001             MOVS     R1,R0
    247              if( ctx == NULL || ctx->md_info == NULL )
   \        0x2   0xD002             BEQ.N    ??mbedtls_md_starts_0
   \        0x4   0x6808             LDR      R0,[R1, #+0]
   \        0x6   0x2800             CMP      R0,#+0
   \        0x8   0xD101             BNE.N    ??mbedtls_md_starts_1
    248                  return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
   \                     ??mbedtls_md_starts_0: (+1)
   \        0xA   0x....             LDR.N    R0,??DataTable14_12  ;; 0xffffaf00
   \        0xC   0x4770             BX       LR
    249          
    250              return( ctx->md_info->starts_func( ctx->md_ctx ) );
   \                     ??mbedtls_md_starts_1: (+1)
   \        0xE   0x6848             LDR      R0,[R1, #+4]
   \       0x10   0x6809             LDR      R1,[R1, #+0]
   \       0x12   0x6909             LDR      R1,[R1, #+16]
   \       0x14   0x4708             BX       R1
    251          }
    252          

   \                                 In section .text, align 2, keep-with-next
    253          int mbedtls_md_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
    254          {
   \                     mbedtls_md_update: (+1)
   \        0x0   0x0003             MOVS     R3,R0
    255              if( ctx == NULL || ctx->md_info == NULL )
   \        0x2   0xD002             BEQ.N    ??mbedtls_md_update_0
   \        0x4   0x6818             LDR      R0,[R3, #+0]
   \        0x6   0x2800             CMP      R0,#+0
   \        0x8   0xD101             BNE.N    ??mbedtls_md_update_1
    256                  return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
   \                     ??mbedtls_md_update_0: (+1)
   \        0xA   0x....             LDR.N    R0,??DataTable14_12  ;; 0xffffaf00
   \        0xC   0x4770             BX       LR
    257          
    258              return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
   \                     ??mbedtls_md_update_1: (+1)
   \        0xE   0x6858             LDR      R0,[R3, #+4]
   \       0x10   0x681B             LDR      R3,[R3, #+0]
   \       0x12   0x695B             LDR      R3,[R3, #+20]
   \       0x14   0x4718             BX       R3
    259          }
    260          

   \                                 In section .text, align 2, keep-with-next
    261          int mbedtls_md_finish( mbedtls_md_context_t *ctx, unsigned char *output )
    262          {
   \                     mbedtls_md_finish: (+1)
   \        0x0   0x0002             MOVS     R2,R0
    263              if( ctx == NULL || ctx->md_info == NULL )
   \        0x2   0xD002             BEQ.N    ??mbedtls_md_finish_0
   \        0x4   0x6810             LDR      R0,[R2, #+0]
   \        0x6   0x2800             CMP      R0,#+0
   \        0x8   0xD101             BNE.N    ??mbedtls_md_finish_1
    264                  return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
   \                     ??mbedtls_md_finish_0: (+1)
   \        0xA   0x....             LDR.N    R0,??DataTable14_12  ;; 0xffffaf00
   \        0xC   0x4770             BX       LR
    265          
    266              return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
   \                     ??mbedtls_md_finish_1: (+1)
   \        0xE   0x6850             LDR      R0,[R2, #+4]
   \       0x10   0x6812             LDR      R2,[R2, #+0]
   \       0x12   0x6992             LDR      R2,[R2, #+24]
   \       0x14   0x4710             BX       R2
    267          }
    268          

   \                                 In section .text, align 2, keep-with-next
    269          int mbedtls_md( const mbedtls_md_info_t *md_info, const unsigned char *input, size_t ilen,
    270                      unsigned char *output )
    271          {
   \                     mbedtls_md: (+1)
   \        0x0   0xB418             PUSH     {R3,R4}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x4608             MOV      R0,R1
   \        0x6   0x4611             MOV      R1,R2
   \        0x8   0x461A             MOV      R2,R3
    272              if( md_info == NULL )
   \        0xA   0x2C00             CMP      R4,#+0
   \        0xC   0xD101             BNE.N    ??mbedtls_md_0
    273                  return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
   \        0xE   0x....             LDR.N    R0,??DataTable14_12  ;; 0xffffaf00
   \       0x10   0xE003             B.N      ??mbedtls_md_1
    274          
    275              return( md_info->digest_func( input, ilen, output ) );
   \                     ??mbedtls_md_0: (+1)
   \       0x12   0x69E3             LDR      R3,[R4, #+28]
   \       0x14   0xB001             ADD      SP,SP,#+4
   \       0x16   0xBC10             POP      {R4}
   \       0x18   0x4718             BX       R3
   \                     ??mbedtls_md_1: (+1)
   \       0x1A   0xBC12             POP      {R1,R4}
   \       0x1C   0x4770             BX       LR               ;; return
    276          }
    277          
    278          #if defined(MBEDTLS_FS_IO)
    279          int mbedtls_md_file( const mbedtls_md_info_t *md_info, const char *path, unsigned char *output )
    280          {
    281              int ret;
    282              FILE *f;
    283              size_t n;
    284              mbedtls_md_context_t ctx;
    285              unsigned char buf[1024];
    286          
    287              if( md_info == NULL )
    288                  return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
    289          
    290              if( ( f = fopen( path, "rb" ) ) == NULL )
    291                  return( MBEDTLS_ERR_MD_FILE_IO_ERROR );
    292          
    293              mbedtls_md_init( &ctx );
    294          
    295              if( ( ret = mbedtls_md_setup( &ctx, md_info, 0 ) ) != 0 )
    296                  goto cleanup;
    297          
    298              if( ( ret = md_info->starts_func( ctx.md_ctx ) ) != 0 )
    299                  goto cleanup;
    300          
    301              while( ( n = fread( buf, 1, sizeof( buf ), f ) ) > 0 )
    302                  if( ( ret = md_info->update_func( ctx.md_ctx, buf, n ) ) != 0 )
    303                      goto cleanup;
    304          
    305              if( ferror( f ) != 0 )
    306                  ret = MBEDTLS_ERR_MD_FILE_IO_ERROR;
    307              else
    308                  ret = md_info->finish_func( ctx.md_ctx, output );
    309          
    310          cleanup:
    311              mbedtls_platform_zeroize( buf, sizeof( buf ) );
    312              fclose( f );
    313              mbedtls_md_free( &ctx );
    314          
    315              return( ret );
    316          }
    317          #endif /* MBEDTLS_FS_IO */
    318          

   \                                 In section .text, align 2, keep-with-next
    319          int mbedtls_md_hmac_starts( mbedtls_md_context_t *ctx, const unsigned char *key, size_t keylen )
    320          {
   \                     mbedtls_md_hmac_starts: (+1)
   \        0x0   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \        0x4   0xB090             SUB      SP,SP,#+64
   \        0x6   0x4605             MOV      R5,R0
   \        0x8   0x460E             MOV      R6,R1
   \        0xA   0x4617             MOV      R7,R2
    321              int ret;
    322              unsigned char sum[MBEDTLS_MD_MAX_SIZE];
    323              unsigned char *ipad, *opad;
    324              size_t i;
    325          
    326              if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
   \        0xC   0x2D00             CMP      R5,#+0
   \        0xE   0xD005             BEQ.N    ??mbedtls_md_hmac_starts_0
   \       0x10   0x6828             LDR      R0,[R5, #+0]
   \       0x12   0x2800             CMP      R0,#+0
   \       0x14   0xD002             BEQ.N    ??mbedtls_md_hmac_starts_0
   \       0x16   0x68A8             LDR      R0,[R5, #+8]
   \       0x18   0x2800             CMP      R0,#+0
   \       0x1A   0xD101             BNE.N    ??mbedtls_md_hmac_starts_1
    327                  return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
   \                     ??mbedtls_md_hmac_starts_0: (+1)
   \       0x1C   0x....             LDR.N    R0,??DataTable14_12  ;; 0xffffaf00
   \       0x1E   0xE04C             B.N      ??mbedtls_md_hmac_starts_2
    328          
    329              if( keylen > (size_t) ctx->md_info->block_size )
   \                     ??mbedtls_md_hmac_starts_1: (+1)
   \       0x20   0x6828             LDR      R0,[R5, #+0]
   \       0x22   0x68C0             LDR      R0,[R0, #+12]
   \       0x24   0x42B8             CMP      R0,R7
   \       0x26   0xD217             BCS.N    ??mbedtls_md_hmac_starts_3
    330              {
    331                  if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
   \       0x28   0x6868             LDR      R0,[R5, #+4]
   \       0x2A   0x6829             LDR      R1,[R5, #+0]
   \       0x2C   0x6909             LDR      R1,[R1, #+16]
   \       0x2E   0x4788             BLX      R1
   \       0x30   0x0004             MOVS     R4,R0
   \       0x32   0xD13D             BNE.N    ??mbedtls_md_hmac_starts_4
    332                      goto cleanup;
    333                  if( ( ret = ctx->md_info->update_func( ctx->md_ctx, key, keylen ) ) != 0 )
   \       0x34   0x463A             MOV      R2,R7
   \       0x36   0x4631             MOV      R1,R6
   \       0x38   0x6868             LDR      R0,[R5, #+4]
   \       0x3A   0x682B             LDR      R3,[R5, #+0]
   \       0x3C   0x695B             LDR      R3,[R3, #+20]
   \       0x3E   0x4798             BLX      R3
   \       0x40   0x0004             MOVS     R4,R0
   \       0x42   0xD135             BNE.N    ??mbedtls_md_hmac_starts_4
    334                      goto cleanup;
    335                  if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, sum ) ) != 0 )
   \       0x44   0x4669             MOV      R1,SP
   \       0x46   0x6868             LDR      R0,[R5, #+4]
   \       0x48   0x682A             LDR      R2,[R5, #+0]
   \       0x4A   0x6992             LDR      R2,[R2, #+24]
   \       0x4C   0x4790             BLX      R2
   \       0x4E   0x0004             MOVS     R4,R0
   \       0x50   0xD12E             BNE.N    ??mbedtls_md_hmac_starts_4
    336                      goto cleanup;
    337          
    338                  keylen = ctx->md_info->size;
   \       0x52   0x6828             LDR      R0,[R5, #+0]
   \       0x54   0x6887             LDR      R7,[R0, #+8]
    339                  key = sum;
   \       0x56   0x466E             MOV      R6,SP
    340              }
    341          
    342              ipad = (unsigned char *) ctx->hmac_ctx;
   \                     ??mbedtls_md_hmac_starts_3: (+1)
   \       0x58   0xF8D5 0x8008      LDR      R8,[R5, #+8]
    343              opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
   \       0x5C   0x4640             MOV      R0,R8
   \       0x5E   0x6829             LDR      R1,[R5, #+0]
   \       0x60   0x68C9             LDR      R1,[R1, #+12]
   \       0x62   0x1844             ADDS     R4,R0,R1
    344          
    345              memset( ipad, 0x36, ctx->md_info->block_size );
   \       0x64   0x2236             MOVS     R2,#+54
   \       0x66   0x....'....        BL       __aeabi_memset
    346              memset( opad, 0x5C, ctx->md_info->block_size );
   \       0x6A   0x225C             MOVS     R2,#+92
   \       0x6C   0x6828             LDR      R0,[R5, #+0]
   \       0x6E   0x68C1             LDR      R1,[R0, #+12]
   \       0x70   0x4620             MOV      R0,R4
   \       0x72   0x....'....        BL       __aeabi_memset
    347          
    348              for( i = 0; i < keylen; i++ )
   \       0x76   0x2000             MOVS     R0,#+0
   \       0x78   0xE00A             B.N      ??mbedtls_md_hmac_starts_5
    349              {
    350                  ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
   \                     ??mbedtls_md_hmac_starts_6: (+1)
   \       0x7A   0xF818 0x1000      LDRB     R1,[R8, R0]
   \       0x7E   0x5C32             LDRB     R2,[R6, R0]
   \       0x80   0x4051             EORS     R1,R2,R1
   \       0x82   0xF808 0x1000      STRB     R1,[R8, R0]
    351                  opad[i] = (unsigned char)( opad[i] ^ key[i] );
   \       0x86   0x5C21             LDRB     R1,[R4, R0]
   \       0x88   0x5C32             LDRB     R2,[R6, R0]
   \       0x8A   0x4051             EORS     R1,R2,R1
   \       0x8C   0x5421             STRB     R1,[R4, R0]
    352              }
   \       0x8E   0x1C40             ADDS     R0,R0,#+1
   \                     ??mbedtls_md_hmac_starts_5: (+1)
   \       0x90   0x42B8             CMP      R0,R7
   \       0x92   0xD3F2             BCC.N    ??mbedtls_md_hmac_starts_6
    353          
    354              if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
   \       0x94   0x6868             LDR      R0,[R5, #+4]
   \       0x96   0x6829             LDR      R1,[R5, #+0]
   \       0x98   0x6909             LDR      R1,[R1, #+16]
   \       0x9A   0x4788             BLX      R1
   \       0x9C   0x0004             MOVS     R4,R0
   \       0x9E   0xD107             BNE.N    ??mbedtls_md_hmac_starts_4
    355                  goto cleanup;
    356              if( ( ret = ctx->md_info->update_func( ctx->md_ctx, ipad,
    357                                                     ctx->md_info->block_size ) ) != 0 )
   \       0xA0   0x6828             LDR      R0,[R5, #+0]
   \       0xA2   0x68C2             LDR      R2,[R0, #+12]
   \       0xA4   0x4641             MOV      R1,R8
   \       0xA6   0x6868             LDR      R0,[R5, #+4]
   \       0xA8   0x682B             LDR      R3,[R5, #+0]
   \       0xAA   0x695B             LDR      R3,[R3, #+20]
   \       0xAC   0x4798             BLX      R3
   \       0xAE   0x4604             MOV      R4,R0
    358                  goto cleanup;
    359          
    360          cleanup:
    361              mbedtls_platform_zeroize( sum, sizeof( sum ) );
   \                     ??mbedtls_md_hmac_starts_4: (+1)
   \       0xB0   0x2140             MOVS     R1,#+64
   \       0xB2   0x4668             MOV      R0,SP
   \       0xB4   0x....'....        BL       mbedtls_platform_zeroize
    362          
    363              return( ret );
   \       0xB8   0x4620             MOV      R0,R4
   \                     ??mbedtls_md_hmac_starts_2: (+1)
   \       0xBA   0xB010             ADD      SP,SP,#+64
   \       0xBC   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    364          }
    365          

   \                                 In section .text, align 2, keep-with-next
    366          int mbedtls_md_hmac_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
    367          {
   \                     mbedtls_md_hmac_update: (+1)
   \        0x0   0x0003             MOVS     R3,R0
    368              if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
   \        0x2   0xD005             BEQ.N    ??mbedtls_md_hmac_update_0
   \        0x4   0x6818             LDR      R0,[R3, #+0]
   \        0x6   0x2800             CMP      R0,#+0
   \        0x8   0xD002             BEQ.N    ??mbedtls_md_hmac_update_0
   \        0xA   0x6898             LDR      R0,[R3, #+8]
   \        0xC   0x2800             CMP      R0,#+0
   \        0xE   0xD101             BNE.N    ??mbedtls_md_hmac_update_1
    369                  return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
   \                     ??mbedtls_md_hmac_update_0: (+1)
   \       0x10   0x....             LDR.N    R0,??DataTable14_12  ;; 0xffffaf00
   \       0x12   0x4770             BX       LR
    370          
    371              return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
   \                     ??mbedtls_md_hmac_update_1: (+1)
   \       0x14   0x6858             LDR      R0,[R3, #+4]
   \       0x16   0x681B             LDR      R3,[R3, #+0]
   \       0x18   0x695B             LDR      R3,[R3, #+20]
   \       0x1A   0x4718             BX       R3
    372          }
    373          

   \                                 In section .text, align 2, keep-with-next
    374          int mbedtls_md_hmac_finish( mbedtls_md_context_t *ctx, unsigned char *output )
    375          {
   \                     mbedtls_md_hmac_finish: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0xB090             SUB      SP,SP,#+64
   \        0x4   0x4604             MOV      R4,R0
   \        0x6   0x460D             MOV      R5,R1
    376              int ret;
    377              unsigned char tmp[MBEDTLS_MD_MAX_SIZE];
    378              unsigned char *opad;
    379          
    380              if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
   \        0x8   0x2C00             CMP      R4,#+0
   \        0xA   0xD005             BEQ.N    ??mbedtls_md_hmac_finish_0
   \        0xC   0x6820             LDR      R0,[R4, #+0]
   \        0xE   0x2800             CMP      R0,#+0
   \       0x10   0xD002             BEQ.N    ??mbedtls_md_hmac_finish_0
   \       0x12   0x68A0             LDR      R0,[R4, #+8]
   \       0x14   0x2800             CMP      R0,#+0
   \       0x16   0xD101             BNE.N    ??mbedtls_md_hmac_finish_1
    381                  return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
   \                     ??mbedtls_md_hmac_finish_0: (+1)
   \       0x18   0x....             LDR.N    R0,??DataTable14_12  ;; 0xffffaf00
   \       0x1A   0xE026             B.N      ??mbedtls_md_hmac_finish_2
    382          
    383              opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
   \                     ??mbedtls_md_hmac_finish_1: (+1)
   \       0x1C   0x6821             LDR      R1,[R4, #+0]
   \       0x1E   0x68C9             LDR      R1,[R1, #+12]
   \       0x20   0x1846             ADDS     R6,R0,R1
    384          
    385              if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, tmp ) ) != 0 )
   \       0x22   0x4669             MOV      R1,SP
   \       0x24   0x6860             LDR      R0,[R4, #+4]
   \       0x26   0x6822             LDR      R2,[R4, #+0]
   \       0x28   0x6992             LDR      R2,[R2, #+24]
   \       0x2A   0x4790             BLX      R2
   \       0x2C   0x2800             CMP      R0,#+0
   \       0x2E   0xD11C             BNE.N    ??mbedtls_md_hmac_finish_2
    386                  return( ret );
    387              if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
   \       0x30   0x6860             LDR      R0,[R4, #+4]
   \       0x32   0x6821             LDR      R1,[R4, #+0]
   \       0x34   0x6909             LDR      R1,[R1, #+16]
   \       0x36   0x4788             BLX      R1
   \       0x38   0x2800             CMP      R0,#+0
   \       0x3A   0xD116             BNE.N    ??mbedtls_md_hmac_finish_2
    388                  return( ret );
    389              if( ( ret = ctx->md_info->update_func( ctx->md_ctx, opad,
    390                                                     ctx->md_info->block_size ) ) != 0 )
   \       0x3C   0x6820             LDR      R0,[R4, #+0]
   \       0x3E   0x68C2             LDR      R2,[R0, #+12]
   \       0x40   0x4631             MOV      R1,R6
   \       0x42   0x6860             LDR      R0,[R4, #+4]
   \       0x44   0x6823             LDR      R3,[R4, #+0]
   \       0x46   0x695B             LDR      R3,[R3, #+20]
   \       0x48   0x4798             BLX      R3
   \       0x4A   0x2800             CMP      R0,#+0
   \       0x4C   0xD10D             BNE.N    ??mbedtls_md_hmac_finish_2
    391                  return( ret );
    392              if( ( ret = ctx->md_info->update_func( ctx->md_ctx, tmp,
    393                                                     ctx->md_info->size ) ) != 0 )
   \       0x4E   0x6820             LDR      R0,[R4, #+0]
   \       0x50   0x6882             LDR      R2,[R0, #+8]
   \       0x52   0x4669             MOV      R1,SP
   \       0x54   0x6860             LDR      R0,[R4, #+4]
   \       0x56   0x6823             LDR      R3,[R4, #+0]
   \       0x58   0x695B             LDR      R3,[R3, #+20]
   \       0x5A   0x4798             BLX      R3
   \       0x5C   0x2800             CMP      R0,#+0
   \       0x5E   0xD104             BNE.N    ??mbedtls_md_hmac_finish_2
    394                  return( ret );
    395              return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
   \       0x60   0x4629             MOV      R1,R5
   \       0x62   0x6860             LDR      R0,[R4, #+4]
   \       0x64   0x6822             LDR      R2,[R4, #+0]
   \       0x66   0x6992             LDR      R2,[R2, #+24]
   \       0x68   0x4790             BLX      R2
   \                     ??mbedtls_md_hmac_finish_2: (+1)
   \       0x6A   0xB010             ADD      SP,SP,#+64
   \       0x6C   0xBD70             POP      {R4-R6,PC}       ;; return
    396          }
    397          

   \                                 In section .text, align 2, keep-with-next
    398          int mbedtls_md_hmac_reset( mbedtls_md_context_t *ctx )
    399          {
   \                     mbedtls_md_hmac_reset: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
    400              int ret;
    401              unsigned char *ipad;
    402          
    403              if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
   \        0x4   0xD005             BEQ.N    ??mbedtls_md_hmac_reset_0
   \        0x6   0x6820             LDR      R0,[R4, #+0]
   \        0x8   0x2800             CMP      R0,#+0
   \        0xA   0xD002             BEQ.N    ??mbedtls_md_hmac_reset_0
   \        0xC   0x68A0             LDR      R0,[R4, #+8]
   \        0xE   0x2800             CMP      R0,#+0
   \       0x10   0xD101             BNE.N    ??mbedtls_md_hmac_reset_1
    404                  return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
   \                     ??mbedtls_md_hmac_reset_0: (+1)
   \       0x12   0x....             LDR.N    R0,??DataTable14_12  ;; 0xffffaf00
   \       0x14   0xBD32             POP      {R1,R4,R5,PC}
    405          
    406              ipad = (unsigned char *) ctx->hmac_ctx;
   \                     ??mbedtls_md_hmac_reset_1: (+1)
   \       0x16   0x4605             MOV      R5,R0
    407          
    408              if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
   \       0x18   0x6860             LDR      R0,[R4, #+4]
   \       0x1A   0x6821             LDR      R1,[R4, #+0]
   \       0x1C   0x6909             LDR      R1,[R1, #+16]
   \       0x1E   0x4788             BLX      R1
   \       0x20   0x2800             CMP      R0,#+0
   \       0x22   0xD109             BNE.N    ??mbedtls_md_hmac_reset_2
    409                  return( ret );
    410              return( ctx->md_info->update_func( ctx->md_ctx, ipad,
    411                                                 ctx->md_info->block_size ) );
   \       0x24   0x6820             LDR      R0,[R4, #+0]
   \       0x26   0x68C2             LDR      R2,[R0, #+12]
   \       0x28   0x4629             MOV      R1,R5
   \       0x2A   0x6860             LDR      R0,[R4, #+4]
   \       0x2C   0x6823             LDR      R3,[R4, #+0]
   \       0x2E   0x695B             LDR      R3,[R3, #+20]
   \       0x30   0xB001             ADD      SP,SP,#+4
   \       0x32   0xE8BD 0x4030      POP      {R4,R5,LR}
   \       0x36   0x4718             BX       R3
   \                     ??mbedtls_md_hmac_reset_2: (+1)
   \       0x38   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    412          }
    413          

   \                                 In section .text, align 2, keep-with-next
    414          int mbedtls_md_hmac( const mbedtls_md_info_t *md_info,
    415                               const unsigned char *key, size_t keylen,
    416                               const unsigned char *input, size_t ilen,
    417                               unsigned char *output )
    418          {
   \                     mbedtls_md_hmac: (+1)
   \        0x0   0xB5FE             PUSH     {R1-R7,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
   \        0x6   0x4616             MOV      R6,R2
   \        0x8   0x461F             MOV      R7,R3
    419              mbedtls_md_context_t ctx;
    420              int ret;
    421          
    422              if( md_info == NULL )
   \        0xA   0x2C00             CMP      R4,#+0
   \        0xC   0xD101             BNE.N    ??mbedtls_md_hmac_0
    423                  return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
   \        0xE   0x....             LDR.N    R0,??DataTable14_12  ;; 0xffffaf00
   \       0x10   0xBDFE             POP      {R1-R7,PC}
    424          
    425              mbedtls_md_init( &ctx );
   \                     ??mbedtls_md_hmac_0: (+1)
   \       0x12   0x4668             MOV      R0,SP
   \       0x14   0x....'....        BL       mbedtls_md_init
    426          
    427              if( ( ret = mbedtls_md_setup( &ctx, md_info, 1 ) ) != 0 )
   \       0x18   0x2201             MOVS     R2,#+1
   \       0x1A   0x4621             MOV      R1,R4
   \       0x1C   0x4668             MOV      R0,SP
   \       0x1E   0x....'....        BL       mbedtls_md_setup
   \       0x22   0x0004             MOVS     R4,R0
   \       0x24   0xD112             BNE.N    ??mbedtls_md_hmac_1
    428                  goto cleanup;
    429          
    430              if( ( ret = mbedtls_md_hmac_starts( &ctx, key, keylen ) ) != 0 )
   \       0x26   0x4632             MOV      R2,R6
   \       0x28   0x4629             MOV      R1,R5
   \       0x2A   0x4668             MOV      R0,SP
   \       0x2C   0x....'....        BL       mbedtls_md_hmac_starts
   \       0x30   0x0004             MOVS     R4,R0
   \       0x32   0xD10B             BNE.N    ??mbedtls_md_hmac_1
   \       0x34   0x9A08             LDR      R2,[SP, #+32]
    431                  goto cleanup;
    432              if( ( ret = mbedtls_md_hmac_update( &ctx, input, ilen ) ) != 0 )
   \       0x36   0x4639             MOV      R1,R7
   \       0x38   0x4668             MOV      R0,SP
   \       0x3A   0x....'....        BL       mbedtls_md_hmac_update
   \       0x3E   0x0004             MOVS     R4,R0
   \       0x40   0xD104             BNE.N    ??mbedtls_md_hmac_1
   \       0x42   0x9909             LDR      R1,[SP, #+36]
    433                  goto cleanup;
    434              if( ( ret = mbedtls_md_hmac_finish( &ctx, output ) ) != 0 )
   \       0x44   0x4668             MOV      R0,SP
   \       0x46   0x....'....        BL       mbedtls_md_hmac_finish
   \       0x4A   0x4604             MOV      R4,R0
    435                  goto cleanup;
    436          
    437          cleanup:
    438              mbedtls_md_free( &ctx );
   \                     ??mbedtls_md_hmac_1: (+1)
   \       0x4C   0x4668             MOV      R0,SP
   \       0x4E   0x....'....        BL       mbedtls_md_free
    439          
    440              return( ret );
   \       0x52   0x4620             MOV      R0,R4
   \       0x54   0xBDFE             POP      {R1-R7,PC}       ;; return
    441          }
    442          

   \                                 In section .text, align 2, keep-with-next
    443          int mbedtls_md_process( mbedtls_md_context_t *ctx, const unsigned char *data )
    444          {
   \                     mbedtls_md_process: (+1)
   \        0x0   0x0002             MOVS     R2,R0
    445              if( ctx == NULL || ctx->md_info == NULL )
   \        0x2   0xD002             BEQ.N    ??mbedtls_md_process_0
   \        0x4   0x6810             LDR      R0,[R2, #+0]
   \        0x6   0x2800             CMP      R0,#+0
   \        0x8   0xD101             BNE.N    ??mbedtls_md_process_1
    446                  return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
   \                     ??mbedtls_md_process_0: (+1)
   \        0xA   0x....             LDR.N    R0,??DataTable14_12  ;; 0xffffaf00
   \        0xC   0x4770             BX       LR
    447          
    448              return( ctx->md_info->process_func( ctx->md_ctx, data ) );
   \                     ??mbedtls_md_process_1: (+1)
   \        0xE   0x6850             LDR      R0,[R2, #+4]
   \       0x10   0x6812             LDR      R2,[R2, #+0]
   \       0x12   0x6AD2             LDR      R2,[R2, #+44]
   \       0x14   0x4710             BX       R2
    449          }
    450          

   \                                 In section .text, align 2, keep-with-next
    451          unsigned char mbedtls_md_get_size( const mbedtls_md_info_t *md_info )
    452          {
    453              if( md_info == NULL )
   \                     mbedtls_md_get_size: (+1)
   \        0x0   0x2800             CMP      R0,#+0
   \        0x2   0xD101             BNE.N    ??mbedtls_md_get_size_0
    454                  return( 0 );
   \        0x4   0x2000             MOVS     R0,#+0
   \        0x6   0x4770             BX       LR
    455          
    456              return md_info->size;
   \                     ??mbedtls_md_get_size_0: (+1)
   \        0x8   0x6880             LDR      R0,[R0, #+8]
   \        0xA   0xB2C0             UXTB     R0,R0
   \        0xC   0x4770             BX       LR               ;; return
    457          }
    458          

   \                                 In section .text, align 2, keep-with-next
    459          mbedtls_md_type_t mbedtls_md_get_type( const mbedtls_md_info_t *md_info )
    460          {
    461              if( md_info == NULL )
   \                     mbedtls_md_get_type: (+1)
   \        0x0   0x2800             CMP      R0,#+0
   \        0x2   0xD101             BNE.N    ??mbedtls_md_get_type_0
    462                  return( MBEDTLS_MD_NONE );
   \        0x4   0x2000             MOVS     R0,#+0
   \        0x6   0x4770             BX       LR
    463          
    464              return md_info->type;
   \                     ??mbedtls_md_get_type_0: (+1)
   \        0x8   0x7800             LDRB     R0,[R0, #+0]
   \        0xA   0x4770             BX       LR               ;; return
    465          }
    466          

   \                                 In section .text, align 2, keep-with-next
    467          const char *mbedtls_md_get_name( const mbedtls_md_info_t *md_info )
    468          {
    469              if( md_info == NULL )
   \                     mbedtls_md_get_name: (+1)
   \        0x0   0x2800             CMP      R0,#+0
   \        0x2   0xD101             BNE.N    ??mbedtls_md_get_name_0
    470                  return( NULL );
   \        0x4   0x2000             MOVS     R0,#+0
   \        0x6   0x4770             BX       LR
    471          
    472              return md_info->name;
   \                     ??mbedtls_md_get_name_0: (+1)
   \        0x8   0x6840             LDR      R0,[R0, #+4]
   \        0xA   0x4770             BX       LR               ;; return
    473          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \        0x0   0x4D 0x44          DC8      "MD5"
   \              0x35 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \        0x0   0x53 0x48          DC8      "SHA"
   \              0x41 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14:
   \        0x0   0x....'....        DC32     supported_digests

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_1:
   \        0x0   0x....'....        DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_2:
   \        0x0   0x....'....        DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_3:
   \        0x0   0x....'....        DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_4:
   \        0x0   0x....'....        DC32     ?_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_5:
   \        0x0   0x....'....        DC32     ?_6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_6:
   \        0x0   0x....'....        DC32     mbedtls_md5_info

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_7:
   \        0x0   0x....'....        DC32     mbedtls_sha1_info

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_8:
   \        0x0   0x....'....        DC32     mbedtls_sha224_info

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_9:
   \        0x0   0x....'....        DC32     mbedtls_sha256_info

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_10:
   \        0x0   0x....'....        DC32     mbedtls_sha384_info

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_11:
   \        0x0   0x....'....        DC32     mbedtls_sha512_info

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_12:
   \        0x0   0xFFFF'AF00        DC32     0xffffaf00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_13:
   \        0x0   0xFFFF'AE80        DC32     0xffffae80

   \                                 In section .rodata, align 4
   \        0x0   0x4D 0x44          DC8 "MD5"
   \              0x35 0x00    

   \                                 In section .rodata, align 4
   \                     ?_1:
   \        0x0   0x53 0x48          DC8 "SHA1"
   \              0x41 0x31    
   \              0x00         
   \        0x5   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \        0x0   0x53 0x48          DC8 "SHA"
   \              0x41 0x00    

   \                                 In section .rodata, align 4
   \                     ?_3:
   \        0x0   0x53 0x48          DC8 "SHA224"
   \              0x41 0x32    
   \              0x32 0x34    
   \              0x00         
   \        0x7   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_4:
   \        0x0   0x53 0x48          DC8 "SHA256"
   \              0x41 0x32    
   \              0x35 0x36    
   \              0x00         
   \        0x7   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_5:
   \        0x0   0x53 0x48          DC8 "SHA384"
   \              0x41 0x33    
   \              0x38 0x34    
   \              0x00         
   \        0x7   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_6:
   \        0x0   0x53 0x48          DC8 "SHA512"
   \              0x41 0x35    
   \              0x31 0x32    
   \              0x00         
   \        0x7   0x00               DC8 0
    474          
    475          #endif /* MBEDTLS_MD_C */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   mbedtls_md
         0   -- Indirect call
       8   mbedtls_md_clone
         8   -- Indirect call
       0   mbedtls_md_finish
         0   -- Indirect call
       8   mbedtls_md_free
         8   -- Indirect call
         8   -> mbedtls_free
         0   -> mbedtls_platform_zeroize
         8   -> mbedtls_platform_zeroize
       0   mbedtls_md_get_name
       0   mbedtls_md_get_size
       0   mbedtls_md_get_type
      32   mbedtls_md_hmac
        32   -> mbedtls_md_free
        32   -> mbedtls_md_hmac_finish
        32   -> mbedtls_md_hmac_starts
        32   -> mbedtls_md_hmac_update
        32   -> mbedtls_md_init
        32   -> mbedtls_md_setup
      80   mbedtls_md_hmac_finish
        80   -- Indirect call
      16   mbedtls_md_hmac_reset
         0   -- Indirect call
        16   -- Indirect call
      88   mbedtls_md_hmac_starts
        88   -- Indirect call
        88   -> __aeabi_memset
        88   -> mbedtls_platform_zeroize
       0   mbedtls_md_hmac_update
         0   -- Indirect call
       8   mbedtls_md_info_from_string
         0   -> mbedtls_md_info_from_type
         8   -> strcmp
       0   mbedtls_md_info_from_type
       0   mbedtls_md_init
         0   -> __aeabi_memset4
       0   mbedtls_md_init_ctx
         0   -> mbedtls_md_setup
       0   mbedtls_md_list
       0   mbedtls_md_process
         0   -- Indirect call
      16   mbedtls_md_setup
        16   -- Indirect call
        16   -> mbedtls_calloc
       0   mbedtls_md_starts
         0   -- Indirect call
       0   mbedtls_md_update
         0   -- Indirect call


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable14
       4  ??DataTable14_1
       4  ??DataTable14_10
       4  ??DataTable14_11
       4  ??DataTable14_12
       4  ??DataTable14_13
       4  ??DataTable14_2
       4  ??DataTable14_3
       4  ??DataTable14_4
       4  ??DataTable14_5
       4  ??DataTable14_6
       4  ??DataTable14_7
       4  ??DataTable14_8
       4  ??DataTable14_9
       4  ??DataTable8
       4  ??DataTable9
       4  ?_0
       8  ?_1
       4  ?_2
       8  ?_3
       8  ?_4
       8  ?_5
       8  ?_6
      30  mbedtls_md
      48  mbedtls_md_clone
      22  mbedtls_md_finish
      62  mbedtls_md_free
      12  mbedtls_md_get_name
      14  mbedtls_md_get_size
      12  mbedtls_md_get_type
      86  mbedtls_md_hmac
     110  mbedtls_md_hmac_finish
      58  mbedtls_md_hmac_reset
     192  mbedtls_md_hmac_starts
      28  mbedtls_md_hmac_update
     156  mbedtls_md_info_from_string
      56  mbedtls_md_info_from_type
       8  mbedtls_md_init
       2  mbedtls_md_init_ctx
       6  mbedtls_md_list
      22  mbedtls_md_process
      68  mbedtls_md_setup
      22  mbedtls_md_starts
      22  mbedtls_md_update
      28  supported_digests

 
    76 bytes in section .rodata
 1 100 bytes in section .text
 
 1 100 bytes of CODE  memory
    76 bytes of CONST memory

Errors: none
Warnings: none
