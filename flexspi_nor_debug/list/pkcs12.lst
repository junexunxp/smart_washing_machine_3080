###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.3.193/W32 for ARM         10/Jun/2019  13:48:41
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\Development\smart_washing_machine_3080\mbedtls\library\pkcs12.c
#    Command line =  
#        -f C:\Users\nxf42695\AppData\Local\Temp\1\EW30AD.tmp
#        (C:\Development\smart_washing_machine_3080\mbedtls\library\pkcs12.c -D
#        DEBUG -D USE_RTOS -D XIP_EXTERNAL_FLASH=1 -D XIP_BOOT_HEADER_ENABLE=1
#        -D CPU_MIMXRT1052DVL6B -D FSL_RTOS_FREE_RTOS -D PRINTF_ADVANCED_ENABLE
#        -D "MBEDTLS_CONFIG_FILE=\"ksdk_mbedtls_config.h\"" -lC
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list -lA
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list
#        --diag_suppress Pa082,Pa050 -o
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_d16 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" --preinclude
#        C:\Development\smart_washing_machine_3080/source\app_preinclude.h -I
#        C:\Development\smart_washing_machine_3080/board\ -I
#        C:\Development\smart_washing_machine_3080/source\ -I
#        C:\Development\smart_washing_machine_3080/CMSIS\ -I
#        C:\Development\smart_washing_machine_3080/amazon-freertos/freertos/portable\
#        -I C:\Development\smart_washing_machine_3080/amazon-freertos/include\
#        -I C:\Development\smart_washing_machine_3080/component/lists\ -I
#        C:\Development\smart_washing_machine_3080/component/serial_manager\ -I
#        C:\Development\smart_washing_machine_3080/component/uart\ -I
#        C:\Development\smart_washing_machine_3080/component/kv\ -I
#        C:\Development\smart_washing_machine_3080/component/kv/include\ -I
#        C:\Development\smart_washing_machine_3080/device\ -I
#        C:\Development\smart_washing_machine_3080/doc\ -I
#        C:\Development\smart_washing_machine_3080/drivers\ -I
#        C:\Development\smart_washing_machine_3080/src\ -I
#        C:\Development\smart_washing_machine_3080/startup\ -I
#        C:\Development\smart_washing_machine_3080/utilities\ -I
#        C:\Development\smart_washing_machine_3080/xip\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\atm\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_model\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_sign\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\infra\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\mqtt\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\external_libs\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\coap_cloud\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\CoAPPacket\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\server\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\os\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\awss_reset\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\mbedtls\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\ -I
#        C:\Development\smart_washing_machine_3080\mbedtls\port\ksdk\ -Om)
#    Locale       =  C
#    List file    =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list\pkcs12.lst
#    Object file  =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj\pkcs12.o
#
###############################################################################

C:\Development\smart_washing_machine_3080\mbedtls\library\pkcs12.c
      1          /*
      2           *  PKCS#12 Personal Information Exchange Syntax
      3           *
      4           *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
      5           *  SPDX-License-Identifier: Apache-2.0
      6           *
      7           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
      8           *  not use this file except in compliance with the License.
      9           *  You may obtain a copy of the License at
     10           *
     11           *  http://www.apache.org/licenses/LICENSE-2.0
     12           *
     13           *  Unless required by applicable law or agreed to in writing, software
     14           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     15           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     16           *  See the License for the specific language governing permissions and
     17           *  limitations under the License.
     18           *
     19           *  This file is part of mbed TLS (https://tls.mbed.org)
     20           */
     21          /*
     22           *  The PKCS #12 Personal Information Exchange Syntax Standard v1.1
     23           *
     24           *  http://www.rsa.com/rsalabs/pkcs/files/h11301-wp-pkcs-12v1-1-personal-information-exchange-syntax.pdf
     25           *  ftp://ftp.rsasecurity.com/pub/pkcs/pkcs-12/pkcs-12v1-1.asn
     26           */
     27          
     28          #if !defined(MBEDTLS_CONFIG_FILE)
     29          #include "mbedtls/config.h"
     30          #else
     31          #include MBEDTLS_CONFIG_FILE
     32          #endif
     33          
     34          #if defined(MBEDTLS_PKCS12_C)
     35          
     36          #include "mbedtls/pkcs12.h"
     37          #include "mbedtls/asn1.h"
     38          #include "mbedtls/cipher.h"
     39          #include "mbedtls/platform_util.h"
     40          
     41          #include <string.h>
     42          
     43          #if defined(MBEDTLS_ARC4_C)
     44          #include "mbedtls/arc4.h"
     45          #endif
     46          
     47          #if defined(MBEDTLS_DES_C)
     48          #include "mbedtls/des.h"
     49          #endif
     50          

   \                                 In section .text, align 2, keep-with-next
     51          static int pkcs12_parse_pbe_params( mbedtls_asn1_buf *params,
     52                                              mbedtls_asn1_buf *salt, int *iterations )
     53          {
   \                     pkcs12_parse_pbe_params: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x460C             MOV      R4,R1
   \        0x4   0x4615             MOV      R5,R2
     54              int ret;
     55              unsigned char **p = &params->p;
   \        0x6   0xF100 0x0608      ADD      R6,R0,#+8
     56              const unsigned char *end = params->p + params->len;
   \        0xA   0x6881             LDR      R1,[R0, #+8]
   \        0xC   0x6842             LDR      R2,[R0, #+4]
   \        0xE   0x188F             ADDS     R7,R1,R2
     57          
     58              /*
     59               *  pkcs-12PbeParams ::= SEQUENCE {
     60               *    salt          OCTET STRING,
     61               *    iterations    INTEGER
     62               *  }
     63               *
     64               */
     65              if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
   \       0x10   0x6800             LDR      R0,[R0, #+0]
   \       0x12   0x2830             CMP      R0,#+48
   \       0x14   0xD002             BEQ.N    ??pkcs12_parse_pbe_params_0
     66                  return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT +
     67                          MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
   \       0x16   0x....'....        LDR.W    R0,??DataTable4  ;; 0xffffe11e
   \       0x1A   0xBDF2             POP      {R1,R4-R7,PC}
     68          
     69              if( ( ret = mbedtls_asn1_get_tag( p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
   \                     ??pkcs12_parse_pbe_params_0: (+1)
   \       0x1C   0x2304             MOVS     R3,#+4
   \       0x1E   0x1D22             ADDS     R2,R4,#+4
   \       0x20   0x4639             MOV      R1,R7
   \       0x22   0x4630             MOV      R0,R6
   \       0x24   0x....'....        BL       mbedtls_asn1_get_tag
   \       0x28   0x2800             CMP      R0,#+0
   \       0x2A   0xD10C             BNE.N    ??pkcs12_parse_pbe_params_1
     70                  return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );
     71          
     72              salt->p = *p;
   \       0x2C   0x6830             LDR      R0,[R6, #+0]
   \       0x2E   0x60A0             STR      R0,[R4, #+8]
     73              *p += salt->len;
   \       0x30   0x6830             LDR      R0,[R6, #+0]
   \       0x32   0x6861             LDR      R1,[R4, #+4]
   \       0x34   0x4408             ADD      R0,R0,R1
   \       0x36   0x6030             STR      R0,[R6, #+0]
     74          
     75              if( ( ret = mbedtls_asn1_get_int( p, end, iterations ) ) != 0 )
   \       0x38   0x462A             MOV      R2,R5
   \       0x3A   0x4639             MOV      R1,R7
   \       0x3C   0x4630             MOV      R0,R6
   \       0x3E   0x....'....        BL       mbedtls_asn1_get_int
   \       0x42   0x2800             CMP      R0,#+0
   \       0x44   0xD002             BEQ.N    ??pkcs12_parse_pbe_params_2
     76                  return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );
   \                     ??pkcs12_parse_pbe_params_1: (+1)
   \       0x46   0xF5A0 0x50F4      SUB      R0,R0,#+7808
   \       0x4A   0xBDF2             POP      {R1,R4-R7,PC}
     77          
     78              if( *p != end )
   \                     ??pkcs12_parse_pbe_params_2: (+1)
   \       0x4C   0x6830             LDR      R0,[R6, #+0]
   \       0x4E   0x42B8             CMP      R0,R7
   \       0x50   0xD002             BEQ.N    ??pkcs12_parse_pbe_params_3
     79                  return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT +
     80                          MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   \       0x52   0x....'....        LDR.W    R0,??DataTable4_1  ;; 0xffffe11a
   \       0x56   0xBDF2             POP      {R1,R4-R7,PC}
     81          
     82              return( 0 );
   \                     ??pkcs12_parse_pbe_params_3: (+1)
   \       0x58   0x2000             MOVS     R0,#+0
   \       0x5A   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
     83          }
     84          
     85          #define PKCS12_MAX_PWDLEN 128
     86          

   \                                 In section .text, align 2, keep-with-next
     87          static int pkcs12_pbe_derive_key_iv( mbedtls_asn1_buf *pbe_params, mbedtls_md_type_t md_type,
     88                                               const unsigned char *pwd,  size_t pwdlen,
     89                                               unsigned char *key, size_t keylen,
     90                                               unsigned char *iv,  size_t ivlen )
     91          {
   \                     pkcs12_pbe_derive_key_iv: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0xB0CA             SUB      SP,SP,#+296
   \        0x4   0x4607             MOV      R7,R0
   \        0x6   0x460D             MOV      R5,R1
   \        0x8   0x4616             MOV      R6,R2
   \        0xA   0x461C             MOV      R4,R3
     92              int ret, iterations = 0;
   \        0xC   0x2000             MOVS     R0,#+0
   \        0xE   0x9005             STR      R0,[SP, #+20]
     93              mbedtls_asn1_buf salt;
     94              size_t i;
     95              unsigned char unipwd[PKCS12_MAX_PWDLEN * 2 + 2];
     96          
     97              if( pwdlen > PKCS12_MAX_PWDLEN )
   \       0x10   0x2C81             CMP      R4,#+129
   \       0x12   0xD302             BCC.N    ??pkcs12_pbe_derive_key_iv_0
     98                  return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );
   \       0x14   0x....'....        LDR.W    R0,??DataTable4_2  ;; 0xffffe080
   \       0x18   0xE048             B.N      ??pkcs12_pbe_derive_key_iv_1
     99          
    100              memset( &salt, 0, sizeof(mbedtls_asn1_buf) );
   \                     ??pkcs12_pbe_derive_key_iv_0: (+1)
   \       0x1A   0x4602             MOV      R2,R0
   \       0x1C   0x210C             MOVS     R1,#+12
   \       0x1E   0xA806             ADD      R0,SP,#+24
   \       0x20   0x....'....        BL       __aeabi_memset4
    101              memset( &unipwd, 0, sizeof(unipwd) );
   \       0x24   0x2200             MOVS     R2,#+0
   \       0x26   0xF44F 0x7181      MOV      R1,#+258
   \       0x2A   0xA809             ADD      R0,SP,#+36
   \       0x2C   0x....'....        BL       __aeabi_memset4
    102          
    103              if( ( ret = pkcs12_parse_pbe_params( pbe_params, &salt,
    104                                                   &iterations ) ) != 0 )
   \       0x30   0xAA05             ADD      R2,SP,#+20
   \       0x32   0xA906             ADD      R1,SP,#+24
   \       0x34   0x4638             MOV      R0,R7
   \       0x36   0x....'....        BL       pkcs12_parse_pbe_params
   \       0x3A   0x2800             CMP      R0,#+0
   \       0x3C   0xD136             BNE.N    ??pkcs12_pbe_derive_key_iv_1
    105                  return( ret );
    106          
    107              for( i = 0; i < pwdlen; i++ )
   \       0x3E   0x2000             MOVS     R0,#+0
   \       0x40   0xE005             B.N      ??pkcs12_pbe_derive_key_iv_2
    108                  unipwd[i * 2 + 1] = pwd[i];
   \                     ??pkcs12_pbe_derive_key_iv_3: (+1)
   \       0x42   0x5C31             LDRB     R1,[R6, R0]
   \       0x44   0xAA09             ADD      R2,SP,#+36
   \       0x46   0xEB02 0x0240      ADD      R2,R2,R0, LSL #+1
   \       0x4A   0x7051             STRB     R1,[R2, #+1]
   \       0x4C   0x1C40             ADDS     R0,R0,#+1
   \                     ??pkcs12_pbe_derive_key_iv_2: (+1)
   \       0x4E   0x42A0             CMP      R0,R4
   \       0x50   0xD3F7             BCC.N    ??pkcs12_pbe_derive_key_iv_3
   \       0x52   0x9951             LDR      R1,[SP, #+324]
   \       0x54   0x9850             LDR      R0,[SP, #+320]
    109          
    110              if( ( ret = mbedtls_pkcs12_derivation( key, keylen, unipwd, pwdlen * 2 + 2,
    111                                             salt.p, salt.len, md_type,
    112                                             MBEDTLS_PKCS12_DERIVE_KEY, iterations ) ) != 0 )
   \       0x56   0x9A05             LDR      R2,[SP, #+20]
   \       0x58   0x9204             STR      R2,[SP, #+16]
   \       0x5A   0x2201             MOVS     R2,#+1
   \       0x5C   0x9203             STR      R2,[SP, #+12]
   \       0x5E   0x462A             MOV      R2,R5
   \       0x60   0x9202             STR      R2,[SP, #+8]
   \       0x62   0x9A07             LDR      R2,[SP, #+28]
   \       0x64   0x9201             STR      R2,[SP, #+4]
   \       0x66   0x9A08             LDR      R2,[SP, #+32]
   \       0x68   0x9200             STR      R2,[SP, #+0]
   \       0x6A   0x0063             LSLS     R3,R4,#+1
   \       0x6C   0x1C9B             ADDS     R3,R3,#+2
   \       0x6E   0xAA09             ADD      R2,SP,#+36
   \       0x70   0x....'....        BL       mbedtls_pkcs12_derivation
   \       0x74   0x2800             CMP      R0,#+0
   \       0x76   0xD119             BNE.N    ??pkcs12_pbe_derive_key_iv_1
    113              {
    114                  return( ret );
   \       0x78   0x9852             LDR      R0,[SP, #+328]
    115              }
    116          
    117              if( iv == NULL || ivlen == 0 )
   \       0x7A   0x2800             CMP      R0,#+0
   \       0x7C   0xD002             BEQ.N    ??pkcs12_pbe_derive_key_iv_4
   \       0x7E   0x9953             LDR      R1,[SP, #+332]
   \       0x80   0x2900             CMP      R1,#+0
   \       0x82   0xD101             BNE.N    ??pkcs12_pbe_derive_key_iv_5
    118                  return( 0 );
   \                     ??pkcs12_pbe_derive_key_iv_4: (+1)
   \       0x84   0x2000             MOVS     R0,#+0
   \       0x86   0xE011             B.N      ??pkcs12_pbe_derive_key_iv_1
    119          
    120              if( ( ret = mbedtls_pkcs12_derivation( iv, ivlen, unipwd, pwdlen * 2 + 2,
    121                                             salt.p, salt.len, md_type,
    122                                             MBEDTLS_PKCS12_DERIVE_IV, iterations ) ) != 0 )
   \                     ??pkcs12_pbe_derive_key_iv_5: (+1)
   \       0x88   0x9A05             LDR      R2,[SP, #+20]
   \       0x8A   0x9204             STR      R2,[SP, #+16]
   \       0x8C   0x2202             MOVS     R2,#+2
   \       0x8E   0x9203             STR      R2,[SP, #+12]
   \       0x90   0x9502             STR      R5,[SP, #+8]
   \       0x92   0x9A07             LDR      R2,[SP, #+28]
   \       0x94   0x9201             STR      R2,[SP, #+4]
   \       0x96   0x9A08             LDR      R2,[SP, #+32]
   \       0x98   0x9200             STR      R2,[SP, #+0]
   \       0x9A   0x0064             LSLS     R4,R4,#+1
   \       0x9C   0x1CA4             ADDS     R4,R4,#+2
   \       0x9E   0x4623             MOV      R3,R4
   \       0xA0   0xAA09             ADD      R2,SP,#+36
   \       0xA2   0x....'....        BL       mbedtls_pkcs12_derivation
   \       0xA6   0x2800             CMP      R0,#+0
   \       0xA8   0xD100             BNE.N    ??pkcs12_pbe_derive_key_iv_1
    123              {
    124                  return( ret );
    125              }
    126              return( 0 );
   \       0xAA   0x2000             MOVS     R0,#+0
   \                     ??pkcs12_pbe_derive_key_iv_1: (+1)
   \       0xAC   0xB04B             ADD      SP,SP,#+300
   \       0xAE   0xBDF0             POP      {R4-R7,PC}       ;; return
    127          }
    128          
    129          #undef PKCS12_MAX_PWDLEN
    130          

   \                                 In section .text, align 2, keep-with-next
    131          int mbedtls_pkcs12_pbe_sha1_rc4_128( mbedtls_asn1_buf *pbe_params, int mode,
    132                                       const unsigned char *pwd,  size_t pwdlen,
    133                                       const unsigned char *data, size_t len,
    134                                       unsigned char *output )
    135          {
    136          #if !defined(MBEDTLS_ARC4_C)
    137              ((void) pbe_params);
    138              ((void) mode);
    139              ((void) pwd);
    140              ((void) pwdlen);
    141              ((void) data);
    142              ((void) len);
    143              ((void) output);
    144              return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );
   \                     mbedtls_pkcs12_pbe_sha1_rc4_128: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable4_3  ;; 0xffffe100
   \        0x2   0x4770             BX       LR               ;; return
    145          #else
    146              int ret;
    147              unsigned char key[16];
    148              mbedtls_arc4_context ctx;
    149              ((void) mode);
    150          
    151              mbedtls_arc4_init( &ctx );
    152          
    153              if( ( ret = pkcs12_pbe_derive_key_iv( pbe_params, MBEDTLS_MD_SHA1,
    154                                                    pwd, pwdlen,
    155                                                    key, 16, NULL, 0 ) ) != 0 )
    156              {
    157                  return( ret );
    158              }
    159          
    160              mbedtls_arc4_setup( &ctx, key, 16 );
    161              if( ( ret = mbedtls_arc4_crypt( &ctx, len, data, output ) ) != 0 )
    162                  goto exit;
    163          
    164          exit:
    165              mbedtls_platform_zeroize( key, sizeof( key ) );
    166              mbedtls_arc4_free( &ctx );
    167          
    168              return( ret );
    169          #endif /* MBEDTLS_ARC4_C */
    170          }
    171          

   \                                 In section .text, align 2, keep-with-next
    172          int mbedtls_pkcs12_pbe( mbedtls_asn1_buf *pbe_params, int mode,
    173                          mbedtls_cipher_type_t cipher_type, mbedtls_md_type_t md_type,
    174                          const unsigned char *pwd,  size_t pwdlen,
    175                          const unsigned char *data, size_t len,
    176                          unsigned char *output )
    177          {
   \                     mbedtls_pkcs12_pbe: (+1)
   \        0x0   0xE92D 0x41F8      PUSH     {R3-R8,LR}
   \        0x4   0xB0A1             SUB      SP,SP,#+132
   \        0x6   0x4604             MOV      R4,R0
   \        0x8   0x460E             MOV      R6,R1
   \        0xA   0x4698             MOV      R8,R3
    178              int ret, keylen = 0;
    179              unsigned char key[32];
    180              unsigned char iv[16];
    181              const mbedtls_cipher_info_t *cipher_info;
    182              mbedtls_cipher_context_t cipher_ctx;
    183              size_t olen = 0;
   \        0xC   0x2000             MOVS     R0,#+0
   \        0xE   0x9004             STR      R0,[SP, #+16]
    184          
    185              cipher_info = mbedtls_cipher_info_from_type( cipher_type );
   \       0x10   0x4610             MOV      R0,R2
   \       0x12   0x....'....        BL       mbedtls_cipher_info_from_type
   \       0x16   0x0005             MOVS     R5,R0
    186              if( cipher_info == NULL )
   \       0x18   0xD101             BNE.N    ??mbedtls_pkcs12_pbe_0
    187                  return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );
   \       0x1A   0x....             LDR.N    R0,??DataTable4_3  ;; 0xffffe100
   \       0x1C   0xE04F             B.N      ??mbedtls_pkcs12_pbe_1
   \                     ??mbedtls_pkcs12_pbe_0: (+1)
   \       0x1E   0x9B29             LDR      R3,[SP, #+164]
   \       0x20   0x9A28             LDR      R2,[SP, #+160]
    188          
    189              keylen = cipher_info->key_bitlen / 8;
   \       0x22   0x686F             LDR      R7,[R5, #+4]
   \       0x24   0x08FF             LSRS     R7,R7,#+3
    190          
    191              if( ( ret = pkcs12_pbe_derive_key_iv( pbe_params, md_type, pwd, pwdlen,
    192                                                    key, keylen,
    193                                                    iv, cipher_info->iv_size ) ) != 0 )
   \       0x26   0x68E8             LDR      R0,[R5, #+12]
   \       0x28   0x9003             STR      R0,[SP, #+12]
   \       0x2A   0xA805             ADD      R0,SP,#+20
   \       0x2C   0x9002             STR      R0,[SP, #+8]
   \       0x2E   0x9701             STR      R7,[SP, #+4]
   \       0x30   0xA819             ADD      R0,SP,#+100
   \       0x32   0x9000             STR      R0,[SP, #+0]
   \       0x34   0x4641             MOV      R1,R8
   \       0x36   0x4620             MOV      R0,R4
   \       0x38   0x....'....        BL       pkcs12_pbe_derive_key_iv
   \       0x3C   0x2800             CMP      R0,#+0
   \       0x3E   0xD13E             BNE.N    ??mbedtls_pkcs12_pbe_1
    194              {
    195                  return( ret );
    196              }
    197          
    198              mbedtls_cipher_init( &cipher_ctx );
   \       0x40   0xA809             ADD      R0,SP,#+36
   \       0x42   0x....'....        BL       mbedtls_cipher_init
    199          
    200              if( ( ret = mbedtls_cipher_setup( &cipher_ctx, cipher_info ) ) != 0 )
   \       0x46   0x4629             MOV      R1,R5
   \       0x48   0xA809             ADD      R0,SP,#+36
   \       0x4A   0x....'....        BL       mbedtls_cipher_setup
   \       0x4E   0x0004             MOVS     R4,R0
   \       0x50   0xD129             BNE.N    ??mbedtls_pkcs12_pbe_2
    201                  goto exit;
    202          
    203              if( ( ret = mbedtls_cipher_setkey( &cipher_ctx, key, 8 * keylen, (mbedtls_operation_t) mode ) ) != 0 )
   \       0x52   0x4633             MOV      R3,R6
   \       0x54   0xB25B             SXTB     R3,R3
   \       0x56   0x00FF             LSLS     R7,R7,#+3
   \       0x58   0x463A             MOV      R2,R7
   \       0x5A   0xA919             ADD      R1,SP,#+100
   \       0x5C   0xA809             ADD      R0,SP,#+36
   \       0x5E   0x....'....        BL       mbedtls_cipher_setkey
   \       0x62   0x0004             MOVS     R4,R0
   \       0x64   0xD11F             BNE.N    ??mbedtls_pkcs12_pbe_2
    204                  goto exit;
    205          
    206              if( ( ret = mbedtls_cipher_set_iv( &cipher_ctx, iv, cipher_info->iv_size ) ) != 0 )
   \       0x66   0x68EA             LDR      R2,[R5, #+12]
   \       0x68   0xA905             ADD      R1,SP,#+20
   \       0x6A   0xA809             ADD      R0,SP,#+36
   \       0x6C   0x....'....        BL       mbedtls_cipher_set_iv
   \       0x70   0x0004             MOVS     R4,R0
   \       0x72   0xD118             BNE.N    ??mbedtls_pkcs12_pbe_2
    207                  goto exit;
    208          
    209              if( ( ret = mbedtls_cipher_reset( &cipher_ctx ) ) != 0 )
   \       0x74   0xA809             ADD      R0,SP,#+36
   \       0x76   0x....'....        BL       mbedtls_cipher_reset
   \       0x7A   0x0004             MOVS     R4,R0
   \       0x7C   0xD113             BNE.N    ??mbedtls_pkcs12_pbe_2
   \       0x7E   0x9D2C             LDR      R5,[SP, #+176]
   \       0x80   0x9A2B             LDR      R2,[SP, #+172]
   \       0x82   0x992A             LDR      R1,[SP, #+168]
    210                  goto exit;
    211          
    212              if( ( ret = mbedtls_cipher_update( &cipher_ctx, data, len,
    213                                          output, &olen ) ) != 0 )
   \       0x84   0xA804             ADD      R0,SP,#+16
   \       0x86   0x9000             STR      R0,[SP, #+0]
   \       0x88   0x462B             MOV      R3,R5
   \       0x8A   0xA809             ADD      R0,SP,#+36
   \       0x8C   0x....'....        BL       mbedtls_cipher_update
   \       0x90   0x0004             MOVS     R4,R0
   \       0x92   0xD108             BNE.N    ??mbedtls_pkcs12_pbe_2
    214              {
    215                  goto exit;
    216              }
    217          
    218              if( ( ret = mbedtls_cipher_finish( &cipher_ctx, output + olen, &olen ) ) != 0 )
   \       0x94   0xAA04             ADD      R2,SP,#+16
   \       0x96   0x9804             LDR      R0,[SP, #+16]
   \       0x98   0x1829             ADDS     R1,R5,R0
   \       0x9A   0xA809             ADD      R0,SP,#+36
   \       0x9C   0x....'....        BL       mbedtls_cipher_finish
   \       0xA0   0x0004             MOVS     R4,R0
   \       0xA2   0xD000             BEQ.N    ??mbedtls_pkcs12_pbe_2
    219                  ret = MBEDTLS_ERR_PKCS12_PASSWORD_MISMATCH;
   \       0xA4   0x....             LDR.N    R4,??DataTable4_4  ;; 0xffffe200
    220          
    221          exit:
    222              mbedtls_platform_zeroize( key, sizeof( key ) );
   \                     ??mbedtls_pkcs12_pbe_2: (+1)
   \       0xA6   0x2120             MOVS     R1,#+32
   \       0xA8   0xA819             ADD      R0,SP,#+100
   \       0xAA   0x....'....        BL       mbedtls_platform_zeroize
    223              mbedtls_platform_zeroize( iv,  sizeof( iv  ) );
   \       0xAE   0x2110             MOVS     R1,#+16
   \       0xB0   0xA805             ADD      R0,SP,#+20
   \       0xB2   0x....'....        BL       mbedtls_platform_zeroize
    224              mbedtls_cipher_free( &cipher_ctx );
   \       0xB6   0xA809             ADD      R0,SP,#+36
   \       0xB8   0x....'....        BL       mbedtls_cipher_free
    225          
    226              return( ret );
   \       0xBC   0x4620             MOV      R0,R4
   \                     ??mbedtls_pkcs12_pbe_1: (+1)
   \       0xBE   0xB022             ADD      SP,SP,#+136
   \       0xC0   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    227          }
    228          

   \                                 In section .text, align 2, keep-with-next
    229          static void pkcs12_fill_buffer( unsigned char *data, size_t data_len,
    230                                          const unsigned char *filler, size_t fill_len )
    231          {
   \                     pkcs12_fill_buffer: (+1)
   \        0x0   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \        0x4   0x4605             MOV      R5,R0
   \        0x6   0x460C             MOV      R4,R1
   \        0x8   0x4616             MOV      R6,R2
   \        0xA   0x461F             MOV      R7,R3
    232              unsigned char *p = data;
   \        0xC   0x2C00             CMP      R4,#+0
   \        0xE   0xE00B             B.N      ??pkcs12_fill_buffer_0
    233              size_t use_len;
    234          
    235              while( data_len > 0 )
    236              {
    237                  use_len = ( data_len > fill_len ) ? fill_len : data_len;
   \                     ??pkcs12_fill_buffer_1: (+1)
   \       0x10   0x46B8             MOV      R8,R7
   \       0x12   0x42A7             CMP      R7,R4
   \       0x14   0xD900             BLS.N    ??pkcs12_fill_buffer_2
   \       0x16   0x46A0             MOV      R8,R4
    238                  memcpy( p, filler, use_len );
   \                     ??pkcs12_fill_buffer_2: (+1)
   \       0x18   0x4642             MOV      R2,R8
   \       0x1A   0x4631             MOV      R1,R6
   \       0x1C   0x4628             MOV      R0,R5
   \       0x1E   0x....'....        BL       __aeabi_memcpy
    239                  p += use_len;
   \       0x22   0x4445             ADD      R5,R5,R8
    240                  data_len -= use_len;
   \       0x24   0xEBB4 0x0408      SUBS     R4,R4,R8
    241              }
   \                     ??pkcs12_fill_buffer_0: (+1)
   \       0x28   0xD1F2             BNE.N    ??pkcs12_fill_buffer_1
    242          }
   \       0x2A   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    243          

   \                                 In section .text, align 2, keep-with-next
    244          int mbedtls_pkcs12_derivation( unsigned char *data, size_t datalen,
    245                                 const unsigned char *pwd, size_t pwdlen,
    246                                 const unsigned char *salt, size_t saltlen,
    247                                 mbedtls_md_type_t md_type, int id, int iterations )
    248          {
   \                     mbedtls_pkcs12_derivation: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \        0x4   0xF5AD 0x7D14      SUB      SP,SP,#+592
   \        0x8   0x4680             MOV      R8,R0
   \        0xA   0x460C             MOV      R4,R1
   \        0xC   0x4691             MOV      R9,R2
    249              int ret;
    250              unsigned int j;
    251          
    252              unsigned char diversifier[128];
    253              unsigned char salt_block[128], pwd_block[128], hash_block[128];
    254              unsigned char hash_output[MBEDTLS_MD_MAX_SIZE];
    255              unsigned char *p;
    256              unsigned char c;
    257          
    258              size_t hlen, use_len, v, i;
    259          
    260              const mbedtls_md_info_t *md_info;
    261              mbedtls_md_context_t md_ctx;
    262          
    263              // This version only allows max of 64 bytes of password or salt
    264              if( datalen > 128 || pwdlen > 64 || saltlen > 64 )
   \        0xE   0x2C81             CMP      R4,#+129
   \       0x10   0xD208             BCS.N    ??mbedtls_pkcs12_derivation_0
   \       0x12   0x9303             STR      R3,[SP, #+12]
   \       0x14   0x4618             MOV      R0,R3
   \       0x16   0x2841             CMP      R0,#+65
   \       0x18   0xD204             BCS.N    ??mbedtls_pkcs12_derivation_0
   \       0x1A   0xF8DD 0xA27C      LDR      R10,[SP, #+636]
   \       0x1E   0xF1BA 0x0F41      CMP      R10,#+65
   \       0x22   0xD301             BCC.N    ??mbedtls_pkcs12_derivation_1
    265                  return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );
   \                     ??mbedtls_pkcs12_derivation_0: (+1)
   \       0x24   0x....             LDR.N    R0,??DataTable4_2  ;; 0xffffe080
   \       0x26   0xE0D4             B.N      ??mbedtls_pkcs12_derivation_2
   \                     ??mbedtls_pkcs12_derivation_1: (+1)
   \       0x28   0x98A0             LDR      R0,[SP, #+640]
    266          
    267              md_info = mbedtls_md_info_from_type( md_type );
   \       0x2A   0x....'....        BL       mbedtls_md_info_from_type
   \       0x2E   0x0006             MOVS     R6,R0
    268              if( md_info == NULL )
   \       0x30   0xD101             BNE.N    ??mbedtls_pkcs12_derivation_3
    269                  return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );
   \       0x32   0x....             LDR.N    R0,??DataTable4_3  ;; 0xffffe100
   \       0x34   0xE0CD             B.N      ??mbedtls_pkcs12_derivation_2
    270          
    271              mbedtls_md_init( &md_ctx );
   \                     ??mbedtls_pkcs12_derivation_3: (+1)
   \       0x36   0x4668             MOV      R0,SP
   \       0x38   0x....'....        BL       mbedtls_md_init
    272          
    273              if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
   \       0x3C   0x2200             MOVS     R2,#+0
   \       0x3E   0x4631             MOV      R1,R6
   \       0x40   0x4668             MOV      R0,SP
   \       0x42   0x....'....        BL       mbedtls_md_setup
   \       0x46   0x2800             CMP      R0,#+0
   \       0x48   0xF040 0x80C3      BNE.W    ??mbedtls_pkcs12_derivation_2
    274                  return( ret );
    275              hlen = mbedtls_md_get_size( md_info );
   \       0x4C   0x4630             MOV      R0,R6
   \       0x4E   0x....'....        BL       mbedtls_md_get_size
   \       0x52   0x4605             MOV      R5,R0
    276          
    277              if( hlen <= 32 )
   \       0x54   0x2D21             CMP      R5,#+33
   \       0x56   0xD201             BCS.N    ??mbedtls_pkcs12_derivation_4
    278                  v = 64;
   \       0x58   0x2740             MOVS     R7,#+64
   \       0x5A   0xE000             B.N      ??mbedtls_pkcs12_derivation_5
    279              else
    280                  v = 128;
   \                     ??mbedtls_pkcs12_derivation_4: (+1)
   \       0x5C   0x2780             MOVS     R7,#+128
   \                     ??mbedtls_pkcs12_derivation_5: (+1)
   \       0x5E   0x9AA1             LDR      R2,[SP, #+644]
   \       0x60   0xF8DD 0xB278      LDR      R11,[SP, #+632]
    281          
    282              memset( diversifier, (unsigned char) id, v );
   \       0x64   0xB2D2             UXTB     R2,R2
   \       0x66   0x4639             MOV      R1,R7
   \       0x68   0xA874             ADD      R0,SP,#+464
   \       0x6A   0x....'....        BL       __aeabi_memset4
    283          
    284              pkcs12_fill_buffer( salt_block, v, salt, saltlen );
   \       0x6E   0x4653             MOV      R3,R10
   \       0x70   0x465A             MOV      R2,R11
   \       0x72   0x4639             MOV      R1,R7
   \       0x74   0xA854             ADD      R0,SP,#+336
   \       0x76   0x....'....        BL       pkcs12_fill_buffer
    285              pkcs12_fill_buffer( pwd_block,  v, pwd,  pwdlen  );
   \       0x7A   0x9B03             LDR      R3,[SP, #+12]
   \       0x7C   0x464A             MOV      R2,R9
   \       0x7E   0x4639             MOV      R1,R7
   \       0x80   0xA834             ADD      R0,SP,#+208
   \       0x82   0x....'....        BL       pkcs12_fill_buffer
    286          
    287              p = data;
   \       0x86   0xF8DD 0x9288      LDR      R9,[SP, #+648]
    288              while( datalen > 0 )
   \                     ??mbedtls_pkcs12_derivation_6: (+1)
   \       0x8A   0x2C00             CMP      R4,#+0
   \       0x8C   0xF000 0x808B      BEQ.W    ??mbedtls_pkcs12_derivation_7
    289              {
    290                  // Calculate hash( diversifier || salt_block || pwd_block )
    291                  if( ( ret = mbedtls_md_starts( &md_ctx ) ) != 0 )
   \       0x90   0x4668             MOV      R0,SP
   \       0x92   0x....'....        BL       mbedtls_md_starts
   \       0x96   0x4682             MOV      R10,R0
   \       0x98   0xF1BA 0x0F00      CMP      R10,#+0
   \       0x9C   0xF040 0x8085      BNE.W    ??mbedtls_pkcs12_derivation_8
    292                      goto exit;
    293          
    294                  if( ( ret = mbedtls_md_update( &md_ctx, diversifier, v ) ) != 0 )
   \       0xA0   0x463A             MOV      R2,R7
   \       0xA2   0xA974             ADD      R1,SP,#+464
   \       0xA4   0x4668             MOV      R0,SP
   \       0xA6   0x....'....        BL       mbedtls_md_update
   \       0xAA   0x4682             MOV      R10,R0
   \       0xAC   0xF1BA 0x0F00      CMP      R10,#+0
   \       0xB0   0xD17B             BNE.N    ??mbedtls_pkcs12_derivation_8
    295                      goto exit;
    296          
    297                  if( ( ret = mbedtls_md_update( &md_ctx, salt_block, v ) ) != 0 )
   \       0xB2   0x463A             MOV      R2,R7
   \       0xB4   0xA954             ADD      R1,SP,#+336
   \       0xB6   0x4668             MOV      R0,SP
   \       0xB8   0x....'....        BL       mbedtls_md_update
   \       0xBC   0x4682             MOV      R10,R0
   \       0xBE   0xF1BA 0x0F00      CMP      R10,#+0
   \       0xC2   0xD172             BNE.N    ??mbedtls_pkcs12_derivation_8
    298                      goto exit;
    299          
    300                  if( ( ret = mbedtls_md_update( &md_ctx, pwd_block, v ) ) != 0 )
   \       0xC4   0x463A             MOV      R2,R7
   \       0xC6   0xA934             ADD      R1,SP,#+208
   \       0xC8   0x4668             MOV      R0,SP
   \       0xCA   0x....'....        BL       mbedtls_md_update
   \       0xCE   0x4682             MOV      R10,R0
   \       0xD0   0xF1BA 0x0F00      CMP      R10,#+0
   \       0xD4   0xD169             BNE.N    ??mbedtls_pkcs12_derivation_8
    301                      goto exit;
    302          
    303                  if( ( ret = mbedtls_md_finish( &md_ctx, hash_output ) ) != 0 )
   \       0xD6   0xA904             ADD      R1,SP,#+16
   \       0xD8   0x4668             MOV      R0,SP
   \       0xDA   0x....'....        BL       mbedtls_md_finish
   \       0xDE   0x4682             MOV      R10,R0
   \       0xE0   0xF1BA 0x0F00      CMP      R10,#+0
   \       0xE4   0xD161             BNE.N    ??mbedtls_pkcs12_derivation_8
    304                      goto exit;
    305          
    306                  // Perform remaining ( iterations - 1 ) recursive hash calculations
    307                  for( i = 1; i < (size_t) iterations; i++ )
   \       0xE6   0xF04F 0x0A01      MOV      R10,#+1
   \       0xEA   0xE009             B.N      ??mbedtls_pkcs12_derivation_9
    308                  {
    309                      if( ( ret = mbedtls_md( md_info, hash_output, hlen, hash_output ) ) != 0 )
   \                     ??mbedtls_pkcs12_derivation_10: (+1)
   \       0xEC   0xAB04             ADD      R3,SP,#+16
   \       0xEE   0x462A             MOV      R2,R5
   \       0xF0   0xA904             ADD      R1,SP,#+16
   \       0xF2   0x4630             MOV      R0,R6
   \       0xF4   0x....'....        BL       mbedtls_md
   \       0xF8   0x2800             CMP      R0,#+0
   \       0xFA   0xD16E             BNE.N    ??mbedtls_pkcs12_derivation_11
    310                          goto exit;
    311                  }
   \       0xFC   0xF10A 0x0A01      ADD      R10,R10,#+1
   \                     ??mbedtls_pkcs12_derivation_9: (+1)
   \      0x100   0x45CA             CMP      R10,R9
   \      0x102   0xD3F3             BCC.N    ??mbedtls_pkcs12_derivation_10
    312          
    313                  use_len = ( datalen > hlen ) ? hlen : datalen;
   \      0x104   0x46AA             MOV      R10,R5
   \      0x106   0x42A5             CMP      R5,R4
   \      0x108   0xD900             BLS.N    ??mbedtls_pkcs12_derivation_12
   \      0x10A   0x46A2             MOV      R10,R4
    314                  memcpy( p, hash_output, use_len );
   \                     ??mbedtls_pkcs12_derivation_12: (+1)
   \      0x10C   0x4652             MOV      R2,R10
   \      0x10E   0xA904             ADD      R1,SP,#+16
   \      0x110   0x4640             MOV      R0,R8
   \      0x112   0x....'....        BL       __aeabi_memcpy
    315                  datalen -= use_len;
   \      0x116   0xEBB4 0x040A      SUBS     R4,R4,R10
    316                  p += use_len;
   \      0x11A   0x44D0             ADD      R8,R8,R10
    317          
    318                  if( datalen == 0 )
   \      0x11C   0xD043             BEQ.N    ??mbedtls_pkcs12_derivation_7
    319                      break;
    320          
    321                  // Concatenating copies of hash_output into hash_block (B)
    322                  pkcs12_fill_buffer( hash_block, v, hash_output, hlen );
   \      0x11E   0x462B             MOV      R3,R5
   \      0x120   0xAA04             ADD      R2,SP,#+16
   \      0x122   0x4639             MOV      R1,R7
   \      0x124   0xA814             ADD      R0,SP,#+80
   \      0x126   0x....'....        BL       pkcs12_fill_buffer
    323          
    324                  // B += 1
    325                  for( i = v; i > 0; i-- )
   \      0x12A   0x4639             MOV      R1,R7
   \                     ??mbedtls_pkcs12_derivation_13: (+1)
   \      0x12C   0x2900             CMP      R1,#+0
   \      0x12E   0xD056             BEQ.N    ??mbedtls_pkcs12_derivation_14
    326                      if( ++hash_block[i - 1] != 0 )
   \      0x130   0xA814             ADD      R0,SP,#+80
   \      0x132   0x4408             ADD      R0,R0,R1
   \      0x134   0xF810 0x0C01      LDRB     R0,[R0, #-1]
   \      0x138   0x1C40             ADDS     R0,R0,#+1
   \      0x13A   0xAA14             ADD      R2,SP,#+80
   \      0x13C   0x440A             ADD      R2,R2,R1
   \      0x13E   0xF802 0x0C01      STRB     R0,[R2, #-1]
   \      0x142   0xA814             ADD      R0,SP,#+80
   \      0x144   0x4408             ADD      R0,R0,R1
   \      0x146   0xF810 0x0C01      LDRB     R0,[R0, #-1]
   \      0x14A   0x2800             CMP      R0,#+0
   \      0x14C   0xD147             BNE.N    ??mbedtls_pkcs12_derivation_14
   \      0x14E   0x1E49             SUBS     R1,R1,#+1
   \      0x150   0xE7EC             B.N      ??mbedtls_pkcs12_derivation_13
    327                          break;
    328          
    329                  // salt_block += B
    330                  c = 0;
    331                  for( i = v; i > 0; i-- )
    332                  {
    333                      j = salt_block[i - 1] + hash_block[i - 1] + c;
   \                     ??mbedtls_pkcs12_derivation_15: (+1)
   \      0x152   0xAA54             ADD      R2,SP,#+336
   \      0x154   0x4402             ADD      R2,R2,R0
   \      0x156   0xF812 0x2C01      LDRB     R2,[R2, #-1]
   \      0x15A   0xAB14             ADD      R3,SP,#+80
   \      0x15C   0x4403             ADD      R3,R3,R0
   \      0x15E   0xF813 0x3C01      LDRB     R3,[R3, #-1]
   \      0x162   0x189A             ADDS     R2,R3,R2
   \      0x164   0xFA52 0xF281      UXTAB    R2,R2,R1
    334                      c = (unsigned char) (j >> 8);
   \      0x168   0x4611             MOV      R1,R2
   \      0x16A   0x0A09             LSRS     R1,R1,#+8
    335                      salt_block[i - 1] = j & 0xFF;
   \      0x16C   0xAB54             ADD      R3,SP,#+336
   \      0x16E   0x4403             ADD      R3,R3,R0
   \      0x170   0xF803 0x2C01      STRB     R2,[R3, #-1]
    336                  }
   \      0x174   0x1E40             SUBS     R0,R0,#+1
   \                     ??mbedtls_pkcs12_derivation_16: (+1)
   \      0x176   0xD1EC             BNE.N    ??mbedtls_pkcs12_derivation_15
    337          
    338                  // pwd_block  += B
    339                  c = 0;
   \      0x178   0x2100             MOVS     R1,#+0
    340                  for( i = v; i > 0; i-- )
   \      0x17A   0x4638             MOV      R0,R7
   \                     ??mbedtls_pkcs12_derivation_17: (+1)
   \      0x17C   0x2800             CMP      R0,#+0
   \      0x17E   0xD084             BEQ.N    ??mbedtls_pkcs12_derivation_6
    341                  {
    342                      j = pwd_block[i - 1] + hash_block[i - 1] + c;
   \      0x180   0xAA34             ADD      R2,SP,#+208
   \      0x182   0x4402             ADD      R2,R2,R0
   \      0x184   0xF812 0x2C01      LDRB     R2,[R2, #-1]
   \      0x188   0xAB14             ADD      R3,SP,#+80
   \      0x18A   0x4403             ADD      R3,R3,R0
   \      0x18C   0xF813 0x3C01      LDRB     R3,[R3, #-1]
   \      0x190   0x189A             ADDS     R2,R3,R2
   \      0x192   0xFA52 0xF281      UXTAB    R2,R2,R1
    343                      c = (unsigned char) (j >> 8);
   \      0x196   0x4611             MOV      R1,R2
   \      0x198   0x0A09             LSRS     R1,R1,#+8
    344                      pwd_block[i - 1] = j & 0xFF;
   \      0x19A   0xAB34             ADD      R3,SP,#+208
   \      0x19C   0x4403             ADD      R3,R3,R0
   \      0x19E   0xF803 0x2C01      STRB     R2,[R3, #-1]
    345                  }
   \      0x1A2   0x1E40             SUBS     R0,R0,#+1
   \      0x1A4   0xE7EA             B.N      ??mbedtls_pkcs12_derivation_17
    346              }
    347          
    348              ret = 0;
   \                     ??mbedtls_pkcs12_derivation_7: (+1)
   \      0x1A6   0xF04F 0x0A00      MOV      R10,#+0
    349          
    350          exit:
    351              mbedtls_platform_zeroize( salt_block, sizeof( salt_block ) );
   \                     ??mbedtls_pkcs12_derivation_8: (+1)
   \      0x1AA   0x2180             MOVS     R1,#+128
   \      0x1AC   0xA854             ADD      R0,SP,#+336
   \      0x1AE   0x....'....        BL       mbedtls_platform_zeroize
    352              mbedtls_platform_zeroize( pwd_block, sizeof( pwd_block ) );
   \      0x1B2   0x2180             MOVS     R1,#+128
   \      0x1B4   0xA834             ADD      R0,SP,#+208
   \      0x1B6   0x....'....        BL       mbedtls_platform_zeroize
    353              mbedtls_platform_zeroize( hash_block, sizeof( hash_block ) );
   \      0x1BA   0x2180             MOVS     R1,#+128
   \      0x1BC   0xA814             ADD      R0,SP,#+80
   \      0x1BE   0x....'....        BL       mbedtls_platform_zeroize
    354              mbedtls_platform_zeroize( hash_output, sizeof( hash_output ) );
   \      0x1C2   0x2140             MOVS     R1,#+64
   \      0x1C4   0xA804             ADD      R0,SP,#+16
   \      0x1C6   0x....'....        BL       mbedtls_platform_zeroize
    355          
    356              mbedtls_md_free( &md_ctx );
   \      0x1CA   0x4668             MOV      R0,SP
   \      0x1CC   0x....'....        BL       mbedtls_md_free
    357          
    358              return( ret );
   \      0x1D0   0x4650             MOV      R0,R10
   \                     ??mbedtls_pkcs12_derivation_2: (+1)
   \      0x1D2   0xF50D 0x7D15      ADD      SP,SP,#+596
   \      0x1D6   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   \                     ??mbedtls_pkcs12_derivation_11: (+1)
   \      0x1DA   0x4682             MOV      R10,R0
   \      0x1DC   0xE7E5             B.N      ??mbedtls_pkcs12_derivation_8
   \                     ??mbedtls_pkcs12_derivation_14: (+1)
   \      0x1DE   0x2100             MOVS     R1,#+0
   \      0x1E0   0x0038             MOVS     R0,R7
   \      0x1E2   0xE7C8             B.N      ??mbedtls_pkcs12_derivation_16
    359          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \        0x0   0xFFFF'E11E        DC32     0xffffe11e

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \        0x0   0xFFFF'E11A        DC32     0xffffe11a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \        0x0   0xFFFF'E080        DC32     0xffffe080

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \        0x0   0xFFFF'E100        DC32     0xffffe100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \        0x0   0xFFFF'E200        DC32     0xffffe200
    360          
    361          #endif /* MBEDTLS_PKCS12_C */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
     632   mbedtls_pkcs12_derivation
       632   -> __aeabi_memcpy
       632   -> __aeabi_memset4
       632   -> mbedtls_md
       632   -> mbedtls_md_finish
       632   -> mbedtls_md_free
       632   -> mbedtls_md_get_size
       632   -> mbedtls_md_info_from_type
       632   -> mbedtls_md_init
       632   -> mbedtls_md_setup
       632   -> mbedtls_md_starts
       632   -> mbedtls_md_update
       632   -> mbedtls_platform_zeroize
       632   -> pkcs12_fill_buffer
     160   mbedtls_pkcs12_pbe
       160   -> mbedtls_cipher_finish
       160   -> mbedtls_cipher_free
       160   -> mbedtls_cipher_info_from_type
       160   -> mbedtls_cipher_init
       160   -> mbedtls_cipher_reset
       160   -> mbedtls_cipher_set_iv
       160   -> mbedtls_cipher_setkey
       160   -> mbedtls_cipher_setup
       160   -> mbedtls_cipher_update
       160   -> mbedtls_platform_zeroize
       160   -> pkcs12_pbe_derive_key_iv
       0   mbedtls_pkcs12_pbe_sha1_rc4_128
      24   pkcs12_fill_buffer
        24   -> __aeabi_memcpy
      24   pkcs12_parse_pbe_params
        24   -> mbedtls_asn1_get_int
        24   -> mbedtls_asn1_get_tag
     320   pkcs12_pbe_derive_key_iv
       320   -> __aeabi_memset4
       320   -> mbedtls_pkcs12_derivation
       320   -> pkcs12_parse_pbe_params


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
     484  mbedtls_pkcs12_derivation
     196  mbedtls_pkcs12_pbe
       4  mbedtls_pkcs12_pbe_sha1_rc4_128
      46  pkcs12_fill_buffer
      92  pkcs12_parse_pbe_params
     176  pkcs12_pbe_derive_key_iv

 
 1 018 bytes in section .text
 
 1 018 bytes of CODE memory

Errors: none
Warnings: none
