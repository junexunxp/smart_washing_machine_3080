###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.3.193/W32 for ARM         10/Jun/2019  13:48:21
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\Development\smart_washing_machine_3080\drivers\fsl_common.c
#    Command line =  
#        -f C:\Users\nxf42695\AppData\Local\Temp\1\EWE03E.tmp
#        (C:\Development\smart_washing_machine_3080\drivers\fsl_common.c -D
#        DEBUG -D USE_RTOS -D XIP_EXTERNAL_FLASH=1 -D XIP_BOOT_HEADER_ENABLE=1
#        -D CPU_MIMXRT1052DVL6B -D FSL_RTOS_FREE_RTOS -D PRINTF_ADVANCED_ENABLE
#        -D "MBEDTLS_CONFIG_FILE=\"ksdk_mbedtls_config.h\"" -lC
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list -lA
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list
#        --diag_suppress Pa082,Pa050 -o
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_d16 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" --preinclude
#        C:\Development\smart_washing_machine_3080/source\app_preinclude.h -I
#        C:\Development\smart_washing_machine_3080/board\ -I
#        C:\Development\smart_washing_machine_3080/source\ -I
#        C:\Development\smart_washing_machine_3080/CMSIS\ -I
#        C:\Development\smart_washing_machine_3080/amazon-freertos/freertos/portable\
#        -I C:\Development\smart_washing_machine_3080/amazon-freertos/include\
#        -I C:\Development\smart_washing_machine_3080/component/lists\ -I
#        C:\Development\smart_washing_machine_3080/component/serial_manager\ -I
#        C:\Development\smart_washing_machine_3080/component/uart\ -I
#        C:\Development\smart_washing_machine_3080/component/kv\ -I
#        C:\Development\smart_washing_machine_3080/component/kv/include\ -I
#        C:\Development\smart_washing_machine_3080/device\ -I
#        C:\Development\smart_washing_machine_3080/doc\ -I
#        C:\Development\smart_washing_machine_3080/drivers\ -I
#        C:\Development\smart_washing_machine_3080/src\ -I
#        C:\Development\smart_washing_machine_3080/startup\ -I
#        C:\Development\smart_washing_machine_3080/utilities\ -I
#        C:\Development\smart_washing_machine_3080/xip\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\atm\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_model\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_sign\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\infra\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\mqtt\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\external_libs\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\coap_cloud\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\CoAPPacket\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\server\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\os\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\awss_reset\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\mbedtls\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\ -I
#        C:\Development\smart_washing_machine_3080\mbedtls\port\ksdk\ -Om)
#    Locale       =  C
#    List file    =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list\fsl_common.lst
#    Object file  =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj\fsl_common.o
#
###############################################################################

C:\Development\smart_washing_machine_3080\drivers\fsl_common.c
      1          /*
      2          * Copyright (c) 2015-2016, Freescale Semiconductor, Inc.
      3           * Copyright 2016-2018 NXP
      4          * All rights reserved.
      5          *
      6          *
      7          * SPDX-License-Identifier: BSD-3-Clause
      8          */
      9          
     10          #include "fsl_common.h"
     11          #define SDK_MEM_MAGIC_NUMBER 12345U
     12          
     13          typedef struct _mem_align_control_block
     14          {
     15              uint16_t identifier; /*!< Identifier for the memory control block. */
     16              uint16_t offset;     /*!< offset from aligned address to real address */
     17          } mem_align_cb_t;
     18          
     19          /* Component ID definition, used by tools. */
     20          #ifndef FSL_COMPONENT_ID
     21          #define FSL_COMPONENT_ID "platform.drivers.common"
     22          #endif
     23          
     24          #ifndef __GIC_PRIO_BITS
     25          #if defined(ENABLE_RAM_VECTOR_TABLE)
     26          uint32_t InstallIRQHandler(IRQn_Type irq, uint32_t irqHandler)
     27          {
     28          /* Addresses for VECTOR_TABLE and VECTOR_RAM come from the linker file */
     29          #if defined(__CC_ARM) || defined(__ARMCC_VERSION)
     30              extern uint32_t Image$$VECTOR_ROM$$Base[];
     31              extern uint32_t Image$$VECTOR_RAM$$Base[];
     32              extern uint32_t Image$$RW_m_data$$Base[];
     33          
     34          #define __VECTOR_TABLE Image$$VECTOR_ROM$$Base
     35          #define __VECTOR_RAM Image$$VECTOR_RAM$$Base
     36          #define __RAM_VECTOR_TABLE_SIZE (((uint32_t)Image$$RW_m_data$$Base - (uint32_t)Image$$VECTOR_RAM$$Base))
     37          #elif defined(__ICCARM__)
     38              extern uint32_t __RAM_VECTOR_TABLE_SIZE[];
     39              extern uint32_t __VECTOR_TABLE[];
     40              extern uint32_t __VECTOR_RAM[];
     41          #elif defined(__GNUC__)
     42              extern uint32_t __VECTOR_TABLE[];
     43              extern uint32_t __VECTOR_RAM[];
     44              extern uint32_t __RAM_VECTOR_TABLE_SIZE_BYTES[];
     45              uint32_t __RAM_VECTOR_TABLE_SIZE = (uint32_t)(__RAM_VECTOR_TABLE_SIZE_BYTES);
     46          #endif /* defined(__CC_ARM) || defined(__ARMCC_VERSION) */
     47              uint32_t n;
     48              uint32_t ret;
     49              uint32_t irqMaskValue;
     50          
     51              irqMaskValue = DisableGlobalIRQ();
     52              if (SCB->VTOR != (uint32_t)__VECTOR_RAM)
     53              {
     54                  /* Copy the vector table from ROM to RAM */
     55                  for (n = 0; n < ((uint32_t)__RAM_VECTOR_TABLE_SIZE) / sizeof(uint32_t); n++)
     56                  {
     57                      __VECTOR_RAM[n] = __VECTOR_TABLE[n];
     58                  }
     59                  /* Point the VTOR to the position of vector table */
     60                  SCB->VTOR = (uint32_t)__VECTOR_RAM;
     61              }
     62          
     63              ret = __VECTOR_RAM[irq + 16];
     64              /* make sure the __VECTOR_RAM is noncachable */
     65              __VECTOR_RAM[irq + 16] = irqHandler;
     66          
     67              EnableGlobalIRQ(irqMaskValue);
     68          
     69          /* Add for ARM errata 838869, affects Cortex-M4, Cortex-M4F Store immediate overlapping
     70            exception return operation might vector to incorrect interrupt */
     71          #if defined __CORTEX_M && (__CORTEX_M == 4U)
     72              __DSB();
     73          #endif
     74          
     75              return ret;
     76          }
     77          #endif /* ENABLE_RAM_VECTOR_TABLE. */
     78          #endif /* __GIC_PRIO_BITS. */
     79          
     80          #if (defined(FSL_FEATURE_SOC_SYSCON_COUNT) && (FSL_FEATURE_SOC_SYSCON_COUNT > 0))
     81          #if !(defined(FSL_FEATURE_SYSCON_STARTER_DISCONTINUOUS) && FSL_FEATURE_SYSCON_STARTER_DISCONTINUOUS)
     82          
     83          void EnableDeepSleepIRQ(IRQn_Type interrupt)
     84          {
     85              uint32_t intNumber = (uint32_t)interrupt;
     86          
     87              uint32_t index = 0;
     88          
     89              while (intNumber >= 32u)
     90              {
     91                  index++;
     92                  intNumber -= 32u;
     93              }
     94          
     95              SYSCON->STARTERSET[index] = 1u << intNumber;
     96              EnableIRQ(interrupt); /* also enable interrupt at NVIC */
     97          }
     98          
     99          void DisableDeepSleepIRQ(IRQn_Type interrupt)
    100          {
    101              uint32_t intNumber = (uint32_t)interrupt;
    102          
    103              DisableIRQ(interrupt); /* also disable interrupt at NVIC */
    104              uint32_t index = 0;
    105          
    106              while (intNumber >= 32u)
    107              {
    108                  index++;
    109                  intNumber -= 32u;
    110              }
    111          
    112              SYSCON->STARTERCLR[index] = 1u << intNumber;
    113          }
    114          #endif /* FSL_FEATURE_SYSCON_STARTER_DISCONTINUOUS */
    115          #endif /* FSL_FEATURE_SOC_SYSCON_COUNT */
    116          

   \                                 In section .text, align 2, keep-with-next
    117          void *SDK_Malloc(size_t size, size_t alignbytes)
    118          {
   \                     SDK_Malloc: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x460C             MOV      R4,R1
    119              mem_align_cb_t *p_cb = NULL;
    120              uint32_t alignedsize = SDK_SIZEALIGN(size, alignbytes) + alignbytes + sizeof(mem_align_cb_t);
    121              void *p_align_addr, *p_addr = malloc(alignedsize);
   \        0x4   0x1820             ADDS     R0,R4,R0
   \        0x6   0x1E40             SUBS     R0,R0,#+1
   \        0x8   0x1E61             SUBS     R1,R4,#+1
   \        0xA   0x4388             BICS     R0,R0,R1
   \        0xC   0x1820             ADDS     R0,R4,R0
   \        0xE   0x1D00             ADDS     R0,R0,#+4
   \       0x10   0x....'....        BL       malloc
    122          
    123              if (!p_addr)
   \       0x14   0x2800             CMP      R0,#+0
   \       0x16   0xD101             BNE.N    ??SDK_Malloc_0
    124              {
    125                  return NULL;
   \       0x18   0x2000             MOVS     R0,#+0
   \       0x1A   0xBD10             POP      {R4,PC}
    126              }
    127          
    128              p_align_addr = (void *)SDK_SIZEALIGN((uint32_t)p_addr + sizeof(mem_align_cb_t), alignbytes);
   \                     ??SDK_Malloc_0: (+1)
   \       0x1C   0x1821             ADDS     R1,R4,R0
   \       0x1E   0x1CC9             ADDS     R1,R1,#+3
   \       0x20   0x1E64             SUBS     R4,R4,#+1
   \       0x22   0xEA21 0x0404      BIC      R4,R1,R4
    129          
    130              p_cb = (mem_align_cb_t *)((uint32_t)p_align_addr - 4);
   \       0x26   0x1F21             SUBS     R1,R4,#+4
    131              p_cb->identifier = SDK_MEM_MAGIC_NUMBER;
   \       0x28   0xF243 0x0239      MOVW     R2,#+12345
   \       0x2C   0x800A             STRH     R2,[R1, #+0]
    132              p_cb->offset = (uint32_t)p_align_addr - (uint32_t)p_addr;
   \       0x2E   0x1A20             SUBS     R0,R4,R0
   \       0x30   0x8048             STRH     R0,[R1, #+2]
    133          
    134              return (void *)p_align_addr;
   \       0x32   0x4620             MOV      R0,R4
   \       0x34   0xBD10             POP      {R4,PC}          ;; return
    135          }
    136          

   \                                 In section .text, align 2, keep-with-next
    137          void SDK_Free(void *ptr)
    138          {
    139              mem_align_cb_t *p_cb = (mem_align_cb_t *)((uint32_t)ptr - 4);
   \                     SDK_Free: (+1)
   \        0x0   0x1F01             SUBS     R1,R0,#+4
    140          
    141              if (p_cb->identifier != SDK_MEM_MAGIC_NUMBER)
   \        0x2   0x880A             LDRH     R2,[R1, #+0]
   \        0x4   0xF243 0x0339      MOVW     R3,#+12345
   \        0x8   0x429A             CMP      R2,R3
   \        0xA   0xD103             BNE.N    ??SDK_Free_0
    142              {
    143                  return;
    144              }
    145          
    146              free((void *)((uint32_t)ptr - p_cb->offset));
   \        0xC   0x8849             LDRH     R1,[R1, #+2]
   \        0xE   0x1A40             SUBS     R0,R0,R1
   \       0x10   0x....'....        B.W      free
   \                     ??SDK_Free_0: (+1)
   \       0x14   0x4770             BX       LR               ;; return
    147          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   SDK_Free
         0   -> free
       8   SDK_Malloc
         8   -> malloc


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      22  SDK_Free
      54  SDK_Malloc

 
 76 bytes in section .text
 
 76 bytes of CODE memory

Errors: none
Warnings: none
