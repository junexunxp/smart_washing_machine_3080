###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.3.193/W32 for ARM         10/Jun/2019  13:48:45
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\Development\smart_washing_machine_3080\mbedtls\library\rsa_internal.c
#    Command line =  
#        -f C:\Users\nxf42695\AppData\Local\Temp\1\EW3E65.tmp
#        (C:\Development\smart_washing_machine_3080\mbedtls\library\rsa_internal.c
#        -D DEBUG -D USE_RTOS -D XIP_EXTERNAL_FLASH=1 -D
#        XIP_BOOT_HEADER_ENABLE=1 -D CPU_MIMXRT1052DVL6B -D FSL_RTOS_FREE_RTOS
#        -D PRINTF_ADVANCED_ENABLE -D
#        "MBEDTLS_CONFIG_FILE=\"ksdk_mbedtls_config.h\"" -lC
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list -lA
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list
#        --diag_suppress Pa082,Pa050 -o
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_d16 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" --preinclude
#        C:\Development\smart_washing_machine_3080/source\app_preinclude.h -I
#        C:\Development\smart_washing_machine_3080/board\ -I
#        C:\Development\smart_washing_machine_3080/source\ -I
#        C:\Development\smart_washing_machine_3080/CMSIS\ -I
#        C:\Development\smart_washing_machine_3080/amazon-freertos/freertos/portable\
#        -I C:\Development\smart_washing_machine_3080/amazon-freertos/include\
#        -I C:\Development\smart_washing_machine_3080/component/lists\ -I
#        C:\Development\smart_washing_machine_3080/component/serial_manager\ -I
#        C:\Development\smart_washing_machine_3080/component/uart\ -I
#        C:\Development\smart_washing_machine_3080/component/kv\ -I
#        C:\Development\smart_washing_machine_3080/component/kv/include\ -I
#        C:\Development\smart_washing_machine_3080/device\ -I
#        C:\Development\smart_washing_machine_3080/doc\ -I
#        C:\Development\smart_washing_machine_3080/drivers\ -I
#        C:\Development\smart_washing_machine_3080/src\ -I
#        C:\Development\smart_washing_machine_3080/startup\ -I
#        C:\Development\smart_washing_machine_3080/utilities\ -I
#        C:\Development\smart_washing_machine_3080/xip\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\atm\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_model\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_sign\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\infra\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\mqtt\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\external_libs\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\coap_cloud\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\CoAPPacket\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\server\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\os\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\awss_reset\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\mbedtls\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\ -I
#        C:\Development\smart_washing_machine_3080\mbedtls\port\ksdk\ -Om)
#    Locale       =  C
#    List file    =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list\rsa_internal.lst
#    Object file  =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj\rsa_internal.o
#
###############################################################################

C:\Development\smart_washing_machine_3080\mbedtls\library\rsa_internal.c
      1          /*
      2           *  Helper functions for the RSA module
      3           *
      4           *  Copyright (C) 2006-2017, ARM Limited, All Rights Reserved
      5           *  SPDX-License-Identifier: Apache-2.0
      6           *
      7           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
      8           *  not use this file except in compliance with the License.
      9           *  You may obtain a copy of the License at
     10           *
     11           *  http://www.apache.org/licenses/LICENSE-2.0
     12           *
     13           *  Unless required by applicable law or agreed to in writing, software
     14           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     15           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     16           *  See the License for the specific language governing permissions and
     17           *  limitations under the License.
     18           *
     19           *  This file is part of mbed TLS (https://tls.mbed.org)
     20           *
     21           */
     22          
     23          #if !defined(MBEDTLS_CONFIG_FILE)
     24          #include "mbedtls/config.h"
     25          #else
     26          #include MBEDTLS_CONFIG_FILE
     27          #endif
     28          
     29          #if defined(MBEDTLS_RSA_C)
     30          
     31          #include "mbedtls/rsa.h"
     32          #include "mbedtls/bignum.h"
     33          #include "mbedtls/rsa_internal.h"
     34          
     35          /*
     36           * Compute RSA prime factors from public and private exponents
     37           *
     38           * Summary of algorithm:
     39           * Setting F := lcm(P-1,Q-1), the idea is as follows:
     40           *
     41           * (a) For any 1 <= X < N with gcd(X,N)=1, we have X^F = 1 modulo N, so X^(F/2)
     42           *     is a square root of 1 in Z/NZ. Since Z/NZ ~= Z/PZ x Z/QZ by CRT and the
     43           *     square roots of 1 in Z/PZ and Z/QZ are +1 and -1, this leaves the four
     44           *     possibilities X^(F/2) = (+-1, +-1). If it happens that X^(F/2) = (-1,+1)
     45           *     or (+1,-1), then gcd(X^(F/2) + 1, N) will be equal to one of the prime
     46           *     factors of N.
     47           *
     48           * (b) If we don't know F/2 but (F/2) * K for some odd (!) K, then the same
     49           *     construction still applies since (-)^K is the identity on the set of
     50           *     roots of 1 in Z/NZ.
     51           *
     52           * The public and private key primitives (-)^E and (-)^D are mutually inverse
     53           * bijections on Z/NZ if and only if (-)^(DE) is the identity on Z/NZ, i.e.
     54           * if and only if DE - 1 is a multiple of F, say DE - 1 = F * L.
     55           * Splitting L = 2^t * K with K odd, we have
     56           *
     57           *   DE - 1 = FL = (F/2) * (2^(t+1)) * K,
     58           *
     59           * so (F / 2) * K is among the numbers
     60           *
     61           *   (DE - 1) >> 1, (DE - 1) >> 2, ..., (DE - 1) >> ord
     62           *
     63           * where ord is the order of 2 in (DE - 1).
     64           * We can therefore iterate through these numbers apply the construction
     65           * of (a) and (b) above to attempt to factor N.
     66           *
     67           */

   \                                 In section .text, align 2, keep-with-next
     68          int mbedtls_rsa_deduce_primes( mbedtls_mpi const *N,
     69                               mbedtls_mpi const *E, mbedtls_mpi const *D,
     70                               mbedtls_mpi *P, mbedtls_mpi *Q )
     71          {
   \                     mbedtls_rsa_deduce_primes: (+1)
   \        0x0   0xE92D 0x47F8      PUSH     {R3-R10,LR}
   \        0x4   0xB087             SUB      SP,SP,#+28
   \        0x6   0x460C             MOV      R4,R1
   \        0x8   0x4617             MOV      R7,R2
   \        0xA   0x001D             MOVS     R5,R3
     72              int ret = 0;
     73          
     74              uint16_t attempt;  /* Number of current attempt  */
     75              uint16_t iter;     /* Number of squares computed in the current attempt */
     76          
     77              uint16_t order;    /* Order of 2 in DE - 1 */
     78          
     79              mbedtls_mpi T;  /* Holds largest odd divisor of DE - 1     */
     80              mbedtls_mpi K;  /* Temporary holding the current candidate */
     81          
     82              const unsigned char primes[] = { 2,
     83                     3,    5,    7,   11,   13,   17,   19,   23,
     84                    29,   31,   37,   41,   43,   47,   53,   59,
     85                    61,   67,   71,   73,   79,   83,   89,   97,
     86                   101,  103,  107,  109,  113,  127,  131,  137,
     87                   139,  149,  151,  157,  163,  167,  173,  179,
     88                   181,  191,  193,  197,  199,  211,  223,  227,
     89                   229,  233,  239,  241,  251
     90              };
     91          
     92              const size_t num_primes = sizeof( primes ) / sizeof( *primes );
     93          
     94              if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
   \        0xC   0xD026             BEQ.N    ??mbedtls_rsa_deduce_primes_0
   \        0xE   0x9E10             LDR      R6,[SP, #+64]
   \       0x10   0x2E00             CMP      R6,#+0
   \       0x12   0xD023             BEQ.N    ??mbedtls_rsa_deduce_primes_0
   \       0x14   0x68A9             LDR      R1,[R5, #+8]
   \       0x16   0x2900             CMP      R1,#+0
   \       0x18   0xD120             BNE.N    ??mbedtls_rsa_deduce_primes_0
   \       0x1A   0x68B1             LDR      R1,[R6, #+8]
   \       0x1C   0x2900             CMP      R1,#+0
   \       0x1E   0xD11D             BNE.N    ??mbedtls_rsa_deduce_primes_0
   \       0x20   0x4682             MOV      R10,R0
     95                  return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
     96          
     97              if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
     98                  mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
     99                  mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
    100                  mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
    101                  mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
   \       0x22   0x2100             MOVS     R1,#+0
   \       0x24   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x28   0x2801             CMP      R0,#+1
   \       0x2A   0xDB17             BLT.N    ??mbedtls_rsa_deduce_primes_0
   \       0x2C   0x2101             MOVS     R1,#+1
   \       0x2E   0x4638             MOV      R0,R7
   \       0x30   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x34   0x2801             CMP      R0,#+1
   \       0x36   0xDB11             BLT.N    ??mbedtls_rsa_deduce_primes_0
   \       0x38   0x4651             MOV      R1,R10
   \       0x3A   0x4638             MOV      R0,R7
   \       0x3C   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \       0x40   0x2800             CMP      R0,#+0
   \       0x42   0xD50B             BPL.N    ??mbedtls_rsa_deduce_primes_0
   \       0x44   0x2101             MOVS     R1,#+1
   \       0x46   0x4620             MOV      R0,R4
   \       0x48   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x4C   0x2801             CMP      R0,#+1
   \       0x4E   0xDB05             BLT.N    ??mbedtls_rsa_deduce_primes_0
   \       0x50   0x4651             MOV      R1,R10
   \       0x52   0x4620             MOV      R0,R4
   \       0x54   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \       0x58   0x2800             CMP      R0,#+0
   \       0x5A   0xD402             BMI.N    ??mbedtls_rsa_deduce_primes_1
    102              {
    103                  return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
   \                     ??mbedtls_rsa_deduce_primes_0: (+1)
   \       0x5C   0xF06F 0x0003      MVN      R0,#+3
   \       0x60   0xE0AD             B.N      ??mbedtls_rsa_deduce_primes_2
    104              }
    105          
    106              /*
    107               * Initializations and temporary changes
    108               */
    109          
    110              mbedtls_mpi_init( &K );
   \                     ??mbedtls_rsa_deduce_primes_1: (+1)
   \       0x62   0xA801             ADD      R0,SP,#+4
   \       0x64   0x....'....        BL       mbedtls_mpi_init
    111              mbedtls_mpi_init( &T );
   \       0x68   0xA804             ADD      R0,SP,#+16
   \       0x6A   0x....'....        BL       mbedtls_mpi_init
    112          
    113              /* T := DE - 1 */
    114              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, D,  E ) );
   \       0x6E   0x4622             MOV      R2,R4
   \       0x70   0x4639             MOV      R1,R7
   \       0x72   0xA804             ADD      R0,SP,#+16
   \       0x74   0x....'....        BL       mbedtls_mpi_mul_mpi
   \       0x78   0x0004             MOVS     R4,R0
   \       0x7A   0xF040 0x8099      BNE.W    ??mbedtls_rsa_deduce_primes_3
    115              MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &T, &T, 1 ) );
   \       0x7E   0x2201             MOVS     R2,#+1
   \       0x80   0xA904             ADD      R1,SP,#+16
   \       0x82   0xA804             ADD      R0,SP,#+16
   \       0x84   0x....'....        BL       mbedtls_mpi_sub_int
   \       0x88   0x0004             MOVS     R4,R0
   \       0x8A   0xF040 0x8091      BNE.W    ??mbedtls_rsa_deduce_primes_3
    116          
    117              if( ( order = (uint16_t) mbedtls_mpi_lsb( &T ) ) == 0 )
   \       0x8E   0xA804             ADD      R0,SP,#+16
   \       0x90   0x....'....        BL       mbedtls_mpi_lsb
   \       0x94   0x4607             MOV      R7,R0
   \       0x96   0xB2BF             UXTH     R7,R7
   \       0x98   0x0038             MOVS     R0,R7
   \       0x9A   0xF000 0x8087      BEQ.W    ??mbedtls_rsa_deduce_primes_4
    118              {
    119                  ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
    120                  goto cleanup;
    121              }
    122          
    123              /* After this operation, T holds the largest odd divisor of DE - 1. */
    124              MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &T, order ) );
   \       0x9E   0x4639             MOV      R1,R7
   \       0xA0   0xA804             ADD      R0,SP,#+16
   \       0xA2   0x....'....        BL       mbedtls_mpi_shift_r
   \       0xA6   0x0004             MOVS     R4,R0
   \       0xA8   0xF040 0x8082      BNE.W    ??mbedtls_rsa_deduce_primes_3
    125          
    126              /*
    127               * Actual work
    128               */
    129          
    130              /* Skip trying 2 if N == 1 mod 8 */
    131              attempt = 0;
   \       0xAC   0xF04F 0x0800      MOV      R8,#+0
    132              if( N->p[0] % 8 == 1 )
   \       0xB0   0xF8DA 0x0008      LDR      R0,[R10, #+8]
   \       0xB4   0x7800             LDRB     R0,[R0, #+0]
   \       0xB6   0xF000 0x0007      AND      R0,R0,#0x7
   \       0xBA   0x2801             CMP      R0,#+1
   \       0xBC   0xD104             BNE.N    ??mbedtls_rsa_deduce_primes_5
    133                  attempt = 1;
   \       0xBE   0xF04F 0x0801      MOV      R8,#+1
   \       0xC2   0xE001             B.N      ??mbedtls_rsa_deduce_primes_5
    134          
    135              for( ; attempt < num_primes; ++attempt )
   \                     ??mbedtls_rsa_deduce_primes_6: (+1)
   \       0xC4   0xF108 0x0801      ADD      R8,R8,#+1
   \                     ??mbedtls_rsa_deduce_primes_5: (+1)
   \       0xC8   0x4640             MOV      R0,R8
   \       0xCA   0xB280             UXTH     R0,R0
   \       0xCC   0x2836             CMP      R0,#+54
   \       0xCE   0xD26D             BCS.N    ??mbedtls_rsa_deduce_primes_4
    136              {
    137                  mbedtls_mpi_lset( &K, primes[attempt] );
   \       0xD0   0x....'....        LDR.W    R0,??DataTable2
   \       0xD4   0x4641             MOV      R1,R8
   \       0xD6   0xB289             UXTH     R1,R1
   \       0xD8   0x5C41             LDRB     R1,[R0, R1]
   \       0xDA   0xA801             ADD      R0,SP,#+4
   \       0xDC   0x....'....        BL       mbedtls_mpi_lset
    138          
    139                  /* Check if gcd(K,N) = 1 */
    140                  MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );
   \       0xE0   0x4652             MOV      R2,R10
   \       0xE2   0xA901             ADD      R1,SP,#+4
   \       0xE4   0x4628             MOV      R0,R5
   \       0xE6   0x....'....        BL       mbedtls_mpi_gcd
   \       0xEA   0x0004             MOVS     R4,R0
   \       0xEC   0xD160             BNE.N    ??mbedtls_rsa_deduce_primes_3
    141                  if( mbedtls_mpi_cmp_int( P, 1 ) != 0 )
   \       0xEE   0x2101             MOVS     R1,#+1
   \       0xF0   0x4628             MOV      R0,R5
   \       0xF2   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0xF6   0x2800             CMP      R0,#+0
   \       0xF8   0xD1E4             BNE.N    ??mbedtls_rsa_deduce_primes_6
    142                      continue;
    143          
    144                  /* Go through K^T + 1, K^(2T) + 1, K^(4T) + 1, ...
    145                   * and check whether they have nontrivial GCD with N. */
    146                  MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &K, &K, &T, N,
    147                                       Q /* temporarily use Q for storing Montgomery
    148                                          * multiplication helper values */ ) );
   \       0xFA   0x9600             STR      R6,[SP, #+0]
   \       0xFC   0x4653             MOV      R3,R10
   \       0xFE   0xAA04             ADD      R2,SP,#+16
   \      0x100   0xA901             ADD      R1,SP,#+4
   \      0x102   0xA801             ADD      R0,SP,#+4
   \      0x104   0x....'....        BL       mbedtls_mpi_exp_mod
   \      0x108   0x0004             MOVS     R4,R0
   \      0x10A   0xD151             BNE.N    ??mbedtls_rsa_deduce_primes_3
    149          
    150                  for( iter = 1; iter <= order; ++iter )
   \      0x10C   0xF04F 0x0901      MOV      R9,#+1
   \      0x110   0x462C             MOV      R4,R5
   \      0x112   0xE016             B.N      ??mbedtls_rsa_deduce_primes_7
    151                  {
    152                      /* If we reach 1 prematurely, there's no point
    153                       * in continuing to square K */
    154                      if( mbedtls_mpi_cmp_int( &K, 1 ) == 0 )
    155                          break;
    156          
    157                      MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( &K, &K, 1 ) );
    158                      MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );
    159          
    160                      if( mbedtls_mpi_cmp_int( P, 1 ) ==  1 &&
    161                          mbedtls_mpi_cmp_mpi( P, N ) == -1 )
    162                      {
    163                          /*
    164                           * Have found a nontrivial divisor P of N.
    165                           * Set Q := N / P.
    166                           */
    167          
    168                          MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( Q, NULL, N, P ) );
    169                          goto cleanup;
    170                      }
    171          
    172                      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
   \                     ??mbedtls_rsa_deduce_primes_8: (+1)
   \      0x114   0x2201             MOVS     R2,#+1
   \      0x116   0xA901             ADD      R1,SP,#+4
   \      0x118   0xA801             ADD      R0,SP,#+4
   \      0x11A   0x....'....        BL       mbedtls_mpi_sub_int
   \      0x11E   0x2800             CMP      R0,#+0
   \      0x120   0xD13C             BNE.N    ??mbedtls_rsa_deduce_primes_9
    173                      MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, &K, &K ) );
   \      0x122   0xAA01             ADD      R2,SP,#+4
   \      0x124   0xA901             ADD      R1,SP,#+4
   \      0x126   0xA801             ADD      R0,SP,#+4
   \      0x128   0x....'....        BL       mbedtls_mpi_mul_mpi
   \      0x12C   0x2800             CMP      R0,#+0
   \      0x12E   0xD135             BNE.N    ??mbedtls_rsa_deduce_primes_9
    174                      MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, N ) );
   \      0x130   0x4652             MOV      R2,R10
   \      0x132   0xA901             ADD      R1,SP,#+4
   \      0x134   0xA801             ADD      R0,SP,#+4
   \      0x136   0x....'....        BL       mbedtls_mpi_mod_mpi
   \      0x13A   0x2800             CMP      R0,#+0
   \      0x13C   0xD12E             BNE.N    ??mbedtls_rsa_deduce_primes_9
   \      0x13E   0xF109 0x0901      ADD      R9,R9,#+1
   \                     ??mbedtls_rsa_deduce_primes_7: (+1)
   \      0x142   0x4648             MOV      R0,R9
   \      0x144   0xB280             UXTH     R0,R0
   \      0x146   0x4287             CMP      R7,R0
   \      0x148   0xDB2A             BLT.N    ??mbedtls_rsa_deduce_primes_10
   \      0x14A   0x2101             MOVS     R1,#+1
   \      0x14C   0xA801             ADD      R0,SP,#+4
   \      0x14E   0x....'....        BL       mbedtls_mpi_cmp_int
   \      0x152   0x2800             CMP      R0,#+0
   \      0x154   0xD024             BEQ.N    ??mbedtls_rsa_deduce_primes_10
   \      0x156   0x2201             MOVS     R2,#+1
   \      0x158   0xA901             ADD      R1,SP,#+4
   \      0x15A   0xA801             ADD      R0,SP,#+4
   \      0x15C   0x....'....        BL       mbedtls_mpi_add_int
   \      0x160   0x2800             CMP      R0,#+0
   \      0x162   0xD11B             BNE.N    ??mbedtls_rsa_deduce_primes_9
   \      0x164   0x4652             MOV      R2,R10
   \      0x166   0xA901             ADD      R1,SP,#+4
   \      0x168   0x4620             MOV      R0,R4
   \      0x16A   0x....'....        BL       mbedtls_mpi_gcd
   \      0x16E   0x2800             CMP      R0,#+0
   \      0x170   0xD114             BNE.N    ??mbedtls_rsa_deduce_primes_9
   \      0x172   0x2101             MOVS     R1,#+1
   \      0x174   0x4620             MOV      R0,R4
   \      0x176   0x....'....        BL       mbedtls_mpi_cmp_int
   \      0x17A   0x2801             CMP      R0,#+1
   \      0x17C   0xD1CA             BNE.N    ??mbedtls_rsa_deduce_primes_8
   \      0x17E   0x4651             MOV      R1,R10
   \      0x180   0x4620             MOV      R0,R4
   \      0x182   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \      0x186   0xF110 0x0F01      CMN      R0,#+1
   \      0x18A   0xD1C3             BNE.N    ??mbedtls_rsa_deduce_primes_8
   \      0x18C   0x4623             MOV      R3,R4
   \      0x18E   0x4652             MOV      R2,R10
   \      0x190   0x2100             MOVS     R1,#+0
   \      0x192   0x4630             MOV      R0,R6
   \      0x194   0x....'....        BL       mbedtls_mpi_div_mpi
   \      0x198   0x4604             MOV      R4,R0
   \      0x19A   0xE009             B.N      ??mbedtls_rsa_deduce_primes_3
    175                  }
   \                     ??mbedtls_rsa_deduce_primes_9: (+1)
   \      0x19C   0x4604             MOV      R4,R0
   \      0x19E   0xE007             B.N      ??mbedtls_rsa_deduce_primes_3
    176          
    177                  /*
    178                   * If we get here, then either we prematurely aborted the loop because
    179                   * we reached 1, or K holds primes[attempt]^(DE - 1) mod N, which must
    180                   * be 1 if D,E,N were consistent.
    181                   * Check if that's the case and abort if not, to avoid very long,
    182                   * yet eventually failing, computations if N,D,E were not sane.
    183                   */
    184                  if( mbedtls_mpi_cmp_int( &K, 1 ) != 0 )
   \                     ??mbedtls_rsa_deduce_primes_10: (+1)
   \      0x1A0   0x2101             MOVS     R1,#+1
   \      0x1A2   0xA801             ADD      R0,SP,#+4
   \      0x1A4   0x....'....        BL       mbedtls_mpi_cmp_int
   \      0x1A8   0x2800             CMP      R0,#+0
   \      0x1AA   0xD08B             BEQ.N    ??mbedtls_rsa_deduce_primes_6
    185                  {
    186                      break;
    187                  }
    188              }
    189          
    190              ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
   \                     ??mbedtls_rsa_deduce_primes_4: (+1)
   \      0x1AC   0xF06F 0x0403      MVN      R4,#+3
    191          
    192          cleanup:
    193          
    194              mbedtls_mpi_free( &K );
   \                     ??mbedtls_rsa_deduce_primes_3: (+1)
   \      0x1B0   0xA801             ADD      R0,SP,#+4
   \      0x1B2   0x....'....        BL       mbedtls_mpi_free
    195              mbedtls_mpi_free( &T );
   \      0x1B6   0xA804             ADD      R0,SP,#+16
   \      0x1B8   0x....'....        BL       mbedtls_mpi_free
    196              return( ret );
   \      0x1BC   0x4620             MOV      R0,R4
   \                     ??mbedtls_rsa_deduce_primes_2: (+1)
   \      0x1BE   0xB008             ADD      SP,SP,#+32
   \      0x1C0   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    197          }

   \                                 In section .rodata, align 4
   \                     `mbedtls_rsa_deduce_primes::primes`:
   \        0x0   0x02 0x03          DC8 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61
   \              0x05 0x07    
   \              0x0B 0x0D    
   \              0x11 0x13    
   \              0x17 0x1D    
   \              0x1F 0x25    
   \              0x29 0x2B    
   \              0x2F 0x35    
   \              0x3B 0x3D    
   \       0x12   0x43 0x47          DC8 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137
   \              0x49 0x4F    
   \              0x53 0x59    
   \              0x61 0x65    
   \              0x67 0x6B    
   \              0x6D 0x71    
   \              0x7F 0x83    
   \              0x89         
   \       0x21   0x8B 0x95          DC8 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199
   \              0x97 0x9D    
   \              0xA3 0xA7    
   \              0xAD 0xB3    
   \              0xB5 0xBF    
   \              0xC1 0xC5    
   \              0xC7         
   \       0x2E   0xD3 0xDF          DC8 211, 223, 227, 229, 233, 239, 241, 251, 0, 0
   \              0xE3 0xE5    
   \              0xE9 0xEF    
   \              0xF1 0xFB    
   \              0x00 0x00    
    198          
    199          /*
    200           * Given P, Q and the public exponent E, deduce D.
    201           * This is essentially a modular inversion.
    202           */

   \                                 In section .text, align 2, keep-with-next
    203          int mbedtls_rsa_deduce_private_exponent( mbedtls_mpi const *P,
    204                                                   mbedtls_mpi const *Q,
    205                                                   mbedtls_mpi const *E,
    206                                                   mbedtls_mpi *D )
    207          {
   \                     mbedtls_rsa_deduce_private_exponent: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0xB086             SUB      SP,SP,#+24
   \        0x4   0x4604             MOV      R4,R0
   \        0x6   0x460E             MOV      R6,R1
   \        0x8   0x4617             MOV      R7,R2
   \        0xA   0x001D             MOVS     R5,R3
    208              int ret = 0;
    209              mbedtls_mpi K, L;
    210          
    211              if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
   \        0xC   0xD017             BEQ.N    ??mbedtls_rsa_deduce_private_exponent_0
   \        0xE   0x2100             MOVS     R1,#+0
   \       0x10   0x4628             MOV      R0,R5
   \       0x12   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x16   0x2800             CMP      R0,#+0
   \       0x18   0xD111             BNE.N    ??mbedtls_rsa_deduce_private_exponent_0
    212                  return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
    213          
    214              if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
    215                  mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
    216                  mbedtls_mpi_cmp_int( E, 0 ) == 0 )
   \       0x1A   0x2101             MOVS     R1,#+1
   \       0x1C   0x4620             MOV      R0,R4
   \       0x1E   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x22   0x2801             CMP      R0,#+1
   \       0x24   0xDB0B             BLT.N    ??mbedtls_rsa_deduce_private_exponent_0
   \       0x26   0x2101             MOVS     R1,#+1
   \       0x28   0x4630             MOV      R0,R6
   \       0x2A   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x2E   0x2801             CMP      R0,#+1
   \       0x30   0xDB05             BLT.N    ??mbedtls_rsa_deduce_private_exponent_0
   \       0x32   0x2100             MOVS     R1,#+0
   \       0x34   0x4638             MOV      R0,R7
   \       0x36   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x3A   0x2800             CMP      R0,#+0
   \       0x3C   0xD102             BNE.N    ??mbedtls_rsa_deduce_private_exponent_1
    217              {
    218                  return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
   \                     ??mbedtls_rsa_deduce_private_exponent_0: (+1)
   \       0x3E   0xF06F 0x0003      MVN      R0,#+3
   \       0x42   0xE036             B.N      ??mbedtls_rsa_deduce_private_exponent_2
    219              }
    220          
    221              mbedtls_mpi_init( &K );
   \                     ??mbedtls_rsa_deduce_private_exponent_1: (+1)
   \       0x44   0x4668             MOV      R0,SP
   \       0x46   0x....'....        BL       mbedtls_mpi_init
    222              mbedtls_mpi_init( &L );
   \       0x4A   0xA803             ADD      R0,SP,#+12
   \       0x4C   0x....'....        BL       mbedtls_mpi_init
    223          
    224              /* Temporarily put K := P-1 and L := Q-1 */
    225              MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1 ) );
   \       0x50   0x2201             MOVS     R2,#+1
   \       0x52   0x4621             MOV      R1,R4
   \       0x54   0x4668             MOV      R0,SP
   \       0x56   0x....'....        BL       mbedtls_mpi_sub_int
   \       0x5A   0x0004             MOVS     R4,R0
   \       0x5C   0xD122             BNE.N    ??mbedtls_rsa_deduce_private_exponent_3
    226              MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
   \       0x5E   0x2201             MOVS     R2,#+1
   \       0x60   0x4631             MOV      R1,R6
   \       0x62   0xA803             ADD      R0,SP,#+12
   \       0x64   0x....'....        BL       mbedtls_mpi_sub_int
   \       0x68   0x0004             MOVS     R4,R0
   \       0x6A   0xD11B             BNE.N    ??mbedtls_rsa_deduce_private_exponent_3
    227          
    228              /* Temporarily put D := gcd(P-1, Q-1) */
    229              MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( D, &K, &L ) );
   \       0x6C   0xAA03             ADD      R2,SP,#+12
   \       0x6E   0x4669             MOV      R1,SP
   \       0x70   0x4628             MOV      R0,R5
   \       0x72   0x....'....        BL       mbedtls_mpi_gcd
   \       0x76   0x0004             MOVS     R4,R0
   \       0x78   0xD114             BNE.N    ??mbedtls_rsa_deduce_private_exponent_3
    230          
    231              /* K := LCM(P-1, Q-1) */
    232              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, &K, &L ) );
   \       0x7A   0xAA03             ADD      R2,SP,#+12
   \       0x7C   0x4669             MOV      R1,SP
   \       0x7E   0x4668             MOV      R0,SP
   \       0x80   0x....'....        BL       mbedtls_mpi_mul_mpi
   \       0x84   0x0004             MOVS     R4,R0
   \       0x86   0xD10D             BNE.N    ??mbedtls_rsa_deduce_private_exponent_3
    233              MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( &K, NULL, &K, D ) );
   \       0x88   0x462B             MOV      R3,R5
   \       0x8A   0x466A             MOV      R2,SP
   \       0x8C   0x2100             MOVS     R1,#+0
   \       0x8E   0x4668             MOV      R0,SP
   \       0x90   0x....'....        BL       mbedtls_mpi_div_mpi
   \       0x94   0x0004             MOVS     R4,R0
   \       0x96   0xD105             BNE.N    ??mbedtls_rsa_deduce_private_exponent_3
    234          
    235              /* Compute modular inverse of E in LCM(P-1, Q-1) */
    236              MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( D, E, &K ) );
   \       0x98   0x466A             MOV      R2,SP
   \       0x9A   0x4639             MOV      R1,R7
   \       0x9C   0x4628             MOV      R0,R5
   \       0x9E   0x....'....        BL       mbedtls_mpi_inv_mod
   \       0xA2   0x4604             MOV      R4,R0
    237          
    238          cleanup:
    239          
    240              mbedtls_mpi_free( &K );
   \                     ??mbedtls_rsa_deduce_private_exponent_3: (+1)
   \       0xA4   0x4668             MOV      R0,SP
   \       0xA6   0x....'....        BL       mbedtls_mpi_free
    241              mbedtls_mpi_free( &L );
   \       0xAA   0xA803             ADD      R0,SP,#+12
   \       0xAC   0x....'....        BL       mbedtls_mpi_free
    242          
    243              return( ret );
   \       0xB0   0x4620             MOV      R0,R4
   \                     ??mbedtls_rsa_deduce_private_exponent_2: (+1)
   \       0xB2   0xB007             ADD      SP,SP,#+28
   \       0xB4   0xBDF0             POP      {R4-R7,PC}       ;; return
    244          }
    245          
    246          /*
    247           * Check that RSA CRT parameters are in accordance with core parameters.
    248           */

   \                                 In section .text, align 2, keep-with-next
    249          int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
    250                                        const mbedtls_mpi *D,  const mbedtls_mpi *DP,
    251                                        const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
    252          {
   \                     mbedtls_rsa_validate_crt: (+1)
   \        0x0   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \        0x4   0xB086             SUB      SP,SP,#+24
   \        0x6   0x4606             MOV      R6,R0
   \        0x8   0x460D             MOV      R5,R1
   \        0xA   0x4690             MOV      R8,R2
   \        0xC   0x461F             MOV      R7,R3
    253              int ret = 0;
   \        0xE   0x2400             MOVS     R4,#+0
    254          
    255              mbedtls_mpi K, L;
    256              mbedtls_mpi_init( &K );
   \       0x10   0x4668             MOV      R0,SP
   \       0x12   0x....'....        BL       mbedtls_mpi_init
    257              mbedtls_mpi_init( &L );
   \       0x16   0xA803             ADD      R0,SP,#+12
   \       0x18   0x....'....        BL       mbedtls_mpi_init
    258          
    259              /* Check that DP - D == 0 mod P - 1 */
    260              if( DP != NULL )
   \       0x1C   0x2F00             CMP      R7,#+0
   \       0x1E   0xD01E             BEQ.N    ??mbedtls_rsa_validate_crt_0
    261              {
    262                  if( P == NULL )
   \       0x20   0x2E00             CMP      R6,#+0
   \       0x22   0xD045             BEQ.N    ??mbedtls_rsa_validate_crt_1
    263                  {
    264                      ret = MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
    265                      goto cleanup;
    266                  }
    267          
    268                  MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1 ) );
   \       0x24   0x2201             MOVS     R2,#+1
   \       0x26   0x4631             MOV      R1,R6
   \       0x28   0x4668             MOV      R0,SP
   \       0x2A   0x....'....        BL       mbedtls_mpi_sub_int
   \       0x2E   0x0004             MOVS     R4,R0
   \       0x30   0xD15B             BNE.N    ??mbedtls_rsa_validate_crt_2
    269                  MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &L, DP, D ) );
   \       0x32   0x4642             MOV      R2,R8
   \       0x34   0x4639             MOV      R1,R7
   \       0x36   0xA803             ADD      R0,SP,#+12
   \       0x38   0x....'....        BL       mbedtls_mpi_sub_mpi
   \       0x3C   0x0004             MOVS     R4,R0
   \       0x3E   0xD154             BNE.N    ??mbedtls_rsa_validate_crt_2
    270                  MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &L, &L, &K ) );
   \       0x40   0x466A             MOV      R2,SP
   \       0x42   0xA903             ADD      R1,SP,#+12
   \       0x44   0xA803             ADD      R0,SP,#+12
   \       0x46   0x....'....        BL       mbedtls_mpi_mod_mpi
   \       0x4A   0x0004             MOVS     R4,R0
   \       0x4C   0xD14D             BNE.N    ??mbedtls_rsa_validate_crt_2
    271          
    272                  if( mbedtls_mpi_cmp_int( &L, 0 ) != 0 )
   \       0x4E   0x2100             MOVS     R1,#+0
   \       0x50   0xA803             ADD      R0,SP,#+12
   \       0x52   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x56   0x2800             CMP      R0,#+0
   \       0x58   0xD001             BEQ.N    ??mbedtls_rsa_validate_crt_0
    273                  {
    274                      ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
   \       0x5A   0x....             LDR.N    R4,??DataTable2_1  ;; 0xffffbe00
    275                      goto cleanup;
   \       0x5C   0xE045             B.N      ??mbedtls_rsa_validate_crt_2
    276                  }
    277              }
   \                     ??mbedtls_rsa_validate_crt_0: (+1)
   \       0x5E   0x9F0C             LDR      R7,[SP, #+48]
    278          
    279              /* Check that DQ - D == 0 mod Q - 1 */
    280              if( DQ != NULL )
   \       0x60   0x2F00             CMP      R7,#+0
   \       0x62   0xD01E             BEQ.N    ??mbedtls_rsa_validate_crt_3
    281              {
    282                  if( Q == NULL )
   \       0x64   0x2D00             CMP      R5,#+0
   \       0x66   0xD023             BEQ.N    ??mbedtls_rsa_validate_crt_1
    283                  {
    284                      ret = MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
    285                      goto cleanup;
    286                  }
    287          
    288                  MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1 ) );
   \       0x68   0x2201             MOVS     R2,#+1
   \       0x6A   0x4629             MOV      R1,R5
   \       0x6C   0x4668             MOV      R0,SP
   \       0x6E   0x....'....        BL       mbedtls_mpi_sub_int
   \       0x72   0x0004             MOVS     R4,R0
   \       0x74   0xD139             BNE.N    ??mbedtls_rsa_validate_crt_2
    289                  MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &L, DQ, D ) );
   \       0x76   0x4642             MOV      R2,R8
   \       0x78   0x4639             MOV      R1,R7
   \       0x7A   0xA803             ADD      R0,SP,#+12
   \       0x7C   0x....'....        BL       mbedtls_mpi_sub_mpi
   \       0x80   0x0004             MOVS     R4,R0
   \       0x82   0xD132             BNE.N    ??mbedtls_rsa_validate_crt_2
    290                  MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &L, &L, &K ) );
   \       0x84   0x466A             MOV      R2,SP
   \       0x86   0xA903             ADD      R1,SP,#+12
   \       0x88   0xA803             ADD      R0,SP,#+12
   \       0x8A   0x....'....        BL       mbedtls_mpi_mod_mpi
   \       0x8E   0x0004             MOVS     R4,R0
   \       0x90   0xD12B             BNE.N    ??mbedtls_rsa_validate_crt_2
    291          
    292                  if( mbedtls_mpi_cmp_int( &L, 0 ) != 0 )
   \       0x92   0x2100             MOVS     R1,#+0
   \       0x94   0xA803             ADD      R0,SP,#+12
   \       0x96   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x9A   0x2800             CMP      R0,#+0
   \       0x9C   0xD001             BEQ.N    ??mbedtls_rsa_validate_crt_3
    293                  {
    294                      ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
   \       0x9E   0x....             LDR.N    R4,??DataTable2_1  ;; 0xffffbe00
    295                      goto cleanup;
   \       0xA0   0xE023             B.N      ??mbedtls_rsa_validate_crt_2
    296                  }
    297              }
   \                     ??mbedtls_rsa_validate_crt_3: (+1)
   \       0xA2   0x990D             LDR      R1,[SP, #+52]
    298          
    299              /* Check that QP * Q - 1 == 0 mod P */
    300              if( QP != NULL )
   \       0xA4   0x2900             CMP      R1,#+0
   \       0xA6   0xD020             BEQ.N    ??mbedtls_rsa_validate_crt_2
    301              {
    302                  if( P == NULL || Q == NULL )
   \       0xA8   0x2E00             CMP      R6,#+0
   \       0xAA   0xD001             BEQ.N    ??mbedtls_rsa_validate_crt_1
   \       0xAC   0x2D00             CMP      R5,#+0
   \       0xAE   0xD101             BNE.N    ??mbedtls_rsa_validate_crt_4
    303                  {
    304                      ret = MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
   \                     ??mbedtls_rsa_validate_crt_1: (+1)
   \       0xB0   0x....             LDR.N    R4,??DataTable2_2  ;; 0xffffbf80
    305                      goto cleanup;
   \       0xB2   0xE01A             B.N      ??mbedtls_rsa_validate_crt_2
    306                  }
    307          
    308                  MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, QP, Q ) );
   \                     ??mbedtls_rsa_validate_crt_4: (+1)
   \       0xB4   0x462A             MOV      R2,R5
   \       0xB6   0x4668             MOV      R0,SP
   \       0xB8   0x....'....        BL       mbedtls_mpi_mul_mpi
   \       0xBC   0x0004             MOVS     R4,R0
   \       0xBE   0xD114             BNE.N    ??mbedtls_rsa_validate_crt_2
    309                  MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
   \       0xC0   0x2201             MOVS     R2,#+1
   \       0xC2   0x4669             MOV      R1,SP
   \       0xC4   0x4668             MOV      R0,SP
   \       0xC6   0x....'....        BL       mbedtls_mpi_sub_int
   \       0xCA   0x0004             MOVS     R4,R0
   \       0xCC   0xD10D             BNE.N    ??mbedtls_rsa_validate_crt_2
    310                  MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, P ) );
   \       0xCE   0x4632             MOV      R2,R6
   \       0xD0   0x4669             MOV      R1,SP
   \       0xD2   0x4668             MOV      R0,SP
   \       0xD4   0x....'....        BL       mbedtls_mpi_mod_mpi
   \       0xD8   0x0004             MOVS     R4,R0
   \       0xDA   0xD106             BNE.N    ??mbedtls_rsa_validate_crt_2
    311                  if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
   \       0xDC   0x2100             MOVS     R1,#+0
   \       0xDE   0x4668             MOV      R0,SP
   \       0xE0   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0xE4   0x2800             CMP      R0,#+0
   \       0xE6   0xD000             BEQ.N    ??mbedtls_rsa_validate_crt_2
    312                  {
    313                      ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
   \       0xE8   0x....             LDR.N    R4,??DataTable2_1  ;; 0xffffbe00
    314                      goto cleanup;
    315                  }
    316              }
    317          
    318          cleanup:
    319          
    320              /* Wrap MPI error codes by RSA check failure error code */
    321              if( ret != 0 &&
    322                  ret != MBEDTLS_ERR_RSA_KEY_CHECK_FAILED &&
    323                  ret != MBEDTLS_ERR_RSA_BAD_INPUT_DATA )
   \                     ??mbedtls_rsa_validate_crt_2: (+1)
   \       0xEA   0x2C00             CMP      R4,#+0
   \       0xEC   0xD007             BEQ.N    ??mbedtls_rsa_validate_crt_5
   \       0xEE   0xF514 0x4F84      CMN      R4,#+16896
   \       0xF2   0xD004             BEQ.N    ??mbedtls_rsa_validate_crt_5
   \       0xF4   0xF514 0x4F81      CMN      R4,#+16512
   \       0xF8   0xD001             BEQ.N    ??mbedtls_rsa_validate_crt_5
    324              {
    325                  ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
   \       0xFA   0xF5A4 0x4484      SUB      R4,R4,#+16896
    326              }
    327          
    328              mbedtls_mpi_free( &K );
   \                     ??mbedtls_rsa_validate_crt_5: (+1)
   \       0xFE   0x4668             MOV      R0,SP
   \      0x100   0x....'....        BL       mbedtls_mpi_free
    329              mbedtls_mpi_free( &L );
   \      0x104   0xA803             ADD      R0,SP,#+12
   \      0x106   0x....'....        BL       mbedtls_mpi_free
    330          
    331              return( ret );
   \      0x10A   0x4620             MOV      R0,R4
   \      0x10C   0xB006             ADD      SP,SP,#+24
   \      0x10E   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    332          }
    333          
    334          /*
    335           * Check that core RSA parameters are sane.
    336           */

   \                                 In section .text, align 2, keep-with-next
    337          int mbedtls_rsa_validate_params( const mbedtls_mpi *N, const mbedtls_mpi *P,
    338                                           const mbedtls_mpi *Q, const mbedtls_mpi *D,
    339                                           const mbedtls_mpi *E,
    340                                           int (*f_rng)(void *, unsigned char *, size_t),
    341                                           void *p_rng )
    342          {
   \                     mbedtls_rsa_validate_params: (+1)
   \        0x0   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \        0x4   0xB086             SUB      SP,SP,#+24
   \        0x6   0x4680             MOV      R8,R0
   \        0x8   0x460D             MOV      R5,R1
   \        0xA   0x4614             MOV      R4,R2
   \        0xC   0x461E             MOV      R6,R3
   \        0xE   0x9F0F             LDR      R7,[SP, #+60]
   \       0x10   0xF8DD 0xA040      LDR      R10,[SP, #+64]
    343              int ret = 0;
   \       0x14   0xF04F 0x0900      MOV      R9,#+0
    344              mbedtls_mpi K, L;
    345          
    346              mbedtls_mpi_init( &K );
   \       0x18   0x4668             MOV      R0,SP
   \       0x1A   0x....'....        BL       mbedtls_mpi_init
    347              mbedtls_mpi_init( &L );
   \       0x1E   0xA803             ADD      R0,SP,#+12
   \       0x20   0x....'....        BL       mbedtls_mpi_init
    348          
    349              /*
    350               * Step 1: If PRNG provided, check that P and Q are prime
    351               */
    352          
    353          #if defined(MBEDTLS_GENPRIME)
    354              if( f_rng != NULL && P != NULL &&
    355                  ( ret = mbedtls_mpi_is_prime( P, f_rng, p_rng ) ) != 0 )
   \       0x24   0x0038             MOVS     R0,R7
   \       0x26   0xD00C             BEQ.N    ??mbedtls_rsa_validate_params_0
   \       0x28   0x2D00             CMP      R5,#+0
   \       0x2A   0xD00A             BEQ.N    ??mbedtls_rsa_validate_params_0
   \       0x2C   0x4652             MOV      R2,R10
   \       0x2E   0x4639             MOV      R1,R7
   \       0x30   0x4628             MOV      R0,R5
   \       0x32   0x....'....        BL       mbedtls_mpi_is_prime
   \       0x36   0x4681             MOV      R9,R0
   \       0x38   0x2800             CMP      R0,#+0
   \       0x3A   0xD002             BEQ.N    ??mbedtls_rsa_validate_params_0
    356              {
    357                  ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
   \       0x3C   0x....'....        LDR.W    R9,??DataTable2_1  ;; 0xffffbe00
    358                  goto cleanup;
   \       0x40   0xE0B8             B.N      ??mbedtls_rsa_validate_params_1
    359              }
    360          
    361              if( f_rng != NULL && Q != NULL &&
    362                  ( ret = mbedtls_mpi_is_prime( Q, f_rng, p_rng ) ) != 0 )
   \                     ??mbedtls_rsa_validate_params_0: (+1)
   \       0x42   0x0038             MOVS     R0,R7
   \       0x44   0xD00C             BEQ.N    ??mbedtls_rsa_validate_params_2
   \       0x46   0x2C00             CMP      R4,#+0
   \       0x48   0xD00A             BEQ.N    ??mbedtls_rsa_validate_params_2
   \       0x4A   0x4652             MOV      R2,R10
   \       0x4C   0x4639             MOV      R1,R7
   \       0x4E   0x4620             MOV      R0,R4
   \       0x50   0x....'....        BL       mbedtls_mpi_is_prime
   \       0x54   0x4681             MOV      R9,R0
   \       0x56   0x2800             CMP      R0,#+0
   \       0x58   0xD002             BEQ.N    ??mbedtls_rsa_validate_params_2
    363              {
    364                  ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
   \       0x5A   0x....'....        LDR.W    R9,??DataTable2_1  ;; 0xffffbe00
    365                  goto cleanup;
   \       0x5E   0xE0A9             B.N      ??mbedtls_rsa_validate_params_1
    366              }
    367          #else
    368              ((void) f_rng);
    369              ((void) p_rng);
    370          #endif /* MBEDTLS_GENPRIME */
    371          
    372              /*
    373               * Step 2: Check that 1 < N = P * Q
    374               */
    375          
    376              if( P != NULL && Q != NULL && N != NULL )
   \                     ??mbedtls_rsa_validate_params_2: (+1)
   \       0x60   0x2D00             CMP      R5,#+0
   \       0x62   0xD01C             BEQ.N    ??mbedtls_rsa_validate_params_3
   \       0x64   0x2C00             CMP      R4,#+0
   \       0x66   0xD01A             BEQ.N    ??mbedtls_rsa_validate_params_3
   \       0x68   0xF1B8 0x0F00      CMP      R8,#+0
   \       0x6C   0xD017             BEQ.N    ??mbedtls_rsa_validate_params_3
    377              {
    378                  MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, P, Q ) );
   \       0x6E   0x4622             MOV      R2,R4
   \       0x70   0x4629             MOV      R1,R5
   \       0x72   0x4668             MOV      R0,SP
   \       0x74   0x....'....        BL       mbedtls_mpi_mul_mpi
   \       0x78   0x4681             MOV      R9,R0
   \       0x7A   0x2800             CMP      R0,#+0
   \       0x7C   0xF040 0x809A      BNE.W    ??mbedtls_rsa_validate_params_1
    379                  if( mbedtls_mpi_cmp_int( N, 1 )  <= 0 ||
    380                      mbedtls_mpi_cmp_mpi( &K, N ) != 0 )
   \       0x80   0x2101             MOVS     R1,#+1
   \       0x82   0x4640             MOV      R0,R8
   \       0x84   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x88   0x2801             CMP      R0,#+1
   \       0x8A   0xDB05             BLT.N    ??mbedtls_rsa_validate_params_4
   \       0x8C   0x4641             MOV      R1,R8
   \       0x8E   0x4668             MOV      R0,SP
   \       0x90   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \       0x94   0x2800             CMP      R0,#+0
   \       0x96   0xD002             BEQ.N    ??mbedtls_rsa_validate_params_3
    381                  {
    382                      ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
   \                     ??mbedtls_rsa_validate_params_4: (+1)
   \       0x98   0x....'....        LDR.W    R9,??DataTable2_1  ;; 0xffffbe00
    383                      goto cleanup;
   \       0x9C   0xE08A             B.N      ??mbedtls_rsa_validate_params_1
    384                  }
    385              }
   \                     ??mbedtls_rsa_validate_params_3: (+1)
   \       0x9E   0x9F0E             LDR      R7,[SP, #+56]
    386          
    387              /*
    388               * Step 3: Check and 1 < D, E < N if present.
    389               */
    390          
    391              if( N != NULL && D != NULL && E != NULL )
   \       0xA0   0xF1B8 0x0F00      CMP      R8,#+0
   \       0xA4   0xD01E             BEQ.N    ??mbedtls_rsa_validate_params_5
   \       0xA6   0x2E00             CMP      R6,#+0
   \       0xA8   0xD01C             BEQ.N    ??mbedtls_rsa_validate_params_5
   \       0xAA   0x2F00             CMP      R7,#+0
   \       0xAC   0xD01A             BEQ.N    ??mbedtls_rsa_validate_params_5
    392              {
    393                  if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
    394                       mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
    395                       mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
    396                       mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
   \       0xAE   0x2101             MOVS     R1,#+1
   \       0xB0   0x4630             MOV      R0,R6
   \       0xB2   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0xB6   0x2801             CMP      R0,#+1
   \       0xB8   0xDB11             BLT.N    ??mbedtls_rsa_validate_params_6
   \       0xBA   0x2101             MOVS     R1,#+1
   \       0xBC   0x4638             MOV      R0,R7
   \       0xBE   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0xC2   0x2801             CMP      R0,#+1
   \       0xC4   0xDB0B             BLT.N    ??mbedtls_rsa_validate_params_6
   \       0xC6   0x4641             MOV      R1,R8
   \       0xC8   0x4630             MOV      R0,R6
   \       0xCA   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \       0xCE   0x2800             CMP      R0,#+0
   \       0xD0   0xD505             BPL.N    ??mbedtls_rsa_validate_params_6
   \       0xD2   0x4641             MOV      R1,R8
   \       0xD4   0x4638             MOV      R0,R7
   \       0xD6   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \       0xDA   0x2800             CMP      R0,#+0
   \       0xDC   0xD402             BMI.N    ??mbedtls_rsa_validate_params_5
    397                  {
    398                      ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
   \                     ??mbedtls_rsa_validate_params_6: (+1)
   \       0xDE   0x....'....        LDR.W    R9,??DataTable2_1  ;; 0xffffbe00
    399                      goto cleanup;
   \       0xE2   0xE067             B.N      ??mbedtls_rsa_validate_params_1
    400                  }
    401              }
    402          
    403              /*
    404               * Step 4: Check that D, E are inverse modulo P-1 and Q-1
    405               */
    406          
    407              if( P != NULL && Q != NULL && D != NULL && E != NULL )
   \                     ??mbedtls_rsa_validate_params_5: (+1)
   \       0xE4   0x2D00             CMP      R5,#+0
   \       0xE6   0xD065             BEQ.N    ??mbedtls_rsa_validate_params_1
   \       0xE8   0x2C00             CMP      R4,#+0
   \       0xEA   0xD063             BEQ.N    ??mbedtls_rsa_validate_params_1
   \       0xEC   0x2E00             CMP      R6,#+0
   \       0xEE   0xD061             BEQ.N    ??mbedtls_rsa_validate_params_1
   \       0xF0   0x2F00             CMP      R7,#+0
   \       0xF2   0xD05F             BEQ.N    ??mbedtls_rsa_validate_params_1
    408              {
    409                  if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
    410                      mbedtls_mpi_cmp_int( Q, 1 ) <= 0 )
   \       0xF4   0x2101             MOVS     R1,#+1
   \       0xF6   0x4628             MOV      R0,R5
   \       0xF8   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0xFC   0x2801             CMP      R0,#+1
   \       0xFE   0xDB05             BLT.N    ??mbedtls_rsa_validate_params_7
   \      0x100   0x2101             MOVS     R1,#+1
   \      0x102   0x4620             MOV      R0,R4
   \      0x104   0x....'....        BL       mbedtls_mpi_cmp_int
   \      0x108   0x2801             CMP      R0,#+1
   \      0x10A   0xDA02             BGE.N    ??mbedtls_rsa_validate_params_8
    411                  {
    412                      ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
   \                     ??mbedtls_rsa_validate_params_7: (+1)
   \      0x10C   0x....'....        LDR.W    R9,??DataTable2_1  ;; 0xffffbe00
    413                      goto cleanup;
   \      0x110   0xE050             B.N      ??mbedtls_rsa_validate_params_1
    414                  }
    415          
    416                  /* Compute DE-1 mod P-1 */
    417                  MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, D, E ) );
   \                     ??mbedtls_rsa_validate_params_8: (+1)
   \      0x112   0x463A             MOV      R2,R7
   \      0x114   0x4631             MOV      R1,R6
   \      0x116   0x4668             MOV      R0,SP
   \      0x118   0x....'....        BL       mbedtls_mpi_mul_mpi
   \      0x11C   0x4681             MOV      R9,R0
   \      0x11E   0x2800             CMP      R0,#+0
   \      0x120   0xD148             BNE.N    ??mbedtls_rsa_validate_params_1
    418                  MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
   \      0x122   0x2201             MOVS     R2,#+1
   \      0x124   0x4669             MOV      R1,SP
   \      0x126   0x4668             MOV      R0,SP
   \      0x128   0x....'....        BL       mbedtls_mpi_sub_int
   \      0x12C   0x4681             MOV      R9,R0
   \      0x12E   0x2800             CMP      R0,#+0
   \      0x130   0xD140             BNE.N    ??mbedtls_rsa_validate_params_1
    419                  MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, P, 1 ) );
   \      0x132   0x2201             MOVS     R2,#+1
   \      0x134   0x4629             MOV      R1,R5
   \      0x136   0xA803             ADD      R0,SP,#+12
   \      0x138   0x....'....        BL       mbedtls_mpi_sub_int
   \      0x13C   0x4681             MOV      R9,R0
   \      0x13E   0x2800             CMP      R0,#+0
   \      0x140   0xD138             BNE.N    ??mbedtls_rsa_validate_params_1
    420                  MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
   \      0x142   0xAA03             ADD      R2,SP,#+12
   \      0x144   0x4669             MOV      R1,SP
   \      0x146   0x4668             MOV      R0,SP
   \      0x148   0x....'....        BL       mbedtls_mpi_mod_mpi
   \      0x14C   0x4681             MOV      R9,R0
   \      0x14E   0x2800             CMP      R0,#+0
   \      0x150   0xD130             BNE.N    ??mbedtls_rsa_validate_params_1
    421                  if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
   \      0x152   0x2100             MOVS     R1,#+0
   \      0x154   0x4668             MOV      R0,SP
   \      0x156   0x....'....        BL       mbedtls_mpi_cmp_int
   \      0x15A   0x2800             CMP      R0,#+0
   \      0x15C   0xD002             BEQ.N    ??mbedtls_rsa_validate_params_9
    422                  {
    423                      ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
   \      0x15E   0x....'....        LDR.W    R9,??DataTable2_1  ;; 0xffffbe00
    424                      goto cleanup;
   \      0x162   0xE027             B.N      ??mbedtls_rsa_validate_params_1
    425                  }
    426          
    427                  /* Compute DE-1 mod Q-1 */
    428                  MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, D, E ) );
   \                     ??mbedtls_rsa_validate_params_9: (+1)
   \      0x164   0x463A             MOV      R2,R7
   \      0x166   0x4631             MOV      R1,R6
   \      0x168   0x4668             MOV      R0,SP
   \      0x16A   0x....'....        BL       mbedtls_mpi_mul_mpi
   \      0x16E   0x4681             MOV      R9,R0
   \      0x170   0x2800             CMP      R0,#+0
   \      0x172   0xD11F             BNE.N    ??mbedtls_rsa_validate_params_1
    429                  MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
   \      0x174   0x2201             MOVS     R2,#+1
   \      0x176   0x4669             MOV      R1,SP
   \      0x178   0x4668             MOV      R0,SP
   \      0x17A   0x....'....        BL       mbedtls_mpi_sub_int
   \      0x17E   0x4681             MOV      R9,R0
   \      0x180   0x2800             CMP      R0,#+0
   \      0x182   0xD117             BNE.N    ??mbedtls_rsa_validate_params_1
    430                  MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
   \      0x184   0x2201             MOVS     R2,#+1
   \      0x186   0x4621             MOV      R1,R4
   \      0x188   0xA803             ADD      R0,SP,#+12
   \      0x18A   0x....'....        BL       mbedtls_mpi_sub_int
   \      0x18E   0x4681             MOV      R9,R0
   \      0x190   0x2800             CMP      R0,#+0
   \      0x192   0xD10F             BNE.N    ??mbedtls_rsa_validate_params_1
    431                  MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
   \      0x194   0xAA03             ADD      R2,SP,#+12
   \      0x196   0x4669             MOV      R1,SP
   \      0x198   0x4668             MOV      R0,SP
   \      0x19A   0x....'....        BL       mbedtls_mpi_mod_mpi
   \      0x19E   0x4681             MOV      R9,R0
   \      0x1A0   0x2800             CMP      R0,#+0
   \      0x1A2   0xD107             BNE.N    ??mbedtls_rsa_validate_params_1
    432                  if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
   \      0x1A4   0x2100             MOVS     R1,#+0
   \      0x1A6   0x4668             MOV      R0,SP
   \      0x1A8   0x....'....        BL       mbedtls_mpi_cmp_int
   \      0x1AC   0x2800             CMP      R0,#+0
   \      0x1AE   0xD001             BEQ.N    ??mbedtls_rsa_validate_params_1
    433                  {
    434                      ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
   \      0x1B0   0x....'....        LDR.W    R9,??DataTable2_1  ;; 0xffffbe00
    435                      goto cleanup;
    436                  }
    437              }
    438          
    439          cleanup:
    440          
    441              mbedtls_mpi_free( &K );
   \                     ??mbedtls_rsa_validate_params_1: (+1)
   \      0x1B4   0x4668             MOV      R0,SP
   \      0x1B6   0x....'....        BL       mbedtls_mpi_free
    442              mbedtls_mpi_free( &L );
   \      0x1BA   0xA803             ADD      R0,SP,#+12
   \      0x1BC   0x....'....        BL       mbedtls_mpi_free
    443          
    444              /* Wrap MPI error codes by RSA check failure error code */
    445              if( ret != 0 && ret != MBEDTLS_ERR_RSA_KEY_CHECK_FAILED )
   \      0x1C0   0xF1B9 0x0F00      CMP      R9,#+0
   \      0x1C4   0xD004             BEQ.N    ??mbedtls_rsa_validate_params_10
   \      0x1C6   0xF519 0x4F84      CMN      R9,#+16896
   \      0x1CA   0xD001             BEQ.N    ??mbedtls_rsa_validate_params_10
    446              {
    447                  ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
   \      0x1CC   0xF5A9 0x4984      SUB      R9,R9,#+16896
    448              }
    449          
    450              return( ret );
   \                     ??mbedtls_rsa_validate_params_10: (+1)
   \      0x1D0   0x4648             MOV      R0,R9
   \      0x1D2   0xB006             ADD      SP,SP,#+24
   \      0x1D4   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    451          }
    452          

   \                                 In section .text, align 2, keep-with-next
    453          int mbedtls_rsa_deduce_crt( const mbedtls_mpi *P, const mbedtls_mpi *Q,
    454                                      const mbedtls_mpi *D, mbedtls_mpi *DP,
    455                                      mbedtls_mpi *DQ, mbedtls_mpi *QP )
    456          {
   \                     mbedtls_rsa_deduce_crt: (+1)
   \        0x0   0xE92D 0x41FF      PUSH     {R0-R8,LR}
   \        0x4   0x4606             MOV      R6,R0
   \        0x6   0x460F             MOV      R7,R1
   \        0x8   0x4690             MOV      R8,R2
   \        0xA   0x461D             MOV      R5,R3
    457              int ret = 0;
   \        0xC   0x2400             MOVS     R4,#+0
    458              mbedtls_mpi K;
    459              mbedtls_mpi_init( &K );
   \        0xE   0x4668             MOV      R0,SP
   \       0x10   0x....'....        BL       mbedtls_mpi_init
    460          
    461              /* DP = D mod P-1 */
    462              if( DP != NULL )
   \       0x14   0x2D00             CMP      R5,#+0
   \       0x16   0xD00D             BEQ.N    ??mbedtls_rsa_deduce_crt_0
    463              {
    464                  MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1  ) );
   \       0x18   0x2201             MOVS     R2,#+1
   \       0x1A   0x4631             MOV      R1,R6
   \       0x1C   0x4668             MOV      R0,SP
   \       0x1E   0x....'....        BL       mbedtls_mpi_sub_int
   \       0x22   0x0004             MOVS     R4,R0
   \       0x24   0xD11F             BNE.N    ??mbedtls_rsa_deduce_crt_1
    465                  MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DP, D, &K ) );
   \       0x26   0x466A             MOV      R2,SP
   \       0x28   0x4641             MOV      R1,R8
   \       0x2A   0x4628             MOV      R0,R5
   \       0x2C   0x....'....        BL       mbedtls_mpi_mod_mpi
   \       0x30   0x0004             MOVS     R4,R0
   \       0x32   0xD118             BNE.N    ??mbedtls_rsa_deduce_crt_1
   \                     ??mbedtls_rsa_deduce_crt_0: (+1)
   \       0x34   0x9D0A             LDR      R5,[SP, #+40]
    466              }
    467          
    468              /* DQ = D mod Q-1 */
    469              if( DQ != NULL )
   \       0x36   0x2D00             CMP      R5,#+0
   \       0x38   0xD00D             BEQ.N    ??mbedtls_rsa_deduce_crt_2
    470              {
    471                  MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1  ) );
   \       0x3A   0x2201             MOVS     R2,#+1
   \       0x3C   0x4639             MOV      R1,R7
   \       0x3E   0x4668             MOV      R0,SP
   \       0x40   0x....'....        BL       mbedtls_mpi_sub_int
   \       0x44   0x0004             MOVS     R4,R0
   \       0x46   0xD10E             BNE.N    ??mbedtls_rsa_deduce_crt_1
    472                  MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DQ, D, &K ) );
   \       0x48   0x466A             MOV      R2,SP
   \       0x4A   0x4641             MOV      R1,R8
   \       0x4C   0x4628             MOV      R0,R5
   \       0x4E   0x....'....        BL       mbedtls_mpi_mod_mpi
   \       0x52   0x0004             MOVS     R4,R0
   \       0x54   0xD107             BNE.N    ??mbedtls_rsa_deduce_crt_1
   \                     ??mbedtls_rsa_deduce_crt_2: (+1)
   \       0x56   0x980B             LDR      R0,[SP, #+44]
    473              }
    474          
    475              /* QP = Q^{-1} mod P */
    476              if( QP != NULL )
   \       0x58   0x2800             CMP      R0,#+0
   \       0x5A   0xD004             BEQ.N    ??mbedtls_rsa_deduce_crt_1
    477              {
    478                  MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( QP, Q, P ) );
   \       0x5C   0x4632             MOV      R2,R6
   \       0x5E   0x4639             MOV      R1,R7
   \       0x60   0x....'....        BL       mbedtls_mpi_inv_mod
   \       0x64   0x4604             MOV      R4,R0
    479              }
    480          
    481          cleanup:
    482              mbedtls_mpi_free( &K );
   \                     ??mbedtls_rsa_deduce_crt_1: (+1)
   \       0x66   0x4668             MOV      R0,SP
   \       0x68   0x....'....        BL       mbedtls_mpi_free
    483          
    484              return( ret );
   \       0x6C   0x4620             MOV      R0,R4
   \       0x6E   0xB004             ADD      SP,SP,#+16
   \       0x70   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    485          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \        0x0   0x....'....        DC32     `mbedtls_rsa_deduce_primes::primes`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \        0x0   0xFFFF'BE00        DC32     0xffffbe00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \        0x0   0xFFFF'BF80        DC32     0xffffbf80
    486          
    487          #endif /* MBEDTLS_RSA_C */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      40   mbedtls_rsa_deduce_crt
        40   -> mbedtls_mpi_free
        40   -> mbedtls_mpi_init
        40   -> mbedtls_mpi_inv_mod
        40   -> mbedtls_mpi_mod_mpi
        40   -> mbedtls_mpi_sub_int
      64   mbedtls_rsa_deduce_primes
        64   -> mbedtls_mpi_add_int
        64   -> mbedtls_mpi_cmp_int
        64   -> mbedtls_mpi_cmp_mpi
        64   -> mbedtls_mpi_div_mpi
        64   -> mbedtls_mpi_exp_mod
        64   -> mbedtls_mpi_free
        64   -> mbedtls_mpi_gcd
        64   -> mbedtls_mpi_init
        64   -> mbedtls_mpi_lsb
        64   -> mbedtls_mpi_lset
        64   -> mbedtls_mpi_mod_mpi
        64   -> mbedtls_mpi_mul_mpi
        64   -> mbedtls_mpi_shift_r
        64   -> mbedtls_mpi_sub_int
      48   mbedtls_rsa_deduce_private_exponent
        48   -> mbedtls_mpi_cmp_int
        48   -> mbedtls_mpi_div_mpi
        48   -> mbedtls_mpi_free
        48   -> mbedtls_mpi_gcd
        48   -> mbedtls_mpi_init
        48   -> mbedtls_mpi_inv_mod
        48   -> mbedtls_mpi_mul_mpi
        48   -> mbedtls_mpi_sub_int
      48   mbedtls_rsa_validate_crt
        48   -> mbedtls_mpi_cmp_int
        48   -> mbedtls_mpi_free
        48   -> mbedtls_mpi_init
        48   -> mbedtls_mpi_mod_mpi
        48   -> mbedtls_mpi_mul_mpi
        48   -> mbedtls_mpi_sub_int
        48   -> mbedtls_mpi_sub_mpi
      56   mbedtls_rsa_validate_params
        56   -> mbedtls_mpi_cmp_int
        56   -> mbedtls_mpi_cmp_mpi
        56   -> mbedtls_mpi_free
        56   -> mbedtls_mpi_init
        56   -> mbedtls_mpi_is_prime
        56   -> mbedtls_mpi_mod_mpi
        56   -> mbedtls_mpi_mul_mpi
        56   -> mbedtls_mpi_sub_int


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
     116  mbedtls_rsa_deduce_crt
     452  mbedtls_rsa_deduce_primes
     182  mbedtls_rsa_deduce_private_exponent
     274  mbedtls_rsa_validate_crt
     472  mbedtls_rsa_validate_params
      56  primes

 
    56 bytes in section .rodata
 1 508 bytes in section .text
 
 1 508 bytes of CODE  memory
    56 bytes of CONST memory

Errors: none
Warnings: none
