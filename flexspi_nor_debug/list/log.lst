###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.3.193/W32 for ARM         11/Jun/2019  10:53:23
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  C:\Development\smart_washing_machine_3080\source\log.c
#    Command line =  
#        -f C:\Users\nxf42695\AppData\Local\Temp\1\EW153E.tmp
#        (C:\Development\smart_washing_machine_3080\source\log.c -D DEBUG -D
#        USE_RTOS -D XIP_EXTERNAL_FLASH=1 -D XIP_BOOT_HEADER_ENABLE=1 -D
#        CPU_MIMXRT1052DVL6B -D FSL_RTOS_FREE_RTOS -D PRINTF_ADVANCED_ENABLE -D
#        "MBEDTLS_CONFIG_FILE=\"ksdk_mbedtls_config.h\"" -lC
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list -lA
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list
#        --diag_suppress Pa082,Pa050 -o
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_d16 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" --preinclude
#        C:\Development\smart_washing_machine_3080/source\app_preinclude.h -I
#        C:\Development\smart_washing_machine_3080/board\ -I
#        C:\Development\smart_washing_machine_3080/source\ -I
#        C:\Development\smart_washing_machine_3080/CMSIS\ -I
#        C:\Development\smart_washing_machine_3080/amazon-freertos/freertos/portable\
#        -I C:\Development\smart_washing_machine_3080/amazon-freertos/include\
#        -I C:\Development\smart_washing_machine_3080/component/lists\ -I
#        C:\Development\smart_washing_machine_3080/component/serial_manager\ -I
#        C:\Development\smart_washing_machine_3080/component/uart\ -I
#        C:\Development\smart_washing_machine_3080/component/kv\ -I
#        C:\Development\smart_washing_machine_3080/component/kv/include\ -I
#        C:\Development\smart_washing_machine_3080/device\ -I
#        C:\Development\smart_washing_machine_3080/doc\ -I
#        C:\Development\smart_washing_machine_3080/drivers\ -I
#        C:\Development\smart_washing_machine_3080/src\ -I
#        C:\Development\smart_washing_machine_3080/startup\ -I
#        C:\Development\smart_washing_machine_3080/utilities\ -I
#        C:\Development\smart_washing_machine_3080/xip\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\atm\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_model\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_sign\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\infra\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\mqtt\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\external_libs\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\coap_cloud\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\CoAPPacket\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\server\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\os\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\awss_reset\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\mbedtls\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\ -I
#        C:\Development\smart_washing_machine_3080\mbedtls\port\ksdk\ -Om)
#    Locale       =  C
#    List file    =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list\log.lst
#    Object file  =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj\log.o
#
###############################################################################

C:\Development\smart_washing_machine_3080\source\log.c
      1          #include <stdarg.h>
      2          #include "board.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void __NVIC_EnableIRQ(IRQn_Type)
   \                     __NVIC_EnableIRQ: (+1)
   \        0x0   0x0001             MOVS     R1,R0
   \        0x2   0xD407             BMI.N    ??__NVIC_EnableIRQ_0
   \        0x4   0x2201             MOVS     R2,#+1
   \        0x6   0xF000 0x011F      AND      R1,R0,#0x1F
   \        0xA   0x408A             LSLS     R2,R2,R1
   \        0xC   0x....             LDR.N    R1,??DataTable7  ;; 0xe000e100
   \        0xE   0x0940             LSRS     R0,R0,#+5
   \       0x10   0xF841 0x2020      STR      R2,[R1, R0, LSL #+2]
   \                     ??__NVIC_EnableIRQ_0: (+1)
   \       0x14   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void __NVIC_SetPriority(IRQn_Type, uint32_t)
   \                     __NVIC_SetPriority: (+1)
   \        0x0   0x0002             MOVS     R2,R0
   \        0x2   0xD403             BMI.N    ??__NVIC_SetPriority_0
   \        0x4   0x0109             LSLS     R1,R1,#+4
   \        0x6   0x....             LDR.N    R2,??DataTable7_1  ;; 0xe000e400
   \        0x8   0x5411             STRB     R1,[R2, R0]
   \        0xA   0x4770             BX       LR
   \                     ??__NVIC_SetPriority_0: (+1)
   \        0xC   0x0109             LSLS     R1,R1,#+4
   \        0xE   0x....             LDR.N    R2,??DataTable7_2  ;; 0xe000ed18
   \       0x10   0xF000 0x000F      AND      R0,R0,#0xF
   \       0x14   0x4410             ADD      R0,R2,R0
   \       0x16   0xF800 0x1C04      STRB     R1,[R0, #-4]
   \       0x1A   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp int32_t EnableIRQ(IRQn_Type)
   \                     EnableIRQ: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   \        0x2   0x4601             MOV      R1,R0
   \        0x4   0xF06F 0x027F      MVN      R2,#+127
   \        0x8   0x4291             CMP      R1,R2
   \        0xA   0xD101             BNE.N    ??EnableIRQ_0
   \        0xC   0x2001             MOVS     R0,#+1
   \        0xE   0xBD02             POP      {R1,PC}
   \                     ??EnableIRQ_0: (+1)
   \       0x10   0x....'....        BL       __NVIC_EnableIRQ
   \       0x14   0x2000             MOVS     R0,#+0
   \       0x16   0xBD02             POP      {R1,PC}          ;; return
      3          #include "fsl_lpuart.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void LPUART_WriteByte(LPUART_Type *, uint8_t)
   \                     LPUART_WriteByte: (+1)
   \        0x0   0x61C1             STR      R1,[R0, #+28]
   \        0x2   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp uint8_t LPUART_ReadByte(LPUART_Type *)
   \                     LPUART_ReadByte: (+1)
   \        0x0   0x6982             LDR      R2,[R0, #+24]
   \        0x2   0x0511             LSLS     R1,R2,#+20
   \        0x4   0xD404             BMI.N    ??LPUART_ReadByte_0
   \        0x6   0xF640 0x0112      MOVW     R1,#+2066
   \        0xA   0x400A             ANDS     R2,R1,R2
   \        0xC   0x2A02             CMP      R2,#+2
   \        0xE   0xD101             BNE.N    ??LPUART_ReadByte_1
   \                     ??LPUART_ReadByte_0: (+1)
   \       0x10   0x2101             MOVS     R1,#+1
   \       0x12   0xE000             B.N      ??LPUART_ReadByte_2
   \                     ??LPUART_ReadByte_1: (+1)
   \       0x14   0x2100             MOVS     R1,#+0
   \                     ??LPUART_ReadByte_2: (+1)
   \       0x16   0x2900             CMP      R1,#+0
   \       0x18   0x69C0             LDR      R0,[R0, #+28]
   \       0x1A   0xD002             BEQ.N    ??LPUART_ReadByte_3
   \       0x1C   0xF000 0x007F      AND      R0,R0,#0x7F
   \       0x20   0x4770             BX       LR
   \                     ??LPUART_ReadByte_3: (+1)
   \       0x22   0xB2C0             UXTB     R0,R0
   \       0x24   0x4770             BX       LR               ;; return
      4          
      5          #include "pin_mux.h"
      6          #include "clock_config.h"
      7          #include "FreeRTOS.h"
      8          #include "task.h"
      9          #include "semphr.h"
     10          #include "queue.h"
     11          #include "timers.h"
     12          #include "portmacro.h"
     13          #define			HEX_OUTPUT			16
     14          #define			DECIMAL_OUTPUT		10
     15          #define			OCTAL_OUTPUT		8

   \                                 In section .bss, align 4
     16          TaskHandle_t log_task_handle = NULL;
   \                     log_task_handle:
   \        0x0                      DS8 4
     17          #define HexToAscii(hex) (uint8_t)( ((hex) & 0x0F) + ((((hex) & 0x0F) <= 9) ? '0' : ('A'-10)) )

   \                                 In section .bss, align 4
     18          QueueHandle_t log_mutex;
   \                     log_mutex:
   \        0x0                      DS8 4
     19          
     20          #define PTR_MASK			0x1ff

   \                                 In section .bss, align 4
     21          static char printf_buffer[512];
   \                     printf_buffer:
   \        0x0                      DS8 512

   \                                 In section .bss, align 2
     22          static uint16_t	printf_w_ptr = 0;
   \                     printf_w_ptr:
   \        0x0                      DS8 2

   \                                 In section .bss, align 2
     23          static uint16_t	printf_r_ptr = 0;
   \                     printf_r_ptr:
   \        0x0                      DS8 2
     24          
     25          static char rec_buffer[128];
     26          static char rng_buffer[128];
     27          

   \                                 In section .bss, align 4
     28          static char rx_buffer[256];
   \                     rx_buffer:
   \        0x0                      DS8 256

   \                                 In section .bss, align 1
     29          static uint8_t rx_r_ptr = 0;
   \                     rx_r_ptr:
   \        0x0                      DS8 1

   \                                 In section .bss, align 1
     30          static uint8_t rx_w_ptr = 0;
   \                     rx_w_ptr:
   \        0x0                      DS8 1
     31          
     32          static const char prefix[] = "";
     33          static const char infix[] = "";
     34          static const char changeLine[]="\r\n";
     35          static void puts(char *s){
     36          
     37          	unsigned int i=0;
                 	             ^
Warning[Pe177]: variable "i" was declared but never referenced
     38          	while((*s != '\0')){
     39          		printf_buffer[printf_w_ptr++ & PTR_MASK] = *s++;
     40          	}
     41          }
     42          
     43          static void putchar(char c){
     44          	printf_buffer[printf_w_ptr++ & PTR_MASK] = c;
     45          }
     46          
     47          static void puti(int num, int base){
     48          	char re[]="0123456789ABCDEF";
     49          
     50          	char buf[50];
     51          
     52          	char *addr = &buf[49];
     53          
     54          	*addr = '\0';
     55          
     56          	do{
     57          		*--addr = re[num%base];
     58          		num/=base;
     59          	}while(num!=0);
     60          
     61          	puts(addr);
     62          }
     63          
     64          

   \                                 In section .text, align 2, keep-with-next
     65          static void DbgConsole_PrintCallback(char *buf, int32_t *indicator, char dbgVal, int len)
     66          {
   \                     DbgConsole_PrintCallback: (+1)
   \        0x0   0xB5F0             PUSH     {R4-R7,LR}
     67              int i = 0;
   \        0x2   0x2400             MOVS     R4,#+0
     68          
     69              for (i = 0; i < len; i++)
   \        0x4   0x....'....        LDR.W    R12,??DataTable7_3
   \        0x8   0xE016             B.N      ??DbgConsole_PrintCallback_0
     70              {
     71                  if (((uint32_t)*indicator + 1UL) >= 128)
     72                  {
     73          			int j=0;
     74          			while(i<(uint32_t)(*indicator)){
     75          				printf_buffer[printf_w_ptr++ & PTR_MASK] = buf[j++];
   \                     ??DbgConsole_PrintCallback_1: (+1)
   \        0xA   0x....             LDR.N    R6,??DataTable7_4
   \        0xC   0x5D47             LDRB     R7,[R0, R5]
   \        0xE   0xF8B6 0xE000      LDRH     LR,[R6, #+0]
   \       0x12   0xF3CE 0x0E08      UBFX     LR,LR,#+0,#+9
   \       0x16   0xF80C 0x700E      STRB     R7,[R12, LR]
   \       0x1A   0x1C6D             ADDS     R5,R5,#+1
   \       0x1C   0x8837             LDRH     R7,[R6, #+0]
   \       0x1E   0x1C7F             ADDS     R7,R7,#+1
   \       0x20   0x8037             STRH     R7,[R6, #+0]
     76          			}
   \                     ??DbgConsole_PrintCallback_2: (+1)
   \       0x22   0x680E             LDR      R6,[R1, #+0]
   \       0x24   0x42B4             CMP      R4,R6
   \       0x26   0xD3F0             BCC.N    ??DbgConsole_PrintCallback_1
     77                      *indicator = 0;
   \       0x28   0x2500             MOVS     R5,#+0
   \       0x2A   0x600D             STR      R5,[R1, #+0]
     78                  }
     79          
     80                  buf[*indicator] = dbgVal;
   \                     ??DbgConsole_PrintCallback_3: (+1)
   \       0x2C   0x680D             LDR      R5,[R1, #+0]
   \       0x2E   0x5542             STRB     R2,[R0, R5]
     81                  (*indicator)++;
   \       0x30   0x680D             LDR      R5,[R1, #+0]
   \       0x32   0x1C6D             ADDS     R5,R5,#+1
   \       0x34   0x600D             STR      R5,[R1, #+0]
   \       0x36   0x1C64             ADDS     R4,R4,#+1
   \                     ??DbgConsole_PrintCallback_0: (+1)
   \       0x38   0x429C             CMP      R4,R3
   \       0x3A   0xDA05             BGE.N    ??DbgConsole_PrintCallback_4
   \       0x3C   0x680D             LDR      R5,[R1, #+0]
   \       0x3E   0x1C6D             ADDS     R5,R5,#+1
   \       0x40   0x2D80             CMP      R5,#+128
   \       0x42   0xD3F3             BCC.N    ??DbgConsole_PrintCallback_3
   \       0x44   0x2500             MOVS     R5,#+0
   \       0x46   0xE7EC             B.N      ??DbgConsole_PrintCallback_2
     82              }
     83          }
   \                     ??DbgConsole_PrintCallback_4: (+1)
   \       0x48   0xBDF0             POP      {R4-R7,PC}       ;; return
     84          #if 0
     85          #include "fsl_lpuart_freertos.h"
     86          static lpuart_rtos_handle_t lhandle;
     87          static struct _lpuart_handle lt_handle;
     88          static uint8_t lbackground_buffer[512];
     89          static uint8_t receive_buffer[64];
     90          #endif
     91          
     92          #if 1

   \                                 In section .text, align 2, keep-with-next
     93          void HAL_Printf(const char *formatString, ...)
     94          #else
     95          int format_printf(const char *formatString, ...)
     96          #endif
     97          {
   \                     HAL_Printf: (+1)
   \        0x0   0xB40E             PUSH     {R1-R3}
   \        0x2   0xB578             PUSH     {R3-R6,LR}
   \        0x4   0xB0A0             SUB      SP,SP,#+128
   \        0x6   0x4605             MOV      R5,R0
     98          #if 0
     99            va_list ap;
    100              int logLength = 0, dbgResult = 0;
    101              char printBuf[128] = {0};
    102          
    103          
    104              va_start(ap, formatString);
    105          
    106              /* format print log first */
    107              logLength = StrFormatPrintf(formatString, ap, printBuf, DbgConsole_PrintCallback);
    108              /* print log */
    109          	int i=0;
    110          	while(i<logLength){
    111          		printf_buffer[printf_w_ptr++ & PTR_MASK] = printBuf[i++];
    112          	}
    113              va_end(ap);
    114              LOG_LPUART_RTOS_Send(&lhandle, (uint8_t *)printf_buffer + printf_r_ptr, printf_w_ptr - printf_r_ptr ,1000/portTICK_PERIOD_MS);
    115          #else
    116              va_list ap;
    117              int logLength = 0, dbgResult = 0;
    118              char printBuf[128] = {0};
   \        0x8   0x4668             MOV      R0,SP
   \        0xA   0x2180             MOVS     R1,#+128
   \        0xC   0x....'....        BL       __aeabi_memclr4
    119          
    120          
    121              va_start(ap, formatString);
   \       0x10   0xAE25             ADD      R6,SP,#+148
    122          	xSemaphoreTake(log_mutex, 0xffffffff);
   \       0x12   0x....             LDR.N    R4,??DataTable7_5
   \       0x14   0xF04F 0x31FF      MOV      R1,#-1
   \       0x18   0x6820             LDR      R0,[R4, #+0]
   \       0x1A   0x....'....        BL       xQueueSemaphoreTake
    123              /* format print log first */
    124              logLength = StrFormatPrintf(formatString, ap, printBuf, DbgConsole_PrintCallback);
                                 ^
Warning[Pe223]: function "StrFormatPrintf" declared implicitly

      int logLength = 0, dbgResult = 0;
                         ^
"C:\Development\smart_washing_machine_3080\source\log.c",117  Warning[Pe177]: 
          variable "dbgResult" was declared but never referenced
   \       0x1E   0x....             LDR.N    R3,??DataTable7_6
   \       0x20   0x466A             MOV      R2,SP
   \       0x22   0x4631             MOV      R1,R6
   \       0x24   0x4628             MOV      R0,R5
   \       0x26   0x....'....        BL       StrFormatPrintf
    125              /* print log */
    126          	int i=0;
   \       0x2A   0x2100             MOVS     R1,#+0
   \       0x2C   0x....             LDR.N    R2,??DataTable7_4
   \       0x2E   0x....             LDR.N    R5,??DataTable7_3
   \       0x30   0xE009             B.N      ??HAL_Printf_0
    127          	while(i<logLength){
    128          		printf_buffer[printf_w_ptr++ & PTR_MASK] = printBuf[i++];
   \                     ??HAL_Printf_1: (+1)
   \       0x32   0x466B             MOV      R3,SP
   \       0x34   0x5C5B             LDRB     R3,[R3, R1]
   \       0x36   0x8816             LDRH     R6,[R2, #+0]
   \       0x38   0xF3C6 0x0608      UBFX     R6,R6,#+0,#+9
   \       0x3C   0x55AB             STRB     R3,[R5, R6]
   \       0x3E   0x1C49             ADDS     R1,R1,#+1
   \       0x40   0x8813             LDRH     R3,[R2, #+0]
   \       0x42   0x1C5B             ADDS     R3,R3,#+1
   \       0x44   0x8013             STRH     R3,[R2, #+0]
    129          	}
   \                     ??HAL_Printf_0: (+1)
   \       0x46   0x4281             CMP      R1,R0
   \       0x48   0xDBF3             BLT.N    ??HAL_Printf_1
    130          	xSemaphoreGive(log_mutex);
   \       0x4A   0x2300             MOVS     R3,#+0
   \       0x4C   0x461A             MOV      R2,R3
   \       0x4E   0x4611             MOV      R1,R2
   \       0x50   0x6820             LDR      R0,[R4, #+0]
   \       0x52   0x....'....        BL       xQueueGenericSend
    131              va_end(ap);
    132          	//vTaskResume(log_task_handle);
    133          #endif     
    134          #if 0
    135              return dbgResult;
    136          #endif
    137          }
   \       0x56   0xB021             ADD      SP,SP,#+132
   \       0x58   0xBC70             POP      {R4-R6}
   \       0x5A   0xF85D 0xFB10      LDR      PC,[SP], #+16    ;; return
    138          

   \                                 In section .text, align 2, keep-with-next
    139          void log_task(void *arg){
   \                     log_task: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
    140            
    141          
    142          	xSemaphoreTake(log_mutex, 0xffffffff);
   \        0x2   0x....             LDR.N    R4,??DataTable7_5
   \        0x4   0xF04F 0x31FF      MOV      R1,#-1
   \        0x8   0x6820             LDR      R0,[R4, #+0]
   \        0xA   0x....'....        BL       xQueueSemaphoreTake
   \        0xE   0x....             LDR.N    R5,??DataTable7_7  ;; 0x40184000
   \       0x10   0xE00E             B.N      ??log_task_0
    143          	while(printf_w_ptr != printf_r_ptr){
    144          #if 1
    145          		 
    146                   LPUART_WriteByte(LPUART1, printf_buffer[printf_r_ptr++ & PTR_MASK]);
   \                     ??log_task_1: (+1)
   \       0x12   0x4611             MOV      R1,R2
   \       0x14   0x1C4A             ADDS     R2,R1,#+1
   \       0x16   0x8002             STRH     R2,[R0, #+0]
   \       0x18   0x....             LDR.N    R0,??DataTable7_3
   \       0x1A   0xF3C1 0x0108      UBFX     R1,R1,#+0,#+9
   \       0x1E   0x5C41             LDRB     R1,[R0, R1]
   \       0x20   0x4628             MOV      R0,R5
   \       0x22   0x....'....        BL       LPUART_WriteByte
    147                          
    148          #else
    149                    LPUART_RTOS_Send(&handle, (uint8_t *)printf_buffer + printf_r_ptr,printf_w_ptr - printf_r_ptr);
    150                    printf_r_ptr = printf_w_ptr;
    151          #endif
    152                    while(!(kLPUART_TxDataRegEmptyFlag & LPUART_GetStatusFlags(LPUART1)));
   \                     ??log_task_2: (+1)
   \       0x26   0x4628             MOV      R0,R5
   \       0x28   0x....'....        BL       LPUART_GetStatusFlags
   \       0x2C   0x0200             LSLS     R0,R0,#+8
   \       0x2E   0xD5FA             BPL.N    ??log_task_2
    153                    
    154          	}
   \                     ??log_task_0: (+1)
   \       0x30   0x....             LDR.N    R0,??DataTable7_8
   \       0x32   0x....             LDR.N    R1,??DataTable7_4
   \       0x34   0x8809             LDRH     R1,[R1, #+0]
   \       0x36   0x8802             LDRH     R2,[R0, #+0]
   \       0x38   0x4291             CMP      R1,R2
   \       0x3A   0xD1EA             BNE.N    ??log_task_1
    155          	xSemaphoreGive(log_mutex);
   \       0x3C   0x2300             MOVS     R3,#+0
   \       0x3E   0x461A             MOV      R2,R3
   \       0x40   0x4611             MOV      R1,R2
   \       0x42   0x6820             LDR      R0,[R4, #+0]
   \       0x44   0xB001             ADD      SP,SP,#+4
   \       0x46   0xE8BD 0x4030      POP      {R4,R5,LR}
   \       0x4A   0x....'....        B.W      xQueueGenericSend
    156          }
    157          

   \                                 In section .text, align 2, keep-with-next
    158          void log_rx(void *args){
   \                     log_rx: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
    159          	if((rx_r_ptr != rx_w_ptr) &&( rx_buffer[rx_w_ptr -1] == '\n')){
   \        0x2   0x....             LDR.N    R4,??DataTable7_9
   \        0x4   0x....             LDR.N    R5,??DataTable7_10
   \        0x6   0x7828             LDRB     R0,[R5, #+0]
   \        0x8   0x7821             LDRB     R1,[R4, #+0]
   \        0xA   0x4288             CMP      R0,R1
   \        0xC   0xD00E             BEQ.N    ??log_rx_0
   \        0xE   0x....             LDR.N    R2,??DataTable7_11
   \       0x10   0x7820             LDRB     R0,[R4, #+0]
   \       0x12   0x4410             ADD      R0,R2,R0
   \       0x14   0xF810 0x0C01      LDRB     R0,[R0, #-1]
   \       0x18   0x280A             CMP      R0,#+10
   \       0x1A   0xD107             BNE.N    ??log_rx_0
    160          		app_process_recive_cmd(rx_buffer + rx_r_ptr, (rx_w_ptr - rx_r_ptr));
                 		^
Warning[Pe223]: function "app_process_recive_cmd" declared implicitly
   \       0x1C   0x7821             LDRB     R1,[R4, #+0]
   \       0x1E   0x7828             LDRB     R0,[R5, #+0]
   \       0x20   0x1A09             SUBS     R1,R1,R0
   \       0x22   0x4410             ADD      R0,R2,R0
   \       0x24   0x....'....        BL       app_process_recive_cmd
    161          		rx_r_ptr = rx_w_ptr;
   \       0x28   0x7820             LDRB     R0,[R4, #+0]
   \       0x2A   0x7028             STRB     R0,[R5, #+0]
    162          	}
    163          
    164          
    165          }
   \                     ??log_rx_0: (+1)
   \       0x2C   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    166          
    167          

   \                                 In section .text, align 2, keep-with-next
    168          static void log_tx_rx_task(void *args){
   \                     log_tx_rx_task: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    169            #if 0
    170                int error;
    171                int n;
    172                do{
    173                  error = LOG_LPUART_RTOS_Receive(&lhandle, receive_buffer, sizeof(receive_buffer), &n,portMAX_DELAY);
    174                  if(n>0){
    175                    
    176                    app_process_recive_cmd(receive_buffer, n);
    177                  }
    178                  
    179                }while(1);
    180            
    181          #else
    182             	//init_done();
    183          	while(1){
    184          #if 1
    185          		
    186          		log_rx(NULL);
   \                     ??log_tx_rx_task_0: (+1)
   \        0x2   0x2000             MOVS     R0,#+0
   \        0x4   0x....'....        BL       log_rx
    187          #else
    188                          int n = 0;
    189                          LPUART_RTOS_Receive(&handle, rec_buffer, sizeof(rec_buffer), &n);
    190                          int i = 0;
    191                          while(n>0){
    192                            rx_buffer[rx_w_ptr++] = rec_buffer[i++];
    193                            n--;
    194                          }
    195                          if(rx_buffer[rx_w_ptr] == '\n'){
    196                            log_rx(NULL);
    197                          }
    198          #endif
    199          		log_task(NULL);
   \        0x8   0x2000             MOVS     R0,#+0
   \        0xA   0x....'....        BL       log_task
    200                          HAL_SleepMs(50);
                                 ^
Warning[Pe223]: function "HAL_SleepMs" declared implicitly
   \        0xE   0x2032             MOVS     R0,#+50
   \       0x10   0x....'....        BL       HAL_SleepMs
   \       0x14   0xE7F5             B.N      ??log_tx_rx_task_0
    201          		//vTaskSuspend(log_task_handle);
    202                          
    203          	}
    204          #endif
    205          }
    206          #if 1

   \                                 In section .text, align 2, keep-with-next
    207          void LPUART1_IRQHandler(void)
    208          {
   \                     LPUART1_IRQHandler: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
    209              char data;
                          ^
Warning[Pe177]: variable "data" was declared but never referenced

  static char rec_buffer[128];
              ^
"C:\Development\smart_washing_machine_3080\source\log.c",25  Warning[Pe177]: 
          variable "rec_buffer" was declared but never referenced

  static char rng_buffer[128];
              ^
"C:\Development\smart_washing_machine_3080\source\log.c",26  Warning[Pe177]: 
          variable "rng_buffer" was declared but never referenced

  static const char prefix[] = "";
                    ^
"C:\Development\smart_washing_machine_3080\source\log.c",32  Warning[Pe177]: 
          variable "prefix" was declared but never referenced

  static const char infix[] = "";
                    ^
"C:\Development\smart_washing_machine_3080\source\log.c",33  Warning[Pe177]: 
          variable "infix" was declared but never referenced

  static const char changeLine[]="\r\n";
                    ^
"C:\Development\smart_washing_machine_3080\source\log.c",34  Warning[Pe177]: 
          variable "changeLine" was declared but never referenced

  static void putchar(char c){
              ^
"C:\Development\smart_washing_machine_3080\source\log.c",43  Warning[Pe177]: 
          function "putchar" was declared but never referenced

  static void puti(int num, int base){
              ^
"C:\Development\smart_washing_machine_3080\source\log.c",47  Warning[Pe177]: 
          function "puti" was declared but never referenced
    210          
    211              /* If new data arrived. */
    212              if ((kLPUART_RxDataRegFullFlag)&LPUART_GetStatusFlags(LPUART1))
   \        0x2   0x....             LDR.N    R4,??DataTable7_7  ;; 0x40184000
   \        0x4   0x4620             MOV      R0,R4
   \        0x6   0x....'....        BL       LPUART_GetStatusFlags
   \        0xA   0x0280             LSLS     R0,R0,#+10
   \        0xC   0xD508             BPL.N    ??LPUART1_IRQHandler_0
    213              {
    214                  rx_buffer[rx_w_ptr++] = LPUART_ReadByte(LPUART1);
   \        0xE   0x....             LDR.N    R0,??DataTable7_9
   \       0x10   0x7805             LDRB     R5,[R0, #+0]
   \       0x12   0x1C69             ADDS     R1,R5,#+1
   \       0x14   0x7001             STRB     R1,[R0, #+0]
   \       0x16   0x4620             MOV      R0,R4
   \       0x18   0x....'....        BL       LPUART_ReadByte
   \       0x1C   0x....             LDR.N    R1,??DataTable7_11
   \       0x1E   0x5548             STRB     R0,[R1, R5]
    215          		 
    216          		
    217              }
    218          }
   \                     ??LPUART1_IRQHandler_0: (+1)
   \       0x20   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    219          #endif
    220          
    221          

   \                                 In section .text, align 2, keep-with-next
    222          void log_init(void ){
   \                     log_init: (+1)
   \        0x0   0xB518             PUSH     {R3,R4,LR}
   \        0x2   0xB085             SUB      SP,SP,#+20
    223          #if 0
    224            xTaskCreate(
    225                            log_tx_rx_task,       /* Function that implements the task. */
    226                            "log_txrx",          /* Text name for the task. */
    227                            1024,      /* Stack size in words, not bytes. */
    228                            NULL,    /* Parameter passed into the task. */
    229                            (4),/* Priority at which the task is created. */
    230                            NULL);      /* Used to pass out the created task's handle. */
    231            lpuart_rtos_config_t lpuart_config = {
    232                .baudrate    = 115200,
    233                .parity      = kLPUART_ParityDisabled,
    234                .stopbits    = kLPUART_OneStopBit,
    235                .buffer      = lbackground_buffer,
    236                .buffer_size = sizeof(lbackground_buffer),
    237            };
    238            lpuart_config.srcclk = BOARD_DebugConsoleSrcFreq();
    239            lpuart_config.base   = LPUART1;
    240            NVIC_SetPriority(LPUART1_IRQn, 5);
    241            LOG_LPUART_RTOS_Init(&lhandle, &lt_handle, &lpuart_config);
    242          #else
    243            BaseType_t xReturned;
    244            log_mutex = xSemaphoreCreateMutex();
   \        0x4   0x2001             MOVS     R0,#+1
   \        0x6   0x....'....        BL       xQueueCreateMutex
   \        0xA   0x....             LDR.N    R1,??DataTable7_5
   \        0xC   0x6008             STR      R0,[R1, #+0]
    245            
    246            /* Create the task, storing the handle. */
    247            xReturned = xTaskCreate(
    248                            log_tx_rx_task,       /* Function that implements the task. */
    249                            "log_txrx",          /* Text name for the task. */
    250                            512,      /* Stack size in words, not bytes. */
    251                            NULL,    /* Parameter passed into the task. */
    252                            (0),/* Priority at which the task is created. */
    253                            &log_task_handle);      /* Used to pass out the created task's handle. */
    254          
    255            if( xReturned != pdPASS )
   \        0xE   0x....             LDR.N    R0,??DataTable7_12
   \       0x10   0x9001             STR      R0,[SP, #+4]
   \       0x12   0x2000             MOVS     R0,#+0
   \       0x14   0x9000             STR      R0,[SP, #+0]
   \       0x16   0x4603             MOV      R3,R0
   \       0x18   0xF44F 0x7200      MOV      R2,#+512
   \       0x1C   0x....             LDR.N    R1,??DataTable7_13
   \       0x1E   0x....             LDR.N    R0,??DataTable7_14
   \       0x20   0x....'....        BL       xTaskCreate
   \       0x24   0x2801             CMP      R0,#+1
   \       0x26   0xD000             BEQ.N    ??log_init_0
    256            {
    257                /* The task was created.  Use the task's handle to delete the task. */
    258                while(1);
   \                     ??log_init_1: (+1)
   \       0x28   0xE7FE             B.N      ??log_init_1
    259            }
    260          #if 0
    261            NVIC_SetPriority(LPUART1_IRQn, 5);
    262            LPUART_RTOS_Init(&handle, &t_handle, &lpuart_config);
    263          #else
    264            lpuart_config_t config;
    265            /*
    266               * config.baudRate_Bps = 115200U;
    267               * config.parityMode = kLPUART_ParityDisabled;
    268               * config.stopBitCount = kLPUART_OneStopBit;
    269               * config.txFifoWatermark = 0;
    270               * config.rxFifoWatermark = 0;
    271               * config.enableTx = false;
    272               * config.enableRx = false;
    273               */
    274              LPUART_GetDefaultConfig(&config);
   \                     ??log_init_0: (+1)
   \       0x2A   0x4668             MOV      R0,SP
   \       0x2C   0x....'....        BL       LPUART_GetDefaultConfig
    275              config.baudRate_Bps = 115200U;
   \       0x30   0xF44F 0x30E1      MOV      R0,#+115200
   \       0x34   0x9000             STR      R0,[SP, #+0]
    276              config.enableTx     = true;
   \       0x36   0x2001             MOVS     R0,#+1
   \       0x38   0xF88D 0x0010      STRB     R0,[SP, #+16]
    277              config.enableRx     = true;
   \       0x3C   0xF88D 0x0011      STRB     R0,[SP, #+17]
    278              LPUART_Init(LPUART1, &config, BOARD_DebugConsoleSrcFreq());
   \       0x40   0x....'....        BL       BOARD_DebugConsoleSrcFreq
   \       0x44   0x....             LDR.N    R4,??DataTable7_7  ;; 0x40184000
   \       0x46   0x4602             MOV      R2,R0
   \       0x48   0x4669             MOV      R1,SP
   \       0x4A   0x4620             MOV      R0,R4
   \       0x4C   0x....'....        BL       LPUART_Init
    279              /* Enable RX interrupt. */
    280              LPUART_EnableInterrupts(LPUART1, kLPUART_RxDataRegFullInterruptEnable);
   \       0x50   0xF44F 0x1100      MOV      R1,#+2097152
   \       0x54   0x4620             MOV      R0,R4
   \       0x56   0x....'....        BL       LPUART_EnableInterrupts
    281              NVIC_SetPriority(LPUART1_IRQn, (1<<__NVIC_PRIO_BITS) - 2);
   \       0x5A   0x210E             MOVS     R1,#+14
   \       0x5C   0x2014             MOVS     R0,#+20
   \       0x5E   0x....'....        BL       __NVIC_SetPriority
    282              EnableIRQ(LPUART1_IRQn);
   \       0x62   0x2014             MOVS     R0,#+20
   \       0x64   0x....'....        BL       EnableIRQ
    283          
    284          	
    285          #endif
    286          #endif
    287          
    288          }
   \       0x68   0xB006             ADD      SP,SP,#+24
   \       0x6A   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \        0x0   0xE000'E100        DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \        0x0   0xE000'E400        DC32     0xe000e400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \        0x0   0xE000'ED18        DC32     0xe000ed18

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \        0x0   0x....'....        DC32     printf_buffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \        0x0   0x....'....        DC32     printf_w_ptr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \        0x0   0x....'....        DC32     log_mutex

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \        0x0   0x....'....        DC32     DbgConsole_PrintCallback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_7:
   \        0x0   0x4018'4000        DC32     0x40184000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_8:
   \        0x0   0x....'....        DC32     printf_r_ptr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_9:
   \        0x0   0x....'....        DC32     rx_w_ptr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_10:
   \        0x0   0x....'....        DC32     rx_r_ptr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_11:
   \        0x0   0x....'....        DC32     rx_buffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_12:
   \        0x0   0x....'....        DC32     log_task_handle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_13:
   \        0x0   0x....'....        DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_14:
   \        0x0   0x....'....        DC32     log_tx_rx_task

   \                                 In section .rodata, align 4
   \        0x0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \       0x17   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \       0x2E   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \       0x45   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \       0x5C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \       0x73   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_1:
   \        0x0   0x6C 0x6F          DC8 "log_txrx"
   \              0x67 0x5F    
   \              0x74 0x78    
   \              0x72 0x78    
   \              0x00         
   \        0x9   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    289          //void app_send_debug_byte(uint8_t ch){
    290          //  while(!(USART_FIFOSTAT_TXEMPTY_MASK & USART_GetStatusFlags(USART0)));
    291          //  USART_WriteByte(USART0,ch); 
    292          //}

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      20   DbgConsole_PrintCallback
       8   EnableIRQ
         8   -> __NVIC_EnableIRQ
     160   HAL_Printf
       160   -> StrFormatPrintf
       160   -> __aeabi_memclr4
       160   -> xQueueGenericSend
       160   -> xQueueSemaphoreTake
      16   LPUART1_IRQHandler
        16   -> LPUART_GetStatusFlags
        16   -> LPUART_ReadByte
       0   LPUART_ReadByte
       0   LPUART_WriteByte
       0   __NVIC_EnableIRQ
       0   __NVIC_SetPriority
      32   log_init
        32   -> BOARD_DebugConsoleSrcFreq
        32   -> EnableIRQ
        32   -> LPUART_EnableInterrupts
        32   -> LPUART_GetDefaultConfig
        32   -> LPUART_Init
        32   -> __NVIC_SetPriority
        32   -> xQueueCreateMutex
        32   -> xTaskCreate
      16   log_rx
        16   -> app_process_recive_cmd
      16   log_task
        16   -> LPUART_GetStatusFlags
        16   -> LPUART_WriteByte
         0   -> xQueueGenericSend
        16   -> xQueueSemaphoreTake
       8   log_tx_rx_task
         8   -> HAL_SleepMs
         8   -> log_rx
         8   -> log_task


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_10
       4  ??DataTable7_11
       4  ??DataTable7_12
       4  ??DataTable7_13
       4  ??DataTable7_14
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       4  ??DataTable7_7
       4  ??DataTable7_8
       4  ??DataTable7_9
     128  ?_0
      12  ?_1
      74  DbgConsole_PrintCallback
      24  EnableIRQ
      94  HAL_Printf
      34  LPUART1_IRQHandler
      38  LPUART_ReadByte
       4  LPUART_WriteByte
      22  __NVIC_EnableIRQ
      28  __NVIC_SetPriority
     108  log_init
       4  log_mutex
      46  log_rx
      78  log_task
       4  log_task_handle
      22  log_tx_rx_task
     512  printf_buffer
       2  printf_r_ptr
       2  printf_w_ptr
     256  rx_buffer
       1  rx_r_ptr
       1  rx_w_ptr

 
 782 bytes in section .bss
 140 bytes in section .rodata
 632 bytes in section .text
 
 632 bytes of CODE  memory
 140 bytes of CONST memory
 782 bytes of DATA  memory

Errors: none
Warnings: 13
