###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.3.193/W32 for ARM         10/Jun/2019  13:48:52
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\Development\smart_washing_machine_3080\mbedtls\library\ssl_srv.c
#    Command line =  
#        -f C:\Users\nxf42695\AppData\Local\Temp\1\EW51E7.tmp
#        (C:\Development\smart_washing_machine_3080\mbedtls\library\ssl_srv.c
#        -D DEBUG -D USE_RTOS -D XIP_EXTERNAL_FLASH=1 -D
#        XIP_BOOT_HEADER_ENABLE=1 -D CPU_MIMXRT1052DVL6B -D FSL_RTOS_FREE_RTOS
#        -D PRINTF_ADVANCED_ENABLE -D
#        "MBEDTLS_CONFIG_FILE=\"ksdk_mbedtls_config.h\"" -lC
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list -lA
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list
#        --diag_suppress Pa082,Pa050 -o
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_d16 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" --preinclude
#        C:\Development\smart_washing_machine_3080/source\app_preinclude.h -I
#        C:\Development\smart_washing_machine_3080/board\ -I
#        C:\Development\smart_washing_machine_3080/source\ -I
#        C:\Development\smart_washing_machine_3080/CMSIS\ -I
#        C:\Development\smart_washing_machine_3080/amazon-freertos/freertos/portable\
#        -I C:\Development\smart_washing_machine_3080/amazon-freertos/include\
#        -I C:\Development\smart_washing_machine_3080/component/lists\ -I
#        C:\Development\smart_washing_machine_3080/component/serial_manager\ -I
#        C:\Development\smart_washing_machine_3080/component/uart\ -I
#        C:\Development\smart_washing_machine_3080/component/kv\ -I
#        C:\Development\smart_washing_machine_3080/component/kv/include\ -I
#        C:\Development\smart_washing_machine_3080/device\ -I
#        C:\Development\smart_washing_machine_3080/doc\ -I
#        C:\Development\smart_washing_machine_3080/drivers\ -I
#        C:\Development\smart_washing_machine_3080/src\ -I
#        C:\Development\smart_washing_machine_3080/startup\ -I
#        C:\Development\smart_washing_machine_3080/utilities\ -I
#        C:\Development\smart_washing_machine_3080/xip\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\atm\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_model\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_sign\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\infra\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\mqtt\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\external_libs\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\coap_cloud\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\CoAPPacket\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\server\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\os\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\awss_reset\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\mbedtls\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\ -I
#        C:\Development\smart_washing_machine_3080\mbedtls\port\ksdk\ -Om)
#    Locale       =  C
#    List file    =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list\ssl_srv.lst
#    Object file  =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj\ssl_srv.o
#
###############################################################################

C:\Development\smart_washing_machine_3080\mbedtls\library\ssl_srv.c
      1          /*
      2           *  SSLv3/TLSv1 server-side functions
      3           *
      4           *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
      5           *  SPDX-License-Identifier: Apache-2.0
      6           *
      7           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
      8           *  not use this file except in compliance with the License.
      9           *  You may obtain a copy of the License at
     10           *
     11           *  http://www.apache.org/licenses/LICENSE-2.0
     12           *
     13           *  Unless required by applicable law or agreed to in writing, software
     14           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     15           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     16           *  See the License for the specific language governing permissions and
     17           *  limitations under the License.
     18           *
     19           *  This file is part of mbed TLS (https://tls.mbed.org)
     20           */
     21          
     22          #if !defined(MBEDTLS_CONFIG_FILE)
     23          #include "mbedtls/config.h"
     24          #else
     25          #include MBEDTLS_CONFIG_FILE
     26          #endif
     27          
     28          #if defined(MBEDTLS_SSL_SRV_C)
     29          
     30          #if defined(MBEDTLS_PLATFORM_C)
     31          #include "mbedtls/platform.h"
     32          #else
     33          #include <stdlib.h>
     34          #define mbedtls_calloc    calloc
     35          #define mbedtls_free      free
     36          #endif
     37          
     38          #include "mbedtls/debug.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp mbedtls_ecp_keypair *mbedtls_pk_ec(mbedtls_pk_context const)
   \                     mbedtls_pk_ec: (+1)
   \        0x0   0x4608             MOV      R0,R1
   \        0x2   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp size_t mbedtls_pk_get_len(mbedtls_pk_context const *)
   \                     mbedtls_pk_get_len: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   \        0x2   0x....'....        BL       mbedtls_pk_get_bitlen
   \        0x6   0x1DC0             ADDS     R0,R0,#+7
   \        0x8   0x08C0             LSRS     R0,R0,#+3
   \        0xA   0xBD02             POP      {R1,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp int mbedtls_ssl_ciphersuite_no_pfs(mbedtls_ssl_ciphersuite_t const *)
   \                     mbedtls_ssl_ciphersuite_no_pfs: (+1)
   \        0x0   0x7A80             LDRB     R0,[R0, #+10]
   \        0x2   0x2801             CMP      R0,#+1
   \        0x4   0xD007             BEQ.N    ??mbedtls_ssl_ciphersuite_no_pfs_0
   \        0x6   0x2805             CMP      R0,#+5
   \        0x8   0xD005             BEQ.N    ??mbedtls_ssl_ciphersuite_no_pfs_0
   \        0xA   0x2807             CMP      R0,#+7
   \        0xC   0xD003             BEQ.N    ??mbedtls_ssl_ciphersuite_no_pfs_0
   \        0xE   0x2809             CMP      R0,#+9
   \       0x10   0xD001             BEQ.N    ??mbedtls_ssl_ciphersuite_no_pfs_0
   \       0x12   0x280A             CMP      R0,#+10
   \       0x14   0xD101             BNE.N    ??mbedtls_ssl_ciphersuite_no_pfs_1
   \                     ??mbedtls_ssl_ciphersuite_no_pfs_0: (+1)
   \       0x16   0x2001             MOVS     R0,#+1
   \       0x18   0x4770             BX       LR
   \                     ??mbedtls_ssl_ciphersuite_no_pfs_1: (+1)
   \       0x1A   0x2000             MOVS     R0,#+0
   \       0x1C   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp int mbedtls_ssl_ciphersuite_uses_ecdh(mbedtls_ssl_ciphersuite_t const *)
   \                     mbedtls_ssl_ciphersuite_uses_ecdh: (+1)
   \        0x0   0x7A80             LDRB     R0,[R0, #+10]
   \        0x2   0x3809             SUBS     R0,R0,#+9
   \        0x4   0x2801             CMP      R0,#+1
   \        0x6   0xD801             BHI.N    ??mbedtls_ssl_ciphersuite_uses_ecdh_0
   \        0x8   0x2001             MOVS     R0,#+1
   \        0xA   0x4770             BX       LR
   \                     ??mbedtls_ssl_ciphersuite_uses_ecdh_0: (+1)
   \        0xC   0x2000             MOVS     R0,#+0
   \        0xE   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp int mbedtls_ssl_ciphersuite_uses_dhe(mbedtls_ssl_ciphersuite_t const *)
   \                     mbedtls_ssl_ciphersuite_uses_dhe: (+1)
   \        0x0   0x7A80             LDRB     R0,[R0, #+10]
   \        0x2   0x2802             CMP      R0,#+2
   \        0x4   0xD001             BEQ.N    ??mbedtls_ssl_ciphersuite_uses_dhe_0
   \        0x6   0x2806             CMP      R0,#+6
   \        0x8   0xD101             BNE.N    ??mbedtls_ssl_ciphersuite_uses_dhe_1
   \                     ??mbedtls_ssl_ciphersuite_uses_dhe_0: (+1)
   \        0xA   0x2001             MOVS     R0,#+1
   \        0xC   0x4770             BX       LR
   \                     ??mbedtls_ssl_ciphersuite_uses_dhe_1: (+1)
   \        0xE   0x2000             MOVS     R0,#+0
   \       0x10   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp int mbedtls_ssl_ciphersuite_uses_ecdhe(mbedtls_ssl_ciphersuite_t const *)
   \                     mbedtls_ssl_ciphersuite_uses_ecdhe: (+1)
   \        0x0   0x7A80             LDRB     R0,[R0, #+10]
   \        0x2   0x1EC0             SUBS     R0,R0,#+3
   \        0x4   0x2801             CMP      R0,#+1
   \        0x6   0xD901             BLS.N    ??mbedtls_ssl_ciphersuite_uses_ecdhe_0
   \        0x8   0x1F40             SUBS     R0,R0,#+5
   \        0xA   0xD101             BNE.N    ??mbedtls_ssl_ciphersuite_uses_ecdhe_1
   \                     ??mbedtls_ssl_ciphersuite_uses_ecdhe_0: (+1)
   \        0xC   0x2001             MOVS     R0,#+1
   \        0xE   0x4770             BX       LR
   \                     ??mbedtls_ssl_ciphersuite_uses_ecdhe_1: (+1)
   \       0x10   0x2000             MOVS     R0,#+0
   \       0x12   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp int mbedtls_ssl_ciphersuite_uses_server_signature(mbedtls_ssl_ciphersuite_t const *)
   \                     mbedtls_ssl_ciphersuite_uses_server_signature: (+1)
   \        0x0   0x7A80             LDRB     R0,[R0, #+10]
   \        0x2   0x1E80             SUBS     R0,R0,#+2
   \        0x4   0x2802             CMP      R0,#+2
   \        0x6   0xD801             BHI.N    ??mbedtls_ssl_ciphersuite_uses_server_signature_0
   \        0x8   0x2001             MOVS     R0,#+1
   \        0xA   0x4770             BX       LR
   \                     ??mbedtls_ssl_ciphersuite_uses_server_signature_0: (+1)
   \        0xC   0x2000             MOVS     R0,#+0
   \        0xE   0x4770             BX       LR               ;; return
     39          #include "mbedtls/ssl.h"
     40          #include "mbedtls/ssl_internal.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp mbedtls_pk_context *mbedtls_ssl_own_key(mbedtls_ssl_context *)
   \                     mbedtls_ssl_own_key: (+1)
   \        0x0   0x6BC1             LDR      R1,[R0, #+60]
   \        0x2   0x2900             CMP      R1,#+0
   \        0x4   0xD005             BEQ.N    ??mbedtls_ssl_own_key_0
   \        0x6   0xF8D1 0x11C0      LDR      R1,[R1, #+448]
   \        0xA   0x2900             CMP      R1,#+0
   \        0xC   0xD001             BEQ.N    ??mbedtls_ssl_own_key_0
   \        0xE   0x4608             MOV      R0,R1
   \       0x10   0xE001             B.N      ??mbedtls_ssl_own_key_1
   \                     ??mbedtls_ssl_own_key_0: (+1)
   \       0x12   0x6800             LDR      R0,[R0, #+0]
   \       0x14   0x6E80             LDR      R0,[R0, #+104]
   \                     ??mbedtls_ssl_own_key_1: (+1)
   \       0x16   0x2800             CMP      R0,#+0
   \       0x18   0xD101             BNE.N    ??mbedtls_ssl_own_key_2
   \       0x1A   0x2000             MOVS     R0,#+0
   \       0x1C   0x4770             BX       LR
   \                     ??mbedtls_ssl_own_key_2: (+1)
   \       0x1E   0x6840             LDR      R0,[R0, #+4]
   \       0x20   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp mbedtls_x509_crt *mbedtls_ssl_own_cert(mbedtls_ssl_context *)
   \                     mbedtls_ssl_own_cert: (+1)
   \        0x0   0x6BC1             LDR      R1,[R0, #+60]
   \        0x2   0x2900             CMP      R1,#+0
   \        0x4   0xD005             BEQ.N    ??mbedtls_ssl_own_cert_0
   \        0x6   0xF8D1 0x11C0      LDR      R1,[R1, #+448]
   \        0xA   0x2900             CMP      R1,#+0
   \        0xC   0xD001             BEQ.N    ??mbedtls_ssl_own_cert_0
   \        0xE   0x4608             MOV      R0,R1
   \       0x10   0xE001             B.N      ??mbedtls_ssl_own_cert_1
   \                     ??mbedtls_ssl_own_cert_0: (+1)
   \       0x12   0x6800             LDR      R0,[R0, #+0]
   \       0x14   0x6E80             LDR      R0,[R0, #+104]
   \                     ??mbedtls_ssl_own_cert_1: (+1)
   \       0x16   0x2800             CMP      R0,#+0
   \       0x18   0xD101             BNE.N    ??mbedtls_ssl_own_cert_2
   \       0x1A   0x2000             MOVS     R0,#+0
   \       0x1C   0x4770             BX       LR
   \                     ??mbedtls_ssl_own_cert_2: (+1)
   \       0x1E   0x6800             LDR      R0,[R0, #+0]
   \       0x20   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp size_t mbedtls_ssl_hdr_len(mbedtls_ssl_context const *)
   \                     mbedtls_ssl_hdr_len: (+1)
   \        0x0   0x6800             LDR      R0,[R0, #+0]
   \        0x2   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \        0x6   0xF3C0 0x0040      UBFX     R0,R0,#+1,#+1
   \        0xA   0x2800             CMP      R0,#+0
   \        0xC   0xD001             BEQ.N    ??mbedtls_ssl_hdr_len_0
   \        0xE   0x200D             MOVS     R0,#+13
   \       0x10   0x4770             BX       LR
   \                     ??mbedtls_ssl_hdr_len_0: (+1)
   \       0x12   0x2005             MOVS     R0,#+5
   \       0x14   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp size_t mbedtls_ssl_hs_hdr_len(mbedtls_ssl_context const *)
   \                     mbedtls_ssl_hs_hdr_len: (+1)
   \        0x0   0x6800             LDR      R0,[R0, #+0]
   \        0x2   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \        0x6   0xF3C0 0x0040      UBFX     R0,R0,#+1,#+1
   \        0xA   0x2800             CMP      R0,#+0
   \        0xC   0xD001             BEQ.N    ??mbedtls_ssl_hs_hdr_len_0
   \        0xE   0x200C             MOVS     R0,#+12
   \       0x10   0x4770             BX       LR
   \                     ??mbedtls_ssl_hs_hdr_len_0: (+1)
   \       0x12   0x2004             MOVS     R0,#+4
   \       0x14   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp int mbedtls_ssl_safer_memcmp(void const *, void const *, size_t)
   \                     mbedtls_ssl_safer_memcmp: (+1)
   \        0x0   0xB478             PUSH     {R3-R6}
   \        0x2   0x2300             MOVS     R3,#+0
   \        0x4   0xF88D 0x3000      STRB     R3,[SP, #+0]
   \        0x8   0xE008             B.N      ??mbedtls_ssl_safer_memcmp_0
   \                     ??mbedtls_ssl_safer_memcmp_1: (+1)
   \        0xA   0x5CC4             LDRB     R4,[R0, R3]
   \        0xC   0x5CCD             LDRB     R5,[R1, R3]
   \        0xE   0xF89D 0x6000      LDRB     R6,[SP, #+0]
   \       0x12   0x406C             EORS     R4,R5,R4
   \       0x14   0x4334             ORRS     R4,R4,R6
   \       0x16   0xF88D 0x4000      STRB     R4,[SP, #+0]
   \       0x1A   0x1C5B             ADDS     R3,R3,#+1
   \                     ??mbedtls_ssl_safer_memcmp_0: (+1)
   \       0x1C   0x4293             CMP      R3,R2
   \       0x1E   0xD3F4             BCC.N    ??mbedtls_ssl_safer_memcmp_1
   \       0x20   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \       0x24   0xBC72             POP      {R1,R4-R6}
   \       0x26   0x4770             BX       LR               ;; return
     41          #include "mbedtls/platform_util.h"
     42          
     43          #include <string.h>
     44          
     45          #if defined(MBEDTLS_ECP_C)
     46          #include "mbedtls/ecp.h"
     47          #endif
     48          
     49          #if defined(MBEDTLS_HAVE_TIME)
     50          #include "mbedtls/platform_time.h"
     51          #endif
     52          
     53          #if defined(MBEDTLS_SSL_DTLS_HELLO_VERIFY)

   \                                 In section .text, align 2, keep-with-next
     54          int mbedtls_ssl_set_client_transport_id( mbedtls_ssl_context *ssl,
     55                                           const unsigned char *info,
     56                                           size_t ilen )
     57          {
   \                     mbedtls_ssl_set_client_transport_id: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
   \        0x6   0x4616             MOV      R6,R2
     58              if( ssl->conf->endpoint != MBEDTLS_SSL_IS_SERVER )
   \        0x8   0x6820             LDR      R0,[R4, #+0]
   \        0xA   0xF890 0x00CC      LDRB     R0,[R0, #+204]
   \        0xE   0x07C0             LSLS     R0,R0,#+31
   \       0x10   0xD402             BMI.N    ??mbedtls_ssl_set_client_transport_id_0
     59                  return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   \       0x12   0x....'....        LDR.W    R0,??DataTable14  ;; 0xffff8f00
   \       0x16   0xBD70             POP      {R4-R6,PC}
     60          
     61              mbedtls_free( ssl->cli_id );
   \                     ??mbedtls_ssl_set_client_transport_id_0: (+1)
   \       0x18   0xF8D4 0x00EC      LDR      R0,[R4, #+236]
   \       0x1C   0x....'....        BL       mbedtls_free
     62          
     63              if( ( ssl->cli_id = mbedtls_calloc( 1, ilen ) ) == NULL )
   \       0x20   0x4631             MOV      R1,R6
   \       0x22   0x2001             MOVS     R0,#+1
   \       0x24   0x....'....        BL       mbedtls_calloc
   \       0x28   0xF8C4 0x00EC      STR      R0,[R4, #+236]
   \       0x2C   0x2800             CMP      R0,#+0
   \       0x2E   0xD102             BNE.N    ??mbedtls_ssl_set_client_transport_id_1
     64                  return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
   \       0x30   0x....'....        LDR.W    R0,??DataTable14_1  ;; 0xffff8100
   \       0x34   0xBD70             POP      {R4-R6,PC}
     65          
     66              memcpy( ssl->cli_id, info, ilen );
   \                     ??mbedtls_ssl_set_client_transport_id_1: (+1)
   \       0x36   0x4632             MOV      R2,R6
   \       0x38   0x4629             MOV      R1,R5
   \       0x3A   0x....'....        BL       __aeabi_memcpy
     67              ssl->cli_id_len = ilen;
   \       0x3E   0xF8C4 0x60F0      STR      R6,[R4, #+240]
     68          
     69              return( 0 );
   \       0x42   0x2000             MOVS     R0,#+0
   \       0x44   0xBD70             POP      {R4-R6,PC}       ;; return
     70          }
     71          

   \                                 In section .text, align 2, keep-with-next
     72          void mbedtls_ssl_conf_dtls_cookies( mbedtls_ssl_config *conf,
     73                                     mbedtls_ssl_cookie_write_t *f_cookie_write,
     74                                     mbedtls_ssl_cookie_check_t *f_cookie_check,
     75                                     void *p_cookie )
     76          {
     77              conf->f_cookie_write = f_cookie_write;
   \                     mbedtls_ssl_conf_dtls_cookies: (+1)
   \        0x0   0x6441             STR      R1,[R0, #+68]
     78              conf->f_cookie_check = f_cookie_check;
   \        0x2   0x6482             STR      R2,[R0, #+72]
     79              conf->p_cookie       = p_cookie;
   \        0x4   0x64C3             STR      R3,[R0, #+76]
     80          }
   \        0x6   0x4770             BX       LR               ;; return
     81          #endif /* MBEDTLS_SSL_DTLS_HELLO_VERIFY */
     82          
     83          #if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)

   \                                 In section .text, align 2, keep-with-next
     84          static int ssl_parse_servername_ext( mbedtls_ssl_context *ssl,
     85                                               const unsigned char *buf,
     86                                               size_t len )
     87          {
   \                     ssl_parse_servername_ext: (+1)
   \        0x0   0xB5FE             PUSH     {R1-R7,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460E             MOV      R6,R1
   \        0x6   0x4617             MOV      R7,R2
     88              int ret;
     89              size_t servername_list_size, hostname_len;
     90              const unsigned char *p;
     91          
     92              MBEDTLS_SSL_DEBUG_MSG( 3, ( "parse ServerName extension" ) );
   \        0x8   0x....'....        LDR.W    R5,??DataTable14_2
   \        0xC   0x....'....        LDR.W    R0,??DataTable14_3
   \       0x10   0x9000             STR      R0,[SP, #+0]
   \       0x12   0x235C             MOVS     R3,#+92
   \       0x14   0x462A             MOV      R2,R5
   \       0x16   0x2103             MOVS     R1,#+3
   \       0x18   0x4620             MOV      R0,R4
   \       0x1A   0x....'....        BL       mbedtls_debug_print_msg
     93          
     94              if( len < 2 )
   \       0x1E   0x2F02             CMP      R7,#+2
   \       0x20   0xD210             BCS.N    ??ssl_parse_servername_ext_0
     95              {
     96                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client hello message" ) );
   \       0x22   0x....'....        LDR.W    R0,??DataTable14_4
   \       0x26   0x9000             STR      R0,[SP, #+0]
   \       0x28   0x2360             MOVS     R3,#+96
   \       0x2A   0x462A             MOV      R2,R5
   \       0x2C   0x2101             MOVS     R1,#+1
   \       0x2E   0x4620             MOV      R0,R4
   \       0x30   0x....'....        BL       mbedtls_debug_print_msg
     97                  mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
     98                                                 MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
   \       0x34   0x2232             MOVS     R2,#+50
   \       0x36   0x2102             MOVS     R1,#+2
   \       0x38   0x4620             MOV      R0,R4
   \       0x3A   0x....'....        BL       mbedtls_ssl_send_alert_message
     99                  return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
   \       0x3E   0x....'....        LDR.W    R0,??DataTable14_5  ;; 0xffff8700
   \       0x42   0xBDFE             POP      {R1-R7,PC}
    100              }
    101              servername_list_size = ( ( buf[0] << 8 ) | ( buf[1] ) );
   \                     ??ssl_parse_servername_ext_0: (+1)
   \       0x44   0x7830             LDRB     R0,[R6, #+0]
   \       0x46   0x7871             LDRB     R1,[R6, #+1]
   \       0x48   0xEA41 0x2100      ORR      R1,R1,R0, LSL #+8
    102              if( servername_list_size + 2 != len )
   \       0x4C   0x1C88             ADDS     R0,R1,#+2
   \       0x4E   0x42B8             CMP      R0,R7
   \       0x50   0xD010             BEQ.N    ??ssl_parse_servername_ext_1
    103              {
    104                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client hello message" ) );
   \       0x52   0x....'....        LDR.W    R0,??DataTable14_4
   \       0x56   0x9000             STR      R0,[SP, #+0]
   \       0x58   0x2368             MOVS     R3,#+104
   \       0x5A   0x462A             MOV      R2,R5
   \       0x5C   0x2101             MOVS     R1,#+1
   \       0x5E   0x4620             MOV      R0,R4
   \       0x60   0x....'....        BL       mbedtls_debug_print_msg
    105                  mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
    106                                                  MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
   \       0x64   0x2232             MOVS     R2,#+50
   \       0x66   0x2102             MOVS     R1,#+2
   \       0x68   0x4620             MOV      R0,R4
   \       0x6A   0x....'....        BL       mbedtls_ssl_send_alert_message
    107                  return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
   \       0x6E   0x....'....        LDR.W    R0,??DataTable14_5  ;; 0xffff8700
   \       0x72   0xBDFE             POP      {R1-R7,PC}
    108              }
    109          
    110              p = buf + 2;
   \                     ??ssl_parse_servername_ext_1: (+1)
   \       0x74   0x1CB2             ADDS     R2,R6,#+2
   \       0x76   0xE006             B.N      ??ssl_parse_servername_ext_2
    111              while( servername_list_size > 2 )
    112              {
    113                  hostname_len = ( ( p[1] << 8 ) | p[2] );
    114                  if( hostname_len + 3 > servername_list_size )
    115                  {
    116                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client hello message" ) );
    117                      mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
    118                                                      MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
    119                      return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
    120                  }
    121          
    122                  if( p[0] == MBEDTLS_TLS_EXT_SERVERNAME_HOSTNAME )
   \                     ??ssl_parse_servername_ext_3: (+1)
   \       0x78   0x7810             LDRB     R0,[R2, #+0]
   \       0x7A   0x2800             CMP      R0,#+0
   \       0x7C   0xD01D             BEQ.N    ??ssl_parse_servername_ext_4
    123                  {
    124                      ret = ssl->conf->f_sni( ssl->conf->p_sni,
    125                                              ssl, p + 3, hostname_len );
    126                      if( ret != 0 )
    127                      {
    128                          MBEDTLS_SSL_DEBUG_RET( 1, "ssl_sni_wrapper", ret );
    129                          mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
    130                                  MBEDTLS_SSL_ALERT_MSG_UNRECOGNIZED_NAME );
    131                          return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
    132                      }
    133                      return( 0 );
    134                  }
    135          
    136                  servername_list_size -= hostname_len + 3;
   \       0x7E   0x1AC9             SUBS     R1,R1,R3
   \       0x80   0x1EC9             SUBS     R1,R1,#+3
    137                  p += hostname_len + 3;
   \       0x82   0x18D0             ADDS     R0,R2,R3
   \       0x84   0x1CC2             ADDS     R2,R0,#+3
   \                     ??ssl_parse_servername_ext_2: (+1)
   \       0x86   0x2903             CMP      R1,#+3
   \       0x88   0xD336             BCC.N    ??ssl_parse_servername_ext_5
   \       0x8A   0x7850             LDRB     R0,[R2, #+1]
   \       0x8C   0x7893             LDRB     R3,[R2, #+2]
   \       0x8E   0xEA43 0x2300      ORR      R3,R3,R0, LSL #+8
   \       0x92   0x1CD8             ADDS     R0,R3,#+3
   \       0x94   0x4281             CMP      R1,R0
   \       0x96   0xD2EF             BCS.N    ??ssl_parse_servername_ext_3
   \       0x98   0x....'....        LDR.W    R0,??DataTable14_4
   \       0x9C   0x9000             STR      R0,[SP, #+0]
   \       0x9E   0x2374             MOVS     R3,#+116
   \       0xA0   0x462A             MOV      R2,R5
   \       0xA2   0x2101             MOVS     R1,#+1
   \       0xA4   0x4620             MOV      R0,R4
   \       0xA6   0x....'....        BL       mbedtls_debug_print_msg
   \       0xAA   0x2232             MOVS     R2,#+50
   \       0xAC   0x2102             MOVS     R1,#+2
   \       0xAE   0x4620             MOV      R0,R4
   \       0xB0   0x....'....        BL       mbedtls_ssl_send_alert_message
   \       0xB4   0x....'....        LDR.W    R0,??DataTable14_5  ;; 0xffff8700
   \       0xB8   0xBDFE             POP      {R1-R7,PC}
   \                     ??ssl_parse_servername_ext_4: (+1)
   \       0xBA   0x1CD2             ADDS     R2,R2,#+3
   \       0xBC   0x4621             MOV      R1,R4
   \       0xBE   0x6820             LDR      R0,[R4, #+0]
   \       0xC0   0x6B00             LDR      R0,[R0, #+48]
   \       0xC2   0x6826             LDR      R6,[R4, #+0]
   \       0xC4   0x6AF6             LDR      R6,[R6, #+44]
   \       0xC6   0x47B0             BLX      R6
   \       0xC8   0x2800             CMP      R0,#+0
   \       0xCA   0xD011             BEQ.N    ??ssl_parse_servername_ext_6
   \       0xCC   0x9001             STR      R0,[SP, #+4]
   \       0xCE   0x....'....        LDR.W    R0,??DataTable14_6
   \       0xD2   0x9000             STR      R0,[SP, #+0]
   \       0xD4   0x2380             MOVS     R3,#+128
   \       0xD6   0x462A             MOV      R2,R5
   \       0xD8   0x2101             MOVS     R1,#+1
   \       0xDA   0x4620             MOV      R0,R4
   \       0xDC   0x....'....        BL       mbedtls_debug_print_ret
   \       0xE0   0x2270             MOVS     R2,#+112
   \       0xE2   0x2102             MOVS     R1,#+2
   \       0xE4   0x4620             MOV      R0,R4
   \       0xE6   0x....'....        BL       mbedtls_ssl_send_alert_message
   \       0xEA   0x....'....        LDR.W    R0,??DataTable14_5  ;; 0xffff8700
   \       0xEE   0xBDFE             POP      {R1-R7,PC}
   \                     ??ssl_parse_servername_ext_6: (+1)
   \       0xF0   0x2000             MOVS     R0,#+0
   \       0xF2   0xBDFE             POP      {R1-R7,PC}
    138              }
    139          
    140              if( servername_list_size != 0 )
    141              {
    142                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client hello message" ) );
    143                  mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
    144                                                  MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
    145                  return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
    146              }
    147          
    148              return( 0 );
   \                     ??ssl_parse_servername_ext_7: (+1)
   \       0xF4   0x2000             MOVS     R0,#+0
   \       0xF6   0xBDFE             POP      {R1-R7,PC}       ;; return
   \                     ??ssl_parse_servername_ext_5: (+1)
   \       0xF8   0x2900             CMP      R1,#+0
   \       0xFA   0xD0FB             BEQ.N    ??ssl_parse_servername_ext_7
   \       0xFC   0x....'....        LDR.W    R0,??DataTable14_4
   \      0x100   0x9000             STR      R0,[SP, #+0]
   \      0x102   0x238E             MOVS     R3,#+142
   \      0x104   0x462A             MOV      R2,R5
   \      0x106   0x2101             MOVS     R1,#+1
   \      0x108   0x4620             MOV      R0,R4
   \      0x10A   0x....'....        BL       mbedtls_debug_print_msg
   \      0x10E   0x222F             MOVS     R2,#+47
   \      0x110   0x2102             MOVS     R1,#+2
   \      0x112   0x4620             MOV      R0,R4
   \      0x114   0x....'....        BL       mbedtls_ssl_send_alert_message
   \      0x118   0x....'....        LDR.W    R0,??DataTable14_5  ;; 0xffff8700
   \      0x11C   0xBDFE             POP      {R1-R7,PC}
    149          }
    150          #endif /* MBEDTLS_SSL_SERVER_NAME_INDICATION */
    151          

   \                                 In section .text, align 2, keep-with-next
    152          static int ssl_parse_renegotiation_info( mbedtls_ssl_context *ssl,
    153                                                   const unsigned char *buf,
    154                                                   size_t len )
    155          {
   \                     ssl_parse_renegotiation_info: (+1)
   \        0x0   0xB51C             PUSH     {R2-R4,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460B             MOV      R3,R1
    156          #if defined(MBEDTLS_SSL_RENEGOTIATION)
    157              if( ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE )
   \        0x6   0x68A0             LDR      R0,[R4, #+8]
   \        0x8   0x2800             CMP      R0,#+0
   \        0xA   0xD023             BEQ.N    ??ssl_parse_renegotiation_info_0
    158              {
    159                  /* Check verify-data in constant-time. The length OTOH is no secret */
    160                  if( len    != 1 + ssl->verify_data_len ||
    161                      buf[0] !=     ssl->verify_data_len ||
    162                      mbedtls_ssl_safer_memcmp( buf + 1, ssl->peer_verify_data,
    163                                    ssl->verify_data_len ) != 0 )
   \        0xC   0xF8D4 0x00F8      LDR      R0,[R4, #+248]
   \       0x10   0x1C40             ADDS     R0,R0,#+1
   \       0x12   0x4282             CMP      R2,R0
   \       0x14   0xD10C             BNE.N    ??ssl_parse_renegotiation_info_1
   \       0x16   0x7818             LDRB     R0,[R3, #+0]
   \       0x18   0xF8D4 0x10F8      LDR      R1,[R4, #+248]
   \       0x1C   0x4288             CMP      R0,R1
   \       0x1E   0xD107             BNE.N    ??ssl_parse_renegotiation_info_1
   \       0x20   0x460A             MOV      R2,R1
   \       0x22   0xF504 0x7184      ADD      R1,R4,#+264
   \       0x26   0x1C58             ADDS     R0,R3,#+1
   \       0x28   0x....'....        BL       mbedtls_ssl_safer_memcmp
   \       0x2C   0x2800             CMP      R0,#+0
   \       0x2E   0xD02B             BEQ.N    ??ssl_parse_renegotiation_info_2
    164                  {
    165                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "non-matching renegotiation info" ) );
   \                     ??ssl_parse_renegotiation_info_1: (+1)
   \       0x30   0x....'....        LDR.W    R0,??DataTable14_7
   \       0x34   0x9000             STR      R0,[SP, #+0]
   \       0x36   0x23A5             MOVS     R3,#+165
   \       0x38   0x....'....        LDR.W    R2,??DataTable14_2
   \       0x3C   0x2101             MOVS     R1,#+1
   \       0x3E   0x4620             MOV      R0,R4
   \       0x40   0x....'....        BL       mbedtls_debug_print_msg
    166                      mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
    167                                                      MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );
   \       0x44   0x2228             MOVS     R2,#+40
   \       0x46   0x2102             MOVS     R1,#+2
   \       0x48   0x4620             MOV      R0,R4
   \       0x4A   0x....'....        BL       mbedtls_ssl_send_alert_message
    168                      return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
   \       0x4E   0x....'....        LDR.W    R0,??DataTable14_5  ;; 0xffff8700
   \       0x52   0xBD16             POP      {R1,R2,R4,PC}
    169                  }
    170              }
    171              else
    172          #endif /* MBEDTLS_SSL_RENEGOTIATION */
    173              {
    174                  if( len != 1 || buf[0] != 0x0 )
   \                     ??ssl_parse_renegotiation_info_0: (+1)
   \       0x54   0x2A01             CMP      R2,#+1
   \       0x56   0xD102             BNE.N    ??ssl_parse_renegotiation_info_3
   \       0x58   0x7818             LDRB     R0,[R3, #+0]
   \       0x5A   0x2800             CMP      R0,#+0
   \       0x5C   0xD011             BEQ.N    ??ssl_parse_renegotiation_info_4
    175                  {
    176                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "non-zero length renegotiation info" ) );
   \                     ??ssl_parse_renegotiation_info_3: (+1)
   \       0x5E   0x....'....        LDR.W    R0,??DataTable14_8
   \       0x62   0x9000             STR      R0,[SP, #+0]
   \       0x64   0x23B0             MOVS     R3,#+176
   \       0x66   0x....'....        LDR.W    R2,??DataTable14_2
   \       0x6A   0x2101             MOVS     R1,#+1
   \       0x6C   0x4620             MOV      R0,R4
   \       0x6E   0x....'....        BL       mbedtls_debug_print_msg
    177                      mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
    178                                                      MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );
   \       0x72   0x2228             MOVS     R2,#+40
   \       0x74   0x2102             MOVS     R1,#+2
   \       0x76   0x4620             MOV      R0,R4
   \       0x78   0x....'....        BL       mbedtls_ssl_send_alert_message
    179                      return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
   \       0x7C   0x....'....        LDR.W    R0,??DataTable14_5  ;; 0xffff8700
   \       0x80   0xBD16             POP      {R1,R2,R4,PC}
    180                  }
    181          
    182                  ssl->secure_renegotiation = MBEDTLS_SSL_SECURE_RENEGOTIATION;
   \                     ??ssl_parse_renegotiation_info_4: (+1)
   \       0x82   0x2001             MOVS     R0,#+1
   \       0x84   0xF8C4 0x00F4      STR      R0,[R4, #+244]
    183              }
    184          
    185              return( 0 );
   \                     ??ssl_parse_renegotiation_info_2: (+1)
   \       0x88   0x2000             MOVS     R0,#+0
   \       0x8A   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    186          }
    187          
    188          #if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \
    189              defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
    190          
    191          /*
    192           * Status of the implementation of signature-algorithms extension:
    193           *
    194           * Currently, we are only considering the signature-algorithm extension
    195           * to pick a ciphersuite which allows us to send the ServerKeyExchange
    196           * message with a signature-hash combination that the user allows.
    197           *
    198           * We do *not* check whether all certificates in our certificate
    199           * chain are signed with an allowed signature-hash pair.
    200           * This needs to be done at a later stage.
    201           *
    202           */

   \                                 In section .text, align 2, keep-with-next
    203          static int ssl_parse_signature_algorithms_ext( mbedtls_ssl_context *ssl,
    204                                                         const unsigned char *buf,
    205                                                         size_t len )
    206          {
   \                     ssl_parse_signature_algorithms_ext: (+1)
   \        0x0   0xE92D 0x41FF      PUSH     {R0-R8,LR}
   \        0x4   0x4604             MOV      R4,R0
    207              size_t sig_alg_list_size;
    208          
    209              const unsigned char *p;
    210              const unsigned char *end = buf + len;
   \        0x6   0x188D             ADDS     R5,R1,R2
    211          
    212              mbedtls_md_type_t md_cur;
    213              mbedtls_pk_type_t sig_cur;
    214          
    215              if ( len < 2 ) {
   \        0x8   0x2A02             CMP      R2,#+2
   \        0xA   0xD211             BCS.N    ??ssl_parse_signature_algorithms_ext_0
    216                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client hello message" ) );
   \        0xC   0x....'....        LDR.W    R0,??DataTable14_4
   \       0x10   0x9000             STR      R0,[SP, #+0]
   \       0x12   0x23D8             MOVS     R3,#+216
   \       0x14   0x....'....        LDR.W    R2,??DataTable14_2
   \       0x18   0x2101             MOVS     R1,#+1
   \       0x1A   0x4620             MOV      R0,R4
   \       0x1C   0x....'....        BL       mbedtls_debug_print_msg
    217                  mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
    218                                                 MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
   \       0x20   0x2232             MOVS     R2,#+50
   \       0x22   0x2102             MOVS     R1,#+2
   \       0x24   0x4620             MOV      R0,R4
   \       0x26   0x....'....        BL       mbedtls_ssl_send_alert_message
    219                  return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
   \       0x2A   0x....'....        LDR.W    R0,??DataTable14_5  ;; 0xffff8700
   \       0x2E   0xE06C             B.N      ??ssl_parse_signature_algorithms_ext_1
    220              }
    221              sig_alg_list_size = ( ( buf[0] << 8 ) | ( buf[1] ) );
   \                     ??ssl_parse_signature_algorithms_ext_0: (+1)
   \       0x30   0x780B             LDRB     R3,[R1, #+0]
   \       0x32   0x7848             LDRB     R0,[R1, #+1]
   \       0x34   0xEA40 0x2003      ORR      R0,R0,R3, LSL #+8
    222              if( sig_alg_list_size + 2 != len ||
    223                  sig_alg_list_size % 2 != 0 )
   \       0x38   0x1C83             ADDS     R3,R0,#+2
   \       0x3A   0x4293             CMP      R3,R2
   \       0x3C   0xD101             BNE.N    ??ssl_parse_signature_algorithms_ext_2
   \       0x3E   0x07C0             LSLS     R0,R0,#+31
   \       0x40   0xD511             BPL.N    ??ssl_parse_signature_algorithms_ext_3
    224              {
    225                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client hello message" ) );
   \                     ??ssl_parse_signature_algorithms_ext_2: (+1)
   \       0x42   0x....'....        LDR.W    R0,??DataTable14_4
   \       0x46   0x9000             STR      R0,[SP, #+0]
   \       0x48   0x23E1             MOVS     R3,#+225
   \       0x4A   0x....'....        LDR.W    R2,??DataTable14_2
   \       0x4E   0x2101             MOVS     R1,#+1
   \       0x50   0x4620             MOV      R0,R4
   \       0x52   0x....'....        BL       mbedtls_debug_print_msg
    226                  mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
    227                                                  MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
   \       0x56   0x2232             MOVS     R2,#+50
   \       0x58   0x2102             MOVS     R1,#+2
   \       0x5A   0x4620             MOV      R0,R4
   \       0x5C   0x....'....        BL       mbedtls_ssl_send_alert_message
    228                  return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
   \       0x60   0x....'....        LDR.W    R0,??DataTable14_5  ;; 0xffff8700
   \       0x64   0xE051             B.N      ??ssl_parse_signature_algorithms_ext_1
    229              }
    230          
    231              /* Currently we only guarantee signing the ServerKeyExchange message according
    232               * to the constraints specified in this extension (see above), so it suffices
    233               * to remember only one suitable hash for each possible signature algorithm.
    234               *
    235               * This will change when we also consider certificate signatures,
    236               * in which case we will need to remember the whole signature-hash
    237               * pair list from the extension.
    238               */
    239          
    240              for( p = buf + 2; p < end; p += 2 )
   \                     ??ssl_parse_signature_algorithms_ext_3: (+1)
   \       0x66   0x1C8E             ADDS     R6,R1,#+2
   \       0x68   0xE026             B.N      ??ssl_parse_signature_algorithms_ext_4
    241              {
    242                  /* Silently ignore unknown signature or hash algorithms. */
    243          
    244                  if( ( sig_cur = mbedtls_ssl_pk_alg_from_sig( p[1] ) ) == MBEDTLS_PK_NONE )
    245                  {
    246                      MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello v3, signature_algorithm ext"
    247                                                  " unknown sig alg encoding %d", p[1] ) );
    248                      continue;
    249                  }
    250          
    251                  /* Check if we support the hash the user proposes */
    252                  md_cur = mbedtls_ssl_md_alg_from_hash( p[0] );
    253                  if( md_cur == MBEDTLS_MD_NONE )
    254                  {
    255                      MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello v3, signature_algorithm ext:"
    256                                                  " unknown hash alg encoding %d", p[0] ) );
    257                      continue;
    258                  }
    259          
    260                  if( mbedtls_ssl_check_sig_hash( ssl, md_cur ) == 0 )
    261                  {
    262                      mbedtls_ssl_sig_hash_set_add( &ssl->handshake->hash_algs, sig_cur, md_cur );
    263                      MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello v3, signature_algorithm ext:"
    264                                                  " match sig %d and hash %d",
    265                                                  sig_cur, md_cur ) );
    266                  }
    267                  else
    268                  {
    269                      MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello v3, signature_algorithm ext: "
    270                                                  "hash alg %d not supported", md_cur ) );
   \                     ??ssl_parse_signature_algorithms_ext_5: (+1)
   \       0x6A   0x9701             STR      R7,[SP, #+4]
   \       0x6C   0x....'....        LDR.W    R0,??DataTable14_9
   \       0x70   0x9000             STR      R0,[SP, #+0]
   \       0x72   0xF44F 0x7387      MOV      R3,#+270
   \       0x76   0x....'....        LDR.W    R2,??DataTable14_2
   \       0x7A   0x2103             MOVS     R1,#+3
   \       0x7C   0x4620             MOV      R0,R4
   \       0x7E   0x....'....        BL       mbedtls_debug_print_msg
   \       0x82   0xE018             B.N      ??ssl_parse_signature_algorithms_ext_6
    271                  }
   \                     ??ssl_parse_signature_algorithms_ext_7: (+1)
   \       0x84   0x4639             MOV      R1,R7
   \       0x86   0x4620             MOV      R0,R4
   \       0x88   0x....'....        BL       mbedtls_ssl_check_sig_hash
   \       0x8C   0x2800             CMP      R0,#+0
   \       0x8E   0xD1EC             BNE.N    ??ssl_parse_signature_algorithms_ext_5
   \       0x90   0x463A             MOV      R2,R7
   \       0x92   0x4641             MOV      R1,R8
   \       0x94   0x6BE0             LDR      R0,[R4, #+60]
   \       0x96   0x....'....        BL       mbedtls_ssl_sig_hash_set_add
   \       0x9A   0x9702             STR      R7,[SP, #+8]
   \       0x9C   0xF8CD 0x8004      STR      R8,[SP, #+4]
   \       0xA0   0x....'....        LDR.W    R0,??DataTable14_10
   \       0xA4   0x9000             STR      R0,[SP, #+0]
   \       0xA6   0xF240 0x1309      MOVW     R3,#+265
   \       0xAA   0x....'....        LDR.W    R2,??DataTable14_2
   \       0xAE   0x2103             MOVS     R1,#+3
   \       0xB0   0x4620             MOV      R0,R4
   \       0xB2   0x....'....        BL       mbedtls_debug_print_msg
   \                     ??ssl_parse_signature_algorithms_ext_6: (+1)
   \       0xB6   0x1CB6             ADDS     R6,R6,#+2
   \                     ??ssl_parse_signature_algorithms_ext_4: (+1)
   \       0xB8   0x42AE             CMP      R6,R5
   \       0xBA   0xD225             BCS.N    ??ssl_parse_signature_algorithms_ext_8
   \       0xBC   0x7870             LDRB     R0,[R6, #+1]
   \       0xBE   0x....'....        BL       mbedtls_ssl_pk_alg_from_sig
   \       0xC2   0x4680             MOV      R8,R0
   \       0xC4   0x2800             CMP      R0,#+0
   \       0xC6   0xD10C             BNE.N    ??ssl_parse_signature_algorithms_ext_9
   \       0xC8   0x7870             LDRB     R0,[R6, #+1]
   \       0xCA   0x9001             STR      R0,[SP, #+4]
   \       0xCC   0x....'....        LDR.W    R0,??DataTable14_11
   \       0xD0   0x9000             STR      R0,[SP, #+0]
   \       0xD2   0x23F7             MOVS     R3,#+247
   \       0xD4   0x....'....        LDR.W    R2,??DataTable14_2
   \       0xD8   0x2103             MOVS     R1,#+3
   \       0xDA   0x4620             MOV      R0,R4
   \       0xDC   0x....'....        BL       mbedtls_debug_print_msg
   \       0xE0   0xE7E9             B.N      ??ssl_parse_signature_algorithms_ext_6
   \                     ??ssl_parse_signature_algorithms_ext_9: (+1)
   \       0xE2   0x7830             LDRB     R0,[R6, #+0]
   \       0xE4   0x....'....        BL       mbedtls_ssl_md_alg_from_hash
   \       0xE8   0x0007             MOVS     R7,R0
   \       0xEA   0xD1CB             BNE.N    ??ssl_parse_signature_algorithms_ext_7
   \       0xEC   0x7830             LDRB     R0,[R6, #+0]
   \       0xEE   0x9001             STR      R0,[SP, #+4]
   \       0xF0   0x....'....        LDR.W    R0,??DataTable14_12
   \       0xF4   0x9000             STR      R0,[SP, #+0]
   \       0xF6   0xF44F 0x7380      MOV      R3,#+256
   \       0xFA   0x....'....        LDR.W    R2,??DataTable14_2
   \       0xFE   0x2103             MOVS     R1,#+3
   \      0x100   0x4620             MOV      R0,R4
   \      0x102   0x....'....        BL       mbedtls_debug_print_msg
   \      0x106   0xE7D6             B.N      ??ssl_parse_signature_algorithms_ext_6
    272              }
    273          
    274              return( 0 );
   \                     ??ssl_parse_signature_algorithms_ext_8: (+1)
   \      0x108   0x2000             MOVS     R0,#+0
   \                     ??ssl_parse_signature_algorithms_ext_1: (+1)
   \      0x10A   0xB004             ADD      SP,SP,#+16
   \      0x10C   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    275          }
    276          #endif /* MBEDTLS_SSL_PROTO_TLS1_2 &&
    277                    MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED */
    278          
    279          #if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) || \
    280              defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)

   \                                 In section .text, align 2, keep-with-next
    281          static int ssl_parse_supported_elliptic_curves( mbedtls_ssl_context *ssl,
    282                                                          const unsigned char *buf,
    283                                                          size_t len )
    284          {
   \                     ssl_parse_supported_elliptic_curves: (+1)
   \        0x0   0xE92D 0x41FC      PUSH     {R2-R8,LR}
   \        0x4   0x4606             MOV      R6,R0
   \        0x6   0x460F             MOV      R7,R1
    285              size_t list_size, our_size;
    286              const unsigned char *p;
    287              const mbedtls_ecp_curve_info *curve_info, **curves;
    288          
    289              if ( len < 2 ) {
   \        0x8   0x2A02             CMP      R2,#+2
   \        0xA   0xD212             BCS.N    ??ssl_parse_supported_elliptic_curves_0
    290                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client hello message" ) );
   \        0xC   0x....'....        LDR.W    R0,??DataTable14_4
   \       0x10   0x9000             STR      R0,[SP, #+0]
   \       0x12   0xF44F 0x7391      MOV      R3,#+290
   \       0x16   0x....'....        LDR.W    R2,??DataTable14_2
   \       0x1A   0x2101             MOVS     R1,#+1
   \       0x1C   0x4630             MOV      R0,R6
   \       0x1E   0x....'....        BL       mbedtls_debug_print_msg
    291                  mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
    292                                                 MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
   \       0x22   0x2232             MOVS     R2,#+50
   \       0x24   0x2102             MOVS     R1,#+2
   \       0x26   0x4630             MOV      R0,R6
   \       0x28   0x....'....        BL       mbedtls_ssl_send_alert_message
    293                  return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
   \       0x2C   0x....'....        LDR.W    R0,??DataTable14_5  ;; 0xffff8700
   \       0x30   0xE064             B.N      ??ssl_parse_supported_elliptic_curves_1
    294              }
    295              list_size = ( ( buf[0] << 8 ) | ( buf[1] ) );
   \                     ??ssl_parse_supported_elliptic_curves_0: (+1)
   \       0x32   0x7838             LDRB     R0,[R7, #+0]
   \       0x34   0x787C             LDRB     R4,[R7, #+1]
   \       0x36   0xEA44 0x2400      ORR      R4,R4,R0, LSL #+8
    296              if( list_size + 2 != len ||
    297                  list_size % 2 != 0 )
   \       0x3A   0x1CA0             ADDS     R0,R4,#+2
   \       0x3C   0x4290             CMP      R0,R2
   \       0x3E   0xD101             BNE.N    ??ssl_parse_supported_elliptic_curves_2
   \       0x40   0x07E0             LSLS     R0,R4,#+31
   \       0x42   0xD512             BPL.N    ??ssl_parse_supported_elliptic_curves_3
    298              {
    299                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client hello message" ) );
   \                     ??ssl_parse_supported_elliptic_curves_2: (+1)
   \       0x44   0x....'....        LDR.W    R0,??DataTable14_4
   \       0x48   0x9000             STR      R0,[SP, #+0]
   \       0x4A   0xF240 0x132B      MOVW     R3,#+299
   \       0x4E   0x....'....        LDR.W    R2,??DataTable14_2
   \       0x52   0x2101             MOVS     R1,#+1
   \       0x54   0x4630             MOV      R0,R6
   \       0x56   0x....'....        BL       mbedtls_debug_print_msg
    300                  mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
    301                                                  MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
   \       0x5A   0x2232             MOVS     R2,#+50
   \       0x5C   0x2102             MOVS     R1,#+2
   \       0x5E   0x4630             MOV      R0,R6
   \       0x60   0x....'....        BL       mbedtls_ssl_send_alert_message
    302                  return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
   \       0x64   0x....'....        LDR.W    R0,??DataTable14_5  ;; 0xffff8700
   \       0x68   0xE048             B.N      ??ssl_parse_supported_elliptic_curves_1
    303              }
    304          
    305              /* Should never happen unless client duplicates the extension */
    306              if( ssl->handshake->curves != NULL )
   \                     ??ssl_parse_supported_elliptic_curves_3: (+1)
   \       0x6A   0x6BF0             LDR      R0,[R6, #+60]
   \       0x6C   0xF8D0 0x01B4      LDR      R0,[R0, #+436]
   \       0x70   0x2800             CMP      R0,#+0
   \       0x72   0xD012             BEQ.N    ??ssl_parse_supported_elliptic_curves_4
    307              {
    308                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client hello message" ) );
   \       0x74   0x....'....        LDR.W    R0,??DataTable14_4
   \       0x78   0x9000             STR      R0,[SP, #+0]
   \       0x7A   0xF44F 0x739A      MOV      R3,#+308
   \       0x7E   0x....'....        LDR.W    R2,??DataTable14_2
   \       0x82   0x2101             MOVS     R1,#+1
   \       0x84   0x4630             MOV      R0,R6
   \       0x86   0x....'....        BL       mbedtls_debug_print_msg
    309                  mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
    310                                                  MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
   \       0x8A   0x2232             MOVS     R2,#+50
   \       0x8C   0x2102             MOVS     R1,#+2
   \       0x8E   0x4630             MOV      R0,R6
   \       0x90   0x....'....        BL       mbedtls_ssl_send_alert_message
    311                  return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
   \       0x94   0x....'....        LDR.W    R0,??DataTable14_5  ;; 0xffff8700
   \       0x98   0xE030             B.N      ??ssl_parse_supported_elliptic_curves_1
    312              }
    313          
    314              /* Don't allow our peer to make us allocate too much memory,
    315               * and leave room for a final 0 */
    316              our_size = list_size / 2 + 1;
   \                     ??ssl_parse_supported_elliptic_curves_4: (+1)
   \       0x9A   0x46A0             MOV      R8,R4
   \       0x9C   0xEA4F 0x0858      LSR      R8,R8,#+1
   \       0xA0   0xF108 0x0801      ADD      R8,R8,#+1
    317              if( our_size > MBEDTLS_ECP_DP_MAX )
   \       0xA4   0xF1B8 0x0F0D      CMP      R8,#+13
   \       0xA8   0xD301             BCC.N    ??ssl_parse_supported_elliptic_curves_5
    318                  our_size = MBEDTLS_ECP_DP_MAX;
   \       0xAA   0xF04F 0x080C      MOV      R8,#+12
    319          
    320              if( ( curves = mbedtls_calloc( our_size, sizeof( *curves ) ) ) == NULL )
   \                     ??ssl_parse_supported_elliptic_curves_5: (+1)
   \       0xAE   0x2104             MOVS     R1,#+4
   \       0xB0   0x4640             MOV      R0,R8
   \       0xB2   0x....'....        BL       mbedtls_calloc
   \       0xB6   0x0005             MOVS     R5,R0
   \       0xB8   0xD107             BNE.N    ??ssl_parse_supported_elliptic_curves_6
    321              {
    322                  mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
    323                                                  MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
   \       0xBA   0x2250             MOVS     R2,#+80
   \       0xBC   0x2102             MOVS     R1,#+2
   \       0xBE   0x4630             MOV      R0,R6
   \       0xC0   0x....'....        BL       mbedtls_ssl_send_alert_message
    324                  return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
   \       0xC4   0x....'....        LDR.W    R0,??DataTable14_1  ;; 0xffff8100
   \       0xC8   0xE018             B.N      ??ssl_parse_supported_elliptic_curves_1
    325              }
    326          
    327              ssl->handshake->curves = curves;
   \                     ??ssl_parse_supported_elliptic_curves_6: (+1)
   \       0xCA   0x6BF0             LDR      R0,[R6, #+60]
   \       0xCC   0xF8C0 0x51B4      STR      R5,[R0, #+436]
    328          
    329              p = buf + 2;
   \       0xD0   0x1CBE             ADDS     R6,R7,#+2
    330              while( list_size > 0 && our_size > 1 )
   \                     ??ssl_parse_supported_elliptic_curves_7: (+1)
   \       0xD2   0x2C00             CMP      R4,#+0
   \       0xD4   0xD011             BEQ.N    ??ssl_parse_supported_elliptic_curves_8
   \       0xD6   0xF1B8 0x0F02      CMP      R8,#+2
   \       0xDA   0xD30E             BCC.N    ??ssl_parse_supported_elliptic_curves_8
    331              {
    332                  curve_info = mbedtls_ecp_curve_info_from_tls_id( ( p[0] << 8 ) | p[1] );
   \       0xDC   0x7831             LDRB     R1,[R6, #+0]
   \       0xDE   0x7870             LDRB     R0,[R6, #+1]
   \       0xE0   0xEA40 0x2001      ORR      R0,R0,R1, LSL #+8
   \       0xE4   0x....'....        BL       mbedtls_ecp_curve_info_from_tls_id
    333          
    334                  if( curve_info != NULL )
   \       0xE8   0x2800             CMP      R0,#+0
   \       0xEA   0xD003             BEQ.N    ??ssl_parse_supported_elliptic_curves_9
    335                  {
    336                      *curves++ = curve_info;
   \       0xEC   0xF845 0x0B04      STR      R0,[R5], #+4
    337                      our_size--;
   \       0xF0   0xF1A8 0x0801      SUB      R8,R8,#+1
    338                  }
    339          
    340                  list_size -= 2;
   \                     ??ssl_parse_supported_elliptic_curves_9: (+1)
   \       0xF4   0x1EA4             SUBS     R4,R4,#+2
    341                  p += 2;
   \       0xF6   0x1CB6             ADDS     R6,R6,#+2
   \       0xF8   0xE7EB             B.N      ??ssl_parse_supported_elliptic_curves_7
    342              }
    343          
    344              return( 0 );
   \                     ??ssl_parse_supported_elliptic_curves_8: (+1)
   \       0xFA   0x2000             MOVS     R0,#+0
   \                     ??ssl_parse_supported_elliptic_curves_1: (+1)
   \       0xFC   0xE8BD 0x81F6      POP      {R1,R2,R4-R8,PC}  ;; return
    345          }
    346          

   \                                 In section .text, align 2, keep-with-next
    347          static int ssl_parse_supported_point_formats( mbedtls_ssl_context *ssl,
    348                                                        const unsigned char *buf,
    349                                                        size_t len )
    350          {
   \                     ssl_parse_supported_point_formats: (+1)
   \        0x0   0xB51C             PUSH     {R2-R4,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x4608             MOV      R0,R1
    351              size_t list_size;
    352              const unsigned char *p;
    353          
    354              if( len == 0 || (size_t)( buf[0] + 1 ) != len )
   \        0x6   0x2A00             CMP      R2,#+0
   \        0x8   0xD003             BEQ.N    ??ssl_parse_supported_point_formats_0
   \        0xA   0x7801             LDRB     R1,[R0, #+0]
   \        0xC   0x1C49             ADDS     R1,R1,#+1
   \        0xE   0x4291             CMP      R1,R2
   \       0x10   0xD012             BEQ.N    ??ssl_parse_supported_point_formats_1
    355              {
    356                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client hello message" ) );
   \                     ??ssl_parse_supported_point_formats_0: (+1)
   \       0x12   0x....'....        LDR.W    R0,??DataTable14_4
   \       0x16   0x9000             STR      R0,[SP, #+0]
   \       0x18   0xF44F 0x73B2      MOV      R3,#+356
   \       0x1C   0x....'....        LDR.W    R2,??DataTable14_2
   \       0x20   0x2101             MOVS     R1,#+1
   \       0x22   0x4620             MOV      R0,R4
   \       0x24   0x....'....        BL       mbedtls_debug_print_msg
    357                  mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
    358                                                  MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
   \       0x28   0x2232             MOVS     R2,#+50
   \       0x2A   0x2102             MOVS     R1,#+2
   \       0x2C   0x4620             MOV      R0,R4
   \       0x2E   0x....'....        BL       mbedtls_ssl_send_alert_message
    359                  return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
   \       0x32   0x....'....        LDR.W    R0,??DataTable14_5  ;; 0xffff8700
   \       0x36   0xBD16             POP      {R1,R2,R4,PC}
    360              }
    361              list_size = buf[0];
   \                     ??ssl_parse_supported_point_formats_1: (+1)
   \       0x38   0x7801             LDRB     R1,[R0, #+0]
    362          
    363              p = buf + 1;
   \       0x3A   0x1C42             ADDS     R2,R0,#+1
    364              while( list_size > 0 )
   \                     ??ssl_parse_supported_point_formats_2: (+1)
   \       0x3C   0x2900             CMP      R1,#+0
   \       0x3E   0xD007             BEQ.N    ??ssl_parse_supported_point_formats_3
    365              {
    366                  if( p[0] == MBEDTLS_ECP_PF_UNCOMPRESSED ||
    367                      p[0] == MBEDTLS_ECP_PF_COMPRESSED )
   \       0x40   0x7810             LDRB     R0,[R2, #+0]
   \       0x42   0x2800             CMP      R0,#+0
   \       0x44   0xD006             BEQ.N    ??ssl_parse_supported_point_formats_4
   \       0x46   0x2801             CMP      R0,#+1
   \       0x48   0xD004             BEQ.N    ??ssl_parse_supported_point_formats_4
    368                  {
    369          #if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C)
    370                      ssl->handshake->ecdh_ctx.point_format = p[0];
    371          #endif
    372          #if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
    373                      ssl->handshake->ecjpake_ctx.point_format = p[0];
    374          #endif
    375                      MBEDTLS_SSL_DEBUG_MSG( 4, ( "point format selected: %d", p[0] ) );
    376                      return( 0 );
    377                  }
    378          
    379                  list_size--;
   \       0x4A   0x1E49             SUBS     R1,R1,#+1
    380                  p++;
   \       0x4C   0x1C52             ADDS     R2,R2,#+1
   \       0x4E   0xE7F5             B.N      ??ssl_parse_supported_point_formats_2
    381              }
    382          
    383              return( 0 );
   \                     ??ssl_parse_supported_point_formats_3: (+1)
   \       0x50   0x2000             MOVS     R0,#+0
   \       0x52   0xBD16             POP      {R1,R2,R4,PC}    ;; return
   \                     ??ssl_parse_supported_point_formats_4: (+1)
   \       0x54   0x6BE1             LDR      R1,[R4, #+60]
   \       0x56   0xF8C1 0x015C      STR      R0,[R1, #+348]
   \       0x5A   0x7810             LDRB     R0,[R2, #+0]
   \       0x5C   0x9001             STR      R0,[SP, #+4]
   \       0x5E   0x....'....        LDR.W    R0,??DataTable14_13
   \       0x62   0x9000             STR      R0,[SP, #+0]
   \       0x64   0xF240 0x1377      MOVW     R3,#+375
   \       0x68   0x....'....        LDR.W    R2,??DataTable14_2
   \       0x6C   0x2104             MOVS     R1,#+4
   \       0x6E   0x4620             MOV      R0,R4
   \       0x70   0x....'....        BL       mbedtls_debug_print_msg
   \       0x74   0x2000             MOVS     R0,#+0
   \       0x76   0xBD16             POP      {R1,R2,R4,PC}
    384          }
    385          #endif /* MBEDTLS_ECDH_C || MBEDTLS_ECDSA_C ||
    386                    MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */
    387          
    388          #if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
    389          static int ssl_parse_ecjpake_kkpp( mbedtls_ssl_context *ssl,
    390                                             const unsigned char *buf,
    391                                             size_t len )
    392          {
    393              int ret;
    394          
    395              if( mbedtls_ecjpake_check( &ssl->handshake->ecjpake_ctx ) != 0 )
    396              {
    397                  MBEDTLS_SSL_DEBUG_MSG( 3, ( "skip ecjpake kkpp extension" ) );
    398                  return( 0 );
    399              }
    400          
    401              if( ( ret = mbedtls_ecjpake_read_round_one( &ssl->handshake->ecjpake_ctx,
    402                                                          buf, len ) ) != 0 )
    403              {
    404                  MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ecjpake_read_round_one", ret );
    405                  mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
    406                                                  MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
    407                  return( ret );
    408              }
    409          
    410              /* Only mark the extension as OK when we're sure it is */
    411              ssl->handshake->cli_exts |= MBEDTLS_TLS_EXT_ECJPAKE_KKPP_OK;
    412          
    413              return( 0 );
    414          }
    415          #endif /* MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */
    416          
    417          #if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)

   \                                 In section .text, align 2, keep-with-next
    418          static int ssl_parse_max_fragment_length_ext( mbedtls_ssl_context *ssl,
    419                                                        const unsigned char *buf,
    420                                                        size_t len )
    421          {
   \                     ssl_parse_max_fragment_length_ext: (+1)
   \        0x0   0xB51C             PUSH     {R2-R4,LR}
   \        0x2   0x4604             MOV      R4,R0
    422              if( len != 1 || buf[0] >= MBEDTLS_SSL_MAX_FRAG_LEN_INVALID )
   \        0x4   0x2A01             CMP      R2,#+1
   \        0x6   0xD102             BNE.N    ??ssl_parse_max_fragment_length_ext_0
   \        0x8   0x7808             LDRB     R0,[R1, #+0]
   \        0xA   0x2805             CMP      R0,#+5
   \        0xC   0xDB12             BLT.N    ??ssl_parse_max_fragment_length_ext_1
    423              {
    424                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client hello message" ) );
   \                     ??ssl_parse_max_fragment_length_ext_0: (+1)
   \        0xE   0x....'....        LDR.W    R0,??DataTable14_4
   \       0x12   0x9000             STR      R0,[SP, #+0]
   \       0x14   0xF44F 0x73D4      MOV      R3,#+424
   \       0x18   0x....'....        LDR.W    R2,??DataTable14_2
   \       0x1C   0x2101             MOVS     R1,#+1
   \       0x1E   0x4620             MOV      R0,R4
   \       0x20   0x....'....        BL       mbedtls_debug_print_msg
    425                  mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
    426                                                  MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
   \       0x24   0x222F             MOVS     R2,#+47
   \       0x26   0x2102             MOVS     R1,#+2
   \       0x28   0x4620             MOV      R0,R4
   \       0x2A   0x....'....        BL       mbedtls_ssl_send_alert_message
    427                  return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
   \       0x2E   0x....'....        LDR.W    R0,??DataTable14_5  ;; 0xffff8700
   \       0x32   0xBD16             POP      {R1,R2,R4,PC}
    428              }
    429          
    430              ssl->session_negotiate->mfl_code = buf[0];
   \                     ??ssl_parse_max_fragment_length_ext_1: (+1)
   \       0x34   0x6BA1             LDR      R1,[R4, #+56]
   \       0x36   0xF881 0x0070      STRB     R0,[R1, #+112]
    431          
    432              return( 0 );
   \       0x3A   0x2000             MOVS     R0,#+0
   \       0x3C   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    433          }
    434          #endif /* MBEDTLS_SSL_MAX_FRAGMENT_LENGTH */
    435          
    436          #if defined(MBEDTLS_SSL_TRUNCATED_HMAC)

   \                                 In section .text, align 2, keep-with-next
    437          static int ssl_parse_truncated_hmac_ext( mbedtls_ssl_context *ssl,
    438                                                   const unsigned char *buf,
    439                                                   size_t len )
    440          {
   \                     ssl_parse_truncated_hmac_ext: (+1)
   \        0x0   0xB51C             PUSH     {R2-R4,LR}
   \        0x2   0x4604             MOV      R4,R0
    441              if( len != 0 )
   \        0x4   0x2A00             CMP      R2,#+0
   \        0x6   0xD012             BEQ.N    ??ssl_parse_truncated_hmac_ext_0
    442              {
    443                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client hello message" ) );
   \        0x8   0x....'....        LDR.W    R0,??DataTable14_4
   \        0xC   0x9000             STR      R0,[SP, #+0]
   \        0xE   0xF240 0x13BB      MOVW     R3,#+443
   \       0x12   0x....'....        LDR.W    R2,??DataTable14_2
   \       0x16   0x2101             MOVS     R1,#+1
   \       0x18   0x4620             MOV      R0,R4
   \       0x1A   0x....'....        BL       mbedtls_debug_print_msg
    444                  mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
    445                                                  MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
   \       0x1E   0x2232             MOVS     R2,#+50
   \       0x20   0x2102             MOVS     R1,#+2
   \       0x22   0x4620             MOV      R0,R4
   \       0x24   0x....'....        BL       mbedtls_ssl_send_alert_message
    446                  return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
   \       0x28   0x....'....        LDR.W    R0,??DataTable14_5  ;; 0xffff8700
   \       0x2C   0xBD16             POP      {R1,R2,R4,PC}
    447              }
    448          
    449              ((void) buf);
    450          
    451              if( ssl->conf->trunc_hmac == MBEDTLS_SSL_TRUNC_HMAC_ENABLED )
   \                     ??ssl_parse_truncated_hmac_ext_0: (+1)
   \       0x2E   0x6820             LDR      R0,[R4, #+0]
   \       0x30   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \       0x34   0xF3C0 0x3080      UBFX     R0,R0,#+14,#+1
   \       0x38   0x2800             CMP      R0,#+0
   \       0x3A   0xD002             BEQ.N    ??ssl_parse_truncated_hmac_ext_1
    452                  ssl->session_negotiate->trunc_hmac = MBEDTLS_SSL_TRUNC_HMAC_ENABLED;
   \       0x3C   0x2001             MOVS     R0,#+1
   \       0x3E   0x6BA1             LDR      R1,[R4, #+56]
   \       0x40   0x6748             STR      R0,[R1, #+116]
    453          
    454              return( 0 );
   \                     ??ssl_parse_truncated_hmac_ext_1: (+1)
   \       0x42   0x2000             MOVS     R0,#+0
   \       0x44   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    455          }
    456          #endif /* MBEDTLS_SSL_TRUNCATED_HMAC */
    457          
    458          #if defined(MBEDTLS_SSL_ENCRYPT_THEN_MAC)

   \                                 In section .text, align 2, keep-with-next
    459          static int ssl_parse_encrypt_then_mac_ext( mbedtls_ssl_context *ssl,
    460                                                const unsigned char *buf,
    461                                                size_t len )
    462          {
   \                     ssl_parse_encrypt_then_mac_ext: (+1)
   \        0x0   0xB51C             PUSH     {R2-R4,LR}
   \        0x2   0x4604             MOV      R4,R0
    463              if( len != 0 )
   \        0x4   0x2A00             CMP      R2,#+0
   \        0x6   0xD012             BEQ.N    ??ssl_parse_encrypt_then_mac_ext_0
    464              {
    465                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client hello message" ) );
   \        0x8   0x....'....        LDR.W    R0,??DataTable14_4
   \        0xC   0x9000             STR      R0,[SP, #+0]
   \        0xE   0xF240 0x13D1      MOVW     R3,#+465
   \       0x12   0x....'....        LDR.W    R2,??DataTable14_2
   \       0x16   0x2101             MOVS     R1,#+1
   \       0x18   0x4620             MOV      R0,R4
   \       0x1A   0x....'....        BL       mbedtls_debug_print_msg
    466                  mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
    467                                                  MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
   \       0x1E   0x2232             MOVS     R2,#+50
   \       0x20   0x2102             MOVS     R1,#+2
   \       0x22   0x4620             MOV      R0,R4
   \       0x24   0x....'....        BL       mbedtls_ssl_send_alert_message
    468                  return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
   \       0x28   0x....'....        LDR.W    R0,??DataTable14_5  ;; 0xffff8700
   \       0x2C   0xBD16             POP      {R1,R2,R4,PC}
    469              }
    470          
    471              ((void) buf);
    472          
    473              if( ssl->conf->encrypt_then_mac == MBEDTLS_SSL_ETM_ENABLED &&
    474                  ssl->minor_ver != MBEDTLS_SSL_MINOR_VERSION_0 )
   \                     ??ssl_parse_encrypt_then_mac_ext_0: (+1)
   \       0x2E   0x6820             LDR      R0,[R4, #+0]
   \       0x30   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \       0x34   0xF3C0 0x2040      UBFX     R0,R0,#+9,#+1
   \       0x38   0x2800             CMP      R0,#+0
   \       0x3A   0xD005             BEQ.N    ??ssl_parse_encrypt_then_mac_ext_1
   \       0x3C   0x6960             LDR      R0,[R4, #+20]
   \       0x3E   0x2800             CMP      R0,#+0
   \       0x40   0xD002             BEQ.N    ??ssl_parse_encrypt_then_mac_ext_1
    475              {
    476                  ssl->session_negotiate->encrypt_then_mac = MBEDTLS_SSL_ETM_ENABLED;
   \       0x42   0x2001             MOVS     R0,#+1
   \       0x44   0x6BA1             LDR      R1,[R4, #+56]
   \       0x46   0x6788             STR      R0,[R1, #+120]
    477              }
    478          
    479              return( 0 );
   \                     ??ssl_parse_encrypt_then_mac_ext_1: (+1)
   \       0x48   0x2000             MOVS     R0,#+0
   \       0x4A   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    480          }
    481          #endif /* MBEDTLS_SSL_ENCRYPT_THEN_MAC */
    482          
    483          #if defined(MBEDTLS_SSL_EXTENDED_MASTER_SECRET)

   \                                 In section .text, align 2, keep-with-next
    484          static int ssl_parse_extended_ms_ext( mbedtls_ssl_context *ssl,
    485                                                const unsigned char *buf,
    486                                                size_t len )
    487          {
   \                     ssl_parse_extended_ms_ext: (+1)
   \        0x0   0xB51C             PUSH     {R2-R4,LR}
   \        0x2   0x4604             MOV      R4,R0
    488              if( len != 0 )
   \        0x4   0x2A00             CMP      R2,#+0
   \        0x6   0xD012             BEQ.N    ??ssl_parse_extended_ms_ext_0
    489              {
    490                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client hello message" ) );
   \        0x8   0x....'....        LDR.W    R0,??DataTable14_4
   \        0xC   0x9000             STR      R0,[SP, #+0]
   \        0xE   0xF44F 0x73F5      MOV      R3,#+490
   \       0x12   0x....'....        LDR.W    R2,??DataTable14_2
   \       0x16   0x2101             MOVS     R1,#+1
   \       0x18   0x4620             MOV      R0,R4
   \       0x1A   0x....'....        BL       mbedtls_debug_print_msg
    491                  mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
    492                                                  MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
   \       0x1E   0x2232             MOVS     R2,#+50
   \       0x20   0x2102             MOVS     R1,#+2
   \       0x22   0x4620             MOV      R0,R4
   \       0x24   0x....'....        BL       mbedtls_ssl_send_alert_message
    493                  return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
   \       0x28   0x....'....        LDR.W    R0,??DataTable14_5  ;; 0xffff8700
   \       0x2C   0xBD16             POP      {R1,R2,R4,PC}
    494              }
    495          
    496              ((void) buf);
    497          
    498              if( ssl->conf->extended_ms == MBEDTLS_SSL_EXTENDED_MS_ENABLED &&
    499                  ssl->minor_ver != MBEDTLS_SSL_MINOR_VERSION_0 )
   \                     ??ssl_parse_extended_ms_ext_0: (+1)
   \       0x2E   0x6820             LDR      R0,[R4, #+0]
   \       0x30   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \       0x34   0xF3C0 0x2080      UBFX     R0,R0,#+10,#+1
   \       0x38   0x2800             CMP      R0,#+0
   \       0x3A   0xD006             BEQ.N    ??ssl_parse_extended_ms_ext_1
   \       0x3C   0x6960             LDR      R0,[R4, #+20]
   \       0x3E   0x2800             CMP      R0,#+0
   \       0x40   0xD003             BEQ.N    ??ssl_parse_extended_ms_ext_1
    500              {
    501                  ssl->handshake->extended_ms = MBEDTLS_SSL_EXTENDED_MS_ENABLED;
   \       0x42   0x2001             MOVS     R0,#+1
   \       0x44   0x6BE1             LDR      R1,[R4, #+60]
   \       0x46   0xF8C1 0x06D4      STR      R0,[R1, #+1748]
    502              }
    503          
    504              return( 0 );
   \                     ??ssl_parse_extended_ms_ext_1: (+1)
   \       0x4A   0x2000             MOVS     R0,#+0
   \       0x4C   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    505          }
    506          #endif /* MBEDTLS_SSL_EXTENDED_MASTER_SECRET */
    507          
    508          #if defined(MBEDTLS_SSL_SESSION_TICKETS)

   \                                 In section .text, align 2, keep-with-next
    509          static int ssl_parse_session_ticket_ext( mbedtls_ssl_context *ssl,
    510                                                   unsigned char *buf,
    511                                                   size_t len )
    512          {
   \                     ssl_parse_session_ticket_ext: (+1)
   \        0x0   0xB5F0             PUSH     {R4-R7,LR}
   \        0x2   0xB0A1             SUB      SP,SP,#+132
   \        0x4   0x4605             MOV      R5,R0
   \        0x6   0x460E             MOV      R6,R1
   \        0x8   0x4614             MOV      R4,R2
    513              int ret;
    514              mbedtls_ssl_session session;
    515          
    516              mbedtls_ssl_session_init( &session );
   \        0xA   0xA802             ADD      R0,SP,#+8
   \        0xC   0x....'....        BL       mbedtls_ssl_session_init
    517          
    518              if( ssl->conf->f_ticket_parse == NULL ||
    519                  ssl->conf->f_ticket_write == NULL )
   \       0x10   0x6828             LDR      R0,[R5, #+0]
   \       0x12   0x6D40             LDR      R0,[R0, #+84]
   \       0x14   0x2800             CMP      R0,#+0
   \       0x16   0xD059             BEQ.N    ??ssl_parse_session_ticket_ext_0
   \       0x18   0x6828             LDR      R0,[R5, #+0]
   \       0x1A   0x6D00             LDR      R0,[R0, #+80]
   \       0x1C   0x2800             CMP      R0,#+0
   \       0x1E   0xD055             BEQ.N    ??ssl_parse_session_ticket_ext_0
    520              {
    521                  return( 0 );
    522              }
    523          
    524              /* Remember the client asked us to send a new ticket */
    525              ssl->handshake->new_session_ticket = 1;
   \       0x20   0x2001             MOVS     R0,#+1
   \       0x22   0x6BE9             LDR      R1,[R5, #+60]
   \       0x24   0xF8C1 0x06D0      STR      R0,[R1, #+1744]
    526          
    527              MBEDTLS_SSL_DEBUG_MSG( 3, ( "ticket length: %d", len ) );
   \       0x28   0x....'....        LDR.W    R7,??DataTable14_2
   \       0x2C   0x9401             STR      R4,[SP, #+4]
   \       0x2E   0x....'....        LDR.W    R0,??DataTable14_14
   \       0x32   0x9000             STR      R0,[SP, #+0]
   \       0x34   0xF240 0x230F      MOVW     R3,#+527
   \       0x38   0x463A             MOV      R2,R7
   \       0x3A   0x2103             MOVS     R1,#+3
   \       0x3C   0x4628             MOV      R0,R5
   \       0x3E   0x....'....        BL       mbedtls_debug_print_msg
    528          
    529              if( len == 0 )
   \       0x42   0x2C00             CMP      R4,#+0
   \       0x44   0xD042             BEQ.N    ??ssl_parse_session_ticket_ext_0
    530                  return( 0 );
    531          
    532          #if defined(MBEDTLS_SSL_RENEGOTIATION)
    533              if( ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE )
   \       0x46   0x68A8             LDR      R0,[R5, #+8]
   \       0x48   0x2800             CMP      R0,#+0
   \       0x4A   0xD00B             BEQ.N    ??ssl_parse_session_ticket_ext_1
    534              {
    535                  MBEDTLS_SSL_DEBUG_MSG( 3, ( "ticket rejected: renegotiating" ) );
   \       0x4C   0x....'....        LDR.W    R0,??DataTable14_15
   \       0x50   0x9000             STR      R0,[SP, #+0]
   \       0x52   0xF240 0x2317      MOVW     R3,#+535
   \       0x56   0x463A             MOV      R2,R7
   \       0x58   0x2103             MOVS     R1,#+3
   \       0x5A   0x4628             MOV      R0,R5
   \       0x5C   0x....'....        BL       mbedtls_debug_print_msg
    536                  return( 0 );
   \       0x60   0x2000             MOVS     R0,#+0
   \       0x62   0xE05D             B.N      ??ssl_parse_session_ticket_ext_2
    537              }
    538          #endif /* MBEDTLS_SSL_RENEGOTIATION */
    539          
    540              /*
    541               * Failures are ok: just ignore the ticket and proceed.
    542               */
    543              if( ( ret = ssl->conf->f_ticket_parse( ssl->conf->p_ticket, &session,
    544                                                     buf, len ) ) != 0 )
   \                     ??ssl_parse_session_ticket_ext_1: (+1)
   \       0x64   0x4623             MOV      R3,R4
   \       0x66   0x4632             MOV      R2,R6
   \       0x68   0xA902             ADD      R1,SP,#+8
   \       0x6A   0x6828             LDR      R0,[R5, #+0]
   \       0x6C   0x6D80             LDR      R0,[R0, #+88]
   \       0x6E   0x682C             LDR      R4,[R5, #+0]
   \       0x70   0x6D64             LDR      R4,[R4, #+84]
   \       0x72   0x47A0             BLX      R4
   \       0x74   0x0004             MOVS     R4,R0
   \       0x76   0xD02B             BEQ.N    ??ssl_parse_session_ticket_ext_3
    545              {
    546                  mbedtls_ssl_session_free( &session );
   \       0x78   0xA802             ADD      R0,SP,#+8
   \       0x7A   0x....'....        BL       mbedtls_ssl_session_free
    547          
    548                  if( ret == MBEDTLS_ERR_SSL_INVALID_MAC )
   \       0x7E   0xF514 0x4FE3      CMN      R4,#+29056
   \       0x82   0xD10A             BNE.N    ??ssl_parse_session_ticket_ext_4
    549                      MBEDTLS_SSL_DEBUG_MSG( 3, ( "ticket is not authentic" ) );
   \       0x84   0x....'....        LDR.W    R0,??DataTable14_16
   \       0x88   0x9000             STR      R0,[SP, #+0]
   \       0x8A   0xF240 0x2325      MOVW     R3,#+549
   \       0x8E   0x463A             MOV      R2,R7
   \       0x90   0x2103             MOVS     R1,#+3
   \       0x92   0x4628             MOV      R0,R5
   \       0x94   0x....'....        BL       mbedtls_debug_print_msg
   \       0x98   0xE018             B.N      ??ssl_parse_session_ticket_ext_0
    550                  else if( ret == MBEDTLS_ERR_SSL_SESSION_TICKET_EXPIRED )
   \                     ??ssl_parse_session_ticket_ext_4: (+1)
   \       0x9A   0xF514 0x4FDB      CMN      R4,#+28032
   \       0x9E   0xD10A             BNE.N    ??ssl_parse_session_ticket_ext_5
    551                      MBEDTLS_SSL_DEBUG_MSG( 3, ( "ticket is expired" ) );
   \       0xA0   0x....'....        LDR.W    R0,??DataTable14_17
   \       0xA4   0x9000             STR      R0,[SP, #+0]
   \       0xA6   0xF240 0x2327      MOVW     R3,#+551
   \       0xAA   0x463A             MOV      R2,R7
   \       0xAC   0x2103             MOVS     R1,#+3
   \       0xAE   0x4628             MOV      R0,R5
   \       0xB0   0x....'....        BL       mbedtls_debug_print_msg
   \       0xB4   0xE00A             B.N      ??ssl_parse_session_ticket_ext_0
    552                  else
    553                      MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_ticket_parse", ret );
   \                     ??ssl_parse_session_ticket_ext_5: (+1)
   \       0xB6   0x9401             STR      R4,[SP, #+4]
   \       0xB8   0x....'....        LDR.W    R0,??DataTable14_18
   \       0xBC   0x9000             STR      R0,[SP, #+0]
   \       0xBE   0xF240 0x2329      MOVW     R3,#+553
   \       0xC2   0x463A             MOV      R2,R7
   \       0xC4   0x2101             MOVS     R1,#+1
   \       0xC6   0x4628             MOV      R0,R5
   \       0xC8   0x....'....        BL       mbedtls_debug_print_ret
    554          
    555                  return( 0 );
   \                     ??ssl_parse_session_ticket_ext_0: (+1)
   \       0xCC   0x2000             MOVS     R0,#+0
   \       0xCE   0xE027             B.N      ??ssl_parse_session_ticket_ext_2
    556              }
    557          
    558              /*
    559               * Keep the session ID sent by the client, since we MUST send it back to
    560               * inform them we're accepting the ticket  (RFC 5077 section 3.4)
    561               */
    562              session.id_len = ssl->session_negotiate->id_len;
   \                     ??ssl_parse_session_ticket_ext_3: (+1)
   \       0xD0   0x6BA8             LDR      R0,[R5, #+56]
   \       0xD2   0x6880             LDR      R0,[R0, #+8]
   \       0xD4   0x9004             STR      R0,[SP, #+16]
    563              memcpy( &session.id, ssl->session_negotiate->id, session.id_len );
   \       0xD6   0x4602             MOV      R2,R0
   \       0xD8   0x6BA8             LDR      R0,[R5, #+56]
   \       0xDA   0xF100 0x010C      ADD      R1,R0,#+12
   \       0xDE   0xA805             ADD      R0,SP,#+20
   \       0xE0   0x....'....        BL       __aeabi_memcpy4
    564          
    565              mbedtls_ssl_session_free( ssl->session_negotiate );
   \       0xE4   0x6BA8             LDR      R0,[R5, #+56]
   \       0xE6   0x....'....        BL       mbedtls_ssl_session_free
    566              memcpy( ssl->session_negotiate, &session, sizeof( mbedtls_ssl_session ) );
   \       0xEA   0x227C             MOVS     R2,#+124
   \       0xEC   0xA902             ADD      R1,SP,#+8
   \       0xEE   0x6BA8             LDR      R0,[R5, #+56]
   \       0xF0   0x....'....        BL       __aeabi_memcpy4
    567          
    568              /* Zeroize instead of free as we copied the content */
    569              mbedtls_platform_zeroize( &session, sizeof( mbedtls_ssl_session ) );
   \       0xF4   0x217C             MOVS     R1,#+124
   \       0xF6   0xA802             ADD      R0,SP,#+8
   \       0xF8   0x....'....        BL       mbedtls_platform_zeroize
    570          
    571              MBEDTLS_SSL_DEBUG_MSG( 3, ( "session successfully restored from ticket" ) );
   \       0xFC   0x....'....        LDR.W    R0,??DataTable14_19
   \      0x100   0x9000             STR      R0,[SP, #+0]
   \      0x102   0xF240 0x233B      MOVW     R3,#+571
   \      0x106   0x463A             MOV      R2,R7
   \      0x108   0x2103             MOVS     R1,#+3
   \      0x10A   0x4628             MOV      R0,R5
   \      0x10C   0x....'....        BL       mbedtls_debug_print_msg
    572          
    573              ssl->handshake->resume = 1;
   \      0x110   0x2001             MOVS     R0,#+1
   \      0x112   0x6BE9             LDR      R1,[R5, #+60]
   \      0x114   0xF8C1 0x06C0      STR      R0,[R1, #+1728]
    574          
    575              /* Don't send a new ticket after all, this one is OK */
    576              ssl->handshake->new_session_ticket = 0;
   \      0x118   0x2000             MOVS     R0,#+0
   \      0x11A   0x6BE9             LDR      R1,[R5, #+60]
   \      0x11C   0xF8C1 0x06D0      STR      R0,[R1, #+1744]
    577          
    578              return( 0 );
   \                     ??ssl_parse_session_ticket_ext_2: (+1)
   \      0x120   0xB021             ADD      SP,SP,#+132
   \      0x122   0xBDF0             POP      {R4-R7,PC}       ;; return
    579          }
    580          #endif /* MBEDTLS_SSL_SESSION_TICKETS */
    581          
    582          #if defined(MBEDTLS_SSL_ALPN)

   \                                 In section .text, align 2, keep-with-next
    583          static int ssl_parse_alpn_ext( mbedtls_ssl_context *ssl,
    584                                         const unsigned char *buf, size_t len )
    585          {
   \                     ssl_parse_alpn_ext: (+1)
   \        0x0   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \        0x4   0x4604             MOV      R4,R0
    586              size_t list_len, cur_len, ours_len;
    587              const unsigned char *theirs, *start, *end;
    588              const char **ours;
    589          
    590              /* If ALPN not configured, just ignore the extension */
    591              if( ssl->conf->alpn_list == NULL )
   \        0x6   0x6820             LDR      R0,[R4, #+0]
   \        0x8   0xF8D0 0x00A4      LDR      R0,[R0, #+164]
   \        0xC   0x2800             CMP      R0,#+0
   \        0xE   0xD101             BNE.N    ??ssl_parse_alpn_ext_0
    592                  return( 0 );
   \       0x10   0x2000             MOVS     R0,#+0
   \       0x12   0xE041             B.N      ??ssl_parse_alpn_ext_1
    593          
    594              /*
    595               * opaque ProtocolName<1..2^8-1>;
    596               *
    597               * struct {
    598               *     ProtocolName protocol_name_list<2..2^16-1>
    599               * } ProtocolNameList;
    600               */
    601          
    602              /* Min length is 2 (list_len) + 1 (name_len) + 1 (name) */
    603              if( len < 4 )
   \                     ??ssl_parse_alpn_ext_0: (+1)
   \       0x14   0x2A04             CMP      R2,#+4
   \       0x16   0xD314             BCC.N    ??ssl_parse_alpn_ext_2
    604              {
    605                  mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
    606                                                  MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
    607                  return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
    608              }
    609          
    610              list_len = ( buf[0] << 8 ) | buf[1];
    611              if( list_len != len - 2 )
   \       0x18   0x7808             LDRB     R0,[R1, #+0]
   \       0x1A   0x784B             LDRB     R3,[R1, #+1]
   \       0x1C   0xEA43 0x2300      ORR      R3,R3,R0, LSL #+8
   \       0x20   0x1E90             SUBS     R0,R2,#+2
   \       0x22   0x4283             CMP      R3,R0
   \       0x24   0xD10D             BNE.N    ??ssl_parse_alpn_ext_2
    612              {
    613                  mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
    614                                                  MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
    615                  return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
    616              }
    617          
    618              /*
    619               * Validate peer's list (lengths)
    620               */
    621              start = buf + 2;
   \       0x26   0x1C8D             ADDS     R5,R1,#+2
    622              end = buf + len;
   \       0x28   0x188E             ADDS     R6,R1,R2
    623              for( theirs = start; theirs != end; theirs += cur_len )
   \       0x2A   0x4629             MOV      R1,R5
   \       0x2C   0xE002             B.N      ??ssl_parse_alpn_ext_3
    624              {
    625                  cur_len = *theirs++;
    626          
    627                  /* Current identifier must fit in list */
    628                  if( cur_len > (size_t)( end - theirs ) )
    629                  {
    630                      mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
    631                                                      MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
    632                      return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
    633                  }
    634          
    635                  /* Empty strings MUST NOT be included */
    636                  if( cur_len == 0 )
   \                     ??ssl_parse_alpn_ext_4: (+1)
   \       0x2E   0x2800             CMP      R0,#+0
   \       0x30   0xD00F             BEQ.N    ??ssl_parse_alpn_ext_5
   \       0x32   0x4401             ADD      R1,R1,R0
   \                     ??ssl_parse_alpn_ext_3: (+1)
   \       0x34   0x42B1             CMP      R1,R6
   \       0x36   0xD031             BEQ.N    ??ssl_parse_alpn_ext_6
   \       0x38   0xF811 0x0B01      LDRB     R0,[R1], #+1
   \       0x3C   0x1A72             SUBS     R2,R6,R1
   \       0x3E   0x4282             CMP      R2,R0
   \       0x40   0xD2F5             BCS.N    ??ssl_parse_alpn_ext_4
   \                     ??ssl_parse_alpn_ext_2: (+1)
   \       0x42   0x2232             MOVS     R2,#+50
   \       0x44   0x2102             MOVS     R1,#+2
   \       0x46   0x4620             MOV      R0,R4
   \       0x48   0x....'....        BL       mbedtls_ssl_send_alert_message
   \       0x4C   0x....'....        LDR.W    R0,??DataTable14_5  ;; 0xffff8700
   \       0x50   0xE022             B.N      ??ssl_parse_alpn_ext_1
    637                  {
    638                      mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
    639                                                      MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
   \                     ??ssl_parse_alpn_ext_5: (+1)
   \       0x52   0x222F             MOVS     R2,#+47
   \       0x54   0x2102             MOVS     R1,#+2
   \       0x56   0x4620             MOV      R0,R4
   \       0x58   0x....'....        BL       mbedtls_ssl_send_alert_message
    640                      return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
   \       0x5C   0x....'....        LDR.W    R0,??DataTable14_5  ;; 0xffff8700
   \       0x60   0xE01A             B.N      ??ssl_parse_alpn_ext_1
    641                  }
    642              }
    643          
    644              /*
    645               * Use our order of preference
    646               */
    647              for( ours = ssl->conf->alpn_list; *ours != NULL; ours++ )
    648              {
    649                  ours_len = strlen( *ours );
    650                  for( theirs = start; theirs != end; theirs += cur_len )
   \                     ??ssl_parse_alpn_ext_7: (+1)
   \       0x62   0x4447             ADD      R7,R7,R8
   \                     ??ssl_parse_alpn_ext_8: (+1)
   \       0x64   0x42B7             CMP      R7,R6
   \       0x66   0xD01D             BEQ.N    ??ssl_parse_alpn_ext_9
    651                  {
    652                      cur_len = *theirs++;
   \       0x68   0xF817 0x8B01      LDRB     R8,[R7], #+1
    653          
    654                      if( cur_len == ours_len &&
    655                          memcmp( theirs, *ours, cur_len ) == 0 )
   \       0x6C   0x45D0             CMP      R8,R10
   \       0x6E   0xD1F8             BNE.N    ??ssl_parse_alpn_ext_7
   \       0x70   0x4642             MOV      R2,R8
   \       0x72   0xF8D9 0x1000      LDR      R1,[R9, #+0]
   \       0x76   0x4638             MOV      R0,R7
   \       0x78   0x....'....        BL       memcmp
   \       0x7C   0x2800             CMP      R0,#+0
   \       0x7E   0xD1F0             BNE.N    ??ssl_parse_alpn_ext_7
    656                      {
    657                          ssl->alpn_chosen = *ours;
   \       0x80   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \       0x84   0xF8C4 0x00E8      STR      R0,[R4, #+232]
    658                          return( 0 );
   \       0x88   0x2000             MOVS     R0,#+0
   \       0x8A   0xE005             B.N      ??ssl_parse_alpn_ext_1
    659                      }
    660                  }
    661              }
    662          
    663              /* If we get there, no match was found */
    664              mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
    665                                      MBEDTLS_SSL_ALERT_MSG_NO_APPLICATION_PROTOCOL );
   \                     ??ssl_parse_alpn_ext_10: (+1)
   \       0x8C   0x2278             MOVS     R2,#+120
   \       0x8E   0x2102             MOVS     R1,#+2
   \       0x90   0x4620             MOV      R0,R4
   \       0x92   0x....'....        BL       mbedtls_ssl_send_alert_message
    666              return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
   \       0x96   0x....             LDR.N    R0,??DataTable14_5  ;; 0xffff8700
   \                     ??ssl_parse_alpn_ext_1: (+1)
   \       0x98   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
   \                     ??ssl_parse_alpn_ext_6: (+1)
   \       0x9C   0x6820             LDR      R0,[R4, #+0]
   \       0x9E   0xF8D0 0x90A4      LDR      R9,[R0, #+164]
   \       0xA2   0xE001             B.N      ??ssl_parse_alpn_ext_11
   \                     ??ssl_parse_alpn_ext_9: (+1)
   \       0xA4   0xF109 0x0904      ADD      R9,R9,#+4
   \                     ??ssl_parse_alpn_ext_11: (+1)
   \       0xA8   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \       0xAC   0x2800             CMP      R0,#+0
   \       0xAE   0xD0ED             BEQ.N    ??ssl_parse_alpn_ext_10
   \       0xB0   0x....'....        BL       strlen
   \       0xB4   0x4682             MOV      R10,R0
   \       0xB6   0x462F             MOV      R7,R5
   \       0xB8   0xE7D4             B.N      ??ssl_parse_alpn_ext_8
    667          }
    668          #endif /* MBEDTLS_SSL_ALPN */
    669          
    670          /*
    671           * Auxiliary functions for ServerHello parsing and related actions
    672           */
    673          
    674          #if defined(MBEDTLS_X509_CRT_PARSE_C)
    675          /*
    676           * Return 0 if the given key uses one of the acceptable curves, -1 otherwise
    677           */
    678          #if defined(MBEDTLS_ECDSA_C)

   \                                 In section .text, align 2, keep-with-next
    679          static int ssl_check_key_curve( mbedtls_pk_context *pk,
    680                                          const mbedtls_ecp_curve_info **curves )
    681          {
   \                     ssl_check_key_curve: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x4602             MOV      R2,R0
   \        0x4   0x460C             MOV      R4,R1
    682              const mbedtls_ecp_curve_info **crv = curves;
    683              mbedtls_ecp_group_id grp_id = mbedtls_pk_ec( *pk )->grp.id;
   \        0x6   0xE9D2 0x0100      LDRD     R0,R1,[R2, #+0]
   \        0xA   0x....'....        BL       mbedtls_pk_ec
   \        0xE   0x7801             LDRB     R1,[R0, #+0]
   \       0x10   0xE000             B.N      ??ssl_check_key_curve_0
    684          
    685              while( *crv != NULL )
    686              {
    687                  if( (*crv)->grp_id == grp_id )
    688                      return( 0 );
    689                  crv++;
   \                     ??ssl_check_key_curve_1: (+1)
   \       0x12   0x1D24             ADDS     R4,R4,#+4
   \                     ??ssl_check_key_curve_0: (+1)
   \       0x14   0x6820             LDR      R0,[R4, #+0]
   \       0x16   0x2800             CMP      R0,#+0
   \       0x18   0xD004             BEQ.N    ??ssl_check_key_curve_2
   \       0x1A   0x7800             LDRB     R0,[R0, #+0]
   \       0x1C   0x4288             CMP      R0,R1
   \       0x1E   0xD1F8             BNE.N    ??ssl_check_key_curve_1
   \       0x20   0x2000             MOVS     R0,#+0
   \       0x22   0xBD10             POP      {R4,PC}
    690              }
    691          
    692              return( -1 );
   \                     ??ssl_check_key_curve_2: (+1)
   \       0x24   0xF04F 0x30FF      MOV      R0,#-1
   \       0x28   0xBD10             POP      {R4,PC}          ;; return
    693          }
    694          #endif /* MBEDTLS_ECDSA_C */
    695          
    696          /*
    697           * Try picking a certificate for this ciphersuite,
    698           * return 0 on success and -1 on failure.
    699           */

   \                                 In section .text, align 2, keep-with-next
    700          static int ssl_pick_cert( mbedtls_ssl_context *ssl,
    701                                    const mbedtls_ssl_ciphersuite_t * ciphersuite_info )
    702          {
   \                     ssl_pick_cert: (+1)
   \        0x0   0xE92D 0x43FE      PUSH     {R1-R9,LR}
   \        0x4   0x4606             MOV      R6,R0
   \        0x6   0x460F             MOV      R7,R1
    703              mbedtls_ssl_key_cert *cur, *list, *fallback = NULL;
   \        0x8   0x2500             MOVS     R5,#+0
    704              mbedtls_pk_type_t pk_alg =
    705                  mbedtls_ssl_get_ciphersuite_sig_pk_alg( ciphersuite_info );
   \        0xA   0x4638             MOV      R0,R7
   \        0xC   0x....'....        BL       mbedtls_ssl_get_ciphersuite_sig_pk_alg
   \       0x10   0x4681             MOV      R9,R0
    706              uint32_t flags;
    707          
    708          #if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    709              if( ssl->handshake->sni_key_cert != NULL )
   \       0x12   0x6BF0             LDR      R0,[R6, #+60]
   \       0x14   0xF8D0 0x01C8      LDR      R0,[R0, #+456]
   \       0x18   0x2800             CMP      R0,#+0
   \       0x1A   0xD003             BEQ.N    ??ssl_pick_cert_0
    710                  list = ssl->handshake->sni_key_cert;
   \       0x1C   0x6BF0             LDR      R0,[R6, #+60]
   \       0x1E   0xF8D0 0x41C8      LDR      R4,[R0, #+456]
   \       0x22   0xE001             B.N      ??ssl_pick_cert_1
    711              else
    712          #endif
    713                  list = ssl->conf->key_cert;
   \                     ??ssl_pick_cert_0: (+1)
   \       0x24   0x6830             LDR      R0,[R6, #+0]
   \       0x26   0x6E84             LDR      R4,[R0, #+104]
    714          
    715              if( pk_alg == MBEDTLS_PK_NONE )
   \                     ??ssl_pick_cert_1: (+1)
   \       0x28   0x4648             MOV      R0,R9
   \       0x2A   0x2800             CMP      R0,#+0
   \       0x2C   0xD101             BNE.N    ??ssl_pick_cert_2
    716                  return( 0 );
   \       0x2E   0x4628             MOV      R0,R5
   \       0x30   0xE075             B.N      ??ssl_pick_cert_3
    717          
    718              MBEDTLS_SSL_DEBUG_MSG( 3, ( "ciphersuite requires certificate" ) );
   \                     ??ssl_pick_cert_2: (+1)
   \       0x32   0x....'....        LDR.W    R8,??DataTable14_2
   \       0x36   0x....             LDR.N    R0,??DataTable14_20
   \       0x38   0x9000             STR      R0,[SP, #+0]
   \       0x3A   0xF240 0x23CE      MOVW     R3,#+718
   \       0x3E   0x4642             MOV      R2,R8
   \       0x40   0x2103             MOVS     R1,#+3
   \       0x42   0x4630             MOV      R0,R6
   \       0x44   0x....'....        BL       mbedtls_debug_print_msg
    719          
    720              if( list == NULL )
   \       0x48   0x2C00             CMP      R4,#+0
   \       0x4A   0xD120             BNE.N    ??ssl_pick_cert_4
    721              {
    722                  MBEDTLS_SSL_DEBUG_MSG( 3, ( "server has no certificate" ) );
   \       0x4C   0x....             LDR.N    R0,??DataTable14_21
   \       0x4E   0x9000             STR      R0,[SP, #+0]
   \       0x50   0xF240 0x23D2      MOVW     R3,#+722
   \       0x54   0x4642             MOV      R2,R8
   \       0x56   0x2103             MOVS     R1,#+3
   \       0x58   0x4630             MOV      R0,R6
   \       0x5A   0x....'....        BL       mbedtls_debug_print_msg
    723                  return( -1 );
   \       0x5E   0xF04F 0x30FF      MOV      R0,#-1
   \       0x62   0xE05C             B.N      ??ssl_pick_cert_3
    724              }
    725          
    726              for( cur = list; cur != NULL; cur = cur->next )
    727              {
    728                  MBEDTLS_SSL_DEBUG_CRT( 3, "candidate certificate chain, certificate",
    729                                    cur->cert );
    730          
    731                  if( ! mbedtls_pk_can_do( &cur->cert->pk, pk_alg ) )
    732                  {
    733                      MBEDTLS_SSL_DEBUG_MSG( 3, ( "certificate mismatch: key type" ) );
    734                      continue;
    735                  }
    736          
    737                  /*
    738                   * This avoids sending the client a cert it'll reject based on
    739                   * keyUsage or other extensions.
    740                   *
    741                   * It also allows the user to provision different certificates for
    742                   * different uses based on keyUsage, eg if they want to avoid signing
    743                   * and decrypting with the same RSA key.
    744                   */
    745                  if( mbedtls_ssl_check_cert_usage( cur->cert, ciphersuite_info,
    746                                            MBEDTLS_SSL_IS_SERVER, &flags ) != 0 )
    747                  {
    748                      MBEDTLS_SSL_DEBUG_MSG( 3, ( "certificate mismatch: "
    749                                          "(extended) key usage extension" ) );
    750                      continue;
    751                  }
    752          
    753          #if defined(MBEDTLS_ECDSA_C)
    754                  if( pk_alg == MBEDTLS_PK_ECDSA &&
    755                      ssl_check_key_curve( &cur->cert->pk, ssl->handshake->curves ) != 0 )
    756                  {
    757                      MBEDTLS_SSL_DEBUG_MSG( 3, ( "certificate mismatch: elliptic curve" ) );
    758                      continue;
    759                  }
    760          #endif
    761          
    762                  /*
    763                   * Try to select a SHA-1 certificate for pre-1.2 clients, but still
    764                   * present them a SHA-higher cert rather than failing if it's the only
    765                   * one we got that satisfies the other conditions.
    766                   */
    767                  if( ssl->minor_ver < MBEDTLS_SSL_MINOR_VERSION_3 &&
    768                      cur->cert->sig_md != MBEDTLS_MD_SHA1 )
   \                     ??ssl_pick_cert_5: (+1)
   \       0x64   0x6970             LDR      R0,[R6, #+20]
   \       0x66   0x2803             CMP      R0,#+3
   \       0x68   0xDA5B             BGE.N    ??ssl_pick_cert_6
   \       0x6A   0x6820             LDR      R0,[R4, #+0]
   \       0x6C   0xF890 0x0128      LDRB     R0,[R0, #+296]
   \       0x70   0x2804             CMP      R0,#+4
   \       0x72   0xD056             BEQ.N    ??ssl_pick_cert_6
    769                  {
    770                      if( fallback == NULL )
   \       0x74   0x2D00             CMP      R5,#+0
   \       0x76   0xD100             BNE.N    ??ssl_pick_cert_7
    771                          fallback = cur;
   \       0x78   0x4625             MOV      R5,R4
    772                      {
    773                          MBEDTLS_SSL_DEBUG_MSG( 3, ( "certificate not preferred: "
    774                                              "sha-2 with pre-TLS 1.2 client" ) );
   \                     ??ssl_pick_cert_7: (+1)
   \       0x7A   0x....             LDR.N    R0,??DataTable14_22
   \       0x7C   0x9000             STR      R0,[SP, #+0]
   \       0x7E   0xF240 0x3306      MOVW     R3,#+774
   \       0x82   0x4642             MOV      R2,R8
   \       0x84   0x2103             MOVS     R1,#+3
   \       0x86   0x4630             MOV      R0,R6
   \       0x88   0x....'....        BL       mbedtls_debug_print_msg
    775                      continue;
    776                      }
    777                  }
   \                     ??ssl_pick_cert_8: (+1)
   \       0x8C   0x68A4             LDR      R4,[R4, #+8]
   \                     ??ssl_pick_cert_4: (+1)
   \       0x8E   0x2C00             CMP      R4,#+0
   \       0x90   0xD047             BEQ.N    ??ssl_pick_cert_6
   \       0x92   0x6820             LDR      R0,[R4, #+0]
   \       0x94   0x9001             STR      R0,[SP, #+4]
   \       0x96   0x....             LDR.N    R0,??DataTable14_23
   \       0x98   0x9000             STR      R0,[SP, #+0]
   \       0x9A   0xF240 0x23D9      MOVW     R3,#+729
   \       0x9E   0x4642             MOV      R2,R8
   \       0xA0   0x2103             MOVS     R1,#+3
   \       0xA2   0x4630             MOV      R0,R6
   \       0xA4   0x....'....        BL       mbedtls_debug_print_crt
   \       0xA8   0x4649             MOV      R1,R9
   \       0xAA   0x6820             LDR      R0,[R4, #+0]
   \       0xAC   0x30BC             ADDS     R0,R0,#+188
   \       0xAE   0x....'....        BL       mbedtls_pk_can_do
   \       0xB2   0x2800             CMP      R0,#+0
   \       0xB4   0xD109             BNE.N    ??ssl_pick_cert_9
   \       0xB6   0x....             LDR.N    R0,??DataTable14_24
   \       0xB8   0x9000             STR      R0,[SP, #+0]
   \       0xBA   0xF240 0x23DD      MOVW     R3,#+733
   \       0xBE   0x4642             MOV      R2,R8
   \       0xC0   0x2103             MOVS     R1,#+3
   \       0xC2   0x4630             MOV      R0,R6
   \       0xC4   0x....'....        BL       mbedtls_debug_print_msg
   \       0xC8   0xE7E0             B.N      ??ssl_pick_cert_8
   \                     ??ssl_pick_cert_9: (+1)
   \       0xCA   0xAB02             ADD      R3,SP,#+8
   \       0xCC   0x2201             MOVS     R2,#+1
   \       0xCE   0x4639             MOV      R1,R7
   \       0xD0   0x6820             LDR      R0,[R4, #+0]
   \       0xD2   0x....'....        BL       mbedtls_ssl_check_cert_usage
   \       0xD6   0x2800             CMP      R0,#+0
   \       0xD8   0xD009             BEQ.N    ??ssl_pick_cert_10
   \       0xDA   0x....             LDR.N    R0,??DataTable14_25
   \       0xDC   0x9000             STR      R0,[SP, #+0]
   \       0xDE   0xF240 0x23ED      MOVW     R3,#+749
   \       0xE2   0x4642             MOV      R2,R8
   \       0xE4   0x2103             MOVS     R1,#+3
   \       0xE6   0x4630             MOV      R0,R6
   \       0xE8   0x....'....        BL       mbedtls_debug_print_msg
   \       0xEC   0xE7CE             B.N      ??ssl_pick_cert_8
   \                     ??ssl_pick_cert_10: (+1)
   \       0xEE   0x4648             MOV      R0,R9
   \       0xF0   0x2804             CMP      R0,#+4
   \       0xF2   0xD1B7             BNE.N    ??ssl_pick_cert_5
   \       0xF4   0x6BF0             LDR      R0,[R6, #+60]
   \       0xF6   0xF8D0 0x11B4      LDR      R1,[R0, #+436]
   \       0xFA   0x6820             LDR      R0,[R4, #+0]
   \       0xFC   0x30BC             ADDS     R0,R0,#+188
   \       0xFE   0x....'....        BL       ssl_check_key_curve
   \      0x102   0x2800             CMP      R0,#+0
   \      0x104   0xD0AE             BEQ.N    ??ssl_pick_cert_5
   \      0x106   0x....             LDR.N    R0,??DataTable14_26
   \      0x108   0x9000             STR      R0,[SP, #+0]
   \      0x10A   0xF240 0x23F5      MOVW     R3,#+757
   \      0x10E   0x4642             MOV      R2,R8
   \      0x110   0x2103             MOVS     R1,#+3
   \      0x112   0x4630             MOV      R0,R6
   \      0x114   0x....'....        BL       mbedtls_debug_print_msg
   \      0x118   0xE7B8             B.N      ??ssl_pick_cert_8
    778          
    779                  /* If we get there, we got a winner */
    780                  break;
    781              }
    782          
    783              if( cur == NULL )
    784                  cur = fallback;
    785          
    786              /* Do not update ssl->handshake->key_cert unless there is a match */
    787              if( cur != NULL )
    788              {
    789                  ssl->handshake->key_cert = cur;
    790                  MBEDTLS_SSL_DEBUG_CRT( 3, "selected certificate chain, certificate",
    791                                    ssl->handshake->key_cert->cert );
    792                  return( 0 );
    793              }
    794          
    795              return( -1 );
   \                     ??ssl_pick_cert_11: (+1)
   \      0x11A   0xF04F 0x30FF      MOV      R0,#-1
   \                     ??ssl_pick_cert_3: (+1)
   \      0x11E   0xE8BD 0x83FE      POP      {R1-R9,PC}       ;; return
   \                     ??ssl_pick_cert_6: (+1)
   \      0x122   0x4630             MOV      R0,R6
   \      0x124   0x2C00             CMP      R4,#+0
   \      0x126   0xD100             BNE.N    ??ssl_pick_cert_12
   \      0x128   0x462C             MOV      R4,R5
   \                     ??ssl_pick_cert_12: (+1)
   \      0x12A   0x2C00             CMP      R4,#+0
   \      0x12C   0xD0F5             BEQ.N    ??ssl_pick_cert_11
   \      0x12E   0x6BC1             LDR      R1,[R0, #+60]
   \      0x130   0xF8C1 0x41C0      STR      R4,[R1, #+448]
   \      0x134   0x6BC1             LDR      R1,[R0, #+60]
   \      0x136   0xF8D1 0x11C0      LDR      R1,[R1, #+448]
   \      0x13A   0x6809             LDR      R1,[R1, #+0]
   \      0x13C   0x9101             STR      R1,[SP, #+4]
   \      0x13E   0x....             LDR.N    R1,??DataTable14_27
   \      0x140   0x9100             STR      R1,[SP, #+0]
   \      0x142   0xF240 0x3317      MOVW     R3,#+791
   \      0x146   0x4642             MOV      R2,R8
   \      0x148   0x2103             MOVS     R1,#+3
   \      0x14A   0x....'....        BL       mbedtls_debug_print_crt
   \      0x14E   0x2000             MOVS     R0,#+0
   \      0x150   0xE7E5             B.N      ??ssl_pick_cert_3
    796          }
    797          #endif /* MBEDTLS_X509_CRT_PARSE_C */
    798          
    799          /*
    800           * Check if a given ciphersuite is suitable for use with our config/keys/etc
    801           * Sets ciphersuite_info only if the suite matches.
    802           */

   \                                 In section .text, align 2, keep-with-next
    803          static int ssl_ciphersuite_match( mbedtls_ssl_context *ssl, int suite_id,
    804                                            const mbedtls_ssl_ciphersuite_t **ciphersuite_info )
    805          {
   \                     ssl_ciphersuite_match: (+1)
   \        0x0   0xE92D 0x41FC      PUSH     {R2-R8,LR}
   \        0x4   0x4605             MOV      R5,R0
   \        0x6   0x4616             MOV      R6,R2
    806              const mbedtls_ssl_ciphersuite_t *suite_info;
    807          
    808          #if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \
    809              defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
    810              mbedtls_pk_type_t sig_type;
    811          #endif
    812          
    813              suite_info = mbedtls_ssl_ciphersuite_from_id( suite_id );
   \        0x8   0x4608             MOV      R0,R1
   \        0xA   0x....'....        BL       mbedtls_ssl_ciphersuite_from_id
   \        0xE   0x0004             MOVS     R4,R0
    814              if( suite_info == NULL )
   \       0x10   0xD10A             BNE.N    ??ssl_ciphersuite_match_0
    815              {
    816                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
   \       0x12   0x....             LDR.N    R0,??DataTable14_28
   \       0x14   0x9000             STR      R0,[SP, #+0]
   \       0x16   0xF44F 0x734C      MOV      R3,#+816
   \       0x1A   0x....             LDR.N    R2,??DataTable14_2
   \       0x1C   0x2101             MOVS     R1,#+1
   \       0x1E   0x4628             MOV      R0,R5
   \       0x20   0x....'....        BL       mbedtls_debug_print_msg
    817                  return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   \       0x24   0x....             LDR.N    R0,??DataTable14_29  ;; 0xffff9400
   \       0x26   0xE09C             B.N      ??ssl_ciphersuite_match_1
    818              }
    819          
    820              MBEDTLS_SSL_DEBUG_MSG( 3, ( "trying ciphersuite: %s", suite_info->name ) );
   \                     ??ssl_ciphersuite_match_0: (+1)
   \       0x28   0x....             LDR.N    R7,??DataTable14_2
   \       0x2A   0x6860             LDR      R0,[R4, #+4]
   \       0x2C   0x9001             STR      R0,[SP, #+4]
   \       0x2E   0x....             LDR.N    R0,??DataTable14_30
   \       0x30   0x9000             STR      R0,[SP, #+0]
   \       0x32   0xF44F 0x734D      MOV      R3,#+820
   \       0x36   0x463A             MOV      R2,R7
   \       0x38   0x2103             MOVS     R1,#+3
   \       0x3A   0x4628             MOV      R0,R5
   \       0x3C   0x....'....        BL       mbedtls_debug_print_msg
    821          
    822              if( suite_info->min_minor_ver > ssl->minor_ver ||
    823                  suite_info->max_minor_ver < ssl->minor_ver )
   \       0x40   0x6968             LDR      R0,[R5, #+20]
   \       0x42   0x6921             LDR      R1,[R4, #+16]
   \       0x44   0x4288             CMP      R0,R1
   \       0x46   0xDB03             BLT.N    ??ssl_ciphersuite_match_2
   \       0x48   0x69A0             LDR      R0,[R4, #+24]
   \       0x4A   0x6969             LDR      R1,[R5, #+20]
   \       0x4C   0x4288             CMP      R0,R1
   \       0x4E   0xDA0A             BGE.N    ??ssl_ciphersuite_match_3
    824              {
    825                  MBEDTLS_SSL_DEBUG_MSG( 3, ( "ciphersuite mismatch: version" ) );
   \                     ??ssl_ciphersuite_match_2: (+1)
   \       0x50   0x....             LDR.N    R0,??DataTable14_31
   \       0x52   0x9000             STR      R0,[SP, #+0]
   \       0x54   0xF240 0x3339      MOVW     R3,#+825
   \       0x58   0x463A             MOV      R2,R7
   \       0x5A   0x2103             MOVS     R1,#+3
   \       0x5C   0x4628             MOV      R0,R5
   \       0x5E   0x....'....        BL       mbedtls_debug_print_msg
    826                  return( 0 );
   \       0x62   0x2000             MOVS     R0,#+0
   \       0x64   0xE07D             B.N      ??ssl_ciphersuite_match_1
    827              }
    828          
    829          #if defined(MBEDTLS_SSL_PROTO_DTLS)
    830              if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM &&
    831                  ( suite_info->flags & MBEDTLS_CIPHERSUITE_NODTLS ) )
   \                     ??ssl_ciphersuite_match_3: (+1)
   \       0x66   0x6828             LDR      R0,[R5, #+0]
   \       0x68   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \       0x6C   0xF3C0 0x0040      UBFX     R0,R0,#+1,#+1
   \       0x70   0x2800             CMP      R0,#+0
   \       0x72   0xD004             BEQ.N    ??ssl_ciphersuite_match_4
   \       0x74   0x7F20             LDRB     R0,[R4, #+28]
   \       0x76   0x0740             LSLS     R0,R0,#+29
   \       0x78   0xD501             BPL.N    ??ssl_ciphersuite_match_4
    832                  return( 0 );
   \       0x7A   0x2000             MOVS     R0,#+0
   \       0x7C   0xE071             B.N      ??ssl_ciphersuite_match_1
    833          #endif
    834          
    835          #if defined(MBEDTLS_ARC4_C)
    836              if( ssl->conf->arc4_disabled == MBEDTLS_SSL_ARC4_DISABLED &&
    837                      suite_info->cipher == MBEDTLS_CIPHER_ARC4_128 )
    838              {
    839                  MBEDTLS_SSL_DEBUG_MSG( 3, ( "ciphersuite mismatch: rc4" ) );
    840                  return( 0 );
    841              }
    842          #endif
    843          
    844          #if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
    845              if( suite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE &&
    846                  ( ssl->handshake->cli_exts & MBEDTLS_TLS_EXT_ECJPAKE_KKPP_OK ) == 0 )
    847              {
    848                  MBEDTLS_SSL_DEBUG_MSG( 3, ( "ciphersuite mismatch: ecjpake "
    849                                              "not configured or ext missing" ) );
    850                  return( 0 );
    851              }
    852          #endif
    853          
    854          
    855          #if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C)
    856              if( mbedtls_ssl_ciphersuite_uses_ec( suite_info ) &&
    857                  ( ssl->handshake->curves == NULL ||
    858                    ssl->handshake->curves[0] == NULL ) )
   \                     ??ssl_ciphersuite_match_4: (+1)
   \       0x7E   0x4620             MOV      R0,R4
   \       0x80   0x....'....        BL       mbedtls_ssl_ciphersuite_uses_ec
   \       0x84   0x2800             CMP      R0,#+0
   \       0x86   0xD015             BEQ.N    ??ssl_ciphersuite_match_5
   \       0x88   0x6BE8             LDR      R0,[R5, #+60]
   \       0x8A   0xF8D0 0x01B4      LDR      R0,[R0, #+436]
   \       0x8E   0x2800             CMP      R0,#+0
   \       0x90   0xD005             BEQ.N    ??ssl_ciphersuite_match_6
   \       0x92   0x6BE8             LDR      R0,[R5, #+60]
   \       0x94   0xF8D0 0x01B4      LDR      R0,[R0, #+436]
   \       0x98   0x6800             LDR      R0,[R0, #+0]
   \       0x9A   0x2800             CMP      R0,#+0
   \       0x9C   0xD10A             BNE.N    ??ssl_ciphersuite_match_5
    859              {
    860                  MBEDTLS_SSL_DEBUG_MSG( 3, ( "ciphersuite mismatch: "
    861                                      "no common elliptic curve" ) );
   \                     ??ssl_ciphersuite_match_6: (+1)
   \       0x9E   0x....             LDR.N    R0,??DataTable14_32
   \       0xA0   0x9000             STR      R0,[SP, #+0]
   \       0xA2   0xF240 0x335D      MOVW     R3,#+861
   \       0xA6   0x463A             MOV      R2,R7
   \       0xA8   0x2103             MOVS     R1,#+3
   \       0xAA   0x4628             MOV      R0,R5
   \       0xAC   0x....'....        BL       mbedtls_debug_print_msg
    862                  return( 0 );
   \       0xB0   0x2000             MOVS     R0,#+0
   \       0xB2   0xE056             B.N      ??ssl_ciphersuite_match_1
    863              }
    864          #endif
    865          
    866          #if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)
    867              /* If the ciphersuite requires a pre-shared key and we don't
    868               * have one, skip it now rather than failing later */
    869              if( mbedtls_ssl_ciphersuite_uses_psk( suite_info ) &&
    870                  ssl->conf->f_psk == NULL &&
    871                  ( ssl->conf->psk == NULL || ssl->conf->psk_identity == NULL ||
    872                    ssl->conf->psk_identity_len == 0 || ssl->conf->psk_len == 0 ) )
   \                     ??ssl_ciphersuite_match_5: (+1)
   \       0xB4   0x4620             MOV      R0,R4
   \       0xB6   0x....'....        BL       mbedtls_ssl_ciphersuite_uses_psk
   \       0xBA   0x2800             CMP      R0,#+0
   \       0xBC   0xD022             BEQ.N    ??ssl_ciphersuite_match_7
   \       0xBE   0x6828             LDR      R0,[R5, #+0]
   \       0xC0   0x6BC0             LDR      R0,[R0, #+60]
   \       0xC2   0x2800             CMP      R0,#+0
   \       0xC4   0xD11E             BNE.N    ??ssl_ciphersuite_match_7
   \       0xC6   0x6828             LDR      R0,[R5, #+0]
   \       0xC8   0xF8D0 0x0094      LDR      R0,[R0, #+148]
   \       0xCC   0x2800             CMP      R0,#+0
   \       0xCE   0xD00E             BEQ.N    ??ssl_ciphersuite_match_8
   \       0xD0   0x6828             LDR      R0,[R5, #+0]
   \       0xD2   0xF8D0 0x009C      LDR      R0,[R0, #+156]
   \       0xD6   0x2800             CMP      R0,#+0
   \       0xD8   0xD009             BEQ.N    ??ssl_ciphersuite_match_8
   \       0xDA   0x6828             LDR      R0,[R5, #+0]
   \       0xDC   0xF8D0 0x00A0      LDR      R0,[R0, #+160]
   \       0xE0   0x2800             CMP      R0,#+0
   \       0xE2   0xD004             BEQ.N    ??ssl_ciphersuite_match_8
   \       0xE4   0x6828             LDR      R0,[R5, #+0]
   \       0xE6   0xF8D0 0x0098      LDR      R0,[R0, #+152]
   \       0xEA   0x2800             CMP      R0,#+0
   \       0xEC   0xD10A             BNE.N    ??ssl_ciphersuite_match_7
    873              {
    874                  MBEDTLS_SSL_DEBUG_MSG( 3, ( "ciphersuite mismatch: no pre-shared key" ) );
   \                     ??ssl_ciphersuite_match_8: (+1)
   \       0xEE   0x....             LDR.N    R0,??DataTable14_33
   \       0xF0   0x9000             STR      R0,[SP, #+0]
   \       0xF2   0xF240 0x336A      MOVW     R3,#+874
   \       0xF6   0x463A             MOV      R2,R7
   \       0xF8   0x2103             MOVS     R1,#+3
   \       0xFA   0x4628             MOV      R0,R5
   \       0xFC   0x....'....        BL       mbedtls_debug_print_msg
    875                  return( 0 );
   \      0x100   0x2000             MOVS     R0,#+0
   \      0x102   0xE02E             B.N      ??ssl_ciphersuite_match_1
    876              }
    877          #endif
    878          
    879          #if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \
    880              defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
    881              /* If the ciphersuite requires signing, check whether
    882               * a suitable hash algorithm is present. */
    883              if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
   \                     ??ssl_ciphersuite_match_7: (+1)
   \      0x104   0x6968             LDR      R0,[R5, #+20]
   \      0x106   0x2803             CMP      R0,#+3
   \      0x108   0xD118             BNE.N    ??ssl_ciphersuite_match_9
    884              {
    885                  sig_type = mbedtls_ssl_get_ciphersuite_sig_alg( suite_info );
   \      0x10A   0x4620             MOV      R0,R4
   \      0x10C   0x....'....        BL       mbedtls_ssl_get_ciphersuite_sig_alg
   \      0x110   0x4680             MOV      R8,R0
    886                  if( sig_type != MBEDTLS_PK_NONE &&
    887                      mbedtls_ssl_sig_hash_set_find( &ssl->handshake->hash_algs, sig_type ) == MBEDTLS_MD_NONE )
   \      0x112   0x2800             CMP      R0,#+0
   \      0x114   0xD012             BEQ.N    ??ssl_ciphersuite_match_9
   \      0x116   0x4641             MOV      R1,R8
   \      0x118   0x6BE8             LDR      R0,[R5, #+60]
   \      0x11A   0x....'....        BL       mbedtls_ssl_sig_hash_set_find
   \      0x11E   0x2800             CMP      R0,#+0
   \      0x120   0xD10C             BNE.N    ??ssl_ciphersuite_match_9
    888                  {
    889                      MBEDTLS_SSL_DEBUG_MSG( 3, ( "ciphersuite mismatch: no suitable hash algorithm "
    890                                                  "for signature algorithm %d", sig_type ) );
   \      0x122   0xF8CD 0x8004      STR      R8,[SP, #+4]
   \      0x126   0x....             LDR.N    R0,??DataTable14_34
   \      0x128   0x9000             STR      R0,[SP, #+0]
   \      0x12A   0xF240 0x337A      MOVW     R3,#+890
   \      0x12E   0x463A             MOV      R2,R7
   \      0x130   0x2103             MOVS     R1,#+3
   \      0x132   0x4628             MOV      R0,R5
   \      0x134   0x....'....        BL       mbedtls_debug_print_msg
    891                      return( 0 );
   \      0x138   0x2000             MOVS     R0,#+0
   \      0x13A   0xE012             B.N      ??ssl_ciphersuite_match_1
    892                  }
    893              }
    894          
    895          #endif /* MBEDTLS_SSL_PROTO_TLS1_2 &&
    896                    MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED */
    897          
    898          #if defined(MBEDTLS_X509_CRT_PARSE_C)
    899              /*
    900               * Final check: if ciphersuite requires us to have a
    901               * certificate/key of a particular type:
    902               * - select the appropriate certificate if we have one, or
    903               * - try the next ciphersuite if we don't
    904               * This must be done last since we modify the key_cert list.
    905               */
    906              if( ssl_pick_cert( ssl, suite_info ) != 0 )
   \                     ??ssl_ciphersuite_match_9: (+1)
   \      0x13C   0x4621             MOV      R1,R4
   \      0x13E   0x4628             MOV      R0,R5
   \      0x140   0x....'....        BL       ssl_pick_cert
   \      0x144   0x2800             CMP      R0,#+0
   \      0x146   0xD00A             BEQ.N    ??ssl_ciphersuite_match_10
    907              {
    908                  MBEDTLS_SSL_DEBUG_MSG( 3, ( "ciphersuite mismatch: "
    909                                      "no suitable certificate" ) );
   \      0x148   0x....             LDR.N    R0,??DataTable14_35
   \      0x14A   0x9000             STR      R0,[SP, #+0]
   \      0x14C   0xF240 0x338D      MOVW     R3,#+909
   \      0x150   0x463A             MOV      R2,R7
   \      0x152   0x2103             MOVS     R1,#+3
   \      0x154   0x4628             MOV      R0,R5
   \      0x156   0x....'....        BL       mbedtls_debug_print_msg
    910                  return( 0 );
   \      0x15A   0x2000             MOVS     R0,#+0
   \      0x15C   0xE001             B.N      ??ssl_ciphersuite_match_1
    911              }
    912          #endif
    913          
    914              *ciphersuite_info = suite_info;
   \                     ??ssl_ciphersuite_match_10: (+1)
   \      0x15E   0x6034             STR      R4,[R6, #+0]
    915              return( 0 );
   \      0x160   0x2000             MOVS     R0,#+0
   \                     ??ssl_ciphersuite_match_1: (+1)
   \      0x162   0xE8BD 0x81F6      POP      {R1,R2,R4-R8,PC}  ;; return
    916          }
    917          
    918          #if defined(MBEDTLS_SSL_SRV_SUPPORT_SSLV2_CLIENT_HELLO)
    919          static int ssl_parse_client_hello_v2( mbedtls_ssl_context *ssl )
    920          {
    921              int ret, got_common_suite;
    922              unsigned int i, j;
    923              size_t n;
    924              unsigned int ciph_len, sess_len, chal_len;
    925              unsigned char *buf, *p;
    926              const int *ciphersuites;
    927              const mbedtls_ssl_ciphersuite_t *ciphersuite_info;
    928          
    929              MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse client hello v2" ) );
    930          
    931          #if defined(MBEDTLS_SSL_RENEGOTIATION)
    932              if( ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE )
    933              {
    934                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "client hello v2 illegal for renegotiation" ) );
    935                  mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
    936                                                  MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );
    937                  return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
    938              }
    939          #endif /* MBEDTLS_SSL_RENEGOTIATION */
    940          
    941              buf = ssl->in_hdr;
    942          
    943              MBEDTLS_SSL_DEBUG_BUF( 4, "record header", buf, 5 );
    944          
    945              MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello v2, message type: %d",
    946                             buf[2] ) );
    947              MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello v2, message len.: %d",
    948                             ( ( buf[0] & 0x7F ) << 8 ) | buf[1] ) );
    949              MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello v2, max. version: [%d:%d]",
    950                             buf[3], buf[4] ) );
    951          
    952              /*
    953               * SSLv2 Client Hello
    954               *
    955               * Record layer:
    956               *     0  .   1   message length
    957               *
    958               * SSL layer:
    959               *     2  .   2   message type
    960               *     3  .   4   protocol version
    961               */
    962              if( buf[2] != MBEDTLS_SSL_HS_CLIENT_HELLO ||
    963                  buf[3] != MBEDTLS_SSL_MAJOR_VERSION_3 )
    964              {
    965                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client hello message" ) );
    966                  return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
    967              }
    968          
    969              n = ( ( buf[0] << 8 ) | buf[1] ) & 0x7FFF;
    970          
    971              if( n < 17 || n > 512 )
    972              {
    973                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client hello message" ) );
    974                  return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
    975              }
    976          
    977              ssl->major_ver = MBEDTLS_SSL_MAJOR_VERSION_3;
    978              ssl->minor_ver = ( buf[4] <= ssl->conf->max_minor_ver )
    979                               ? buf[4]  : ssl->conf->max_minor_ver;
    980          
    981              if( ssl->minor_ver < ssl->conf->min_minor_ver )
    982              {
    983                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "client only supports ssl smaller than minimum"
    984                                      " [%d:%d] < [%d:%d]",
    985                                      ssl->major_ver, ssl->minor_ver,
    986                                      ssl->conf->min_major_ver, ssl->conf->min_minor_ver ) );
    987          
    988                  mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
    989                                               MBEDTLS_SSL_ALERT_MSG_PROTOCOL_VERSION );
    990                  return( MBEDTLS_ERR_SSL_BAD_HS_PROTOCOL_VERSION );
    991              }
    992          
    993              ssl->handshake->max_major_ver = buf[3];
    994              ssl->handshake->max_minor_ver = buf[4];
    995          
    996              if( ( ret = mbedtls_ssl_fetch_input( ssl, 2 + n ) ) != 0 )
    997              {
    998                  MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_fetch_input", ret );
    999                  return( ret );
   1000              }
   1001          
   1002              ssl->handshake->update_checksum( ssl, buf + 2, n );
   1003          
   1004              buf = ssl->in_msg;
   1005              n = ssl->in_left - 5;
   1006          
   1007              /*
   1008               *    0  .   1   ciphersuitelist length
   1009               *    2  .   3   session id length
   1010               *    4  .   5   challenge length
   1011               *    6  .  ..   ciphersuitelist
   1012               *   ..  .  ..   session id
   1013               *   ..  .  ..   challenge
   1014               */
   1015              MBEDTLS_SSL_DEBUG_BUF( 4, "record contents", buf, n );
   1016          
   1017              ciph_len = ( buf[0] << 8 ) | buf[1];
   1018              sess_len = ( buf[2] << 8 ) | buf[3];
   1019              chal_len = ( buf[4] << 8 ) | buf[5];
   1020          
   1021              MBEDTLS_SSL_DEBUG_MSG( 3, ( "ciph_len: %d, sess_len: %d, chal_len: %d",
   1022                             ciph_len, sess_len, chal_len ) );
   1023          
   1024              /*
   1025               * Make sure each parameter length is valid
   1026               */
   1027              if( ciph_len < 3 || ( ciph_len % 3 ) != 0 )
   1028              {
   1029                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client hello message" ) );
   1030                  return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
   1031              }
   1032          
   1033              if( sess_len > 32 )
   1034              {
   1035                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client hello message" ) );
   1036                  return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
   1037              }
   1038          
   1039              if( chal_len < 8 || chal_len > 32 )
   1040              {
   1041                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client hello message" ) );
   1042                  return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
   1043              }
   1044          
   1045              if( n != 6 + ciph_len + sess_len + chal_len )
   1046              {
   1047                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client hello message" ) );
   1048                  return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
   1049              }
   1050          
   1051              MBEDTLS_SSL_DEBUG_BUF( 3, "client hello, ciphersuitelist",
   1052                             buf + 6, ciph_len );
   1053              MBEDTLS_SSL_DEBUG_BUF( 3, "client hello, session id",
   1054                             buf + 6 + ciph_len, sess_len );
   1055              MBEDTLS_SSL_DEBUG_BUF( 3, "client hello, challenge",
   1056                             buf + 6 + ciph_len + sess_len, chal_len );
   1057          
   1058              p = buf + 6 + ciph_len;
   1059              ssl->session_negotiate->id_len = sess_len;
   1060              memset( ssl->session_negotiate->id, 0,
   1061                      sizeof( ssl->session_negotiate->id ) );
   1062              memcpy( ssl->session_negotiate->id, p, ssl->session_negotiate->id_len );
   1063          
   1064              p += sess_len;
   1065              memset( ssl->handshake->randbytes, 0, 64 );
   1066              memcpy( ssl->handshake->randbytes + 32 - chal_len, p, chal_len );
   1067          
   1068              /*
   1069               * Check for TLS_EMPTY_RENEGOTIATION_INFO_SCSV
   1070               */
   1071              for( i = 0, p = buf + 6; i < ciph_len; i += 3, p += 3 )
   1072              {
   1073                  if( p[0] == 0 && p[1] == 0 && p[2] == MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO )
   1074                  {
   1075                      MBEDTLS_SSL_DEBUG_MSG( 3, ( "received TLS_EMPTY_RENEGOTIATION_INFO " ) );
   1076          #if defined(MBEDTLS_SSL_RENEGOTIATION)
   1077                      if( ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS )
   1078                      {
   1079                          MBEDTLS_SSL_DEBUG_MSG( 1, ( "received RENEGOTIATION SCSV "
   1080                                              "during renegotiation" ) );
   1081          
   1082                          mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   1083                                                          MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );
   1084                          return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
   1085                      }
   1086          #endif /* MBEDTLS_SSL_RENEGOTIATION */
   1087                      ssl->secure_renegotiation = MBEDTLS_SSL_SECURE_RENEGOTIATION;
   1088                      break;
   1089                  }
   1090              }
   1091          
   1092          #if defined(MBEDTLS_SSL_FALLBACK_SCSV)
   1093              for( i = 0, p = buf + 6; i < ciph_len; i += 3, p += 3 )
   1094              {
   1095                  if( p[0] == 0 &&
   1096                      p[1] == (unsigned char)( ( MBEDTLS_SSL_FALLBACK_SCSV_VALUE >> 8 ) & 0xff ) &&
   1097                      p[2] == (unsigned char)( ( MBEDTLS_SSL_FALLBACK_SCSV_VALUE      ) & 0xff ) )
   1098                  {
   1099                      MBEDTLS_SSL_DEBUG_MSG( 3, ( "received FALLBACK_SCSV" ) );
   1100          
   1101                      if( ssl->minor_ver < ssl->conf->max_minor_ver )
   1102                      {
   1103                          MBEDTLS_SSL_DEBUG_MSG( 1, ( "inapropriate fallback" ) );
   1104          
   1105                          mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   1106                                                  MBEDTLS_SSL_ALERT_MSG_INAPROPRIATE_FALLBACK );
   1107          
   1108                          return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
   1109                      }
   1110          
   1111                      break;
   1112                  }
   1113              }
   1114          #endif /* MBEDTLS_SSL_FALLBACK_SCSV */
   1115          
   1116              got_common_suite = 0;
   1117              ciphersuites = ssl->conf->ciphersuite_list[ssl->minor_ver];
   1118              ciphersuite_info = NULL;
   1119          #if defined(MBEDTLS_SSL_SRV_RESPECT_CLIENT_PREFERENCE)
   1120              for( j = 0, p = buf + 6; j < ciph_len; j += 3, p += 3 )
   1121                  for( i = 0; ciphersuites[i] != 0; i++ )
   1122          #else
   1123              for( i = 0; ciphersuites[i] != 0; i++ )
   1124                  for( j = 0, p = buf + 6; j < ciph_len; j += 3, p += 3 )
   1125          #endif
   1126                  {
   1127                      if( p[0] != 0 ||
   1128                          p[1] != ( ( ciphersuites[i] >> 8 ) & 0xFF ) ||
   1129                          p[2] != ( ( ciphersuites[i]      ) & 0xFF ) )
   1130                          continue;
   1131          
   1132                      got_common_suite = 1;
   1133          
   1134                      if( ( ret = ssl_ciphersuite_match( ssl, ciphersuites[i],
   1135                                                         &ciphersuite_info ) ) != 0 )
   1136                          return( ret );
   1137          
   1138                      if( ciphersuite_info != NULL )
   1139                          goto have_ciphersuite_v2;
   1140                  }
   1141          
   1142              if( got_common_suite )
   1143              {
   1144                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "got ciphersuites in common, "
   1145                                      "but none of them usable" ) );
   1146                  return( MBEDTLS_ERR_SSL_NO_USABLE_CIPHERSUITE );
   1147              }
   1148              else
   1149              {
   1150                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no ciphersuites in common" ) );
   1151                  return( MBEDTLS_ERR_SSL_NO_CIPHER_CHOSEN );
   1152              }
   1153          
   1154          have_ciphersuite_v2:
   1155              MBEDTLS_SSL_DEBUG_MSG( 2, ( "selected ciphersuite: %s", ciphersuite_info->name ) );
   1156          
   1157              ssl->session_negotiate->ciphersuite = ciphersuites[i];
   1158              ssl->transform_negotiate->ciphersuite_info = ciphersuite_info;
   1159          
   1160              /*
   1161               * SSLv2 Client Hello relevant renegotiation security checks
   1162               */
   1163              if( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
   1164                  ssl->conf->allow_legacy_renegotiation == MBEDTLS_SSL_LEGACY_BREAK_HANDSHAKE )
   1165              {
   1166                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "legacy renegotiation, breaking off handshake" ) );
   1167                  mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   1168                                                  MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );
   1169                  return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
   1170              }
   1171          
   1172              ssl->in_left = 0;
   1173              ssl->state++;
   1174          
   1175              MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse client hello v2" ) );
   1176          
   1177              return( 0 );
   1178          }
   1179          #endif /* MBEDTLS_SSL_SRV_SUPPORT_SSLV2_CLIENT_HELLO */
   1180          
   1181          /* This function doesn't alert on errors that happen early during
   1182             ClientHello parsing because they might indicate that the client is
   1183             not talking SSL/TLS at all and would not understand our alert. */

   \                                 In section .text, align 4, keep-with-next
   1184          static int ssl_parse_client_hello( mbedtls_ssl_context *ssl )
   1185          {
   \                     ssl_parse_client_hello: (+1)
   \        0x0   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \        0x4   0xB08B             SUB      SP,SP,#+44
   \        0x6   0x4606             MOV      R6,R0
   1186              int ret, got_common_suite;
   1187              size_t i, j;
   1188              size_t ciph_offset, comp_offset, ext_offset;
   1189              size_t msg_len, ciph_len, sess_len, comp_len, ext_len;
   1190          #if defined(MBEDTLS_SSL_PROTO_DTLS)
   1191              size_t cookie_offset, cookie_len;
   1192          #endif
   1193              unsigned char *buf, *p, *ext;
   1194          #if defined(MBEDTLS_SSL_RENEGOTIATION)
   1195              int renegotiation_info_seen = 0;
   \        0x8   0x2000             MOVS     R0,#+0
   \        0xA   0x900A             STR      R0,[SP, #+40]
   1196          #endif
   1197              int handshake_failure = 0;
   \        0xC   0x9008             STR      R0,[SP, #+32]
   1198              const int *ciphersuites;
   1199              const mbedtls_ssl_ciphersuite_t *ciphersuite_info;
   1200              int major, minor;
   1201          
   1202              /* If there is no signature-algorithm extension present,
   1203               * we need to fall back to the default values for allowed
   1204               * signature-hash pairs. */
   1205          #if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \
   1206              defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
   1207              int sig_hash_alg_ext_present = 0;
   \        0xE   0x9009             STR      R0,[SP, #+36]
   1208          #endif /* MBEDTLS_SSL_PROTO_TLS1_2 &&
   1209                    MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED */
   1210          
   1211              MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse client hello" ) );
   \       0x10   0xF8DF 0x4CE4      LDR.W    R4,??ssl_parse_client_hello_0
   \       0x14   0xF8DF 0x0CE4      LDR.W    R0,??ssl_parse_client_hello_0+0x4
   \       0x18   0x9000             STR      R0,[SP, #+0]
   \       0x1A   0xF240 0x43BB      MOVW     R3,#+1211
   \       0x1E   0x4622             MOV      R2,R4
   \       0x20   0x2102             MOVS     R1,#+2
   \       0x22   0x4630             MOV      R0,R6
   \       0x24   0x....'....        BL       mbedtls_debug_print_msg
   \       0x28   0xE079             B.N      ??ssl_parse_client_hello_1
   1212          
   1213          #if defined(MBEDTLS_SSL_DTLS_ANTI_REPLAY)
   1214          read_record_header:
   1215          #endif
   1216              /*
   1217               * If renegotiating, then the input was read with mbedtls_ssl_read_record(),
   1218               * otherwise read it ourselves manually in order to support SSLv2
   1219               * ClientHello, which doesn't use the same record layer format.
   1220               */
   1221          #if defined(MBEDTLS_SSL_RENEGOTIATION)
   1222              if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
   1223          #endif
   1224              {
   1225                  if( ( ret = mbedtls_ssl_fetch_input( ssl, 5 ) ) != 0 )
   1226                  {
   1227                      /* No alert on a read error. */
   1228                      MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_fetch_input", ret );
   1229                      return( ret );
   1230                  }
   1231              }
   1232          
   1233              buf = ssl->in_hdr;
   \                     ??ssl_parse_client_hello_2: (+1)
   \       0x2A   0x6E75             LDR      R5,[R6, #+100]
   1234          
   1235          #if defined(MBEDTLS_SSL_SRV_SUPPORT_SSLV2_CLIENT_HELLO)
   1236          #if defined(MBEDTLS_SSL_PROTO_DTLS)
   1237              if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_STREAM )
   1238          #endif
   1239                  if( ( buf[0] & 0x80 ) != 0 )
   1240                      return( ssl_parse_client_hello_v2( ssl ) );
   1241          #endif
   1242          
   1243              MBEDTLS_SSL_DEBUG_BUF( 4, "record header", buf, mbedtls_ssl_hdr_len( ssl ) );
   \       0x2C   0x4630             MOV      R0,R6
   \       0x2E   0x....'....        BL       mbedtls_ssl_hdr_len
   \       0x32   0x9002             STR      R0,[SP, #+8]
   \       0x34   0x9501             STR      R5,[SP, #+4]
   \       0x36   0xF8DF 0x0CC8      LDR.W    R0,??ssl_parse_client_hello_0+0x8
   \       0x3A   0x9000             STR      R0,[SP, #+0]
   \       0x3C   0xF240 0x43DB      MOVW     R3,#+1243
   \       0x40   0x4622             MOV      R2,R4
   \       0x42   0x2104             MOVS     R1,#+4
   \       0x44   0x4630             MOV      R0,R6
   \       0x46   0x....'....        BL       mbedtls_debug_print_buf
   1244          
   1245              /*
   1246               * SSLv3/TLS Client Hello
   1247               *
   1248               * Record layer:
   1249               *     0  .   0   message type
   1250               *     1  .   2   protocol version
   1251               *     3  .   11  DTLS: epoch + record sequence number
   1252               *     3  .   4   message length
   1253               */
   1254              MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello v3, message type: %d",
   1255                             buf[0] ) );
   \       0x4A   0x7828             LDRB     R0,[R5, #+0]
   \       0x4C   0x9001             STR      R0,[SP, #+4]
   \       0x4E   0xF8DF 0x0CB4      LDR.W    R0,??ssl_parse_client_hello_0+0xC
   \       0x52   0x9000             STR      R0,[SP, #+0]
   \       0x54   0xF240 0x43E7      MOVW     R3,#+1255
   \       0x58   0x4622             MOV      R2,R4
   \       0x5A   0x2103             MOVS     R1,#+3
   \       0x5C   0x4630             MOV      R0,R6
   \       0x5E   0x....'....        BL       mbedtls_debug_print_msg
   1256          
   1257              if( buf[0] != MBEDTLS_SSL_MSG_HANDSHAKE )
   \       0x62   0x7828             LDRB     R0,[R5, #+0]
   \       0x64   0x2816             CMP      R0,#+22
   \       0x66   0xD172             BNE.N    ??ssl_parse_client_hello_3
   1258              {
   1259                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client hello message" ) );
   1260                  return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
   1261              }
   1262          
   1263              MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello v3, message len.: %d",
   1264                             ( ssl->in_len[0] << 8 ) | ssl->in_len[1] ) );
   \       0x68   0x6EB0             LDR      R0,[R6, #+104]
   \       0x6A   0x7800             LDRB     R0,[R0, #+0]
   \       0x6C   0x6EB1             LDR      R1,[R6, #+104]
   \       0x6E   0x7849             LDRB     R1,[R1, #+1]
   \       0x70   0xEA41 0x2100      ORR      R1,R1,R0, LSL #+8
   \       0x74   0x9101             STR      R1,[SP, #+4]
   \       0x76   0xF8DF 0x0C90      LDR.W    R0,??ssl_parse_client_hello_0+0x10
   \       0x7A   0x9000             STR      R0,[SP, #+0]
   \       0x7C   0xF44F 0x639E      MOV      R3,#+1264
   \       0x80   0x4622             MOV      R2,R4
   \       0x82   0x2103             MOVS     R1,#+3
   \       0x84   0x4630             MOV      R0,R6
   \       0x86   0x....'....        BL       mbedtls_debug_print_msg
   1265          
   1266              MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello v3, protocol version: [%d:%d]",
   1267                             buf[1], buf[2] ) );
   \       0x8A   0x78A8             LDRB     R0,[R5, #+2]
   \       0x8C   0x9002             STR      R0,[SP, #+8]
   \       0x8E   0x7868             LDRB     R0,[R5, #+1]
   \       0x90   0x9001             STR      R0,[SP, #+4]
   \       0x92   0xF8DF 0x0C78      LDR.W    R0,??ssl_parse_client_hello_0+0x14
   \       0x96   0x9000             STR      R0,[SP, #+0]
   \       0x98   0xF240 0x43F3      MOVW     R3,#+1267
   \       0x9C   0x4622             MOV      R2,R4
   \       0x9E   0x2103             MOVS     R1,#+3
   \       0xA0   0x4630             MOV      R0,R6
   \       0xA2   0x....'....        BL       mbedtls_debug_print_msg
   1268          
   1269              mbedtls_ssl_read_version( &major, &minor, ssl->conf->transport, buf + 1 );
   \       0xA6   0x1C6B             ADDS     R3,R5,#+1
   \       0xA8   0x6830             LDR      R0,[R6, #+0]
   \       0xAA   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \       0xAE   0xF3C0 0x0240      UBFX     R2,R0,#+1,#+1
   \       0xB2   0xA907             ADD      R1,SP,#+28
   \       0xB4   0xA806             ADD      R0,SP,#+24
   \       0xB6   0x....'....        BL       mbedtls_ssl_read_version
   1270          
   1271              /* According to RFC 5246 Appendix E.1, the version here is typically
   1272               * "{03,00}, the lowest version number supported by the client, [or] the
   1273               * value of ClientHello.client_version", so the only meaningful check here
   1274               * is the major version shouldn't be less than 3 */
   1275              if( major < MBEDTLS_SSL_MAJOR_VERSION_3 )
   \       0xBA   0x9806             LDR      R0,[SP, #+24]
   \       0xBC   0x2803             CMP      R0,#+3
   \       0xBE   0xDB54             BLT.N    ??ssl_parse_client_hello_4
   1276              {
   1277                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client hello message" ) );
   1278                  return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
   1279              }
   1280          
   1281              /* For DTLS if this is the initial handshake, remember the client sequence
   1282               * number to use it in our next message (RFC 6347 4.2.1) */
   1283          #if defined(MBEDTLS_SSL_PROTO_DTLS)
   1284              if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM
   1285          #if defined(MBEDTLS_SSL_RENEGOTIATION)
   1286                  && ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE
   1287          #endif
   1288                  )
   \       0xC0   0x6830             LDR      R0,[R6, #+0]
   \       0xC2   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \       0xC6   0xF3C0 0x0040      UBFX     R0,R0,#+1,#+1
   \       0xCA   0x2800             CMP      R0,#+0
   \       0xCC   0xD05E             BEQ.N    ??ssl_parse_client_hello_5
   \       0xCE   0x68B0             LDR      R0,[R6, #+8]
   \       0xD0   0x2800             CMP      R0,#+0
   \       0xD2   0xD15B             BNE.N    ??ssl_parse_client_hello_5
   1289              {
   1290                  /* Epoch should be 0 for initial handshakes */
   1291                  if( ssl->in_ctr[0] != 0 || ssl->in_ctr[1] != 0 )
   \       0xD4   0x6E30             LDR      R0,[R6, #+96]
   \       0xD6   0x7800             LDRB     R0,[R0, #+0]
   \       0xD8   0x2800             CMP      R0,#+0
   \       0xDA   0xF040 0x8601      BNE.W    ??ssl_parse_client_hello_6
   \       0xDE   0x6E30             LDR      R0,[R6, #+96]
   \       0xE0   0x7840             LDRB     R0,[R0, #+1]
   \       0xE2   0x2800             CMP      R0,#+0
   \       0xE4   0xF040 0x85FC      BNE.W    ??ssl_parse_client_hello_6
   1292                  {
   1293                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client hello message" ) );
   1294                      return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
   1295                  }
   1296          
   1297                  memcpy( ssl->cur_out_ctr + 2, ssl->in_ctr + 2, 6 );
   \       0xE8   0x2206             MOVS     R2,#+6
   \       0xEA   0x6E30             LDR      R0,[R6, #+96]
   \       0xEC   0x1C81             ADDS     R1,R0,#+2
   \       0xEE   0xF106 0x00D6      ADD      R0,R6,#+214
   \       0xF2   0x....'....        BL       __aeabi_memcpy
   1298          
   1299          #if defined(MBEDTLS_SSL_DTLS_ANTI_REPLAY)
   1300                  if( mbedtls_ssl_dtls_replay_check( ssl ) != 0 )
   \       0xF6   0x4630             MOV      R0,R6
   \       0xF8   0x....'....        BL       mbedtls_ssl_dtls_replay_check
   \       0xFC   0x2800             CMP      R0,#+0
   \       0xFE   0xD042             BEQ.N    ??ssl_parse_client_hello_7
   1301                  {
   1302                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "replayed record, discarding" ) );
   \      0x100   0x....'....        LDR.W    R0,??DataTable16
   \      0x104   0x9000             STR      R0,[SP, #+0]
   \      0x106   0xF240 0x5316      MOVW     R3,#+1302
   \      0x10A   0x4622             MOV      R2,R4
   \      0x10C   0x2101             MOVS     R1,#+1
   \      0x10E   0x4630             MOV      R0,R6
   \      0x110   0x....'....        BL       mbedtls_debug_print_msg
   1303                      ssl->next_record_offset = 0;
   \      0x114   0x2000             MOVS     R0,#+0
   \      0x116   0xF8C6 0x0088      STR      R0,[R6, #+136]
   1304                      ssl->in_left = 0;
   \      0x11A   0xF8C6 0x0080      STR      R0,[R6, #+128]
   1305                      goto read_record_header;
   1306                  }
   \                     ??ssl_parse_client_hello_1: (+1)
   \      0x11E   0x68B0             LDR      R0,[R6, #+8]
   \      0x120   0x2800             CMP      R0,#+0
   \      0x122   0xD182             BNE.N    ??ssl_parse_client_hello_2
   \      0x124   0x2105             MOVS     R1,#+5
   \      0x126   0x4630             MOV      R0,R6
   \      0x128   0x....'....        BL       mbedtls_ssl_fetch_input
   \      0x12C   0x0005             MOVS     R5,R0
   \      0x12E   0xF43F 0xAF7C      BEQ.W    ??ssl_parse_client_hello_2
   \      0x132   0x9501             STR      R5,[SP, #+4]
   \      0x134   0x....'....        LDR.W    R0,??DataTable16_1
   \      0x138   0x9000             STR      R0,[SP, #+0]
   \      0x13A   0xF240 0x43CC      MOVW     R3,#+1228
   \      0x13E   0x4622             MOV      R2,R4
   \      0x140   0x2101             MOVS     R1,#+1
   \      0x142   0x4630             MOV      R0,R6
   \      0x144   0x....'....        BL       mbedtls_debug_print_ret
   \      0x148   0x4628             MOV      R0,R5
   \      0x14A   0xF000 0xBDC6      B.W      ??ssl_parse_client_hello_8
   \                     ??ssl_parse_client_hello_3: (+1)
   \      0x14E   0x....'....        LDR.W    R0,??DataTable16_2
   \      0x152   0x9000             STR      R0,[SP, #+0]
   \      0x154   0xF240 0x43EB      MOVW     R3,#+1259
   \      0x158   0x4622             MOV      R2,R4
   \      0x15A   0x2101             MOVS     R1,#+1
   \      0x15C   0x4630             MOV      R0,R6
   \      0x15E   0x....'....        BL       mbedtls_debug_print_msg
   \      0x162   0x....'....        LDR.W    R0,??DataTable16_3  ;; 0xffff8700
   \      0x166   0xF000 0xBDB8      B.W      ??ssl_parse_client_hello_8
   \                     ??ssl_parse_client_hello_4: (+1)
   \      0x16A   0x....'....        LDR.W    R0,??DataTable16_2
   \      0x16E   0x9000             STR      R0,[SP, #+0]
   \      0x170   0xF240 0x43FD      MOVW     R3,#+1277
   \      0x174   0x4622             MOV      R2,R4
   \      0x176   0x2101             MOVS     R1,#+1
   \      0x178   0x4630             MOV      R0,R6
   \      0x17A   0x....'....        BL       mbedtls_debug_print_msg
   \      0x17E   0x....'....        LDR.W    R0,??DataTable16_3  ;; 0xffff8700
   \      0x182   0xF000 0xBDAA      B.W      ??ssl_parse_client_hello_8
   1307          
   1308                  /* No MAC to check yet, so we can update right now */
   1309                  mbedtls_ssl_dtls_replay_update( ssl );
   \                     ??ssl_parse_client_hello_7: (+1)
   \      0x186   0x4630             MOV      R0,R6
   \      0x188   0x....'....        BL       mbedtls_ssl_dtls_replay_update
   1310          #endif
   1311              }
   1312          #endif /* MBEDTLS_SSL_PROTO_DTLS */
   1313          
   1314              msg_len = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
   \                     ??ssl_parse_client_hello_5: (+1)
   \      0x18C   0x6EB0             LDR      R0,[R6, #+104]
   \      0x18E   0x7800             LDRB     R0,[R0, #+0]
   \      0x190   0x6EB1             LDR      R1,[R6, #+104]
   \      0x192   0x784F             LDRB     R7,[R1, #+1]
   \      0x194   0xEA47 0x2700      ORR      R7,R7,R0, LSL #+8
   1315          
   1316          #if defined(MBEDTLS_SSL_RENEGOTIATION)
   1317              if( ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE )
   \      0x198   0x68B0             LDR      R0,[R6, #+8]
   \      0x19A   0x2800             CMP      R0,#+0
   \      0x19C   0xD002             BEQ.N    ??ssl_parse_client_hello_9
   1318              {
   1319                  /* Set by mbedtls_ssl_read_record() */
   1320                  msg_len = ssl->in_hslen;
   \      0x19E   0xF8D6 0x70A0      LDR      R7,[R6, #+160]
   \      0x1A2   0xE03A             B.N      ??ssl_parse_client_hello_10
   1321              }
   1322              else
   1323          #endif
   1324              {
   1325                  if( msg_len > MBEDTLS_SSL_IN_CONTENT_LEN )
   \                     ??ssl_parse_client_hello_9: (+1)
   \      0x1A4   0xF642 0x0001      MOVW     R0,#+10241
   \      0x1A8   0x4287             CMP      R7,R0
   \      0x1AA   0xD30D             BCC.N    ??ssl_parse_client_hello_11
   1326                  {
   1327                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client hello message" ) );
   \      0x1AC   0x....'....        LDR.W    R0,??DataTable16_2
   \      0x1B0   0x9000             STR      R0,[SP, #+0]
   \      0x1B2   0xF240 0x532F      MOVW     R3,#+1327
   \      0x1B6   0x4622             MOV      R2,R4
   \      0x1B8   0x2101             MOVS     R1,#+1
   \      0x1BA   0x4630             MOV      R0,R6
   \      0x1BC   0x....'....        BL       mbedtls_debug_print_msg
   1328                      return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
   \      0x1C0   0x....'....        LDR.W    R0,??DataTable16_3  ;; 0xffff8700
   \      0x1C4   0xF000 0xBD89      B.W      ??ssl_parse_client_hello_8
   1329                  }
   1330          
   1331                  if( ( ret = mbedtls_ssl_fetch_input( ssl,
   1332                                 mbedtls_ssl_hdr_len( ssl ) + msg_len ) ) != 0 )
   \                     ??ssl_parse_client_hello_11: (+1)
   \      0x1C8   0x4630             MOV      R0,R6
   \      0x1CA   0x....'....        BL       mbedtls_ssl_hdr_len
   \      0x1CE   0x4601             MOV      R1,R0
   \      0x1D0   0x1879             ADDS     R1,R7,R1
   \      0x1D2   0x4630             MOV      R0,R6
   \      0x1D4   0x....'....        BL       mbedtls_ssl_fetch_input
   \      0x1D8   0x0005             MOVS     R5,R0
   \      0x1DA   0xD00D             BEQ.N    ??ssl_parse_client_hello_12
   1333                  {
   1334                      MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_fetch_input", ret );
   \      0x1DC   0x9501             STR      R5,[SP, #+4]
   \      0x1DE   0x....'....        LDR.W    R0,??DataTable16_1
   \      0x1E2   0x9000             STR      R0,[SP, #+0]
   \      0x1E4   0xF240 0x5336      MOVW     R3,#+1334
   \      0x1E8   0x4622             MOV      R2,R4
   \      0x1EA   0x2101             MOVS     R1,#+1
   \      0x1EC   0x4630             MOV      R0,R6
   \      0x1EE   0x....'....        BL       mbedtls_debug_print_ret
   1335                      return( ret );
   \      0x1F2   0x4628             MOV      R0,R5
   \      0x1F4   0xF000 0xBD71      B.W      ??ssl_parse_client_hello_8
   1336                  }
   1337          
   1338              /* Done reading this record, get ready for the next one */
   1339          #if defined(MBEDTLS_SSL_PROTO_DTLS)
   1340                  if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
   \                     ??ssl_parse_client_hello_12: (+1)
   \      0x1F8   0x6830             LDR      R0,[R6, #+0]
   \      0x1FA   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \      0x1FE   0xF3C0 0x0040      UBFX     R0,R0,#+1,#+1
   \      0x202   0x2800             CMP      R0,#+0
   \      0x204   0xD006             BEQ.N    ??ssl_parse_client_hello_13
   1341                      ssl->next_record_offset = msg_len + mbedtls_ssl_hdr_len( ssl );
   \      0x206   0x4630             MOV      R0,R6
   \      0x208   0x....'....        BL       mbedtls_ssl_hdr_len
   \      0x20C   0x19C0             ADDS     R0,R0,R7
   \      0x20E   0xF8C6 0x0088      STR      R0,[R6, #+136]
   \      0x212   0xE002             B.N      ??ssl_parse_client_hello_10
   1342                  else
   1343          #endif
   1344                      ssl->in_left = 0;
   \                     ??ssl_parse_client_hello_13: (+1)
   \      0x214   0x2000             MOVS     R0,#+0
   \      0x216   0xF8C6 0x0080      STR      R0,[R6, #+128]
   1345              }
   1346          
   1347              buf = ssl->in_msg;
   \                     ??ssl_parse_client_hello_10: (+1)
   \      0x21A   0x6F35             LDR      R5,[R6, #+112]
   1348          
   1349              MBEDTLS_SSL_DEBUG_BUF( 4, "record contents", buf, msg_len );
   \      0x21C   0x9702             STR      R7,[SP, #+8]
   \      0x21E   0x9501             STR      R5,[SP, #+4]
   \      0x220   0x....'....        LDR.W    R0,??DataTable16_4
   \      0x224   0x9000             STR      R0,[SP, #+0]
   \      0x226   0xF240 0x5345      MOVW     R3,#+1349
   \      0x22A   0x4622             MOV      R2,R4
   \      0x22C   0x2104             MOVS     R1,#+4
   \      0x22E   0x4630             MOV      R0,R6
   \      0x230   0x....'....        BL       mbedtls_debug_print_buf
   1350          
   1351              ssl->handshake->update_checksum( ssl, buf, msg_len );
   \      0x234   0x463A             MOV      R2,R7
   \      0x236   0x4629             MOV      R1,R5
   \      0x238   0x4630             MOV      R0,R6
   \      0x23A   0x6BF3             LDR      R3,[R6, #+60]
   \      0x23C   0xF8D3 0x3448      LDR      R3,[R3, #+1096]
   \      0x240   0x4798             BLX      R3
   1352          
   1353              /*
   1354               * Handshake layer:
   1355               *     0  .   0   handshake type
   1356               *     1  .   3   handshake length
   1357               *     4  .   5   DTLS only: message seqence number
   1358               *     6  .   8   DTLS only: fragment offset
   1359               *     9  .  11   DTLS only: fragment length
   1360               */
   1361              if( msg_len < mbedtls_ssl_hs_hdr_len( ssl ) )
   \      0x242   0x4630             MOV      R0,R6
   \      0x244   0x....'....        BL       mbedtls_ssl_hs_hdr_len
   \      0x248   0x4287             CMP      R7,R0
   \      0x24A   0xD20D             BCS.N    ??ssl_parse_client_hello_14
   1362              {
   1363                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client hello message" ) );
   \      0x24C   0x....'....        LDR.W    R0,??DataTable16_2
   \      0x250   0x9000             STR      R0,[SP, #+0]
   \      0x252   0xF240 0x5353      MOVW     R3,#+1363
   \      0x256   0x4622             MOV      R2,R4
   \      0x258   0x2101             MOVS     R1,#+1
   \      0x25A   0x4630             MOV      R0,R6
   \      0x25C   0x....'....        BL       mbedtls_debug_print_msg
   1364                  return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
   \      0x260   0x....'....        LDR.W    R0,??DataTable16_3  ;; 0xffff8700
   \      0x264   0xF000 0xBD39      B.W      ??ssl_parse_client_hello_8
   1365              }
   1366          
   1367              MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello v3, handshake type: %d", buf[0] ) );
   \                     ??ssl_parse_client_hello_14: (+1)
   \      0x268   0x7828             LDRB     R0,[R5, #+0]
   \      0x26A   0x9001             STR      R0,[SP, #+4]
   \      0x26C   0x....'....        LDR.W    R0,??DataTable16_5
   \      0x270   0x9000             STR      R0,[SP, #+0]
   \      0x272   0xF240 0x5357      MOVW     R3,#+1367
   \      0x276   0x4622             MOV      R2,R4
   \      0x278   0x2103             MOVS     R1,#+3
   \      0x27A   0x4630             MOV      R0,R6
   \      0x27C   0x....'....        BL       mbedtls_debug_print_msg
   1368          
   1369              if( buf[0] != MBEDTLS_SSL_HS_CLIENT_HELLO )
   \      0x280   0x7828             LDRB     R0,[R5, #+0]
   \      0x282   0x2801             CMP      R0,#+1
   \      0x284   0xD00D             BEQ.N    ??ssl_parse_client_hello_15
   1370              {
   1371                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client hello message" ) );
   \      0x286   0x....'....        LDR.W    R0,??DataTable16_2
   \      0x28A   0x9000             STR      R0,[SP, #+0]
   \      0x28C   0xF240 0x535B      MOVW     R3,#+1371
   \      0x290   0x4622             MOV      R2,R4
   \      0x292   0x2101             MOVS     R1,#+1
   \      0x294   0x4630             MOV      R0,R6
   \      0x296   0x....'....        BL       mbedtls_debug_print_msg
   1372                  return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
   \      0x29A   0x....'....        LDR.W    R0,??DataTable16_3  ;; 0xffff8700
   \      0x29E   0xF000 0xBD1C      B.W      ??ssl_parse_client_hello_8
   1373              }
   1374          
   1375              MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello v3, handshake len.: %d",
   1376                             ( buf[1] << 16 ) | ( buf[2] << 8 ) | buf[3] ) );
   \                     ??ssl_parse_client_hello_15: (+1)
   \      0x2A2   0x7868             LDRB     R0,[R5, #+1]
   \      0x2A4   0x78A9             LDRB     R1,[R5, #+2]
   \      0x2A6   0x0209             LSLS     R1,R1,#+8
   \      0x2A8   0xEA41 0x4100      ORR      R1,R1,R0, LSL #+16
   \      0x2AC   0x78E8             LDRB     R0,[R5, #+3]
   \      0x2AE   0x4301             ORRS     R1,R0,R1
   \      0x2B0   0x9101             STR      R1,[SP, #+4]
   \      0x2B2   0x....'....        LDR.W    R0,??DataTable17
   \      0x2B6   0x9000             STR      R0,[SP, #+0]
   \      0x2B8   0xF44F 0x63AC      MOV      R3,#+1376
   \      0x2BC   0x4622             MOV      R2,R4
   \      0x2BE   0x2103             MOVS     R1,#+3
   \      0x2C0   0x4630             MOV      R0,R6
   \      0x2C2   0x....'....        BL       mbedtls_debug_print_msg
   1377          
   1378              /* We don't support fragmentation of ClientHello (yet?) */
   1379              if( buf[1] != 0 ||
   1380                  msg_len != mbedtls_ssl_hs_hdr_len( ssl ) + ( ( buf[2] << 8 ) | buf[3] ) )
   \      0x2C6   0x7868             LDRB     R0,[R5, #+1]
   \      0x2C8   0x2800             CMP      R0,#+0
   \      0x2CA   0xD109             BNE.N    ??ssl_parse_client_hello_16
   \      0x2CC   0x4630             MOV      R0,R6
   \      0x2CE   0x....'....        BL       mbedtls_ssl_hs_hdr_len
   \      0x2D2   0x78A9             LDRB     R1,[R5, #+2]
   \      0x2D4   0x78EA             LDRB     R2,[R5, #+3]
   \      0x2D6   0xEA42 0x2201      ORR      R2,R2,R1, LSL #+8
   \      0x2DA   0x1810             ADDS     R0,R2,R0
   \      0x2DC   0x4287             CMP      R7,R0
   \      0x2DE   0xD00D             BEQ.N    ??ssl_parse_client_hello_17
   1381              {
   1382                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client hello message" ) );
   \                     ??ssl_parse_client_hello_16: (+1)
   \      0x2E0   0x....'....        LDR.W    R0,??DataTable16_2
   \      0x2E4   0x9000             STR      R0,[SP, #+0]
   \      0x2E6   0xF240 0x5366      MOVW     R3,#+1382
   \      0x2EA   0x4622             MOV      R2,R4
   \      0x2EC   0x2101             MOVS     R1,#+1
   \      0x2EE   0x4630             MOV      R0,R6
   \      0x2F0   0x....'....        BL       mbedtls_debug_print_msg
   1383                  return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
   \      0x2F4   0x....'....        LDR.W    R0,??DataTable16_3  ;; 0xffff8700
   \      0x2F8   0xF000 0xBCEF      B.W      ??ssl_parse_client_hello_8
   1384              }
   1385          
   1386          #if defined(MBEDTLS_SSL_PROTO_DTLS)
   1387              if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
   \                     ??ssl_parse_client_hello_17: (+1)
   \      0x2FC   0x6830             LDR      R0,[R6, #+0]
   \      0x2FE   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \      0x302   0xF3C0 0x0040      UBFX     R0,R0,#+1,#+1
   \      0x306   0x2800             CMP      R0,#+0
   \      0x308   0xD04E             BEQ.N    ??ssl_parse_client_hello_18
   1388              {
   1389                  /*
   1390                   * Copy the client's handshake message_seq on initial handshakes,
   1391                   * check sequence number on renego.
   1392                   */
   1393          #if defined(MBEDTLS_SSL_RENEGOTIATION)
   1394                  if( ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS )
   \      0x30A   0x68B0             LDR      R0,[R6, #+8]
   \      0x30C   0x2801             CMP      R0,#+1
   \      0x30E   0x6F30             LDR      R0,[R6, #+112]
   \      0x310   0x7901             LDRB     R1,[R0, #+4]
   \      0x312   0x7940             LDRB     R0,[R0, #+5]
   \      0x314   0xEA40 0x2001      ORR      R0,R0,R1, LSL #+8
   \      0x318   0x6BF1             LDR      R1,[R6, #+60]
   \      0x31A   0xD11C             BNE.N    ??ssl_parse_client_hello_19
   1395                  {
   1396                      /* This couldn't be done in ssl_prepare_handshake_record() */
   1397                      unsigned int cli_msg_seq = ( ssl->in_msg[4] << 8 ) |
   1398                                                   ssl->in_msg[5];
   1399          
   1400                      if( cli_msg_seq != ssl->handshake->in_msg_seq )
   \      0x31C   0xF8D1 0x11D8      LDR      R1,[R1, #+472]
   \      0x320   0x4288             CMP      R0,R1
   \      0x322   0xD012             BEQ.N    ??ssl_parse_client_hello_20
   1401                      {
   1402                          MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client hello message_seq: "
   1403                                              "%d (expected %d)", cli_msg_seq,
   1404                                              ssl->handshake->in_msg_seq ) );
   \      0x324   0x6BF1             LDR      R1,[R6, #+60]
   \      0x326   0xF8D1 0x11D8      LDR      R1,[R1, #+472]
   \      0x32A   0x9102             STR      R1,[SP, #+8]
   \      0x32C   0x9001             STR      R0,[SP, #+4]
   \      0x32E   0x....'....        LDR.W    R0,??DataTable19
   \      0x332   0x9000             STR      R0,[SP, #+0]
   \      0x334   0xF240 0x537C      MOVW     R3,#+1404
   \      0x338   0x4622             MOV      R2,R4
   \      0x33A   0x2101             MOVS     R1,#+1
   \      0x33C   0x4630             MOV      R0,R6
   \      0x33E   0x....'....        BL       mbedtls_debug_print_msg
   1405                          return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
   \      0x342   0x....'....        LDR.W    R0,??DataTable16_3  ;; 0xffff8700
   \      0x346   0xF000 0xBCC8      B.W      ??ssl_parse_client_hello_8
   1406                      }
   1407          
   1408                      ssl->handshake->in_msg_seq++;
   \                     ??ssl_parse_client_hello_20: (+1)
   \      0x34A   0x4608             MOV      R0,R1
   \      0x34C   0x1C40             ADDS     R0,R0,#+1
   \      0x34E   0x6BF1             LDR      R1,[R6, #+60]
   \      0x350   0xF8C1 0x01D8      STR      R0,[R1, #+472]
   \      0x354   0xE005             B.N      ??ssl_parse_client_hello_21
   1409                  }
   1410                  else
   1411          #endif
   1412                  {
   1413                      unsigned int cli_msg_seq = ( ssl->in_msg[4] << 8 ) |
   1414                                                   ssl->in_msg[5];
   1415                      ssl->handshake->out_msg_seq = cli_msg_seq;
   \                     ??ssl_parse_client_hello_19: (+1)
   \      0x356   0xF8C1 0x01D4      STR      R0,[R1, #+468]
   1416                      ssl->handshake->in_msg_seq  = cli_msg_seq + 1;
   \      0x35A   0x1C40             ADDS     R0,R0,#+1
   \      0x35C   0x6BF1             LDR      R1,[R6, #+60]
   \      0x35E   0xF8C1 0x01D8      STR      R0,[R1, #+472]
   1417                  }
   1418          
   1419                  /*
   1420                   * For now we don't support fragmentation, so make sure
   1421                   * fragment_offset == 0 and fragment_length == length
   1422                   */
   1423                  if( ssl->in_msg[6] != 0 || ssl->in_msg[7] != 0 || ssl->in_msg[8] != 0 ||
   1424                      memcmp( ssl->in_msg + 1, ssl->in_msg + 9, 3 ) != 0 )
   \                     ??ssl_parse_client_hello_21: (+1)
   \      0x362   0x6F30             LDR      R0,[R6, #+112]
   \      0x364   0x7980             LDRB     R0,[R0, #+6]
   \      0x366   0x2800             CMP      R0,#+0
   \      0x368   0xD110             BNE.N    ??ssl_parse_client_hello_22
   \      0x36A   0x6F30             LDR      R0,[R6, #+112]
   \      0x36C   0x79C0             LDRB     R0,[R0, #+7]
   \      0x36E   0x2800             CMP      R0,#+0
   \      0x370   0xD10C             BNE.N    ??ssl_parse_client_hello_22
   \      0x372   0x6F30             LDR      R0,[R6, #+112]
   \      0x374   0x7A00             LDRB     R0,[R0, #+8]
   \      0x376   0x2800             CMP      R0,#+0
   \      0x378   0xD108             BNE.N    ??ssl_parse_client_hello_22
   \      0x37A   0x2203             MOVS     R2,#+3
   \      0x37C   0x6F30             LDR      R0,[R6, #+112]
   \      0x37E   0xF100 0x0109      ADD      R1,R0,#+9
   \      0x382   0x1C40             ADDS     R0,R0,#+1
   \      0x384   0x....'....        BL       memcmp
   \      0x388   0x2800             CMP      R0,#+0
   \      0x38A   0xD00D             BEQ.N    ??ssl_parse_client_hello_18
   1425                  {
   1426                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "ClientHello fragmentation not supported" ) );
   \                     ??ssl_parse_client_hello_22: (+1)
   \      0x38C   0x....'....        LDR.W    R0,??DataTable19_1
   \      0x390   0x9000             STR      R0,[SP, #+0]
   \      0x392   0xF240 0x5392      MOVW     R3,#+1426
   \      0x396   0x4622             MOV      R2,R4
   \      0x398   0x2101             MOVS     R1,#+1
   \      0x39A   0x4630             MOV      R0,R6
   \      0x39C   0x....'....        BL       mbedtls_debug_print_msg
   1427                      return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
   \      0x3A0   0x....'....        LDR.W    R0,??DataTable20  ;; 0xffff8f80
   \      0x3A4   0xF000 0xBC99      B.W      ??ssl_parse_client_hello_8
   1428                  }
   1429              }
   1430          #endif /* MBEDTLS_SSL_PROTO_DTLS */
   1431          
   1432              buf += mbedtls_ssl_hs_hdr_len( ssl );
   \                     ??ssl_parse_client_hello_18: (+1)
   \      0x3A8   0x4630             MOV      R0,R6
   \      0x3AA   0x....'....        BL       mbedtls_ssl_hs_hdr_len
   \      0x3AE   0x4428             ADD      R0,R5,R0
   \      0x3B0   0x9003             STR      R0,[SP, #+12]
   1433              msg_len -= mbedtls_ssl_hs_hdr_len( ssl );
   \      0x3B2   0x4630             MOV      R0,R6
   \      0x3B4   0x....'....        BL       mbedtls_ssl_hs_hdr_len
   \      0x3B8   0x1A3F             SUBS     R7,R7,R0
   1434          
   1435              /*
   1436               * ClientHello layer:
   1437               *     0  .   1   protocol version
   1438               *     2  .  33   random bytes (starting with 4 bytes of Unix time)
   1439               *    34  .  35   session id length (1 byte)
   1440               *    35  . 34+x  session id
   1441               *   35+x . 35+x  DTLS only: cookie length (1 byte)
   1442               *   36+x .  ..   DTLS only: cookie
   1443               *    ..  .  ..   ciphersuite list length (2 bytes)
   1444               *    ..  .  ..   ciphersuite list
   1445               *    ..  .  ..   compression alg. list length (1 byte)
   1446               *    ..  .  ..   compression alg. list
   1447               *    ..  .  ..   extensions length (2 bytes, optional)
   1448               *    ..  .  ..   extensions (optional)
   1449               */
   1450          
   1451              /*
   1452               * Minimal length (with everything empty and extensions ommitted) is
   1453               * 2 + 32 + 1 + 2 + 1 = 38 bytes. Check that first, so that we can
   1454               * read at least up to session id length without worrying.
   1455               */
   1456              if( msg_len < 38 )
   \      0x3BA   0x2F26             CMP      R7,#+38
   \      0x3BC   0xD20D             BCS.N    ??ssl_parse_client_hello_23
   1457              {
   1458                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client hello message" ) );
   \      0x3BE   0x....'....        LDR.W    R0,??DataTable16_2
   \      0x3C2   0x9000             STR      R0,[SP, #+0]
   \      0x3C4   0xF240 0x53B2      MOVW     R3,#+1458
   \      0x3C8   0x4622             MOV      R2,R4
   \      0x3CA   0x2101             MOVS     R1,#+1
   \      0x3CC   0x4630             MOV      R0,R6
   \      0x3CE   0x....'....        BL       mbedtls_debug_print_msg
   1459                  return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
   \      0x3D2   0x....'....        LDR.W    R0,??DataTable16_3  ;; 0xffff8700
   \      0x3D6   0xF000 0xBC80      B.W      ??ssl_parse_client_hello_8
   1460              }
   1461          
   1462              /*
   1463               * Check and save the protocol version
   1464               */
   1465              MBEDTLS_SSL_DEBUG_BUF( 3, "client hello, version", buf, 2 );
   \                     ??ssl_parse_client_hello_23: (+1)
   \      0x3DA   0x2002             MOVS     R0,#+2
   \      0x3DC   0x9002             STR      R0,[SP, #+8]
   \      0x3DE   0x9803             LDR      R0,[SP, #+12]
   \      0x3E0   0x9001             STR      R0,[SP, #+4]
   \      0x3E2   0x....'....        LDR.W    R0,??DataTable20_1
   \      0x3E6   0x9000             STR      R0,[SP, #+0]
   \      0x3E8   0xF240 0x53B9      MOVW     R3,#+1465
   \      0x3EC   0x4622             MOV      R2,R4
   \      0x3EE   0x2103             MOVS     R1,#+3
   \      0x3F0   0x4630             MOV      R0,R6
   \      0x3F2   0x....'....        BL       mbedtls_debug_print_buf
   1466          
   1467              mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
   1468                                ssl->conf->transport, buf );
   \      0x3F6   0x9B03             LDR      R3,[SP, #+12]
   \      0x3F8   0x6830             LDR      R0,[R6, #+0]
   \      0x3FA   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \      0x3FE   0xF3C0 0x0240      UBFX     R2,R0,#+1,#+1
   \      0x402   0xF106 0x0114      ADD      R1,R6,#+20
   \      0x406   0xF106 0x0010      ADD      R0,R6,#+16
   \      0x40A   0x....'....        BL       mbedtls_ssl_read_version
   1469          
   1470              ssl->handshake->max_major_ver = ssl->major_ver;
   \      0x40E   0x6930             LDR      R0,[R6, #+16]
   \      0x410   0x6BF1             LDR      R1,[R6, #+60]
   \      0x412   0xF8C1 0x06C4      STR      R0,[R1, #+1732]
   1471              ssl->handshake->max_minor_ver = ssl->minor_ver;
   \      0x416   0x6970             LDR      R0,[R6, #+20]
   \      0x418   0x6BF1             LDR      R1,[R6, #+60]
   \      0x41A   0xF8C1 0x06C8      STR      R0,[R1, #+1736]
   1472          
   1473              if( ssl->major_ver < ssl->conf->min_major_ver ||
   1474                  ssl->minor_ver < ssl->conf->min_minor_ver )
   \      0x41E   0x6930             LDR      R0,[R6, #+16]
   \      0x420   0x6831             LDR      R1,[R6, #+0]
   \      0x422   0xF891 0x10CA      LDRB     R1,[R1, #+202]
   \      0x426   0x4288             CMP      R0,R1
   \      0x428   0xDB05             BLT.N    ??ssl_parse_client_hello_24
   \      0x42A   0x6970             LDR      R0,[R6, #+20]
   \      0x42C   0x6831             LDR      R1,[R6, #+0]
   \      0x42E   0xF891 0x10CB      LDRB     R1,[R1, #+203]
   \      0x432   0x4288             CMP      R0,R1
   \      0x434   0xDA1E             BGE.N    ??ssl_parse_client_hello_25
   1475              {
   1476                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "client only supports ssl smaller than minimum"
   1477                                      " [%d:%d] < [%d:%d]",
   1478                                      ssl->major_ver, ssl->minor_ver,
   1479                                      ssl->conf->min_major_ver, ssl->conf->min_minor_ver ) );
   \                     ??ssl_parse_client_hello_24: (+1)
   \      0x436   0x6830             LDR      R0,[R6, #+0]
   \      0x438   0xF890 0x00CB      LDRB     R0,[R0, #+203]
   \      0x43C   0x9004             STR      R0,[SP, #+16]
   \      0x43E   0x6830             LDR      R0,[R6, #+0]
   \      0x440   0xF890 0x00CA      LDRB     R0,[R0, #+202]
   \      0x444   0x9003             STR      R0,[SP, #+12]
   \      0x446   0x6970             LDR      R0,[R6, #+20]
   \      0x448   0x9002             STR      R0,[SP, #+8]
   \      0x44A   0x6930             LDR      R0,[R6, #+16]
   \      0x44C   0x9001             STR      R0,[SP, #+4]
   \      0x44E   0x....'....        LDR.W    R0,??DataTable22
   \      0x452   0x9000             STR      R0,[SP, #+0]
   \      0x454   0xF240 0x53C7      MOVW     R3,#+1479
   \      0x458   0x4622             MOV      R2,R4
   \      0x45A   0x2101             MOVS     R1,#+1
   \      0x45C   0x4630             MOV      R0,R6
   \      0x45E   0x....'....        BL       mbedtls_debug_print_msg
   1480                  mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   1481                                               MBEDTLS_SSL_ALERT_MSG_PROTOCOL_VERSION );
   \      0x462   0x2246             MOVS     R2,#+70
   \      0x464   0x2102             MOVS     R1,#+2
   \      0x466   0x4630             MOV      R0,R6
   \      0x468   0x....'....        BL       mbedtls_ssl_send_alert_message
   1482                  return( MBEDTLS_ERR_SSL_BAD_HS_PROTOCOL_VERSION );
   \      0x46C   0x....'....        LDR.W    R0,??DataTable22_1  ;; 0xffff9180
   \      0x470   0xF000 0xBC33      B.W      ??ssl_parse_client_hello_8
   1483              }
   1484          
   1485              if( ssl->major_ver > ssl->conf->max_major_ver )
   \                     ??ssl_parse_client_hello_25: (+1)
   \      0x474   0x6830             LDR      R0,[R6, #+0]
   \      0x476   0xF890 0x00C8      LDRB     R0,[R0, #+200]
   \      0x47A   0x6931             LDR      R1,[R6, #+16]
   \      0x47C   0x4288             CMP      R0,R1
   \      0x47E   0x6830             LDR      R0,[R6, #+0]
   \      0x480   0xDA07             BGE.N    ??ssl_parse_client_hello_26
   1486              {
   1487                  ssl->major_ver = ssl->conf->max_major_ver;
   \      0x482   0xF890 0x00C8      LDRB     R0,[R0, #+200]
   \      0x486   0x6130             STR      R0,[R6, #+16]
   1488                  ssl->minor_ver = ssl->conf->max_minor_ver;
   \      0x488   0x6830             LDR      R0,[R6, #+0]
   \      0x48A   0xF890 0x00C9      LDRB     R0,[R0, #+201]
   \      0x48E   0x6170             STR      R0,[R6, #+20]
   \      0x490   0xE008             B.N      ??ssl_parse_client_hello_27
   1489              }
   1490              else if( ssl->minor_ver > ssl->conf->max_minor_ver )
   \                     ??ssl_parse_client_hello_26: (+1)
   \      0x492   0xF890 0x00C9      LDRB     R0,[R0, #+201]
   \      0x496   0x6971             LDR      R1,[R6, #+20]
   \      0x498   0x4288             CMP      R0,R1
   \      0x49A   0xDA03             BGE.N    ??ssl_parse_client_hello_27
   1491                  ssl->minor_ver = ssl->conf->max_minor_ver;
   \      0x49C   0x6830             LDR      R0,[R6, #+0]
   \      0x49E   0xF890 0x00C9      LDRB     R0,[R0, #+201]
   \      0x4A2   0x6170             STR      R0,[R6, #+20]
   1492          
   1493              /*
   1494               * Save client random (inc. Unix time)
   1495               */
   1496              MBEDTLS_SSL_DEBUG_BUF( 3, "client hello, random bytes", buf + 2, 32 );
   \                     ??ssl_parse_client_hello_27: (+1)
   \      0x4A4   0x2020             MOVS     R0,#+32
   \      0x4A6   0x9002             STR      R0,[SP, #+8]
   \      0x4A8   0x9803             LDR      R0,[SP, #+12]
   \      0x4AA   0x1C80             ADDS     R0,R0,#+2
   \      0x4AC   0x9001             STR      R0,[SP, #+4]
   \      0x4AE   0x....'....        LDR.W    R0,??DataTable22_2
   \      0x4B2   0x9000             STR      R0,[SP, #+0]
   \      0x4B4   0xF44F 0x63BB      MOV      R3,#+1496
   \      0x4B8   0x4622             MOV      R2,R4
   \      0x4BA   0x2103             MOVS     R1,#+3
   \      0x4BC   0x4630             MOV      R0,R6
   \      0x4BE   0x....'....        BL       mbedtls_debug_print_buf
   1497          
   1498              memcpy( ssl->handshake->randbytes, buf + 2, 32 );
   \      0x4C2   0x2220             MOVS     R2,#+32
   \      0x4C4   0x9803             LDR      R0,[SP, #+12]
   \      0x4C6   0x1C81             ADDS     R1,R0,#+2
   \      0x4C8   0x6BF0             LDR      R0,[R6, #+60]
   \      0x4CA   0xF200 0x405C      ADDW     R0,R0,#+1116
   \      0x4CE   0x....'....        BL       __aeabi_memcpy
   1499          
   1500              /*
   1501               * Check the session ID length and save session ID
   1502               */
   1503              sess_len = buf[34];
   \      0x4D2   0x9803             LDR      R0,[SP, #+12]
   \      0x4D4   0xF890 0x8022      LDRB     R8,[R0, #+34]
   1504          
   1505              if( sess_len > sizeof( ssl->session_negotiate->id ) ||
   1506                  sess_len + 34 + 2 > msg_len ) /* 2 for cipherlist length field */
   \      0x4D8   0xF1B8 0x0F21      CMP      R8,#+33
   \      0x4DC   0xD203             BCS.N    ??ssl_parse_client_hello_28
   \      0x4DE   0xF108 0x0024      ADD      R0,R8,#+36
   \      0x4E2   0x4287             CMP      R7,R0
   \      0x4E4   0xD211             BCS.N    ??ssl_parse_client_hello_29
   1507              {
   1508                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client hello message" ) );
   \                     ??ssl_parse_client_hello_28: (+1)
   \      0x4E6   0x....'....        LDR.W    R0,??DataTable16_2
   \      0x4EA   0x9000             STR      R0,[SP, #+0]
   \      0x4EC   0xF240 0x53E4      MOVW     R3,#+1508
   \      0x4F0   0x4622             MOV      R2,R4
   \      0x4F2   0x2101             MOVS     R1,#+1
   \      0x4F4   0x4630             MOV      R0,R6
   \      0x4F6   0x....'....        BL       mbedtls_debug_print_msg
   1509                  mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   1510                                                  MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
   \      0x4FA   0x2232             MOVS     R2,#+50
   \      0x4FC   0x2102             MOVS     R1,#+2
   \      0x4FE   0x4630             MOV      R0,R6
   \      0x500   0x....'....        BL       mbedtls_ssl_send_alert_message
   1511                  return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
   \      0x504   0x....'....        LDR.W    R0,??DataTable16_3  ;; 0xffff8700
   \      0x508   0xE3E7             B.N      ??ssl_parse_client_hello_8
   1512              }
   1513          
   1514              MBEDTLS_SSL_DEBUG_BUF( 3, "client hello, session id", buf + 35, sess_len );
   \                     ??ssl_parse_client_hello_29: (+1)
   \      0x50A   0xF8CD 0x8008      STR      R8,[SP, #+8]
   \      0x50E   0x9803             LDR      R0,[SP, #+12]
   \      0x510   0x3023             ADDS     R0,R0,#+35
   \      0x512   0x9001             STR      R0,[SP, #+4]
   \      0x514   0x....'....        LDR.W    R0,??DataTable23
   \      0x518   0x9000             STR      R0,[SP, #+0]
   \      0x51A   0xF240 0x53EA      MOVW     R3,#+1514
   \      0x51E   0x4622             MOV      R2,R4
   \      0x520   0x2103             MOVS     R1,#+3
   \      0x522   0x4630             MOV      R0,R6
   \      0x524   0x....'....        BL       mbedtls_debug_print_buf
   1515          
   1516              ssl->session_negotiate->id_len = sess_len;
   \      0x528   0x6BB0             LDR      R0,[R6, #+56]
   \      0x52A   0xF8C0 0x8008      STR      R8,[R0, #+8]
   1517              memset( ssl->session_negotiate->id, 0,
   1518                      sizeof( ssl->session_negotiate->id ) );
   \      0x52E   0x2200             MOVS     R2,#+0
   \      0x530   0x2120             MOVS     R1,#+32
   \      0x532   0x6BB0             LDR      R0,[R6, #+56]
   \      0x534   0x300C             ADDS     R0,R0,#+12
   \      0x536   0x....'....        BL       __aeabi_memset4
   1519              memcpy( ssl->session_negotiate->id, buf + 35,
   1520                      ssl->session_negotiate->id_len );
   \      0x53A   0x6BB0             LDR      R0,[R6, #+56]
   \      0x53C   0x6882             LDR      R2,[R0, #+8]
   \      0x53E   0x9803             LDR      R0,[SP, #+12]
   \      0x540   0xF100 0x0123      ADD      R1,R0,#+35
   \      0x544   0x6BB0             LDR      R0,[R6, #+56]
   \      0x546   0x300C             ADDS     R0,R0,#+12
   \      0x548   0x....'....        BL       __aeabi_memcpy
   1521          
   1522              /*
   1523               * Check the cookie length and content
   1524               */
   1525          #if defined(MBEDTLS_SSL_PROTO_DTLS)
   1526              if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
   \      0x54C   0x6830             LDR      R0,[R6, #+0]
   \      0x54E   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \      0x552   0xF3C0 0x0040      UBFX     R0,R0,#+1,#+1
   \      0x556   0x2800             CMP      R0,#+0
   \      0x558   0xF108 0x0823      ADD      R8,R8,#+35
   \      0x55C   0xF000 0x807F      BEQ.W    ??ssl_parse_client_hello_30
   1527              {
   1528                  cookie_offset = 35 + sess_len;
   1529                  cookie_len = buf[cookie_offset];
   \      0x560   0x9803             LDR      R0,[SP, #+12]
   \      0x562   0xF810 0x5008      LDRB     R5,[R0, R8]
   1530          
   1531                  if( cookie_offset + 1 + cookie_len + 2 > msg_len )
   \      0x566   0xEB05 0x0008      ADD      R0,R5,R8
   \      0x56A   0x1CC0             ADDS     R0,R0,#+3
   \      0x56C   0x4287             CMP      R7,R0
   \      0x56E   0xD211             BCS.N    ??ssl_parse_client_hello_31
   1532                  {
   1533                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client hello message" ) );
   \      0x570   0x....'....        LDR.W    R0,??DataTable16_2
   \      0x574   0x9000             STR      R0,[SP, #+0]
   \      0x576   0xF240 0x53FD      MOVW     R3,#+1533
   \      0x57A   0x4622             MOV      R2,R4
   \      0x57C   0x2101             MOVS     R1,#+1
   \      0x57E   0x4630             MOV      R0,R6
   \      0x580   0x....'....        BL       mbedtls_debug_print_msg
   1534                      mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   1535                                                      MBEDTLS_SSL_ALERT_MSG_PROTOCOL_VERSION );
   \      0x584   0x2246             MOVS     R2,#+70
   \      0x586   0x2102             MOVS     R1,#+2
   \      0x588   0x4630             MOV      R0,R6
   \      0x58A   0x....'....        BL       mbedtls_ssl_send_alert_message
   1536                      return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
   \      0x58E   0x....'....        LDR.W    R0,??DataTable16_3  ;; 0xffff8700
   \      0x592   0xE3A2             B.N      ??ssl_parse_client_hello_8
   1537                  }
   1538          
   1539                  MBEDTLS_SSL_DEBUG_BUF( 3, "client hello, cookie",
   1540                                 buf + cookie_offset + 1, cookie_len );
   \                     ??ssl_parse_client_hello_31: (+1)
   \      0x594   0x9502             STR      R5,[SP, #+8]
   \      0x596   0x9803             LDR      R0,[SP, #+12]
   \      0x598   0x4440             ADD      R0,R0,R8
   \      0x59A   0x1C40             ADDS     R0,R0,#+1
   \      0x59C   0x9001             STR      R0,[SP, #+4]
   \      0x59E   0x....'....        LDR.W    R0,??DataTable23_1
   \      0x5A2   0x9000             STR      R0,[SP, #+0]
   \      0x5A4   0xF240 0x6304      MOVW     R3,#+1540
   \      0x5A8   0x4622             MOV      R2,R4
   \      0x5AA   0x2103             MOVS     R1,#+3
   \      0x5AC   0x4630             MOV      R0,R6
   \      0x5AE   0x....'....        BL       mbedtls_debug_print_buf
   1541          
   1542          #if defined(MBEDTLS_SSL_DTLS_HELLO_VERIFY)
   1543                  if( ssl->conf->f_cookie_check != NULL
   1544          #if defined(MBEDTLS_SSL_RENEGOTIATION)
   1545                      && ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE
   1546          #endif
   1547                      )
   \      0x5B2   0x6830             LDR      R0,[R6, #+0]
   \      0x5B4   0x6C80             LDR      R0,[R0, #+72]
   \      0x5B6   0x2800             CMP      R0,#+0
   \      0x5B8   0xD032             BEQ.N    ??ssl_parse_client_hello_32
   \      0x5BA   0x68B0             LDR      R0,[R6, #+8]
   \      0x5BC   0x2800             CMP      R0,#+0
   \      0x5BE   0xD12F             BNE.N    ??ssl_parse_client_hello_32
   1548                  {
   1549                      if( ssl->conf->f_cookie_check( ssl->conf->p_cookie,
   1550                                               buf + cookie_offset + 1, cookie_len,
   1551                                               ssl->cli_id, ssl->cli_id_len ) != 0 )
   \      0x5C0   0xF8D6 0x00F0      LDR      R0,[R6, #+240]
   \      0x5C4   0x9000             STR      R0,[SP, #+0]
   \      0x5C6   0xF8D6 0x30EC      LDR      R3,[R6, #+236]
   \      0x5CA   0x462A             MOV      R2,R5
   \      0x5CC   0x9803             LDR      R0,[SP, #+12]
   \      0x5CE   0x4440             ADD      R0,R0,R8
   \      0x5D0   0x1C41             ADDS     R1,R0,#+1
   \      0x5D2   0x6830             LDR      R0,[R6, #+0]
   \      0x5D4   0x6CC0             LDR      R0,[R0, #+76]
   \      0x5D6   0xF8D6 0xC000      LDR      R12,[R6, #+0]
   \      0x5DA   0xF8DC 0xC048      LDR      R12,[R12, #+72]
   \      0x5DE   0x47E0             BLX      R12
   \      0x5E0   0x2800             CMP      R0,#+0
   \      0x5E2   0xD00E             BEQ.N    ??ssl_parse_client_hello_33
   1552                      {
   1553                          MBEDTLS_SSL_DEBUG_MSG( 2, ( "cookie verification failed" ) );
   \      0x5E4   0x....'....        LDR.W    R0,??DataTable23_2
   \      0x5E8   0x9000             STR      R0,[SP, #+0]
   \      0x5EA   0xF240 0x6311      MOVW     R3,#+1553
   \      0x5EE   0x4622             MOV      R2,R4
   \      0x5F0   0x2102             MOVS     R1,#+2
   \      0x5F2   0x4630             MOV      R0,R6
   \      0x5F4   0x....'....        BL       mbedtls_debug_print_msg
   1554                          ssl->handshake->verify_cookie_len = 1;
   \      0x5F8   0x2001             MOVS     R0,#+1
   \      0x5FA   0x6BF1             LDR      R1,[R6, #+60]
   \      0x5FC   0xF881 0x01E0      STRB     R0,[R1, #+480]
   \      0x600   0xE027             B.N      ??ssl_parse_client_hello_34
   1555                      }
   1556                      else
   1557                      {
   1558                          MBEDTLS_SSL_DEBUG_MSG( 2, ( "cookie verification passed" ) );
   \                     ??ssl_parse_client_hello_33: (+1)
   \      0x602   0x....'....        LDR.W    R0,??DataTable23_3
   \      0x606   0x9000             STR      R0,[SP, #+0]
   \      0x608   0xF240 0x6316      MOVW     R3,#+1558
   \      0x60C   0x4622             MOV      R2,R4
   \      0x60E   0x2102             MOVS     R1,#+2
   \      0x610   0x4630             MOV      R0,R6
   \      0x612   0x....'....        BL       mbedtls_debug_print_msg
   1559                          ssl->handshake->verify_cookie_len = 0;
   \      0x616   0x2000             MOVS     R0,#+0
   \      0x618   0x6BF1             LDR      R1,[R6, #+60]
   \      0x61A   0xF881 0x01E0      STRB     R0,[R1, #+480]
   \      0x61E   0xE018             B.N      ??ssl_parse_client_hello_34
   1560                      }
   1561                  }
   1562                  else
   1563          #endif /* MBEDTLS_SSL_DTLS_HELLO_VERIFY */
   1564                  {
   1565                      /* We know we didn't send a cookie, so it should be empty */
   1566                      if( cookie_len != 0 )
   \                     ??ssl_parse_client_hello_32: (+1)
   \      0x620   0x2D00             CMP      R5,#+0
   \      0x622   0xD00C             BEQ.N    ??ssl_parse_client_hello_35
   1567                      {
   1568                          /* This may be an attacker's probe, so don't send an alert */
   1569                          MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client hello message" ) );
   \      0x624   0x....'....        LDR.W    R0,??DataTable16_2
   \      0x628   0x9000             STR      R0,[SP, #+0]
   \      0x62A   0xF240 0x6321      MOVW     R3,#+1569
   \      0x62E   0x4622             MOV      R2,R4
   \      0x630   0x2101             MOVS     R1,#+1
   \      0x632   0x4630             MOV      R0,R6
   \      0x634   0x....'....        BL       mbedtls_debug_print_msg
   1570                          return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
   \      0x638   0x....'....        LDR.W    R0,??DataTable16_3  ;; 0xffff8700
   \      0x63C   0xE34D             B.N      ??ssl_parse_client_hello_8
   1571                      }
   1572          
   1573                      MBEDTLS_SSL_DEBUG_MSG( 2, ( "cookie verification skipped" ) );
   \                     ??ssl_parse_client_hello_35: (+1)
   \      0x63E   0x....'....        LDR.W    R0,??DataTable24
   \      0x642   0x9000             STR      R0,[SP, #+0]
   \      0x644   0xF240 0x6325      MOVW     R3,#+1573
   \      0x648   0x4622             MOV      R2,R4
   \      0x64A   0x2102             MOVS     R1,#+2
   \      0x64C   0x4630             MOV      R0,R6
   \      0x64E   0x....'....        BL       mbedtls_debug_print_msg
   1574                  }
   1575          
   1576              /*
   1577               * Check the ciphersuitelist length (will be parsed later)
   1578               */
   1579                  ciph_offset = cookie_offset + 1 + cookie_len;
   \                     ??ssl_parse_client_hello_34: (+1)
   \      0x652   0x44A8             ADD      R8,R5,R8
   \      0x654   0xF108 0x0801      ADD      R8,R8,#+1
   \      0x658   0xF8CD 0x8010      STR      R8,[SP, #+16]
   \      0x65C   0xE001             B.N      ??ssl_parse_client_hello_36
   1580              }
   1581              else
   1582          #endif /* MBEDTLS_SSL_PROTO_DTLS */
   1583                  ciph_offset = 35 + sess_len;
   \                     ??ssl_parse_client_hello_30: (+1)
   \      0x65E   0xF8CD 0x8010      STR      R8,[SP, #+16]
   1584          
   1585              ciph_len = ( buf[ciph_offset + 0] << 8 )
   1586                       | ( buf[ciph_offset + 1]      );
   \                     ??ssl_parse_client_hello_36: (+1)
   \      0x662   0x9803             LDR      R0,[SP, #+12]
   \      0x664   0x9904             LDR      R1,[SP, #+16]
   \      0x666   0x5C40             LDRB     R0,[R0, R1]
   \      0x668   0x9903             LDR      R1,[SP, #+12]
   \      0x66A   0x9A04             LDR      R2,[SP, #+16]
   \      0x66C   0x4411             ADD      R1,R1,R2
   \      0x66E   0xF891 0xB001      LDRB     R11,[R1, #+1]
   \      0x672   0xEA4B 0x2B00      ORR      R11,R11,R0, LSL #+8
   1587          
   1588              if( ciph_len < 2 ||
   1589                  ciph_len + 2 + ciph_offset + 1 > msg_len || /* 1 for comp. alg. len */
   1590                  ( ciph_len % 2 ) != 0 )
   \      0x676   0xF1BB 0x0F02      CMP      R11,#+2
   \      0x67A   0xD307             BCC.N    ??ssl_parse_client_hello_37
   \      0x67C   0x4610             MOV      R0,R2
   \      0x67E   0x4458             ADD      R0,R0,R11
   \      0x680   0x1CC0             ADDS     R0,R0,#+3
   \      0x682   0x4287             CMP      R7,R0
   \      0x684   0xD302             BCC.N    ??ssl_parse_client_hello_37
   \      0x686   0xEA5F 0x70CB      LSLS     R0,R11,#+31
   \      0x68A   0xD511             BPL.N    ??ssl_parse_client_hello_38
   1591              {
   1592                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client hello message" ) );
   \                     ??ssl_parse_client_hello_37: (+1)
   \      0x68C   0x....'....        LDR.W    R0,??DataTable16_2
   \      0x690   0x9000             STR      R0,[SP, #+0]
   \      0x692   0xF44F 0x63C7      MOV      R3,#+1592
   \      0x696   0x4622             MOV      R2,R4
   \      0x698   0x2101             MOVS     R1,#+1
   \      0x69A   0x4630             MOV      R0,R6
   \      0x69C   0x....'....        BL       mbedtls_debug_print_msg
   1593                  mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   1594                                                  MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
   \      0x6A0   0x2232             MOVS     R2,#+50
   \      0x6A2   0x2102             MOVS     R1,#+2
   \      0x6A4   0x4630             MOV      R0,R6
   \      0x6A6   0x....'....        BL       mbedtls_ssl_send_alert_message
   1595                  return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
   \      0x6AA   0x....'....        LDR.W    R0,??DataTable16_3  ;; 0xffff8700
   \      0x6AE   0xE314             B.N      ??ssl_parse_client_hello_8
   1596              }
   1597          
   1598              MBEDTLS_SSL_DEBUG_BUF( 3, "client hello, ciphersuitelist",
   1599                             buf + ciph_offset + 2,  ciph_len );
   \                     ??ssl_parse_client_hello_38: (+1)
   \      0x6B0   0xF8CD 0xB008      STR      R11,[SP, #+8]
   \      0x6B4   0x9803             LDR      R0,[SP, #+12]
   \      0x6B6   0x9904             LDR      R1,[SP, #+16]
   \      0x6B8   0x4408             ADD      R0,R0,R1
   \      0x6BA   0x1C80             ADDS     R0,R0,#+2
   \      0x6BC   0x9001             STR      R0,[SP, #+4]
   \      0x6BE   0x....'....        LDR.W    R0,??DataTable24_1
   \      0x6C2   0x9000             STR      R0,[SP, #+0]
   \      0x6C4   0xF240 0x633F      MOVW     R3,#+1599
   \      0x6C8   0x4622             MOV      R2,R4
   \      0x6CA   0x2103             MOVS     R1,#+3
   \      0x6CC   0x4630             MOV      R0,R6
   \      0x6CE   0x....'....        BL       mbedtls_debug_print_buf
   1600          
   1601              /*
   1602               * Check the compression algorithms length and pick one
   1603               */
   1604              comp_offset = ciph_offset + 2 + ciph_len;
   \      0x6D2   0xF8DD 0x8010      LDR      R8,[SP, #+16]
   \      0x6D6   0x44D8             ADD      R8,R11,R8
   \      0x6D8   0xF108 0x0802      ADD      R8,R8,#+2
   1605          
   1606              comp_len = buf[comp_offset];
   \      0x6DC   0x9803             LDR      R0,[SP, #+12]
   \      0x6DE   0xF810 0x5008      LDRB     R5,[R0, R8]
   1607          
   1608              if( comp_len < 1 ||
   1609                  comp_len > 16 ||
   1610                  comp_len + comp_offset + 1 > msg_len )
   \      0x6E2   0x2D00             CMP      R5,#+0
   \      0x6E4   0xD006             BEQ.N    ??ssl_parse_client_hello_39
   \      0x6E6   0x2D11             CMP      R5,#+17
   \      0x6E8   0xD204             BCS.N    ??ssl_parse_client_hello_39
   \      0x6EA   0xEB08 0x0005      ADD      R0,R8,R5
   \      0x6EE   0x1C40             ADDS     R0,R0,#+1
   \      0x6F0   0x4287             CMP      R7,R0
   \      0x6F2   0xD211             BCS.N    ??ssl_parse_client_hello_40
   1611              {
   1612                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client hello message" ) );
   \                     ??ssl_parse_client_hello_39: (+1)
   \      0x6F4   0x....'....        LDR.W    R0,??DataTable16_2
   \      0x6F8   0x9000             STR      R0,[SP, #+0]
   \      0x6FA   0xF240 0x634C      MOVW     R3,#+1612
   \      0x6FE   0x4622             MOV      R2,R4
   \      0x700   0x2101             MOVS     R1,#+1
   \      0x702   0x4630             MOV      R0,R6
   \      0x704   0x....'....        BL       mbedtls_debug_print_msg
   1613                  mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   1614                                                  MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
   \      0x708   0x2232             MOVS     R2,#+50
   \      0x70A   0x2102             MOVS     R1,#+2
   \      0x70C   0x4630             MOV      R0,R6
   \      0x70E   0x....'....        BL       mbedtls_ssl_send_alert_message
   1615                  return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
   \      0x712   0x....'....        LDR.W    R0,??DataTable16_3  ;; 0xffff8700
   \      0x716   0xE2E0             B.N      ??ssl_parse_client_hello_8
   1616              }
   1617          
   1618              MBEDTLS_SSL_DEBUG_BUF( 3, "client hello, compression",
   1619                                buf + comp_offset + 1, comp_len );
   \                     ??ssl_parse_client_hello_40: (+1)
   \      0x718   0x9502             STR      R5,[SP, #+8]
   \      0x71A   0x9803             LDR      R0,[SP, #+12]
   \      0x71C   0x4440             ADD      R0,R0,R8
   \      0x71E   0x1C40             ADDS     R0,R0,#+1
   \      0x720   0x9001             STR      R0,[SP, #+4]
   \      0x722   0x....'....        LDR.W    R0,??DataTable24_2
   \      0x726   0x9000             STR      R0,[SP, #+0]
   \      0x728   0xF240 0x6353      MOVW     R3,#+1619
   \      0x72C   0x4622             MOV      R2,R4
   \      0x72E   0x2103             MOVS     R1,#+3
   \      0x730   0x4630             MOV      R0,R6
   \      0x732   0x....'....        BL       mbedtls_debug_print_buf
   1620          
   1621              ssl->session_negotiate->compression = MBEDTLS_SSL_COMPRESS_NULL;
   \      0x736   0x2000             MOVS     R0,#+0
   \      0x738   0x6BB1             LDR      R1,[R6, #+56]
   \      0x73A   0x6048             STR      R0,[R1, #+4]
   1622          #if defined(MBEDTLS_ZLIB_SUPPORT)
   1623              for( i = 0; i < comp_len; ++i )
   1624              {
   1625                  if( buf[comp_offset + 1 + i] == MBEDTLS_SSL_COMPRESS_DEFLATE )
   1626                  {
   1627                      ssl->session_negotiate->compression = MBEDTLS_SSL_COMPRESS_DEFLATE;
   1628                      break;
   1629                  }
   1630              }
   1631          #endif
   1632          
   1633              /* See comments in ssl_write_client_hello() */
   1634          #if defined(MBEDTLS_SSL_PROTO_DTLS)
   1635              if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
   \      0x73C   0x6830             LDR      R0,[R6, #+0]
   \      0x73E   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \      0x742   0xF3C0 0x0040      UBFX     R0,R0,#+1,#+1
   \      0x746   0x2800             CMP      R0,#+0
   \      0x748   0xD002             BEQ.N    ??ssl_parse_client_hello_41
   1636                  ssl->session_negotiate->compression = MBEDTLS_SSL_COMPRESS_NULL;
   \      0x74A   0x2000             MOVS     R0,#+0
   \      0x74C   0x6BB1             LDR      R1,[R6, #+56]
   \      0x74E   0x6048             STR      R0,[R1, #+4]
   1637          #endif
   1638          
   1639              /* Do not parse the extensions if the protocol is SSLv3 */
   1640          #if defined(MBEDTLS_SSL_PROTO_SSL3)
   1641              if( ( ssl->major_ver != 3 ) || ( ssl->minor_ver != 0 ) )
   1642              {
   1643          #endif
   1644                  /*
   1645                   * Check the extension length
   1646                   */
   1647                  ext_offset = comp_offset + 1 + comp_len;
   \                     ??ssl_parse_client_hello_41: (+1)
   \      0x750   0x44A8             ADD      R8,R5,R8
   \      0x752   0xF108 0x0801      ADD      R8,R8,#+1
   1648                  if( msg_len > ext_offset )
   \      0x756   0x45B8             CMP      R8,R7
   \      0x758   0xD237             BCS.N    ??ssl_parse_client_hello_42
   1649                  {
   1650                      if( msg_len < ext_offset + 2 )
   \      0x75A   0xF108 0x0002      ADD      R0,R8,#+2
   \      0x75E   0x4287             CMP      R7,R0
   \      0x760   0xD211             BCS.N    ??ssl_parse_client_hello_43
   1651                      {
   1652                          MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client hello message" ) );
   \      0x762   0x....'....        LDR.W    R0,??DataTable16_2
   \      0x766   0x9000             STR      R0,[SP, #+0]
   \      0x768   0xF240 0x6374      MOVW     R3,#+1652
   \      0x76C   0x4622             MOV      R2,R4
   \      0x76E   0x2101             MOVS     R1,#+1
   \      0x770   0x4630             MOV      R0,R6
   \      0x772   0x....'....        BL       mbedtls_debug_print_msg
   1653                          mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   1654                                                          MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
   \      0x776   0x2232             MOVS     R2,#+50
   \      0x778   0x2102             MOVS     R1,#+2
   \      0x77A   0x4630             MOV      R0,R6
   \      0x77C   0x....'....        BL       mbedtls_ssl_send_alert_message
   1655                          return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
   \      0x780   0x....'....        LDR.W    R0,??DataTable16_3  ;; 0xffff8700
   \      0x784   0xE2A9             B.N      ??ssl_parse_client_hello_8
   1656                      }
   1657          
   1658                      ext_len = ( buf[ext_offset + 0] << 8 )
   1659                              | ( buf[ext_offset + 1]      );
   \                     ??ssl_parse_client_hello_43: (+1)
   \      0x786   0x9803             LDR      R0,[SP, #+12]
   \      0x788   0xF810 0x0008      LDRB     R0,[R0, R8]
   \      0x78C   0x9903             LDR      R1,[SP, #+12]
   \      0x78E   0x4441             ADD      R1,R1,R8
   \      0x790   0x784D             LDRB     R5,[R1, #+1]
   \      0x792   0xEA55 0x2500      ORRS     R5,R5,R0, LSL #+8
   1660          
   1661                      if( ( ext_len > 0 && ext_len < 4 ) ||
   1662                          msg_len != ext_offset + 2 + ext_len )
   \      0x796   0xD001             BEQ.N    ??ssl_parse_client_hello_44
   \      0x798   0x2D04             CMP      R5,#+4
   \      0x79A   0xD304             BCC.N    ??ssl_parse_client_hello_45
   \                     ??ssl_parse_client_hello_44: (+1)
   \      0x79C   0xEB05 0x0008      ADD      R0,R5,R8
   \      0x7A0   0x1C80             ADDS     R0,R0,#+2
   \      0x7A2   0x4287             CMP      R7,R0
   \      0x7A4   0xD012             BEQ.N    ??ssl_parse_client_hello_46
   1663                      {
   1664                          MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client hello message" ) );
   \                     ??ssl_parse_client_hello_45: (+1)
   \      0x7A6   0x....'....        LDR.W    R0,??DataTable16_2
   \      0x7AA   0x9000             STR      R0,[SP, #+0]
   \      0x7AC   0xF44F 0x63D0      MOV      R3,#+1664
   \      0x7B0   0x4622             MOV      R2,R4
   \      0x7B2   0x2101             MOVS     R1,#+1
   \      0x7B4   0x4630             MOV      R0,R6
   \      0x7B6   0x....'....        BL       mbedtls_debug_print_msg
   1665                          mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   1666                                                          MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
   \      0x7BA   0x2232             MOVS     R2,#+50
   \      0x7BC   0x2102             MOVS     R1,#+2
   \      0x7BE   0x4630             MOV      R0,R6
   \      0x7C0   0x....'....        BL       mbedtls_ssl_send_alert_message
   1667                          return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
   \      0x7C4   0x....'....        LDR.W    R0,??DataTable16_3  ;; 0xffff8700
   \      0x7C8   0xE287             B.N      ??ssl_parse_client_hello_8
   1668                      }
   1669                  }
   1670                  else
   1671                      ext_len = 0;
   \                     ??ssl_parse_client_hello_42: (+1)
   \      0x7CA   0x2500             MOVS     R5,#+0
   1672          
   1673                  ext = buf + ext_offset + 2;
   \                     ??ssl_parse_client_hello_46: (+1)
   \      0x7CC   0x9803             LDR      R0,[SP, #+12]
   \      0x7CE   0x4440             ADD      R0,R0,R8
   \      0x7D0   0xF100 0x0902      ADD      R9,R0,#+2
   1674                  MBEDTLS_SSL_DEBUG_BUF( 3, "client hello extensions", ext, ext_len );
   \      0x7D4   0x9502             STR      R5,[SP, #+8]
   \      0x7D6   0xF8CD 0x9004      STR      R9,[SP, #+4]
   \      0x7DA   0x....'....        LDR.W    R0,??DataTable24_3
   \      0x7DE   0x9000             STR      R0,[SP, #+0]
   \      0x7E0   0xF240 0x638A      MOVW     R3,#+1674
   \      0x7E4   0x4622             MOV      R2,R4
   \      0x7E6   0x2103             MOVS     R1,#+3
   \      0x7E8   0x4630             MOV      R0,R6
   \      0x7EA   0x....'....        BL       mbedtls_debug_print_buf
   \      0x7EE   0x9F0A             LDR      R7,[SP, #+40]
   \      0x7F0   0xF8DD 0x8024      LDR      R8,[SP, #+36]
   1675          
   1676                  while( ext_len != 0 )
   \                     ??ssl_parse_client_hello_47: (+1)
   \      0x7F4   0x2D00             CMP      R5,#+0
   \      0x7F6   0xF000 0x828B      BEQ.W    ??ssl_parse_client_hello_48
   1677                  {
   1678                      unsigned int ext_id;
   1679                      unsigned int ext_size;
   1680                      if ( ext_len < 4 ) {
   \      0x7FA   0x2D04             CMP      R5,#+4
   \      0x7FC   0xD211             BCS.N    ??ssl_parse_client_hello_49
   1681                          MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client hello message" ) );
   \      0x7FE   0x....'....        LDR.W    R0,??DataTable16_2
   \      0x802   0x9000             STR      R0,[SP, #+0]
   \      0x804   0xF240 0x6391      MOVW     R3,#+1681
   \      0x808   0x4622             MOV      R2,R4
   \      0x80A   0x2101             MOVS     R1,#+1
   \      0x80C   0x4630             MOV      R0,R6
   \      0x80E   0x....'....        BL       mbedtls_debug_print_msg
   1682                          mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   1683                                                         MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
   \      0x812   0x2232             MOVS     R2,#+50
   \      0x814   0x2102             MOVS     R1,#+2
   \      0x816   0x4630             MOV      R0,R6
   \      0x818   0x....'....        BL       mbedtls_ssl_send_alert_message
   1684                          return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
   \      0x81C   0x....'....        LDR.W    R0,??DataTable16_3  ;; 0xffff8700
   \      0x820   0xE25B             B.N      ??ssl_parse_client_hello_8
   1685                      }
   1686                      ext_id   = ( ( ext[0] <<  8 ) | ( ext[1] ) );
   \                     ??ssl_parse_client_hello_49: (+1)
   \      0x822   0xF899 0x1000      LDRB     R1,[R9, #+0]
   \      0x826   0xF899 0x0001      LDRB     R0,[R9, #+1]
   \      0x82A   0xEA40 0x2001      ORR      R0,R0,R1, LSL #+8
   1687                      ext_size = ( ( ext[2] <<  8 ) | ( ext[3] ) );
   \      0x82E   0xF899 0x1002      LDRB     R1,[R9, #+2]
   \      0x832   0xF899 0xA003      LDRB     R10,[R9, #+3]
   \      0x836   0xEA4A 0x2A01      ORR      R10,R10,R1, LSL #+8
   1688          
   1689                      if( ext_size + 4 > ext_len )
   \      0x83A   0xF10A 0x0104      ADD      R1,R10,#+4
   \      0x83E   0x428D             CMP      R5,R1
   \      0x840   0xD211             BCS.N    ??ssl_parse_client_hello_50
   1690                      {
   1691                          MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client hello message" ) );
   \      0x842   0x....'....        LDR.W    R0,??DataTable16_2
   \      0x846   0x9000             STR      R0,[SP, #+0]
   \      0x848   0xF240 0x639B      MOVW     R3,#+1691
   \      0x84C   0x4622             MOV      R2,R4
   \      0x84E   0x2101             MOVS     R1,#+1
   \      0x850   0x4630             MOV      R0,R6
   \      0x852   0x....'....        BL       mbedtls_debug_print_msg
   1692                          mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   1693                                                          MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
   \      0x856   0x2232             MOVS     R2,#+50
   \      0x858   0x2102             MOVS     R1,#+2
   \      0x85A   0x4630             MOV      R0,R6
   \      0x85C   0x....'....        BL       mbedtls_ssl_send_alert_message
   1694                          return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
   \      0x860   0x....'....        LDR.W    R0,??DataTable16_3  ;; 0xffff8700
   \      0x864   0xE239             B.N      ??ssl_parse_client_hello_8
   1695                      }
   1696                      switch( ext_id )
   \                     ??ssl_parse_client_hello_50: (+1)
   \      0x866   0x0001             MOVS     R1,R0
   \      0x868   0xD01C             BEQ.N    ??ssl_parse_client_hello_51
   \      0x86A   0x2901             CMP      R1,#+1
   \      0x86C   0xF000 0x808E      BEQ.W    ??ssl_parse_client_hello_52
   \      0x870   0x2904             CMP      R1,#+4
   \      0x872   0xF000 0x809F      BEQ.W    ??ssl_parse_client_hello_53
   \      0x876   0x290A             CMP      R1,#+10
   \      0x878   0xD058             BEQ.N    ??ssl_parse_client_hello_54
   \      0x87A   0x290B             CMP      R1,#+11
   \      0x87C   0xD06A             BEQ.N    ??ssl_parse_client_hello_55
   \      0x87E   0x290D             CMP      R1,#+13
   \      0x880   0xD03E             BEQ.N    ??ssl_parse_client_hello_56
   \      0x882   0x2910             CMP      R1,#+16
   \      0x884   0xF000 0x80E6      BEQ.W    ??ssl_parse_client_hello_57
   \      0x888   0x2916             CMP      R1,#+22
   \      0x88A   0xF000 0x80A7      BEQ.W    ??ssl_parse_client_hello_58
   \      0x88E   0x2917             CMP      R1,#+23
   \      0x890   0xF000 0x80B8      BEQ.W    ??ssl_parse_client_hello_59
   \      0x894   0x2923             CMP      R1,#+35
   \      0x896   0xF000 0x80C9      BEQ.W    ??ssl_parse_client_hello_60
   \      0x89A   0xF64F 0x7201      MOVW     R2,#+65281
   \      0x89E   0x4291             CMP      R1,R2
   \      0x8A0   0xD019             BEQ.N    ??ssl_parse_client_hello_61
   \      0x8A2   0xE0EB             B.N      ??ssl_parse_client_hello_62
   1697                      {
   1698          #if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
   1699                      case MBEDTLS_TLS_EXT_SERVERNAME:
   1700                          MBEDTLS_SSL_DEBUG_MSG( 3, ( "found ServerName extension" ) );
   \                     ??ssl_parse_client_hello_51: (+1)
   \      0x8A4   0x....'....        LDR.W    R0,??DataTable24_4
   \      0x8A8   0x9000             STR      R0,[SP, #+0]
   \      0x8AA   0xF240 0x63A4      MOVW     R3,#+1700
   \      0x8AE   0x4622             MOV      R2,R4
   \      0x8B0   0x2103             MOVS     R1,#+3
   \      0x8B2   0x4630             MOV      R0,R6
   \      0x8B4   0x....'....        BL       mbedtls_debug_print_msg
   1701                          if( ssl->conf->f_sni == NULL )
   \      0x8B8   0x6830             LDR      R0,[R6, #+0]
   \      0x8BA   0x6AC0             LDR      R0,[R0, #+44]
   \      0x8BC   0x2800             CMP      R0,#+0
   \      0x8BE   0xF000 0x80E8      BEQ.W    ??ssl_parse_client_hello_63
   1702                              break;
   1703          
   1704                          ret = ssl_parse_servername_ext( ssl, ext + 4, ext_size );
   \      0x8C2   0x4652             MOV      R2,R10
   \      0x8C4   0xF109 0x0104      ADD      R1,R9,#+4
   \      0x8C8   0x4630             MOV      R0,R6
   \      0x8CA   0x....'....        BL       ssl_parse_servername_ext
   1705                          if( ret != 0 )
   \      0x8CE   0x2800             CMP      R0,#+0
   \      0x8D0   0xF040 0x8203      BNE.W    ??ssl_parse_client_hello_8
   \      0x8D4   0xE0DD             B.N      ??ssl_parse_client_hello_63
   1706                              return( ret );
   1707                          break;
   1708          #endif /* MBEDTLS_SSL_SERVER_NAME_INDICATION */
   1709          
   1710                      case MBEDTLS_TLS_EXT_RENEGOTIATION_INFO:
   1711                          MBEDTLS_SSL_DEBUG_MSG( 3, ( "found renegotiation extension" ) );
   \                     ??ssl_parse_client_hello_61: (+1)
   \      0x8D6   0x....'....        LDR.W    R0,??DataTable24_5
   \      0x8DA   0x9000             STR      R0,[SP, #+0]
   \      0x8DC   0xF240 0x63AF      MOVW     R3,#+1711
   \      0x8E0   0x4622             MOV      R2,R4
   \      0x8E2   0x2103             MOVS     R1,#+3
   \      0x8E4   0x4630             MOV      R0,R6
   \      0x8E6   0x....'....        BL       mbedtls_debug_print_msg
   1712          #if defined(MBEDTLS_SSL_RENEGOTIATION)
   1713                          renegotiation_info_seen = 1;
   \      0x8EA   0x2701             MOVS     R7,#+1
   1714          #endif
   1715          
   1716                          ret = ssl_parse_renegotiation_info( ssl, ext + 4, ext_size );
   \      0x8EC   0x4652             MOV      R2,R10
   \      0x8EE   0xF109 0x0104      ADD      R1,R9,#+4
   \      0x8F2   0x4630             MOV      R0,R6
   \      0x8F4   0x....'....        BL       ssl_parse_renegotiation_info
   1717                          if( ret != 0 )
   \      0x8F8   0x2800             CMP      R0,#+0
   \      0x8FA   0xF040 0x81EE      BNE.W    ??ssl_parse_client_hello_8
   \      0x8FE   0xE0C8             B.N      ??ssl_parse_client_hello_63
   1718                              return( ret );
   1719                          break;
   1720          
   1721          #if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \
   1722              defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
   1723                      case MBEDTLS_TLS_EXT_SIG_ALG:
   1724                          MBEDTLS_SSL_DEBUG_MSG( 3, ( "found signature_algorithms extension" ) );
   \                     ??ssl_parse_client_hello_56: (+1)
   \      0x900   0x....'....        LDR.W    R0,??DataTable24_6
   \      0x904   0x9000             STR      R0,[SP, #+0]
   \      0x906   0xF240 0x63BC      MOVW     R3,#+1724
   \      0x90A   0x4622             MOV      R2,R4
   \      0x90C   0x2103             MOVS     R1,#+3
   \      0x90E   0x4630             MOV      R0,R6
   \      0x910   0x....'....        BL       mbedtls_debug_print_msg
   1725          
   1726                          ret = ssl_parse_signature_algorithms_ext( ssl, ext + 4, ext_size );
   \      0x914   0x4652             MOV      R2,R10
   \      0x916   0xF109 0x0104      ADD      R1,R9,#+4
   \      0x91A   0x4630             MOV      R0,R6
   \      0x91C   0x....'....        BL       ssl_parse_signature_algorithms_ext
   1727                          if( ret != 0 )
   \      0x920   0x2800             CMP      R0,#+0
   \      0x922   0xF040 0x81DA      BNE.W    ??ssl_parse_client_hello_8
   1728                              return( ret );
   1729          
   1730                          sig_hash_alg_ext_present = 1;
   \      0x926   0xF04F 0x0801      MOV      R8,#+1
   1731                          break;
   \      0x92A   0xE0B2             B.N      ??ssl_parse_client_hello_63
   1732          #endif /* MBEDTLS_SSL_PROTO_TLS1_2 &&
   1733                    MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED */
   1734          
   1735          #if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) || \
   1736              defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
   1737                      case MBEDTLS_TLS_EXT_SUPPORTED_ELLIPTIC_CURVES:
   1738                          MBEDTLS_SSL_DEBUG_MSG( 3, ( "found supported elliptic curves extension" ) );
   \                     ??ssl_parse_client_hello_54: (+1)
   \      0x92C   0x....'....        LDR.W    R0,??DataTable24_7
   \      0x930   0x9000             STR      R0,[SP, #+0]
   \      0x932   0xF240 0x63CA      MOVW     R3,#+1738
   \      0x936   0x4622             MOV      R2,R4
   \      0x938   0x2103             MOVS     R1,#+3
   \      0x93A   0x4630             MOV      R0,R6
   \      0x93C   0x....'....        BL       mbedtls_debug_print_msg
   1739          
   1740                          ret = ssl_parse_supported_elliptic_curves( ssl, ext + 4, ext_size );
   \      0x940   0x4652             MOV      R2,R10
   \      0x942   0xF109 0x0104      ADD      R1,R9,#+4
   \      0x946   0x4630             MOV      R0,R6
   \      0x948   0x....'....        BL       ssl_parse_supported_elliptic_curves
   1741                          if( ret != 0 )
   \      0x94C   0x2800             CMP      R0,#+0
   \      0x94E   0xF040 0x81C4      BNE.W    ??ssl_parse_client_hello_8
   \      0x952   0xE09E             B.N      ??ssl_parse_client_hello_63
   1742                              return( ret );
   1743                          break;
   1744          
   1745                      case MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS:
   1746                          MBEDTLS_SSL_DEBUG_MSG( 3, ( "found supported point formats extension" ) );
   \                     ??ssl_parse_client_hello_55: (+1)
   \      0x954   0x....'....        LDR.W    R0,??DataTable24_8
   \      0x958   0x9000             STR      R0,[SP, #+0]
   \      0x95A   0xF240 0x63D2      MOVW     R3,#+1746
   \      0x95E   0x4622             MOV      R2,R4
   \      0x960   0x2103             MOVS     R1,#+3
   \      0x962   0x4630             MOV      R0,R6
   \      0x964   0x....'....        BL       mbedtls_debug_print_msg
   1747                          ssl->handshake->cli_exts |= MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS_PRESENT;
   \      0x968   0x6BF0             LDR      R0,[R6, #+60]
   \      0x96A   0xF8D0 0x06CC      LDR      R0,[R0, #+1740]
   \      0x96E   0xF040 0x0001      ORR      R0,R0,#0x1
   \      0x972   0x6BF1             LDR      R1,[R6, #+60]
   \      0x974   0xF8C1 0x06CC      STR      R0,[R1, #+1740]
   1748          
   1749                          ret = ssl_parse_supported_point_formats( ssl, ext + 4, ext_size );
   \      0x978   0x4652             MOV      R2,R10
   \      0x97A   0xF109 0x0104      ADD      R1,R9,#+4
   \      0x97E   0x4630             MOV      R0,R6
   \      0x980   0x....'....        BL       ssl_parse_supported_point_formats
   1750                          if( ret != 0 )
   \      0x984   0x2800             CMP      R0,#+0
   \      0x986   0xF040 0x81A8      BNE.W    ??ssl_parse_client_hello_8
   \      0x98A   0xE082             B.N      ??ssl_parse_client_hello_63
   1751                              return( ret );
   1752                          break;
   1753          #endif /* MBEDTLS_ECDH_C || MBEDTLS_ECDSA_C ||
   1754                    MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */
   1755          
   1756          #if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
   1757                      case MBEDTLS_TLS_EXT_ECJPAKE_KKPP:
   1758                          MBEDTLS_SSL_DEBUG_MSG( 3, ( "found ecjpake kkpp extension" ) );
   1759          
   1760                          ret = ssl_parse_ecjpake_kkpp( ssl, ext + 4, ext_size );
   1761                          if( ret != 0 )
   1762                              return( ret );
   1763                          break;
   1764          #endif /* MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */
   1765          
   1766          #if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)
   1767                      case MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH:
   1768                          MBEDTLS_SSL_DEBUG_MSG( 3, ( "found max fragment length extension" ) );
   \                     ??ssl_parse_client_hello_52: (+1)
   \      0x98C   0x....'....        LDR.W    R0,??DataTable24_9
   \      0x990   0x9000             STR      R0,[SP, #+0]
   \      0x992   0xF44F 0x63DD      MOV      R3,#+1768
   \      0x996   0x4622             MOV      R2,R4
   \      0x998   0x2103             MOVS     R1,#+3
   \      0x99A   0x4630             MOV      R0,R6
   \      0x99C   0x....'....        BL       mbedtls_debug_print_msg
   1769          
   1770                          ret = ssl_parse_max_fragment_length_ext( ssl, ext + 4, ext_size );
   \      0x9A0   0x4652             MOV      R2,R10
   \      0x9A2   0xF109 0x0104      ADD      R1,R9,#+4
   \      0x9A6   0x4630             MOV      R0,R6
   \      0x9A8   0x....'....        BL       ssl_parse_max_fragment_length_ext
   1771                          if( ret != 0 )
   \      0x9AC   0x2800             CMP      R0,#+0
   \      0x9AE   0xF040 0x8194      BNE.W    ??ssl_parse_client_hello_8
   \      0x9B2   0xE06E             B.N      ??ssl_parse_client_hello_63
   1772                              return( ret );
   1773                          break;
   1774          #endif /* MBEDTLS_SSL_MAX_FRAGMENT_LENGTH */
   1775          
   1776          #if defined(MBEDTLS_SSL_TRUNCATED_HMAC)
   1777                      case MBEDTLS_TLS_EXT_TRUNCATED_HMAC:
   1778                          MBEDTLS_SSL_DEBUG_MSG( 3, ( "found truncated hmac extension" ) );
   \                     ??ssl_parse_client_hello_53: (+1)
   \      0x9B4   0x....'....        LDR.W    R0,??DataTable24_10
   \      0x9B8   0x9000             STR      R0,[SP, #+0]
   \      0x9BA   0xF240 0x63F2      MOVW     R3,#+1778
   \      0x9BE   0x4622             MOV      R2,R4
   \      0x9C0   0x2103             MOVS     R1,#+3
   \      0x9C2   0x4630             MOV      R0,R6
   \      0x9C4   0x....'....        BL       mbedtls_debug_print_msg
   1779          
   1780                          ret = ssl_parse_truncated_hmac_ext( ssl, ext + 4, ext_size );
   \      0x9C8   0x4652             MOV      R2,R10
   \      0x9CA   0xF109 0x0104      ADD      R1,R9,#+4
   \      0x9CE   0x4630             MOV      R0,R6
   \      0x9D0   0x....'....        BL       ssl_parse_truncated_hmac_ext
   1781                          if( ret != 0 )
   \      0x9D4   0x2800             CMP      R0,#+0
   \      0x9D6   0xF040 0x8180      BNE.W    ??ssl_parse_client_hello_8
   \      0x9DA   0xE05A             B.N      ??ssl_parse_client_hello_63
   1782                              return( ret );
   1783                          break;
   1784          #endif /* MBEDTLS_SSL_TRUNCATED_HMAC */
   1785          
   1786          #if defined(MBEDTLS_SSL_ENCRYPT_THEN_MAC)
   1787                      case MBEDTLS_TLS_EXT_ENCRYPT_THEN_MAC:
   1788                          MBEDTLS_SSL_DEBUG_MSG( 3, ( "found encrypt then mac extension" ) );
   \                     ??ssl_parse_client_hello_58: (+1)
   \      0x9DC   0x....'....        LDR.W    R0,??DataTable24_11
   \      0x9E0   0x9000             STR      R0,[SP, #+0]
   \      0x9E2   0xF240 0x63FC      MOVW     R3,#+1788
   \      0x9E6   0x4622             MOV      R2,R4
   \      0x9E8   0x2103             MOVS     R1,#+3
   \      0x9EA   0x4630             MOV      R0,R6
   \      0x9EC   0x....'....        BL       mbedtls_debug_print_msg
   1789          
   1790                          ret = ssl_parse_encrypt_then_mac_ext( ssl, ext + 4, ext_size );
   \      0x9F0   0x4652             MOV      R2,R10
   \      0x9F2   0xF109 0x0104      ADD      R1,R9,#+4
   \      0x9F6   0x4630             MOV      R0,R6
   \      0x9F8   0x....'....        BL       ssl_parse_encrypt_then_mac_ext
   1791                          if( ret != 0 )
   \      0x9FC   0x2800             CMP      R0,#+0
   \      0x9FE   0xF040 0x816C      BNE.W    ??ssl_parse_client_hello_8
   \      0xA02   0xE046             B.N      ??ssl_parse_client_hello_63
   1792                              return( ret );
   1793                          break;
   1794          #endif /* MBEDTLS_SSL_ENCRYPT_THEN_MAC */
   1795          
   1796          #if defined(MBEDTLS_SSL_EXTENDED_MASTER_SECRET)
   1797                      case MBEDTLS_TLS_EXT_EXTENDED_MASTER_SECRET:
   1798                          MBEDTLS_SSL_DEBUG_MSG( 3, ( "found extended master secret extension" ) );
   \                     ??ssl_parse_client_hello_59: (+1)
   \      0xA04   0x....'....        LDR.W    R0,??DataTable24_12
   \      0xA08   0x9000             STR      R0,[SP, #+0]
   \      0xA0A   0xF240 0x7306      MOVW     R3,#+1798
   \      0xA0E   0x4622             MOV      R2,R4
   \      0xA10   0x2103             MOVS     R1,#+3
   \      0xA12   0x4630             MOV      R0,R6
   \      0xA14   0x....'....        BL       mbedtls_debug_print_msg
   1799          
   1800                          ret = ssl_parse_extended_ms_ext( ssl, ext + 4, ext_size );
   \      0xA18   0x4652             MOV      R2,R10
   \      0xA1A   0xF109 0x0104      ADD      R1,R9,#+4
   \      0xA1E   0x4630             MOV      R0,R6
   \      0xA20   0x....'....        BL       ssl_parse_extended_ms_ext
   1801                          if( ret != 0 )
   \      0xA24   0x2800             CMP      R0,#+0
   \      0xA26   0xF040 0x8158      BNE.W    ??ssl_parse_client_hello_8
   \      0xA2A   0xE032             B.N      ??ssl_parse_client_hello_63
   1802                              return( ret );
   1803                          break;
   1804          #endif /* MBEDTLS_SSL_EXTENDED_MASTER_SECRET */
   1805          
   1806          #if defined(MBEDTLS_SSL_SESSION_TICKETS)
   1807                      case MBEDTLS_TLS_EXT_SESSION_TICKET:
   1808                          MBEDTLS_SSL_DEBUG_MSG( 3, ( "found session ticket extension" ) );
   \                     ??ssl_parse_client_hello_60: (+1)
   \      0xA2C   0x....'....        LDR.W    R0,??DataTable25
   \      0xA30   0x9000             STR      R0,[SP, #+0]
   \      0xA32   0xF44F 0x63E2      MOV      R3,#+1808
   \      0xA36   0x4622             MOV      R2,R4
   \      0xA38   0x2103             MOVS     R1,#+3
   \      0xA3A   0x4630             MOV      R0,R6
   \      0xA3C   0x....'....        BL       mbedtls_debug_print_msg
   1809          
   1810                          ret = ssl_parse_session_ticket_ext( ssl, ext + 4, ext_size );
   \      0xA40   0x4652             MOV      R2,R10
   \      0xA42   0xF109 0x0104      ADD      R1,R9,#+4
   \      0xA46   0x4630             MOV      R0,R6
   \      0xA48   0x....'....        BL       ssl_parse_session_ticket_ext
   1811                          if( ret != 0 )
   \      0xA4C   0x2800             CMP      R0,#+0
   \      0xA4E   0xF040 0x8144      BNE.W    ??ssl_parse_client_hello_8
   \      0xA52   0xE01E             B.N      ??ssl_parse_client_hello_63
   1812                              return( ret );
   1813                          break;
   1814          #endif /* MBEDTLS_SSL_SESSION_TICKETS */
   1815          
   1816          #if defined(MBEDTLS_SSL_ALPN)
   1817                      case MBEDTLS_TLS_EXT_ALPN:
   1818                          MBEDTLS_SSL_DEBUG_MSG( 3, ( "found alpn extension" ) );
   \                     ??ssl_parse_client_hello_57: (+1)
   \      0xA54   0x....'....        LDR.W    R0,??DataTable25_1
   \      0xA58   0x9000             STR      R0,[SP, #+0]
   \      0xA5A   0xF240 0x731A      MOVW     R3,#+1818
   \      0xA5E   0x4622             MOV      R2,R4
   \      0xA60   0x2103             MOVS     R1,#+3
   \      0xA62   0x4630             MOV      R0,R6
   \      0xA64   0x....'....        BL       mbedtls_debug_print_msg
   1819          
   1820                          ret = ssl_parse_alpn_ext( ssl, ext + 4, ext_size );
   \      0xA68   0x4652             MOV      R2,R10
   \      0xA6A   0xF109 0x0104      ADD      R1,R9,#+4
   \      0xA6E   0x4630             MOV      R0,R6
   \      0xA70   0x....'....        BL       ssl_parse_alpn_ext
   1821                          if( ret != 0 )
   \      0xA74   0x2800             CMP      R0,#+0
   \      0xA76   0xF040 0x8130      BNE.W    ??ssl_parse_client_hello_8
   \      0xA7A   0xE00A             B.N      ??ssl_parse_client_hello_63
   1822                              return( ret );
   1823                          break;
   1824          #endif /* MBEDTLS_SSL_SESSION_TICKETS */
   1825          
   1826                      default:
   1827                          MBEDTLS_SSL_DEBUG_MSG( 3, ( "unknown extension found: %d (ignoring)",
   1828                                         ext_id ) );
   \                     ??ssl_parse_client_hello_62: (+1)
   \      0xA7C   0x9001             STR      R0,[SP, #+4]
   \      0xA7E   0x....'....        LDR.W    R0,??DataTable25_3
   \      0xA82   0x9000             STR      R0,[SP, #+0]
   \      0xA84   0xF240 0x7324      MOVW     R3,#+1828
   \      0xA88   0x4622             MOV      R2,R4
   \      0xA8A   0x2103             MOVS     R1,#+3
   \      0xA8C   0x4630             MOV      R0,R6
   \      0xA8E   0x....'....        BL       mbedtls_debug_print_msg
   1829                      }
   1830          
   1831                      ext_len -= 4 + ext_size;
   \                     ??ssl_parse_client_hello_63: (+1)
   \      0xA92   0xEBA5 0x050A      SUB      R5,R5,R10
   \      0xA96   0x1F2D             SUBS     R5,R5,#+4
   1832                      ext += 4 + ext_size;
   \      0xA98   0xEB09 0x000A      ADD      R0,R9,R10
   \      0xA9C   0xF100 0x0904      ADD      R9,R0,#+4
   1833          
   1834                      if( ext_len > 0 && ext_len < 4 )
   \      0xAA0   0xF43F 0xAEA8      BEQ.W    ??ssl_parse_client_hello_47
   \      0xAA4   0x2D04             CMP      R5,#+4
   \      0xAA6   0xF4BF 0xAEA5      BCS.W    ??ssl_parse_client_hello_47
   1835                      {
   1836                          MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client hello message" ) );
   \      0xAAA   0x....'....        LDR.W    R0,??DataTable16_2
   \      0xAAE   0x9000             STR      R0,[SP, #+0]
   \      0xAB0   0xF240 0x732C      MOVW     R3,#+1836
   \      0xAB4   0x4622             MOV      R2,R4
   \      0xAB6   0x2101             MOVS     R1,#+1
   \      0xAB8   0x4630             MOV      R0,R6
   \      0xABA   0x....'....        BL       mbedtls_debug_print_msg
   1837                          mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   1838                                                          MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
   \      0xABE   0x2232             MOVS     R2,#+50
   \      0xAC0   0x2102             MOVS     R1,#+2
   \      0xAC2   0x4630             MOV      R0,R6
   \      0xAC4   0x....'....        BL       mbedtls_ssl_send_alert_message
   1839                          return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
   \      0xAC8   0x....'....        LDR.W    R0,??DataTable16_3  ;; 0xffff8700
   \      0xACC   0xE105             B.N      ??ssl_parse_client_hello_8
   1840                      }
   1841                  }
   1842          #if defined(MBEDTLS_SSL_PROTO_SSL3)
   1843              }
   1844          #endif
   1845          
   1846          #if defined(MBEDTLS_SSL_FALLBACK_SCSV)
   1847              for( i = 0, p = buf + ciph_offset + 2; i < ciph_len; i += 2, p += 2 )
   \                     ??ssl_parse_client_hello_64: (+1)
   \      0xACE   0x1C89             ADDS     R1,R1,#+2
   \      0xAD0   0x1C92             ADDS     R2,R2,#+2
   \                     ??ssl_parse_client_hello_65: (+1)
   \      0xAD2   0x42B1             CMP      R1,R6
   \      0xAD4   0xF080 0x8125      BCS.W    ??ssl_parse_client_hello_66
   1848              {
   1849                  if( p[0] == (unsigned char)( ( MBEDTLS_SSL_FALLBACK_SCSV_VALUE >> 8 ) & 0xff ) &&
   1850                      p[1] == (unsigned char)( ( MBEDTLS_SSL_FALLBACK_SCSV_VALUE      ) & 0xff ) )
   \      0xAD8   0x7810             LDRB     R0,[R2, #+0]
   \      0xADA   0x2856             CMP      R0,#+86
   \      0xADC   0xD1F7             BNE.N    ??ssl_parse_client_hello_64
   \      0xADE   0x7850             LDRB     R0,[R2, #+1]
   \      0xAE0   0x2800             CMP      R0,#+0
   \      0xAE2   0xD1F4             BNE.N    ??ssl_parse_client_hello_64
   1851                  {
   1852                      MBEDTLS_SSL_DEBUG_MSG( 2, ( "received FALLBACK_SCSV" ) );
   \      0xAE4   0x....'....        LDR.W    R0,??DataTable25_5
   \      0xAE8   0x9000             STR      R0,[SP, #+0]
   \      0xAEA   0xF240 0x733C      MOVW     R3,#+1852
   \      0xAEE   0x4622             MOV      R2,R4
   \      0xAF0   0x2102             MOVS     R1,#+2
   \      0xAF2   0x4628             MOV      R0,R5
   \      0xAF4   0x....'....        BL       mbedtls_debug_print_msg
   1853          
   1854                      if( ssl->minor_ver < ssl->conf->max_minor_ver )
   \      0xAF8   0x6968             LDR      R0,[R5, #+20]
   \      0xAFA   0x6829             LDR      R1,[R5, #+0]
   \      0xAFC   0xF891 0x10C9      LDRB     R1,[R1, #+201]
   \      0xB00   0x4288             CMP      R0,R1
   \      0xB02   0xF280 0x810E      BGE.W    ??ssl_parse_client_hello_66
   1855                      {
   1856                          MBEDTLS_SSL_DEBUG_MSG( 1, ( "inapropriate fallback" ) );
   \      0xB06   0x....'....        LDR.W    R0,??DataTable25_6
   \      0xB0A   0x9000             STR      R0,[SP, #+0]
   \      0xB0C   0xF44F 0x63E8      MOV      R3,#+1856
   \      0xB10   0x4622             MOV      R2,R4
   \      0xB12   0x2101             MOVS     R1,#+1
   \      0xB14   0x4628             MOV      R0,R5
   \      0xB16   0x....'....        BL       mbedtls_debug_print_msg
   1857          
   1858                          mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   1859                                                  MBEDTLS_SSL_ALERT_MSG_INAPROPRIATE_FALLBACK );
   \      0xB1A   0x2256             MOVS     R2,#+86
   \      0xB1C   0x2102             MOVS     R1,#+2
   \      0xB1E   0x4628             MOV      R0,R5
   \      0xB20   0x....'....        BL       mbedtls_ssl_send_alert_message
   1860          
   1861                          return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
   \      0xB24   0x....             LDR.N    R0,??DataTable16_3  ;; 0xffff8700
   \      0xB26   0xE0D8             B.N      ??ssl_parse_client_hello_8
   1862                      }
   1863          
   1864                      break;
   1865                  }
   1866              }
   1867          #endif /* MBEDTLS_SSL_FALLBACK_SCSV */
   1868          
   1869          #if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \
   1870              defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
   1871          
   1872              /*
   1873               * Try to fall back to default hash SHA1 if the client
   1874               * hasn't provided any preferred signature-hash combinations.
   1875               */
   1876              if( sig_hash_alg_ext_present == 0 )
   1877              {
   1878                  mbedtls_md_type_t md_default = MBEDTLS_MD_SHA1;
   1879          
   1880                  if( mbedtls_ssl_check_sig_hash( ssl, md_default ) != 0 )
   1881                      md_default = MBEDTLS_MD_NONE;
   1882          
   1883                  mbedtls_ssl_sig_hash_set_const_hash( &ssl->handshake->hash_algs, md_default );
   1884              }
   1885          
   1886          #endif /* MBEDTLS_SSL_PROTO_TLS1_2 &&
   1887                    MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED */
   1888          
   1889              /*
   1890               * Check for TLS_EMPTY_RENEGOTIATION_INFO_SCSV
   1891               */
   1892              for( i = 0, p = buf + ciph_offset + 2; i < ciph_len; i += 2, p += 2 )
   \                     ??ssl_parse_client_hello_67: (+1)
   \      0xB28   0x1C89             ADDS     R1,R1,#+2
   \      0xB2A   0x1C92             ADDS     R2,R2,#+2
   \                     ??ssl_parse_client_hello_68: (+1)
   \      0xB2C   0x42B1             CMP      R1,R6
   \      0xB2E   0xD226             BCS.N    ??ssl_parse_client_hello_69
   1893              {
   1894                  if( p[0] == 0 && p[1] == MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO )
   \      0xB30   0x7810             LDRB     R0,[R2, #+0]
   \      0xB32   0x2800             CMP      R0,#+0
   \      0xB34   0xD1F8             BNE.N    ??ssl_parse_client_hello_67
   \      0xB36   0x7850             LDRB     R0,[R2, #+1]
   \      0xB38   0x28FF             CMP      R0,#+255
   \      0xB3A   0xD1F5             BNE.N    ??ssl_parse_client_hello_67
   1895                  {
   1896                      MBEDTLS_SSL_DEBUG_MSG( 3, ( "received TLS_EMPTY_RENEGOTIATION_INFO " ) );
   \      0xB3C   0x....'....        LDR.W    R0,??DataTable25_7
   \      0xB40   0x9000             STR      R0,[SP, #+0]
   \      0xB42   0xF44F 0x63ED      MOV      R3,#+1896
   \      0xB46   0x4622             MOV      R2,R4
   \      0xB48   0x2103             MOVS     R1,#+3
   \      0xB4A   0x4628             MOV      R0,R5
   \      0xB4C   0x....'....        BL       mbedtls_debug_print_msg
   1897          #if defined(MBEDTLS_SSL_RENEGOTIATION)
   1898                      if( ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS )
   \      0xB50   0x68A8             LDR      R0,[R5, #+8]
   \      0xB52   0x2801             CMP      R0,#+1
   \      0xB54   0xD110             BNE.N    ??ssl_parse_client_hello_70
   1899                      {
   1900                          MBEDTLS_SSL_DEBUG_MSG( 1, ( "received RENEGOTIATION SCSV "
   1901                                                      "during renegotiation" ) );
   \      0xB56   0x....'....        LDR.W    R0,??DataTable25_8
   \      0xB5A   0x9000             STR      R0,[SP, #+0]
   \      0xB5C   0xF240 0x736D      MOVW     R3,#+1901
   \      0xB60   0x4622             MOV      R2,R4
   \      0xB62   0x2101             MOVS     R1,#+1
   \      0xB64   0x4628             MOV      R0,R5
   \      0xB66   0x....'....        BL       mbedtls_debug_print_msg
   1902                          mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   1903                                                          MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );
   \      0xB6A   0x2228             MOVS     R2,#+40
   \      0xB6C   0x2102             MOVS     R1,#+2
   \      0xB6E   0x4628             MOV      R0,R5
   \      0xB70   0x....'....        BL       mbedtls_ssl_send_alert_message
   1904                          return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
   \      0xB74   0x....             LDR.N    R0,??DataTable16_3  ;; 0xffff8700
   \      0xB76   0xE0B0             B.N      ??ssl_parse_client_hello_8
   1905                      }
   1906          #endif
   1907                      ssl->secure_renegotiation = MBEDTLS_SSL_SECURE_RENEGOTIATION;
   \                     ??ssl_parse_client_hello_70: (+1)
   \      0xB78   0x2001             MOVS     R0,#+1
   \      0xB7A   0xF8C5 0x00F4      STR      R0,[R5, #+244]
   1908                      break;
   1909                  }
   1910              }
   1911          
   1912              /*
   1913               * Renegotiation security checks
   1914               */
   1915              if( ssl->secure_renegotiation != MBEDTLS_SSL_SECURE_RENEGOTIATION &&
   1916                  ssl->conf->allow_legacy_renegotiation == MBEDTLS_SSL_LEGACY_BREAK_HANDSHAKE )
   \                     ??ssl_parse_client_hello_69: (+1)
   \      0xB7E   0xF8D5 0x00F4      LDR      R0,[R5, #+244]
   \      0xB82   0x2801             CMP      R0,#+1
   \      0xB84   0xD013             BEQ.N    ??ssl_parse_client_hello_71
   \      0xB86   0x6828             LDR      R0,[R5, #+0]
   \      0xB88   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \      0xB8C   0xF3C0 0x1001      UBFX     R0,R0,#+4,#+2
   \      0xB90   0x2802             CMP      R0,#+2
   \      0xB92   0xD10C             BNE.N    ??ssl_parse_client_hello_71
   1917              {
   1918                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "legacy renegotiation, breaking off handshake" ) );
   \      0xB94   0x....'....        LDR.W    R0,??DataTable25_9
   \      0xB98   0x9000             STR      R0,[SP, #+0]
   \      0xB9A   0xF240 0x737E      MOVW     R3,#+1918
   \      0xB9E   0x4622             MOV      R2,R4
   \      0xBA0   0x2101             MOVS     R1,#+1
   \      0xBA2   0x4628             MOV      R0,R5
   \      0xBA4   0x....'....        BL       mbedtls_debug_print_msg
   1919                  handshake_failure = 1;
   \      0xBA8   0x2001             MOVS     R0,#+1
   \      0xBAA   0x9008             STR      R0,[SP, #+32]
   \      0xBAC   0xE045             B.N      ??ssl_parse_client_hello_72
   1920              }
   1921          #if defined(MBEDTLS_SSL_RENEGOTIATION)
   1922              else if( ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS &&
   1923                       ssl->secure_renegotiation == MBEDTLS_SSL_SECURE_RENEGOTIATION &&
   1924                       renegotiation_info_seen == 0 )
   \                     ??ssl_parse_client_hello_71: (+1)
   \      0xBAE   0x68A8             LDR      R0,[R5, #+8]
   \      0xBB0   0x2801             CMP      R0,#+1
   \      0xBB2   0xD112             BNE.N    ??ssl_parse_client_hello_73
   \      0xBB4   0xF8D5 0x00F4      LDR      R0,[R5, #+244]
   \      0xBB8   0x2801             CMP      R0,#+1
   \      0xBBA   0xD10E             BNE.N    ??ssl_parse_client_hello_73
   \      0xBBC   0x2F00             CMP      R7,#+0
   \      0xBBE   0xD10C             BNE.N    ??ssl_parse_client_hello_73
   1925              {
   1926                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "renegotiation_info extension missing (secure)" ) );
   \      0xBC0   0x....'....        LDR.W    R0,??DataTable25_10
   \      0xBC4   0x9000             STR      R0,[SP, #+0]
   \      0xBC6   0xF240 0x7386      MOVW     R3,#+1926
   \      0xBCA   0x4622             MOV      R2,R4
   \      0xBCC   0x2101             MOVS     R1,#+1
   \      0xBCE   0x4628             MOV      R0,R5
   \      0xBD0   0x....'....        BL       mbedtls_debug_print_msg
   1927                  handshake_failure = 1;
   \      0xBD4   0x2001             MOVS     R0,#+1
   \      0xBD6   0x9008             STR      R0,[SP, #+32]
   \      0xBD8   0xE02F             B.N      ??ssl_parse_client_hello_72
   1928              }
   1929              else if( ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS &&
   1930                       ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
   1931                       ssl->conf->allow_legacy_renegotiation == MBEDTLS_SSL_LEGACY_NO_RENEGOTIATION )
   \                     ??ssl_parse_client_hello_73: (+1)
   \      0xBDA   0x68A8             LDR      R0,[R5, #+8]
   \      0xBDC   0x2801             CMP      R0,#+1
   \      0xBDE   0xD117             BNE.N    ??ssl_parse_client_hello_74
   \      0xBE0   0xF8D5 0x00F4      LDR      R0,[R5, #+244]
   \      0xBE4   0x2800             CMP      R0,#+0
   \      0xBE6   0xD113             BNE.N    ??ssl_parse_client_hello_74
   \      0xBE8   0x6828             LDR      R0,[R5, #+0]
   \      0xBEA   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \      0xBEE   0xF3C0 0x1001      UBFX     R0,R0,#+4,#+2
   \      0xBF2   0x2800             CMP      R0,#+0
   \      0xBF4   0xD10C             BNE.N    ??ssl_parse_client_hello_74
   1932              {
   1933                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "legacy renegotiation not allowed" ) );
   \      0xBF6   0x....'....        LDR.W    R0,??DataTable26
   \      0xBFA   0x9000             STR      R0,[SP, #+0]
   \      0xBFC   0xF240 0x738D      MOVW     R3,#+1933
   \      0xC00   0x4622             MOV      R2,R4
   \      0xC02   0x2101             MOVS     R1,#+1
   \      0xC04   0x4628             MOV      R0,R5
   \      0xC06   0x....'....        BL       mbedtls_debug_print_msg
   1934                  handshake_failure = 1;
   \      0xC0A   0x2001             MOVS     R0,#+1
   \      0xC0C   0x9008             STR      R0,[SP, #+32]
   \      0xC0E   0xE014             B.N      ??ssl_parse_client_hello_72
   1935              }
   1936              else if( ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS &&
   1937                       ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
   1938                       renegotiation_info_seen == 1 )
   \                     ??ssl_parse_client_hello_74: (+1)
   \      0xC10   0x68A8             LDR      R0,[R5, #+8]
   \      0xC12   0x2801             CMP      R0,#+1
   \      0xC14   0xD111             BNE.N    ??ssl_parse_client_hello_72
   \      0xC16   0xF8D5 0x00F4      LDR      R0,[R5, #+244]
   \      0xC1A   0x2800             CMP      R0,#+0
   \      0xC1C   0xD10D             BNE.N    ??ssl_parse_client_hello_72
   \      0xC1E   0x2F01             CMP      R7,#+1
   \      0xC20   0xD10B             BNE.N    ??ssl_parse_client_hello_72
   1939              {
   1940                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "renegotiation_info extension present (legacy)" ) );
   \      0xC22   0x....'....        LDR.W    R0,??DataTable26_1
   \      0xC26   0x9000             STR      R0,[SP, #+0]
   \      0xC28   0xF240 0x7394      MOVW     R3,#+1940
   \      0xC2C   0x4622             MOV      R2,R4
   \      0xC2E   0x2101             MOVS     R1,#+1
   \      0xC30   0x4628             MOV      R0,R5
   \      0xC32   0x....'....        BL       mbedtls_debug_print_msg
   1941                  handshake_failure = 1;
   \      0xC36   0x2001             MOVS     R0,#+1
   \      0xC38   0x9008             STR      R0,[SP, #+32]
   1942              }
   1943          #endif /* MBEDTLS_SSL_RENEGOTIATION */
   1944          
   1945              if( handshake_failure == 1 )
   \                     ??ssl_parse_client_hello_72: (+1)
   \      0xC3A   0x9808             LDR      R0,[SP, #+32]
   \      0xC3C   0x2801             CMP      R0,#+1
   \      0xC3E   0xD106             BNE.N    ??ssl_parse_client_hello_75
   1946              {
   1947                  mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   1948                                                  MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );
   \      0xC40   0x2228             MOVS     R2,#+40
   \      0xC42   0x2102             MOVS     R1,#+2
   \      0xC44   0x4628             MOV      R0,R5
   \      0xC46   0x....'....        BL       mbedtls_ssl_send_alert_message
   1949                  return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
   \      0xC4A   0x....             LDR.N    R0,??DataTable16_3  ;; 0xffff8700
   \      0xC4C   0xE045             B.N      ??ssl_parse_client_hello_8
   1950              }
   1951          
   1952              /*
   1953               * Search for a matching ciphersuite
   1954               * (At the end because we need information from the EC-based extensions
   1955               * and certificate from the SNI callback triggered by the SNI extension.)
   1956               */
   1957              got_common_suite = 0;
   \                     ??ssl_parse_client_hello_75: (+1)
   \      0xC4E   0x2000             MOVS     R0,#+0
   1958              ciphersuites = ssl->conf->ciphersuite_list[ssl->minor_ver];
   \      0xC50   0x6829             LDR      R1,[R5, #+0]
   \      0xC52   0x696A             LDR      R2,[R5, #+20]
   \      0xC54   0xF851 0x1022      LDR      R1,[R1, R2, LSL #+2]
   1959              ciphersuite_info = NULL;
   \      0xC58   0x4602             MOV      R2,R0
   \      0xC5A   0x9205             STR      R2,[SP, #+20]
   1960          #if defined(MBEDTLS_SSL_SRV_RESPECT_CLIENT_PREFERENCE)
   1961              for( j = 0, p = buf + ciph_offset + 2; j < ciph_len; j += 2, p += 2 )
   1962                  for( i = 0; ciphersuites[i] != 0; i++ )
   1963          #else
   1964              for( i = 0; ciphersuites[i] != 0; i++ )
   \      0xC5C   0x4607             MOV      R7,R0
   \      0xC5E   0xE0B3             B.N      ??ssl_parse_client_hello_76
   1965                  for( j = 0, p = buf + ciph_offset + 2; j < ciph_len; j += 2, p += 2 )
   1966          #endif
   1967                  {
   1968                      if( p[0] != ( ( ciphersuites[i] >> 8 ) & 0xFF ) ||
   1969                          p[1] != ( ( ciphersuites[i]      ) & 0xFF ) )
   1970                          continue;
   1971          
   1972                      got_common_suite = 1;
   1973          
   1974                      if( ( ret = ssl_ciphersuite_match( ssl, ciphersuites[i],
   1975                                                         &ciphersuite_info ) ) != 0 )
   1976                          return( ret );
   1977          
   1978                      if( ciphersuite_info != NULL )
   1979                          goto have_ciphersuite;
   1980                  }
   1981          
   1982              if( got_common_suite )
   \                     ??ssl_parse_client_hello_77: (+1)
   \      0xC60   0x2800             CMP      R0,#+0
   \      0xC62   0xD011             BEQ.N    ??ssl_parse_client_hello_78
   1983              {
   1984                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "got ciphersuites in common, "
   1985                                      "but none of them usable" ) );
   \      0xC64   0x....'....        LDR.W    R0,??DataTable27
   \      0xC68   0x9000             STR      R0,[SP, #+0]
   \      0xC6A   0xF240 0x73C1      MOVW     R3,#+1985
   \      0xC6E   0x4622             MOV      R2,R4
   \      0xC70   0x2101             MOVS     R1,#+1
   \      0xC72   0x4628             MOV      R0,R5
   \      0xC74   0x....'....        BL       mbedtls_debug_print_msg
   1986                  mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   1987                                                  MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );
   \      0xC78   0x2228             MOVS     R2,#+40
   \      0xC7A   0x2102             MOVS     R1,#+2
   \      0xC7C   0x4628             MOV      R0,R5
   \      0xC7E   0x....'....        BL       mbedtls_ssl_send_alert_message
   1988                  return( MBEDTLS_ERR_SSL_NO_USABLE_CIPHERSUITE );
   \      0xC82   0x....'....        LDR.W    R0,??DataTable27_1  ;; 0xffff9680
   \      0xC86   0xE028             B.N      ??ssl_parse_client_hello_8
   1989              }
   1990              else
   1991              {
   1992                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no ciphersuites in common" ) );
   \                     ??ssl_parse_client_hello_78: (+1)
   \      0xC88   0x....'....        LDR.W    R0,??DataTable27_2
   \      0xC8C   0x9000             STR      R0,[SP, #+0]
   \      0xC8E   0xF44F 0x63F9      MOV      R3,#+1992
   \      0xC92   0x4622             MOV      R2,R4
   \      0xC94   0x2101             MOVS     R1,#+1
   \      0xC96   0x4628             MOV      R0,R5
   \      0xC98   0x....'....        BL       mbedtls_debug_print_msg
   1993                  mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   1994                                                  MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );
   \      0xC9C   0x2228             MOVS     R2,#+40
   \      0xC9E   0x2102             MOVS     R1,#+2
   \      0xCA0   0x4628             MOV      R0,R5
   \      0xCA2   0x....'....        BL       mbedtls_ssl_send_alert_message
   1995                  return( MBEDTLS_ERR_SSL_NO_CIPHER_CHOSEN );
   \      0xCA6   0x....'....        LDR.W    R0,??DataTable27_3  ;; 0xffff8c80
   \      0xCAA   0xE016             B.N      ??ssl_parse_client_hello_8
   1996              }
   1997          
   1998          have_ciphersuite:
   1999              MBEDTLS_SSL_DEBUG_MSG( 2, ( "selected ciphersuite: %s", ciphersuite_info->name ) );
   2000          
   2001              ssl->session_negotiate->ciphersuite = ciphersuites[i];
   2002              ssl->transform_negotiate->ciphersuite_info = ciphersuite_info;
   2003          
   2004              ssl->state++;
   2005          
   2006          #if defined(MBEDTLS_SSL_PROTO_DTLS)
   2007              if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
   2008                  mbedtls_ssl_recv_flight_completed( ssl );
   2009          #endif
   2010          
   2011              /* Debugging-only output for testsuite */
   2012          #if defined(MBEDTLS_DEBUG_C)                         && \
   2013              defined(MBEDTLS_SSL_PROTO_TLS1_2)                && \
   2014              defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
   2015              if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
   2016              {
   2017                  mbedtls_pk_type_t sig_alg = mbedtls_ssl_get_ciphersuite_sig_alg( ciphersuite_info );
   2018                  if( sig_alg != MBEDTLS_PK_NONE )
   2019                  {
   2020                      mbedtls_md_type_t md_alg = mbedtls_ssl_sig_hash_set_find( &ssl->handshake->hash_algs,
   2021                                                                            sig_alg );
   2022                      MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello v3, signature_algorithm ext: %d",
   2023                                                  mbedtls_ssl_hash_from_md_alg( md_alg ) ) );
   2024                  }
   2025                  else
   2026                  {
   2027                      MBEDTLS_SSL_DEBUG_MSG( 3, ( "no hash algorithm for signature algorithm "
   2028                                                  "%d - should not happen", sig_alg ) );
   \                     ??ssl_parse_client_hello_79: (+1)
   \      0xCAC   0x2000             MOVS     R0,#+0
   \      0xCAE   0x9001             STR      R0,[SP, #+4]
   \      0xCB0   0x....'....        LDR.W    R0,??DataTable27_4
   \      0xCB4   0x9000             STR      R0,[SP, #+0]
   \      0xCB6   0xF240 0x73EC      MOVW     R3,#+2028
   \      0xCBA   0x4622             MOV      R2,R4
   \      0xCBC   0x2103             MOVS     R1,#+3
   \      0xCBE   0x4628             MOV      R0,R5
   \      0xCC0   0x....'....        BL       mbedtls_debug_print_msg
   2029                  }
   2030              }
   2031          #endif
   2032          
   2033              MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse client hello" ) );
   \                     ??ssl_parse_client_hello_80: (+1)
   \      0xCC4   0x....'....        LDR.W    R0,??DataTable27_5
   \      0xCC8   0x9000             STR      R0,[SP, #+0]
   \      0xCCA   0xF240 0x73F1      MOVW     R3,#+2033
   \      0xCCE   0x4622             MOV      R2,R4
   \      0xCD0   0x2102             MOVS     R1,#+2
   \      0xCD2   0x4628             MOV      R0,R5
   \      0xCD4   0x....'....        BL       mbedtls_debug_print_msg
   2034          
   2035              return( 0 );
   \      0xCD8   0x2000             MOVS     R0,#+0
   \                     ??ssl_parse_client_hello_8: (+1)
   \      0xCDA   0xB00B             ADD      SP,SP,#+44
   \      0xCDC   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   \                     ??ssl_parse_client_hello_6: (+1)
   \      0xCE0   0x....             LDR.N    R0,??DataTable16_2
   \      0xCE2   0x9000             STR      R0,[SP, #+0]
   \      0xCE4   0xF240 0x530D      MOVW     R3,#+1293
   \      0xCE8   0x4622             MOV      R2,R4
   \      0xCEA   0x2101             MOVS     R1,#+1
   \      0xCEC   0x4630             MOV      R0,R6
   \      0xCEE   0x....'....        BL       mbedtls_debug_print_msg
   \      0xCF2   0x....             LDR.N    R0,??DataTable16_3  ;; 0xffff8700
   \      0xCF4   0xE7F1             B.N      ??ssl_parse_client_hello_8
   \      0xCF6   0xBF00             Nop      
   \                     ??ssl_parse_client_hello_0:
   \      0xCF8   0x....'....        DC32     ?_0
   \      0xCFC   0x....'....        DC32     ?_32
   \      0xD00   0x....'....        DC32     ?_34
   \      0xD04   0x....'....        DC32     ?_35
   \      0xD08   0x....'....        DC32     ?_36
   \      0xD0C   0x....'....        DC32     ?_37
   \                     ??ssl_parse_client_hello_48: (+1)
   \      0xD10   0x4635             MOV      R5,R6
   \      0xD12   0x46C1             MOV      R9,R8
   \      0xD14   0x2100             MOVS     R1,#+0
   \      0xD16   0x9803             LDR      R0,[SP, #+12]
   \      0xD18   0x9A04             LDR      R2,[SP, #+16]
   \      0xD1A   0x4410             ADD      R0,R0,R2
   \      0xD1C   0x1C82             ADDS     R2,R0,#+2
   \      0xD1E   0x465E             MOV      R6,R11
   \      0xD20   0xE6D7             B.N      ??ssl_parse_client_hello_65
   \                     ??ssl_parse_client_hello_66: (+1)
   \      0xD22   0xF1B9 0x0F00      CMP      R9,#+0
   \      0xD26   0xD10D             BNE.N    ??ssl_parse_client_hello_81
   \      0xD28   0xF04F 0x0804      MOV      R8,#+4
   \      0xD2C   0x4641             MOV      R1,R8
   \      0xD2E   0x4628             MOV      R0,R5
   \      0xD30   0x....'....        BL       mbedtls_ssl_check_sig_hash
   \      0xD34   0x2800             CMP      R0,#+0
   \      0xD36   0xD001             BEQ.N    ??ssl_parse_client_hello_82
   \      0xD38   0xF04F 0x0800      MOV      R8,#+0
   \                     ??ssl_parse_client_hello_82: (+1)
   \      0xD3C   0x4641             MOV      R1,R8
   \      0xD3E   0x6BE8             LDR      R0,[R5, #+60]
   \      0xD40   0x....'....        BL       mbedtls_ssl_sig_hash_set_const_hash
   \                     ??ssl_parse_client_hello_81: (+1)
   \      0xD44   0x2100             MOVS     R1,#+0
   \      0xD46   0x9803             LDR      R0,[SP, #+12]
   \      0xD48   0x9A04             LDR      R2,[SP, #+16]
   \      0xD4A   0x4410             ADD      R0,R0,R2
   \      0xD4C   0x1C82             ADDS     R2,R0,#+2
   \      0xD4E   0xE6ED             B.N      ??ssl_parse_client_hello_68
   \                     ??ssl_parse_client_hello_83: (+1)
   \      0xD50   0x6840             LDR      R0,[R0, #+4]
   \      0xD52   0x9001             STR      R0,[SP, #+4]
   \      0xD54   0x....'....        LDR.W    R0,??DataTable27_6
   \      0xD58   0x9000             STR      R0,[SP, #+0]
   \      0xD5A   0xF240 0x73CF      MOVW     R3,#+1999
   \      0xD5E   0x4622             MOV      R2,R4
   \      0xD60   0x2102             MOVS     R1,#+2
   \      0xD62   0x4628             MOV      R0,R5
   \      0xD64   0x....'....        BL       mbedtls_debug_print_msg
   \      0xD68   0xF859 0x0027      LDR      R0,[R9, R7, LSL #+2]
   \      0xD6C   0x6BA9             LDR      R1,[R5, #+56]
   \      0xD6E   0x6008             STR      R0,[R1, #+0]
   \      0xD70   0x9805             LDR      R0,[SP, #+20]
   \      0xD72   0x6CE9             LDR      R1,[R5, #+76]
   \      0xD74   0x6008             STR      R0,[R1, #+0]
   \      0xD76   0x6868             LDR      R0,[R5, #+4]
   \      0xD78   0x1C40             ADDS     R0,R0,#+1
   \      0xD7A   0x6068             STR      R0,[R5, #+4]
   \      0xD7C   0x6828             LDR      R0,[R5, #+0]
   \      0xD7E   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \      0xD82   0xF3C0 0x0040      UBFX     R0,R0,#+1,#+1
   \      0xD86   0x2800             CMP      R0,#+0
   \      0xD88   0xD002             BEQ.N    ??ssl_parse_client_hello_84
   \      0xD8A   0x4628             MOV      R0,R5
   \      0xD8C   0x....'....        BL       mbedtls_ssl_recv_flight_completed
   \                     ??ssl_parse_client_hello_84: (+1)
   \      0xD90   0x6968             LDR      R0,[R5, #+20]
   \      0xD92   0x2803             CMP      R0,#+3
   \      0xD94   0xD196             BNE.N    ??ssl_parse_client_hello_80
   \      0xD96   0x9805             LDR      R0,[SP, #+20]
   \      0xD98   0x....'....        BL       mbedtls_ssl_get_ciphersuite_sig_alg
   \      0xD9C   0x0001             MOVS     R1,R0
   \      0xD9E   0xD085             BEQ.N    ??ssl_parse_client_hello_79
   \      0xDA0   0x6BE8             LDR      R0,[R5, #+60]
   \      0xDA2   0x....'....        BL       mbedtls_ssl_sig_hash_set_find
   \      0xDA6   0x....'....        BL       mbedtls_ssl_hash_from_md_alg
   \      0xDAA   0x9001             STR      R0,[SP, #+4]
   \      0xDAC   0x....'....        LDR.W    R0,??DataTable27_7
   \      0xDB0   0x9000             STR      R0,[SP, #+0]
   \      0xDB2   0xF240 0x73E7      MOVW     R3,#+2023
   \      0xDB6   0x4622             MOV      R2,R4
   \      0xDB8   0x2103             MOVS     R1,#+3
   \      0xDBA   0x4628             MOV      R0,R5
   \      0xDBC   0x....'....        BL       mbedtls_debug_print_msg
   \      0xDC0   0xE780             B.N      ??ssl_parse_client_hello_80
   \                     ??ssl_parse_client_hello_85: (+1)
   \      0xDC2   0x4658             MOV      R0,R11
   \      0xDC4   0x4649             MOV      R1,R9
   \      0xDC6   0x1C7F             ADDS     R7,R7,#+1
   \                     ??ssl_parse_client_hello_76: (+1)
   \      0xDC8   0xF851 0x2027      LDR      R2,[R1, R7, LSL #+2]
   \      0xDCC   0x2A00             CMP      R2,#+0
   \      0xDCE   0xF43F 0xAF47      BEQ.W    ??ssl_parse_client_hello_77
   \      0xDD2   0xF04F 0x0A00      MOV      R10,#+0
   \      0xDD6   0x9A03             LDR      R2,[SP, #+12]
   \      0xDD8   0x9B04             LDR      R3,[SP, #+16]
   \      0xDDA   0x441A             ADD      R2,R2,R3
   \      0xDDC   0xF102 0x0802      ADD      R8,R2,#+2
   \      0xDE0   0x4683             MOV      R11,R0
   \      0xDE2   0x4689             MOV      R9,R1
   \                     ??ssl_parse_client_hello_86: (+1)
   \      0xDE4   0x45B2             CMP      R10,R6
   \      0xDE6   0xD2EC             BCS.N    ??ssl_parse_client_hello_85
   \      0xDE8   0xF898 0x0000      LDRB     R0,[R8, #+0]
   \      0xDEC   0xF859 0x1027      LDR      R1,[R9, R7, LSL #+2]
   \      0xDF0   0xF3C1 0x2107      UBFX     R1,R1,#+8,#+8
   \      0xDF4   0x4288             CMP      R0,R1
   \      0xDF6   0xD113             BNE.N    ??ssl_parse_client_hello_87
   \      0xDF8   0xF898 0x0001      LDRB     R0,[R8, #+1]
   \      0xDFC   0xF819 0x1027      LDRB     R1,[R9, R7, LSL #+2]
   \      0xE00   0x4288             CMP      R0,R1
   \      0xE02   0xD10D             BNE.N    ??ssl_parse_client_hello_87
   \      0xE04   0xF04F 0x0B01      MOV      R11,#+1
   \      0xE08   0xAA05             ADD      R2,SP,#+20
   \      0xE0A   0xF859 0x1027      LDR      R1,[R9, R7, LSL #+2]
   \      0xE0E   0x4628             MOV      R0,R5
   \      0xE10   0x....'....        BL       ssl_ciphersuite_match
   \      0xE14   0x2800             CMP      R0,#+0
   \      0xE16   0xF47F 0xAF60      BNE.W    ??ssl_parse_client_hello_8
   \      0xE1A   0x9805             LDR      R0,[SP, #+20]
   \      0xE1C   0x2800             CMP      R0,#+0
   \      0xE1E   0xD197             BNE.N    ??ssl_parse_client_hello_83
   \                     ??ssl_parse_client_hello_87: (+1)
   \      0xE20   0xF10A 0x0A02      ADD      R10,R10,#+2
   \      0xE24   0xF108 0x0802      ADD      R8,R8,#+2
   \      0xE28   0xE7DC             B.N      ??ssl_parse_client_hello_86
   2036          }
   2037          
   2038          #if defined(MBEDTLS_SSL_TRUNCATED_HMAC)

   \                                 In section .text, align 2, keep-with-next
   2039          static void ssl_write_truncated_hmac_ext( mbedtls_ssl_context *ssl,
   2040                                                    unsigned char *buf,
   2041                                                    size_t *olen )
   2042          {
   \                     ssl_write_truncated_hmac_ext: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x460D             MOV      R5,R1
   \        0x4   0x4614             MOV      R4,R2
   2043              unsigned char *p = buf;
   2044          
   2045              if( ssl->session_negotiate->trunc_hmac == MBEDTLS_SSL_TRUNC_HMAC_DISABLED )
   \        0x6   0x6B81             LDR      R1,[R0, #+56]
   \        0x8   0x6F49             LDR      R1,[R1, #+116]
   \        0xA   0x2900             CMP      R1,#+0
   \        0xC   0xD102             BNE.N    ??ssl_write_truncated_hmac_ext_0
   2046              {
   2047                  *olen = 0;
   \        0xE   0x2000             MOVS     R0,#+0
   \       0x10   0x6020             STR      R0,[R4, #+0]
   2048                  return;
   \       0x12   0xBD31             POP      {R0,R4,R5,PC}
   2049              }
   2050          
   2051              MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, adding truncated hmac extension" ) );
   \                     ??ssl_write_truncated_hmac_ext_0: (+1)
   \       0x14   0x....'....        LDR.W    R1,??DataTable27_8
   \       0x18   0x9100             STR      R1,[SP, #+0]
   \       0x1A   0xF640 0x0303      MOVW     R3,#+2051
   \       0x1E   0x....'....        LDR.W    R2,??DataTable27_9
   \       0x22   0x2103             MOVS     R1,#+3
   \       0x24   0x....'....        BL       mbedtls_debug_print_msg
   2052          
   2053              *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_TRUNCATED_HMAC >> 8 ) & 0xFF );
   \       0x28   0x2000             MOVS     R0,#+0
   \       0x2A   0x7028             STRB     R0,[R5, #+0]
   2054              *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_TRUNCATED_HMAC      ) & 0xFF );
   \       0x2C   0x2004             MOVS     R0,#+4
   \       0x2E   0x7068             STRB     R0,[R5, #+1]
   2055          
   2056              *p++ = 0x00;
   \       0x30   0x2000             MOVS     R0,#+0
   \       0x32   0x70A8             STRB     R0,[R5, #+2]
   2057              *p++ = 0x00;
   \       0x34   0x70E8             STRB     R0,[R5, #+3]
   2058          
   2059              *olen = 4;
   \       0x36   0x2004             MOVS     R0,#+4
   \       0x38   0x6020             STR      R0,[R4, #+0]
   2060          }
   \       0x3A   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   2061          #endif /* MBEDTLS_SSL_TRUNCATED_HMAC */
   2062          
   2063          #if defined(MBEDTLS_SSL_ENCRYPT_THEN_MAC)

   \                                 In section .text, align 2, keep-with-next
   2064          static void ssl_write_encrypt_then_mac_ext( mbedtls_ssl_context *ssl,
   2065                                                      unsigned char *buf,
   2066                                                      size_t *olen )
   2067          {
   \                     ssl_write_encrypt_then_mac_ext: (+1)
   \        0x0   0xB57C             PUSH     {R2-R6,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
   \        0x6   0x4616             MOV      R6,R2
   2068              unsigned char *p = buf;
   2069              const mbedtls_ssl_ciphersuite_t *suite = NULL;
   2070              const mbedtls_cipher_info_t *cipher = NULL;
   2071          
   2072              if( ssl->session_negotiate->encrypt_then_mac == MBEDTLS_SSL_ETM_DISABLED ||
   2073                  ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 )
   \        0x8   0x6BA0             LDR      R0,[R4, #+56]
   \        0xA   0x6F80             LDR      R0,[R0, #+120]
   \        0xC   0x2800             CMP      R0,#+0
   \        0xE   0xD010             BEQ.N    ??ssl_write_encrypt_then_mac_ext_0
   \       0x10   0x6960             LDR      R0,[R4, #+20]
   \       0x12   0x2800             CMP      R0,#+0
   \       0x14   0xD00D             BEQ.N    ??ssl_write_encrypt_then_mac_ext_0
   2074              {
   2075                  *olen = 0;
   2076                  return;
   2077              }
   2078          
   2079              /*
   2080               * RFC 7366: "If a server receives an encrypt-then-MAC request extension
   2081               * from a client and then selects a stream or Authenticated Encryption
   2082               * with Associated Data (AEAD) ciphersuite, it MUST NOT send an
   2083               * encrypt-then-MAC response extension back to the client."
   2084               */
   2085              if( ( suite = mbedtls_ssl_ciphersuite_from_id(
   2086                              ssl->session_negotiate->ciphersuite ) ) == NULL ||
   2087                  ( cipher = mbedtls_cipher_info_from_type( suite->cipher ) ) == NULL ||
   2088                  cipher->mode != MBEDTLS_MODE_CBC )
   \       0x16   0x6BA0             LDR      R0,[R4, #+56]
   \       0x18   0x6800             LDR      R0,[R0, #+0]
   \       0x1A   0x....'....        BL       mbedtls_ssl_ciphersuite_from_id
   \       0x1E   0x2800             CMP      R0,#+0
   \       0x20   0xD007             BEQ.N    ??ssl_write_encrypt_then_mac_ext_0
   \       0x22   0x7A00             LDRB     R0,[R0, #+8]
   \       0x24   0x....'....        BL       mbedtls_cipher_info_from_type
   \       0x28   0x2800             CMP      R0,#+0
   \       0x2A   0xD002             BEQ.N    ??ssl_write_encrypt_then_mac_ext_0
   \       0x2C   0x7840             LDRB     R0,[R0, #+1]
   \       0x2E   0x2802             CMP      R0,#+2
   \       0x30   0xD002             BEQ.N    ??ssl_write_encrypt_then_mac_ext_1
   2089              {
   2090                  *olen = 0;
   \                     ??ssl_write_encrypt_then_mac_ext_0: (+1)
   \       0x32   0x2000             MOVS     R0,#+0
   \       0x34   0x6030             STR      R0,[R6, #+0]
   2091                  return;
   \       0x36   0xBD73             POP      {R0,R1,R4-R6,PC}
   2092              }
   2093          
   2094              MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, adding encrypt then mac extension" ) );
   \                     ??ssl_write_encrypt_then_mac_ext_1: (+1)
   \       0x38   0x....'....        LDR.W    R0,??DataTable27_10
   \       0x3C   0x9000             STR      R0,[SP, #+0]
   \       0x3E   0xF640 0x032E      MOVW     R3,#+2094
   \       0x42   0x....'....        LDR.W    R2,??DataTable27_9
   \       0x46   0x2103             MOVS     R1,#+3
   \       0x48   0x4620             MOV      R0,R4
   \       0x4A   0x....'....        BL       mbedtls_debug_print_msg
   2095          
   2096              *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_ENCRYPT_THEN_MAC >> 8 ) & 0xFF );
   \       0x4E   0x2000             MOVS     R0,#+0
   \       0x50   0x7028             STRB     R0,[R5, #+0]
   2097              *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_ENCRYPT_THEN_MAC      ) & 0xFF );
   \       0x52   0x2016             MOVS     R0,#+22
   \       0x54   0x7068             STRB     R0,[R5, #+1]
   2098          
   2099              *p++ = 0x00;
   \       0x56   0x2000             MOVS     R0,#+0
   \       0x58   0x70A8             STRB     R0,[R5, #+2]
   2100              *p++ = 0x00;
   \       0x5A   0x70E8             STRB     R0,[R5, #+3]
   2101          
   2102              *olen = 4;
   \       0x5C   0x2004             MOVS     R0,#+4
   \       0x5E   0x6030             STR      R0,[R6, #+0]
   2103          }
   \       0x60   0xBD73             POP      {R0,R1,R4-R6,PC}  ;; return
   2104          #endif /* MBEDTLS_SSL_ENCRYPT_THEN_MAC */
   2105          
   2106          #if defined(MBEDTLS_SSL_EXTENDED_MASTER_SECRET)

   \                                 In section .text, align 2, keep-with-next
   2107          static void ssl_write_extended_ms_ext( mbedtls_ssl_context *ssl,
   2108                                                 unsigned char *buf,
   2109                                                 size_t *olen )
   2110          {
   \                     ssl_write_extended_ms_ext: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x460D             MOV      R5,R1
   \        0x4   0x4614             MOV      R4,R2
   2111              unsigned char *p = buf;
   2112          
   2113              if( ssl->handshake->extended_ms == MBEDTLS_SSL_EXTENDED_MS_DISABLED ||
   2114                  ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 )
   \        0x6   0x6BC1             LDR      R1,[R0, #+60]
   \        0x8   0xF8D1 0x16D4      LDR      R1,[R1, #+1748]
   \        0xC   0x2900             CMP      R1,#+0
   \        0xE   0xD002             BEQ.N    ??ssl_write_extended_ms_ext_0
   \       0x10   0x6941             LDR      R1,[R0, #+20]
   \       0x12   0x2900             CMP      R1,#+0
   \       0x14   0xD102             BNE.N    ??ssl_write_extended_ms_ext_1
   2115              {
   2116                  *olen = 0;
   \                     ??ssl_write_extended_ms_ext_0: (+1)
   \       0x16   0x2000             MOVS     R0,#+0
   \       0x18   0x6020             STR      R0,[R4, #+0]
   2117                  return;
   \       0x1A   0xBD31             POP      {R0,R4,R5,PC}
   2118              }
   2119          
   2120              MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, adding extended master secret "
   2121                                  "extension" ) );
   \                     ??ssl_write_extended_ms_ext_1: (+1)
   \       0x1C   0x....'....        LDR.W    R1,??DataTable27_11
   \       0x20   0x9100             STR      R1,[SP, #+0]
   \       0x22   0xF640 0x0349      MOVW     R3,#+2121
   \       0x26   0x....'....        LDR.W    R2,??DataTable27_9
   \       0x2A   0x2103             MOVS     R1,#+3
   \       0x2C   0x....'....        BL       mbedtls_debug_print_msg
   2122          
   2123              *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_EXTENDED_MASTER_SECRET >> 8 ) & 0xFF );
   \       0x30   0x2000             MOVS     R0,#+0
   \       0x32   0x7028             STRB     R0,[R5, #+0]
   2124              *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_EXTENDED_MASTER_SECRET      ) & 0xFF );
   \       0x34   0x2017             MOVS     R0,#+23
   \       0x36   0x7068             STRB     R0,[R5, #+1]
   2125          
   2126              *p++ = 0x00;
   \       0x38   0x2000             MOVS     R0,#+0
   \       0x3A   0x70A8             STRB     R0,[R5, #+2]
   2127              *p++ = 0x00;
   \       0x3C   0x70E8             STRB     R0,[R5, #+3]
   2128          
   2129              *olen = 4;
   \       0x3E   0x2004             MOVS     R0,#+4
   \       0x40   0x6020             STR      R0,[R4, #+0]
   2130          }
   \       0x42   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   2131          #endif /* MBEDTLS_SSL_EXTENDED_MASTER_SECRET */
   2132          
   2133          #if defined(MBEDTLS_SSL_SESSION_TICKETS)

   \                                 In section .text, align 2, keep-with-next
   2134          static void ssl_write_session_ticket_ext( mbedtls_ssl_context *ssl,
   2135                                                    unsigned char *buf,
   2136                                                    size_t *olen )
   2137          {
   \                     ssl_write_session_ticket_ext: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x460D             MOV      R5,R1
   \        0x4   0x4614             MOV      R4,R2
   2138              unsigned char *p = buf;
   2139          
   2140              if( ssl->handshake->new_session_ticket == 0 )
   \        0x6   0x6BC1             LDR      R1,[R0, #+60]
   \        0x8   0xF8D1 0x16D0      LDR      R1,[R1, #+1744]
   \        0xC   0x2900             CMP      R1,#+0
   \        0xE   0xD102             BNE.N    ??ssl_write_session_ticket_ext_0
   2141              {
   2142                  *olen = 0;
   \       0x10   0x2000             MOVS     R0,#+0
   \       0x12   0x6020             STR      R0,[R4, #+0]
   2143                  return;
   \       0x14   0xBD31             POP      {R0,R4,R5,PC}
   2144              }
   2145          
   2146              MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, adding session ticket extension" ) );
   \                     ??ssl_write_session_ticket_ext_0: (+1)
   \       0x16   0x....'....        LDR.W    R1,??DataTable27_12
   \       0x1A   0x9100             STR      R1,[SP, #+0]
   \       0x1C   0xF640 0x0362      MOVW     R3,#+2146
   \       0x20   0x....'....        LDR.W    R2,??DataTable27_9
   \       0x24   0x2103             MOVS     R1,#+3
   \       0x26   0x....'....        BL       mbedtls_debug_print_msg
   2147          
   2148              *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SESSION_TICKET >> 8 ) & 0xFF );
   \       0x2A   0x2000             MOVS     R0,#+0
   \       0x2C   0x7028             STRB     R0,[R5, #+0]
   2149              *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SESSION_TICKET      ) & 0xFF );
   \       0x2E   0x2023             MOVS     R0,#+35
   \       0x30   0x7068             STRB     R0,[R5, #+1]
   2150          
   2151              *p++ = 0x00;
   \       0x32   0x2000             MOVS     R0,#+0
   \       0x34   0x70A8             STRB     R0,[R5, #+2]
   2152              *p++ = 0x00;
   \       0x36   0x70E8             STRB     R0,[R5, #+3]
   2153          
   2154              *olen = 4;
   \       0x38   0x2004             MOVS     R0,#+4
   \       0x3A   0x6020             STR      R0,[R4, #+0]
   2155          }
   \       0x3C   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   2156          #endif /* MBEDTLS_SSL_SESSION_TICKETS */
   2157          

   \                                 In section .text, align 2, keep-with-next
   2158          static void ssl_write_renegotiation_ext( mbedtls_ssl_context *ssl,
   2159                                                   unsigned char *buf,
   2160                                                   size_t *olen )
   2161          {
   \                     ssl_write_renegotiation_ext: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x4606             MOV      R6,R0
   \        0x4   0x460D             MOV      R5,R1
   \        0x6   0x4614             MOV      R4,R2
   2162              unsigned char *p = buf;
   2163          
   2164              if( ssl->secure_renegotiation != MBEDTLS_SSL_SECURE_RENEGOTIATION )
   \        0x8   0xF8D6 0x00F4      LDR      R0,[R6, #+244]
   \        0xC   0x2801             CMP      R0,#+1
   \        0xE   0xD002             BEQ.N    ??ssl_write_renegotiation_ext_0
   2165              {
   2166                  *olen = 0;
   \       0x10   0x2000             MOVS     R0,#+0
   \       0x12   0x6020             STR      R0,[R4, #+0]
   2167                  return;
   \       0x14   0xBDF1             POP      {R0,R4-R7,PC}
   2168              }
   2169          
   2170              MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, secure renegotiation extension" ) );
   \                     ??ssl_write_renegotiation_ext_0: (+1)
   \       0x16   0x....'....        LDR.W    R0,??DataTable27_13
   \       0x1A   0x9000             STR      R0,[SP, #+0]
   \       0x1C   0xF640 0x037A      MOVW     R3,#+2170
   \       0x20   0x....'....        LDR.W    R2,??DataTable27_9
   \       0x24   0x2103             MOVS     R1,#+3
   \       0x26   0x4630             MOV      R0,R6
   \       0x28   0x....'....        BL       mbedtls_debug_print_msg
   2171          
   2172              *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_RENEGOTIATION_INFO >> 8 ) & 0xFF );
   \       0x2C   0x20FF             MOVS     R0,#+255
   \       0x2E   0x7028             STRB     R0,[R5, #+0]
   2173              *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_RENEGOTIATION_INFO      ) & 0xFF );
   \       0x30   0x2001             MOVS     R0,#+1
   \       0x32   0x7068             STRB     R0,[R5, #+1]
   2174          
   2175          #if defined(MBEDTLS_SSL_RENEGOTIATION)
   2176              if( ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE )
   \       0x34   0x68B0             LDR      R0,[R6, #+8]
   \       0x36   0x2800             CMP      R0,#+0
   \       0x38   0xD01F             BEQ.N    ??ssl_write_renegotiation_ext_1
   2177              {
   2178                  *p++ = 0x00;
   \       0x3A   0x2000             MOVS     R0,#+0
   \       0x3C   0x70A8             STRB     R0,[R5, #+2]
   2179                  *p++ = ( ssl->verify_data_len * 2 + 1 ) & 0xFF;
   \       0x3E   0xF8D6 0x00F8      LDR      R0,[R6, #+248]
   \       0x42   0x0040             LSLS     R0,R0,#+1
   \       0x44   0x1C40             ADDS     R0,R0,#+1
   \       0x46   0x70E8             STRB     R0,[R5, #+3]
   2180                  *p++ = ssl->verify_data_len * 2 & 0xFF;
   \       0x48   0xF8D6 0x00F8      LDR      R0,[R6, #+248]
   \       0x4C   0x0040             LSLS     R0,R0,#+1
   \       0x4E   0x7128             STRB     R0,[R5, #+4]
   \       0x50   0x1D6F             ADDS     R7,R5,#+5
   2181          
   2182                  memcpy( p, ssl->peer_verify_data, ssl->verify_data_len );
   \       0x52   0xF8D6 0x20F8      LDR      R2,[R6, #+248]
   \       0x56   0xF506 0x7184      ADD      R1,R6,#+264
   \       0x5A   0x4638             MOV      R0,R7
   \       0x5C   0x....'....        BL       __aeabi_memcpy
   2183                  p += ssl->verify_data_len;
   \       0x60   0xF8D6 0x00F8      LDR      R0,[R6, #+248]
   \       0x64   0x4407             ADD      R7,R7,R0
   2184                  memcpy( p, ssl->own_verify_data, ssl->verify_data_len );
   \       0x66   0x4602             MOV      R2,R0
   \       0x68   0xF106 0x01FC      ADD      R1,R6,#+252
   \       0x6C   0x4638             MOV      R0,R7
   \       0x6E   0x....'....        BL       __aeabi_memcpy
   2185                  p += ssl->verify_data_len;
   \       0x72   0xF8D6 0x00F8      LDR      R0,[R6, #+248]
   \       0x76   0x4438             ADD      R0,R7,R0
   \       0x78   0xE006             B.N      ??ssl_write_renegotiation_ext_2
   2186              }
   2187              else
   2188          #endif /* MBEDTLS_SSL_RENEGOTIATION */
   2189              {
   2190                  *p++ = 0x00;
   \                     ??ssl_write_renegotiation_ext_1: (+1)
   \       0x7A   0x2000             MOVS     R0,#+0
   \       0x7C   0x70A8             STRB     R0,[R5, #+2]
   2191                  *p++ = 0x01;
   \       0x7E   0x2001             MOVS     R0,#+1
   \       0x80   0x70E8             STRB     R0,[R5, #+3]
   2192                  *p++ = 0x00;
   \       0x82   0x2000             MOVS     R0,#+0
   \       0x84   0x7128             STRB     R0,[R5, #+4]
   \       0x86   0x1D68             ADDS     R0,R5,#+5
   2193              }
   2194          
   2195              *olen = p - buf;
   \                     ??ssl_write_renegotiation_ext_2: (+1)
   \       0x88   0x1B45             SUBS     R5,R0,R5
   \       0x8A   0x6025             STR      R5,[R4, #+0]
   2196          }
   \       0x8C   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
   2197          
   2198          #if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)

   \                                 In section .text, align 2, keep-with-next
   2199          static void ssl_write_max_fragment_length_ext( mbedtls_ssl_context *ssl,
   2200                                                         unsigned char *buf,
   2201                                                         size_t *olen )
   2202          {
   \                     ssl_write_max_fragment_length_ext: (+1)
   \        0x0   0xB57C             PUSH     {R2-R6,LR}
   \        0x2   0x4605             MOV      R5,R0
   \        0x4   0x460E             MOV      R6,R1
   \        0x6   0x4614             MOV      R4,R2
   2203              unsigned char *p = buf;
   2204          
   2205              if( ssl->session_negotiate->mfl_code == MBEDTLS_SSL_MAX_FRAG_LEN_NONE )
   \        0x8   0x6BA8             LDR      R0,[R5, #+56]
   \        0xA   0xF890 0x0070      LDRB     R0,[R0, #+112]
   \        0xE   0x2800             CMP      R0,#+0
   \       0x10   0xD102             BNE.N    ??ssl_write_max_fragment_length_ext_0
   2206              {
   2207                  *olen = 0;
   \       0x12   0x2000             MOVS     R0,#+0
   \       0x14   0x6020             STR      R0,[R4, #+0]
   2208                  return;
   \       0x16   0xBD73             POP      {R0,R1,R4-R6,PC}
   2209              }
   2210          
   2211              MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, max_fragment_length extension" ) );
   \                     ??ssl_write_max_fragment_length_ext_0: (+1)
   \       0x18   0x....'....        LDR.W    R0,??DataTable27_14
   \       0x1C   0x9000             STR      R0,[SP, #+0]
   \       0x1E   0xF640 0x03A3      MOVW     R3,#+2211
   \       0x22   0x....'....        LDR.W    R2,??DataTable27_9
   \       0x26   0x2103             MOVS     R1,#+3
   \       0x28   0x4628             MOV      R0,R5
   \       0x2A   0x....'....        BL       mbedtls_debug_print_msg
   2212          
   2213              *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH >> 8 ) & 0xFF );
   \       0x2E   0x2000             MOVS     R0,#+0
   \       0x30   0x7030             STRB     R0,[R6, #+0]
   2214              *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH      ) & 0xFF );
   \       0x32   0x2001             MOVS     R0,#+1
   \       0x34   0x7070             STRB     R0,[R6, #+1]
   2215          
   2216              *p++ = 0x00;
   \       0x36   0x2000             MOVS     R0,#+0
   \       0x38   0x70B0             STRB     R0,[R6, #+2]
   2217              *p++ = 1;
   \       0x3A   0x2001             MOVS     R0,#+1
   \       0x3C   0x70F0             STRB     R0,[R6, #+3]
   2218          
   2219              *p++ = ssl->session_negotiate->mfl_code;
   \       0x3E   0x6BA8             LDR      R0,[R5, #+56]
   \       0x40   0xF890 0x0070      LDRB     R0,[R0, #+112]
   \       0x44   0x7130             STRB     R0,[R6, #+4]
   2220          
   2221              *olen = 5;
   \       0x46   0x2005             MOVS     R0,#+5
   \       0x48   0x6020             STR      R0,[R4, #+0]
   2222          }
   \       0x4A   0xBD73             POP      {R0,R1,R4-R6,PC}  ;; return
   2223          #endif /* MBEDTLS_SSL_MAX_FRAGMENT_LENGTH */
   2224          
   2225          #if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) || \
   2226              defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)

   \                                 In section .text, align 2, keep-with-next
   2227          static void ssl_write_supported_point_formats_ext( mbedtls_ssl_context *ssl,
   2228                                                             unsigned char *buf,
   2229                                                             size_t *olen )
   2230          {
   \                     ssl_write_supported_point_formats_ext: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x460D             MOV      R5,R1
   \        0x4   0x4614             MOV      R4,R2
   2231              unsigned char *p = buf;
   2232              ((void) ssl);
   2233          
   2234              if( ( ssl->handshake->cli_exts &
   2235                    MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS_PRESENT ) == 0 )
   \        0x6   0x6BC1             LDR      R1,[R0, #+60]
   \        0x8   0xF891 0x16CC      LDRB     R1,[R1, #+1740]
   \        0xC   0x07C9             LSLS     R1,R1,#+31
   \        0xE   0xD402             BMI.N    ??ssl_write_supported_point_formats_ext_0
   2236              {
   2237                  *olen = 0;
   \       0x10   0x2000             MOVS     R0,#+0
   \       0x12   0x6020             STR      R0,[R4, #+0]
   2238                  return;
   \       0x14   0xBD31             POP      {R0,R4,R5,PC}
   2239              }
   2240          
   2241              MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, supported_point_formats extension" ) );
   \                     ??ssl_write_supported_point_formats_ext_0: (+1)
   \       0x16   0x....'....        LDR.W    R1,??DataTable27_15
   \       0x1A   0x9100             STR      R1,[SP, #+0]
   \       0x1C   0xF640 0x03C1      MOVW     R3,#+2241
   \       0x20   0x....'....        LDR.W    R2,??DataTable27_9
   \       0x24   0x2103             MOVS     R1,#+3
   \       0x26   0x....'....        BL       mbedtls_debug_print_msg
   2242          
   2243              *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS >> 8 ) & 0xFF );
   \       0x2A   0x2000             MOVS     R0,#+0
   \       0x2C   0x7028             STRB     R0,[R5, #+0]
   2244              *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS      ) & 0xFF );
   \       0x2E   0x200B             MOVS     R0,#+11
   \       0x30   0x7068             STRB     R0,[R5, #+1]
   2245          
   2246              *p++ = 0x00;
   \       0x32   0x2000             MOVS     R0,#+0
   \       0x34   0x70A8             STRB     R0,[R5, #+2]
   2247              *p++ = 2;
   \       0x36   0x2002             MOVS     R0,#+2
   \       0x38   0x70E8             STRB     R0,[R5, #+3]
   2248          
   2249              *p++ = 1;
   \       0x3A   0x2001             MOVS     R0,#+1
   \       0x3C   0x7128             STRB     R0,[R5, #+4]
   2250              *p++ = MBEDTLS_ECP_PF_UNCOMPRESSED;
   \       0x3E   0x2000             MOVS     R0,#+0
   \       0x40   0x7168             STRB     R0,[R5, #+5]
   2251          
   2252              *olen = 6;
   \       0x42   0x2006             MOVS     R0,#+6
   \       0x44   0x6020             STR      R0,[R4, #+0]
   2253          }
   \       0x46   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   2254          #endif /* MBEDTLS_ECDH_C || MBEDTLS_ECDSA_C || MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */
   2255          
   2256          #if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
   2257          static void ssl_write_ecjpake_kkpp_ext( mbedtls_ssl_context *ssl,
   2258                                                  unsigned char *buf,
   2259                                                  size_t *olen )
   2260          {
   2261              int ret;
   2262              unsigned char *p = buf;
   2263              const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
   2264              size_t kkpp_len;
   2265          
   2266              *olen = 0;
   2267          
   2268              /* Skip costly computation if not needed */
   2269              if( ssl->transform_negotiate->ciphersuite_info->key_exchange !=
   2270                  MBEDTLS_KEY_EXCHANGE_ECJPAKE )
   2271                  return;
   2272          
   2273              MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, ecjpake kkpp extension" ) );
   2274          
   2275              if( end - p < 4 )
   2276              {
   2277                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
   2278                  return;
   2279              }
   2280          
   2281              *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_ECJPAKE_KKPP >> 8 ) & 0xFF );
   2282              *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_ECJPAKE_KKPP      ) & 0xFF );
   2283          
   2284              ret = mbedtls_ecjpake_write_round_one( &ssl->handshake->ecjpake_ctx,
   2285                                                  p + 2, end - p - 2, &kkpp_len,
   2286                                                  ssl->conf->f_rng, ssl->conf->p_rng );
   2287              if( ret != 0 )
   2288              {
   2289                  MBEDTLS_SSL_DEBUG_RET( 1 , "mbedtls_ecjpake_write_round_one", ret );
   2290                  return;
   2291              }
   2292          
   2293              *p++ = (unsigned char)( ( kkpp_len >> 8 ) & 0xFF );
   2294              *p++ = (unsigned char)( ( kkpp_len      ) & 0xFF );
   2295          
   2296              *olen = kkpp_len + 4;
   2297          }
   2298          #endif /* MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */
   2299          
   2300          #if defined(MBEDTLS_SSL_ALPN )

   \                                 In section .text, align 2, keep-with-next
   2301          static void ssl_write_alpn_ext( mbedtls_ssl_context *ssl,
   2302                                          unsigned char *buf, size_t *olen )
   2303          {
   \                     ssl_write_alpn_ext: (+1)
   \        0x0   0xB57C             PUSH     {R2-R6,LR}
   \        0x2   0x4605             MOV      R5,R0
   \        0x4   0x460E             MOV      R6,R1
   \        0x6   0x4614             MOV      R4,R2
   2304              if( ssl->alpn_chosen == NULL )
   \        0x8   0xF8D5 0x00E8      LDR      R0,[R5, #+232]
   \        0xC   0x2800             CMP      R0,#+0
   \        0xE   0xD102             BNE.N    ??ssl_write_alpn_ext_0
   2305              {
   2306                  *olen = 0;
   \       0x10   0x2000             MOVS     R0,#+0
   \       0x12   0x6020             STR      R0,[R4, #+0]
   2307                  return;
   \       0x14   0xBD73             POP      {R0,R1,R4-R6,PC}
   2308              }
   2309          
   2310              MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, adding alpn extension" ) );
   \                     ??ssl_write_alpn_ext_0: (+1)
   \       0x16   0x....'....        LDR.W    R0,??DataTable27_16
   \       0x1A   0x9000             STR      R0,[SP, #+0]
   \       0x1C   0xF640 0x1306      MOVW     R3,#+2310
   \       0x20   0x....'....        LDR.W    R2,??DataTable27_9
   \       0x24   0x2103             MOVS     R1,#+3
   \       0x26   0x4628             MOV      R0,R5
   \       0x28   0x....'....        BL       mbedtls_debug_print_msg
   2311          
   2312              /*
   2313               * 0 . 1    ext identifier
   2314               * 2 . 3    ext length
   2315               * 4 . 5    protocol list length
   2316               * 6 . 6    protocol name length
   2317               * 7 . 7+n  protocol name
   2318               */
   2319              buf[0] = (unsigned char)( ( MBEDTLS_TLS_EXT_ALPN >> 8 ) & 0xFF );
   \       0x2C   0x2000             MOVS     R0,#+0
   \       0x2E   0x7030             STRB     R0,[R6, #+0]
   2320              buf[1] = (unsigned char)( ( MBEDTLS_TLS_EXT_ALPN      ) & 0xFF );
   \       0x30   0x2010             MOVS     R0,#+16
   \       0x32   0x7070             STRB     R0,[R6, #+1]
   2321          
   2322              *olen = 7 + strlen( ssl->alpn_chosen );
   \       0x34   0xF8D5 0x00E8      LDR      R0,[R5, #+232]
   \       0x38   0x....'....        BL       strlen
   \       0x3C   0x1DC0             ADDS     R0,R0,#+7
   \       0x3E   0x6020             STR      R0,[R4, #+0]
   2323          
   2324              buf[2] = (unsigned char)( ( ( *olen - 4 ) >> 8 ) & 0xFF );
   \       0x40   0x1F00             SUBS     R0,R0,#+4
   \       0x42   0x0A00             LSRS     R0,R0,#+8
   \       0x44   0x70B0             STRB     R0,[R6, #+2]
   2325              buf[3] = (unsigned char)( ( ( *olen - 4 )      ) & 0xFF );
   \       0x46   0x6820             LDR      R0,[R4, #+0]
   \       0x48   0x1F00             SUBS     R0,R0,#+4
   \       0x4A   0x70F0             STRB     R0,[R6, #+3]
   2326          
   2327              buf[4] = (unsigned char)( ( ( *olen - 6 ) >> 8 ) & 0xFF );
   \       0x4C   0x6820             LDR      R0,[R4, #+0]
   \       0x4E   0x1F80             SUBS     R0,R0,#+6
   \       0x50   0x0A00             LSRS     R0,R0,#+8
   \       0x52   0x7130             STRB     R0,[R6, #+4]
   2328              buf[5] = (unsigned char)( ( ( *olen - 6 )      ) & 0xFF );
   \       0x54   0x6820             LDR      R0,[R4, #+0]
   \       0x56   0x1F80             SUBS     R0,R0,#+6
   \       0x58   0x7170             STRB     R0,[R6, #+5]
   2329          
   2330              buf[6] = (unsigned char)( ( ( *olen - 7 )      ) & 0xFF );
   \       0x5A   0x6820             LDR      R0,[R4, #+0]
   \       0x5C   0x1FC0             SUBS     R0,R0,#+7
   \       0x5E   0x71B0             STRB     R0,[R6, #+6]
   2331          
   2332              memcpy( buf + 7, ssl->alpn_chosen, *olen - 7 );
   \       0x60   0x6822             LDR      R2,[R4, #+0]
   \       0x62   0x1FD2             SUBS     R2,R2,#+7
   \       0x64   0xF8D5 0x10E8      LDR      R1,[R5, #+232]
   \       0x68   0x1DF0             ADDS     R0,R6,#+7
   \       0x6A   0xB002             ADD      SP,SP,#+8
   \       0x6C   0xE8BD 0x4070      POP      {R4-R6,LR}
   \       0x70   0x....'....        B.W      __aeabi_memcpy
   2333          }
   2334          #endif /* MBEDTLS_ECDH_C || MBEDTLS_ECDSA_C */
   2335          
   2336          #if defined(MBEDTLS_SSL_DTLS_HELLO_VERIFY)

   \                                 In section .text, align 2, keep-with-next
   2337          static int ssl_write_hello_verify_request( mbedtls_ssl_context *ssl )
   2338          {
   \                     ssl_write_hello_verify_request: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0xB084             SUB      SP,SP,#+16
   \        0x4   0x4605             MOV      R5,R0
   2339              int ret;
   2340              unsigned char *p = ssl->out_msg + 4;
   \        0x6   0xF8D5 0x00C4      LDR      R0,[R5, #+196]
   \        0xA   0x1D00             ADDS     R0,R0,#+4
   \        0xC   0x9003             STR      R0,[SP, #+12]
   2341              unsigned char *cookie_len_byte;
   2342          
   2343              MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write hello verify request" ) );
   \        0xE   0x....'....        LDR.W    R6,??DataTable27_9
   \       0x12   0x....'....        LDR.W    R0,??DataTable28
   \       0x16   0x9000             STR      R0,[SP, #+0]
   \       0x18   0xF640 0x1327      MOVW     R3,#+2343
   \       0x1C   0x4632             MOV      R2,R6
   \       0x1E   0x2102             MOVS     R1,#+2
   \       0x20   0x4628             MOV      R0,R5
   \       0x22   0x....'....        BL       mbedtls_debug_print_msg
   2344          
   2345              /*
   2346               * struct {
   2347               *   ProtocolVersion server_version;
   2348               *   opaque cookie<0..2^8-1>;
   2349               * } HelloVerifyRequest;
   2350               */
   2351          
   2352              /* The RFC is not clear on this point, but sending the actual negotiated
   2353               * version looks like the most interoperable thing to do. */
   2354              mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
   2355                                 ssl->conf->transport, p );
   \       0x26   0x9B03             LDR      R3,[SP, #+12]
   \       0x28   0x6828             LDR      R0,[R5, #+0]
   \       0x2A   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \       0x2E   0xF3C0 0x0240      UBFX     R2,R0,#+1,#+1
   \       0x32   0x6969             LDR      R1,[R5, #+20]
   \       0x34   0x6928             LDR      R0,[R5, #+16]
   \       0x36   0x....'....        BL       mbedtls_ssl_write_version
   2356              MBEDTLS_SSL_DEBUG_BUF( 3, "server version", p, 2 );
   \       0x3A   0x2002             MOVS     R0,#+2
   \       0x3C   0x9002             STR      R0,[SP, #+8]
   \       0x3E   0x9803             LDR      R0,[SP, #+12]
   \       0x40   0x9001             STR      R0,[SP, #+4]
   \       0x42   0x....'....        LDR.W    R0,??DataTable28_1
   \       0x46   0x9000             STR      R0,[SP, #+0]
   \       0x48   0xF640 0x1334      MOVW     R3,#+2356
   \       0x4C   0x4632             MOV      R2,R6
   \       0x4E   0x2103             MOVS     R1,#+3
   \       0x50   0x4628             MOV      R0,R5
   \       0x52   0x....'....        BL       mbedtls_debug_print_buf
   2357              p += 2;
   \       0x56   0x9803             LDR      R0,[SP, #+12]
   \       0x58   0x1C80             ADDS     R0,R0,#+2
   \       0x5A   0x9003             STR      R0,[SP, #+12]
   2358          
   2359              /* If we get here, f_cookie_check is not null */
   2360              if( ssl->conf->f_cookie_write == NULL )
   \       0x5C   0x6828             LDR      R0,[R5, #+0]
   \       0x5E   0x6C40             LDR      R0,[R0, #+68]
   \       0x60   0x2800             CMP      R0,#+0
   \       0x62   0xD10C             BNE.N    ??ssl_write_hello_verify_request_0
   2361              {
   2362                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "inconsistent cookie callbacks" ) );
   \       0x64   0x....'....        LDR.W    R0,??DataTable28_2
   \       0x68   0x9000             STR      R0,[SP, #+0]
   \       0x6A   0xF640 0x133A      MOVW     R3,#+2362
   \       0x6E   0x4632             MOV      R2,R6
   \       0x70   0x2101             MOVS     R1,#+1
   \       0x72   0x4628             MOV      R0,R5
   \       0x74   0x....'....        BL       mbedtls_debug_print_msg
   2363                  return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   \       0x78   0x....'....        LDR.W    R0,??DataTable29  ;; 0xffff9400
   \       0x7C   0xE079             B.N      ??ssl_write_hello_verify_request_1
   2364              }
   2365          
   2366              /* Skip length byte until we know the length */
   2367              cookie_len_byte = p++;
   \                     ??ssl_write_hello_verify_request_0: (+1)
   \       0x7E   0x9F03             LDR      R7,[SP, #+12]
   \       0x80   0x4638             MOV      R0,R7
   \       0x82   0x1C40             ADDS     R0,R0,#+1
   \       0x84   0x9003             STR      R0,[SP, #+12]
   2368          
   2369              if( ( ret = ssl->conf->f_cookie_write( ssl->conf->p_cookie,
   2370                                               &p, ssl->out_buf + MBEDTLS_SSL_OUT_BUFFER_LEN,
   2371                                               ssl->cli_id, ssl->cli_id_len ) ) != 0 )
   \       0x86   0xF8D5 0x00F0      LDR      R0,[R5, #+240]
   \       0x8A   0x9000             STR      R0,[SP, #+0]
   \       0x8C   0xF8D5 0x30EC      LDR      R3,[R5, #+236]
   \       0x90   0xF8D5 0x00B0      LDR      R0,[R5, #+176]
   \       0x94   0xF642 0x114D      MOVW     R1,#+10573
   \       0x98   0x1842             ADDS     R2,R0,R1
   \       0x9A   0xA903             ADD      R1,SP,#+12
   \       0x9C   0x6828             LDR      R0,[R5, #+0]
   \       0x9E   0x6CC0             LDR      R0,[R0, #+76]
   \       0xA0   0x682C             LDR      R4,[R5, #+0]
   \       0xA2   0x6C64             LDR      R4,[R4, #+68]
   \       0xA4   0x47A0             BLX      R4
   \       0xA6   0x0004             MOVS     R4,R0
   \       0xA8   0xD00C             BEQ.N    ??ssl_write_hello_verify_request_2
   2372              {
   2373                  MBEDTLS_SSL_DEBUG_RET( 1, "f_cookie_write", ret );
   \       0xAA   0x9401             STR      R4,[SP, #+4]
   \       0xAC   0x....'....        LDR.W    R0,??DataTable28_3
   \       0xB0   0x9000             STR      R0,[SP, #+0]
   \       0xB2   0xF640 0x1345      MOVW     R3,#+2373
   \       0xB6   0x4632             MOV      R2,R6
   \       0xB8   0x2101             MOVS     R1,#+1
   \       0xBA   0x4628             MOV      R0,R5
   \       0xBC   0x....'....        BL       mbedtls_debug_print_ret
   2374                  return( ret );
   \       0xC0   0x4620             MOV      R0,R4
   \       0xC2   0xE056             B.N      ??ssl_write_hello_verify_request_1
   2375              }
   2376          
   2377              *cookie_len_byte = (unsigned char)( p - ( cookie_len_byte + 1 ) );
   \                     ??ssl_write_hello_verify_request_2: (+1)
   \       0xC4   0x9903             LDR      R1,[SP, #+12]
   \       0xC6   0x1C78             ADDS     R0,R7,#+1
   \       0xC8   0x1A09             SUBS     R1,R1,R0
   \       0xCA   0x7039             STRB     R1,[R7, #+0]
   2378          
   2379              MBEDTLS_SSL_DEBUG_BUF( 3, "cookie sent", cookie_len_byte + 1, *cookie_len_byte );
   \       0xCC   0x7838             LDRB     R0,[R7, #+0]
   \       0xCE   0x9002             STR      R0,[SP, #+8]
   \       0xD0   0x1C78             ADDS     R0,R7,#+1
   \       0xD2   0x9001             STR      R0,[SP, #+4]
   \       0xD4   0x....'....        LDR.W    R0,??DataTable28_4
   \       0xD8   0x9000             STR      R0,[SP, #+0]
   \       0xDA   0xF640 0x134B      MOVW     R3,#+2379
   \       0xDE   0x4632             MOV      R2,R6
   \       0xE0   0x2103             MOVS     R1,#+3
   \       0xE2   0x4628             MOV      R0,R5
   \       0xE4   0x....'....        BL       mbedtls_debug_print_buf
   2380          
   2381              ssl->out_msglen  = p - ssl->out_msg;
   \       0xE8   0x9903             LDR      R1,[SP, #+12]
   \       0xEA   0xF8D5 0x00C4      LDR      R0,[R5, #+196]
   \       0xEE   0x1A09             SUBS     R1,R1,R0
   \       0xF0   0xF8C5 0x10CC      STR      R1,[R5, #+204]
   2382              ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
   \       0xF4   0x2016             MOVS     R0,#+22
   \       0xF6   0xF8C5 0x00C8      STR      R0,[R5, #+200]
   2383              ssl->out_msg[0]  = MBEDTLS_SSL_HS_HELLO_VERIFY_REQUEST;
   \       0xFA   0x2003             MOVS     R0,#+3
   \       0xFC   0xF8D5 0x10C4      LDR      R1,[R5, #+196]
   \      0x100   0x7008             STRB     R0,[R1, #+0]
   2384          
   2385              ssl->state = MBEDTLS_SSL_SERVER_HELLO_VERIFY_REQUEST_SENT;
   \      0x102   0x2012             MOVS     R0,#+18
   \      0x104   0x6068             STR      R0,[R5, #+4]
   2386          
   2387              if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
   \      0x106   0x4628             MOV      R0,R5
   \      0x108   0x....'....        BL       mbedtls_ssl_write_handshake_msg
   \      0x10C   0x0004             MOVS     R4,R0
   \      0x10E   0xD00C             BEQ.N    ??ssl_write_hello_verify_request_3
   2388              {
   2389                  MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_handshake_msg", ret );
   \      0x110   0x9401             STR      R4,[SP, #+4]
   \      0x112   0x....'....        LDR.W    R0,??DataTable30
   \      0x116   0x9000             STR      R0,[SP, #+0]
   \      0x118   0xF640 0x1355      MOVW     R3,#+2389
   \      0x11C   0x4632             MOV      R2,R6
   \      0x11E   0x2101             MOVS     R1,#+1
   \      0x120   0x4628             MOV      R0,R5
   \      0x122   0x....'....        BL       mbedtls_debug_print_ret
   2390                  return( ret );
   \      0x126   0x4620             MOV      R0,R4
   \      0x128   0xE023             B.N      ??ssl_write_hello_verify_request_1
   2391              }
   2392          
   2393          #if defined(MBEDTLS_SSL_PROTO_DTLS)
   2394              if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM &&
   2395                  ( ret = mbedtls_ssl_flight_transmit( ssl ) ) != 0 )
   \                     ??ssl_write_hello_verify_request_3: (+1)
   \      0x12A   0x6828             LDR      R0,[R5, #+0]
   \      0x12C   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \      0x130   0xF3C0 0x0040      UBFX     R0,R0,#+1,#+1
   \      0x134   0x2800             CMP      R0,#+0
   \      0x136   0xD011             BEQ.N    ??ssl_write_hello_verify_request_4
   \      0x138   0x4628             MOV      R0,R5
   \      0x13A   0x....'....        BL       mbedtls_ssl_flight_transmit
   \      0x13E   0x0004             MOVS     R4,R0
   \      0x140   0xD00C             BEQ.N    ??ssl_write_hello_verify_request_4
   2396              {
   2397                  MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_flight_transmit", ret );
   \      0x142   0x9401             STR      R4,[SP, #+4]
   \      0x144   0x....'....        LDR.W    R0,??DataTable29_1
   \      0x148   0x9000             STR      R0,[SP, #+0]
   \      0x14A   0xF640 0x135D      MOVW     R3,#+2397
   \      0x14E   0x4632             MOV      R2,R6
   \      0x150   0x2101             MOVS     R1,#+1
   \      0x152   0x4628             MOV      R0,R5
   \      0x154   0x....'....        BL       mbedtls_debug_print_ret
   2398                  return( ret );
   \      0x158   0x4620             MOV      R0,R4
   \      0x15A   0xE00A             B.N      ??ssl_write_hello_verify_request_1
   2399              }
   2400          #endif /* MBEDTLS_SSL_PROTO_DTLS */
   2401          
   2402              MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write hello verify request" ) );
   \                     ??ssl_write_hello_verify_request_4: (+1)
   \      0x15C   0x....'....        LDR.W    R0,??DataTable30_1
   \      0x160   0x9000             STR      R0,[SP, #+0]
   \      0x162   0xF640 0x1362      MOVW     R3,#+2402
   \      0x166   0x4632             MOV      R2,R6
   \      0x168   0x2102             MOVS     R1,#+2
   \      0x16A   0x4628             MOV      R0,R5
   \      0x16C   0x....'....        BL       mbedtls_debug_print_msg
   2403          
   2404              return( 0 );
   \      0x170   0x2000             MOVS     R0,#+0
   \                     ??ssl_write_hello_verify_request_1: (+1)
   \      0x172   0xB005             ADD      SP,SP,#+20
   \      0x174   0xBDF0             POP      {R4-R7,PC}       ;; return
   2405          }
   2406          #endif /* MBEDTLS_SSL_DTLS_HELLO_VERIFY */
   2407          

   \                                 In section .text, align 2, keep-with-next
   2408          static int ssl_write_server_hello( mbedtls_ssl_context *ssl )
   2409          {
   \                     ssl_write_server_hello: (+1)
   \        0x0   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \        0x4   0xB084             SUB      SP,SP,#+16
   \        0x6   0x4605             MOV      R5,R0
   2410          #if defined(MBEDTLS_HAVE_TIME)
   2411              mbedtls_time_t t;
   2412          #endif
   2413              int ret;
   2414              size_t olen, ext_len = 0, n;
   2415              unsigned char *buf, *p;
   2416          
   2417              MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write server hello" ) );
   \        0x8   0x....'....        LDR.W    R6,??DataTable27_9
   \        0xC   0x....'....        LDR.W    R0,??DataTable29_2
   \       0x10   0x9000             STR      R0,[SP, #+0]
   \       0x12   0xF640 0x1371      MOVW     R3,#+2417
   \       0x16   0x4632             MOV      R2,R6
   \       0x18   0x2102             MOVS     R1,#+2
   \       0x1A   0x4628             MOV      R0,R5
   \       0x1C   0x....'....        BL       mbedtls_debug_print_msg
   2418          
   2419          #if defined(MBEDTLS_SSL_DTLS_HELLO_VERIFY)
   2420              if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM &&
   2421                  ssl->handshake->verify_cookie_len != 0 )
   \       0x20   0x6828             LDR      R0,[R5, #+0]
   \       0x22   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \       0x26   0xF3C0 0x0040      UBFX     R0,R0,#+1,#+1
   \       0x2A   0x2800             CMP      R0,#+0
   \       0x2C   0xD01C             BEQ.N    ??ssl_write_server_hello_0
   \       0x2E   0x6BE8             LDR      R0,[R5, #+60]
   \       0x30   0xF890 0x01E0      LDRB     R0,[R0, #+480]
   \       0x34   0x2800             CMP      R0,#+0
   \       0x36   0xD017             BEQ.N    ??ssl_write_server_hello_0
   2422              {
   2423                  MBEDTLS_SSL_DEBUG_MSG( 2, ( "client hello was not authenticated" ) );
   \       0x38   0x....'....        LDR.W    R0,??DataTable30_2
   \       0x3C   0x9000             STR      R0,[SP, #+0]
   \       0x3E   0xF640 0x1377      MOVW     R3,#+2423
   \       0x42   0x4632             MOV      R2,R6
   \       0x44   0x2102             MOVS     R1,#+2
   \       0x46   0x4628             MOV      R0,R5
   \       0x48   0x....'....        BL       mbedtls_debug_print_msg
   2424                  MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write server hello" ) );
   \       0x4C   0x....'....        LDR.W    R0,??DataTable31
   \       0x50   0x9000             STR      R0,[SP, #+0]
   \       0x52   0xF640 0x1378      MOVW     R3,#+2424
   \       0x56   0x4632             MOV      R2,R6
   \       0x58   0x2102             MOVS     R1,#+2
   \       0x5A   0x4628             MOV      R0,R5
   \       0x5C   0x....'....        BL       mbedtls_debug_print_msg
   2425          
   2426                  return( ssl_write_hello_verify_request( ssl ) );
   \       0x60   0x4628             MOV      R0,R5
   \       0x62   0x....'....        BL       ssl_write_hello_verify_request
   \       0x66   0xE1A2             B.N      ??ssl_write_server_hello_1
   2427              }
   2428          #endif /* MBEDTLS_SSL_DTLS_HELLO_VERIFY */
   2429          
   2430              if( ssl->conf->f_rng == NULL )
   \                     ??ssl_write_server_hello_0: (+1)
   \       0x68   0x6828             LDR      R0,[R5, #+0]
   \       0x6A   0x6980             LDR      R0,[R0, #+24]
   \       0x6C   0x2800             CMP      R0,#+0
   \       0x6E   0xD10C             BNE.N    ??ssl_write_server_hello_2
   2431              {
   2432                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "no RNG provided") );
   \       0x70   0x....'....        LDR.W    R0,??DataTable30_3
   \       0x74   0x9000             STR      R0,[SP, #+0]
   \       0x76   0xF44F 0x6318      MOV      R3,#+2432
   \       0x7A   0x4632             MOV      R2,R6
   \       0x7C   0x2101             MOVS     R1,#+1
   \       0x7E   0x4628             MOV      R0,R5
   \       0x80   0x....'....        BL       mbedtls_debug_print_msg
   2433                  return( MBEDTLS_ERR_SSL_NO_RNG );
   \       0x84   0x....'....        LDR.W    R0,??DataTable30_4  ;; 0xffff8c00
   \       0x88   0xE191             B.N      ??ssl_write_server_hello_1
   2434              }
   2435          
   2436              /*
   2437               *     0  .   0   handshake type
   2438               *     1  .   3   handshake length
   2439               *     4  .   5   protocol version
   2440               *     6  .   9   UNIX time()
   2441               *    10  .  37   random bytes
   2442               */
   2443              buf = ssl->out_msg;
   \                     ??ssl_write_server_hello_2: (+1)
   \       0x8A   0xF8D5 0x70C4      LDR      R7,[R5, #+196]
   2444              p = buf + 4;
   \       0x8E   0x1D3C             ADDS     R4,R7,#+4
   2445          
   2446              mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
   2447                                 ssl->conf->transport, p );
   \       0x90   0x4623             MOV      R3,R4
   \       0x92   0x6828             LDR      R0,[R5, #+0]
   \       0x94   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \       0x98   0xF3C0 0x0240      UBFX     R2,R0,#+1,#+1
   \       0x9C   0x6969             LDR      R1,[R5, #+20]
   \       0x9E   0x6928             LDR      R0,[R5, #+16]
   \       0xA0   0x....'....        BL       mbedtls_ssl_write_version
   2448              p += 2;
   \       0xA4   0x1CA4             ADDS     R4,R4,#+2
   2449          
   2450              MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, chosen version: [%d:%d]",
   2451                                  buf[4], buf[5] ) );
   \       0xA6   0x7978             LDRB     R0,[R7, #+5]
   \       0xA8   0x9002             STR      R0,[SP, #+8]
   \       0xAA   0x7938             LDRB     R0,[R7, #+4]
   \       0xAC   0x9001             STR      R0,[SP, #+4]
   \       0xAE   0x....'....        LDR.W    R0,??DataTable30_5
   \       0xB2   0x9000             STR      R0,[SP, #+0]
   \       0xB4   0xF640 0x1393      MOVW     R3,#+2451
   \       0xB8   0x4632             MOV      R2,R6
   \       0xBA   0x2103             MOVS     R1,#+3
   \       0xBC   0x4628             MOV      R0,R5
   \       0xBE   0x....'....        BL       mbedtls_debug_print_msg
   2452          
   2453          #if defined(MBEDTLS_HAVE_TIME)
   2454              t = mbedtls_time( NULL );
   2455              *p++ = (unsigned char)( t >> 24 );
   2456              *p++ = (unsigned char)( t >> 16 );
   2457              *p++ = (unsigned char)( t >>  8 );
   2458              *p++ = (unsigned char)( t       );
   2459          
   2460              MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, current time: %lu", t ) );
   2461          #else
   2462              if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 4 ) ) != 0 )
   \       0xC2   0x2204             MOVS     R2,#+4
   \       0xC4   0x4621             MOV      R1,R4
   \       0xC6   0x6828             LDR      R0,[R5, #+0]
   \       0xC8   0x69C0             LDR      R0,[R0, #+28]
   \       0xCA   0x682B             LDR      R3,[R5, #+0]
   \       0xCC   0x699B             LDR      R3,[R3, #+24]
   \       0xCE   0x4798             BLX      R3
   \       0xD0   0x2800             CMP      R0,#+0
   \       0xD2   0xF040 0x816C      BNE.W    ??ssl_write_server_hello_1
   2463                  return( ret );
   2464          
   2465              p += 4;
   \       0xD6   0xF104 0x0804      ADD      R8,R4,#+4
   2466          #endif /* MBEDTLS_HAVE_TIME */
   2467          
   2468              if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 28 ) ) != 0 )
   \       0xDA   0x221C             MOVS     R2,#+28
   \       0xDC   0x4641             MOV      R1,R8
   \       0xDE   0x6828             LDR      R0,[R5, #+0]
   \       0xE0   0x69C0             LDR      R0,[R0, #+28]
   \       0xE2   0x682B             LDR      R3,[R5, #+0]
   \       0xE4   0x699B             LDR      R3,[R3, #+24]
   \       0xE6   0x4798             BLX      R3
   \       0xE8   0x2800             CMP      R0,#+0
   \       0xEA   0xF040 0x8160      BNE.W    ??ssl_write_server_hello_1
   2469                  return( ret );
   2470          
   2471              p += 28;
   2472          
   2473              memcpy( ssl->handshake->randbytes + 32, buf + 6, 32 );
   \       0xEE   0x2220             MOVS     R2,#+32
   \       0xF0   0x1DB9             ADDS     R1,R7,#+6
   \       0xF2   0x6BE8             LDR      R0,[R5, #+60]
   \       0xF4   0xF200 0x407C      ADDW     R0,R0,#+1148
   \       0xF8   0x....'....        BL       __aeabi_memcpy
   2474          
   2475              MBEDTLS_SSL_DEBUG_BUF( 3, "server hello, random bytes", buf + 6, 32 );
   \       0xFC   0x2020             MOVS     R0,#+32
   \       0xFE   0x9002             STR      R0,[SP, #+8]
   \      0x100   0x1DB8             ADDS     R0,R7,#+6
   \      0x102   0x9001             STR      R0,[SP, #+4]
   \      0x104   0x....'....        LDR.W    R0,??DataTable31_1
   \      0x108   0x9000             STR      R0,[SP, #+0]
   \      0x10A   0xF640 0x13AB      MOVW     R3,#+2475
   \      0x10E   0x4632             MOV      R2,R6
   \      0x110   0x2103             MOVS     R1,#+3
   \      0x112   0x4628             MOV      R0,R5
   \      0x114   0x....'....        BL       mbedtls_debug_print_buf
   2476          
   2477              /*
   2478               * Resume is 0  by default, see ssl_handshake_init().
   2479               * It may be already set to 1 by ssl_parse_session_ticket_ext().
   2480               * If not, try looking up session ID in our cache.
   2481               */
   2482              if( ssl->handshake->resume == 0 &&
   2483          #if defined(MBEDTLS_SSL_RENEGOTIATION)
   2484                  ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE &&
   2485          #endif
   2486                  ssl->session_negotiate->id_len != 0 &&
   2487                  ssl->conf->f_get_cache != NULL &&
   2488                  ssl->conf->f_get_cache( ssl->conf->p_cache, ssl->session_negotiate ) == 0 )
   \      0x118   0x6BE8             LDR      R0,[R5, #+60]
   \      0x11A   0xF8D0 0x06C0      LDR      R0,[R0, #+1728]
   \      0x11E   0x2800             CMP      R0,#+0
   \      0x120   0xD120             BNE.N    ??ssl_write_server_hello_3
   \      0x122   0x68A8             LDR      R0,[R5, #+8]
   \      0x124   0x2800             CMP      R0,#+0
   \      0x126   0xD11D             BNE.N    ??ssl_write_server_hello_3
   \      0x128   0x6BA8             LDR      R0,[R5, #+56]
   \      0x12A   0x6880             LDR      R0,[R0, #+8]
   \      0x12C   0x2800             CMP      R0,#+0
   \      0x12E   0xD019             BEQ.N    ??ssl_write_server_hello_3
   \      0x130   0x6828             LDR      R0,[R5, #+0]
   \      0x132   0x6A00             LDR      R0,[R0, #+32]
   \      0x134   0x2800             CMP      R0,#+0
   \      0x136   0xD015             BEQ.N    ??ssl_write_server_hello_3
   \      0x138   0x6BA9             LDR      R1,[R5, #+56]
   \      0x13A   0x6828             LDR      R0,[R5, #+0]
   \      0x13C   0x6A80             LDR      R0,[R0, #+40]
   \      0x13E   0x682A             LDR      R2,[R5, #+0]
   \      0x140   0x6A12             LDR      R2,[R2, #+32]
   \      0x142   0x4790             BLX      R2
   \      0x144   0x2800             CMP      R0,#+0
   \      0x146   0xD10D             BNE.N    ??ssl_write_server_hello_3
   2489              {
   2490                  MBEDTLS_SSL_DEBUG_MSG( 3, ( "session successfully restored from cache" ) );
   \      0x148   0x....'....        LDR.W    R0,??DataTable31_2
   \      0x14C   0x9000             STR      R0,[SP, #+0]
   \      0x14E   0xF640 0x13BA      MOVW     R3,#+2490
   \      0x152   0x4632             MOV      R2,R6
   \      0x154   0x2103             MOVS     R1,#+3
   \      0x156   0x4628             MOV      R0,R5
   \      0x158   0x....'....        BL       mbedtls_debug_print_msg
   2491                  ssl->handshake->resume = 1;
   \      0x15C   0x2001             MOVS     R0,#+1
   \      0x15E   0x6BE9             LDR      R1,[R5, #+60]
   \      0x160   0xF8C1 0x06C0      STR      R0,[R1, #+1728]
   2492              }
   2493          
   2494              if( ssl->handshake->resume == 0 )
   \                     ??ssl_write_server_hello_3: (+1)
   \      0x164   0x6BE8             LDR      R0,[R5, #+60]
   \      0x166   0xF8D0 0x06C0      LDR      R0,[R0, #+1728]
   \      0x16A   0x2800             CMP      R0,#+0
   \      0x16C   0xD155             BNE.N    ??ssl_write_server_hello_4
   2495              {
   2496                  /*
   2497                   * New session, create a new session id,
   2498                   * unless we're about to issue a session ticket
   2499                   */
   2500                  ssl->state++;
   \      0x16E   0x6868             LDR      R0,[R5, #+4]
   \      0x170   0x1C40             ADDS     R0,R0,#+1
   \      0x172   0x6068             STR      R0,[R5, #+4]
   2501          
   2502          #if defined(MBEDTLS_HAVE_TIME)
   2503                  ssl->session_negotiate->start = mbedtls_time( NULL );
   2504          #endif
   2505          
   2506          #if defined(MBEDTLS_SSL_SESSION_TICKETS)
   2507                  if( ssl->handshake->new_session_ticket != 0 )
   \      0x174   0x6BE8             LDR      R0,[R5, #+60]
   \      0x176   0xF8D0 0x06D0      LDR      R0,[R0, #+1744]
   \      0x17A   0x2800             CMP      R0,#+0
   \      0x17C   0xD03C             BEQ.N    ??ssl_write_server_hello_5
   2508                  {
   2509                      ssl->session_negotiate->id_len = n = 0;
   \      0x17E   0xF04F 0x0900      MOV      R9,#+0
   \      0x182   0x4648             MOV      R0,R9
   \      0x184   0x6BA9             LDR      R1,[R5, #+56]
   \      0x186   0x6088             STR      R0,[R1, #+8]
   2510                      memset( ssl->session_negotiate->id, 0, 32 );
   \      0x188   0x4602             MOV      R2,R0
   \      0x18A   0x2120             MOVS     R1,#+32
   \      0x18C   0x6BA8             LDR      R0,[R5, #+56]
   \      0x18E   0x300C             ADDS     R0,R0,#+12
   \      0x190   0x....'....        BL       __aeabi_memset4
   2511                  }
   2512                  else
   2513          #endif /* MBEDTLS_SSL_SESSION_TICKETS */
   2514                  {
   2515                      ssl->session_negotiate->id_len = n = 32;
   2516                      if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, ssl->session_negotiate->id,
   2517                                              n ) ) != 0 )
   2518                          return( ret );
   2519                  }
   2520              }
   2521              else
   2522              {
   2523                  /*
   2524                   * Resuming a session
   2525                   */
   2526                  n = ssl->session_negotiate->id_len;
   2527                  ssl->state = MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC;
   2528          
   2529                  if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
   2530                  {
   2531                      MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_derive_keys", ret );
   2532                      return( ret );
   2533                  }
   2534              }
   2535          
   2536              /*
   2537               *    38  .  38     session id length
   2538               *    39  . 38+n    session id
   2539               *   39+n . 40+n    chosen ciphersuite
   2540               *   41+n . 41+n    chosen compression alg.
   2541               *   42+n . 43+n    extensions length
   2542               *   44+n . 43+n+m  extensions
   2543               */
   2544              *p++ = (unsigned char) ssl->session_negotiate->id_len;
   \                     ??ssl_write_server_hello_6: (+1)
   \      0x194   0x6BA8             LDR      R0,[R5, #+56]
   \      0x196   0x6880             LDR      R0,[R0, #+8]
   \      0x198   0xF888 0x001C      STRB     R0,[R8, #+28]
   \      0x19C   0xF108 0x041D      ADD      R4,R8,#+29
   2545              memcpy( p, ssl->session_negotiate->id, ssl->session_negotiate->id_len );
   \      0x1A0   0x6BA8             LDR      R0,[R5, #+56]
   \      0x1A2   0x6882             LDR      R2,[R0, #+8]
   \      0x1A4   0xF100 0x010C      ADD      R1,R0,#+12
   \      0x1A8   0x4620             MOV      R0,R4
   \      0x1AA   0x....'....        BL       __aeabi_memcpy
   2546              p += ssl->session_negotiate->id_len;
   \      0x1AE   0x6BA8             LDR      R0,[R5, #+56]
   \      0x1B0   0x6880             LDR      R0,[R0, #+8]
   \      0x1B2   0x4404             ADD      R4,R4,R0
   2547          
   2548              MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, session id len.: %d", n ) );
   \      0x1B4   0xF8CD 0x9004      STR      R9,[SP, #+4]
   \      0x1B8   0x....'....        LDR.W    R0,??DataTable31_3
   \      0x1BC   0x9000             STR      R0,[SP, #+0]
   \      0x1BE   0xF640 0x13F4      MOVW     R3,#+2548
   \      0x1C2   0x4632             MOV      R2,R6
   \      0x1C4   0x2103             MOVS     R1,#+3
   \      0x1C6   0x4628             MOV      R0,R5
   \      0x1C8   0x....'....        BL       mbedtls_debug_print_msg
   2549              MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, session id", buf + 39, n );
   \      0x1CC   0xF8CD 0x9008      STR      R9,[SP, #+8]
   \      0x1D0   0xF107 0x0027      ADD      R0,R7,#+39
   \      0x1D4   0x9001             STR      R0,[SP, #+4]
   \      0x1D6   0x....'....        LDR.W    R0,??DataTable32
   \      0x1DA   0x9000             STR      R0,[SP, #+0]
   \      0x1DC   0xF640 0x13F5      MOVW     R3,#+2549
   \      0x1E0   0x4632             MOV      R2,R6
   \      0x1E2   0x2103             MOVS     R1,#+3
   \      0x1E4   0x4628             MOV      R0,R5
   \      0x1E6   0x....'....        BL       mbedtls_debug_print_buf
   2550              MBEDTLS_SSL_DEBUG_MSG( 3, ( "%s session has been resumed",
   2551                             ssl->handshake->resume ? "a" : "no" ) );
   \      0x1EA   0x6BE8             LDR      R0,[R5, #+60]
   \      0x1EC   0xF8D0 0x06C0      LDR      R0,[R0, #+1728]
   \      0x1F0   0x2800             CMP      R0,#+0
   \      0x1F2   0xD029             BEQ.N    ??ssl_write_server_hello_7
   \      0x1F4   0x....             ADR.N    R0,??DataTable25_2  ;; "a"
   \      0x1F6   0xE028             B.N      ??ssl_write_server_hello_8
   \                     ??ssl_write_server_hello_5: (+1)
   \      0x1F8   0xF04F 0x0920      MOV      R9,#+32
   \      0x1FC   0x4648             MOV      R0,R9
   \      0x1FE   0x6BA9             LDR      R1,[R5, #+56]
   \      0x200   0x6088             STR      R0,[R1, #+8]
   \      0x202   0x4602             MOV      R2,R0
   \      0x204   0x6BA8             LDR      R0,[R5, #+56]
   \      0x206   0xF100 0x010C      ADD      R1,R0,#+12
   \      0x20A   0x6828             LDR      R0,[R5, #+0]
   \      0x20C   0x69C0             LDR      R0,[R0, #+28]
   \      0x20E   0x682B             LDR      R3,[R5, #+0]
   \      0x210   0x699B             LDR      R3,[R3, #+24]
   \      0x212   0x4798             BLX      R3
   \      0x214   0x2800             CMP      R0,#+0
   \      0x216   0xD0BD             BEQ.N    ??ssl_write_server_hello_6
   \      0x218   0xE0C9             B.N      ??ssl_write_server_hello_1
   \                     ??ssl_write_server_hello_4: (+1)
   \      0x21A   0x6BA8             LDR      R0,[R5, #+56]
   \      0x21C   0xF8D0 0x9008      LDR      R9,[R0, #+8]
   \      0x220   0x200C             MOVS     R0,#+12
   \      0x222   0x6068             STR      R0,[R5, #+4]
   \      0x224   0x4628             MOV      R0,R5
   \      0x226   0x....'....        BL       mbedtls_ssl_derive_keys
   \      0x22A   0x0004             MOVS     R4,R0
   \      0x22C   0xD0B2             BEQ.N    ??ssl_write_server_hello_6
   \      0x22E   0x9401             STR      R4,[SP, #+4]
   \      0x230   0x....'....        LDR.W    R0,??DataTable32_1
   \      0x234   0x9000             STR      R0,[SP, #+0]
   \      0x236   0xF640 0x13E3      MOVW     R3,#+2531
   \      0x23A   0x4632             MOV      R2,R6
   \      0x23C   0x2101             MOVS     R1,#+1
   \      0x23E   0x4628             MOV      R0,R5
   \      0x240   0x....'....        BL       mbedtls_debug_print_ret
   \      0x244   0x4620             MOV      R0,R4
   \      0x246   0xE0B2             B.N      ??ssl_write_server_hello_1
   \                     ??ssl_write_server_hello_7: (+1)
   \      0x248   0x....             ADR.N    R0,??DataTable25_4  ;; 0x6E, 0x6F, 0x00, 0x00
   \                     ??ssl_write_server_hello_8: (+1)
   \      0x24A   0x9001             STR      R0,[SP, #+4]
   \      0x24C   0x....'....        LDR.W    R0,??DataTable32_2
   \      0x250   0x9000             STR      R0,[SP, #+0]
   \      0x252   0xF640 0x13F7      MOVW     R3,#+2551
   \      0x256   0x4632             MOV      R2,R6
   \      0x258   0x2103             MOVS     R1,#+3
   \      0x25A   0x4628             MOV      R0,R5
   \      0x25C   0x....'....        BL       mbedtls_debug_print_msg
   2552          
   2553              *p++ = (unsigned char)( ssl->session_negotiate->ciphersuite >> 8 );
   \      0x260   0x6BA8             LDR      R0,[R5, #+56]
   \      0x262   0x6800             LDR      R0,[R0, #+0]
   \      0x264   0x1200             ASRS     R0,R0,#+8
   \      0x266   0xF804 0x0B01      STRB     R0,[R4], #+1
   2554              *p++ = (unsigned char)( ssl->session_negotiate->ciphersuite      );
   \      0x26A   0x6BA8             LDR      R0,[R5, #+56]
   \      0x26C   0x6800             LDR      R0,[R0, #+0]
   \      0x26E   0xF804 0x0B01      STRB     R0,[R4], #+1
   2555              *p++ = (unsigned char)( ssl->session_negotiate->compression      );
   \      0x272   0x6BA8             LDR      R0,[R5, #+56]
   \      0x274   0x6840             LDR      R0,[R0, #+4]
   \      0x276   0xF804 0x0B01      STRB     R0,[R4], #+1
   2556          
   2557              MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, chosen ciphersuite: %s",
   2558                     mbedtls_ssl_get_ciphersuite_name( ssl->session_negotiate->ciphersuite ) ) );
   \      0x27A   0x6BA8             LDR      R0,[R5, #+56]
   \      0x27C   0x6800             LDR      R0,[R0, #+0]
   \      0x27E   0x....'....        BL       mbedtls_ssl_get_ciphersuite_name
   \      0x282   0x9001             STR      R0,[SP, #+4]
   \      0x284   0x....'....        LDR.W    R0,??DataTable32_3
   \      0x288   0x9000             STR      R0,[SP, #+0]
   \      0x28A   0xF640 0x13FE      MOVW     R3,#+2558
   \      0x28E   0x4632             MOV      R2,R6
   \      0x290   0x2103             MOVS     R1,#+3
   \      0x292   0x4628             MOV      R0,R5
   \      0x294   0x....'....        BL       mbedtls_debug_print_msg
   2559              MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, compress alg.: 0x%02X",
   2560                             ssl->session_negotiate->compression ) );
   \      0x298   0x6BA8             LDR      R0,[R5, #+56]
   \      0x29A   0x6840             LDR      R0,[R0, #+4]
   \      0x29C   0x9001             STR      R0,[SP, #+4]
   \      0x29E   0x....'....        LDR.W    R0,??DataTable32_4
   \      0x2A2   0x9000             STR      R0,[SP, #+0]
   \      0x2A4   0xF44F 0x6320      MOV      R3,#+2560
   \      0x2A8   0x4632             MOV      R2,R6
   \      0x2AA   0x2103             MOVS     R1,#+3
   \      0x2AC   0x4628             MOV      R0,R5
   \      0x2AE   0x....'....        BL       mbedtls_debug_print_msg
   2561          
   2562              /* Do not write the extensions if the protocol is SSLv3 */
   2563          #if defined(MBEDTLS_SSL_PROTO_SSL3)
   2564              if( ( ssl->major_ver != 3 ) || ( ssl->minor_ver != 0 ) )
   2565              {
   2566          #endif
   2567          
   2568              /*
   2569               *  First write extensions, then the total length
   2570               */
   2571              ssl_write_renegotiation_ext( ssl, p + 2 + ext_len, &olen );
   \      0x2B2   0xAA03             ADD      R2,SP,#+12
   \      0x2B4   0x1CA1             ADDS     R1,R4,#+2
   \      0x2B6   0x4628             MOV      R0,R5
   \      0x2B8   0x....'....        BL       ssl_write_renegotiation_ext
   2572              ext_len += olen;
   \      0x2BC   0xF8DD 0x800C      LDR      R8,[SP, #+12]
   2573          
   2574          #if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)
   2575              ssl_write_max_fragment_length_ext( ssl, p + 2 + ext_len, &olen );
   \      0x2C0   0xAA03             ADD      R2,SP,#+12
   \      0x2C2   0xEB04 0x0008      ADD      R0,R4,R8
   \      0x2C6   0x1C81             ADDS     R1,R0,#+2
   \      0x2C8   0x4628             MOV      R0,R5
   \      0x2CA   0x....'....        BL       ssl_write_max_fragment_length_ext
   2576              ext_len += olen;
   \      0x2CE   0x9803             LDR      R0,[SP, #+12]
   \      0x2D0   0x4480             ADD      R8,R0,R8
   2577          #endif
   2578          
   2579          #if defined(MBEDTLS_SSL_TRUNCATED_HMAC)
   2580              ssl_write_truncated_hmac_ext( ssl, p + 2 + ext_len, &olen );
   \      0x2D2   0xAA03             ADD      R2,SP,#+12
   \      0x2D4   0xEB04 0x0008      ADD      R0,R4,R8
   \      0x2D8   0x1C81             ADDS     R1,R0,#+2
   \      0x2DA   0x4628             MOV      R0,R5
   \      0x2DC   0x....'....        BL       ssl_write_truncated_hmac_ext
   2581              ext_len += olen;
   \      0x2E0   0x9803             LDR      R0,[SP, #+12]
   \      0x2E2   0x4480             ADD      R8,R0,R8
   2582          #endif
   2583          
   2584          #if defined(MBEDTLS_SSL_ENCRYPT_THEN_MAC)
   2585              ssl_write_encrypt_then_mac_ext( ssl, p + 2 + ext_len, &olen );
   \      0x2E4   0xAA03             ADD      R2,SP,#+12
   \      0x2E6   0xEB04 0x0008      ADD      R0,R4,R8
   \      0x2EA   0x1C81             ADDS     R1,R0,#+2
   \      0x2EC   0x4628             MOV      R0,R5
   \      0x2EE   0x....'....        BL       ssl_write_encrypt_then_mac_ext
   2586              ext_len += olen;
   \      0x2F2   0x9803             LDR      R0,[SP, #+12]
   \      0x2F4   0x4480             ADD      R8,R0,R8
   2587          #endif
   2588          
   2589          #if defined(MBEDTLS_SSL_EXTENDED_MASTER_SECRET)
   2590              ssl_write_extended_ms_ext( ssl, p + 2 + ext_len, &olen );
   \      0x2F6   0xAA03             ADD      R2,SP,#+12
   \      0x2F8   0xEB04 0x0008      ADD      R0,R4,R8
   \      0x2FC   0x1C81             ADDS     R1,R0,#+2
   \      0x2FE   0x4628             MOV      R0,R5
   \      0x300   0x....'....        BL       ssl_write_extended_ms_ext
   2591              ext_len += olen;
   \      0x304   0x9803             LDR      R0,[SP, #+12]
   \      0x306   0x4480             ADD      R8,R0,R8
   2592          #endif
   2593          
   2594          #if defined(MBEDTLS_SSL_SESSION_TICKETS)
   2595              ssl_write_session_ticket_ext( ssl, p + 2 + ext_len, &olen );
   \      0x308   0xAA03             ADD      R2,SP,#+12
   \      0x30A   0xEB04 0x0008      ADD      R0,R4,R8
   \      0x30E   0x1C81             ADDS     R1,R0,#+2
   \      0x310   0x4628             MOV      R0,R5
   \      0x312   0x....'....        BL       ssl_write_session_ticket_ext
   2596              ext_len += olen;
   \      0x316   0x9803             LDR      R0,[SP, #+12]
   \      0x318   0x4480             ADD      R8,R0,R8
   2597          #endif
   2598          
   2599          #if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) || \
   2600              defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
   2601              if ( mbedtls_ssl_ciphersuite_uses_ec(
   2602                   mbedtls_ssl_ciphersuite_from_id( ssl->session_negotiate->ciphersuite ) ) )
   \      0x31A   0x6BA8             LDR      R0,[R5, #+56]
   \      0x31C   0x6800             LDR      R0,[R0, #+0]
   \      0x31E   0x....'....        BL       mbedtls_ssl_ciphersuite_from_id
   \      0x322   0x....'....        BL       mbedtls_ssl_ciphersuite_uses_ec
   \      0x326   0x2800             CMP      R0,#+0
   \      0x328   0xD008             BEQ.N    ??ssl_write_server_hello_9
   2603              {
   2604                  ssl_write_supported_point_formats_ext( ssl, p + 2 + ext_len, &olen );
   \      0x32A   0xAA03             ADD      R2,SP,#+12
   \      0x32C   0xEB04 0x0008      ADD      R0,R4,R8
   \      0x330   0x1C81             ADDS     R1,R0,#+2
   \      0x332   0x4628             MOV      R0,R5
   \      0x334   0x....'....        BL       ssl_write_supported_point_formats_ext
   2605                  ext_len += olen;
   \      0x338   0x9803             LDR      R0,[SP, #+12]
   \      0x33A   0x4480             ADD      R8,R0,R8
   2606              }
   2607          #endif
   2608          
   2609          #if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
   2610              ssl_write_ecjpake_kkpp_ext( ssl, p + 2 + ext_len, &olen );
   2611              ext_len += olen;
   2612          #endif
   2613          
   2614          #if defined(MBEDTLS_SSL_ALPN)
   2615              ssl_write_alpn_ext( ssl, p + 2 + ext_len, &olen );
   \                     ??ssl_write_server_hello_9: (+1)
   \      0x33C   0xAA03             ADD      R2,SP,#+12
   \      0x33E   0xEB04 0x0008      ADD      R0,R4,R8
   \      0x342   0x1C81             ADDS     R1,R0,#+2
   \      0x344   0x4628             MOV      R0,R5
   \      0x346   0x....'....        BL       ssl_write_alpn_ext
   2616              ext_len += olen;
   \      0x34A   0x9803             LDR      R0,[SP, #+12]
   \      0x34C   0x4480             ADD      R8,R0,R8
   2617          #endif
   2618          
   2619              MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, total extension length: %d", ext_len ) );
   \      0x34E   0xF8CD 0x8004      STR      R8,[SP, #+4]
   \      0x352   0x....'....        LDR.W    R0,??DataTable33
   \      0x356   0x9000             STR      R0,[SP, #+0]
   \      0x358   0xF640 0x233B      MOVW     R3,#+2619
   \      0x35C   0x4632             MOV      R2,R6
   \      0x35E   0x2103             MOVS     R1,#+3
   \      0x360   0x4628             MOV      R0,R5
   \      0x362   0x....'....        BL       mbedtls_debug_print_msg
   2620          
   2621              if( ext_len > 0 )
   \      0x366   0xF1B8 0x0F00      CMP      R8,#+0
   \      0x36A   0xD007             BEQ.N    ??ssl_write_server_hello_10
   2622              {
   2623                  *p++ = (unsigned char)( ( ext_len >> 8 ) & 0xFF );
   \      0x36C   0x4640             MOV      R0,R8
   \      0x36E   0x0A00             LSRS     R0,R0,#+8
   \      0x370   0x7020             STRB     R0,[R4, #+0]
   2624                  *p++ = (unsigned char)( ( ext_len      ) & 0xFF );
   \      0x372   0xF884 0x8001      STRB     R8,[R4, #+1]
   2625                  p += ext_len;
   \      0x376   0xEB04 0x0008      ADD      R0,R4,R8
   \      0x37A   0x1C84             ADDS     R4,R0,#+2
   2626              }
   2627          
   2628          #if defined(MBEDTLS_SSL_PROTO_SSL3)
   2629              }
   2630          #endif
   2631          
   2632              ssl->out_msglen  = p - buf;
   \                     ??ssl_write_server_hello_10: (+1)
   \      0x37C   0x1BE7             SUBS     R7,R4,R7
   \      0x37E   0xF8C5 0x70CC      STR      R7,[R5, #+204]
   2633              ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
   \      0x382   0x2016             MOVS     R0,#+22
   \      0x384   0xF8C5 0x00C8      STR      R0,[R5, #+200]
   2634              ssl->out_msg[0]  = MBEDTLS_SSL_HS_SERVER_HELLO;
   \      0x388   0x2002             MOVS     R0,#+2
   \      0x38A   0xF8D5 0x10C4      LDR      R1,[R5, #+196]
   \      0x38E   0x7008             STRB     R0,[R1, #+0]
   2635          
   2636              ret = mbedtls_ssl_write_handshake_msg( ssl );
   \      0x390   0x4628             MOV      R0,R5
   \      0x392   0x....'....        BL       mbedtls_ssl_write_handshake_msg
   \      0x396   0x4604             MOV      R4,R0
   2637          
   2638              MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write server hello" ) );
   \      0x398   0x....'....        LDR.W    R0,??DataTable31
   \      0x39C   0x9000             STR      R0,[SP, #+0]
   \      0x39E   0xF640 0x234E      MOVW     R3,#+2638
   \      0x3A2   0x4632             MOV      R2,R6
   \      0x3A4   0x2102             MOVS     R1,#+2
   \      0x3A6   0x4628             MOV      R0,R5
   \      0x3A8   0x....'....        BL       mbedtls_debug_print_msg
   2639          
   2640              return( ret );
   \      0x3AC   0x4620             MOV      R0,R4
   \                     ??ssl_write_server_hello_1: (+1)
   \      0x3AE   0xB005             ADD      SP,SP,#+20
   \      0x3B0   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
   2641          }
   2642          
   2643          #if !defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)       && \
   2644              !defined(MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED)   && \
   2645              !defined(MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED)  && \
   2646              !defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED) && \
   2647              !defined(MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED)&& \
   2648              !defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED)
   2649          static int ssl_write_certificate_request( mbedtls_ssl_context *ssl )
   2650          {
   2651              const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
   2652                  ssl->transform_negotiate->ciphersuite_info;
   2653          
   2654              MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate request" ) );
   2655          
   2656              if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
   2657                  ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK ||
   2658                  ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
   2659                  ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
   2660                  ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )
   2661              {
   2662                  MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate request" ) );
   2663                  ssl->state++;
   2664                  return( 0 );
   2665              }
   2666          
   2667              MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
   2668              return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   2669          }
   2670          #else

   \                                 In section .text, align 2, keep-with-next
   2671          static int ssl_write_certificate_request( mbedtls_ssl_context *ssl )
   2672          {
   \                     ssl_write_certificate_request: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \        0x4   0xB084             SUB      SP,SP,#+16
   \        0x6   0x4604             MOV      R4,R0
   2673              int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
   2674              const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
   2675                  ssl->transform_negotiate->ciphersuite_info;
   \        0x8   0x6CE0             LDR      R0,[R4, #+76]
   \        0xA   0x6805             LDR      R5,[R0, #+0]
   2676              size_t dn_size, total_dn_size; /* excluding length bytes */
   2677              size_t ct_len, sa_len; /* including length bytes */
   2678              unsigned char *buf, *p;
   2679              const unsigned char * const end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
   \        0xC   0xF8D4 0x00C4      LDR      R0,[R4, #+196]
   \       0x10   0xF500 0x5A20      ADD      R10,R0,#+10240
   2680              const mbedtls_x509_crt *crt;
   2681              int authmode;
   2682          
   2683              MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate request" ) );
   \       0x14   0x....'....        LDR.W    R8,??DataTable27_9
   \       0x18   0x....'....        LDR.W    R0,??DataTable33_1
   \       0x1C   0x9000             STR      R0,[SP, #+0]
   \       0x1E   0xF640 0x237B      MOVW     R3,#+2683
   \       0x22   0x4642             MOV      R2,R8
   \       0x24   0x2102             MOVS     R1,#+2
   \       0x26   0x4620             MOV      R0,R4
   \       0x28   0x....'....        BL       mbedtls_debug_print_msg
   2684          
   2685              ssl->state++;
   \       0x2C   0x6860             LDR      R0,[R4, #+4]
   \       0x2E   0x1C40             ADDS     R0,R0,#+1
   \       0x30   0x6060             STR      R0,[R4, #+4]
   2686          
   2687          #if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
   2688              if( ssl->handshake->sni_authmode != MBEDTLS_SSL_VERIFY_UNSET )
   \       0x32   0x6BE0             LDR      R0,[R4, #+60]
   \       0x34   0xF8D0 0x01C4      LDR      R0,[R0, #+452]
   \       0x38   0x2803             CMP      R0,#+3
   \       0x3A   0xD003             BEQ.N    ??ssl_write_certificate_request_0
   2689                  authmode = ssl->handshake->sni_authmode;
   \       0x3C   0x6BE0             LDR      R0,[R4, #+60]
   \       0x3E   0xF8D0 0x01C4      LDR      R0,[R0, #+452]
   \       0x42   0xE004             B.N      ??ssl_write_certificate_request_1
   2690              else
   2691          #endif
   2692                  authmode = ssl->conf->authmode;
   \                     ??ssl_write_certificate_request_0: (+1)
   \       0x44   0x6820             LDR      R0,[R4, #+0]
   \       0x46   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \       0x4A   0xF3C0 0x0081      UBFX     R0,R0,#+2,#+2
   2693          
   2694              if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
   2695                  ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK ||
   2696                  ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
   2697                  ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
   2698                  ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE ||
   2699                  authmode == MBEDTLS_SSL_VERIFY_NONE )
   \                     ??ssl_write_certificate_request_1: (+1)
   \       0x4E   0x7AA9             LDRB     R1,[R5, #+10]
   \       0x50   0x2905             CMP      R1,#+5
   \       0x52   0xD009             BEQ.N    ??ssl_write_certificate_request_2
   \       0x54   0x2907             CMP      R1,#+7
   \       0x56   0xD007             BEQ.N    ??ssl_write_certificate_request_2
   \       0x58   0x2906             CMP      R1,#+6
   \       0x5A   0xD005             BEQ.N    ??ssl_write_certificate_request_2
   \       0x5C   0x2908             CMP      R1,#+8
   \       0x5E   0xD003             BEQ.N    ??ssl_write_certificate_request_2
   \       0x60   0x290B             CMP      R1,#+11
   \       0x62   0xD001             BEQ.N    ??ssl_write_certificate_request_2
   \       0x64   0x2800             CMP      R0,#+0
   \       0x66   0xD10B             BNE.N    ??ssl_write_certificate_request_3
   2700              {
   2701                  MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate request" ) );
   \                     ??ssl_write_certificate_request_2: (+1)
   \       0x68   0x....'....        LDR.W    R0,??DataTable34
   \       0x6C   0x9000             STR      R0,[SP, #+0]
   \       0x6E   0xF640 0x238D      MOVW     R3,#+2701
   \       0x72   0x4642             MOV      R2,R8
   \       0x74   0x2102             MOVS     R1,#+2
   \       0x76   0x4620             MOV      R0,R4
   \       0x78   0x....'....        BL       mbedtls_debug_print_msg
   2702                  return( 0 );
   \       0x7C   0x2000             MOVS     R0,#+0
   \       0x7E   0xE0B1             B.N      ??ssl_write_certificate_request_4
   2703              }
   2704          
   2705              /*
   2706               *     0  .   0   handshake type
   2707               *     1  .   3   handshake length
   2708               *     4  .   4   cert type count
   2709               *     5  .. m-1  cert types
   2710               *     m  .. m+1  sig alg length (TLS 1.2 only)
   2711               *    m+1 .. n-1  SignatureAndHashAlgorithms (TLS 1.2 only)
   2712               *     n  .. n+1  length of all DNs
   2713               *    n+2 .. n+3  length of DN 1
   2714               *    n+4 .. ...  Distinguished Name #1
   2715               *    ... .. ...  length of DN 2, etc.
   2716               */
   2717              buf = ssl->out_msg;
   \                     ??ssl_write_certificate_request_3: (+1)
   \       0x80   0xF8D4 0x00C4      LDR      R0,[R4, #+196]
   \       0x84   0x9003             STR      R0,[SP, #+12]
   2718              p = buf + 4;
   \       0x86   0x1D00             ADDS     R0,R0,#+4
   2719          
   2720              /*
   2721               * Supported certificate types
   2722               *
   2723               *     ClientCertificateType certificate_types<1..2^8-1>;
   2724               *     enum { (255) } ClientCertificateType;
   2725               */
   2726              ct_len = 0;
   2727          
   2728          #if defined(MBEDTLS_RSA_C)
   2729              p[1 + ct_len++] = MBEDTLS_SSL_CERT_TYPE_RSA_SIGN;
   \       0x88   0x2101             MOVS     R1,#+1
   \       0x8A   0x7041             STRB     R1,[R0, #+1]
   2730          #endif
   2731          #if defined(MBEDTLS_ECDSA_C)
   2732              p[1 + ct_len++] = MBEDTLS_SSL_CERT_TYPE_ECDSA_SIGN;
   \       0x8C   0x2140             MOVS     R1,#+64
   \       0x8E   0x7081             STRB     R1,[R0, #+2]
   2733          #endif
   2734          
   2735              p[0] = (unsigned char) ct_len++;
   \       0x90   0x2102             MOVS     R1,#+2
   \       0x92   0x7001             STRB     R1,[R0, #+0]
   2736              p += ct_len;
   \       0x94   0x1CC5             ADDS     R5,R0,#+3
   2737          
   2738              sa_len = 0;
   \       0x96   0x2700             MOVS     R7,#+0
   2739          #if defined(MBEDTLS_SSL_PROTO_TLS1_2)
   2740              /*
   2741               * Add signature_algorithms for verify (TLS 1.2)
   2742               *
   2743               *     SignatureAndHashAlgorithm supported_signature_algorithms<2..2^16-2>;
   2744               *
   2745               *     struct {
   2746               *           HashAlgorithm hash;
   2747               *           SignatureAlgorithm signature;
   2748               *     } SignatureAndHashAlgorithm;
   2749               *
   2750               *     enum { (255) } HashAlgorithm;
   2751               *     enum { (255) } SignatureAlgorithm;
   2752               */
   2753              if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
   \       0x98   0x6960             LDR      R0,[R4, #+20]
   \       0x9A   0x2803             CMP      R0,#+3
   \       0x9C   0xD129             BNE.N    ??ssl_write_certificate_request_5
   2754              {
   2755                  const int *cur;
   2756          
   2757                  /*
   2758                   * Supported signature algorithms
   2759                   */
   2760                  for( cur = ssl->conf->sig_hashes; *cur != MBEDTLS_MD_NONE; cur++ )
   \       0x9E   0x6820             LDR      R0,[R4, #+0]
   \       0xA0   0xF8D0 0x9074      LDR      R9,[R0, #+116]
   \       0xA4   0x4626             MOV      R6,R4
   \       0xA6   0xE019             B.N      ??ssl_write_certificate_request_6
   2761                  {
   2762                      unsigned char hash = mbedtls_ssl_hash_from_md_alg( *cur );
   \                     ??ssl_write_certificate_request_7: (+1)
   \       0xA8   0x....'....        BL       mbedtls_ssl_hash_from_md_alg
   \       0xAC   0x0004             MOVS     R4,R0
   2763          
   2764                      if( MBEDTLS_SSL_HASH_NONE == hash || mbedtls_ssl_set_calc_verify_md( ssl, hash ) )
   \       0xAE   0xD013             BEQ.N    ??ssl_write_certificate_request_8
   \       0xB0   0x4621             MOV      R1,R4
   \       0xB2   0x4630             MOV      R0,R6
   \       0xB4   0x....'....        BL       mbedtls_ssl_set_calc_verify_md
   \       0xB8   0x2800             CMP      R0,#+0
   \       0xBA   0xD10D             BNE.N    ??ssl_write_certificate_request_8
   2765                          continue;
   2766          
   2767          #if defined(MBEDTLS_RSA_C)
   2768                      p[2 + sa_len++] = hash;
   \       0xBC   0x19E8             ADDS     R0,R5,R7
   \       0xBE   0x7084             STRB     R4,[R0, #+2]
   \       0xC0   0x1C7F             ADDS     R7,R7,#+1
   2769                      p[2 + sa_len++] = MBEDTLS_SSL_SIG_RSA;
   \       0xC2   0x2001             MOVS     R0,#+1
   \       0xC4   0x19E9             ADDS     R1,R5,R7
   \       0xC6   0x7088             STRB     R0,[R1, #+2]
   \       0xC8   0x1C7F             ADDS     R7,R7,#+1
   2770          #endif
   2771          #if defined(MBEDTLS_ECDSA_C)
   2772                      p[2 + sa_len++] = hash;
   \       0xCA   0x19E8             ADDS     R0,R5,R7
   \       0xCC   0x7084             STRB     R4,[R0, #+2]
   \       0xCE   0x1C7F             ADDS     R7,R7,#+1
   2773                      p[2 + sa_len++] = MBEDTLS_SSL_SIG_ECDSA;
   \       0xD0   0x2003             MOVS     R0,#+3
   \       0xD2   0x19E9             ADDS     R1,R5,R7
   \       0xD4   0x7088             STRB     R0,[R1, #+2]
   \       0xD6   0x1C7F             ADDS     R7,R7,#+1
   2774          #endif
   2775                  }
   \                     ??ssl_write_certificate_request_8: (+1)
   \       0xD8   0xF109 0x0904      ADD      R9,R9,#+4
   \                     ??ssl_write_certificate_request_6: (+1)
   \       0xDC   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \       0xE0   0x2800             CMP      R0,#+0
   \       0xE2   0xD1E1             BNE.N    ??ssl_write_certificate_request_7
   \       0xE4   0x4634             MOV      R4,R6
   2776          
   2777                  p[0] = (unsigned char)( sa_len >> 8 );
   \       0xE6   0x4638             MOV      R0,R7
   \       0xE8   0x0A00             LSRS     R0,R0,#+8
   \       0xEA   0x7028             STRB     R0,[R5, #+0]
   2778                  p[1] = (unsigned char)( sa_len      );
   \       0xEC   0x706F             STRB     R7,[R5, #+1]
   2779                  sa_len += 2;
   \       0xEE   0x1CBF             ADDS     R7,R7,#+2
   2780                  p += sa_len;
   \       0xF0   0x443D             ADD      R5,R5,R7
   2781              }
   2782          #endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
   2783          
   2784              /*
   2785               * DistinguishedName certificate_authorities<0..2^16-1>;
   2786               * opaque DistinguishedName<1..2^16-1>;
   2787               */
   2788              p += 2;
   \                     ??ssl_write_certificate_request_5: (+1)
   \       0xF2   0xF105 0x0902      ADD      R9,R5,#+2
   2789          
   2790              total_dn_size = 0;
   \       0xF6   0x2500             MOVS     R5,#+0
   2791          
   2792              if( ssl->conf->cert_req_ca_list ==  MBEDTLS_SSL_CERT_REQ_CA_LIST_ENABLED )
   \       0xF8   0x6820             LDR      R0,[R4, #+0]
   \       0xFA   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \       0xFE   0xF3C0 0x4040      UBFX     R0,R0,#+17,#+1
   \      0x102   0x2800             CMP      R0,#+0
   \      0x104   0xD049             BEQ.N    ??ssl_write_certificate_request_9
   2793              {
   2794          #if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
   2795                  if( ssl->handshake->sni_ca_chain != NULL )
   \      0x106   0x6BE0             LDR      R0,[R4, #+60]
   \      0x108   0xF8D0 0x01CC      LDR      R0,[R0, #+460]
   \      0x10C   0x2800             CMP      R0,#+0
   \      0x10E   0xD037             BEQ.N    ??ssl_write_certificate_request_10
   2796                      crt = ssl->handshake->sni_ca_chain;
   \      0x110   0x6BE0             LDR      R0,[R4, #+60]
   \      0x112   0xF8D0 0x61CC      LDR      R6,[R0, #+460]
   2797                  else
   2798          #endif
   2799                      crt = ssl->conf->ca_chain;
   2800          
   2801                  while( crt != NULL && crt->version != 0 )
   \                     ??ssl_write_certificate_request_11: (+1)
   \      0x116   0x2E00             CMP      R6,#+0
   \      0x118   0xD03F             BEQ.N    ??ssl_write_certificate_request_9
   \      0x11A   0x69B0             LDR      R0,[R6, #+24]
   \      0x11C   0x2800             CMP      R0,#+0
   \      0x11E   0xD03C             BEQ.N    ??ssl_write_certificate_request_9
   2802                  {
   2803                      dn_size = crt->subject_raw.len;
   \      0x120   0xF8D6 0xB044      LDR      R11,[R6, #+68]
   2804          
   2805                      if( end < p ||
   2806                          (size_t)( end - p ) < dn_size ||
   2807                          (size_t)( end - p ) < 2 + dn_size )
   \      0x124   0x45CA             CMP      R10,R9
   \      0x126   0xD32E             BCC.N    ??ssl_write_certificate_request_12
   \      0x128   0xEBAA 0x0009      SUB      R0,R10,R9
   \      0x12C   0x4558             CMP      R0,R11
   \      0x12E   0xD32A             BCC.N    ??ssl_write_certificate_request_12
   \      0x130   0xF10B 0x0102      ADD      R1,R11,#+2
   \      0x134   0x4288             CMP      R0,R1
   \      0x136   0xD326             BCC.N    ??ssl_write_certificate_request_12
   2808                      {
   2809                          MBEDTLS_SSL_DEBUG_MSG( 1, ( "skipping CAs: buffer too short" ) );
   2810                          break;
   2811                      }
   2812          
   2813                      *p++ = (unsigned char)( dn_size >> 8 );
   \      0x138   0x4658             MOV      R0,R11
   \      0x13A   0x0A00             LSRS     R0,R0,#+8
   \      0x13C   0xF889 0x0000      STRB     R0,[R9, #+0]
   2814                      *p++ = (unsigned char)( dn_size      );
   \      0x140   0xF889 0xB001      STRB     R11,[R9, #+1]
   \      0x144   0xF109 0x0902      ADD      R9,R9,#+2
   2815                      memcpy( p, crt->subject_raw.p, dn_size );
   \      0x148   0x465A             MOV      R2,R11
   \      0x14A   0x6CB1             LDR      R1,[R6, #+72]
   \      0x14C   0x4648             MOV      R0,R9
   \      0x14E   0x....'....        BL       __aeabi_memcpy
   2816                      p += dn_size;
   \      0x152   0x44D9             ADD      R9,R9,R11
   2817          
   2818                      MBEDTLS_SSL_DEBUG_BUF( 3, "requested DN", p - dn_size, dn_size );
   \      0x154   0xF8CD 0xB008      STR      R11,[SP, #+8]
   \      0x158   0xF1CB 0x0000      RSB      R0,R11,#+0
   \      0x15C   0x4448             ADD      R0,R9,R0
   \      0x15E   0x9001             STR      R0,[SP, #+4]
   \      0x160   0x....'....        LDR.W    R0,??DataTable34_1
   \      0x164   0x9000             STR      R0,[SP, #+0]
   \      0x166   0xF640 0x3302      MOVW     R3,#+2818
   \      0x16A   0x4642             MOV      R2,R8
   \      0x16C   0x2103             MOVS     R1,#+3
   \      0x16E   0x4620             MOV      R0,R4
   \      0x170   0x....'....        BL       mbedtls_debug_print_buf
   2819          
   2820                      total_dn_size += 2 + dn_size;
   \      0x174   0xF10B 0x0B02      ADD      R11,R11,#+2
   \      0x178   0x445D             ADD      R5,R11,R5
   2821                      crt = crt->next;
   \      0x17A   0xF8D6 0x6130      LDR      R6,[R6, #+304]
   \      0x17E   0xE7CA             B.N      ??ssl_write_certificate_request_11
   \                     ??ssl_write_certificate_request_10: (+1)
   \      0x180   0x6820             LDR      R0,[R4, #+0]
   \      0x182   0x6EC6             LDR      R6,[R0, #+108]
   \      0x184   0xE7C7             B.N      ??ssl_write_certificate_request_11
   \                     ??ssl_write_certificate_request_12: (+1)
   \      0x186   0x....'....        LDR.W    R0,??DataTable34_2
   \      0x18A   0x9000             STR      R0,[SP, #+0]
   \      0x18C   0xF640 0x23F9      MOVW     R3,#+2809
   \      0x190   0x4642             MOV      R2,R8
   \      0x192   0x2101             MOVS     R1,#+1
   \      0x194   0x4620             MOV      R0,R4
   \      0x196   0x....'....        BL       mbedtls_debug_print_msg
   2822                  }
   2823              }
   2824          
   2825              ssl->out_msglen  = p - buf;
   \                     ??ssl_write_certificate_request_9: (+1)
   \      0x19A   0x9803             LDR      R0,[SP, #+12]
   \      0x19C   0xEBA9 0x0900      SUB      R9,R9,R0
   \      0x1A0   0xF8C4 0x90CC      STR      R9,[R4, #+204]
   2826              ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
   \      0x1A4   0x2016             MOVS     R0,#+22
   \      0x1A6   0xF8C4 0x00C8      STR      R0,[R4, #+200]
   2827              ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE_REQUEST;
   \      0x1AA   0x200D             MOVS     R0,#+13
   \      0x1AC   0xF8D4 0x10C4      LDR      R1,[R4, #+196]
   \      0x1B0   0x7008             STRB     R0,[R1, #+0]
   2828              ssl->out_msg[4 + ct_len + sa_len] = (unsigned char)( total_dn_size  >> 8 );
   \      0x1B2   0x4628             MOV      R0,R5
   \      0x1B4   0x0A00             LSRS     R0,R0,#+8
   \      0x1B6   0xF8D4 0x10C4      LDR      R1,[R4, #+196]
   \      0x1BA   0x4439             ADD      R1,R1,R7
   \      0x1BC   0x71C8             STRB     R0,[R1, #+7]
   2829              ssl->out_msg[5 + ct_len + sa_len] = (unsigned char)( total_dn_size       );
   \      0x1BE   0xF8D4 0x00C4      LDR      R0,[R4, #+196]
   \      0x1C2   0x4438             ADD      R0,R0,R7
   \      0x1C4   0x7205             STRB     R5,[R0, #+8]
   2830          
   2831              ret = mbedtls_ssl_write_handshake_msg( ssl );
   \      0x1C6   0x4620             MOV      R0,R4
   \      0x1C8   0x....'....        BL       mbedtls_ssl_write_handshake_msg
   \      0x1CC   0x4605             MOV      R5,R0
   2832          
   2833              MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write certificate request" ) );
   \      0x1CE   0x....'....        LDR.W    R0,??DataTable34_3
   \      0x1D2   0x9000             STR      R0,[SP, #+0]
   \      0x1D4   0xF640 0x3311      MOVW     R3,#+2833
   \      0x1D8   0x4642             MOV      R2,R8
   \      0x1DA   0x2102             MOVS     R1,#+2
   \      0x1DC   0x4620             MOV      R0,R4
   \      0x1DE   0x....'....        BL       mbedtls_debug_print_msg
   2834          
   2835              return( ret );
   \      0x1E2   0x4628             MOV      R0,R5
   \                     ??ssl_write_certificate_request_4: (+1)
   \      0x1E4   0xB005             ADD      SP,SP,#+20
   \      0x1E6   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   2836          }
   2837          #endif /* !MBEDTLS_KEY_EXCHANGE_RSA_ENABLED &&
   2838                    !MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED &&
   2839                    !MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED &&
   2840                    !MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED &&
   2841                    !MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED &&
   2842                    !MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED */
   2843          
   2844          #if defined(MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED) || \
   2845              defined(MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED)

   \                                 In section .text, align 2, keep-with-next
   2846          static int ssl_get_ecdh_params_from_cert( mbedtls_ssl_context *ssl )
   2847          {
   \                     ssl_get_ecdh_params_from_cert: (+1)
   \        0x0   0xB53E             PUSH     {R1-R5,LR}
   \        0x2   0x4605             MOV      R5,R0
   2848              int ret;
   2849          
   2850              if( ! mbedtls_pk_can_do( mbedtls_ssl_own_key( ssl ), MBEDTLS_PK_ECKEY ) )
   \        0x4   0x....'....        BL       mbedtls_ssl_own_key
   \        0x8   0x2102             MOVS     R1,#+2
   \        0xA   0x....'....        BL       mbedtls_pk_can_do
   \        0xE   0x2800             CMP      R0,#+0
   \       0x10   0xD10C             BNE.N    ??ssl_get_ecdh_params_from_cert_0
   2851              {
   2852                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "server key not ECDH capable" ) );
   \       0x12   0x....'....        LDR.W    R0,??DataTable34_4
   \       0x16   0x9000             STR      R0,[SP, #+0]
   \       0x18   0xF640 0x3324      MOVW     R3,#+2852
   \       0x1C   0x....             LDR.N    R2,??DataTable27_9
   \       0x1E   0x2101             MOVS     R1,#+1
   \       0x20   0x4628             MOV      R0,R5
   \       0x22   0x....'....        BL       mbedtls_debug_print_msg
   2853                  return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );
   \       0x26   0x....'....        LDR.W    R0,??DataTable34_5  ;; 0xffff9300
   \       0x2A   0xBD3E             POP      {R1-R5,PC}
   2854              }
   2855          
   2856              if( ( ret = mbedtls_ecdh_get_params( &ssl->handshake->ecdh_ctx,
   2857                                           mbedtls_pk_ec( *mbedtls_ssl_own_key( ssl ) ),
   2858                                           MBEDTLS_ECDH_OURS ) ) != 0 )
   \                     ??ssl_get_ecdh_params_from_cert_0: (+1)
   \       0x2C   0x4628             MOV      R0,R5
   \       0x2E   0x....'....        BL       mbedtls_ssl_own_key
   \       0x32   0x4602             MOV      R2,R0
   \       0x34   0xE9D2 0x0100      LDRD     R0,R1,[R2, #+0]
   \       0x38   0x....'....        BL       mbedtls_pk_ec
   \       0x3C   0x4601             MOV      R1,R0
   \       0x3E   0x2200             MOVS     R2,#+0
   \       0x40   0x6BE8             LDR      R0,[R5, #+60]
   \       0x42   0x3080             ADDS     R0,R0,#+128
   \       0x44   0x....'....        BL       mbedtls_ecdh_get_params
   \       0x48   0x0004             MOVS     R4,R0
   \       0x4A   0xD00C             BEQ.N    ??ssl_get_ecdh_params_from_cert_1
   2859              {
   2860                  MBEDTLS_SSL_DEBUG_RET( 1, ( "mbedtls_ecdh_get_params" ), ret );
   \       0x4C   0x9401             STR      R4,[SP, #+4]
   \       0x4E   0x....'....        LDR.W    R0,??DataTable34_6
   \       0x52   0x9000             STR      R0,[SP, #+0]
   \       0x54   0xF640 0x332C      MOVW     R3,#+2860
   \       0x58   0x....             LDR.N    R2,??DataTable27_9
   \       0x5A   0x2101             MOVS     R1,#+1
   \       0x5C   0x4628             MOV      R0,R5
   \       0x5E   0x....'....        BL       mbedtls_debug_print_ret
   2861                  return( ret );
   \       0x62   0x4620             MOV      R0,R4
   \       0x64   0xBD3E             POP      {R1-R5,PC}
   2862              }
   2863          
   2864              return( 0 );
   \                     ??ssl_get_ecdh_params_from_cert_1: (+1)
   \       0x66   0x2000             MOVS     R0,#+0
   \       0x68   0xBD3E             POP      {R1-R5,PC}       ;; return
   2865          }
   2866          #endif /* MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED) ||
   2867                    MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED */
   2868          
   2869          #if defined(MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED) && \
   2870              defined(MBEDTLS_SSL_ASYNC_PRIVATE)
   2871          static int ssl_resume_server_key_exchange( mbedtls_ssl_context *ssl,
   2872                                                     size_t *signature_len )
   2873          {
   2874              /* Append the signature to ssl->out_msg, leaving 2 bytes for the
   2875               * signature length which will be added in ssl_write_server_key_exchange
   2876               * after the call to ssl_prepare_server_key_exchange.
   2877               * ssl_write_server_key_exchange also takes care of incrementing
   2878               * ssl->out_msglen. */
   2879              unsigned char *sig_start = ssl->out_msg + ssl->out_msglen + 2;
   2880              size_t sig_max_len = ( ssl->out_buf + MBEDTLS_SSL_OUT_CONTENT_LEN
   2881                                     - sig_start );
   2882              int ret = ssl->conf->f_async_resume( ssl,
   2883                                                   sig_start, signature_len, sig_max_len );
   2884              if( ret != MBEDTLS_ERR_SSL_ASYNC_IN_PROGRESS )
   2885              {
   2886                  ssl->handshake->async_in_progress = 0;
   2887                  mbedtls_ssl_set_async_operation_data( ssl, NULL );
   2888              }
   2889              MBEDTLS_SSL_DEBUG_RET( 2, "ssl_resume_server_key_exchange", ret );
   2890              return( ret );
   2891          }
   2892          #endif /* defined(MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED) &&
   2893                    defined(MBEDTLS_SSL_ASYNC_PRIVATE) */
   2894          
   2895          /* Prepare the ServerKeyExchange message, up to and including
   2896           * calculating the signature if any, but excluding formatting the
   2897           * signature and sending the message. */

   \                                 In section .text, align 2, keep-with-next
   2898          static int ssl_prepare_server_key_exchange( mbedtls_ssl_context *ssl,
   2899                                                      size_t *signature_len )
   2900          {
   \                     ssl_prepare_server_key_exchange: (+1)
   \        0x0   0xE92D 0x47F8      PUSH     {R3-R10,LR}
   \        0x4   0xB095             SUB      SP,SP,#+84
   \        0x6   0x4605             MOV      R5,R0
   \        0x8   0x460E             MOV      R6,R1
   2901              const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
   2902                                      ssl->transform_negotiate->ciphersuite_info;
   \        0xA   0x6CE8             LDR      R0,[R5, #+76]
   \        0xC   0x6807             LDR      R7,[R0, #+0]
   2903          #if defined(MBEDTLS_KEY_EXCHANGE__SOME_PFS__ENABLED)
   2904          #if defined(MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED)
   2905              unsigned char *dig_signed = NULL;
   \        0xE   0xF04F 0x0900      MOV      R9,#+0
   2906          #endif /* MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED */
   2907          #endif /* MBEDTLS_KEY_EXCHANGE__SOME_PFS__ENABLED */
   2908          
   2909              (void) ciphersuite_info; /* unused in some configurations */
   2910          #if !defined(MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED)
   2911              (void) signature_len;
   2912          #endif /* MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED */
   2913          
   2914              ssl->out_msglen = 4; /* header (type:1, length:3) to be written later */
   \       0x12   0x2004             MOVS     R0,#+4
   \       0x14   0xF8C5 0x00CC      STR      R0,[R5, #+204]
   2915          
   2916              /*
   2917               *
   2918               * Part 1: Provide key exchange parameters for chosen ciphersuite.
   2919               *
   2920               */
   2921          
   2922              /*
   2923               * - ECJPAKE key exchanges
   2924               */
   2925          #if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
   2926              if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )
   2927              {
   2928                  int ret;
   2929                  size_t len = 0;
   2930          
   2931                  ret = mbedtls_ecjpake_write_round_two(
   2932                      &ssl->handshake->ecjpake_ctx,
   2933                      ssl->out_msg + ssl->out_msglen,
   2934                      MBEDTLS_SSL_OUT_CONTENT_LEN - ssl->out_msglen, &len,
   2935                      ssl->conf->f_rng, ssl->conf->p_rng );
   2936                  if( ret != 0 )
   2937                  {
   2938                      MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ecjpake_write_round_two", ret );
   2939                      return( ret );
   2940                  }
   2941          
   2942                  ssl->out_msglen += len;
   2943              }
   2944          #endif /* MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */
   2945          
   2946              /*
   2947               * For (EC)DHE key exchanges with PSK, parameters are prefixed by support
   2948               * identity hint (RFC 4279, Sec. 3). Until someone needs this feature,
   2949               * we use empty support identity hints here.
   2950               **/
   2951          #if defined(MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED)   || \
   2952              defined(MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED)
   2953              if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
   2954                  ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK )
   \       0x18   0x7AB8             LDRB     R0,[R7, #+10]
   \       0x1A   0x2806             CMP      R0,#+6
   \       0x1C   0xD001             BEQ.N    ??ssl_prepare_server_key_exchange_0
   \       0x1E   0x2808             CMP      R0,#+8
   \       0x20   0xD10F             BNE.N    ??ssl_prepare_server_key_exchange_1
   2955              {
   2956                  ssl->out_msg[ssl->out_msglen++] = 0x00;
   \                     ??ssl_prepare_server_key_exchange_0: (+1)
   \       0x22   0x2005             MOVS     R0,#+5
   \       0x24   0xF8C5 0x00CC      STR      R0,[R5, #+204]
   \       0x28   0x4648             MOV      R0,R9
   \       0x2A   0xF8D5 0x10C4      LDR      R1,[R5, #+196]
   \       0x2E   0x7108             STRB     R0,[R1, #+4]
   2957                  ssl->out_msg[ssl->out_msglen++] = 0x00;
   \       0x30   0xF8D5 0x00CC      LDR      R0,[R5, #+204]
   \       0x34   0x1C41             ADDS     R1,R0,#+1
   \       0x36   0xF8C5 0x10CC      STR      R1,[R5, #+204]
   \       0x3A   0x4649             MOV      R1,R9
   \       0x3C   0xF8D5 0x20C4      LDR      R2,[R5, #+196]
   \       0x40   0x5411             STRB     R1,[R2, R0]
   2958              }
   2959          #endif /* MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED ||
   2960                    MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED */
   2961          
   2962              /*
   2963               * - DHE key exchanges
   2964               */
   2965          #if defined(MBEDTLS_KEY_EXCHANGE__SOME__DHE_ENABLED)
   2966              if( mbedtls_ssl_ciphersuite_uses_dhe( ciphersuite_info ) )
   \                     ??ssl_prepare_server_key_exchange_1: (+1)
   \       0x42   0x4638             MOV      R0,R7
   \       0x44   0x....'....        BL       mbedtls_ssl_ciphersuite_uses_dhe
   \       0x48   0x2800             CMP      R0,#+0
   \       0x4A   0xF000 0x8098      BEQ.W    ??ssl_prepare_server_key_exchange_2
   2967              {
   2968                  int ret;
   2969                  size_t len = 0;
   \       0x4E   0x4648             MOV      R0,R9
   \       0x50   0x9002             STR      R0,[SP, #+8]
   2970          
   2971                  if( ssl->conf->dhm_P.p == NULL || ssl->conf->dhm_G.p == NULL )
   \       0x52   0x6828             LDR      R0,[R5, #+0]
   \       0x54   0xF8D0 0x0084      LDR      R0,[R0, #+132]
   \       0x58   0x2800             CMP      R0,#+0
   \       0x5A   0xD004             BEQ.N    ??ssl_prepare_server_key_exchange_3
   \       0x5C   0x6828             LDR      R0,[R5, #+0]
   \       0x5E   0xF8D0 0x0090      LDR      R0,[R0, #+144]
   \       0x62   0x2800             CMP      R0,#+0
   \       0x64   0xD10D             BNE.N    ??ssl_prepare_server_key_exchange_4
   2972                  {
   2973                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "no DH parameters set" ) );
   \                     ??ssl_prepare_server_key_exchange_3: (+1)
   \       0x66   0x....'....        LDR.W    R0,??DataTable34_7
   \       0x6A   0x9000             STR      R0,[SP, #+0]
   \       0x6C   0xF640 0x339D      MOVW     R3,#+2973
   \       0x70   0x....'....        LDR.W    R2,??DataTable34_8
   \       0x74   0x2101             MOVS     R1,#+1
   \       0x76   0x4628             MOV      R0,R5
   \       0x78   0x....'....        BL       mbedtls_debug_print_msg
   2974                      return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   \       0x7C   0x....'....        LDR.W    R0,??DataTable34_9  ;; 0xffff8f00
   \       0x80   0xE1D3             B.N      ??ssl_prepare_server_key_exchange_5
   2975                  }
   2976          
   2977                  /*
   2978                   * Ephemeral DH parameters:
   2979                   *
   2980                   * struct {
   2981                   *     opaque dh_p<1..2^16-1>;
   2982                   *     opaque dh_g<1..2^16-1>;
   2983                   *     opaque dh_Ys<1..2^16-1>;
   2984                   * } ServerDHParams;
   2985                   */
   2986                  if( ( ret = mbedtls_dhm_set_group( &ssl->handshake->dhm_ctx,
   2987                                                     &ssl->conf->dhm_P,
   2988                                                     &ssl->conf->dhm_G ) ) != 0 )
   \                     ??ssl_prepare_server_key_exchange_4: (+1)
   \       0x82   0x6828             LDR      R0,[R5, #+0]
   \       0x84   0xF100 0x0288      ADD      R2,R0,#+136
   \       0x88   0xF100 0x017C      ADD      R1,R0,#+124
   \       0x8C   0x6BE8             LDR      R0,[R5, #+60]
   \       0x8E   0x1D00             ADDS     R0,R0,#+4
   \       0x90   0x....'....        BL       mbedtls_dhm_set_group
   \       0x94   0x0004             MOVS     R4,R0
   \       0x96   0xD00D             BEQ.N    ??ssl_prepare_server_key_exchange_6
   2989                  {
   2990                      MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_dhm_set_group", ret );
   \       0x98   0x9401             STR      R4,[SP, #+4]
   \       0x9A   0x....'....        LDR.W    R0,??DataTable34_10
   \       0x9E   0x9000             STR      R0,[SP, #+0]
   \       0xA0   0xF640 0x33AE      MOVW     R3,#+2990
   \       0xA4   0x....'....        LDR.W    R2,??DataTable34_8
   \       0xA8   0x2101             MOVS     R1,#+1
   \       0xAA   0x4628             MOV      R0,R5
   \       0xAC   0x....'....        BL       mbedtls_debug_print_ret
   2991                      return( ret );
   \       0xB0   0x4620             MOV      R0,R4
   \       0xB2   0xE1BA             B.N      ??ssl_prepare_server_key_exchange_5
   2992                  }
   2993          
   2994                  if( ( ret = mbedtls_dhm_make_params(
   2995                            &ssl->handshake->dhm_ctx,
   2996                            (int) mbedtls_mpi_size( &ssl->handshake->dhm_ctx.P ),
   2997                            ssl->out_msg + ssl->out_msglen, &len,
   2998                            ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
   \                     ??ssl_prepare_server_key_exchange_6: (+1)
   \       0xB4   0x6BE8             LDR      R0,[R5, #+60]
   \       0xB6   0x3008             ADDS     R0,R0,#+8
   \       0xB8   0x....'....        BL       mbedtls_mpi_size
   \       0xBC   0x6829             LDR      R1,[R5, #+0]
   \       0xBE   0x69C9             LDR      R1,[R1, #+28]
   \       0xC0   0x9101             STR      R1,[SP, #+4]
   \       0xC2   0x6829             LDR      R1,[R5, #+0]
   \       0xC4   0x6989             LDR      R1,[R1, #+24]
   \       0xC6   0x9100             STR      R1,[SP, #+0]
   \       0xC8   0xAB02             ADD      R3,SP,#+8
   \       0xCA   0xF8D5 0x10C4      LDR      R1,[R5, #+196]
   \       0xCE   0xF8D5 0x20CC      LDR      R2,[R5, #+204]
   \       0xD2   0x440A             ADD      R2,R1,R2
   \       0xD4   0x4601             MOV      R1,R0
   \       0xD6   0x6BE8             LDR      R0,[R5, #+60]
   \       0xD8   0x1D00             ADDS     R0,R0,#+4
   \       0xDA   0x....'....        BL       mbedtls_dhm_make_params
   \       0xDE   0x0004             MOVS     R4,R0
   \       0xE0   0xD00D             BEQ.N    ??ssl_prepare_server_key_exchange_7
   2999                  {
   3000                      MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_dhm_make_params", ret );
   \       0xE2   0x9401             STR      R4,[SP, #+4]
   \       0xE4   0x....'....        LDR.W    R0,??DataTable34_11
   \       0xE8   0x9000             STR      R0,[SP, #+0]
   \       0xEA   0xF640 0x33B8      MOVW     R3,#+3000
   \       0xEE   0x....'....        LDR.W    R2,??DataTable34_8
   \       0xF2   0x2101             MOVS     R1,#+1
   \       0xF4   0x4628             MOV      R0,R5
   \       0xF6   0x....'....        BL       mbedtls_debug_print_ret
   3001                      return( ret );
   \       0xFA   0x4620             MOV      R0,R4
   \       0xFC   0xE195             B.N      ??ssl_prepare_server_key_exchange_5
   3002                  }
   3003          
   3004          #if defined(MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED)
   3005                  dig_signed = ssl->out_msg + ssl->out_msglen;
   \                     ??ssl_prepare_server_key_exchange_7: (+1)
   \       0xFE   0xF8D5 0x00C4      LDR      R0,[R5, #+196]
   \      0x102   0xF8D5 0x10CC      LDR      R1,[R5, #+204]
   \      0x106   0xEB00 0x0901      ADD      R9,R0,R1
   3006          #endif
   3007          
   3008                  ssl->out_msglen += len;
   \      0x10A   0x9802             LDR      R0,[SP, #+8]
   \      0x10C   0x1841             ADDS     R1,R0,R1
   \      0x10E   0xF8C5 0x10CC      STR      R1,[R5, #+204]
   3009          
   3010                  MBEDTLS_SSL_DEBUG_MPI( 3, "DHM: X ", &ssl->handshake->dhm_ctx.X  );
   \      0x112   0x....'....        LDR.W    R4,??DataTable34_8
   \      0x116   0x6BE8             LDR      R0,[R5, #+60]
   \      0x118   0x3020             ADDS     R0,R0,#+32
   \      0x11A   0x9001             STR      R0,[SP, #+4]
   \      0x11C   0x....'....        LDR.W    R0,??DataTable34_12
   \      0x120   0x9000             STR      R0,[SP, #+0]
   \      0x122   0xF640 0x33C2      MOVW     R3,#+3010
   \      0x126   0x4622             MOV      R2,R4
   \      0x128   0x2103             MOVS     R1,#+3
   \      0x12A   0x4628             MOV      R0,R5
   \      0x12C   0x....'....        BL       mbedtls_debug_print_mpi
   3011                  MBEDTLS_SSL_DEBUG_MPI( 3, "DHM: P ", &ssl->handshake->dhm_ctx.P  );
   \      0x130   0x6BE8             LDR      R0,[R5, #+60]
   \      0x132   0x3008             ADDS     R0,R0,#+8
   \      0x134   0x9001             STR      R0,[SP, #+4]
   \      0x136   0x....'....        LDR.W    R0,??DataTable34_13
   \      0x13A   0x9000             STR      R0,[SP, #+0]
   \      0x13C   0xF640 0x33C3      MOVW     R3,#+3011
   \      0x140   0x4622             MOV      R2,R4
   \      0x142   0x2103             MOVS     R1,#+3
   \      0x144   0x4628             MOV      R0,R5
   \      0x146   0x....'....        BL       mbedtls_debug_print_mpi
   3012                  MBEDTLS_SSL_DEBUG_MPI( 3, "DHM: G ", &ssl->handshake->dhm_ctx.G  );
   \      0x14A   0x6BE8             LDR      R0,[R5, #+60]
   \      0x14C   0x3014             ADDS     R0,R0,#+20
   \      0x14E   0x9001             STR      R0,[SP, #+4]
   \      0x150   0x....'....        LDR.W    R0,??DataTable34_14
   \      0x154   0x9000             STR      R0,[SP, #+0]
   \      0x156   0xF640 0x33C4      MOVW     R3,#+3012
   \      0x15A   0x4622             MOV      R2,R4
   \      0x15C   0x2103             MOVS     R1,#+3
   \      0x15E   0x4628             MOV      R0,R5
   \      0x160   0x....'....        BL       mbedtls_debug_print_mpi
   3013                  MBEDTLS_SSL_DEBUG_MPI( 3, "DHM: GX", &ssl->handshake->dhm_ctx.GX );
   \      0x164   0x6BE8             LDR      R0,[R5, #+60]
   \      0x166   0x302C             ADDS     R0,R0,#+44
   \      0x168   0x9001             STR      R0,[SP, #+4]
   \      0x16A   0x....'....        LDR.W    R0,??DataTable34_15
   \      0x16E   0x9000             STR      R0,[SP, #+0]
   \      0x170   0xF640 0x33C5      MOVW     R3,#+3013
   \      0x174   0x4622             MOV      R2,R4
   \      0x176   0x2103             MOVS     R1,#+3
   \      0x178   0x4628             MOV      R0,R5
   \      0x17A   0x....'....        BL       mbedtls_debug_print_mpi
   3014              }
   3015          #endif /* MBEDTLS_KEY_EXCHANGE__SOME__DHE_ENABLED */
   3016          
   3017              /*
   3018               * - ECDHE key exchanges
   3019               */
   3020          #if defined(MBEDTLS_KEY_EXCHANGE__SOME__ECDHE_ENABLED)
   3021              if( mbedtls_ssl_ciphersuite_uses_ecdhe( ciphersuite_info ) )
   \                     ??ssl_prepare_server_key_exchange_2: (+1)
   \      0x17E   0x4638             MOV      R0,R7
   \      0x180   0x....'....        BL       mbedtls_ssl_ciphersuite_uses_ecdhe
   \      0x184   0x2800             CMP      R0,#+0
   \      0x186   0xF000 0x8087      BEQ.W    ??ssl_prepare_server_key_exchange_8
   3022              {
   3023                  /*
   3024                   * Ephemeral ECDH parameters:
   3025                   *
   3026                   * struct {
   3027                   *     ECParameters curve_params;
   3028                   *     ECPoint      public;
   3029                   * } ServerECDHParams;
   3030                   */
   3031                  const mbedtls_ecp_curve_info **curve = NULL;
   \      0x18A   0x2400             MOVS     R4,#+0
   3032                  const mbedtls_ecp_group_id *gid;
   3033                  int ret;
   3034                  size_t len = 0;
   \      0x18C   0x4620             MOV      R0,R4
   \      0x18E   0x9002             STR      R0,[SP, #+8]
   3035          
   3036                  /* Match our preference list against the offered curves */
   3037                  for( gid = ssl->conf->curve_list; *gid != MBEDTLS_ECP_DP_NONE; gid++ )
   \      0x190   0x6828             LDR      R0,[R5, #+0]
   \      0x192   0x6F81             LDR      R1,[R0, #+120]
   \      0x194   0xE008             B.N      ??ssl_prepare_server_key_exchange_9
   3038                      for( curve = ssl->handshake->curves; *curve != NULL; curve++ )
   3039                          if( (*curve)->grp_id == *gid )
   \                     ??ssl_prepare_server_key_exchange_10: (+1)
   \      0x196   0x7800             LDRB     R0,[R0, #+0]
   \      0x198   0x780A             LDRB     R2,[R1, #+0]
   \      0x19A   0x4290             CMP      R0,R2
   \      0x19C   0xD00B             BEQ.N    ??ssl_prepare_server_key_exchange_11
   \      0x19E   0x1D24             ADDS     R4,R4,#+4
   \                     ??ssl_prepare_server_key_exchange_12: (+1)
   \      0x1A0   0x6820             LDR      R0,[R4, #+0]
   \      0x1A2   0x2800             CMP      R0,#+0
   \      0x1A4   0xD1F7             BNE.N    ??ssl_prepare_server_key_exchange_10
   \      0x1A6   0x1C49             ADDS     R1,R1,#+1
   \                     ??ssl_prepare_server_key_exchange_9: (+1)
   \      0x1A8   0x7808             LDRB     R0,[R1, #+0]
   \      0x1AA   0x2800             CMP      R0,#+0
   \      0x1AC   0xD003             BEQ.N    ??ssl_prepare_server_key_exchange_11
   \      0x1AE   0x6BE8             LDR      R0,[R5, #+60]
   \      0x1B0   0xF8D0 0x41B4      LDR      R4,[R0, #+436]
   \      0x1B4   0xE7F4             B.N      ??ssl_prepare_server_key_exchange_12
   3040                              goto curve_matching_done;
   3041          
   3042          curve_matching_done:
   3043                  if( curve == NULL || *curve == NULL )
   \                     ??ssl_prepare_server_key_exchange_11: (+1)
   \      0x1B6   0x2C00             CMP      R4,#+0
   \      0x1B8   0xD002             BEQ.N    ??ssl_prepare_server_key_exchange_13
   \      0x1BA   0x6820             LDR      R0,[R4, #+0]
   \      0x1BC   0x2800             CMP      R0,#+0
   \      0x1BE   0xD10D             BNE.N    ??ssl_prepare_server_key_exchange_14
   3044                  {
   3045                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "no matching curve for ECDHE" ) );
   \                     ??ssl_prepare_server_key_exchange_13: (+1)
   \      0x1C0   0x....'....        LDR.W    R0,??DataTable34_16
   \      0x1C4   0x9000             STR      R0,[SP, #+0]
   \      0x1C6   0xF640 0x33E5      MOVW     R3,#+3045
   \      0x1CA   0x....'....        LDR.W    R2,??DataTable34_8
   \      0x1CE   0x2101             MOVS     R1,#+1
   \      0x1D0   0x4628             MOV      R0,R5
   \      0x1D2   0x....'....        BL       mbedtls_debug_print_msg
   3046                      return( MBEDTLS_ERR_SSL_NO_CIPHER_CHOSEN );
   \      0x1D6   0x....'....        LDR.W    R0,??DataTable34_17  ;; 0xffff8c80
   \      0x1DA   0xE126             B.N      ??ssl_prepare_server_key_exchange_5
   3047                  }
   3048          
   3049                  MBEDTLS_SSL_DEBUG_MSG( 2, ( "ECDHE curve: %s", (*curve)->name ) );
   \                     ??ssl_prepare_server_key_exchange_14: (+1)
   \      0x1DC   0x....'....        LDR.W    R8,??DataTable34_8
   \      0x1E0   0x6880             LDR      R0,[R0, #+8]
   \      0x1E2   0x9001             STR      R0,[SP, #+4]
   \      0x1E4   0x....'....        LDR.W    R0,??DataTable34_18
   \      0x1E8   0x9000             STR      R0,[SP, #+0]
   \      0x1EA   0xF640 0x33E9      MOVW     R3,#+3049
   \      0x1EE   0x4642             MOV      R2,R8
   \      0x1F0   0x2102             MOVS     R1,#+2
   \      0x1F2   0x4628             MOV      R0,R5
   \      0x1F4   0x....'....        BL       mbedtls_debug_print_msg
   3050          
   3051                  if( ( ret = mbedtls_ecp_group_load( &ssl->handshake->ecdh_ctx.grp,
   3052                                                 (*curve)->grp_id ) ) != 0 )
   \      0x1F8   0x6820             LDR      R0,[R4, #+0]
   \      0x1FA   0x7801             LDRB     R1,[R0, #+0]
   \      0x1FC   0x6BE8             LDR      R0,[R5, #+60]
   \      0x1FE   0x3080             ADDS     R0,R0,#+128
   \      0x200   0x....'....        BL       mbedtls_ecp_group_load
   \      0x204   0x0004             MOVS     R4,R0
   \      0x206   0xD00C             BEQ.N    ??ssl_prepare_server_key_exchange_15
   3053                  {
   3054                      MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ecp_group_load", ret );
   \      0x208   0x9401             STR      R4,[SP, #+4]
   \      0x20A   0x....'....        LDR.W    R0,??DataTable34_19
   \      0x20E   0x9000             STR      R0,[SP, #+0]
   \      0x210   0xF640 0x33EE      MOVW     R3,#+3054
   \      0x214   0x4642             MOV      R2,R8
   \      0x216   0x2101             MOVS     R1,#+1
   \      0x218   0x4628             MOV      R0,R5
   \      0x21A   0x....'....        BL       mbedtls_debug_print_ret
   3055                      return( ret );
   \      0x21E   0x4620             MOV      R0,R4
   \      0x220   0xE103             B.N      ??ssl_prepare_server_key_exchange_5
   3056                  }
   3057          
   3058                  if( ( ret = mbedtls_ecdh_make_params(
   3059                            &ssl->handshake->ecdh_ctx, &len,
   3060                            ssl->out_msg + ssl->out_msglen,
   3061                            MBEDTLS_SSL_OUT_CONTENT_LEN - ssl->out_msglen,
   3062                            ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
   \                     ??ssl_prepare_server_key_exchange_15: (+1)
   \      0x222   0x6828             LDR      R0,[R5, #+0]
   \      0x224   0x69C0             LDR      R0,[R0, #+28]
   \      0x226   0x9001             STR      R0,[SP, #+4]
   \      0x228   0x6828             LDR      R0,[R5, #+0]
   \      0x22A   0x6980             LDR      R0,[R0, #+24]
   \      0x22C   0x9000             STR      R0,[SP, #+0]
   \      0x22E   0xF8D5 0x30CC      LDR      R3,[R5, #+204]
   \      0x232   0xF5C3 0x5320      RSB      R3,R3,#+10240
   \      0x236   0xF8D5 0x00C4      LDR      R0,[R5, #+196]
   \      0x23A   0xF8D5 0x10CC      LDR      R1,[R5, #+204]
   \      0x23E   0x1842             ADDS     R2,R0,R1
   \      0x240   0xA902             ADD      R1,SP,#+8
   \      0x242   0x6BE8             LDR      R0,[R5, #+60]
   \      0x244   0x3080             ADDS     R0,R0,#+128
   \      0x246   0x....'....        BL       mbedtls_ecdh_make_params
   \      0x24A   0x0004             MOVS     R4,R0
   \      0x24C   0xD00C             BEQ.N    ??ssl_prepare_server_key_exchange_16
   3063                  {
   3064                      MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ecdh_make_params", ret );
   \      0x24E   0x9401             STR      R4,[SP, #+4]
   \      0x250   0x....'....        LDR.W    R0,??DataTable34_20
   \      0x254   0x9000             STR      R0,[SP, #+0]
   \      0x256   0xF640 0x33F8      MOVW     R3,#+3064
   \      0x25A   0x4642             MOV      R2,R8
   \      0x25C   0x2101             MOVS     R1,#+1
   \      0x25E   0x4628             MOV      R0,R5
   \      0x260   0x....'....        BL       mbedtls_debug_print_ret
   3065                      return( ret );
   \      0x264   0x4620             MOV      R0,R4
   \      0x266   0xE0E0             B.N      ??ssl_prepare_server_key_exchange_5
   3066                  }
   3067          
   3068          #if defined(MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED)
   3069                  dig_signed = ssl->out_msg + ssl->out_msglen;
   \                     ??ssl_prepare_server_key_exchange_16: (+1)
   \      0x268   0xF8D5 0x00C4      LDR      R0,[R5, #+196]
   \      0x26C   0xF8D5 0x10CC      LDR      R1,[R5, #+204]
   \      0x270   0xEB00 0x0901      ADD      R9,R0,R1
   3070          #endif
   3071          
   3072                  ssl->out_msglen += len;
   \      0x274   0x9802             LDR      R0,[SP, #+8]
   \      0x276   0x1841             ADDS     R1,R0,R1
   \      0x278   0xF8C5 0x10CC      STR      R1,[R5, #+204]
   3073          
   3074                  MBEDTLS_SSL_DEBUG_ECP( 3, "ECDH: Q ", &ssl->handshake->ecdh_ctx.Q );
   \      0x27C   0x6BE8             LDR      R0,[R5, #+60]
   \      0x27E   0xF500 0x7084      ADD      R0,R0,#+264
   \      0x282   0x9001             STR      R0,[SP, #+4]
   \      0x284   0x....'....        LDR.W    R0,??DataTable34_21
   \      0x288   0x9000             STR      R0,[SP, #+0]
   \      0x28A   0xF640 0x4302      MOVW     R3,#+3074
   \      0x28E   0x4642             MOV      R2,R8
   \      0x290   0x2103             MOVS     R1,#+3
   \      0x292   0x4628             MOV      R0,R5
   \      0x294   0x....'....        BL       mbedtls_debug_print_ecp
   3075              }
   3076          #endif /* MBEDTLS_KEY_EXCHANGE__SOME__ECDHE_ENABLED */
   3077          
   3078              /*
   3079               *
   3080               * Part 2: For key exchanges involving the server signing the
   3081               *         exchange parameters, compute and add the signature here.
   3082               *
   3083               */
   3084          #if defined(MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED)
   3085              if( mbedtls_ssl_ciphersuite_uses_server_signature( ciphersuite_info ) )
   \                     ??ssl_prepare_server_key_exchange_8: (+1)
   \      0x298   0x4638             MOV      R0,R7
   \      0x29A   0x....'....        BL       mbedtls_ssl_ciphersuite_uses_server_signature
   \      0x29E   0x2800             CMP      R0,#+0
   \      0x2A0   0xF000 0x80C2      BEQ.W    ??ssl_prepare_server_key_exchange_17
   3086              {
   3087                  size_t dig_signed_len = ssl->out_msg + ssl->out_msglen - dig_signed;
   \      0x2A4   0xF8D5 0x00C4      LDR      R0,[R5, #+196]
   \      0x2A8   0xF8D5 0x10CC      LDR      R1,[R5, #+204]
   \      0x2AC   0xEB00 0x0A01      ADD      R10,R0,R1
   \      0x2B0   0xEBAA 0x0A09      SUB      R10,R10,R9
   3088                  size_t hashlen = 0;
   \      0x2B4   0x2000             MOVS     R0,#+0
   \      0x2B6   0x9004             STR      R0,[SP, #+16]
   3089                  unsigned char hash[MBEDTLS_MD_MAX_SIZE];
   3090                  int ret;
   3091          
   3092                  /*
   3093                   * 2.1: Choose hash algorithm:
   3094                   * A: For TLS 1.2, obey signature-hash-algorithm extension
   3095                   *    to choose appropriate hash.
   3096                   * B: For SSL3, TLS1.0, TLS1.1 and ECDHE_ECDSA, use SHA1
   3097                   *    (RFC 4492, Sec. 5.4)
   3098                   * C: Otherwise, use MD5 + SHA1 (RFC 4346, Sec. 7.4.3)
   3099                   */
   3100          
   3101                  mbedtls_md_type_t md_alg;
   3102          
   3103          #if defined(MBEDTLS_SSL_PROTO_TLS1_2)
   3104                  mbedtls_pk_type_t sig_alg =
   3105                      mbedtls_ssl_get_ciphersuite_sig_pk_alg( ciphersuite_info );
   \      0x2B8   0x4638             MOV      R0,R7
   \      0x2BA   0x....'....        BL       mbedtls_ssl_get_ciphersuite_sig_pk_alg
   \      0x2BE   0x4680             MOV      R8,R0
   3106                  if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
   \      0x2C0   0x6968             LDR      R0,[R5, #+20]
   \      0x2C2   0x2803             CMP      R0,#+3
   \      0x2C4   0xD115             BNE.N    ??ssl_prepare_server_key_exchange_18
   3107                  {
   3108                      /* A: For TLS 1.2, obey signature-hash-algorithm extension
   3109                       *    (RFC 5246, Sec. 7.4.1.4.1). */
   3110                      if( sig_alg == MBEDTLS_PK_NONE ||
   3111                          ( md_alg = mbedtls_ssl_sig_hash_set_find( &ssl->handshake->hash_algs,
   3112                                                                    sig_alg ) ) == MBEDTLS_MD_NONE )
   \      0x2C6   0x4640             MOV      R0,R8
   \      0x2C8   0x2800             CMP      R0,#+0
   \      0x2CA   0xD005             BEQ.N    ??ssl_prepare_server_key_exchange_19
   \      0x2CC   0x4641             MOV      R1,R8
   \      0x2CE   0x6BE8             LDR      R0,[R5, #+60]
   \      0x2D0   0x....'....        BL       mbedtls_ssl_sig_hash_set_find
   \      0x2D4   0x0004             MOVS     R4,R0
   \      0x2D6   0xD112             BNE.N    ??ssl_prepare_server_key_exchange_20
   3113                      {
   3114                          MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
   \                     ??ssl_prepare_server_key_exchange_19: (+1)
   \      0x2D8   0x....'....        LDR.W    R0,??DataTable35
   \      0x2DC   0x9000             STR      R0,[SP, #+0]
   \      0x2DE   0xF640 0x432A      MOVW     R3,#+3114
   \      0x2E2   0x....'....        LDR.W    R2,??DataTable34_8
   \      0x2E6   0x2101             MOVS     R1,#+1
   \      0x2E8   0x4628             MOV      R0,R5
   \      0x2EA   0x....'....        BL       mbedtls_debug_print_msg
   3115                          /* (... because we choose a cipher suite
   3116                           *      only if there is a matching hash.) */
   3117                          return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   \      0x2EE   0x....             LDR.N    R0,??DataTable29  ;; 0xffff9400
   \      0x2F0   0xE09B             B.N      ??ssl_prepare_server_key_exchange_5
   3118                      }
   3119                  }
   3120                  else
   3121          #endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
   3122          #if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1) || \
   3123              defined(MBEDTLS_SSL_PROTO_TLS1_1)
   3124                  if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA )
   \                     ??ssl_prepare_server_key_exchange_18: (+1)
   \      0x2F2   0x7AB8             LDRB     R0,[R7, #+10]
   \      0x2F4   0x2804             CMP      R0,#+4
   \      0x2F6   0xD101             BNE.N    ??ssl_prepare_server_key_exchange_21
   3125                  {
   3126                      /* B: Default hash SHA1 */
   3127                      md_alg = MBEDTLS_MD_SHA1;
   \      0x2F8   0x2404             MOVS     R4,#+4
   \      0x2FA   0xE000             B.N      ??ssl_prepare_server_key_exchange_20
   3128                  }
   3129                  else
   3130          #endif /* MBEDTLS_SSL_PROTO_SSL3 || MBEDTLS_SSL_PROTO_TLS1 || \
   3131                    MBEDTLS_SSL_PROTO_TLS1_1 */
   3132                  {
   3133                      /* C: MD5 + SHA1 */
   3134                      md_alg = MBEDTLS_MD_NONE;
   \                     ??ssl_prepare_server_key_exchange_21: (+1)
   \      0x2FC   0x2400             MOVS     R4,#+0
   3135                  }
   3136          
   3137                  MBEDTLS_SSL_DEBUG_MSG( 3, ( "pick hash algorithm %d for signing", md_alg ) );
   \                     ??ssl_prepare_server_key_exchange_20: (+1)
   \      0x2FE   0x....'....        LDR.W    R7,??DataTable34_8
   \      0x302   0x4620             MOV      R0,R4
   \      0x304   0x9001             STR      R0,[SP, #+4]
   \      0x306   0x....'....        LDR.W    R0,??DataTable35_1
   \      0x30A   0x9000             STR      R0,[SP, #+0]
   \      0x30C   0xF640 0x4341      MOVW     R3,#+3137
   \      0x310   0x463A             MOV      R2,R7
   \      0x312   0x2103             MOVS     R1,#+3
   \      0x314   0x4628             MOV      R0,R5
   \      0x316   0x....'....        BL       mbedtls_debug_print_msg
   3138          
   3139                  /*
   3140                   * 2.2: Compute the hash to be signed
   3141                   */
   3142          #if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1) || \
   3143              defined(MBEDTLS_SSL_PROTO_TLS1_1)
   3144                  if( md_alg == MBEDTLS_MD_NONE )
   \      0x31A   0x0020             MOVS     R0,R4
   \      0x31C   0xD146             BNE.N    ??ssl_prepare_server_key_exchange_22
   3145                  {
   3146                      hashlen = 36;
   \      0x31E   0x2024             MOVS     R0,#+36
   \      0x320   0x9004             STR      R0,[SP, #+16]
   3147                      ret = mbedtls_ssl_get_key_exchange_md_ssl_tls( ssl, hash,
   3148                                                                     dig_signed,
   3149                                                                     dig_signed_len );
   \      0x322   0x4653             MOV      R3,R10
   \      0x324   0x464A             MOV      R2,R9
   \      0x326   0xA905             ADD      R1,SP,#+20
   \      0x328   0x4628             MOV      R0,R5
   \      0x32A   0x....'....        BL       mbedtls_ssl_get_key_exchange_md_ssl_tls
   3150                      if( ret != 0 )
   \      0x32E   0x2800             CMP      R0,#+0
   \      0x330   0xD17B             BNE.N    ??ssl_prepare_server_key_exchange_5
   3151                          return( ret );
   3152                  }
   3153                  else
   3154          #endif /* MBEDTLS_SSL_PROTO_SSL3 || MBEDTLS_SSL_PROTO_TLS1 || \
   3155                    MBEDTLS_SSL_PROTO_TLS1_1 */
   3156          #if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
   3157              defined(MBEDTLS_SSL_PROTO_TLS1_2)
   3158                  if( md_alg != MBEDTLS_MD_NONE )
   3159                  {
   3160                      ret = mbedtls_ssl_get_key_exchange_md_tls1_2( ssl, hash, &hashlen,
   3161                                                                    dig_signed,
   3162                                                                    dig_signed_len,
   3163                                                                    md_alg );
   3164                      if( ret != 0 )
   3165                          return( ret );
   3166                  }
   3167                  else
   3168          #endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 || \
   3169                    MBEDTLS_SSL_PROTO_TLS1_2 */
   3170                  {
   3171                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
   3172                      return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   3173                  }
   3174          
   3175                  MBEDTLS_SSL_DEBUG_BUF( 3, "parameters hash", hash, hashlen );
   \                     ??ssl_prepare_server_key_exchange_23: (+1)
   \      0x332   0x9804             LDR      R0,[SP, #+16]
   \      0x334   0x9002             STR      R0,[SP, #+8]
   \      0x336   0xA805             ADD      R0,SP,#+20
   \      0x338   0x9001             STR      R0,[SP, #+4]
   \      0x33A   0x....'....        LDR.W    R0,??DataTable35_2
   \      0x33E   0x9000             STR      R0,[SP, #+0]
   \      0x340   0xF640 0x4367      MOVW     R3,#+3175
   \      0x344   0x463A             MOV      R2,R7
   \      0x346   0x2103             MOVS     R1,#+3
   \      0x348   0x4628             MOV      R0,R5
   \      0x34A   0x....'....        BL       mbedtls_debug_print_buf
   3176          
   3177                  /*
   3178                   * 2.3: Compute and add the signature
   3179                   */
   3180          #if defined(MBEDTLS_SSL_PROTO_TLS1_2)
   3181                  if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
   \      0x34E   0x6968             LDR      R0,[R5, #+20]
   \      0x350   0x2803             CMP      R0,#+3
   \      0x352   0xD119             BNE.N    ??ssl_prepare_server_key_exchange_24
   3182                  {
   3183                      /*
   3184                       * For TLS 1.2, we need to specify signature and hash algorithm
   3185                       * explicitly through a prefix to the signature.
   3186                       *
   3187                       * struct {
   3188                       *    HashAlgorithm hash;
   3189                       *    SignatureAlgorithm signature;
   3190                       * } SignatureAndHashAlgorithm;
   3191                       *
   3192                       * struct {
   3193                       *    SignatureAndHashAlgorithm algorithm;
   3194                       *    opaque signature<0..2^16-1>;
   3195                       * } DigitallySigned;
   3196                       *
   3197                       */
   3198          
   3199                      ssl->out_msg[ssl->out_msglen++] =
   3200                          mbedtls_ssl_hash_from_md_alg( md_alg );
   \      0x354   0xF8D5 0x90CC      LDR      R9,[R5, #+204]
   \      0x358   0xF109 0x0001      ADD      R0,R9,#+1
   \      0x35C   0xF8C5 0x00CC      STR      R0,[R5, #+204]
   \      0x360   0x4620             MOV      R0,R4
   \      0x362   0x....'....        BL       mbedtls_ssl_hash_from_md_alg
   \      0x366   0xF8D5 0x10C4      LDR      R1,[R5, #+196]
   \      0x36A   0xF801 0x0009      STRB     R0,[R1, R9]
   3201                      ssl->out_msg[ssl->out_msglen++] =
   3202                          mbedtls_ssl_sig_from_pk_alg( sig_alg );
   \      0x36E   0xF8D5 0x90CC      LDR      R9,[R5, #+204]
   \      0x372   0xF109 0x0001      ADD      R0,R9,#+1
   \      0x376   0xF8C5 0x00CC      STR      R0,[R5, #+204]
   \      0x37A   0x4640             MOV      R0,R8
   \      0x37C   0x....'....        BL       mbedtls_ssl_sig_from_pk_alg
   \      0x380   0xF8D5 0x10C4      LDR      R1,[R5, #+196]
   \      0x384   0xF801 0x0009      STRB     R0,[R1, R9]
   3203                  }
   3204          #endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
   3205          
   3206          #if defined(MBEDTLS_SSL_ASYNC_PRIVATE)
   3207                  if( ssl->conf->f_async_sign_start != NULL )
   3208                  {
   3209                      ret = ssl->conf->f_async_sign_start( ssl,
   3210                                                           mbedtls_ssl_own_cert( ssl ),
   3211                                                           md_alg, hash, hashlen );
   3212                      switch( ret )
   3213                      {
   3214                      case MBEDTLS_ERR_SSL_HW_ACCEL_FALLTHROUGH:
   3215                          /* act as if f_async_sign was null */
   3216                          break;
   3217                      case 0:
   3218                          ssl->handshake->async_in_progress = 1;
   3219                          return( ssl_resume_server_key_exchange( ssl, signature_len ) );
   3220                      case MBEDTLS_ERR_SSL_ASYNC_IN_PROGRESS:
   3221                          ssl->handshake->async_in_progress = 1;
   3222                          return( MBEDTLS_ERR_SSL_ASYNC_IN_PROGRESS );
   3223                      default:
   3224                          MBEDTLS_SSL_DEBUG_RET( 1, "f_async_sign_start", ret );
   3225                          return( ret );
   3226                      }
   3227                  }
   3228          #endif /* MBEDTLS_SSL_ASYNC_PRIVATE */
   3229          
   3230                  if( mbedtls_ssl_own_key( ssl ) == NULL )
   \                     ??ssl_prepare_server_key_exchange_24: (+1)
   \      0x388   0x4628             MOV      R0,R5
   \      0x38A   0x....'....        BL       mbedtls_ssl_own_key
   \      0x38E   0x2800             CMP      R0,#+0
   \      0x390   0xD125             BNE.N    ??ssl_prepare_server_key_exchange_25
   3231                  {
   3232                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no private key" ) );
   \      0x392   0x....'....        LDR.W    R0,??DataTable35_3
   \      0x396   0x9000             STR      R0,[SP, #+0]
   \      0x398   0xF44F 0x634A      MOV      R3,#+3232
   \      0x39C   0x463A             MOV      R2,R7
   \      0x39E   0x2101             MOVS     R1,#+1
   \      0x3A0   0x4628             MOV      R0,R5
   \      0x3A2   0x....'....        BL       mbedtls_debug_print_msg
   3233                      return( MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED );
   \      0x3A6   0x....'....        LDR.W    R0,??DataTable35_4  ;; 0xffff8a00
   \      0x3AA   0xE03E             B.N      ??ssl_prepare_server_key_exchange_5
   3234                  }
   \                     ??ssl_prepare_server_key_exchange_22: (+1)
   \      0x3AC   0xD00B             BEQ.N    ??ssl_prepare_server_key_exchange_26
   \      0x3AE   0x9001             STR      R0,[SP, #+4]
   \      0x3B0   0xF8CD 0xA000      STR      R10,[SP, #+0]
   \      0x3B4   0x464B             MOV      R3,R9
   \      0x3B6   0xAA04             ADD      R2,SP,#+16
   \      0x3B8   0xA905             ADD      R1,SP,#+20
   \      0x3BA   0x4628             MOV      R0,R5
   \      0x3BC   0x....'....        BL       mbedtls_ssl_get_key_exchange_md_tls1_2
   \      0x3C0   0x2800             CMP      R0,#+0
   \      0x3C2   0xD0B6             BEQ.N    ??ssl_prepare_server_key_exchange_23
   \      0x3C4   0xE031             B.N      ??ssl_prepare_server_key_exchange_5
   \                     ??ssl_prepare_server_key_exchange_26: (+1)
   \      0x3C6   0x....'....        LDR.W    R0,??DataTable35
   \      0x3CA   0x9000             STR      R0,[SP, #+0]
   \      0x3CC   0xF640 0x4363      MOVW     R3,#+3171
   \      0x3D0   0x463A             MOV      R2,R7
   \      0x3D2   0x2101             MOVS     R1,#+1
   \      0x3D4   0x4628             MOV      R0,R5
   \      0x3D6   0x....'....        BL       mbedtls_debug_print_msg
   \      0x3DA   0x....             LDR.N    R0,??DataTable29  ;; 0xffff9400
   \      0x3DC   0xE025             B.N      ??ssl_prepare_server_key_exchange_5
   3235          
   3236                  /* Append the signature to ssl->out_msg, leaving 2 bytes for the
   3237                   * signature length which will be added in ssl_write_server_key_exchange
   3238                   * after the call to ssl_prepare_server_key_exchange.
   3239                   * ssl_write_server_key_exchange also takes care of incrementing
   3240                   * ssl->out_msglen. */
   3241                  if( ( ret = mbedtls_pk_sign( mbedtls_ssl_own_key( ssl ),
   3242                                               md_alg, hash, hashlen,
   3243                                               ssl->out_msg + ssl->out_msglen + 2,
   3244                                               signature_len,
   3245                                               ssl->conf->f_rng,
   3246                                               ssl->conf->p_rng ) ) != 0 )
   \                     ??ssl_prepare_server_key_exchange_25: (+1)
   \      0x3DE   0x4628             MOV      R0,R5
   \      0x3E0   0x....'....        BL       mbedtls_ssl_own_key
   \      0x3E4   0x6829             LDR      R1,[R5, #+0]
   \      0x3E6   0x69C9             LDR      R1,[R1, #+28]
   \      0x3E8   0x9103             STR      R1,[SP, #+12]
   \      0x3EA   0x6829             LDR      R1,[R5, #+0]
   \      0x3EC   0x6989             LDR      R1,[R1, #+24]
   \      0x3EE   0x9102             STR      R1,[SP, #+8]
   \      0x3F0   0x9601             STR      R6,[SP, #+4]
   \      0x3F2   0xF8D5 0x10C4      LDR      R1,[R5, #+196]
   \      0x3F6   0xF8D5 0x20CC      LDR      R2,[R5, #+204]
   \      0x3FA   0x4411             ADD      R1,R1,R2
   \      0x3FC   0x1C89             ADDS     R1,R1,#+2
   \      0x3FE   0x9100             STR      R1,[SP, #+0]
   \      0x400   0x9B04             LDR      R3,[SP, #+16]
   \      0x402   0xAA05             ADD      R2,SP,#+20
   \      0x404   0x4621             MOV      R1,R4
   \      0x406   0x....'....        BL       mbedtls_pk_sign
   \      0x40A   0x0004             MOVS     R4,R0
   \      0x40C   0xD00C             BEQ.N    ??ssl_prepare_server_key_exchange_17
   3247                  {
   3248                      MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_pk_sign", ret );
   \      0x40E   0x9401             STR      R4,[SP, #+4]
   \      0x410   0x....'....        LDR.W    R0,??DataTable35_5
   \      0x414   0x9000             STR      R0,[SP, #+0]
   \      0x416   0xF44F 0x634B      MOV      R3,#+3248
   \      0x41A   0x463A             MOV      R2,R7
   \      0x41C   0x2101             MOVS     R1,#+1
   \      0x41E   0x4628             MOV      R0,R5
   \      0x420   0x....'....        BL       mbedtls_debug_print_ret
   3249                      return( ret );
   \      0x424   0x4620             MOV      R0,R4
   \      0x426   0xE000             B.N      ??ssl_prepare_server_key_exchange_5
   3250                  }
   3251              }
   3252          #endif /* MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED */
   3253          
   3254              return( 0 );
   \                     ??ssl_prepare_server_key_exchange_17: (+1)
   \      0x428   0x2000             MOVS     R0,#+0
   \                     ??ssl_prepare_server_key_exchange_5: (+1)
   \      0x42A   0xB016             ADD      SP,SP,#+88
   \      0x42C   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
   3255          }
   3256          
   3257          /* Prepare the ServerKeyExchange message and send it. For ciphersuites
   3258           * that do not include a ServerKeyExchange message, do nothing. Either
   3259           * way, if successful, move on to the next step in the SSL state
   3260           * machine. */

   \                                 In section .text, align 2, keep-with-next
   3261          static int ssl_write_server_key_exchange( mbedtls_ssl_context *ssl )
   3262          {
   \                     ssl_write_server_key_exchange: (+1)
   \        0x0   0xB57F             PUSH     {R0-R6,LR}
   \        0x2   0x4605             MOV      R5,R0
   3263              int ret;
   3264              size_t signature_len = 0;
   \        0x4   0x2000             MOVS     R0,#+0
   \        0x6   0x9003             STR      R0,[SP, #+12]
   3265          #if defined(MBEDTLS_KEY_EXCHANGE__SOME_NON_PFS__ENABLED)
   3266              const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
   3267                                      ssl->transform_negotiate->ciphersuite_info;
   \        0x8   0x6CE8             LDR      R0,[R5, #+76]
   \        0xA   0x6804             LDR      R4,[R0, #+0]
   3268          #endif /* MBEDTLS_KEY_EXCHANGE__SOME_NON_PFS__ENABLED */
   3269          
   3270              MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write server key exchange" ) );
   \        0xC   0x....'....        LDR.W    R6,??DataTable34_8
   \       0x10   0x....'....        LDR.W    R0,??DataTable35_6
   \       0x14   0x9000             STR      R0,[SP, #+0]
   \       0x16   0xF640 0x43C6      MOVW     R3,#+3270
   \       0x1A   0x4632             MOV      R2,R6
   \       0x1C   0x2102             MOVS     R1,#+2
   \       0x1E   0x4628             MOV      R0,R5
   \       0x20   0x....'....        BL       mbedtls_debug_print_msg
   3271          
   3272          #if defined(MBEDTLS_KEY_EXCHANGE__SOME_NON_PFS__ENABLED)
   3273              /* Extract static ECDH parameters and abort if ServerKeyExchange
   3274               * is not needed. */
   3275              if( mbedtls_ssl_ciphersuite_no_pfs( ciphersuite_info ) )
   \       0x24   0x4620             MOV      R0,R4
   \       0x26   0x....'....        BL       mbedtls_ssl_ciphersuite_no_pfs
   \       0x2A   0x2800             CMP      R0,#+0
   \       0x2C   0xD016             BEQ.N    ??ssl_write_server_key_exchange_0
   3276              {
   3277                  /* For suites involving ECDH, extract DH parameters
   3278                   * from certificate at this point. */
   3279          #if defined(MBEDTLS_KEY_EXCHANGE__SOME__ECDH_ENABLED)
   3280                  if( mbedtls_ssl_ciphersuite_uses_ecdh( ciphersuite_info ) )
   \       0x2E   0x4620             MOV      R0,R4
   \       0x30   0x....'....        BL       mbedtls_ssl_ciphersuite_uses_ecdh
   \       0x34   0x2800             CMP      R0,#+0
   \       0x36   0xD002             BEQ.N    ??ssl_write_server_key_exchange_1
   3281                  {
   3282                      ssl_get_ecdh_params_from_cert( ssl );
   \       0x38   0x4628             MOV      R0,R5
   \       0x3A   0x....'....        BL       ssl_get_ecdh_params_from_cert
   3283                  }
   3284          #endif /* MBEDTLS_KEY_EXCHANGE__SOME__ECDH_ENABLED */
   3285          
   3286                  /* Key exchanges not involving ephemeral keys don't use
   3287                   * ServerKeyExchange, so end here. */
   3288                  MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write server key exchange" ) );
   \                     ??ssl_write_server_key_exchange_1: (+1)
   \       0x3E   0x....'....        LDR.W    R0,??DataTable35_7
   \       0x42   0x9000             STR      R0,[SP, #+0]
   \       0x44   0xF640 0x43D8      MOVW     R3,#+3288
   \       0x48   0x4632             MOV      R2,R6
   \       0x4A   0x2102             MOVS     R1,#+2
   \       0x4C   0x4628             MOV      R0,R5
   \       0x4E   0x....'....        BL       mbedtls_debug_print_msg
   3289                  ssl->state++;
   \       0x52   0x6868             LDR      R0,[R5, #+4]
   \       0x54   0x1C40             ADDS     R0,R0,#+1
   \       0x56   0x6068             STR      R0,[R5, #+4]
   3290                  return( 0 );
   \       0x58   0x2000             MOVS     R0,#+0
   \       0x5A   0xE06C             B.N      ??ssl_write_server_key_exchange_2
   3291              }
   3292          #endif /* MBEDTLS_KEY_EXCHANGE__SOME_NON_PFS__ENABLED */
   3293          
   3294          #if defined(MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED) && \
   3295              defined(MBEDTLS_SSL_ASYNC_PRIVATE)
   3296              /* If we have already prepared the message and there is an ongoing
   3297               * signature operation, resume signing. */
   3298              if( ssl->handshake->async_in_progress != 0 )
   3299              {
   3300                  MBEDTLS_SSL_DEBUG_MSG( 2, ( "resuming signature operation" ) );
   3301                  ret = ssl_resume_server_key_exchange( ssl, &signature_len );
   3302              }
   3303              else
   3304          #endif /* defined(MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED) &&
   3305                    defined(MBEDTLS_SSL_ASYNC_PRIVATE) */
   3306              {
   3307                  /* ServerKeyExchange is needed. Prepare the message. */
   3308                  ret = ssl_prepare_server_key_exchange( ssl, &signature_len );
   \                     ??ssl_write_server_key_exchange_0: (+1)
   \       0x5C   0xA903             ADD      R1,SP,#+12
   \       0x5E   0x4628             MOV      R0,R5
   \       0x60   0x....'....        BL       ssl_prepare_server_key_exchange
   \       0x64   0x0004             MOVS     R4,R0
   3309              }
   3310          
   3311              if( ret != 0 )
   \       0x66   0xD012             BEQ.N    ??ssl_write_server_key_exchange_3
   3312              {
   3313                  /* If we're starting to write a new message, set ssl->out_msglen
   3314                   * to 0. But if we're resuming after an asynchronous message,
   3315                   * out_msglen is the amount of data written so far and mst be
   3316                   * preserved. */
   3317                  if( ret == MBEDTLS_ERR_SSL_ASYNC_IN_PROGRESS )
   \       0x68   0xF514 0x4FCA      CMN      R4,#+25856
   \       0x6C   0xD10A             BNE.N    ??ssl_write_server_key_exchange_4
   3318                      MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write server key exchange (pending)" ) );
   \       0x6E   0x....'....        LDR.W    R0,??DataTable35_8
   \       0x72   0x9000             STR      R0,[SP, #+0]
   \       0x74   0xF640 0x43F6      MOVW     R3,#+3318
   \       0x78   0x4632             MOV      R2,R6
   \       0x7A   0x2102             MOVS     R1,#+2
   \       0x7C   0x4628             MOV      R0,R5
   \       0x7E   0x....'....        BL       mbedtls_debug_print_msg
   \       0x82   0xE002             B.N      ??ssl_write_server_key_exchange_5
   3319                  else
   3320                      ssl->out_msglen = 0;
   \                     ??ssl_write_server_key_exchange_4: (+1)
   \       0x84   0x2000             MOVS     R0,#+0
   \       0x86   0xF8C5 0x00CC      STR      R0,[R5, #+204]
   3321                  return( ret );
   \                     ??ssl_write_server_key_exchange_5: (+1)
   \       0x8A   0x4620             MOV      R0,R4
   \       0x8C   0xE053             B.N      ??ssl_write_server_key_exchange_2
   3322              }
   3323          
   3324              /* If there is a signature, write its length.
   3325               * ssl_prepare_server_key_exchange already wrote the signature
   3326               * itself at its proper place in the output buffer. */
   3327          #if defined(MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED)
   3328              if( signature_len != 0 )
   \                     ??ssl_write_server_key_exchange_3: (+1)
   \       0x8E   0x9803             LDR      R0,[SP, #+12]
   \       0x90   0x2800             CMP      R0,#+0
   \       0x92   0xD02A             BEQ.N    ??ssl_write_server_key_exchange_6
   3329              {
   3330                  ssl->out_msg[ssl->out_msglen++] = (unsigned char)( signature_len >> 8 );
   \       0x94   0xF8D5 0x00CC      LDR      R0,[R5, #+204]
   \       0x98   0x1C41             ADDS     R1,R0,#+1
   \       0x9A   0xF8C5 0x10CC      STR      R1,[R5, #+204]
   \       0x9E   0x9903             LDR      R1,[SP, #+12]
   \       0xA0   0x0A09             LSRS     R1,R1,#+8
   \       0xA2   0xF8D5 0x20C4      LDR      R2,[R5, #+196]
   \       0xA6   0x5411             STRB     R1,[R2, R0]
   3331                  ssl->out_msg[ssl->out_msglen++] = (unsigned char)( signature_len      );
   \       0xA8   0xF8D5 0x00CC      LDR      R0,[R5, #+204]
   \       0xAC   0x1C41             ADDS     R1,R0,#+1
   \       0xAE   0xF8C5 0x10CC      STR      R1,[R5, #+204]
   \       0xB2   0x9903             LDR      R1,[SP, #+12]
   \       0xB4   0xF8D5 0x20C4      LDR      R2,[R5, #+196]
   \       0xB8   0x5411             STRB     R1,[R2, R0]
   3332          
   3333                  MBEDTLS_SSL_DEBUG_BUF( 3, "my signature",
   3334                                         ssl->out_msg + ssl->out_msglen,
   3335                                         signature_len );
   \       0xBA   0x9803             LDR      R0,[SP, #+12]
   \       0xBC   0x9002             STR      R0,[SP, #+8]
   \       0xBE   0xF8D5 0x00C4      LDR      R0,[R5, #+196]
   \       0xC2   0xF8D5 0x10CC      LDR      R1,[R5, #+204]
   \       0xC6   0x4408             ADD      R0,R0,R1
   \       0xC8   0x9001             STR      R0,[SP, #+4]
   \       0xCA   0x....'....        LDR.W    R0,??DataTable35_9
   \       0xCE   0x9000             STR      R0,[SP, #+0]
   \       0xD0   0xF640 0x5307      MOVW     R3,#+3335
   \       0xD4   0x4632             MOV      R2,R6
   \       0xD6   0x2103             MOVS     R1,#+3
   \       0xD8   0x4628             MOV      R0,R5
   \       0xDA   0x....'....        BL       mbedtls_debug_print_buf
   3336          
   3337                  /* Skip over the already-written signature */
   3338                  ssl->out_msglen += signature_len;
   \       0xDE   0xF8D5 0x10CC      LDR      R1,[R5, #+204]
   \       0xE2   0x9803             LDR      R0,[SP, #+12]
   \       0xE4   0x1841             ADDS     R1,R0,R1
   \       0xE6   0xF8C5 0x10CC      STR      R1,[R5, #+204]
   3339              }
   3340          #endif /* MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED */
   3341          
   3342              /* Add header and send. */
   3343              ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
   \                     ??ssl_write_server_key_exchange_6: (+1)
   \       0xEA   0x2016             MOVS     R0,#+22
   \       0xEC   0xF8C5 0x00C8      STR      R0,[R5, #+200]
   3344              ssl->out_msg[0]  = MBEDTLS_SSL_HS_SERVER_KEY_EXCHANGE;
   \       0xF0   0x200C             MOVS     R0,#+12
   \       0xF2   0xF8D5 0x10C4      LDR      R1,[R5, #+196]
   \       0xF6   0x7008             STRB     R0,[R1, #+0]
   3345          
   3346              ssl->state++;
   \       0xF8   0x6868             LDR      R0,[R5, #+4]
   \       0xFA   0x1C40             ADDS     R0,R0,#+1
   \       0xFC   0x6068             STR      R0,[R5, #+4]
   3347          
   3348              if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
   \       0xFE   0x4628             MOV      R0,R5
   \      0x100   0x....'....        BL       mbedtls_ssl_write_handshake_msg
   \      0x104   0x0004             MOVS     R4,R0
   \      0x106   0xD00B             BEQ.N    ??ssl_write_server_key_exchange_7
   3349              {
   3350                  MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_handshake_msg", ret );
   \      0x108   0x9401             STR      R4,[SP, #+4]
   \      0x10A   0x....             LDR.N    R0,??DataTable30
   \      0x10C   0x9000             STR      R0,[SP, #+0]
   \      0x10E   0xF640 0x5316      MOVW     R3,#+3350
   \      0x112   0x4632             MOV      R2,R6
   \      0x114   0x2101             MOVS     R1,#+1
   \      0x116   0x4628             MOV      R0,R5
   \      0x118   0x....'....        BL       mbedtls_debug_print_ret
   3351                  return( ret );
   \      0x11C   0x4620             MOV      R0,R4
   \      0x11E   0xE00A             B.N      ??ssl_write_server_key_exchange_2
   3352              }
   3353          
   3354              MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write server key exchange" ) );
   \                     ??ssl_write_server_key_exchange_7: (+1)
   \      0x120   0x....'....        LDR.W    R0,??DataTable36
   \      0x124   0x9000             STR      R0,[SP, #+0]
   \      0x126   0xF640 0x531A      MOVW     R3,#+3354
   \      0x12A   0x4632             MOV      R2,R6
   \      0x12C   0x2102             MOVS     R1,#+2
   \      0x12E   0x4628             MOV      R0,R5
   \      0x130   0x....'....        BL       mbedtls_debug_print_msg
   3355              return( 0 );
   \      0x134   0x2000             MOVS     R0,#+0
   \                     ??ssl_write_server_key_exchange_2: (+1)
   \      0x136   0xB004             ADD      SP,SP,#+16
   \      0x138   0xBD70             POP      {R4-R6,PC}       ;; return
   3356          }
   3357          

   \                                 In section .text, align 2, keep-with-next
   3358          static int ssl_write_server_hello_done( mbedtls_ssl_context *ssl )
   3359          {
   \                     ssl_write_server_hello_done: (+1)
   \        0x0   0xB57C             PUSH     {R2-R6,LR}
   \        0x2   0x4605             MOV      R5,R0
   3360              int ret;
   3361          
   3362              MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write server hello done" ) );
   \        0x4   0x....'....        LDR.W    R6,??DataTable34_8
   \        0x8   0x....'....        LDR.W    R0,??DataTable36_1
   \        0xC   0x9000             STR      R0,[SP, #+0]
   \        0xE   0xF640 0x5322      MOVW     R3,#+3362
   \       0x12   0x4632             MOV      R2,R6
   \       0x14   0x2102             MOVS     R1,#+2
   \       0x16   0x4628             MOV      R0,R5
   \       0x18   0x....'....        BL       mbedtls_debug_print_msg
   3363          
   3364              ssl->out_msglen  = 4;
   \       0x1C   0x2004             MOVS     R0,#+4
   \       0x1E   0xF8C5 0x00CC      STR      R0,[R5, #+204]
   3365              ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
   \       0x22   0x2016             MOVS     R0,#+22
   \       0x24   0xF8C5 0x00C8      STR      R0,[R5, #+200]
   3366              ssl->out_msg[0]  = MBEDTLS_SSL_HS_SERVER_HELLO_DONE;
   \       0x28   0x200E             MOVS     R0,#+14
   \       0x2A   0xF8D5 0x10C4      LDR      R1,[R5, #+196]
   \       0x2E   0x7008             STRB     R0,[R1, #+0]
   3367          
   3368              ssl->state++;
   \       0x30   0x6868             LDR      R0,[R5, #+4]
   \       0x32   0x1C40             ADDS     R0,R0,#+1
   \       0x34   0x6068             STR      R0,[R5, #+4]
   3369          
   3370          #if defined(MBEDTLS_SSL_PROTO_DTLS)
   3371              if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
   \       0x36   0x6828             LDR      R0,[R5, #+0]
   \       0x38   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \       0x3C   0xF3C0 0x0040      UBFX     R0,R0,#+1,#+1
   \       0x40   0x2800             CMP      R0,#+0
   \       0x42   0xD002             BEQ.N    ??ssl_write_server_hello_done_0
   3372                  mbedtls_ssl_send_flight_completed( ssl );
   \       0x44   0x4628             MOV      R0,R5
   \       0x46   0x....'....        BL       mbedtls_ssl_send_flight_completed
   3373          #endif
   3374          
   3375              if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
   \                     ??ssl_write_server_hello_done_0: (+1)
   \       0x4A   0x4628             MOV      R0,R5
   \       0x4C   0x....'....        BL       mbedtls_ssl_write_handshake_msg
   \       0x50   0x0004             MOVS     R4,R0
   \       0x52   0xD00B             BEQ.N    ??ssl_write_server_hello_done_1
   3376              {
   3377                  MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_handshake_msg", ret );
   \       0x54   0x9401             STR      R4,[SP, #+4]
   \       0x56   0x....             LDR.N    R0,??DataTable30
   \       0x58   0x9000             STR      R0,[SP, #+0]
   \       0x5A   0xF640 0x5331      MOVW     R3,#+3377
   \       0x5E   0x4632             MOV      R2,R6
   \       0x60   0x2101             MOVS     R1,#+1
   \       0x62   0x4628             MOV      R0,R5
   \       0x64   0x....'....        BL       mbedtls_debug_print_ret
   3378                  return( ret );
   \       0x68   0x4620             MOV      R0,R4
   \       0x6A   0xBD76             POP      {R1,R2,R4-R6,PC}
   3379              }
   3380          
   3381          #if defined(MBEDTLS_SSL_PROTO_DTLS)
   3382              if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM &&
   3383                  ( ret = mbedtls_ssl_flight_transmit( ssl ) ) != 0 )
   \                     ??ssl_write_server_hello_done_1: (+1)
   \       0x6C   0x6828             LDR      R0,[R5, #+0]
   \       0x6E   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \       0x72   0xF3C0 0x0040      UBFX     R0,R0,#+1,#+1
   \       0x76   0x2800             CMP      R0,#+0
   \       0x78   0xD011             BEQ.N    ??ssl_write_server_hello_done_2
   \       0x7A   0x4628             MOV      R0,R5
   \       0x7C   0x....'....        BL       mbedtls_ssl_flight_transmit
   \       0x80   0x0004             MOVS     R4,R0
   \       0x82   0xD00C             BEQ.N    ??ssl_write_server_hello_done_2
   3384              {
   3385                  MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_flight_transmit", ret );
   \       0x84   0x9401             STR      R4,[SP, #+4]
   \       0x86   0x....'....        LDR.W    R0,??DataTable36_2
   \       0x8A   0x9000             STR      R0,[SP, #+0]
   \       0x8C   0xF640 0x5339      MOVW     R3,#+3385
   \       0x90   0x4632             MOV      R2,R6
   \       0x92   0x2101             MOVS     R1,#+1
   \       0x94   0x4628             MOV      R0,R5
   \       0x96   0x....'....        BL       mbedtls_debug_print_ret
   3386                  return( ret );
   \       0x9A   0x4620             MOV      R0,R4
   \       0x9C   0xBD76             POP      {R1,R2,R4-R6,PC}
   3387              }
   3388          #endif /* MBEDTLS_SSL_PROTO_DTLS */
   3389          
   3390              MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write server hello done" ) );
   \                     ??ssl_write_server_hello_done_2: (+1)
   \       0x9E   0x....'....        LDR.W    R0,??DataTable37
   \       0xA2   0x9000             STR      R0,[SP, #+0]
   \       0xA4   0xF640 0x533E      MOVW     R3,#+3390
   \       0xA8   0x4632             MOV      R2,R6
   \       0xAA   0x2102             MOVS     R1,#+2
   \       0xAC   0x4628             MOV      R0,R5
   \       0xAE   0x....'....        BL       mbedtls_debug_print_msg
   3391          
   3392              return( 0 );
   \       0xB2   0x2000             MOVS     R0,#+0
   \       0xB4   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
   3393          }
   3394          
   3395          #if defined(MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED) ||                       \
   3396              defined(MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED)

   \                                 In section .text, align 2, keep-with-next
   3397          static int ssl_parse_client_dh_public( mbedtls_ssl_context *ssl, unsigned char **p,
   3398                                                 const unsigned char *end )
   3399          {
   \                     ssl_parse_client_dh_public: (+1)
   \        0x0   0xB5FE             PUSH     {R1-R7,LR}
   \        0x2   0x4605             MOV      R5,R0
   \        0x4   0x460E             MOV      R6,R1
   3400              int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
   3401              size_t n;
   3402          
   3403              /*
   3404               * Receive G^Y mod P, premaster = (G^Y)^X mod P
   3405               */
   3406              if( *p + 2 > end )
   \        0x6   0x6830             LDR      R0,[R6, #+0]
   \        0x8   0x1C80             ADDS     R0,R0,#+2
   \        0xA   0x4282             CMP      R2,R0
   \        0xC   0xD20D             BCS.N    ??ssl_parse_client_dh_public_0
   3407              {
   3408                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client key exchange message" ) );
   \        0xE   0x....'....        LDR.W    R0,??DataTable37_1
   \       0x12   0x9000             STR      R0,[SP, #+0]
   \       0x14   0xF44F 0x6355      MOV      R3,#+3408
   \       0x18   0x....'....        LDR.W    R2,??DataTable34_8
   \       0x1C   0x2101             MOVS     R1,#+1
   \       0x1E   0x4628             MOV      R0,R5
   \       0x20   0x....'....        BL       mbedtls_debug_print_msg
   3409                  return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE );
   \       0x24   0x....'....        LDR.W    R0,??DataTable37_2  ;; 0xffff8400
   \       0x28   0xBDFE             POP      {R1-R7,PC}
   3410              }
   3411          
   3412              n = ( (*p)[0] << 8 ) | (*p)[1];
   \                     ??ssl_parse_client_dh_public_0: (+1)
   \       0x2A   0x6830             LDR      R0,[R6, #+0]
   \       0x2C   0x7800             LDRB     R0,[R0, #+0]
   \       0x2E   0x6831             LDR      R1,[R6, #+0]
   \       0x30   0x784F             LDRB     R7,[R1, #+1]
   \       0x32   0xEA47 0x2700      ORR      R7,R7,R0, LSL #+8
   3413              *p += 2;
   \       0x36   0x4608             MOV      R0,R1
   \       0x38   0x1C80             ADDS     R0,R0,#+2
   \       0x3A   0x6030             STR      R0,[R6, #+0]
   3414          
   3415              if( *p + n > end )
   \       0x3C   0x4438             ADD      R0,R0,R7
   \       0x3E   0x4282             CMP      R2,R0
   \       0x40   0xD20D             BCS.N    ??ssl_parse_client_dh_public_1
   3416              {
   3417                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client key exchange message" ) );
   \       0x42   0x....'....        LDR.W    R0,??DataTable37_1
   \       0x46   0x9000             STR      R0,[SP, #+0]
   \       0x48   0xF640 0x5359      MOVW     R3,#+3417
   \       0x4C   0x....'....        LDR.W    R2,??DataTable34_8
   \       0x50   0x2101             MOVS     R1,#+1
   \       0x52   0x4628             MOV      R0,R5
   \       0x54   0x....'....        BL       mbedtls_debug_print_msg
   3418                  return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE );
   \       0x58   0x....'....        LDR.W    R0,??DataTable37_2  ;; 0xffff8400
   \       0x5C   0xBDFE             POP      {R1-R7,PC}
   3419              }
   3420          
   3421              if( ( ret = mbedtls_dhm_read_public( &ssl->handshake->dhm_ctx, *p, n ) ) != 0 )
   \                     ??ssl_parse_client_dh_public_1: (+1)
   \       0x5E   0x463A             MOV      R2,R7
   \       0x60   0x6831             LDR      R1,[R6, #+0]
   \       0x62   0x6BE8             LDR      R0,[R5, #+60]
   \       0x64   0x1D00             ADDS     R0,R0,#+4
   \       0x66   0x....'....        BL       mbedtls_dhm_read_public
   \       0x6A   0x0004             MOVS     R4,R0
   \       0x6C   0xD00E             BEQ.N    ??ssl_parse_client_dh_public_2
   3422              {
   3423                  MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_dhm_read_public", ret );
   \       0x6E   0x9401             STR      R4,[SP, #+4]
   \       0x70   0x....'....        LDR.W    R0,??DataTable37_3
   \       0x74   0x9000             STR      R0,[SP, #+0]
   \       0x76   0xF640 0x535F      MOVW     R3,#+3423
   \       0x7A   0x....'....        LDR.W    R2,??DataTable34_8
   \       0x7E   0x2101             MOVS     R1,#+1
   \       0x80   0x4628             MOV      R0,R5
   \       0x82   0x....'....        BL       mbedtls_debug_print_ret
   3424                  return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE_RP );
   \       0x86   0x....'....        LDR.W    R0,??DataTable37_4  ;; 0xffff8380
   \       0x8A   0xBDFE             POP      {R1-R7,PC}
   3425              }
   3426          
   3427              *p += n;
   \                     ??ssl_parse_client_dh_public_2: (+1)
   \       0x8C   0x6830             LDR      R0,[R6, #+0]
   \       0x8E   0x4438             ADD      R0,R0,R7
   \       0x90   0x6030             STR      R0,[R6, #+0]
   3428          
   3429              MBEDTLS_SSL_DEBUG_MPI( 3, "DHM: GY", &ssl->handshake->dhm_ctx.GY );
   \       0x92   0x6BE8             LDR      R0,[R5, #+60]
   \       0x94   0x3038             ADDS     R0,R0,#+56
   \       0x96   0x9001             STR      R0,[SP, #+4]
   \       0x98   0x....'....        LDR.W    R0,??DataTable37_5
   \       0x9C   0x9000             STR      R0,[SP, #+0]
   \       0x9E   0xF640 0x5365      MOVW     R3,#+3429
   \       0xA2   0x....'....        LDR.W    R2,??DataTable34_8
   \       0xA6   0x2103             MOVS     R1,#+3
   \       0xA8   0x4628             MOV      R0,R5
   \       0xAA   0x....'....        BL       mbedtls_debug_print_mpi
   3430          
   3431              return( ret );
   \       0xAE   0x4620             MOV      R0,R4
   \       0xB0   0xBDFE             POP      {R1-R7,PC}       ;; return
   3432          }
   3433          #endif /* MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED ||
   3434                    MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED */
   3435          
   3436          #if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED) ||                           \
   3437              defined(MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED)
   3438          
   3439          #if defined(MBEDTLS_SSL_ASYNC_PRIVATE)
   3440          static int ssl_resume_decrypt_pms( mbedtls_ssl_context *ssl,
   3441                                             unsigned char *peer_pms,
   3442                                             size_t *peer_pmslen,
   3443                                             size_t peer_pmssize )
   3444          {
   3445              int ret = ssl->conf->f_async_resume( ssl,
   3446                                                   peer_pms, peer_pmslen, peer_pmssize );
   3447              if( ret != MBEDTLS_ERR_SSL_ASYNC_IN_PROGRESS )
   3448              {
   3449                  ssl->handshake->async_in_progress = 0;
   3450                  mbedtls_ssl_set_async_operation_data( ssl, NULL );
   3451              }
   3452              MBEDTLS_SSL_DEBUG_RET( 2, "ssl_decrypt_encrypted_pms", ret );
   3453              return( ret );
   3454          }
   3455          #endif /* MBEDTLS_SSL_ASYNC_PRIVATE */
   3456          

   \                                 In section .text, align 2, keep-with-next
   3457          static int ssl_decrypt_encrypted_pms( mbedtls_ssl_context *ssl,
   3458                                                const unsigned char *p,
   3459                                                const unsigned char *end,
   3460                                                unsigned char *peer_pms,
   3461                                                size_t *peer_pmslen,
   3462                                                size_t peer_pmssize )
   3463          {
   \                     ssl_decrypt_encrypted_pms: (+1)
   \        0x0   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \        0x4   0xB084             SUB      SP,SP,#+16
   \        0x6   0x4604             MOV      R4,R0
   \        0x8   0x460D             MOV      R5,R1
   \        0xA   0x4691             MOV      R9,R2
   \        0xC   0x461E             MOV      R6,R3
   3464              int ret;
   3465              mbedtls_pk_context *private_key = mbedtls_ssl_own_key( ssl );
   \        0xE   0x....'....        BL       mbedtls_ssl_own_key
   \       0x12   0x4607             MOV      R7,R0
   3466              mbedtls_pk_context *public_key = &mbedtls_ssl_own_cert( ssl )->pk;
   \       0x14   0x4620             MOV      R0,R4
   \       0x16   0x....'....        BL       mbedtls_ssl_own_cert
   \       0x1A   0x30BC             ADDS     R0,R0,#+188
   3467              size_t len = mbedtls_pk_get_len( public_key );
   \       0x1C   0x....'....        BL       mbedtls_pk_get_len
   \       0x20   0x4680             MOV      R8,R0
   3468          
   3469          #if defined(MBEDTLS_SSL_ASYNC_PRIVATE)
   3470              /* If we have already started decoding the message and there is an ongoing
   3471               * decryption operation, resume signing. */
   3472              if( ssl->handshake->async_in_progress != 0 )
   3473              {
   3474                  MBEDTLS_SSL_DEBUG_MSG( 2, ( "resuming decryption operation" ) );
   3475                  return( ssl_resume_decrypt_pms( ssl,
   3476                                                  peer_pms, peer_pmslen, peer_pmssize ) );
   3477              }
   3478          #endif /* MBEDTLS_SSL_ASYNC_PRIVATE */
   3479          
   3480              /*
   3481               * Prepare to decrypt the premaster using own private RSA key
   3482               */
   3483          #if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
   3484              defined(MBEDTLS_SSL_PROTO_TLS1_2)
   3485              if( ssl->minor_ver != MBEDTLS_SSL_MINOR_VERSION_0 )
   \       0x22   0x6960             LDR      R0,[R4, #+20]
   \       0x24   0x2800             CMP      R0,#+0
   \       0x26   0xD028             BEQ.N    ??ssl_decrypt_encrypted_pms_0
   3486              {
   3487                  if ( p + 2 > end ) {
   \       0x28   0x1CA8             ADDS     R0,R5,#+2
   \       0x2A   0x4581             CMP      R9,R0
   \       0x2C   0xD20C             BCS.N    ??ssl_decrypt_encrypted_pms_1
   3488                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client key exchange message" ) );
   \       0x2E   0x....'....        LDR.W    R0,??DataTable37_1
   \       0x32   0x9000             STR      R0,[SP, #+0]
   \       0x34   0xF44F 0x635A      MOV      R3,#+3488
   \       0x38   0x....             LDR.N    R2,??DataTable34_8
   \       0x3A   0x2101             MOVS     R1,#+1
   \       0x3C   0x4620             MOV      R0,R4
   \       0x3E   0x....'....        BL       mbedtls_debug_print_msg
   3489                      return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE );
   \       0x42   0x....'....        LDR.W    R0,??DataTable37_2  ;; 0xffff8400
   \       0x46   0xE04C             B.N      ??ssl_decrypt_encrypted_pms_2
   3490                  }
   3491                  if( *p++ != ( ( len >> 8 ) & 0xFF ) ||
   3492                      *p++ != ( ( len      ) & 0xFF ) )
   \                     ??ssl_decrypt_encrypted_pms_1: (+1)
   \       0x48   0xF815 0x0B01      LDRB     R0,[R5], #+1
   \       0x4C   0xF3C8 0x2107      UBFX     R1,R8,#+8,#+8
   \       0x50   0x4288             CMP      R0,R1
   \       0x52   0xD105             BNE.N    ??ssl_decrypt_encrypted_pms_3
   \       0x54   0xF815 0x0B01      LDRB     R0,[R5], #+1
   \       0x58   0xF008 0x01FF      AND      R1,R8,#0xFF
   \       0x5C   0x4288             CMP      R0,R1
   \       0x5E   0xD00C             BEQ.N    ??ssl_decrypt_encrypted_pms_0
   3493                  {
   3494                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client key exchange message" ) );
   \                     ??ssl_decrypt_encrypted_pms_3: (+1)
   \       0x60   0x....'....        LDR.W    R0,??DataTable37_1
   \       0x64   0x9000             STR      R0,[SP, #+0]
   \       0x66   0xF640 0x53A6      MOVW     R3,#+3494
   \       0x6A   0x....             LDR.N    R2,??DataTable34_8
   \       0x6C   0x2101             MOVS     R1,#+1
   \       0x6E   0x4620             MOV      R0,R4
   \       0x70   0x....'....        BL       mbedtls_debug_print_msg
   3495                      return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE );
   \       0x74   0x....'....        LDR.W    R0,??DataTable37_2  ;; 0xffff8400
   \       0x78   0xE033             B.N      ??ssl_decrypt_encrypted_pms_2
   3496                  }
   3497              }
   3498          #endif
   3499          
   3500              if( p + len != end )
   \                     ??ssl_decrypt_encrypted_pms_0: (+1)
   \       0x7A   0xEB05 0x0008      ADD      R0,R5,R8
   \       0x7E   0x4548             CMP      R0,R9
   \       0x80   0xD00C             BEQ.N    ??ssl_decrypt_encrypted_pms_4
   3501              {
   3502                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client key exchange message" ) );
   \       0x82   0x....'....        LDR.W    R0,??DataTable37_1
   \       0x86   0x9000             STR      R0,[SP, #+0]
   \       0x88   0xF640 0x53AE      MOVW     R3,#+3502
   \       0x8C   0x....             LDR.N    R2,??DataTable34_8
   \       0x8E   0x2101             MOVS     R1,#+1
   \       0x90   0x4620             MOV      R0,R4
   \       0x92   0x....'....        BL       mbedtls_debug_print_msg
   3503                  return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE );
   \       0x96   0x....'....        LDR.W    R0,??DataTable37_2  ;; 0xffff8400
   \       0x9A   0xE022             B.N      ??ssl_decrypt_encrypted_pms_2
   3504              }
   3505          
   3506              /*
   3507               * Decrypt the premaster secret
   3508               */
   3509          #if defined(MBEDTLS_SSL_ASYNC_PRIVATE)
   3510              if( ssl->conf->f_async_decrypt_start != NULL )
   3511              {
   3512                  ret = ssl->conf->f_async_decrypt_start( ssl,
   3513                                                          mbedtls_ssl_own_cert( ssl ),
   3514                                                          p, len );
   3515                  switch( ret )
   3516                  {
   3517                  case MBEDTLS_ERR_SSL_HW_ACCEL_FALLTHROUGH:
   3518                      /* act as if f_async_decrypt_start was null */
   3519                      break;
   3520                  case 0:
   3521                      ssl->handshake->async_in_progress = 1;
   3522                      return( ssl_resume_decrypt_pms( ssl,
   3523                                                      peer_pms,
   3524                                                      peer_pmslen,
   3525                                                      peer_pmssize ) );
   3526                  case MBEDTLS_ERR_SSL_ASYNC_IN_PROGRESS:
   3527                      ssl->handshake->async_in_progress = 1;
   3528                      return( MBEDTLS_ERR_SSL_ASYNC_IN_PROGRESS );
   3529                  default:
   3530                      MBEDTLS_SSL_DEBUG_RET( 1, "f_async_decrypt_start", ret );
   3531                      return( ret );
   3532                  }
   3533              }
   3534          #endif /* MBEDTLS_SSL_ASYNC_PRIVATE */
   3535          
   3536              if( ! mbedtls_pk_can_do( private_key, MBEDTLS_PK_RSA ) )
   \                     ??ssl_decrypt_encrypted_pms_4: (+1)
   \       0x9C   0x2101             MOVS     R1,#+1
   \       0x9E   0x4638             MOV      R0,R7
   \       0xA0   0x....'....        BL       mbedtls_pk_can_do
   \       0xA4   0x2800             CMP      R0,#+0
   \       0xA6   0xD10C             BNE.N    ??ssl_decrypt_encrypted_pms_5
   3537              {
   3538                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no RSA private key" ) );
   \       0xA8   0x....'....        LDR.W    R0,??DataTable37_6
   \       0xAC   0x9000             STR      R0,[SP, #+0]
   \       0xAE   0xF640 0x53D2      MOVW     R3,#+3538
   \       0xB2   0x....             LDR.N    R2,??DataTable34_8
   \       0xB4   0x2101             MOVS     R1,#+1
   \       0xB6   0x4620             MOV      R0,R4
   \       0xB8   0x....'....        BL       mbedtls_debug_print_msg
   3539                  return( MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED );
   \       0xBC   0x....'....        LDR.W    R0,??DataTable35_4  ;; 0xffff8a00
   \       0xC0   0xE00F             B.N      ??ssl_decrypt_encrypted_pms_2
   3540              }
   \                     ??ssl_decrypt_encrypted_pms_5: (+1)
   \       0xC2   0x990D             LDR      R1,[SP, #+52]
   \       0xC4   0x980C             LDR      R0,[SP, #+48]
   3541          
   3542              ret = mbedtls_pk_decrypt( private_key, p, len,
   3543                                        peer_pms, peer_pmslen, peer_pmssize,
   3544                                        ssl->conf->f_rng, ssl->conf->p_rng );
   3545              return( ret );
   \       0xC6   0x6822             LDR      R2,[R4, #+0]
   \       0xC8   0x69D2             LDR      R2,[R2, #+28]
   \       0xCA   0x9203             STR      R2,[SP, #+12]
   \       0xCC   0x6822             LDR      R2,[R4, #+0]
   \       0xCE   0x6992             LDR      R2,[R2, #+24]
   \       0xD0   0x9202             STR      R2,[SP, #+8]
   \       0xD2   0x9101             STR      R1,[SP, #+4]
   \       0xD4   0x9000             STR      R0,[SP, #+0]
   \       0xD6   0x4633             MOV      R3,R6
   \       0xD8   0x4642             MOV      R2,R8
   \       0xDA   0x4629             MOV      R1,R5
   \       0xDC   0x4638             MOV      R0,R7
   \       0xDE   0x....'....        BL       mbedtls_pk_decrypt
   \                     ??ssl_decrypt_encrypted_pms_2: (+1)
   \       0xE2   0xB005             ADD      SP,SP,#+20
   \       0xE4   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
   3546          }
   3547          

   \                                 In section .text, align 2, keep-with-next
   3548          static int ssl_parse_encrypted_pms( mbedtls_ssl_context *ssl,
   3549                                              const unsigned char *p,
   3550                                              const unsigned char *end,
   3551                                              size_t pms_offset )
   3552          {
   \                     ssl_parse_encrypted_pms: (+1)
   \        0x0   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \        0x4   0xB09C             SUB      SP,SP,#+112
   \        0x6   0x4604             MOV      R4,R0
   \        0x8   0x461D             MOV      R5,R3
   3553              int ret;
   3554              unsigned char *pms = ssl->handshake->premaster + pms_offset;
   \        0xA   0x6BE0             LDR      R0,[R4, #+60]
   \        0xC   0x4428             ADD      R0,R0,R5
   \        0xE   0xF200 0x469C      ADDW     R6,R0,#+1180
   3555              unsigned char ver[2];
   3556              unsigned char fake_pms[48], peer_pms[48];
   3557              unsigned char mask;
   3558              size_t i, peer_pmslen;
   3559              unsigned int diff;
   3560          
   3561              /* In case of a failure in decryption, the decryption may write less than
   3562               * 2 bytes of output, but we always read the first two bytes. It doesn't
   3563               * matter in the end because diff will be nonzero in that case due to
   3564               * peer_pmslen being less than 48, and we only care whether diff is 0.
   3565               * But do initialize peer_pms for robustness anyway. This also makes
   3566               * memory analyzers happy (don't access uninitialized memory, even
   3567               * if it's an unsigned char). */
   3568              peer_pms[0] = peer_pms[1] = ~0;
   \       0x12   0x20FF             MOVS     R0,#+255
   \       0x14   0xAF04             ADD      R7,SP,#+16
   \       0x16   0x7078             STRB     R0,[R7, #+1]
   \       0x18   0xF88D 0x0010      STRB     R0,[SP, #+16]
   3569          
   3570              ret = ssl_decrypt_encrypted_pms( ssl, p, end,
   3571                                               peer_pms,
   3572                                               &peer_pmslen,
   3573                                               sizeof( peer_pms ) );
   \       0x1C   0x2030             MOVS     R0,#+48
   \       0x1E   0x9001             STR      R0,[SP, #+4]
   \       0x20   0xA803             ADD      R0,SP,#+12
   \       0x22   0x9000             STR      R0,[SP, #+0]
   \       0x24   0xAB04             ADD      R3,SP,#+16
   \       0x26   0x4620             MOV      R0,R4
   \       0x28   0x....'....        BL       ssl_decrypt_encrypted_pms
   \       0x2C   0x4680             MOV      R8,R0
   3574          
   3575          #if defined(MBEDTLS_SSL_ASYNC_PRIVATE)
   3576              if ( ret == MBEDTLS_ERR_SSL_ASYNC_IN_PROGRESS )
   3577                  return( ret );
   3578          #endif /* MBEDTLS_SSL_ASYNC_PRIVATE */
   3579          
   3580              mbedtls_ssl_write_version( ssl->handshake->max_major_ver,
   3581                                         ssl->handshake->max_minor_ver,
   3582                                         ssl->conf->transport, ver );
   \       0x2E   0xAB02             ADD      R3,SP,#+8
   \       0x30   0x6820             LDR      R0,[R4, #+0]
   \       0x32   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \       0x36   0xF3C0 0x0240      UBFX     R2,R0,#+1,#+1
   \       0x3A   0x6BE0             LDR      R0,[R4, #+60]
   \       0x3C   0xF8D0 0x16C8      LDR      R1,[R0, #+1736]
   \       0x40   0xF8D0 0x06C4      LDR      R0,[R0, #+1732]
   \       0x44   0x....'....        BL       mbedtls_ssl_write_version
   3583          
   3584              /* Avoid data-dependent branches while checking for invalid
   3585               * padding, to protect against timing-based Bleichenbacher-type
   3586               * attacks. */
   3587              diff  = (unsigned int) ret;
   3588              diff |= peer_pmslen ^ 48;
   3589              diff |= peer_pms[0] ^ ver[0];
   3590              diff |= peer_pms[1] ^ ver[1];
   \       0x48   0x9803             LDR      R0,[SP, #+12]
   \       0x4A   0xF080 0x0030      EOR      R0,R0,#0x30
   \       0x4E   0xEA40 0x0808      ORR      R8,R0,R8
   \       0x52   0xF89D 0x1010      LDRB     R1,[SP, #+16]
   \       0x56   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \       0x5A   0x4041             EORS     R1,R0,R1
   \       0x5C   0xEA41 0x0808      ORR      R8,R1,R8
   \       0x60   0x7879             LDRB     R1,[R7, #+1]
   \       0x62   0xF89D 0x0009      LDRB     R0,[SP, #+9]
   \       0x66   0x4041             EORS     R1,R0,R1
   \       0x68   0xEA41 0x0808      ORR      R8,R1,R8
   3591          
   3592              /* mask = diff ? 0xff : 0x00 using bit operations to avoid branches */
   3593              /* MSVC has a warning about unary minus on unsigned, but this is
   3594               * well-defined and precisely what we want to do here */
   3595          #if defined(_MSC_VER)
   3596          #pragma warning( push )
   3597          #pragma warning( disable : 4146 )
   3598          #endif
   3599              mask = - ( ( diff | - diff ) >> ( sizeof( unsigned int ) * 8 - 1 ) );
   \       0x6C   0xF1C8 0x0000      RSB      R0,R8,#+0
   \       0x70   0xEA40 0x0808      ORR      R8,R0,R8
   \       0x74   0xEA4F 0x78D8      LSR      R8,R8,#+31
   \       0x78   0xF1C8 0x0800      RSB      R8,R8,#+0
   3600          #if defined(_MSC_VER)
   3601          #pragma warning( pop )
   3602          #endif
   3603          
   3604              /*
   3605               * Protection against Bleichenbacher's attack: invalid PKCS#1 v1.5 padding
   3606               * must not cause the connection to end immediately; instead, send a
   3607               * bad_record_mac later in the handshake.
   3608               * To protect against timing-based variants of the attack, we must
   3609               * not have any branch that depends on whether the decryption was
   3610               * successful. In particular, always generate the fake premaster secret,
   3611               * regardless of whether it will ultimately influence the output or not.
   3612               */
   3613              ret = ssl->conf->f_rng( ssl->conf->p_rng, fake_pms, sizeof( fake_pms ) );
   \       0x7C   0x2230             MOVS     R2,#+48
   \       0x7E   0xA910             ADD      R1,SP,#+64
   \       0x80   0x6820             LDR      R0,[R4, #+0]
   \       0x82   0x69C0             LDR      R0,[R0, #+28]
   \       0x84   0x6823             LDR      R3,[R4, #+0]
   \       0x86   0x699B             LDR      R3,[R3, #+24]
   \       0x88   0x4798             BLX      R3
   3614              if( ret != 0 )
   \       0x8A   0x2800             CMP      R0,#+0
   \       0x8C   0xD12A             BNE.N    ??ssl_parse_encrypted_pms_0
   3615              {
   3616                  /* It's ok to abort on an RNG failure, since this does not reveal
   3617                   * anything about the RSA decryption. */
   3618                  return( ret );
   3619              }
   3620          
   3621          #if defined(MBEDTLS_SSL_DEBUG_ALL)
   3622              if( diff != 0 )
   3623                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client key exchange message" ) );
   3624          #endif
   3625          
   3626              if( sizeof( ssl->handshake->premaster ) < pms_offset ||
   3627                  sizeof( ssl->handshake->premaster ) - pms_offset < 48 )
   \       0x8E   0xF240 0x2025      MOVW     R0,#+549
   \       0x92   0x4285             CMP      R5,R0
   \       0x94   0xD203             BCS.N    ??ssl_parse_encrypted_pms_1
   \       0x96   0xF5C5 0x7509      RSB      R5,R5,#+548
   \       0x9A   0x2D30             CMP      R5,#+48
   \       0x9C   0xD20C             BCS.N    ??ssl_parse_encrypted_pms_2
   3628              {
   3629                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
   \                     ??ssl_parse_encrypted_pms_1: (+1)
   \       0x9E   0x....'....        LDR.W    R0,??DataTable35
   \       0xA2   0x9000             STR      R0,[SP, #+0]
   \       0xA4   0xF640 0x632D      MOVW     R3,#+3629
   \       0xA8   0x....             LDR.N    R2,??DataTable34_8
   \       0xAA   0x2101             MOVS     R1,#+1
   \       0xAC   0x4620             MOV      R0,R4
   \       0xAE   0x....'....        BL       mbedtls_debug_print_msg
   3630                  return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   \       0xB2   0x....'....        LDR.W    R0,??DataTable38  ;; 0xffff9400
   \       0xB6   0xE015             B.N      ??ssl_parse_encrypted_pms_0
   3631              }
   3632              ssl->handshake->pmslen = 48;
   \                     ??ssl_parse_encrypted_pms_2: (+1)
   \       0xB8   0x2030             MOVS     R0,#+48
   \       0xBA   0x6BE1             LDR      R1,[R4, #+60]
   \       0xBC   0xF8C1 0x0458      STR      R0,[R1, #+1112]
   3633          
   3634              /* Set pms to either the true or the fake PMS, without
   3635               * data-dependent branches. */
   3636              for( i = 0; i < ssl->handshake->pmslen; i++ )
   \       0xC0   0x2000             MOVS     R0,#+0
   \       0xC2   0xE009             B.N      ??ssl_parse_encrypted_pms_3
   3637                  pms[i] = ( mask & fake_pms[i] ) | ( (~mask) & peer_pms[i] );
   \                     ??ssl_parse_encrypted_pms_4: (+1)
   \       0xC4   0xA910             ADD      R1,SP,#+64
   \       0xC6   0x5C09             LDRB     R1,[R1, R0]
   \       0xC8   0xEA01 0x0108      AND      R1,R1,R8
   \       0xCC   0x5C3A             LDRB     R2,[R7, R0]
   \       0xCE   0xEA22 0x0208      BIC      R2,R2,R8
   \       0xD2   0x4311             ORRS     R1,R2,R1
   \       0xD4   0x5431             STRB     R1,[R6, R0]
   \       0xD6   0x1C40             ADDS     R0,R0,#+1
   \                     ??ssl_parse_encrypted_pms_3: (+1)
   \       0xD8   0x6BE1             LDR      R1,[R4, #+60]
   \       0xDA   0xF8D1 0x1458      LDR      R1,[R1, #+1112]
   \       0xDE   0x4288             CMP      R0,R1
   \       0xE0   0xD3F0             BCC.N    ??ssl_parse_encrypted_pms_4
   3638          
   3639              return( 0 );
   \       0xE2   0x2000             MOVS     R0,#+0
   \                     ??ssl_parse_encrypted_pms_0: (+1)
   \       0xE4   0xB01C             ADD      SP,SP,#+112
   \       0xE6   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   3640          }
   3641          #endif /* MBEDTLS_KEY_EXCHANGE_RSA_ENABLED ||
   3642                    MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED */
   3643          
   3644          #if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)

   \                                 In section .text, align 2, keep-with-next
   3645          static int ssl_parse_client_psk_identity( mbedtls_ssl_context *ssl, unsigned char **p,
   3646                                                    const unsigned char *end )
   3647          {
   \                     ssl_parse_client_psk_identity: (+1)
   \        0x0   0xE92D 0x41FF      PUSH     {R0-R8,LR}
   \        0x4   0x4605             MOV      R5,R0
   \        0x6   0x460E             MOV      R6,R1
   3648              int ret = 0;
   \        0x8   0x2700             MOVS     R7,#+0
   3649              size_t n;
   3650          
   3651              if( ssl->conf->f_psk == NULL &&
   3652                  ( ssl->conf->psk == NULL || ssl->conf->psk_identity == NULL ||
   3653                    ssl->conf->psk_identity_len == 0 || ssl->conf->psk_len == 0 ) )
   \        0xA   0x6828             LDR      R0,[R5, #+0]
   \        0xC   0x6BC0             LDR      R0,[R0, #+60]
   \        0xE   0x2800             CMP      R0,#+0
   \       0x10   0xD120             BNE.N    ??ssl_parse_client_psk_identity_0
   \       0x12   0x6828             LDR      R0,[R5, #+0]
   \       0x14   0xF8D0 0x0094      LDR      R0,[R0, #+148]
   \       0x18   0x2800             CMP      R0,#+0
   \       0x1A   0xD00E             BEQ.N    ??ssl_parse_client_psk_identity_1
   \       0x1C   0x6828             LDR      R0,[R5, #+0]
   \       0x1E   0xF8D0 0x009C      LDR      R0,[R0, #+156]
   \       0x22   0x2800             CMP      R0,#+0
   \       0x24   0xD009             BEQ.N    ??ssl_parse_client_psk_identity_1
   \       0x26   0x6828             LDR      R0,[R5, #+0]
   \       0x28   0xF8D0 0x00A0      LDR      R0,[R0, #+160]
   \       0x2C   0x2800             CMP      R0,#+0
   \       0x2E   0xD004             BEQ.N    ??ssl_parse_client_psk_identity_1
   \       0x30   0x6828             LDR      R0,[R5, #+0]
   \       0x32   0xF8D0 0x0098      LDR      R0,[R0, #+152]
   \       0x36   0x2800             CMP      R0,#+0
   \       0x38   0xD10C             BNE.N    ??ssl_parse_client_psk_identity_0
   3654              {
   3655                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no pre-shared key" ) );
   \                     ??ssl_parse_client_psk_identity_1: (+1)
   \       0x3A   0x....'....        LDR.W    R0,??DataTable38_1
   \       0x3E   0x9000             STR      R0,[SP, #+0]
   \       0x40   0xF640 0x6347      MOVW     R3,#+3655
   \       0x44   0x....             LDR.N    R2,??DataTable34_8
   \       0x46   0x2101             MOVS     R1,#+1
   \       0x48   0x4628             MOV      R0,R5
   \       0x4A   0x....'....        BL       mbedtls_debug_print_msg
   3656                  return( MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED );
   \       0x4E   0x....'....        LDR.W    R0,??DataTable35_4  ;; 0xffff8a00
   \       0x52   0xE06D             B.N      ??ssl_parse_client_psk_identity_2
   3657              }
   3658          
   3659              /*
   3660               * Receive client pre-shared key identity name
   3661               */
   3662              if( end - *p < 2 )
   \                     ??ssl_parse_client_psk_identity_0: (+1)
   \       0x54   0x6830             LDR      R0,[R6, #+0]
   \       0x56   0x1A10             SUBS     R0,R2,R0
   \       0x58   0x2802             CMP      R0,#+2
   \       0x5A   0xDA0C             BGE.N    ??ssl_parse_client_psk_identity_3
   3663              {
   3664                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client key exchange message" ) );
   \       0x5C   0x....'....        LDR.W    R0,??DataTable37_1
   \       0x60   0x9000             STR      R0,[SP, #+0]
   \       0x62   0xF44F 0x6365      MOV      R3,#+3664
   \       0x66   0x....             LDR.N    R2,??DataTable34_8
   \       0x68   0x2101             MOVS     R1,#+1
   \       0x6A   0x4628             MOV      R0,R5
   \       0x6C   0x....'....        BL       mbedtls_debug_print_msg
   3665                  return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE );
   \       0x70   0x....'....        LDR.W    R0,??DataTable37_2  ;; 0xffff8400
   \       0x74   0xE05C             B.N      ??ssl_parse_client_psk_identity_2
   3666              }
   3667          
   3668              n = ( (*p)[0] << 8 ) | (*p)[1];
   \                     ??ssl_parse_client_psk_identity_3: (+1)
   \       0x76   0x6830             LDR      R0,[R6, #+0]
   \       0x78   0x7800             LDRB     R0,[R0, #+0]
   \       0x7A   0x6831             LDR      R1,[R6, #+0]
   \       0x7C   0x784C             LDRB     R4,[R1, #+1]
   \       0x7E   0xEA44 0x2400      ORR      R4,R4,R0, LSL #+8
   3669              *p += 2;
   \       0x82   0x4608             MOV      R0,R1
   \       0x84   0x1C80             ADDS     R0,R0,#+2
   \       0x86   0x6030             STR      R0,[R6, #+0]
   3670          
   3671              if( n < 1 || n > 65535 || n > (size_t) ( end - *p ) )
   \       0x88   0x2C00             CMP      R4,#+0
   \       0x8A   0xD005             BEQ.N    ??ssl_parse_client_psk_identity_4
   \       0x8C   0xF5B4 0x3F80      CMP      R4,#+65536
   \       0x90   0xD202             BCS.N    ??ssl_parse_client_psk_identity_4
   \       0x92   0x1A12             SUBS     R2,R2,R0
   \       0x94   0x42A2             CMP      R2,R4
   \       0x96   0xD20C             BCS.N    ??ssl_parse_client_psk_identity_5
   3672              {
   3673                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client key exchange message" ) );
   \                     ??ssl_parse_client_psk_identity_4: (+1)
   \       0x98   0x....'....        LDR.W    R0,??DataTable37_1
   \       0x9C   0x9000             STR      R0,[SP, #+0]
   \       0x9E   0xF640 0x6359      MOVW     R3,#+3673
   \       0xA2   0x....             LDR.N    R2,??DataTable34_8
   \       0xA4   0x2101             MOVS     R1,#+1
   \       0xA6   0x4628             MOV      R0,R5
   \       0xA8   0x....'....        BL       mbedtls_debug_print_msg
   3674                  return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE );
   \       0xAC   0x....'....        LDR.W    R0,??DataTable37_2  ;; 0xffff8400
   \       0xB0   0xE03E             B.N      ??ssl_parse_client_psk_identity_2
   3675              }
   3676          
   3677              if( ssl->conf->f_psk != NULL )
   \                     ??ssl_parse_client_psk_identity_5: (+1)
   \       0xB2   0x6828             LDR      R0,[R5, #+0]
   \       0xB4   0x6BC0             LDR      R0,[R0, #+60]
   \       0xB6   0x2800             CMP      R0,#+0
   \       0xB8   0xD00E             BEQ.N    ??ssl_parse_client_psk_identity_6
   3678              {
   3679                  if( ssl->conf->f_psk( ssl->conf->p_psk, ssl, *p, n ) != 0 )
   \       0xBA   0x4623             MOV      R3,R4
   \       0xBC   0x6832             LDR      R2,[R6, #+0]
   \       0xBE   0x4629             MOV      R1,R5
   \       0xC0   0x6828             LDR      R0,[R5, #+0]
   \       0xC2   0x6C00             LDR      R0,[R0, #+64]
   \       0xC4   0xF8D5 0xC000      LDR      R12,[R5, #+0]
   \       0xC8   0xF8DC 0xC03C      LDR      R12,[R12, #+60]
   \       0xCC   0x47E0             BLX      R12
   \       0xCE   0x2800             CMP      R0,#+0
   \       0xD0   0xD012             BEQ.N    ??ssl_parse_client_psk_identity_7
   3680                      ret = MBEDTLS_ERR_SSL_UNKNOWN_IDENTITY;
   \       0xD2   0x....'....        LDR.W    R7,??DataTable38_2  ;; 0xffff9380
   \       0xD6   0xE00F             B.N      ??ssl_parse_client_psk_identity_7
   3681              }
   3682              else
   3683              {
   3684                  /* Identity is not a big secret since clients send it in the clear,
   3685                   * but treat it carefully anyway, just in case */
   3686                  if( n != ssl->conf->psk_identity_len ||
   3687                      mbedtls_ssl_safer_memcmp( ssl->conf->psk_identity, *p, n ) != 0 )
   \                     ??ssl_parse_client_psk_identity_6: (+1)
   \       0xD8   0x6828             LDR      R0,[R5, #+0]
   \       0xDA   0xF8D0 0x00A0      LDR      R0,[R0, #+160]
   \       0xDE   0x4284             CMP      R4,R0
   \       0xE0   0xD108             BNE.N    ??ssl_parse_client_psk_identity_8
   \       0xE2   0x4622             MOV      R2,R4
   \       0xE4   0x6831             LDR      R1,[R6, #+0]
   \       0xE6   0x6828             LDR      R0,[R5, #+0]
   \       0xE8   0xF8D0 0x009C      LDR      R0,[R0, #+156]
   \       0xEC   0x....'....        BL       mbedtls_ssl_safer_memcmp
   \       0xF0   0x2800             CMP      R0,#+0
   \       0xF2   0xD001             BEQ.N    ??ssl_parse_client_psk_identity_7
   3688                  {
   3689                      ret = MBEDTLS_ERR_SSL_UNKNOWN_IDENTITY;
   \                     ??ssl_parse_client_psk_identity_8: (+1)
   \       0xF4   0x....'....        LDR.W    R7,??DataTable38_2  ;; 0xffff9380
   3690                  }
   3691              }
   3692          
   3693              if( ret == MBEDTLS_ERR_SSL_UNKNOWN_IDENTITY )
   \                     ??ssl_parse_client_psk_identity_7: (+1)
   \       0xF8   0x....'....        LDR.W    R8,??DataTable38_2  ;; 0xffff9380
   \       0xFC   0x4547             CMP      R7,R8
   \       0xFE   0xD113             BNE.N    ??ssl_parse_client_psk_identity_9
   3694              {
   3695                  MBEDTLS_SSL_DEBUG_BUF( 3, "Unknown PSK identity", *p, n );
   \      0x100   0x9402             STR      R4,[SP, #+8]
   \      0x102   0x6830             LDR      R0,[R6, #+0]
   \      0x104   0x9001             STR      R0,[SP, #+4]
   \      0x106   0x....'....        LDR.W    R0,??DataTable38_3
   \      0x10A   0x9000             STR      R0,[SP, #+0]
   \      0x10C   0xF640 0x636F      MOVW     R3,#+3695
   \      0x110   0x....             LDR.N    R2,??DataTable34_8
   \      0x112   0x2103             MOVS     R1,#+3
   \      0x114   0x4628             MOV      R0,R5
   \      0x116   0x....'....        BL       mbedtls_debug_print_buf
   3696                  mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   3697                                                  MBEDTLS_SSL_ALERT_MSG_UNKNOWN_PSK_IDENTITY );
   \      0x11A   0x2273             MOVS     R2,#+115
   \      0x11C   0x2102             MOVS     R1,#+2
   \      0x11E   0x4628             MOV      R0,R5
   \      0x120   0x....'....        BL       mbedtls_ssl_send_alert_message
   3698                  return( MBEDTLS_ERR_SSL_UNKNOWN_IDENTITY );
   \      0x124   0x4640             MOV      R0,R8
   \      0x126   0xE003             B.N      ??ssl_parse_client_psk_identity_2
   3699              }
   3700          
   3701              *p += n;
   \                     ??ssl_parse_client_psk_identity_9: (+1)
   \      0x128   0x6830             LDR      R0,[R6, #+0]
   \      0x12A   0x4420             ADD      R0,R0,R4
   \      0x12C   0x6030             STR      R0,[R6, #+0]
   3702          
   3703              return( 0 );
   \      0x12E   0x2000             MOVS     R0,#+0
   \                     ??ssl_parse_client_psk_identity_2: (+1)
   \      0x130   0xB004             ADD      SP,SP,#+16
   \      0x132   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   3704          }
   3705          #endif /* MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED */
   3706          

   \                                 In section .text, align 2, keep-with-next
   3707          static int ssl_parse_client_key_exchange( mbedtls_ssl_context *ssl )
   3708          {
   \                     ssl_parse_client_key_exchange: (+1)
   \        0x0   0xE92D 0x41FF      PUSH     {R0-R8,LR}
   \        0x4   0x4605             MOV      R5,R0
   3709              int ret;
   3710              const mbedtls_ssl_ciphersuite_t *ciphersuite_info;
   3711              unsigned char *p, *end;
   3712          
   3713              ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
   \        0x6   0x6CE8             LDR      R0,[R5, #+76]
   \        0x8   0x6807             LDR      R7,[R0, #+0]
   3714          
   3715              MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse client key exchange" ) );
   \        0xA   0x....'....        LDR.W    R6,??DataTable38_4
   \        0xE   0x....'....        LDR.W    R0,??DataTable38_5
   \       0x12   0x9000             STR      R0,[SP, #+0]
   \       0x14   0xF640 0x6383      MOVW     R3,#+3715
   \       0x18   0x4632             MOV      R2,R6
   \       0x1A   0x2102             MOVS     R1,#+2
   \       0x1C   0x4628             MOV      R0,R5
   \       0x1E   0x....'....        BL       mbedtls_debug_print_msg
   3716          
   3717          #if defined(MBEDTLS_SSL_ASYNC_PRIVATE) && \
   3718              ( defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED) || \
   3719                defined(MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED) )
   3720              if( ( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK ||
   3721                    ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA ) &&
   3722                  ( ssl->handshake->async_in_progress != 0 ) )
   3723              {
   3724                  /* We've already read a record and there is an asynchronous
   3725                   * operation in progress to decrypt it. So skip reading the
   3726                   * record. */
   3727                  MBEDTLS_SSL_DEBUG_MSG( 3, ( "will resume decryption of previously-read record" ) );
   3728              }
   3729              else
   3730          #endif
   3731              if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   \       0x22   0x2101             MOVS     R1,#+1
   \       0x24   0x4628             MOV      R0,R5
   \       0x26   0x....'....        BL       mbedtls_ssl_read_record
   \       0x2A   0x0004             MOVS     R4,R0
   \       0x2C   0xD00C             BEQ.N    ??ssl_parse_client_key_exchange_0
   3732              {
   3733                  MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
   \       0x2E   0x9401             STR      R4,[SP, #+4]
   \       0x30   0x....'....        LDR.W    R0,??DataTable38_6
   \       0x34   0x9000             STR      R0,[SP, #+0]
   \       0x36   0xF640 0x6395      MOVW     R3,#+3733
   \       0x3A   0x4632             MOV      R2,R6
   \       0x3C   0x2101             MOVS     R1,#+1
   \       0x3E   0x4628             MOV      R0,R5
   \       0x40   0x....'....        BL       mbedtls_debug_print_ret
   3734                  return( ret );
   \       0x44   0x4620             MOV      R0,R4
   \       0x46   0xE23A             B.N      ??ssl_parse_client_key_exchange_1
   3735              }
   3736          
   3737              p = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );
   \                     ??ssl_parse_client_key_exchange_0: (+1)
   \       0x48   0x4628             MOV      R0,R5
   \       0x4A   0x....'....        BL       mbedtls_ssl_hs_hdr_len
   \       0x4E   0x6F29             LDR      R1,[R5, #+112]
   \       0x50   0x4408             ADD      R0,R1,R0
   \       0x52   0x9002             STR      R0,[SP, #+8]
   3738              end = ssl->in_msg + ssl->in_hslen;
   \       0x54   0x6F28             LDR      R0,[R5, #+112]
   \       0x56   0xF8D5 0x10A0      LDR      R1,[R5, #+160]
   \       0x5A   0xEB00 0x0801      ADD      R8,R0,R1
   3739          
   3740              if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
   \       0x5E   0x6FA8             LDR      R0,[R5, #+120]
   \       0x60   0x2816             CMP      R0,#+22
   \       0x62   0xD00C             BEQ.N    ??ssl_parse_client_key_exchange_2
   3741              {
   3742                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client key exchange message" ) );
   \       0x64   0x....'....        LDR.W    R0,??DataTable37_1
   \       0x68   0x9000             STR      R0,[SP, #+0]
   \       0x6A   0xF640 0x639E      MOVW     R3,#+3742
   \       0x6E   0x4632             MOV      R2,R6
   \       0x70   0x2101             MOVS     R1,#+1
   \       0x72   0x4628             MOV      R0,R5
   \       0x74   0x....'....        BL       mbedtls_debug_print_msg
   3743                  return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE );
   \       0x78   0x....'....        LDR.W    R0,??DataTable37_2  ;; 0xffff8400
   \       0x7C   0xE21F             B.N      ??ssl_parse_client_key_exchange_1
   3744              }
   3745          
   3746              if( ssl->in_msg[0] != MBEDTLS_SSL_HS_CLIENT_KEY_EXCHANGE )
   \                     ??ssl_parse_client_key_exchange_2: (+1)
   \       0x7E   0x6F28             LDR      R0,[R5, #+112]
   \       0x80   0x7800             LDRB     R0,[R0, #+0]
   \       0x82   0x2810             CMP      R0,#+16
   \       0x84   0xD00C             BEQ.N    ??ssl_parse_client_key_exchange_3
   3747              {
   3748                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client key exchange message" ) );
   \       0x86   0x....'....        LDR.W    R0,??DataTable37_1
   \       0x8A   0x9000             STR      R0,[SP, #+0]
   \       0x8C   0xF640 0x63A4      MOVW     R3,#+3748
   \       0x90   0x4632             MOV      R2,R6
   \       0x92   0x2101             MOVS     R1,#+1
   \       0x94   0x4628             MOV      R0,R5
   \       0x96   0x....'....        BL       mbedtls_debug_print_msg
   3749                  return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE );
   \       0x9A   0x....'....        LDR.W    R0,??DataTable37_2  ;; 0xffff8400
   \       0x9E   0xE20E             B.N      ??ssl_parse_client_key_exchange_1
   3750              }
   3751          
   3752          #if defined(MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED)
   3753              if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_RSA )
   \                     ??ssl_parse_client_key_exchange_3: (+1)
   \       0xA0   0x7AB8             LDRB     R0,[R7, #+10]
   \       0xA2   0x2802             CMP      R0,#+2
   \       0xA4   0xD163             BNE.N    ??ssl_parse_client_key_exchange_4
   3754              {
   3755                  if( ( ret = ssl_parse_client_dh_public( ssl, &p, end ) ) != 0 )
   \       0xA6   0x4642             MOV      R2,R8
   \       0xA8   0xA902             ADD      R1,SP,#+8
   \       0xAA   0x4628             MOV      R0,R5
   \       0xAC   0x....'....        BL       ssl_parse_client_dh_public
   \       0xB0   0x0004             MOVS     R4,R0
   \       0xB2   0xD00C             BEQ.N    ??ssl_parse_client_key_exchange_5
   3756                  {
   3757                      MBEDTLS_SSL_DEBUG_RET( 1, ( "ssl_parse_client_dh_public" ), ret );
   \       0xB4   0x9401             STR      R4,[SP, #+4]
   \       0xB6   0x....'....        LDR.W    R0,??DataTable38_7
   \       0xBA   0x9000             STR      R0,[SP, #+0]
   \       0xBC   0xF640 0x63AD      MOVW     R3,#+3757
   \       0xC0   0x4632             MOV      R2,R6
   \       0xC2   0x2101             MOVS     R1,#+1
   \       0xC4   0x4628             MOV      R0,R5
   \       0xC6   0x....'....        BL       mbedtls_debug_print_ret
   3758                      return( ret );
   \       0xCA   0x4620             MOV      R0,R4
   \       0xCC   0xE1F7             B.N      ??ssl_parse_client_key_exchange_1
   3759                  }
   3760          
   3761                  if( p != end )
   \                     ??ssl_parse_client_key_exchange_5: (+1)
   \       0xCE   0x9802             LDR      R0,[SP, #+8]
   \       0xD0   0x4540             CMP      R0,R8
   \       0xD2   0xD00C             BEQ.N    ??ssl_parse_client_key_exchange_6
   3762                  {
   3763                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client key exchange" ) );
   \       0xD4   0x....'....        LDR.W    R0,??DataTable38_8
   \       0xD8   0x9000             STR      R0,[SP, #+0]
   \       0xDA   0xF640 0x63B3      MOVW     R3,#+3763
   \       0xDE   0x4632             MOV      R2,R6
   \       0xE0   0x2101             MOVS     R1,#+1
   \       0xE2   0x4628             MOV      R0,R5
   \       0xE4   0x....'....        BL       mbedtls_debug_print_msg
   3764                      return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE );
   \       0xE8   0x....'....        LDR.W    R0,??DataTable37_2  ;; 0xffff8400
   \       0xEC   0xE1E7             B.N      ??ssl_parse_client_key_exchange_1
   3765                  }
   3766          
   3767                  if( ( ret = mbedtls_dhm_calc_secret( &ssl->handshake->dhm_ctx,
   3768                                                ssl->handshake->premaster,
   3769                                                MBEDTLS_PREMASTER_SIZE,
   3770                                               &ssl->handshake->pmslen,
   3771                                                ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
   \                     ??ssl_parse_client_key_exchange_6: (+1)
   \       0xEE   0x6828             LDR      R0,[R5, #+0]
   \       0xF0   0x69C0             LDR      R0,[R0, #+28]
   \       0xF2   0x9001             STR      R0,[SP, #+4]
   \       0xF4   0x6828             LDR      R0,[R5, #+0]
   \       0xF6   0x6980             LDR      R0,[R0, #+24]
   \       0xF8   0x9000             STR      R0,[SP, #+0]
   \       0xFA   0x6BE8             LDR      R0,[R5, #+60]
   \       0xFC   0xF500 0x638B      ADD      R3,R0,#+1112
   \      0x100   0xF44F 0x7209      MOV      R2,#+548
   \      0x104   0xF200 0x419C      ADDW     R1,R0,#+1180
   \      0x108   0x1D00             ADDS     R0,R0,#+4
   \      0x10A   0x....'....        BL       mbedtls_dhm_calc_secret
   \      0x10E   0x2800             CMP      R0,#+0
   \      0x110   0xD00D             BEQ.N    ??ssl_parse_client_key_exchange_7
   3772                  {
   3773                      MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_dhm_calc_secret", ret );
   \      0x112   0x9001             STR      R0,[SP, #+4]
   \      0x114   0x....'....        LDR.W    R0,??DataTable38_9
   \      0x118   0x9000             STR      R0,[SP, #+0]
   \      0x11A   0xF640 0x63BD      MOVW     R3,#+3773
   \      0x11E   0x4632             MOV      R2,R6
   \      0x120   0x2101             MOVS     R1,#+1
   \      0x122   0x4628             MOV      R0,R5
   \      0x124   0x....'....        BL       mbedtls_debug_print_ret
   3774                      return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE_CS );
   \      0x128   0x....'....        LDR.W    R0,??DataTable38_10  ;; 0xffff8300
   \      0x12C   0xE1C7             B.N      ??ssl_parse_client_key_exchange_1
   3775                  }
   3776          
   3777                  MBEDTLS_SSL_DEBUG_MPI( 3, "DHM: K ", &ssl->handshake->dhm_ctx.K  );
   \                     ??ssl_parse_client_key_exchange_7: (+1)
   \      0x12E   0x6BE8             LDR      R0,[R5, #+60]
   \      0x130   0x3044             ADDS     R0,R0,#+68
   \      0x132   0x9001             STR      R0,[SP, #+4]
   \      0x134   0x....'....        LDR.W    R0,??DataTable38_11
   \      0x138   0x9000             STR      R0,[SP, #+0]
   \      0x13A   0xF640 0x63C1      MOVW     R3,#+3777
   \      0x13E   0x4632             MOV      R2,R6
   \      0x140   0x2103             MOVS     R1,#+3
   \      0x142   0x4628             MOV      R0,R5
   \      0x144   0x....'....        BL       mbedtls_debug_print_mpi
   3778              }
   3779              else
   3780          #endif /* MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED */
   3781          #if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED) ||                     \
   3782              defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED) ||                   \
   3783              defined(MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED) ||                      \
   3784              defined(MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED)
   3785              if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_RSA ||
   3786                  ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA ||
   3787                  ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDH_RSA ||
   3788                  ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA )
   3789              {
   3790                  if( ( ret = mbedtls_ecdh_read_public( &ssl->handshake->ecdh_ctx,
   3791                                                p, end - p) ) != 0 )
   3792                  {
   3793                      MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ecdh_read_public", ret );
   3794                      return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE_RP );
   3795                  }
   3796          
   3797                  MBEDTLS_SSL_DEBUG_ECP( 3, "ECDH: Qp ", &ssl->handshake->ecdh_ctx.Qp );
   3798          
   3799                  if( ( ret = mbedtls_ecdh_calc_secret( &ssl->handshake->ecdh_ctx,
   3800                                                &ssl->handshake->pmslen,
   3801                                                 ssl->handshake->premaster,
   3802                                                 MBEDTLS_MPI_MAX_SIZE,
   3803                                                 ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
   3804                  {
   3805                      MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ecdh_calc_secret", ret );
   3806                      return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE_CS );
   3807                  }
   3808          
   3809                  MBEDTLS_SSL_DEBUG_MPI( 3, "ECDH: z  ", &ssl->handshake->ecdh_ctx.z );
   3810              }
   3811              else
   3812          #endif /* MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED ||
   3813                    MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED ||
   3814                    MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED ||
   3815                    MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED */
   3816          #if defined(MBEDTLS_KEY_EXCHANGE_PSK_ENABLED)
   3817              if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK )
   3818              {
   3819                  if( ( ret = ssl_parse_client_psk_identity( ssl, &p, end ) ) != 0 )
   3820                  {
   3821                      MBEDTLS_SSL_DEBUG_RET( 1, ( "ssl_parse_client_psk_identity" ), ret );
   3822                      return( ret );
   3823                  }
   3824          
   3825                  if( p != end )
   3826                  {
   3827                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client key exchange" ) );
   3828                      return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE );
   3829                  }
   3830          
   3831                  if( ( ret = mbedtls_ssl_psk_derive_premaster( ssl,
   3832                                  ciphersuite_info->key_exchange ) ) != 0 )
   3833                  {
   3834                      MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_psk_derive_premaster", ret );
   3835                      return( ret );
   3836                  }
   3837              }
   3838              else
   3839          #endif /* MBEDTLS_KEY_EXCHANGE_PSK_ENABLED */
   3840          #if defined(MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED)
   3841              if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK )
   3842              {
   3843          #if defined(MBEDTLS_SSL_ASYNC_PRIVATE)
   3844                  if ( ssl->handshake->async_in_progress != 0 )
   3845                  {
   3846                      /* There is an asynchronous operation in progress to
   3847                       * decrypt the encrypted premaster secret, so skip
   3848                       * directly to resuming this operation. */
   3849                      MBEDTLS_SSL_DEBUG_MSG( 3, ( "PSK identity already parsed" ) );
   3850                      /* Update p to skip the PSK identity. ssl_parse_encrypted_pms
   3851                       * won't actually use it, but maintain p anyway for robustness. */
   3852                      p += ssl->conf->psk_identity_len + 2;
   3853                  }
   3854                  else
   3855          #endif /* MBEDTLS_SSL_ASYNC_PRIVATE */
   3856                  if( ( ret = ssl_parse_client_psk_identity( ssl, &p, end ) ) != 0 )
   3857                  {
   3858                      MBEDTLS_SSL_DEBUG_RET( 1, ( "ssl_parse_client_psk_identity" ), ret );
   3859                      return( ret );
   3860                  }
   3861          
   3862                  if( ( ret = ssl_parse_encrypted_pms( ssl, p, end, 2 ) ) != 0 )
   3863                  {
   3864                      MBEDTLS_SSL_DEBUG_RET( 1, ( "ssl_parse_encrypted_pms" ), ret );
   3865                      return( ret );
   3866                  }
   3867          
   3868                  if( ( ret = mbedtls_ssl_psk_derive_premaster( ssl,
   3869                                  ciphersuite_info->key_exchange ) ) != 0 )
   3870                  {
   3871                      MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_psk_derive_premaster", ret );
   3872                      return( ret );
   3873                  }
   3874              }
   3875              else
   3876          #endif /* MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED */
   3877          #if defined(MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED)
   3878              if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK )
   3879              {
   3880                  if( ( ret = ssl_parse_client_psk_identity( ssl, &p, end ) ) != 0 )
   3881                  {
   3882                      MBEDTLS_SSL_DEBUG_RET( 1, ( "ssl_parse_client_psk_identity" ), ret );
   3883                      return( ret );
   3884                  }
   3885                  if( ( ret = ssl_parse_client_dh_public( ssl, &p, end ) ) != 0 )
   3886                  {
   3887                      MBEDTLS_SSL_DEBUG_RET( 1, ( "ssl_parse_client_dh_public" ), ret );
   3888                      return( ret );
   3889                  }
   3890          
   3891                  if( p != end )
   3892                  {
   3893                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client key exchange" ) );
   3894                      return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE );
   3895                  }
   3896          
   3897                  if( ( ret = mbedtls_ssl_psk_derive_premaster( ssl,
   3898                                  ciphersuite_info->key_exchange ) ) != 0 )
   3899                  {
   3900                      MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_psk_derive_premaster", ret );
   3901                      return( ret );
   3902                  }
   3903              }
   3904              else
   3905          #endif /* MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED */
   3906          #if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED)
   3907              if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK )
   3908              {
   3909                  if( ( ret = ssl_parse_client_psk_identity( ssl, &p, end ) ) != 0 )
   3910                  {
   3911                      MBEDTLS_SSL_DEBUG_RET( 1, ( "ssl_parse_client_psk_identity" ), ret );
   3912                      return( ret );
   3913                  }
   3914          
   3915                  if( ( ret = mbedtls_ecdh_read_public( &ssl->handshake->ecdh_ctx,
   3916                                                 p, end - p ) ) != 0 )
   3917                  {
   3918                      MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ecdh_read_public", ret );
   3919                      return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE_RP );
   3920                  }
   3921          
   3922                  MBEDTLS_SSL_DEBUG_ECP( 3, "ECDH: Qp ", &ssl->handshake->ecdh_ctx.Qp );
   3923          
   3924                  if( ( ret = mbedtls_ssl_psk_derive_premaster( ssl,
   3925                                  ciphersuite_info->key_exchange ) ) != 0 )
   3926                  {
   3927                      MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_psk_derive_premaster", ret );
   3928                      return( ret );
   3929                  }
   3930              }
   3931              else
   3932          #endif /* MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED */
   3933          #if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)
   3934              if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA )
   3935              {
   3936                  if( ( ret = ssl_parse_encrypted_pms( ssl, p, end, 0 ) ) != 0 )
   3937                  {
   3938                      MBEDTLS_SSL_DEBUG_RET( 1, ( "ssl_parse_parse_encrypted_pms_secret" ), ret );
   3939                      return( ret );
   3940                  }
   3941              }
   3942              else
   3943          #endif /* MBEDTLS_KEY_EXCHANGE_RSA_ENABLED */
   3944          #if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
   3945              if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )
   3946              {
   3947                  ret = mbedtls_ecjpake_read_round_two( &ssl->handshake->ecjpake_ctx,
   3948                                                        p, end - p );
   3949                  if( ret != 0 )
   3950                  {
   3951                      MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ecjpake_read_round_two", ret );
   3952                      return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
   3953                  }
   3954          
   3955                  ret = mbedtls_ecjpake_derive_secret( &ssl->handshake->ecjpake_ctx,
   3956                          ssl->handshake->premaster, 32, &ssl->handshake->pmslen,
   3957                          ssl->conf->f_rng, ssl->conf->p_rng );
   3958                  if( ret != 0 )
   3959                  {
   3960                      MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ecjpake_derive_secret", ret );
   3961                      return( ret );
   3962                  }
   3963              }
   3964              else
   3965          #endif /* MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */
   3966              {
   3967                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
   3968                  return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   3969              }
   3970          
   3971              if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
   \                     ??ssl_parse_client_key_exchange_8: (+1)
   \      0x148   0x4628             MOV      R0,R5
   \      0x14A   0x....'....        BL       mbedtls_ssl_derive_keys
   \      0x14E   0x0004             MOVS     R4,R0
   \      0x150   0xF000 0x81A7      BEQ.W    ??ssl_parse_client_key_exchange_9
   3972              {
   3973                  MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_derive_keys", ret );
   \      0x154   0x9401             STR      R4,[SP, #+4]
   \      0x156   0x....'....        LDR.W    R0,??DataTable38_12
   \      0x15A   0x9000             STR      R0,[SP, #+0]
   \      0x15C   0xF640 0x7385      MOVW     R3,#+3973
   \      0x160   0x4632             MOV      R2,R6
   \      0x162   0x2101             MOVS     R1,#+1
   \      0x164   0x4628             MOV      R0,R5
   \      0x166   0x....'....        BL       mbedtls_debug_print_ret
   3974                  return( ret );
   \      0x16A   0x4620             MOV      R0,R4
   \      0x16C   0xE1A7             B.N      ??ssl_parse_client_key_exchange_1
   3975              }
   \                     ??ssl_parse_client_key_exchange_4: (+1)
   \      0x16E   0x2803             CMP      R0,#+3
   \      0x170   0xD005             BEQ.N    ??ssl_parse_client_key_exchange_10
   \      0x172   0x2804             CMP      R0,#+4
   \      0x174   0xD003             BEQ.N    ??ssl_parse_client_key_exchange_10
   \      0x176   0x2809             CMP      R0,#+9
   \      0x178   0xD001             BEQ.N    ??ssl_parse_client_key_exchange_10
   \      0x17A   0x280A             CMP      R0,#+10
   \      0x17C   0xD155             BNE.N    ??ssl_parse_client_key_exchange_11
   \                     ??ssl_parse_client_key_exchange_10: (+1)
   \      0x17E   0x9802             LDR      R0,[SP, #+8]
   \      0x180   0xEBA8 0x0800      SUB      R8,R8,R0
   \      0x184   0x4642             MOV      R2,R8
   \      0x186   0x4601             MOV      R1,R0
   \      0x188   0x6BE8             LDR      R0,[R5, #+60]
   \      0x18A   0x3080             ADDS     R0,R0,#+128
   \      0x18C   0x....'....        BL       mbedtls_ecdh_read_public
   \      0x190   0x2800             CMP      R0,#+0
   \      0x192   0xD00D             BEQ.N    ??ssl_parse_client_key_exchange_12
   \      0x194   0x9001             STR      R0,[SP, #+4]
   \      0x196   0x....'....        LDR.W    R0,??DataTable38_13
   \      0x19A   0x9000             STR      R0,[SP, #+0]
   \      0x19C   0xF640 0x63D1      MOVW     R3,#+3793
   \      0x1A0   0x4632             MOV      R2,R6
   \      0x1A2   0x2101             MOVS     R1,#+1
   \      0x1A4   0x4628             MOV      R0,R5
   \      0x1A6   0x....'....        BL       mbedtls_debug_print_ret
   \      0x1AA   0x....'....        LDR.W    R0,??DataTable37_4  ;; 0xffff8380
   \      0x1AE   0xE186             B.N      ??ssl_parse_client_key_exchange_1
   \                     ??ssl_parse_client_key_exchange_12: (+1)
   \      0x1B0   0x6BE8             LDR      R0,[R5, #+60]
   \      0x1B2   0xF500 0x7096      ADD      R0,R0,#+300
   \      0x1B6   0x9001             STR      R0,[SP, #+4]
   \      0x1B8   0x....'....        LDR.W    R0,??DataTable38_14
   \      0x1BC   0x9000             STR      R0,[SP, #+0]
   \      0x1BE   0xF640 0x63D5      MOVW     R3,#+3797
   \      0x1C2   0x4632             MOV      R2,R6
   \      0x1C4   0x2103             MOVS     R1,#+3
   \      0x1C6   0x4628             MOV      R0,R5
   \      0x1C8   0x....'....        BL       mbedtls_debug_print_ecp
   \      0x1CC   0x6828             LDR      R0,[R5, #+0]
   \      0x1CE   0x69C0             LDR      R0,[R0, #+28]
   \      0x1D0   0x9001             STR      R0,[SP, #+4]
   \      0x1D2   0x6828             LDR      R0,[R5, #+0]
   \      0x1D4   0x6980             LDR      R0,[R0, #+24]
   \      0x1D6   0x9000             STR      R0,[SP, #+0]
   \      0x1D8   0xF44F 0x7300      MOV      R3,#+512
   \      0x1DC   0x6BE8             LDR      R0,[R5, #+60]
   \      0x1DE   0xF200 0x429C      ADDW     R2,R0,#+1180
   \      0x1E2   0xF500 0x618B      ADD      R1,R0,#+1112
   \      0x1E6   0x3080             ADDS     R0,R0,#+128
   \      0x1E8   0x....'....        BL       mbedtls_ecdh_calc_secret
   \      0x1EC   0x2800             CMP      R0,#+0
   \      0x1EE   0xD00D             BEQ.N    ??ssl_parse_client_key_exchange_13
   \      0x1F0   0x9001             STR      R0,[SP, #+4]
   \      0x1F2   0x....'....        LDR.W    R0,??DataTable38_15
   \      0x1F6   0x9000             STR      R0,[SP, #+0]
   \      0x1F8   0xF640 0x63DD      MOVW     R3,#+3805
   \      0x1FC   0x4632             MOV      R2,R6
   \      0x1FE   0x2101             MOVS     R1,#+1
   \      0x200   0x4628             MOV      R0,R5
   \      0x202   0x....'....        BL       mbedtls_debug_print_ret
   \      0x206   0x....'....        LDR.W    R0,??DataTable38_10  ;; 0xffff8300
   \      0x20A   0xE158             B.N      ??ssl_parse_client_key_exchange_1
   \                     ??ssl_parse_client_key_exchange_13: (+1)
   \      0x20C   0x6BE8             LDR      R0,[R5, #+60]
   \      0x20E   0xF500 0x70A8      ADD      R0,R0,#+336
   \      0x212   0x9001             STR      R0,[SP, #+4]
   \      0x214   0x....'....        LDR.W    R0,??DataTable38_16
   \      0x218   0x9000             STR      R0,[SP, #+0]
   \      0x21A   0xF640 0x63E1      MOVW     R3,#+3809
   \      0x21E   0x4632             MOV      R2,R6
   \      0x220   0x2103             MOVS     R1,#+3
   \      0x222   0x4628             MOV      R0,R5
   \      0x224   0x....'....        BL       mbedtls_debug_print_mpi
   \      0x228   0xE78E             B.N      ??ssl_parse_client_key_exchange_8
   \                     ??ssl_parse_client_key_exchange_11: (+1)
   \      0x22A   0x2805             CMP      R0,#+5
   \      0x22C   0xD137             BNE.N    ??ssl_parse_client_key_exchange_14
   \      0x22E   0x4642             MOV      R2,R8
   \      0x230   0xA902             ADD      R1,SP,#+8
   \      0x232   0x4628             MOV      R0,R5
   \      0x234   0x....'....        BL       ssl_parse_client_psk_identity
   \      0x238   0x0004             MOVS     R4,R0
   \      0x23A   0xD00C             BEQ.N    ??ssl_parse_client_key_exchange_15
   \      0x23C   0x9401             STR      R4,[SP, #+4]
   \      0x23E   0x....'....        LDR.W    R0,??DataTable38_17
   \      0x242   0x9000             STR      R0,[SP, #+0]
   \      0x244   0xF640 0x63ED      MOVW     R3,#+3821
   \      0x248   0x4632             MOV      R2,R6
   \      0x24A   0x2101             MOVS     R1,#+1
   \      0x24C   0x4628             MOV      R0,R5
   \      0x24E   0x....'....        BL       mbedtls_debug_print_ret
   \      0x252   0x4620             MOV      R0,R4
   \      0x254   0xE133             B.N      ??ssl_parse_client_key_exchange_1
   \                     ??ssl_parse_client_key_exchange_15: (+1)
   \      0x256   0x9802             LDR      R0,[SP, #+8]
   \      0x258   0x4540             CMP      R0,R8
   \      0x25A   0xD00C             BEQ.N    ??ssl_parse_client_key_exchange_16
   \      0x25C   0x....'....        LDR.W    R0,??DataTable38_8
   \      0x260   0x9000             STR      R0,[SP, #+0]
   \      0x262   0xF640 0x63F3      MOVW     R3,#+3827
   \      0x266   0x4632             MOV      R2,R6
   \      0x268   0x2101             MOVS     R1,#+1
   \      0x26A   0x4628             MOV      R0,R5
   \      0x26C   0x....'....        BL       mbedtls_debug_print_msg
   \      0x270   0x....'....        LDR.W    R0,??DataTable37_2  ;; 0xffff8400
   \      0x274   0xE123             B.N      ??ssl_parse_client_key_exchange_1
   \                     ??ssl_parse_client_key_exchange_16: (+1)
   \      0x276   0x7AB9             LDRB     R1,[R7, #+10]
   \      0x278   0x4628             MOV      R0,R5
   \      0x27A   0x....'....        BL       mbedtls_ssl_psk_derive_premaster
   \      0x27E   0x0004             MOVS     R4,R0
   \      0x280   0xF43F 0xAF62      BEQ.W    ??ssl_parse_client_key_exchange_8
   \      0x284   0x9401             STR      R4,[SP, #+4]
   \      0x286   0x....'....        LDR.W    R0,??DataTable38_18
   \      0x28A   0x9000             STR      R0,[SP, #+0]
   \      0x28C   0xF640 0x63FA      MOVW     R3,#+3834
   \      0x290   0x4632             MOV      R2,R6
   \      0x292   0x2101             MOVS     R1,#+1
   \      0x294   0x4628             MOV      R0,R5
   \      0x296   0x....'....        BL       mbedtls_debug_print_ret
   \      0x29A   0x4620             MOV      R0,R4
   \      0x29C   0xE10F             B.N      ??ssl_parse_client_key_exchange_1
   \                     ??ssl_parse_client_key_exchange_14: (+1)
   \      0x29E   0x2807             CMP      R0,#+7
   \      0x2A0   0xD13C             BNE.N    ??ssl_parse_client_key_exchange_17
   \      0x2A2   0x4642             MOV      R2,R8
   \      0x2A4   0xA902             ADD      R1,SP,#+8
   \      0x2A6   0x4628             MOV      R0,R5
   \      0x2A8   0x....'....        BL       ssl_parse_client_psk_identity
   \      0x2AC   0x0004             MOVS     R4,R0
   \      0x2AE   0xD00C             BEQ.N    ??ssl_parse_client_key_exchange_18
   \      0x2B0   0x9401             STR      R4,[SP, #+4]
   \      0x2B2   0x....'....        LDR.W    R0,??DataTable38_17
   \      0x2B6   0x9000             STR      R0,[SP, #+0]
   \      0x2B8   0xF640 0x7312      MOVW     R3,#+3858
   \      0x2BC   0x4632             MOV      R2,R6
   \      0x2BE   0x2101             MOVS     R1,#+1
   \      0x2C0   0x4628             MOV      R0,R5
   \      0x2C2   0x....'....        BL       mbedtls_debug_print_ret
   \      0x2C6   0x4620             MOV      R0,R4
   \      0x2C8   0xE0F9             B.N      ??ssl_parse_client_key_exchange_1
   \                     ??ssl_parse_client_key_exchange_18: (+1)
   \      0x2CA   0x2302             MOVS     R3,#+2
   \      0x2CC   0x4642             MOV      R2,R8
   \      0x2CE   0x9902             LDR      R1,[SP, #+8]
   \      0x2D0   0x4628             MOV      R0,R5
   \      0x2D2   0x....'....        BL       ssl_parse_encrypted_pms
   \      0x2D6   0x0004             MOVS     R4,R0
   \      0x2D8   0xD00C             BEQ.N    ??ssl_parse_client_key_exchange_19
   \      0x2DA   0x9401             STR      R4,[SP, #+4]
   \      0x2DC   0x....'....        LDR.W    R0,??DataTable38_19
   \      0x2E0   0x9000             STR      R0,[SP, #+0]
   \      0x2E2   0xF640 0x7318      MOVW     R3,#+3864
   \      0x2E6   0x4632             MOV      R2,R6
   \      0x2E8   0x2101             MOVS     R1,#+1
   \      0x2EA   0x4628             MOV      R0,R5
   \      0x2EC   0x....'....        BL       mbedtls_debug_print_ret
   \      0x2F0   0x4620             MOV      R0,R4
   \      0x2F2   0xE0E4             B.N      ??ssl_parse_client_key_exchange_1
   \                     ??ssl_parse_client_key_exchange_19: (+1)
   \      0x2F4   0x7AB9             LDRB     R1,[R7, #+10]
   \      0x2F6   0x4628             MOV      R0,R5
   \      0x2F8   0x....'....        BL       mbedtls_ssl_psk_derive_premaster
   \      0x2FC   0x0004             MOVS     R4,R0
   \      0x2FE   0xF43F 0xAF23      BEQ.W    ??ssl_parse_client_key_exchange_8
   \      0x302   0x9401             STR      R4,[SP, #+4]
   \      0x304   0x....'....        LDR.W    R0,??DataTable38_18
   \      0x308   0x9000             STR      R0,[SP, #+0]
   \      0x30A   0xF640 0x731F      MOVW     R3,#+3871
   \      0x30E   0x4632             MOV      R2,R6
   \      0x310   0x2101             MOVS     R1,#+1
   \      0x312   0x4628             MOV      R0,R5
   \      0x314   0x....'....        BL       mbedtls_debug_print_ret
   \      0x318   0x4620             MOV      R0,R4
   \      0x31A   0xE0D0             B.N      ??ssl_parse_client_key_exchange_1
   \                     ??ssl_parse_client_key_exchange_17: (+1)
   \      0x31C   0x2806             CMP      R0,#+6
   \      0x31E   0xD14B             BNE.N    ??ssl_parse_client_key_exchange_20
   \      0x320   0x4642             MOV      R2,R8
   \      0x322   0xA902             ADD      R1,SP,#+8
   \      0x324   0x4628             MOV      R0,R5
   \      0x326   0x....'....        BL       ssl_parse_client_psk_identity
   \      0x32A   0x0004             MOVS     R4,R0
   \      0x32C   0xD00C             BEQ.N    ??ssl_parse_client_key_exchange_21
   \      0x32E   0x9401             STR      R4,[SP, #+4]
   \      0x330   0x....'....        LDR.W    R0,??DataTable38_17
   \      0x334   0x9000             STR      R0,[SP, #+0]
   \      0x336   0xF640 0x732A      MOVW     R3,#+3882
   \      0x33A   0x4632             MOV      R2,R6
   \      0x33C   0x2101             MOVS     R1,#+1
   \      0x33E   0x4628             MOV      R0,R5
   \      0x340   0x....'....        BL       mbedtls_debug_print_ret
   \      0x344   0x4620             MOV      R0,R4
   \      0x346   0xE0BA             B.N      ??ssl_parse_client_key_exchange_1
   \                     ??ssl_parse_client_key_exchange_21: (+1)
   \      0x348   0x4642             MOV      R2,R8
   \      0x34A   0xA902             ADD      R1,SP,#+8
   \      0x34C   0x4628             MOV      R0,R5
   \      0x34E   0x....'....        BL       ssl_parse_client_dh_public
   \      0x352   0x0004             MOVS     R4,R0
   \      0x354   0xD00C             BEQ.N    ??ssl_parse_client_key_exchange_22
   \      0x356   0x9401             STR      R4,[SP, #+4]
   \      0x358   0x....'....        LDR.W    R0,??DataTable38_7
   \      0x35C   0x9000             STR      R0,[SP, #+0]
   \      0x35E   0xF640 0x732F      MOVW     R3,#+3887
   \      0x362   0x4632             MOV      R2,R6
   \      0x364   0x2101             MOVS     R1,#+1
   \      0x366   0x4628             MOV      R0,R5
   \      0x368   0x....'....        BL       mbedtls_debug_print_ret
   \      0x36C   0x4620             MOV      R0,R4
   \      0x36E   0xE0A6             B.N      ??ssl_parse_client_key_exchange_1
   \                     ??ssl_parse_client_key_exchange_22: (+1)
   \      0x370   0x9802             LDR      R0,[SP, #+8]
   \      0x372   0x4540             CMP      R0,R8
   \      0x374   0xD00C             BEQ.N    ??ssl_parse_client_key_exchange_23
   \      0x376   0x....'....        LDR.W    R0,??DataTable38_8
   \      0x37A   0x9000             STR      R0,[SP, #+0]
   \      0x37C   0xF640 0x7335      MOVW     R3,#+3893
   \      0x380   0x4632             MOV      R2,R6
   \      0x382   0x2101             MOVS     R1,#+1
   \      0x384   0x4628             MOV      R0,R5
   \      0x386   0x....'....        BL       mbedtls_debug_print_msg
   \      0x38A   0x....'....        LDR.W    R0,??DataTable37_2  ;; 0xffff8400
   \      0x38E   0xE096             B.N      ??ssl_parse_client_key_exchange_1
   \                     ??ssl_parse_client_key_exchange_23: (+1)
   \      0x390   0x7AB9             LDRB     R1,[R7, #+10]
   \      0x392   0x4628             MOV      R0,R5
   \      0x394   0x....'....        BL       mbedtls_ssl_psk_derive_premaster
   \      0x398   0x0004             MOVS     R4,R0
   \      0x39A   0xF43F 0xAED5      BEQ.W    ??ssl_parse_client_key_exchange_8
   \      0x39E   0x9401             STR      R4,[SP, #+4]
   \      0x3A0   0x....'....        LDR.W    R0,??DataTable38_18
   \      0x3A4   0x9000             STR      R0,[SP, #+0]
   \      0x3A6   0xF640 0x733C      MOVW     R3,#+3900
   \      0x3AA   0x4632             MOV      R2,R6
   \      0x3AC   0x2101             MOVS     R1,#+1
   \      0x3AE   0x4628             MOV      R0,R5
   \      0x3B0   0x....'....        BL       mbedtls_debug_print_ret
   \      0x3B4   0x4620             MOV      R0,R4
   \      0x3B6   0xE082             B.N      ??ssl_parse_client_key_exchange_1
   \                     ??ssl_parse_client_key_exchange_20: (+1)
   \      0x3B8   0x2808             CMP      R0,#+8
   \      0x3BA   0xD14E             BNE.N    ??ssl_parse_client_key_exchange_24
   \      0x3BC   0x4642             MOV      R2,R8
   \      0x3BE   0xA902             ADD      R1,SP,#+8
   \      0x3C0   0x4628             MOV      R0,R5
   \      0x3C2   0x....'....        BL       ssl_parse_client_psk_identity
   \      0x3C6   0x0004             MOVS     R4,R0
   \      0x3C8   0xD00C             BEQ.N    ??ssl_parse_client_key_exchange_25
   \      0x3CA   0x9401             STR      R4,[SP, #+4]
   \      0x3CC   0x....'....        LDR.W    R0,??DataTable38_17
   \      0x3D0   0x9000             STR      R0,[SP, #+0]
   \      0x3D2   0xF640 0x7347      MOVW     R3,#+3911
   \      0x3D6   0x4632             MOV      R2,R6
   \      0x3D8   0x2101             MOVS     R1,#+1
   \      0x3DA   0x4628             MOV      R0,R5
   \      0x3DC   0x....'....        BL       mbedtls_debug_print_ret
   \      0x3E0   0x4620             MOV      R0,R4
   \      0x3E2   0xE06C             B.N      ??ssl_parse_client_key_exchange_1
   \                     ??ssl_parse_client_key_exchange_25: (+1)
   \      0x3E4   0x9802             LDR      R0,[SP, #+8]
   \      0x3E6   0xEBA8 0x0800      SUB      R8,R8,R0
   \      0x3EA   0x4642             MOV      R2,R8
   \      0x3EC   0x4601             MOV      R1,R0
   \      0x3EE   0x6BE8             LDR      R0,[R5, #+60]
   \      0x3F0   0x3080             ADDS     R0,R0,#+128
   \      0x3F2   0x....'....        BL       mbedtls_ecdh_read_public
   \      0x3F6   0x2800             CMP      R0,#+0
   \      0x3F8   0xD00D             BEQ.N    ??ssl_parse_client_key_exchange_26
   \      0x3FA   0x9001             STR      R0,[SP, #+4]
   \      0x3FC   0x....'....        LDR.W    R0,??DataTable38_13
   \      0x400   0x9000             STR      R0,[SP, #+0]
   \      0x402   0xF640 0x734E      MOVW     R3,#+3918
   \      0x406   0x4632             MOV      R2,R6
   \      0x408   0x2101             MOVS     R1,#+1
   \      0x40A   0x4628             MOV      R0,R5
   \      0x40C   0x....'....        BL       mbedtls_debug_print_ret
   \      0x410   0x....'....        LDR.W    R0,??DataTable37_4  ;; 0xffff8380
   \      0x414   0xE053             B.N      ??ssl_parse_client_key_exchange_1
   \                     ??ssl_parse_client_key_exchange_26: (+1)
   \      0x416   0x6BE8             LDR      R0,[R5, #+60]
   \      0x418   0xF500 0x7096      ADD      R0,R0,#+300
   \      0x41C   0x9001             STR      R0,[SP, #+4]
   \      0x41E   0x....'....        LDR.W    R0,??DataTable38_14
   \      0x422   0x9000             STR      R0,[SP, #+0]
   \      0x424   0xF640 0x7352      MOVW     R3,#+3922
   \      0x428   0x4632             MOV      R2,R6
   \      0x42A   0x2103             MOVS     R1,#+3
   \      0x42C   0x4628             MOV      R0,R5
   \      0x42E   0x....'....        BL       mbedtls_debug_print_ecp
   \      0x432   0x7AB9             LDRB     R1,[R7, #+10]
   \      0x434   0x4628             MOV      R0,R5
   \      0x436   0x....'....        BL       mbedtls_ssl_psk_derive_premaster
   \      0x43A   0x0004             MOVS     R4,R0
   \      0x43C   0xF43F 0xAE84      BEQ.W    ??ssl_parse_client_key_exchange_8
   \      0x440   0x9401             STR      R4,[SP, #+4]
   \      0x442   0x....'....        LDR.W    R0,??DataTable38_18
   \      0x446   0x9000             STR      R0,[SP, #+0]
   \      0x448   0xF640 0x7357      MOVW     R3,#+3927
   \      0x44C   0x4632             MOV      R2,R6
   \      0x44E   0x2101             MOVS     R1,#+1
   \      0x450   0x4628             MOV      R0,R5
   \      0x452   0x....'....        BL       mbedtls_debug_print_ret
   \      0x456   0x4620             MOV      R0,R4
   \      0x458   0xE031             B.N      ??ssl_parse_client_key_exchange_1
   \                     ??ssl_parse_client_key_exchange_24: (+1)
   \      0x45A   0x2801             CMP      R0,#+1
   \      0x45C   0xD115             BNE.N    ??ssl_parse_client_key_exchange_27
   \      0x45E   0x2300             MOVS     R3,#+0
   \      0x460   0x4642             MOV      R2,R8
   \      0x462   0x9902             LDR      R1,[SP, #+8]
   \      0x464   0x4628             MOV      R0,R5
   \      0x466   0x....'....        BL       ssl_parse_encrypted_pms
   \      0x46A   0x0004             MOVS     R4,R0
   \      0x46C   0xF43F 0xAE6C      BEQ.W    ??ssl_parse_client_key_exchange_8
   \      0x470   0x9401             STR      R4,[SP, #+4]
   \      0x472   0x....'....        LDR.W    R0,??DataTable38_20
   \      0x476   0x9000             STR      R0,[SP, #+0]
   \      0x478   0xF640 0x7362      MOVW     R3,#+3938
   \      0x47C   0x4632             MOV      R2,R6
   \      0x47E   0x2101             MOVS     R1,#+1
   \      0x480   0x4628             MOV      R0,R5
   \      0x482   0x....'....        BL       mbedtls_debug_print_ret
   \      0x486   0x4620             MOV      R0,R4
   \      0x488   0xE019             B.N      ??ssl_parse_client_key_exchange_1
   \                     ??ssl_parse_client_key_exchange_27: (+1)
   \      0x48A   0x....             LDR.N    R0,??DataTable35
   \      0x48C   0x9000             STR      R0,[SP, #+0]
   \      0x48E   0xF640 0x737F      MOVW     R3,#+3967
   \      0x492   0x4632             MOV      R2,R6
   \      0x494   0x2101             MOVS     R1,#+1
   \      0x496   0x4628             MOV      R0,R5
   \      0x498   0x....'....        BL       mbedtls_debug_print_msg
   \      0x49C   0x....'....        LDR.W    R0,??DataTable38  ;; 0xffff9400
   \      0x4A0   0xE00D             B.N      ??ssl_parse_client_key_exchange_1
   3976          
   3977              ssl->state++;
   \                     ??ssl_parse_client_key_exchange_9: (+1)
   \      0x4A2   0x6868             LDR      R0,[R5, #+4]
   \      0x4A4   0x1C40             ADDS     R0,R0,#+1
   \      0x4A6   0x6068             STR      R0,[R5, #+4]
   3978          
   3979              MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse client key exchange" ) );
   \      0x4A8   0x....'....        LDR.W    R0,??DataTable38_21
   \      0x4AC   0x9000             STR      R0,[SP, #+0]
   \      0x4AE   0xF640 0x738B      MOVW     R3,#+3979
   \      0x4B2   0x4632             MOV      R2,R6
   \      0x4B4   0x2102             MOVS     R1,#+2
   \      0x4B6   0x4628             MOV      R0,R5
   \      0x4B8   0x....'....        BL       mbedtls_debug_print_msg
   3980          
   3981              return( 0 );
   \      0x4BC   0x2000             MOVS     R0,#+0
   \                     ??ssl_parse_client_key_exchange_1: (+1)
   \      0x4BE   0xB004             ADD      SP,SP,#+16
   \      0x4C0   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   3982          }
   3983          
   3984          #if !defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)       && \
   3985              !defined(MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED)   && \
   3986              !defined(MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED)  && \
   3987              !defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED) && \
   3988              !defined(MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED)&& \
   3989              !defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED)
   3990          static int ssl_parse_certificate_verify( mbedtls_ssl_context *ssl )
   3991          {
   3992              const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
   3993                  ssl->transform_negotiate->ciphersuite_info;
   3994          
   3995              MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate verify" ) );
   3996          
   3997              if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
   3998                  ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK ||
   3999                  ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
   4000                  ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
   4001                  ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )
   4002              {
   4003                  MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse certificate verify" ) );
   4004                  ssl->state++;
   4005                  return( 0 );
   4006              }
   4007          
   4008              MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
   4009              return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   4010          }
   4011          #else

   \                                 In section .text, align 2, keep-with-next
   4012          static int ssl_parse_certificate_verify( mbedtls_ssl_context *ssl )
   4013          {
   \                     ssl_parse_certificate_verify: (+1)
   \        0x0   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \        0x4   0xB08E             SUB      SP,SP,#+56
   \        0x6   0x4605             MOV      R5,R0
   4014              int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
   4015              size_t i, sig_len;
   4016              unsigned char hash[48];
   4017              unsigned char *hash_start = hash;
   \        0x8   0xAF02             ADD      R7,SP,#+8
   4018              size_t hashlen;
   4019          #if defined(MBEDTLS_SSL_PROTO_TLS1_2)
   4020              mbedtls_pk_type_t pk_alg;
   4021          #endif
   4022              mbedtls_md_type_t md_alg;
   4023              const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
   4024                  ssl->transform_negotiate->ciphersuite_info;
   \        0xA   0x6CE8             LDR      R0,[R5, #+76]
   \        0xC   0x6804             LDR      R4,[R0, #+0]
   4025          
   4026              MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate verify" ) );
   \        0xE   0x....'....        LDR.W    R6,??DataTable38_4
   \       0x12   0x....'....        LDR.W    R0,??DataTable38_22
   \       0x16   0x9000             STR      R0,[SP, #+0]
   \       0x18   0xF640 0x73BA      MOVW     R3,#+4026
   \       0x1C   0x4632             MOV      R2,R6
   \       0x1E   0x2102             MOVS     R1,#+2
   \       0x20   0x4628             MOV      R0,R5
   \       0x22   0x....'....        BL       mbedtls_debug_print_msg
   4027          
   4028              if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
   4029                  ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK ||
   4030                  ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
   4031                  ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
   4032                  ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE ||
   4033                  ssl->session_negotiate->peer_cert == NULL )
   \       0x26   0x7AA0             LDRB     R0,[R4, #+10]
   \       0x28   0x2805             CMP      R0,#+5
   \       0x2A   0xD00B             BEQ.N    ??ssl_parse_certificate_verify_0
   \       0x2C   0x2807             CMP      R0,#+7
   \       0x2E   0xD009             BEQ.N    ??ssl_parse_certificate_verify_0
   \       0x30   0x2808             CMP      R0,#+8
   \       0x32   0xD007             BEQ.N    ??ssl_parse_certificate_verify_0
   \       0x34   0x2806             CMP      R0,#+6
   \       0x36   0xD005             BEQ.N    ??ssl_parse_certificate_verify_0
   \       0x38   0x280B             CMP      R0,#+11
   \       0x3A   0xD003             BEQ.N    ??ssl_parse_certificate_verify_0
   \       0x3C   0x6BA8             LDR      R0,[R5, #+56]
   \       0x3E   0x6DC0             LDR      R0,[R0, #+92]
   \       0x40   0x2800             CMP      R0,#+0
   \       0x42   0xD10E             BNE.N    ??ssl_parse_certificate_verify_1
   4034              {
   4035                  MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse certificate verify" ) );
   \                     ??ssl_parse_certificate_verify_0: (+1)
   \       0x44   0x....'....        LDR.W    R0,??DataTable38_23
   \       0x48   0x9000             STR      R0,[SP, #+0]
   \       0x4A   0xF640 0x73C3      MOVW     R3,#+4035
   \       0x4E   0x4632             MOV      R2,R6
   \       0x50   0x2102             MOVS     R1,#+2
   \       0x52   0x4628             MOV      R0,R5
   \       0x54   0x....'....        BL       mbedtls_debug_print_msg
   4036                  ssl->state++;
   \       0x58   0x6868             LDR      R0,[R5, #+4]
   \       0x5A   0x1C40             ADDS     R0,R0,#+1
   \       0x5C   0x6068             STR      R0,[R5, #+4]
   4037                  return( 0 );
   \       0x5E   0x2000             MOVS     R0,#+0
   \       0x60   0xE105             B.N      ??ssl_parse_certificate_verify_2
   4038              }
   4039          
   4040              /* Read the message without adding it to the checksum */
   4041              ret = mbedtls_ssl_read_record( ssl, 0 /* no checksum update */ );
   \                     ??ssl_parse_certificate_verify_1: (+1)
   \       0x62   0x2100             MOVS     R1,#+0
   \       0x64   0x4628             MOV      R0,R5
   \       0x66   0x....'....        BL       mbedtls_ssl_read_record
   \       0x6A   0x0004             MOVS     R4,R0
   4042              if( 0 != ret )
   \       0x6C   0xD00C             BEQ.N    ??ssl_parse_certificate_verify_3
   4043              {
   4044                  MBEDTLS_SSL_DEBUG_RET( 1, ( "mbedtls_ssl_read_record" ), ret );
   \       0x6E   0x9401             STR      R4,[SP, #+4]
   \       0x70   0x....'....        LDR.W    R0,??DataTable38_6
   \       0x74   0x9000             STR      R0,[SP, #+0]
   \       0x76   0xF640 0x73CC      MOVW     R3,#+4044
   \       0x7A   0x4632             MOV      R2,R6
   \       0x7C   0x2101             MOVS     R1,#+1
   \       0x7E   0x4628             MOV      R0,R5
   \       0x80   0x....'....        BL       mbedtls_debug_print_ret
   4045                  return( ret );
   \       0x84   0x4620             MOV      R0,R4
   \       0x86   0xE0F2             B.N      ??ssl_parse_certificate_verify_2
   4046              }
   4047          
   4048              ssl->state++;
   \                     ??ssl_parse_certificate_verify_3: (+1)
   \       0x88   0x6868             LDR      R0,[R5, #+4]
   \       0x8A   0x1C40             ADDS     R0,R0,#+1
   \       0x8C   0x6068             STR      R0,[R5, #+4]
   4049          
   4050              /* Process the message contents */
   4051              if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE ||
   4052                  ssl->in_msg[0] != MBEDTLS_SSL_HS_CERTIFICATE_VERIFY )
   \       0x8E   0x6FA8             LDR      R0,[R5, #+120]
   \       0x90   0x2816             CMP      R0,#+22
   \       0x92   0xD103             BNE.N    ??ssl_parse_certificate_verify_4
   \       0x94   0x6F28             LDR      R0,[R5, #+112]
   \       0x96   0x7800             LDRB     R0,[R0, #+0]
   \       0x98   0x280F             CMP      R0,#+15
   \       0x9A   0xD00C             BEQ.N    ??ssl_parse_certificate_verify_5
   4053              {
   4054                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate verify message" ) );
   \                     ??ssl_parse_certificate_verify_4: (+1)
   \       0x9C   0x....'....        LDR.W    R0,??DataTable38_24
   \       0xA0   0x9000             STR      R0,[SP, #+0]
   \       0xA2   0xF640 0x73D6      MOVW     R3,#+4054
   \       0xA6   0x4632             MOV      R2,R6
   \       0xA8   0x2101             MOVS     R1,#+1
   \       0xAA   0x4628             MOV      R0,R5
   \       0xAC   0x....'....        BL       mbedtls_debug_print_msg
   4055                  return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_VERIFY );
   \       0xB0   0x....'....        LDR.W    R0,??DataTable38_25  ;; 0xffff8280
   \       0xB4   0xE0DB             B.N      ??ssl_parse_certificate_verify_2
   4056              }
   4057          
   4058              i = mbedtls_ssl_hs_hdr_len( ssl );
   \                     ??ssl_parse_certificate_verify_5: (+1)
   \       0xB6   0x4628             MOV      R0,R5
   \       0xB8   0x....'....        BL       mbedtls_ssl_hs_hdr_len
   \       0xBC   0x4604             MOV      R4,R0
   4059          
   4060              /*
   4061               *  struct {
   4062               *     SignatureAndHashAlgorithm algorithm; -- TLS 1.2 only
   4063               *     opaque signature<0..2^16-1>;
   4064               *  } DigitallySigned;
   4065               */
   4066          #if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1) || \
   4067              defined(MBEDTLS_SSL_PROTO_TLS1_1)
   4068              if( ssl->minor_ver != MBEDTLS_SSL_MINOR_VERSION_3 )
   \       0xBE   0x6968             LDR      R0,[R5, #+20]
   \       0xC0   0x2803             CMP      R0,#+3
   \       0xC2   0xD022             BEQ.N    ??ssl_parse_certificate_verify_6
   4069              {
   4070                  md_alg = MBEDTLS_MD_NONE;
   \       0xC4   0xF04F 0x0800      MOV      R8,#+0
   4071                  hashlen = 36;
   \       0xC8   0xF04F 0x0924      MOV      R9,#+36
   4072          
   4073                  /* For ECDSA, use SHA-1, not MD-5 + SHA-1 */
   4074                  if( mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk,
   4075                                  MBEDTLS_PK_ECDSA ) )
   \       0xCC   0x2104             MOVS     R1,#+4
   \       0xCE   0x6BA8             LDR      R0,[R5, #+56]
   \       0xD0   0x6DC0             LDR      R0,[R0, #+92]
   \       0xD2   0x30BC             ADDS     R0,R0,#+188
   \       0xD4   0x....'....        BL       mbedtls_pk_can_do
   \       0xD8   0x2800             CMP      R0,#+0
   \       0xDA   0xD004             BEQ.N    ??ssl_parse_certificate_verify_7
   4076                  {
   4077                      hash_start += 16;
   \       0xDC   0x3710             ADDS     R7,R7,#+16
   4078                      hashlen -= 16;
   \       0xDE   0xF04F 0x0914      MOV      R9,#+20
   4079                      md_alg = MBEDTLS_MD_SHA1;
   \       0xE2   0xF04F 0x0804      MOV      R8,#+4
   4080                  }
   4081              }
   4082              else
   4083          #endif /* MBEDTLS_SSL_PROTO_SSL3 || MBEDTLS_SSL_PROTO_TLS1 ||
   4084                    MBEDTLS_SSL_PROTO_TLS1_1 */
   4085          #if defined(MBEDTLS_SSL_PROTO_TLS1_2)
   4086              if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
   4087              {
   4088                  if( i + 2 > ssl->in_hslen )
   4089                  {
   4090                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate verify message" ) );
   4091                      return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_VERIFY );
   4092                  }
   4093          
   4094                  /*
   4095                   * Hash
   4096                   */
   4097                  md_alg = mbedtls_ssl_md_alg_from_hash( ssl->in_msg[i] );
   4098          
   4099                  if( md_alg == MBEDTLS_MD_NONE || mbedtls_ssl_set_calc_verify_md( ssl, ssl->in_msg[i] ) )
   4100                  {
   4101                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "peer not adhering to requested sig_alg"
   4102                                          " for verify message" ) );
   4103                      return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_VERIFY );
   4104                  }
   4105          
   4106          #if !defined(MBEDTLS_MD_SHA1)
   4107                  if( MBEDTLS_MD_SHA1 == md_alg )
   4108                      hash_start += 16;
   4109          #endif
   4110          
   4111                  /* Info from md_alg will be used instead */
   4112                  hashlen = 0;
   4113          
   4114                  i++;
   4115          
   4116                  /*
   4117                   * Signature
   4118                   */
   4119                  if( ( pk_alg = mbedtls_ssl_pk_alg_from_sig( ssl->in_msg[i] ) )
   4120                                  == MBEDTLS_PK_NONE )
   4121                  {
   4122                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "peer not adhering to requested sig_alg"
   4123                                          " for verify message" ) );
   4124                      return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_VERIFY );
   4125                  }
   4126          
   4127                  /*
   4128                   * Check the certificate's key type matches the signature alg
   4129                   */
   4130                  if( ! mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk, pk_alg ) )
   4131                  {
   4132                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "sig_alg doesn't match cert key" ) );
   4133                      return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_VERIFY );
   4134                  }
   4135          
   4136                  i++;
   4137              }
   4138              else
   4139          #endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
   4140              {
   4141                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
   4142                  return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   4143              }
   4144          
   4145              if( i + 2 > ssl->in_hslen )
   \                     ??ssl_parse_certificate_verify_7: (+1)
   \       0xE6   0xF8D5 0x00A0      LDR      R0,[R5, #+160]
   \       0xEA   0x1CA1             ADDS     R1,R4,#+2
   \       0xEC   0x4288             CMP      R0,R1
   \       0xEE   0xD276             BCS.N    ??ssl_parse_certificate_verify_8
   4146              {
   4147                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate verify message" ) );
   \       0xF0   0x....'....        LDR.W    R0,??DataTable38_24
   \       0xF4   0x9000             STR      R0,[SP, #+0]
   \       0xF6   0xF241 0x0333      MOVW     R3,#+4147
   \       0xFA   0x4632             MOV      R2,R6
   \       0xFC   0x2101             MOVS     R1,#+1
   \       0xFE   0x4628             MOV      R0,R5
   \      0x100   0x....'....        BL       mbedtls_debug_print_msg
   4148                  return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_VERIFY );
   \      0x104   0x....'....        LDR.W    R0,??DataTable38_25  ;; 0xffff8280
   \      0x108   0xE0B1             B.N      ??ssl_parse_certificate_verify_2
   4149              }
   \                     ??ssl_parse_certificate_verify_6: (+1)
   \      0x10A   0xD15C             BNE.N    ??ssl_parse_certificate_verify_9
   \      0x10C   0xF8D5 0x00A0      LDR      R0,[R5, #+160]
   \      0x110   0x1CA1             ADDS     R1,R4,#+2
   \      0x112   0x4288             CMP      R0,R1
   \      0x114   0xD20C             BCS.N    ??ssl_parse_certificate_verify_10
   \      0x116   0x....'....        LDR.W    R0,??DataTable38_24
   \      0x11A   0x9000             STR      R0,[SP, #+0]
   \      0x11C   0xF640 0x73FA      MOVW     R3,#+4090
   \      0x120   0x4632             MOV      R2,R6
   \      0x122   0x2101             MOVS     R1,#+1
   \      0x124   0x4628             MOV      R0,R5
   \      0x126   0x....'....        BL       mbedtls_debug_print_msg
   \      0x12A   0x....'....        LDR.W    R0,??DataTable38_25  ;; 0xffff8280
   \      0x12E   0xE09E             B.N      ??ssl_parse_certificate_verify_2
   \                     ??ssl_parse_certificate_verify_10: (+1)
   \      0x130   0x6F28             LDR      R0,[R5, #+112]
   \      0x132   0x5D00             LDRB     R0,[R0, R4]
   \      0x134   0x....'....        BL       mbedtls_ssl_md_alg_from_hash
   \      0x138   0x4680             MOV      R8,R0
   \      0x13A   0x2800             CMP      R0,#+0
   \      0x13C   0xD006             BEQ.N    ??ssl_parse_certificate_verify_11
   \      0x13E   0x6F28             LDR      R0,[R5, #+112]
   \      0x140   0x5D01             LDRB     R1,[R0, R4]
   \      0x142   0x4628             MOV      R0,R5
   \      0x144   0x....'....        BL       mbedtls_ssl_set_calc_verify_md
   \      0x148   0x2800             CMP      R0,#+0
   \      0x14A   0xD00C             BEQ.N    ??ssl_parse_certificate_verify_12
   \                     ??ssl_parse_certificate_verify_11: (+1)
   \      0x14C   0x....'....        LDR.W    R0,??DataTable38_26
   \      0x150   0x9000             STR      R0,[SP, #+0]
   \      0x152   0xF241 0x0306      MOVW     R3,#+4102
   \      0x156   0x4632             MOV      R2,R6
   \      0x158   0x2101             MOVS     R1,#+1
   \      0x15A   0x4628             MOV      R0,R5
   \      0x15C   0x....'....        BL       mbedtls_debug_print_msg
   \      0x160   0x....'....        LDR.W    R0,??DataTable38_25  ;; 0xffff8280
   \      0x164   0xE083             B.N      ??ssl_parse_certificate_verify_2
   \                     ??ssl_parse_certificate_verify_12: (+1)
   \      0x166   0x4640             MOV      R0,R8
   \      0x168   0x2804             CMP      R0,#+4
   \      0x16A   0xD100             BNE.N    ??ssl_parse_certificate_verify_13
   \      0x16C   0x3710             ADDS     R7,R7,#+16
   \                     ??ssl_parse_certificate_verify_13: (+1)
   \      0x16E   0xF04F 0x0900      MOV      R9,#+0
   \      0x172   0x1C64             ADDS     R4,R4,#+1
   \      0x174   0x6F28             LDR      R0,[R5, #+112]
   \      0x176   0x5D00             LDRB     R0,[R0, R4]
   \      0x178   0x....'....        BL       mbedtls_ssl_pk_alg_from_sig
   \      0x17C   0x0001             MOVS     R1,R0
   \      0x17E   0xD10C             BNE.N    ??ssl_parse_certificate_verify_14
   \      0x180   0x....'....        LDR.W    R0,??DataTable38_26
   \      0x184   0x9000             STR      R0,[SP, #+0]
   \      0x186   0xF241 0x031B      MOVW     R3,#+4123
   \      0x18A   0x4632             MOV      R2,R6
   \      0x18C   0x2101             MOVS     R1,#+1
   \      0x18E   0x4628             MOV      R0,R5
   \      0x190   0x....'....        BL       mbedtls_debug_print_msg
   \      0x194   0x....'....        LDR.W    R0,??DataTable38_25  ;; 0xffff8280
   \      0x198   0xE069             B.N      ??ssl_parse_certificate_verify_2
   \                     ??ssl_parse_certificate_verify_14: (+1)
   \      0x19A   0x6BA8             LDR      R0,[R5, #+56]
   \      0x19C   0x6DC0             LDR      R0,[R0, #+92]
   \      0x19E   0x30BC             ADDS     R0,R0,#+188
   \      0x1A0   0x....'....        BL       mbedtls_pk_can_do
   \      0x1A4   0x2800             CMP      R0,#+0
   \      0x1A6   0xD10C             BNE.N    ??ssl_parse_certificate_verify_15
   \      0x1A8   0x....'....        LDR.W    R0,??DataTable38_27
   \      0x1AC   0x9000             STR      R0,[SP, #+0]
   \      0x1AE   0xF241 0x0324      MOVW     R3,#+4132
   \      0x1B2   0x4632             MOV      R2,R6
   \      0x1B4   0x2101             MOVS     R1,#+1
   \      0x1B6   0x4628             MOV      R0,R5
   \      0x1B8   0x....'....        BL       mbedtls_debug_print_msg
   \      0x1BC   0x....'....        LDR.W    R0,??DataTable38_25  ;; 0xffff8280
   \      0x1C0   0xE055             B.N      ??ssl_parse_certificate_verify_2
   \                     ??ssl_parse_certificate_verify_15: (+1)
   \      0x1C2   0x1C64             ADDS     R4,R4,#+1
   \      0x1C4   0xE78F             B.N      ??ssl_parse_certificate_verify_7
   \                     ??ssl_parse_certificate_verify_9: (+1)
   \      0x1C6   0x....'....        LDR.W    R0,??DataTable38_28
   \      0x1CA   0x9000             STR      R0,[SP, #+0]
   \      0x1CC   0xF241 0x032D      MOVW     R3,#+4141
   \      0x1D0   0x4632             MOV      R2,R6
   \      0x1D2   0x2101             MOVS     R1,#+1
   \      0x1D4   0x4628             MOV      R0,R5
   \      0x1D6   0x....'....        BL       mbedtls_debug_print_msg
   \      0x1DA   0x....             LDR.N    R0,??DataTable38  ;; 0xffff9400
   \      0x1DC   0xE047             B.N      ??ssl_parse_certificate_verify_2
   4150          
   4151              sig_len = ( ssl->in_msg[i] << 8 ) | ssl->in_msg[i+1];
   \                     ??ssl_parse_certificate_verify_8: (+1)
   \      0x1DE   0x6F28             LDR      R0,[R5, #+112]
   \      0x1E0   0x5D00             LDRB     R0,[R0, R4]
   \      0x1E2   0x6F29             LDR      R1,[R5, #+112]
   \      0x1E4   0x4421             ADD      R1,R1,R4
   \      0x1E6   0xF891 0xA001      LDRB     R10,[R1, #+1]
   \      0x1EA   0xEA4A 0x2A00      ORR      R10,R10,R0, LSL #+8
   4152              i += 2;
   \      0x1EE   0x1CA4             ADDS     R4,R4,#+2
   4153          
   4154              if( i + sig_len != ssl->in_hslen )
   \      0x1F0   0xEB0A 0x0004      ADD      R0,R10,R4
   \      0x1F4   0xF8D5 0x10A0      LDR      R1,[R5, #+160]
   \      0x1F8   0x4288             CMP      R0,R1
   \      0x1FA   0xD00A             BEQ.N    ??ssl_parse_certificate_verify_16
   4155              {
   4156                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate verify message" ) );
   \      0x1FC   0x....             LDR.N    R0,??DataTable38_24
   \      0x1FE   0x9000             STR      R0,[SP, #+0]
   \      0x200   0xF241 0x033C      MOVW     R3,#+4156
   \      0x204   0x4632             MOV      R2,R6
   \      0x206   0x2101             MOVS     R1,#+1
   \      0x208   0x4628             MOV      R0,R5
   \      0x20A   0x....'....        BL       mbedtls_debug_print_msg
   4157                  return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_VERIFY );
   \      0x20E   0x....             LDR.N    R0,??DataTable38_25  ;; 0xffff8280
   \      0x210   0xE02D             B.N      ??ssl_parse_certificate_verify_2
   4158              }
   4159          
   4160              /* Calculate hash and verify signature */
   4161              ssl->handshake->calc_verify( ssl, hash );
   \                     ??ssl_parse_certificate_verify_16: (+1)
   \      0x212   0xA902             ADD      R1,SP,#+8
   \      0x214   0x4628             MOV      R0,R5
   \      0x216   0x6BEA             LDR      R2,[R5, #+60]
   \      0x218   0xF8D2 0x244C      LDR      R2,[R2, #+1100]
   \      0x21C   0x4790             BLX      R2
   4162          
   4163              if( ( ret = mbedtls_pk_verify( &ssl->session_negotiate->peer_cert->pk,
   4164                                     md_alg, hash_start, hashlen,
   4165                                     ssl->in_msg + i, sig_len ) ) != 0 )
   \      0x21E   0xF8CD 0xA004      STR      R10,[SP, #+4]
   \      0x222   0x6F28             LDR      R0,[R5, #+112]
   \      0x224   0x4420             ADD      R0,R0,R4
   \      0x226   0x9000             STR      R0,[SP, #+0]
   \      0x228   0x464B             MOV      R3,R9
   \      0x22A   0x463A             MOV      R2,R7
   \      0x22C   0x4641             MOV      R1,R8
   \      0x22E   0x6BA8             LDR      R0,[R5, #+56]
   \      0x230   0x6DC0             LDR      R0,[R0, #+92]
   \      0x232   0x30BC             ADDS     R0,R0,#+188
   \      0x234   0x....'....        BL       mbedtls_pk_verify
   \      0x238   0x0004             MOVS     R4,R0
   \      0x23A   0xD00B             BEQ.N    ??ssl_parse_certificate_verify_17
   4166              {
   4167                  MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_pk_verify", ret );
   \      0x23C   0x9401             STR      R4,[SP, #+4]
   \      0x23E   0x....             LDR.N    R0,??DataTable38_29
   \      0x240   0x9000             STR      R0,[SP, #+0]
   \      0x242   0xF241 0x0347      MOVW     R3,#+4167
   \      0x246   0x4632             MOV      R2,R6
   \      0x248   0x2101             MOVS     R1,#+1
   \      0x24A   0x4628             MOV      R0,R5
   \      0x24C   0x....'....        BL       mbedtls_debug_print_ret
   4168                  return( ret );
   \      0x250   0x4620             MOV      R0,R4
   \      0x252   0xE00C             B.N      ??ssl_parse_certificate_verify_2
   4169              }
   4170          
   4171              mbedtls_ssl_update_handshake_status( ssl );
   \                     ??ssl_parse_certificate_verify_17: (+1)
   \      0x254   0x4628             MOV      R0,R5
   \      0x256   0x....'....        BL       mbedtls_ssl_update_handshake_status
   4172          
   4173              MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse certificate verify" ) );
   \      0x25A   0x....             LDR.N    R0,??DataTable38_30
   \      0x25C   0x9000             STR      R0,[SP, #+0]
   \      0x25E   0xF241 0x034D      MOVW     R3,#+4173
   \      0x262   0x4632             MOV      R2,R6
   \      0x264   0x2102             MOVS     R1,#+2
   \      0x266   0x4628             MOV      R0,R5
   \      0x268   0x....'....        BL       mbedtls_debug_print_msg
   4174          
   4175              return( ret );
   \      0x26C   0x4620             MOV      R0,R4
   \                     ??ssl_parse_certificate_verify_2: (+1)
   \      0x26E   0xB00E             ADD      SP,SP,#+56
   \      0x270   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
   4176          }
   4177          #endif /* !MBEDTLS_KEY_EXCHANGE_RSA_ENABLED &&
   4178                    !MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED &&
   4179                    !MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED &&
   4180                    !MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED &&
   4181                    !MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED &&
   4182                    !MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED */
   4183          
   4184          #if defined(MBEDTLS_SSL_SESSION_TICKETS)

   \                                 In section .text, align 2, keep-with-next
   4185          static int ssl_write_new_session_ticket( mbedtls_ssl_context *ssl )
   4186          {
   \                     ssl_write_new_session_ticket: (+1)
   \        0x0   0xB57F             PUSH     {R0-R6,LR}
   \        0x2   0x4605             MOV      R5,R0
   4187              int ret;
   4188              size_t tlen;
   4189              uint32_t lifetime;
   4190          
   4191              MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write new session ticket" ) );
   \        0x4   0x....             LDR.N    R6,??DataTable38_4
   \        0x6   0x....             LDR.N    R0,??DataTable38_31
   \        0x8   0x9000             STR      R0,[SP, #+0]
   \        0xA   0xF241 0x035F      MOVW     R3,#+4191
   \        0xE   0x4632             MOV      R2,R6
   \       0x10   0x2102             MOVS     R1,#+2
   \       0x12   0x4628             MOV      R0,R5
   \       0x14   0x....'....        BL       mbedtls_debug_print_msg
   4192          
   4193              ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
   \       0x18   0x2016             MOVS     R0,#+22
   \       0x1A   0xF8C5 0x00C8      STR      R0,[R5, #+200]
   4194              ssl->out_msg[0]  = MBEDTLS_SSL_HS_NEW_SESSION_TICKET;
   \       0x1E   0x2004             MOVS     R0,#+4
   \       0x20   0xF8D5 0x10C4      LDR      R1,[R5, #+196]
   \       0x24   0x7008             STRB     R0,[R1, #+0]
   4195          
   4196              /*
   4197               * struct {
   4198               *     uint32 ticket_lifetime_hint;
   4199               *     opaque ticket<0..2^16-1>;
   4200               * } NewSessionTicket;
   4201               *
   4202               * 4  .  7   ticket_lifetime_hint (0 = unspecified)
   4203               * 8  .  9   ticket_len (n)
   4204               * 10 .  9+n ticket content
   4205               */
   4206          
   4207              if( ( ret = ssl->conf->f_ticket_write( ssl->conf->p_ticket,
   4208                                          ssl->session_negotiate,
   4209                                          ssl->out_msg + 10,
   4210                                          ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN,
   4211                                          &tlen, &lifetime ) ) != 0 )
   \       0x26   0xA802             ADD      R0,SP,#+8
   \       0x28   0x9001             STR      R0,[SP, #+4]
   \       0x2A   0xA803             ADD      R0,SP,#+12
   \       0x2C   0x9000             STR      R0,[SP, #+0]
   \       0x2E   0xF8D5 0x00C4      LDR      R0,[R5, #+196]
   \       0x32   0xF500 0x5320      ADD      R3,R0,#+10240
   \       0x36   0xF100 0x020A      ADD      R2,R0,#+10
   \       0x3A   0x6BA9             LDR      R1,[R5, #+56]
   \       0x3C   0x6828             LDR      R0,[R5, #+0]
   \       0x3E   0x6D80             LDR      R0,[R0, #+88]
   \       0x40   0x682C             LDR      R4,[R5, #+0]
   \       0x42   0x6D24             LDR      R4,[R4, #+80]
   \       0x44   0x47A0             BLX      R4
   \       0x46   0x2800             CMP      R0,#+0
   \       0x48   0xD00B             BEQ.N    ??ssl_write_new_session_ticket_0
   4212              {
   4213                  MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_ticket_write", ret );
   \       0x4A   0x9001             STR      R0,[SP, #+4]
   \       0x4C   0x....             LDR.N    R0,??DataTable38_32
   \       0x4E   0x9000             STR      R0,[SP, #+0]
   \       0x50   0xF241 0x0375      MOVW     R3,#+4213
   \       0x54   0x4632             MOV      R2,R6
   \       0x56   0x2101             MOVS     R1,#+1
   \       0x58   0x4628             MOV      R0,R5
   \       0x5A   0x....'....        BL       mbedtls_debug_print_ret
   4214                  tlen = 0;
   \       0x5E   0x2000             MOVS     R0,#+0
   \       0x60   0x9003             STR      R0,[SP, #+12]
   4215              }
   4216          
   4217              ssl->out_msg[4] = ( lifetime >> 24 ) & 0xFF;
   \                     ??ssl_write_new_session_ticket_0: (+1)
   \       0x62   0x9802             LDR      R0,[SP, #+8]
   \       0x64   0x0E00             LSRS     R0,R0,#+24
   \       0x66   0xF8D5 0x10C4      LDR      R1,[R5, #+196]
   \       0x6A   0x7108             STRB     R0,[R1, #+4]
   4218              ssl->out_msg[5] = ( lifetime >> 16 ) & 0xFF;
   \       0x6C   0x9802             LDR      R0,[SP, #+8]
   \       0x6E   0x0C00             LSRS     R0,R0,#+16
   \       0x70   0xF8D5 0x10C4      LDR      R1,[R5, #+196]
   \       0x74   0x7148             STRB     R0,[R1, #+5]
   4219              ssl->out_msg[6] = ( lifetime >>  8 ) & 0xFF;
   \       0x76   0x9802             LDR      R0,[SP, #+8]
   \       0x78   0x0A00             LSRS     R0,R0,#+8
   \       0x7A   0xF8D5 0x10C4      LDR      R1,[R5, #+196]
   \       0x7E   0x7188             STRB     R0,[R1, #+6]
   4220              ssl->out_msg[7] = ( lifetime       ) & 0xFF;
   \       0x80   0x9802             LDR      R0,[SP, #+8]
   \       0x82   0xF8D5 0x10C4      LDR      R1,[R5, #+196]
   \       0x86   0x71C8             STRB     R0,[R1, #+7]
   4221          
   4222              ssl->out_msg[8] = (unsigned char)( ( tlen >> 8 ) & 0xFF );
   \       0x88   0x9803             LDR      R0,[SP, #+12]
   \       0x8A   0x0A00             LSRS     R0,R0,#+8
   \       0x8C   0xF8D5 0x10C4      LDR      R1,[R5, #+196]
   \       0x90   0x7208             STRB     R0,[R1, #+8]
   4223              ssl->out_msg[9] = (unsigned char)( ( tlen      ) & 0xFF );
   \       0x92   0x9803             LDR      R0,[SP, #+12]
   \       0x94   0xF8D5 0x10C4      LDR      R1,[R5, #+196]
   \       0x98   0x7248             STRB     R0,[R1, #+9]
   4224          
   4225              ssl->out_msglen = 10 + tlen;
   \       0x9A   0x9803             LDR      R0,[SP, #+12]
   \       0x9C   0x300A             ADDS     R0,R0,#+10
   \       0x9E   0xF8C5 0x00CC      STR      R0,[R5, #+204]
   4226          
   4227              /*
   4228               * Morally equivalent to updating ssl->state, but NewSessionTicket and
   4229               * ChangeCipherSpec share the same state.
   4230               */
   4231              ssl->handshake->new_session_ticket = 0;
   \       0xA2   0x2000             MOVS     R0,#+0
   \       0xA4   0x6BE9             LDR      R1,[R5, #+60]
   \       0xA6   0xF8C1 0x06D0      STR      R0,[R1, #+1744]
   4232          
   4233              if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
   \       0xAA   0x4628             MOV      R0,R5
   \       0xAC   0x....'....        BL       mbedtls_ssl_write_handshake_msg
   \       0xB0   0x0004             MOVS     R4,R0
   \       0xB2   0xD00B             BEQ.N    ??ssl_write_new_session_ticket_1
   4234              {
   4235                  MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_handshake_msg", ret );
   \       0xB4   0x9401             STR      R4,[SP, #+4]
   \       0xB6   0x....             LDR.N    R0,??DataTable38_33
   \       0xB8   0x9000             STR      R0,[SP, #+0]
   \       0xBA   0xF241 0x038B      MOVW     R3,#+4235
   \       0xBE   0x4632             MOV      R2,R6
   \       0xC0   0x2101             MOVS     R1,#+1
   \       0xC2   0x4628             MOV      R0,R5
   \       0xC4   0x....'....        BL       mbedtls_debug_print_ret
   4236                  return( ret );
   \       0xC8   0x4620             MOV      R0,R4
   \       0xCA   0xE009             B.N      ??ssl_write_new_session_ticket_2
   4237              }
   4238          
   4239              MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write new session ticket" ) );
   \                     ??ssl_write_new_session_ticket_1: (+1)
   \       0xCC   0x....             LDR.N    R0,??DataTable38_34
   \       0xCE   0x9000             STR      R0,[SP, #+0]
   \       0xD0   0xF241 0x038F      MOVW     R3,#+4239
   \       0xD4   0x4632             MOV      R2,R6
   \       0xD6   0x2102             MOVS     R1,#+2
   \       0xD8   0x4628             MOV      R0,R5
   \       0xDA   0x....'....        BL       mbedtls_debug_print_msg
   4240          
   4241              return( 0 );
   \       0xDE   0x2000             MOVS     R0,#+0
   \                     ??ssl_write_new_session_ticket_2: (+1)
   \       0xE0   0xB004             ADD      SP,SP,#+16
   \       0xE2   0xBD70             POP      {R4-R6,PC}       ;; return
   4242          }
   4243          #endif /* MBEDTLS_SSL_SESSION_TICKETS */
   4244          
   4245          /*
   4246           * SSL handshake -- server side -- single step
   4247           */

   \                                 In section .text, align 4, keep-with-next
   4248          int mbedtls_ssl_handshake_server_step( mbedtls_ssl_context *ssl )
   4249          {
   \                     mbedtls_ssl_handshake_server_step: (+1)
   \        0x0   0xB57C             PUSH     {R2-R6,LR}
   \        0x2   0x4605             MOV      R5,R0
   4250              int ret = 0;
   4251          
   4252              if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
   \        0x4   0x6868             LDR      R0,[R5, #+4]
   \        0x6   0x2810             CMP      R0,#+16
   \        0x8   0xD002             BEQ.N    ??mbedtls_ssl_handshake_server_step_1
   \        0xA   0x6BE8             LDR      R0,[R5, #+60]
   \        0xC   0x2800             CMP      R0,#+0
   \        0xE   0xD101             BNE.N    ??mbedtls_ssl_handshake_server_step_2
   4253                  return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   \                     ??mbedtls_ssl_handshake_server_step_1: (+1)
   \       0x10   0x....             LDR.N    R0,??DataTable38_35  ;; 0xffff8f00
   \       0x12   0xBD76             POP      {R1,R2,R4-R6,PC}
   4254          
   4255              MBEDTLS_SSL_DEBUG_MSG( 2, ( "server state: %d", ssl->state ) );
   \                     ??mbedtls_ssl_handshake_server_step_2: (+1)
   \       0x14   0x....             LDR.N    R6,??DataTable38_4
   \       0x16   0x6868             LDR      R0,[R5, #+4]
   \       0x18   0x9001             STR      R0,[SP, #+4]
   \       0x1A   0x....             LDR.N    R0,??DataTable38_36
   \       0x1C   0x9000             STR      R0,[SP, #+0]
   \       0x1E   0xF241 0x039F      MOVW     R3,#+4255
   \       0x22   0x4632             MOV      R2,R6
   \       0x24   0x2102             MOVS     R1,#+2
   \       0x26   0x4628             MOV      R0,R5
   \       0x28   0x....'....        BL       mbedtls_debug_print_msg
   4256          
   4257              if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
   \       0x2C   0x4628             MOV      R0,R5
   \       0x2E   0x....'....        BL       mbedtls_ssl_flush_output
   \       0x32   0x0004             MOVS     R4,R0
   \       0x34   0xD121             BNE.N    ??mbedtls_ssl_handshake_server_step_3
   4258                  return( ret );
   4259          
   4260          #if defined(MBEDTLS_SSL_PROTO_DTLS)
   4261              if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM &&
   4262                  ssl->handshake->retransmit_state == MBEDTLS_SSL_RETRANS_SENDING )
   \       0x36   0x6828             LDR      R0,[R5, #+0]
   \       0x38   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \       0x3C   0xF3C0 0x0040      UBFX     R0,R0,#+1,#+1
   \       0x40   0x2800             CMP      R0,#+0
   \       0x42   0xD009             BEQ.N    ??mbedtls_ssl_handshake_server_step_4
   \       0x44   0x6BE8             LDR      R0,[R5, #+60]
   \       0x46   0xF890 0x01E8      LDRB     R0,[R0, #+488]
   \       0x4A   0x2801             CMP      R0,#+1
   \       0x4C   0xD104             BNE.N    ??mbedtls_ssl_handshake_server_step_4
   4263              {
   4264                  if( ( ret = mbedtls_ssl_flight_transmit( ssl ) ) != 0 )
   \       0x4E   0x4628             MOV      R0,R5
   \       0x50   0x....'....        BL       mbedtls_ssl_flight_transmit
   \       0x54   0x0004             MOVS     R4,R0
   \       0x56   0xD110             BNE.N    ??mbedtls_ssl_handshake_server_step_3
   4265                      return( ret );
   4266              }
   4267          #endif /* MBEDTLS_SSL_PROTO_DTLS */
   4268          
   4269              switch( ssl->state )
   \                     ??mbedtls_ssl_handshake_server_step_4: (+1)
   \       0x58   0x6868             LDR      R0,[R5, #+4]
   \       0x5A   0x2812             CMP      R0,#+18
   \       0x5C   0xD86B             BHI.N    ??mbedtls_ssl_handshake_server_step_5
   \       0x5E   0xE8DF 0xF000      TBB      [PC, R0]
   \                     ??mbedtls_ssl_handshake_server_step_0:
   \       0x62   0x0A 0x0E          DC8      0xA,0xE,0x15,0x1A
   \              0x15 0x1A    
   \       0x66   0x1F 0x24          DC8      0x1F,0x24,0x29,0x2E
   \              0x29 0x2E    
   \       0x6A   0x33 0x38          DC8      0x33,0x38,0x3D,0x42
   \              0x3D 0x42    
   \       0x6E   0x47 0x55          DC8      0x47,0x55,0x5A,0x66
   \              0x5A 0x66    
   \       0x72   0x6A 0x6A          DC8      0x6A,0x6A,0x13,0x0
   \              0x13 0x00    
   4270              {
   4271                  case MBEDTLS_SSL_HELLO_REQUEST:
   4272                      ssl->state = MBEDTLS_SSL_CLIENT_HELLO;
   \                     ??mbedtls_ssl_handshake_server_step_6: (+1)
   \       0x76   0x2001             MOVS     R0,#+1
   \       0x78   0x6068             STR      R0,[R5, #+4]
   4273                      break;
   4274          
   4275                  /*
   4276                   *  <==   ClientHello
   4277                   */
   4278                  case MBEDTLS_SSL_CLIENT_HELLO:
   4279                      ret = ssl_parse_client_hello( ssl );
   4280                      break;
   4281          
   4282          #if defined(MBEDTLS_SSL_PROTO_DTLS)
   4283                  case MBEDTLS_SSL_SERVER_HELLO_VERIFY_REQUEST_SENT:
   4284                      return( MBEDTLS_ERR_SSL_HELLO_VERIFY_REQUIRED );
   4285          #endif
   4286          
   4287                  /*
   4288                   *  ==>   ServerHello
   4289                   *        Certificate
   4290                   *      ( ServerKeyExchange  )
   4291                   *      ( CertificateRequest )
   4292                   *        ServerHelloDone
   4293                   */
   4294                  case MBEDTLS_SSL_SERVER_HELLO:
   4295                      ret = ssl_write_server_hello( ssl );
   4296                      break;
   4297          
   4298                  case MBEDTLS_SSL_SERVER_CERTIFICATE:
   4299                      ret = mbedtls_ssl_write_certificate( ssl );
   4300                      break;
   4301          
   4302                  case MBEDTLS_SSL_SERVER_KEY_EXCHANGE:
   4303                      ret = ssl_write_server_key_exchange( ssl );
   4304                      break;
   4305          
   4306                  case MBEDTLS_SSL_CERTIFICATE_REQUEST:
   4307                      ret = ssl_write_certificate_request( ssl );
   4308                      break;
   4309          
   4310                  case MBEDTLS_SSL_SERVER_HELLO_DONE:
   4311                      ret = ssl_write_server_hello_done( ssl );
   4312                      break;
   4313          
   4314                  /*
   4315                   *  <== ( Certificate/Alert  )
   4316                   *        ClientKeyExchange
   4317                   *      ( CertificateVerify  )
   4318                   *        ChangeCipherSpec
   4319                   *        Finished
   4320                   */
   4321                  case MBEDTLS_SSL_CLIENT_CERTIFICATE:
   4322                      ret = mbedtls_ssl_parse_certificate( ssl );
   4323                      break;
   4324          
   4325                  case MBEDTLS_SSL_CLIENT_KEY_EXCHANGE:
   4326                      ret = ssl_parse_client_key_exchange( ssl );
   4327                      break;
   4328          
   4329                  case MBEDTLS_SSL_CERTIFICATE_VERIFY:
   4330                      ret = ssl_parse_certificate_verify( ssl );
   4331                      break;
   4332          
   4333                  case MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC:
   4334                      ret = mbedtls_ssl_parse_change_cipher_spec( ssl );
   4335                      break;
   4336          
   4337                  case MBEDTLS_SSL_CLIENT_FINISHED:
   4338                      ret = mbedtls_ssl_parse_finished( ssl );
   4339                      break;
   4340          
   4341                  /*
   4342                   *  ==> ( NewSessionTicket )
   4343                   *        ChangeCipherSpec
   4344                   *        Finished
   4345                   */
   4346                  case MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC:
   4347          #if defined(MBEDTLS_SSL_SESSION_TICKETS)
   4348                      if( ssl->handshake->new_session_ticket != 0 )
   4349                          ret = ssl_write_new_session_ticket( ssl );
   4350                      else
   4351          #endif
   4352                          ret = mbedtls_ssl_write_change_cipher_spec( ssl );
   4353                      break;
   4354          
   4355                  case MBEDTLS_SSL_SERVER_FINISHED:
   4356                      ret = mbedtls_ssl_write_finished( ssl );
   4357                      break;
   4358          
   4359                  case MBEDTLS_SSL_FLUSH_BUFFERS:
   4360                      MBEDTLS_SSL_DEBUG_MSG( 2, ( "handshake: done" ) );
   4361                      ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
   4362                      break;
   4363          
   4364                  case MBEDTLS_SSL_HANDSHAKE_WRAPUP:
   4365                      mbedtls_ssl_handshake_wrapup( ssl );
   4366                      break;
   4367          
   4368                  default:
   4369                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid state %d", ssl->state ) );
   4370                      return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   4371              }
   4372          
   4373              return( ret );
   \                     ??mbedtls_ssl_handshake_server_step_3: (+1)
   \       0x7A   0x4620             MOV      R0,R4
   \       0x7C   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
   \                     ??mbedtls_ssl_handshake_server_step_7: (+1)
   \       0x7E   0x4628             MOV      R0,R5
   \       0x80   0x....'....        BL       ssl_parse_client_hello
   \       0x84   0x4604             MOV      R4,R0
   \       0x86   0xE7F8             B.N      ??mbedtls_ssl_handshake_server_step_3
   \                     ??mbedtls_ssl_handshake_server_step_8: (+1)
   \       0x88   0x....             LDR.N    R0,??DataTable38_37  ;; 0xffff9580
   \       0x8A   0xBD76             POP      {R1,R2,R4-R6,PC}
   \                     ??mbedtls_ssl_handshake_server_step_9: (+1)
   \       0x8C   0x4628             MOV      R0,R5
   \       0x8E   0x....'....        BL       ssl_write_server_hello
   \       0x92   0x4604             MOV      R4,R0
   \       0x94   0xE7F1             B.N      ??mbedtls_ssl_handshake_server_step_3
   \                     ??mbedtls_ssl_handshake_server_step_10: (+1)
   \       0x96   0x4628             MOV      R0,R5
   \       0x98   0x....'....        BL       mbedtls_ssl_write_certificate
   \       0x9C   0x4604             MOV      R4,R0
   \       0x9E   0xE7EC             B.N      ??mbedtls_ssl_handshake_server_step_3
   \                     ??mbedtls_ssl_handshake_server_step_11: (+1)
   \       0xA0   0x4628             MOV      R0,R5
   \       0xA2   0x....'....        BL       ssl_write_server_key_exchange
   \       0xA6   0x4604             MOV      R4,R0
   \       0xA8   0xE7E7             B.N      ??mbedtls_ssl_handshake_server_step_3
   \                     ??mbedtls_ssl_handshake_server_step_12: (+1)
   \       0xAA   0x4628             MOV      R0,R5
   \       0xAC   0x....'....        BL       ssl_write_certificate_request
   \       0xB0   0x4604             MOV      R4,R0
   \       0xB2   0xE7E2             B.N      ??mbedtls_ssl_handshake_server_step_3
   \                     ??mbedtls_ssl_handshake_server_step_13: (+1)
   \       0xB4   0x4628             MOV      R0,R5
   \       0xB6   0x....'....        BL       ssl_write_server_hello_done
   \       0xBA   0x4604             MOV      R4,R0
   \       0xBC   0xE7DD             B.N      ??mbedtls_ssl_handshake_server_step_3
   \                     ??mbedtls_ssl_handshake_server_step_14: (+1)
   \       0xBE   0x4628             MOV      R0,R5
   \       0xC0   0x....'....        BL       mbedtls_ssl_parse_certificate
   \       0xC4   0x4604             MOV      R4,R0
   \       0xC6   0xE7D8             B.N      ??mbedtls_ssl_handshake_server_step_3
   \                     ??mbedtls_ssl_handshake_server_step_15: (+1)
   \       0xC8   0x4628             MOV      R0,R5
   \       0xCA   0x....'....        BL       ssl_parse_client_key_exchange
   \       0xCE   0x4604             MOV      R4,R0
   \       0xD0   0xE7D3             B.N      ??mbedtls_ssl_handshake_server_step_3
   \                     ??mbedtls_ssl_handshake_server_step_16: (+1)
   \       0xD2   0x4628             MOV      R0,R5
   \       0xD4   0x....'....        BL       ssl_parse_certificate_verify
   \       0xD8   0x4604             MOV      R4,R0
   \       0xDA   0xE7CE             B.N      ??mbedtls_ssl_handshake_server_step_3
   \                     ??mbedtls_ssl_handshake_server_step_17: (+1)
   \       0xDC   0x4628             MOV      R0,R5
   \       0xDE   0x....'....        BL       mbedtls_ssl_parse_change_cipher_spec
   \       0xE2   0x4604             MOV      R4,R0
   \       0xE4   0xE7C9             B.N      ??mbedtls_ssl_handshake_server_step_3
   \                     ??mbedtls_ssl_handshake_server_step_18: (+1)
   \       0xE6   0x4628             MOV      R0,R5
   \       0xE8   0x....'....        BL       mbedtls_ssl_parse_finished
   \       0xEC   0x4604             MOV      R4,R0
   \       0xEE   0xE7C4             B.N      ??mbedtls_ssl_handshake_server_step_3
   \                     ??mbedtls_ssl_handshake_server_step_19: (+1)
   \       0xF0   0x6BE8             LDR      R0,[R5, #+60]
   \       0xF2   0xF8D0 0x06D0      LDR      R0,[R0, #+1744]
   \       0xF6   0x2800             CMP      R0,#+0
   \       0xF8   0x4628             MOV      R0,R5
   \       0xFA   0xD003             BEQ.N    ??mbedtls_ssl_handshake_server_step_20
   \       0xFC   0x....'....        BL       ssl_write_new_session_ticket
   \      0x100   0x4604             MOV      R4,R0
   \      0x102   0xE7BA             B.N      ??mbedtls_ssl_handshake_server_step_3
   \                     ??mbedtls_ssl_handshake_server_step_20: (+1)
   \      0x104   0x....'....        BL       mbedtls_ssl_write_change_cipher_spec
   \      0x108   0x4604             MOV      R4,R0
   \      0x10A   0xE7B6             B.N      ??mbedtls_ssl_handshake_server_step_3
   \                     ??mbedtls_ssl_handshake_server_step_21: (+1)
   \      0x10C   0x4628             MOV      R0,R5
   \      0x10E   0x....'....        BL       mbedtls_ssl_write_finished
   \      0x112   0x4604             MOV      R4,R0
   \      0x114   0xE7B1             B.N      ??mbedtls_ssl_handshake_server_step_3
   \                     ??mbedtls_ssl_handshake_server_step_22: (+1)
   \      0x116   0x....             LDR.N    R0,??DataTable38_38
   \      0x118   0x9000             STR      R0,[SP, #+0]
   \      0x11A   0xF241 0x1308      MOVW     R3,#+4360
   \      0x11E   0x4632             MOV      R2,R6
   \      0x120   0x2102             MOVS     R1,#+2
   \      0x122   0x4628             MOV      R0,R5
   \      0x124   0x....'....        BL       mbedtls_debug_print_msg
   \      0x128   0x200F             MOVS     R0,#+15
   \      0x12A   0x6068             STR      R0,[R5, #+4]
   \      0x12C   0xE7A5             B.N      ??mbedtls_ssl_handshake_server_step_3
   \                     ??mbedtls_ssl_handshake_server_step_23: (+1)
   \      0x12E   0x4628             MOV      R0,R5
   \      0x130   0x....'....        BL       mbedtls_ssl_handshake_wrapup
   \      0x134   0xE7A1             B.N      ??mbedtls_ssl_handshake_server_step_3
   \                     ??mbedtls_ssl_handshake_server_step_5: (+1)
   \      0x136   0x9001             STR      R0,[SP, #+4]
   \      0x138   0x....             LDR.N    R0,??DataTable38_39
   \      0x13A   0x9000             STR      R0,[SP, #+0]
   \      0x13C   0xF241 0x1311      MOVW     R3,#+4369
   \      0x140   0x4632             MOV      R2,R6
   \      0x142   0x2101             MOVS     R1,#+1
   \      0x144   0x4628             MOV      R0,R5
   \      0x146   0x....'....        BL       mbedtls_debug_print_msg
   \      0x14A   0x....             LDR.N    R0,??DataTable38_35  ;; 0xffff8f00
   \      0x14C   0xBD76             POP      {R1,R2,R4-R6,PC}
   4374          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14:
   \        0x0   0xFFFF'8F00        DC32     0xffff8f00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_1:
   \        0x0   0xFFFF'8100        DC32     0xffff8100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_2:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_3:
   \        0x0   0x....'....        DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_4:
   \        0x0   0x....'....        DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_5:
   \        0x0   0xFFFF'8700        DC32     0xffff8700

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_6:
   \        0x0   0x....'....        DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_7:
   \        0x0   0x....'....        DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_8:
   \        0x0   0x....'....        DC32     ?_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_9:
   \        0x0   0x....'....        DC32     ?_9

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_10:
   \        0x0   0x....'....        DC32     ?_8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_11:
   \        0x0   0x....'....        DC32     ?_6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_12:
   \        0x0   0x....'....        DC32     ?_7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_13:
   \        0x0   0x....'....        DC32     ?_10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_14:
   \        0x0   0x....'....        DC32     ?_11

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_15:
   \        0x0   0x....'....        DC32     ?_12

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_16:
   \        0x0   0x....'....        DC32     ?_13

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_17:
   \        0x0   0x....'....        DC32     ?_14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_18:
   \        0x0   0x....'....        DC32     ?_15

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_19:
   \        0x0   0x....'....        DC32     ?_16

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_20:
   \        0x0   0x....'....        DC32     ?_17

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_21:
   \        0x0   0x....'....        DC32     ?_18

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_22:
   \        0x0   0x....'....        DC32     ?_23

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_23:
   \        0x0   0x....'....        DC32     ?_19

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_24:
   \        0x0   0x....'....        DC32     ?_20

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_25:
   \        0x0   0x....'....        DC32     ?_21

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_26:
   \        0x0   0x....'....        DC32     ?_22

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_27:
   \        0x0   0x....'....        DC32     ?_24

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_28:
   \        0x0   0x....'....        DC32     ?_25

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_29:
   \        0x0   0xFFFF'9400        DC32     0xffff9400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_30:
   \        0x0   0x....'....        DC32     ?_26

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_31:
   \        0x0   0x....'....        DC32     ?_27

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_32:
   \        0x0   0x....'....        DC32     ?_28

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_33:
   \        0x0   0x....'....        DC32     ?_29

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_34:
   \        0x0   0x....'....        DC32     ?_30

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_35:
   \        0x0   0x....'....        DC32     ?_31

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16:
   \        0x0   0x....'....        DC32     ?_38

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_1:
   \        0x0   0x....'....        DC32     ?_33

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_2:
   \        0x0   0x....'....        DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_3:
   \        0x0   0xFFFF'8700        DC32     0xffff8700

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_4:
   \        0x0   0x....'....        DC32     ?_39

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_5:
   \        0x0   0x....'....        DC32     ?_40

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17:
   \        0x0   0x....'....        DC32     ?_41

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19:
   \        0x0   0x....'....        DC32     ?_42

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_1:
   \        0x0   0x....'....        DC32     ?_43

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20:
   \        0x0   0xFFFF'8F80        DC32     0xffff8f80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_1:
   \        0x0   0x....'....        DC32     ?_44

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22:
   \        0x0   0x....'....        DC32     ?_45

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_1:
   \        0x0   0xFFFF'9180        DC32     0xffff9180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_2:
   \        0x0   0x....'....        DC32     ?_46

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23:
   \        0x0   0x....'....        DC32     ?_47

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_1:
   \        0x0   0x....'....        DC32     ?_48

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_2:
   \        0x0   0x....'....        DC32     ?_49

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_3:
   \        0x0   0x....'....        DC32     ?_50

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24:
   \        0x0   0x....'....        DC32     ?_51

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_1:
   \        0x0   0x....'....        DC32     ?_52

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_2:
   \        0x0   0x....'....        DC32     ?_53

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_3:
   \        0x0   0x....'....        DC32     ?_54

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_4:
   \        0x0   0x....'....        DC32     ?_55

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_5:
   \        0x0   0x....'....        DC32     ?_56

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_6:
   \        0x0   0x....'....        DC32     ?_57

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_7:
   \        0x0   0x....'....        DC32     ?_58

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_8:
   \        0x0   0x....'....        DC32     ?_59

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_9:
   \        0x0   0x....'....        DC32     ?_60

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_10:
   \        0x0   0x....'....        DC32     ?_61

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_11:
   \        0x0   0x....'....        DC32     ?_62

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_12:
   \        0x0   0x....'....        DC32     ?_63

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25:
   \        0x0   0x....'....        DC32     ?_64

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_1:
   \        0x0   0x....'....        DC32     ?_65

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_2:
   \        0x0   0x61 0x00          DC8      "a",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_3:
   \        0x0   0x....'....        DC32     ?_66

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_4:
   \        0x0   0x6E 0x6F          DC8      0x6E, 0x6F, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_5:
   \        0x0   0x....'....        DC32     ?_67

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_6:
   \        0x0   0x....'....        DC32     ?_68

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_7:
   \        0x0   0x....'....        DC32     ?_69

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_8:
   \        0x0   0x....'....        DC32     ?_70

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_9:
   \        0x0   0x....'....        DC32     ?_71

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_10:
   \        0x0   0x....'....        DC32     ?_72

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26:
   \        0x0   0x....'....        DC32     ?_73

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_1:
   \        0x0   0x....'....        DC32     ?_74

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27:
   \        0x0   0x....'....        DC32     ?_75

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_1:
   \        0x0   0xFFFF'9680        DC32     0xffff9680

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_2:
   \        0x0   0x....'....        DC32     ?_76

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_3:
   \        0x0   0xFFFF'8C80        DC32     0xffff8c80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_4:
   \        0x0   0x....'....        DC32     ?_79

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_5:
   \        0x0   0x....'....        DC32     ?_80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_6:
   \        0x0   0x....'....        DC32     ?_77

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_7:
   \        0x0   0x....'....        DC32     ?_78

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_8:
   \        0x0   0x....'....        DC32     ?_81

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_9:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_10:
   \        0x0   0x....'....        DC32     ?_82

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_11:
   \        0x0   0x....'....        DC32     ?_83

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_12:
   \        0x0   0x....'....        DC32     ?_84

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_13:
   \        0x0   0x....'....        DC32     ?_85

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_14:
   \        0x0   0x....'....        DC32     ?_86

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_15:
   \        0x0   0x....'....        DC32     ?_87

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_16:
   \        0x0   0x....'....        DC32     ?_88

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable28:
   \        0x0   0x....'....        DC32     ?_89

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable28_1:
   \        0x0   0x....'....        DC32     ?_90

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable28_2:
   \        0x0   0x....'....        DC32     ?_91

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable28_3:
   \        0x0   0x....'....        DC32     ?_92

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable28_4:
   \        0x0   0x....'....        DC32     ?_93

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable29:
   \        0x0   0xFFFF'9400        DC32     0xffff9400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable29_1:
   \        0x0   0x....'....        DC32     ?_95

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable29_2:
   \        0x0   0x....'....        DC32     ?_97

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable30:
   \        0x0   0x....'....        DC32     ?_94

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable30_1:
   \        0x0   0x....'....        DC32     ?_96

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable30_2:
   \        0x0   0x....'....        DC32     ?_98

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable30_3:
   \        0x0   0x....'....        DC32     ?_100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable30_4:
   \        0x0   0xFFFF'8C00        DC32     0xffff8c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable30_5:
   \        0x0   0x....'....        DC32     ?_101

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31:
   \        0x0   0x....'....        DC32     ?_99

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_1:
   \        0x0   0x....'....        DC32     ?_102

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_2:
   \        0x0   0x....'....        DC32     ?_103

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_3:
   \        0x0   0x....'....        DC32     ?_105

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable32:
   \        0x0   0x....'....        DC32     ?_106

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable32_1:
   \        0x0   0x....'....        DC32     ?_104

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable32_2:
   \        0x0   0x....'....        DC32     ?_107

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable32_3:
   \        0x0   0x....'....        DC32     ?_110

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable32_4:
   \        0x0   0x....'....        DC32     ?_111

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable33:
   \        0x0   0x....'....        DC32     ?_112

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable33_1:
   \        0x0   0x....'....        DC32     ?_113

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34:
   \        0x0   0x....'....        DC32     ?_114

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_1:
   \        0x0   0x....'....        DC32     ?_116

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_2:
   \        0x0   0x....'....        DC32     ?_115

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_3:
   \        0x0   0x....'....        DC32     ?_117

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_4:
   \        0x0   0x....'....        DC32     ?_118

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_5:
   \        0x0   0xFFFF'9300        DC32     0xffff9300

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_6:
   \        0x0   0x....'....        DC32     ?_119

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_7:
   \        0x0   0x....'....        DC32     ?_120

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_8:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_9:
   \        0x0   0xFFFF'8F00        DC32     0xffff8f00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_10:
   \        0x0   0x....'....        DC32     ?_121

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_11:
   \        0x0   0x....'....        DC32     ?_122

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_12:
   \        0x0   0x....'....        DC32     ?_123

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_13:
   \        0x0   0x....'....        DC32     ?_124

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_14:
   \        0x0   0x....'....        DC32     ?_125

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_15:
   \        0x0   0x....'....        DC32     ?_126

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_16:
   \        0x0   0x....'....        DC32     ?_127

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_17:
   \        0x0   0xFFFF'8C80        DC32     0xffff8c80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_18:
   \        0x0   0x....'....        DC32     ?_128

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_19:
   \        0x0   0x....'....        DC32     ?_129

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_20:
   \        0x0   0x....'....        DC32     ?_130

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_21:
   \        0x0   0x....'....        DC32     ?_131

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35:
   \        0x0   0x....'....        DC32     ?_25

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_1:
   \        0x0   0x....'....        DC32     ?_132

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_2:
   \        0x0   0x....'....        DC32     ?_133

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_3:
   \        0x0   0x....'....        DC32     ?_134

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_4:
   \        0x0   0xFFFF'8A00        DC32     0xffff8a00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_5:
   \        0x0   0x....'....        DC32     ?_135

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_6:
   \        0x0   0x....'....        DC32     ?_136

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_7:
   \        0x0   0x....'....        DC32     ?_137

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_8:
   \        0x0   0x....'....        DC32     ?_138

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_9:
   \        0x0   0x....'....        DC32     ?_139

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable36:
   \        0x0   0x....'....        DC32     ?_140

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable36_1:
   \        0x0   0x....'....        DC32     ?_141

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable36_2:
   \        0x0   0x....'....        DC32     ?_95

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable37:
   \        0x0   0x....'....        DC32     ?_142

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable37_1:
   \        0x0   0x....'....        DC32     ?_143

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable37_2:
   \        0x0   0xFFFF'8400        DC32     0xffff8400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable37_3:
   \        0x0   0x....'....        DC32     ?_144

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable37_4:
   \        0x0   0xFFFF'8380        DC32     0xffff8380

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable37_5:
   \        0x0   0x....'....        DC32     ?_145

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable37_6:
   \        0x0   0x....'....        DC32     ?_146

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable38:
   \        0x0   0xFFFF'9400        DC32     0xffff9400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable38_1:
   \        0x0   0x....'....        DC32     ?_147

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable38_2:
   \        0x0   0xFFFF'9380        DC32     0xffff9380

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable38_3:
   \        0x0   0x....'....        DC32     ?_148

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable38_4:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable38_5:
   \        0x0   0x....'....        DC32     ?_149

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable38_6:
   \        0x0   0x....'....        DC32     ?_150

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable38_7:
   \        0x0   0x....'....        DC32     ?_151

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable38_8:
   \        0x0   0x....'....        DC32     ?_152

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable38_9:
   \        0x0   0x....'....        DC32     ?_153

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable38_10:
   \        0x0   0xFFFF'8300        DC32     0xffff8300

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable38_11:
   \        0x0   0x....'....        DC32     ?_154

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable38_12:
   \        0x0   0x....'....        DC32     ?_104

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable38_13:
   \        0x0   0x....'....        DC32     ?_155

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable38_14:
   \        0x0   0x....'....        DC32     ?_156

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable38_15:
   \        0x0   0x....'....        DC32     ?_157

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable38_16:
   \        0x0   0x....'....        DC32     ?_158

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable38_17:
   \        0x0   0x....'....        DC32     ?_159

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable38_18:
   \        0x0   0x....'....        DC32     ?_160

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable38_19:
   \        0x0   0x....'....        DC32     ?_161

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable38_20:
   \        0x0   0x....'....        DC32     ?_162

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable38_21:
   \        0x0   0x....'....        DC32     ?_163

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable38_22:
   \        0x0   0x....'....        DC32     ?_164

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable38_23:
   \        0x0   0x....'....        DC32     ?_165

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable38_24:
   \        0x0   0x....'....        DC32     ?_166

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable38_25:
   \        0x0   0xFFFF'8280        DC32     0xffff8280

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable38_26:
   \        0x0   0x....'....        DC32     ?_167

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable38_27:
   \        0x0   0x....'....        DC32     ?_168

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable38_28:
   \        0x0   0x....'....        DC32     ?_25

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable38_29:
   \        0x0   0x....'....        DC32     ?_169

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable38_30:
   \        0x0   0x....'....        DC32     ?_170

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable38_31:
   \        0x0   0x....'....        DC32     ?_171

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable38_32:
   \        0x0   0x....'....        DC32     ?_172

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable38_33:
   \        0x0   0x....'....        DC32     ?_94

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable38_34:
   \        0x0   0x....'....        DC32     ?_173

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable38_35:
   \        0x0   0xFFFF'8F00        DC32     0xffff8f00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable38_36:
   \        0x0   0x....'....        DC32     ?_174

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable38_37:
   \        0x0   0xFFFF'9580        DC32     0xffff9580

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable38_38:
   \        0x0   0x....'....        DC32     ?_175

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable38_39:
   \        0x0   0x....'....        DC32     ?_176

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x43 0x3A          DC8 43H, 3AH, 5CH, 44H, 65H, 76H, 65H, 6CH
   \              0x5C 0x44    
   \              0x65 0x76    
   \              0x65 0x6C    
   \        0x8   0x6F 0x70          DC8 6FH, 70H, 6DH, 65H, 6EH, 74H, 5CH, 73H
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x5C 0x73    
   \       0x10   0x6D 0x61          DC8 6DH, 61H, 72H, 74H, 5FH, 77H, 61H, 73H
   \              0x72 0x74    
   \              0x5F 0x77    
   \              0x61 0x73    
   \       0x18   0x68 0x69          DC8 68H, 69H, 6EH, 67H, 5FH, 6DH, 61H, 63H
   \              0x6E 0x67    
   \              0x5F 0x6D    
   \              0x61 0x63    
   \       0x20   0x68 0x69          DC8 68H, 69H, 6EH, 65H, 5FH, 33H, 30H, 38H
   \              0x6E 0x65    
   \              0x5F 0x33    
   \              0x30 0x38    
   \       0x28   0x30 0x5C          DC8 30H, 5CH, 6DH, 62H, 65H, 64H, 74H, 6CH
   \              0x6D 0x62    
   \              0x65 0x64    
   \              0x74 0x6C    
   \       0x30   0x73 0x5C          DC8 73H, 5CH, 6CH, 69H, 62H, 72H, 61H, 72H
   \              0x6C 0x69    
   \              0x62 0x72    
   \              0x61 0x72    
   \       0x38   0x79 0x5C          DC8 79H, 5CH, 73H, 73H, 6CH, 5FH, 73H, 72H
   \              0x73 0x73    
   \              0x6C 0x5F    
   \              0x73 0x72    
   \       0x40   0x76 0x2E          DC8 76H, 2EH, 63H, 0
   \              0x63 0x00    

   \                                 In section .rodata, align 4
   \                     ?_1:
   \        0x0   0x70 0x61          DC8 "parse ServerName extension"
   \              0x72 0x73    
   \              0x65 0x20    
   \              0x53 0x65    
   \              0x72 0x76    
   \              0x65 0x72    
   \              0x4E 0x61    
   \              0x6D 0x65    
   \              0x20 0x65    
   \              0x78 0x74    
   \              0x65 0x6E    
   \              0x73 0x69    
   \              0x6F 0x6E    
   \              0x00         
   \       0x1B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_2:
   \        0x0   0x62 0x61          DC8 "bad client hello message"
   \              0x64 0x20    
   \              0x63 0x6C    
   \              0x69 0x65    
   \              0x6E 0x74    
   \              0x20 0x68    
   \              0x65 0x6C    
   \              0x6C 0x6F    
   \              0x20 0x6D    
   \              0x65 0x73    
   \              0x73 0x61    
   \              0x67 0x65    
   \              0x00         
   \       0x19   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_3:
   \        0x0   0x73 0x73          DC8 "ssl_sni_wrapper"
   \              0x6C 0x5F    
   \              0x73 0x6E    
   \              0x69 0x5F    
   \              0x77 0x72    
   \              0x61 0x70    
   \              0x70 0x65    
   \              0x72 0x00    

   \                                 In section .rodata, align 4
   \                     ?_4:
   \        0x0   0x6E 0x6F          DC8 "non-matching renegotiation info"
   \              0x6E 0x2D    
   \              0x6D 0x61    
   \              0x74 0x63    
   \              0x68 0x69    
   \              0x6E 0x67    
   \              0x20 0x72    
   \              0x65 0x6E    
   \              0x65 0x67    
   \              0x6F 0x74    
   \              0x69 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x69    
   \              0x6E 0x66    
   \              0x6F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_5:
   \        0x0   0x6E 0x6F          DC8 "non-zero length renegotiation info"
   \              0x6E 0x2D    
   \              0x7A 0x65    
   \              0x72 0x6F    
   \              0x20 0x6C    
   \              0x65 0x6E    
   \              0x67 0x74    
   \              0x68 0x20    
   \              0x72 0x65    
   \              0x6E 0x65    
   \              0x67 0x6F    
   \              0x74 0x69    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x69 0x6E    
   \              0x66 0x6F    
   \              0x00         
   \       0x23   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_6:
   \        0x0   0x63 0x6C          DC8 63H, 6CH, 69H, 65H, 6EH, 74H, 20H, 68H
   \              0x69 0x65    
   \              0x6E 0x74    
   \              0x20 0x68    
   \        0x8   0x65 0x6C          DC8 65H, 6CH, 6CH, 6FH, 20H, 76H, 33H, 2CH
   \              0x6C 0x6F    
   \              0x20 0x76    
   \              0x33 0x2C    
   \       0x10   0x20 0x73          DC8 20H, 73H, 69H, 67H, 6EH, 61H, 74H, 75H
   \              0x69 0x67    
   \              0x6E 0x61    
   \              0x74 0x75    
   \       0x18   0x72 0x65          DC8 72H, 65H, 5FH, 61H, 6CH, 67H, 6FH, 72H
   \              0x5F 0x61    
   \              0x6C 0x67    
   \              0x6F 0x72    
   \       0x20   0x69 0x74          DC8 69H, 74H, 68H, 6DH, 20H, 65H, 78H, 74H
   \              0x68 0x6D    
   \              0x20 0x65    
   \              0x78 0x74    
   \       0x28   0x20 0x75          DC8 20H, 75H, 6EH, 6BH, 6EH, 6FH, 77H, 6EH
   \              0x6E 0x6B    
   \              0x6E 0x6F    
   \              0x77 0x6E    
   \       0x30   0x20 0x73          DC8 20H, 73H, 69H, 67H, 20H, 61H, 6CH, 67H
   \              0x69 0x67    
   \              0x20 0x61    
   \              0x6C 0x67    
   \       0x38   0x20 0x65          DC8 20H, 65H, 6EH, 63H, 6FH, 64H, 69H, 6EH
   \              0x6E 0x63    
   \              0x6F 0x64    
   \              0x69 0x6E    
   \       0x40   0x67 0x20          DC8 67H, 20H, 25H, 64H, 0
   \              0x25 0x64    
   \              0x00         
   \       0x45   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_7:
   \        0x0   0x63 0x6C          DC8 63H, 6CH, 69H, 65H, 6EH, 74H, 20H, 68H
   \              0x69 0x65    
   \              0x6E 0x74    
   \              0x20 0x68    
   \        0x8   0x65 0x6C          DC8 65H, 6CH, 6CH, 6FH, 20H, 76H, 33H, 2CH
   \              0x6C 0x6F    
   \              0x20 0x76    
   \              0x33 0x2C    
   \       0x10   0x20 0x73          DC8 20H, 73H, 69H, 67H, 6EH, 61H, 74H, 75H
   \              0x69 0x67    
   \              0x6E 0x61    
   \              0x74 0x75    
   \       0x18   0x72 0x65          DC8 72H, 65H, 5FH, 61H, 6CH, 67H, 6FH, 72H
   \              0x5F 0x61    
   \              0x6C 0x67    
   \              0x6F 0x72    
   \       0x20   0x69 0x74          DC8 69H, 74H, 68H, 6DH, 20H, 65H, 78H, 74H
   \              0x68 0x6D    
   \              0x20 0x65    
   \              0x78 0x74    
   \       0x28   0x3A 0x20          DC8 3AH, 20H, 75H, 6EH, 6BH, 6EH, 6FH, 77H
   \              0x75 0x6E    
   \              0x6B 0x6E    
   \              0x6F 0x77    
   \       0x30   0x6E 0x20          DC8 6EH, 20H, 68H, 61H, 73H, 68H, 20H, 61H
   \              0x68 0x61    
   \              0x73 0x68    
   \              0x20 0x61    
   \       0x38   0x6C 0x67          DC8 6CH, 67H, 20H, 65H, 6EH, 63H, 6FH, 64H
   \              0x20 0x65    
   \              0x6E 0x63    
   \              0x6F 0x64    
   \       0x40   0x69 0x6E          DC8 69H, 6EH, 67H, 20H, 25H, 64H, 0
   \              0x67 0x20    
   \              0x25 0x64    
   \              0x00         
   \       0x47   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_8:
   \        0x0   0x63 0x6C          DC8 63H, 6CH, 69H, 65H, 6EH, 74H, 20H, 68H
   \              0x69 0x65    
   \              0x6E 0x74    
   \              0x20 0x68    
   \        0x8   0x65 0x6C          DC8 65H, 6CH, 6CH, 6FH, 20H, 76H, 33H, 2CH
   \              0x6C 0x6F    
   \              0x20 0x76    
   \              0x33 0x2C    
   \       0x10   0x20 0x73          DC8 20H, 73H, 69H, 67H, 6EH, 61H, 74H, 75H
   \              0x69 0x67    
   \              0x6E 0x61    
   \              0x74 0x75    
   \       0x18   0x72 0x65          DC8 72H, 65H, 5FH, 61H, 6CH, 67H, 6FH, 72H
   \              0x5F 0x61    
   \              0x6C 0x67    
   \              0x6F 0x72    
   \       0x20   0x69 0x74          DC8 69H, 74H, 68H, 6DH, 20H, 65H, 78H, 74H
   \              0x68 0x6D    
   \              0x20 0x65    
   \              0x78 0x74    
   \       0x28   0x3A 0x20          DC8 3AH, 20H, 6DH, 61H, 74H, 63H, 68H, 20H
   \              0x6D 0x61    
   \              0x74 0x63    
   \              0x68 0x20    
   \       0x30   0x73 0x69          DC8 73H, 69H, 67H, 20H, 25H, 64H, 20H, 61H
   \              0x67 0x20    
   \              0x25 0x64    
   \              0x20 0x61    
   \       0x38   0x6E 0x64          DC8 6EH, 64H, 20H, 68H, 61H, 73H, 68H, 20H
   \              0x20 0x68    
   \              0x61 0x73    
   \              0x68 0x20    
   \       0x40   0x25 0x64          DC8 25H, 64H, 0
   \              0x00         
   \       0x43   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_9:
   \        0x0   0x63 0x6C          DC8 63H, 6CH, 69H, 65H, 6EH, 74H, 20H, 68H
   \              0x69 0x65    
   \              0x6E 0x74    
   \              0x20 0x68    
   \        0x8   0x65 0x6C          DC8 65H, 6CH, 6CH, 6FH, 20H, 76H, 33H, 2CH
   \              0x6C 0x6F    
   \              0x20 0x76    
   \              0x33 0x2C    
   \       0x10   0x20 0x73          DC8 20H, 73H, 69H, 67H, 6EH, 61H, 74H, 75H
   \              0x69 0x67    
   \              0x6E 0x61    
   \              0x74 0x75    
   \       0x18   0x72 0x65          DC8 72H, 65H, 5FH, 61H, 6CH, 67H, 6FH, 72H
   \              0x5F 0x61    
   \              0x6C 0x67    
   \              0x6F 0x72    
   \       0x20   0x69 0x74          DC8 69H, 74H, 68H, 6DH, 20H, 65H, 78H, 74H
   \              0x68 0x6D    
   \              0x20 0x65    
   \              0x78 0x74    
   \       0x28   0x3A 0x20          DC8 3AH, 20H, 68H, 61H, 73H, 68H, 20H, 61H
   \              0x68 0x61    
   \              0x73 0x68    
   \              0x20 0x61    
   \       0x30   0x6C 0x67          DC8 6CH, 67H, 20H, 25H, 64H, 20H, 6EH, 6FH
   \              0x20 0x25    
   \              0x64 0x20    
   \              0x6E 0x6F    
   \       0x38   0x74 0x20          DC8 74H, 20H, 73H, 75H, 70H, 70H, 6FH, 72H
   \              0x73 0x75    
   \              0x70 0x70    
   \              0x6F 0x72    
   \       0x40   0x74 0x65          DC8 74H, 65H, 64H, 0
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     ?_10:
   \        0x0   0x70 0x6F          DC8 "point format selected: %d"
   \              0x69 0x6E    
   \              0x74 0x20    
   \              0x66 0x6F    
   \              0x72 0x6D    
   \              0x61 0x74    
   \              0x20 0x73    
   \              0x65 0x6C    
   \              0x65 0x63    
   \              0x74 0x65    
   \              0x64 0x3A    
   \              0x20 0x25    
   \              0x64 0x00    
   \       0x1A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_11:
   \        0x0   0x74 0x69          DC8 "ticket length: %d"
   \              0x63 0x6B    
   \              0x65 0x74    
   \              0x20 0x6C    
   \              0x65 0x6E    
   \              0x67 0x74    
   \              0x68 0x3A    
   \              0x20 0x25    
   \              0x64 0x00    
   \       0x12   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_12:
   \        0x0   0x74 0x69          DC8 "ticket rejected: renegotiating"
   \              0x63 0x6B    
   \              0x65 0x74    
   \              0x20 0x72    
   \              0x65 0x6A    
   \              0x65 0x63    
   \              0x74 0x65    
   \              0x64 0x3A    
   \              0x20 0x72    
   \              0x65 0x6E    
   \              0x65 0x67    
   \              0x6F 0x74    
   \              0x69 0x61    
   \              0x74 0x69    
   \              0x6E 0x67    
   \              0x00         
   \       0x1F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_13:
   \        0x0   0x74 0x69          DC8 "ticket is not authentic"
   \              0x63 0x6B    
   \              0x65 0x74    
   \              0x20 0x69    
   \              0x73 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x61 0x75    
   \              0x74 0x68    
   \              0x65 0x6E    
   \              0x74 0x69    
   \              0x63 0x00    

   \                                 In section .rodata, align 4
   \                     ?_14:
   \        0x0   0x74 0x69          DC8 "ticket is expired"
   \              0x63 0x6B    
   \              0x65 0x74    
   \              0x20 0x69    
   \              0x73 0x20    
   \              0x65 0x78    
   \              0x70 0x69    
   \              0x72 0x65    
   \              0x64 0x00    
   \       0x12   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_15:
   \        0x0   0x6D 0x62          DC8 "mbedtls_ssl_ticket_parse"
   \              0x65 0x64    
   \              0x74 0x6C    
   \              0x73 0x5F    
   \              0x73 0x73    
   \              0x6C 0x5F    
   \              0x74 0x69    
   \              0x63 0x6B    
   \              0x65 0x74    
   \              0x5F 0x70    
   \              0x61 0x72    
   \              0x73 0x65    
   \              0x00         
   \       0x19   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_16:
   \        0x0   0x73 0x65          DC8 "session successfully restored from ticket"
   \              0x73 0x73    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x73 0x75    
   \              0x63 0x63    
   \              0x65 0x73    
   \              0x73 0x66    
   \              0x75 0x6C    
   \              0x6C 0x79    
   \              0x20 0x72    
   \              0x65 0x73    
   \              0x74 0x6F    
   \              0x72 0x65    
   \              0x64 0x20    
   \              0x66 0x72    
   \              0x6F 0x6D    
   \              0x20 0x74    
   \              0x69 0x63    
   \              0x6B 0x65    
   \              0x74 0x00    
   \       0x2A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_17:
   \        0x0   0x63 0x69          DC8 "ciphersuite requires certificate"
   \              0x70 0x68    
   \              0x65 0x72    
   \              0x73 0x75    
   \              0x69 0x74    
   \              0x65 0x20    
   \              0x72 0x65    
   \              0x71 0x75    
   \              0x69 0x72    
   \              0x65 0x73    
   \              0x20 0x63    
   \              0x65 0x72    
   \              0x74 0x69    
   \              0x66 0x69    
   \              0x63 0x61    
   \              0x74 0x65    
   \              0x00         
   \       0x21   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_18:
   \        0x0   0x73 0x65          DC8 "server has no certificate"
   \              0x72 0x76    
   \              0x65 0x72    
   \              0x20 0x68    
   \              0x61 0x73    
   \              0x20 0x6E    
   \              0x6F 0x20    
   \              0x63 0x65    
   \              0x72 0x74    
   \              0x69 0x66    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x65 0x00    
   \       0x1A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_19:
   \        0x0   0x63 0x61          DC8 "candidate certificate chain, certificate"
   \              0x6E 0x64    
   \              0x69 0x64    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x63 0x65    
   \              0x72 0x74    
   \              0x69 0x66    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x63 0x68    
   \              0x61 0x69    
   \              0x6E 0x2C    
   \              0x20 0x63    
   \              0x65 0x72    
   \              0x74 0x69    
   \              0x66 0x69    
   \              0x63 0x61    
   \              0x74 0x65    
   \              0x00         
   \       0x29   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_20:
   \        0x0   0x63 0x65          DC8 "certificate mismatch: key type"
   \              0x72 0x74    
   \              0x69 0x66    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x6D 0x69    
   \              0x73 0x6D    
   \              0x61 0x74    
   \              0x63 0x68    
   \              0x3A 0x20    
   \              0x6B 0x65    
   \              0x79 0x20    
   \              0x74 0x79    
   \              0x70 0x65    
   \              0x00         
   \       0x1F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_21:
   \        0x0   0x63 0x65          DC8 63H, 65H, 72H, 74H, 69H, 66H, 69H, 63H
   \              0x72 0x74    
   \              0x69 0x66    
   \              0x69 0x63    
   \        0x8   0x61 0x74          DC8 61H, 74H, 65H, 20H, 6DH, 69H, 73H, 6DH
   \              0x65 0x20    
   \              0x6D 0x69    
   \              0x73 0x6D    
   \       0x10   0x61 0x74          DC8 61H, 74H, 63H, 68H, 3AH, 20H, 28H, 65H
   \              0x63 0x68    
   \              0x3A 0x20    
   \              0x28 0x65    
   \       0x18   0x78 0x74          DC8 78H, 74H, 65H, 6EH, 64H, 65H, 64H, 29H
   \              0x65 0x6E    
   \              0x64 0x65    
   \              0x64 0x29    
   \       0x20   0x20 0x6B          DC8 20H, 6BH, 65H, 79H, 20H, 75H, 73H, 61H
   \              0x65 0x79    
   \              0x20 0x75    
   \              0x73 0x61    
   \       0x28   0x67 0x65          DC8 67H, 65H, 20H, 65H, 78H, 74H, 65H, 6EH
   \              0x20 0x65    
   \              0x78 0x74    
   \              0x65 0x6E    
   \       0x30   0x73 0x69          DC8 73H, 69H, 6FH, 6EH, 0
   \              0x6F 0x6E    
   \              0x00         
   \       0x35   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_22:
   \        0x0   0x63 0x65          DC8 "certificate mismatch: elliptic curve"
   \              0x72 0x74    
   \              0x69 0x66    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x6D 0x69    
   \              0x73 0x6D    
   \              0x61 0x74    
   \              0x63 0x68    
   \              0x3A 0x20    
   \              0x65 0x6C    
   \              0x6C 0x69    
   \              0x70 0x74    
   \              0x69 0x63    
   \              0x20 0x63    
   \              0x75 0x72    
   \              0x76 0x65    
   \              0x00         
   \       0x25   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_23:
   \        0x0   0x63 0x65          DC8 63H, 65H, 72H, 74H, 69H, 66H, 69H, 63H
   \              0x72 0x74    
   \              0x69 0x66    
   \              0x69 0x63    
   \        0x8   0x61 0x74          DC8 61H, 74H, 65H, 20H, 6EH, 6FH, 74H, 20H
   \              0x65 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \       0x10   0x70 0x72          DC8 70H, 72H, 65H, 66H, 65H, 72H, 72H, 65H
   \              0x65 0x66    
   \              0x65 0x72    
   \              0x72 0x65    
   \       0x18   0x64 0x3A          DC8 64H, 3AH, 20H, 73H, 68H, 61H, 2DH, 32H
   \              0x20 0x73    
   \              0x68 0x61    
   \              0x2D 0x32    
   \       0x20   0x20 0x77          DC8 20H, 77H, 69H, 74H, 68H, 20H, 70H, 72H
   \              0x69 0x74    
   \              0x68 0x20    
   \              0x70 0x72    
   \       0x28   0x65 0x2D          DC8 65H, 2DH, 54H, 4CH, 53H, 20H, 31H, 2EH
   \              0x54 0x4C    
   \              0x53 0x20    
   \              0x31 0x2E    
   \       0x30   0x32 0x20          DC8 32H, 20H, 63H, 6CH, 69H, 65H, 6EH, 74H
   \              0x63 0x6C    
   \              0x69 0x65    
   \              0x6E 0x74    
   \       0x38   0x00               DC8 0
   \       0x39   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_24:
   \        0x0   0x73 0x65          DC8 "selected certificate chain, certificate"
   \              0x6C 0x65    
   \              0x63 0x74    
   \              0x65 0x64    
   \              0x20 0x63    
   \              0x65 0x72    
   \              0x74 0x69    
   \              0x66 0x69    
   \              0x63 0x61    
   \              0x74 0x65    
   \              0x20 0x63    
   \              0x68 0x61    
   \              0x69 0x6E    
   \              0x2C 0x20    
   \              0x63 0x65    
   \              0x72 0x74    
   \              0x69 0x66    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x65 0x00    

   \                                 In section .rodata, align 4
   \                     ?_25:
   \        0x0   0x73 0x68          DC8 "should never happen"
   \              0x6F 0x75    
   \              0x6C 0x64    
   \              0x20 0x6E    
   \              0x65 0x76    
   \              0x65 0x72    
   \              0x20 0x68    
   \              0x61 0x70    
   \              0x70 0x65    
   \              0x6E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_26:
   \        0x0   0x74 0x72          DC8 "trying ciphersuite: %s"
   \              0x79 0x69    
   \              0x6E 0x67    
   \              0x20 0x63    
   \              0x69 0x70    
   \              0x68 0x65    
   \              0x72 0x73    
   \              0x75 0x69    
   \              0x74 0x65    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x00         
   \       0x17   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_27:
   \        0x0   0x63 0x69          DC8 "ciphersuite mismatch: version"
   \              0x70 0x68    
   \              0x65 0x72    
   \              0x73 0x75    
   \              0x69 0x74    
   \              0x65 0x20    
   \              0x6D 0x69    
   \              0x73 0x6D    
   \              0x61 0x74    
   \              0x63 0x68    
   \              0x3A 0x20    
   \              0x76 0x65    
   \              0x72 0x73    
   \              0x69 0x6F    
   \              0x6E 0x00    
   \       0x1E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_28:
   \        0x0   0x63 0x69          DC8 "ciphersuite mismatch: no common elliptic curve"
   \              0x70 0x68    
   \              0x65 0x72    
   \              0x73 0x75    
   \              0x69 0x74    
   \              0x65 0x20    
   \              0x6D 0x69    
   \              0x73 0x6D    
   \              0x61 0x74    
   \              0x63 0x68    
   \              0x3A 0x20    
   \              0x6E 0x6F    
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x6F    
   \              0x6E 0x20    
   \              0x65 0x6C    
   \              0x6C 0x69    
   \              0x70 0x74    
   \              0x69 0x63    
   \              0x20 0x63    
   \              0x75 0x72    
   \              0x76 0x65    
   \              0x00         
   \       0x2F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_29:
   \        0x0   0x63 0x69          DC8 "ciphersuite mismatch: no pre-shared key"
   \              0x70 0x68    
   \              0x65 0x72    
   \              0x73 0x75    
   \              0x69 0x74    
   \              0x65 0x20    
   \              0x6D 0x69    
   \              0x73 0x6D    
   \              0x61 0x74    
   \              0x63 0x68    
   \              0x3A 0x20    
   \              0x6E 0x6F    
   \              0x20 0x70    
   \              0x72 0x65    
   \              0x2D 0x73    
   \              0x68 0x61    
   \              0x72 0x65    
   \              0x64 0x20    
   \              0x6B 0x65    
   \              0x79 0x00    

   \                                 In section .rodata, align 4
   \                     ?_30:
   \        0x0   0x63 0x69          DC8 63H, 69H, 70H, 68H, 65H, 72H, 73H, 75H
   \              0x70 0x68    
   \              0x65 0x72    
   \              0x73 0x75    
   \        0x8   0x69 0x74          DC8 69H, 74H, 65H, 20H, 6DH, 69H, 73H, 6DH
   \              0x65 0x20    
   \              0x6D 0x69    
   \              0x73 0x6D    
   \       0x10   0x61 0x74          DC8 61H, 74H, 63H, 68H, 3AH, 20H, 6EH, 6FH
   \              0x63 0x68    
   \              0x3A 0x20    
   \              0x6E 0x6F    
   \       0x18   0x20 0x73          DC8 20H, 73H, 75H, 69H, 74H, 61H, 62H, 6CH
   \              0x75 0x69    
   \              0x74 0x61    
   \              0x62 0x6C    
   \       0x20   0x65 0x20          DC8 65H, 20H, 68H, 61H, 73H, 68H, 20H, 61H
   \              0x68 0x61    
   \              0x73 0x68    
   \              0x20 0x61    
   \       0x28   0x6C 0x67          DC8 6CH, 67H, 6FH, 72H, 69H, 74H, 68H, 6DH
   \              0x6F 0x72    
   \              0x69 0x74    
   \              0x68 0x6D    
   \       0x30   0x20 0x66          DC8 20H, 66H, 6FH, 72H, 20H, 73H, 69H, 67H
   \              0x6F 0x72    
   \              0x20 0x73    
   \              0x69 0x67    
   \       0x38   0x6E 0x61          DC8 6EH, 61H, 74H, 75H, 72H, 65H, 20H, 61H
   \              0x74 0x75    
   \              0x72 0x65    
   \              0x20 0x61    
   \       0x40   0x6C 0x67          DC8 6CH, 67H, 6FH, 72H, 69H, 74H, 68H, 6DH
   \              0x6F 0x72    
   \              0x69 0x74    
   \              0x68 0x6D    
   \       0x48   0x20 0x25          DC8 20H, 25H, 64H, 0
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     ?_31:
   \        0x0   0x63 0x69          DC8 "ciphersuite mismatch: no suitable certificate"
   \              0x70 0x68    
   \              0x65 0x72    
   \              0x73 0x75    
   \              0x69 0x74    
   \              0x65 0x20    
   \              0x6D 0x69    
   \              0x73 0x6D    
   \              0x61 0x74    
   \              0x63 0x68    
   \              0x3A 0x20    
   \              0x6E 0x6F    
   \              0x20 0x73    
   \              0x75 0x69    
   \              0x74 0x61    
   \              0x62 0x6C    
   \              0x65 0x20    
   \              0x63 0x65    
   \              0x72 0x74    
   \              0x69 0x66    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x65 0x00    
   \       0x2E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_32:
   \        0x0   0x3D 0x3E          DC8 "=> parse client hello"
   \              0x20 0x70    
   \              0x61 0x72    
   \              0x73 0x65    
   \              0x20 0x63    
   \              0x6C 0x69    
   \              0x65 0x6E    
   \              0x74 0x20    
   \              0x68 0x65    
   \              0x6C 0x6C    
   \              0x6F 0x00    
   \       0x16   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_33:
   \        0x0   0x6D 0x62          DC8 "mbedtls_ssl_fetch_input"
   \              0x65 0x64    
   \              0x74 0x6C    
   \              0x73 0x5F    
   \              0x73 0x73    
   \              0x6C 0x5F    
   \              0x66 0x65    
   \              0x74 0x63    
   \              0x68 0x5F    
   \              0x69 0x6E    
   \              0x70 0x75    
   \              0x74 0x00    

   \                                 In section .rodata, align 4
   \                     ?_34:
   \        0x0   0x72 0x65          DC8 "record header"
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x20 0x68    
   \              0x65 0x61    
   \              0x64 0x65    
   \              0x72 0x00    
   \        0xE   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_35:
   \        0x0   0x63 0x6C          DC8 "client hello v3, message type: %d"
   \              0x69 0x65    
   \              0x6E 0x74    
   \              0x20 0x68    
   \              0x65 0x6C    
   \              0x6C 0x6F    
   \              0x20 0x76    
   \              0x33 0x2C    
   \              0x20 0x6D    
   \              0x65 0x73    
   \              0x73 0x61    
   \              0x67 0x65    
   \              0x20 0x74    
   \              0x79 0x70    
   \              0x65 0x3A    
   \              0x20 0x25    
   \              0x64 0x00    
   \       0x22   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_36:
   \        0x0   0x63 0x6C          DC8 "client hello v3, message len.: %d"
   \              0x69 0x65    
   \              0x6E 0x74    
   \              0x20 0x68    
   \              0x65 0x6C    
   \              0x6C 0x6F    
   \              0x20 0x76    
   \              0x33 0x2C    
   \              0x20 0x6D    
   \              0x65 0x73    
   \              0x73 0x61    
   \              0x67 0x65    
   \              0x20 0x6C    
   \              0x65 0x6E    
   \              0x2E 0x3A    
   \              0x20 0x25    
   \              0x64 0x00    
   \       0x22   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_37:
   \        0x0   0x63 0x6C          DC8 "client hello v3, protocol version: [%d:%d]"
   \              0x69 0x65    
   \              0x6E 0x74    
   \              0x20 0x68    
   \              0x65 0x6C    
   \              0x6C 0x6F    
   \              0x20 0x76    
   \              0x33 0x2C    
   \              0x20 0x70    
   \              0x72 0x6F    
   \              0x74 0x6F    
   \              0x63 0x6F    
   \              0x6C 0x20    
   \              0x76 0x65    
   \              0x72 0x73    
   \              0x69 0x6F    
   \              0x6E 0x3A    
   \              0x20 0x5B    
   \              0x25 0x64    
   \              0x3A 0x25    
   \              0x64 0x5D    
   \              0x00         
   \       0x2B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_38:
   \        0x0   0x72 0x65          DC8 "replayed record, discarding"
   \              0x70 0x6C    
   \              0x61 0x79    
   \              0x65 0x64    
   \              0x20 0x72    
   \              0x65 0x63    
   \              0x6F 0x72    
   \              0x64 0x2C    
   \              0x20 0x64    
   \              0x69 0x73    
   \              0x63 0x61    
   \              0x72 0x64    
   \              0x69 0x6E    
   \              0x67 0x00    

   \                                 In section .rodata, align 4
   \                     ?_39:
   \        0x0   0x72 0x65          DC8 "record contents"
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x20 0x63    
   \              0x6F 0x6E    
   \              0x74 0x65    
   \              0x6E 0x74    
   \              0x73 0x00    

   \                                 In section .rodata, align 4
   \                     ?_40:
   \        0x0   0x63 0x6C          DC8 "client hello v3, handshake type: %d"
   \              0x69 0x65    
   \              0x6E 0x74    
   \              0x20 0x68    
   \              0x65 0x6C    
   \              0x6C 0x6F    
   \              0x20 0x76    
   \              0x33 0x2C    
   \              0x20 0x68    
   \              0x61 0x6E    
   \              0x64 0x73    
   \              0x68 0x61    
   \              0x6B 0x65    
   \              0x20 0x74    
   \              0x79 0x70    
   \              0x65 0x3A    
   \              0x20 0x25    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     ?_41:
   \        0x0   0x63 0x6C          DC8 "client hello v3, handshake len.: %d"
   \              0x69 0x65    
   \              0x6E 0x74    
   \              0x20 0x68    
   \              0x65 0x6C    
   \              0x6C 0x6F    
   \              0x20 0x76    
   \              0x33 0x2C    
   \              0x20 0x68    
   \              0x61 0x6E    
   \              0x64 0x73    
   \              0x68 0x61    
   \              0x6B 0x65    
   \              0x20 0x6C    
   \              0x65 0x6E    
   \              0x2E 0x3A    
   \              0x20 0x25    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     ?_42:
   \        0x0   0x62 0x61          DC8 "bad client hello message_seq: %d (expected %d)"
   \              0x64 0x20    
   \              0x63 0x6C    
   \              0x69 0x65    
   \              0x6E 0x74    
   \              0x20 0x68    
   \              0x65 0x6C    
   \              0x6C 0x6F    
   \              0x20 0x6D    
   \              0x65 0x73    
   \              0x73 0x61    
   \              0x67 0x65    
   \              0x5F 0x73    
   \              0x65 0x71    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x20 0x28    
   \              0x65 0x78    
   \              0x70 0x65    
   \              0x63 0x74    
   \              0x65 0x64    
   \              0x20 0x25    
   \              0x64 0x29    
   \              0x00         
   \       0x2F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_43:
   \        0x0   0x43 0x6C          DC8 "ClientHello fragmentation not supported"
   \              0x69 0x65    
   \              0x6E 0x74    
   \              0x48 0x65    
   \              0x6C 0x6C    
   \              0x6F 0x20    
   \              0x66 0x72    
   \              0x61 0x67    
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x73 0x75    
   \              0x70 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     ?_44:
   \        0x0   0x63 0x6C          DC8 "client hello, version"
   \              0x69 0x65    
   \              0x6E 0x74    
   \              0x20 0x68    
   \              0x65 0x6C    
   \              0x6C 0x6F    
   \              0x2C 0x20    
   \              0x76 0x65    
   \              0x72 0x73    
   \              0x69 0x6F    
   \              0x6E 0x00    
   \       0x16   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_45:
   \        0x0   0x63 0x6C          DC8 63H, 6CH, 69H, 65H, 6EH, 74H, 20H, 6FH
   \              0x69 0x65    
   \              0x6E 0x74    
   \              0x20 0x6F    
   \        0x8   0x6E 0x6C          DC8 6EH, 6CH, 79H, 20H, 73H, 75H, 70H, 70H
   \              0x79 0x20    
   \              0x73 0x75    
   \              0x70 0x70    
   \       0x10   0x6F 0x72          DC8 6FH, 72H, 74H, 73H, 20H, 73H, 73H, 6CH
   \              0x74 0x73    
   \              0x20 0x73    
   \              0x73 0x6C    
   \       0x18   0x20 0x73          DC8 20H, 73H, 6DH, 61H, 6CH, 6CH, 65H, 72H
   \              0x6D 0x61    
   \              0x6C 0x6C    
   \              0x65 0x72    
   \       0x20   0x20 0x74          DC8 20H, 74H, 68H, 61H, 6EH, 20H, 6DH, 69H
   \              0x68 0x61    
   \              0x6E 0x20    
   \              0x6D 0x69    
   \       0x28   0x6E 0x69          DC8 6EH, 69H, 6DH, 75H, 6DH, 20H, 5BH, 25H
   \              0x6D 0x75    
   \              0x6D 0x20    
   \              0x5B 0x25    
   \       0x30   0x64 0x3A          DC8 64H, 3AH, 25H, 64H, 5DH, 20H, 3CH, 20H
   \              0x25 0x64    
   \              0x5D 0x20    
   \              0x3C 0x20    
   \       0x38   0x5B 0x25          DC8 5BH, 25H, 64H, 3AH, 25H, 64H, 5DH, 0
   \              0x64 0x3A    
   \              0x25 0x64    
   \              0x5D 0x00    

   \                                 In section .rodata, align 4
   \                     ?_46:
   \        0x0   0x63 0x6C          DC8 "client hello, random bytes"
   \              0x69 0x65    
   \              0x6E 0x74    
   \              0x20 0x68    
   \              0x65 0x6C    
   \              0x6C 0x6F    
   \              0x2C 0x20    
   \              0x72 0x61    
   \              0x6E 0x64    
   \              0x6F 0x6D    
   \              0x20 0x62    
   \              0x79 0x74    
   \              0x65 0x73    
   \              0x00         
   \       0x1B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_47:
   \        0x0   0x63 0x6C          DC8 "client hello, session id"
   \              0x69 0x65    
   \              0x6E 0x74    
   \              0x20 0x68    
   \              0x65 0x6C    
   \              0x6C 0x6F    
   \              0x2C 0x20    
   \              0x73 0x65    
   \              0x73 0x73    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x69 0x64    
   \              0x00         
   \       0x19   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_48:
   \        0x0   0x63 0x6C          DC8 "client hello, cookie"
   \              0x69 0x65    
   \              0x6E 0x74    
   \              0x20 0x68    
   \              0x65 0x6C    
   \              0x6C 0x6F    
   \              0x2C 0x20    
   \              0x63 0x6F    
   \              0x6F 0x6B    
   \              0x69 0x65    
   \              0x00         
   \       0x15   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_49:
   \        0x0   0x63 0x6F          DC8 "cookie verification failed"
   \              0x6F 0x6B    
   \              0x69 0x65    
   \              0x20 0x76    
   \              0x65 0x72    
   \              0x69 0x66    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x66 0x61    
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x00         
   \       0x1B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_50:
   \        0x0   0x63 0x6F          DC8 "cookie verification passed"
   \              0x6F 0x6B    
   \              0x69 0x65    
   \              0x20 0x76    
   \              0x65 0x72    
   \              0x69 0x66    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x70 0x61    
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x00         
   \       0x1B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_51:
   \        0x0   0x63 0x6F          DC8 "cookie verification skipped"
   \              0x6F 0x6B    
   \              0x69 0x65    
   \              0x20 0x76    
   \              0x65 0x72    
   \              0x69 0x66    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x73 0x6B    
   \              0x69 0x70    
   \              0x70 0x65    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     ?_52:
   \        0x0   0x63 0x6C          DC8 "client hello, ciphersuitelist"
   \              0x69 0x65    
   \              0x6E 0x74    
   \              0x20 0x68    
   \              0x65 0x6C    
   \              0x6C 0x6F    
   \              0x2C 0x20    
   \              0x63 0x69    
   \              0x70 0x68    
   \              0x65 0x72    
   \              0x73 0x75    
   \              0x69 0x74    
   \              0x65 0x6C    
   \              0x69 0x73    
   \              0x74 0x00    
   \       0x1E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_53:
   \        0x0   0x63 0x6C          DC8 "client hello, compression"
   \              0x69 0x65    
   \              0x6E 0x74    
   \              0x20 0x68    
   \              0x65 0x6C    
   \              0x6C 0x6F    
   \              0x2C 0x20    
   \              0x63 0x6F    
   \              0x6D 0x70    
   \              0x72 0x65    
   \              0x73 0x73    
   \              0x69 0x6F    
   \              0x6E 0x00    
   \       0x1A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_54:
   \        0x0   0x63 0x6C          DC8 "client hello extensions"
   \              0x69 0x65    
   \              0x6E 0x74    
   \              0x20 0x68    
   \              0x65 0x6C    
   \              0x6C 0x6F    
   \              0x20 0x65    
   \              0x78 0x74    
   \              0x65 0x6E    
   \              0x73 0x69    
   \              0x6F 0x6E    
   \              0x73 0x00    

   \                                 In section .rodata, align 4
   \                     ?_55:
   \        0x0   0x66 0x6F          DC8 "found ServerName extension"
   \              0x75 0x6E    
   \              0x64 0x20    
   \              0x53 0x65    
   \              0x72 0x76    
   \              0x65 0x72    
   \              0x4E 0x61    
   \              0x6D 0x65    
   \              0x20 0x65    
   \              0x78 0x74    
   \              0x65 0x6E    
   \              0x73 0x69    
   \              0x6F 0x6E    
   \              0x00         
   \       0x1B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_56:
   \        0x0   0x66 0x6F          DC8 "found renegotiation extension"
   \              0x75 0x6E    
   \              0x64 0x20    
   \              0x72 0x65    
   \              0x6E 0x65    
   \              0x67 0x6F    
   \              0x74 0x69    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x65 0x78    
   \              0x74 0x65    
   \              0x6E 0x73    
   \              0x69 0x6F    
   \              0x6E 0x00    
   \       0x1E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_57:
   \        0x0   0x66 0x6F          DC8 "found signature_algorithms extension"
   \              0x75 0x6E    
   \              0x64 0x20    
   \              0x73 0x69    
   \              0x67 0x6E    
   \              0x61 0x74    
   \              0x75 0x72    
   \              0x65 0x5F    
   \              0x61 0x6C    
   \              0x67 0x6F    
   \              0x72 0x69    
   \              0x74 0x68    
   \              0x6D 0x73    
   \              0x20 0x65    
   \              0x78 0x74    
   \              0x65 0x6E    
   \              0x73 0x69    
   \              0x6F 0x6E    
   \              0x00         
   \       0x25   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_58:
   \        0x0   0x66 0x6F          DC8 "found supported elliptic curves extension"
   \              0x75 0x6E    
   \              0x64 0x20    
   \              0x73 0x75    
   \              0x70 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x20    
   \              0x65 0x6C    
   \              0x6C 0x69    
   \              0x70 0x74    
   \              0x69 0x63    
   \              0x20 0x63    
   \              0x75 0x72    
   \              0x76 0x65    
   \              0x73 0x20    
   \              0x65 0x78    
   \              0x74 0x65    
   \              0x6E 0x73    
   \              0x69 0x6F    
   \              0x6E 0x00    
   \       0x2A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_59:
   \        0x0   0x66 0x6F          DC8 "found supported point formats extension"
   \              0x75 0x6E    
   \              0x64 0x20    
   \              0x73 0x75    
   \              0x70 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x20    
   \              0x70 0x6F    
   \              0x69 0x6E    
   \              0x74 0x20    
   \              0x66 0x6F    
   \              0x72 0x6D    
   \              0x61 0x74    
   \              0x73 0x20    
   \              0x65 0x78    
   \              0x74 0x65    
   \              0x6E 0x73    
   \              0x69 0x6F    
   \              0x6E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_60:
   \        0x0   0x66 0x6F          DC8 "found max fragment length extension"
   \              0x75 0x6E    
   \              0x64 0x20    
   \              0x6D 0x61    
   \              0x78 0x20    
   \              0x66 0x72    
   \              0x61 0x67    
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x20 0x6C    
   \              0x65 0x6E    
   \              0x67 0x74    
   \              0x68 0x20    
   \              0x65 0x78    
   \              0x74 0x65    
   \              0x6E 0x73    
   \              0x69 0x6F    
   \              0x6E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_61:
   \        0x0   0x66 0x6F          DC8 "found truncated hmac extension"
   \              0x75 0x6E    
   \              0x64 0x20    
   \              0x74 0x72    
   \              0x75 0x6E    
   \              0x63 0x61    
   \              0x74 0x65    
   \              0x64 0x20    
   \              0x68 0x6D    
   \              0x61 0x63    
   \              0x20 0x65    
   \              0x78 0x74    
   \              0x65 0x6E    
   \              0x73 0x69    
   \              0x6F 0x6E    
   \              0x00         
   \       0x1F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_62:
   \        0x0   0x66 0x6F          DC8 "found encrypt then mac extension"
   \              0x75 0x6E    
   \              0x64 0x20    
   \              0x65 0x6E    
   \              0x63 0x72    
   \              0x79 0x70    
   \              0x74 0x20    
   \              0x74 0x68    
   \              0x65 0x6E    
   \              0x20 0x6D    
   \              0x61 0x63    
   \              0x20 0x65    
   \              0x78 0x74    
   \              0x65 0x6E    
   \              0x73 0x69    
   \              0x6F 0x6E    
   \              0x00         
   \       0x21   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_63:
   \        0x0   0x66 0x6F          DC8 "found extended master secret extension"
   \              0x75 0x6E    
   \              0x64 0x20    
   \              0x65 0x78    
   \              0x74 0x65    
   \              0x6E 0x64    
   \              0x65 0x64    
   \              0x20 0x6D    
   \              0x61 0x73    
   \              0x74 0x65    
   \              0x72 0x20    
   \              0x73 0x65    
   \              0x63 0x72    
   \              0x65 0x74    
   \              0x20 0x65    
   \              0x78 0x74    
   \              0x65 0x6E    
   \              0x73 0x69    
   \              0x6F 0x6E    
   \              0x00         
   \       0x27   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_64:
   \        0x0   0x66 0x6F          DC8 "found session ticket extension"
   \              0x75 0x6E    
   \              0x64 0x20    
   \              0x73 0x65    
   \              0x73 0x73    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x74 0x69    
   \              0x63 0x6B    
   \              0x65 0x74    
   \              0x20 0x65    
   \              0x78 0x74    
   \              0x65 0x6E    
   \              0x73 0x69    
   \              0x6F 0x6E    
   \              0x00         
   \       0x1F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_65:
   \        0x0   0x66 0x6F          DC8 "found alpn extension"
   \              0x75 0x6E    
   \              0x64 0x20    
   \              0x61 0x6C    
   \              0x70 0x6E    
   \              0x20 0x65    
   \              0x78 0x74    
   \              0x65 0x6E    
   \              0x73 0x69    
   \              0x6F 0x6E    
   \              0x00         
   \       0x15   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_66:
   \        0x0   0x75 0x6E          DC8 "unknown extension found: %d (ignoring)"
   \              0x6B 0x6E    
   \              0x6F 0x77    
   \              0x6E 0x20    
   \              0x65 0x78    
   \              0x74 0x65    
   \              0x6E 0x73    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x66 0x6F    
   \              0x75 0x6E    
   \              0x64 0x3A    
   \              0x20 0x25    
   \              0x64 0x20    
   \              0x28 0x69    
   \              0x67 0x6E    
   \              0x6F 0x72    
   \              0x69 0x6E    
   \              0x67 0x29    
   \              0x00         
   \       0x27   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_67:
   \        0x0   0x72 0x65          DC8 "received FALLBACK_SCSV"
   \              0x63 0x65    
   \              0x69 0x76    
   \              0x65 0x64    
   \              0x20 0x46    
   \              0x41 0x4C    
   \              0x4C 0x42    
   \              0x41 0x43    
   \              0x4B 0x5F    
   \              0x53 0x43    
   \              0x53 0x56    
   \              0x00         
   \       0x17   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_68:
   \        0x0   0x69 0x6E          DC8 "inapropriate fallback"
   \              0x61 0x70    
   \              0x72 0x6F    
   \              0x70 0x72    
   \              0x69 0x61    
   \              0x74 0x65    
   \              0x20 0x66    
   \              0x61 0x6C    
   \              0x6C 0x62    
   \              0x61 0x63    
   \              0x6B 0x00    
   \       0x16   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_69:
   \        0x0   0x72 0x65          DC8 "received TLS_EMPTY_RENEGOTIATION_INFO "
   \              0x63 0x65    
   \              0x69 0x76    
   \              0x65 0x64    
   \              0x20 0x54    
   \              0x4C 0x53    
   \              0x5F 0x45    
   \              0x4D 0x50    
   \              0x54 0x59    
   \              0x5F 0x52    
   \              0x45 0x4E    
   \              0x45 0x47    
   \              0x4F 0x54    
   \              0x49 0x41    
   \              0x54 0x49    
   \              0x4F 0x4E    
   \              0x5F 0x49    
   \              0x4E 0x46    
   \              0x4F 0x20    
   \              0x00         
   \       0x27   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_70:
   \        0x0   0x72 0x65          DC8 "received RENEGOTIATION SCSV during renegotiation"
   \              0x63 0x65    
   \              0x69 0x76    
   \              0x65 0x64    
   \              0x20 0x52    
   \              0x45 0x4E    
   \              0x45 0x47    
   \              0x4F 0x54    
   \              0x49 0x41    
   \              0x54 0x49    
   \              0x4F 0x4E    
   \              0x20 0x53    
   \              0x43 0x53    
   \              0x56 0x20    
   \              0x64 0x75    
   \              0x72 0x69    
   \              0x6E 0x67    
   \              0x20 0x72    
   \              0x65 0x6E    
   \              0x65 0x67    
   \              0x6F 0x74    
   \              0x69 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x00         
   \       0x31   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_71:
   \        0x0   0x6C 0x65          DC8 "legacy renegotiation, breaking off handshake"
   \              0x67 0x61    
   \              0x63 0x79    
   \              0x20 0x72    
   \              0x65 0x6E    
   \              0x65 0x67    
   \              0x6F 0x74    
   \              0x69 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x2C 0x20    
   \              0x62 0x72    
   \              0x65 0x61    
   \              0x6B 0x69    
   \              0x6E 0x67    
   \              0x20 0x6F    
   \              0x66 0x66    
   \              0x20 0x68    
   \              0x61 0x6E    
   \              0x64 0x73    
   \              0x68 0x61    
   \              0x6B 0x65    
   \              0x00         
   \       0x2D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_72:
   \        0x0   0x72 0x65          DC8 "renegotiation_info extension missing (secure)"
   \              0x6E 0x65    
   \              0x67 0x6F    
   \              0x74 0x69    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x5F    
   \              0x69 0x6E    
   \              0x66 0x6F    
   \              0x20 0x65    
   \              0x78 0x74    
   \              0x65 0x6E    
   \              0x73 0x69    
   \              0x6F 0x6E    
   \              0x20 0x6D    
   \              0x69 0x73    
   \              0x73 0x69    
   \              0x6E 0x67    
   \              0x20 0x28    
   \              0x73 0x65    
   \              0x63 0x75    
   \              0x72 0x65    
   \              0x29 0x00    
   \       0x2E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_73:
   \        0x0   0x6C 0x65          DC8 "legacy renegotiation not allowed"
   \              0x67 0x61    
   \              0x63 0x79    
   \              0x20 0x72    
   \              0x65 0x6E    
   \              0x65 0x67    
   \              0x6F 0x74    
   \              0x69 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x6E    
   \              0x6F 0x74    
   \              0x20 0x61    
   \              0x6C 0x6C    
   \              0x6F 0x77    
   \              0x65 0x64    
   \              0x00         
   \       0x21   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_74:
   \        0x0   0x72 0x65          DC8 "renegotiation_info extension present (legacy)"
   \              0x6E 0x65    
   \              0x67 0x6F    
   \              0x74 0x69    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x5F    
   \              0x69 0x6E    
   \              0x66 0x6F    
   \              0x20 0x65    
   \              0x78 0x74    
   \              0x65 0x6E    
   \              0x73 0x69    
   \              0x6F 0x6E    
   \              0x20 0x70    
   \              0x72 0x65    
   \              0x73 0x65    
   \              0x6E 0x74    
   \              0x20 0x28    
   \              0x6C 0x65    
   \              0x67 0x61    
   \              0x63 0x79    
   \              0x29 0x00    
   \       0x2E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_75:
   \        0x0   0x67 0x6F          DC8 67H, 6FH, 74H, 20H, 63H, 69H, 70H, 68H
   \              0x74 0x20    
   \              0x63 0x69    
   \              0x70 0x68    
   \        0x8   0x65 0x72          DC8 65H, 72H, 73H, 75H, 69H, 74H, 65H, 73H
   \              0x73 0x75    
   \              0x69 0x74    
   \              0x65 0x73    
   \       0x10   0x20 0x69          DC8 20H, 69H, 6EH, 20H, 63H, 6FH, 6DH, 6DH
   \              0x6E 0x20    
   \              0x63 0x6F    
   \              0x6D 0x6D    
   \       0x18   0x6F 0x6E          DC8 6FH, 6EH, 2CH, 20H, 62H, 75H, 74H, 20H
   \              0x2C 0x20    
   \              0x62 0x75    
   \              0x74 0x20    
   \       0x20   0x6E 0x6F          DC8 6EH, 6FH, 6EH, 65H, 20H, 6FH, 66H, 20H
   \              0x6E 0x65    
   \              0x20 0x6F    
   \              0x66 0x20    
   \       0x28   0x74 0x68          DC8 74H, 68H, 65H, 6DH, 20H, 75H, 73H, 61H
   \              0x65 0x6D    
   \              0x20 0x75    
   \              0x73 0x61    
   \       0x30   0x62 0x6C          DC8 62H, 6CH, 65H, 0
   \              0x65 0x00    

   \                                 In section .rodata, align 4
   \                     ?_76:
   \        0x0   0x67 0x6F          DC8 "got no ciphersuites in common"
   \              0x74 0x20    
   \              0x6E 0x6F    
   \              0x20 0x63    
   \              0x69 0x70    
   \              0x68 0x65    
   \              0x72 0x73    
   \              0x75 0x69    
   \              0x74 0x65    
   \              0x73 0x20    
   \              0x69 0x6E    
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x6F    
   \              0x6E 0x00    
   \       0x1E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_77:
   \        0x0   0x73 0x65          DC8 "selected ciphersuite: %s"
   \              0x6C 0x65    
   \              0x63 0x74    
   \              0x65 0x64    
   \              0x20 0x63    
   \              0x69 0x70    
   \              0x68 0x65    
   \              0x72 0x73    
   \              0x75 0x69    
   \              0x74 0x65    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x00         
   \       0x19   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_78:
   \        0x0   0x63 0x6C          DC8 "client hello v3, signature_algorithm ext: %d"
   \              0x69 0x65    
   \              0x6E 0x74    
   \              0x20 0x68    
   \              0x65 0x6C    
   \              0x6C 0x6F    
   \              0x20 0x76    
   \              0x33 0x2C    
   \              0x20 0x73    
   \              0x69 0x67    
   \              0x6E 0x61    
   \              0x74 0x75    
   \              0x72 0x65    
   \              0x5F 0x61    
   \              0x6C 0x67    
   \              0x6F 0x72    
   \              0x69 0x74    
   \              0x68 0x6D    
   \              0x20 0x65    
   \              0x78 0x74    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x00         
   \       0x2D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_79:
   \        0x0   0x6E 0x6F          DC8 6EH, 6FH, 20H, 68H, 61H, 73H, 68H, 20H
   \              0x20 0x68    
   \              0x61 0x73    
   \              0x68 0x20    
   \        0x8   0x61 0x6C          DC8 61H, 6CH, 67H, 6FH, 72H, 69H, 74H, 68H
   \              0x67 0x6F    
   \              0x72 0x69    
   \              0x74 0x68    
   \       0x10   0x6D 0x20          DC8 6DH, 20H, 66H, 6FH, 72H, 20H, 73H, 69H
   \              0x66 0x6F    
   \              0x72 0x20    
   \              0x73 0x69    
   \       0x18   0x67 0x6E          DC8 67H, 6EH, 61H, 74H, 75H, 72H, 65H, 20H
   \              0x61 0x74    
   \              0x75 0x72    
   \              0x65 0x20    
   \       0x20   0x61 0x6C          DC8 61H, 6CH, 67H, 6FH, 72H, 69H, 74H, 68H
   \              0x67 0x6F    
   \              0x72 0x69    
   \              0x74 0x68    
   \       0x28   0x6D 0x20          DC8 6DH, 20H, 25H, 64H, 20H, 2DH, 20H, 73H
   \              0x25 0x64    
   \              0x20 0x2D    
   \              0x20 0x73    
   \       0x30   0x68 0x6F          DC8 68H, 6FH, 75H, 6CH, 64H, 20H, 6EH, 6FH
   \              0x75 0x6C    
   \              0x64 0x20    
   \              0x6E 0x6F    
   \       0x38   0x74 0x20          DC8 74H, 20H, 68H, 61H, 70H, 70H, 65H, 6EH
   \              0x68 0x61    
   \              0x70 0x70    
   \              0x65 0x6E    
   \       0x40   0x00               DC8 0
   \       0x41   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_80:
   \        0x0   0x3C 0x3D          DC8 "<= parse client hello"
   \              0x20 0x70    
   \              0x61 0x72    
   \              0x73 0x65    
   \              0x20 0x63    
   \              0x6C 0x69    
   \              0x65 0x6E    
   \              0x74 0x20    
   \              0x68 0x65    
   \              0x6C 0x6C    
   \              0x6F 0x00    
   \       0x16   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_81:
   \        0x0   0x73 0x65          DC8 "server hello, adding truncated hmac extension"
   \              0x72 0x76    
   \              0x65 0x72    
   \              0x20 0x68    
   \              0x65 0x6C    
   \              0x6C 0x6F    
   \              0x2C 0x20    
   \              0x61 0x64    
   \              0x64 0x69    
   \              0x6E 0x67    
   \              0x20 0x74    
   \              0x72 0x75    
   \              0x6E 0x63    
   \              0x61 0x74    
   \              0x65 0x64    
   \              0x20 0x68    
   \              0x6D 0x61    
   \              0x63 0x20    
   \              0x65 0x78    
   \              0x74 0x65    
   \              0x6E 0x73    
   \              0x69 0x6F    
   \              0x6E 0x00    
   \       0x2E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_82:
   \        0x0   0x73 0x65          DC8 "server hello, adding encrypt then mac extension"
   \              0x72 0x76    
   \              0x65 0x72    
   \              0x20 0x68    
   \              0x65 0x6C    
   \              0x6C 0x6F    
   \              0x2C 0x20    
   \              0x61 0x64    
   \              0x64 0x69    
   \              0x6E 0x67    
   \              0x20 0x65    
   \              0x6E 0x63    
   \              0x72 0x79    
   \              0x70 0x74    
   \              0x20 0x74    
   \              0x68 0x65    
   \              0x6E 0x20    
   \              0x6D 0x61    
   \              0x63 0x20    
   \              0x65 0x78    
   \              0x74 0x65    
   \              0x6E 0x73    
   \              0x69 0x6F    
   \              0x6E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_83:
   \        0x0   0x73 0x65          DC8 73H, 65H, 72H, 76H, 65H, 72H, 20H, 68H
   \              0x72 0x76    
   \              0x65 0x72    
   \              0x20 0x68    
   \        0x8   0x65 0x6C          DC8 65H, 6CH, 6CH, 6FH, 2CH, 20H, 61H, 64H
   \              0x6C 0x6F    
   \              0x2C 0x20    
   \              0x61 0x64    
   \       0x10   0x64 0x69          DC8 64H, 69H, 6EH, 67H, 20H, 65H, 78H, 74H
   \              0x6E 0x67    
   \              0x20 0x65    
   \              0x78 0x74    
   \       0x18   0x65 0x6E          DC8 65H, 6EH, 64H, 65H, 64H, 20H, 6DH, 61H
   \              0x64 0x65    
   \              0x64 0x20    
   \              0x6D 0x61    
   \       0x20   0x73 0x74          DC8 73H, 74H, 65H, 72H, 20H, 73H, 65H, 63H
   \              0x65 0x72    
   \              0x20 0x73    
   \              0x65 0x63    
   \       0x28   0x72 0x65          DC8 72H, 65H, 74H, 20H, 65H, 78H, 74H, 65H
   \              0x74 0x20    
   \              0x65 0x78    
   \              0x74 0x65    
   \       0x30   0x6E 0x73          DC8 6EH, 73H, 69H, 6FH, 6EH, 0
   \              0x69 0x6F    
   \              0x6E 0x00    
   \       0x36   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_84:
   \        0x0   0x73 0x65          DC8 "server hello, adding session ticket extension"
   \              0x72 0x76    
   \              0x65 0x72    
   \              0x20 0x68    
   \              0x65 0x6C    
   \              0x6C 0x6F    
   \              0x2C 0x20    
   \              0x61 0x64    
   \              0x64 0x69    
   \              0x6E 0x67    
   \              0x20 0x73    
   \              0x65 0x73    
   \              0x73 0x69    
   \              0x6F 0x6E    
   \              0x20 0x74    
   \              0x69 0x63    
   \              0x6B 0x65    
   \              0x74 0x20    
   \              0x65 0x78    
   \              0x74 0x65    
   \              0x6E 0x73    
   \              0x69 0x6F    
   \              0x6E 0x00    
   \       0x2E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_85:
   \        0x0   0x73 0x65          DC8 "server hello, secure renegotiation extension"
   \              0x72 0x76    
   \              0x65 0x72    
   \              0x20 0x68    
   \              0x65 0x6C    
   \              0x6C 0x6F    
   \              0x2C 0x20    
   \              0x73 0x65    
   \              0x63 0x75    
   \              0x72 0x65    
   \              0x20 0x72    
   \              0x65 0x6E    
   \              0x65 0x67    
   \              0x6F 0x74    
   \              0x69 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x65    
   \              0x78 0x74    
   \              0x65 0x6E    
   \              0x73 0x69    
   \              0x6F 0x6E    
   \              0x00         
   \       0x2D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_86:
   \        0x0   0x73 0x65          DC8 "server hello, max_fragment_length extension"
   \              0x72 0x76    
   \              0x65 0x72    
   \              0x20 0x68    
   \              0x65 0x6C    
   \              0x6C 0x6F    
   \              0x2C 0x20    
   \              0x6D 0x61    
   \              0x78 0x5F    
   \              0x66 0x72    
   \              0x61 0x67    
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x5F 0x6C    
   \              0x65 0x6E    
   \              0x67 0x74    
   \              0x68 0x20    
   \              0x65 0x78    
   \              0x74 0x65    
   \              0x6E 0x73    
   \              0x69 0x6F    
   \              0x6E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_87:
   \        0x0   0x73 0x65          DC8 "server hello, supported_point_formats extension"
   \              0x72 0x76    
   \              0x65 0x72    
   \              0x20 0x68    
   \              0x65 0x6C    
   \              0x6C 0x6F    
   \              0x2C 0x20    
   \              0x73 0x75    
   \              0x70 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x5F    
   \              0x70 0x6F    
   \              0x69 0x6E    
   \              0x74 0x5F    
   \              0x66 0x6F    
   \              0x72 0x6D    
   \              0x61 0x74    
   \              0x73 0x20    
   \              0x65 0x78    
   \              0x74 0x65    
   \              0x6E 0x73    
   \              0x69 0x6F    
   \              0x6E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_88:
   \        0x0   0x73 0x65          DC8 "server hello, adding alpn extension"
   \              0x72 0x76    
   \              0x65 0x72    
   \              0x20 0x68    
   \              0x65 0x6C    
   \              0x6C 0x6F    
   \              0x2C 0x20    
   \              0x61 0x64    
   \              0x64 0x69    
   \              0x6E 0x67    
   \              0x20 0x61    
   \              0x6C 0x70    
   \              0x6E 0x20    
   \              0x65 0x78    
   \              0x74 0x65    
   \              0x6E 0x73    
   \              0x69 0x6F    
   \              0x6E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_89:
   \        0x0   0x3D 0x3E          DC8 "=> write hello verify request"
   \              0x20 0x77    
   \              0x72 0x69    
   \              0x74 0x65    
   \              0x20 0x68    
   \              0x65 0x6C    
   \              0x6C 0x6F    
   \              0x20 0x76    
   \              0x65 0x72    
   \              0x69 0x66    
   \              0x79 0x20    
   \              0x72 0x65    
   \              0x71 0x75    
   \              0x65 0x73    
   \              0x74 0x00    
   \       0x1E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_90:
   \        0x0   0x73 0x65          DC8 "server version"
   \              0x72 0x76    
   \              0x65 0x72    
   \              0x20 0x76    
   \              0x65 0x72    
   \              0x73 0x69    
   \              0x6F 0x6E    
   \              0x00         
   \        0xF   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_91:
   \        0x0   0x69 0x6E          DC8 "inconsistent cookie callbacks"
   \              0x63 0x6F    
   \              0x6E 0x73    
   \              0x69 0x73    
   \              0x74 0x65    
   \              0x6E 0x74    
   \              0x20 0x63    
   \              0x6F 0x6F    
   \              0x6B 0x69    
   \              0x65 0x20    
   \              0x63 0x61    
   \              0x6C 0x6C    
   \              0x62 0x61    
   \              0x63 0x6B    
   \              0x73 0x00    
   \       0x1E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_92:
   \        0x0   0x66 0x5F          DC8 "f_cookie_write"
   \              0x63 0x6F    
   \              0x6F 0x6B    
   \              0x69 0x65    
   \              0x5F 0x77    
   \              0x72 0x69    
   \              0x74 0x65    
   \              0x00         
   \        0xF   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_93:
   \        0x0   0x63 0x6F          DC8 "cookie sent"
   \              0x6F 0x6B    
   \              0x69 0x65    
   \              0x20 0x73    
   \              0x65 0x6E    
   \              0x74 0x00    

   \                                 In section .rodata, align 4
   \                     ?_94:
   \        0x0   0x6D 0x62          DC8 "mbedtls_ssl_write_handshake_msg"
   \              0x65 0x64    
   \              0x74 0x6C    
   \              0x73 0x5F    
   \              0x73 0x73    
   \              0x6C 0x5F    
   \              0x77 0x72    
   \              0x69 0x74    
   \              0x65 0x5F    
   \              0x68 0x61    
   \              0x6E 0x64    
   \              0x73 0x68    
   \              0x61 0x6B    
   \              0x65 0x5F    
   \              0x6D 0x73    
   \              0x67 0x00    

   \                                 In section .rodata, align 4
   \                     ?_95:
   \        0x0   0x6D 0x62          DC8 "mbedtls_ssl_flight_transmit"
   \              0x65 0x64    
   \              0x74 0x6C    
   \              0x73 0x5F    
   \              0x73 0x73    
   \              0x6C 0x5F    
   \              0x66 0x6C    
   \              0x69 0x67    
   \              0x68 0x74    
   \              0x5F 0x74    
   \              0x72 0x61    
   \              0x6E 0x73    
   \              0x6D 0x69    
   \              0x74 0x00    

   \                                 In section .rodata, align 4
   \                     ?_96:
   \        0x0   0x3C 0x3D          DC8 "<= write hello verify request"
   \              0x20 0x77    
   \              0x72 0x69    
   \              0x74 0x65    
   \              0x20 0x68    
   \              0x65 0x6C    
   \              0x6C 0x6F    
   \              0x20 0x76    
   \              0x65 0x72    
   \              0x69 0x66    
   \              0x79 0x20    
   \              0x72 0x65    
   \              0x71 0x75    
   \              0x65 0x73    
   \              0x74 0x00    
   \       0x1E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_97:
   \        0x0   0x3D 0x3E          DC8 "=> write server hello"
   \              0x20 0x77    
   \              0x72 0x69    
   \              0x74 0x65    
   \              0x20 0x73    
   \              0x65 0x72    
   \              0x76 0x65    
   \              0x72 0x20    
   \              0x68 0x65    
   \              0x6C 0x6C    
   \              0x6F 0x00    
   \       0x16   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_98:
   \        0x0   0x63 0x6C          DC8 "client hello was not authenticated"
   \              0x69 0x65    
   \              0x6E 0x74    
   \              0x20 0x68    
   \              0x65 0x6C    
   \              0x6C 0x6F    
   \              0x20 0x77    
   \              0x61 0x73    
   \              0x20 0x6E    
   \              0x6F 0x74    
   \              0x20 0x61    
   \              0x75 0x74    
   \              0x68 0x65    
   \              0x6E 0x74    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x65 0x64    
   \              0x00         
   \       0x23   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_99:
   \        0x0   0x3C 0x3D          DC8 "<= write server hello"
   \              0x20 0x77    
   \              0x72 0x69    
   \              0x74 0x65    
   \              0x20 0x73    
   \              0x65 0x72    
   \              0x76 0x65    
   \              0x72 0x20    
   \              0x68 0x65    
   \              0x6C 0x6C    
   \              0x6F 0x00    
   \       0x16   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_100:
   \        0x0   0x6E 0x6F          DC8 "no RNG provided"
   \              0x20 0x52    
   \              0x4E 0x47    
   \              0x20 0x70    
   \              0x72 0x6F    
   \              0x76 0x69    
   \              0x64 0x65    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     ?_101:
   \        0x0   0x73 0x65          DC8 "server hello, chosen version: [%d:%d]"
   \              0x72 0x76    
   \              0x65 0x72    
   \              0x20 0x68    
   \              0x65 0x6C    
   \              0x6C 0x6F    
   \              0x2C 0x20    
   \              0x63 0x68    
   \              0x6F 0x73    
   \              0x65 0x6E    
   \              0x20 0x76    
   \              0x65 0x72    
   \              0x73 0x69    
   \              0x6F 0x6E    
   \              0x3A 0x20    
   \              0x5B 0x25    
   \              0x64 0x3A    
   \              0x25 0x64    
   \              0x5D 0x00    
   \       0x26   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_102:
   \        0x0   0x73 0x65          DC8 "server hello, random bytes"
   \              0x72 0x76    
   \              0x65 0x72    
   \              0x20 0x68    
   \              0x65 0x6C    
   \              0x6C 0x6F    
   \              0x2C 0x20    
   \              0x72 0x61    
   \              0x6E 0x64    
   \              0x6F 0x6D    
   \              0x20 0x62    
   \              0x79 0x74    
   \              0x65 0x73    
   \              0x00         
   \       0x1B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_103:
   \        0x0   0x73 0x65          DC8 "session successfully restored from cache"
   \              0x73 0x73    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x73 0x75    
   \              0x63 0x63    
   \              0x65 0x73    
   \              0x73 0x66    
   \              0x75 0x6C    
   \              0x6C 0x79    
   \              0x20 0x72    
   \              0x65 0x73    
   \              0x74 0x6F    
   \              0x72 0x65    
   \              0x64 0x20    
   \              0x66 0x72    
   \              0x6F 0x6D    
   \              0x20 0x63    
   \              0x61 0x63    
   \              0x68 0x65    
   \              0x00         
   \       0x29   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_104:
   \        0x0   0x6D 0x62          DC8 "mbedtls_ssl_derive_keys"
   \              0x65 0x64    
   \              0x74 0x6C    
   \              0x73 0x5F    
   \              0x73 0x73    
   \              0x6C 0x5F    
   \              0x64 0x65    
   \              0x72 0x69    
   \              0x76 0x65    
   \              0x5F 0x6B    
   \              0x65 0x79    
   \              0x73 0x00    

   \                                 In section .rodata, align 4
   \                     ?_105:
   \        0x0   0x73 0x65          DC8 "server hello, session id len.: %d"
   \              0x72 0x76    
   \              0x65 0x72    
   \              0x20 0x68    
   \              0x65 0x6C    
   \              0x6C 0x6F    
   \              0x2C 0x20    
   \              0x73 0x65    
   \              0x73 0x73    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x69 0x64    
   \              0x20 0x6C    
   \              0x65 0x6E    
   \              0x2E 0x3A    
   \              0x20 0x25    
   \              0x64 0x00    
   \       0x22   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_106:
   \        0x0   0x73 0x65          DC8 "server hello, session id"
   \              0x72 0x76    
   \              0x65 0x72    
   \              0x20 0x68    
   \              0x65 0x6C    
   \              0x6C 0x6F    
   \              0x2C 0x20    
   \              0x73 0x65    
   \              0x73 0x73    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x69 0x64    
   \              0x00         
   \       0x19   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_107:
   \        0x0   0x25 0x73          DC8 "%s session has been resumed"
   \              0x20 0x73    
   \              0x65 0x73    
   \              0x73 0x69    
   \              0x6F 0x6E    
   \              0x20 0x68    
   \              0x61 0x73    
   \              0x20 0x62    
   \              0x65 0x65    
   \              0x6E 0x20    
   \              0x72 0x65    
   \              0x73 0x75    
   \              0x6D 0x65    
   \              0x64 0x00    

   \                                 In section .rodata, align 2
   \        0x0   0x61 0x00          DC8 "a"

   \                                 In section .rodata, align 4
   \        0x0   0x6E 0x6F          DC8 "no"
   \              0x00         
   \        0x3   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_110:
   \        0x0   0x73 0x65          DC8 "server hello, chosen ciphersuite: %s"
   \              0x72 0x76    
   \              0x65 0x72    
   \              0x20 0x68    
   \              0x65 0x6C    
   \              0x6C 0x6F    
   \              0x2C 0x20    
   \              0x63 0x68    
   \              0x6F 0x73    
   \              0x65 0x6E    
   \              0x20 0x63    
   \              0x69 0x70    
   \              0x68 0x65    
   \              0x72 0x73    
   \              0x75 0x69    
   \              0x74 0x65    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x00         
   \       0x25   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_111:
   \        0x0   0x73 0x65          DC8 "server hello, compress alg.: 0x%02X"
   \              0x72 0x76    
   \              0x65 0x72    
   \              0x20 0x68    
   \              0x65 0x6C    
   \              0x6C 0x6F    
   \              0x2C 0x20    
   \              0x63 0x6F    
   \              0x6D 0x70    
   \              0x72 0x65    
   \              0x73 0x73    
   \              0x20 0x61    
   \              0x6C 0x67    
   \              0x2E 0x3A    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x30 0x32    
   \              0x58 0x00    

   \                                 In section .rodata, align 4
   \                     ?_112:
   \        0x0   0x73 0x65          DC8 "server hello, total extension length: %d"
   \              0x72 0x76    
   \              0x65 0x72    
   \              0x20 0x68    
   \              0x65 0x6C    
   \              0x6C 0x6F    
   \              0x2C 0x20    
   \              0x74 0x6F    
   \              0x74 0x61    
   \              0x6C 0x20    
   \              0x65 0x78    
   \              0x74 0x65    
   \              0x6E 0x73    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x6C 0x65    
   \              0x6E 0x67    
   \              0x74 0x68    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x00         
   \       0x29   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_113:
   \        0x0   0x3D 0x3E          DC8 "=> write certificate request"
   \              0x20 0x77    
   \              0x72 0x69    
   \              0x74 0x65    
   \              0x20 0x63    
   \              0x65 0x72    
   \              0x74 0x69    
   \              0x66 0x69    
   \              0x63 0x61    
   \              0x74 0x65    
   \              0x20 0x72    
   \              0x65 0x71    
   \              0x75 0x65    
   \              0x73 0x74    
   \              0x00         
   \       0x1D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_114:
   \        0x0   0x3C 0x3D          DC8 "<= skip write certificate request"
   \              0x20 0x73    
   \              0x6B 0x69    
   \              0x70 0x20    
   \              0x77 0x72    
   \              0x69 0x74    
   \              0x65 0x20    
   \              0x63 0x65    
   \              0x72 0x74    
   \              0x69 0x66    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x72 0x65    
   \              0x71 0x75    
   \              0x65 0x73    
   \              0x74 0x00    
   \       0x22   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_115:
   \        0x0   0x73 0x6B          DC8 "skipping CAs: buffer too short"
   \              0x69 0x70    
   \              0x70 0x69    
   \              0x6E 0x67    
   \              0x20 0x43    
   \              0x41 0x73    
   \              0x3A 0x20    
   \              0x62 0x75    
   \              0x66 0x66    
   \              0x65 0x72    
   \              0x20 0x74    
   \              0x6F 0x6F    
   \              0x20 0x73    
   \              0x68 0x6F    
   \              0x72 0x74    
   \              0x00         
   \       0x1F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_116:
   \        0x0   0x72 0x65          DC8 "requested DN"
   \              0x71 0x75    
   \              0x65 0x73    
   \              0x74 0x65    
   \              0x64 0x20    
   \              0x44 0x4E    
   \              0x00         
   \        0xD   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_117:
   \        0x0   0x3C 0x3D          DC8 "<= write certificate request"
   \              0x20 0x77    
   \              0x72 0x69    
   \              0x74 0x65    
   \              0x20 0x63    
   \              0x65 0x72    
   \              0x74 0x69    
   \              0x66 0x69    
   \              0x63 0x61    
   \              0x74 0x65    
   \              0x20 0x72    
   \              0x65 0x71    
   \              0x75 0x65    
   \              0x73 0x74    
   \              0x00         
   \       0x1D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_118:
   \        0x0   0x73 0x65          DC8 "server key not ECDH capable"
   \              0x72 0x76    
   \              0x65 0x72    
   \              0x20 0x6B    
   \              0x65 0x79    
   \              0x20 0x6E    
   \              0x6F 0x74    
   \              0x20 0x45    
   \              0x43 0x44    
   \              0x48 0x20    
   \              0x63 0x61    
   \              0x70 0x61    
   \              0x62 0x6C    
   \              0x65 0x00    

   \                                 In section .rodata, align 4
   \                     ?_119:
   \        0x0   0x6D 0x62          DC8 "mbedtls_ecdh_get_params"
   \              0x65 0x64    
   \              0x74 0x6C    
   \              0x73 0x5F    
   \              0x65 0x63    
   \              0x64 0x68    
   \              0x5F 0x67    
   \              0x65 0x74    
   \              0x5F 0x70    
   \              0x61 0x72    
   \              0x61 0x6D    
   \              0x73 0x00    

   \                                 In section .rodata, align 4
   \                     ?_120:
   \        0x0   0x6E 0x6F          DC8 "no DH parameters set"
   \              0x20 0x44    
   \              0x48 0x20    
   \              0x70 0x61    
   \              0x72 0x61    
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x73    
   \              0x20 0x73    
   \              0x65 0x74    
   \              0x00         
   \       0x15   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_121:
   \        0x0   0x6D 0x62          DC8 "mbedtls_dhm_set_group"
   \              0x65 0x64    
   \              0x74 0x6C    
   \              0x73 0x5F    
   \              0x64 0x68    
   \              0x6D 0x5F    
   \              0x73 0x65    
   \              0x74 0x5F    
   \              0x67 0x72    
   \              0x6F 0x75    
   \              0x70 0x00    
   \       0x16   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_122:
   \        0x0   0x6D 0x62          DC8 "mbedtls_dhm_make_params"
   \              0x65 0x64    
   \              0x74 0x6C    
   \              0x73 0x5F    
   \              0x64 0x68    
   \              0x6D 0x5F    
   \              0x6D 0x61    
   \              0x6B 0x65    
   \              0x5F 0x70    
   \              0x61 0x72    
   \              0x61 0x6D    
   \              0x73 0x00    

   \                                 In section .rodata, align 4
   \                     ?_123:
   \        0x0   0x44 0x48          DC8 "DHM: X "
   \              0x4D 0x3A    
   \              0x20 0x58    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_124:
   \        0x0   0x44 0x48          DC8 "DHM: P "
   \              0x4D 0x3A    
   \              0x20 0x50    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_125:
   \        0x0   0x44 0x48          DC8 "DHM: G "
   \              0x4D 0x3A    
   \              0x20 0x47    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_126:
   \        0x0   0x44 0x48          DC8 "DHM: GX"
   \              0x4D 0x3A    
   \              0x20 0x47    
   \              0x58 0x00    

   \                                 In section .rodata, align 4
   \                     ?_127:
   \        0x0   0x6E 0x6F          DC8 "no matching curve for ECDHE"
   \              0x20 0x6D    
   \              0x61 0x74    
   \              0x63 0x68    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x63 0x75    
   \              0x72 0x76    
   \              0x65 0x20    
   \              0x66 0x6F    
   \              0x72 0x20    
   \              0x45 0x43    
   \              0x44 0x48    
   \              0x45 0x00    

   \                                 In section .rodata, align 4
   \                     ?_128:
   \        0x0   0x45 0x43          DC8 "ECDHE curve: %s"
   \              0x44 0x48    
   \              0x45 0x20    
   \              0x63 0x75    
   \              0x72 0x76    
   \              0x65 0x3A    
   \              0x20 0x25    
   \              0x73 0x00    

   \                                 In section .rodata, align 4
   \                     ?_129:
   \        0x0   0x6D 0x62          DC8 "mbedtls_ecp_group_load"
   \              0x65 0x64    
   \              0x74 0x6C    
   \              0x73 0x5F    
   \              0x65 0x63    
   \              0x70 0x5F    
   \              0x67 0x72    
   \              0x6F 0x75    
   \              0x70 0x5F    
   \              0x6C 0x6F    
   \              0x61 0x64    
   \              0x00         
   \       0x17   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_130:
   \        0x0   0x6D 0x62          DC8 "mbedtls_ecdh_make_params"
   \              0x65 0x64    
   \              0x74 0x6C    
   \              0x73 0x5F    
   \              0x65 0x63    
   \              0x64 0x68    
   \              0x5F 0x6D    
   \              0x61 0x6B    
   \              0x65 0x5F    
   \              0x70 0x61    
   \              0x72 0x61    
   \              0x6D 0x73    
   \              0x00         
   \       0x19   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_131:
   \        0x0   0x45 0x43          DC8 "ECDH: Q "
   \              0x44 0x48    
   \              0x3A 0x20    
   \              0x51 0x20    
   \              0x00         
   \        0x9   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_132:
   \        0x0   0x70 0x69          DC8 "pick hash algorithm %d for signing"
   \              0x63 0x6B    
   \              0x20 0x68    
   \              0x61 0x73    
   \              0x68 0x20    
   \              0x61 0x6C    
   \              0x67 0x6F    
   \              0x72 0x69    
   \              0x74 0x68    
   \              0x6D 0x20    
   \              0x25 0x64    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x20 0x73    
   \              0x69 0x67    
   \              0x6E 0x69    
   \              0x6E 0x67    
   \              0x00         
   \       0x23   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_133:
   \        0x0   0x70 0x61          DC8 "parameters hash"
   \              0x72 0x61    
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x73    
   \              0x20 0x68    
   \              0x61 0x73    
   \              0x68 0x00    

   \                                 In section .rodata, align 4
   \                     ?_134:
   \        0x0   0x67 0x6F          DC8 "got no private key"
   \              0x74 0x20    
   \              0x6E 0x6F    
   \              0x20 0x70    
   \              0x72 0x69    
   \              0x76 0x61    
   \              0x74 0x65    
   \              0x20 0x6B    
   \              0x65 0x79    
   \              0x00         
   \       0x13   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_135:
   \        0x0   0x6D 0x62          DC8 "mbedtls_pk_sign"
   \              0x65 0x64    
   \              0x74 0x6C    
   \              0x73 0x5F    
   \              0x70 0x6B    
   \              0x5F 0x73    
   \              0x69 0x67    
   \              0x6E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_136:
   \        0x0   0x3D 0x3E          DC8 "=> write server key exchange"
   \              0x20 0x77    
   \              0x72 0x69    
   \              0x74 0x65    
   \              0x20 0x73    
   \              0x65 0x72    
   \              0x76 0x65    
   \              0x72 0x20    
   \              0x6B 0x65    
   \              0x79 0x20    
   \              0x65 0x78    
   \              0x63 0x68    
   \              0x61 0x6E    
   \              0x67 0x65    
   \              0x00         
   \       0x1D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_137:
   \        0x0   0x3C 0x3D          DC8 "<= skip write server key exchange"
   \              0x20 0x73    
   \              0x6B 0x69    
   \              0x70 0x20    
   \              0x77 0x72    
   \              0x69 0x74    
   \              0x65 0x20    
   \              0x73 0x65    
   \              0x72 0x76    
   \              0x65 0x72    
   \              0x20 0x6B    
   \              0x65 0x79    
   \              0x20 0x65    
   \              0x78 0x63    
   \              0x68 0x61    
   \              0x6E 0x67    
   \              0x65 0x00    
   \       0x22   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_138:
   \        0x0   0x3C 0x3D          DC8 "<= write server key exchange (pending)"
   \              0x20 0x77    
   \              0x72 0x69    
   \              0x74 0x65    
   \              0x20 0x73    
   \              0x65 0x72    
   \              0x76 0x65    
   \              0x72 0x20    
   \              0x6B 0x65    
   \              0x79 0x20    
   \              0x65 0x78    
   \              0x63 0x68    
   \              0x61 0x6E    
   \              0x67 0x65    
   \              0x20 0x28    
   \              0x70 0x65    
   \              0x6E 0x64    
   \              0x69 0x6E    
   \              0x67 0x29    
   \              0x00         
   \       0x27   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_139:
   \        0x0   0x6D 0x79          DC8 "my signature"
   \              0x20 0x73    
   \              0x69 0x67    
   \              0x6E 0x61    
   \              0x74 0x75    
   \              0x72 0x65    
   \              0x00         
   \        0xD   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_140:
   \        0x0   0x3C 0x3D          DC8 "<= write server key exchange"
   \              0x20 0x77    
   \              0x72 0x69    
   \              0x74 0x65    
   \              0x20 0x73    
   \              0x65 0x72    
   \              0x76 0x65    
   \              0x72 0x20    
   \              0x6B 0x65    
   \              0x79 0x20    
   \              0x65 0x78    
   \              0x63 0x68    
   \              0x61 0x6E    
   \              0x67 0x65    
   \              0x00         
   \       0x1D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_141:
   \        0x0   0x3D 0x3E          DC8 "=> write server hello done"
   \              0x20 0x77    
   \              0x72 0x69    
   \              0x74 0x65    
   \              0x20 0x73    
   \              0x65 0x72    
   \              0x76 0x65    
   \              0x72 0x20    
   \              0x68 0x65    
   \              0x6C 0x6C    
   \              0x6F 0x20    
   \              0x64 0x6F    
   \              0x6E 0x65    
   \              0x00         
   \       0x1B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_142:
   \        0x0   0x3C 0x3D          DC8 "<= write server hello done"
   \              0x20 0x77    
   \              0x72 0x69    
   \              0x74 0x65    
   \              0x20 0x73    
   \              0x65 0x72    
   \              0x76 0x65    
   \              0x72 0x20    
   \              0x68 0x65    
   \              0x6C 0x6C    
   \              0x6F 0x20    
   \              0x64 0x6F    
   \              0x6E 0x65    
   \              0x00         
   \       0x1B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_143:
   \        0x0   0x62 0x61          DC8 "bad client key exchange message"
   \              0x64 0x20    
   \              0x63 0x6C    
   \              0x69 0x65    
   \              0x6E 0x74    
   \              0x20 0x6B    
   \              0x65 0x79    
   \              0x20 0x65    
   \              0x78 0x63    
   \              0x68 0x61    
   \              0x6E 0x67    
   \              0x65 0x20    
   \              0x6D 0x65    
   \              0x73 0x73    
   \              0x61 0x67    
   \              0x65 0x00    

   \                                 In section .rodata, align 4
   \                     ?_144:
   \        0x0   0x6D 0x62          DC8 "mbedtls_dhm_read_public"
   \              0x65 0x64    
   \              0x74 0x6C    
   \              0x73 0x5F    
   \              0x64 0x68    
   \              0x6D 0x5F    
   \              0x72 0x65    
   \              0x61 0x64    
   \              0x5F 0x70    
   \              0x75 0x62    
   \              0x6C 0x69    
   \              0x63 0x00    

   \                                 In section .rodata, align 4
   \                     ?_145:
   \        0x0   0x44 0x48          DC8 "DHM: GY"
   \              0x4D 0x3A    
   \              0x20 0x47    
   \              0x59 0x00    

   \                                 In section .rodata, align 4
   \                     ?_146:
   \        0x0   0x67 0x6F          DC8 "got no RSA private key"
   \              0x74 0x20    
   \              0x6E 0x6F    
   \              0x20 0x52    
   \              0x53 0x41    
   \              0x20 0x70    
   \              0x72 0x69    
   \              0x76 0x61    
   \              0x74 0x65    
   \              0x20 0x6B    
   \              0x65 0x79    
   \              0x00         
   \       0x17   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_147:
   \        0x0   0x67 0x6F          DC8 "got no pre-shared key"
   \              0x74 0x20    
   \              0x6E 0x6F    
   \              0x20 0x70    
   \              0x72 0x65    
   \              0x2D 0x73    
   \              0x68 0x61    
   \              0x72 0x65    
   \              0x64 0x20    
   \              0x6B 0x65    
   \              0x79 0x00    
   \       0x16   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_148:
   \        0x0   0x55 0x6E          DC8 "Unknown PSK identity"
   \              0x6B 0x6E    
   \              0x6F 0x77    
   \              0x6E 0x20    
   \              0x50 0x53    
   \              0x4B 0x20    
   \              0x69 0x64    
   \              0x65 0x6E    
   \              0x74 0x69    
   \              0x74 0x79    
   \              0x00         
   \       0x15   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_149:
   \        0x0   0x3D 0x3E          DC8 "=> parse client key exchange"
   \              0x20 0x70    
   \              0x61 0x72    
   \              0x73 0x65    
   \              0x20 0x63    
   \              0x6C 0x69    
   \              0x65 0x6E    
   \              0x74 0x20    
   \              0x6B 0x65    
   \              0x79 0x20    
   \              0x65 0x78    
   \              0x63 0x68    
   \              0x61 0x6E    
   \              0x67 0x65    
   \              0x00         
   \       0x1D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_150:
   \        0x0   0x6D 0x62          DC8 "mbedtls_ssl_read_record"
   \              0x65 0x64    
   \              0x74 0x6C    
   \              0x73 0x5F    
   \              0x73 0x73    
   \              0x6C 0x5F    
   \              0x72 0x65    
   \              0x61 0x64    
   \              0x5F 0x72    
   \              0x65 0x63    
   \              0x6F 0x72    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     ?_151:
   \        0x0   0x73 0x73          DC8 "ssl_parse_client_dh_public"
   \              0x6C 0x5F    
   \              0x70 0x61    
   \              0x72 0x73    
   \              0x65 0x5F    
   \              0x63 0x6C    
   \              0x69 0x65    
   \              0x6E 0x74    
   \              0x5F 0x64    
   \              0x68 0x5F    
   \              0x70 0x75    
   \              0x62 0x6C    
   \              0x69 0x63    
   \              0x00         
   \       0x1B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_152:
   \        0x0   0x62 0x61          DC8 "bad client key exchange"
   \              0x64 0x20    
   \              0x63 0x6C    
   \              0x69 0x65    
   \              0x6E 0x74    
   \              0x20 0x6B    
   \              0x65 0x79    
   \              0x20 0x65    
   \              0x78 0x63    
   \              0x68 0x61    
   \              0x6E 0x67    
   \              0x65 0x00    

   \                                 In section .rodata, align 4
   \                     ?_153:
   \        0x0   0x6D 0x62          DC8 "mbedtls_dhm_calc_secret"
   \              0x65 0x64    
   \              0x74 0x6C    
   \              0x73 0x5F    
   \              0x64 0x68    
   \              0x6D 0x5F    
   \              0x63 0x61    
   \              0x6C 0x63    
   \              0x5F 0x73    
   \              0x65 0x63    
   \              0x72 0x65    
   \              0x74 0x00    

   \                                 In section .rodata, align 4
   \                     ?_154:
   \        0x0   0x44 0x48          DC8 "DHM: K "
   \              0x4D 0x3A    
   \              0x20 0x4B    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_155:
   \        0x0   0x6D 0x62          DC8 "mbedtls_ecdh_read_public"
   \              0x65 0x64    
   \              0x74 0x6C    
   \              0x73 0x5F    
   \              0x65 0x63    
   \              0x64 0x68    
   \              0x5F 0x72    
   \              0x65 0x61    
   \              0x64 0x5F    
   \              0x70 0x75    
   \              0x62 0x6C    
   \              0x69 0x63    
   \              0x00         
   \       0x19   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_156:
   \        0x0   0x45 0x43          DC8 "ECDH: Qp "
   \              0x44 0x48    
   \              0x3A 0x20    
   \              0x51 0x70    
   \              0x20 0x00    
   \        0xA   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_157:
   \        0x0   0x6D 0x62          DC8 "mbedtls_ecdh_calc_secret"
   \              0x65 0x64    
   \              0x74 0x6C    
   \              0x73 0x5F    
   \              0x65 0x63    
   \              0x64 0x68    
   \              0x5F 0x63    
   \              0x61 0x6C    
   \              0x63 0x5F    
   \              0x73 0x65    
   \              0x63 0x72    
   \              0x65 0x74    
   \              0x00         
   \       0x19   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_158:
   \        0x0   0x45 0x43          DC8 "ECDH: z  "
   \              0x44 0x48    
   \              0x3A 0x20    
   \              0x7A 0x20    
   \              0x20 0x00    
   \        0xA   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_159:
   \        0x0   0x73 0x73          DC8 "ssl_parse_client_psk_identity"
   \              0x6C 0x5F    
   \              0x70 0x61    
   \              0x72 0x73    
   \              0x65 0x5F    
   \              0x63 0x6C    
   \              0x69 0x65    
   \              0x6E 0x74    
   \              0x5F 0x70    
   \              0x73 0x6B    
   \              0x5F 0x69    
   \              0x64 0x65    
   \              0x6E 0x74    
   \              0x69 0x74    
   \              0x79 0x00    
   \       0x1E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_160:
   \        0x0   0x6D 0x62          DC8 "mbedtls_ssl_psk_derive_premaster"
   \              0x65 0x64    
   \              0x74 0x6C    
   \              0x73 0x5F    
   \              0x73 0x73    
   \              0x6C 0x5F    
   \              0x70 0x73    
   \              0x6B 0x5F    
   \              0x64 0x65    
   \              0x72 0x69    
   \              0x76 0x65    
   \              0x5F 0x70    
   \              0x72 0x65    
   \              0x6D 0x61    
   \              0x73 0x74    
   \              0x65 0x72    
   \              0x00         
   \       0x21   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_161:
   \        0x0   0x73 0x73          DC8 "ssl_parse_encrypted_pms"
   \              0x6C 0x5F    
   \              0x70 0x61    
   \              0x72 0x73    
   \              0x65 0x5F    
   \              0x65 0x6E    
   \              0x63 0x72    
   \              0x79 0x70    
   \              0x74 0x65    
   \              0x64 0x5F    
   \              0x70 0x6D    
   \              0x73 0x00    

   \                                 In section .rodata, align 4
   \                     ?_162:
   \        0x0   0x73 0x73          DC8 "ssl_parse_parse_encrypted_pms_secret"
   \              0x6C 0x5F    
   \              0x70 0x61    
   \              0x72 0x73    
   \              0x65 0x5F    
   \              0x70 0x61    
   \              0x72 0x73    
   \              0x65 0x5F    
   \              0x65 0x6E    
   \              0x63 0x72    
   \              0x79 0x70    
   \              0x74 0x65    
   \              0x64 0x5F    
   \              0x70 0x6D    
   \              0x73 0x5F    
   \              0x73 0x65    
   \              0x63 0x72    
   \              0x65 0x74    
   \              0x00         
   \       0x25   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_163:
   \        0x0   0x3C 0x3D          DC8 "<= parse client key exchange"
   \              0x20 0x70    
   \              0x61 0x72    
   \              0x73 0x65    
   \              0x20 0x63    
   \              0x6C 0x69    
   \              0x65 0x6E    
   \              0x74 0x20    
   \              0x6B 0x65    
   \              0x79 0x20    
   \              0x65 0x78    
   \              0x63 0x68    
   \              0x61 0x6E    
   \              0x67 0x65    
   \              0x00         
   \       0x1D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_164:
   \        0x0   0x3D 0x3E          DC8 "=> parse certificate verify"
   \              0x20 0x70    
   \              0x61 0x72    
   \              0x73 0x65    
   \              0x20 0x63    
   \              0x65 0x72    
   \              0x74 0x69    
   \              0x66 0x69    
   \              0x63 0x61    
   \              0x74 0x65    
   \              0x20 0x76    
   \              0x65 0x72    
   \              0x69 0x66    
   \              0x79 0x00    

   \                                 In section .rodata, align 4
   \                     ?_165:
   \        0x0   0x3C 0x3D          DC8 "<= skip parse certificate verify"
   \              0x20 0x73    
   \              0x6B 0x69    
   \              0x70 0x20    
   \              0x70 0x61    
   \              0x72 0x73    
   \              0x65 0x20    
   \              0x63 0x65    
   \              0x72 0x74    
   \              0x69 0x66    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x76 0x65    
   \              0x72 0x69    
   \              0x66 0x79    
   \              0x00         
   \       0x21   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_166:
   \        0x0   0x62 0x61          DC8 "bad certificate verify message"
   \              0x64 0x20    
   \              0x63 0x65    
   \              0x72 0x74    
   \              0x69 0x66    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x76 0x65    
   \              0x72 0x69    
   \              0x66 0x79    
   \              0x20 0x6D    
   \              0x65 0x73    
   \              0x73 0x61    
   \              0x67 0x65    
   \              0x00         
   \       0x1F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_167:
   \        0x0   0x70 0x65          DC8 70H, 65H, 65H, 72H, 20H, 6EH, 6FH, 74H
   \              0x65 0x72    
   \              0x20 0x6E    
   \              0x6F 0x74    
   \        0x8   0x20 0x61          DC8 20H, 61H, 64H, 68H, 65H, 72H, 69H, 6EH
   \              0x64 0x68    
   \              0x65 0x72    
   \              0x69 0x6E    
   \       0x10   0x67 0x20          DC8 67H, 20H, 74H, 6FH, 20H, 72H, 65H, 71H
   \              0x74 0x6F    
   \              0x20 0x72    
   \              0x65 0x71    
   \       0x18   0x75 0x65          DC8 75H, 65H, 73H, 74H, 65H, 64H, 20H, 73H
   \              0x73 0x74    
   \              0x65 0x64    
   \              0x20 0x73    
   \       0x20   0x69 0x67          DC8 69H, 67H, 5FH, 61H, 6CH, 67H, 20H, 66H
   \              0x5F 0x61    
   \              0x6C 0x67    
   \              0x20 0x66    
   \       0x28   0x6F 0x72          DC8 6FH, 72H, 20H, 76H, 65H, 72H, 69H, 66H
   \              0x20 0x76    
   \              0x65 0x72    
   \              0x69 0x66    
   \       0x30   0x79 0x20          DC8 79H, 20H, 6DH, 65H, 73H, 73H, 61H, 67H
   \              0x6D 0x65    
   \              0x73 0x73    
   \              0x61 0x67    
   \       0x38   0x65 0x00          DC8 65H, 0
   \       0x3A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_168:
   \        0x0   0x73 0x69          DC8 "sig_alg doesn't match cert key"
   \              0x67 0x5F    
   \              0x61 0x6C    
   \              0x67 0x20    
   \              0x64 0x6F    
   \              0x65 0x73    
   \              0x6E 0x27    
   \              0x74 0x20    
   \              0x6D 0x61    
   \              0x74 0x63    
   \              0x68 0x20    
   \              0x63 0x65    
   \              0x72 0x74    
   \              0x20 0x6B    
   \              0x65 0x79    
   \              0x00         
   \       0x1F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_169:
   \        0x0   0x6D 0x62          DC8 "mbedtls_pk_verify"
   \              0x65 0x64    
   \              0x74 0x6C    
   \              0x73 0x5F    
   \              0x70 0x6B    
   \              0x5F 0x76    
   \              0x65 0x72    
   \              0x69 0x66    
   \              0x79 0x00    
   \       0x12   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_170:
   \        0x0   0x3C 0x3D          DC8 "<= parse certificate verify"
   \              0x20 0x70    
   \              0x61 0x72    
   \              0x73 0x65    
   \              0x20 0x63    
   \              0x65 0x72    
   \              0x74 0x69    
   \              0x66 0x69    
   \              0x63 0x61    
   \              0x74 0x65    
   \              0x20 0x76    
   \              0x65 0x72    
   \              0x69 0x66    
   \              0x79 0x00    

   \                                 In section .rodata, align 4
   \                     ?_171:
   \        0x0   0x3D 0x3E          DC8 "=> write new session ticket"
   \              0x20 0x77    
   \              0x72 0x69    
   \              0x74 0x65    
   \              0x20 0x6E    
   \              0x65 0x77    
   \              0x20 0x73    
   \              0x65 0x73    
   \              0x73 0x69    
   \              0x6F 0x6E    
   \              0x20 0x74    
   \              0x69 0x63    
   \              0x6B 0x65    
   \              0x74 0x00    

   \                                 In section .rodata, align 4
   \                     ?_172:
   \        0x0   0x6D 0x62          DC8 "mbedtls_ssl_ticket_write"
   \              0x65 0x64    
   \              0x74 0x6C    
   \              0x73 0x5F    
   \              0x73 0x73    
   \              0x6C 0x5F    
   \              0x74 0x69    
   \              0x63 0x6B    
   \              0x65 0x74    
   \              0x5F 0x77    
   \              0x72 0x69    
   \              0x74 0x65    
   \              0x00         
   \       0x19   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_173:
   \        0x0   0x3C 0x3D          DC8 "<= write new session ticket"
   \              0x20 0x77    
   \              0x72 0x69    
   \              0x74 0x65    
   \              0x20 0x6E    
   \              0x65 0x77    
   \              0x20 0x73    
   \              0x65 0x73    
   \              0x73 0x69    
   \              0x6F 0x6E    
   \              0x20 0x74    
   \              0x69 0x63    
   \              0x6B 0x65    
   \              0x74 0x00    

   \                                 In section .rodata, align 4
   \                     ?_174:
   \        0x0   0x73 0x65          DC8 "server state: %d"
   \              0x72 0x76    
   \              0x65 0x72    
   \              0x20 0x73    
   \              0x74 0x61    
   \              0x74 0x65    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x00         
   \       0x11   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_175:
   \        0x0   0x68 0x61          DC8 "handshake: done"
   \              0x6E 0x64    
   \              0x73 0x68    
   \              0x61 0x6B    
   \              0x65 0x3A    
   \              0x20 0x64    
   \              0x6F 0x6E    
   \              0x65 0x00    

   \                                 In section .rodata, align 4
   \                     ?_176:
   \        0x0   0x69 0x6E          DC8 "invalid state %d"
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x73 0x74    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x25 0x64    
   \              0x00         
   \       0x11   0x00 0x00          DC8 0, 0, 0
   \              0x00         
   4375          #endif /* MBEDTLS_SSL_SRV_C */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   mbedtls_pk_ec
       8   mbedtls_pk_get_len
         8   -> mbedtls_pk_get_bitlen
       0   mbedtls_ssl_ciphersuite_no_pfs
       0   mbedtls_ssl_ciphersuite_uses_dhe
       0   mbedtls_ssl_ciphersuite_uses_ecdh
       0   mbedtls_ssl_ciphersuite_uses_ecdhe
       0   mbedtls_ssl_ciphersuite_uses_server_signature
       0   mbedtls_ssl_conf_dtls_cookies
      24   mbedtls_ssl_handshake_server_step
        24   -> mbedtls_debug_print_msg
        24   -> mbedtls_ssl_flight_transmit
        24   -> mbedtls_ssl_flush_output
        24   -> mbedtls_ssl_handshake_wrapup
        24   -> mbedtls_ssl_parse_certificate
        24   -> mbedtls_ssl_parse_change_cipher_spec
        24   -> mbedtls_ssl_parse_finished
        24   -> mbedtls_ssl_write_certificate
        24   -> mbedtls_ssl_write_change_cipher_spec
        24   -> mbedtls_ssl_write_finished
        24   -> ssl_parse_certificate_verify
        24   -> ssl_parse_client_hello
        24   -> ssl_parse_client_key_exchange
        24   -> ssl_write_certificate_request
        24   -> ssl_write_new_session_ticket
        24   -> ssl_write_server_hello
        24   -> ssl_write_server_hello_done
        24   -> ssl_write_server_key_exchange
       0   mbedtls_ssl_hdr_len
       0   mbedtls_ssl_hs_hdr_len
       0   mbedtls_ssl_own_cert
       0   mbedtls_ssl_own_key
      16   mbedtls_ssl_safer_memcmp
      16   mbedtls_ssl_set_client_transport_id
        16   -> __aeabi_memcpy
        16   -> mbedtls_calloc
        16   -> mbedtls_free
       8   ssl_check_key_curve
         8   -> mbedtls_pk_ec
      32   ssl_ciphersuite_match
        32   -> mbedtls_debug_print_msg
        32   -> mbedtls_ssl_ciphersuite_from_id
        32   -> mbedtls_ssl_ciphersuite_uses_ec
        32   -> mbedtls_ssl_ciphersuite_uses_psk
        32   -> mbedtls_ssl_get_ciphersuite_sig_alg
        32   -> mbedtls_ssl_sig_hash_set_find
        32   -> ssl_pick_cert
      48   ssl_decrypt_encrypted_pms
        48   -> mbedtls_debug_print_msg
        48   -> mbedtls_pk_can_do
        48   -> mbedtls_pk_decrypt
        48   -> mbedtls_pk_get_len
        48   -> mbedtls_ssl_own_cert
        48   -> mbedtls_ssl_own_key
      24   ssl_get_ecdh_params_from_cert
        24   -> mbedtls_debug_print_msg
        24   -> mbedtls_debug_print_ret
        24   -> mbedtls_ecdh_get_params
        24   -> mbedtls_pk_can_do
        24   -> mbedtls_pk_ec
        24   -> mbedtls_ssl_own_key
      32   ssl_parse_alpn_ext
        32   -> mbedtls_ssl_send_alert_message
        32   -> memcmp
        32   -> strlen
      88   ssl_parse_certificate_verify
        88   -- Indirect call
        88   -> mbedtls_debug_print_msg
        88   -> mbedtls_debug_print_ret
        88   -> mbedtls_pk_can_do
        88   -> mbedtls_pk_verify
        88   -> mbedtls_ssl_hs_hdr_len
        88   -> mbedtls_ssl_md_alg_from_hash
        88   -> mbedtls_ssl_pk_alg_from_sig
        88   -> mbedtls_ssl_read_record
        88   -> mbedtls_ssl_set_calc_verify_md
        88   -> mbedtls_ssl_update_handshake_status
      32   ssl_parse_client_dh_public
        32   -> mbedtls_debug_print_mpi
        32   -> mbedtls_debug_print_msg
        32   -> mbedtls_debug_print_ret
        32   -> mbedtls_dhm_read_public
      80   ssl_parse_client_hello
        80   -- Indirect call
        80   -> __aeabi_memcpy
        80   -> __aeabi_memset4
        80   -> mbedtls_debug_print_buf
        80   -> mbedtls_debug_print_msg
        80   -> mbedtls_debug_print_ret
        80   -> mbedtls_ssl_check_sig_hash
        80   -> mbedtls_ssl_dtls_replay_check
        80   -> mbedtls_ssl_dtls_replay_update
        80   -> mbedtls_ssl_fetch_input
        80   -> mbedtls_ssl_get_ciphersuite_sig_alg
        80   -> mbedtls_ssl_hash_from_md_alg
        80   -> mbedtls_ssl_hdr_len
        80   -> mbedtls_ssl_hs_hdr_len
        80   -> mbedtls_ssl_read_version
        80   -> mbedtls_ssl_recv_flight_completed
        80   -> mbedtls_ssl_send_alert_message
        80   -> mbedtls_ssl_sig_hash_set_const_hash
        80   -> mbedtls_ssl_sig_hash_set_find
        80   -> memcmp
        80   -> ssl_ciphersuite_match
        80   -> ssl_parse_alpn_ext
        80   -> ssl_parse_encrypt_then_mac_ext
        80   -> ssl_parse_extended_ms_ext
        80   -> ssl_parse_max_fragment_length_ext
        80   -> ssl_parse_renegotiation_info
        80   -> ssl_parse_servername_ext
        80   -> ssl_parse_session_ticket_ext
        80   -> ssl_parse_signature_algorithms_ext
        80   -> ssl_parse_supported_elliptic_curves
        80   -> ssl_parse_supported_point_formats
        80   -> ssl_parse_truncated_hmac_ext
      40   ssl_parse_client_key_exchange
        40   -> mbedtls_debug_print_ecp
        40   -> mbedtls_debug_print_mpi
        40   -> mbedtls_debug_print_msg
        40   -> mbedtls_debug_print_ret
        40   -> mbedtls_dhm_calc_secret
        40   -> mbedtls_ecdh_calc_secret
        40   -> mbedtls_ecdh_read_public
        40   -> mbedtls_ssl_derive_keys
        40   -> mbedtls_ssl_hs_hdr_len
        40   -> mbedtls_ssl_psk_derive_premaster
        40   -> mbedtls_ssl_read_record
        40   -> ssl_parse_client_dh_public
        40   -> ssl_parse_client_psk_identity
        40   -> ssl_parse_encrypted_pms
      40   ssl_parse_client_psk_identity
        40   -- Indirect call
        40   -> mbedtls_debug_print_buf
        40   -> mbedtls_debug_print_msg
        40   -> mbedtls_ssl_safer_memcmp
        40   -> mbedtls_ssl_send_alert_message
      16   ssl_parse_encrypt_then_mac_ext
        16   -> mbedtls_debug_print_msg
        16   -> mbedtls_ssl_send_alert_message
     136   ssl_parse_encrypted_pms
       136   -- Indirect call
       136   -> mbedtls_debug_print_msg
       136   -> mbedtls_ssl_write_version
       136   -> ssl_decrypt_encrypted_pms
      16   ssl_parse_extended_ms_ext
        16   -> mbedtls_debug_print_msg
        16   -> mbedtls_ssl_send_alert_message
      16   ssl_parse_max_fragment_length_ext
        16   -> mbedtls_debug_print_msg
        16   -> mbedtls_ssl_send_alert_message
      16   ssl_parse_renegotiation_info
        16   -> mbedtls_debug_print_msg
        16   -> mbedtls_ssl_safer_memcmp
        16   -> mbedtls_ssl_send_alert_message
      32   ssl_parse_servername_ext
        32   -- Indirect call
        32   -> mbedtls_debug_print_msg
        32   -> mbedtls_debug_print_ret
        32   -> mbedtls_ssl_send_alert_message
     152   ssl_parse_session_ticket_ext
       152   -- Indirect call
       152   -> __aeabi_memcpy4
       152   -> mbedtls_debug_print_msg
       152   -> mbedtls_debug_print_ret
       152   -> mbedtls_platform_zeroize
       152   -> mbedtls_ssl_session_free
       152   -> mbedtls_ssl_session_init
      40   ssl_parse_signature_algorithms_ext
        40   -> mbedtls_debug_print_msg
        40   -> mbedtls_ssl_check_sig_hash
        40   -> mbedtls_ssl_md_alg_from_hash
        40   -> mbedtls_ssl_pk_alg_from_sig
        40   -> mbedtls_ssl_send_alert_message
        40   -> mbedtls_ssl_sig_hash_set_add
      32   ssl_parse_supported_elliptic_curves
        32   -> mbedtls_calloc
        32   -> mbedtls_debug_print_msg
        32   -> mbedtls_ecp_curve_info_from_tls_id
        32   -> mbedtls_ssl_send_alert_message
      16   ssl_parse_supported_point_formats
        16   -> mbedtls_debug_print_msg
        16   -> mbedtls_ssl_send_alert_message
      16   ssl_parse_truncated_hmac_ext
        16   -> mbedtls_debug_print_msg
        16   -> mbedtls_ssl_send_alert_message
      40   ssl_pick_cert
        40   -> mbedtls_debug_print_crt
        40   -> mbedtls_debug_print_msg
        40   -> mbedtls_pk_can_do
        40   -> mbedtls_ssl_check_cert_usage
        40   -> mbedtls_ssl_get_ciphersuite_sig_pk_alg
        40   -> ssl_check_key_curve
     120   ssl_prepare_server_key_exchange
       120   -> mbedtls_debug_print_buf
       120   -> mbedtls_debug_print_ecp
       120   -> mbedtls_debug_print_mpi
       120   -> mbedtls_debug_print_msg
       120   -> mbedtls_debug_print_ret
       120   -> mbedtls_dhm_make_params
       120   -> mbedtls_dhm_set_group
       120   -> mbedtls_ecdh_make_params
       120   -> mbedtls_ecp_group_load
       120   -> mbedtls_mpi_size
       120   -> mbedtls_pk_sign
       120   -> mbedtls_ssl_ciphersuite_uses_dhe
       120   -> mbedtls_ssl_ciphersuite_uses_ecdhe
       120   -> mbedtls_ssl_ciphersuite_uses_server_signature
       120   -> mbedtls_ssl_get_ciphersuite_sig_pk_alg
       120   -> mbedtls_ssl_get_key_exchange_md_ssl_tls
       120   -> mbedtls_ssl_get_key_exchange_md_tls1_2
       120   -> mbedtls_ssl_hash_from_md_alg
       120   -> mbedtls_ssl_own_key
       120   -> mbedtls_ssl_sig_from_pk_alg
       120   -> mbedtls_ssl_sig_hash_set_find
      24   ssl_write_alpn_ext
         0   -> __aeabi_memcpy
        24   -> mbedtls_debug_print_msg
        24   -> strlen
      56   ssl_write_certificate_request
        56   -> __aeabi_memcpy
        56   -> mbedtls_debug_print_buf
        56   -> mbedtls_debug_print_msg
        56   -> mbedtls_ssl_hash_from_md_alg
        56   -> mbedtls_ssl_set_calc_verify_md
        56   -> mbedtls_ssl_write_handshake_msg
      24   ssl_write_encrypt_then_mac_ext
        24   -> mbedtls_cipher_info_from_type
        24   -> mbedtls_debug_print_msg
        24   -> mbedtls_ssl_ciphersuite_from_id
      16   ssl_write_extended_ms_ext
        16   -> mbedtls_debug_print_msg
      40   ssl_write_hello_verify_request
        40   -- Indirect call
        40   -> mbedtls_debug_print_buf
        40   -> mbedtls_debug_print_msg
        40   -> mbedtls_debug_print_ret
        40   -> mbedtls_ssl_flight_transmit
        40   -> mbedtls_ssl_write_handshake_msg
        40   -> mbedtls_ssl_write_version
      24   ssl_write_max_fragment_length_ext
        24   -> mbedtls_debug_print_msg
      32   ssl_write_new_session_ticket
        32   -- Indirect call
        32   -> mbedtls_debug_print_msg
        32   -> mbedtls_debug_print_ret
        32   -> mbedtls_ssl_write_handshake_msg
      24   ssl_write_renegotiation_ext
        24   -> __aeabi_memcpy
        24   -> mbedtls_debug_print_msg
      48   ssl_write_server_hello
        48   -- Indirect call
        48   -> __aeabi_memcpy
        48   -> __aeabi_memset4
        48   -> mbedtls_debug_print_buf
        48   -> mbedtls_debug_print_msg
        48   -> mbedtls_debug_print_ret
        48   -> mbedtls_ssl_ciphersuite_from_id
        48   -> mbedtls_ssl_ciphersuite_uses_ec
        48   -> mbedtls_ssl_derive_keys
        48   -> mbedtls_ssl_get_ciphersuite_name
        48   -> mbedtls_ssl_write_handshake_msg
        48   -> mbedtls_ssl_write_version
        48   -> ssl_write_alpn_ext
        48   -> ssl_write_encrypt_then_mac_ext
        48   -> ssl_write_extended_ms_ext
        48   -> ssl_write_hello_verify_request
        48   -> ssl_write_max_fragment_length_ext
        48   -> ssl_write_renegotiation_ext
        48   -> ssl_write_session_ticket_ext
        48   -> ssl_write_supported_point_formats_ext
        48   -> ssl_write_truncated_hmac_ext
      24   ssl_write_server_hello_done
        24   -> mbedtls_debug_print_msg
        24   -> mbedtls_debug_print_ret
        24   -> mbedtls_ssl_flight_transmit
        24   -> mbedtls_ssl_send_flight_completed
        24   -> mbedtls_ssl_write_handshake_msg
      32   ssl_write_server_key_exchange
        32   -> mbedtls_debug_print_buf
        32   -> mbedtls_debug_print_msg
        32   -> mbedtls_debug_print_ret
        32   -> mbedtls_ssl_ciphersuite_no_pfs
        32   -> mbedtls_ssl_ciphersuite_uses_ecdh
        32   -> mbedtls_ssl_write_handshake_msg
        32   -> ssl_get_ecdh_params_from_cert
        32   -> ssl_prepare_server_key_exchange
      16   ssl_write_session_ticket_ext
        16   -> mbedtls_debug_print_msg
      16   ssl_write_supported_point_formats_ext
        16   -> mbedtls_debug_print_msg
      16   ssl_write_truncated_hmac_ext
        16   -> mbedtls_debug_print_msg


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable14
       4  ??DataTable14_1
       4  ??DataTable14_10
       4  ??DataTable14_11
       4  ??DataTable14_12
       4  ??DataTable14_13
       4  ??DataTable14_14
       4  ??DataTable14_15
       4  ??DataTable14_16
       4  ??DataTable14_17
       4  ??DataTable14_18
       4  ??DataTable14_19
       4  ??DataTable14_2
       4  ??DataTable14_20
       4  ??DataTable14_21
       4  ??DataTable14_22
       4  ??DataTable14_23
       4  ??DataTable14_24
       4  ??DataTable14_25
       4  ??DataTable14_26
       4  ??DataTable14_27
       4  ??DataTable14_28
       4  ??DataTable14_29
       4  ??DataTable14_3
       4  ??DataTable14_30
       4  ??DataTable14_31
       4  ??DataTable14_32
       4  ??DataTable14_33
       4  ??DataTable14_34
       4  ??DataTable14_35
       4  ??DataTable14_4
       4  ??DataTable14_5
       4  ??DataTable14_6
       4  ??DataTable14_7
       4  ??DataTable14_8
       4  ??DataTable14_9
       4  ??DataTable16
       4  ??DataTable16_1
       4  ??DataTable16_2
       4  ??DataTable16_3
       4  ??DataTable16_4
       4  ??DataTable16_5
       4  ??DataTable17
       4  ??DataTable19
       4  ??DataTable19_1
       4  ??DataTable20
       4  ??DataTable20_1
       4  ??DataTable22
       4  ??DataTable22_1
       4  ??DataTable22_2
       4  ??DataTable23
       4  ??DataTable23_1
       4  ??DataTable23_2
       4  ??DataTable23_3
       4  ??DataTable24
       4  ??DataTable24_1
       4  ??DataTable24_10
       4  ??DataTable24_11
       4  ??DataTable24_12
       4  ??DataTable24_2
       4  ??DataTable24_3
       4  ??DataTable24_4
       4  ??DataTable24_5
       4  ??DataTable24_6
       4  ??DataTable24_7
       4  ??DataTable24_8
       4  ??DataTable24_9
       4  ??DataTable25
       4  ??DataTable25_1
       4  ??DataTable25_10
       4  ??DataTable25_2
       4  ??DataTable25_3
       4  ??DataTable25_4
       4  ??DataTable25_5
       4  ??DataTable25_6
       4  ??DataTable25_7
       4  ??DataTable25_8
       4  ??DataTable25_9
       4  ??DataTable26
       4  ??DataTable26_1
       4  ??DataTable27
       4  ??DataTable27_1
       4  ??DataTable27_10
       4  ??DataTable27_11
       4  ??DataTable27_12
       4  ??DataTable27_13
       4  ??DataTable27_14
       4  ??DataTable27_15
       4  ??DataTable27_16
       4  ??DataTable27_2
       4  ??DataTable27_3
       4  ??DataTable27_4
       4  ??DataTable27_5
       4  ??DataTable27_6
       4  ??DataTable27_7
       4  ??DataTable27_8
       4  ??DataTable27_9
       4  ??DataTable28
       4  ??DataTable28_1
       4  ??DataTable28_2
       4  ??DataTable28_3
       4  ??DataTable28_4
       4  ??DataTable29
       4  ??DataTable29_1
       4  ??DataTable29_2
       4  ??DataTable30
       4  ??DataTable30_1
       4  ??DataTable30_2
       4  ??DataTable30_3
       4  ??DataTable30_4
       4  ??DataTable30_5
       4  ??DataTable31
       4  ??DataTable31_1
       4  ??DataTable31_2
       4  ??DataTable31_3
       4  ??DataTable32
       4  ??DataTable32_1
       4  ??DataTable32_2
       4  ??DataTable32_3
       4  ??DataTable32_4
       4  ??DataTable33
       4  ??DataTable33_1
       4  ??DataTable34
       4  ??DataTable34_1
       4  ??DataTable34_10
       4  ??DataTable34_11
       4  ??DataTable34_12
       4  ??DataTable34_13
       4  ??DataTable34_14
       4  ??DataTable34_15
       4  ??DataTable34_16
       4  ??DataTable34_17
       4  ??DataTable34_18
       4  ??DataTable34_19
       4  ??DataTable34_2
       4  ??DataTable34_20
       4  ??DataTable34_21
       4  ??DataTable34_3
       4  ??DataTable34_4
       4  ??DataTable34_5
       4  ??DataTable34_6
       4  ??DataTable34_7
       4  ??DataTable34_8
       4  ??DataTable34_9
       4  ??DataTable35
       4  ??DataTable35_1
       4  ??DataTable35_2
       4  ??DataTable35_3
       4  ??DataTable35_4
       4  ??DataTable35_5
       4  ??DataTable35_6
       4  ??DataTable35_7
       4  ??DataTable35_8
       4  ??DataTable35_9
       4  ??DataTable36
       4  ??DataTable36_1
       4  ??DataTable36_2
       4  ??DataTable37
       4  ??DataTable37_1
       4  ??DataTable37_2
       4  ??DataTable37_3
       4  ??DataTable37_4
       4  ??DataTable37_5
       4  ??DataTable37_6
       4  ??DataTable38
       4  ??DataTable38_1
       4  ??DataTable38_10
       4  ??DataTable38_11
       4  ??DataTable38_12
       4  ??DataTable38_13
       4  ??DataTable38_14
       4  ??DataTable38_15
       4  ??DataTable38_16
       4  ??DataTable38_17
       4  ??DataTable38_18
       4  ??DataTable38_19
       4  ??DataTable38_2
       4  ??DataTable38_20
       4  ??DataTable38_21
       4  ??DataTable38_22
       4  ??DataTable38_23
       4  ??DataTable38_24
       4  ??DataTable38_25
       4  ??DataTable38_26
       4  ??DataTable38_27
       4  ??DataTable38_28
       4  ??DataTable38_29
       4  ??DataTable38_3
       4  ??DataTable38_30
       4  ??DataTable38_31
       4  ??DataTable38_32
       4  ??DataTable38_33
       4  ??DataTable38_34
       4  ??DataTable38_35
       4  ??DataTable38_36
       4  ??DataTable38_37
       4  ??DataTable38_38
       4  ??DataTable38_39
       4  ??DataTable38_4
       4  ??DataTable38_5
       4  ??DataTable38_6
       4  ??DataTable38_7
       4  ??DataTable38_8
       4  ??DataTable38_9
      68  ?_0
      28  ?_1
      28  ?_10
      16  ?_100
      40  ?_101
      28  ?_102
      44  ?_103
      24  ?_104
      36  ?_105
      28  ?_106
      28  ?_107
       2  ?_108
       4  ?_109
      20  ?_11
      40  ?_110
      36  ?_111
      44  ?_112
      32  ?_113
      36  ?_114
      32  ?_115
      16  ?_116
      32  ?_117
      28  ?_118
      24  ?_119
      32  ?_12
      24  ?_120
      24  ?_121
      24  ?_122
       8  ?_123
       8  ?_124
       8  ?_125
       8  ?_126
      28  ?_127
      16  ?_128
      24  ?_129
      24  ?_13
      28  ?_130
      12  ?_131
      36  ?_132
      16  ?_133
      20  ?_134
      16  ?_135
      32  ?_136
      36  ?_137
      40  ?_138
      16  ?_139
      20  ?_14
      32  ?_140
      28  ?_141
      28  ?_142
      32  ?_143
      24  ?_144
       8  ?_145
      24  ?_146
      24  ?_147
      24  ?_148
      32  ?_149
      28  ?_15
      24  ?_150
      28  ?_151
      24  ?_152
      24  ?_153
       8  ?_154
      28  ?_155
      12  ?_156
      28  ?_157
      12  ?_158
      32  ?_159
      44  ?_16
      36  ?_160
      24  ?_161
      40  ?_162
      32  ?_163
      28  ?_164
      36  ?_165
      32  ?_166
      60  ?_167
      32  ?_168
      20  ?_169
      36  ?_17
      28  ?_170
      28  ?_171
      28  ?_172
      28  ?_173
      20  ?_174
      16  ?_175
      20  ?_176
      28  ?_18
      44  ?_19
      28  ?_2
      32  ?_20
      56  ?_21
      40  ?_22
      60  ?_23
      40  ?_24
      20  ?_25
      24  ?_26
      32  ?_27
      48  ?_28
      40  ?_29
      16  ?_3
      76  ?_30
      48  ?_31
      24  ?_32
      24  ?_33
      16  ?_34
      36  ?_35
      36  ?_36
      44  ?_37
      28  ?_38
      16  ?_39
      32  ?_4
      36  ?_40
      36  ?_41
      48  ?_42
      40  ?_43
      24  ?_44
      64  ?_45
      28  ?_46
      28  ?_47
      24  ?_48
      28  ?_49
      36  ?_5
      28  ?_50
      28  ?_51
      32  ?_52
      28  ?_53
      24  ?_54
      28  ?_55
      32  ?_56
      40  ?_57
      44  ?_58
      40  ?_59
      72  ?_6
      36  ?_60
      32  ?_61
      36  ?_62
      40  ?_63
      32  ?_64
      24  ?_65
      40  ?_66
      24  ?_67
      24  ?_68
      40  ?_69
      72  ?_7
      52  ?_70
      48  ?_71
      48  ?_72
      36  ?_73
      48  ?_74
      52  ?_75
      32  ?_76
      28  ?_77
      48  ?_78
      68  ?_79
      68  ?_8
      24  ?_80
      48  ?_81
      48  ?_82
      56  ?_83
      48  ?_84
      48  ?_85
      44  ?_86
      48  ?_87
      36  ?_88
      32  ?_89
      68  ?_9
      16  ?_90
      32  ?_91
      16  ?_92
      12  ?_93
      32  ?_94
      28  ?_95
      32  ?_96
      24  ?_97
      36  ?_98
      24  ?_99
       4  mbedtls_pk_ec
      12  mbedtls_pk_get_len
      30  mbedtls_ssl_ciphersuite_no_pfs
      18  mbedtls_ssl_ciphersuite_uses_dhe
      16  mbedtls_ssl_ciphersuite_uses_ecdh
      20  mbedtls_ssl_ciphersuite_uses_ecdhe
      16  mbedtls_ssl_ciphersuite_uses_server_signature
       8  mbedtls_ssl_conf_dtls_cookies
     334  mbedtls_ssl_handshake_server_step
      22  mbedtls_ssl_hdr_len
      22  mbedtls_ssl_hs_hdr_len
      34  mbedtls_ssl_own_cert
      34  mbedtls_ssl_own_key
      40  mbedtls_ssl_safer_memcmp
      70  mbedtls_ssl_set_client_transport_id
      42  ssl_check_key_curve
     358  ssl_ciphersuite_match
     232  ssl_decrypt_encrypted_pms
     106  ssl_get_ecdh_params_from_cert
     186  ssl_parse_alpn_ext
     628  ssl_parse_certificate_verify
     178  ssl_parse_client_dh_public
    3626  ssl_parse_client_hello
    1220  ssl_parse_client_key_exchange
     310  ssl_parse_client_psk_identity
      76  ssl_parse_encrypt_then_mac_ext
     234  ssl_parse_encrypted_pms
      78  ssl_parse_extended_ms_ext
      62  ssl_parse_max_fragment_length_ext
     140  ssl_parse_renegotiation_info
     286  ssl_parse_servername_ext
     292  ssl_parse_session_ticket_ext
     272  ssl_parse_signature_algorithms_ext
     256  ssl_parse_supported_elliptic_curves
     120  ssl_parse_supported_point_formats
      70  ssl_parse_truncated_hmac_ext
     338  ssl_pick_cert
    1072  ssl_prepare_server_key_exchange
     116  ssl_write_alpn_ext
     490  ssl_write_certificate_request
      98  ssl_write_encrypt_then_mac_ext
      68  ssl_write_extended_ms_ext
     374  ssl_write_hello_verify_request
      76  ssl_write_max_fragment_length_ext
     228  ssl_write_new_session_ticket
     142  ssl_write_renegotiation_ext
     948  ssl_write_server_hello
     182  ssl_write_server_hello_done
     314  ssl_write_server_key_exchange
      62  ssl_write_session_ticket_ext
      72  ssl_write_supported_point_formats_ext
      60  ssl_write_truncated_hmac_ext

 
  5 662 bytes in section .rodata
 14 908 bytes in section .text
 
 14 908 bytes of CODE  memory
  5 662 bytes of CONST memory

Errors: none
Warnings: none
