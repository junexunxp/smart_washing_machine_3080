###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.3.193/W32 for ARM         10/Jun/2019  13:48:45
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\Development\smart_washing_machine_3080\mbedtls\library\rsa.c
#    Command line =  
#        -f C:\Users\nxf42695\AppData\Local\Temp\1\EW3DE7.tmp
#        (C:\Development\smart_washing_machine_3080\mbedtls\library\rsa.c -D
#        DEBUG -D USE_RTOS -D XIP_EXTERNAL_FLASH=1 -D XIP_BOOT_HEADER_ENABLE=1
#        -D CPU_MIMXRT1052DVL6B -D FSL_RTOS_FREE_RTOS -D PRINTF_ADVANCED_ENABLE
#        -D "MBEDTLS_CONFIG_FILE=\"ksdk_mbedtls_config.h\"" -lC
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list -lA
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list
#        --diag_suppress Pa082,Pa050 -o
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_d16 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" --preinclude
#        C:\Development\smart_washing_machine_3080/source\app_preinclude.h -I
#        C:\Development\smart_washing_machine_3080/board\ -I
#        C:\Development\smart_washing_machine_3080/source\ -I
#        C:\Development\smart_washing_machine_3080/CMSIS\ -I
#        C:\Development\smart_washing_machine_3080/amazon-freertos/freertos/portable\
#        -I C:\Development\smart_washing_machine_3080/amazon-freertos/include\
#        -I C:\Development\smart_washing_machine_3080/component/lists\ -I
#        C:\Development\smart_washing_machine_3080/component/serial_manager\ -I
#        C:\Development\smart_washing_machine_3080/component/uart\ -I
#        C:\Development\smart_washing_machine_3080/component/kv\ -I
#        C:\Development\smart_washing_machine_3080/component/kv/include\ -I
#        C:\Development\smart_washing_machine_3080/device\ -I
#        C:\Development\smart_washing_machine_3080/doc\ -I
#        C:\Development\smart_washing_machine_3080/drivers\ -I
#        C:\Development\smart_washing_machine_3080/src\ -I
#        C:\Development\smart_washing_machine_3080/startup\ -I
#        C:\Development\smart_washing_machine_3080/utilities\ -I
#        C:\Development\smart_washing_machine_3080/xip\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\atm\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_model\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_sign\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\infra\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\mqtt\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\external_libs\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\coap_cloud\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\CoAPPacket\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\server\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\os\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\awss_reset\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\mbedtls\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\ -I
#        C:\Development\smart_washing_machine_3080\mbedtls\port\ksdk\ -Om)
#    Locale       =  C
#    List file    =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list\rsa.lst
#    Object file  =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj\rsa.o
#
###############################################################################

C:\Development\smart_washing_machine_3080\mbedtls\library\rsa.c
      1          /*
      2           *  The RSA public-key cryptosystem
      3           *
      4           *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
      5           *  SPDX-License-Identifier: Apache-2.0
      6           *
      7           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
      8           *  not use this file except in compliance with the License.
      9           *  You may obtain a copy of the License at
     10           *
     11           *  http://www.apache.org/licenses/LICENSE-2.0
     12           *
     13           *  Unless required by applicable law or agreed to in writing, software
     14           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     15           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     16           *  See the License for the specific language governing permissions and
     17           *  limitations under the License.
     18           *
     19           *  This file is part of mbed TLS (https://tls.mbed.org)
     20           */
     21          
     22          /*
     23           *  The following sources were referenced in the design of this implementation
     24           *  of the RSA algorithm:
     25           *
     26           *  [1] A method for obtaining digital signatures and public-key cryptosystems
     27           *      R Rivest, A Shamir, and L Adleman
     28           *      http://people.csail.mit.edu/rivest/pubs.html#RSA78
     29           *
     30           *  [2] Handbook of Applied Cryptography - 1997, Chapter 8
     31           *      Menezes, van Oorschot and Vanstone
     32           *
     33           *  [3] Malware Guard Extension: Using SGX to Conceal Cache Attacks
     34           *      Michael Schwarz, Samuel Weiser, Daniel Gruss, Cl√©mentine Maurice and
     35           *      Stefan Mangard
     36           *      https://arxiv.org/abs/1702.08719v2
     37           *
     38           */
     39          
     40          #if !defined(MBEDTLS_CONFIG_FILE)
     41          #include "mbedtls/config.h"
     42          #else
     43          #include MBEDTLS_CONFIG_FILE
     44          #endif
     45          
     46          #if defined(MBEDTLS_RSA_C)
     47          
     48          #include "mbedtls/rsa.h"
     49          #include "mbedtls/rsa_internal.h"
     50          #include "mbedtls/oid.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp mbedtls_rsa_context *mbedtls_pk_rsa(mbedtls_pk_context const)
   \                     mbedtls_pk_rsa: (+1)
   \        0x0   0x4608             MOV      R0,R1
   \        0x2   0x4770             BX       LR               ;; return
     51          #include "mbedtls/platform_util.h"
     52          
     53          #include <string.h>
     54          
     55          #if defined(MBEDTLS_PKCS1_V21)
     56          #include "mbedtls/md.h"
     57          #endif
     58          
     59          #if defined(MBEDTLS_PKCS1_V15) && !defined(__OpenBSD__)
     60          #include <stdlib.h>
     61          #endif
     62          
     63          #if defined(MBEDTLS_PLATFORM_C)
     64          #include "mbedtls/platform.h"
     65          #else
     66          #include <stdio.h>
     67          #define mbedtls_printf printf
     68          #define mbedtls_calloc calloc
     69          #define mbedtls_free   free
     70          #endif
     71          
     72          #if !defined(MBEDTLS_RSA_ALT)
     73          
     74          #if defined(MBEDTLS_PKCS1_V15)
     75          /* constant-time buffer comparison */

   \                                 In section .text, align 2, keep-with-next
     76          static inline int mbedtls_safer_memcmp( const void *a, const void *b, size_t n )
     77          {
   \                     mbedtls_safer_memcmp: (+1)
   \        0x0   0xB470             PUSH     {R4-R6}
   \        0x2   0x4603             MOV      R3,R0
     78              size_t i;
     79              const unsigned char *A = (const unsigned char *) a;
     80              const unsigned char *B = (const unsigned char *) b;
     81              unsigned char diff = 0;
   \        0x4   0x2000             MOVS     R0,#+0
     82          
     83              for( i = 0; i < n; i++ )
   \        0x6   0x4604             MOV      R4,R0
   \        0x8   0xE004             B.N      ??mbedtls_safer_memcmp_0
     84                  diff |= A[i] ^ B[i];
   \                     ??mbedtls_safer_memcmp_1: (+1)
   \        0xA   0x5D1D             LDRB     R5,[R3, R4]
   \        0xC   0x5D0E             LDRB     R6,[R1, R4]
   \        0xE   0x4075             EORS     R5,R6,R5
   \       0x10   0x4328             ORRS     R0,R5,R0
   \       0x12   0x1C64             ADDS     R4,R4,#+1
   \                     ??mbedtls_safer_memcmp_0: (+1)
   \       0x14   0x4294             CMP      R4,R2
   \       0x16   0xD3F8             BCC.N    ??mbedtls_safer_memcmp_1
     85          
     86              return( diff );
   \       0x18   0xB2C0             UXTB     R0,R0
   \       0x1A   0xBC70             POP      {R4-R6}
   \       0x1C   0x4770             BX       LR               ;; return
     87          }
     88          #endif /* MBEDTLS_PKCS1_V15 */
     89          

   \                                 In section .text, align 2, keep-with-next
     90          int mbedtls_rsa_import( mbedtls_rsa_context *ctx,
     91                                  const mbedtls_mpi *N,
     92                                  const mbedtls_mpi *P, const mbedtls_mpi *Q,
     93                                  const mbedtls_mpi *D, const mbedtls_mpi *E )
     94          {
   \                     mbedtls_rsa_import: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x4607             MOV      R7,R0
   \        0x4   0x460C             MOV      R4,R1
   \        0x6   0x4616             MOV      R6,R2
   \        0x8   0x461D             MOV      R5,R3
     95              int ret;
     96          
     97              if( ( N != NULL && ( ret = mbedtls_mpi_copy( &ctx->N, N ) ) != 0 ) ||
     98                  ( P != NULL && ( ret = mbedtls_mpi_copy( &ctx->P, P ) ) != 0 ) ||
     99                  ( Q != NULL && ( ret = mbedtls_mpi_copy( &ctx->Q, Q ) ) != 0 ) ||
    100                  ( D != NULL && ( ret = mbedtls_mpi_copy( &ctx->D, D ) ) != 0 ) ||
    101                  ( E != NULL && ( ret = mbedtls_mpi_copy( &ctx->E, E ) ) != 0 ) )
   \        0xA   0x2C00             CMP      R4,#+0
   \        0xC   0xD005             BEQ.N    ??mbedtls_rsa_import_0
   \        0xE   0xF107 0x0008      ADD      R0,R7,#+8
   \       0x12   0x....'....        BL       mbedtls_mpi_copy
   \       0x16   0x2800             CMP      R0,#+0
   \       0x18   0xD123             BNE.N    ??mbedtls_rsa_import_1
   \                     ??mbedtls_rsa_import_0: (+1)
   \       0x1A   0x2E00             CMP      R6,#+0
   \       0x1C   0xD006             BEQ.N    ??mbedtls_rsa_import_2
   \       0x1E   0x4631             MOV      R1,R6
   \       0x20   0xF107 0x002C      ADD      R0,R7,#+44
   \       0x24   0x....'....        BL       mbedtls_mpi_copy
   \       0x28   0x2800             CMP      R0,#+0
   \       0x2A   0xD11A             BNE.N    ??mbedtls_rsa_import_1
   \                     ??mbedtls_rsa_import_2: (+1)
   \       0x2C   0x2D00             CMP      R5,#+0
   \       0x2E   0xD006             BEQ.N    ??mbedtls_rsa_import_3
   \       0x30   0x4629             MOV      R1,R5
   \       0x32   0xF107 0x0038      ADD      R0,R7,#+56
   \       0x36   0x....'....        BL       mbedtls_mpi_copy
   \       0x3A   0x2800             CMP      R0,#+0
   \       0x3C   0xD111             BNE.N    ??mbedtls_rsa_import_1
   \                     ??mbedtls_rsa_import_3: (+1)
   \       0x3E   0x9906             LDR      R1,[SP, #+24]
   \       0x40   0x2900             CMP      R1,#+0
   \       0x42   0xD005             BEQ.N    ??mbedtls_rsa_import_4
   \       0x44   0xF107 0x0020      ADD      R0,R7,#+32
   \       0x48   0x....'....        BL       mbedtls_mpi_copy
   \       0x4C   0x2800             CMP      R0,#+0
   \       0x4E   0xD108             BNE.N    ??mbedtls_rsa_import_1
   \                     ??mbedtls_rsa_import_4: (+1)
   \       0x50   0x9907             LDR      R1,[SP, #+28]
   \       0x52   0x2900             CMP      R1,#+0
   \       0x54   0xD008             BEQ.N    ??mbedtls_rsa_import_5
   \       0x56   0xF107 0x0014      ADD      R0,R7,#+20
   \       0x5A   0x....'....        BL       mbedtls_mpi_copy
   \       0x5E   0x2800             CMP      R0,#+0
   \       0x60   0xD002             BEQ.N    ??mbedtls_rsa_import_5
    102              {
    103                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
   \                     ??mbedtls_rsa_import_1: (+1)
   \       0x62   0xF5A0 0x4081      SUB      R0,R0,#+16512
   \       0x66   0xBDF2             POP      {R1,R4-R7,PC}
    104              }
    105          
    106              if( N != NULL )
   \                     ??mbedtls_rsa_import_5: (+1)
   \       0x68   0x2C00             CMP      R4,#+0
   \       0x6A   0xD004             BEQ.N    ??mbedtls_rsa_import_6
    107                  ctx->len = mbedtls_mpi_size( &ctx->N );
   \       0x6C   0xF107 0x0008      ADD      R0,R7,#+8
   \       0x70   0x....'....        BL       mbedtls_mpi_size
   \       0x74   0x6078             STR      R0,[R7, #+4]
    108          
    109              return( 0 );
   \                     ??mbedtls_rsa_import_6: (+1)
   \       0x76   0x2000             MOVS     R0,#+0
   \       0x78   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    110          }
    111          

   \                                 In section .text, align 2, keep-with-next
    112          int mbedtls_rsa_import_raw( mbedtls_rsa_context *ctx,
    113                                      unsigned char const *N, size_t N_len,
    114                                      unsigned char const *P, size_t P_len,
    115                                      unsigned char const *Q, size_t Q_len,
    116                                      unsigned char const *D, size_t D_len,
    117                                      unsigned char const *E, size_t E_len )
    118          {
   \                     mbedtls_rsa_import_raw: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4606             MOV      R6,R0
   \        0x4   0x461D             MOV      R5,R3
    119              int ret = 0;
   \        0x6   0x2400             MOVS     R4,#+0
    120          
    121              if( N != NULL )
   \        0x8   0x2900             CMP      R1,#+0
   \        0xA   0xD00A             BEQ.N    ??mbedtls_rsa_import_raw_0
    122              {
    123                  MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->N, N, N_len ) );
   \        0xC   0xF106 0x0008      ADD      R0,R6,#+8
   \       0x10   0x....'....        BL       mbedtls_mpi_read_binary
   \       0x14   0x0004             MOVS     R4,R0
   \       0x16   0xD12B             BNE.N    ??mbedtls_rsa_import_raw_1
    124                  ctx->len = mbedtls_mpi_size( &ctx->N );
   \       0x18   0xF106 0x0008      ADD      R0,R6,#+8
   \       0x1C   0x....'....        BL       mbedtls_mpi_size
   \       0x20   0x6070             STR      R0,[R6, #+4]
    125              }
    126          
    127              if( P != NULL )
   \                     ??mbedtls_rsa_import_raw_0: (+1)
   \       0x22   0x2D00             CMP      R5,#+0
   \       0x24   0xD007             BEQ.N    ??mbedtls_rsa_import_raw_2
   \       0x26   0x9A04             LDR      R2,[SP, #+16]
    128                  MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->P, P, P_len ) );
   \       0x28   0x4629             MOV      R1,R5
   \       0x2A   0xF106 0x002C      ADD      R0,R6,#+44
   \       0x2E   0x....'....        BL       mbedtls_mpi_read_binary
   \       0x32   0x0004             MOVS     R4,R0
   \       0x34   0xD11C             BNE.N    ??mbedtls_rsa_import_raw_1
   \                     ??mbedtls_rsa_import_raw_2: (+1)
   \       0x36   0x9905             LDR      R1,[SP, #+20]
    129          
    130              if( Q != NULL )
   \       0x38   0x2900             CMP      R1,#+0
   \       0x3A   0xD006             BEQ.N    ??mbedtls_rsa_import_raw_3
   \       0x3C   0x9A06             LDR      R2,[SP, #+24]
    131                  MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->Q, Q, Q_len ) );
   \       0x3E   0xF106 0x0038      ADD      R0,R6,#+56
   \       0x42   0x....'....        BL       mbedtls_mpi_read_binary
   \       0x46   0x0004             MOVS     R4,R0
   \       0x48   0xD112             BNE.N    ??mbedtls_rsa_import_raw_1
   \                     ??mbedtls_rsa_import_raw_3: (+1)
   \       0x4A   0x9907             LDR      R1,[SP, #+28]
    132          
    133              if( D != NULL )
   \       0x4C   0x2900             CMP      R1,#+0
   \       0x4E   0xD006             BEQ.N    ??mbedtls_rsa_import_raw_4
   \       0x50   0x9A08             LDR      R2,[SP, #+32]
    134                  MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->D, D, D_len ) );
   \       0x52   0xF106 0x0020      ADD      R0,R6,#+32
   \       0x56   0x....'....        BL       mbedtls_mpi_read_binary
   \       0x5A   0x0004             MOVS     R4,R0
   \       0x5C   0xD108             BNE.N    ??mbedtls_rsa_import_raw_1
   \                     ??mbedtls_rsa_import_raw_4: (+1)
   \       0x5E   0x9909             LDR      R1,[SP, #+36]
    135          
    136              if( E != NULL )
   \       0x60   0x2900             CMP      R1,#+0
   \       0x62   0xD005             BEQ.N    ??mbedtls_rsa_import_raw_1
   \       0x64   0x9A0A             LDR      R2,[SP, #+40]
    137                  MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->E, E, E_len ) );
   \       0x66   0xF106 0x0014      ADD      R0,R6,#+20
   \       0x6A   0x....'....        BL       mbedtls_mpi_read_binary
   \       0x6E   0x4604             MOV      R4,R0
    138          
    139          cleanup:
    140          
    141              if( ret != 0 )
   \                     ??mbedtls_rsa_import_raw_1: (+1)
   \       0x70   0x2C00             CMP      R4,#+0
   \       0x72   0xD003             BEQ.N    ??mbedtls_rsa_import_raw_5
    142                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
   \       0x74   0xF5A4 0x4481      SUB      R4,R4,#+16512
   \       0x78   0x4620             MOV      R0,R4
   \       0x7A   0xBD70             POP      {R4-R6,PC}
    143          
    144              return( 0 );
   \                     ??mbedtls_rsa_import_raw_5: (+1)
   \       0x7C   0x2000             MOVS     R0,#+0
   \       0x7E   0xBD70             POP      {R4-R6,PC}       ;; return
    145          }
    146          
    147          /*
    148           * Checks whether the context fields are set in such a way
    149           * that the RSA primitives will be able to execute without error.
    150           * It does *not* make guarantees for consistency of the parameters.
    151           */

   \                                 In section .text, align 2, keep-with-next
    152          static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
    153                                        int blinding_needed )
    154          {
   \                     rsa_check_context: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4605             MOV      R5,R0
   \        0x4   0x460C             MOV      R4,R1
    155          #if !defined(MBEDTLS_RSA_NO_CRT)
    156              /* blinding_needed is only used for NO_CRT to decide whether
    157               * P,Q need to be present or not. */
    158              ((void) blinding_needed);
    159          #endif
    160          
    161              if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
    162                  ctx->len > MBEDTLS_MPI_MAX_SIZE )
   \        0x6   0xF105 0x0008      ADD      R0,R5,#+8
   \        0xA   0x....'....        BL       mbedtls_mpi_size
   \        0xE   0x6869             LDR      R1,[R5, #+4]
   \       0x10   0x4281             CMP      R1,R0
   \       0x12   0xD150             BNE.N    ??rsa_check_context_0
   \       0x14   0x4608             MOV      R0,R1
   \       0x16   0xF240 0x2101      MOVW     R1,#+513
   \       0x1A   0x4288             CMP      R0,R1
   \       0x1C   0xD24B             BCS.N    ??rsa_check_context_0
    163              {
    164                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    165              }
    166          
    167              /*
    168               * 1. Modular exponentiation needs positive, odd moduli.
    169               */
    170          
    171              /* Modular exponentiation wrt. N is always used for
    172               * RSA public key operations. */
    173              if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
    174                  mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
   \       0x1E   0x2100             MOVS     R1,#+0
   \       0x20   0xF105 0x0008      ADD      R0,R5,#+8
   \       0x24   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x28   0x2801             CMP      R0,#+1
   \       0x2A   0xDB44             BLT.N    ??rsa_check_context_0
   \       0x2C   0x2100             MOVS     R1,#+0
   \       0x2E   0xF105 0x0008      ADD      R0,R5,#+8
   \       0x32   0x....'....        BL       mbedtls_mpi_get_bit
   \       0x36   0x2800             CMP      R0,#+0
   \       0x38   0xD03D             BEQ.N    ??rsa_check_context_0
    175              {
    176                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    177              }
    178          
    179          #if !defined(MBEDTLS_RSA_NO_CRT)
    180              /* Modular exponentiation for P and Q is only
    181               * used for private key operations and if CRT
    182               * is used. */
    183              if( is_priv &&
    184                  ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
    185                    mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
    186                    mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
    187                    mbedtls_mpi_get_bit( &ctx->Q, 0 ) == 0  ) )
   \       0x3A   0x2C00             CMP      R4,#+0
   \       0x3C   0xD01B             BEQ.N    ??rsa_check_context_1
   \       0x3E   0x2100             MOVS     R1,#+0
   \       0x40   0xF105 0x002C      ADD      R0,R5,#+44
   \       0x44   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x48   0x2801             CMP      R0,#+1
   \       0x4A   0xDB34             BLT.N    ??rsa_check_context_0
   \       0x4C   0x2100             MOVS     R1,#+0
   \       0x4E   0xF105 0x002C      ADD      R0,R5,#+44
   \       0x52   0x....'....        BL       mbedtls_mpi_get_bit
   \       0x56   0x2800             CMP      R0,#+0
   \       0x58   0xD02D             BEQ.N    ??rsa_check_context_0
   \       0x5A   0x2100             MOVS     R1,#+0
   \       0x5C   0xF105 0x0038      ADD      R0,R5,#+56
   \       0x60   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x64   0x2801             CMP      R0,#+1
   \       0x66   0xDB26             BLT.N    ??rsa_check_context_0
   \       0x68   0x2100             MOVS     R1,#+0
   \       0x6A   0xF105 0x0038      ADD      R0,R5,#+56
   \       0x6E   0x....'....        BL       mbedtls_mpi_get_bit
   \       0x72   0x2800             CMP      R0,#+0
   \       0x74   0xD01F             BEQ.N    ??rsa_check_context_0
    188              {
    189                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    190              }
    191          #endif /* !MBEDTLS_RSA_NO_CRT */
    192          
    193              /*
    194               * 2. Exponents must be positive
    195               */
    196          
    197              /* Always need E for public key operations */
    198              if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
   \                     ??rsa_check_context_1: (+1)
   \       0x76   0x2100             MOVS     R1,#+0
   \       0x78   0xF105 0x0014      ADD      R0,R5,#+20
   \       0x7C   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x80   0x2801             CMP      R0,#+1
   \       0x82   0xDB18             BLT.N    ??rsa_check_context_0
    199                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    200          
    201          #if defined(MBEDTLS_RSA_NO_CRT)
    202              /* For private key operations, use D or DP & DQ
    203               * as (unblinded) exponents. */
    204              if( is_priv && mbedtls_mpi_cmp_int( &ctx->D, 0 ) <= 0 )
    205                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    206          #else
    207              if( is_priv &&
    208                  ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
    209                    mbedtls_mpi_cmp_int( &ctx->DQ, 0 ) <= 0  ) )
   \       0x84   0x2C00             CMP      R4,#+0
   \       0x86   0xD00D             BEQ.N    ??rsa_check_context_2
   \       0x88   0x2100             MOVS     R1,#+0
   \       0x8A   0xF105 0x0044      ADD      R0,R5,#+68
   \       0x8E   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x92   0x2801             CMP      R0,#+1
   \       0x94   0xDB0F             BLT.N    ??rsa_check_context_0
   \       0x96   0x2100             MOVS     R1,#+0
   \       0x98   0xF105 0x0050      ADD      R0,R5,#+80
   \       0x9C   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0xA0   0x2801             CMP      R0,#+1
   \       0xA2   0xDB08             BLT.N    ??rsa_check_context_0
    210              {
    211                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    212              }
    213          #endif /* MBEDTLS_RSA_NO_CRT */
    214          
    215              /* Blinding shouldn't make exponents negative either,
    216               * so check that P, Q >= 1 if that hasn't yet been
    217               * done as part of 1. */
    218          #if defined(MBEDTLS_RSA_NO_CRT)
    219              if( is_priv && blinding_needed &&
    220                  ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
    221                    mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ) )
    222              {
    223                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    224              }
    225          #endif
    226          
    227              /* It wouldn't lead to an error if it wasn't satisfied,
    228               * but check for QP >= 1 nonetheless. */
    229          #if !defined(MBEDTLS_RSA_NO_CRT)
    230              if( is_priv &&
    231                  mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
   \                     ??rsa_check_context_2: (+1)
   \       0xA4   0x2C00             CMP      R4,#+0
   \       0xA6   0xD009             BEQ.N    ??rsa_check_context_3
   \       0xA8   0x2100             MOVS     R1,#+0
   \       0xAA   0xF105 0x005C      ADD      R0,R5,#+92
   \       0xAE   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0xB2   0x2801             CMP      R0,#+1
   \       0xB4   0xDA02             BGE.N    ??rsa_check_context_3
    232              {
    233                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   \                     ??rsa_check_context_0: (+1)
   \       0xB6   0x....'....        LDR.W    R0,??DataTable12  ;; 0xffffbf80
   \       0xBA   0xBD32             POP      {R1,R4,R5,PC}
    234              }
    235          #endif
    236          
    237              return( 0 );
   \                     ??rsa_check_context_3: (+1)
   \       0xBC   0x2000             MOVS     R0,#+0
   \       0xBE   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    238          }
    239          

   \                                 In section .text, align 2, keep-with-next
    240          int mbedtls_rsa_complete( mbedtls_rsa_context *ctx )
    241          {
   \                     mbedtls_rsa_complete: (+1)
   \        0x0   0xE92D 0x47FC      PUSH     {R2-R10,LR}
   \        0x4   0x4682             MOV      R10,R0
    242              int ret = 0;
    243          
    244              const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
   \        0x6   0x2100             MOVS     R1,#+0
   \        0x8   0xF10A 0x0008      ADD      R0,R10,#+8
   \        0xC   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x10   0x1E45             SUBS     R5,R0,#+1
   \       0x12   0x41AD             SBCS     R5,R5,R5
   \       0x14   0x43ED             MVNS     R5,R5
   \       0x16   0x0FED             LSRS     R5,R5,#+31
    245              const int have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
   \       0x18   0x2100             MOVS     R1,#+0
   \       0x1A   0xF10A 0x002C      ADD      R0,R10,#+44
   \       0x1E   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x22   0x1E46             SUBS     R6,R0,#+1
   \       0x24   0x41B6             SBCS     R6,R6,R6
   \       0x26   0x43F6             MVNS     R6,R6
   \       0x28   0x0FF6             LSRS     R6,R6,#+31
    246              const int have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
   \       0x2A   0x2100             MOVS     R1,#+0
   \       0x2C   0xF10A 0x0038      ADD      R0,R10,#+56
   \       0x30   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x34   0x1E47             SUBS     R7,R0,#+1
   \       0x36   0x41BF             SBCS     R7,R7,R7
   \       0x38   0x43FF             MVNS     R7,R7
   \       0x3A   0x0FFF             LSRS     R7,R7,#+31
    247              const int have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
   \       0x3C   0x2100             MOVS     R1,#+0
   \       0x3E   0xF10A 0x0020      ADD      R0,R10,#+32
   \       0x42   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x46   0x1E44             SUBS     R4,R0,#+1
   \       0x48   0x41A4             SBCS     R4,R4,R4
   \       0x4A   0x43E4             MVNS     R4,R4
   \       0x4C   0x0FE4             LSRS     R4,R4,#+31
    248              const int have_E = ( mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0 );
   \       0x4E   0x2100             MOVS     R1,#+0
   \       0x50   0xF10A 0x0014      ADD      R0,R10,#+20
   \       0x54   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x58   0x1E41             SUBS     R1,R0,#+1
   \       0x5A   0x4189             SBCS     R1,R1,R1
   \       0x5C   0x43C9             MVNS     R1,R1
   \       0x5E   0x0FC9             LSRS     R1,R1,#+31
    249          
    250              /*
    251               * Check whether provided parameters are enough
    252               * to deduce all others. The following incomplete
    253               * parameter sets for private keys are supported:
    254               *
    255               * (1) P, Q missing.
    256               * (2) D and potentially N missing.
    257               *
    258               */
    259          
    260              const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
   \       0x60   0x2E00             CMP      R6,#+0
   \       0x62   0xD009             BEQ.N    ??mbedtls_rsa_complete_0
   \       0x64   0x2F00             CMP      R7,#+0
   \       0x66   0xD007             BEQ.N    ??mbedtls_rsa_complete_0
   \       0x68   0x2C00             CMP      R4,#+0
   \       0x6A   0xD005             BEQ.N    ??mbedtls_rsa_complete_0
   \       0x6C   0x460A             MOV      R2,R1
   \       0x6E   0x1E52             SUBS     R2,R2,#+1
   \       0x70   0x4192             SBCS     R2,R2,R2
   \       0x72   0x43D2             MVNS     R2,R2
   \       0x74   0x0FD2             LSRS     R2,R2,#+31
   \       0x76   0xE000             B.N      ??mbedtls_rsa_complete_1
   \                     ??mbedtls_rsa_complete_0: (+1)
   \       0x78   0x2200             MOVS     R2,#+0
    261              const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
   \                     ??mbedtls_rsa_complete_1: (+1)
   \       0x7A   0x2D00             CMP      R5,#+0
   \       0x7C   0xD00E             BEQ.N    ??mbedtls_rsa_complete_2
   \       0x7E   0xEA57 0x0006      ORRS     R0,R7,R6
   \       0x82   0xD10B             BNE.N    ??mbedtls_rsa_complete_2
   \       0x84   0x2C00             CMP      R4,#+0
   \       0x86   0xD009             BEQ.N    ??mbedtls_rsa_complete_2
   \       0x88   0x4688             MOV      R8,R1
   \       0x8A   0xF1B8 0x0801      SUBS     R8,R8,#+1
   \       0x8E   0xEB68 0x0808      SBC      R8,R8,R8
   \       0x92   0xEA6F 0x0808      MVN      R8,R8
   \       0x96   0xEA4F 0x78D8      LSR      R8,R8,#+31
   \       0x9A   0xE001             B.N      ??mbedtls_rsa_complete_3
   \                     ??mbedtls_rsa_complete_2: (+1)
   \       0x9C   0xF04F 0x0800      MOV      R8,#+0
    262              const int d_missing  =              have_P &&  have_Q && !have_D && have_E;
   \                     ??mbedtls_rsa_complete_3: (+1)
   \       0xA0   0x2E00             CMP      R6,#+0
   \       0xA2   0xD00D             BEQ.N    ??mbedtls_rsa_complete_4
   \       0xA4   0x2F00             CMP      R7,#+0
   \       0xA6   0xD00B             BEQ.N    ??mbedtls_rsa_complete_4
   \       0xA8   0x2C00             CMP      R4,#+0
   \       0xAA   0xD109             BNE.N    ??mbedtls_rsa_complete_4
   \       0xAC   0x4689             MOV      R9,R1
   \       0xAE   0xF1B9 0x0901      SUBS     R9,R9,#+1
   \       0xB2   0xEB69 0x0909      SBC      R9,R9,R9
   \       0xB6   0xEA6F 0x0909      MVN      R9,R9
   \       0xBA   0xEA4F 0x79D9      LSR      R9,R9,#+31
   \       0xBE   0xE001             B.N      ??mbedtls_rsa_complete_5
   \                     ??mbedtls_rsa_complete_4: (+1)
   \       0xC0   0xF04F 0x0900      MOV      R9,#+0
    263              const int is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;
   \                     ??mbedtls_rsa_complete_5: (+1)
   \       0xC4   0x2D00             CMP      R5,#+0
   \       0xC6   0xD009             BEQ.N    ??mbedtls_rsa_complete_6
   \       0xC8   0xEA47 0x0006      ORR      R0,R7,R6
   \       0xCC   0x4304             ORRS     R4,R4,R0
   \       0xCE   0xD105             BNE.N    ??mbedtls_rsa_complete_6
   \       0xD0   0x4608             MOV      R0,R1
   \       0xD2   0x1E40             SUBS     R0,R0,#+1
   \       0xD4   0x4180             SBCS     R0,R0,R0
   \       0xD6   0x43C0             MVNS     R0,R0
   \       0xD8   0x0FC0             LSRS     R0,R0,#+31
   \       0xDA   0xE000             B.N      ??mbedtls_rsa_complete_7
   \                     ??mbedtls_rsa_complete_6: (+1)
   \       0xDC   0x2000             MOVS     R0,#+0
    264          
    265              /* These three alternatives are mutually exclusive */
    266              const int is_priv = n_missing || pq_missing || d_missing;
   \                     ??mbedtls_rsa_complete_7: (+1)
   \       0xDE   0xEA48 0x0202      ORR      R2,R8,R2
   \       0xE2   0xEA49 0x0202      ORR      R2,R9,R2
   \       0xE6   0x4614             MOV      R4,R2
   \       0xE8   0x1E64             SUBS     R4,R4,#+1
   \       0xEA   0x41A4             SBCS     R4,R4,R4
   \       0xEC   0x43E4             MVNS     R4,R4
   \       0xEE   0x0FE4             LSRS     R4,R4,#+31
    267          
    268              if( !is_priv && !is_pub )
   \       0xF0   0x4320             ORRS     R0,R0,R4
   \       0xF2   0xD102             BNE.N    ??mbedtls_rsa_complete_8
    269                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   \       0xF4   0x....'....        LDR.W    R0,??DataTable12  ;; 0xffffbf80
   \       0xF8   0xE055             B.N      ??mbedtls_rsa_complete_9
    270          
    271              /*
    272               * Step 1: Deduce N if P, Q are provided.
    273               */
    274          
    275              if( !have_N && have_P && have_Q )
   \                     ??mbedtls_rsa_complete_8: (+1)
   \       0xFA   0x2D00             CMP      R5,#+0
   \       0xFC   0xD113             BNE.N    ??mbedtls_rsa_complete_10
   \       0xFE   0x2E00             CMP      R6,#+0
   \      0x100   0xD011             BEQ.N    ??mbedtls_rsa_complete_10
   \      0x102   0x2F00             CMP      R7,#+0
   \      0x104   0xD00F             BEQ.N    ??mbedtls_rsa_complete_10
    276              {
    277                  if( ( ret = mbedtls_mpi_mul_mpi( &ctx->N, &ctx->P,
    278                                                   &ctx->Q ) ) != 0 )
   \      0x106   0xF10A 0x0238      ADD      R2,R10,#+56
   \      0x10A   0xF10A 0x012C      ADD      R1,R10,#+44
   \      0x10E   0xF10A 0x0008      ADD      R0,R10,#+8
   \      0x112   0x....'....        BL       mbedtls_mpi_mul_mpi
   \      0x116   0x2800             CMP      R0,#+0
   \      0x118   0xD13B             BNE.N    ??mbedtls_rsa_complete_11
    279                  {
    280                      return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
    281                  }
    282          
    283                  ctx->len = mbedtls_mpi_size( &ctx->N );
   \      0x11A   0xF10A 0x0008      ADD      R0,R10,#+8
   \      0x11E   0x....'....        BL       mbedtls_mpi_size
   \      0x122   0xF8CA 0x0004      STR      R0,[R10, #+4]
    284              }
    285          
    286              /*
    287               * Step 2: Deduce and verify all remaining core parameters.
    288               */
    289          
    290              if( pq_missing )
   \                     ??mbedtls_rsa_complete_10: (+1)
   \      0x126   0xF1B8 0x0F00      CMP      R8,#+0
   \      0x12A   0xD00F             BEQ.N    ??mbedtls_rsa_complete_12
    291              {
    292                  ret = mbedtls_rsa_deduce_primes( &ctx->N, &ctx->E, &ctx->D,
    293                                                   &ctx->P, &ctx->Q );
   \      0x12C   0xF10A 0x0038      ADD      R0,R10,#+56
   \      0x130   0x9000             STR      R0,[SP, #+0]
   \      0x132   0xF10A 0x032C      ADD      R3,R10,#+44
   \      0x136   0xF10A 0x0220      ADD      R2,R10,#+32
   \      0x13A   0xF10A 0x0114      ADD      R1,R10,#+20
   \      0x13E   0xF10A 0x0008      ADD      R0,R10,#+8
   \      0x142   0x....'....        BL       mbedtls_rsa_deduce_primes
    294                  if( ret != 0 )
   \      0x146   0x2800             CMP      R0,#+0
   \      0x148   0xD123             BNE.N    ??mbedtls_rsa_complete_11
   \      0x14A   0xE00E             B.N      ??mbedtls_rsa_complete_13
    295                      return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
    296          
    297              }
    298              else if( d_missing )
   \                     ??mbedtls_rsa_complete_12: (+1)
   \      0x14C   0xF1B9 0x0F00      CMP      R9,#+0
   \      0x150   0xD00B             BEQ.N    ??mbedtls_rsa_complete_13
    299              {
    300                  if( ( ret = mbedtls_rsa_deduce_private_exponent( &ctx->P,
    301                                                                   &ctx->Q,
    302                                                                   &ctx->E,
    303                                                                   &ctx->D ) ) != 0 )
   \      0x152   0xF10A 0x0320      ADD      R3,R10,#+32
   \      0x156   0xF10A 0x0214      ADD      R2,R10,#+20
   \      0x15A   0xF10A 0x0138      ADD      R1,R10,#+56
   \      0x15E   0xF10A 0x002C      ADD      R0,R10,#+44
   \      0x162   0x....'....        BL       mbedtls_rsa_deduce_private_exponent
   \      0x166   0x2800             CMP      R0,#+0
   \      0x168   0xD113             BNE.N    ??mbedtls_rsa_complete_11
    304                  {
    305                      return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
    306                  }
    307              }
    308          
    309              /*
    310               * Step 3: Deduce all additional parameters specific
    311               *         to our current RSA implementation.
    312               */
    313          
    314          #if !defined(MBEDTLS_RSA_NO_CRT)
    315              if( is_priv )
   \                     ??mbedtls_rsa_complete_13: (+1)
   \      0x16A   0x2C00             CMP      R4,#+0
   \      0x16C   0xD014             BEQ.N    ??mbedtls_rsa_complete_14
    316              {
    317                  ret = mbedtls_rsa_deduce_crt( &ctx->P,  &ctx->Q,  &ctx->D,
    318                                                &ctx->DP, &ctx->DQ, &ctx->QP );
   \      0x16E   0xF10A 0x005C      ADD      R0,R10,#+92
   \      0x172   0x9001             STR      R0,[SP, #+4]
   \      0x174   0xF10A 0x0050      ADD      R0,R10,#+80
   \      0x178   0x9000             STR      R0,[SP, #+0]
   \      0x17A   0xF10A 0x0344      ADD      R3,R10,#+68
   \      0x17E   0xF10A 0x0220      ADD      R2,R10,#+32
   \      0x182   0xF10A 0x0138      ADD      R1,R10,#+56
   \      0x186   0xF10A 0x002C      ADD      R0,R10,#+44
   \      0x18A   0x....'....        BL       mbedtls_rsa_deduce_crt
    319                  if( ret != 0 )
   \      0x18E   0x2800             CMP      R0,#+0
   \      0x190   0xD002             BEQ.N    ??mbedtls_rsa_complete_14
    320                      return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
   \                     ??mbedtls_rsa_complete_11: (+1)
   \      0x192   0xF5A0 0x4081      SUB      R0,R0,#+16512
   \      0x196   0xE006             B.N      ??mbedtls_rsa_complete_9
    321              }
    322          #endif /* MBEDTLS_RSA_NO_CRT */
    323          
    324              /*
    325               * Step 3: Basic sanity checks
    326               */
    327          
    328              return( rsa_check_context( ctx, is_priv, 1 ) );
   \                     ??mbedtls_rsa_complete_14: (+1)
   \      0x198   0x2201             MOVS     R2,#+1
   \      0x19A   0x4621             MOV      R1,R4
   \      0x19C   0x4650             MOV      R0,R10
   \      0x19E   0xB002             ADD      SP,SP,#+8
   \      0x1A0   0xE8BD 0x47F0      POP      {R4-R10,LR}
   \      0x1A4   0x....             B.N      rsa_check_context
   \                     ??mbedtls_rsa_complete_9: (+1)
   \      0x1A6   0xE8BD 0x87F6      POP      {R1,R2,R4-R10,PC}  ;; return
    329          }
    330          

   \                                 In section .text, align 2, keep-with-next
    331          int mbedtls_rsa_export_raw( const mbedtls_rsa_context *ctx,
    332                                      unsigned char *N, size_t N_len,
    333                                      unsigned char *P, size_t P_len,
    334                                      unsigned char *Q, size_t Q_len,
    335                                      unsigned char *D, size_t D_len,
    336                                      unsigned char *E, size_t E_len )
    337          {
   \                     mbedtls_rsa_export_raw: (+1)
   \        0x0   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \        0x4   0x4681             MOV      R9,R0
   \        0x6   0x4688             MOV      R8,R1
   \        0x8   0x4692             MOV      R10,R2
   \        0xA   0x461F             MOV      R7,R3
    338              int ret = 0;
   \        0xC   0x2400             MOVS     R4,#+0
    339          
    340              /* Check if key is private or public */
    341              const int is_priv =
    342                  mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 &&
    343                  mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 &&
    344                  mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 &&
    345                  mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 &&
    346                  mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0;
   \        0xE   0x4621             MOV      R1,R4
   \       0x10   0xF109 0x0008      ADD      R0,R9,#+8
   \       0x14   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x18   0x2800             CMP      R0,#+0
   \       0x1A   0xD01E             BEQ.N    ??mbedtls_rsa_export_raw_0
   \       0x1C   0x4621             MOV      R1,R4
   \       0x1E   0xF109 0x002C      ADD      R0,R9,#+44
   \       0x22   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x26   0x2800             CMP      R0,#+0
   \       0x28   0xD017             BEQ.N    ??mbedtls_rsa_export_raw_0
   \       0x2A   0x4621             MOV      R1,R4
   \       0x2C   0xF109 0x0038      ADD      R0,R9,#+56
   \       0x30   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x34   0x2800             CMP      R0,#+0
   \       0x36   0xD010             BEQ.N    ??mbedtls_rsa_export_raw_0
   \       0x38   0x4621             MOV      R1,R4
   \       0x3A   0xF109 0x0020      ADD      R0,R9,#+32
   \       0x3E   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x42   0x2800             CMP      R0,#+0
   \       0x44   0xD009             BEQ.N    ??mbedtls_rsa_export_raw_0
   \       0x46   0x4621             MOV      R1,R4
   \       0x48   0xF109 0x0014      ADD      R0,R9,#+20
   \       0x4C   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x50   0x1E40             SUBS     R0,R0,#+1
   \       0x52   0x4180             SBCS     R0,R0,R0
   \       0x54   0x43C0             MVNS     R0,R0
   \       0x56   0x0FC0             LSRS     R0,R0,#+31
   \       0x58   0xE000             B.N      ??mbedtls_rsa_export_raw_1
   \                     ??mbedtls_rsa_export_raw_0: (+1)
   \       0x5A   0x4620             MOV      R0,R4
   \                     ??mbedtls_rsa_export_raw_1: (+1)
   \       0x5C   0x9D09             LDR      R5,[SP, #+36]
   \       0x5E   0x9E0B             LDR      R6,[SP, #+44]
    347          
    348              if( !is_priv )
   \       0x60   0x2800             CMP      R0,#+0
   \       0x62   0xD108             BNE.N    ??mbedtls_rsa_export_raw_2
    349              {
    350                  /* If we're trying to export private parameters for a public key,
    351                   * something must be wrong. */
    352                  if( P != NULL || Q != NULL || D != NULL )
   \       0x64   0x2F00             CMP      R7,#+0
   \       0x66   0xD103             BNE.N    ??mbedtls_rsa_export_raw_3
   \       0x68   0x2D00             CMP      R5,#+0
   \       0x6A   0xD101             BNE.N    ??mbedtls_rsa_export_raw_3
   \       0x6C   0x2E00             CMP      R6,#+0
   \       0x6E   0xD002             BEQ.N    ??mbedtls_rsa_export_raw_2
    353                      return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   \                     ??mbedtls_rsa_export_raw_3: (+1)
   \       0x70   0x....'....        LDR.W    R0,??DataTable12  ;; 0xffffbf80
   \       0x74   0xE032             B.N      ??mbedtls_rsa_export_raw_4
    354          
    355              }
    356          
    357              if( N != NULL )
   \                     ??mbedtls_rsa_export_raw_2: (+1)
   \       0x76   0xF1B8 0x0F00      CMP      R8,#+0
   \       0x7A   0xD007             BEQ.N    ??mbedtls_rsa_export_raw_5
    358                  MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &ctx->N, N, N_len ) );
   \       0x7C   0x4652             MOV      R2,R10
   \       0x7E   0x4641             MOV      R1,R8
   \       0x80   0xF109 0x0008      ADD      R0,R9,#+8
   \       0x84   0x....'....        BL       mbedtls_mpi_write_binary
   \       0x88   0x0004             MOVS     R4,R0
   \       0x8A   0xD126             BNE.N    ??mbedtls_rsa_export_raw_6
    359          
    360              if( P != NULL )
   \                     ??mbedtls_rsa_export_raw_5: (+1)
   \       0x8C   0x2F00             CMP      R7,#+0
   \       0x8E   0xD007             BEQ.N    ??mbedtls_rsa_export_raw_7
   \       0x90   0x9A08             LDR      R2,[SP, #+32]
    361                  MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &ctx->P, P, P_len ) );
   \       0x92   0x4639             MOV      R1,R7
   \       0x94   0xF109 0x002C      ADD      R0,R9,#+44
   \       0x98   0x....'....        BL       mbedtls_mpi_write_binary
   \       0x9C   0x0004             MOVS     R4,R0
   \       0x9E   0xD11C             BNE.N    ??mbedtls_rsa_export_raw_6
    362          
    363              if( Q != NULL )
   \                     ??mbedtls_rsa_export_raw_7: (+1)
   \       0xA0   0x2D00             CMP      R5,#+0
   \       0xA2   0xD007             BEQ.N    ??mbedtls_rsa_export_raw_8
   \       0xA4   0x9A0A             LDR      R2,[SP, #+40]
    364                  MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &ctx->Q, Q, Q_len ) );
   \       0xA6   0x4629             MOV      R1,R5
   \       0xA8   0xF109 0x0038      ADD      R0,R9,#+56
   \       0xAC   0x....'....        BL       mbedtls_mpi_write_binary
   \       0xB0   0x0004             MOVS     R4,R0
   \       0xB2   0xD112             BNE.N    ??mbedtls_rsa_export_raw_6
    365          
    366              if( D != NULL )
   \                     ??mbedtls_rsa_export_raw_8: (+1)
   \       0xB4   0x2E00             CMP      R6,#+0
   \       0xB6   0xD007             BEQ.N    ??mbedtls_rsa_export_raw_9
   \       0xB8   0x9A0C             LDR      R2,[SP, #+48]
    367                  MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &ctx->D, D, D_len ) );
   \       0xBA   0x4631             MOV      R1,R6
   \       0xBC   0xF109 0x0020      ADD      R0,R9,#+32
   \       0xC0   0x....'....        BL       mbedtls_mpi_write_binary
   \       0xC4   0x0004             MOVS     R4,R0
   \       0xC6   0xD108             BNE.N    ??mbedtls_rsa_export_raw_6
   \                     ??mbedtls_rsa_export_raw_9: (+1)
   \       0xC8   0x990D             LDR      R1,[SP, #+52]
    368          
    369              if( E != NULL )
   \       0xCA   0x2900             CMP      R1,#+0
   \       0xCC   0xD005             BEQ.N    ??mbedtls_rsa_export_raw_6
   \       0xCE   0x9A0E             LDR      R2,[SP, #+56]
    370                  MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &ctx->E, E, E_len ) );
   \       0xD0   0xF109 0x0014      ADD      R0,R9,#+20
   \       0xD4   0x....'....        BL       mbedtls_mpi_write_binary
   \       0xD8   0x4604             MOV      R4,R0
    371          
    372          cleanup:
    373          
    374              return( ret );
   \                     ??mbedtls_rsa_export_raw_6: (+1)
   \       0xDA   0x4620             MOV      R0,R4
   \                     ??mbedtls_rsa_export_raw_4: (+1)
   \       0xDC   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    375          }
    376          

   \                                 In section .text, align 2, keep-with-next
    377          int mbedtls_rsa_export( const mbedtls_rsa_context *ctx,
    378                                  mbedtls_mpi *N, mbedtls_mpi *P, mbedtls_mpi *Q,
    379                                  mbedtls_mpi *D, mbedtls_mpi *E )
    380          {
   \                     mbedtls_rsa_export: (+1)
   \        0x0   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \        0x4   0x4680             MOV      R8,R0
   \        0x6   0x460F             MOV      R7,R1
   \        0x8   0x4616             MOV      R6,R2
   \        0xA   0x461D             MOV      R5,R3
    381              int ret;
    382          
    383              /* Check if key is private or public */
    384              int is_priv =
    385                  mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 &&
    386                  mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 &&
    387                  mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 &&
    388                  mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 &&
    389                  mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0;
   \        0xC   0x2100             MOVS     R1,#+0
   \        0xE   0xF108 0x0008      ADD      R0,R8,#+8
   \       0x12   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x16   0x2800             CMP      R0,#+0
   \       0x18   0xD01E             BEQ.N    ??mbedtls_rsa_export_0
   \       0x1A   0x2100             MOVS     R1,#+0
   \       0x1C   0xF108 0x002C      ADD      R0,R8,#+44
   \       0x20   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x24   0x2800             CMP      R0,#+0
   \       0x26   0xD017             BEQ.N    ??mbedtls_rsa_export_0
   \       0x28   0x2100             MOVS     R1,#+0
   \       0x2A   0xF108 0x0038      ADD      R0,R8,#+56
   \       0x2E   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x32   0x2800             CMP      R0,#+0
   \       0x34   0xD010             BEQ.N    ??mbedtls_rsa_export_0
   \       0x36   0x2100             MOVS     R1,#+0
   \       0x38   0xF108 0x0020      ADD      R0,R8,#+32
   \       0x3C   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x40   0x2800             CMP      R0,#+0
   \       0x42   0xD009             BEQ.N    ??mbedtls_rsa_export_0
   \       0x44   0x2100             MOVS     R1,#+0
   \       0x46   0xF108 0x0014      ADD      R0,R8,#+20
   \       0x4A   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x4E   0x1E40             SUBS     R0,R0,#+1
   \       0x50   0x4180             SBCS     R0,R0,R0
   \       0x52   0x43C0             MVNS     R0,R0
   \       0x54   0x0FC0             LSRS     R0,R0,#+31
   \       0x56   0xE000             B.N      ??mbedtls_rsa_export_1
   \                     ??mbedtls_rsa_export_0: (+1)
   \       0x58   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_rsa_export_1: (+1)
   \       0x5A   0x9C06             LDR      R4,[SP, #+24]
    390          
    391              if( !is_priv )
   \       0x5C   0x2800             CMP      R0,#+0
   \       0x5E   0xD108             BNE.N    ??mbedtls_rsa_export_2
    392              {
    393                  /* If we're trying to export private parameters for a public key,
    394                   * something must be wrong. */
    395                  if( P != NULL || Q != NULL || D != NULL )
   \       0x60   0x2E00             CMP      R6,#+0
   \       0x62   0xD103             BNE.N    ??mbedtls_rsa_export_3
   \       0x64   0x2D00             CMP      R5,#+0
   \       0x66   0xD101             BNE.N    ??mbedtls_rsa_export_3
   \       0x68   0x2C00             CMP      R4,#+0
   \       0x6A   0xD002             BEQ.N    ??mbedtls_rsa_export_2
    396                      return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   \                     ??mbedtls_rsa_export_3: (+1)
   \       0x6C   0x....'....        LDR.W    R0,??DataTable12  ;; 0xffffbf80
   \       0x70   0xE02D             B.N      ??mbedtls_rsa_export_4
    397          
    398              }
    399          
    400              /* Export all requested core parameters. */
    401          
    402              if( ( N != NULL && ( ret = mbedtls_mpi_copy( N, &ctx->N ) ) != 0 ) ||
    403                  ( P != NULL && ( ret = mbedtls_mpi_copy( P, &ctx->P ) ) != 0 ) ||
    404                  ( Q != NULL && ( ret = mbedtls_mpi_copy( Q, &ctx->Q ) ) != 0 ) ||
    405                  ( D != NULL && ( ret = mbedtls_mpi_copy( D, &ctx->D ) ) != 0 ) ||
    406                  ( E != NULL && ( ret = mbedtls_mpi_copy( E, &ctx->E ) ) != 0 ) )
   \                     ??mbedtls_rsa_export_2: (+1)
   \       0x72   0x2F00             CMP      R7,#+0
   \       0x74   0xD006             BEQ.N    ??mbedtls_rsa_export_5
   \       0x76   0xF108 0x0108      ADD      R1,R8,#+8
   \       0x7A   0x4638             MOV      R0,R7
   \       0x7C   0x....'....        BL       mbedtls_mpi_copy
   \       0x80   0x2800             CMP      R0,#+0
   \       0x82   0xD124             BNE.N    ??mbedtls_rsa_export_4
   \                     ??mbedtls_rsa_export_5: (+1)
   \       0x84   0x2E00             CMP      R6,#+0
   \       0x86   0xD006             BEQ.N    ??mbedtls_rsa_export_6
   \       0x88   0xF108 0x012C      ADD      R1,R8,#+44
   \       0x8C   0x4630             MOV      R0,R6
   \       0x8E   0x....'....        BL       mbedtls_mpi_copy
   \       0x92   0x2800             CMP      R0,#+0
   \       0x94   0xD11B             BNE.N    ??mbedtls_rsa_export_4
   \                     ??mbedtls_rsa_export_6: (+1)
   \       0x96   0x2D00             CMP      R5,#+0
   \       0x98   0xD006             BEQ.N    ??mbedtls_rsa_export_7
   \       0x9A   0xF108 0x0138      ADD      R1,R8,#+56
   \       0x9E   0x4628             MOV      R0,R5
   \       0xA0   0x....'....        BL       mbedtls_mpi_copy
   \       0xA4   0x2800             CMP      R0,#+0
   \       0xA6   0xD112             BNE.N    ??mbedtls_rsa_export_4
   \                     ??mbedtls_rsa_export_7: (+1)
   \       0xA8   0x2C00             CMP      R4,#+0
   \       0xAA   0xD006             BEQ.N    ??mbedtls_rsa_export_8
   \       0xAC   0xF108 0x0120      ADD      R1,R8,#+32
   \       0xB0   0x4620             MOV      R0,R4
   \       0xB2   0x....'....        BL       mbedtls_mpi_copy
   \       0xB6   0x2800             CMP      R0,#+0
   \       0xB8   0xD109             BNE.N    ??mbedtls_rsa_export_4
   \                     ??mbedtls_rsa_export_8: (+1)
   \       0xBA   0x9807             LDR      R0,[SP, #+28]
   \       0xBC   0x2800             CMP      R0,#+0
   \       0xBE   0xD005             BEQ.N    ??mbedtls_rsa_export_9
   \       0xC0   0xF108 0x0114      ADD      R1,R8,#+20
   \       0xC4   0x....'....        BL       mbedtls_mpi_copy
   \       0xC8   0x2800             CMP      R0,#+0
   \       0xCA   0xD100             BNE.N    ??mbedtls_rsa_export_4
    407              {
    408                  return( ret );
    409              }
    410          
    411              return( 0 );
   \                     ??mbedtls_rsa_export_9: (+1)
   \       0xCC   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_rsa_export_4: (+1)
   \       0xCE   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    412          }
    413          
    414          /*
    415           * Export CRT parameters
    416           * This must also be implemented if CRT is not used, for being able to
    417           * write DER encoded RSA keys. The helper function mbedtls_rsa_deduce_crt
    418           * can be used in this case.
    419           */

   \                                 In section .text, align 2, keep-with-next
    420          int mbedtls_rsa_export_crt( const mbedtls_rsa_context *ctx,
    421                                      mbedtls_mpi *DP, mbedtls_mpi *DQ, mbedtls_mpi *QP )
    422          {
   \                     mbedtls_rsa_export_crt: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x4607             MOV      R7,R0
   \        0x4   0x460E             MOV      R6,R1
   \        0x6   0x4615             MOV      R5,R2
   \        0x8   0x461C             MOV      R4,R3
    423              int ret;
    424          
    425              /* Check if key is private or public */
    426              int is_priv =
    427                  mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 &&
    428                  mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 &&
    429                  mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 &&
    430                  mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 &&
    431                  mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0;
   \        0xA   0x2100             MOVS     R1,#+0
   \        0xC   0xF107 0x0008      ADD      R0,R7,#+8
   \       0x10   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x14   0x2800             CMP      R0,#+0
   \       0x16   0xD01E             BEQ.N    ??mbedtls_rsa_export_crt_0
   \       0x18   0x2100             MOVS     R1,#+0
   \       0x1A   0xF107 0x002C      ADD      R0,R7,#+44
   \       0x1E   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x22   0x2800             CMP      R0,#+0
   \       0x24   0xD017             BEQ.N    ??mbedtls_rsa_export_crt_0
   \       0x26   0x2100             MOVS     R1,#+0
   \       0x28   0xF107 0x0038      ADD      R0,R7,#+56
   \       0x2C   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x30   0x2800             CMP      R0,#+0
   \       0x32   0xD010             BEQ.N    ??mbedtls_rsa_export_crt_0
   \       0x34   0x2100             MOVS     R1,#+0
   \       0x36   0xF107 0x0020      ADD      R0,R7,#+32
   \       0x3A   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x3E   0x2800             CMP      R0,#+0
   \       0x40   0xD009             BEQ.N    ??mbedtls_rsa_export_crt_0
   \       0x42   0x2100             MOVS     R1,#+0
   \       0x44   0xF107 0x0014      ADD      R0,R7,#+20
   \       0x48   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x4C   0x1E40             SUBS     R0,R0,#+1
   \       0x4E   0x4180             SBCS     R0,R0,R0
   \       0x50   0x43C0             MVNS     R0,R0
   \       0x52   0x0FC0             LSRS     R0,R0,#+31
   \       0x54   0xE000             B.N      ??mbedtls_rsa_export_crt_1
   \                     ??mbedtls_rsa_export_crt_0: (+1)
   \       0x56   0x2000             MOVS     R0,#+0
    432          
    433              if( !is_priv )
   \                     ??mbedtls_rsa_export_crt_1: (+1)
   \       0x58   0x2800             CMP      R0,#+0
   \       0x5A   0xD102             BNE.N    ??mbedtls_rsa_export_crt_2
    434                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   \       0x5C   0x....'....        LDR.W    R0,??DataTable12  ;; 0xffffbf80
   \       0x60   0xBDF2             POP      {R1,R4-R7,PC}
    435          
    436          #if !defined(MBEDTLS_RSA_NO_CRT)
    437              /* Export all requested blinding parameters. */
    438              if( ( DP != NULL && ( ret = mbedtls_mpi_copy( DP, &ctx->DP ) ) != 0 ) ||
    439                  ( DQ != NULL && ( ret = mbedtls_mpi_copy( DQ, &ctx->DQ ) ) != 0 ) ||
    440                  ( QP != NULL && ( ret = mbedtls_mpi_copy( QP, &ctx->QP ) ) != 0 ) )
   \                     ??mbedtls_rsa_export_crt_2: (+1)
   \       0x62   0x2E00             CMP      R6,#+0
   \       0x64   0xD006             BEQ.N    ??mbedtls_rsa_export_crt_3
   \       0x66   0xF107 0x0144      ADD      R1,R7,#+68
   \       0x6A   0x4630             MOV      R0,R6
   \       0x6C   0x....'....        BL       mbedtls_mpi_copy
   \       0x70   0x2800             CMP      R0,#+0
   \       0x72   0xD111             BNE.N    ??mbedtls_rsa_export_crt_4
   \                     ??mbedtls_rsa_export_crt_3: (+1)
   \       0x74   0x2D00             CMP      R5,#+0
   \       0x76   0xD006             BEQ.N    ??mbedtls_rsa_export_crt_5
   \       0x78   0xF107 0x0150      ADD      R1,R7,#+80
   \       0x7C   0x4628             MOV      R0,R5
   \       0x7E   0x....'....        BL       mbedtls_mpi_copy
   \       0x82   0x2800             CMP      R0,#+0
   \       0x84   0xD108             BNE.N    ??mbedtls_rsa_export_crt_4
   \                     ??mbedtls_rsa_export_crt_5: (+1)
   \       0x86   0x2C00             CMP      R4,#+0
   \       0x88   0xD009             BEQ.N    ??mbedtls_rsa_export_crt_6
   \       0x8A   0xF107 0x015C      ADD      R1,R7,#+92
   \       0x8E   0x4620             MOV      R0,R4
   \       0x90   0x....'....        BL       mbedtls_mpi_copy
   \       0x94   0x2800             CMP      R0,#+0
   \       0x96   0xD002             BEQ.N    ??mbedtls_rsa_export_crt_6
    441              {
    442                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
   \                     ??mbedtls_rsa_export_crt_4: (+1)
   \       0x98   0xF5A0 0x4081      SUB      R0,R0,#+16512
   \       0x9C   0xBDF2             POP      {R1,R4-R7,PC}
    443              }
    444          #else
    445              if( ( ret = mbedtls_rsa_deduce_crt( &ctx->P, &ctx->Q, &ctx->D,
    446                                                  DP, DQ, QP ) ) != 0 )
    447              {
    448                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
    449              }
    450          #endif
    451          
    452              return( 0 );
   \                     ??mbedtls_rsa_export_crt_6: (+1)
   \       0x9E   0x2000             MOVS     R0,#+0
   \       0xA0   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    453          }
    454          
    455          /*
    456           * Initialize an RSA context
    457           */

   \                                 In section .text, align 2, keep-with-next
    458          void mbedtls_rsa_init( mbedtls_rsa_context *ctx,
    459                         int padding,
    460                         int hash_id )
    461          {
   \                     mbedtls_rsa_init: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
   \        0x6   0x4616             MOV      R6,R2
    462              memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
   \        0x8   0x2200             MOVS     R2,#+0
   \        0xA   0x21AC             MOVS     R1,#+172
   \        0xC   0x....'....        BL       __aeabi_memset4
    463          
    464              mbedtls_rsa_set_padding( ctx, padding, hash_id );
   \       0x10   0x4632             MOV      R2,R6
   \       0x12   0x4629             MOV      R1,R5
   \       0x14   0x4620             MOV      R0,R4
   \       0x16   0xE8BD 0x4070      POP      {R4-R6,LR}
   \       0x1A                      REQUIRE mbedtls_rsa_set_padding
   \       0x1A                      ;; // Fall through to label mbedtls_rsa_set_padding
    465          
    466          #if defined(MBEDTLS_THREADING_C)
    467              mbedtls_mutex_init( &ctx->mutex );
    468          #endif
    469          }
    470          
    471          /*
    472           * Set padding for an existing RSA context
    473           */

   \                                 In section .text, align 2, keep-with-next
    474          void mbedtls_rsa_set_padding( mbedtls_rsa_context *ctx, int padding, int hash_id )
    475          {
    476              ctx->padding = padding;
   \                     mbedtls_rsa_set_padding: (+1)
   \        0x0   0xF8C0 0x10A4      STR      R1,[R0, #+164]
    477              ctx->hash_id = hash_id;
   \        0x4   0xF8C0 0x20A8      STR      R2,[R0, #+168]
    478          }
   \        0x8   0x4770             BX       LR               ;; return
    479          
    480          /*
    481           * Get length in bytes of RSA modulus
    482           */
    483          

   \                                 In section .text, align 2, keep-with-next
    484          size_t mbedtls_rsa_get_len( const mbedtls_rsa_context *ctx )
    485          {
    486              return( ctx->len );
   \                     mbedtls_rsa_get_len: (+1)
   \        0x0   0x6840             LDR      R0,[R0, #+4]
   \        0x2   0x4770             BX       LR               ;; return
    487          }
    488          
    489          
    490          #if defined(MBEDTLS_GENPRIME)
    491          
    492          /*
    493           * Generate an RSA keypair
    494           *
    495           * This generation method follows the RSA key pair generation procedure of
    496           * FIPS 186-4 if 2^16 < exponent < 2^256 and nbits = 2048 or nbits = 3072.
    497           */

   \                                 In section .text, align 2, keep-with-next
    498          int mbedtls_rsa_gen_key( mbedtls_rsa_context *ctx,
    499                           int (*f_rng)(void *, unsigned char *, size_t),
    500                           void *p_rng,
    501                           unsigned int nbits, int exponent )
    502          {
   \                     mbedtls_rsa_gen_key: (+1)
   \        0x0   0xE92D 0x41F8      PUSH     {R3-R8,LR}
   \        0x4   0xB08B             SUB      SP,SP,#+44
   \        0x6   0x4605             MOV      R5,R0
   \        0x8   0x460E             MOV      R6,R1
   \        0xA   0x4617             MOV      R7,R2
   \        0xC   0x4698             MOV      R8,R3
    503              int ret;
    504              mbedtls_mpi H, G, L;
    505          
    506              if( f_rng == NULL || nbits < 128 || exponent < 3 )
   \        0xE   0x0030             MOVS     R0,R6
   \       0x10   0xD008             BEQ.N    ??mbedtls_rsa_gen_key_0
   \       0x12   0xF1B8 0x0F80      CMP      R8,#+128
   \       0x16   0xD305             BCC.N    ??mbedtls_rsa_gen_key_0
   \       0x18   0x9C12             LDR      R4,[SP, #+72]
   \       0x1A   0x2C03             CMP      R4,#+3
   \       0x1C   0xDB02             BLT.N    ??mbedtls_rsa_gen_key_0
    507                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    508          
    509              if( nbits % 2 )
   \       0x1E   0xEA5F 0x70C8      LSLS     R0,R8,#+31
   \       0x22   0xD502             BPL.N    ??mbedtls_rsa_gen_key_1
    510                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   \                     ??mbedtls_rsa_gen_key_0: (+1)
   \       0x24   0x....'....        LDR.W    R0,??DataTable12  ;; 0xffffbf80
   \       0x28   0xE0DF             B.N      ??mbedtls_rsa_gen_key_2
    511          
    512              mbedtls_mpi_init( &H );
   \                     ??mbedtls_rsa_gen_key_1: (+1)
   \       0x2A   0xA802             ADD      R0,SP,#+8
   \       0x2C   0x....'....        BL       mbedtls_mpi_init
    513              mbedtls_mpi_init( &G );
   \       0x30   0xA805             ADD      R0,SP,#+20
   \       0x32   0x....'....        BL       mbedtls_mpi_init
    514              mbedtls_mpi_init( &L );
   \       0x36   0xA808             ADD      R0,SP,#+32
   \       0x38   0x....'....        BL       mbedtls_mpi_init
    515          
    516              /*
    517               * find primes P and Q with Q < P so that:
    518               * 1.  |P-Q| > 2^( nbits / 2 - 100 )
    519               * 2.  GCD( E, (P-1)*(Q-1) ) == 1
    520               * 3.  E^-1 mod LCM(P-1, Q-1) > 2^( nbits / 2 )
    521               */
    522              MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &ctx->E, exponent ) );
   \       0x3C   0x4621             MOV      R1,R4
   \       0x3E   0xF105 0x0014      ADD      R0,R5,#+20
   \       0x42   0x....'....        BL       mbedtls_mpi_lset
   \       0x46   0x0004             MOVS     R4,R0
   \       0x48   0xF040 0x80BC      BNE.W    ??mbedtls_rsa_gen_key_3
    523          
    524              do
    525              {
    526                  MBEDTLS_MPI_CHK( mbedtls_mpi_gen_prime( &ctx->P, nbits >> 1, 0,
    527                                                          f_rng, p_rng ) );
   \                     ??mbedtls_rsa_gen_key_4: (+1)
   \       0x4C   0x9700             STR      R7,[SP, #+0]
   \       0x4E   0x4633             MOV      R3,R6
   \       0x50   0x2200             MOVS     R2,#+0
   \       0x52   0x4641             MOV      R1,R8
   \       0x54   0x0849             LSRS     R1,R1,#+1
   \       0x56   0xF105 0x002C      ADD      R0,R5,#+44
   \       0x5A   0x....'....        BL       mbedtls_mpi_gen_prime
   \       0x5E   0x0004             MOVS     R4,R0
   \       0x60   0xF040 0x80B0      BNE.W    ??mbedtls_rsa_gen_key_3
    528          
    529                  MBEDTLS_MPI_CHK( mbedtls_mpi_gen_prime( &ctx->Q, nbits >> 1, 0,
    530                                                          f_rng, p_rng ) );
   \       0x64   0x9700             STR      R7,[SP, #+0]
   \       0x66   0x4633             MOV      R3,R6
   \       0x68   0x2200             MOVS     R2,#+0
   \       0x6A   0x4641             MOV      R1,R8
   \       0x6C   0x0849             LSRS     R1,R1,#+1
   \       0x6E   0xF105 0x0038      ADD      R0,R5,#+56
   \       0x72   0x....'....        BL       mbedtls_mpi_gen_prime
   \       0x76   0x0004             MOVS     R4,R0
   \       0x78   0xF040 0x80A4      BNE.W    ??mbedtls_rsa_gen_key_3
    531          
    532                  /* make sure the difference between p and q is not too small (FIPS 186-4 ¬ßB.3.3 step 5.4) */
    533                  MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &H, &ctx->P, &ctx->Q ) );
   \       0x7C   0xF105 0x0238      ADD      R2,R5,#+56
   \       0x80   0xF105 0x012C      ADD      R1,R5,#+44
   \       0x84   0xA802             ADD      R0,SP,#+8
   \       0x86   0x....'....        BL       mbedtls_mpi_sub_mpi
   \       0x8A   0x0004             MOVS     R4,R0
   \       0x8C   0xF040 0x809A      BNE.W    ??mbedtls_rsa_gen_key_3
    534                  if( mbedtls_mpi_bitlen( &H ) <= ( ( nbits >= 200 ) ? ( ( nbits >> 1 ) - 99 ) : 0 ) )
   \       0x90   0xF1B8 0x0FC8      CMP      R8,#+200
   \       0x94   0xD303             BCC.N    ??mbedtls_rsa_gen_key_5
   \       0x96   0x4644             MOV      R4,R8
   \       0x98   0x0864             LSRS     R4,R4,#+1
   \       0x9A   0x3C63             SUBS     R4,R4,#+99
   \       0x9C   0xE000             B.N      ??mbedtls_rsa_gen_key_6
   \                     ??mbedtls_rsa_gen_key_5: (+1)
   \       0x9E   0x2400             MOVS     R4,#+0
   \                     ??mbedtls_rsa_gen_key_6: (+1)
   \       0xA0   0xA802             ADD      R0,SP,#+8
   \       0xA2   0x....'....        BL       mbedtls_mpi_bitlen
   \       0xA6   0x4284             CMP      R4,R0
   \       0xA8   0xD2D0             BCS.N    ??mbedtls_rsa_gen_key_4
    535                      continue;
    536          
    537                  /* not required by any standards, but some users rely on the fact that P > Q */
    538                  if( H.s < 0 )
   \       0xAA   0x9802             LDR      R0,[SP, #+8]
   \       0xAC   0x2800             CMP      R0,#+0
   \       0xAE   0xD505             BPL.N    ??mbedtls_rsa_gen_key_7
    539                      mbedtls_mpi_swap( &ctx->P, &ctx->Q );
   \       0xB0   0xF105 0x0138      ADD      R1,R5,#+56
   \       0xB4   0xF105 0x002C      ADD      R0,R5,#+44
   \       0xB8   0x....'....        BL       mbedtls_mpi_swap
    540          
    541                  /* Temporarily replace P,Q by P-1, Q-1 */
    542                  MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &ctx->P, &ctx->P, 1 ) );
   \                     ??mbedtls_rsa_gen_key_7: (+1)
   \       0xBC   0x2201             MOVS     R2,#+1
   \       0xBE   0xF105 0x012C      ADD      R1,R5,#+44
   \       0xC2   0xF105 0x002C      ADD      R0,R5,#+44
   \       0xC6   0x....'....        BL       mbedtls_mpi_sub_int
   \       0xCA   0x0004             MOVS     R4,R0
   \       0xCC   0xD17A             BNE.N    ??mbedtls_rsa_gen_key_3
    543                  MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &ctx->Q, &ctx->Q, 1 ) );
   \       0xCE   0x2201             MOVS     R2,#+1
   \       0xD0   0xF105 0x0138      ADD      R1,R5,#+56
   \       0xD4   0xF105 0x0038      ADD      R0,R5,#+56
   \       0xD8   0x....'....        BL       mbedtls_mpi_sub_int
   \       0xDC   0x0004             MOVS     R4,R0
   \       0xDE   0xD171             BNE.N    ??mbedtls_rsa_gen_key_3
    544                  MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &H, &ctx->P, &ctx->Q ) );
   \       0xE0   0xF105 0x0238      ADD      R2,R5,#+56
   \       0xE4   0xF105 0x012C      ADD      R1,R5,#+44
   \       0xE8   0xA802             ADD      R0,SP,#+8
   \       0xEA   0x....'....        BL       mbedtls_mpi_mul_mpi
   \       0xEE   0x0004             MOVS     R4,R0
   \       0xF0   0xD168             BNE.N    ??mbedtls_rsa_gen_key_3
    545          
    546                  /* check GCD( E, (P-1)*(Q-1) ) == 1 (FIPS 186-4 ¬ßB.3.1 criterion 2(a)) */
    547                  MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, &ctx->E, &H  ) );
   \       0xF2   0xAA02             ADD      R2,SP,#+8
   \       0xF4   0xF105 0x0114      ADD      R1,R5,#+20
   \       0xF8   0xA805             ADD      R0,SP,#+20
   \       0xFA   0x....'....        BL       mbedtls_mpi_gcd
   \       0xFE   0x0004             MOVS     R4,R0
   \      0x100   0xD160             BNE.N    ??mbedtls_rsa_gen_key_3
    548                  if( mbedtls_mpi_cmp_int( &G, 1 ) != 0 )
   \      0x102   0x2101             MOVS     R1,#+1
   \      0x104   0xA805             ADD      R0,SP,#+20
   \      0x106   0x....'....        BL       mbedtls_mpi_cmp_int
   \      0x10A   0x2800             CMP      R0,#+0
   \      0x10C   0xD19E             BNE.N    ??mbedtls_rsa_gen_key_4
    549                      continue;
    550          
    551                  /* compute smallest possible D = E^-1 mod LCM(P-1, Q-1) (FIPS 186-4 ¬ßB.3.1 criterion 3(b)) */
    552                  MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, &ctx->P, &ctx->Q ) );
   \      0x10E   0xF105 0x0238      ADD      R2,R5,#+56
   \      0x112   0xF105 0x012C      ADD      R1,R5,#+44
   \      0x116   0xA805             ADD      R0,SP,#+20
   \      0x118   0x....'....        BL       mbedtls_mpi_gcd
   \      0x11C   0x0004             MOVS     R4,R0
   \      0x11E   0xD151             BNE.N    ??mbedtls_rsa_gen_key_3
    553                  MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( &L, NULL, &H, &G ) );
   \      0x120   0xAB05             ADD      R3,SP,#+20
   \      0x122   0xAA02             ADD      R2,SP,#+8
   \      0x124   0x2100             MOVS     R1,#+0
   \      0x126   0xA808             ADD      R0,SP,#+32
   \      0x128   0x....'....        BL       mbedtls_mpi_div_mpi
   \      0x12C   0x0004             MOVS     R4,R0
   \      0x12E   0xD149             BNE.N    ??mbedtls_rsa_gen_key_3
    554                  MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &ctx->D, &ctx->E, &L ) );
   \      0x130   0xAA08             ADD      R2,SP,#+32
   \      0x132   0xF105 0x0114      ADD      R1,R5,#+20
   \      0x136   0xF105 0x0020      ADD      R0,R5,#+32
   \      0x13A   0x....'....        BL       mbedtls_mpi_inv_mod
   \      0x13E   0x0004             MOVS     R4,R0
   \      0x140   0xD140             BNE.N    ??mbedtls_rsa_gen_key_3
    555          
    556                  if( mbedtls_mpi_bitlen( &ctx->D ) <= ( ( nbits + 1 ) / 2 ) ) // (FIPS 186-4 ¬ßB.3.1 criterion 3(a))
   \      0x142   0xF105 0x0020      ADD      R0,R5,#+32
   \      0x146   0x....'....        BL       mbedtls_mpi_bitlen
   \      0x14A   0xF108 0x0101      ADD      R1,R8,#+1
   \      0x14E   0x0849             LSRS     R1,R1,#+1
   \      0x150   0x4281             CMP      R1,R0
   \      0x152   0xF4BF 0xAF7B      BCS.W    ??mbedtls_rsa_gen_key_4
    557                      continue;
    558          
    559                  break;
    560              }
    561              while( 1 );
    562          
    563              /* Restore P,Q */
    564              MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( &ctx->P,  &ctx->P, 1 ) );
   \      0x156   0x2201             MOVS     R2,#+1
   \      0x158   0xF105 0x012C      ADD      R1,R5,#+44
   \      0x15C   0xF105 0x002C      ADD      R0,R5,#+44
   \      0x160   0x....'....        BL       mbedtls_mpi_add_int
   \      0x164   0x0004             MOVS     R4,R0
   \      0x166   0xD12D             BNE.N    ??mbedtls_rsa_gen_key_3
    565              MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( &ctx->Q,  &ctx->Q, 1 ) );
   \      0x168   0x2201             MOVS     R2,#+1
   \      0x16A   0xF105 0x0138      ADD      R1,R5,#+56
   \      0x16E   0xF105 0x0038      ADD      R0,R5,#+56
   \      0x172   0x....'....        BL       mbedtls_mpi_add_int
   \      0x176   0x0004             MOVS     R4,R0
   \      0x178   0xD124             BNE.N    ??mbedtls_rsa_gen_key_3
    566          
    567              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->N, &ctx->P, &ctx->Q ) );
   \      0x17A   0xF105 0x0238      ADD      R2,R5,#+56
   \      0x17E   0xF105 0x012C      ADD      R1,R5,#+44
   \      0x182   0xF105 0x0008      ADD      R0,R5,#+8
   \      0x186   0x....'....        BL       mbedtls_mpi_mul_mpi
   \      0x18A   0x0004             MOVS     R4,R0
   \      0x18C   0xD11A             BNE.N    ??mbedtls_rsa_gen_key_3
    568          
    569              ctx->len = mbedtls_mpi_size( &ctx->N );
   \      0x18E   0xF105 0x0008      ADD      R0,R5,#+8
   \      0x192   0x....'....        BL       mbedtls_mpi_size
   \      0x196   0x6068             STR      R0,[R5, #+4]
    570          
    571          #if !defined(MBEDTLS_RSA_NO_CRT)
    572              /*
    573               * DP = D mod (P - 1)
    574               * DQ = D mod (Q - 1)
    575               * QP = Q^-1 mod P
    576               */
    577              MBEDTLS_MPI_CHK( mbedtls_rsa_deduce_crt( &ctx->P, &ctx->Q, &ctx->D,
    578                                                       &ctx->DP, &ctx->DQ, &ctx->QP ) );
   \      0x198   0xF105 0x005C      ADD      R0,R5,#+92
   \      0x19C   0x9001             STR      R0,[SP, #+4]
   \      0x19E   0xF105 0x0050      ADD      R0,R5,#+80
   \      0x1A2   0x9000             STR      R0,[SP, #+0]
   \      0x1A4   0xF105 0x0344      ADD      R3,R5,#+68
   \      0x1A8   0xF105 0x0220      ADD      R2,R5,#+32
   \      0x1AC   0xF105 0x0138      ADD      R1,R5,#+56
   \      0x1B0   0xF105 0x002C      ADD      R0,R5,#+44
   \      0x1B4   0x....'....        BL       mbedtls_rsa_deduce_crt
   \      0x1B8   0x0004             MOVS     R4,R0
   \      0x1BA   0xD103             BNE.N    ??mbedtls_rsa_gen_key_3
    579          #endif /* MBEDTLS_RSA_NO_CRT */
    580          
    581              /* Double-check */
    582              MBEDTLS_MPI_CHK( mbedtls_rsa_check_privkey( ctx ) );
   \      0x1BC   0x4628             MOV      R0,R5
   \      0x1BE   0x....'....        BL       mbedtls_rsa_check_privkey
   \      0x1C2   0x4604             MOV      R4,R0
    583          
    584          cleanup:
    585          
    586              mbedtls_mpi_free( &H );
   \                     ??mbedtls_rsa_gen_key_3: (+1)
   \      0x1C4   0xA802             ADD      R0,SP,#+8
   \      0x1C6   0x....'....        BL       mbedtls_mpi_free
    587              mbedtls_mpi_free( &G );
   \      0x1CA   0xA805             ADD      R0,SP,#+20
   \      0x1CC   0x....'....        BL       mbedtls_mpi_free
    588              mbedtls_mpi_free( &L );
   \      0x1D0   0xA808             ADD      R0,SP,#+32
   \      0x1D2   0x....'....        BL       mbedtls_mpi_free
    589          
    590              if( ret != 0 )
   \      0x1D6   0x2C00             CMP      R4,#+0
   \      0x1D8   0xD006             BEQ.N    ??mbedtls_rsa_gen_key_8
    591              {
    592                  mbedtls_rsa_free( ctx );
   \      0x1DA   0x4628             MOV      R0,R5
   \      0x1DC   0x....'....        BL       mbedtls_rsa_free
    593                  return( MBEDTLS_ERR_RSA_KEY_GEN_FAILED + ret );
   \      0x1E0   0xF5A4 0x4483      SUB      R4,R4,#+16768
   \      0x1E4   0x4620             MOV      R0,R4
   \      0x1E6   0xE000             B.N      ??mbedtls_rsa_gen_key_2
    594              }
    595          
    596              return( 0 );
   \                     ??mbedtls_rsa_gen_key_8: (+1)
   \      0x1E8   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_rsa_gen_key_2: (+1)
   \      0x1EA   0xB00C             ADD      SP,SP,#+48
   \      0x1EC   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    597          }
    598          
    599          #endif /* MBEDTLS_GENPRIME */
    600          
    601          /*
    602           * Check a public RSA key
    603           */

   \                                 In section .text, align 2, keep-with-next
    604          int mbedtls_rsa_check_pubkey( const mbedtls_rsa_context *ctx )
    605          {
   \                     mbedtls_rsa_check_pubkey: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x4604             MOV      R4,R0
    606              if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
   \        0x4   0x2200             MOVS     R2,#+0
   \        0x6   0x4611             MOV      R1,R2
   \        0x8   0x....'....        BL       rsa_check_context
   \        0xC   0x2800             CMP      R0,#+0
   \        0xE   0xD11A             BNE.N    ??mbedtls_rsa_check_pubkey_0
    607                  return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    608          
    609              if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
   \       0x10   0xF104 0x0008      ADD      R0,R4,#+8
   \       0x14   0x....'....        BL       mbedtls_mpi_bitlen
   \       0x18   0x2880             CMP      R0,#+128
   \       0x1A   0xD314             BCC.N    ??mbedtls_rsa_check_pubkey_0
    610              {
    611                  return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    612              }
    613          
    614              if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
    615                  mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
    616                  mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
   \       0x1C   0x2100             MOVS     R1,#+0
   \       0x1E   0xF104 0x0014      ADD      R0,R4,#+20
   \       0x22   0x....'....        BL       mbedtls_mpi_get_bit
   \       0x26   0x2800             CMP      R0,#+0
   \       0x28   0xD00D             BEQ.N    ??mbedtls_rsa_check_pubkey_0
   \       0x2A   0xF104 0x0014      ADD      R0,R4,#+20
   \       0x2E   0x....'....        BL       mbedtls_mpi_bitlen
   \       0x32   0x2802             CMP      R0,#+2
   \       0x34   0xD307             BCC.N    ??mbedtls_rsa_check_pubkey_0
   \       0x36   0xF104 0x0108      ADD      R1,R4,#+8
   \       0x3A   0xF104 0x0014      ADD      R0,R4,#+20
   \       0x3E   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \       0x42   0x2800             CMP      R0,#+0
   \       0x44   0xD402             BMI.N    ??mbedtls_rsa_check_pubkey_1
    617              {
    618                  return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
   \                     ??mbedtls_rsa_check_pubkey_0: (+1)
   \       0x46   0x....'....        LDR.W    R0,??DataTable19  ;; 0xffffbe00
   \       0x4A   0xBD10             POP      {R4,PC}
    619              }
    620          
    621              return( 0 );
   \                     ??mbedtls_rsa_check_pubkey_1: (+1)
   \       0x4C   0x2000             MOVS     R0,#+0
   \       0x4E   0xBD10             POP      {R4,PC}          ;; return
    622          }
    623          
    624          /*
    625           * Check for the consistency of all fields in an RSA private key context
    626           */

   \                                 In section .text, align 2, keep-with-next
    627          int mbedtls_rsa_check_privkey( const mbedtls_rsa_context *ctx )
    628          {
   \                     mbedtls_rsa_check_privkey: (+1)
   \        0x0   0xB51F             PUSH     {R0-R4,LR}
   \        0x2   0x4604             MOV      R4,R0
    629              if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
    630                  rsa_check_context( ctx, 1 /* private */, 1 /* blinding */ ) != 0 )
   \        0x4   0x....'....        BL       mbedtls_rsa_check_pubkey
   \        0x8   0x2800             CMP      R0,#+0
   \        0xA   0xD106             BNE.N    ??mbedtls_rsa_check_privkey_0
   \        0xC   0x2201             MOVS     R2,#+1
   \        0xE   0x4611             MOV      R1,R2
   \       0x10   0x4620             MOV      R0,R4
   \       0x12   0x....'....        BL       rsa_check_context
   \       0x16   0x2800             CMP      R0,#+0
   \       0x18   0xD002             BEQ.N    ??mbedtls_rsa_check_privkey_1
    631              {
    632                  return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
   \                     ??mbedtls_rsa_check_privkey_0: (+1)
   \       0x1A   0x....'....        LDR.W    R0,??DataTable19  ;; 0xffffbe00
   \       0x1E   0xE02A             B.N      ??mbedtls_rsa_check_privkey_2
    633              }
    634          
    635              if( mbedtls_rsa_validate_params( &ctx->N, &ctx->P, &ctx->Q,
    636                                               &ctx->D, &ctx->E, NULL, NULL ) != 0 )
   \                     ??mbedtls_rsa_check_privkey_1: (+1)
   \       0x20   0x2000             MOVS     R0,#+0
   \       0x22   0x9002             STR      R0,[SP, #+8]
   \       0x24   0x9001             STR      R0,[SP, #+4]
   \       0x26   0xF104 0x0014      ADD      R0,R4,#+20
   \       0x2A   0x9000             STR      R0,[SP, #+0]
   \       0x2C   0xF104 0x0320      ADD      R3,R4,#+32
   \       0x30   0xF104 0x0238      ADD      R2,R4,#+56
   \       0x34   0xF104 0x012C      ADD      R1,R4,#+44
   \       0x38   0xF104 0x0008      ADD      R0,R4,#+8
   \       0x3C   0x....'....        BL       mbedtls_rsa_validate_params
   \       0x40   0x2800             CMP      R0,#+0
   \       0x42   0xD002             BEQ.N    ??mbedtls_rsa_check_privkey_3
    637              {
    638                  return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
   \       0x44   0x....'....        LDR.W    R0,??DataTable19  ;; 0xffffbe00
   \       0x48   0xE015             B.N      ??mbedtls_rsa_check_privkey_2
    639              }
    640          
    641          #if !defined(MBEDTLS_RSA_NO_CRT)
    642              else if( mbedtls_rsa_validate_crt( &ctx->P, &ctx->Q, &ctx->D,
    643                                                 &ctx->DP, &ctx->DQ, &ctx->QP ) != 0 )
   \                     ??mbedtls_rsa_check_privkey_3: (+1)
   \       0x4A   0xF104 0x005C      ADD      R0,R4,#+92
   \       0x4E   0x9001             STR      R0,[SP, #+4]
   \       0x50   0xF104 0x0050      ADD      R0,R4,#+80
   \       0x54   0x9000             STR      R0,[SP, #+0]
   \       0x56   0xF104 0x0344      ADD      R3,R4,#+68
   \       0x5A   0xF104 0x0220      ADD      R2,R4,#+32
   \       0x5E   0xF104 0x0138      ADD      R1,R4,#+56
   \       0x62   0xF104 0x002C      ADD      R0,R4,#+44
   \       0x66   0x....'....        BL       mbedtls_rsa_validate_crt
   \       0x6A   0x2800             CMP      R0,#+0
   \       0x6C   0xD002             BEQ.N    ??mbedtls_rsa_check_privkey_4
    644              {
    645                  return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
   \       0x6E   0x....'....        LDR.W    R0,??DataTable19  ;; 0xffffbe00
   \       0x72   0xE000             B.N      ??mbedtls_rsa_check_privkey_2
    646              }
    647          #endif
    648          
    649              return( 0 );
   \                     ??mbedtls_rsa_check_privkey_4: (+1)
   \       0x74   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_rsa_check_privkey_2: (+1)
   \       0x76   0xB004             ADD      SP,SP,#+16
   \       0x78   0xBD10             POP      {R4,PC}          ;; return
    650          }
    651          
    652          /*
    653           * Check if contexts holding a public and private key match
    654           */

   \                                 In section .text, align 2, keep-with-next
    655          int mbedtls_rsa_check_pub_priv( const mbedtls_rsa_context *pub,
    656                                          const mbedtls_rsa_context *prv )
    657          {
   \                     mbedtls_rsa_check_pub_priv: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
    658              if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
    659                  mbedtls_rsa_check_privkey( prv ) != 0 )
   \        0x6   0x....'....        BL       mbedtls_rsa_check_pubkey
   \        0xA   0x2800             CMP      R0,#+0
   \        0xC   0xD114             BNE.N    ??mbedtls_rsa_check_pub_priv_0
   \        0xE   0x4628             MOV      R0,R5
   \       0x10   0x....'....        BL       mbedtls_rsa_check_privkey
   \       0x14   0x2800             CMP      R0,#+0
   \       0x16   0xD10F             BNE.N    ??mbedtls_rsa_check_pub_priv_0
    660              {
    661                  return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    662              }
    663          
    664              if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
    665                  mbedtls_mpi_cmp_mpi( &pub->E, &prv->E ) != 0 )
   \       0x18   0xF105 0x0108      ADD      R1,R5,#+8
   \       0x1C   0xF104 0x0008      ADD      R0,R4,#+8
   \       0x20   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \       0x24   0x2800             CMP      R0,#+0
   \       0x26   0xD107             BNE.N    ??mbedtls_rsa_check_pub_priv_0
   \       0x28   0xF105 0x0114      ADD      R1,R5,#+20
   \       0x2C   0xF104 0x0014      ADD      R0,R4,#+20
   \       0x30   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \       0x34   0x2800             CMP      R0,#+0
   \       0x36   0xD002             BEQ.N    ??mbedtls_rsa_check_pub_priv_1
    666              {
    667                  return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
   \                     ??mbedtls_rsa_check_pub_priv_0: (+1)
   \       0x38   0x....'....        LDR.W    R0,??DataTable19  ;; 0xffffbe00
   \       0x3C   0xBD32             POP      {R1,R4,R5,PC}
    668              }
    669          
    670              return( 0 );
   \                     ??mbedtls_rsa_check_pub_priv_1: (+1)
   \       0x3E   0x2000             MOVS     R0,#+0
   \       0x40   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    671          }
    672          
    673          #if !defined(MBEDTLS_RSA_PUBLIC_ALT)
    674          /*
    675           * Do an RSA public key operation
    676           */

   \                                 In section .text, align 2, keep-with-next
    677          int mbedtls_rsa_public( mbedtls_rsa_context *ctx,
    678                          const unsigned char *input,
    679                          unsigned char *output )
    680          {
   \                     mbedtls_rsa_public: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0xB084             SUB      SP,SP,#+16
   \        0x4   0x4605             MOV      R5,R0
   \        0x6   0x460C             MOV      R4,R1
   \        0x8   0x4616             MOV      R6,R2
    681              int ret;
    682              size_t olen;
    683              mbedtls_mpi T;
    684          
    685              if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
   \        0xA   0x2200             MOVS     R2,#+0
   \        0xC   0x4611             MOV      R1,R2
   \        0xE   0x....'....        BL       rsa_check_context
   \       0x12   0x2800             CMP      R0,#+0
   \       0x14   0xD002             BEQ.N    ??mbedtls_rsa_public_0
    686                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   \       0x16   0x....'....        LDR.W    R0,??DataTable12  ;; 0xffffbf80
   \       0x1A   0xE031             B.N      ??mbedtls_rsa_public_1
    687          
    688              mbedtls_mpi_init( &T );
   \                     ??mbedtls_rsa_public_0: (+1)
   \       0x1C   0xA801             ADD      R0,SP,#+4
   \       0x1E   0x....'....        BL       mbedtls_mpi_init
    689          
    690          #if defined(MBEDTLS_THREADING_C)
    691              if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
    692                  return( ret );
    693          #endif
    694          
    695              MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
   \       0x22   0x686A             LDR      R2,[R5, #+4]
   \       0x24   0x4621             MOV      R1,R4
   \       0x26   0xA801             ADD      R0,SP,#+4
   \       0x28   0x....'....        BL       mbedtls_mpi_read_binary
   \       0x2C   0x0004             MOVS     R4,R0
   \       0x2E   0xD11D             BNE.N    ??mbedtls_rsa_public_2
    696          
    697              if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
   \       0x30   0xF105 0x0108      ADD      R1,R5,#+8
   \       0x34   0xA801             ADD      R0,SP,#+4
   \       0x36   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \       0x3A   0x2800             CMP      R0,#+0
   \       0x3C   0xD402             BMI.N    ??mbedtls_rsa_public_3
    698              {
    699                  ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
   \       0x3E   0xF06F 0x0403      MVN      R4,#+3
    700                  goto cleanup;
   \       0x42   0xE013             B.N      ??mbedtls_rsa_public_2
    701              }
    702          
    703              olen = ctx->len;
   \                     ??mbedtls_rsa_public_3: (+1)
   \       0x44   0x686F             LDR      R7,[R5, #+4]
    704              MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
   \       0x46   0xF105 0x0068      ADD      R0,R5,#+104
   \       0x4A   0x9000             STR      R0,[SP, #+0]
   \       0x4C   0xF105 0x0308      ADD      R3,R5,#+8
   \       0x50   0xF105 0x0214      ADD      R2,R5,#+20
   \       0x54   0xA901             ADD      R1,SP,#+4
   \       0x56   0xA801             ADD      R0,SP,#+4
   \       0x58   0x....'....        BL       mbedtls_mpi_exp_mod
   \       0x5C   0x0004             MOVS     R4,R0
   \       0x5E   0xD105             BNE.N    ??mbedtls_rsa_public_2
    705              MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
   \       0x60   0x463A             MOV      R2,R7
   \       0x62   0x4631             MOV      R1,R6
   \       0x64   0xA801             ADD      R0,SP,#+4
   \       0x66   0x....'....        BL       mbedtls_mpi_write_binary
   \       0x6A   0x4604             MOV      R4,R0
    706          
    707          cleanup:
    708          #if defined(MBEDTLS_THREADING_C)
    709              if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
    710                  return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
    711          #endif
    712          
    713              mbedtls_mpi_free( &T );
   \                     ??mbedtls_rsa_public_2: (+1)
   \       0x6C   0xA801             ADD      R0,SP,#+4
   \       0x6E   0x....'....        BL       mbedtls_mpi_free
    714          
    715              if( ret != 0 )
   \       0x72   0x2C00             CMP      R4,#+0
   \       0x74   0xD003             BEQ.N    ??mbedtls_rsa_public_4
    716                  return( MBEDTLS_ERR_RSA_PUBLIC_FAILED + ret );
   \       0x76   0xF5A4 0x4485      SUB      R4,R4,#+17024
   \       0x7A   0x4620             MOV      R0,R4
   \       0x7C   0xE000             B.N      ??mbedtls_rsa_public_1
    717          
    718              return( 0 );
   \                     ??mbedtls_rsa_public_4: (+1)
   \       0x7E   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_rsa_public_1: (+1)
   \       0x80   0xB005             ADD      SP,SP,#+20
   \       0x82   0xBDF0             POP      {R4-R7,PC}       ;; return
    719          }
    720          
    721          #endif /* MBEDTLS_RSA_PUBLIC_ALT */
    722          
    723          /*
    724           * Generate or update blinding values, see section 10 of:
    725           *  KOCHER, Paul C. Timing attacks on implementations of Diffie-Hellman, RSA,
    726           *  DSS, and other systems. In : Advances in Cryptology-CRYPTO'96. Springer
    727           *  Berlin Heidelberg, 1996. p. 104-113.
    728           */

   \                                 In section .text, align 2, keep-with-next
    729          static int rsa_prepare_blinding( mbedtls_rsa_context *ctx,
    730                           int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
    731          {
   \                     rsa_prepare_blinding: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
   \        0x6   0x4616             MOV      R6,R2
    732              int ret, count = 0;
   \        0x8   0x2700             MOVS     R7,#+0
    733          
    734              if( ctx->Vf.p != NULL )
   \        0xA   0xF8D4 0x00A0      LDR      R0,[R4, #+160]
   \        0xE   0x2800             CMP      R0,#+0
   \       0x10   0xD053             BEQ.N    ??rsa_prepare_blinding_0
    735              {
    736                  /* We already have blinding values, just update them by squaring */
    737                  MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vi, &ctx->Vi, &ctx->Vi ) );
   \       0x12   0xF104 0x028C      ADD      R2,R4,#+140
   \       0x16   0xF104 0x018C      ADD      R1,R4,#+140
   \       0x1A   0xF104 0x008C      ADD      R0,R4,#+140
   \       0x1E   0x....'....        BL       mbedtls_mpi_mul_mpi
   \       0x22   0x2800             CMP      R0,#+0
   \       0x24   0xD145             BNE.N    ??rsa_prepare_blinding_1
    738                  MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vi, &ctx->Vi, &ctx->N ) );
   \       0x26   0xF104 0x0208      ADD      R2,R4,#+8
   \       0x2A   0xF104 0x018C      ADD      R1,R4,#+140
   \       0x2E   0xF104 0x008C      ADD      R0,R4,#+140
   \       0x32   0x....'....        BL       mbedtls_mpi_mod_mpi
   \       0x36   0x2800             CMP      R0,#+0
   \       0x38   0xD13B             BNE.N    ??rsa_prepare_blinding_1
    739                  MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vf, &ctx->Vf, &ctx->Vf ) );
   \       0x3A   0xF104 0x0298      ADD      R2,R4,#+152
   \       0x3E   0xF104 0x0198      ADD      R1,R4,#+152
   \       0x42   0xF104 0x0098      ADD      R0,R4,#+152
   \       0x46   0x....'....        BL       mbedtls_mpi_mul_mpi
   \       0x4A   0x2800             CMP      R0,#+0
   \       0x4C   0xD131             BNE.N    ??rsa_prepare_blinding_1
    740                  MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vf, &ctx->Vf, &ctx->N ) );
   \       0x4E   0xF104 0x0208      ADD      R2,R4,#+8
   \       0x52   0xF104 0x0198      ADD      R1,R4,#+152
   \       0x56   0xF104 0x0098      ADD      R0,R4,#+152
   \       0x5A   0xE8BD 0x40F8      POP      {R3-R7,LR}
   \       0x5E   0x....'....        B.W      mbedtls_mpi_mod_mpi
    741          
    742                  goto cleanup;
    743              }
    744          
    745              /* Unblinding value: Vf = random number, invertible mod N */
    746              do {
    747                  if( count++ > 10 )
    748                      return( MBEDTLS_ERR_RSA_RNG_FAILED );
    749          
    750                  MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
    751                  MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
   \                     ??rsa_prepare_blinding_2: (+1)
   \       0x62   0xF104 0x0208      ADD      R2,R4,#+8
   \       0x66   0xF104 0x0198      ADD      R1,R4,#+152
   \       0x6A   0xF104 0x008C      ADD      R0,R4,#+140
   \       0x6E   0x....'....        BL       mbedtls_mpi_gcd
   \       0x72   0x2800             CMP      R0,#+0
   \       0x74   0xD11D             BNE.N    ??rsa_prepare_blinding_1
    752              } while( mbedtls_mpi_cmp_int( &ctx->Vi, 1 ) != 0 );
   \       0x76   0x2101             MOVS     R1,#+1
   \       0x78   0xF104 0x008C      ADD      R0,R4,#+140
   \       0x7C   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x80   0x2800             CMP      R0,#+0
   \       0x82   0xD11A             BNE.N    ??rsa_prepare_blinding_0
    753          
    754              /* Blinding value: Vi =  Vf^(-e) mod N */
    755              MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &ctx->Vi, &ctx->Vf, &ctx->N ) );
   \       0x84   0xF104 0x0208      ADD      R2,R4,#+8
   \       0x88   0xF104 0x0198      ADD      R1,R4,#+152
   \       0x8C   0xF104 0x008C      ADD      R0,R4,#+140
   \       0x90   0x....'....        BL       mbedtls_mpi_inv_mod
   \       0x94   0x2800             CMP      R0,#+0
   \       0x96   0xD10C             BNE.N    ??rsa_prepare_blinding_1
    756              MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &ctx->Vi, &ctx->Vi, &ctx->E, &ctx->N, &ctx->RN ) );
   \       0x98   0xF104 0x0068      ADD      R0,R4,#+104
   \       0x9C   0x9000             STR      R0,[SP, #+0]
   \       0x9E   0xF104 0x0308      ADD      R3,R4,#+8
   \       0xA2   0xF104 0x0214      ADD      R2,R4,#+20
   \       0xA6   0xF104 0x018C      ADD      R1,R4,#+140
   \       0xAA   0xF104 0x008C      ADD      R0,R4,#+140
   \       0xAE   0x....'....        BL       mbedtls_mpi_exp_mod
    757          
    758          
    759          cleanup:
    760              return( ret );
   \                     ??rsa_prepare_blinding_1: (+1)
   \       0xB2   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
   \                     ??rsa_prepare_blinding_3: (+1)
   \       0xB4   0x....'....        LDR.W    R0,??DataTable22  ;; 0xffffbb80
   \       0xB8   0xBDF2             POP      {R1,R4-R7,PC}
   \                     ??rsa_prepare_blinding_0: (+1)
   \       0xBA   0x4638             MOV      R0,R7
   \       0xBC   0x1C47             ADDS     R7,R0,#+1
   \       0xBE   0x280B             CMP      R0,#+11
   \       0xC0   0xDAF8             BGE.N    ??rsa_prepare_blinding_3
   \       0xC2   0x4633             MOV      R3,R6
   \       0xC4   0x462A             MOV      R2,R5
   \       0xC6   0x6861             LDR      R1,[R4, #+4]
   \       0xC8   0x1E49             SUBS     R1,R1,#+1
   \       0xCA   0xF104 0x0098      ADD      R0,R4,#+152
   \       0xCE   0x....'....        BL       mbedtls_mpi_fill_random
   \       0xD2   0x2800             CMP      R0,#+0
   \       0xD4   0xD1ED             BNE.N    ??rsa_prepare_blinding_1
   \       0xD6   0xE7C4             B.N      ??rsa_prepare_blinding_2
    761          }
    762          
    763          /*
    764           * Exponent blinding supposed to prevent side-channel attacks using multiple
    765           * traces of measurements to recover the RSA key. The more collisions are there,
    766           * the more bits of the key can be recovered. See [3].
    767           *
    768           * Collecting n collisions with m bit long blinding value requires 2^(m-m/n)
    769           * observations on avarage.
    770           *
    771           * For example with 28 byte blinding to achieve 2 collisions the adversary has
    772           * to make 2^112 observations on avarage.
    773           *
    774           * (With the currently (as of 2017 April) known best algorithms breaking 2048
    775           * bit RSA requires approximately as much time as trying out 2^112 random keys.
    776           * Thus in this sense with 28 byte blinding the security is not reduced by
    777           * side-channel attacks like the one in [3])
    778           *
    779           * This countermeasure does not help if the key recovery is possible with a
    780           * single trace.
    781           */
    782          #define RSA_EXPONENT_BLINDING 28
    783          
    784          /*
    785           * Do an RSA private key operation
    786           */

   \                                 In section .text, align 2, keep-with-next
    787          int mbedtls_rsa_private( mbedtls_rsa_context *ctx,
    788                           int (*f_rng)(void *, unsigned char *, size_t),
    789                           void *p_rng,
    790                           const unsigned char *input,
    791                           unsigned char *output )
    792          {
   \                     mbedtls_rsa_private: (+1)
   \        0x0   0xE92D 0x43F0      PUSH     {R4-R9,LR}
   \        0x4   0xB09F             SUB      SP,SP,#+124
   \        0x6   0x4605             MOV      R5,R0
   \        0x8   0x460E             MOV      R6,R1
   \        0xA   0x4617             MOV      R7,R2
   \        0xC   0x461C             MOV      R4,R3
    793              int ret;
    794              size_t olen;
    795          
    796              /* Temporary holding the result */
    797              mbedtls_mpi T;
    798          
    799              /* Temporaries holding P-1, Q-1 and the
    800               * exponent blinding factor, respectively. */
    801              mbedtls_mpi P1, Q1, R;
    802          
    803          #if !defined(MBEDTLS_RSA_NO_CRT)
    804              /* Temporaries holding the results mod p resp. mod q. */
    805              mbedtls_mpi TP, TQ;
    806          
    807              /* Temporaries holding the blinded exponents for
    808               * the mod p resp. mod q computation (if used). */
    809              mbedtls_mpi DP_blind, DQ_blind;
    810          
    811              /* Pointers to actual exponents to be used - either the unblinded
    812               * or the blinded ones, depending on the presence of a PRNG. */
    813              mbedtls_mpi *DP = &ctx->DP;
   \        0xE   0xF105 0x0844      ADD      R8,R5,#+68
    814              mbedtls_mpi *DQ = &ctx->DQ;
   \       0x12   0xF105 0x0950      ADD      R9,R5,#+80
    815          #else
    816              /* Temporary holding the blinded exponent (if used). */
    817              mbedtls_mpi D_blind;
    818          
    819              /* Pointer to actual exponent to be used - either the unblinded
    820               * or the blinded one, depending on the presence of a PRNG. */
    821              mbedtls_mpi *D = &ctx->D;
    822          #endif /* MBEDTLS_RSA_NO_CRT */
    823          
    824              /* Temporaries holding the initial input and the double
    825               * checked result; should be the same in the end. */
    826              mbedtls_mpi I, C;
    827          
    828              if( rsa_check_context( ctx, 1             /* private key checks */,
    829                                          f_rng != NULL /* blinding y/n       */ ) != 0 )
   \       0x16   0x0030             MOVS     R0,R6
   \       0x18   0xD001             BEQ.N    ??mbedtls_rsa_private_0
   \       0x1A   0x2201             MOVS     R2,#+1
   \       0x1C   0xE000             B.N      ??mbedtls_rsa_private_1
   \                     ??mbedtls_rsa_private_0: (+1)
   \       0x1E   0x2200             MOVS     R2,#+0
   \                     ??mbedtls_rsa_private_1: (+1)
   \       0x20   0x2101             MOVS     R1,#+1
   \       0x22   0x4628             MOV      R0,R5
   \       0x24   0x....'....        BL       rsa_check_context
   \       0x28   0x2800             CMP      R0,#+0
   \       0x2A   0xD001             BEQ.N    ??mbedtls_rsa_private_2
    830              {
    831                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   \       0x2C   0x....             LDR.N    R0,??DataTable12  ;; 0xffffbf80
   \       0x2E   0xE12E             B.N      ??mbedtls_rsa_private_3
    832              }
    833          
    834          #if defined(MBEDTLS_THREADING_C)
    835              if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
    836                  return( ret );
    837          #endif
    838          
    839              /* MPI Initialization */
    840              mbedtls_mpi_init( &T );
   \                     ??mbedtls_rsa_private_2: (+1)
   \       0x30   0xA801             ADD      R0,SP,#+4
   \       0x32   0x....'....        BL       mbedtls_mpi_init
    841          
    842              mbedtls_mpi_init( &P1 );
   \       0x36   0xA81C             ADD      R0,SP,#+112
   \       0x38   0x....'....        BL       mbedtls_mpi_init
    843              mbedtls_mpi_init( &Q1 );
   \       0x3C   0xA819             ADD      R0,SP,#+100
   \       0x3E   0x....'....        BL       mbedtls_mpi_init
    844              mbedtls_mpi_init( &R );
   \       0x42   0xA810             ADD      R0,SP,#+64
   \       0x44   0x....'....        BL       mbedtls_mpi_init
    845          
    846              if( f_rng != NULL )
   \       0x48   0x0030             MOVS     R0,R6
   \       0x4A   0xD005             BEQ.N    ??mbedtls_rsa_private_4
    847              {
    848          #if defined(MBEDTLS_RSA_NO_CRT)
    849                  mbedtls_mpi_init( &D_blind );
    850          #else
    851                  mbedtls_mpi_init( &DP_blind );
   \       0x4C   0xA80A             ADD      R0,SP,#+40
   \       0x4E   0x....'....        BL       mbedtls_mpi_init
    852                  mbedtls_mpi_init( &DQ_blind );
   \       0x52   0xA807             ADD      R0,SP,#+28
   \       0x54   0x....'....        BL       mbedtls_mpi_init
    853          #endif
    854              }
    855          
    856          #if !defined(MBEDTLS_RSA_NO_CRT)
    857              mbedtls_mpi_init( &TP ); mbedtls_mpi_init( &TQ );
   \                     ??mbedtls_rsa_private_4: (+1)
   \       0x58   0xA804             ADD      R0,SP,#+16
   \       0x5A   0x....'....        BL       mbedtls_mpi_init
   \       0x5E   0xA80D             ADD      R0,SP,#+52
   \       0x60   0x....'....        BL       mbedtls_mpi_init
    858          #endif
    859          
    860              mbedtls_mpi_init( &I );
   \       0x64   0xA816             ADD      R0,SP,#+88
   \       0x66   0x....'....        BL       mbedtls_mpi_init
    861              mbedtls_mpi_init( &C );
   \       0x6A   0xA813             ADD      R0,SP,#+76
   \       0x6C   0x....'....        BL       mbedtls_mpi_init
    862          
    863              /* End of MPI initialization */
    864          
    865              MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
   \       0x70   0x686A             LDR      R2,[R5, #+4]
   \       0x72   0x4621             MOV      R1,R4
   \       0x74   0xA801             ADD      R0,SP,#+4
   \       0x76   0x....'....        BL       mbedtls_mpi_read_binary
   \       0x7A   0x0004             MOVS     R4,R0
   \       0x7C   0xF040 0x80E0      BNE.W    ??mbedtls_rsa_private_5
    866              if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
   \       0x80   0xF105 0x0108      ADD      R1,R5,#+8
   \       0x84   0xA801             ADD      R0,SP,#+4
   \       0x86   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \       0x8A   0x2800             CMP      R0,#+0
   \       0x8C   0xD402             BMI.N    ??mbedtls_rsa_private_6
    867              {
    868                  ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
   \       0x8E   0xF06F 0x0403      MVN      R4,#+3
    869                  goto cleanup;
   \       0x92   0xE0D5             B.N      ??mbedtls_rsa_private_5
    870              }
    871          
    872              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &I, &T ) );
   \                     ??mbedtls_rsa_private_6: (+1)
   \       0x94   0xA901             ADD      R1,SP,#+4
   \       0x96   0xA816             ADD      R0,SP,#+88
   \       0x98   0x....'....        BL       mbedtls_mpi_copy
   \       0x9C   0x0004             MOVS     R4,R0
   \       0x9E   0xF040 0x80CF      BNE.W    ??mbedtls_rsa_private_5
    873          
    874              if( f_rng != NULL )
   \       0xA2   0x0030             MOVS     R0,R6
   \       0xA4   0xD060             BEQ.N    ??mbedtls_rsa_private_7
    875              {
    876                  /*
    877                   * Blinding
    878                   * T = T * Vi mod N
    879                   */
    880                  MBEDTLS_MPI_CHK( rsa_prepare_blinding( ctx, f_rng, p_rng ) );
   \       0xA6   0x463A             MOV      R2,R7
   \       0xA8   0x4631             MOV      R1,R6
   \       0xAA   0x4628             MOV      R0,R5
   \       0xAC   0x....'....        BL       rsa_prepare_blinding
   \       0xB0   0x0004             MOVS     R4,R0
   \       0xB2   0xF040 0x80C5      BNE.W    ??mbedtls_rsa_private_5
    881                  MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vi ) );
   \       0xB6   0xF105 0x028C      ADD      R2,R5,#+140
   \       0xBA   0xA901             ADD      R1,SP,#+4
   \       0xBC   0xA801             ADD      R0,SP,#+4
   \       0xBE   0x....'....        BL       mbedtls_mpi_mul_mpi
   \       0xC2   0x0004             MOVS     R4,R0
   \       0xC4   0xF040 0x80BC      BNE.W    ??mbedtls_rsa_private_5
    882                  MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
   \       0xC8   0xF105 0x0208      ADD      R2,R5,#+8
   \       0xCC   0xA901             ADD      R1,SP,#+4
   \       0xCE   0xA801             ADD      R0,SP,#+4
   \       0xD0   0x....'....        BL       mbedtls_mpi_mod_mpi
   \       0xD4   0x0004             MOVS     R4,R0
   \       0xD6   0xF040 0x80B3      BNE.W    ??mbedtls_rsa_private_5
    883          
    884                  /*
    885                   * Exponent blinding
    886                   */
    887                  MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &P1, &ctx->P, 1 ) );
   \       0xDA   0x2201             MOVS     R2,#+1
   \       0xDC   0xF105 0x012C      ADD      R1,R5,#+44
   \       0xE0   0xA81C             ADD      R0,SP,#+112
   \       0xE2   0x....'....        BL       mbedtls_mpi_sub_int
   \       0xE6   0x0004             MOVS     R4,R0
   \       0xE8   0xF040 0x80AA      BNE.W    ??mbedtls_rsa_private_5
    888                  MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &Q1, &ctx->Q, 1 ) );
   \       0xEC   0x2201             MOVS     R2,#+1
   \       0xEE   0xF105 0x0138      ADD      R1,R5,#+56
   \       0xF2   0xA819             ADD      R0,SP,#+100
   \       0xF4   0x....'....        BL       mbedtls_mpi_sub_int
   \       0xF8   0x0004             MOVS     R4,R0
   \       0xFA   0xF040 0x80A1      BNE.W    ??mbedtls_rsa_private_5
    889          
    890          #if defined(MBEDTLS_RSA_NO_CRT)
    891                  /*
    892                   * D_blind = ( P - 1 ) * ( Q - 1 ) * R + D
    893                   */
    894                  MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
    895                                   f_rng, p_rng ) );
    896                  MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &D_blind, &P1, &Q1 ) );
    897                  MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &D_blind, &D_blind, &R ) );
    898                  MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &D_blind, &D_blind, &ctx->D ) );
    899          
    900                  D = &D_blind;
    901          #else
    902                  /*
    903                   * DP_blind = ( P - 1 ) * R + DP
    904                   */
    905                  MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
    906                                   f_rng, p_rng ) );
   \       0xFE   0x463B             MOV      R3,R7
   \      0x100   0x4632             MOV      R2,R6
   \      0x102   0x211C             MOVS     R1,#+28
   \      0x104   0xA810             ADD      R0,SP,#+64
   \      0x106   0x....'....        BL       mbedtls_mpi_fill_random
   \      0x10A   0x0004             MOVS     R4,R0
   \      0x10C   0xF040 0x8098      BNE.W    ??mbedtls_rsa_private_5
    907                  MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DP_blind, &P1, &R ) );
   \      0x110   0xAA10             ADD      R2,SP,#+64
   \      0x112   0xA91C             ADD      R1,SP,#+112
   \      0x114   0xA80A             ADD      R0,SP,#+40
   \      0x116   0x....'....        BL       mbedtls_mpi_mul_mpi
   \      0x11A   0x0004             MOVS     R4,R0
   \      0x11C   0xF040 0x8090      BNE.W    ??mbedtls_rsa_private_5
    908                  MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DP_blind, &DP_blind,
    909                              &ctx->DP ) );
   \      0x120   0xF105 0x0244      ADD      R2,R5,#+68
   \      0x124   0xA90A             ADD      R1,SP,#+40
   \      0x126   0xA80A             ADD      R0,SP,#+40
   \      0x128   0x....'....        BL       mbedtls_mpi_add_mpi
   \      0x12C   0x0004             MOVS     R4,R0
   \      0x12E   0xF040 0x8087      BNE.W    ??mbedtls_rsa_private_5
    910          
    911                  DP = &DP_blind;
   \      0x132   0xF10D 0x0828      ADD      R8,SP,#+40
    912          
    913                  /*
    914                   * DQ_blind = ( Q - 1 ) * R + DQ
    915                   */
    916                  MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
    917                                   f_rng, p_rng ) );
   \      0x136   0x463B             MOV      R3,R7
   \      0x138   0x4632             MOV      R2,R6
   \      0x13A   0x211C             MOVS     R1,#+28
   \      0x13C   0xA810             ADD      R0,SP,#+64
   \      0x13E   0x....'....        BL       mbedtls_mpi_fill_random
   \      0x142   0x0004             MOVS     R4,R0
   \      0x144   0xD17C             BNE.N    ??mbedtls_rsa_private_5
    918                  MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DQ_blind, &Q1, &R ) );
   \      0x146   0xAA10             ADD      R2,SP,#+64
   \      0x148   0xA919             ADD      R1,SP,#+100
   \      0x14A   0xA807             ADD      R0,SP,#+28
   \      0x14C   0x....'....        BL       mbedtls_mpi_mul_mpi
   \      0x150   0x0004             MOVS     R4,R0
   \      0x152   0xD175             BNE.N    ??mbedtls_rsa_private_5
    919                  MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DQ_blind, &DQ_blind,
    920                              &ctx->DQ ) );
   \      0x154   0xF105 0x0250      ADD      R2,R5,#+80
   \      0x158   0xA907             ADD      R1,SP,#+28
   \      0x15A   0xA807             ADD      R0,SP,#+28
   \      0x15C   0x....'....        BL       mbedtls_mpi_add_mpi
   \      0x160   0x0004             MOVS     R4,R0
   \      0x162   0xD16D             BNE.N    ??mbedtls_rsa_private_5
    921          
    922                  DQ = &DQ_blind;
   \      0x164   0xF10D 0x091C      ADD      R9,SP,#+28
    923          #endif /* MBEDTLS_RSA_NO_CRT */
    924              }
    925          
    926          #if defined(MBEDTLS_RSA_NO_CRT)
    927              MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, D, &ctx->N, &ctx->RN ) );
    928          #else
    929              /*
    930               * Faster decryption using the CRT
    931               *
    932               * TP = input ^ dP mod P
    933               * TQ = input ^ dQ mod Q
    934               */
    935          
    936              MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &TP, &T, DP, &ctx->P, &ctx->RP ) );
   \                     ??mbedtls_rsa_private_7: (+1)
   \      0x168   0xF105 0x0074      ADD      R0,R5,#+116
   \      0x16C   0x9000             STR      R0,[SP, #+0]
   \      0x16E   0xF105 0x032C      ADD      R3,R5,#+44
   \      0x172   0x4642             MOV      R2,R8
   \      0x174   0xA901             ADD      R1,SP,#+4
   \      0x176   0xA804             ADD      R0,SP,#+16
   \      0x178   0x....'....        BL       mbedtls_mpi_exp_mod
   \      0x17C   0x0004             MOVS     R4,R0
   \      0x17E   0xD15F             BNE.N    ??mbedtls_rsa_private_5
    937              MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &TQ, &T, DQ, &ctx->Q, &ctx->RQ ) );
   \      0x180   0xF105 0x0080      ADD      R0,R5,#+128
   \      0x184   0x9000             STR      R0,[SP, #+0]
   \      0x186   0xF105 0x0338      ADD      R3,R5,#+56
   \      0x18A   0x464A             MOV      R2,R9
   \      0x18C   0xA901             ADD      R1,SP,#+4
   \      0x18E   0xA80D             ADD      R0,SP,#+52
   \      0x190   0x....'....        BL       mbedtls_mpi_exp_mod
   \      0x194   0x0004             MOVS     R4,R0
   \      0x196   0xD153             BNE.N    ??mbedtls_rsa_private_5
    938          
    939              /*
    940               * T = (TP - TQ) * (Q^-1 mod P) mod P
    941               */
    942              MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T, &TP, &TQ ) );
   \      0x198   0xAA0D             ADD      R2,SP,#+52
   \      0x19A   0xA904             ADD      R1,SP,#+16
   \      0x19C   0xA801             ADD      R0,SP,#+4
   \      0x19E   0x....'....        BL       mbedtls_mpi_sub_mpi
   \      0x1A2   0x0004             MOVS     R4,R0
   \      0x1A4   0xD14C             BNE.N    ??mbedtls_rsa_private_5
    943              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &TP, &T, &ctx->QP ) );
   \      0x1A6   0xF105 0x025C      ADD      R2,R5,#+92
   \      0x1AA   0xA901             ADD      R1,SP,#+4
   \      0x1AC   0xA804             ADD      R0,SP,#+16
   \      0x1AE   0x....'....        BL       mbedtls_mpi_mul_mpi
   \      0x1B2   0x0004             MOVS     R4,R0
   \      0x1B4   0xD144             BNE.N    ??mbedtls_rsa_private_5
    944              MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &TP, &ctx->P ) );
   \      0x1B6   0xF105 0x022C      ADD      R2,R5,#+44
   \      0x1BA   0xA904             ADD      R1,SP,#+16
   \      0x1BC   0xA801             ADD      R0,SP,#+4
   \      0x1BE   0x....'....        BL       mbedtls_mpi_mod_mpi
   \      0x1C2   0x0004             MOVS     R4,R0
   \      0x1C4   0xD13C             BNE.N    ??mbedtls_rsa_private_5
    945          
    946              /*
    947               * T = TQ + T * Q
    948               */
    949              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &TP, &T, &ctx->Q ) );
   \      0x1C6   0xF105 0x0238      ADD      R2,R5,#+56
   \      0x1CA   0xA901             ADD      R1,SP,#+4
   \      0x1CC   0xA804             ADD      R0,SP,#+16
   \      0x1CE   0x....'....        BL       mbedtls_mpi_mul_mpi
   \      0x1D2   0x0004             MOVS     R4,R0
   \      0x1D4   0xD134             BNE.N    ??mbedtls_rsa_private_5
    950              MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T, &TQ, &TP ) );
   \      0x1D6   0xAA04             ADD      R2,SP,#+16
   \      0x1D8   0xA90D             ADD      R1,SP,#+52
   \      0x1DA   0xA801             ADD      R0,SP,#+4
   \      0x1DC   0x....'....        BL       mbedtls_mpi_add_mpi
   \      0x1E0   0x0004             MOVS     R4,R0
   \      0x1E2   0xD12D             BNE.N    ??mbedtls_rsa_private_5
    951          #endif /* MBEDTLS_RSA_NO_CRT */
    952          
    953              if( f_rng != NULL )
   \      0x1E4   0x0030             MOVS     R0,R6
   \      0x1E6   0xD00F             BEQ.N    ??mbedtls_rsa_private_8
    954              {
    955                  /*
    956                   * Unblind
    957                   * T = T * Vf mod N
    958                   */
    959                  MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vf ) );
   \      0x1E8   0xF105 0x0298      ADD      R2,R5,#+152
   \      0x1EC   0xA901             ADD      R1,SP,#+4
   \      0x1EE   0xA801             ADD      R0,SP,#+4
   \      0x1F0   0x....'....        BL       mbedtls_mpi_mul_mpi
   \      0x1F4   0x0004             MOVS     R4,R0
   \      0x1F6   0xD123             BNE.N    ??mbedtls_rsa_private_5
    960                  MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
   \      0x1F8   0xF105 0x0208      ADD      R2,R5,#+8
   \      0x1FC   0xA901             ADD      R1,SP,#+4
   \      0x1FE   0xA801             ADD      R0,SP,#+4
   \      0x200   0x....'....        BL       mbedtls_mpi_mod_mpi
   \      0x204   0x0004             MOVS     R4,R0
   \      0x206   0xD11B             BNE.N    ??mbedtls_rsa_private_5
    961              }
    962          
    963              /* Verify the result to prevent glitching attacks. */
    964              MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &C, &T, &ctx->E,
    965                                                    &ctx->N, &ctx->RN ) );
   \                     ??mbedtls_rsa_private_8: (+1)
   \      0x208   0xF105 0x0068      ADD      R0,R5,#+104
   \      0x20C   0x9000             STR      R0,[SP, #+0]
   \      0x20E   0xF105 0x0308      ADD      R3,R5,#+8
   \      0x212   0xF105 0x0214      ADD      R2,R5,#+20
   \      0x216   0xA901             ADD      R1,SP,#+4
   \      0x218   0xA813             ADD      R0,SP,#+76
   \      0x21A   0x....'....        BL       mbedtls_mpi_exp_mod
   \      0x21E   0x0004             MOVS     R4,R0
   \      0x220   0xD10E             BNE.N    ??mbedtls_rsa_private_5
    966              if( mbedtls_mpi_cmp_mpi( &C, &I ) != 0 )
   \      0x222   0xA916             ADD      R1,SP,#+88
   \      0x224   0xA813             ADD      R0,SP,#+76
   \      0x226   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \      0x22A   0x2800             CMP      R0,#+0
   \      0x22C   0xD002             BEQ.N    ??mbedtls_rsa_private_9
    967              {
    968                  ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
   \      0x22E   0x....'....        LDR.W    R4,??DataTable23  ;; 0xffffbc80
    969                  goto cleanup;
   \      0x232   0xE005             B.N      ??mbedtls_rsa_private_5
    970              }
   \                     ??mbedtls_rsa_private_9: (+1)
   \      0x234   0x9926             LDR      R1,[SP, #+152]
    971          
    972              olen = ctx->len;
    973              MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
   \      0x236   0x686A             LDR      R2,[R5, #+4]
   \      0x238   0xA801             ADD      R0,SP,#+4
   \      0x23A   0x....'....        BL       mbedtls_mpi_write_binary
   \      0x23E   0x4604             MOV      R4,R0
    974          
    975          cleanup:
    976          #if defined(MBEDTLS_THREADING_C)
    977              if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
    978                  return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
    979          #endif
    980          
    981              mbedtls_mpi_free( &P1 );
   \                     ??mbedtls_rsa_private_5: (+1)
   \      0x240   0xA81C             ADD      R0,SP,#+112
   \      0x242   0x....'....        BL       mbedtls_mpi_free
    982              mbedtls_mpi_free( &Q1 );
   \      0x246   0xA819             ADD      R0,SP,#+100
   \      0x248   0x....'....        BL       mbedtls_mpi_free
    983              mbedtls_mpi_free( &R );
   \      0x24C   0xA810             ADD      R0,SP,#+64
   \      0x24E   0x....'....        BL       mbedtls_mpi_free
    984          
    985              if( f_rng != NULL )
   \      0x252   0x2E00             CMP      R6,#+0
   \      0x254   0xD005             BEQ.N    ??mbedtls_rsa_private_10
    986              {
    987          #if defined(MBEDTLS_RSA_NO_CRT)
    988                  mbedtls_mpi_free( &D_blind );
    989          #else
    990                  mbedtls_mpi_free( &DP_blind );
   \      0x256   0xA80A             ADD      R0,SP,#+40
   \      0x258   0x....'....        BL       mbedtls_mpi_free
    991                  mbedtls_mpi_free( &DQ_blind );
   \      0x25C   0xA807             ADD      R0,SP,#+28
   \      0x25E   0x....'....        BL       mbedtls_mpi_free
    992          #endif
    993              }
    994          
    995              mbedtls_mpi_free( &T );
   \                     ??mbedtls_rsa_private_10: (+1)
   \      0x262   0xA801             ADD      R0,SP,#+4
   \      0x264   0x....'....        BL       mbedtls_mpi_free
    996          
    997          #if !defined(MBEDTLS_RSA_NO_CRT)
    998              mbedtls_mpi_free( &TP ); mbedtls_mpi_free( &TQ );
   \      0x268   0xA804             ADD      R0,SP,#+16
   \      0x26A   0x....'....        BL       mbedtls_mpi_free
   \      0x26E   0xA80D             ADD      R0,SP,#+52
   \      0x270   0x....'....        BL       mbedtls_mpi_free
    999          #endif
   1000          
   1001              mbedtls_mpi_free( &C );
   \      0x274   0xA813             ADD      R0,SP,#+76
   \      0x276   0x....'....        BL       mbedtls_mpi_free
   1002              mbedtls_mpi_free( &I );
   \      0x27A   0xA816             ADD      R0,SP,#+88
   \      0x27C   0x....'....        BL       mbedtls_mpi_free
   1003          
   1004              if( ret != 0 )
   \      0x280   0x2C00             CMP      R4,#+0
   \      0x282   0xD003             BEQ.N    ??mbedtls_rsa_private_11
   1005                  return( MBEDTLS_ERR_RSA_PRIVATE_FAILED + ret );
   \      0x284   0xF5A4 0x4486      SUB      R4,R4,#+17152
   \      0x288   0x4620             MOV      R0,R4
   \      0x28A   0xE000             B.N      ??mbedtls_rsa_private_3
   1006          
   1007              return( 0 );
   \                     ??mbedtls_rsa_private_11: (+1)
   \      0x28C   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_rsa_private_3: (+1)
   \      0x28E   0xB01F             ADD      SP,SP,#+124
   \      0x290   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
   1008          }
   1009          
   1010          #if defined(MBEDTLS_PKCS1_V21)
   1011          /**
   1012           * Generate and apply the MGF1 operation (from PKCS#1 v2.1) to a buffer.
   1013           *
   1014           * \param dst       buffer to mask
   1015           * \param dlen      length of destination buffer
   1016           * \param src       source of the mask generation
   1017           * \param slen      length of the source buffer
   1018           * \param md_ctx    message digest context to use
   1019           */

   \                                 In section .text, align 2, keep-with-next
   1020          static int mgf_mask( unsigned char *dst, size_t dlen, unsigned char *src,
   1021                                size_t slen, mbedtls_md_context_t *md_ctx )
   1022          {
   \                     mgf_mask: (+1)
   \        0x0   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \        0x4   0xB091             SUB      SP,SP,#+68
   \        0x6   0x4683             MOV      R11,R0
   \        0x8   0x460D             MOV      R5,R1
   \        0xA   0x4616             MOV      R6,R2
   \        0xC   0x461F             MOV      R7,R3
   \        0xE   0xF8DD 0x8068      LDR      R8,[SP, #+104]
   1023              unsigned char mask[MBEDTLS_MD_MAX_SIZE];
   1024              unsigned char counter[4];
   1025              unsigned char *p;
   1026              unsigned int hlen;
   1027              size_t i, use_len;
   1028              int ret = 0;
   \       0x12   0x2400             MOVS     R4,#+0
   1029          
   1030              memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
   \       0x14   0x4622             MOV      R2,R4
   \       0x16   0x2140             MOVS     R1,#+64
   \       0x18   0xA801             ADD      R0,SP,#+4
   \       0x1A   0x....'....        BL       __aeabi_memset4
   1031              memset( counter, 0, 4 );
   \       0x1E   0x4622             MOV      R2,R4
   \       0x20   0x2104             MOVS     R1,#+4
   \       0x22   0x4668             MOV      R0,SP
   \       0x24   0x....'....        BL       __aeabi_memset4
   1032          
   1033              hlen = mbedtls_md_get_size( md_ctx->md_info );
   \       0x28   0xF8D8 0x0000      LDR      R0,[R8, #+0]
   \       0x2C   0x....'....        BL       mbedtls_md_get_size
   \       0x30   0x4681             MOV      R9,R0
   1034          
   1035              /* Generate and apply dbMask */
   1036              p = dst;
   \       0x32   0xE011             B.N      ??mgf_mask_0
   1037          
   1038              while( dlen > 0 )
   1039              {
   1040                  use_len = hlen;
   1041                  if( dlen < hlen )
   1042                      use_len = dlen;
   1043          
   1044                  if( ( ret = mbedtls_md_starts( md_ctx ) ) != 0 )
   1045                      goto exit;
   1046                  if( ( ret = mbedtls_md_update( md_ctx, src, slen ) ) != 0 )
   1047                      goto exit;
   1048                  if( ( ret = mbedtls_md_update( md_ctx, counter, 4 ) ) != 0 )
   1049                      goto exit;
   1050                  if( ( ret = mbedtls_md_finish( md_ctx, mask ) ) != 0 )
   1051                      goto exit;
   1052          
   1053                  for( i = 0; i < use_len; ++i )
   1054                      *p++ ^= mask[i];
   \                     ??mgf_mask_1: (+1)
   \       0x34   0xF89B 0x1000      LDRB     R1,[R11, #+0]
   \       0x38   0xAA01             ADD      R2,SP,#+4
   \       0x3A   0x5C12             LDRB     R2,[R2, R0]
   \       0x3C   0x4051             EORS     R1,R2,R1
   \       0x3E   0xF88B 0x1000      STRB     R1,[R11, #+0]
   \       0x42   0xF10B 0x0B01      ADD      R11,R11,#+1
   \       0x46   0x1C40             ADDS     R0,R0,#+1
   \                     ??mgf_mask_2: (+1)
   \       0x48   0x4550             CMP      R0,R10
   \       0x4A   0xD3F3             BCC.N    ??mgf_mask_1
   1055          
   1056                  counter[3]++;
   \       0x4C   0x4668             MOV      R0,SP
   \       0x4E   0x78C1             LDRB     R1,[R0, #+3]
   \       0x50   0x1C49             ADDS     R1,R1,#+1
   \       0x52   0x70C1             STRB     R1,[R0, #+3]
   1057          
   1058                  dlen -= use_len;
   \       0x54   0xEBA5 0x050A      SUB      R5,R5,R10
   \                     ??mgf_mask_0: (+1)
   \       0x58   0x2D00             CMP      R5,#+0
   \       0x5A   0xD01E             BEQ.N    ??mgf_mask_3
   \       0x5C   0x46CA             MOV      R10,R9
   \       0x5E   0x454D             CMP      R5,R9
   \       0x60   0xD200             BCS.N    ??mgf_mask_4
   \       0x62   0x46AA             MOV      R10,R5
   \                     ??mgf_mask_4: (+1)
   \       0x64   0x4640             MOV      R0,R8
   \       0x66   0x....'....        BL       mbedtls_md_starts
   \       0x6A   0x0004             MOVS     R4,R0
   \       0x6C   0xD115             BNE.N    ??mgf_mask_3
   \       0x6E   0x463A             MOV      R2,R7
   \       0x70   0x4631             MOV      R1,R6
   \       0x72   0x4640             MOV      R0,R8
   \       0x74   0x....'....        BL       mbedtls_md_update
   \       0x78   0x0004             MOVS     R4,R0
   \       0x7A   0xD10E             BNE.N    ??mgf_mask_3
   \       0x7C   0x2204             MOVS     R2,#+4
   \       0x7E   0x4669             MOV      R1,SP
   \       0x80   0x4640             MOV      R0,R8
   \       0x82   0x....'....        BL       mbedtls_md_update
   \       0x86   0x0004             MOVS     R4,R0
   \       0x88   0xD107             BNE.N    ??mgf_mask_3
   \       0x8A   0xA901             ADD      R1,SP,#+4
   \       0x8C   0x4640             MOV      R0,R8
   \       0x8E   0x....'....        BL       mbedtls_md_finish
   \       0x92   0x0004             MOVS     R4,R0
   \       0x94   0xD101             BNE.N    ??mgf_mask_3
   \       0x96   0x2000             MOVS     R0,#+0
   \       0x98   0xE7D6             B.N      ??mgf_mask_2
   1059              }
   1060          
   1061          exit:
   1062              mbedtls_platform_zeroize( mask, sizeof( mask ) );
   \                     ??mgf_mask_3: (+1)
   \       0x9A   0x2140             MOVS     R1,#+64
   \       0x9C   0xA801             ADD      R0,SP,#+4
   \       0x9E   0x....'....        BL       mbedtls_platform_zeroize
   1063          
   1064              return( ret );
   \       0xA2   0x4620             MOV      R0,R4
   \       0xA4   0xB011             ADD      SP,SP,#+68
   \       0xA6   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   1065          }
   1066          #endif /* MBEDTLS_PKCS1_V21 */
   1067          
   1068          #if defined(MBEDTLS_PKCS1_V21)
   1069          /*
   1070           * Implementation of the PKCS#1 v2.1 RSAES-OAEP-ENCRYPT function
   1071           */

   \                                 In section .text, align 2, keep-with-next
   1072          int mbedtls_rsa_rsaes_oaep_encrypt( mbedtls_rsa_context *ctx,
   1073                                      int (*f_rng)(void *, unsigned char *, size_t),
   1074                                      void *p_rng,
   1075                                      int mode,
   1076                                      const unsigned char *label, size_t label_len,
   1077                                      size_t ilen,
   1078                                      const unsigned char *input,
   1079                                      unsigned char *output )
   1080          {
   \                     mbedtls_rsa_rsaes_oaep_encrypt: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \        0x4   0xB086             SUB      SP,SP,#+24
   \        0x6   0x4606             MOV      R6,R0
   \        0x8   0x4693             MOV      R11,R2
   \        0xA   0x461D             MOV      R5,R3
   \        0xC   0x9F14             LDR      R7,[SP, #+80]
   1081              size_t olen;
   1082              int ret;
   1083              unsigned char *p = output;
   \        0xE   0x463C             MOV      R4,R7
   1084              unsigned int hlen;
   1085              const mbedtls_md_info_t *md_info;
   1086              mbedtls_md_context_t md_ctx;
   1087          
   1088              if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
   \       0x10   0x2D01             CMP      R5,#+1
   \       0x12   0xD103             BNE.N    ??mbedtls_rsa_rsaes_oaep_encrypt_0
   \       0x14   0xF8D6 0x00A4      LDR      R0,[R6, #+164]
   \       0x18   0x2801             CMP      R0,#+1
   \       0x1A   0xD11C             BNE.N    ??mbedtls_rsa_rsaes_oaep_encrypt_1
   \                     ??mbedtls_rsa_rsaes_oaep_encrypt_0: (+1)
   \       0x1C   0x9101             STR      R1,[SP, #+4]
   1089                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   1090          
   1091              if( f_rng == NULL )
   \       0x1E   0x4608             MOV      R0,R1
   \       0x20   0x2800             CMP      R0,#+0
   \       0x22   0xD018             BEQ.N    ??mbedtls_rsa_rsaes_oaep_encrypt_1
   1092                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   1093          
   1094              md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
   \       0x24   0xF8D6 0x00A8      LDR      R0,[R6, #+168]
   \       0x28   0xB2C0             UXTB     R0,R0
   \       0x2A   0x....'....        BL       mbedtls_md_info_from_type
   \       0x2E   0x9000             STR      R0,[SP, #+0]
   1095              if( md_info == NULL )
   \       0x30   0x2800             CMP      R0,#+0
   \       0x32   0xD010             BEQ.N    ??mbedtls_rsa_rsaes_oaep_encrypt_1
   \       0x34   0xF8DD 0x8048      LDR      R8,[SP, #+72]
   1096                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   1097          
   1098              olen = ctx->len;
   \       0x38   0xF8D6 0x9004      LDR      R9,[R6, #+4]
   1099              hlen = mbedtls_md_get_size( md_info );
   \       0x3C   0x....'....        BL       mbedtls_md_get_size
   \       0x40   0x4682             MOV      R10,R0
   1100          
   1101              /* first comparison checks for overflow */
   1102              if( ilen + 2 * hlen + 2 < ilen || olen < ilen + 2 * hlen + 2 )
   \       0x42   0xEB08 0x004A      ADD      R0,R8,R10, LSL #+1
   \       0x46   0x1C80             ADDS     R0,R0,#+2
   \       0x48   0x4540             CMP      R0,R8
   \       0x4A   0xD304             BCC.N    ??mbedtls_rsa_rsaes_oaep_encrypt_1
   \       0x4C   0xEB08 0x004A      ADD      R0,R8,R10, LSL #+1
   \       0x50   0x1C80             ADDS     R0,R0,#+2
   \       0x52   0x4581             CMP      R9,R0
   \       0x54   0xD202             BCS.N    ??mbedtls_rsa_rsaes_oaep_encrypt_2
   1103                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   \                     ??mbedtls_rsa_rsaes_oaep_encrypt_1: (+1)
   \       0x56   0x....'....        LDR.W    R0,??DataTable22_1  ;; 0xffffbf80
   \       0x5A   0xE069             B.N      ??mbedtls_rsa_rsaes_oaep_encrypt_3
   \                     ??mbedtls_rsa_rsaes_oaep_encrypt_2: (+1)
   \       0x5C   0xF8CD 0xB008      STR      R11,[SP, #+8]
   1104          
   1105              memset( output, 0, olen );
   \       0x60   0x2200             MOVS     R2,#+0
   \       0x62   0x4649             MOV      R1,R9
   \       0x64   0x4638             MOV      R0,R7
   \       0x66   0x....'....        BL       __aeabi_memset
   1106          
   1107              *p++ = 0;
   \       0x6A   0x2000             MOVS     R0,#+0
   \       0x6C   0xF804 0x0B01      STRB     R0,[R4], #+1
   1108          
   1109              /* Generate a random octet string seed */
   1110              if( ( ret = f_rng( p_rng, p, hlen ) ) != 0 )
   \       0x70   0x4652             MOV      R2,R10
   \       0x72   0x4621             MOV      R1,R4
   \       0x74   0x9802             LDR      R0,[SP, #+8]
   \       0x76   0x9B01             LDR      R3,[SP, #+4]
   \       0x78   0x4798             BLX      R3
   \       0x7A   0x2800             CMP      R0,#+0
   \       0x7C   0xD002             BEQ.N    ??mbedtls_rsa_rsaes_oaep_encrypt_4
   1111                  return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
   \       0x7E   0xF5A0 0x4089      SUB      R0,R0,#+17536
   \       0x82   0xE055             B.N      ??mbedtls_rsa_rsaes_oaep_encrypt_3
   \                     ??mbedtls_rsa_rsaes_oaep_encrypt_4: (+1)
   \       0x84   0x9A11             LDR      R2,[SP, #+68]
   \       0x86   0x9910             LDR      R1,[SP, #+64]
   1112          
   1113              p += hlen;
   \       0x88   0xEB04 0x0B0A      ADD      R11,R4,R10
   1114          
   1115              /* Construct DB */
   1116              if( ( ret = mbedtls_md( md_info, label, label_len, p ) ) != 0 )
   \       0x8C   0x465B             MOV      R3,R11
   \       0x8E   0x9800             LDR      R0,[SP, #+0]
   \       0x90   0x....'....        BL       mbedtls_md
   \       0x94   0x0004             MOVS     R4,R0
   \       0x96   0xD13A             BNE.N    ??mbedtls_rsa_rsaes_oaep_encrypt_5
   \       0x98   0x9913             LDR      R1,[SP, #+76]
   1117                  return( ret );
   1118              p += hlen;
   1119              p += olen - 2 * hlen - 2 - ilen;
   \       0x9A   0xEB0B 0x000A      ADD      R0,R11,R10
   \       0x9E   0xEBA9 0x024A      SUB      R2,R9,R10, LSL #+1
   \       0xA2   0x1E92             SUBS     R2,R2,#+2
   \       0xA4   0xEBA2 0x0208      SUB      R2,R2,R8
   \       0xA8   0x4410             ADD      R0,R0,R2
   1120              *p++ = 1;
   \       0xAA   0x2201             MOVS     R2,#+1
   \       0xAC   0xF800 0x2B01      STRB     R2,[R0], #+1
   1121              memcpy( p, input, ilen );
   \       0xB0   0x4642             MOV      R2,R8
   \       0xB2   0x....'....        BL       __aeabi_memcpy
   1122          
   1123              mbedtls_md_init( &md_ctx );
   \       0xB6   0xA803             ADD      R0,SP,#+12
   \       0xB8   0x....'....        BL       mbedtls_md_init
   1124              if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
   \       0xBC   0x2200             MOVS     R2,#+0
   \       0xBE   0x9900             LDR      R1,[SP, #+0]
   \       0xC0   0xA803             ADD      R0,SP,#+12
   \       0xC2   0x....'....        BL       mbedtls_md_setup
   \       0xC6   0x0004             MOVS     R4,R0
   \       0xC8   0xD11C             BNE.N    ??mbedtls_rsa_rsaes_oaep_encrypt_6
   1125                  goto exit;
   1126          
   1127              /* maskedDB: Apply dbMask to DB */
   1128              if( ( ret = mgf_mask( output + hlen + 1, olen - hlen - 1, output + 1, hlen,
   1129                                    &md_ctx ) ) != 0 )
   \       0xCA   0xA803             ADD      R0,SP,#+12
   \       0xCC   0x9000             STR      R0,[SP, #+0]
   \       0xCE   0x4653             MOV      R3,R10
   \       0xD0   0x1C7A             ADDS     R2,R7,#+1
   \       0xD2   0xEBA9 0x010A      SUB      R1,R9,R10
   \       0xD6   0x1E49             SUBS     R1,R1,#+1
   \       0xD8   0xEB07 0x000A      ADD      R0,R7,R10
   \       0xDC   0x1C40             ADDS     R0,R0,#+1
   \       0xDE   0x....'....        BL       mgf_mask
   \       0xE2   0x0004             MOVS     R4,R0
   \       0xE4   0xD10E             BNE.N    ??mbedtls_rsa_rsaes_oaep_encrypt_6
   1130                  goto exit;
   1131          
   1132              /* maskedSeed: Apply seedMask to seed */
   1133              if( ( ret = mgf_mask( output + 1, hlen, output + hlen + 1, olen - hlen - 1,
   1134                                    &md_ctx ) ) != 0 )
   \       0xE6   0xA803             ADD      R0,SP,#+12
   \       0xE8   0x9000             STR      R0,[SP, #+0]
   \       0xEA   0xEBA9 0x090A      SUB      R9,R9,R10
   \       0xEE   0xF1A9 0x0901      SUB      R9,R9,#+1
   \       0xF2   0x464B             MOV      R3,R9
   \       0xF4   0xEB07 0x000A      ADD      R0,R7,R10
   \       0xF8   0x1C42             ADDS     R2,R0,#+1
   \       0xFA   0x4651             MOV      R1,R10
   \       0xFC   0x1C78             ADDS     R0,R7,#+1
   \       0xFE   0x....'....        BL       mgf_mask
   \      0x102   0x4604             MOV      R4,R0
   1135                  goto exit;
   1136          
   1137          exit:
   1138              mbedtls_md_free( &md_ctx );
   \                     ??mbedtls_rsa_rsaes_oaep_encrypt_6: (+1)
   \      0x104   0xA803             ADD      R0,SP,#+12
   \      0x106   0x....'....        BL       mbedtls_md_free
   1139          
   1140              if( ret != 0 )
   \      0x10A   0x2C00             CMP      R4,#+0
   \      0x10C   0xD001             BEQ.N    ??mbedtls_rsa_rsaes_oaep_encrypt_7
   1141                  return( ret );
   \                     ??mbedtls_rsa_rsaes_oaep_encrypt_5: (+1)
   \      0x10E   0x4620             MOV      R0,R4
   \      0x110   0xE00E             B.N      ??mbedtls_rsa_rsaes_oaep_encrypt_3
   1142          
   1143              return( ( mode == MBEDTLS_RSA_PUBLIC )
   1144                      ? mbedtls_rsa_public(  ctx, output, output )
   1145                      : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
   \                     ??mbedtls_rsa_rsaes_oaep_encrypt_7: (+1)
   \      0x112   0x2D00             CMP      R5,#+0
   \      0x114   0xD105             BNE.N    ??mbedtls_rsa_rsaes_oaep_encrypt_8
   \      0x116   0x463A             MOV      R2,R7
   \      0x118   0x4639             MOV      R1,R7
   \      0x11A   0x4630             MOV      R0,R6
   \      0x11C   0x....'....        BL       mbedtls_rsa_public
   \      0x120   0xE006             B.N      ??mbedtls_rsa_rsaes_oaep_encrypt_3
   \                     ??mbedtls_rsa_rsaes_oaep_encrypt_8: (+1)
   \      0x122   0x9700             STR      R7,[SP, #+0]
   \      0x124   0x463B             MOV      R3,R7
   \      0x126   0x9A02             LDR      R2,[SP, #+8]
   \      0x128   0x9901             LDR      R1,[SP, #+4]
   \      0x12A   0x4630             MOV      R0,R6
   \      0x12C   0x....'....        BL       mbedtls_rsa_private
   \                     ??mbedtls_rsa_rsaes_oaep_encrypt_3: (+1)
   \      0x130   0xB007             ADD      SP,SP,#+28
   \      0x132   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   1146          }
   1147          #endif /* MBEDTLS_PKCS1_V21 */
   1148          
   1149          #if defined(MBEDTLS_PKCS1_V15)
   1150          /*
   1151           * Implementation of the PKCS#1 v2.1 RSAES-PKCS1-V1_5-ENCRYPT function
   1152           */

   \                                 In section .text, align 2, keep-with-next
   1153          int mbedtls_rsa_rsaes_pkcs1_v15_encrypt( mbedtls_rsa_context *ctx,
   1154                                           int (*f_rng)(void *, unsigned char *, size_t),
   1155                                           void *p_rng,
   1156                                           int mode, size_t ilen,
   1157                                           const unsigned char *input,
   1158                                           unsigned char *output )
   1159          {
   \                     mbedtls_rsa_rsaes_pkcs1_v15_encrypt: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \        0x4   0x4607             MOV      R7,R0
   \        0x6   0x461D             MOV      R5,R3
   1160              size_t nb_pad, olen;
   1161              int ret;
   1162              unsigned char *p = output;
   1163          
   1164              if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
   \        0x8   0x2D01             CMP      R5,#+1
   \        0xA   0xD103             BNE.N    ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_0
   \        0xC   0xF8D7 0x00A4      LDR      R0,[R7, #+164]
   \       0x10   0x2800             CMP      R0,#+0
   \       0x12   0xD114             BNE.N    ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_1
   \                     ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_0: (+1)
   \       0x14   0x468B             MOV      R11,R1
   1165                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   1166          
   1167              // We don't check p_rng because it won't be dereferenced here
   1168              if( f_rng == NULL || input == NULL || output == NULL )
   \       0x16   0x4658             MOV      R0,R11
   \       0x18   0x2800             CMP      R0,#+0
   \       0x1A   0xD010             BEQ.N    ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_1
   \       0x1C   0x980B             LDR      R0,[SP, #+44]
   \       0x1E   0x2800             CMP      R0,#+0
   \       0x20   0xD00D             BEQ.N    ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_1
   \       0x22   0x9E0C             LDR      R6,[SP, #+48]
   \       0x24   0x2E00             CMP      R6,#+0
   \       0x26   0xD00A             BEQ.N    ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_1
   1169                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   1170          
   1171              olen = ctx->len;
   \       0x28   0xF8D7 0x8004      LDR      R8,[R7, #+4]
   1172          
   1173              /* first comparison checks for overflow */
   1174              if( ilen + 11 < ilen || olen < ilen + 11 )
   \       0x2C   0x980A             LDR      R0,[SP, #+40]
   \       0x2E   0x300B             ADDS     R0,R0,#+11
   \       0x30   0x990A             LDR      R1,[SP, #+40]
   \       0x32   0x4288             CMP      R0,R1
   \       0x34   0xD303             BCC.N    ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_1
   \       0x36   0x4608             MOV      R0,R1
   \       0x38   0x300B             ADDS     R0,R0,#+11
   \       0x3A   0x4580             CMP      R8,R0
   \       0x3C   0xD202             BCS.N    ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_2
   1175                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   \                     ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_1: (+1)
   \       0x3E   0x....'....        LDR.W    R0,??DataTable22_1  ;; 0xffffbf80
   \       0x42   0xE04D             B.N      ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_3
   1176          
   1177              nb_pad = olen - 3 - ilen;
   \                     ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_2: (+1)
   \       0x44   0xF1A8 0x0803      SUB      R8,R8,#+3
   \       0x48   0x4608             MOV      R0,R1
   \       0x4A   0xEBA8 0x0800      SUB      R8,R8,R0
   1178          
   1179              *p++ = 0;
   \       0x4E   0x2000             MOVS     R0,#+0
   \       0x50   0x7030             STRB     R0,[R6, #+0]
   \       0x52   0x4691             MOV      R9,R2
   1180              if( mode == MBEDTLS_RSA_PUBLIC )
   \       0x54   0x2D00             CMP      R5,#+0
   \       0x56   0xD11F             BNE.N    ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_4
   1181              {
   1182                  *p++ = MBEDTLS_RSA_CRYPT;
   \       0x58   0x2002             MOVS     R0,#+2
   \       0x5A   0x7070             STRB     R0,[R6, #+1]
   \       0x5C   0xF106 0x0A02      ADD      R10,R6,#+2
   \       0x60   0xE003             B.N      ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_5
   1183          
   1184                  while( nb_pad-- > 0 )
   1185                  {
   1186                      int rng_dl = 100;
   1187          
   1188                      do {
   1189                          ret = f_rng( p_rng, p, 1 );
   1190                      } while( *p == 0 && --rng_dl && ret == 0 );
   1191          
   1192                      /* Check if RNG failed to generate data */
   1193                      if( rng_dl == 0 || ret != 0 )
   \                     ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_6: (+1)
   \       0x62   0x2800             CMP      R0,#+0
   \       0x64   0xD115             BNE.N    ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_7
   1194                          return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
   1195          
   1196                      p++;
   \       0x66   0xF10A 0x0A01      ADD      R10,R10,#+1
   \                     ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_5: (+1)
   \       0x6A   0x4640             MOV      R0,R8
   \       0x6C   0xF1A0 0x0801      SUB      R8,R0,#+1
   \       0x70   0x2800             CMP      R0,#+0
   \       0x72   0xD01E             BEQ.N    ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_8
   \       0x74   0x2464             MOVS     R4,#+100
   \                     ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_9: (+1)
   \       0x76   0x2201             MOVS     R2,#+1
   \       0x78   0x4651             MOV      R1,R10
   \       0x7A   0x4648             MOV      R0,R9
   \       0x7C   0x47D8             BLX      R11
   \       0x7E   0xF89A 0x1000      LDRB     R1,[R10, #+0]
   \       0x82   0x2900             CMP      R1,#+0
   \       0x84   0xD103             BNE.N    ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_10
   \       0x86   0x1E64             SUBS     R4,R4,#+1
   \       0x88   0xD001             BEQ.N    ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_10
   \       0x8A   0x2800             CMP      R0,#+0
   \       0x8C   0xD0F3             BEQ.N    ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_9
   \                     ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_10: (+1)
   \       0x8E   0x2C00             CMP      R4,#+0
   \       0x90   0xD1E7             BNE.N    ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_6
   \                     ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_7: (+1)
   \       0x92   0xF5A0 0x4089      SUB      R0,R0,#+17536
   \       0x96   0xE023             B.N      ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_3
   1197                  }
   1198              }
   1199              else
   1200              {
   1201                  *p++ = MBEDTLS_RSA_SIGN;
   \                     ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_4: (+1)
   \       0x98   0x2001             MOVS     R0,#+1
   \       0x9A   0x7070             STRB     R0,[R6, #+1]
   \       0x9C   0xF106 0x0A02      ADD      R10,R6,#+2
   \       0xA0   0xE002             B.N      ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_11
   1202          
   1203                  while( nb_pad-- > 0 )
   1204                      *p++ = 0xFF;
   \                     ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_12: (+1)
   \       0xA2   0x20FF             MOVS     R0,#+255
   \       0xA4   0xF80A 0x0B01      STRB     R0,[R10], #+1
   \                     ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_11: (+1)
   \       0xA8   0x4640             MOV      R0,R8
   \       0xAA   0xF1A0 0x0801      SUB      R8,R0,#+1
   \       0xAE   0x2800             CMP      R0,#+0
   \       0xB0   0xD1F7             BNE.N    ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_12
   1205              }
   1206          
   1207              *p++ = 0;
   \                     ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_8: (+1)
   \       0xB2   0x2000             MOVS     R0,#+0
   \       0xB4   0xF80A 0x0B01      STRB     R0,[R10], #+1
   1208              memcpy( p, input, ilen );
   \       0xB8   0x9A0A             LDR      R2,[SP, #+40]
   \       0xBA   0x990B             LDR      R1,[SP, #+44]
   \       0xBC   0x4650             MOV      R0,R10
   \       0xBE   0x....'....        BL       __aeabi_memcpy
   1209          
   1210              return( ( mode == MBEDTLS_RSA_PUBLIC )
   1211                      ? mbedtls_rsa_public(  ctx, output, output )
   1212                      : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
   \       0xC2   0x2D00             CMP      R5,#+0
   \       0xC4   0xD105             BNE.N    ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_13
   \       0xC6   0x4632             MOV      R2,R6
   \       0xC8   0x4631             MOV      R1,R6
   \       0xCA   0x4638             MOV      R0,R7
   \       0xCC   0xE8BD 0x4FF8      POP      {R3-R11,LR}
   \       0xD0   0x....             B.N      mbedtls_rsa_public
   \                     ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_13: (+1)
   \       0xD2   0x9600             STR      R6,[SP, #+0]
   \       0xD4   0x4633             MOV      R3,R6
   \       0xD6   0x464A             MOV      R2,R9
   \       0xD8   0x4659             MOV      R1,R11
   \       0xDA   0x4638             MOV      R0,R7
   \       0xDC   0x....'....        BL       mbedtls_rsa_private
   \                     ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_3: (+1)
   \       0xE0   0xE8BD 0x8FF2      POP      {R1,R4-R11,PC}   ;; return
   1213          }
   1214          #endif /* MBEDTLS_PKCS1_V15 */
   1215          
   1216          /*
   1217           * Add the message padding, then do an RSA operation
   1218           */

   \                                 In section .text, align 2, keep-with-next
   1219          int mbedtls_rsa_pkcs1_encrypt( mbedtls_rsa_context *ctx,
   1220                                 int (*f_rng)(void *, unsigned char *, size_t),
   1221                                 void *p_rng,
   1222                                 int mode, size_t ilen,
   1223                                 const unsigned char *input,
   1224                                 unsigned char *output )
   1225          {
   \                     mbedtls_rsa_pkcs1_encrypt: (+1)
   \        0x0   0xB5F0             PUSH     {R4-R7,LR}
   \        0x2   0xB085             SUB      SP,SP,#+20
   \        0x4   0x9C0A             LDR      R4,[SP, #+40]
   \        0x6   0x9D0B             LDR      R5,[SP, #+44]
   \        0x8   0x9E0C             LDR      R6,[SP, #+48]
   1226              switch( ctx->padding )
   \        0xA   0xF8D0 0x70A4      LDR      R7,[R0, #+164]
   \        0xE   0x2F00             CMP      R7,#+0
   \       0x10   0xD002             BEQ.N    ??mbedtls_rsa_pkcs1_encrypt_0
   \       0x12   0x2F01             CMP      R7,#+1
   \       0x14   0xD006             BEQ.N    ??mbedtls_rsa_pkcs1_encrypt_1
   \       0x16   0xE00E             B.N      ??mbedtls_rsa_pkcs1_encrypt_2
   1227              {
   1228          #if defined(MBEDTLS_PKCS1_V15)
   1229                  case MBEDTLS_RSA_PKCS_V15:
   1230                      return mbedtls_rsa_rsaes_pkcs1_v15_encrypt( ctx, f_rng, p_rng, mode, ilen,
   1231                                                          input, output );
   \                     ??mbedtls_rsa_pkcs1_encrypt_0: (+1)
   \       0x18   0x9602             STR      R6,[SP, #+8]
   \       0x1A   0x9501             STR      R5,[SP, #+4]
   \       0x1C   0x9400             STR      R4,[SP, #+0]
   \       0x1E   0x....'....        BL       mbedtls_rsa_rsaes_pkcs1_v15_encrypt
   \       0x22   0xE00A             B.N      ??mbedtls_rsa_pkcs1_encrypt_3
   1232          #endif
   1233          
   1234          #if defined(MBEDTLS_PKCS1_V21)
   1235                  case MBEDTLS_RSA_PKCS_V21:
   1236                      return mbedtls_rsa_rsaes_oaep_encrypt( ctx, f_rng, p_rng, mode, NULL, 0,
   1237                                                     ilen, input, output );
   \                     ??mbedtls_rsa_pkcs1_encrypt_1: (+1)
   \       0x24   0x9604             STR      R6,[SP, #+16]
   \       0x26   0x9503             STR      R5,[SP, #+12]
   \       0x28   0x9402             STR      R4,[SP, #+8]
   \       0x2A   0x2400             MOVS     R4,#+0
   \       0x2C   0x9401             STR      R4,[SP, #+4]
   \       0x2E   0x9400             STR      R4,[SP, #+0]
   \       0x30   0x....'....        BL       mbedtls_rsa_rsaes_oaep_encrypt
   \       0x34   0xE001             B.N      ??mbedtls_rsa_pkcs1_encrypt_3
   1238          #endif
   1239          
   1240                  default:
   1241                      return( MBEDTLS_ERR_RSA_INVALID_PADDING );
   \                     ??mbedtls_rsa_pkcs1_encrypt_2: (+1)
   \       0x36   0x....'....        LDR.W    R0,??DataTable25  ;; 0xffffbf00
   \                     ??mbedtls_rsa_pkcs1_encrypt_3: (+1)
   \       0x3A   0xB005             ADD      SP,SP,#+20
   \       0x3C   0xBDF0             POP      {R4-R7,PC}       ;; return
   1242              }
   1243          }
   1244          
   1245          #if defined(MBEDTLS_PKCS1_V21)
   1246          /*
   1247           * Implementation of the PKCS#1 v2.1 RSAES-OAEP-DECRYPT function
   1248           */

   \                                 In section .text, align 2, keep-with-next
   1249          int mbedtls_rsa_rsaes_oaep_decrypt( mbedtls_rsa_context *ctx,
   1250                                      int (*f_rng)(void *, unsigned char *, size_t),
   1251                                      void *p_rng,
   1252                                      int mode,
   1253                                      const unsigned char *label, size_t label_len,
   1254                                      size_t *olen,
   1255                                      const unsigned char *input,
   1256                                      unsigned char *output,
   1257                                      size_t output_max_len )
   1258          {
   \                     mbedtls_rsa_rsaes_oaep_decrypt: (+1)
   \        0x0   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \        0x4   0xF5AD 0x7D14      SUB      SP,SP,#+592
   \        0x8   0x4680             MOV      R8,R0
   \        0xA   0x4689             MOV      R9,R1
   \        0xC   0x4692             MOV      R10,R2
   \        0xE   0x461C             MOV      R4,R3
   1259              int ret;
   1260              size_t ilen, i, pad_len;
   1261              unsigned char *p, bad, pad_done;
   1262              unsigned char buf[MBEDTLS_MPI_MAX_SIZE];
   1263              unsigned char lhash[MBEDTLS_MD_MAX_SIZE];
   1264              unsigned int hlen;
   1265              const mbedtls_md_info_t *md_info;
   1266              mbedtls_md_context_t md_ctx;
   1267          
   1268              /*
   1269               * Parameters sanity checks
   1270               */
   1271              if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
   \       0x10   0x2C01             CMP      R4,#+1
   \       0x12   0xD103             BNE.N    ??mbedtls_rsa_rsaes_oaep_decrypt_0
   \       0x14   0xF8D8 0x00A4      LDR      R0,[R8, #+164]
   \       0x18   0x2801             CMP      R0,#+1
   \       0x1A   0xD115             BNE.N    ??mbedtls_rsa_rsaes_oaep_decrypt_1
   1272                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   1273          
   1274              ilen = ctx->len;
   \                     ??mbedtls_rsa_rsaes_oaep_decrypt_0: (+1)
   \       0x1C   0xF8D8 0x5004      LDR      R5,[R8, #+4]
   1275          
   1276              if( ilen < 16 || ilen > sizeof( buf ) )
   \       0x20   0xF1A5 0x0010      SUB      R0,R5,#+16
   \       0x24   0xF240 0x11F1      MOVW     R1,#+497
   \       0x28   0x4288             CMP      R0,R1
   \       0x2A   0xD20D             BCS.N    ??mbedtls_rsa_rsaes_oaep_decrypt_1
   1277                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   1278          
   1279              md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
   \       0x2C   0xF8D8 0x00A8      LDR      R0,[R8, #+168]
   \       0x30   0xB2C0             UXTB     R0,R0
   \       0x32   0x....'....        BL       mbedtls_md_info_from_type
   \       0x36   0x0006             MOVS     R6,R0
   1280              if( md_info == NULL )
   \       0x38   0xD006             BEQ.N    ??mbedtls_rsa_rsaes_oaep_decrypt_1
   1281                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   1282          
   1283              hlen = mbedtls_md_get_size( md_info );
   \       0x3A   0x....'....        BL       mbedtls_md_get_size
   \       0x3E   0x4607             MOV      R7,R0
   1284          
   1285              // checking for integer underflow
   1286              if( 2 * hlen + 2 > ilen )
   \       0x40   0x0078             LSLS     R0,R7,#+1
   \       0x42   0x1C80             ADDS     R0,R0,#+2
   \       0x44   0x4285             CMP      R5,R0
   \       0x46   0xD202             BCS.N    ??mbedtls_rsa_rsaes_oaep_decrypt_2
   1287                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   \                     ??mbedtls_rsa_rsaes_oaep_decrypt_1: (+1)
   \       0x48   0x....'....        LDR.W    R0,??DataTable22_1  ;; 0xffffbf80
   \       0x4C   0xE099             B.N      ??mbedtls_rsa_rsaes_oaep_decrypt_3
   \                     ??mbedtls_rsa_rsaes_oaep_decrypt_2: (+1)
   \       0x4E   0x999F             LDR      R1,[SP, #+636]
   1288          
   1289              /*
   1290               * RSA operation
   1291               */
   1292              ret = ( mode == MBEDTLS_RSA_PUBLIC )
   1293                    ? mbedtls_rsa_public(  ctx, input, buf )
   1294                    : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
   \       0x50   0x2C00             CMP      R4,#+0
   \       0x52   0xD105             BNE.N    ??mbedtls_rsa_rsaes_oaep_decrypt_4
   \       0x54   0xAA14             ADD      R2,SP,#+80
   \       0x56   0x4640             MOV      R0,R8
   \       0x58   0x....'....        BL       mbedtls_rsa_public
   \       0x5C   0x4604             MOV      R4,R0
   \       0x5E   0xE008             B.N      ??mbedtls_rsa_rsaes_oaep_decrypt_5
   \                     ??mbedtls_rsa_rsaes_oaep_decrypt_4: (+1)
   \       0x60   0xA814             ADD      R0,SP,#+80
   \       0x62   0x9000             STR      R0,[SP, #+0]
   \       0x64   0x460B             MOV      R3,R1
   \       0x66   0x4652             MOV      R2,R10
   \       0x68   0x4649             MOV      R1,R9
   \       0x6A   0x4640             MOV      R0,R8
   \       0x6C   0x....'....        BL       mbedtls_rsa_private
   \       0x70   0x4604             MOV      R4,R0
   1295          
   1296              if( ret != 0 )
   \                     ??mbedtls_rsa_rsaes_oaep_decrypt_5: (+1)
   \       0x72   0x2C00             CMP      R4,#+0
   \       0x74   0xD17B             BNE.N    ??mbedtls_rsa_rsaes_oaep_decrypt_6
   1297                  goto cleanup;
   1298          
   1299              /*
   1300               * Unmask data and generate lHash
   1301               */
   1302              mbedtls_md_init( &md_ctx );
   \       0x76   0xA801             ADD      R0,SP,#+4
   \       0x78   0x....'....        BL       mbedtls_md_init
   1303              if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
   \       0x7C   0x2200             MOVS     R2,#+0
   \       0x7E   0x4631             MOV      R1,R6
   \       0x80   0xA801             ADD      R0,SP,#+4
   \       0x82   0x....'....        BL       mbedtls_md_setup
   \       0x86   0x0004             MOVS     R4,R0
   \       0x88   0xD11B             BNE.N    ??mbedtls_rsa_rsaes_oaep_decrypt_7
   1304              {
   1305                  mbedtls_md_free( &md_ctx );
   1306                  goto cleanup;
   1307              }
   1308          
   1309              /* seed: Apply seedMask to maskedSeed */
   1310              if( ( ret = mgf_mask( buf + 1, hlen, buf + hlen + 1, ilen - hlen - 1,
   1311                                    &md_ctx ) ) != 0 ||
   1312              /* DB: Apply dbMask to maskedDB */
   1313                  ( ret = mgf_mask( buf + hlen + 1, ilen - hlen - 1, buf + 1, hlen,
   1314                                    &md_ctx ) ) != 0 )
   \       0x8A   0xA801             ADD      R0,SP,#+4
   \       0x8C   0x9000             STR      R0,[SP, #+0]
   \       0x8E   0x1BEB             SUBS     R3,R5,R7
   \       0x90   0x1E5B             SUBS     R3,R3,#+1
   \       0x92   0xA814             ADD      R0,SP,#+80
   \       0x94   0x4438             ADD      R0,R0,R7
   \       0x96   0x1C42             ADDS     R2,R0,#+1
   \       0x98   0x4639             MOV      R1,R7
   \       0x9A   0xF10D 0x0051      ADD      R0,SP,#+81
   \       0x9E   0x....'....        BL       mgf_mask
   \       0xA2   0x0004             MOVS     R4,R0
   \       0xA4   0xD10D             BNE.N    ??mbedtls_rsa_rsaes_oaep_decrypt_7
   \       0xA6   0xA801             ADD      R0,SP,#+4
   \       0xA8   0x9000             STR      R0,[SP, #+0]
   \       0xAA   0x463B             MOV      R3,R7
   \       0xAC   0xF10D 0x0251      ADD      R2,SP,#+81
   \       0xB0   0x1BE9             SUBS     R1,R5,R7
   \       0xB2   0x1E49             SUBS     R1,R1,#+1
   \       0xB4   0xA814             ADD      R0,SP,#+80
   \       0xB6   0x4438             ADD      R0,R0,R7
   \       0xB8   0x1C40             ADDS     R0,R0,#+1
   \       0xBA   0x....'....        BL       mgf_mask
   \       0xBE   0x0004             MOVS     R4,R0
   \       0xC0   0xD003             BEQ.N    ??mbedtls_rsa_rsaes_oaep_decrypt_8
   1315              {
   1316                  mbedtls_md_free( &md_ctx );
   \                     ??mbedtls_rsa_rsaes_oaep_decrypt_7: (+1)
   \       0xC2   0xA801             ADD      R0,SP,#+4
   \       0xC4   0x....'....        BL       mbedtls_md_free
   1317                  goto cleanup;
   \       0xC8   0xE051             B.N      ??mbedtls_rsa_rsaes_oaep_decrypt_6
   1318              }
   \                     ??mbedtls_rsa_rsaes_oaep_decrypt_8: (+1)
   \       0xCA   0xF8DD 0x8274      LDR      R8,[SP, #+628]
   \       0xCE   0x9C9C             LDR      R4,[SP, #+624]
   1319          
   1320              mbedtls_md_free( &md_ctx );
   \       0xD0   0xA801             ADD      R0,SP,#+4
   \       0xD2   0x....'....        BL       mbedtls_md_free
   1321          
   1322              /* Generate lHash */
   1323              if( ( ret = mbedtls_md( md_info, label, label_len, lhash ) ) != 0 )
   \       0xD6   0xAB04             ADD      R3,SP,#+16
   \       0xD8   0x4642             MOV      R2,R8
   \       0xDA   0x4621             MOV      R1,R4
   \       0xDC   0x4630             MOV      R0,R6
   \       0xDE   0x....'....        BL       mbedtls_md
   \       0xE2   0x0004             MOVS     R4,R0
   \       0xE4   0xD143             BNE.N    ??mbedtls_rsa_rsaes_oaep_decrypt_6
   1324                  goto cleanup;
   1325          
   1326              /*
   1327               * Check contents, in "constant-time"
   1328               */
   1329              p = buf;
   \       0xE6   0xA814             ADD      R0,SP,#+80
   1330              bad = 0;
   1331          
   1332              bad |= *p++; /* First byte must be 0 */
   \       0xE8   0xF810 0x2B01      LDRB     R2,[R0], #+1
   1333          
   1334              p += hlen; /* Skip seed */
   \       0xEC   0x19C3             ADDS     R3,R0,R7
   1335          
   1336              /* Check lHash */
   1337              for( i = 0; i < hlen; i++ )
   \       0xEE   0x2000             MOVS     R0,#+0
   \       0xF0   0x4639             MOV      R1,R7
   \       0xF2   0xE006             B.N      ??mbedtls_rsa_rsaes_oaep_decrypt_9
   1338                  bad |= lhash[i] ^ *p++;
   \                     ??mbedtls_rsa_rsaes_oaep_decrypt_10: (+1)
   \       0xF4   0xAC04             ADD      R4,SP,#+16
   \       0xF6   0x5C24             LDRB     R4,[R4, R0]
   \       0xF8   0xF813 0x6B01      LDRB     R6,[R3], #+1
   \       0xFC   0x4074             EORS     R4,R6,R4
   \       0xFE   0x4322             ORRS     R2,R4,R2
   \      0x100   0x1C40             ADDS     R0,R0,#+1
   \                     ??mbedtls_rsa_rsaes_oaep_decrypt_9: (+1)
   \      0x102   0x4288             CMP      R0,R1
   \      0x104   0xD3F6             BCC.N    ??mbedtls_rsa_rsaes_oaep_decrypt_10
   1339          
   1340              /* Get zero-padding len, but always read till end of buffer
   1341               * (minus one, for the 01 byte) */
   1342              pad_len = 0;
   \      0x106   0x2600             MOVS     R6,#+0
   1343              pad_done = 0;
   \      0x108   0x4637             MOV      R7,R6
   1344              for( i = 0; i < ilen - 2 * hlen - 2; i++ )
   \      0x10A   0x4634             MOV      R4,R6
   \      0x10C   0x4628             MOV      R0,R5
   \      0x10E   0xE00A             B.N      ??mbedtls_rsa_rsaes_oaep_decrypt_11
   1345              {
   1346                  pad_done |= p[i];
   \                     ??mbedtls_rsa_rsaes_oaep_decrypt_12: (+1)
   \      0x110   0x5D1D             LDRB     R5,[R3, R4]
   \      0x112   0x432F             ORRS     R7,R5,R7
   1347                  pad_len += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
   \      0x114   0x463D             MOV      R5,R7
   \      0x116   0x426D             RSBS     R5,R5,#+0
   \      0x118   0x433D             ORRS     R5,R5,R7
   \      0x11A   0xB2ED             UXTB     R5,R5
   \      0x11C   0x09ED             LSRS     R5,R5,#+7
   \      0x11E   0xF085 0x0501      EOR      R5,R5,#0x1
   \      0x122   0x1976             ADDS     R6,R6,R5
   1348              }
   \      0x124   0x1C64             ADDS     R4,R4,#+1
   \                     ??mbedtls_rsa_rsaes_oaep_decrypt_11: (+1)
   \      0x126   0xEBA0 0x0541      SUB      R5,R0,R1, LSL #+1
   \      0x12A   0x1EAD             SUBS     R5,R5,#+2
   \      0x12C   0x42AC             CMP      R4,R5
   \      0x12E   0xD3EF             BCC.N    ??mbedtls_rsa_rsaes_oaep_decrypt_12
   1349          
   1350              p += pad_len;
   \      0x130   0x1999             ADDS     R1,R3,R6
   1351              bad |= *p++ ^ 0x01;
   \      0x132   0xF811 0x3B01      LDRB     R3,[R1], #+1
   \      0x136   0xF083 0x0301      EOR      R3,R3,#0x1
   \      0x13A   0x431A             ORRS     R2,R3,R2
   1352          
   1353              /*
   1354               * The only information "leaked" is whether the padding was correct or not
   1355               * (eg, no data is copied if it was not correct). This meets the
   1356               * recommendations in PKCS#1 v2.2: an opponent cannot distinguish between
   1357               * the different error conditions.
   1358               */
   1359              if( bad != 0 )
   \      0x13C   0xB2D2             UXTB     R2,R2
   \      0x13E   0x2A00             CMP      R2,#+0
   \      0x140   0xD002             BEQ.N    ??mbedtls_rsa_rsaes_oaep_decrypt_13
   1360              {
   1361                  ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
   \      0x142   0x....'....        LDR.W    R4,??DataTable25  ;; 0xffffbf00
   1362                  goto cleanup;
   \      0x146   0xE012             B.N      ??mbedtls_rsa_rsaes_oaep_decrypt_6
   1363              }
   \                     ??mbedtls_rsa_rsaes_oaep_decrypt_13: (+1)
   \      0x148   0x9BA1             LDR      R3,[SP, #+644]
   1364          
   1365              if( ilen - ( p - buf ) > output_max_len )
   \      0x14A   0x1A44             SUBS     R4,R0,R1
   \      0x14C   0xAA14             ADD      R2,SP,#+80
   \      0x14E   0x1914             ADDS     R4,R2,R4
   \      0x150   0x42A3             CMP      R3,R4
   \      0x152   0xD202             BCS.N    ??mbedtls_rsa_rsaes_oaep_decrypt_14
   1366              {
   1367                  ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
   \      0x154   0x....'....        LDR.W    R4,??DataTable26  ;; 0xffffbc00
   1368                  goto cleanup;
   \      0x158   0xE009             B.N      ??mbedtls_rsa_rsaes_oaep_decrypt_6
   1369              }
   \                     ??mbedtls_rsa_rsaes_oaep_decrypt_14: (+1)
   \      0x15A   0x9BA0             LDR      R3,[SP, #+640]
   \      0x15C   0x9C9E             LDR      R4,[SP, #+632]
   1370          
   1371              *olen = ilen - (p - buf);
   \      0x15E   0x1A40             SUBS     R0,R0,R1
   \      0x160   0x1810             ADDS     R0,R2,R0
   \      0x162   0x6020             STR      R0,[R4, #+0]
   1372              memcpy( output, p, *olen );
   \      0x164   0x4602             MOV      R2,R0
   \      0x166   0x4618             MOV      R0,R3
   \      0x168   0x....'....        BL       __aeabi_memcpy
   1373              ret = 0;
   \      0x16C   0x2400             MOVS     R4,#+0
   1374          
   1375          cleanup:
   1376              mbedtls_platform_zeroize( buf, sizeof( buf ) );
   \                     ??mbedtls_rsa_rsaes_oaep_decrypt_6: (+1)
   \      0x16E   0xF44F 0x7100      MOV      R1,#+512
   \      0x172   0xA814             ADD      R0,SP,#+80
   \      0x174   0x....'....        BL       mbedtls_platform_zeroize
   1377              mbedtls_platform_zeroize( lhash, sizeof( lhash ) );
   \      0x178   0x2140             MOVS     R1,#+64
   \      0x17A   0xA804             ADD      R0,SP,#+16
   \      0x17C   0x....'....        BL       mbedtls_platform_zeroize
   1378          
   1379              return( ret );
   \      0x180   0x4620             MOV      R0,R4
   \                     ??mbedtls_rsa_rsaes_oaep_decrypt_3: (+1)
   \      0x182   0xF50D 0x7D14      ADD      SP,SP,#+592
   \      0x186   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
   1380          }
   1381          #endif /* MBEDTLS_PKCS1_V21 */
   1382          
   1383          #if defined(MBEDTLS_PKCS1_V15)
   1384          /*
   1385           * Implementation of the PKCS#1 v2.1 RSAES-PKCS1-V1_5-DECRYPT function
   1386           */

   \                                 In section .text, align 2, keep-with-next
   1387          int mbedtls_rsa_rsaes_pkcs1_v15_decrypt( mbedtls_rsa_context *ctx,
   1388                                           int (*f_rng)(void *, unsigned char *, size_t),
   1389                                           void *p_rng,
   1390                                           int mode, size_t *olen,
   1391                                           const unsigned char *input,
   1392                                           unsigned char *output,
   1393                                           size_t output_max_len)
   1394          {
   \                     mbedtls_rsa_rsaes_pkcs1_v15_decrypt: (+1)
   \        0x0   0xE92D 0x41F8      PUSH     {R3-R8,LR}
   \        0x4   0xF5AD 0x7D01      SUB      SP,SP,#+516
   \        0x8   0x4698             MOV      R8,R3
   1395              int ret;
   1396              size_t ilen, pad_count = 0, i;
   \        0xA   0x2400             MOVS     R4,#+0
   1397              unsigned char *p, bad, pad_done = 0;
   \        0xC   0x4626             MOV      R6,R4
   1398              unsigned char buf[MBEDTLS_MPI_MAX_SIZE];
   1399          
   1400              if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
   \        0xE   0xF1B8 0x0F01      CMP      R8,#+1
   \       0x12   0xD103             BNE.N    ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_0
   \       0x14   0xF8D0 0x30A4      LDR      R3,[R0, #+164]
   \       0x18   0x2B00             CMP      R3,#+0
   \       0x1A   0xD106             BNE.N    ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_1
   1401                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   1402          
   1403              ilen = ctx->len;
   \                     ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_0: (+1)
   \       0x1C   0x6845             LDR      R5,[R0, #+4]
   1404          
   1405              if( ilen < 16 || ilen > sizeof( buf ) )
   \       0x1E   0xF1A5 0x0310      SUB      R3,R5,#+16
   \       0x22   0xF240 0x17F1      MOVW     R7,#+497
   \       0x26   0x42BB             CMP      R3,R7
   \       0x28   0xD302             BCC.N    ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_2
   1406                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   \                     ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_1: (+1)
   \       0x2A   0x....'....        LDR.W    R0,??DataTable22_1  ;; 0xffffbf80
   \       0x2E   0xE061             B.N      ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_3
   \                     ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_2: (+1)
   \       0x30   0x9B89             LDR      R3,[SP, #+548]
   1407          
   1408              ret = ( mode == MBEDTLS_RSA_PUBLIC )
   1409                    ? mbedtls_rsa_public(  ctx, input, buf )
   1410                    : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
   \       0x32   0xF1B8 0x0F00      CMP      R8,#+0
   \       0x36   0xD105             BNE.N    ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_4
   \       0x38   0xAA01             ADD      R2,SP,#+4
   \       0x3A   0x4619             MOV      R1,R3
   \       0x3C   0x....'....        BL       mbedtls_rsa_public
   \       0x40   0x4607             MOV      R7,R0
   \       0x42   0xE004             B.N      ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_5
   \                     ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_4: (+1)
   \       0x44   0xAF01             ADD      R7,SP,#+4
   \       0x46   0x9700             STR      R7,[SP, #+0]
   \       0x48   0x....'....        BL       mbedtls_rsa_private
   \       0x4C   0x4607             MOV      R7,R0
   1411          
   1412              if( ret != 0 )
   \                     ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_5: (+1)
   \       0x4E   0x2F00             CMP      R7,#+0
   \       0x50   0xD14A             BNE.N    ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_6
   1413                  goto cleanup;
   1414          
   1415              p = buf;
   \       0x52   0xA801             ADD      R0,SP,#+4
   1416              bad = 0;
   1417          
   1418              /*
   1419               * Check and get padding len in "constant-time"
   1420               */
   1421              bad |= *p++; /* First byte must be 0 */
   \       0x54   0x7802             LDRB     R2,[R0, #+0]
   1422          
   1423              /* This test does not depend on secret data */
   1424              if( mode == MBEDTLS_RSA_PRIVATE )
   \       0x56   0xF1B8 0x0F01      CMP      R8,#+1
   \       0x5A   0x7841             LDRB     R1,[R0, #+1]
   \       0x5C   0xD11C             BNE.N    ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_7
   1425              {
   1426                  bad |= *p++ ^ MBEDTLS_RSA_CRYPT;
   \       0x5E   0xF081 0x0102      EOR      R1,R1,#0x2
   \       0x62   0x430A             ORRS     R2,R1,R2
   \       0x64   0x1C80             ADDS     R0,R0,#+2
   1427          
   1428                  /* Get padding len, but always read till end of buffer
   1429                   * (minus one, for the 00 byte) */
   1430                  for( i = 0; i < ilen - 3; i++ )
   \       0x66   0x4621             MOV      R1,R4
   \                     ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_8: (+1)
   \       0x68   0x1EEB             SUBS     R3,R5,#+3
   \       0x6A   0x4299             CMP      R1,R3
   \       0x6C   0xD246             BCS.N    ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_9
   1431                  {
   1432                      pad_done  |= ((p[i] | (unsigned char)-p[i]) >> 7) ^ 1;
   \       0x6E   0x5C43             LDRB     R3,[R0, R1]
   \       0x70   0x469C             MOV      R12,R3
   \       0x72   0xF1CC 0x0C00      RSB      R12,R12,#+0
   \       0x76   0xEA4C 0x0303      ORR      R3,R12,R3
   \       0x7A   0xB2DB             UXTB     R3,R3
   \       0x7C   0x09DB             LSRS     R3,R3,#+7
   \       0x7E   0xF083 0x0301      EOR      R3,R3,#0x1
   \       0x82   0x431E             ORRS     R6,R3,R6
   1433                      pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
   \       0x84   0x4633             MOV      R3,R6
   \       0x86   0x425B             RSBS     R3,R3,#+0
   \       0x88   0x4333             ORRS     R3,R3,R6
   \       0x8A   0xB2DB             UXTB     R3,R3
   \       0x8C   0x09DB             LSRS     R3,R3,#+7
   \       0x8E   0xF083 0x0301      EOR      R3,R3,#0x1
   \       0x92   0x18E4             ADDS     R4,R4,R3
   1434                  }
   \       0x94   0x1C49             ADDS     R1,R1,#+1
   \       0x96   0xE7E7             B.N      ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_8
   1435          
   1436                  p += pad_count;
   1437                  bad |= *p++; /* Must be zero */
   1438              }
   1439              else
   1440              {
   1441                  bad |= *p++ ^ MBEDTLS_RSA_SIGN;
   \                     ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_7: (+1)
   \       0x98   0xF081 0x0101      EOR      R1,R1,#0x1
   \       0x9C   0x430A             ORRS     R2,R1,R2
   \       0x9E   0x1C80             ADDS     R0,R0,#+2
   1442          
   1443                  /* Get padding len, but always read till end of buffer
   1444                   * (minus one, for the 00 byte) */
   1445                  for( i = 0; i < ilen - 3; i++ )
   \       0xA0   0x4621             MOV      R1,R4
   \                     ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_10: (+1)
   \       0xA2   0x1EEB             SUBS     R3,R5,#+3
   \       0xA4   0x4299             CMP      R1,R3
   \       0xA6   0xD229             BCS.N    ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_9
   1446                  {
   1447                      pad_done |= ( p[i] != 0xFF );
   \       0xA8   0x5C43             LDRB     R3,[R0, R1]
   \       0xAA   0x2BFF             CMP      R3,#+255
   \       0xAC   0xD101             BNE.N    ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_11
   \       0xAE   0x2300             MOVS     R3,#+0
   \       0xB0   0xE000             B.N      ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_12
   \                     ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_11: (+1)
   \       0xB2   0x2301             MOVS     R3,#+1
   \                     ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_12: (+1)
   \       0xB4   0x431E             ORRS     R6,R3,R6
   1448                      pad_count += ( pad_done == 0 );
   \       0xB6   0x4633             MOV      R3,R6
   \       0xB8   0xB2DB             UXTB     R3,R3
   \       0xBA   0x2B00             CMP      R3,#+0
   \       0xBC   0xD100             BNE.N    ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_13
   \       0xBE   0x1C64             ADDS     R4,R4,#+1
   1449                  }
   \                     ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_13: (+1)
   \       0xC0   0x1C49             ADDS     R1,R1,#+1
   \       0xC2   0xE7EE             B.N      ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_10
   1450          
   1451                  p += pad_count;
   1452                  bad |= *p++; /* Must be zero */
   1453              }
   1454          
   1455              bad |= ( pad_count < 8 );
   1456          
   1457              if( bad )
   \                     ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_14: (+1)
   \       0xC4   0x9A8B             LDR      R2,[SP, #+556]
   1458              {
   1459                  ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
   1460                  goto cleanup;
   1461              }
   1462          
   1463              if( ilen - ( p - buf ) > output_max_len )
   \       0xC6   0x1A6B             SUBS     R3,R5,R1
   \       0xC8   0xA801             ADD      R0,SP,#+4
   \       0xCA   0x18C3             ADDS     R3,R0,R3
   \       0xCC   0x429A             CMP      R2,R3
   \       0xCE   0xD202             BCS.N    ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_15
   1464              {
   1465                  ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
   \       0xD0   0x....'....        LDR.W    R7,??DataTable26  ;; 0xffffbc00
   1466                  goto cleanup;
   \       0xD4   0xE008             B.N      ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_6
   1467              }
   \                     ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_15: (+1)
   \       0xD6   0x988A             LDR      R0,[SP, #+552]
   \       0xD8   0x9B88             LDR      R3,[SP, #+544]
   1468          
   1469              *olen = ilen - (p - buf);
   \       0xDA   0x1A6D             SUBS     R5,R5,R1
   \       0xDC   0xAA01             ADD      R2,SP,#+4
   \       0xDE   0x1955             ADDS     R5,R2,R5
   \       0xE0   0x601D             STR      R5,[R3, #+0]
   1470              memcpy( output, p, *olen );
   \       0xE2   0x462A             MOV      R2,R5
   \       0xE4   0x....'....        BL       __aeabi_memcpy
   1471              ret = 0;
   1472          
   1473          cleanup:
   1474              mbedtls_platform_zeroize( buf, sizeof( buf ) );
   \                     ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_6: (+1)
   \       0xE8   0xF44F 0x7100      MOV      R1,#+512
   \       0xEC   0xA801             ADD      R0,SP,#+4
   \       0xEE   0x....'....        BL       mbedtls_platform_zeroize
   1475          
   1476              return( ret );
   \       0xF2   0x4638             MOV      R0,R7
   \                     ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_3: (+1)
   \       0xF4   0xF50D 0x7D02      ADD      SP,SP,#+520
   \       0xF8   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   \                     ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_9: (+1)
   \       0xFC   0x1901             ADDS     R1,R0,R4
   \       0xFE   0xF811 0x0B01      LDRB     R0,[R1], #+1
   \      0x102   0x4302             ORRS     R2,R0,R2
   \      0x104   0x2C08             CMP      R4,#+8
   \      0x106   0x4180             SBCS     R0,R0,R0
   \      0x108   0xEA52 0x72D0      ORRS     R2,R2,R0, LSR #+31
   \      0x10C   0xD0DA             BEQ.N    ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_14
   \      0x10E   0x....'....        LDR.W    R0,??DataTable26_1  ;; 0xffffbf00
   \      0x112   0x4607             MOV      R7,R0
   \      0x114   0xE7E8             B.N      ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_6
   1477          }
   1478          #endif /* MBEDTLS_PKCS1_V15 */
   1479          
   1480          /*
   1481           * Do an RSA operation, then remove the message padding
   1482           */

   \                                 In section .text, align 2, keep-with-next
   1483          int mbedtls_rsa_pkcs1_decrypt( mbedtls_rsa_context *ctx,
   1484                                 int (*f_rng)(void *, unsigned char *, size_t),
   1485                                 void *p_rng,
   1486                                 int mode, size_t *olen,
   1487                                 const unsigned char *input,
   1488                                 unsigned char *output,
   1489                                 size_t output_max_len)
   1490          {
   \                     mbedtls_rsa_pkcs1_decrypt: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0xB086             SUB      SP,SP,#+24
   \        0x4   0x9C0C             LDR      R4,[SP, #+48]
   \        0x6   0x9D0D             LDR      R5,[SP, #+52]
   \        0x8   0x9E0E             LDR      R6,[SP, #+56]
   \        0xA   0x9F0F             LDR      R7,[SP, #+60]
   1491              switch( ctx->padding )
   \        0xC   0xF8D0 0xC0A4      LDR      R12,[R0, #+164]
   \       0x10   0xF1BC 0x0F00      CMP      R12,#+0
   \       0x14   0xD003             BEQ.N    ??mbedtls_rsa_pkcs1_decrypt_0
   \       0x16   0xF1BC 0x0F01      CMP      R12,#+1
   \       0x1A   0xD007             BEQ.N    ??mbedtls_rsa_pkcs1_decrypt_1
   \       0x1C   0xE010             B.N      ??mbedtls_rsa_pkcs1_decrypt_2
   1492              {
   1493          #if defined(MBEDTLS_PKCS1_V15)
   1494                  case MBEDTLS_RSA_PKCS_V15:
   1495                      return mbedtls_rsa_rsaes_pkcs1_v15_decrypt( ctx, f_rng, p_rng, mode, olen,
   1496                                                          input, output, output_max_len );
   \                     ??mbedtls_rsa_pkcs1_decrypt_0: (+1)
   \       0x1E   0x9703             STR      R7,[SP, #+12]
   \       0x20   0x9602             STR      R6,[SP, #+8]
   \       0x22   0x9501             STR      R5,[SP, #+4]
   \       0x24   0x9400             STR      R4,[SP, #+0]
   \       0x26   0x....'....        BL       mbedtls_rsa_rsaes_pkcs1_v15_decrypt
   \       0x2A   0xE00B             B.N      ??mbedtls_rsa_pkcs1_decrypt_3
   1497          #endif
   1498          
   1499          #if defined(MBEDTLS_PKCS1_V21)
   1500                  case MBEDTLS_RSA_PKCS_V21:
   1501                      return mbedtls_rsa_rsaes_oaep_decrypt( ctx, f_rng, p_rng, mode, NULL, 0,
   1502                                                     olen, input, output,
   1503                                                     output_max_len );
   \                     ??mbedtls_rsa_pkcs1_decrypt_1: (+1)
   \       0x2C   0x9705             STR      R7,[SP, #+20]
   \       0x2E   0x9604             STR      R6,[SP, #+16]
   \       0x30   0x9503             STR      R5,[SP, #+12]
   \       0x32   0x9402             STR      R4,[SP, #+8]
   \       0x34   0x2400             MOVS     R4,#+0
   \       0x36   0x9401             STR      R4,[SP, #+4]
   \       0x38   0x9400             STR      R4,[SP, #+0]
   \       0x3A   0x....'....        BL       mbedtls_rsa_rsaes_oaep_decrypt
   \       0x3E   0xE001             B.N      ??mbedtls_rsa_pkcs1_decrypt_3
   1504          #endif
   1505          
   1506                  default:
   1507                      return( MBEDTLS_ERR_RSA_INVALID_PADDING );
   \                     ??mbedtls_rsa_pkcs1_decrypt_2: (+1)
   \       0x40   0x....'....        LDR.W    R0,??DataTable26_1  ;; 0xffffbf00
   \                     ??mbedtls_rsa_pkcs1_decrypt_3: (+1)
   \       0x44   0xB007             ADD      SP,SP,#+28
   \       0x46   0xBDF0             POP      {R4-R7,PC}       ;; return
   1508              }
   1509          }
   1510          
   1511          #if defined(MBEDTLS_PKCS1_V21)
   1512          /*
   1513           * Implementation of the PKCS#1 v2.1 RSASSA-PSS-SIGN function
   1514           */

   \                                 In section .text, align 2, keep-with-next
   1515          int mbedtls_rsa_rsassa_pss_sign( mbedtls_rsa_context *ctx,
   1516                                   int (*f_rng)(void *, unsigned char *, size_t),
   1517                                   void *p_rng,
   1518                                   int mode,
   1519                                   mbedtls_md_type_t md_alg,
   1520                                   unsigned int hashlen,
   1521                                   const unsigned char *hash,
   1522                                   unsigned char *sig )
   1523          {
   \                     mbedtls_rsa_rsassa_pss_sign: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \        0x4   0xB096             SUB      SP,SP,#+88
   \        0x6   0x4604             MOV      R4,R0
   \        0x8   0x4692             MOV      R10,R2
   1524              size_t olen;
   1525              unsigned char *p = sig;
   1526              unsigned char salt[MBEDTLS_MD_MAX_SIZE];
   1527              unsigned int slen, hlen, offset = 0;
   \        0xA   0x2500             MOVS     R5,#+0
   1528              int ret;
   1529              size_t msb;
   1530              const mbedtls_md_info_t *md_info;
   1531              mbedtls_md_context_t md_ctx;
   1532          
   1533              if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
   \        0xC   0x4618             MOV      R0,R3
   \        0xE   0x2801             CMP      R0,#+1
   \       0x10   0xD103             BNE.N    ??mbedtls_rsa_rsassa_pss_sign_0
   \       0x12   0xF8D4 0x00A4      LDR      R0,[R4, #+164]
   \       0x16   0x2801             CMP      R0,#+1
   \       0x18   0xD11F             BNE.N    ??mbedtls_rsa_rsassa_pss_sign_1
   \                     ??mbedtls_rsa_rsassa_pss_sign_0: (+1)
   \       0x1A   0x9101             STR      R1,[SP, #+4]
   1534                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   1535          
   1536              if( f_rng == NULL )
   \       0x1C   0x4608             MOV      R0,R1
   \       0x1E   0x2800             CMP      R0,#+0
   \       0x20   0xD01B             BEQ.N    ??mbedtls_rsa_rsassa_pss_sign_1
   \       0x22   0x9820             LDR      R0,[SP, #+128]
   1537                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   1538          
   1539              olen = ctx->len;
   \       0x24   0x6866             LDR      R6,[R4, #+4]
   \       0x26   0x9F21             LDR      R7,[SP, #+132]
   1540          
   1541              if( md_alg != MBEDTLS_MD_NONE )
   \       0x28   0x0001             MOVS     R1,R0
   \       0x2A   0xD006             BEQ.N    ??mbedtls_rsa_rsassa_pss_sign_2
   1542              {
   1543                  /* Gather length of hash to sign */
   1544                  md_info = mbedtls_md_info_from_type( md_alg );
   \       0x2C   0x....'....        BL       mbedtls_md_info_from_type
   1545                  if( md_info == NULL )
   \       0x30   0x2800             CMP      R0,#+0
   \       0x32   0xD012             BEQ.N    ??mbedtls_rsa_rsassa_pss_sign_1
   1546                      return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   1547          
   1548                  hashlen = mbedtls_md_get_size( md_info );
   \       0x34   0x....'....        BL       mbedtls_md_get_size
   \       0x38   0x4607             MOV      R7,R0
   1549              }
   1550          
   1551              md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
   \                     ??mbedtls_rsa_rsassa_pss_sign_2: (+1)
   \       0x3A   0xF8D4 0x00A8      LDR      R0,[R4, #+168]
   \       0x3E   0xB2C0             UXTB     R0,R0
   \       0x40   0x....'....        BL       mbedtls_md_info_from_type
   \       0x44   0x9000             STR      R0,[SP, #+0]
   1552              if( md_info == NULL )
   \       0x46   0x2800             CMP      R0,#+0
   \       0x48   0xD007             BEQ.N    ??mbedtls_rsa_rsassa_pss_sign_1
   1553                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   1554          
   1555              hlen = mbedtls_md_get_size( md_info );
   \       0x4A   0x....'....        BL       mbedtls_md_get_size
   \       0x4E   0x4681             MOV      R9,R0
   1556              slen = hlen;
   1557          
   1558              if( olen < hlen + slen + 2 )
   \       0x50   0xEA4F 0x0049      LSL      R0,R9,#+1
   \       0x54   0x1C80             ADDS     R0,R0,#+2
   \       0x56   0x4286             CMP      R6,R0
   \       0x58   0xD202             BCS.N    ??mbedtls_rsa_rsassa_pss_sign_3
   1559                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   \                     ??mbedtls_rsa_rsassa_pss_sign_1: (+1)
   \       0x5A   0x....'....        LDR.W    R0,??DataTable26_3  ;; 0xffffbf80
   \       0x5E   0xE096             B.N      ??mbedtls_rsa_rsassa_pss_sign_4
   \                     ??mbedtls_rsa_rsassa_pss_sign_3: (+1)
   \       0x60   0xF8DD 0x808C      LDR      R8,[SP, #+140]
   \       0x64   0xF8CD 0xA014      STR      R10,[SP, #+20]
   1560          
   1561              memset( sig, 0, olen );
   \       0x68   0x462A             MOV      R2,R5
   \       0x6A   0x4631             MOV      R1,R6
   \       0x6C   0x4640             MOV      R0,R8
   \       0x6E   0x....'....        BL       __aeabi_memset
   1562          
   1563              /* Generate salt of length slen */
   1564              if( ( ret = f_rng( p_rng, salt, slen ) ) != 0 )
   \       0x72   0x464A             MOV      R2,R9
   \       0x74   0xA906             ADD      R1,SP,#+24
   \       0x76   0x9805             LDR      R0,[SP, #+20]
   \       0x78   0x9B01             LDR      R3,[SP, #+4]
   \       0x7A   0x4798             BLX      R3
   \       0x7C   0x2800             CMP      R0,#+0
   \       0x7E   0xD002             BEQ.N    ??mbedtls_rsa_rsassa_pss_sign_5
   1565                  return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
   \       0x80   0xF5A0 0x4089      SUB      R0,R0,#+17536
   \       0x84   0xE083             B.N      ??mbedtls_rsa_rsassa_pss_sign_4
   1566          
   1567              /* Note: EMSA-PSS encoding is over the length of N - 1 bits */
   1568              msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
   \                     ??mbedtls_rsa_rsassa_pss_sign_5: (+1)
   \       0x86   0xF104 0x0008      ADD      R0,R4,#+8
   \       0x8A   0x....'....        BL       mbedtls_mpi_bitlen
   \       0x8E   0x4682             MOV      R10,R0
   \       0x90   0xF1AA 0x0A01      SUB      R10,R10,#+1
   1569              p += olen - hlen * 2 - 2;
   \       0x94   0xEBA6 0x0049      SUB      R0,R6,R9, LSL #+1
   \       0x98   0x4440             ADD      R0,R8,R0
   \       0x9A   0xF1A0 0x0B02      SUB      R11,R0,#+2
   1570              *p++ = 0x01;
   \       0x9E   0x2001             MOVS     R0,#+1
   \       0xA0   0xF80B 0x0B01      STRB     R0,[R11], #+1
   1571              memcpy( p, salt, slen );
   \       0xA4   0x464A             MOV      R2,R9
   \       0xA6   0xA906             ADD      R1,SP,#+24
   \       0xA8   0x4658             MOV      R0,R11
   \       0xAA   0x....'....        BL       __aeabi_memcpy
   1572              p += slen;
   \       0xAE   0x44CB             ADD      R11,R11,R9
   1573          
   1574              mbedtls_md_init( &md_ctx );
   \       0xB0   0xA802             ADD      R0,SP,#+8
   \       0xB2   0x....'....        BL       mbedtls_md_init
   1575              if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
   \       0xB6   0x462A             MOV      R2,R5
   \       0xB8   0x9900             LDR      R1,[SP, #+0]
   \       0xBA   0xA802             ADD      R0,SP,#+8
   \       0xBC   0x....'....        BL       mbedtls_md_setup
   \       0xC0   0x9000             STR      R0,[SP, #+0]
   \       0xC2   0x2800             CMP      R0,#+0
   \       0xC4   0xD14C             BNE.N    ??mbedtls_rsa_rsassa_pss_sign_6
   1576                  goto exit;
   1577          
   1578              /* Generate H = Hash( M' ) */
   1579              if( ( ret = mbedtls_md_starts( &md_ctx ) ) != 0 )
   \       0xC6   0xA802             ADD      R0,SP,#+8
   \       0xC8   0x....'....        BL       mbedtls_md_starts
   \       0xCC   0x9000             STR      R0,[SP, #+0]
   \       0xCE   0x2800             CMP      R0,#+0
   \       0xD0   0xD146             BNE.N    ??mbedtls_rsa_rsassa_pss_sign_6
   1580                  goto exit;
   1581              if( ( ret = mbedtls_md_update( &md_ctx, p, 8 ) ) != 0 )
   \       0xD2   0x2208             MOVS     R2,#+8
   \       0xD4   0x4659             MOV      R1,R11
   \       0xD6   0xA802             ADD      R0,SP,#+8
   \       0xD8   0x....'....        BL       mbedtls_md_update
   \       0xDC   0x9000             STR      R0,[SP, #+0]
   \       0xDE   0x2800             CMP      R0,#+0
   \       0xE0   0xD13E             BNE.N    ??mbedtls_rsa_rsassa_pss_sign_6
   \       0xE2   0x9922             LDR      R1,[SP, #+136]
   1582                  goto exit;
   1583              if( ( ret = mbedtls_md_update( &md_ctx, hash, hashlen ) ) != 0 )
   \       0xE4   0x463A             MOV      R2,R7
   \       0xE6   0xA802             ADD      R0,SP,#+8
   \       0xE8   0x....'....        BL       mbedtls_md_update
   \       0xEC   0x9000             STR      R0,[SP, #+0]
   \       0xEE   0x2800             CMP      R0,#+0
   \       0xF0   0xD136             BNE.N    ??mbedtls_rsa_rsassa_pss_sign_6
   1584                  goto exit;
   1585              if( ( ret = mbedtls_md_update( &md_ctx, salt, slen ) ) != 0 )
   \       0xF2   0x464A             MOV      R2,R9
   \       0xF4   0xA906             ADD      R1,SP,#+24
   \       0xF6   0xA802             ADD      R0,SP,#+8
   \       0xF8   0x....'....        BL       mbedtls_md_update
   \       0xFC   0x9000             STR      R0,[SP, #+0]
   \       0xFE   0x2800             CMP      R0,#+0
   \      0x100   0xD12E             BNE.N    ??mbedtls_rsa_rsassa_pss_sign_6
   1586                  goto exit;
   1587              if( ( ret = mbedtls_md_finish( &md_ctx, p ) ) != 0 )
   \      0x102   0x4659             MOV      R1,R11
   \      0x104   0xA802             ADD      R0,SP,#+8
   \      0x106   0x....'....        BL       mbedtls_md_finish
   \      0x10A   0x9000             STR      R0,[SP, #+0]
   \      0x10C   0x2800             CMP      R0,#+0
   \      0x10E   0xD127             BNE.N    ??mbedtls_rsa_rsassa_pss_sign_6
   1588                  goto exit;
   1589          
   1590              /* Compensate for boundary condition when applying mask */
   1591              if( msb % 8 == 0 )
   \      0x110   0xF01A 0x0F07      TST      R10,#0x7
   \      0x114   0xD100             BNE.N    ??mbedtls_rsa_rsassa_pss_sign_7
   1592                  offset = 1;
   \      0x116   0x2501             MOVS     R5,#+1
   1593          
   1594              /* maskedDB: Apply dbMask to DB */
   1595              if( ( ret = mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen,
   1596                                    &md_ctx ) ) != 0 )
   \                     ??mbedtls_rsa_rsassa_pss_sign_7: (+1)
   \      0x118   0xA802             ADD      R0,SP,#+8
   \      0x11A   0x9000             STR      R0,[SP, #+0]
   \      0x11C   0x464B             MOV      R3,R9
   \      0x11E   0x465A             MOV      R2,R11
   \      0x120   0xEBA6 0x0109      SUB      R1,R6,R9
   \      0x124   0x1E49             SUBS     R1,R1,#+1
   \      0x126   0x1B49             SUBS     R1,R1,R5
   \      0x128   0xEB08 0x0005      ADD      R0,R8,R5
   \      0x12C   0x....'....        BL       mgf_mask
   \      0x130   0x9000             STR      R0,[SP, #+0]
   \      0x132   0x2800             CMP      R0,#+0
   \      0x134   0xD114             BNE.N    ??mbedtls_rsa_rsassa_pss_sign_6
   1597                  goto exit;
   1598          
   1599              msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
   \      0x136   0xF104 0x0008      ADD      R0,R4,#+8
   \      0x13A   0x....'....        BL       mbedtls_mpi_bitlen
   \      0x13E   0x1E40             SUBS     R0,R0,#+1
   1600              sig[0] &= 0xFF >> ( olen * 8 - msb );
   \      0x140   0xF898 0x1000      LDRB     R1,[R8, #+0]
   \      0x144   0x22FF             MOVS     R2,#+255
   \      0x146   0xEBC0 0x00C6      RSB      R0,R0,R6, LSL #+3
   \      0x14A   0x4102             ASRS     R2,R2,R0
   \      0x14C   0x4011             ANDS     R1,R2,R1
   \      0x14E   0xF888 0x1000      STRB     R1,[R8, #+0]
   1601          
   1602              p += hlen;
   1603              *p++ = 0xBC;
   \      0x152   0x20BC             MOVS     R0,#+188
   \      0x154   0xF80B 0x0009      STRB     R0,[R11, R9]
   1604          
   1605              mbedtls_platform_zeroize( salt, sizeof( salt ) );
   \      0x158   0x2140             MOVS     R1,#+64
   \      0x15A   0xA806             ADD      R0,SP,#+24
   \      0x15C   0x....'....        BL       mbedtls_platform_zeroize
   1606          
   1607          exit:
   1608              mbedtls_md_free( &md_ctx );
   \                     ??mbedtls_rsa_rsassa_pss_sign_6: (+1)
   \      0x160   0xA802             ADD      R0,SP,#+8
   \      0x162   0x....'....        BL       mbedtls_md_free
   1609          
   1610              if( ret != 0 )
   \      0x166   0x9800             LDR      R0,[SP, #+0]
   \      0x168   0x2800             CMP      R0,#+0
   \      0x16A   0xD110             BNE.N    ??mbedtls_rsa_rsassa_pss_sign_4
   1611                  return( ret );
   1612          
   1613              return( ( mode == MBEDTLS_RSA_PUBLIC )
   1614                      ? mbedtls_rsa_public(  ctx, sig, sig )
   1615                      : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig ) );
   \      0x16C   0x9816             LDR      R0,[SP, #+88]
   \      0x16E   0x2800             CMP      R0,#+0
   \      0x170   0xD105             BNE.N    ??mbedtls_rsa_rsassa_pss_sign_8
   \      0x172   0x4642             MOV      R2,R8
   \      0x174   0x4641             MOV      R1,R8
   \      0x176   0x4620             MOV      R0,R4
   \      0x178   0x....'....        BL       mbedtls_rsa_public
   \      0x17C   0xE007             B.N      ??mbedtls_rsa_rsassa_pss_sign_4
   \                     ??mbedtls_rsa_rsassa_pss_sign_8: (+1)
   \      0x17E   0xF8CD 0x8000      STR      R8,[SP, #+0]
   \      0x182   0x4643             MOV      R3,R8
   \      0x184   0x9A05             LDR      R2,[SP, #+20]
   \      0x186   0x9901             LDR      R1,[SP, #+4]
   \      0x188   0x4620             MOV      R0,R4
   \      0x18A   0x....'....        BL       mbedtls_rsa_private
   \                     ??mbedtls_rsa_rsassa_pss_sign_4: (+1)
   \      0x18E   0xB017             ADD      SP,SP,#+92
   \      0x190   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   1616          }
   1617          #endif /* MBEDTLS_PKCS1_V21 */
   1618          
   1619          #if defined(MBEDTLS_PKCS1_V15)
   1620          /*
   1621           * Implementation of the PKCS#1 v2.1 RSASSA-PKCS1-V1_5-SIGN function
   1622           */
   1623          
   1624          /* Construct a PKCS v1.5 encoding of a hashed message
   1625           *
   1626           * This is used both for signature generation and verification.
   1627           *
   1628           * Parameters:
   1629           * - md_alg:  Identifies the hash algorithm used to generate the given hash;
   1630           *            MBEDTLS_MD_NONE if raw data is signed.
   1631           * - hashlen: Length of hash in case hashlen is MBEDTLS_MD_NONE.
   1632           * - hash:    Buffer containing the hashed message or the raw data.
   1633           * - dst_len: Length of the encoded message.
   1634           * - dst:     Buffer to hold the encoded message.
   1635           *
   1636           * Assumptions:
   1637           * - hash has size hashlen if md_alg == MBEDTLS_MD_NONE.
   1638           * - hash has size corresponding to md_alg if md_alg != MBEDTLS_MD_NONE.
   1639           * - dst points to a buffer of size at least dst_len.
   1640           *
   1641           */

   \                                 In section .text, align 2, keep-with-next
   1642          static int rsa_rsassa_pkcs1_v15_encode( mbedtls_md_type_t md_alg,
   1643                                                  unsigned int hashlen,
   1644                                                  const unsigned char *hash,
   1645                                                  size_t dst_len,
   1646                                                  unsigned char *dst )
   1647          {
   \                     rsa_rsassa_pkcs1_v15_encode: (+1)
   \        0x0   0xE92D 0x47FC      PUSH     {R2-R10,LR}
   \        0x4   0x4606             MOV      R6,R0
   \        0x6   0x460C             MOV      R4,R1
   \        0x8   0x4615             MOV      R5,R2
   \        0xA   0x461F             MOV      R7,R3
   1648              size_t oid_size  = 0;
   \        0xC   0x2000             MOVS     R0,#+0
   \        0xE   0x9000             STR      R0,[SP, #+0]
   1649              size_t nb_pad    = dst_len;
   1650              unsigned char *p = dst;
   1651              const char *oid  = NULL;
   \       0x10   0x9001             STR      R0,[SP, #+4]
   1652          
   1653              /* Are we signing hashed or raw data? */
   1654              if( md_alg != MBEDTLS_MD_NONE )
   \       0x12   0x0030             MOVS     R0,R6
   \       0x14   0xD037             BEQ.N    ??rsa_rsassa_pkcs1_v15_encode_0
   1655              {
   1656                  const mbedtls_md_info_t *md_info = mbedtls_md_info_from_type( md_alg );
   \       0x16   0x....'....        BL       mbedtls_md_info_from_type
   \       0x1A   0x0004             MOVS     R4,R0
   1657                  if( md_info == NULL )
   \       0x1C   0xD102             BNE.N    ??rsa_rsassa_pkcs1_v15_encode_1
   1658                      return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   \       0x1E   0x....'....        LDR.W    R0,??DataTable26_3  ;; 0xffffbf80
   \       0x22   0xE08C             B.N      ??rsa_rsassa_pkcs1_v15_encode_2
   1659          
   1660                  if( mbedtls_oid_get_oid_by_md( md_alg, &oid, &oid_size ) != 0 )
   \                     ??rsa_rsassa_pkcs1_v15_encode_1: (+1)
   \       0x24   0x466A             MOV      R2,SP
   \       0x26   0xA901             ADD      R1,SP,#+4
   \       0x28   0x4630             MOV      R0,R6
   \       0x2A   0x....'....        BL       mbedtls_oid_get_oid_by_md
   \       0x2E   0x2800             CMP      R0,#+0
   \       0x30   0xD002             BEQ.N    ??rsa_rsassa_pkcs1_v15_encode_3
   1661                      return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   \       0x32   0x....'....        LDR.W    R0,??DataTable26_3  ;; 0xffffbf80
   \       0x36   0xE082             B.N      ??rsa_rsassa_pkcs1_v15_encode_2
   1662          
   1663                  hashlen = mbedtls_md_get_size( md_info );
   \                     ??rsa_rsassa_pkcs1_v15_encode_3: (+1)
   \       0x38   0x4620             MOV      R0,R4
   \       0x3A   0x....'....        BL       mbedtls_md_get_size
   \       0x3E   0x4604             MOV      R4,R0
   1664          
   1665                  /* Double-check that 8 + hashlen + oid_size can be used as a
   1666                   * 1-byte ASN.1 length encoding and that there's no overflow. */
   1667                  if( 8 + hashlen + oid_size  >= 0x80         ||
   1668                      10 + hashlen            <  hashlen      ||
   1669                      10 + hashlen + oid_size <  10 + hashlen )
   \       0x40   0x9800             LDR      R0,[SP, #+0]
   \       0x42   0x1900             ADDS     R0,R0,R4
   \       0x44   0x3008             ADDS     R0,R0,#+8
   \       0x46   0x2880             CMP      R0,#+128
   \       0x48   0xD20A             BCS.N    ??rsa_rsassa_pkcs1_v15_encode_4
   \       0x4A   0xF104 0x000A      ADD      R0,R4,#+10
   \       0x4E   0x42A0             CMP      R0,R4
   \       0x50   0xD306             BCC.N    ??rsa_rsassa_pkcs1_v15_encode_4
   \       0x52   0x9800             LDR      R0,[SP, #+0]
   \       0x54   0x1900             ADDS     R0,R0,R4
   \       0x56   0x300A             ADDS     R0,R0,#+10
   \       0x58   0xF104 0x010A      ADD      R1,R4,#+10
   \       0x5C   0x4288             CMP      R0,R1
   \       0x5E   0xD202             BCS.N    ??rsa_rsassa_pkcs1_v15_encode_5
   1670                      return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   \                     ??rsa_rsassa_pkcs1_v15_encode_4: (+1)
   \       0x60   0x....'....        LDR.W    R0,??DataTable26_3  ;; 0xffffbf80
   \       0x64   0xE06B             B.N      ??rsa_rsassa_pkcs1_v15_encode_2
   1671          
   1672                  /*
   1673                   * Static bounds check:
   1674                   * - Need 10 bytes for five tag-length pairs.
   1675                   *   (Insist on 1-byte length encodings to protect against variants of
   1676                   *    Bleichenbacher's forgery attack against lax PKCS#1v1.5 verification)
   1677                   * - Need hashlen bytes for hash
   1678                   * - Need oid_size bytes for hash alg OID.
   1679                   */
   1680                  if( nb_pad < 10 + hashlen + oid_size )
   \                     ??rsa_rsassa_pkcs1_v15_encode_5: (+1)
   \       0x66   0x9800             LDR      R0,[SP, #+0]
   \       0x68   0x1900             ADDS     R0,R0,R4
   \       0x6A   0x300A             ADDS     R0,R0,#+10
   \       0x6C   0x4287             CMP      R7,R0
   \       0x6E   0xD202             BCS.N    ??rsa_rsassa_pkcs1_v15_encode_6
   1681                      return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   \       0x70   0x....'....        LDR.W    R0,??DataTable26_3  ;; 0xffffbf80
   \       0x74   0xE063             B.N      ??rsa_rsassa_pkcs1_v15_encode_2
   1682                  nb_pad -= 10 + hashlen + oid_size;
   \                     ??rsa_rsassa_pkcs1_v15_encode_6: (+1)
   \       0x76   0x1B38             SUBS     R0,R7,R4
   \       0x78   0xF8DD 0x9000      LDR      R9,[SP, #+0]
   \       0x7C   0xEBA0 0x0909      SUB      R9,R0,R9
   \       0x80   0xF1A9 0x090A      SUB      R9,R9,#+10
   \       0x84   0xE006             B.N      ??rsa_rsassa_pkcs1_v15_encode_7
   1683              }
   1684              else
   1685              {
   1686                  if( nb_pad < hashlen )
   \                     ??rsa_rsassa_pkcs1_v15_encode_0: (+1)
   \       0x86   0x42A7             CMP      R7,R4
   \       0x88   0xD202             BCS.N    ??rsa_rsassa_pkcs1_v15_encode_8
   1687                      return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   \       0x8A   0x....'....        LDR.W    R0,??DataTable26_3  ;; 0xffffbf80
   \       0x8E   0xE056             B.N      ??rsa_rsassa_pkcs1_v15_encode_2
   1688          
   1689                  nb_pad -= hashlen;
   \                     ??rsa_rsassa_pkcs1_v15_encode_8: (+1)
   \       0x90   0xEBA7 0x0904      SUB      R9,R7,R4
   1690              }
   1691          
   1692              /* Need space for signature header and padding delimiter (3 bytes),
   1693               * and 8 bytes for the minimal padding */
   1694              if( nb_pad < 3 + 8 )
   \                     ??rsa_rsassa_pkcs1_v15_encode_7: (+1)
   \       0x94   0xF1B9 0x0F0B      CMP      R9,#+11
   \       0x98   0xD202             BCS.N    ??rsa_rsassa_pkcs1_v15_encode_9
   1695                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   \       0x9A   0x....'....        LDR.W    R0,??DataTable26_3  ;; 0xffffbf80
   \       0x9E   0xE04E             B.N      ??rsa_rsassa_pkcs1_v15_encode_2
   \                     ??rsa_rsassa_pkcs1_v15_encode_9: (+1)
   \       0xA0   0xF8DD 0x8028      LDR      R8,[SP, #+40]
   1696              nb_pad -= 3;
   \       0xA4   0xF1A9 0x0903      SUB      R9,R9,#+3
   1697          
   1698              /* Now nb_pad is the amount of memory to be filled
   1699               * with padding, and at least 8 bytes long. */
   1700          
   1701              /* Write signature header and padding */
   1702              *p++ = 0;
   \       0xA8   0x2000             MOVS     R0,#+0
   \       0xAA   0xF888 0x0000      STRB     R0,[R8, #+0]
   1703              *p++ = MBEDTLS_RSA_SIGN;
   \       0xAE   0x2001             MOVS     R0,#+1
   \       0xB0   0xF888 0x0001      STRB     R0,[R8, #+1]
   \       0xB4   0xF108 0x0A02      ADD      R10,R8,#+2
   1704              memset( p, 0xFF, nb_pad );
   \       0xB8   0x22FF             MOVS     R2,#+255
   \       0xBA   0x4649             MOV      R1,R9
   \       0xBC   0x4650             MOV      R0,R10
   \       0xBE   0x....'....        BL       __aeabi_memset
   1705              p += nb_pad;
   \       0xC2   0xEB0A 0x0009      ADD      R0,R10,R9
   1706              *p++ = 0;
   \       0xC6   0x2100             MOVS     R1,#+0
   \       0xC8   0xF800 0x1B01      STRB     R1,[R0], #+1
   1707          
   1708              /* Are we signing raw data? */
   1709              if( md_alg == MBEDTLS_MD_NONE )
   \       0xCC   0x2E00             CMP      R6,#+0
   \       0xCE   0xD105             BNE.N    ??rsa_rsassa_pkcs1_v15_encode_10
   1710              {
   1711                  memcpy( p, hash, hashlen );
   \       0xD0   0x4622             MOV      R2,R4
   \       0xD2   0x4629             MOV      R1,R5
   \       0xD4   0x....'....        BL       __aeabi_memcpy
   1712                  return( 0 );
   \       0xD8   0x2000             MOVS     R0,#+0
   \       0xDA   0xE030             B.N      ??rsa_rsassa_pkcs1_v15_encode_2
   1713              }
   1714          
   1715              /* Signing hashed data, add corresponding ASN.1 structure
   1716               *
   1717               * DigestInfo ::= SEQUENCE {
   1718               *   digestAlgorithm DigestAlgorithmIdentifier,
   1719               *   digest Digest }
   1720               * DigestAlgorithmIdentifier ::= AlgorithmIdentifier
   1721               * Digest ::= OCTET STRING
   1722               *
   1723               * Schematic:
   1724               * TAG-SEQ + LEN [ TAG-SEQ + LEN [ TAG-OID  + LEN [ OID  ]
   1725               *                                 TAG-NULL + LEN [ NULL ] ]
   1726               *                 TAG-OCTET + LEN [ HASH ] ]
   1727               */
   1728              *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
   \                     ??rsa_rsassa_pkcs1_v15_encode_10: (+1)
   \       0xDC   0x2130             MOVS     R1,#+48
   \       0xDE   0x7001             STRB     R1,[R0, #+0]
   1729              *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
   \       0xE0   0x9900             LDR      R1,[SP, #+0]
   \       0xE2   0x1861             ADDS     R1,R4,R1
   \       0xE4   0x3108             ADDS     R1,R1,#+8
   \       0xE6   0x7041             STRB     R1,[R0, #+1]
   1730              *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
   \       0xE8   0x2130             MOVS     R1,#+48
   \       0xEA   0x7081             STRB     R1,[R0, #+2]
   1731              *p++ = (unsigned char)( 0x04 + oid_size );
   \       0xEC   0x9900             LDR      R1,[SP, #+0]
   \       0xEE   0x1D09             ADDS     R1,R1,#+4
   \       0xF0   0x70C1             STRB     R1,[R0, #+3]
   1732              *p++ = MBEDTLS_ASN1_OID;
   \       0xF2   0x2106             MOVS     R1,#+6
   \       0xF4   0x7101             STRB     R1,[R0, #+4]
   1733              *p++ = (unsigned char) oid_size;
   \       0xF6   0x9900             LDR      R1,[SP, #+0]
   \       0xF8   0x7141             STRB     R1,[R0, #+5]
   \       0xFA   0x1D86             ADDS     R6,R0,#+6
   1734              memcpy( p, oid, oid_size );
   \       0xFC   0x9A00             LDR      R2,[SP, #+0]
   \       0xFE   0x9901             LDR      R1,[SP, #+4]
   \      0x100   0x4630             MOV      R0,R6
   \      0x102   0x....'....        BL       __aeabi_memcpy
   1735              p += oid_size;
   \      0x106   0x9800             LDR      R0,[SP, #+0]
   \      0x108   0x4430             ADD      R0,R6,R0
   1736              *p++ = MBEDTLS_ASN1_NULL;
   \      0x10A   0x2105             MOVS     R1,#+5
   \      0x10C   0x7001             STRB     R1,[R0, #+0]
   1737              *p++ = 0x00;
   \      0x10E   0x2100             MOVS     R1,#+0
   \      0x110   0x7041             STRB     R1,[R0, #+1]
   1738              *p++ = MBEDTLS_ASN1_OCTET_STRING;
   \      0x112   0x2104             MOVS     R1,#+4
   \      0x114   0x7081             STRB     R1,[R0, #+2]
   1739              *p++ = (unsigned char) hashlen;
   \      0x116   0x70C4             STRB     R4,[R0, #+3]
   \      0x118   0x1D06             ADDS     R6,R0,#+4
   1740              memcpy( p, hash, hashlen );
   \      0x11A   0x4622             MOV      R2,R4
   \      0x11C   0x4629             MOV      R1,R5
   \      0x11E   0x4630             MOV      R0,R6
   \      0x120   0x....'....        BL       __aeabi_memcpy
   1741              p += hashlen;
   1742          
   1743              /* Just a sanity-check, should be automatic
   1744               * after the initial bounds check. */
   1745              if( p != dst + dst_len )
   \      0x124   0x1930             ADDS     R0,R6,R4
   \      0x126   0xEB08 0x0107      ADD      R1,R8,R7
   \      0x12A   0x4288             CMP      R0,R1
   \      0x12C   0xD006             BEQ.N    ??rsa_rsassa_pkcs1_v15_encode_11
   1746              {
   1747                  mbedtls_platform_zeroize( dst, dst_len );
   \      0x12E   0x4639             MOV      R1,R7
   \      0x130   0x4640             MOV      R0,R8
   \      0x132   0x....'....        BL       mbedtls_platform_zeroize
   1748                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   \      0x136   0x....'....        LDR.W    R0,??DataTable26_3  ;; 0xffffbf80
   \      0x13A   0xE000             B.N      ??rsa_rsassa_pkcs1_v15_encode_2
   1749              }
   1750          
   1751              return( 0 );
   \                     ??rsa_rsassa_pkcs1_v15_encode_11: (+1)
   \      0x13C   0x2000             MOVS     R0,#+0
   \                     ??rsa_rsassa_pkcs1_v15_encode_2: (+1)
   \      0x13E   0xE8BD 0x87F6      POP      {R1,R2,R4-R10,PC}  ;; return
   1752          }
   1753          
   1754          /*
   1755           * Do an RSA operation to sign the message digest
   1756           */

   \                                 In section .text, align 2, keep-with-next
   1757          int mbedtls_rsa_rsassa_pkcs1_v15_sign( mbedtls_rsa_context *ctx,
   1758                                         int (*f_rng)(void *, unsigned char *, size_t),
   1759                                         void *p_rng,
   1760                                         int mode,
   1761                                         mbedtls_md_type_t md_alg,
   1762                                         unsigned int hashlen,
   1763                                         const unsigned char *hash,
   1764                                         unsigned char *sig )
   1765          {
   \                     mbedtls_rsa_rsassa_pkcs1_v15_sign: (+1)
   \        0x0   0xE92D 0x47FC      PUSH     {R2-R10,LR}
   \        0x4   0x4607             MOV      R7,R0
   \        0x6   0x4689             MOV      R9,R1
   \        0x8   0x4692             MOV      R10,R2
   \        0xA   0x461C             MOV      R4,R3
   1766              int ret;
   1767              unsigned char *sig_try = NULL, *verif = NULL;
   1768          
   1769              if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
   \        0xC   0x2C01             CMP      R4,#+1
   \        0xE   0xD105             BNE.N    ??mbedtls_rsa_rsassa_pkcs1_v15_sign_0
   \       0x10   0xF8D7 0x00A4      LDR      R0,[R7, #+164]
   \       0x14   0x2800             CMP      R0,#+0
   \       0x16   0xD001             BEQ.N    ??mbedtls_rsa_rsassa_pkcs1_v15_sign_0
   1770                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   \       0x18   0x....             LDR.N    R0,??DataTable22_1  ;; 0xffffbf80
   \       0x1A   0xE050             B.N      ??mbedtls_rsa_rsassa_pkcs1_v15_sign_1
   \                     ??mbedtls_rsa_rsassa_pkcs1_v15_sign_0: (+1)
   \       0x1C   0xF8DD 0x8034      LDR      R8,[SP, #+52]
   \       0x20   0x9A0C             LDR      R2,[SP, #+48]
   \       0x22   0x990B             LDR      R1,[SP, #+44]
   \       0x24   0x980A             LDR      R0,[SP, #+40]
   1771          
   1772              /*
   1773               * Prepare PKCS1-v1.5 encoding (padding and hash identifier)
   1774               */
   1775          
   1776              if( ( ret = rsa_rsassa_pkcs1_v15_encode( md_alg, hashlen, hash,
   1777                                                       ctx->len, sig ) ) != 0 )
   \       0x26   0xF8CD 0x8000      STR      R8,[SP, #+0]
   \       0x2A   0x687B             LDR      R3,[R7, #+4]
   \       0x2C   0x....'....        BL       rsa_rsassa_pkcs1_v15_encode
   \       0x30   0x2800             CMP      R0,#+0
   \       0x32   0xD144             BNE.N    ??mbedtls_rsa_rsassa_pkcs1_v15_sign_1
   1778                  return( ret );
   1779          
   1780              /*
   1781               * Call respective RSA primitive
   1782               */
   1783          
   1784              if( mode == MBEDTLS_RSA_PUBLIC )
   \       0x34   0x2C00             CMP      R4,#+0
   \       0x36   0xD107             BNE.N    ??mbedtls_rsa_rsassa_pkcs1_v15_sign_2
   1785              {
   1786                  /* Skip verification on a public key operation */
   1787                  return( mbedtls_rsa_public( ctx, sig, sig ) );
   \       0x38   0x4642             MOV      R2,R8
   \       0x3A   0x4641             MOV      R1,R8
   \       0x3C   0x4638             MOV      R0,R7
   \       0x3E   0xB002             ADD      SP,SP,#+8
   \       0x40   0xE8BD 0x47F0      POP      {R4-R10,LR}
   \       0x44   0x....'....        B.W      mbedtls_rsa_public
   1788              }
   1789          
   1790              /* Private key operation
   1791               *
   1792               * In order to prevent Lenstra's attack, make the signature in a
   1793               * temporary buffer and check it before returning it.
   1794               */
   1795          
   1796              sig_try = mbedtls_calloc( 1, ctx->len );
   \                     ??mbedtls_rsa_rsassa_pkcs1_v15_sign_2: (+1)
   \       0x48   0x6879             LDR      R1,[R7, #+4]
   \       0x4A   0x2001             MOVS     R0,#+1
   \       0x4C   0x....'....        BL       mbedtls_calloc
   \       0x50   0x0005             MOVS     R5,R0
   1797              if( sig_try == NULL )
   \       0x52   0xD102             BNE.N    ??mbedtls_rsa_rsassa_pkcs1_v15_sign_3
   1798                  return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
   \       0x54   0xF06F 0x000F      MVN      R0,#+15
   \       0x58   0xE031             B.N      ??mbedtls_rsa_rsassa_pkcs1_v15_sign_1
   1799          
   1800              verif = mbedtls_calloc( 1, ctx->len );
   \                     ??mbedtls_rsa_rsassa_pkcs1_v15_sign_3: (+1)
   \       0x5A   0x6879             LDR      R1,[R7, #+4]
   \       0x5C   0x2001             MOVS     R0,#+1
   \       0x5E   0x....'....        BL       mbedtls_calloc
   \       0x62   0x0006             MOVS     R6,R0
   1801              if( verif == NULL )
   \       0x64   0xD105             BNE.N    ??mbedtls_rsa_rsassa_pkcs1_v15_sign_4
   1802              {
   1803                  mbedtls_free( sig_try );
   \       0x66   0x4628             MOV      R0,R5
   \       0x68   0x....'....        BL       mbedtls_free
   1804                  return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
   \       0x6C   0xF06F 0x000F      MVN      R0,#+15
   \       0x70   0xE025             B.N      ??mbedtls_rsa_rsassa_pkcs1_v15_sign_1
   1805              }
   \                     ??mbedtls_rsa_rsassa_pkcs1_v15_sign_4: (+1)
   \       0x72   0x4652             MOV      R2,R10
   \       0x74   0x4649             MOV      R1,R9
   1806          
   1807              MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
   \       0x76   0x9500             STR      R5,[SP, #+0]
   \       0x78   0x4643             MOV      R3,R8
   \       0x7A   0x4638             MOV      R0,R7
   \       0x7C   0x....'....        BL       mbedtls_rsa_private
   \       0x80   0x0004             MOVS     R4,R0
   \       0x82   0xD115             BNE.N    ??mbedtls_rsa_rsassa_pkcs1_v15_sign_5
   1808              MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );
   \       0x84   0x4632             MOV      R2,R6
   \       0x86   0x4629             MOV      R1,R5
   \       0x88   0x4638             MOV      R0,R7
   \       0x8A   0x....'....        BL       mbedtls_rsa_public
   \       0x8E   0x0004             MOVS     R4,R0
   \       0x90   0xD10E             BNE.N    ??mbedtls_rsa_rsassa_pkcs1_v15_sign_5
   1809          
   1810              if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )
   \       0x92   0x687A             LDR      R2,[R7, #+4]
   \       0x94   0x4641             MOV      R1,R8
   \       0x96   0x4630             MOV      R0,R6
   \       0x98   0x....'....        BL       mbedtls_safer_memcmp
   \       0x9C   0x2800             CMP      R0,#+0
   \       0x9E   0xD002             BEQ.N    ??mbedtls_rsa_rsassa_pkcs1_v15_sign_6
   1811              {
   1812                  ret = MBEDTLS_ERR_RSA_PRIVATE_FAILED;
   \       0xA0   0x....'....        LDR.W    R4,??DataTable26_4  ;; 0xffffbd00
   1813                  goto cleanup;
   \       0xA4   0xE004             B.N      ??mbedtls_rsa_rsassa_pkcs1_v15_sign_5
   1814              }
   1815          
   1816              memcpy( sig, sig_try, ctx->len );
   \                     ??mbedtls_rsa_rsassa_pkcs1_v15_sign_6: (+1)
   \       0xA6   0x687A             LDR      R2,[R7, #+4]
   \       0xA8   0x4629             MOV      R1,R5
   \       0xAA   0x4640             MOV      R0,R8
   \       0xAC   0x....'....        BL       __aeabi_memcpy
   1817          
   1818          cleanup:
   1819              mbedtls_free( sig_try );
   \                     ??mbedtls_rsa_rsassa_pkcs1_v15_sign_5: (+1)
   \       0xB0   0x4628             MOV      R0,R5
   \       0xB2   0x....'....        BL       mbedtls_free
   1820              mbedtls_free( verif );
   \       0xB6   0x4630             MOV      R0,R6
   \       0xB8   0x....'....        BL       mbedtls_free
   1821          
   1822              return( ret );
   \       0xBC   0x4620             MOV      R0,R4
   \                     ??mbedtls_rsa_rsassa_pkcs1_v15_sign_1: (+1)
   \       0xBE   0xE8BD 0x87F6      POP      {R1,R2,R4-R10,PC}  ;; return
   1823          }
   1824          #endif /* MBEDTLS_PKCS1_V15 */
   1825          
   1826          /*
   1827           * Do an RSA operation to sign the message digest
   1828           */

   \                                 In section .text, align 2, keep-with-next
   1829          int mbedtls_rsa_pkcs1_sign( mbedtls_rsa_context *ctx,
   1830                              int (*f_rng)(void *, unsigned char *, size_t),
   1831                              void *p_rng,
   1832                              int mode,
   1833                              mbedtls_md_type_t md_alg,
   1834                              unsigned int hashlen,
   1835                              const unsigned char *hash,
   1836                              unsigned char *sig )
   1837          {
   \                     mbedtls_rsa_pkcs1_sign: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0xB084             SUB      SP,SP,#+16
   \        0x4   0x9C0A             LDR      R4,[SP, #+40]
   \        0x6   0x9D0B             LDR      R5,[SP, #+44]
   \        0x8   0x9E0C             LDR      R6,[SP, #+48]
   \        0xA   0x9F0D             LDR      R7,[SP, #+52]
   1838              switch( ctx->padding )
   \        0xC   0xF8D0 0xC0A4      LDR      R12,[R0, #+164]
   \       0x10   0xF1BC 0x0F00      CMP      R12,#+0
   \       0x14   0xD003             BEQ.N    ??mbedtls_rsa_pkcs1_sign_0
   \       0x16   0xF1BC 0x0F01      CMP      R12,#+1
   \       0x1A   0xD007             BEQ.N    ??mbedtls_rsa_pkcs1_sign_1
   \       0x1C   0xE00D             B.N      ??mbedtls_rsa_pkcs1_sign_2
   1839              {
   1840          #if defined(MBEDTLS_PKCS1_V15)
   1841                  case MBEDTLS_RSA_PKCS_V15:
   1842                      return mbedtls_rsa_rsassa_pkcs1_v15_sign( ctx, f_rng, p_rng, mode, md_alg,
   1843                                                        hashlen, hash, sig );
   \                     ??mbedtls_rsa_pkcs1_sign_0: (+1)
   \       0x1E   0x9703             STR      R7,[SP, #+12]
   \       0x20   0x9602             STR      R6,[SP, #+8]
   \       0x22   0x9501             STR      R5,[SP, #+4]
   \       0x24   0x9400             STR      R4,[SP, #+0]
   \       0x26   0x....'....        BL       mbedtls_rsa_rsassa_pkcs1_v15_sign
   \       0x2A   0xE008             B.N      ??mbedtls_rsa_pkcs1_sign_3
   1844          #endif
   1845          
   1846          #if defined(MBEDTLS_PKCS1_V21)
   1847                  case MBEDTLS_RSA_PKCS_V21:
   1848                      return mbedtls_rsa_rsassa_pss_sign( ctx, f_rng, p_rng, mode, md_alg,
   1849                                                  hashlen, hash, sig );
   \                     ??mbedtls_rsa_pkcs1_sign_1: (+1)
   \       0x2C   0x9703             STR      R7,[SP, #+12]
   \       0x2E   0x9602             STR      R6,[SP, #+8]
   \       0x30   0x9501             STR      R5,[SP, #+4]
   \       0x32   0x9400             STR      R4,[SP, #+0]
   \       0x34   0x....'....        BL       mbedtls_rsa_rsassa_pss_sign
   \       0x38   0xE001             B.N      ??mbedtls_rsa_pkcs1_sign_3
   1850          #endif
   1851          
   1852                  default:
   1853                      return( MBEDTLS_ERR_RSA_INVALID_PADDING );
   \                     ??mbedtls_rsa_pkcs1_sign_2: (+1)
   \       0x3A   0x....'....        LDR.W    R0,??DataTable26_1  ;; 0xffffbf00
   \                     ??mbedtls_rsa_pkcs1_sign_3: (+1)
   \       0x3E   0xB005             ADD      SP,SP,#+20
   \       0x40   0xBDF0             POP      {R4-R7,PC}       ;; return
   1854              }
   1855          }
   1856          
   1857          #if defined(MBEDTLS_PKCS1_V21)
   1858          /*
   1859           * Implementation of the PKCS#1 v2.1 RSASSA-PSS-VERIFY function
   1860           */

   \                                 In section .text, align 2, keep-with-next
   1861          int mbedtls_rsa_rsassa_pss_verify_ext( mbedtls_rsa_context *ctx,
   1862                                         int (*f_rng)(void *, unsigned char *, size_t),
   1863                                         void *p_rng,
   1864                                         int mode,
   1865                                         mbedtls_md_type_t md_alg,
   1866                                         unsigned int hashlen,
   1867                                         const unsigned char *hash,
   1868                                         mbedtls_md_type_t mgf1_hash_id,
   1869                                         int expected_salt_len,
   1870                                         const unsigned char *sig )
   1871          {
   \                     mbedtls_rsa_rsassa_pss_verify_ext: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \        0x4   0xF5AD 0x7D16      SUB      SP,SP,#+600
   \        0x8   0x4604             MOV      R4,R0
   1872              int ret;
   1873              size_t siglen;
   1874              unsigned char *p;
   1875              unsigned char *hash_start;
   1876              unsigned char result[MBEDTLS_MD_MAX_SIZE];
   1877              unsigned char zeros[8];
   1878              unsigned int hlen;
   1879              size_t observed_salt_len, msb;
   1880              const mbedtls_md_info_t *md_info;
   1881              mbedtls_md_context_t md_ctx;
   1882              unsigned char buf[MBEDTLS_MPI_MAX_SIZE];
   1883          
   1884              if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
   \        0xA   0x2B01             CMP      R3,#+1
   \        0xC   0xD103             BNE.N    ??mbedtls_rsa_rsassa_pss_verify_ext_0
   \        0xE   0xF8D4 0x00A4      LDR      R0,[R4, #+164]
   \       0x12   0x2801             CMP      R0,#+1
   \       0x14   0xD155             BNE.N    ??mbedtls_rsa_rsassa_pss_verify_ext_1
   1885                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   1886          
   1887              siglen = ctx->len;
   \                     ??mbedtls_rsa_rsassa_pss_verify_ext_0: (+1)
   \       0x16   0x6865             LDR      R5,[R4, #+4]
   1888          
   1889              if( siglen < 16 || siglen > sizeof( buf ) )
   \       0x18   0xF1A5 0x0010      SUB      R0,R5,#+16
   \       0x1C   0xF240 0x16F1      MOVW     R6,#+497
   \       0x20   0x42B0             CMP      R0,R6
   \       0x22   0xD24E             BCS.N    ??mbedtls_rsa_rsassa_pss_verify_ext_1
   \       0x24   0x98A5             LDR      R0,[SP, #+660]
   1890                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   1891          
   1892              ret = ( mode == MBEDTLS_RSA_PUBLIC )
   1893                    ? mbedtls_rsa_public(  ctx, sig, buf )
   1894                    : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, buf );
   \       0x26   0x2B00             CMP      R3,#+0
   \       0x28   0xD105             BNE.N    ??mbedtls_rsa_rsassa_pss_verify_ext_2
   \       0x2A   0xAA06             ADD      R2,SP,#+24
   \       0x2C   0x4601             MOV      R1,R0
   \       0x2E   0x4620             MOV      R0,R4
   \       0x30   0x....'....        BL       mbedtls_rsa_public
   \       0x34   0xE005             B.N      ??mbedtls_rsa_rsassa_pss_verify_ext_3
   \                     ??mbedtls_rsa_rsassa_pss_verify_ext_2: (+1)
   \       0x36   0xAB06             ADD      R3,SP,#+24
   \       0x38   0x9300             STR      R3,[SP, #+0]
   \       0x3A   0x4603             MOV      R3,R0
   \       0x3C   0x4620             MOV      R0,R4
   \       0x3E   0x....'....        BL       mbedtls_rsa_private
   1895          
   1896              if( ret != 0 )
   \                     ??mbedtls_rsa_rsassa_pss_verify_ext_3: (+1)
   \       0x42   0x2800             CMP      R0,#+0
   \       0x44   0xF040 0x809C      BNE.W    ??mbedtls_rsa_rsassa_pss_verify_ext_4
   1897                  return( ret );
   1898          
   1899              p = buf;
   \       0x48   0xF10D 0x0818      ADD      R8,SP,#+24
   1900          
   1901              if( buf[siglen - 1] != 0xBC )
   \       0x4C   0xA806             ADD      R0,SP,#+24
   \       0x4E   0x4428             ADD      R0,R0,R5
   \       0x50   0xF810 0x0C01      LDRB     R0,[R0, #-1]
   \       0x54   0x28BC             CMP      R0,#+188
   \       0x56   0xD002             BEQ.N    ??mbedtls_rsa_rsassa_pss_verify_ext_5
   1902                  return( MBEDTLS_ERR_RSA_INVALID_PADDING );
   \       0x58   0x....'....        LDR.W    R0,??DataTable26_1  ;; 0xffffbf00
   \       0x5C   0xE090             B.N      ??mbedtls_rsa_rsassa_pss_verify_ext_4
   \                     ??mbedtls_rsa_rsassa_pss_verify_ext_5: (+1)
   \       0x5E   0x98A0             LDR      R0,[SP, #+640]
   \       0x60   0x9EA1             LDR      R6,[SP, #+644]
   1903          
   1904              if( md_alg != MBEDTLS_MD_NONE )
   \       0x62   0x0001             MOVS     R1,R0
   \       0x64   0xD006             BEQ.N    ??mbedtls_rsa_rsassa_pss_verify_ext_6
   1905              {
   1906                  /* Gather length of hash to sign */
   1907                  md_info = mbedtls_md_info_from_type( md_alg );
   \       0x66   0x....'....        BL       mbedtls_md_info_from_type
   1908                  if( md_info == NULL )
   \       0x6A   0x2800             CMP      R0,#+0
   \       0x6C   0xD029             BEQ.N    ??mbedtls_rsa_rsassa_pss_verify_ext_1
   1909                      return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   1910          
   1911                  hashlen = mbedtls_md_get_size( md_info );
   \       0x6E   0x....'....        BL       mbedtls_md_get_size
   \       0x72   0x4606             MOV      R6,R0
   \                     ??mbedtls_rsa_rsassa_pss_verify_ext_6: (+1)
   \       0x74   0x98A3             LDR      R0,[SP, #+652]
   1912              }
   1913          
   1914              md_info = mbedtls_md_info_from_type( mgf1_hash_id );
   \       0x76   0x....'....        BL       mbedtls_md_info_from_type
   \       0x7A   0x4683             MOV      R11,R0
   1915              if( md_info == NULL )
   \       0x7C   0xF1BB 0x0F00      CMP      R11,#+0
   \       0x80   0xD01F             BEQ.N    ??mbedtls_rsa_rsassa_pss_verify_ext_1
   1916                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   1917          
   1918              hlen = mbedtls_md_get_size( md_info );
   \       0x82   0x....'....        BL       mbedtls_md_get_size
   \       0x86   0x4607             MOV      R7,R0
   1919          
   1920              memset( zeros, 0, 8 );
   \       0x88   0x2200             MOVS     R2,#+0
   \       0x8A   0x2108             MOVS     R1,#+8
   \       0x8C   0xA804             ADD      R0,SP,#+16
   \       0x8E   0x....'....        BL       __aeabi_memset4
   1921          
   1922              /*
   1923               * Note: EMSA-PSS verification is over the length of N - 1 bits
   1924               */
   1925              msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
   \       0x92   0xF104 0x0008      ADD      R0,R4,#+8
   \       0x96   0x....'....        BL       mbedtls_mpi_bitlen
   \       0x9A   0x4682             MOV      R10,R0
   \       0x9C   0xF1AA 0x0A01      SUB      R10,R10,#+1
   1926          
   1927              if( buf[0] >> ( 8 - siglen * 8 + msb ) )
   \       0xA0   0xF89D 0x0018      LDRB     R0,[SP, #+24]
   \       0xA4   0x00E9             LSLS     R1,R5,#+3
   \       0xA6   0xF1C1 0x0108      RSB      R1,R1,#+8
   \       0xAA   0x4451             ADD      R1,R10,R1
   \       0xAC   0x4108             ASRS     R0,R0,R1
   \       0xAE   0xD108             BNE.N    ??mbedtls_rsa_rsassa_pss_verify_ext_1
   1928                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   1929          
   1930              /* Compensate for boundary condition when applying mask */
   1931              if( msb % 8 == 0 )
   \       0xB0   0xF01A 0x0F07      TST      R10,#0x7
   \       0xB4   0xD102             BNE.N    ??mbedtls_rsa_rsassa_pss_verify_ext_7
   1932              {
   1933                  p++;
   \       0xB6   0xF108 0x0801      ADD      R8,R8,#+1
   1934                  siglen -= 1;
   \       0xBA   0x1E6D             SUBS     R5,R5,#+1
   1935              }
   1936          
   1937              if( siglen < hlen + 2 )
   \                     ??mbedtls_rsa_rsassa_pss_verify_ext_7: (+1)
   \       0xBC   0x1CB8             ADDS     R0,R7,#+2
   \       0xBE   0x4285             CMP      R5,R0
   \       0xC0   0xD202             BCS.N    ??mbedtls_rsa_rsassa_pss_verify_ext_8
   1938                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   \                     ??mbedtls_rsa_rsassa_pss_verify_ext_1: (+1)
   \       0xC2   0x....'....        LDR.W    R0,??DataTable26_3  ;; 0xffffbf80
   \       0xC6   0xE05B             B.N      ??mbedtls_rsa_rsassa_pss_verify_ext_4
   1939              hash_start = p + siglen - hlen - 1;
   \                     ??mbedtls_rsa_rsassa_pss_verify_ext_8: (+1)
   \       0xC8   0xEB08 0x0005      ADD      R0,R8,R5
   \       0xCC   0x4279             RSBS     R1,R7,#+0
   \       0xCE   0x4408             ADD      R0,R0,R1
   \       0xD0   0xF1A0 0x0901      SUB      R9,R0,#+1
   1940          
   1941              mbedtls_md_init( &md_ctx );
   \       0xD4   0xA801             ADD      R0,SP,#+4
   \       0xD6   0x....'....        BL       mbedtls_md_init
   1942              if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
   \       0xDA   0x2200             MOVS     R2,#+0
   \       0xDC   0x4659             MOV      R1,R11
   \       0xDE   0xA801             ADD      R0,SP,#+4
   \       0xE0   0x....'....        BL       mbedtls_md_setup
   \       0xE4   0x0004             MOVS     R4,R0
   \       0xE6   0xD147             BNE.N    ??mbedtls_rsa_rsassa_pss_verify_ext_9
   1943                  goto exit;
   1944          
   1945              ret = mgf_mask( p, siglen - hlen - 1, hash_start, hlen, &md_ctx );
   \       0xE8   0xA801             ADD      R0,SP,#+4
   \       0xEA   0x9000             STR      R0,[SP, #+0]
   \       0xEC   0x463B             MOV      R3,R7
   \       0xEE   0x464A             MOV      R2,R9
   \       0xF0   0x1BE9             SUBS     R1,R5,R7
   \       0xF2   0x1E49             SUBS     R1,R1,#+1
   \       0xF4   0x4640             MOV      R0,R8
   \       0xF6   0x....'....        BL       mgf_mask
   \       0xFA   0x0004             MOVS     R4,R0
   1946              if( ret != 0 )
   \       0xFC   0xD13C             BNE.N    ??mbedtls_rsa_rsassa_pss_verify_ext_9
   1947                  goto exit;
   1948          
   1949              buf[0] &= 0xFF >> ( siglen * 8 - msb );
   \       0xFE   0xF89D 0x0018      LDRB     R0,[SP, #+24]
   \      0x102   0x21FF             MOVS     R1,#+255
   \      0x104   0xEBCA 0x0AC5      RSB      R10,R10,R5, LSL #+3
   \      0x108   0xFA41 0xF10A      ASR      R1,R1,R10
   \      0x10C   0x4008             ANDS     R0,R1,R0
   \      0x10E   0xF88D 0x0018      STRB     R0,[SP, #+24]
   \      0x112   0x4645             MOV      R5,R8
   \      0x114   0x46C8             MOV      R8,R9
   1950          
   1951              while( p < hash_start - 1 && *p == 0 )
   \                     ??mbedtls_rsa_rsassa_pss_verify_ext_10: (+1)
   \      0x116   0xF1A8 0x0001      SUB      R0,R8,#+1
   \      0x11A   0x4285             CMP      R5,R0
   \      0x11C   0xD234             BCS.N    ??mbedtls_rsa_rsassa_pss_verify_ext_11
   \      0x11E   0x7828             LDRB     R0,[R5, #+0]
   \      0x120   0x2800             CMP      R0,#+0
   \      0x122   0xD131             BNE.N    ??mbedtls_rsa_rsassa_pss_verify_ext_11
   1952                  p++;
   \      0x124   0x1C6D             ADDS     R5,R5,#+1
   \      0x126   0xE7F6             B.N      ??mbedtls_rsa_rsassa_pss_verify_ext_10
   1953          
   1954              if( *p++ != 0x01 )
   1955              {
   1956                  ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
   1957                  goto exit;
   1958              }
   1959          
   1960              observed_salt_len = hash_start - p;
   1961          
   1962              if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
   1963                  observed_salt_len != (size_t) expected_salt_len )
   1964              {
   1965                  ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
   1966                  goto exit;
   1967              }
   1968          
   1969              /*
   1970               * Generate H = Hash( M' )
   1971               */
   1972              ret = mbedtls_md_starts( &md_ctx );
   \                     ??mbedtls_rsa_rsassa_pss_verify_ext_12: (+1)
   \      0x128   0xA801             ADD      R0,SP,#+4
   \      0x12A   0x....'....        BL       mbedtls_md_starts
   \      0x12E   0x0004             MOVS     R4,R0
   1973              if ( ret != 0 )
   \      0x130   0xD122             BNE.N    ??mbedtls_rsa_rsassa_pss_verify_ext_9
   1974                  goto exit;
   1975              ret = mbedtls_md_update( &md_ctx, zeros, 8 );
   \      0x132   0x2208             MOVS     R2,#+8
   \      0x134   0xA904             ADD      R1,SP,#+16
   \      0x136   0xA801             ADD      R0,SP,#+4
   \      0x138   0x....'....        BL       mbedtls_md_update
   \      0x13C   0x0004             MOVS     R4,R0
   1976              if ( ret != 0 )
   \      0x13E   0xD11B             BNE.N    ??mbedtls_rsa_rsassa_pss_verify_ext_9
   \      0x140   0x99A2             LDR      R1,[SP, #+648]
   1977                  goto exit;
   1978              ret = mbedtls_md_update( &md_ctx, hash, hashlen );
   \      0x142   0x4632             MOV      R2,R6
   \      0x144   0xA801             ADD      R0,SP,#+4
   \      0x146   0x....'....        BL       mbedtls_md_update
   \      0x14A   0x0004             MOVS     R4,R0
   1979              if ( ret != 0 )
   \      0x14C   0xD114             BNE.N    ??mbedtls_rsa_rsassa_pss_verify_ext_9
   1980                  goto exit;
   1981              ret = mbedtls_md_update( &md_ctx, p, observed_salt_len );
   \      0x14E   0x464A             MOV      R2,R9
   \      0x150   0x4629             MOV      R1,R5
   \      0x152   0xA801             ADD      R0,SP,#+4
   \      0x154   0x....'....        BL       mbedtls_md_update
   \      0x158   0x0004             MOVS     R4,R0
   1982              if ( ret != 0 )
   \      0x15A   0xD10D             BNE.N    ??mbedtls_rsa_rsassa_pss_verify_ext_9
   1983                  goto exit;
   1984              ret = mbedtls_md_finish( &md_ctx, result );
   \      0x15C   0xA986             ADD      R1,SP,#+536
   \      0x15E   0xA801             ADD      R0,SP,#+4
   \      0x160   0x....'....        BL       mbedtls_md_finish
   \      0x164   0x0004             MOVS     R4,R0
   1985              if ( ret != 0 )
   \      0x166   0xD107             BNE.N    ??mbedtls_rsa_rsassa_pss_verify_ext_9
   1986                  goto exit;
   1987          
   1988              if( memcmp( hash_start, result, hlen ) != 0 )
   \      0x168   0x463A             MOV      R2,R7
   \      0x16A   0xA986             ADD      R1,SP,#+536
   \      0x16C   0x4640             MOV      R0,R8
   \      0x16E   0x....'....        BL       memcmp
   \      0x172   0x2800             CMP      R0,#+0
   \      0x174   0xD000             BEQ.N    ??mbedtls_rsa_rsassa_pss_verify_ext_9
   1989              {
   1990                  ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
   \      0x176   0x....             LDR.N    R4,??DataTable23  ;; 0xffffbc80
   1991                  goto exit;
   1992              }
   1993          
   1994          exit:
   1995              mbedtls_md_free( &md_ctx );
   \                     ??mbedtls_rsa_rsassa_pss_verify_ext_9: (+1)
   \      0x178   0xA801             ADD      R0,SP,#+4
   \      0x17A   0x....'....        BL       mbedtls_md_free
   1996          
   1997              return( ret );
   \      0x17E   0x4620             MOV      R0,R4
   \                     ??mbedtls_rsa_rsassa_pss_verify_ext_4: (+1)
   \      0x180   0xF50D 0x7D17      ADD      SP,SP,#+604
   \      0x184   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   \                     ??mbedtls_rsa_rsassa_pss_verify_ext_11: (+1)
   \      0x188   0xF815 0x0B01      LDRB     R0,[R5], #+1
   \      0x18C   0x2801             CMP      R0,#+1
   \      0x18E   0xD107             BNE.N    ??mbedtls_rsa_rsassa_pss_verify_ext_13
   \      0x190   0x98A4             LDR      R0,[SP, #+656]
   \      0x192   0xEBA8 0x0905      SUB      R9,R8,R5
   \      0x196   0xF110 0x0F01      CMN      R0,#+1
   \      0x19A   0xD0C5             BEQ.N    ??mbedtls_rsa_rsassa_pss_verify_ext_12
   \      0x19C   0x4581             CMP      R9,R0
   \      0x19E   0xD0C3             BEQ.N    ??mbedtls_rsa_rsassa_pss_verify_ext_12
   \                     ??mbedtls_rsa_rsassa_pss_verify_ext_13: (+1)
   \      0x1A0   0x....'....        LDR.W    R4,??DataTable26_1  ;; 0xffffbf00
   \      0x1A4   0xE7E8             B.N      ??mbedtls_rsa_rsassa_pss_verify_ext_9
   1998          }
   1999          
   2000          /*
   2001           * Simplified PKCS#1 v2.1 RSASSA-PSS-VERIFY function
   2002           */

   \                                 In section .text, align 2, keep-with-next
   2003          int mbedtls_rsa_rsassa_pss_verify( mbedtls_rsa_context *ctx,
   2004                                     int (*f_rng)(void *, unsigned char *, size_t),
   2005                                     void *p_rng,
   2006                                     int mode,
   2007                                     mbedtls_md_type_t md_alg,
   2008                                     unsigned int hashlen,
   2009                                     const unsigned char *hash,
   2010                                     const unsigned char *sig )
   2011          {
   \                     mbedtls_rsa_rsassa_pss_verify: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0xB086             SUB      SP,SP,#+24
   \        0x4   0x9D0C             LDR      R5,[SP, #+48]
   2012              mbedtls_md_type_t mgf1_hash_id = ( ctx->hash_id != MBEDTLS_MD_NONE )
   2013                                       ? (mbedtls_md_type_t) ctx->hash_id
   2014                                       : md_alg;
   \        0x6   0xF8D0 0x40A8      LDR      R4,[R0, #+168]
   \        0xA   0x2C00             CMP      R4,#+0
   \        0xC   0xD001             BEQ.N    ??mbedtls_rsa_rsassa_pss_verify_0
   \        0xE   0x46A4             MOV      R12,R4
   \       0x10   0xE000             B.N      ??mbedtls_rsa_rsassa_pss_verify_1
   \                     ??mbedtls_rsa_rsassa_pss_verify_0: (+1)
   \       0x12   0x46AC             MOV      R12,R5
   \                     ??mbedtls_rsa_rsassa_pss_verify_1: (+1)
   \       0x14   0x9F0F             LDR      R7,[SP, #+60]
   \       0x16   0x9E0E             LDR      R6,[SP, #+56]
   \       0x18   0x9C0D             LDR      R4,[SP, #+52]
   2015          
   2016              return( mbedtls_rsa_rsassa_pss_verify_ext( ctx, f_rng, p_rng, mode,
   2017                                                 md_alg, hashlen, hash,
   2018                                                 mgf1_hash_id, MBEDTLS_RSA_SALT_LEN_ANY,
   2019                                                 sig ) );
   \       0x1A   0x9705             STR      R7,[SP, #+20]
   \       0x1C   0xF04F 0x37FF      MOV      R7,#-1
   \       0x20   0x9704             STR      R7,[SP, #+16]
   \       0x22   0xFA5F 0xFC8C      UXTB     R12,R12
   \       0x26   0xF8CD 0xC00C      STR      R12,[SP, #+12]
   \       0x2A   0x9602             STR      R6,[SP, #+8]
   \       0x2C   0x9401             STR      R4,[SP, #+4]
   \       0x2E   0x9500             STR      R5,[SP, #+0]
   \       0x30   0x....'....        BL       mbedtls_rsa_rsassa_pss_verify_ext
   \       0x34   0xB007             ADD      SP,SP,#+28
   \       0x36   0xBDF0             POP      {R4-R7,PC}       ;; return
   2020          
   2021          }
   2022          #endif /* MBEDTLS_PKCS1_V21 */
   2023          
   2024          #if defined(MBEDTLS_PKCS1_V15)
   2025          /*
   2026           * Implementation of the PKCS#1 v2.1 RSASSA-PKCS1-v1_5-VERIFY function
   2027           */

   \                                 In section .text, align 2, keep-with-next
   2028          int mbedtls_rsa_rsassa_pkcs1_v15_verify( mbedtls_rsa_context *ctx,
   2029                                           int (*f_rng)(void *, unsigned char *, size_t),
   2030                                           void *p_rng,
   2031                                           int mode,
   2032                                           mbedtls_md_type_t md_alg,
   2033                                           unsigned int hashlen,
   2034                                           const unsigned char *hash,
   2035                                           const unsigned char *sig )
   2036          {
   \                     mbedtls_rsa_rsassa_pkcs1_v15_verify: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \        0x4   0x4681             MOV      R9,R0
   \        0x6   0x468A             MOV      R10,R1
   \        0x8   0x4693             MOV      R11,R2
   \        0xA   0x461F             MOV      R7,R3
   2037              int ret = 0;
   2038              const size_t sig_len = ctx->len;
   \        0xC   0xF8D9 0x8004      LDR      R8,[R9, #+4]
   2039              unsigned char *encoded = NULL, *encoded_expected = NULL;
   \       0x10   0x2600             MOVS     R6,#+0
   2040          
   2041              if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
   \       0x12   0x2F01             CMP      R7,#+1
   \       0x14   0xD106             BNE.N    ??mbedtls_rsa_rsassa_pkcs1_v15_verify_0
   \       0x16   0xF8D9 0x00A4      LDR      R0,[R9, #+164]
   \       0x1A   0x2800             CMP      R0,#+0
   \       0x1C   0xD002             BEQ.N    ??mbedtls_rsa_rsassa_pkcs1_v15_verify_0
   2042                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   \       0x1E   0x....'....        LDR.W    R0,??DataTable26_3  ;; 0xffffbf80
   \       0x22   0xE046             B.N      ??mbedtls_rsa_rsassa_pkcs1_v15_verify_1
   2043          
   2044              /*
   2045               * Prepare expected PKCS1 v1.5 encoding of hash.
   2046               */
   2047          
   2048              if( ( encoded          = mbedtls_calloc( 1, sig_len ) ) == NULL ||
   2049                  ( encoded_expected = mbedtls_calloc( 1, sig_len ) ) == NULL )
   \                     ??mbedtls_rsa_rsassa_pkcs1_v15_verify_0: (+1)
   \       0x24   0x4641             MOV      R1,R8
   \       0x26   0x2001             MOVS     R0,#+1
   \       0x28   0x....'....        BL       mbedtls_calloc
   \       0x2C   0x0005             MOVS     R5,R0
   \       0x2E   0xD005             BEQ.N    ??mbedtls_rsa_rsassa_pkcs1_v15_verify_2
   \       0x30   0x4641             MOV      R1,R8
   \       0x32   0x2001             MOVS     R0,#+1
   \       0x34   0x....'....        BL       mbedtls_calloc
   \       0x38   0x0006             MOVS     R6,R0
   \       0x3A   0xD102             BNE.N    ??mbedtls_rsa_rsassa_pkcs1_v15_verify_3
   2050              {
   2051                  ret = MBEDTLS_ERR_MPI_ALLOC_FAILED;
   \                     ??mbedtls_rsa_rsassa_pkcs1_v15_verify_2: (+1)
   \       0x3C   0xF06F 0x040F      MVN      R4,#+15
   2052                  goto cleanup;
   \       0x40   0xE024             B.N      ??mbedtls_rsa_rsassa_pkcs1_v15_verify_4
   2053              }
   \                     ??mbedtls_rsa_rsassa_pkcs1_v15_verify_3: (+1)
   \       0x42   0x9A0C             LDR      R2,[SP, #+48]
   \       0x44   0x990B             LDR      R1,[SP, #+44]
   \       0x46   0x980A             LDR      R0,[SP, #+40]
   2054          
   2055              if( ( ret = rsa_rsassa_pkcs1_v15_encode( md_alg, hashlen, hash, sig_len,
   2056                                                       encoded_expected ) ) != 0 )
   \       0x48   0x9600             STR      R6,[SP, #+0]
   \       0x4A   0x4643             MOV      R3,R8
   \       0x4C   0x....'....        BL       rsa_rsassa_pkcs1_v15_encode
   \       0x50   0x0004             MOVS     R4,R0
   \       0x52   0xD11B             BNE.N    ??mbedtls_rsa_rsassa_pkcs1_v15_verify_4
   \       0x54   0x990D             LDR      R1,[SP, #+52]
   2057                  goto cleanup;
   2058          
   2059              /*
   2060               * Apply RSA primitive to get what should be PKCS1 encoded hash.
   2061               */
   2062          
   2063              ret = ( mode == MBEDTLS_RSA_PUBLIC )
   2064                    ? mbedtls_rsa_public(  ctx, sig, encoded )
   2065                    : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, encoded );
   \       0x56   0x2F00             CMP      R7,#+0
   \       0x58   0xD105             BNE.N    ??mbedtls_rsa_rsassa_pkcs1_v15_verify_5
   \       0x5A   0x462A             MOV      R2,R5
   \       0x5C   0x4648             MOV      R0,R9
   \       0x5E   0x....'....        BL       mbedtls_rsa_public
   \       0x62   0x4604             MOV      R4,R0
   \       0x64   0xE007             B.N      ??mbedtls_rsa_rsassa_pkcs1_v15_verify_6
   \                     ??mbedtls_rsa_rsassa_pkcs1_v15_verify_5: (+1)
   \       0x66   0x465A             MOV      R2,R11
   \       0x68   0x9500             STR      R5,[SP, #+0]
   \       0x6A   0x460B             MOV      R3,R1
   \       0x6C   0x4651             MOV      R1,R10
   \       0x6E   0x4648             MOV      R0,R9
   \       0x70   0x....'....        BL       mbedtls_rsa_private
   \       0x74   0x4604             MOV      R4,R0
   2066              if( ret != 0 )
   \                     ??mbedtls_rsa_rsassa_pkcs1_v15_verify_6: (+1)
   \       0x76   0x2C00             CMP      R4,#+0
   \       0x78   0xD108             BNE.N    ??mbedtls_rsa_rsassa_pkcs1_v15_verify_4
   2067                  goto cleanup;
   2068          
   2069              /*
   2070               * Compare
   2071               */
   2072          
   2073              if( ( ret = mbedtls_safer_memcmp( encoded, encoded_expected,
   2074                                                sig_len ) ) != 0 )
   \       0x7A   0x4642             MOV      R2,R8
   \       0x7C   0x4631             MOV      R1,R6
   \       0x7E   0x4628             MOV      R0,R5
   \       0x80   0x....'....        BL       mbedtls_safer_memcmp
   \       0x84   0x0004             MOVS     R4,R0
   \       0x86   0xD001             BEQ.N    ??mbedtls_rsa_rsassa_pkcs1_v15_verify_4
   2075              {
   2076                  ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
   \       0x88   0x....'....        LDR.W    R4,??DataTable26_5  ;; 0xffffbc80
   2077                  goto cleanup;
   2078              }
   2079          
   2080          cleanup:
   2081          
   2082              if( encoded != NULL )
   \                     ??mbedtls_rsa_rsassa_pkcs1_v15_verify_4: (+1)
   \       0x8C   0x2D00             CMP      R5,#+0
   \       0x8E   0xD006             BEQ.N    ??mbedtls_rsa_rsassa_pkcs1_v15_verify_7
   2083              {
   2084                  mbedtls_platform_zeroize( encoded, sig_len );
   \       0x90   0x4641             MOV      R1,R8
   \       0x92   0x4628             MOV      R0,R5
   \       0x94   0x....'....        BL       mbedtls_platform_zeroize
   2085                  mbedtls_free( encoded );
   \       0x98   0x4628             MOV      R0,R5
   \       0x9A   0x....'....        BL       mbedtls_free
   2086              }
   2087          
   2088              if( encoded_expected != NULL )
   \                     ??mbedtls_rsa_rsassa_pkcs1_v15_verify_7: (+1)
   \       0x9E   0x2E00             CMP      R6,#+0
   \       0xA0   0xD006             BEQ.N    ??mbedtls_rsa_rsassa_pkcs1_v15_verify_8
   2089              {
   2090                  mbedtls_platform_zeroize( encoded_expected, sig_len );
   \       0xA2   0x4641             MOV      R1,R8
   \       0xA4   0x4630             MOV      R0,R6
   \       0xA6   0x....'....        BL       mbedtls_platform_zeroize
   2091                  mbedtls_free( encoded_expected );
   \       0xAA   0x4630             MOV      R0,R6
   \       0xAC   0x....'....        BL       mbedtls_free
   2092              }
   2093          
   2094              return( ret );
   \                     ??mbedtls_rsa_rsassa_pkcs1_v15_verify_8: (+1)
   \       0xB0   0x4620             MOV      R0,R4
   \                     ??mbedtls_rsa_rsassa_pkcs1_v15_verify_1: (+1)
   \       0xB2   0xE8BD 0x8FF2      POP      {R1,R4-R11,PC}   ;; return
   2095          }
   2096          #endif /* MBEDTLS_PKCS1_V15 */
   2097          
   2098          /*
   2099           * Do an RSA operation and check the message digest
   2100           */

   \                                 In section .text, align 2, keep-with-next
   2101          int mbedtls_rsa_pkcs1_verify( mbedtls_rsa_context *ctx,
   2102                                int (*f_rng)(void *, unsigned char *, size_t),
   2103                                void *p_rng,
   2104                                int mode,
   2105                                mbedtls_md_type_t md_alg,
   2106                                unsigned int hashlen,
   2107                                const unsigned char *hash,
   2108                                const unsigned char *sig )
   2109          {
   \                     mbedtls_rsa_pkcs1_verify: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0xB084             SUB      SP,SP,#+16
   \        0x4   0x9C0A             LDR      R4,[SP, #+40]
   \        0x6   0x9D0B             LDR      R5,[SP, #+44]
   \        0x8   0x9E0C             LDR      R6,[SP, #+48]
   \        0xA   0x9F0D             LDR      R7,[SP, #+52]
   2110              switch( ctx->padding )
   \        0xC   0xF8D0 0xC0A4      LDR      R12,[R0, #+164]
   \       0x10   0xF1BC 0x0F00      CMP      R12,#+0
   \       0x14   0xD003             BEQ.N    ??mbedtls_rsa_pkcs1_verify_0
   \       0x16   0xF1BC 0x0F01      CMP      R12,#+1
   \       0x1A   0xD007             BEQ.N    ??mbedtls_rsa_pkcs1_verify_1
   \       0x1C   0xE00D             B.N      ??mbedtls_rsa_pkcs1_verify_2
   2111              {
   2112          #if defined(MBEDTLS_PKCS1_V15)
   2113                  case MBEDTLS_RSA_PKCS_V15:
   2114                      return mbedtls_rsa_rsassa_pkcs1_v15_verify( ctx, f_rng, p_rng, mode, md_alg,
   2115                                                          hashlen, hash, sig );
   \                     ??mbedtls_rsa_pkcs1_verify_0: (+1)
   \       0x1E   0x9703             STR      R7,[SP, #+12]
   \       0x20   0x9602             STR      R6,[SP, #+8]
   \       0x22   0x9501             STR      R5,[SP, #+4]
   \       0x24   0x9400             STR      R4,[SP, #+0]
   \       0x26   0x....'....        BL       mbedtls_rsa_rsassa_pkcs1_v15_verify
   \       0x2A   0xE007             B.N      ??mbedtls_rsa_pkcs1_verify_3
   2116          #endif
   2117          
   2118          #if defined(MBEDTLS_PKCS1_V21)
   2119                  case MBEDTLS_RSA_PKCS_V21:
   2120                      return mbedtls_rsa_rsassa_pss_verify( ctx, f_rng, p_rng, mode, md_alg,
   2121                                                    hashlen, hash, sig );
   \                     ??mbedtls_rsa_pkcs1_verify_1: (+1)
   \       0x2C   0x9703             STR      R7,[SP, #+12]
   \       0x2E   0x9602             STR      R6,[SP, #+8]
   \       0x30   0x9501             STR      R5,[SP, #+4]
   \       0x32   0x9400             STR      R4,[SP, #+0]
   \       0x34   0x....'....        BL       mbedtls_rsa_rsassa_pss_verify
   \       0x38   0xE000             B.N      ??mbedtls_rsa_pkcs1_verify_3
   2122          #endif
   2123          
   2124                  default:
   2125                      return( MBEDTLS_ERR_RSA_INVALID_PADDING );
   \                     ??mbedtls_rsa_pkcs1_verify_2: (+1)
   \       0x3A   0x....             LDR.N    R0,??DataTable26_1  ;; 0xffffbf00
   \                     ??mbedtls_rsa_pkcs1_verify_3: (+1)
   \       0x3C   0xB005             ADD      SP,SP,#+20
   \       0x3E   0xBDF0             POP      {R4-R7,PC}       ;; return
   2126              }
   2127          }
   2128          
   2129          /*
   2130           * Copy the components of an RSA key
   2131           */

   \                                 In section .text, align 2, keep-with-next
   2132          int mbedtls_rsa_copy( mbedtls_rsa_context *dst, const mbedtls_rsa_context *src )
   2133          {
   \                     mbedtls_rsa_copy: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4605             MOV      R5,R0
   \        0x4   0x460E             MOV      R6,R1
   2134              int ret;
   2135          
   2136              dst->ver = src->ver;
   \        0x6   0x6830             LDR      R0,[R6, #+0]
   \        0x8   0x6028             STR      R0,[R5, #+0]
   2137              dst->len = src->len;
   \        0xA   0x6870             LDR      R0,[R6, #+4]
   \        0xC   0x6068             STR      R0,[R5, #+4]
   2138          
   2139              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &dst->N, &src->N ) );
   \        0xE   0xF106 0x0108      ADD      R1,R6,#+8
   \       0x12   0xF105 0x0008      ADD      R0,R5,#+8
   \       0x16   0x....'....        BL       mbedtls_mpi_copy
   \       0x1A   0x0004             MOVS     R4,R0
   \       0x1C   0xD167             BNE.N    ??mbedtls_rsa_copy_0
   2140              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &dst->E, &src->E ) );
   \       0x1E   0xF106 0x0114      ADD      R1,R6,#+20
   \       0x22   0xF105 0x0014      ADD      R0,R5,#+20
   \       0x26   0x....'....        BL       mbedtls_mpi_copy
   \       0x2A   0x0004             MOVS     R4,R0
   \       0x2C   0xD15F             BNE.N    ??mbedtls_rsa_copy_0
   2141          
   2142              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &dst->D, &src->D ) );
   \       0x2E   0xF106 0x0120      ADD      R1,R6,#+32
   \       0x32   0xF105 0x0020      ADD      R0,R5,#+32
   \       0x36   0x....'....        BL       mbedtls_mpi_copy
   \       0x3A   0x0004             MOVS     R4,R0
   \       0x3C   0xD157             BNE.N    ??mbedtls_rsa_copy_0
   2143              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &dst->P, &src->P ) );
   \       0x3E   0xF106 0x012C      ADD      R1,R6,#+44
   \       0x42   0xF105 0x002C      ADD      R0,R5,#+44
   \       0x46   0x....'....        BL       mbedtls_mpi_copy
   \       0x4A   0x0004             MOVS     R4,R0
   \       0x4C   0xD14F             BNE.N    ??mbedtls_rsa_copy_0
   2144              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &dst->Q, &src->Q ) );
   \       0x4E   0xF106 0x0138      ADD      R1,R6,#+56
   \       0x52   0xF105 0x0038      ADD      R0,R5,#+56
   \       0x56   0x....'....        BL       mbedtls_mpi_copy
   \       0x5A   0x0004             MOVS     R4,R0
   \       0x5C   0xD147             BNE.N    ??mbedtls_rsa_copy_0
   2145          
   2146          #if !defined(MBEDTLS_RSA_NO_CRT)
   2147              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &dst->DP, &src->DP ) );
   \       0x5E   0xF106 0x0144      ADD      R1,R6,#+68
   \       0x62   0xF105 0x0044      ADD      R0,R5,#+68
   \       0x66   0x....'....        BL       mbedtls_mpi_copy
   \       0x6A   0x0004             MOVS     R4,R0
   \       0x6C   0xD13F             BNE.N    ??mbedtls_rsa_copy_0
   2148              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &dst->DQ, &src->DQ ) );
   \       0x6E   0xF106 0x0150      ADD      R1,R6,#+80
   \       0x72   0xF105 0x0050      ADD      R0,R5,#+80
   \       0x76   0x....'....        BL       mbedtls_mpi_copy
   \       0x7A   0x0004             MOVS     R4,R0
   \       0x7C   0xD137             BNE.N    ??mbedtls_rsa_copy_0
   2149              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &dst->QP, &src->QP ) );
   \       0x7E   0xF106 0x015C      ADD      R1,R6,#+92
   \       0x82   0xF105 0x005C      ADD      R0,R5,#+92
   \       0x86   0x....'....        BL       mbedtls_mpi_copy
   \       0x8A   0x0004             MOVS     R4,R0
   \       0x8C   0xD12F             BNE.N    ??mbedtls_rsa_copy_0
   2150              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &dst->RP, &src->RP ) );
   \       0x8E   0xF106 0x0174      ADD      R1,R6,#+116
   \       0x92   0xF105 0x0074      ADD      R0,R5,#+116
   \       0x96   0x....'....        BL       mbedtls_mpi_copy
   \       0x9A   0x0004             MOVS     R4,R0
   \       0x9C   0xD127             BNE.N    ??mbedtls_rsa_copy_0
   2151              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &dst->RQ, &src->RQ ) );
   \       0x9E   0xF106 0x0180      ADD      R1,R6,#+128
   \       0xA2   0xF105 0x0080      ADD      R0,R5,#+128
   \       0xA6   0x....'....        BL       mbedtls_mpi_copy
   \       0xAA   0x0004             MOVS     R4,R0
   \       0xAC   0xD11F             BNE.N    ??mbedtls_rsa_copy_0
   2152          #endif
   2153          
   2154              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &dst->RN, &src->RN ) );
   \       0xAE   0xF106 0x0168      ADD      R1,R6,#+104
   \       0xB2   0xF105 0x0068      ADD      R0,R5,#+104
   \       0xB6   0x....'....        BL       mbedtls_mpi_copy
   \       0xBA   0x0004             MOVS     R4,R0
   \       0xBC   0xD117             BNE.N    ??mbedtls_rsa_copy_0
   2155          
   2156              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &dst->Vi, &src->Vi ) );
   \       0xBE   0xF106 0x018C      ADD      R1,R6,#+140
   \       0xC2   0xF105 0x008C      ADD      R0,R5,#+140
   \       0xC6   0x....'....        BL       mbedtls_mpi_copy
   \       0xCA   0x0004             MOVS     R4,R0
   \       0xCC   0xD10F             BNE.N    ??mbedtls_rsa_copy_0
   2157              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &dst->Vf, &src->Vf ) );
   \       0xCE   0xF106 0x0198      ADD      R1,R6,#+152
   \       0xD2   0xF105 0x0098      ADD      R0,R5,#+152
   \       0xD6   0x....'....        BL       mbedtls_mpi_copy
   \       0xDA   0x0004             MOVS     R4,R0
   \       0xDC   0xD107             BNE.N    ??mbedtls_rsa_copy_0
   2158          
   2159              dst->padding = src->padding;
   \       0xDE   0xF8D6 0x00A4      LDR      R0,[R6, #+164]
   \       0xE2   0xF8C5 0x00A4      STR      R0,[R5, #+164]
   2160              dst->hash_id = src->hash_id;
   \       0xE6   0xF8D6 0x00A8      LDR      R0,[R6, #+168]
   \       0xEA   0xF8C5 0x00A8      STR      R0,[R5, #+168]
   2161          
   2162          cleanup:
   2163              if( ret != 0 )
   \                     ??mbedtls_rsa_copy_0: (+1)
   \       0xEE   0x2C00             CMP      R4,#+0
   \       0xF0   0xD002             BEQ.N    ??mbedtls_rsa_copy_1
   2164                  mbedtls_rsa_free( dst );
   \       0xF2   0x4628             MOV      R0,R5
   \       0xF4   0x....'....        BL       mbedtls_rsa_free
   2165          
   2166              return( ret );
   \                     ??mbedtls_rsa_copy_1: (+1)
   \       0xF8   0x4620             MOV      R0,R4
   \       0xFA   0xBD70             POP      {R4-R6,PC}       ;; return
   2167          }
   2168          
   2169          /*
   2170           * Free the components of an RSA key
   2171           */

   \                                 In section .text, align 2, keep-with-next
   2172          void mbedtls_rsa_free( mbedtls_rsa_context *ctx )
   2173          {
   \                     mbedtls_rsa_free: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x4604             MOV      R4,R0
   2174              mbedtls_mpi_free( &ctx->Vi ); mbedtls_mpi_free( &ctx->Vf );
   \        0x4   0xF104 0x008C      ADD      R0,R4,#+140
   \        0x8   0x....'....        BL       mbedtls_mpi_free
   \        0xC   0xF104 0x0098      ADD      R0,R4,#+152
   \       0x10   0x....'....        BL       mbedtls_mpi_free
   2175              mbedtls_mpi_free( &ctx->RN ); mbedtls_mpi_free( &ctx->D  );
   \       0x14   0xF104 0x0068      ADD      R0,R4,#+104
   \       0x18   0x....'....        BL       mbedtls_mpi_free
   \       0x1C   0xF104 0x0020      ADD      R0,R4,#+32
   \       0x20   0x....'....        BL       mbedtls_mpi_free
   2176              mbedtls_mpi_free( &ctx->Q  ); mbedtls_mpi_free( &ctx->P  );
   \       0x24   0xF104 0x0038      ADD      R0,R4,#+56
   \       0x28   0x....'....        BL       mbedtls_mpi_free
   \       0x2C   0xF104 0x002C      ADD      R0,R4,#+44
   \       0x30   0x....'....        BL       mbedtls_mpi_free
   2177              mbedtls_mpi_free( &ctx->E  ); mbedtls_mpi_free( &ctx->N  );
   \       0x34   0xF104 0x0014      ADD      R0,R4,#+20
   \       0x38   0x....'....        BL       mbedtls_mpi_free
   \       0x3C   0xF104 0x0008      ADD      R0,R4,#+8
   \       0x40   0x....'....        BL       mbedtls_mpi_free
   2178          
   2179          #if !defined(MBEDTLS_RSA_NO_CRT)
   2180              mbedtls_mpi_free( &ctx->RQ ); mbedtls_mpi_free( &ctx->RP );
   \       0x44   0xF104 0x0080      ADD      R0,R4,#+128
   \       0x48   0x....'....        BL       mbedtls_mpi_free
   \       0x4C   0xF104 0x0074      ADD      R0,R4,#+116
   \       0x50   0x....'....        BL       mbedtls_mpi_free
   2181              mbedtls_mpi_free( &ctx->QP ); mbedtls_mpi_free( &ctx->DQ );
   \       0x54   0xF104 0x005C      ADD      R0,R4,#+92
   \       0x58   0x....'....        BL       mbedtls_mpi_free
   \       0x5C   0xF104 0x0050      ADD      R0,R4,#+80
   \       0x60   0x....'....        BL       mbedtls_mpi_free
   2182              mbedtls_mpi_free( &ctx->DP );
   \       0x64   0xF104 0x0044      ADD      R0,R4,#+68
   \       0x68   0xE8BD 0x4010      POP      {R4,LR}
   \       0x6C   0x....'....        B.W      mbedtls_mpi_free
   2183          #endif /* MBEDTLS_RSA_NO_CRT */
   2184          
   2185          #if defined(MBEDTLS_THREADING_C)
   2186              mbedtls_mutex_free( &ctx->mutex );
   2187          #endif
   2188          }
   2189          
   2190          #endif /* !MBEDTLS_RSA_ALT */
   2191          
   2192          #if defined(MBEDTLS_SELF_TEST)
   2193          
   2194          #include "mbedtls/sha1.h"
   2195          #if 0
   2196          /*
   2197           * Example RSA-1024 keypair, for test purposes
   2198           */
   2199          #define KEY_LEN 128
   2200          
   2201          #define RSA_N   "9292758453063D803DD603D5E777D788" \
   2202                          "8ED1D5BF35786190FA2F23EBC0848AEA" \
   2203                          "DDA92CA6C3D80B32C4D109BE0F36D6AE" \
   2204                          "7130B9CED7ACDF54CFC7555AC14EEBAB" \
   2205                          "93A89813FBF3C4F8066D2D800F7C38A8" \
   2206                          "1AE31942917403FF4946B0A83D3D3E05" \
   2207                          "EE57C6F5F5606FB5D4BC6CD34EE0801A" \
   2208                          "5E94BB77B07507233A0BC7BAC8F90F79"
   2209          
   2210          #define RSA_E   "10001"
   2211          
   2212          #define RSA_D   "24BF6185468786FDD303083D25E64EFC" \
   2213                          "66CA472BC44D253102F8B4A9D3BFA750" \
   2214                          "91386C0077937FE33FA3252D28855837" \
   2215                          "AE1B484A8A9A45F7EE8C0C634F99E8CD" \
   2216                          "DF79C5CE07EE72C7F123142198164234" \
   2217                          "CABB724CF78B8173B9F880FC86322407" \
   2218                          "AF1FEDFDDE2BEB674CA15F3E81A1521E" \
   2219                          "071513A1E85B5DFA031F21ECAE91A34D"
   2220          
   2221          #define RSA_P   "C36D0EB7FCD285223CFB5AABA5BDA3D8" \
   2222                          "2C01CAD19EA484A87EA4377637E75500" \
   2223                          "FCB2005C5C7DD6EC4AC023CDA285D796" \
   2224                          "C3D9E75E1EFC42488BB4F1D13AC30A57"
   2225          
   2226          #define RSA_Q   "C000DF51A7C77AE8D7C7370C1FF55B69" \
   2227                          "E211C2B9E5DB1ED0BF61D0D9899620F4" \
   2228                          "910E4168387E3C30AA1E00C339A79508" \
   2229                          "8452DD96A9A5EA5D9DCA68DA636032AF"
   2230          #endif
   2231          #define PT_LEN  24
   2232          #define RSA_PT  "\xAA\xBB\xCC\x03\x02\x01\x00\xFF\xFF\xFF\xFF\xFF" \
   2233                          "\x11\x22\x33\x0A\x0B\x0C\xCC\xDD\xDD\xDD\xDD\xDD"
   2234          
   2235          #if defined(MBEDTLS_PKCS1_V15)

   \                                 In section .text, align 2, keep-with-next
   2236          static int myrand( void *rng_state, unsigned char *output, size_t len )
   2237          {
   \                     myrand: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x460C             MOV      R4,R1
   \        0x4   0x4615             MOV      R5,R2
   2238          #if !defined(__OpenBSD__)
   2239              size_t i;
   2240          
   2241              if( rng_state != NULL )
   2242                  rng_state  = NULL;
   2243          
   2244              for( i = 0; i < len; ++i )
   \        0x6   0x2600             MOVS     R6,#+0
   \        0x8   0xE003             B.N      ??myrand_0
   2245                  output[i] = rand();
   \                     ??myrand_1: (+1)
   \        0xA   0x....'....        BL       rand
   \        0xE   0x55A0             STRB     R0,[R4, R6]
   \       0x10   0x1C76             ADDS     R6,R6,#+1
   \                     ??myrand_0: (+1)
   \       0x12   0x42AE             CMP      R6,R5
   \       0x14   0xD3F9             BCC.N    ??myrand_1
   2246          #else
   2247              if( rng_state != NULL )
   2248                  rng_state = NULL;
   2249          
   2250              arc4random_buf( output, len );
   2251          #endif /* !OpenBSD */
   2252          
   2253              return( 0 );
   \       0x16   0x2000             MOVS     R0,#+0
   \       0x18   0xBD70             POP      {R4-R6,PC}       ;; return
   2254          }
   2255          #endif /* MBEDTLS_PKCS1_V15 */
   2256          
   2257          /*
   2258           * Checkup routine
   2259           */

   \                                 In section .text, align 2, keep-with-next
   2260          int mbedtls_rsa_self_test( int verbose )
   2261          {
   \                     mbedtls_rsa_self_test: (+1)
   \        0x0   0xB5F0             PUSH     {R4-R7,LR}
   \        0x2   0xB0B9             SUB      SP,SP,#+228
   \        0x4   0x4604             MOV      R4,R0
   2262              int ret = 0;
   2263          #if defined(MBEDTLS_PKCS1_V15)
   2264              size_t len;
   2265              mbedtls_pk_context pk;
   2266              mbedtls_rsa_context *rsa;
   2267              unsigned char rsa_plaintext[PT_LEN];
   2268              unsigned char rsa_decrypted[PT_LEN];
   2269          #if defined(MBEDTLS_SHA1_C)
   2270              unsigned char sha1sum[20];
   2271          #endif
   2272          #if defined(FREESCALE_PKHA_LONG_OPERANDS_ENABLE) \
   2273              || (defined(FREESCALE_PKHA_INT_MAX_BYTES) && (FREESCALE_PKHA_INT_MAX_BYTES >= ((4096 / 8) * 2)))
   2274              unsigned char rsa_ciphertext[4096 / 8];
   2275              const char *rsa_keys[] = { RSA_PRIVATE_KEY_1024, RSA_PRIVATE_KEY_2048, RSA_PRIVATE_KEY_4096 };
   2276          #elif defined(FREESCALE_PKHA_INT_MAX_BYTES) && (FREESCALE_PKHA_INT_MAX_BYTES >= ((2048 / 8) * 2))
   2277              unsigned char rsa_ciphertext[2048 / 8];
   2278              const char *rsa_keys[] = { RSA_PRIVATE_KEY_1024, RSA_PRIVATE_KEY_2048 };
   2279          #else
   2280              unsigned char rsa_ciphertext[1024 / 8];
   2281              const char *rsa_keys[] = { RSA_PRIVATE_KEY_1024 };
   \        0x6   0xA804             ADD      R0,SP,#+16
   \        0x8   0x....             LDR.N    R1,??DataTable26_6
   \        0xA   0x680A             LDR      R2,[R1, #+0]
   \        0xC   0x6002             STR      R2,[R0, #+0]
   2282          #endif
   2283              size_t i;
   2284          
   2285              for (i = 0; i < sizeof(rsa_keys) / sizeof(rsa_keys[0]); i++)
   \        0xE   0x2000             MOVS     R0,#+0
   \       0x10   0x....             LDR.N    R7,??DataTable26_7
   \       0x12   0xE000             B.N      ??mbedtls_rsa_self_test_0
   \                     ??mbedtls_rsa_self_test_1: (+1)
   \       0x14   0x2001             MOVS     R0,#+1
   \                     ??mbedtls_rsa_self_test_0: (+1)
   \       0x16   0x2800             CMP      R0,#+0
   \       0x18   0xF040 0x80AF      BNE.W    ??mbedtls_rsa_self_test_2
   2286              {
   2287                  mbedtls_pk_init(&pk);
   \       0x1C   0xA806             ADD      R0,SP,#+24
   \       0x1E   0x....'....        BL       mbedtls_pk_init
   2288                  
   2289                  if( verbose != 0 )
   \       0x22   0x2C00             CMP      R4,#+0
   \       0x24   0xD003             BEQ.N    ??mbedtls_rsa_self_test_3
   2290                      mbedtls_printf( "  RSA parse key #%d       : ", i + 1 );
   \       0x26   0x2101             MOVS     R1,#+1
   \       0x28   0x....             LDR.N    R0,??DataTable26_8
   \       0x2A   0x....'....        BL       DbgConsole_Printf
   2291          
   2292                  MBEDTLS_MPI_CHK( mbedtls_pk_parse_key(&pk, (const unsigned char *)rsa_keys[i], strlen(rsa_keys[i]) + 1, NULL, 0) );
   \                     ??mbedtls_rsa_self_test_3: (+1)
   \       0x2E   0x9804             LDR      R0,[SP, #+16]
   \       0x30   0x....'....        BL       strlen
   \       0x34   0x4602             MOV      R2,R0
   \       0x36   0x2000             MOVS     R0,#+0
   \       0x38   0x9000             STR      R0,[SP, #+0]
   \       0x3A   0x4603             MOV      R3,R0
   \       0x3C   0x1C52             ADDS     R2,R2,#+1
   \       0x3E   0x9904             LDR      R1,[SP, #+16]
   \       0x40   0xA806             ADD      R0,SP,#+24
   \       0x42   0x....'....        BL       mbedtls_pk_parse_key
   \       0x46   0x0005             MOVS     R5,R0
   \       0x48   0xF040 0x808A      BNE.W    ??mbedtls_rsa_self_test_4
   2293          
   2294                  rsa = mbedtls_pk_rsa(pk);
   \       0x4C   0xE9DD 0x0106      LDRD     R0,R1,[SP, #+24]
   \       0x50   0x....'....        BL       mbedtls_pk_rsa
   \       0x54   0x4606             MOV      R6,R0
   2295          
   2296                  if( verbose != 0 )
   \       0x56   0x2C00             CMP      R4,#+0
   \       0x58   0xD006             BEQ.N    ??mbedtls_rsa_self_test_5
   2297                      mbedtls_printf( "passed\n\r  RSA-%d key validation: ", mbedtls_pk_get_bitlen( &pk ) );
   \       0x5A   0xA806             ADD      R0,SP,#+24
   \       0x5C   0x....'....        BL       mbedtls_pk_get_bitlen
   \       0x60   0x4601             MOV      R1,R0
   \       0x62   0x....             LDR.N    R0,??DataTable26_9
   \       0x64   0x....'....        BL       DbgConsole_Printf
   2298          
   2299                  MBEDTLS_MPI_CHK( mbedtls_rsa_check_pubkey( rsa ) );
   \                     ??mbedtls_rsa_self_test_5: (+1)
   \       0x68   0x4630             MOV      R0,R6
   \       0x6A   0x....'....        BL       mbedtls_rsa_check_pubkey
   \       0x6E   0x0005             MOVS     R5,R0
   \       0x70   0xD176             BNE.N    ??mbedtls_rsa_self_test_4
   2300                  MBEDTLS_MPI_CHK( mbedtls_rsa_check_privkey( rsa ) );
   \       0x72   0x4630             MOV      R0,R6
   \       0x74   0x....'....        BL       mbedtls_rsa_check_privkey
   \       0x78   0x0005             MOVS     R5,R0
   \       0x7A   0xD171             BNE.N    ??mbedtls_rsa_self_test_4
   2301          
   2302                  if( verbose != 0 )
   \       0x7C   0x2C00             CMP      R4,#+0
   \       0x7E   0xD002             BEQ.N    ??mbedtls_rsa_self_test_6
   2303                      mbedtls_printf( "passed\n\r  PKCS#1 encryption      : " );
   \       0x80   0x....             LDR.N    R0,??DataTable26_10
   \       0x82   0x....'....        BL       DbgConsole_Printf
   2304          
   2305                  memcpy( rsa_plaintext, RSA_PT, PT_LEN );
   \                     ??mbedtls_rsa_self_test_6: (+1)
   \       0x86   0x2218             MOVS     R2,#+24
   \       0x88   0x....             LDR.N    R1,??DataTable26_11
   \       0x8A   0xA80D             ADD      R0,SP,#+52
   \       0x8C   0x....'....        BL       __aeabi_memcpy4
   2306          
   2307                  MBEDTLS_MPI_CHK( mbedtls_rsa_pkcs1_encrypt( rsa, myrand, NULL, MBEDTLS_RSA_PUBLIC, PT_LEN,
   2308                                         rsa_plaintext, rsa_ciphertext ) );
   \       0x90   0xA819             ADD      R0,SP,#+100
   \       0x92   0x9002             STR      R0,[SP, #+8]
   \       0x94   0xA80D             ADD      R0,SP,#+52
   \       0x96   0x9001             STR      R0,[SP, #+4]
   \       0x98   0x2018             MOVS     R0,#+24
   \       0x9A   0x9000             STR      R0,[SP, #+0]
   \       0x9C   0x2300             MOVS     R3,#+0
   \       0x9E   0x461A             MOV      R2,R3
   \       0xA0   0x4639             MOV      R1,R7
   \       0xA2   0x4630             MOV      R0,R6
   \       0xA4   0x....'....        BL       mbedtls_rsa_pkcs1_encrypt
   \       0xA8   0x0005             MOVS     R5,R0
   \       0xAA   0xD159             BNE.N    ??mbedtls_rsa_self_test_4
   2309          
   2310                  if( verbose != 0 )
   \       0xAC   0x2C00             CMP      R4,#+0
   \       0xAE   0xD002             BEQ.N    ??mbedtls_rsa_self_test_7
   2311                      mbedtls_printf( "passed\n\r  PKCS#1 decryption      : " );
   \       0xB0   0x....             LDR.N    R0,??DataTable26_12
   \       0xB2   0x....'....        BL       DbgConsole_Printf
   2312          
   2313                  MBEDTLS_MPI_CHK( mbedtls_rsa_pkcs1_decrypt( rsa, myrand, NULL, MBEDTLS_RSA_PRIVATE, &len,
   2314                                         rsa_ciphertext, rsa_decrypted,
   2315                                         sizeof(rsa_decrypted) ) );
   \                     ??mbedtls_rsa_self_test_7: (+1)
   \       0xB6   0x2018             MOVS     R0,#+24
   \       0xB8   0x9003             STR      R0,[SP, #+12]
   \       0xBA   0xA813             ADD      R0,SP,#+76
   \       0xBC   0x9002             STR      R0,[SP, #+8]
   \       0xBE   0xA819             ADD      R0,SP,#+100
   \       0xC0   0x9001             STR      R0,[SP, #+4]
   \       0xC2   0xA805             ADD      R0,SP,#+20
   \       0xC4   0x9000             STR      R0,[SP, #+0]
   \       0xC6   0x2301             MOVS     R3,#+1
   \       0xC8   0x2200             MOVS     R2,#+0
   \       0xCA   0x4639             MOV      R1,R7
   \       0xCC   0x4630             MOV      R0,R6
   \       0xCE   0x....'....        BL       mbedtls_rsa_pkcs1_decrypt
   \       0xD2   0x0005             MOVS     R5,R0
   \       0xD4   0xD144             BNE.N    ??mbedtls_rsa_self_test_4
   2316          
   2317                  MBEDTLS_MPI_CHK( memcmp( rsa_decrypted, rsa_plaintext, len ) );
   \       0xD6   0x9A05             LDR      R2,[SP, #+20]
   \       0xD8   0xA90D             ADD      R1,SP,#+52
   \       0xDA   0xA813             ADD      R0,SP,#+76
   \       0xDC   0x....'....        BL       memcmp
   \       0xE0   0x0005             MOVS     R5,R0
   \       0xE2   0xD13D             BNE.N    ??mbedtls_rsa_self_test_4
   2318          
   2319                  if( verbose != 0 )
   \       0xE4   0x2C00             CMP      R4,#+0
   \       0xE6   0xD002             BEQ.N    ??mbedtls_rsa_self_test_8
   2320                      mbedtls_printf( "passed\n\r" );
   \       0xE8   0x....             LDR.N    R0,??DataTable26_13
   \       0xEA   0x....'....        BL       DbgConsole_Printf
   2321          
   2322              #if defined(MBEDTLS_SHA1_C)
   2323                  if( verbose != 0 )
   \                     ??mbedtls_rsa_self_test_8: (+1)
   \       0xEE   0x2C00             CMP      R4,#+0
   \       0xF0   0xD002             BEQ.N    ??mbedtls_rsa_self_test_9
   2324                      mbedtls_printf( "  PKCS#1 data sign       : " );
   \       0xF2   0x....             LDR.N    R0,??DataTable26_14
   \       0xF4   0x....'....        BL       DbgConsole_Printf
   2325          
   2326                  mbedtls_sha1( rsa_plaintext, PT_LEN, sha1sum );
   \                     ??mbedtls_rsa_self_test_9: (+1)
   \       0xF8   0xAA08             ADD      R2,SP,#+32
   \       0xFA   0x2118             MOVS     R1,#+24
   \       0xFC   0xA80D             ADD      R0,SP,#+52
   \       0xFE   0x....'....        BL       mbedtls_sha1
   2327          
   2328                  MBEDTLS_MPI_CHK( mbedtls_rsa_pkcs1_sign( rsa, myrand, NULL, MBEDTLS_RSA_PRIVATE, MBEDTLS_MD_SHA1, 0,
   2329                                      sha1sum, rsa_ciphertext ) );
   \      0x102   0xA819             ADD      R0,SP,#+100
   \      0x104   0x9003             STR      R0,[SP, #+12]
   \      0x106   0xA808             ADD      R0,SP,#+32
   \      0x108   0x9002             STR      R0,[SP, #+8]
   \      0x10A   0x2000             MOVS     R0,#+0
   \      0x10C   0x9001             STR      R0,[SP, #+4]
   \      0x10E   0x2004             MOVS     R0,#+4
   \      0x110   0x9000             STR      R0,[SP, #+0]
   \      0x112   0x2301             MOVS     R3,#+1
   \      0x114   0x2200             MOVS     R2,#+0
   \      0x116   0x4639             MOV      R1,R7
   \      0x118   0x4630             MOV      R0,R6
   \      0x11A   0x....'....        BL       mbedtls_rsa_pkcs1_sign
   \      0x11E   0x0005             MOVS     R5,R0
   \      0x120   0xD11E             BNE.N    ??mbedtls_rsa_self_test_4
   2330          
   2331                  if( verbose != 0 )
   \      0x122   0x2C00             CMP      R4,#+0
   \      0x124   0xD002             BEQ.N    ??mbedtls_rsa_self_test_10
   2332                      mbedtls_printf( "passed\n\r  PKCS#1 sig. verify     : " );
   \      0x126   0x....             LDR.N    R0,??DataTable26_15
   \      0x128   0x....'....        BL       DbgConsole_Printf
   2333          
   2334                  MBEDTLS_MPI_CHK( mbedtls_rsa_pkcs1_verify( rsa, NULL, NULL, MBEDTLS_RSA_PUBLIC, MBEDTLS_MD_SHA1, 0,
   2335                                        sha1sum, rsa_ciphertext ) );
   \                     ??mbedtls_rsa_self_test_10: (+1)
   \      0x12C   0xA819             ADD      R0,SP,#+100
   \      0x12E   0x9003             STR      R0,[SP, #+12]
   \      0x130   0xA808             ADD      R0,SP,#+32
   \      0x132   0x9002             STR      R0,[SP, #+8]
   \      0x134   0x2000             MOVS     R0,#+0
   \      0x136   0x9001             STR      R0,[SP, #+4]
   \      0x138   0x2004             MOVS     R0,#+4
   \      0x13A   0x9000             STR      R0,[SP, #+0]
   \      0x13C   0x2300             MOVS     R3,#+0
   \      0x13E   0x461A             MOV      R2,R3
   \      0x140   0x4611             MOV      R1,R2
   \      0x142   0x4630             MOV      R0,R6
   \      0x144   0x....'....        BL       mbedtls_rsa_pkcs1_verify
   \      0x148   0x0005             MOVS     R5,R0
   \      0x14A   0xD109             BNE.N    ??mbedtls_rsa_self_test_4
   2336          
   2337                  if( verbose != 0 )
   \      0x14C   0x2C00             CMP      R4,#+0
   \      0x14E   0xD002             BEQ.N    ??mbedtls_rsa_self_test_11
   2338                      mbedtls_printf( "passed\n\r" );
   \      0x150   0x....             LDR.N    R0,??DataTable26_13
   \      0x152   0x....'....        BL       DbgConsole_Printf
   2339              #endif /* MBEDTLS_SHA1_C */
   2340          
   2341                  if( verbose != 0 )
   \                     ??mbedtls_rsa_self_test_11: (+1)
   \      0x156   0x2C00             CMP      R4,#+0
   \      0x158   0xD002             BEQ.N    ??mbedtls_rsa_self_test_4
   2342                      mbedtls_printf( "\n\r" );
   \      0x15A   0x....             ADR.N    R0,??DataTable26_2  ;; 0x0A, 0x0D, 0x00, 0x00
   \      0x15C   0x....'....        BL       DbgConsole_Printf
   2343          
   2344              cleanup:
   2345                  mbedtls_pk_free( &pk );
   \                     ??mbedtls_rsa_self_test_4: (+1)
   \      0x160   0xA806             ADD      R0,SP,#+24
   \      0x162   0x....'....        BL       mbedtls_pk_free
   2346                  if( ret != 0 )
   \      0x166   0x2D00             CMP      R5,#+0
   \      0x168   0xF43F 0xAF54      BEQ.W    ??mbedtls_rsa_self_test_1
   2347                  {
   2348                      if( verbose != 0 )
   \      0x16C   0x2C00             CMP      R4,#+0
   \      0x16E   0xD002             BEQ.N    ??mbedtls_rsa_self_test_12
   2349                          mbedtls_printf( "failed\n\r" );
   \      0x170   0x....             LDR.N    R0,??DataTable26_16
   \      0x172   0x....'....        BL       DbgConsole_Printf
   2350          
   2351                      return( 1 );
   \                     ??mbedtls_rsa_self_test_12: (+1)
   \      0x176   0x2001             MOVS     R0,#+1
   \      0x178   0xE000             B.N      ??mbedtls_rsa_self_test_13
   2352                  }
   2353              #else /* MBEDTLS_PKCS1_V15 */
   2354                  ((void) verbose);
   2355              #endif /* MBEDTLS_PKCS1_V15 */
   2356              }
   2357              
   2358              return( 0 );
   \                     ??mbedtls_rsa_self_test_2: (+1)
   \      0x17A   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_rsa_self_test_13: (+1)
   \      0x17C   0xB039             ADD      SP,SP,#+228
   \      0x17E   0xBDF0             POP      {R4-R7,PC}       ;; return
   2359          }

   \                                 In section .rodata, align 4
   \                     ?_11:
   \        0x0   0x....'....        DC32 ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \        0x0   0xFFFF'BF80        DC32     0xffffbf80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19:
   \        0x0   0xFFFF'BE00        DC32     0xffffbe00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22:
   \        0x0   0xFFFF'BB80        DC32     0xffffbb80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_1:
   \        0x0   0xFFFF'BF80        DC32     0xffffbf80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23:
   \        0x0   0xFFFF'BC80        DC32     0xffffbc80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25:
   \        0x0   0xFFFF'BF00        DC32     0xffffbf00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26:
   \        0x0   0xFFFF'BC00        DC32     0xffffbc00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_1:
   \        0x0   0xFFFF'BF00        DC32     0xffffbf00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_2:
   \        0x0   0x0A 0x0D          DC8      0x0A, 0x0D, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_3:
   \        0x0   0xFFFF'BF80        DC32     0xffffbf80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_4:
   \        0x0   0xFFFF'BD00        DC32     0xffffbd00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_5:
   \        0x0   0xFFFF'BC80        DC32     0xffffbc80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_6:
   \        0x0   0x....'....        DC32     ?_11

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_7:
   \        0x0   0x....'....        DC32     myrand

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_8:
   \        0x0   0x....'....        DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_9:
   \        0x0   0x....'....        DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_10:
   \        0x0   0x....'....        DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_11:
   \        0x0   0x....'....        DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_12:
   \        0x0   0x....'....        DC32     ?_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_13:
   \        0x0   0x....'....        DC32     ?_6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_14:
   \        0x0   0x....'....        DC32     ?_7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_15:
   \        0x0   0x....'....        DC32     ?_8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_16:
   \        0x0   0x....'....        DC32     ?_10

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x2D 0x2D          DC8 2DH, 2DH, 2DH, 2DH, 2DH, 42H, 45H, 47H
   \              0x2D 0x2D    
   \              0x2D 0x42    
   \              0x45 0x47    
   \        0x8   0x49 0x4E          DC8 49H, 4EH, 20H, 52H, 53H, 41H, 20H, 50H
   \              0x20 0x52    
   \              0x53 0x41    
   \              0x20 0x50    
   \       0x10   0x52 0x49          DC8 52H, 49H, 56H, 41H, 54H, 45H, 20H, 4BH
   \              0x56 0x41    
   \              0x54 0x45    
   \              0x20 0x4B    
   \       0x18   0x45 0x59          DC8 45H, 59H, 2DH, 2DH, 2DH, 2DH, 2DH, 0DH
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x0D    
   \       0x20   0x0A 0x4D          DC8 0AH, 4DH, 49H, 49H, 43H, 57H, 77H, 49H
   \              0x49 0x49    
   \              0x43 0x57    
   \              0x77 0x49    
   \       0x28   0x42 0x41          DC8 42H, 41H, 41H, 4BH, 42H, 67H, 51H, 44H
   \              0x41 0x4B    
   \              0x42 0x67    
   \              0x51 0x44    
   \       0x30   0x41 0x30          DC8 41H, 30H, 55H, 73H, 7AH, 6AH, 52H, 45H
   \              0x55 0x73    
   \              0x7A 0x6A    
   \              0x52 0x45    
   \       0x38   0x6C 0x2B          DC8 6CH, 2BH, 4AH, 6BH, 6CH, 55H, 79H, 65H
   \              0x4A 0x6B    
   \              0x6C 0x55    
   \              0x79 0x65    
   \       0x40   0x76 0x61          DC8 76H, 61H, 4EH, 38H, 66H, 62H, 30H, 47H
   \              0x4E 0x38    
   \              0x66 0x62    
   \              0x30 0x47    
   \       0x48   0x70 0x31          DC8 70H, 31H, 33H, 44H, 7AH, 62H, 34H, 70H
   \              0x33 0x44    
   \              0x7A 0x62    
   \              0x34 0x70    
   \       0x50   0x59 0x33          DC8 59H, 33H, 4DH, 43H, 6FH, 4AH, 4BH, 31H
   \              0x4D 0x43    
   \              0x6F 0x4A    
   \              0x4B 0x31    
   \       0x58   0x35 0x42          DC8 35H, 42H, 57H, 6FH, 65H, 6FH, 55H, 46H
   \              0x57 0x6F    
   \              0x65 0x6F    
   \              0x55 0x46    
   \       0x60   0x41 0x0D          DC8 41H, 0DH, 0AH, 49H, 56H, 76H, 75H, 49H
   \              0x0A 0x49    
   \              0x56 0x76    
   \              0x75 0x49    
   \       0x68   0x30 0x43          DC8 30H, 43H, 38H, 62H, 52H, 6DH, 2FH, 69H
   \              0x38 0x62    
   \              0x52 0x6D    
   \              0x2F 0x69    
   \       0x70   0x31 0x4F          DC8 31H, 4FH, 4FH, 34H, 42H, 4EH, 39H, 74H
   \              0x4F 0x34    
   \              0x42 0x4E    
   \              0x39 0x74    
   \       0x78   0x53 0x52          DC8 53H, 52H, 72H, 52H, 6AH, 57H, 2BH, 53H
   \              0x72 0x52    
   \              0x6A 0x57    
   \              0x2B 0x53    
   \       0x80   0x38 0x39          DC8 38H, 39H, 59H, 62H, 59H, 79H, 31H, 43H
   \              0x59 0x62    
   \              0x59 0x79    
   \              0x31 0x43    
   \       0x88   0x37 0x33          DC8 37H, 33H, 50H, 55H, 67H, 4BH, 5AH, 53H
   \              0x50 0x55    
   \              0x67 0x4B    
   \              0x5A 0x53    
   \       0x90   0x65 0x6A          DC8 65H, 6AH, 6AH, 6EH, 45H, 46H, 41H, 34H
   \              0x6A 0x6E    
   \              0x45 0x46    
   \              0x41 0x34    
   \       0x98   0x63 0x68          DC8 63H, 68H, 63H, 53H, 4FH, 4BH, 4FH, 68H
   \              0x63 0x53    
   \              0x4F 0x4B    
   \              0x4F 0x68    
   \       0xA0   0x5A 0x6C          DC8 5AH, 6CH, 4DH, 0DH, 0AH, 36H, 4BH, 37H
   \              0x4D 0x0D    
   \              0x0A 0x36    
   \              0x4B 0x37    
   \       0xA8   0x2B 0x50          DC8 2BH, 50H, 63H, 72H, 63H, 78H, 2BH, 73H
   \              0x63 0x72    
   \              0x63 0x78    
   \              0x2B 0x73    
   \       0xB0   0x64 0x69          DC8 64H, 69H, 44H, 75H, 31H, 44H, 68H, 65H
   \              0x44 0x75    
   \              0x31 0x44    
   \              0x68 0x65    
   \       0xB8   0x4F 0x44          DC8 4FH, 44H, 4DH, 69H, 53H, 46H, 68H, 6FH
   \              0x4D 0x69    
   \              0x53 0x46    
   \              0x68 0x6F    
   \       0xC0   0x78 0x74          DC8 78H, 74H, 2BH, 48H, 36H, 49H, 55H, 76H
   \              0x2B 0x48    
   \              0x36 0x49    
   \              0x55 0x76    
   \       0xC8   0x42 0x45          DC8 42H, 45H, 47H, 6BH, 49H, 35H, 41H, 57H
   \              0x47 0x6B    
   \              0x49 0x35    
   \              0x41 0x57    
   \       0xD0   0x46 0x75          DC8 46H, 75H, 35H, 4DH, 44H, 50H, 37H, 77H
   \              0x35 0x4D    
   \              0x44 0x50    
   \              0x37 0x77    
   \       0xD8   0x6C 0x55          DC8 6CH, 55H, 2FH, 41H, 5AH, 66H, 51H, 49H
   \              0x2F 0x41    
   \              0x5A 0x66    
   \              0x51 0x49    
   \       0xE0   0x44 0x41          DC8 44H, 41H, 51H, 41H, 42H, 0DH, 0AH, 41H
   \              0x51 0x41    
   \              0x42 0x0D    
   \              0x0A 0x41    
   \       0xE8   0x6F 0x47          DC8 6FH, 47H, 41H, 55H, 36H, 6FH, 39H, 48H
   \              0x41 0x55    
   \              0x36 0x6F    
   \              0x39 0x48    
   \       0xF0   0x45 0x68          DC8 45H, 68H, 49H, 75H, 5AH, 59H, 75H, 4EH
   \              0x49 0x75    
   \              0x5A 0x59    
   \              0x75 0x4E    
   \       0xF8   0x5A 0x44          DC8 5AH, 44H, 6FH, 64H, 6DH, 64H, 6CH, 38H
   \              0x6F 0x64    
   \              0x6D 0x64    
   \              0x6C 0x38    
   \      0x100   0x59 0x6A          DC8 59H, 6AH, 67H, 45H, 43H, 64H, 49H, 66H
   \              0x67 0x45    
   \              0x43 0x64    
   \              0x49 0x66    
   \      0x108   0x6F 0x6A          DC8 6FH, 6AH, 57H, 6DH, 67H, 70H, 6EH, 6DH
   \              0x57 0x6D    
   \              0x67 0x70    
   \              0x6E 0x6D    
   \      0x110   0x6B 0x34          DC8 6BH, 34H, 58H, 36H, 35H, 78H, 61H, 32H
   \              0x58 0x36    
   \              0x35 0x78    
   \              0x61 0x32    
   \      0x118   0x4B 0x47          DC8 4BH, 47H, 56H, 34H, 35H, 4CH, 57H, 42H
   \              0x56 0x34    
   \              0x35 0x4C    
   \              0x57 0x42    
   \      0x120   0x66 0x58          DC8 66H, 58H, 4DH, 41H, 44H, 62H, 43H, 0DH
   \              0x4D 0x41    
   \              0x44 0x62    
   \              0x43 0x0D    
   \      0x128   0x0A 0x35          DC8 0AH, 35H, 6DH, 63H, 35H, 51H, 5AH, 53H
   \              0x6D 0x63    
   \              0x35 0x51    
   \              0x5A 0x53    
   \      0x130   0x66 0x51          DC8 66H, 51H, 48H, 75H, 61H, 4BH, 75H, 59H
   \              0x48 0x75    
   \              0x61 0x4B    
   \              0x75 0x59    
   \      0x138   0x54 0x4B          DC8 54H, 4BH, 64H, 68H, 52H, 52H, 77H, 68H
   \              0x64 0x68    
   \              0x52 0x52    
   \              0x77 0x68    
   \      0x140   0x35 0x39          DC8 35H, 39H, 63H, 39H, 56H, 50H, 77H, 59H
   \              0x63 0x39    
   \              0x56 0x50    
   \              0x77 0x59    
   \      0x148   0x68 0x4E          DC8 68H, 4EH, 38H, 68H, 64H, 67H, 46H, 7AH
   \              0x38 0x68    
   \              0x64 0x67    
   \              0x46 0x7A    
   \      0x150   0x62 0x4A          DC8 62H, 4AH, 53H, 39H, 4BH, 66H, 4AH, 54H
   \              0x53 0x39    
   \              0x4B 0x66    
   \              0x4A 0x54    
   \      0x158   0x44 0x75          DC8 44H, 75H, 4BH, 68H, 73H, 5AH, 72H, 64H
   \              0x4B 0x68    
   \              0x73 0x5A    
   \              0x72 0x64    
   \      0x160   0x6F 0x6D          DC8 6FH, 6DH, 48H, 52H, 4EH, 32H, 66H, 48H
   \              0x48 0x52    
   \              0x4E 0x32    
   \              0x66 0x48    
   \      0x168   0x4B 0x0D          DC8 4BH, 0DH, 0AH, 4AH, 6EH, 35H, 4DH, 72H
   \              0x0A 0x4A    
   \              0x6E 0x35    
   \              0x4D 0x72    
   \      0x170   0x62 0x56          DC8 62H, 56H, 43H, 65H, 5AH, 50H, 62H, 59H
   \              0x43 0x65    
   \              0x5A 0x50    
   \              0x62 0x59    
   \      0x178   0x53 0x30          DC8 53H, 30H, 4DH, 31H, 50H, 7AH, 56H, 67H
   \              0x4D 0x31    
   \              0x50 0x7A    
   \              0x56 0x67    
   \      0x180   0x45 0x7A          DC8 45H, 7AH, 2FH, 42H, 47H, 52H, 70H, 34H
   \              0x2F 0x42    
   \              0x47 0x52    
   \              0x70 0x34    
   \      0x188   0x49 0x6B          DC8 49H, 6BH, 33H, 52H, 41H, 78H, 54H, 6CH
   \              0x33 0x52    
   \              0x41 0x78    
   \              0x54 0x6C    
   \      0x190   0x74 0x2B          DC8 74H, 2BH, 58H, 42H, 74H, 75H, 6EH, 48H
   \              0x58 0x42    
   \              0x74 0x75    
   \              0x6E 0x48    
   \      0x198   0x41 0x30          DC8 41H, 30H, 43H, 51H, 51H, 44H, 7AH, 36H
   \              0x43 0x51    
   \              0x51 0x44    
   \              0x7A 0x36    
   \      0x1A0   0x47 0x6F          DC8 47H, 6FH, 72H, 33H, 67H, 46H, 54H, 64H
   \              0x72 0x33    
   \              0x67 0x46    
   \              0x54 0x64    
   \      0x1A8   0x43 0x57          DC8 43H, 57H, 4DH, 0DH, 0AH, 58H, 74H, 72H
   \              0x4D 0x0D    
   \              0x0A 0x58    
   \              0x74 0x72    
   \      0x1B0   0x57 0x45          DC8 57H, 45H, 66H, 4DH, 57H, 2BH, 61H, 72H
   \              0x66 0x4D    
   \              0x57 0x2B    
   \              0x61 0x72    
   \      0x1B8   0x57 0x76          DC8 57H, 76H, 50H, 55H, 42H, 6CH, 4FH, 68H
   \              0x50 0x55    
   \              0x42 0x6C    
   \              0x4F 0x68    
   \      0x1C0   0x77 0x33          DC8 77H, 33H, 55H, 30H, 59H, 67H, 70H, 57H
   \              0x55 0x30    
   \              0x59 0x67    
   \              0x70 0x57    
   \      0x1C8   0x71 0x64          DC8 71H, 64H, 65H, 61H, 33H, 36H, 59H, 65H
   \              0x65 0x61    
   \              0x33 0x36    
   \              0x59 0x65    
   \      0x1D0   0x58 0x64          DC8 58H, 64H, 39H, 44H, 45H, 49H, 49H, 4BH
   \              0x39 0x44    
   \              0x45 0x49    
   \              0x49 0x4B    
   \      0x1D8   0x6E 0x39          DC8 6EH, 39H, 62H, 51H, 55H, 34H, 67H, 30H
   \              0x62 0x51    
   \              0x55 0x34    
   \              0x67 0x30    
   \      0x1E0   0x53 0x6A          DC8 53H, 6AH, 6BH, 70H, 4FH, 37H, 6AH, 64H
   \              0x6B 0x70    
   \              0x4F 0x37    
   \              0x6A 0x64    
   \      0x1E8   0x2F 0x63          DC8 2FH, 63H, 63H, 42H, 6DH, 0DH, 0AH, 7AH
   \              0x63 0x42    
   \              0x6D 0x0D    
   \              0x0A 0x7A    
   \      0x1F0   0x4D 0x38          DC8 4DH, 38H, 39H, 64H, 66H, 6AH, 58H, 41H
   \              0x39 0x64    
   \              0x66 0x6A    
   \              0x58 0x41    
   \      0x1F8   0x6B 0x45          DC8 6BH, 45H, 41H, 79H, 6DH, 42H, 31H, 31H
   \              0x41 0x79    
   \              0x6D 0x42    
   \              0x31 0x31    
   \      0x200   0x67 0x4C          DC8 67H, 4CH, 44H, 64H, 30H, 4AH, 5AH, 68H
   \              0x44 0x64    
   \              0x30 0x4A    
   \              0x5A 0x68    
   \      0x208   0x55 0x43          DC8 55H, 43H, 6BH, 31H, 35H, 35H, 75H, 42H
   \              0x6B 0x31    
   \              0x35 0x35    
   \              0x75 0x42    
   \      0x210   0x75 0x63          DC8 75H, 63H, 61H, 5AH, 65H, 65H, 7AH, 2FH
   \              0x61 0x5A    
   \              0x65 0x65    
   \              0x7A 0x2F    
   \      0x218   0x56 0x4E          DC8 56H, 4EH, 75H, 63H, 45H, 67H, 76H, 6AH
   \              0x75 0x63    
   \              0x45 0x67    
   \              0x76 0x6A    
   \      0x220   0x57 0x44          DC8 57H, 44H, 70H, 68H, 52H, 49H, 6EH, 71H
   \              0x70 0x68    
   \              0x52 0x49    
   \              0x6E 0x71    
   \      0x228   0x4A 0x67          DC8 4AH, 67H, 2BH, 32H, 4AH, 57H, 32H, 0DH
   \              0x2B 0x32    
   \              0x4A 0x57    
   \              0x32 0x0D    
   \      0x230   0x0A 0x67          DC8 0AH, 67H, 53H, 67H, 58H, 4EH, 46H, 65H
   \              0x53 0x67    
   \              0x58 0x4E    
   \              0x46 0x65    
   \      0x238   0x53 0x54          DC8 53H, 54H, 59H, 39H, 69H, 4BH, 6CH, 4CH
   \              0x59 0x39    
   \              0x69 0x4B    
   \              0x6C 0x4C    
   \      0x240   0x64 0x42          DC8 64H, 42H, 4CH, 31H, 7AH, 59H, 64H, 79H
   \              0x4C 0x31    
   \              0x7A 0x59    
   \              0x64 0x79    
   \      0x248   0x77 0x4F          DC8 77H, 4FH, 58H, 4DH, 33H, 66H, 64H, 36H
   \              0x58 0x4D    
   \              0x33 0x66    
   \              0x64 0x36    
   \      0x250   0x52 0x79          DC8 52H, 79H, 77H, 4AH, 41H, 49H, 71H, 46H
   \              0x77 0x4A    
   \              0x41 0x49    
   \              0x71 0x46    
   \      0x258   0x59 0x47          DC8 59H, 47H, 62H, 78H, 65H, 6FH, 64H, 4FH
   \              0x62 0x78    
   \              0x65 0x6F    
   \              0x64 0x4F    
   \      0x260   0x32 0x31          DC8 32H, 31H, 52H, 52H, 4FH, 71H, 2BH, 42H
   \              0x52 0x52    
   \              0x4F 0x71    
   \              0x2B 0x42    
   \      0x268   0x47 0x6A          DC8 47H, 6AH, 48H, 65H, 4DH, 57H, 77H, 72H
   \              0x48 0x65    
   \              0x4D 0x57    
   \              0x77 0x72    
   \      0x270   0x66 0x0D          DC8 66H, 0DH, 0AH, 47H, 6FH, 64H, 69H, 37H
   \              0x0A 0x47    
   \              0x6F 0x64    
   \              0x69 0x37    
   \      0x278   0x55 0x74          DC8 55H, 74H, 75H, 65H, 39H, 46H, 6DH, 6FH
   \              0x75 0x65    
   \              0x39 0x46    
   \              0x6D 0x6F    
   \      0x280   0x4A 0x6F          DC8 4AH, 6FH, 32H, 31H, 4EH, 76H, 79H, 5AH
   \              0x32 0x31    
   \              0x4E 0x76    
   \              0x79 0x5A    
   \      0x288   0x58 0x34          DC8 58H, 34H, 63H, 68H, 51H, 77H, 38H, 6FH
   \              0x63 0x68    
   \              0x51 0x77    
   \              0x38 0x6F    
   \      0x290   0x4D 0x35          DC8 4DH, 35H, 51H, 38H, 44H, 6FH, 63H, 4DH
   \              0x51 0x38    
   \              0x44 0x6F    
   \              0x63 0x4D    
   \      0x298   0x77 0x74          DC8 77H, 74H, 43H, 33H, 36H, 77H, 51H, 38H
   \              0x43 0x33    
   \              0x36 0x77    
   \              0x51 0x38    
   \      0x2A0   0x79 0x5A          DC8 79H, 5AH, 61H, 63H, 2FH, 34H, 57H, 57H
   \              0x61 0x63    
   \              0x2F 0x34    
   \              0x57 0x57    
   \      0x2A8   0x70 0x71          DC8 70H, 71H, 61H, 5AH, 77H, 4AH, 41H, 62H
   \              0x61 0x5A    
   \              0x77 0x4A    
   \              0x41 0x62    
   \      0x2B0   0x4D 0x49          DC8 4DH, 49H, 79H, 0DH, 0AH, 45H, 58H, 55H
   \              0x79 0x0D    
   \              0x0A 0x45    
   \              0x58 0x55    
   \      0x2B8   0x69 0x76          DC8 69H, 76H, 72H, 43H, 31H, 6BH, 31H, 73H
   \              0x72 0x43    
   \              0x31 0x6B    
   \              0x31 0x73    
   \      0x2C0   0x4F 0x4F          DC8 4FH, 4FH, 36H, 49H, 30H, 31H, 78H, 6AH
   \              0x36 0x49    
   \              0x30 0x31    
   \              0x78 0x6A    
   \      0x2C8   0x54 0x6F          DC8 54H, 6FH, 76H, 68H, 47H, 54H, 6CH, 6EH
   \              0x76 0x68    
   \              0x47 0x54    
   \              0x6C 0x6E    
   \      0x2D0   0x4C 0x2F          DC8 4CH, 2FH, 43H, 4FH, 50H, 43H, 70H, 65H
   \              0x43 0x4F    
   \              0x50 0x43    
   \              0x70 0x65    
   \      0x2D8   0x4F 0x5A          DC8 4FH, 5AH, 36H, 6BH, 2BH, 44H, 75H, 6AH
   \              0x36 0x6B    
   \              0x2B 0x44    
   \              0x75 0x6A    
   \      0x2E0   0x69 0x76          DC8 69H, 76H, 56H, 71H, 58H, 33H, 67H, 6CH
   \              0x56 0x71    
   \              0x58 0x33    
   \              0x67 0x6C    
   \      0x2E8   0x42 0x6A          DC8 42H, 6AH, 79H, 75H, 51H, 77H, 49H, 58H
   \              0x79 0x75    
   \              0x51 0x77    
   \              0x49 0x58    
   \      0x2F0   0x52 0x35          DC8 52H, 35H, 35H, 54H, 6FH, 0DH, 0AH, 6DH
   \              0x35 0x54    
   \              0x6F 0x0D    
   \              0x0A 0x6D    
   \      0x2F8   0x6D 0x65          DC8 6DH, 65H, 46H, 33H, 6FH, 33H, 50H, 56H
   \              0x46 0x33    
   \              0x6F 0x33    
   \              0x50 0x56    
   \      0x300   0x74 0x43          DC8 74H, 43H, 49H, 66H, 65H, 68H, 69H, 79H
   \              0x49 0x66    
   \              0x65 0x68    
   \              0x69 0x79    
   \      0x308   0x51 0x4A          DC8 51H, 4AH, 41H, 54H, 73H, 79H, 52H, 50H
   \              0x41 0x54    
   \              0x73 0x79    
   \              0x52 0x50    
   \      0x310   0x4A 0x31          DC8 4AH, 31H, 46H, 4FH, 59H, 49H, 6CH, 49H
   \              0x46 0x4F    
   \              0x59 0x49    
   \              0x6C 0x49    
   \      0x318   0x79 0x77          DC8 79H, 77H, 4DH, 53H, 61H, 47H, 48H, 71H
   \              0x4D 0x53    
   \              0x61 0x47    
   \              0x48 0x71    
   \      0x320   0x53 0x70          DC8 53H, 70H, 56H, 6FH, 65H, 62H, 57H, 62H
   \              0x56 0x6F    
   \              0x65 0x62    
   \              0x57 0x62    
   \      0x328   0x44 0x51          DC8 44H, 51H, 36H, 42H, 68H, 59H, 4FH, 4FH
   \              0x36 0x42    
   \              0x68 0x59    
   \              0x4F 0x4F    
   \      0x330   0x76 0x6D          DC8 76H, 6DH, 78H, 35H, 2FH, 5AH, 64H, 0DH
   \              0x78 0x35    
   \              0x2F 0x5A    
   \              0x64 0x0D    
   \      0x338   0x0A 0x54          DC8 0AH, 54H, 75H, 6EH, 31H, 2BH, 37H, 57H
   \              0x75 0x6E    
   \              0x31 0x2B    
   \              0x37 0x57    
   \      0x340   0x72 0x74          DC8 72H, 74H, 50H, 6FH, 78H, 4DH, 2BH, 4CH
   \              0x50 0x6F    
   \              0x78 0x4D    
   \              0x2B 0x4C    
   \      0x348   0x51 0x75          DC8 51H, 75H, 6DH, 67H, 50H, 45H, 64H, 78H
   \              0x6D 0x67    
   \              0x50 0x45    
   \              0x64 0x78    
   \      0x350   0x37 0x56          DC8 37H, 56H, 44H, 71H, 32H, 4CH, 34H, 53H
   \              0x44 0x71    
   \              0x32 0x4C    
   \              0x34 0x53    
   \      0x358   0x65 0x74          DC8 65H, 74H, 59H, 42H, 2FH, 4DH, 64H, 31H
   \              0x59 0x42    
   \              0x2F 0x4D    
   \              0x64 0x31    
   \      0x360   0x4F 0x53          DC8 4FH, 53H, 51H, 3DH, 3DH, 0DH, 0AH, 2DH
   \              0x51 0x3D    
   \              0x3D 0x0D    
   \              0x0A 0x2D    
   \      0x368   0x2D 0x2D          DC8 2DH, 2DH, 2DH, 2DH, 45H, 4EH, 44H, 20H
   \              0x2D 0x2D    
   \              0x45 0x4E    
   \              0x44 0x20    
   \      0x370   0x52 0x53          DC8 52H, 53H, 41H, 20H, 50H, 52H, 49H, 56H
   \              0x41 0x20    
   \              0x50 0x52    
   \              0x49 0x56    
   \      0x378   0x41 0x54          DC8 41H, 54H, 45H, 20H, 4BH, 45H, 59H, 2DH
   \              0x45 0x20    
   \              0x4B 0x45    
   \              0x59 0x2D    
   \      0x380   0x2D 0x2D          DC8 2DH, 2DH, 2DH, 2DH, 0DH, 0AH, 0
   \              0x2D 0x2D    
   \              0x0D 0x0A    
   \              0x00         
   \      0x387   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_1:
   \        0x0   0x20 0x20          DC8 "  RSA parse key #%d       : "
   \              0x52 0x53    
   \              0x41 0x20    
   \              0x70 0x61    
   \              0x72 0x73    
   \              0x65 0x20    
   \              0x6B 0x65    
   \              0x79 0x20    
   \              0x23 0x25    
   \              0x64 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x3A 0x20    
   \              0x00         
   \       0x1D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_2:
   \        0x0   0x70 0x61          DC8 "passed\012\015  RSA-%d key validation: "
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x0A 0x0D    
   \              0x20 0x20    
   \              0x52 0x53    
   \              0x41 0x2D    
   \              0x25 0x64    
   \              0x20 0x6B    
   \              0x65 0x79    
   \              0x20 0x76    
   \              0x61 0x6C    
   \              0x69 0x64    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x3A    
   \              0x20 0x00    
   \       0x22   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_3:
   \        0x0   0x70 0x61          DC8 "passed\012\015  PKCS#1 encryption      : "
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x0A 0x0D    
   \              0x20 0x20    
   \              0x50 0x4B    
   \              0x43 0x53    
   \              0x23 0x31    
   \              0x20 0x65    
   \              0x6E 0x63    
   \              0x72 0x79    
   \              0x70 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_4:
   \        0x0   0xAA 0xBB          DC8 0AAH, 0BBH, 0CCH, 3, 2, 1, 0, 0FFH
   \              0xCC 0x03    
   \              0x02 0x01    
   \              0x00 0xFF    
   \        0x8   0xFF 0xFF          DC8 0FFH, 0FFH, 0FFH, 0FFH, 11H, 22H, 33H, 0AH
   \              0xFF 0xFF    
   \              0x11 0x22    
   \              0x33 0x0A    
   \       0x10   0x0B 0x0C          DC8 0BH, 0CH, 0CCH, 0DDH, 0DDH, 0DDH, 0DDH, 0DDH, 0, 0, 0, 0
   \              0xCC 0xDD    
   \              0xDD 0xDD    
   \              0xDD 0xDD    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \                     ?_5:
   \        0x0   0x70 0x61          DC8 "passed\012\015  PKCS#1 decryption      : "
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x0A 0x0D    
   \              0x20 0x20    
   \              0x50 0x4B    
   \              0x43 0x53    
   \              0x23 0x31    
   \              0x20 0x64    
   \              0x65 0x63    
   \              0x72 0x79    
   \              0x70 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_6:
   \        0x0   0x70 0x61          DC8 "passed\012\015"
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x0A 0x0D    
   \              0x00         
   \        0x9   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_7:
   \        0x0   0x20 0x20          DC8 "  PKCS#1 data sign       : "
   \              0x50 0x4B    
   \              0x43 0x53    
   \              0x23 0x31    
   \              0x20 0x64    
   \              0x61 0x74    
   \              0x61 0x20    
   \              0x73 0x69    
   \              0x67 0x6E    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_8:
   \        0x0   0x70 0x61          DC8 "passed\012\015  PKCS#1 sig. verify     : "
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x0A 0x0D    
   \              0x20 0x20    
   \              0x50 0x4B    
   \              0x43 0x53    
   \              0x23 0x31    
   \              0x20 0x73    
   \              0x69 0x67    
   \              0x2E 0x20    
   \              0x76 0x65    
   \              0x72 0x69    
   \              0x66 0x79    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \        0x0   0x0A 0x0D          DC8 "\012\015"
   \              0x00         
   \        0x3   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_10:
   \        0x0   0x66 0x61          DC8 "failed\012\015"
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x0A 0x0D    
   \              0x00         
   \        0x9   0x00 0x00          DC8 0, 0, 0
   \              0x00         
   2360          
   2361          #endif /* MBEDTLS_SELF_TEST */
   2362          
   2363          #endif /* MBEDTLS_RSA_C */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   mbedtls_pk_rsa
      24   mbedtls_rsa_check_privkey
        24   -> mbedtls_rsa_check_pubkey
        24   -> mbedtls_rsa_validate_crt
        24   -> mbedtls_rsa_validate_params
        24   -> rsa_check_context
      16   mbedtls_rsa_check_pub_priv
        16   -> mbedtls_mpi_cmp_mpi
        16   -> mbedtls_rsa_check_privkey
        16   -> mbedtls_rsa_check_pubkey
       8   mbedtls_rsa_check_pubkey
         8   -> mbedtls_mpi_bitlen
         8   -> mbedtls_mpi_cmp_mpi
         8   -> mbedtls_mpi_get_bit
         8   -> rsa_check_context
      40   mbedtls_rsa_complete
        40   -> mbedtls_mpi_cmp_int
        40   -> mbedtls_mpi_mul_mpi
        40   -> mbedtls_mpi_size
        40   -> mbedtls_rsa_deduce_crt
        40   -> mbedtls_rsa_deduce_primes
        40   -> mbedtls_rsa_deduce_private_exponent
         0   -> rsa_check_context
      16   mbedtls_rsa_copy
        16   -> mbedtls_mpi_copy
        16   -> mbedtls_rsa_free
      24   mbedtls_rsa_export
        24   -> mbedtls_mpi_cmp_int
        24   -> mbedtls_mpi_copy
      24   mbedtls_rsa_export_crt
        24   -> mbedtls_mpi_cmp_int
        24   -> mbedtls_mpi_copy
      32   mbedtls_rsa_export_raw
        32   -> mbedtls_mpi_cmp_int
        32   -> mbedtls_mpi_write_binary
       8   mbedtls_rsa_free
         0   -> mbedtls_mpi_free
         8   -> mbedtls_mpi_free
      72   mbedtls_rsa_gen_key
        72   -> mbedtls_mpi_add_int
        72   -> mbedtls_mpi_bitlen
        72   -> mbedtls_mpi_cmp_int
        72   -> mbedtls_mpi_div_mpi
        72   -> mbedtls_mpi_free
        72   -> mbedtls_mpi_gcd
        72   -> mbedtls_mpi_gen_prime
        72   -> mbedtls_mpi_init
        72   -> mbedtls_mpi_inv_mod
        72   -> mbedtls_mpi_lset
        72   -> mbedtls_mpi_mul_mpi
        72   -> mbedtls_mpi_size
        72   -> mbedtls_mpi_sub_int
        72   -> mbedtls_mpi_sub_mpi
        72   -> mbedtls_mpi_swap
        72   -> mbedtls_rsa_check_privkey
        72   -> mbedtls_rsa_deduce_crt
        72   -> mbedtls_rsa_free
       0   mbedtls_rsa_get_len
      24   mbedtls_rsa_import
        24   -> mbedtls_mpi_copy
        24   -> mbedtls_mpi_size
      16   mbedtls_rsa_import_raw
        16   -> mbedtls_mpi_read_binary
        16   -> mbedtls_mpi_size
      16   mbedtls_rsa_init
        16   -> __aeabi_memset4
         0   -> mbedtls_rsa_set_padding
      48   mbedtls_rsa_pkcs1_decrypt
        48   -> mbedtls_rsa_rsaes_oaep_decrypt
        48   -> mbedtls_rsa_rsaes_pkcs1_v15_decrypt
      40   mbedtls_rsa_pkcs1_encrypt
        40   -> mbedtls_rsa_rsaes_oaep_encrypt
        40   -> mbedtls_rsa_rsaes_pkcs1_v15_encrypt
      40   mbedtls_rsa_pkcs1_sign
        40   -> mbedtls_rsa_rsassa_pkcs1_v15_sign
        40   -> mbedtls_rsa_rsassa_pss_sign
      40   mbedtls_rsa_pkcs1_verify
        40   -> mbedtls_rsa_rsassa_pkcs1_v15_verify
        40   -> mbedtls_rsa_rsassa_pss_verify
     152   mbedtls_rsa_private
       152   -> mbedtls_mpi_add_mpi
       152   -> mbedtls_mpi_cmp_mpi
       152   -> mbedtls_mpi_copy
       152   -> mbedtls_mpi_exp_mod
       152   -> mbedtls_mpi_fill_random
       152   -> mbedtls_mpi_free
       152   -> mbedtls_mpi_init
       152   -> mbedtls_mpi_mod_mpi
       152   -> mbedtls_mpi_mul_mpi
       152   -> mbedtls_mpi_read_binary
       152   -> mbedtls_mpi_sub_int
       152   -> mbedtls_mpi_sub_mpi
       152   -> mbedtls_mpi_write_binary
       152   -> rsa_check_context
       152   -> rsa_prepare_blinding
      40   mbedtls_rsa_public
        40   -> mbedtls_mpi_cmp_mpi
        40   -> mbedtls_mpi_exp_mod
        40   -> mbedtls_mpi_free
        40   -> mbedtls_mpi_init
        40   -> mbedtls_mpi_read_binary
        40   -> mbedtls_mpi_write_binary
        40   -> rsa_check_context
     624   mbedtls_rsa_rsaes_oaep_decrypt
       624   -> __aeabi_memcpy
       624   -> mbedtls_md
       624   -> mbedtls_md_free
       624   -> mbedtls_md_get_size
       624   -> mbedtls_md_info_from_type
       624   -> mbedtls_md_init
       624   -> mbedtls_md_setup
       624   -> mbedtls_platform_zeroize
       624   -> mbedtls_rsa_private
       624   -> mbedtls_rsa_public
       624   -> mgf_mask
      64   mbedtls_rsa_rsaes_oaep_encrypt
        64   -- Indirect call
        64   -> __aeabi_memcpy
        64   -> __aeabi_memset
        64   -> mbedtls_md
        64   -> mbedtls_md_free
        64   -> mbedtls_md_get_size
        64   -> mbedtls_md_info_from_type
        64   -> mbedtls_md_init
        64   -> mbedtls_md_setup
        64   -> mbedtls_rsa_private
        64   -> mbedtls_rsa_public
        64   -> mgf_mask
     544   mbedtls_rsa_rsaes_pkcs1_v15_decrypt
       544   -> __aeabi_memcpy
       544   -> mbedtls_platform_zeroize
       544   -> mbedtls_rsa_private
       544   -> mbedtls_rsa_public
      40   mbedtls_rsa_rsaes_pkcs1_v15_encrypt
        40   -- Indirect call
        40   -> __aeabi_memcpy
        40   -> mbedtls_rsa_private
         0   -> mbedtls_rsa_public
      40   mbedtls_rsa_rsassa_pkcs1_v15_sign
        40   -> __aeabi_memcpy
        40   -> mbedtls_calloc
        40   -> mbedtls_free
        40   -> mbedtls_rsa_private
         0   -> mbedtls_rsa_public
        40   -> mbedtls_rsa_public
        40   -> mbedtls_safer_memcmp
        40   -> rsa_rsassa_pkcs1_v15_encode
      40   mbedtls_rsa_rsassa_pkcs1_v15_verify
        40   -> mbedtls_calloc
        40   -> mbedtls_free
        40   -> mbedtls_platform_zeroize
        40   -> mbedtls_rsa_private
        40   -> mbedtls_rsa_public
        40   -> mbedtls_safer_memcmp
        40   -> rsa_rsassa_pkcs1_v15_encode
     128   mbedtls_rsa_rsassa_pss_sign
       128   -- Indirect call
       128   -> __aeabi_memcpy
       128   -> __aeabi_memset
       128   -> mbedtls_md_finish
       128   -> mbedtls_md_free
       128   -> mbedtls_md_get_size
       128   -> mbedtls_md_info_from_type
       128   -> mbedtls_md_init
       128   -> mbedtls_md_setup
       128   -> mbedtls_md_starts
       128   -> mbedtls_md_update
       128   -> mbedtls_mpi_bitlen
       128   -> mbedtls_platform_zeroize
       128   -> mbedtls_rsa_private
       128   -> mbedtls_rsa_public
       128   -> mgf_mask
      48   mbedtls_rsa_rsassa_pss_verify
        48   -> mbedtls_rsa_rsassa_pss_verify_ext
     640   mbedtls_rsa_rsassa_pss_verify_ext
       640   -> __aeabi_memset4
       640   -> mbedtls_md_finish
       640   -> mbedtls_md_free
       640   -> mbedtls_md_get_size
       640   -> mbedtls_md_info_from_type
       640   -> mbedtls_md_init
       640   -> mbedtls_md_setup
       640   -> mbedtls_md_starts
       640   -> mbedtls_md_update
       640   -> mbedtls_mpi_bitlen
       640   -> mbedtls_rsa_private
       640   -> mbedtls_rsa_public
       640   -> memcmp
       640   -> mgf_mask
     248   mbedtls_rsa_self_test
       248   -> DbgConsole_Printf
       248   -> __aeabi_memcpy4
       248   -> mbedtls_pk_free
       248   -> mbedtls_pk_get_bitlen
       248   -> mbedtls_pk_init
       248   -> mbedtls_pk_parse_key
       248   -> mbedtls_pk_rsa
       248   -> mbedtls_rsa_check_privkey
       248   -> mbedtls_rsa_check_pubkey
       248   -> mbedtls_rsa_pkcs1_decrypt
       248   -> mbedtls_rsa_pkcs1_encrypt
       248   -> mbedtls_rsa_pkcs1_sign
       248   -> mbedtls_rsa_pkcs1_verify
       248   -> mbedtls_sha1
       248   -> memcmp
       248   -> strlen
       0   mbedtls_rsa_set_padding
      12   mbedtls_safer_memcmp
     104   mgf_mask
       104   -> __aeabi_memset4
       104   -> mbedtls_md_finish
       104   -> mbedtls_md_get_size
       104   -> mbedtls_md_starts
       104   -> mbedtls_md_update
       104   -> mbedtls_platform_zeroize
      16   myrand
        16   -> rand
      16   rsa_check_context
        16   -> mbedtls_mpi_cmp_int
        16   -> mbedtls_mpi_get_bit
        16   -> mbedtls_mpi_size
      24   rsa_prepare_blinding
        24   -> mbedtls_mpi_cmp_int
        24   -> mbedtls_mpi_exp_mod
        24   -> mbedtls_mpi_fill_random
        24   -> mbedtls_mpi_gcd
        24   -> mbedtls_mpi_inv_mod
         0   -> mbedtls_mpi_mod_mpi
        24   -> mbedtls_mpi_mod_mpi
        24   -> mbedtls_mpi_mul_mpi
      40   rsa_rsassa_pkcs1_v15_encode
        40   -> __aeabi_memcpy
        40   -> __aeabi_memset
        40   -> mbedtls_md_get_size
        40   -> mbedtls_md_info_from_type
        40   -> mbedtls_oid_get_oid_by_md
        40   -> mbedtls_platform_zeroize


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable12
       4  ??DataTable19
       4  ??DataTable22
       4  ??DataTable22_1
       4  ??DataTable23
       4  ??DataTable25
       4  ??DataTable26
       4  ??DataTable26_1
       4  ??DataTable26_10
       4  ??DataTable26_11
       4  ??DataTable26_12
       4  ??DataTable26_13
       4  ??DataTable26_14
       4  ??DataTable26_15
       4  ??DataTable26_16
       4  ??DataTable26_2
       4  ??DataTable26_3
       4  ??DataTable26_4
       4  ??DataTable26_5
       4  ??DataTable26_6
       4  ??DataTable26_7
       4  ??DataTable26_8
       4  ??DataTable26_9
     904  ?_0
      32  ?_1
      12  ?_10
       4  ?_11
      36  ?_2
      36  ?_3
      28  ?_4
      36  ?_5
      12  ?_6
      28  ?_7
      36  ?_8
       4  ?_9
       4  mbedtls_pk_rsa
     122  mbedtls_rsa_check_privkey
      66  mbedtls_rsa_check_pub_priv
      80  mbedtls_rsa_check_pubkey
     426  mbedtls_rsa_complete
     252  mbedtls_rsa_copy
     210  mbedtls_rsa_export
     162  mbedtls_rsa_export_crt
     224  mbedtls_rsa_export_raw
     112  mbedtls_rsa_free
     496  mbedtls_rsa_gen_key
       4  mbedtls_rsa_get_len
     122  mbedtls_rsa_import
     128  mbedtls_rsa_import_raw
      26  mbedtls_rsa_init
      72  mbedtls_rsa_pkcs1_decrypt
      62  mbedtls_rsa_pkcs1_encrypt
      66  mbedtls_rsa_pkcs1_sign
      64  mbedtls_rsa_pkcs1_verify
     660  mbedtls_rsa_private
     132  mbedtls_rsa_public
     394  mbedtls_rsa_rsaes_oaep_decrypt
     310  mbedtls_rsa_rsaes_oaep_encrypt
     278  mbedtls_rsa_rsaes_pkcs1_v15_decrypt
     228  mbedtls_rsa_rsaes_pkcs1_v15_encrypt
     194  mbedtls_rsa_rsassa_pkcs1_v15_sign
     182  mbedtls_rsa_rsassa_pkcs1_v15_verify
     404  mbedtls_rsa_rsassa_pss_sign
      56  mbedtls_rsa_rsassa_pss_verify
     422  mbedtls_rsa_rsassa_pss_verify_ext
     384  mbedtls_rsa_self_test
      10  mbedtls_rsa_set_padding
      30  mbedtls_safer_memcmp
     170  mgf_mask
      26  myrand
     192  rsa_check_context
     216  rsa_prepare_blinding
     322  rsa_rsassa_pkcs1_v15_encode

 
 1 168 bytes in section .rodata
 7 400 bytes in section .text
 
 7 400 bytes of CODE  memory
 1 168 bytes of CONST memory

Errors: none
Warnings: none
