###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.3.193/W32 for ARM         10/Jun/2019  13:47:58
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\Development\smart_washing_machine_3080\mbedtls\library\asn1write.c
#    Command line =  
#        -f C:\Users\nxf42695\AppData\Local\Temp\1\EW84E9.tmp
#        (C:\Development\smart_washing_machine_3080\mbedtls\library\asn1write.c
#        -D DEBUG -D USE_RTOS -D XIP_EXTERNAL_FLASH=1 -D
#        XIP_BOOT_HEADER_ENABLE=1 -D CPU_MIMXRT1052DVL6B -D FSL_RTOS_FREE_RTOS
#        -D PRINTF_ADVANCED_ENABLE -D
#        "MBEDTLS_CONFIG_FILE=\"ksdk_mbedtls_config.h\"" -lC
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list -lA
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list
#        --diag_suppress Pa082,Pa050 -o
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_d16 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" --preinclude
#        C:\Development\smart_washing_machine_3080/source\app_preinclude.h -I
#        C:\Development\smart_washing_machine_3080/board\ -I
#        C:\Development\smart_washing_machine_3080/source\ -I
#        C:\Development\smart_washing_machine_3080/CMSIS\ -I
#        C:\Development\smart_washing_machine_3080/amazon-freertos/freertos/portable\
#        -I C:\Development\smart_washing_machine_3080/amazon-freertos/include\
#        -I C:\Development\smart_washing_machine_3080/component/lists\ -I
#        C:\Development\smart_washing_machine_3080/component/serial_manager\ -I
#        C:\Development\smart_washing_machine_3080/component/uart\ -I
#        C:\Development\smart_washing_machine_3080/component/kv\ -I
#        C:\Development\smart_washing_machine_3080/component/kv/include\ -I
#        C:\Development\smart_washing_machine_3080/device\ -I
#        C:\Development\smart_washing_machine_3080/doc\ -I
#        C:\Development\smart_washing_machine_3080/drivers\ -I
#        C:\Development\smart_washing_machine_3080/src\ -I
#        C:\Development\smart_washing_machine_3080/startup\ -I
#        C:\Development\smart_washing_machine_3080/utilities\ -I
#        C:\Development\smart_washing_machine_3080/xip\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\atm\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_model\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_sign\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\infra\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\mqtt\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\external_libs\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\coap_cloud\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\CoAPPacket\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\server\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\os\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\awss_reset\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\mbedtls\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\ -I
#        C:\Development\smart_washing_machine_3080\mbedtls\port\ksdk\ -Om)
#    Locale       =  C
#    List file    =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list\asn1write.lst
#    Object file  =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj\asn1write.o
#
###############################################################################

C:\Development\smart_washing_machine_3080\mbedtls\library\asn1write.c
      1          /*
      2           * ASN.1 buffer writing functionality
      3           *
      4           *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
      5           *  SPDX-License-Identifier: Apache-2.0
      6           *
      7           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
      8           *  not use this file except in compliance with the License.
      9           *  You may obtain a copy of the License at
     10           *
     11           *  http://www.apache.org/licenses/LICENSE-2.0
     12           *
     13           *  Unless required by applicable law or agreed to in writing, software
     14           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     15           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     16           *  See the License for the specific language governing permissions and
     17           *  limitations under the License.
     18           *
     19           *  This file is part of mbed TLS (https://tls.mbed.org)
     20           */
     21          
     22          #if !defined(MBEDTLS_CONFIG_FILE)
     23          #include "mbedtls/config.h"
     24          #else
     25          #include MBEDTLS_CONFIG_FILE
     26          #endif
     27          
     28          #if defined(MBEDTLS_ASN1_WRITE_C)
     29          
     30          #include "mbedtls/asn1write.h"
     31          
     32          #include <string.h>
     33          
     34          #if defined(MBEDTLS_PLATFORM_C)
     35          #include "mbedtls/platform.h"
     36          #else
     37          #include <stdlib.h>
     38          #define mbedtls_calloc    calloc
     39          #define mbedtls_free       free
     40          #endif
     41          

   \                                 In section .text, align 2, keep-with-next
     42          int mbedtls_asn1_write_len( unsigned char **p, unsigned char *start, size_t len )
     43          {
     44              if( len < 0x80 )
   \                     mbedtls_asn1_write_len: (+1)
   \        0x0   0x2A80             CMP      R2,#+128
   \        0x2   0xD20D             BCS.N    ??mbedtls_asn1_write_len_0
     45              {
     46                  if( *p - start < 1 )
   \        0x4   0x6803             LDR      R3,[R0, #+0]
   \        0x6   0x1A59             SUBS     R1,R3,R1
   \        0x8   0x2901             CMP      R1,#+1
   \        0xA   0xDA02             BGE.N    ??mbedtls_asn1_write_len_1
     47                      return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
   \        0xC   0xF06F 0x006B      MVN      R0,#+107
   \       0x10   0x4770             BX       LR
     48          
     49                  *--(*p) = (unsigned char) len;
   \                     ??mbedtls_asn1_write_len_1: (+1)
   \       0x12   0x4619             MOV      R1,R3
   \       0x14   0x1E49             SUBS     R1,R1,#+1
   \       0x16   0x6001             STR      R1,[R0, #+0]
   \       0x18   0x4608             MOV      R0,R1
   \       0x1A   0x7002             STRB     R2,[R0, #+0]
     50                  return( 1 );
   \       0x1C   0x2001             MOVS     R0,#+1
   \       0x1E   0x4770             BX       LR
     51              }
     52          
     53              if( len <= 0xFF )
   \                     ??mbedtls_asn1_write_len_0: (+1)
   \       0x20   0xF5B2 0x7F80      CMP      R2,#+256
   \       0x24   0xD212             BCS.N    ??mbedtls_asn1_write_len_2
     54              {
     55                  if( *p - start < 2 )
   \       0x26   0x6803             LDR      R3,[R0, #+0]
   \       0x28   0x1A59             SUBS     R1,R3,R1
   \       0x2A   0x2902             CMP      R1,#+2
   \       0x2C   0xDA02             BGE.N    ??mbedtls_asn1_write_len_3
     56                      return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
   \       0x2E   0xF06F 0x006B      MVN      R0,#+107
   \       0x32   0x4770             BX       LR
     57          
     58                  *--(*p) = (unsigned char) len;
   \                     ??mbedtls_asn1_write_len_3: (+1)
   \       0x34   0x4619             MOV      R1,R3
   \       0x36   0x1E49             SUBS     R1,R1,#+1
   \       0x38   0x6001             STR      R1,[R0, #+0]
   \       0x3A   0x700A             STRB     R2,[R1, #+0]
     59                  *--(*p) = 0x81;
   \       0x3C   0x6801             LDR      R1,[R0, #+0]
   \       0x3E   0x1E49             SUBS     R1,R1,#+1
   \       0x40   0x6001             STR      R1,[R0, #+0]
   \       0x42   0x2181             MOVS     R1,#+129
   \       0x44   0x6800             LDR      R0,[R0, #+0]
   \       0x46   0x7001             STRB     R1,[R0, #+0]
     60                  return( 2 );
   \       0x48   0x2002             MOVS     R0,#+2
   \       0x4A   0x4770             BX       LR
     61              }
     62          
     63              if( len <= 0xFFFF )
   \                     ??mbedtls_asn1_write_len_2: (+1)
   \       0x4C   0xF5B2 0x3F80      CMP      R2,#+65536
   \       0x50   0xD217             BCS.N    ??mbedtls_asn1_write_len_4
     64              {
     65                  if( *p - start < 3 )
   \       0x52   0x6803             LDR      R3,[R0, #+0]
   \       0x54   0x1A59             SUBS     R1,R3,R1
   \       0x56   0x2903             CMP      R1,#+3
   \       0x58   0xDA02             BGE.N    ??mbedtls_asn1_write_len_5
     66                      return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
   \       0x5A   0xF06F 0x006B      MVN      R0,#+107
   \       0x5E   0x4770             BX       LR
     67          
     68                  *--(*p) = ( len       ) & 0xFF;
   \                     ??mbedtls_asn1_write_len_5: (+1)
   \       0x60   0x4619             MOV      R1,R3
   \       0x62   0x1E49             SUBS     R1,R1,#+1
   \       0x64   0x6001             STR      R1,[R0, #+0]
   \       0x66   0x700A             STRB     R2,[R1, #+0]
     69                  *--(*p) = ( len >>  8 ) & 0xFF;
   \       0x68   0x6801             LDR      R1,[R0, #+0]
   \       0x6A   0x1E49             SUBS     R1,R1,#+1
   \       0x6C   0x6001             STR      R1,[R0, #+0]
   \       0x6E   0x0A12             LSRS     R2,R2,#+8
   \       0x70   0x700A             STRB     R2,[R1, #+0]
     70                  *--(*p) = 0x82;
   \       0x72   0x6801             LDR      R1,[R0, #+0]
   \       0x74   0x1E49             SUBS     R1,R1,#+1
   \       0x76   0x6001             STR      R1,[R0, #+0]
   \       0x78   0x2182             MOVS     R1,#+130
   \       0x7A   0x6800             LDR      R0,[R0, #+0]
   \       0x7C   0x7001             STRB     R1,[R0, #+0]
     71                  return( 3 );
   \       0x7E   0x2003             MOVS     R0,#+3
   \       0x80   0x4770             BX       LR
     72              }
     73          
     74              if( len <= 0xFFFFFF )
   \                     ??mbedtls_asn1_write_len_4: (+1)
   \       0x82   0xF1B2 0x7F80      CMP      R2,#+16777216
   \       0x86   0x6803             LDR      R3,[R0, #+0]
   \       0x88   0xD21D             BCS.N    ??mbedtls_asn1_write_len_6
     75              {
     76                  if( *p - start < 4 )
   \       0x8A   0x1A59             SUBS     R1,R3,R1
   \       0x8C   0x2904             CMP      R1,#+4
   \       0x8E   0xDA02             BGE.N    ??mbedtls_asn1_write_len_7
     77                      return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
   \       0x90   0xF06F 0x006B      MVN      R0,#+107
   \       0x94   0x4770             BX       LR
     78          
     79                  *--(*p) = ( len       ) & 0xFF;
   \                     ??mbedtls_asn1_write_len_7: (+1)
   \       0x96   0x4619             MOV      R1,R3
   \       0x98   0x1E49             SUBS     R1,R1,#+1
   \       0x9A   0x6001             STR      R1,[R0, #+0]
   \       0x9C   0x700A             STRB     R2,[R1, #+0]
     80                  *--(*p) = ( len >>  8 ) & 0xFF;
   \       0x9E   0x6801             LDR      R1,[R0, #+0]
   \       0xA0   0x1E49             SUBS     R1,R1,#+1
   \       0xA2   0x6001             STR      R1,[R0, #+0]
   \       0xA4   0x4611             MOV      R1,R2
   \       0xA6   0x0A09             LSRS     R1,R1,#+8
   \       0xA8   0x6803             LDR      R3,[R0, #+0]
   \       0xAA   0x7019             STRB     R1,[R3, #+0]
     81                  *--(*p) = ( len >> 16 ) & 0xFF;
   \       0xAC   0x6801             LDR      R1,[R0, #+0]
   \       0xAE   0x1E49             SUBS     R1,R1,#+1
   \       0xB0   0x6001             STR      R1,[R0, #+0]
   \       0xB2   0x0C12             LSRS     R2,R2,#+16
   \       0xB4   0x700A             STRB     R2,[R1, #+0]
     82                  *--(*p) = 0x83;
   \       0xB6   0x6801             LDR      R1,[R0, #+0]
   \       0xB8   0x1E49             SUBS     R1,R1,#+1
   \       0xBA   0x6001             STR      R1,[R0, #+0]
   \       0xBC   0x2183             MOVS     R1,#+131
   \       0xBE   0x6800             LDR      R0,[R0, #+0]
   \       0xC0   0x7001             STRB     R1,[R0, #+0]
     83                  return( 4 );
   \       0xC2   0x2004             MOVS     R0,#+4
   \       0xC4   0x4770             BX       LR
     84              }
     85          
     86          #if SIZE_MAX > 0xFFFFFFFF
     87              if( len <= 0xFFFFFFFF )
     88          #endif
     89              {
     90                  if( *p - start < 5 )
   \                     ??mbedtls_asn1_write_len_6: (+1)
   \       0xC6   0x1A59             SUBS     R1,R3,R1
   \       0xC8   0x2905             CMP      R1,#+5
   \       0xCA   0xDA02             BGE.N    ??mbedtls_asn1_write_len_8
     91                      return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
   \       0xCC   0xF06F 0x006B      MVN      R0,#+107
   \       0xD0   0x4770             BX       LR
     92          
     93                  *--(*p) = ( len       ) & 0xFF;
   \                     ??mbedtls_asn1_write_len_8: (+1)
   \       0xD2   0x4619             MOV      R1,R3
   \       0xD4   0x1E49             SUBS     R1,R1,#+1
   \       0xD6   0x6001             STR      R1,[R0, #+0]
   \       0xD8   0x700A             STRB     R2,[R1, #+0]
     94                  *--(*p) = ( len >>  8 ) & 0xFF;
   \       0xDA   0x6801             LDR      R1,[R0, #+0]
   \       0xDC   0x1E49             SUBS     R1,R1,#+1
   \       0xDE   0x6001             STR      R1,[R0, #+0]
   \       0xE0   0x4611             MOV      R1,R2
   \       0xE2   0x0A09             LSRS     R1,R1,#+8
   \       0xE4   0x6803             LDR      R3,[R0, #+0]
   \       0xE6   0x7019             STRB     R1,[R3, #+0]
     95                  *--(*p) = ( len >> 16 ) & 0xFF;
   \       0xE8   0x6801             LDR      R1,[R0, #+0]
   \       0xEA   0x1E49             SUBS     R1,R1,#+1
   \       0xEC   0x6001             STR      R1,[R0, #+0]
   \       0xEE   0x4611             MOV      R1,R2
   \       0xF0   0x0C09             LSRS     R1,R1,#+16
   \       0xF2   0x6803             LDR      R3,[R0, #+0]
   \       0xF4   0x7019             STRB     R1,[R3, #+0]
     96                  *--(*p) = ( len >> 24 ) & 0xFF;
   \       0xF6   0x6801             LDR      R1,[R0, #+0]
   \       0xF8   0x1E49             SUBS     R1,R1,#+1
   \       0xFA   0x6001             STR      R1,[R0, #+0]
   \       0xFC   0x0E12             LSRS     R2,R2,#+24
   \       0xFE   0x700A             STRB     R2,[R1, #+0]
     97                  *--(*p) = 0x84;
   \      0x100   0x6801             LDR      R1,[R0, #+0]
   \      0x102   0x1E49             SUBS     R1,R1,#+1
   \      0x104   0x6001             STR      R1,[R0, #+0]
   \      0x106   0x2184             MOVS     R1,#+132
   \      0x108   0x6800             LDR      R0,[R0, #+0]
   \      0x10A   0x7001             STRB     R1,[R0, #+0]
     98                  return( 5 );
   \      0x10C   0x2005             MOVS     R0,#+5
   \      0x10E   0x4770             BX       LR               ;; return
     99              }
    100          
    101          #if SIZE_MAX > 0xFFFFFFFF
    102              return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
    103          #endif
    104          }
    105          

   \                                 In section .text, align 2, keep-with-next
    106          int mbedtls_asn1_write_tag( unsigned char **p, unsigned char *start, unsigned char tag )
    107          {
    108              if( *p - start < 1 )
   \                     mbedtls_asn1_write_tag: (+1)
   \        0x0   0x6803             LDR      R3,[R0, #+0]
   \        0x2   0x1A59             SUBS     R1,R3,R1
   \        0x4   0x2901             CMP      R1,#+1
   \        0x6   0xDA02             BGE.N    ??mbedtls_asn1_write_tag_0
    109                  return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
   \        0x8   0xF06F 0x006B      MVN      R0,#+107
   \        0xC   0x4770             BX       LR
    110          
    111              *--(*p) = tag;
   \                     ??mbedtls_asn1_write_tag_0: (+1)
   \        0xE   0x4619             MOV      R1,R3
   \       0x10   0x1E49             SUBS     R1,R1,#+1
   \       0x12   0x6001             STR      R1,[R0, #+0]
   \       0x14   0x4608             MOV      R0,R1
   \       0x16   0x7002             STRB     R2,[R0, #+0]
    112          
    113              return( 1 );
   \       0x18   0x2001             MOVS     R0,#+1
   \       0x1A   0x4770             BX       LR               ;; return
    114          }
    115          

   \                                 In section .text, align 2, keep-with-next
    116          int mbedtls_asn1_write_raw_buffer( unsigned char **p, unsigned char *start,
    117                                     const unsigned char *buf, size_t size )
    118          {
   \                     mbedtls_asn1_write_raw_buffer: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4614             MOV      R4,R2
   \        0x4   0x461D             MOV      R5,R3
    119              size_t len = 0;
    120          
    121              if( *p < start || (size_t)( *p - start ) < size )
   \        0x6   0x6802             LDR      R2,[R0, #+0]
   \        0x8   0x428A             CMP      R2,R1
   \        0xA   0xD302             BCC.N    ??mbedtls_asn1_write_raw_buffer_0
   \        0xC   0x1A51             SUBS     R1,R2,R1
   \        0xE   0x42A9             CMP      R1,R5
   \       0x10   0xD202             BCS.N    ??mbedtls_asn1_write_raw_buffer_1
    122                  return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
   \                     ??mbedtls_asn1_write_raw_buffer_0: (+1)
   \       0x12   0xF06F 0x006B      MVN      R0,#+107
   \       0x16   0xBD32             POP      {R1,R4,R5,PC}
    123          
    124              len = size;
    125              (*p) -= len;
   \                     ??mbedtls_asn1_write_raw_buffer_1: (+1)
   \       0x18   0x4611             MOV      R1,R2
   \       0x1A   0x426A             RSBS     R2,R5,#+0
   \       0x1C   0x4411             ADD      R1,R1,R2
   \       0x1E   0x6001             STR      R1,[R0, #+0]
    126              memcpy( *p, buf, len );
   \       0x20   0x462A             MOV      R2,R5
   \       0x22   0x4621             MOV      R1,R4
   \       0x24   0x6800             LDR      R0,[R0, #+0]
   \       0x26   0x....'....        BL       __aeabi_memcpy
    127          
    128              return( (int) len );
   \       0x2A   0x4628             MOV      R0,R5
   \       0x2C   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    129          }
    130          
    131          #if defined(MBEDTLS_BIGNUM_C)

   \                                 In section .text, align 2, keep-with-next
    132          int mbedtls_asn1_write_mpi( unsigned char **p, unsigned char *start, const mbedtls_mpi *X )
    133          {
   \                     mbedtls_asn1_write_mpi: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
   \        0x6   0x4616             MOV      R6,R2
    134              int ret;
    135              size_t len = 0;
    136          
    137              // Write the MPI
    138              //
    139              len = mbedtls_mpi_size( X );
   \        0x8   0x4630             MOV      R0,R6
   \        0xA   0x....'....        BL       mbedtls_mpi_size
   \        0xE   0x4607             MOV      R7,R0
    140          
    141              if( *p < start || (size_t)( *p - start ) < len )
   \       0x10   0x6820             LDR      R0,[R4, #+0]
   \       0x12   0x42A8             CMP      R0,R5
   \       0x14   0xD318             BCC.N    ??mbedtls_asn1_write_mpi_0
   \       0x16   0x1B40             SUBS     R0,R0,R5
   \       0x18   0x42B8             CMP      R0,R7
   \       0x1A   0xD315             BCC.N    ??mbedtls_asn1_write_mpi_0
    142                  return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
    143          
    144              (*p) -= len;
   \       0x1C   0x6820             LDR      R0,[R4, #+0]
   \       0x1E   0x4279             RSBS     R1,R7,#+0
   \       0x20   0x4408             ADD      R0,R0,R1
   \       0x22   0x6020             STR      R0,[R4, #+0]
    145              MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( X, *p, len ) );
   \       0x24   0x463A             MOV      R2,R7
   \       0x26   0x4601             MOV      R1,R0
   \       0x28   0x4630             MOV      R0,R6
   \       0x2A   0x....'....        BL       mbedtls_mpi_write_binary
   \       0x2E   0x2800             CMP      R0,#+0
   \       0x30   0xD125             BNE.N    ??mbedtls_asn1_write_mpi_1
    146          
    147              // DER format assumes 2s complement for numbers, so the leftmost bit
    148              // should be 0 for positive numbers and 1 for negative numbers.
    149              //
    150              if( X->s ==1 && **p & 0x80 )
   \       0x32   0x6830             LDR      R0,[R6, #+0]
   \       0x34   0x2801             CMP      R0,#+1
   \       0x36   0xD111             BNE.N    ??mbedtls_asn1_write_mpi_2
   \       0x38   0x6820             LDR      R0,[R4, #+0]
   \       0x3A   0x7800             LDRB     R0,[R0, #+0]
   \       0x3C   0x0600             LSLS     R0,R0,#+24
   \       0x3E   0xD50D             BPL.N    ??mbedtls_asn1_write_mpi_2
    151              {
    152                  if( *p - start < 1 )
   \       0x40   0x6820             LDR      R0,[R4, #+0]
   \       0x42   0x1B40             SUBS     R0,R0,R5
   \       0x44   0x2801             CMP      R0,#+1
   \       0x46   0xDA02             BGE.N    ??mbedtls_asn1_write_mpi_3
    153                      return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
   \                     ??mbedtls_asn1_write_mpi_0: (+1)
   \       0x48   0xF06F 0x006B      MVN      R0,#+107
   \       0x4C   0xBDF2             POP      {R1,R4-R7,PC}
    154          
    155                  *--(*p) = 0x00;
   \                     ??mbedtls_asn1_write_mpi_3: (+1)
   \       0x4E   0x6820             LDR      R0,[R4, #+0]
   \       0x50   0x1E40             SUBS     R0,R0,#+1
   \       0x52   0x6020             STR      R0,[R4, #+0]
   \       0x54   0x2000             MOVS     R0,#+0
   \       0x56   0x6821             LDR      R1,[R4, #+0]
   \       0x58   0x7008             STRB     R0,[R1, #+0]
    156                  len += 1;
   \       0x5A   0x1C7F             ADDS     R7,R7,#+1
    157              }
    158          
    159              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
   \                     ??mbedtls_asn1_write_mpi_2: (+1)
   \       0x5C   0x463A             MOV      R2,R7
   \       0x5E   0x4629             MOV      R1,R5
   \       0x60   0x4620             MOV      R0,R4
   \       0x62   0x....'....        BL       mbedtls_asn1_write_len
   \       0x66   0x2800             CMP      R0,#+0
   \       0x68   0xD409             BMI.N    ??mbedtls_asn1_write_mpi_1
   \       0x6A   0x19C7             ADDS     R7,R0,R7
    160              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_INTEGER ) );
   \       0x6C   0x2202             MOVS     R2,#+2
   \       0x6E   0x4629             MOV      R1,R5
   \       0x70   0x4620             MOV      R0,R4
   \       0x72   0x....'....        BL       mbedtls_asn1_write_tag
   \       0x76   0x2800             CMP      R0,#+0
   \       0x78   0xD401             BMI.N    ??mbedtls_asn1_write_mpi_1
    161          
    162              ret = (int) len;
   \       0x7A   0x183F             ADDS     R7,R7,R0
   \       0x7C   0x4638             MOV      R0,R7
    163          
    164          cleanup:
    165              return( ret );
   \                     ??mbedtls_asn1_write_mpi_1: (+1)
   \       0x7E   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    166          }
    167          #endif /* MBEDTLS_BIGNUM_C */
    168          

   \                                 In section .text, align 2, keep-with-next
    169          int mbedtls_asn1_write_null( unsigned char **p, unsigned char *start )
    170          {
   \                     mbedtls_asn1_write_null: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
    171              int ret;
    172              size_t len = 0;
    173          
    174              // Write NULL
    175              //
    176              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, 0) );
   \        0x6   0x2200             MOVS     R2,#+0
   \        0x8   0x....'....        BL       mbedtls_asn1_write_len
   \        0xC   0x0006             MOVS     R6,R0
   \        0xE   0xD408             BMI.N    ??mbedtls_asn1_write_null_0
    177              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_NULL ) );
   \       0x10   0x2205             MOVS     R2,#+5
   \       0x12   0x4629             MOV      R1,R5
   \       0x14   0x4620             MOV      R0,R4
   \       0x16   0x....'....        BL       mbedtls_asn1_write_tag
   \       0x1A   0x2800             CMP      R0,#+0
   \       0x1C   0xD401             BMI.N    ??mbedtls_asn1_write_null_0
    178          
    179              return( (int) len );
   \       0x1E   0x1986             ADDS     R6,R0,R6
   \       0x20   0x4630             MOV      R0,R6
   \                     ??mbedtls_asn1_write_null_0: (+1)
   \       0x22   0xBD70             POP      {R4-R6,PC}       ;; return
    180          }
    181          

   \                                 In section .text, align 2, keep-with-next
    182          int mbedtls_asn1_write_oid( unsigned char **p, unsigned char *start,
    183                              const char *oid, size_t oid_len )
    184          {
   \                     mbedtls_asn1_write_oid: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
    185              int ret;
    186              size_t len = 0;
    187          
    188              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_raw_buffer( p, start,
    189                                            (const unsigned char *) oid, oid_len ) );
   \        0x6   0x....'....        BL       mbedtls_asn1_write_raw_buffer
   \        0xA   0x0006             MOVS     R6,R0
   \        0xC   0xD410             BMI.N    ??mbedtls_asn1_write_oid_0
    190              MBEDTLS_ASN1_CHK_ADD( len , mbedtls_asn1_write_len( p, start, len ) );
   \        0xE   0x4632             MOV      R2,R6
   \       0x10   0x4629             MOV      R1,R5
   \       0x12   0x4620             MOV      R0,R4
   \       0x14   0x....'....        BL       mbedtls_asn1_write_len
   \       0x18   0x2800             CMP      R0,#+0
   \       0x1A   0xD409             BMI.N    ??mbedtls_asn1_write_oid_0
   \       0x1C   0x1986             ADDS     R6,R0,R6
    191              MBEDTLS_ASN1_CHK_ADD( len , mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_OID ) );
   \       0x1E   0x2206             MOVS     R2,#+6
   \       0x20   0x4629             MOV      R1,R5
   \       0x22   0x4620             MOV      R0,R4
   \       0x24   0x....'....        BL       mbedtls_asn1_write_tag
   \       0x28   0x2800             CMP      R0,#+0
   \       0x2A   0xD401             BMI.N    ??mbedtls_asn1_write_oid_0
    192          
    193              return( (int) len );
   \       0x2C   0x1986             ADDS     R6,R0,R6
   \       0x2E   0x4630             MOV      R0,R6
   \                     ??mbedtls_asn1_write_oid_0: (+1)
   \       0x30   0xBD70             POP      {R4-R6,PC}       ;; return
    194          }
    195          

   \                                 In section .text, align 2, keep-with-next
    196          int mbedtls_asn1_write_algorithm_identifier( unsigned char **p, unsigned char *start,
    197                                               const char *oid, size_t oid_len,
    198                                               size_t par_len )
    199          {
   \                     mbedtls_asn1_write_algorithm_identifier: (+1)
   \        0x0   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \        0x4   0x4605             MOV      R5,R0
   \        0x6   0x460E             MOV      R6,R1
   \        0x8   0x4617             MOV      R7,R2
   \        0xA   0x4698             MOV      R8,R3
   \        0xC   0x9C06             LDR      R4,[SP, #+24]
    200              int ret;
    201              size_t len = 0;
    202          
    203              if( par_len == 0 )
   \        0xE   0x2C00             CMP      R4,#+0
   \       0x10   0xD103             BNE.N    ??mbedtls_asn1_write_algorithm_identifier_0
    204                  MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_null( p, start ) );
   \       0x12   0x....'....        BL       mbedtls_asn1_write_null
   \       0x16   0x0004             MOVS     R4,R0
   \       0x18   0xD419             BMI.N    ??mbedtls_asn1_write_algorithm_identifier_1
    205              else
    206                  len += par_len;
    207          
    208              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_oid( p, start, oid, oid_len ) );
   \                     ??mbedtls_asn1_write_algorithm_identifier_0: (+1)
   \       0x1A   0x4643             MOV      R3,R8
   \       0x1C   0x463A             MOV      R2,R7
   \       0x1E   0x4631             MOV      R1,R6
   \       0x20   0x4628             MOV      R0,R5
   \       0x22   0x....'....        BL       mbedtls_asn1_write_oid
   \       0x26   0x2800             CMP      R0,#+0
   \       0x28   0xD411             BMI.N    ??mbedtls_asn1_write_algorithm_identifier_1
   \       0x2A   0x1904             ADDS     R4,R0,R4
    209          
    210              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
   \       0x2C   0x4622             MOV      R2,R4
   \       0x2E   0x4631             MOV      R1,R6
   \       0x30   0x4628             MOV      R0,R5
   \       0x32   0x....'....        BL       mbedtls_asn1_write_len
   \       0x36   0x2800             CMP      R0,#+0
   \       0x38   0xD409             BMI.N    ??mbedtls_asn1_write_algorithm_identifier_1
   \       0x3A   0x1904             ADDS     R4,R0,R4
    211              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start,
    212                                                 MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) );
   \       0x3C   0x2230             MOVS     R2,#+48
   \       0x3E   0x4631             MOV      R1,R6
   \       0x40   0x4628             MOV      R0,R5
   \       0x42   0x....'....        BL       mbedtls_asn1_write_tag
   \       0x46   0x2800             CMP      R0,#+0
   \       0x48   0xD401             BMI.N    ??mbedtls_asn1_write_algorithm_identifier_1
    213          
    214              return( (int) len );
   \       0x4A   0x1904             ADDS     R4,R0,R4
   \       0x4C   0x4620             MOV      R0,R4
   \                     ??mbedtls_asn1_write_algorithm_identifier_1: (+1)
   \       0x4E   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    215          }
    216          

   \                                 In section .text, align 2, keep-with-next
    217          int mbedtls_asn1_write_bool( unsigned char **p, unsigned char *start, int boolean )
    218          {
   \                     mbedtls_asn1_write_bool: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
    219              int ret;
    220              size_t len = 0;
    221          
    222              if( *p - start < 1 )
   \        0x6   0x6820             LDR      R0,[R4, #+0]
   \        0x8   0x1B40             SUBS     R0,R0,R5
   \        0xA   0x2801             CMP      R0,#+1
   \        0xC   0xDA02             BGE.N    ??mbedtls_asn1_write_bool_0
    223                  return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
   \        0xE   0xF06F 0x006B      MVN      R0,#+107
   \       0x12   0xBD70             POP      {R4-R6,PC}
    224          
    225              *--(*p) = (boolean) ? 255 : 0;
   \                     ??mbedtls_asn1_write_bool_0: (+1)
   \       0x14   0x6820             LDR      R0,[R4, #+0]
   \       0x16   0x1E40             SUBS     R0,R0,#+1
   \       0x18   0x6020             STR      R0,[R4, #+0]
   \       0x1A   0x2A00             CMP      R2,#+0
   \       0x1C   0xD001             BEQ.N    ??mbedtls_asn1_write_bool_1
   \       0x1E   0x21FF             MOVS     R1,#+255
   \       0x20   0xE000             B.N      ??mbedtls_asn1_write_bool_2
   \                     ??mbedtls_asn1_write_bool_1: (+1)
   \       0x22   0x2100             MOVS     R1,#+0
   \                     ??mbedtls_asn1_write_bool_2: (+1)
   \       0x24   0x7001             STRB     R1,[R0, #+0]
    226              len++;
    227          
    228              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
   \       0x26   0x2201             MOVS     R2,#+1
   \       0x28   0x4629             MOV      R1,R5
   \       0x2A   0x4620             MOV      R0,R4
   \       0x2C   0x....'....        BL       mbedtls_asn1_write_len
   \       0x30   0x0006             MOVS     R6,R0
   \       0x32   0xD409             BMI.N    ??mbedtls_asn1_write_bool_3
   \       0x34   0x1C76             ADDS     R6,R6,#+1
    229              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_BOOLEAN ) );
   \       0x36   0x2201             MOVS     R2,#+1
   \       0x38   0x4629             MOV      R1,R5
   \       0x3A   0x4620             MOV      R0,R4
   \       0x3C   0x....'....        BL       mbedtls_asn1_write_tag
   \       0x40   0x2800             CMP      R0,#+0
   \       0x42   0xD401             BMI.N    ??mbedtls_asn1_write_bool_3
    230          
    231              return( (int) len );
   \       0x44   0x1986             ADDS     R6,R0,R6
   \       0x46   0x4630             MOV      R0,R6
   \                     ??mbedtls_asn1_write_bool_3: (+1)
   \       0x48   0xBD70             POP      {R4-R6,PC}       ;; return
    232          }
    233          

   \                                 In section .text, align 2, keep-with-next
    234          int mbedtls_asn1_write_int( unsigned char **p, unsigned char *start, int val )
    235          {
   \                     mbedtls_asn1_write_int: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
    236              int ret;
    237              size_t len = 0;
    238          
    239              if( *p - start < 1 )
   \        0x6   0x6820             LDR      R0,[R4, #+0]
   \        0x8   0x1B40             SUBS     R0,R0,R5
   \        0xA   0x2801             CMP      R0,#+1
   \        0xC   0xDB0E             BLT.N    ??mbedtls_asn1_write_int_0
    240                  return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
    241          
    242              len += 1;
   \        0xE   0x2601             MOVS     R6,#+1
    243              *--(*p) = val;
   \       0x10   0x6820             LDR      R0,[R4, #+0]
   \       0x12   0x1E40             SUBS     R0,R0,#+1
   \       0x14   0x6020             STR      R0,[R4, #+0]
   \       0x16   0x7002             STRB     R2,[R0, #+0]
    244          
    245              if( val > 0 && **p & 0x80 )
   \       0x18   0x2A01             CMP      R2,#+1
   \       0x1A   0xDB11             BLT.N    ??mbedtls_asn1_write_int_1
   \       0x1C   0x6820             LDR      R0,[R4, #+0]
   \       0x1E   0x7800             LDRB     R0,[R0, #+0]
   \       0x20   0x0600             LSLS     R0,R0,#+24
   \       0x22   0xD50D             BPL.N    ??mbedtls_asn1_write_int_1
    246              {
    247                  if( *p - start < 1 )
   \       0x24   0x6820             LDR      R0,[R4, #+0]
   \       0x26   0x1B40             SUBS     R0,R0,R5
   \       0x28   0x2801             CMP      R0,#+1
   \       0x2A   0xDA02             BGE.N    ??mbedtls_asn1_write_int_2
    248                      return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
   \                     ??mbedtls_asn1_write_int_0: (+1)
   \       0x2C   0xF06F 0x006B      MVN      R0,#+107
   \       0x30   0xBD70             POP      {R4-R6,PC}
    249          
    250                  *--(*p) = 0x00;
   \                     ??mbedtls_asn1_write_int_2: (+1)
   \       0x32   0x6820             LDR      R0,[R4, #+0]
   \       0x34   0x1E40             SUBS     R0,R0,#+1
   \       0x36   0x6020             STR      R0,[R4, #+0]
   \       0x38   0x2000             MOVS     R0,#+0
   \       0x3A   0x6821             LDR      R1,[R4, #+0]
   \       0x3C   0x7008             STRB     R0,[R1, #+0]
    251                  len += 1;
   \       0x3E   0x2602             MOVS     R6,#+2
    252              }
    253          
    254              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
   \                     ??mbedtls_asn1_write_int_1: (+1)
   \       0x40   0x4632             MOV      R2,R6
   \       0x42   0x4629             MOV      R1,R5
   \       0x44   0x4620             MOV      R0,R4
   \       0x46   0x....'....        BL       mbedtls_asn1_write_len
   \       0x4A   0x2800             CMP      R0,#+0
   \       0x4C   0xD409             BMI.N    ??mbedtls_asn1_write_int_3
   \       0x4E   0x1986             ADDS     R6,R0,R6
    255              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_INTEGER ) );
   \       0x50   0x2202             MOVS     R2,#+2
   \       0x52   0x4629             MOV      R1,R5
   \       0x54   0x4620             MOV      R0,R4
   \       0x56   0x....'....        BL       mbedtls_asn1_write_tag
   \       0x5A   0x2800             CMP      R0,#+0
   \       0x5C   0xD401             BMI.N    ??mbedtls_asn1_write_int_3
    256          
    257              return( (int) len );
   \       0x5E   0x1986             ADDS     R6,R0,R6
   \       0x60   0x4630             MOV      R0,R6
   \                     ??mbedtls_asn1_write_int_3: (+1)
   \       0x62   0xBD70             POP      {R4-R6,PC}       ;; return
    258          }
    259          

   \                                 In section .text, align 2, keep-with-next
    260          int mbedtls_asn1_write_printable_string( unsigned char **p, unsigned char *start,
    261                                           const char *text, size_t text_len )
    262          {
   \                     mbedtls_asn1_write_printable_string: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
    263              int ret;
    264              size_t len = 0;
    265          
    266              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_raw_buffer( p, start,
    267                            (const unsigned char *) text, text_len ) );
   \        0x6   0x....'....        BL       mbedtls_asn1_write_raw_buffer
   \        0xA   0x0006             MOVS     R6,R0
   \        0xC   0xD410             BMI.N    ??mbedtls_asn1_write_printable_string_0
    268          
    269              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
   \        0xE   0x4632             MOV      R2,R6
   \       0x10   0x4629             MOV      R1,R5
   \       0x12   0x4620             MOV      R0,R4
   \       0x14   0x....'....        BL       mbedtls_asn1_write_len
   \       0x18   0x2800             CMP      R0,#+0
   \       0x1A   0xD409             BMI.N    ??mbedtls_asn1_write_printable_string_0
   \       0x1C   0x1986             ADDS     R6,R0,R6
    270              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_PRINTABLE_STRING ) );
   \       0x1E   0x2213             MOVS     R2,#+19
   \       0x20   0x4629             MOV      R1,R5
   \       0x22   0x4620             MOV      R0,R4
   \       0x24   0x....'....        BL       mbedtls_asn1_write_tag
   \       0x28   0x2800             CMP      R0,#+0
   \       0x2A   0xD401             BMI.N    ??mbedtls_asn1_write_printable_string_0
    271          
    272              return( (int) len );
   \       0x2C   0x1986             ADDS     R6,R0,R6
   \       0x2E   0x4630             MOV      R0,R6
   \                     ??mbedtls_asn1_write_printable_string_0: (+1)
   \       0x30   0xBD70             POP      {R4-R6,PC}       ;; return
    273          }
    274          

   \                                 In section .text, align 2, keep-with-next
    275          int mbedtls_asn1_write_ia5_string( unsigned char **p, unsigned char *start,
    276                                     const char *text, size_t text_len )
    277          {
   \                     mbedtls_asn1_write_ia5_string: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
    278              int ret;
    279              size_t len = 0;
    280          
    281              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_raw_buffer( p, start,
    282                            (const unsigned char *) text, text_len ) );
   \        0x6   0x....'....        BL       mbedtls_asn1_write_raw_buffer
   \        0xA   0x0006             MOVS     R6,R0
   \        0xC   0xD410             BMI.N    ??mbedtls_asn1_write_ia5_string_0
    283          
    284              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
   \        0xE   0x4632             MOV      R2,R6
   \       0x10   0x4629             MOV      R1,R5
   \       0x12   0x4620             MOV      R0,R4
   \       0x14   0x....'....        BL       mbedtls_asn1_write_len
   \       0x18   0x2800             CMP      R0,#+0
   \       0x1A   0xD409             BMI.N    ??mbedtls_asn1_write_ia5_string_0
   \       0x1C   0x1986             ADDS     R6,R0,R6
    285              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_IA5_STRING ) );
   \       0x1E   0x2216             MOVS     R2,#+22
   \       0x20   0x4629             MOV      R1,R5
   \       0x22   0x4620             MOV      R0,R4
   \       0x24   0x....'....        BL       mbedtls_asn1_write_tag
   \       0x28   0x2800             CMP      R0,#+0
   \       0x2A   0xD401             BMI.N    ??mbedtls_asn1_write_ia5_string_0
    286          
    287              return( (int) len );
   \       0x2C   0x1986             ADDS     R6,R0,R6
   \       0x2E   0x4630             MOV      R0,R6
   \                     ??mbedtls_asn1_write_ia5_string_0: (+1)
   \       0x30   0xBD70             POP      {R4-R6,PC}       ;; return
    288          }
    289          

   \                                 In section .text, align 2, keep-with-next
    290          int mbedtls_asn1_write_bitstring( unsigned char **p, unsigned char *start,
    291                                    const unsigned char *buf, size_t bits )
    292          {
   \                     mbedtls_asn1_write_bitstring: (+1)
   \        0x0   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \        0x4   0x4604             MOV      R4,R0
   \        0x6   0x460D             MOV      R5,R1
   \        0x8   0x4611             MOV      R1,R2
   \        0xA   0x461E             MOV      R6,R3
    293              int ret;
    294              size_t len = 0, size;
    295          
    296              size = ( bits / 8 ) + ( ( bits % 8 ) ? 1 : 0 );
   \        0xC   0xF006 0x0007      AND      R0,R6,#0x7
   \       0x10   0x1E47             SUBS     R7,R0,#+1
   \       0x12   0x41BF             SBCS     R7,R7,R7
   \       0x14   0x43FF             MVNS     R7,R7
   \       0x16   0x0FFF             LSRS     R7,R7,#+31
   \       0x18   0xEB07 0x07D6      ADD      R7,R7,R6, LSR #+3
    297          
    298              // Calculate byte length
    299              //
    300              if( *p < start || (size_t)( *p - start ) < size + 1 )
   \       0x1C   0x6820             LDR      R0,[R4, #+0]
   \       0x1E   0x42A8             CMP      R0,R5
   \       0x20   0xD303             BCC.N    ??mbedtls_asn1_write_bitstring_0
   \       0x22   0x1B40             SUBS     R0,R0,R5
   \       0x24   0x1C7A             ADDS     R2,R7,#+1
   \       0x26   0x4290             CMP      R0,R2
   \       0x28   0xD202             BCS.N    ??mbedtls_asn1_write_bitstring_1
    301                  return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
   \                     ??mbedtls_asn1_write_bitstring_0: (+1)
   \       0x2A   0xF06F 0x006B      MVN      R0,#+107
   \       0x2E   0xE01F             B.N      ??mbedtls_asn1_write_bitstring_2
    302          
    303              len = size + 1;
   \                     ??mbedtls_asn1_write_bitstring_1: (+1)
   \       0x30   0xF107 0x0801      ADD      R8,R7,#+1
    304              (*p) -= size;
   \       0x34   0x6820             LDR      R0,[R4, #+0]
   \       0x36   0x427A             RSBS     R2,R7,#+0
   \       0x38   0x4410             ADD      R0,R0,R2
   \       0x3A   0x6020             STR      R0,[R4, #+0]
    305              memcpy( *p, buf, size );
   \       0x3C   0x463A             MOV      R2,R7
   \       0x3E   0x....'....        BL       __aeabi_memcpy
    306          
    307              // Write unused bits
    308              //
    309              *--(*p) = (unsigned char) (size * 8 - bits);
   \       0x42   0x6820             LDR      R0,[R4, #+0]
   \       0x44   0x1E40             SUBS     R0,R0,#+1
   \       0x46   0x6020             STR      R0,[R4, #+0]
   \       0x48   0xEBC6 0x06C7      RSB      R6,R6,R7, LSL #+3
   \       0x4C   0x7006             STRB     R6,[R0, #+0]
    310          
    311              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
   \       0x4E   0x4642             MOV      R2,R8
   \       0x50   0x4629             MOV      R1,R5
   \       0x52   0x4620             MOV      R0,R4
   \       0x54   0x....'....        BL       mbedtls_asn1_write_len
   \       0x58   0x2800             CMP      R0,#+0
   \       0x5A   0xD409             BMI.N    ??mbedtls_asn1_write_bitstring_2
   \       0x5C   0x4480             ADD      R8,R0,R8
    312              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_BIT_STRING ) );
   \       0x5E   0x2203             MOVS     R2,#+3
   \       0x60   0x4629             MOV      R1,R5
   \       0x62   0x4620             MOV      R0,R4
   \       0x64   0x....'....        BL       mbedtls_asn1_write_tag
   \       0x68   0x2800             CMP      R0,#+0
   \       0x6A   0xD401             BMI.N    ??mbedtls_asn1_write_bitstring_2
    313          
    314              return( (int) len );
   \       0x6C   0x4480             ADD      R8,R0,R8
   \       0x6E   0x4640             MOV      R0,R8
   \                     ??mbedtls_asn1_write_bitstring_2: (+1)
   \       0x70   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    315          }
    316          

   \                                 In section .text, align 2, keep-with-next
    317          int mbedtls_asn1_write_octet_string( unsigned char **p, unsigned char *start,
    318                                       const unsigned char *buf, size_t size )
    319          {
   \                     mbedtls_asn1_write_octet_string: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
    320              int ret;
    321              size_t len = 0;
    322          
    323              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_raw_buffer( p, start, buf, size ) );
   \        0x6   0x....'....        BL       mbedtls_asn1_write_raw_buffer
   \        0xA   0x0006             MOVS     R6,R0
   \        0xC   0xD410             BMI.N    ??mbedtls_asn1_write_octet_string_0
    324          
    325              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
   \        0xE   0x4632             MOV      R2,R6
   \       0x10   0x4629             MOV      R1,R5
   \       0x12   0x4620             MOV      R0,R4
   \       0x14   0x....'....        BL       mbedtls_asn1_write_len
   \       0x18   0x2800             CMP      R0,#+0
   \       0x1A   0xD409             BMI.N    ??mbedtls_asn1_write_octet_string_0
   \       0x1C   0x1986             ADDS     R6,R0,R6
    326              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_OCTET_STRING ) );
   \       0x1E   0x2204             MOVS     R2,#+4
   \       0x20   0x4629             MOV      R1,R5
   \       0x22   0x4620             MOV      R0,R4
   \       0x24   0x....'....        BL       mbedtls_asn1_write_tag
   \       0x28   0x2800             CMP      R0,#+0
   \       0x2A   0xD401             BMI.N    ??mbedtls_asn1_write_octet_string_0
    327          
    328              return( (int) len );
   \       0x2C   0x1986             ADDS     R6,R0,R6
   \       0x2E   0x4630             MOV      R0,R6
   \                     ??mbedtls_asn1_write_octet_string_0: (+1)
   \       0x30   0xBD70             POP      {R4-R6,PC}       ;; return
    329          }
    330          

   \                                 In section .text, align 2, keep-with-next
    331          mbedtls_asn1_named_data *mbedtls_asn1_store_named_data( mbedtls_asn1_named_data **head,
    332                                                  const char *oid, size_t oid_len,
    333                                                  const unsigned char *val,
    334                                                  size_t val_len )
    335          {
   \                     mbedtls_asn1_store_named_data: (+1)
   \        0x0   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \        0x4   0x4606             MOV      R6,R0
   \        0x6   0x4688             MOV      R8,R1
   \        0x8   0x4691             MOV      R9,R2
   \        0xA   0x461D             MOV      R5,R3
   \        0xC   0x9F08             LDR      R7,[SP, #+32]
    336              mbedtls_asn1_named_data *cur;
    337          
    338              if( ( cur = mbedtls_asn1_find_named_data( *head, oid, oid_len ) ) == NULL )
   \        0xE   0x6830             LDR      R0,[R6, #+0]
   \       0x10   0x....'....        BL       mbedtls_asn1_find_named_data
   \       0x14   0x0004             MOVS     R4,R0
   \       0x16   0xD12B             BNE.N    ??mbedtls_asn1_store_named_data_0
    339              {
    340                  // Add new entry if not present yet based on OID
    341                  //
    342                  cur = (mbedtls_asn1_named_data*)mbedtls_calloc( 1,
    343                                                      sizeof(mbedtls_asn1_named_data) );
   \       0x18   0x2120             MOVS     R1,#+32
   \       0x1A   0x2001             MOVS     R0,#+1
   \       0x1C   0x....'....        BL       mbedtls_calloc
   \       0x20   0x0004             MOVS     R4,R0
    344                  if( cur == NULL )
   \       0x22   0xD02E             BEQ.N    ??mbedtls_asn1_store_named_data_1
    345                      return( NULL );
    346          
    347                  cur->oid.len = oid_len;
   \       0x24   0xF8C4 0x9004      STR      R9,[R4, #+4]
    348                  cur->oid.p = mbedtls_calloc( 1, oid_len );
   \       0x28   0x4649             MOV      R1,R9
   \       0x2A   0x2001             MOVS     R0,#+1
   \       0x2C   0x....'....        BL       mbedtls_calloc
   \       0x30   0x60A0             STR      R0,[R4, #+8]
    349                  if( cur->oid.p == NULL )
   \       0x32   0x2800             CMP      R0,#+0
   \       0x34   0xD104             BNE.N    ??mbedtls_asn1_store_named_data_2
    350                  {
    351                      mbedtls_free( cur );
   \       0x36   0x4620             MOV      R0,R4
   \       0x38   0x....'....        BL       mbedtls_free
    352                      return( NULL );
   \       0x3C   0x2000             MOVS     R0,#+0
   \       0x3E   0xE02F             B.N      ??mbedtls_asn1_store_named_data_3
    353                  }
    354          
    355                  memcpy( cur->oid.p, oid, oid_len );
   \                     ??mbedtls_asn1_store_named_data_2: (+1)
   \       0x40   0x464A             MOV      R2,R9
   \       0x42   0x4641             MOV      R1,R8
   \       0x44   0x....'....        BL       __aeabi_memcpy
    356          
    357                  cur->val.len = val_len;
   \       0x48   0x6127             STR      R7,[R4, #+16]
    358                  cur->val.p = mbedtls_calloc( 1, val_len );
   \       0x4A   0x4639             MOV      R1,R7
   \       0x4C   0x2001             MOVS     R0,#+1
   \       0x4E   0x....'....        BL       mbedtls_calloc
   \       0x52   0x6160             STR      R0,[R4, #+20]
    359                  if( cur->val.p == NULL )
   \       0x54   0x2800             CMP      R0,#+0
   \       0x56   0xD107             BNE.N    ??mbedtls_asn1_store_named_data_4
    360                  {
    361                      mbedtls_free( cur->oid.p );
   \       0x58   0x68A0             LDR      R0,[R4, #+8]
   \       0x5A   0x....'....        BL       mbedtls_free
    362                      mbedtls_free( cur );
   \       0x5E   0x4620             MOV      R0,R4
   \       0x60   0x....'....        BL       mbedtls_free
    363                      return( NULL );
   \       0x64   0x2000             MOVS     R0,#+0
   \       0x66   0xE01B             B.N      ??mbedtls_asn1_store_named_data_3
    364                  }
    365          
    366                  cur->next = *head;
   \                     ??mbedtls_asn1_store_named_data_4: (+1)
   \       0x68   0x6830             LDR      R0,[R6, #+0]
   \       0x6A   0x61A0             STR      R0,[R4, #+24]
    367                  *head = cur;
   \       0x6C   0x6034             STR      R4,[R6, #+0]
   \       0x6E   0xE00F             B.N      ??mbedtls_asn1_store_named_data_5
    368              }
    369              else if( cur->val.len < val_len )
   \                     ??mbedtls_asn1_store_named_data_0: (+1)
   \       0x70   0x6920             LDR      R0,[R4, #+16]
   \       0x72   0x42B8             CMP      R0,R7
   \       0x74   0xD20C             BCS.N    ??mbedtls_asn1_store_named_data_5
    370              {
    371                  /*
    372                   * Enlarge existing value buffer if needed
    373                   * Preserve old data until the allocation succeeded, to leave list in
    374                   * a consistent state in case allocation fails.
    375                   */
    376                  void *p = mbedtls_calloc( 1, val_len );
   \       0x76   0x4639             MOV      R1,R7
   \       0x78   0x2001             MOVS     R0,#+1
   \       0x7A   0x....'....        BL       mbedtls_calloc
   \       0x7E   0x0006             MOVS     R6,R0
    377                  if( p == NULL )
   \       0x80   0xD101             BNE.N    ??mbedtls_asn1_store_named_data_6
    378                      return( NULL );
   \                     ??mbedtls_asn1_store_named_data_1: (+1)
   \       0x82   0x2000             MOVS     R0,#+0
   \       0x84   0xE00C             B.N      ??mbedtls_asn1_store_named_data_3
    379          
    380                  mbedtls_free( cur->val.p );
   \                     ??mbedtls_asn1_store_named_data_6: (+1)
   \       0x86   0x6960             LDR      R0,[R4, #+20]
   \       0x88   0x....'....        BL       mbedtls_free
    381                  cur->val.p = p;
   \       0x8C   0x6166             STR      R6,[R4, #+20]
    382                  cur->val.len = val_len;
   \       0x8E   0x6127             STR      R7,[R4, #+16]
    383              }
    384          
    385              if( val != NULL )
   \                     ??mbedtls_asn1_store_named_data_5: (+1)
   \       0x90   0x2D00             CMP      R5,#+0
   \       0x92   0xD004             BEQ.N    ??mbedtls_asn1_store_named_data_7
    386                  memcpy( cur->val.p, val, val_len );
   \       0x94   0x463A             MOV      R2,R7
   \       0x96   0x4629             MOV      R1,R5
   \       0x98   0x6960             LDR      R0,[R4, #+20]
   \       0x9A   0x....'....        BL       __aeabi_memcpy
    387          
    388              return( cur );
   \                     ??mbedtls_asn1_store_named_data_7: (+1)
   \       0x9E   0x4620             MOV      R0,R4
   \                     ??mbedtls_asn1_store_named_data_3: (+1)
   \       0xA0   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
    389          }
    390          #endif /* MBEDTLS_ASN1_WRITE_C */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   mbedtls_asn1_store_named_data
        32   -> __aeabi_memcpy
        32   -> mbedtls_asn1_find_named_data
        32   -> mbedtls_calloc
        32   -> mbedtls_free
      24   mbedtls_asn1_write_algorithm_identifier
        24   -> mbedtls_asn1_write_len
        24   -> mbedtls_asn1_write_null
        24   -> mbedtls_asn1_write_oid
        24   -> mbedtls_asn1_write_tag
      24   mbedtls_asn1_write_bitstring
        24   -> __aeabi_memcpy
        24   -> mbedtls_asn1_write_len
        24   -> mbedtls_asn1_write_tag
      16   mbedtls_asn1_write_bool
        16   -> mbedtls_asn1_write_len
        16   -> mbedtls_asn1_write_tag
      16   mbedtls_asn1_write_ia5_string
        16   -> mbedtls_asn1_write_len
        16   -> mbedtls_asn1_write_raw_buffer
        16   -> mbedtls_asn1_write_tag
      16   mbedtls_asn1_write_int
        16   -> mbedtls_asn1_write_len
        16   -> mbedtls_asn1_write_tag
       0   mbedtls_asn1_write_len
      24   mbedtls_asn1_write_mpi
        24   -> mbedtls_asn1_write_len
        24   -> mbedtls_asn1_write_tag
        24   -> mbedtls_mpi_size
        24   -> mbedtls_mpi_write_binary
      16   mbedtls_asn1_write_null
        16   -> mbedtls_asn1_write_len
        16   -> mbedtls_asn1_write_tag
      16   mbedtls_asn1_write_octet_string
        16   -> mbedtls_asn1_write_len
        16   -> mbedtls_asn1_write_raw_buffer
        16   -> mbedtls_asn1_write_tag
      16   mbedtls_asn1_write_oid
        16   -> mbedtls_asn1_write_len
        16   -> mbedtls_asn1_write_raw_buffer
        16   -> mbedtls_asn1_write_tag
      16   mbedtls_asn1_write_printable_string
        16   -> mbedtls_asn1_write_len
        16   -> mbedtls_asn1_write_raw_buffer
        16   -> mbedtls_asn1_write_tag
      16   mbedtls_asn1_write_raw_buffer
        16   -> __aeabi_memcpy
       0   mbedtls_asn1_write_tag


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     164  mbedtls_asn1_store_named_data
      82  mbedtls_asn1_write_algorithm_identifier
     116  mbedtls_asn1_write_bitstring
      74  mbedtls_asn1_write_bool
      50  mbedtls_asn1_write_ia5_string
     100  mbedtls_asn1_write_int
     272  mbedtls_asn1_write_len
     128  mbedtls_asn1_write_mpi
      36  mbedtls_asn1_write_null
      50  mbedtls_asn1_write_octet_string
      50  mbedtls_asn1_write_oid
      50  mbedtls_asn1_write_printable_string
      46  mbedtls_asn1_write_raw_buffer
      28  mbedtls_asn1_write_tag

 
 1 246 bytes in section .text
 
 1 246 bytes of CODE memory

Errors: none
Warnings: none
