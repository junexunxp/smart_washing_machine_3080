###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.3.193/W32 for ARM         10/Jun/2019  13:48:11
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\Development\smart_washing_machine_3080\mbedtls\library\des.c
#    Command line =  
#        -f C:\Users\nxf42695\AppData\Local\Temp\1\EWB6B4.tmp
#        (C:\Development\smart_washing_machine_3080\mbedtls\library\des.c -D
#        DEBUG -D USE_RTOS -D XIP_EXTERNAL_FLASH=1 -D XIP_BOOT_HEADER_ENABLE=1
#        -D CPU_MIMXRT1052DVL6B -D FSL_RTOS_FREE_RTOS -D PRINTF_ADVANCED_ENABLE
#        -D "MBEDTLS_CONFIG_FILE=\"ksdk_mbedtls_config.h\"" -lC
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list -lA
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list
#        --diag_suppress Pa082,Pa050 -o
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_d16 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" --preinclude
#        C:\Development\smart_washing_machine_3080/source\app_preinclude.h -I
#        C:\Development\smart_washing_machine_3080/board\ -I
#        C:\Development\smart_washing_machine_3080/source\ -I
#        C:\Development\smart_washing_machine_3080/CMSIS\ -I
#        C:\Development\smart_washing_machine_3080/amazon-freertos/freertos/portable\
#        -I C:\Development\smart_washing_machine_3080/amazon-freertos/include\
#        -I C:\Development\smart_washing_machine_3080/component/lists\ -I
#        C:\Development\smart_washing_machine_3080/component/serial_manager\ -I
#        C:\Development\smart_washing_machine_3080/component/uart\ -I
#        C:\Development\smart_washing_machine_3080/component/kv\ -I
#        C:\Development\smart_washing_machine_3080/component/kv/include\ -I
#        C:\Development\smart_washing_machine_3080/device\ -I
#        C:\Development\smart_washing_machine_3080/doc\ -I
#        C:\Development\smart_washing_machine_3080/drivers\ -I
#        C:\Development\smart_washing_machine_3080/src\ -I
#        C:\Development\smart_washing_machine_3080/startup\ -I
#        C:\Development\smart_washing_machine_3080/utilities\ -I
#        C:\Development\smart_washing_machine_3080/xip\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\atm\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_model\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_sign\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\infra\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\mqtt\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\external_libs\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\coap_cloud\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\CoAPPacket\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\server\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\os\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\awss_reset\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\mbedtls\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\ -I
#        C:\Development\smart_washing_machine_3080\mbedtls\port\ksdk\ -Om)
#    Locale       =  C
#    List file    =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list\des.lst
#    Object file  =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj\des.o
#
###############################################################################

C:\Development\smart_washing_machine_3080\mbedtls\library\des.c
      1          /*
      2           *  FIPS-46-3 compliant Triple-DES implementation
      3           *
      4           *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
      5           *  SPDX-License-Identifier: Apache-2.0
      6           *
      7           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
      8           *  not use this file except in compliance with the License.
      9           *  You may obtain a copy of the License at
     10           *
     11           *  http://www.apache.org/licenses/LICENSE-2.0
     12           *
     13           *  Unless required by applicable law or agreed to in writing, software
     14           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     15           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     16           *  See the License for the specific language governing permissions and
     17           *  limitations under the License.
     18           *
     19           *  This file is part of mbed TLS (https://tls.mbed.org)
     20           */
     21          /*
     22           *  DES, on which TDES is based, was originally designed by Horst Feistel
     23           *  at IBM in 1974, and was adopted as a standard by NIST (formerly NBS).
     24           *
     25           *  http://csrc.nist.gov/publications/fips/fips46-3/fips46-3.pdf
     26           */
     27          
     28          #if !defined(MBEDTLS_CONFIG_FILE)
     29          #include "mbedtls/config.h"
     30          #else
     31          #include MBEDTLS_CONFIG_FILE
     32          #endif
     33          
     34          #if defined(MBEDTLS_DES_C)
     35          
     36          #include "mbedtls/des.h"
     37          #include "mbedtls/platform_util.h"
     38          
     39          #include <string.h>
     40          
     41          #if defined(MBEDTLS_SELF_TEST)
     42          #if defined(MBEDTLS_PLATFORM_C)
     43          #include "mbedtls/platform.h"
     44          #else
     45          #include <stdio.h>
     46          #define mbedtls_printf printf
     47          #endif /* MBEDTLS_PLATFORM_C */
     48          #endif /* MBEDTLS_SELF_TEST */
     49          
     50          #if !defined(MBEDTLS_DES_ALT)
     51          
     52          /*
     53           * 32-bit integer manipulation macros (big endian)
     54           */
     55          #ifndef GET_UINT32_BE
     56          #define GET_UINT32_BE(n,b,i)                            \
     57          {                                                       \
     58              (n) = ( (uint32_t) (b)[(i)    ] << 24 )             \
     59                  | ( (uint32_t) (b)[(i) + 1] << 16 )             \
     60                  | ( (uint32_t) (b)[(i) + 2] <<  8 )             \
     61                  | ( (uint32_t) (b)[(i) + 3]       );            \
     62          }
     63          #endif
     64          
     65          #ifndef PUT_UINT32_BE
     66          #define PUT_UINT32_BE(n,b,i)                            \
     67          {                                                       \
     68              (b)[(i)    ] = (unsigned char) ( (n) >> 24 );       \
     69              (b)[(i) + 1] = (unsigned char) ( (n) >> 16 );       \
     70              (b)[(i) + 2] = (unsigned char) ( (n) >>  8 );       \
     71              (b)[(i) + 3] = (unsigned char) ( (n)       );       \
     72          }
     73          #endif
     74          
     75          /*
     76           * Expanded DES S-boxes
     77           */

   \                                 In section .rodata, align 4
     78          static const uint32_t SB1[64] =
   \                     SB1:
   \        0x0   0x0101'0400        DC32 16843776, 0, 65536, 16843780, 16842756, 66564, 4, 65536, 1024
   \              0x0000'0000  
   \              0x0001'0000  
   \              0x0101'0404  
   \              0x0101'0004  
   \              0x0001'0404  
   \              0x0000'0004  
   \              0x0001'0000  
   \              0x0000'0400  
   \       0x24   0x0101'0400        DC32 16843776, 16843780, 1024, 16778244, 16842756, 16777216, 4, 1028
   \              0x0101'0404  
   \              0x0000'0400  
   \              0x0100'0404  
   \              0x0101'0004  
   \              0x0100'0000  
   \              0x0000'0004  
   \              0x0000'0404  
   \       0x44   0x0100'0400        DC32 16778240, 16778240, 66560, 66560, 16842752, 16842752, 16778244
   \              0x0100'0400  
   \              0x0001'0400  
   \              0x0001'0400  
   \              0x0101'0000  
   \              0x0101'0000  
   \              0x0100'0404  
   \       0x60   0x0001'0004        DC32 65540, 16777220, 16777220, 65540, 0, 1028, 66564, 16777216, 65536
   \              0x0100'0004  
   \              0x0100'0004  
   \              0x0001'0004  
   \              0x0000'0000  
   \              0x0000'0404  
   \              0x0001'0404  
   \              0x0100'0000  
   \              0x0001'0000  
   \       0x84   0x0101'0404        DC32 16843780, 4, 16842752, 16843776, 16777216, 16777216, 1024
   \              0x0000'0004  
   \              0x0101'0000  
   \              0x0101'0400  
   \              0x0100'0000  
   \              0x0100'0000  
   \              0x0000'0400  
   \       0xA0   0x0101'0004        DC32 16842756, 65536, 66560, 16777220, 1024, 4, 16778244, 66564
   \              0x0001'0000  
   \              0x0001'0400  
   \              0x0100'0004  
   \              0x0000'0400  
   \              0x0000'0004  
   \              0x0100'0404  
   \              0x0001'0404  
   \       0xC0   0x0101'0404        DC32 16843780, 65540, 16842752, 16778244, 16777220, 1028, 66564
   \              0x0001'0004  
   \              0x0101'0000  
   \              0x0100'0404  
   \              0x0100'0004  
   \              0x0000'0404  
   \              0x0001'0404  
   \       0xDC   0x0101'0400        DC32 16843776, 1028, 16778240, 16778240, 0, 65540, 66560, 0, 16842756
   \              0x0000'0404  
   \              0x0100'0400  
   \              0x0100'0400  
   \              0x0000'0000  
   \              0x0001'0004  
   \              0x0001'0400  
   \              0x0000'0000  
   \              0x0101'0004  
     79          {
     80              0x01010400, 0x00000000, 0x00010000, 0x01010404,
     81              0x01010004, 0x00010404, 0x00000004, 0x00010000,
     82              0x00000400, 0x01010400, 0x01010404, 0x00000400,
     83              0x01000404, 0x01010004, 0x01000000, 0x00000004,
     84              0x00000404, 0x01000400, 0x01000400, 0x00010400,
     85              0x00010400, 0x01010000, 0x01010000, 0x01000404,
     86              0x00010004, 0x01000004, 0x01000004, 0x00010004,
     87              0x00000000, 0x00000404, 0x00010404, 0x01000000,
     88              0x00010000, 0x01010404, 0x00000004, 0x01010000,
     89              0x01010400, 0x01000000, 0x01000000, 0x00000400,
     90              0x01010004, 0x00010000, 0x00010400, 0x01000004,
     91              0x00000400, 0x00000004, 0x01000404, 0x00010404,
     92              0x01010404, 0x00010004, 0x01010000, 0x01000404,
     93              0x01000004, 0x00000404, 0x00010404, 0x01010400,
     94              0x00000404, 0x01000400, 0x01000400, 0x00000000,
     95              0x00010004, 0x00010400, 0x00000000, 0x01010004
     96          };
     97          

   \                                 In section .rodata, align 4
     98          static const uint32_t SB2[64] =
   \                     SB2:
   \        0x0   0x8010'8020        DC32 2148565024, 2147516416, 32768, 1081376, 1048576, 32, 2148532256
   \              0x8000'8000  
   \              0x0000'8000  
   \              0x0010'8020  
   \              0x0010'0000  
   \              0x0000'0020  
   \              0x8010'0020  
   \       0x1C   0x8000'8020        DC32 2147516448, 2147483680, 2148565024, 2148564992, 2147483648
   \              0x8000'0020  
   \              0x8010'8020  
   \              0x8010'8000  
   \              0x8000'0000  
   \       0x30   0x8000'8000        DC32 2147516416, 1048576, 32, 2148532256, 1081344, 1048608, 2147516448
   \              0x0010'0000  
   \              0x0000'0020  
   \              0x8010'0020  
   \              0x0010'8000  
   \              0x0010'0020  
   \              0x8000'8020  
   \       0x4C   0x0000'0000        DC32 0, 2147483648, 32768, 1081376, 2148532224, 1048608, 2147483680, 0
   \              0x8000'0000  
   \              0x0000'8000  
   \              0x0010'8020  
   \              0x8010'0000  
   \              0x0010'0020  
   \              0x8000'0020  
   \              0x0000'0000  
   \       0x6C   0x0010'8000        DC32 1081344, 32800, 2148564992, 2148532224, 32800, 0, 1081376
   \              0x0000'8020  
   \              0x8010'8000  
   \              0x8010'0000  
   \              0x0000'8020  
   \              0x0000'0000  
   \              0x0010'8020  
   \       0x88   0x8010'0020        DC32 2148532256, 1048576, 2147516448, 2148532224, 2148564992, 32768
   \              0x0010'0000  
   \              0x8000'8020  
   \              0x8010'0000  
   \              0x8010'8000  
   \              0x0000'8000  
   \       0xA0   0x8010'0000        DC32 2148532224, 2147516416, 32, 2148565024, 1081376, 32, 32768
   \              0x8000'8000  
   \              0x0000'0020  
   \              0x8010'8020  
   \              0x0010'8020  
   \              0x0000'0020  
   \              0x0000'8000  
   \       0xBC   0x8000'0000        DC32 2147483648, 32800, 2148564992, 1048576, 2147483680, 1048608
   \              0x0000'8020  
   \              0x8010'8000  
   \              0x0010'0000  
   \              0x8000'0020  
   \              0x0010'0020  
   \       0xD4   0x8000'8020        DC32 2147516448, 2147483680, 1048608, 1081344, 0, 2147516416, 32800
   \              0x8000'0020  
   \              0x0010'0020  
   \              0x0010'8000  
   \              0x0000'0000  
   \              0x8000'8000  
   \              0x0000'8020  
   \       0xF0   0x8000'0000        DC32 2147483648, 2148532256, 2148565024, 1081344
   \              0x8010'0020  
   \              0x8010'8020  
   \              0x0010'8000  
     99          {
    100              0x80108020, 0x80008000, 0x00008000, 0x00108020,
    101              0x00100000, 0x00000020, 0x80100020, 0x80008020,
    102              0x80000020, 0x80108020, 0x80108000, 0x80000000,
    103              0x80008000, 0x00100000, 0x00000020, 0x80100020,
    104              0x00108000, 0x00100020, 0x80008020, 0x00000000,
    105              0x80000000, 0x00008000, 0x00108020, 0x80100000,
    106              0x00100020, 0x80000020, 0x00000000, 0x00108000,
    107              0x00008020, 0x80108000, 0x80100000, 0x00008020,
    108              0x00000000, 0x00108020, 0x80100020, 0x00100000,
    109              0x80008020, 0x80100000, 0x80108000, 0x00008000,
    110              0x80100000, 0x80008000, 0x00000020, 0x80108020,
    111              0x00108020, 0x00000020, 0x00008000, 0x80000000,
    112              0x00008020, 0x80108000, 0x00100000, 0x80000020,
    113              0x00100020, 0x80008020, 0x80000020, 0x00100020,
    114              0x00108000, 0x00000000, 0x80008000, 0x00008020,
    115              0x80000000, 0x80100020, 0x80108020, 0x00108000
    116          };
    117          

   \                                 In section .rodata, align 4
    118          static const uint32_t SB3[64] =
   \                     SB3:
   \        0x0   0x0000'0208        DC32 520, 134349312, 0, 134348808, 134218240, 0, 131592, 134218240
   \              0x0802'0200  
   \              0x0000'0000  
   \              0x0802'0008  
   \              0x0800'0200  
   \              0x0000'0000  
   \              0x0002'0208  
   \              0x0800'0200  
   \       0x20   0x0002'0008        DC32 131080, 134217736, 134217736, 131072, 134349320, 131080, 134348800
   \              0x0800'0008  
   \              0x0800'0008  
   \              0x0002'0000  
   \              0x0802'0208  
   \              0x0002'0008  
   \              0x0802'0000  
   \       0x3C   0x0000'0208        DC32 520, 134217728, 8, 134349312, 512, 131584, 134348800, 134348808
   \              0x0800'0000  
   \              0x0000'0008  
   \              0x0802'0200  
   \              0x0000'0200  
   \              0x0002'0200  
   \              0x0802'0000  
   \              0x0802'0008  
   \       0x5C   0x0002'0208        DC32 131592, 134218248, 131584, 131072, 134218248, 8, 134349320, 512
   \              0x0800'0208  
   \              0x0002'0200  
   \              0x0002'0000  
   \              0x0800'0208  
   \              0x0000'0008  
   \              0x0802'0208  
   \              0x0000'0200  
   \       0x7C   0x0800'0000        DC32 134217728, 134349312, 134217728, 131080, 520, 131072, 134349312
   \              0x0802'0200  
   \              0x0800'0000  
   \              0x0002'0008  
   \              0x0000'0208  
   \              0x0002'0000  
   \              0x0802'0200  
   \       0x98   0x0800'0200        DC32 134218240, 0, 512, 131080, 134349320, 134218240, 134217736, 512, 0
   \              0x0000'0000  
   \              0x0000'0200  
   \              0x0002'0008  
   \              0x0802'0208  
   \              0x0800'0200  
   \              0x0800'0008  
   \              0x0000'0200  
   \              0x0000'0000  
   \       0xBC   0x0802'0008        DC32 134348808, 134218248, 131072, 134217728, 134349320, 8, 131592
   \              0x0800'0208  
   \              0x0002'0000  
   \              0x0800'0000  
   \              0x0802'0208  
   \              0x0000'0008  
   \              0x0002'0208  
   \       0xD8   0x0002'0200        DC32 131584, 134217736, 134348800, 134218248, 520, 134348800, 131592, 8
   \              0x0800'0008  
   \              0x0802'0000  
   \              0x0800'0208  
   \              0x0000'0208  
   \              0x0802'0000  
   \              0x0002'0208  
   \              0x0000'0008  
   \       0xF8   0x0802'0008        DC32 134348808, 131584
   \              0x0002'0200  
    119          {
    120              0x00000208, 0x08020200, 0x00000000, 0x08020008,
    121              0x08000200, 0x00000000, 0x00020208, 0x08000200,
    122              0x00020008, 0x08000008, 0x08000008, 0x00020000,
    123              0x08020208, 0x00020008, 0x08020000, 0x00000208,
    124              0x08000000, 0x00000008, 0x08020200, 0x00000200,
    125              0x00020200, 0x08020000, 0x08020008, 0x00020208,
    126              0x08000208, 0x00020200, 0x00020000, 0x08000208,
    127              0x00000008, 0x08020208, 0x00000200, 0x08000000,
    128              0x08020200, 0x08000000, 0x00020008, 0x00000208,
    129              0x00020000, 0x08020200, 0x08000200, 0x00000000,
    130              0x00000200, 0x00020008, 0x08020208, 0x08000200,
    131              0x08000008, 0x00000200, 0x00000000, 0x08020008,
    132              0x08000208, 0x00020000, 0x08000000, 0x08020208,
    133              0x00000008, 0x00020208, 0x00020200, 0x08000008,
    134              0x08020000, 0x08000208, 0x00000208, 0x08020000,
    135              0x00020208, 0x00000008, 0x08020008, 0x00020200
    136          };
    137          

   \                                 In section .rodata, align 4
    138          static const uint32_t SB4[64] =
   \                     SB4:
   \        0x0   0x0080'2001        DC32 8396801, 8321, 8321, 128, 8396928, 8388737, 8388609, 8193, 0
   \              0x0000'2081  
   \              0x0000'2081  
   \              0x0000'0080  
   \              0x0080'2080  
   \              0x0080'0081  
   \              0x0080'0001  
   \              0x0000'2001  
   \              0x0000'0000  
   \       0x24   0x0080'2000        DC32 8396800, 8396800, 8396929, 129, 0, 8388736, 8388609, 1, 8192
   \              0x0080'2000  
   \              0x0080'2081  
   \              0x0000'0081  
   \              0x0000'0000  
   \              0x0080'0080  
   \              0x0080'0001  
   \              0x0000'0001  
   \              0x0000'2000  
   \       0x48   0x0080'0000        DC32 8388608, 8396801, 128, 8388608, 8193, 8320, 8388737, 1, 8320
   \              0x0080'2001  
   \              0x0000'0080  
   \              0x0080'0000  
   \              0x0000'2001  
   \              0x0000'2080  
   \              0x0080'0081  
   \              0x0000'0001  
   \              0x0000'2080  
   \       0x6C   0x0080'0080        DC32 8388736, 8192, 8396928, 8396929, 129, 8388736, 8388609, 8396800
   \              0x0000'2000  
   \              0x0080'2080  
   \              0x0080'2081  
   \              0x0000'0081  
   \              0x0080'0080  
   \              0x0080'0001  
   \              0x0080'2000  
   \       0x8C   0x0080'2081        DC32 8396929, 129, 0, 0, 8396800, 8320, 8388736, 8388737, 1, 8396801
   \              0x0000'0081  
   \              0x0000'0000  
   \              0x0000'0000  
   \              0x0080'2000  
   \              0x0000'2080  
   \              0x0080'0080  
   \              0x0080'0081  
   \              0x0000'0001  
   \              0x0080'2001  
   \       0xB4   0x0000'2081        DC32 8321, 8321, 128, 8396929, 129, 1, 8192, 8388609, 8193, 8396928
   \              0x0000'2081  
   \              0x0000'0080  
   \              0x0080'2081  
   \              0x0000'0081  
   \              0x0000'0001  
   \              0x0000'2000  
   \              0x0080'0001  
   \              0x0000'2001  
   \              0x0080'2080  
   \       0xDC   0x0080'0081        DC32 8388737, 8193, 8320, 8388608, 8396801, 128, 8388608, 8192, 8396928
   \              0x0000'2001  
   \              0x0000'2080  
   \              0x0080'0000  
   \              0x0080'2001  
   \              0x0000'0080  
   \              0x0080'0000  
   \              0x0000'2000  
   \              0x0080'2080  
    139          {
    140              0x00802001, 0x00002081, 0x00002081, 0x00000080,
    141              0x00802080, 0x00800081, 0x00800001, 0x00002001,
    142              0x00000000, 0x00802000, 0x00802000, 0x00802081,
    143              0x00000081, 0x00000000, 0x00800080, 0x00800001,
    144              0x00000001, 0x00002000, 0x00800000, 0x00802001,
    145              0x00000080, 0x00800000, 0x00002001, 0x00002080,
    146              0x00800081, 0x00000001, 0x00002080, 0x00800080,
    147              0x00002000, 0x00802080, 0x00802081, 0x00000081,
    148              0x00800080, 0x00800001, 0x00802000, 0x00802081,
    149              0x00000081, 0x00000000, 0x00000000, 0x00802000,
    150              0x00002080, 0x00800080, 0x00800081, 0x00000001,
    151              0x00802001, 0x00002081, 0x00002081, 0x00000080,
    152              0x00802081, 0x00000081, 0x00000001, 0x00002000,
    153              0x00800001, 0x00002001, 0x00802080, 0x00800081,
    154              0x00002001, 0x00002080, 0x00800000, 0x00802001,
    155              0x00000080, 0x00800000, 0x00002000, 0x00802080
    156          };
    157          

   \                                 In section .rodata, align 4
    158          static const uint32_t SB5[64] =
   \                     SB5:
   \        0x0   0x0000'0100        DC32 256, 34078976, 34078720, 1107296512, 524288, 256, 1073741824
   \              0x0208'0100  
   \              0x0208'0000  
   \              0x4200'0100  
   \              0x0008'0000  
   \              0x0000'0100  
   \              0x4000'0000  
   \       0x1C   0x0208'0000        DC32 34078720, 1074266368, 524288, 33554688, 1074266368, 1107296512
   \              0x4008'0100  
   \              0x0008'0000  
   \              0x0200'0100  
   \              0x4008'0100  
   \              0x4200'0100  
   \       0x34   0x4208'0000        DC32 1107820544, 524544, 1073741824, 33554432, 1074266112, 1074266112
   \              0x0008'0100  
   \              0x4000'0000  
   \              0x0200'0000  
   \              0x4008'0000  
   \              0x4008'0000  
   \       0x4C   0x0000'0000        DC32 0, 1073742080, 1107820800, 1107820800, 33554688, 1107820544
   \              0x4000'0100  
   \              0x4208'0100  
   \              0x4208'0100  
   \              0x0200'0100  
   \              0x4208'0000  
   \       0x64   0x4000'0100        DC32 1073742080, 0, 1107296256, 34078976, 33554432, 1107296256, 524544
   \              0x0000'0000  
   \              0x4200'0000  
   \              0x0208'0100  
   \              0x0200'0000  
   \              0x4200'0000  
   \              0x0008'0100  
   \       0x80   0x0008'0000        DC32 524288, 1107296512, 256, 33554432, 1073741824, 34078720
   \              0x4200'0100  
   \              0x0000'0100  
   \              0x0200'0000  
   \              0x4000'0000  
   \              0x0208'0000  
   \       0x98   0x4200'0100        DC32 1107296512, 1074266368, 33554688, 1073741824, 1107820544, 34078976
   \              0x4008'0100  
   \              0x0200'0100  
   \              0x4000'0000  
   \              0x4208'0000  
   \              0x0208'0100  
   \       0xB0   0x4008'0100        DC32 1074266368, 256, 33554432, 1107820544, 1107820800, 524544
   \              0x0000'0100  
   \              0x0200'0000  
   \              0x4208'0000  
   \              0x4208'0100  
   \              0x0008'0100  
   \       0xC8   0x4200'0000        DC32 1107296256, 1107820800, 34078720, 0, 1074266112, 1107296256
   \              0x4208'0100  
   \              0x0208'0000  
   \              0x0000'0000  
   \              0x4008'0000  
   \              0x4200'0000  
   \       0xE0   0x0008'0100        DC32 524544, 33554688, 1073742080, 524288, 0, 1074266112, 34078976
   \              0x0200'0100  
   \              0x4000'0100  
   \              0x0008'0000  
   \              0x0000'0000  
   \              0x4008'0000  
   \              0x0208'0100  
   \       0xFC   0x4000'0100        DC32 1073742080
    159          {
    160              0x00000100, 0x02080100, 0x02080000, 0x42000100,
    161              0x00080000, 0x00000100, 0x40000000, 0x02080000,
    162              0x40080100, 0x00080000, 0x02000100, 0x40080100,
    163              0x42000100, 0x42080000, 0x00080100, 0x40000000,
    164              0x02000000, 0x40080000, 0x40080000, 0x00000000,
    165              0x40000100, 0x42080100, 0x42080100, 0x02000100,
    166              0x42080000, 0x40000100, 0x00000000, 0x42000000,
    167              0x02080100, 0x02000000, 0x42000000, 0x00080100,
    168              0x00080000, 0x42000100, 0x00000100, 0x02000000,
    169              0x40000000, 0x02080000, 0x42000100, 0x40080100,
    170              0x02000100, 0x40000000, 0x42080000, 0x02080100,
    171              0x40080100, 0x00000100, 0x02000000, 0x42080000,
    172              0x42080100, 0x00080100, 0x42000000, 0x42080100,
    173              0x02080000, 0x00000000, 0x40080000, 0x42000000,
    174              0x00080100, 0x02000100, 0x40000100, 0x00080000,
    175              0x00000000, 0x40080000, 0x02080100, 0x40000100
    176          };
    177          

   \                                 In section .rodata, align 4
    178          static const uint32_t SB6[64] =
   \                     SB6:
   \        0x0   0x2000'0010        DC32 536870928, 541065216, 16384, 541081616, 541065216, 16, 541081616
   \              0x2040'0000  
   \              0x0000'4000  
   \              0x2040'4010  
   \              0x2040'0000  
   \              0x0000'0010  
   \              0x2040'4010  
   \       0x1C   0x0040'0000        DC32 4194304, 536887296, 4210704, 4194304, 536870928, 4194320
   \              0x2000'4000  
   \              0x0040'4010  
   \              0x0040'0000  
   \              0x2000'0010  
   \              0x0040'0010  
   \       0x34   0x2000'4000        DC32 536887296, 536870912, 16400, 0, 4194320, 536887312, 16384, 4210688
   \              0x2000'0000  
   \              0x0000'4010  
   \              0x0000'0000  
   \              0x0040'0010  
   \              0x2000'4010  
   \              0x0000'4000  
   \              0x0040'4000  
   \       0x54   0x2000'4010        DC32 536887312, 16, 541065232, 541065232, 0, 4210704, 541081600, 16400
   \              0x0000'0010  
   \              0x2040'0010  
   \              0x2040'0010  
   \              0x0000'0000  
   \              0x0040'4010  
   \              0x2040'4000  
   \              0x0000'4010  
   \       0x74   0x0040'4000        DC32 4210688, 541081600, 536870912, 536887296, 16, 541065232, 4210688
   \              0x2040'4000  
   \              0x2000'0000  
   \              0x2000'4000  
   \              0x0000'0010  
   \              0x2040'0010  
   \              0x0040'4000  
   \       0x90   0x2040'4010        DC32 541081616, 4194304, 16400, 536870928, 4194304, 536887296
   \              0x0040'0000  
   \              0x0000'4010  
   \              0x2000'0010  
   \              0x0040'0000  
   \              0x2000'4000  
   \       0xA8   0x2000'0000        DC32 536870912, 16400, 536870928, 541081616, 4210688, 541065216
   \              0x0000'4010  
   \              0x2000'0010  
   \              0x2040'4010  
   \              0x0040'4000  
   \              0x2040'0000  
   \       0xC0   0x0040'4010        DC32 4210704, 541081600, 0, 541065232, 16, 16384, 541065216, 4210704
   \              0x2040'4000  
   \              0x0000'0000  
   \              0x2040'0010  
   \              0x0000'0010  
   \              0x0000'4000  
   \              0x2040'0000  
   \              0x0040'4010  
   \       0xE0   0x0000'4000        DC32 16384, 4194320, 536887312, 0, 541081600, 536870912, 4194320
   \              0x0040'0010  
   \              0x2000'4010  
   \              0x0000'0000  
   \              0x2040'4000  
   \              0x2000'0000  
   \              0x0040'0010  
   \       0xFC   0x2000'4010        DC32 536887312
    179          {
    180              0x20000010, 0x20400000, 0x00004000, 0x20404010,
    181              0x20400000, 0x00000010, 0x20404010, 0x00400000,
    182              0x20004000, 0x00404010, 0x00400000, 0x20000010,
    183              0x00400010, 0x20004000, 0x20000000, 0x00004010,
    184              0x00000000, 0x00400010, 0x20004010, 0x00004000,
    185              0x00404000, 0x20004010, 0x00000010, 0x20400010,
    186              0x20400010, 0x00000000, 0x00404010, 0x20404000,
    187              0x00004010, 0x00404000, 0x20404000, 0x20000000,
    188              0x20004000, 0x00000010, 0x20400010, 0x00404000,
    189              0x20404010, 0x00400000, 0x00004010, 0x20000010,
    190              0x00400000, 0x20004000, 0x20000000, 0x00004010,
    191              0x20000010, 0x20404010, 0x00404000, 0x20400000,
    192              0x00404010, 0x20404000, 0x00000000, 0x20400010,
    193              0x00000010, 0x00004000, 0x20400000, 0x00404010,
    194              0x00004000, 0x00400010, 0x20004010, 0x00000000,
    195              0x20404000, 0x20000000, 0x00400010, 0x20004010
    196          };
    197          

   \                                 In section .rodata, align 4
    198          static const uint32_t SB7[64] =
   \                     SB7:
   \        0x0   0x0020'0000        DC32 2097152, 69206018, 67110914, 0, 2048, 67110914, 2099202, 69208064
   \              0x0420'0002  
   \              0x0400'0802  
   \              0x0000'0000  
   \              0x0000'0800  
   \              0x0400'0802  
   \              0x0020'0802  
   \              0x0420'0800  
   \       0x20   0x0420'0802        DC32 69208066, 2097152, 0, 67108866, 2, 67108864, 69206018, 2050
   \              0x0020'0000  
   \              0x0000'0000  
   \              0x0400'0002  
   \              0x0000'0002  
   \              0x0400'0000  
   \              0x0420'0002  
   \              0x0000'0802  
   \       0x40   0x0400'0800        DC32 67110912, 2099202, 2097154, 67110912, 67108866, 69206016, 69208064
   \              0x0020'0802  
   \              0x0020'0002  
   \              0x0400'0800  
   \              0x0400'0002  
   \              0x0420'0000  
   \              0x0420'0800  
   \       0x5C   0x0020'0002        DC32 2097154, 69206016, 2048, 2050, 69208066, 2099200, 2, 67108864
   \              0x0420'0000  
   \              0x0000'0800  
   \              0x0000'0802  
   \              0x0420'0802  
   \              0x0020'0800  
   \              0x0000'0002  
   \              0x0400'0000  
   \       0x7C   0x0020'0800        DC32 2099200, 67108864, 2099200, 2097152, 67110914, 67110914, 69206018
   \              0x0400'0000  
   \              0x0020'0800  
   \              0x0020'0000  
   \              0x0400'0802  
   \              0x0400'0802  
   \              0x0420'0002  
   \       0x98   0x0420'0002        DC32 69206018, 2, 2097154, 67108864, 67110912, 2097152, 69208064, 2050
   \              0x0000'0002  
   \              0x0020'0002  
   \              0x0400'0000  
   \              0x0400'0800  
   \              0x0020'0000  
   \              0x0420'0800  
   \              0x0000'0802  
   \       0xB8   0x0020'0802        DC32 2099202, 69208064, 2050, 67108866, 69208066, 69206016, 2099200, 0
   \              0x0420'0800  
   \              0x0000'0802  
   \              0x0400'0002  
   \              0x0420'0802  
   \              0x0420'0000  
   \              0x0020'0800  
   \              0x0000'0000  
   \       0xD8   0x0000'0002        DC32 2, 69208066, 0, 2099202, 69206016, 2048, 67108866, 67110912, 2048
   \              0x0420'0802  
   \              0x0000'0000  
   \              0x0020'0802  
   \              0x0420'0000  
   \              0x0000'0800  
   \              0x0400'0002  
   \              0x0400'0800  
   \              0x0000'0800  
   \       0xFC   0x0020'0002        DC32 2097154
    199          {
    200              0x00200000, 0x04200002, 0x04000802, 0x00000000,
    201              0x00000800, 0x04000802, 0x00200802, 0x04200800,
    202              0x04200802, 0x00200000, 0x00000000, 0x04000002,
    203              0x00000002, 0x04000000, 0x04200002, 0x00000802,
    204              0x04000800, 0x00200802, 0x00200002, 0x04000800,
    205              0x04000002, 0x04200000, 0x04200800, 0x00200002,
    206              0x04200000, 0x00000800, 0x00000802, 0x04200802,
    207              0x00200800, 0x00000002, 0x04000000, 0x00200800,
    208              0x04000000, 0x00200800, 0x00200000, 0x04000802,
    209              0x04000802, 0x04200002, 0x04200002, 0x00000002,
    210              0x00200002, 0x04000000, 0x04000800, 0x00200000,
    211              0x04200800, 0x00000802, 0x00200802, 0x04200800,
    212              0x00000802, 0x04000002, 0x04200802, 0x04200000,
    213              0x00200800, 0x00000000, 0x00000002, 0x04200802,
    214              0x00000000, 0x00200802, 0x04200000, 0x00000800,
    215              0x04000002, 0x04000800, 0x00000800, 0x00200002
    216          };
    217          

   \                                 In section .rodata, align 4
    218          static const uint32_t SB8[64] =
   \                     SB8:
   \        0x0   0x1000'1040        DC32 268439616, 4096, 262144, 268701760, 268435456, 268439616, 64
   \              0x0000'1000  
   \              0x0004'0000  
   \              0x1004'1040  
   \              0x1000'0000  
   \              0x1000'1040  
   \              0x0000'0040  
   \       0x1C   0x1000'0000        DC32 268435456, 262208, 268697600, 268701760, 266240, 268701696, 266304
   \              0x0004'0040  
   \              0x1004'0000  
   \              0x1004'1040  
   \              0x0004'1000  
   \              0x1004'1000  
   \              0x0004'1040  
   \       0x38   0x0000'1000        DC32 4096, 64, 268697600, 268435520, 268439552, 4160, 266240, 262208
   \              0x0000'0040  
   \              0x1004'0000  
   \              0x1000'0040  
   \              0x1000'1000  
   \              0x0000'1040  
   \              0x0004'1000  
   \              0x0004'0040  
   \       0x58   0x1004'0040        DC32 268697664, 268701696, 4160, 0, 0, 268697664, 268435520, 268439552
   \              0x1004'1000  
   \              0x0000'1040  
   \              0x0000'0000  
   \              0x0000'0000  
   \              0x1004'0040  
   \              0x1000'0040  
   \              0x1000'1000  
   \       0x78   0x0004'1040        DC32 266304, 262144, 266304, 262144, 268701696, 4096, 64, 268697664
   \              0x0004'0000  
   \              0x0004'1040  
   \              0x0004'0000  
   \              0x1004'1000  
   \              0x0000'1000  
   \              0x0000'0040  
   \              0x1004'0040  
   \       0x98   0x0000'1000        DC32 4096, 266304, 268439552, 64, 268435520, 268697600, 268697664
   \              0x0004'1040  
   \              0x1000'1000  
   \              0x0000'0040  
   \              0x1000'0040  
   \              0x1004'0000  
   \              0x1004'0040  
   \       0xB4   0x1000'0000        DC32 268435456, 262144, 268439616, 0, 268701760, 262208, 268435520
   \              0x0004'0000  
   \              0x1000'1040  
   \              0x0000'0000  
   \              0x1004'1040  
   \              0x0004'0040  
   \              0x1000'0040  
   \       0xD0   0x1004'0000        DC32 268697600, 268439552, 268439616, 0, 268701760, 266240, 266240
   \              0x1000'1000  
   \              0x1000'1040  
   \              0x0000'0000  
   \              0x1004'1040  
   \              0x0004'1000  
   \              0x0004'1000  
   \       0xEC   0x0000'1040        DC32 4160, 4160, 262208, 268435456, 268701696
   \              0x0000'1040  
   \              0x0004'0040  
   \              0x1000'0000  
   \              0x1004'1000  
    219          {
    220              0x10001040, 0x00001000, 0x00040000, 0x10041040,
    221              0x10000000, 0x10001040, 0x00000040, 0x10000000,
    222              0x00040040, 0x10040000, 0x10041040, 0x00041000,
    223              0x10041000, 0x00041040, 0x00001000, 0x00000040,
    224              0x10040000, 0x10000040, 0x10001000, 0x00001040,
    225              0x00041000, 0x00040040, 0x10040040, 0x10041000,
    226              0x00001040, 0x00000000, 0x00000000, 0x10040040,
    227              0x10000040, 0x10001000, 0x00041040, 0x00040000,
    228              0x00041040, 0x00040000, 0x10041000, 0x00001000,
    229              0x00000040, 0x10040040, 0x00001000, 0x00041040,
    230              0x10001000, 0x00000040, 0x10000040, 0x10040000,
    231              0x10040040, 0x10000000, 0x00040000, 0x10001040,
    232              0x00000000, 0x10041040, 0x00040040, 0x10000040,
    233              0x10040000, 0x10001000, 0x10001040, 0x00000000,
    234              0x10041040, 0x00041000, 0x00041000, 0x00001040,
    235              0x00001040, 0x00040040, 0x10000000, 0x10041000
    236          };
    237          
    238          /*
    239           * PC1: left and right halves bit-swap
    240           */

   \                                 In section .rodata, align 4
    241          static const uint32_t LHs[16] =
   \                     LHs:
   \        0x0   0x0000'0000        DC32 0, 1, 256, 257, 65536, 65537, 65792, 65793, 16777216, 16777217
   \              0x0000'0001  
   \              0x0000'0100  
   \              0x0000'0101  
   \              0x0001'0000  
   \              0x0001'0001  
   \              0x0001'0100  
   \              0x0001'0101  
   \              0x0100'0000  
   \              0x0100'0001  
   \       0x28   0x0100'0100        DC32 16777472, 16777473, 16842752, 16842753, 16843008, 16843009
   \              0x0100'0101  
   \              0x0101'0000  
   \              0x0101'0001  
   \              0x0101'0100  
   \              0x0101'0101  
    242          {
    243              0x00000000, 0x00000001, 0x00000100, 0x00000101,
    244              0x00010000, 0x00010001, 0x00010100, 0x00010101,
    245              0x01000000, 0x01000001, 0x01000100, 0x01000101,
    246              0x01010000, 0x01010001, 0x01010100, 0x01010101
    247          };
    248          

   \                                 In section .rodata, align 4
    249          static const uint32_t RHs[16] =
   \                     RHs:
   \        0x0   0x0000'0000        DC32 0, 16777216, 65536, 16842752, 256, 16777472, 65792, 16843008, 1
   \              0x0100'0000  
   \              0x0001'0000  
   \              0x0101'0000  
   \              0x0000'0100  
   \              0x0100'0100  
   \              0x0001'0100  
   \              0x0101'0100  
   \              0x0000'0001  
   \       0x24   0x0100'0001        DC32 16777217, 65537, 16842753, 257, 16777473, 65793, 16843009
   \              0x0001'0001  
   \              0x0101'0001  
   \              0x0000'0101  
   \              0x0100'0101  
   \              0x0001'0101  
   \              0x0101'0101  
    250          {
    251              0x00000000, 0x01000000, 0x00010000, 0x01010000,
    252              0x00000100, 0x01000100, 0x00010100, 0x01010100,
    253              0x00000001, 0x01000001, 0x00010001, 0x01010001,
    254              0x00000101, 0x01000101, 0x00010101, 0x01010101,
    255          };
    256          
    257          /*
    258           * Initial Permutation macro
    259           */
    260          #define DES_IP(X,Y)                                             \
    261          {                                                               \
    262              T = ((X >>  4) ^ Y) & 0x0F0F0F0F; Y ^= T; X ^= (T <<  4);   \
    263              T = ((X >> 16) ^ Y) & 0x0000FFFF; Y ^= T; X ^= (T << 16);   \
    264              T = ((Y >>  2) ^ X) & 0x33333333; X ^= T; Y ^= (T <<  2);   \
    265              T = ((Y >>  8) ^ X) & 0x00FF00FF; X ^= T; Y ^= (T <<  8);   \
    266              Y = ((Y << 1) | (Y >> 31)) & 0xFFFFFFFF;                    \
    267              T = (X ^ Y) & 0xAAAAAAAA; Y ^= T; X ^= T;                   \
    268              X = ((X << 1) | (X >> 31)) & 0xFFFFFFFF;                    \
    269          }
    270          
    271          /*
    272           * Final Permutation macro
    273           */
    274          #define DES_FP(X,Y)                                             \
    275          {                                                               \
    276              X = ((X << 31) | (X >> 1)) & 0xFFFFFFFF;                    \
    277              T = (X ^ Y) & 0xAAAAAAAA; X ^= T; Y ^= T;                   \
    278              Y = ((Y << 31) | (Y >> 1)) & 0xFFFFFFFF;                    \
    279              T = ((Y >>  8) ^ X) & 0x00FF00FF; X ^= T; Y ^= (T <<  8);   \
    280              T = ((Y >>  2) ^ X) & 0x33333333; X ^= T; Y ^= (T <<  2);   \
    281              T = ((X >> 16) ^ Y) & 0x0000FFFF; Y ^= T; X ^= (T << 16);   \
    282              T = ((X >>  4) ^ Y) & 0x0F0F0F0F; Y ^= T; X ^= (T <<  4);   \
    283          }
    284          
    285          /*
    286           * DES round macro
    287           */
    288          #define DES_ROUND(X,Y)                          \
    289          {                                               \
    290              T = *SK++ ^ X;                              \
    291              Y ^= SB8[ (T      ) & 0x3F ] ^              \
    292                   SB6[ (T >>  8) & 0x3F ] ^              \
    293                   SB4[ (T >> 16) & 0x3F ] ^              \
    294                   SB2[ (T >> 24) & 0x3F ];               \
    295                                                          \
    296              T = *SK++ ^ ((X << 28) | (X >> 4));         \
    297              Y ^= SB7[ (T      ) & 0x3F ] ^              \
    298                   SB5[ (T >>  8) & 0x3F ] ^              \
    299                   SB3[ (T >> 16) & 0x3F ] ^              \
    300                   SB1[ (T >> 24) & 0x3F ];               \
    301          }
    302          
    303          #define SWAP(a,b) { uint32_t t = a; a = b; b = t; t = 0; }
    304          

   \                                 In section .text, align 2, keep-with-next
    305          void mbedtls_des_init( mbedtls_des_context *ctx )
    306          {
    307              memset( ctx, 0, sizeof( mbedtls_des_context ) );
   \                     mbedtls_des_init: (+1)
   \        0x0   0x2200             MOVS     R2,#+0
   \        0x2   0x2180             MOVS     R1,#+128
   \        0x4   0x....'....        B.W      __aeabi_memset4
    308          }
    309          

   \                                 In section .text, align 2, keep-with-next
    310          void mbedtls_des_free( mbedtls_des_context *ctx )
    311          {
    312              if( ctx == NULL )
   \                     mbedtls_des_free: (+1)
   \        0x0   0x2800             CMP      R0,#+0
   \        0x2   0xD002             BEQ.N    ??mbedtls_des_free_0
    313                  return;
    314          
    315              mbedtls_platform_zeroize( ctx, sizeof( mbedtls_des_context ) );
   \        0x4   0x2180             MOVS     R1,#+128
   \        0x6   0x....'....        B.W      mbedtls_platform_zeroize
   \                     ??mbedtls_des_free_0: (+1)
   \        0xA   0x4770             BX       LR               ;; return
    316          }
    317          

   \                                 In section .text, align 2, keep-with-next
    318          void mbedtls_des3_init( mbedtls_des3_context *ctx )
    319          {
    320              memset( ctx, 0, sizeof( mbedtls_des3_context ) );
   \                     mbedtls_des3_init: (+1)
   \        0x0   0x2200             MOVS     R2,#+0
   \        0x2   0xF44F 0x71C0      MOV      R1,#+384
   \        0x6   0x....'....        B.W      __aeabi_memset4
    321          }
    322          

   \                                 In section .text, align 2, keep-with-next
    323          void mbedtls_des3_free( mbedtls_des3_context *ctx )
    324          {
    325              if( ctx == NULL )
   \                     mbedtls_des3_free: (+1)
   \        0x0   0x2800             CMP      R0,#+0
   \        0x2   0xD003             BEQ.N    ??mbedtls_des3_free_0
    326                  return;
    327          
    328              mbedtls_platform_zeroize( ctx, sizeof( mbedtls_des3_context ) );
   \        0x4   0xF44F 0x71C0      MOV      R1,#+384
   \        0x8   0x....'....        B.W      mbedtls_platform_zeroize
   \                     ??mbedtls_des3_free_0: (+1)
   \        0xC   0x4770             BX       LR               ;; return
    329          }
    330          

   \                                 In section .rodata, align 4
    331          static const unsigned char odd_parity_table[128] = { 1,  2,  4,  7,  8,
   \                     odd_parity_table:
   \        0x0   0x01 0x02          DC8 1, 2, 4, 7, 8, 11, 13, 14, 16, 19, 21, 22, 25, 26, 28, 31, 32, 35
   \              0x04 0x07    
   \              0x08 0x0B    
   \              0x0D 0x0E    
   \              0x10 0x13    
   \              0x15 0x16    
   \              0x19 0x1A    
   \              0x1C 0x1F    
   \              0x20 0x23    
   \       0x12   0x25 0x26          DC8 37, 38, 41, 42, 44, 47, 49, 50, 52, 55, 56, 59, 61, 62, 64, 67, 69
   \              0x29 0x2A    
   \              0x2C 0x2F    
   \              0x31 0x32    
   \              0x34 0x37    
   \              0x38 0x3B    
   \              0x3D 0x3E    
   \              0x40 0x43    
   \              0x45         
   \       0x23   0x46 0x49          DC8 70, 73, 74, 76, 79, 81, 82, 84, 87, 88, 91, 93, 94, 97, 98, 100
   \              0x4A 0x4C    
   \              0x4F 0x51    
   \              0x52 0x54    
   \              0x57 0x58    
   \              0x5B 0x5D    
   \              0x5E 0x61    
   \              0x62 0x64    
   \       0x33   0x67 0x68          DC8 103, 104, 107, 109, 110, 112, 115, 117, 118, 121, 122, 124, 127
   \              0x6B 0x6D    
   \              0x6E 0x70    
   \              0x73 0x75    
   \              0x76 0x79    
   \              0x7A 0x7C    
   \              0x7F         
   \       0x40   0x80 0x83          DC8 128, 131, 133, 134, 137, 138, 140, 143, 145, 146, 148, 151, 152
   \              0x85 0x86    
   \              0x89 0x8A    
   \              0x8C 0x8F    
   \              0x91 0x92    
   \              0x94 0x97    
   \              0x98         
   \       0x4D   0x9B 0x9D          DC8 155, 157, 158, 161, 162, 164, 167, 168, 171, 173, 174, 176, 179
   \              0x9E 0xA1    
   \              0xA2 0xA4    
   \              0xA7 0xA8    
   \              0xAB 0xAD    
   \              0xAE 0xB0    
   \              0xB3         
   \       0x5A   0xB5 0xB6          DC8 181, 182, 185, 186, 188, 191, 193, 194, 196, 199, 200, 203, 205
   \              0xB9 0xBA    
   \              0xBC 0xBF    
   \              0xC1 0xC2    
   \              0xC4 0xC7    
   \              0xC8 0xCB    
   \              0xCD         
   \       0x67   0xCE 0xD0          DC8 206, 208, 211, 213, 214, 217, 218, 220, 223, 224, 227, 229, 230
   \              0xD3 0xD5    
   \              0xD6 0xD9    
   \              0xDA 0xDC    
   \              0xDF 0xE0    
   \              0xE3 0xE5    
   \              0xE6         
   \       0x74   0xE9 0xEA          DC8 233, 234, 236, 239, 241, 242, 244, 247, 248, 251, 253, 254
   \              0xEC 0xEF    
   \              0xF1 0xF2    
   \              0xF4 0xF7    
   \              0xF8 0xFB    
   \              0xFD 0xFE    
    332                  11, 13, 14, 16, 19, 21, 22, 25, 26, 28, 31, 32, 35, 37, 38, 41, 42, 44,
    333                  47, 49, 50, 52, 55, 56, 59, 61, 62, 64, 67, 69, 70, 73, 74, 76, 79, 81,
    334                  82, 84, 87, 88, 91, 93, 94, 97, 98, 100, 103, 104, 107, 109, 110, 112,
    335                  115, 117, 118, 121, 122, 124, 127, 128, 131, 133, 134, 137, 138, 140,
    336                  143, 145, 146, 148, 151, 152, 155, 157, 158, 161, 162, 164, 167, 168,
    337                  171, 173, 174, 176, 179, 181, 182, 185, 186, 188, 191, 193, 194, 196,
    338                  199, 200, 203, 205, 206, 208, 211, 213, 214, 217, 218, 220, 223, 224,
    339                  227, 229, 230, 233, 234, 236, 239, 241, 242, 244, 247, 248, 251, 253,
    340                  254 };
    341          

   \                                 In section .text, align 2, keep-with-next
    342          void mbedtls_des_key_set_parity( unsigned char key[MBEDTLS_DES_KEY_SIZE] )
    343          {
    344              int i;
    345          
    346              for( i = 0; i < MBEDTLS_DES_KEY_SIZE; i++ )
   \                     mbedtls_des_key_set_parity: (+1)
   \        0x0   0x2100             MOVS     R1,#+0
   \        0x2   0xE006             B.N      ??mbedtls_des_key_set_parity_0
    347                  key[i] = odd_parity_table[key[i] / 2];
   \                     ??mbedtls_des_key_set_parity_1: (+1)
   \        0x4   0x....'....        LDR.W    R2,??DataTable6
   \        0x8   0x5C43             LDRB     R3,[R0, R1]
   \        0xA   0x105B             ASRS     R3,R3,#+1
   \        0xC   0x5CD2             LDRB     R2,[R2, R3]
   \        0xE   0x5442             STRB     R2,[R0, R1]
   \       0x10   0x1C49             ADDS     R1,R1,#+1
   \                     ??mbedtls_des_key_set_parity_0: (+1)
   \       0x12   0x2908             CMP      R1,#+8
   \       0x14   0xDBF6             BLT.N    ??mbedtls_des_key_set_parity_1
    348          }
   \       0x16   0x4770             BX       LR               ;; return
    349          
    350          /*
    351           * Check the given key's parity, returns 1 on failure, 0 on SUCCESS
    352           */

   \                                 In section .text, align 2, keep-with-next
    353          int mbedtls_des_key_check_key_parity( const unsigned char key[MBEDTLS_DES_KEY_SIZE] )
    354          {
   \                     mbedtls_des_key_check_key_parity: (+1)
   \        0x0   0xB410             PUSH     {R4}
    355              int i;
    356          
    357              for( i = 0; i < MBEDTLS_DES_KEY_SIZE; i++ )
   \        0x2   0x2100             MOVS     R1,#+0
   \        0x4   0xE000             B.N      ??mbedtls_des_key_check_key_parity_0
   \                     ??mbedtls_des_key_check_key_parity_1: (+1)
   \        0x6   0x1C49             ADDS     R1,R1,#+1
   \                     ??mbedtls_des_key_check_key_parity_0: (+1)
   \        0x8   0x2908             CMP      R1,#+8
   \        0xA   0xDA09             BGE.N    ??mbedtls_des_key_check_key_parity_2
    358                  if( key[i] != odd_parity_table[key[i] / 2] )
   \        0xC   0x5C42             LDRB     R2,[R0, R1]
   \        0xE   0x....'....        LDR.W    R3,??DataTable6
   \       0x12   0x4614             MOV      R4,R2
   \       0x14   0x1064             ASRS     R4,R4,#+1
   \       0x16   0x5D1B             LDRB     R3,[R3, R4]
   \       0x18   0x429A             CMP      R2,R3
   \       0x1A   0xD0F4             BEQ.N    ??mbedtls_des_key_check_key_parity_1
    359                      return( 1 );
   \       0x1C   0x2001             MOVS     R0,#+1
   \       0x1E   0xE000             B.N      ??mbedtls_des_key_check_key_parity_3
    360          
    361              return( 0 );
   \                     ??mbedtls_des_key_check_key_parity_2: (+1)
   \       0x20   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_des_key_check_key_parity_3: (+1)
   \       0x22   0xBC10             POP      {R4}
   \       0x24   0x4770             BX       LR               ;; return
    362          }
    363          
    364          /*
    365           * Table of weak and semi-weak keys
    366           *
    367           * Source: http://en.wikipedia.org/wiki/Weak_key
    368           *
    369           * Weak:
    370           * Alternating ones + zeros (0x0101010101010101)
    371           * Alternating 'F' + 'E' (0xFEFEFEFEFEFEFEFE)
    372           * '0xE0E0E0E0F1F1F1F1'
    373           * '0x1F1F1F1F0E0E0E0E'
    374           *
    375           * Semi-weak:
    376           * 0x011F011F010E010E and 0x1F011F010E010E01
    377           * 0x01E001E001F101F1 and 0xE001E001F101F101
    378           * 0x01FE01FE01FE01FE and 0xFE01FE01FE01FE01
    379           * 0x1FE01FE00EF10EF1 and 0xE01FE01FF10EF10E
    380           * 0x1FFE1FFE0EFE0EFE and 0xFE1FFE1FFE0EFE0E
    381           * 0xE0FEE0FEF1FEF1FE and 0xFEE0FEE0FEF1FEF1
    382           *
    383           */
    384          
    385          #define WEAK_KEY_COUNT 16
    386          

   \                                 In section .rodata, align 4
    387          static const unsigned char weak_key_table[WEAK_KEY_COUNT][MBEDTLS_DES_KEY_SIZE] =
   \                     weak_key_table:
   \        0x0   0x01 0x01          DC8 1, 1, 1, 1, 1, 1, 1, 1, 254, 254, 254, 254, 254, 254, 254, 254, 31
   \              0x01 0x01    
   \              0x01 0x01    
   \              0x01 0x01    
   \              0xFE 0xFE    
   \              0xFE 0xFE    
   \              0xFE 0xFE    
   \              0xFE 0xFE    
   \              0x1F         
   \       0x11   0x1F 0x1F          DC8 31, 31, 31, 14, 14, 14, 14, 224, 224, 224, 224, 241, 241, 241, 241
   \              0x1F 0x0E    
   \              0x0E 0x0E    
   \              0x0E 0xE0    
   \              0xE0 0xE0    
   \              0xE0 0xF1    
   \              0xF1 0xF1    
   \              0xF1         
   \       0x20   0x01 0x1F          DC8 1, 31, 1, 31, 1, 14, 1, 14, 31, 1, 31, 1, 14, 1, 14, 1, 1, 224, 1
   \              0x01 0x1F    
   \              0x01 0x0E    
   \              0x01 0x0E    
   \              0x1F 0x01    
   \              0x1F 0x01    
   \              0x0E 0x01    
   \              0x0E 0x01    
   \              0x01 0xE0    
   \              0x01         
   \       0x33   0xE0 0x01          DC8 224, 1, 241, 1, 241, 224, 1, 224, 1, 241, 1, 241, 1, 1, 254, 1, 254
   \              0xF1 0x01    
   \              0xF1 0xE0    
   \              0x01 0xE0    
   \              0x01 0xF1    
   \              0x01 0xF1    
   \              0x01 0x01    
   \              0xFE 0x01    
   \              0xFE         
   \       0x44   0x01 0xFE          DC8 1, 254, 1, 254, 254, 1, 254, 1, 254, 1, 254, 1, 31, 224, 31, 224
   \              0x01 0xFE    
   \              0xFE 0x01    
   \              0xFE 0x01    
   \              0xFE 0x01    
   \              0xFE 0x01    
   \              0x1F 0xE0    
   \              0x1F 0xE0    
   \       0x54   0x0E 0xF1          DC8 14, 241, 14, 241, 224, 31, 224, 31, 241, 14, 241, 14, 31, 254, 31
   \              0x0E 0xF1    
   \              0xE0 0x1F    
   \              0xE0 0x1F    
   \              0xF1 0x0E    
   \              0xF1 0x0E    
   \              0x1F 0xFE    
   \              0x1F         
   \       0x63   0xFE 0x0E          DC8 254, 14, 254, 14, 254, 254, 31, 254, 31, 254, 14, 254, 14, 224, 254
   \              0xFE 0x0E    
   \              0xFE 0xFE    
   \              0x1F 0xFE    
   \              0x1F 0xFE    
   \              0x0E 0xFE    
   \              0x0E 0xE0    
   \              0xFE         
   \       0x72   0xE0 0xFE          DC8 224, 254, 241, 254, 241, 254, 254, 224, 254, 224, 254, 241, 254
   \              0xF1 0xFE    
   \              0xF1 0xFE    
   \              0xFE 0xE0    
   \              0xFE 0xE0    
   \              0xFE 0xF1    
   \              0xFE         
   \       0x7F   0xF1               DC8 241
    388          {
    389              { 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 },
    390              { 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE },
    391              { 0x1F, 0x1F, 0x1F, 0x1F, 0x0E, 0x0E, 0x0E, 0x0E },
    392              { 0xE0, 0xE0, 0xE0, 0xE0, 0xF1, 0xF1, 0xF1, 0xF1 },
    393          
    394              { 0x01, 0x1F, 0x01, 0x1F, 0x01, 0x0E, 0x01, 0x0E },
    395              { 0x1F, 0x01, 0x1F, 0x01, 0x0E, 0x01, 0x0E, 0x01 },
    396              { 0x01, 0xE0, 0x01, 0xE0, 0x01, 0xF1, 0x01, 0xF1 },
    397              { 0xE0, 0x01, 0xE0, 0x01, 0xF1, 0x01, 0xF1, 0x01 },
    398              { 0x01, 0xFE, 0x01, 0xFE, 0x01, 0xFE, 0x01, 0xFE },
    399              { 0xFE, 0x01, 0xFE, 0x01, 0xFE, 0x01, 0xFE, 0x01 },
    400              { 0x1F, 0xE0, 0x1F, 0xE0, 0x0E, 0xF1, 0x0E, 0xF1 },
    401              { 0xE0, 0x1F, 0xE0, 0x1F, 0xF1, 0x0E, 0xF1, 0x0E },
    402              { 0x1F, 0xFE, 0x1F, 0xFE, 0x0E, 0xFE, 0x0E, 0xFE },
    403              { 0xFE, 0x1F, 0xFE, 0x1F, 0xFE, 0x0E, 0xFE, 0x0E },
    404              { 0xE0, 0xFE, 0xE0, 0xFE, 0xF1, 0xFE, 0xF1, 0xFE },
    405              { 0xFE, 0xE0, 0xFE, 0xE0, 0xFE, 0xF1, 0xFE, 0xF1 }
    406          };
    407          

   \                                 In section .text, align 2, keep-with-next
    408          int mbedtls_des_key_check_weak( const unsigned char key[MBEDTLS_DES_KEY_SIZE] )
    409          {
   \                     mbedtls_des_key_check_weak: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4604             MOV      R4,R0
    410              int i;
    411          
    412              for( i = 0; i < WEAK_KEY_COUNT; i++ )
   \        0x4   0x2500             MOVS     R5,#+0
   \        0x6   0xE000             B.N      ??mbedtls_des_key_check_weak_0
   \                     ??mbedtls_des_key_check_weak_1: (+1)
   \        0x8   0x1C6D             ADDS     R5,R5,#+1
   \                     ??mbedtls_des_key_check_weak_0: (+1)
   \        0xA   0x2D10             CMP      R5,#+16
   \        0xC   0xDA0B             BGE.N    ??mbedtls_des_key_check_weak_2
    413                  if( memcmp( weak_key_table[i], key, MBEDTLS_DES_KEY_SIZE) == 0 )
   \        0xE   0x2208             MOVS     R2,#+8
   \       0x10   0x4621             MOV      R1,R4
   \       0x12   0x....'....        LDR.W    R0,??DataTable6_1
   \       0x16   0xEB00 0x00C5      ADD      R0,R0,R5, LSL #+3
   \       0x1A   0x....'....        BL       memcmp
   \       0x1E   0x2800             CMP      R0,#+0
   \       0x20   0xD1F2             BNE.N    ??mbedtls_des_key_check_weak_1
    414                      return( 1 );
   \       0x22   0x2001             MOVS     R0,#+1
   \       0x24   0xBD32             POP      {R1,R4,R5,PC}
    415          
    416              return( 0 );
   \                     ??mbedtls_des_key_check_weak_2: (+1)
   \       0x26   0x2000             MOVS     R0,#+0
   \       0x28   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    417          }
    418          
    419          #if !defined(MBEDTLS_DES_SETKEY_ALT)

   \                                 In section .text, align 2, keep-with-next
    420          void mbedtls_des_setkey( uint32_t SK[32], const unsigned char key[MBEDTLS_DES_KEY_SIZE] )
    421          {
   \                     mbedtls_des_setkey: (+1)
   \        0x0   0xB430             PUSH     {R4,R5}
    422              int i;
    423              uint32_t X, Y, T;
    424          
    425              GET_UINT32_BE( X, key, 0 );
   \        0x2   0x780A             LDRB     R2,[R1, #+0]
   \        0x4   0x784B             LDRB     R3,[R1, #+1]
   \        0x6   0x041B             LSLS     R3,R3,#+16
   \        0x8   0xEA43 0x6302      ORR      R3,R3,R2, LSL #+24
   \        0xC   0x788A             LDRB     R2,[R1, #+2]
   \        0xE   0xEA43 0x2302      ORR      R3,R3,R2, LSL #+8
   \       0x12   0x78CA             LDRB     R2,[R1, #+3]
   \       0x14   0x4313             ORRS     R3,R2,R3
    426              GET_UINT32_BE( Y, key, 4 );
   \       0x16   0x790C             LDRB     R4,[R1, #+4]
   \       0x18   0x794A             LDRB     R2,[R1, #+5]
   \       0x1A   0x0412             LSLS     R2,R2,#+16
   \       0x1C   0xEA42 0x6204      ORR      R2,R2,R4, LSL #+24
   \       0x20   0x798C             LDRB     R4,[R1, #+6]
   \       0x22   0xEA42 0x2204      ORR      R2,R2,R4, LSL #+8
   \       0x26   0x79C9             LDRB     R1,[R1, #+7]
   \       0x28   0x430A             ORRS     R2,R1,R2
    427          
    428              /*
    429               * Permuted Choice 1
    430               */
    431              T =  ((Y >>  4) ^ X) & 0x0F0F0F0F;  X ^= T; Y ^= (T <<  4);
   \       0x2A   0xEA83 0x1112      EOR      R1,R3,R2, LSR #+4
   \       0x2E   0xF021 0x31F0      BIC      R1,R1,#0xF0F0F0F0
   \       0x32   0x404B             EORS     R3,R1,R3
   \       0x34   0xEA82 0x1201      EOR      R2,R2,R1, LSL #+4
    432              T =  ((Y      ) ^ X) & 0x10101010;  X ^= T; Y ^= (T      );
   \       0x38   0xEA83 0x0102      EOR      R1,R3,R2
   \       0x3C   0xF021 0x31EF      BIC      R1,R1,#0xEFEFEFEF
   \       0x40   0x404B             EORS     R3,R1,R3
   \       0x42   0x404A             EORS     R2,R1,R2
    433          
    434              X =   (LHs[ (X      ) & 0xF] << 3) | (LHs[ (X >>  8) & 0xF ] << 2)
    435                  | (LHs[ (X >> 16) & 0xF] << 1) | (LHs[ (X >> 24) & 0xF ]     )
    436                  | (LHs[ (X >>  5) & 0xF] << 7) | (LHs[ (X >> 13) & 0xF ] << 6)
    437                  | (LHs[ (X >> 21) & 0xF] << 5) | (LHs[ (X >> 29) & 0xF ] << 4);
    438          
    439              Y =   (RHs[ (Y >>  1) & 0xF] << 3) | (RHs[ (Y >>  9) & 0xF ] << 2)
    440                  | (RHs[ (Y >> 17) & 0xF] << 1) | (RHs[ (Y >> 25) & 0xF ]     )
    441                  | (RHs[ (Y >>  4) & 0xF] << 7) | (RHs[ (Y >> 12) & 0xF ] << 6)
    442                  | (RHs[ (Y >> 20) & 0xF] << 5) | (RHs[ (Y >> 28) & 0xF ] << 4);
    443          
    444              X &= 0x0FFFFFFF;
   \       0x44   0x....'....        LDR.W    R5,??DataTable6_2
   \       0x48   0xF003 0x010F      AND      R1,R3,#0xF
   \       0x4C   0xF855 0x1021      LDR      R1,[R5, R1, LSL #+2]
   \       0x50   0xF3C3 0x2403      UBFX     R4,R3,#+8,#+4
   \       0x54   0xF855 0x4024      LDR      R4,[R5, R4, LSL #+2]
   \       0x58   0x00A4             LSLS     R4,R4,#+2
   \       0x5A   0xEA44 0x04C1      ORR      R4,R4,R1, LSL #+3
   \       0x5E   0xF3C3 0x4103      UBFX     R1,R3,#+16,#+4
   \       0x62   0xF855 0x1021      LDR      R1,[R5, R1, LSL #+2]
   \       0x66   0xEA44 0x0441      ORR      R4,R4,R1, LSL #+1
   \       0x6A   0xF3C3 0x6103      UBFX     R1,R3,#+24,#+4
   \       0x6E   0xF855 0x1021      LDR      R1,[R5, R1, LSL #+2]
   \       0x72   0x430C             ORRS     R4,R1,R4
   \       0x74   0xF3C3 0x1143      UBFX     R1,R3,#+5,#+4
   \       0x78   0xF855 0x1021      LDR      R1,[R5, R1, LSL #+2]
   \       0x7C   0xEA44 0x14C1      ORR      R4,R4,R1, LSL #+7
   \       0x80   0xF3C3 0x3143      UBFX     R1,R3,#+13,#+4
   \       0x84   0xF855 0x1021      LDR      R1,[R5, R1, LSL #+2]
   \       0x88   0xEA44 0x1481      ORR      R4,R4,R1, LSL #+6
   \       0x8C   0xF3C3 0x5143      UBFX     R1,R3,#+21,#+4
   \       0x90   0xF855 0x1021      LDR      R1,[R5, R1, LSL #+2]
   \       0x94   0xEA44 0x1441      ORR      R4,R4,R1, LSL #+5
   \       0x98   0x0F5B             LSRS     R3,R3,#+29
   \       0x9A   0xF855 0x1023      LDR      R1,[R5, R3, LSL #+2]
   \       0x9E   0xEA44 0x1401      ORR      R4,R4,R1, LSL #+4
   \       0xA2   0xF024 0x4470      BIC      R4,R4,#0xF0000000
    445              Y &= 0x0FFFFFFF;
   \       0xA6   0x....'....        LDR.W    R5,??DataTable6_3
   \       0xAA   0xF3C2 0x0143      UBFX     R1,R2,#+1,#+4
   \       0xAE   0xF855 0x1021      LDR      R1,[R5, R1, LSL #+2]
   \       0xB2   0xF3C2 0x2343      UBFX     R3,R2,#+9,#+4
   \       0xB6   0xF855 0x3023      LDR      R3,[R5, R3, LSL #+2]
   \       0xBA   0x009B             LSLS     R3,R3,#+2
   \       0xBC   0xEA43 0x03C1      ORR      R3,R3,R1, LSL #+3
   \       0xC0   0xF3C2 0x4143      UBFX     R1,R2,#+17,#+4
   \       0xC4   0xF855 0x1021      LDR      R1,[R5, R1, LSL #+2]
   \       0xC8   0xEA43 0x0341      ORR      R3,R3,R1, LSL #+1
   \       0xCC   0xF3C2 0x6143      UBFX     R1,R2,#+25,#+4
   \       0xD0   0xF855 0x1021      LDR      R1,[R5, R1, LSL #+2]
   \       0xD4   0x430B             ORRS     R3,R1,R3
   \       0xD6   0xF3C2 0x1103      UBFX     R1,R2,#+4,#+4
   \       0xDA   0xF855 0x1021      LDR      R1,[R5, R1, LSL #+2]
   \       0xDE   0xEA43 0x13C1      ORR      R3,R3,R1, LSL #+7
   \       0xE2   0xF3C2 0x3103      UBFX     R1,R2,#+12,#+4
   \       0xE6   0xF855 0x1021      LDR      R1,[R5, R1, LSL #+2]
   \       0xEA   0xEA43 0x1381      ORR      R3,R3,R1, LSL #+6
   \       0xEE   0xF3C2 0x5103      UBFX     R1,R2,#+20,#+4
   \       0xF2   0xF855 0x1021      LDR      R1,[R5, R1, LSL #+2]
   \       0xF6   0xEA43 0x1341      ORR      R3,R3,R1, LSL #+5
   \       0xFA   0x0F12             LSRS     R2,R2,#+28
   \       0xFC   0xF855 0x1022      LDR      R1,[R5, R2, LSL #+2]
   \      0x100   0xEA43 0x1301      ORR      R3,R3,R1, LSL #+4
   \      0x104   0xF023 0x4370      BIC      R3,R3,#0xF0000000
    446          
    447              /*
    448               * calculate subkeys
    449               */
    450              for( i = 0; i < 16; i++ )
   \      0x108   0x2200             MOVS     R2,#+0
   \                     ??mbedtls_des_setkey_0: (+1)
   \      0x10A   0x2A10             CMP      R2,#+16
   \      0x10C   0xF280 0x80E4      BGE.W    ??mbedtls_des_setkey_1
    451              {
    452                  if( i < 2 || i == 8 || i == 15 )
   \      0x110   0x2A02             CMP      R2,#+2
   \      0x112   0xDB10             BLT.N    ??mbedtls_des_setkey_2
   \      0x114   0x2A08             CMP      R2,#+8
   \      0x116   0xD00E             BEQ.N    ??mbedtls_des_setkey_2
   \      0x118   0x2A0F             CMP      R2,#+15
   \      0x11A   0xD00C             BEQ.N    ??mbedtls_des_setkey_2
    453                  {
    454                      X = ((X <<  1) | (X >> 27)) & 0x0FFFFFFF;
    455                      Y = ((Y <<  1) | (Y >> 27)) & 0x0FFFFFFF;
    456                  }
    457                  else
    458                  {
    459                      X = ((X <<  2) | (X >> 26)) & 0x0FFFFFFF;
   \      0x11C   0x4621             MOV      R1,R4
   \      0x11E   0x0E89             LSRS     R1,R1,#+26
   \      0x120   0xEA41 0x0484      ORR      R4,R1,R4, LSL #+2
   \      0x124   0xF024 0x4470      BIC      R4,R4,#0xF0000000
    460                      Y = ((Y <<  2) | (Y >> 26)) & 0x0FFFFFFF;
   \      0x128   0x4619             MOV      R1,R3
   \      0x12A   0x0E89             LSRS     R1,R1,#+26
   \      0x12C   0xEA41 0x0383      ORR      R3,R1,R3, LSL #+2
   \      0x130   0xF023 0x4370      BIC      R3,R3,#0xF0000000
   \      0x134   0xE00B             B.N      ??mbedtls_des_setkey_3
    461                  }
   \                     ??mbedtls_des_setkey_2: (+1)
   \      0x136   0x4621             MOV      R1,R4
   \      0x138   0x0EC9             LSRS     R1,R1,#+27
   \      0x13A   0xEA41 0x0444      ORR      R4,R1,R4, LSL #+1
   \      0x13E   0xF024 0x4470      BIC      R4,R4,#0xF0000000
   \      0x142   0x4619             MOV      R1,R3
   \      0x144   0x0EC9             LSRS     R1,R1,#+27
   \      0x146   0xEA41 0x0343      ORR      R3,R1,R3, LSL #+1
   \      0x14A   0xF023 0x4370      BIC      R3,R3,#0xF0000000
    462          
    463                  *SK++ =   ((X <<  4) & 0x24000000) | ((X << 28) & 0x10000000)
    464                          | ((X << 14) & 0x08000000) | ((X << 18) & 0x02080000)
    465                          | ((X <<  6) & 0x01000000) | ((X <<  9) & 0x00200000)
    466                          | ((X >>  1) & 0x00100000) | ((X << 10) & 0x00040000)
    467                          | ((X <<  2) & 0x00020000) | ((X >> 10) & 0x00010000)
    468                          | ((Y >> 13) & 0x00002000) | ((Y >>  4) & 0x00001000)
    469                          | ((Y <<  6) & 0x00000800) | ((Y >>  1) & 0x00000400)
    470                          | ((Y >> 14) & 0x00000200) | ((Y      ) & 0x00000100)
    471                          | ((Y >>  5) & 0x00000020) | ((Y >> 10) & 0x00000010)
    472                          | ((Y >>  3) & 0x00000008) | ((Y >> 18) & 0x00000004)
    473                          | ((Y >> 26) & 0x00000002) | ((Y >> 24) & 0x00000001);
   \                     ??mbedtls_des_setkey_3: (+1)
   \      0x14E   0x0121             LSLS     R1,R4,#+4
   \      0x150   0xF001 0x5110      AND      R1,R1,#0x24000000
   \      0x154   0x0725             LSLS     R5,R4,#+28
   \      0x156   0xF005 0x5580      AND      R5,R5,#0x10000000
   \      0x15A   0x4329             ORRS     R1,R5,R1
   \      0x15C   0x03A5             LSLS     R5,R4,#+14
   \      0x15E   0xF005 0x6500      AND      R5,R5,#0x8000000
   \      0x162   0x4329             ORRS     R1,R5,R1
   \      0x164   0x04A5             LSLS     R5,R4,#+18
   \      0x166   0xF005 0x7502      AND      R5,R5,#0x2080000
   \      0x16A   0x4329             ORRS     R1,R5,R1
   \      0x16C   0x01A5             LSLS     R5,R4,#+6
   \      0x16E   0xF005 0x7580      AND      R5,R5,#0x1000000
   \      0x172   0x4329             ORRS     R1,R5,R1
   \      0x174   0x0265             LSLS     R5,R4,#+9
   \      0x176   0xF405 0x1500      AND      R5,R5,#0x200000
   \      0x17A   0x4329             ORRS     R1,R5,R1
   \      0x17C   0x4625             MOV      R5,R4
   \      0x17E   0x086D             LSRS     R5,R5,#+1
   \      0x180   0xF405 0x1580      AND      R5,R5,#0x100000
   \      0x184   0x4329             ORRS     R1,R5,R1
   \      0x186   0x02A5             LSLS     R5,R4,#+10
   \      0x188   0xF405 0x2580      AND      R5,R5,#0x40000
   \      0x18C   0x4329             ORRS     R1,R5,R1
   \      0x18E   0x00A5             LSLS     R5,R4,#+2
   \      0x190   0xF405 0x3500      AND      R5,R5,#0x20000
   \      0x194   0x4329             ORRS     R1,R5,R1
   \      0x196   0x4625             MOV      R5,R4
   \      0x198   0x0AAD             LSRS     R5,R5,#+10
   \      0x19A   0xF405 0x3580      AND      R5,R5,#0x10000
   \      0x19E   0x4329             ORRS     R1,R5,R1
   \      0x1A0   0x461D             MOV      R5,R3
   \      0x1A2   0x0B6D             LSRS     R5,R5,#+13
   \      0x1A4   0xF405 0x5500      AND      R5,R5,#0x2000
   \      0x1A8   0x4329             ORRS     R1,R5,R1
   \      0x1AA   0x461D             MOV      R5,R3
   \      0x1AC   0x092D             LSRS     R5,R5,#+4
   \      0x1AE   0xF405 0x5580      AND      R5,R5,#0x1000
   \      0x1B2   0x4329             ORRS     R1,R5,R1
   \      0x1B4   0x019D             LSLS     R5,R3,#+6
   \      0x1B6   0xF405 0x6500      AND      R5,R5,#0x800
   \      0x1BA   0x4329             ORRS     R1,R5,R1
   \      0x1BC   0x461D             MOV      R5,R3
   \      0x1BE   0x086D             LSRS     R5,R5,#+1
   \      0x1C0   0xF405 0x6580      AND      R5,R5,#0x400
   \      0x1C4   0x4329             ORRS     R1,R5,R1
   \      0x1C6   0x461D             MOV      R5,R3
   \      0x1C8   0x0BAD             LSRS     R5,R5,#+14
   \      0x1CA   0xF405 0x7500      AND      R5,R5,#0x200
   \      0x1CE   0x4329             ORRS     R1,R5,R1
   \      0x1D0   0xF403 0x7580      AND      R5,R3,#0x100
   \      0x1D4   0x4329             ORRS     R1,R5,R1
   \      0x1D6   0x461D             MOV      R5,R3
   \      0x1D8   0x096D             LSRS     R5,R5,#+5
   \      0x1DA   0xF005 0x0520      AND      R5,R5,#0x20
   \      0x1DE   0x4329             ORRS     R1,R5,R1
   \      0x1E0   0x461D             MOV      R5,R3
   \      0x1E2   0x0AAD             LSRS     R5,R5,#+10
   \      0x1E4   0xF005 0x0510      AND      R5,R5,#0x10
   \      0x1E8   0x4329             ORRS     R1,R5,R1
   \      0x1EA   0x461D             MOV      R5,R3
   \      0x1EC   0x08ED             LSRS     R5,R5,#+3
   \      0x1EE   0xF005 0x0508      AND      R5,R5,#0x8
   \      0x1F2   0x4329             ORRS     R1,R5,R1
   \      0x1F4   0x461D             MOV      R5,R3
   \      0x1F6   0x0CAD             LSRS     R5,R5,#+18
   \      0x1F8   0xF005 0x0504      AND      R5,R5,#0x4
   \      0x1FC   0x4329             ORRS     R1,R5,R1
   \      0x1FE   0x461D             MOV      R5,R3
   \      0x200   0x0EAD             LSRS     R5,R5,#+26
   \      0x202   0xF005 0x0502      AND      R5,R5,#0x2
   \      0x206   0x4329             ORRS     R1,R5,R1
   \      0x208   0xF3C3 0x6500      UBFX     R5,R3,#+24,#+1
   \      0x20C   0x4329             ORRS     R1,R5,R1
   \      0x20E   0xF840 0x1B04      STR      R1,[R0], #+4
    474          
    475                  *SK++ =   ((X << 15) & 0x20000000) | ((X << 17) & 0x10000000)
    476                          | ((X << 10) & 0x08000000) | ((X << 22) & 0x04000000)
    477                          | ((X >>  2) & 0x02000000) | ((X <<  1) & 0x01000000)
    478                          | ((X << 16) & 0x00200000) | ((X << 11) & 0x00100000)
    479                          | ((X <<  3) & 0x00080000) | ((X >>  6) & 0x00040000)
    480                          | ((X << 15) & 0x00020000) | ((X >>  4) & 0x00010000)
    481                          | ((Y >>  2) & 0x00002000) | ((Y <<  8) & 0x00001000)
    482                          | ((Y >> 14) & 0x00000808) | ((Y >>  9) & 0x00000400)
    483                          | ((Y      ) & 0x00000200) | ((Y <<  7) & 0x00000100)
    484                          | ((Y >>  7) & 0x00000020) | ((Y >>  3) & 0x00000011)
    485                          | ((Y <<  2) & 0x00000004) | ((Y >> 21) & 0x00000002);
   \      0x212   0x03E1             LSLS     R1,R4,#+15
   \      0x214   0xF001 0x5100      AND      R1,R1,#0x20000000
   \      0x218   0x0465             LSLS     R5,R4,#+17
   \      0x21A   0xF005 0x5580      AND      R5,R5,#0x10000000
   \      0x21E   0x4329             ORRS     R1,R5,R1
   \      0x220   0x02A5             LSLS     R5,R4,#+10
   \      0x222   0xF005 0x6500      AND      R5,R5,#0x8000000
   \      0x226   0x4329             ORRS     R1,R5,R1
   \      0x228   0x05A5             LSLS     R5,R4,#+22
   \      0x22A   0xF005 0x6580      AND      R5,R5,#0x4000000
   \      0x22E   0x4329             ORRS     R1,R5,R1
   \      0x230   0x4625             MOV      R5,R4
   \      0x232   0x08AD             LSRS     R5,R5,#+2
   \      0x234   0xF005 0x7500      AND      R5,R5,#0x2000000
   \      0x238   0x4329             ORRS     R1,R5,R1
   \      0x23A   0x0065             LSLS     R5,R4,#+1
   \      0x23C   0xF005 0x7580      AND      R5,R5,#0x1000000
   \      0x240   0x4329             ORRS     R1,R5,R1
   \      0x242   0x0425             LSLS     R5,R4,#+16
   \      0x244   0xF405 0x1500      AND      R5,R5,#0x200000
   \      0x248   0x4329             ORRS     R1,R5,R1
   \      0x24A   0x02E5             LSLS     R5,R4,#+11
   \      0x24C   0xF405 0x1580      AND      R5,R5,#0x100000
   \      0x250   0x4329             ORRS     R1,R5,R1
   \      0x252   0x00E5             LSLS     R5,R4,#+3
   \      0x254   0xF405 0x2500      AND      R5,R5,#0x80000
   \      0x258   0x4329             ORRS     R1,R5,R1
   \      0x25A   0x4625             MOV      R5,R4
   \      0x25C   0x09AD             LSRS     R5,R5,#+6
   \      0x25E   0xF405 0x2580      AND      R5,R5,#0x40000
   \      0x262   0x4329             ORRS     R1,R5,R1
   \      0x264   0x03E5             LSLS     R5,R4,#+15
   \      0x266   0xF405 0x3500      AND      R5,R5,#0x20000
   \      0x26A   0x4329             ORRS     R1,R5,R1
   \      0x26C   0x4625             MOV      R5,R4
   \      0x26E   0x092D             LSRS     R5,R5,#+4
   \      0x270   0xF405 0x3580      AND      R5,R5,#0x10000
   \      0x274   0x4329             ORRS     R1,R5,R1
   \      0x276   0x461D             MOV      R5,R3
   \      0x278   0x08AD             LSRS     R5,R5,#+2
   \      0x27A   0xF405 0x5500      AND      R5,R5,#0x2000
   \      0x27E   0x4329             ORRS     R1,R5,R1
   \      0x280   0x021D             LSLS     R5,R3,#+8
   \      0x282   0xF405 0x5580      AND      R5,R5,#0x1000
   \      0x286   0x4329             ORRS     R1,R5,R1
   \      0x288   0xF640 0x0508      MOVW     R5,#+2056
   \      0x28C   0xEA05 0x3593      AND      R5,R5,R3, LSR #+14
   \      0x290   0x4329             ORRS     R1,R5,R1
   \      0x292   0x461D             MOV      R5,R3
   \      0x294   0x0A6D             LSRS     R5,R5,#+9
   \      0x296   0xF405 0x6580      AND      R5,R5,#0x400
   \      0x29A   0x4329             ORRS     R1,R5,R1
   \      0x29C   0xF403 0x7500      AND      R5,R3,#0x200
   \      0x2A0   0x4329             ORRS     R1,R5,R1
   \      0x2A2   0x01DD             LSLS     R5,R3,#+7
   \      0x2A4   0xF405 0x7580      AND      R5,R5,#0x100
   \      0x2A8   0x4329             ORRS     R1,R5,R1
   \      0x2AA   0x461D             MOV      R5,R3
   \      0x2AC   0x09ED             LSRS     R5,R5,#+7
   \      0x2AE   0xF005 0x0520      AND      R5,R5,#0x20
   \      0x2B2   0x4329             ORRS     R1,R5,R1
   \      0x2B4   0x461D             MOV      R5,R3
   \      0x2B6   0x08ED             LSRS     R5,R5,#+3
   \      0x2B8   0xF005 0x0511      AND      R5,R5,#0x11
   \      0x2BC   0x4329             ORRS     R1,R5,R1
   \      0x2BE   0x009D             LSLS     R5,R3,#+2
   \      0x2C0   0xF005 0x0504      AND      R5,R5,#0x4
   \      0x2C4   0x4329             ORRS     R1,R5,R1
   \      0x2C6   0x461D             MOV      R5,R3
   \      0x2C8   0x0D6D             LSRS     R5,R5,#+21
   \      0x2CA   0xF005 0x0502      AND      R5,R5,#0x2
   \      0x2CE   0x4329             ORRS     R1,R5,R1
   \      0x2D0   0xF840 0x1B04      STR      R1,[R0], #+4
    486              }
   \      0x2D4   0x1C52             ADDS     R2,R2,#+1
   \      0x2D6   0xE718             B.N      ??mbedtls_des_setkey_0
    487          }
   \                     ??mbedtls_des_setkey_1: (+1)
   \      0x2D8   0xBC30             POP      {R4,R5}
   \      0x2DA   0x4770             BX       LR               ;; return
    488          #endif /* !MBEDTLS_DES_SETKEY_ALT */
    489          
    490          /*
    491           * DES key schedule (56-bit, encryption)
    492           */

   \                                 In section .text, align 2, keep-with-next
    493          int mbedtls_des_setkey_enc( mbedtls_des_context *ctx, const unsigned char key[MBEDTLS_DES_KEY_SIZE] )
    494          {
   \                     mbedtls_des_setkey_enc: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    495              mbedtls_des_setkey( ctx->sk, key );
   \        0x2   0x....'....        BL       mbedtls_des_setkey
    496          
    497              return( 0 );
   \        0x6   0x2000             MOVS     R0,#+0
   \        0x8   0xBD02             POP      {R1,PC}          ;; return
    498          }
    499          
    500          /*
    501           * DES key schedule (56-bit, decryption)
    502           */

   \                                 In section .text, align 2, keep-with-next
    503          int mbedtls_des_setkey_dec( mbedtls_des_context *ctx, const unsigned char key[MBEDTLS_DES_KEY_SIZE] )
    504          {
   \                     mbedtls_des_setkey_dec: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x4604             MOV      R4,R0
    505              int i;
    506          
    507              mbedtls_des_setkey( ctx->sk, key );
   \        0x4   0x....'....        BL       mbedtls_des_setkey
    508          
    509              for( i = 0; i < 16; i += 2 )
   \        0x8   0x2000             MOVS     R0,#+0
   \        0xA   0xE01A             B.N      ??mbedtls_des_setkey_dec_0
    510              {
    511                  SWAP( ctx->sk[i    ], ctx->sk[30 - i] );
   \                     ??mbedtls_des_setkey_dec_1: (+1)
   \        0xC   0xF854 0x1020      LDR      R1,[R4, R0, LSL #+2]
   \       0x10   0x4242             RSBS     R2,R0,#+0
   \       0x12   0xEB04 0x0282      ADD      R2,R4,R2, LSL #+2
   \       0x16   0x6F92             LDR      R2,[R2, #+120]
   \       0x18   0xF844 0x2020      STR      R2,[R4, R0, LSL #+2]
   \       0x1C   0x4242             RSBS     R2,R0,#+0
   \       0x1E   0xEB04 0x0282      ADD      R2,R4,R2, LSL #+2
   \       0x22   0x6791             STR      R1,[R2, #+120]
    512                  SWAP( ctx->sk[i + 1], ctx->sk[31 - i] );
   \       0x24   0xEB04 0x0180      ADD      R1,R4,R0, LSL #+2
   \       0x28   0x6849             LDR      R1,[R1, #+4]
   \       0x2A   0x4242             RSBS     R2,R0,#+0
   \       0x2C   0xEB04 0x0282      ADD      R2,R4,R2, LSL #+2
   \       0x30   0x6FD2             LDR      R2,[R2, #+124]
   \       0x32   0xEB04 0x0380      ADD      R3,R4,R0, LSL #+2
   \       0x36   0x605A             STR      R2,[R3, #+4]
   \       0x38   0x4242             RSBS     R2,R0,#+0
   \       0x3A   0xEB04 0x0282      ADD      R2,R4,R2, LSL #+2
   \       0x3E   0x67D1             STR      R1,[R2, #+124]
    513              }
   \       0x40   0x1C80             ADDS     R0,R0,#+2
   \                     ??mbedtls_des_setkey_dec_0: (+1)
   \       0x42   0x2810             CMP      R0,#+16
   \       0x44   0xDBE2             BLT.N    ??mbedtls_des_setkey_dec_1
    514          
    515              return( 0 );
   \       0x46   0x2000             MOVS     R0,#+0
   \       0x48   0xBD10             POP      {R4,PC}          ;; return
    516          }
    517          

   \                                 In section .text, align 2, keep-with-next
    518          static void des3_set2key( uint32_t esk[96],
    519                                    uint32_t dsk[96],
    520                                    const unsigned char key[MBEDTLS_DES_KEY_SIZE*2] )
    521          {
   \                     des3_set2key: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
   \        0x6   0x4616             MOV      R6,R2
    522              int i;
    523          
    524              mbedtls_des_setkey( esk, key );
   \        0x8   0x4631             MOV      R1,R6
   \        0xA   0x....'....        BL       mbedtls_des_setkey
    525              mbedtls_des_setkey( dsk + 32, key + 8 );
   \        0xE   0xF106 0x0108      ADD      R1,R6,#+8
   \       0x12   0xF105 0x0080      ADD      R0,R5,#+128
   \       0x16   0x....'....        BL       mbedtls_des_setkey
    526          
    527              for( i = 0; i < 32; i += 2 )
   \       0x1A   0x2000             MOVS     R0,#+0
   \       0x1C   0xE031             B.N      ??des3_set2key_0
    528              {
    529                  dsk[i     ] = esk[30 - i];
   \                     ??des3_set2key_1: (+1)
   \       0x1E   0x4241             RSBS     R1,R0,#+0
   \       0x20   0xEB04 0x0181      ADD      R1,R4,R1, LSL #+2
   \       0x24   0x6F89             LDR      R1,[R1, #+120]
   \       0x26   0xF845 0x1020      STR      R1,[R5, R0, LSL #+2]
    530                  dsk[i +  1] = esk[31 - i];
   \       0x2A   0x4241             RSBS     R1,R0,#+0
   \       0x2C   0xEB04 0x0181      ADD      R1,R4,R1, LSL #+2
   \       0x30   0x6FC9             LDR      R1,[R1, #+124]
   \       0x32   0xEB05 0x0280      ADD      R2,R5,R0, LSL #+2
   \       0x36   0x6051             STR      R1,[R2, #+4]
    531          
    532                  esk[i + 32] = dsk[62 - i];
   \       0x38   0x4241             RSBS     R1,R0,#+0
   \       0x3A   0xEB05 0x0181      ADD      R1,R5,R1, LSL #+2
   \       0x3E   0xF8D1 0x10F8      LDR      R1,[R1, #+248]
   \       0x42   0xEB04 0x0280      ADD      R2,R4,R0, LSL #+2
   \       0x46   0xF8C2 0x1080      STR      R1,[R2, #+128]
    533                  esk[i + 33] = dsk[63 - i];
   \       0x4A   0x4241             RSBS     R1,R0,#+0
   \       0x4C   0xEB05 0x0181      ADD      R1,R5,R1, LSL #+2
   \       0x50   0xF8D1 0x10FC      LDR      R1,[R1, #+252]
   \       0x54   0xF8C2 0x1084      STR      R1,[R2, #+132]
    534          
    535                  esk[i + 64] = esk[i    ];
   \       0x58   0xF854 0x1020      LDR      R1,[R4, R0, LSL #+2]
   \       0x5C   0xF8C2 0x1100      STR      R1,[R2, #+256]
    536                  esk[i + 65] = esk[i + 1];
   \       0x60   0xEB04 0x0180      ADD      R1,R4,R0, LSL #+2
   \       0x64   0x6849             LDR      R1,[R1, #+4]
   \       0x66   0xF8C2 0x1104      STR      R1,[R2, #+260]
    537          
    538                  dsk[i + 64] = dsk[i    ];
   \       0x6A   0xF855 0x1020      LDR      R1,[R5, R0, LSL #+2]
   \       0x6E   0xEB05 0x0280      ADD      R2,R5,R0, LSL #+2
   \       0x72   0xF8C2 0x1100      STR      R1,[R2, #+256]
    539                  dsk[i + 65] = dsk[i + 1];
   \       0x76   0xEB05 0x0180      ADD      R1,R5,R0, LSL #+2
   \       0x7A   0x6849             LDR      R1,[R1, #+4]
   \       0x7C   0xF8C2 0x1104      STR      R1,[R2, #+260]
    540              }
   \       0x80   0x1C80             ADDS     R0,R0,#+2
   \                     ??des3_set2key_0: (+1)
   \       0x82   0x2820             CMP      R0,#+32
   \       0x84   0xDBCB             BLT.N    ??des3_set2key_1
    541          }
   \       0x86   0xBD70             POP      {R4-R6,PC}       ;; return
    542          
    543          /*
    544           * Triple-DES key schedule (112-bit, encryption)
    545           */

   \                                 In section .text, align 2, keep-with-next
    546          int mbedtls_des3_set2key_enc( mbedtls_des3_context *ctx,
    547                                const unsigned char key[MBEDTLS_DES_KEY_SIZE * 2] )
    548          {
   \                     mbedtls_des3_set2key_enc: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   \        0x2   0xB0E0             SUB      SP,SP,#+384
   \        0x4   0x460A             MOV      R2,R1
    549              uint32_t sk[96];
    550          
    551              des3_set2key( ctx->sk, sk, key );
   \        0x6   0x4669             MOV      R1,SP
   \        0x8   0x....'....        BL       des3_set2key
    552              mbedtls_platform_zeroize( sk,  sizeof( sk ) );
   \        0xC   0xF44F 0x71C0      MOV      R1,#+384
   \       0x10   0x4668             MOV      R0,SP
   \       0x12   0x....'....        BL       mbedtls_platform_zeroize
    553          
    554              return( 0 );
   \       0x16   0x2000             MOVS     R0,#+0
   \       0x18   0xB061             ADD      SP,SP,#+388
   \       0x1A   0xBD00             POP      {PC}             ;; return
    555          }
    556          
    557          /*
    558           * Triple-DES key schedule (112-bit, decryption)
    559           */

   \                                 In section .text, align 2, keep-with-next
    560          int mbedtls_des3_set2key_dec( mbedtls_des3_context *ctx,
    561                                const unsigned char key[MBEDTLS_DES_KEY_SIZE * 2] )
    562          {
   \                     mbedtls_des3_set2key_dec: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   \        0x2   0xB0E0             SUB      SP,SP,#+384
   \        0x4   0x460A             MOV      R2,R1
    563              uint32_t sk[96];
    564          
    565              des3_set2key( sk, ctx->sk, key );
   \        0x6   0x4601             MOV      R1,R0
   \        0x8   0x4668             MOV      R0,SP
   \        0xA   0x....'....        BL       des3_set2key
    566              mbedtls_platform_zeroize( sk,  sizeof( sk ) );
   \        0xE   0xF44F 0x71C0      MOV      R1,#+384
   \       0x12   0x4668             MOV      R0,SP
   \       0x14   0x....'....        BL       mbedtls_platform_zeroize
    567          
    568              return( 0 );
   \       0x18   0x2000             MOVS     R0,#+0
   \       0x1A   0xB061             ADD      SP,SP,#+388
   \       0x1C   0xBD00             POP      {PC}             ;; return
    569          }
    570          

   \                                 In section .text, align 2, keep-with-next
    571          static void des3_set3key( uint32_t esk[96],
    572                                    uint32_t dsk[96],
    573                                    const unsigned char key[24] )
    574          {
   \                     des3_set3key: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
   \        0x6   0x4616             MOV      R6,R2
    575              int i;
    576          
    577              mbedtls_des_setkey( esk, key );
   \        0x8   0x4631             MOV      R1,R6
   \        0xA   0x....'....        BL       mbedtls_des_setkey
    578              mbedtls_des_setkey( dsk + 32, key +  8 );
   \        0xE   0xF106 0x0108      ADD      R1,R6,#+8
   \       0x12   0xF105 0x0080      ADD      R0,R5,#+128
   \       0x16   0x....'....        BL       mbedtls_des_setkey
    579              mbedtls_des_setkey( esk + 64, key + 16 );
   \       0x1A   0xF106 0x0110      ADD      R1,R6,#+16
   \       0x1E   0xF504 0x7080      ADD      R0,R4,#+256
   \       0x22   0x....'....        BL       mbedtls_des_setkey
    580          
    581              for( i = 0; i < 32; i += 2 )
   \       0x26   0x2000             MOVS     R0,#+0
   \       0x28   0xE02D             B.N      ??des3_set3key_0
    582              {
    583                  dsk[i     ] = esk[94 - i];
   \                     ??des3_set3key_1: (+1)
   \       0x2A   0x4241             RSBS     R1,R0,#+0
   \       0x2C   0xEB04 0x0181      ADD      R1,R4,R1, LSL #+2
   \       0x30   0xF8D1 0x1178      LDR      R1,[R1, #+376]
   \       0x34   0xF845 0x1020      STR      R1,[R5, R0, LSL #+2]
    584                  dsk[i +  1] = esk[95 - i];
   \       0x38   0x4241             RSBS     R1,R0,#+0
   \       0x3A   0xEB04 0x0181      ADD      R1,R4,R1, LSL #+2
   \       0x3E   0xF8D1 0x117C      LDR      R1,[R1, #+380]
   \       0x42   0xEB05 0x0280      ADD      R2,R5,R0, LSL #+2
   \       0x46   0x6051             STR      R1,[R2, #+4]
    585          
    586                  esk[i + 32] = dsk[62 - i];
   \       0x48   0x4241             RSBS     R1,R0,#+0
   \       0x4A   0xEB05 0x0181      ADD      R1,R5,R1, LSL #+2
   \       0x4E   0xF8D1 0x10F8      LDR      R1,[R1, #+248]
   \       0x52   0xEB04 0x0280      ADD      R2,R4,R0, LSL #+2
   \       0x56   0xF8C2 0x1080      STR      R1,[R2, #+128]
    587                  esk[i + 33] = dsk[63 - i];
   \       0x5A   0x4241             RSBS     R1,R0,#+0
   \       0x5C   0xEB05 0x0181      ADD      R1,R5,R1, LSL #+2
   \       0x60   0xF8D1 0x10FC      LDR      R1,[R1, #+252]
   \       0x64   0xF8C2 0x1084      STR      R1,[R2, #+132]
    588          
    589                  dsk[i + 64] = esk[30 - i];
   \       0x68   0x4241             RSBS     R1,R0,#+0
   \       0x6A   0xEB04 0x0181      ADD      R1,R4,R1, LSL #+2
   \       0x6E   0x6F89             LDR      R1,[R1, #+120]
   \       0x70   0xEB05 0x0280      ADD      R2,R5,R0, LSL #+2
   \       0x74   0xF8C2 0x1100      STR      R1,[R2, #+256]
    590                  dsk[i + 65] = esk[31 - i];
   \       0x78   0x4241             RSBS     R1,R0,#+0
   \       0x7A   0xEB04 0x0181      ADD      R1,R4,R1, LSL #+2
   \       0x7E   0x6FC9             LDR      R1,[R1, #+124]
   \       0x80   0xF8C2 0x1104      STR      R1,[R2, #+260]
    591              }
   \       0x84   0x1C80             ADDS     R0,R0,#+2
   \                     ??des3_set3key_0: (+1)
   \       0x86   0x2820             CMP      R0,#+32
   \       0x88   0xDBCF             BLT.N    ??des3_set3key_1
    592          }
   \       0x8A   0xBD70             POP      {R4-R6,PC}       ;; return
    593          
    594          /*
    595           * Triple-DES key schedule (168-bit, encryption)
    596           */

   \                                 In section .text, align 2, keep-with-next
    597          int mbedtls_des3_set3key_enc( mbedtls_des3_context *ctx,
    598                                const unsigned char key[MBEDTLS_DES_KEY_SIZE * 3] )
    599          {
   \                     mbedtls_des3_set3key_enc: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   \        0x2   0xB0E0             SUB      SP,SP,#+384
   \        0x4   0x460A             MOV      R2,R1
    600              uint32_t sk[96];
    601          
    602              des3_set3key( ctx->sk, sk, key );
   \        0x6   0x4669             MOV      R1,SP
   \        0x8   0x....'....        BL       des3_set3key
    603              mbedtls_platform_zeroize( sk,  sizeof( sk ) );
   \        0xC   0xF44F 0x71C0      MOV      R1,#+384
   \       0x10   0x4668             MOV      R0,SP
   \       0x12   0x....'....        BL       mbedtls_platform_zeroize
    604          
    605              return( 0 );
   \       0x16   0x2000             MOVS     R0,#+0
   \       0x18   0xB061             ADD      SP,SP,#+388
   \       0x1A   0xBD00             POP      {PC}             ;; return
    606          }
    607          
    608          /*
    609           * Triple-DES key schedule (168-bit, decryption)
    610           */

   \                                 In section .text, align 2, keep-with-next
    611          int mbedtls_des3_set3key_dec( mbedtls_des3_context *ctx,
    612                                const unsigned char key[MBEDTLS_DES_KEY_SIZE * 3] )
    613          {
   \                     mbedtls_des3_set3key_dec: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   \        0x2   0xB0E0             SUB      SP,SP,#+384
   \        0x4   0x460A             MOV      R2,R1
    614              uint32_t sk[96];
    615          
    616              des3_set3key( sk, ctx->sk, key );
   \        0x6   0x4601             MOV      R1,R0
   \        0x8   0x4668             MOV      R0,SP
   \        0xA   0x....'....        BL       des3_set3key
    617              mbedtls_platform_zeroize( sk,  sizeof( sk ) );
   \        0xE   0xF44F 0x71C0      MOV      R1,#+384
   \       0x12   0x4668             MOV      R0,SP
   \       0x14   0x....'....        BL       mbedtls_platform_zeroize
    618          
    619              return( 0 );
   \       0x18   0x2000             MOVS     R0,#+0
   \       0x1A   0xB061             ADD      SP,SP,#+388
   \       0x1C   0xBD00             POP      {PC}             ;; return
    620          }
    621          
    622          /*
    623           * DES-ECB block encryption/decryption
    624           */
    625          #if !defined(MBEDTLS_DES_CRYPT_ECB_ALT)

   \                                 In section .text, align 2, keep-with-next
    626          int mbedtls_des_crypt_ecb( mbedtls_des_context *ctx,
    627                              const unsigned char input[8],
    628                              unsigned char output[8] )
    629          {
   \                     mbedtls_des_crypt_ecb: (+1)
   \        0x0   0xE92D 0x4FF6      PUSH     {R1,R2,R4-R11,LR}
    630              int i;
    631              uint32_t X, Y, T, *SK;
    632          
    633              SK = ctx->sk;
    634          
    635              GET_UINT32_BE( X, input, 0 );
   \        0x4   0x780A             LDRB     R2,[R1, #+0]
   \        0x6   0x784B             LDRB     R3,[R1, #+1]
   \        0x8   0x041B             LSLS     R3,R3,#+16
   \        0xA   0xEA43 0x6302      ORR      R3,R3,R2, LSL #+24
   \        0xE   0x788A             LDRB     R2,[R1, #+2]
   \       0x10   0xEA43 0x2302      ORR      R3,R3,R2, LSL #+8
   \       0x14   0x78CA             LDRB     R2,[R1, #+3]
   \       0x16   0x4313             ORRS     R3,R2,R3
    636              GET_UINT32_BE( Y, input, 4 );
   \       0x18   0x790C             LDRB     R4,[R1, #+4]
   \       0x1A   0x794A             LDRB     R2,[R1, #+5]
   \       0x1C   0x0412             LSLS     R2,R2,#+16
   \       0x1E   0xEA42 0x6204      ORR      R2,R2,R4, LSL #+24
   \       0x22   0x798C             LDRB     R4,[R1, #+6]
   \       0x24   0xEA42 0x2204      ORR      R2,R2,R4, LSL #+8
   \       0x28   0x79C9             LDRB     R1,[R1, #+7]
   \       0x2A   0x430A             ORRS     R2,R1,R2
    637          
    638              DES_IP( X, Y );
   \       0x2C   0xEA82 0x1113      EOR      R1,R2,R3, LSR #+4
   \       0x30   0xF021 0x31F0      BIC      R1,R1,#0xF0F0F0F0
   \       0x34   0x404A             EORS     R2,R1,R2
   \       0x36   0xEA83 0x1301      EOR      R3,R3,R1, LSL #+4
   \       0x3A   0xEA82 0x4113      EOR      R1,R2,R3, LSR #+16
   \       0x3E   0xB289             UXTH     R1,R1
   \       0x40   0x404A             EORS     R2,R1,R2
   \       0x42   0xEA83 0x4301      EOR      R3,R3,R1, LSL #+16
   \       0x46   0xEA83 0x0192      EOR      R1,R3,R2, LSR #+2
   \       0x4A   0xF021 0x31CC      BIC      R1,R1,#0xCCCCCCCC
   \       0x4E   0x404B             EORS     R3,R1,R3
   \       0x50   0xEA82 0x0281      EOR      R2,R2,R1, LSL #+2
   \       0x54   0xEA83 0x2112      EOR      R1,R3,R2, LSR #+8
   \       0x58   0xF021 0x21FF      BIC      R1,R1,#0xFF00FF00
   \       0x5C   0x404B             EORS     R3,R1,R3
   \       0x5E   0xEA82 0x2201      EOR      R2,R2,R1, LSL #+8
   \       0x62   0xEA4F 0x71F2      ROR      R1,R2,#+31
   \       0x66   0xEA81 0x0203      EOR      R2,R1,R3
   \       0x6A   0xF022 0x3255      BIC      R2,R2,#0x55555555
   \       0x6E   0x4051             EORS     R1,R2,R1
   \       0x70   0x4053             EORS     R3,R2,R3
   \       0x72   0xEA4F 0x7AF3      ROR      R10,R3,#+31
    639          
    640              for( i = 0; i < 8; i++ )
   \       0x76   0x2200             MOVS     R2,#+0
   \       0x78   0x....'....        LDR.W    R8,??DataTable7_3
   \       0x7C   0x....'....        LDR.W    R9,??DataTable7_4
   \       0x80   0xE077             B.N      ??mbedtls_des_crypt_ecb_0
    641              {
    642                  DES_ROUND( Y, X );
   \                     ??mbedtls_des_crypt_ecb_1: (+1)
   \       0x82   0xF850 0x7B04      LDR      R7,[R0], #+4
   \       0x86   0x404F             EORS     R7,R1,R7
   \       0x88   0x....'....        LDR.W    R3,??DataTable7_5
   \       0x8C   0x....'....        LDR.W    R4,??DataTable7_6
   \       0x90   0x....'....        LDR.W    R5,??DataTable7_7
   \       0x94   0x....'....        LDR.W    R6,??DataTable7_8
   \       0x98   0xF007 0x0C3F      AND      R12,R7,#0x3F
   \       0x9C   0xF856 0xC02C      LDR      R12,[R6, R12, LSL #+2]
   \       0xA0   0xF3C7 0x2E05      UBFX     LR,R7,#+8,#+6
   \       0xA4   0xF855 0xE02E      LDR      LR,[R5, LR, LSL #+2]
   \       0xA8   0xEA8E 0x0C0C      EOR      R12,LR,R12
   \       0xAC   0xF3C7 0x4E05      UBFX     LR,R7,#+16,#+6
   \       0xB0   0xF854 0xE02E      LDR      LR,[R4, LR, LSL #+2]
   \       0xB4   0xEA8E 0x0C0C      EOR      R12,LR,R12
   \       0xB8   0xF3C7 0x6705      UBFX     R7,R7,#+24,#+6
   \       0xBC   0xF853 0x7027      LDR      R7,[R3, R7, LSL #+2]
   \       0xC0   0xEA87 0x0C0C      EOR      R12,R7,R12
   \       0xC4   0xEA8C 0x0A0A      EOR      R10,R12,R10
   \       0xC8   0xF850 0x7B04      LDR      R7,[R0], #+4
   \       0xCC   0xEA87 0x1731      EOR      R7,R7,R1, ROR #+4
   \       0xD0   0x....'....        LDR.W    R12,??DataTable7_9
   \       0xD4   0x....'....        LDR.W    LR,??DataTable7_10
   \       0xD8   0xF8CD 0xA000      STR      R10,[SP, #+0]
   \       0xDC   0xF007 0x0A3F      AND      R10,R7,#0x3F
   \       0xE0   0xF859 0xB02A      LDR      R11,[R9, R10, LSL #+2]
   \       0xE4   0xF3C7 0x2A05      UBFX     R10,R7,#+8,#+6
   \       0xE8   0xF858 0xA02A      LDR      R10,[R8, R10, LSL #+2]
   \       0xEC   0xEA8A 0x0A0B      EOR      R10,R10,R11
   \       0xF0   0xF3C7 0x4B05      UBFX     R11,R7,#+16,#+6
   \       0xF4   0xF85E 0xB02B      LDR      R11,[LR, R11, LSL #+2]
   \       0xF8   0xEA8B 0x0B0A      EOR      R11,R11,R10
   \       0xFC   0xF3C7 0x6705      UBFX     R7,R7,#+24,#+6
   \      0x100   0xF85C 0x7027      LDR      R7,[R12, R7, LSL #+2]
   \      0x104   0xEA87 0x070B      EOR      R7,R7,R11
   \      0x108   0xF8DD 0xA000      LDR      R10,[SP, #+0]
   \      0x10C   0xEA87 0x0A0A      EOR      R10,R7,R10
    643                  DES_ROUND( X, Y );
   \      0x110   0xF850 0x7B04      LDR      R7,[R0], #+4
   \      0x114   0xEA8A 0x0707      EOR      R7,R10,R7
   \      0x118   0xF007 0x0B3F      AND      R11,R7,#0x3F
   \      0x11C   0xF856 0x602B      LDR      R6,[R6, R11, LSL #+2]
   \      0x120   0xF3C7 0x2B05      UBFX     R11,R7,#+8,#+6
   \      0x124   0xF855 0x502B      LDR      R5,[R5, R11, LSL #+2]
   \      0x128   0x4075             EORS     R5,R5,R6
   \      0x12A   0xF3C7 0x4605      UBFX     R6,R7,#+16,#+6
   \      0x12E   0xF854 0x4026      LDR      R4,[R4, R6, LSL #+2]
   \      0x132   0x4065             EORS     R5,R4,R5
   \      0x134   0xF3C7 0x6405      UBFX     R4,R7,#+24,#+6
   \      0x138   0xF853 0x3024      LDR      R3,[R3, R4, LSL #+2]
   \      0x13C   0x405D             EORS     R5,R3,R5
   \      0x13E   0x4069             EORS     R1,R5,R1
   \      0x140   0xF850 0x3B04      LDR      R3,[R0], #+4
   \      0x144   0xEA83 0x133A      EOR      R3,R3,R10, ROR #+4
   \      0x148   0xF003 0x043F      AND      R4,R3,#0x3F
   \      0x14C   0xF859 0x4024      LDR      R4,[R9, R4, LSL #+2]
   \      0x150   0xF3C3 0x2505      UBFX     R5,R3,#+8,#+6
   \      0x154   0xF858 0x5025      LDR      R5,[R8, R5, LSL #+2]
   \      0x158   0x406C             EORS     R4,R5,R4
   \      0x15A   0xF3C3 0x4505      UBFX     R5,R3,#+16,#+6
   \      0x15E   0xF85E 0x5025      LDR      R5,[LR, R5, LSL #+2]
   \      0x162   0x406C             EORS     R4,R5,R4
   \      0x164   0xF3C3 0x6305      UBFX     R3,R3,#+24,#+6
   \      0x168   0xF85C 0x3023      LDR      R3,[R12, R3, LSL #+2]
   \      0x16C   0x405C             EORS     R4,R3,R4
   \      0x16E   0x4061             EORS     R1,R4,R1
    644              }
   \      0x170   0x1C52             ADDS     R2,R2,#+1
   \                     ??mbedtls_des_crypt_ecb_0: (+1)
   \      0x172   0x2A08             CMP      R2,#+8
   \      0x174   0xDB85             BLT.N    ??mbedtls_des_crypt_ecb_1
   \      0x176   0x9801             LDR      R0,[SP, #+4]
    645          
    646              DES_FP( Y, X );
   \      0x178   0xEA4F 0x0271      ROR      R2,R1,#+1
   \      0x17C   0xEA8A 0x0102      EOR      R1,R10,R2
   \      0x180   0xF021 0x3155      BIC      R1,R1,#0x55555555
   \      0x184   0x404A             EORS     R2,R1,R2
   \      0x186   0xEA81 0x0A0A      EOR      R10,R1,R10
   \      0x18A   0xEA4F 0x017A      ROR      R1,R10,#+1
   \      0x18E   0xEA82 0x2311      EOR      R3,R2,R1, LSR #+8
   \      0x192   0xF023 0x23FF      BIC      R3,R3,#0xFF00FF00
   \      0x196   0x405A             EORS     R2,R3,R2
   \      0x198   0xEA81 0x2103      EOR      R1,R1,R3, LSL #+8
   \      0x19C   0xEA82 0x0391      EOR      R3,R2,R1, LSR #+2
   \      0x1A0   0xF023 0x33CC      BIC      R3,R3,#0xCCCCCCCC
   \      0x1A4   0x405A             EORS     R2,R3,R2
   \      0x1A6   0xEA81 0x0183      EOR      R1,R1,R3, LSL #+2
   \      0x1AA   0xEA81 0x4312      EOR      R3,R1,R2, LSR #+16
   \      0x1AE   0xB29B             UXTH     R3,R3
   \      0x1B0   0x4059             EORS     R1,R3,R1
   \      0x1B2   0xEA82 0x4203      EOR      R2,R2,R3, LSL #+16
   \      0x1B6   0xEA81 0x1312      EOR      R3,R1,R2, LSR #+4
   \      0x1BA   0xF023 0x33F0      BIC      R3,R3,#0xF0F0F0F0
   \      0x1BE   0x4059             EORS     R1,R3,R1
   \      0x1C0   0xEA82 0x1203      EOR      R2,R2,R3, LSL #+4
    647          
    648              PUT_UINT32_BE( Y, output, 0 );
   \      0x1C4   0x4613             MOV      R3,R2
   \      0x1C6   0x0E1B             LSRS     R3,R3,#+24
   \      0x1C8   0x7003             STRB     R3,[R0, #+0]
   \      0x1CA   0x4613             MOV      R3,R2
   \      0x1CC   0x0C1B             LSRS     R3,R3,#+16
   \      0x1CE   0x7043             STRB     R3,[R0, #+1]
   \      0x1D0   0x4613             MOV      R3,R2
   \      0x1D2   0x0A1B             LSRS     R3,R3,#+8
   \      0x1D4   0x7083             STRB     R3,[R0, #+2]
   \      0x1D6   0x70C2             STRB     R2,[R0, #+3]
    649              PUT_UINT32_BE( X, output, 4 );
   \      0x1D8   0x460A             MOV      R2,R1
   \      0x1DA   0x0E12             LSRS     R2,R2,#+24
   \      0x1DC   0x7102             STRB     R2,[R0, #+4]
   \      0x1DE   0x460A             MOV      R2,R1
   \      0x1E0   0x0C12             LSRS     R2,R2,#+16
   \      0x1E2   0x7142             STRB     R2,[R0, #+5]
   \      0x1E4   0x460A             MOV      R2,R1
   \      0x1E6   0x0A12             LSRS     R2,R2,#+8
   \      0x1E8   0x7182             STRB     R2,[R0, #+6]
   \      0x1EA   0x71C1             STRB     R1,[R0, #+7]
    650          
    651              return( 0 );
   \      0x1EC   0x2000             MOVS     R0,#+0
   \      0x1EE   0xE8BD 0x8FF6      POP      {R1,R2,R4-R11,PC}  ;; return
    652          }
    653          #endif /* !MBEDTLS_DES_CRYPT_ECB_ALT */
    654          
    655          #if defined(MBEDTLS_CIPHER_MODE_CBC)
    656          /*
    657           * DES-CBC buffer encryption/decryption
    658           */

   \                                 In section .text, align 2, keep-with-next
    659          int mbedtls_des_crypt_cbc( mbedtls_des_context *ctx,
    660                              int mode,
    661                              size_t length,
    662                              unsigned char iv[8],
    663                              const unsigned char *input,
    664                              unsigned char *output )
    665          {
   \                     mbedtls_des_crypt_cbc: (+1)
   \        0x0   0xE92D 0x41FC      PUSH     {R2-R8,LR}
   \        0x4   0x4607             MOV      R7,R0
   \        0x6   0x4614             MOV      R4,R2
   \        0x8   0x4698             MOV      R8,R3
    666              int i;
    667              unsigned char temp[8];
    668          
    669              if( length % 8 )
   \        0xA   0xF014 0x0F07      TST      R4,#0x7
   \        0xE   0xD002             BEQ.N    ??mbedtls_des_crypt_cbc_0
    670                  return( MBEDTLS_ERR_DES_INVALID_INPUT_LENGTH );
   \       0x10   0xF06F 0x0031      MVN      R0,#+49
   \       0x14   0xE03C             B.N      ??mbedtls_des_crypt_cbc_1
   \                     ??mbedtls_des_crypt_cbc_0: (+1)
   \       0x16   0x9D08             LDR      R5,[SP, #+32]
   \       0x18   0x9E09             LDR      R6,[SP, #+36]
    671          
    672              if( mode == MBEDTLS_DES_ENCRYPT )
   \       0x1A   0x2901             CMP      R1,#+1
   \       0x1C   0xD129             BNE.N    ??mbedtls_des_crypt_cbc_2
   \       0x1E   0x2C00             CMP      R4,#+0
   \       0x20   0xE014             B.N      ??mbedtls_des_crypt_cbc_3
    673              {
    674                  while( length > 0 )
    675                  {
    676                      for( i = 0; i < 8; i++ )
    677                          output[i] = (unsigned char)( input[i] ^ iv[i] );
   \                     ??mbedtls_des_crypt_cbc_4: (+1)
   \       0x22   0x5C29             LDRB     R1,[R5, R0]
   \       0x24   0xF818 0x2000      LDRB     R2,[R8, R0]
   \       0x28   0x4051             EORS     R1,R2,R1
   \       0x2A   0x5431             STRB     R1,[R6, R0]
   \       0x2C   0x1C40             ADDS     R0,R0,#+1
   \                     ??mbedtls_des_crypt_cbc_5: (+1)
   \       0x2E   0x2808             CMP      R0,#+8
   \       0x30   0xDBF7             BLT.N    ??mbedtls_des_crypt_cbc_4
    678          
    679                      mbedtls_des_crypt_ecb( ctx, output, output );
   \       0x32   0x4632             MOV      R2,R6
   \       0x34   0x4631             MOV      R1,R6
   \       0x36   0x4638             MOV      R0,R7
   \       0x38   0x....'....        BL       mbedtls_des_crypt_ecb
    680                      memcpy( iv, output, 8 );
   \       0x3C   0x2208             MOVS     R2,#+8
   \       0x3E   0x4631             MOV      R1,R6
   \       0x40   0x4640             MOV      R0,R8
   \       0x42   0x....'....        BL       __aeabi_memcpy
    681          
    682                      input  += 8;
   \       0x46   0x3508             ADDS     R5,R5,#+8
    683                      output += 8;
   \       0x48   0x3608             ADDS     R6,R6,#+8
    684                      length -= 8;
   \       0x4A   0x3C08             SUBS     R4,R4,#+8
   \                     ??mbedtls_des_crypt_cbc_3: (+1)
   \       0x4C   0xD01F             BEQ.N    ??mbedtls_des_crypt_cbc_6
   \       0x4E   0x2000             MOVS     R0,#+0
   \       0x50   0xE7ED             B.N      ??mbedtls_des_crypt_cbc_5
    685                  }
    686              }
    687              else /* MBEDTLS_DES_DECRYPT */
    688              {
    689                  while( length > 0 )
    690                  {
    691                      memcpy( temp, input, 8 );
    692                      mbedtls_des_crypt_ecb( ctx, input, output );
    693          
    694                      for( i = 0; i < 8; i++ )
    695                          output[i] = (unsigned char)( output[i] ^ iv[i] );
   \                     ??mbedtls_des_crypt_cbc_7: (+1)
   \       0x52   0x5C31             LDRB     R1,[R6, R0]
   \       0x54   0xF818 0x2000      LDRB     R2,[R8, R0]
   \       0x58   0x4051             EORS     R1,R2,R1
   \       0x5A   0x5431             STRB     R1,[R6, R0]
   \       0x5C   0x1C40             ADDS     R0,R0,#+1
   \                     ??mbedtls_des_crypt_cbc_8: (+1)
   \       0x5E   0x2808             CMP      R0,#+8
   \       0x60   0xDBF7             BLT.N    ??mbedtls_des_crypt_cbc_7
    696          
    697                      memcpy( iv, temp, 8 );
   \       0x62   0x2208             MOVS     R2,#+8
   \       0x64   0x4669             MOV      R1,SP
   \       0x66   0x4640             MOV      R0,R8
   \       0x68   0x....'....        BL       __aeabi_memcpy
    698          
    699                      input  += 8;
   \       0x6C   0x3508             ADDS     R5,R5,#+8
    700                      output += 8;
   \       0x6E   0x3608             ADDS     R6,R6,#+8
    701                      length -= 8;
   \       0x70   0x3C08             SUBS     R4,R4,#+8
   \                     ??mbedtls_des_crypt_cbc_2: (+1)
   \       0x72   0x2C00             CMP      R4,#+0
   \       0x74   0xD00B             BEQ.N    ??mbedtls_des_crypt_cbc_6
   \       0x76   0x2208             MOVS     R2,#+8
   \       0x78   0x4629             MOV      R1,R5
   \       0x7A   0x4668             MOV      R0,SP
   \       0x7C   0x....'....        BL       __aeabi_memcpy
   \       0x80   0x4632             MOV      R2,R6
   \       0x82   0x4629             MOV      R1,R5
   \       0x84   0x4638             MOV      R0,R7
   \       0x86   0x....'....        BL       mbedtls_des_crypt_ecb
   \       0x8A   0x2000             MOVS     R0,#+0
   \       0x8C   0xE7E7             B.N      ??mbedtls_des_crypt_cbc_8
    702                  }
    703              }
    704          
    705              return( 0 );
   \                     ??mbedtls_des_crypt_cbc_6: (+1)
   \       0x8E   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_des_crypt_cbc_1: (+1)
   \       0x90   0xE8BD 0x81F6      POP      {R1,R2,R4-R8,PC}  ;; return
    706          }
    707          #endif /* MBEDTLS_CIPHER_MODE_CBC */
    708          
    709          /*
    710           * 3DES-ECB block encryption/decryption
    711           */
    712          #if !defined(MBEDTLS_DES3_CRYPT_ECB_ALT)

   \                                 In section .text, align 2, keep-with-next
    713          int mbedtls_des3_crypt_ecb( mbedtls_des3_context *ctx,
    714                               const unsigned char input[8],
    715                               unsigned char output[8] )
    716          {
   \                     mbedtls_des3_crypt_ecb: (+1)
   \        0x0   0xE92D 0x4FF6      PUSH     {R1,R2,R4-R11,LR}
    717              int i;
    718              uint32_t X, Y, T, *SK;
    719          
    720              SK = ctx->sk;
    721          
    722              GET_UINT32_BE( X, input, 0 );
   \        0x4   0x780A             LDRB     R2,[R1, #+0]
   \        0x6   0x784B             LDRB     R3,[R1, #+1]
   \        0x8   0x041B             LSLS     R3,R3,#+16
   \        0xA   0xEA43 0x6302      ORR      R3,R3,R2, LSL #+24
   \        0xE   0x788A             LDRB     R2,[R1, #+2]
   \       0x10   0xEA43 0x2302      ORR      R3,R3,R2, LSL #+8
   \       0x14   0x78CA             LDRB     R2,[R1, #+3]
   \       0x16   0x4313             ORRS     R3,R2,R3
    723              GET_UINT32_BE( Y, input, 4 );
   \       0x18   0x790C             LDRB     R4,[R1, #+4]
   \       0x1A   0x794A             LDRB     R2,[R1, #+5]
   \       0x1C   0x0412             LSLS     R2,R2,#+16
   \       0x1E   0xEA42 0x6204      ORR      R2,R2,R4, LSL #+24
   \       0x22   0x798C             LDRB     R4,[R1, #+6]
   \       0x24   0xEA42 0x2204      ORR      R2,R2,R4, LSL #+8
   \       0x28   0x79C9             LDRB     R1,[R1, #+7]
   \       0x2A   0x430A             ORRS     R2,R1,R2
    724          
    725              DES_IP( X, Y );
   \       0x2C   0xEA82 0x1113      EOR      R1,R2,R3, LSR #+4
   \       0x30   0xF021 0x31F0      BIC      R1,R1,#0xF0F0F0F0
   \       0x34   0x404A             EORS     R2,R1,R2
   \       0x36   0xEA83 0x1301      EOR      R3,R3,R1, LSL #+4
   \       0x3A   0xEA82 0x4113      EOR      R1,R2,R3, LSR #+16
   \       0x3E   0xB289             UXTH     R1,R1
   \       0x40   0x404A             EORS     R2,R1,R2
   \       0x42   0xEA83 0x4301      EOR      R3,R3,R1, LSL #+16
   \       0x46   0xEA83 0x0192      EOR      R1,R3,R2, LSR #+2
   \       0x4A   0xF021 0x31CC      BIC      R1,R1,#0xCCCCCCCC
   \       0x4E   0x404B             EORS     R3,R1,R3
   \       0x50   0xEA82 0x0281      EOR      R2,R2,R1, LSL #+2
   \       0x54   0xEA83 0x2112      EOR      R1,R3,R2, LSR #+8
   \       0x58   0xF021 0x21FF      BIC      R1,R1,#0xFF00FF00
   \       0x5C   0x404B             EORS     R3,R1,R3
   \       0x5E   0xEA82 0x2201      EOR      R2,R2,R1, LSL #+8
   \       0x62   0xEA4F 0x71F2      ROR      R1,R2,#+31
   \       0x66   0xEA81 0x0203      EOR      R2,R1,R3
   \       0x6A   0xF022 0x3255      BIC      R2,R2,#0x55555555
   \       0x6E   0x4051             EORS     R1,R2,R1
   \       0x70   0x4053             EORS     R3,R2,R3
   \       0x72   0xEA4F 0x7AF3      ROR      R10,R3,#+31
    726          
    727              for( i = 0; i < 8; i++ )
   \       0x76   0x2200             MOVS     R2,#+0
   \       0x78   0x....'....        LDR.W    R8,??DataTable7_3
   \       0x7C   0x....'....        LDR.W    R9,??DataTable7_4
   \       0x80   0xE077             B.N      ??mbedtls_des3_crypt_ecb_0
    728              {
    729                  DES_ROUND( Y, X );
   \                     ??mbedtls_des3_crypt_ecb_1: (+1)
   \       0x82   0xF850 0x7B04      LDR      R7,[R0], #+4
   \       0x86   0x404F             EORS     R7,R1,R7
   \       0x88   0x....'....        LDR.W    R3,??DataTable7_5
   \       0x8C   0x....'....        LDR.W    R4,??DataTable7_6
   \       0x90   0x....'....        LDR.W    R5,??DataTable7_7
   \       0x94   0x....'....        LDR.W    R6,??DataTable7_8
   \       0x98   0xF007 0x0C3F      AND      R12,R7,#0x3F
   \       0x9C   0xF856 0xC02C      LDR      R12,[R6, R12, LSL #+2]
   \       0xA0   0xF3C7 0x2E05      UBFX     LR,R7,#+8,#+6
   \       0xA4   0xF855 0xE02E      LDR      LR,[R5, LR, LSL #+2]
   \       0xA8   0xEA8E 0x0C0C      EOR      R12,LR,R12
   \       0xAC   0xF3C7 0x4E05      UBFX     LR,R7,#+16,#+6
   \       0xB0   0xF854 0xE02E      LDR      LR,[R4, LR, LSL #+2]
   \       0xB4   0xEA8E 0x0C0C      EOR      R12,LR,R12
   \       0xB8   0xF3C7 0x6705      UBFX     R7,R7,#+24,#+6
   \       0xBC   0xF853 0x7027      LDR      R7,[R3, R7, LSL #+2]
   \       0xC0   0xEA87 0x0C0C      EOR      R12,R7,R12
   \       0xC4   0xEA8C 0x0A0A      EOR      R10,R12,R10
   \       0xC8   0xF850 0x7B04      LDR      R7,[R0], #+4
   \       0xCC   0xEA87 0x1731      EOR      R7,R7,R1, ROR #+4
   \       0xD0   0x....'....        LDR.W    R12,??DataTable7_9
   \       0xD4   0x....'....        LDR.W    LR,??DataTable7_10
   \       0xD8   0xF8CD 0xA000      STR      R10,[SP, #+0]
   \       0xDC   0xF007 0x0A3F      AND      R10,R7,#0x3F
   \       0xE0   0xF859 0xB02A      LDR      R11,[R9, R10, LSL #+2]
   \       0xE4   0xF3C7 0x2A05      UBFX     R10,R7,#+8,#+6
   \       0xE8   0xF858 0xA02A      LDR      R10,[R8, R10, LSL #+2]
   \       0xEC   0xEA8A 0x0A0B      EOR      R10,R10,R11
   \       0xF0   0xF3C7 0x4B05      UBFX     R11,R7,#+16,#+6
   \       0xF4   0xF85E 0xB02B      LDR      R11,[LR, R11, LSL #+2]
   \       0xF8   0xEA8B 0x0B0A      EOR      R11,R11,R10
   \       0xFC   0xF3C7 0x6705      UBFX     R7,R7,#+24,#+6
   \      0x100   0xF85C 0x7027      LDR      R7,[R12, R7, LSL #+2]
   \      0x104   0xEA87 0x070B      EOR      R7,R7,R11
   \      0x108   0xF8DD 0xA000      LDR      R10,[SP, #+0]
   \      0x10C   0xEA87 0x0A0A      EOR      R10,R7,R10
    730                  DES_ROUND( X, Y );
   \      0x110   0xF850 0x7B04      LDR      R7,[R0], #+4
   \      0x114   0xEA8A 0x0707      EOR      R7,R10,R7
   \      0x118   0xF007 0x0B3F      AND      R11,R7,#0x3F
   \      0x11C   0xF856 0x602B      LDR      R6,[R6, R11, LSL #+2]
   \      0x120   0xF3C7 0x2B05      UBFX     R11,R7,#+8,#+6
   \      0x124   0xF855 0x502B      LDR      R5,[R5, R11, LSL #+2]
   \      0x128   0x4075             EORS     R5,R5,R6
   \      0x12A   0xF3C7 0x4605      UBFX     R6,R7,#+16,#+6
   \      0x12E   0xF854 0x4026      LDR      R4,[R4, R6, LSL #+2]
   \      0x132   0x4065             EORS     R5,R4,R5
   \      0x134   0xF3C7 0x6405      UBFX     R4,R7,#+24,#+6
   \      0x138   0xF853 0x3024      LDR      R3,[R3, R4, LSL #+2]
   \      0x13C   0x405D             EORS     R5,R3,R5
   \      0x13E   0x4069             EORS     R1,R5,R1
   \      0x140   0xF850 0x3B04      LDR      R3,[R0], #+4
   \      0x144   0xEA83 0x133A      EOR      R3,R3,R10, ROR #+4
   \      0x148   0xF003 0x043F      AND      R4,R3,#0x3F
   \      0x14C   0xF859 0x4024      LDR      R4,[R9, R4, LSL #+2]
   \      0x150   0xF3C3 0x2505      UBFX     R5,R3,#+8,#+6
   \      0x154   0xF858 0x5025      LDR      R5,[R8, R5, LSL #+2]
   \      0x158   0x406C             EORS     R4,R5,R4
   \      0x15A   0xF3C3 0x4505      UBFX     R5,R3,#+16,#+6
   \      0x15E   0xF85E 0x5025      LDR      R5,[LR, R5, LSL #+2]
   \      0x162   0x406C             EORS     R4,R5,R4
   \      0x164   0xF3C3 0x6305      UBFX     R3,R3,#+24,#+6
   \      0x168   0xF85C 0x3023      LDR      R3,[R12, R3, LSL #+2]
   \      0x16C   0x405C             EORS     R4,R3,R4
   \      0x16E   0x4061             EORS     R1,R4,R1
    731              }
   \      0x170   0x1C52             ADDS     R2,R2,#+1
   \                     ??mbedtls_des3_crypt_ecb_0: (+1)
   \      0x172   0x2A08             CMP      R2,#+8
   \      0x174   0xDB85             BLT.N    ??mbedtls_des3_crypt_ecb_1
   \      0x176   0x4652             MOV      R2,R10
   \      0x178   0x468A             MOV      R10,R1
    732          
    733              for( i = 0; i < 8; i++ )
   \      0x17A   0x2300             MOVS     R3,#+0
   \      0x17C   0x4611             MOV      R1,R2
   \      0x17E   0x461A             MOV      R2,R3
   \      0x180   0xE077             B.N      ??mbedtls_des3_crypt_ecb_2
    734              {
    735                  DES_ROUND( X, Y );
   \                     ??mbedtls_des3_crypt_ecb_3: (+1)
   \      0x182   0xF850 0x7B04      LDR      R7,[R0], #+4
   \      0x186   0x404F             EORS     R7,R1,R7
   \      0x188   0x....'....        LDR.W    R3,??DataTable7_5
   \      0x18C   0x....'....        LDR.W    R4,??DataTable7_6
   \      0x190   0x....'....        LDR.W    R5,??DataTable7_7
   \      0x194   0x....'....        LDR.W    R6,??DataTable7_8
   \      0x198   0xF007 0x0C3F      AND      R12,R7,#0x3F
   \      0x19C   0xF856 0xC02C      LDR      R12,[R6, R12, LSL #+2]
   \      0x1A0   0xF3C7 0x2E05      UBFX     LR,R7,#+8,#+6
   \      0x1A4   0xF855 0xE02E      LDR      LR,[R5, LR, LSL #+2]
   \      0x1A8   0xEA8E 0x0C0C      EOR      R12,LR,R12
   \      0x1AC   0xF3C7 0x4E05      UBFX     LR,R7,#+16,#+6
   \      0x1B0   0xF854 0xE02E      LDR      LR,[R4, LR, LSL #+2]
   \      0x1B4   0xEA8E 0x0C0C      EOR      R12,LR,R12
   \      0x1B8   0xF3C7 0x6705      UBFX     R7,R7,#+24,#+6
   \      0x1BC   0xF853 0x7027      LDR      R7,[R3, R7, LSL #+2]
   \      0x1C0   0xEA87 0x0C0C      EOR      R12,R7,R12
   \      0x1C4   0xEA8C 0x0A0A      EOR      R10,R12,R10
   \      0x1C8   0xF850 0x7B04      LDR      R7,[R0], #+4
   \      0x1CC   0xEA87 0x1731      EOR      R7,R7,R1, ROR #+4
   \      0x1D0   0x....'....        LDR.W    R12,??DataTable7_9
   \      0x1D4   0x....'....        LDR.W    LR,??DataTable7_10
   \      0x1D8   0xF8CD 0xA000      STR      R10,[SP, #+0]
   \      0x1DC   0xF007 0x0A3F      AND      R10,R7,#0x3F
   \      0x1E0   0xF859 0xB02A      LDR      R11,[R9, R10, LSL #+2]
   \      0x1E4   0xF3C7 0x2A05      UBFX     R10,R7,#+8,#+6
   \      0x1E8   0xF858 0xA02A      LDR      R10,[R8, R10, LSL #+2]
   \      0x1EC   0xEA8A 0x0A0B      EOR      R10,R10,R11
   \      0x1F0   0xF3C7 0x4B05      UBFX     R11,R7,#+16,#+6
   \      0x1F4   0xF85E 0xB02B      LDR      R11,[LR, R11, LSL #+2]
   \      0x1F8   0xEA8B 0x0B0A      EOR      R11,R11,R10
   \      0x1FC   0xF3C7 0x6705      UBFX     R7,R7,#+24,#+6
   \      0x200   0xF85C 0x7027      LDR      R7,[R12, R7, LSL #+2]
   \      0x204   0xEA87 0x070B      EOR      R7,R7,R11
   \      0x208   0xF8DD 0xA000      LDR      R10,[SP, #+0]
   \      0x20C   0xEA87 0x0A0A      EOR      R10,R7,R10
    736                  DES_ROUND( Y, X );
   \      0x210   0xF850 0x7B04      LDR      R7,[R0], #+4
   \      0x214   0xEA8A 0x0707      EOR      R7,R10,R7
   \      0x218   0xF007 0x0B3F      AND      R11,R7,#0x3F
   \      0x21C   0xF856 0x602B      LDR      R6,[R6, R11, LSL #+2]
   \      0x220   0xF3C7 0x2B05      UBFX     R11,R7,#+8,#+6
   \      0x224   0xF855 0x502B      LDR      R5,[R5, R11, LSL #+2]
   \      0x228   0x4075             EORS     R5,R5,R6
   \      0x22A   0xF3C7 0x4605      UBFX     R6,R7,#+16,#+6
   \      0x22E   0xF854 0x4026      LDR      R4,[R4, R6, LSL #+2]
   \      0x232   0x4065             EORS     R5,R4,R5
   \      0x234   0xF3C7 0x6405      UBFX     R4,R7,#+24,#+6
   \      0x238   0xF853 0x3024      LDR      R3,[R3, R4, LSL #+2]
   \      0x23C   0x405D             EORS     R5,R3,R5
   \      0x23E   0x4069             EORS     R1,R5,R1
   \      0x240   0xF850 0x3B04      LDR      R3,[R0], #+4
   \      0x244   0xEA83 0x133A      EOR      R3,R3,R10, ROR #+4
   \      0x248   0xF003 0x043F      AND      R4,R3,#0x3F
   \      0x24C   0xF859 0x4024      LDR      R4,[R9, R4, LSL #+2]
   \      0x250   0xF3C3 0x2505      UBFX     R5,R3,#+8,#+6
   \      0x254   0xF858 0x5025      LDR      R5,[R8, R5, LSL #+2]
   \      0x258   0x406C             EORS     R4,R5,R4
   \      0x25A   0xF3C3 0x4505      UBFX     R5,R3,#+16,#+6
   \      0x25E   0xF85E 0x5025      LDR      R5,[LR, R5, LSL #+2]
   \      0x262   0x406C             EORS     R4,R5,R4
   \      0x264   0xF3C3 0x6305      UBFX     R3,R3,#+24,#+6
   \      0x268   0xF85C 0x3023      LDR      R3,[R12, R3, LSL #+2]
   \      0x26C   0x405C             EORS     R4,R3,R4
   \      0x26E   0x4061             EORS     R1,R4,R1
    737              }
   \      0x270   0x1C52             ADDS     R2,R2,#+1
   \                     ??mbedtls_des3_crypt_ecb_2: (+1)
   \      0x272   0x2A08             CMP      R2,#+8
   \      0x274   0xDB85             BLT.N    ??mbedtls_des3_crypt_ecb_3
   \      0x276   0x460A             MOV      R2,R1
   \      0x278   0x4651             MOV      R1,R10
    738          
    739              for( i = 0; i < 8; i++ )
   \      0x27A   0x2300             MOVS     R3,#+0
   \      0x27C   0x4692             MOV      R10,R2
   \      0x27E   0x461A             MOV      R2,R3
   \      0x280   0xE077             B.N      ??mbedtls_des3_crypt_ecb_4
    740              {
    741                  DES_ROUND( Y, X );
   \                     ??mbedtls_des3_crypt_ecb_5: (+1)
   \      0x282   0xF850 0x7B04      LDR      R7,[R0], #+4
   \      0x286   0x404F             EORS     R7,R1,R7
   \      0x288   0x....'....        LDR.W    R3,??DataTable7_5
   \      0x28C   0x....'....        LDR.W    R4,??DataTable7_6
   \      0x290   0x....'....        LDR.W    R5,??DataTable7_7
   \      0x294   0x....'....        LDR.W    R6,??DataTable7_8
   \      0x298   0xF007 0x0C3F      AND      R12,R7,#0x3F
   \      0x29C   0xF856 0xC02C      LDR      R12,[R6, R12, LSL #+2]
   \      0x2A0   0xF3C7 0x2E05      UBFX     LR,R7,#+8,#+6
   \      0x2A4   0xF855 0xE02E      LDR      LR,[R5, LR, LSL #+2]
   \      0x2A8   0xEA8E 0x0C0C      EOR      R12,LR,R12
   \      0x2AC   0xF3C7 0x4E05      UBFX     LR,R7,#+16,#+6
   \      0x2B0   0xF854 0xE02E      LDR      LR,[R4, LR, LSL #+2]
   \      0x2B4   0xEA8E 0x0C0C      EOR      R12,LR,R12
   \      0x2B8   0xF3C7 0x6705      UBFX     R7,R7,#+24,#+6
   \      0x2BC   0xF853 0x7027      LDR      R7,[R3, R7, LSL #+2]
   \      0x2C0   0xEA87 0x0C0C      EOR      R12,R7,R12
   \      0x2C4   0xEA8C 0x0A0A      EOR      R10,R12,R10
   \      0x2C8   0xF850 0x7B04      LDR      R7,[R0], #+4
   \      0x2CC   0xEA87 0x1731      EOR      R7,R7,R1, ROR #+4
   \      0x2D0   0x....'....        LDR.W    R12,??DataTable7_9
   \      0x2D4   0x....'....        LDR.W    LR,??DataTable7_10
   \      0x2D8   0xF8CD 0xA000      STR      R10,[SP, #+0]
   \      0x2DC   0xF007 0x0A3F      AND      R10,R7,#0x3F
   \      0x2E0   0xF859 0xB02A      LDR      R11,[R9, R10, LSL #+2]
   \      0x2E4   0xF3C7 0x2A05      UBFX     R10,R7,#+8,#+6
   \      0x2E8   0xF858 0xA02A      LDR      R10,[R8, R10, LSL #+2]
   \      0x2EC   0xEA8A 0x0A0B      EOR      R10,R10,R11
   \      0x2F0   0xF3C7 0x4B05      UBFX     R11,R7,#+16,#+6
   \      0x2F4   0xF85E 0xB02B      LDR      R11,[LR, R11, LSL #+2]
   \      0x2F8   0xEA8B 0x0B0A      EOR      R11,R11,R10
   \      0x2FC   0xF3C7 0x6705      UBFX     R7,R7,#+24,#+6
   \      0x300   0xF85C 0x7027      LDR      R7,[R12, R7, LSL #+2]
   \      0x304   0xEA87 0x070B      EOR      R7,R7,R11
   \      0x308   0xF8DD 0xA000      LDR      R10,[SP, #+0]
   \      0x30C   0xEA87 0x0A0A      EOR      R10,R7,R10
    742                  DES_ROUND( X, Y );
   \      0x310   0xF850 0x7B04      LDR      R7,[R0], #+4
   \      0x314   0xEA8A 0x0707      EOR      R7,R10,R7
   \      0x318   0xF007 0x0B3F      AND      R11,R7,#0x3F
   \      0x31C   0xF856 0x602B      LDR      R6,[R6, R11, LSL #+2]
   \      0x320   0xF3C7 0x2B05      UBFX     R11,R7,#+8,#+6
   \      0x324   0xF855 0x502B      LDR      R5,[R5, R11, LSL #+2]
   \      0x328   0x4075             EORS     R5,R5,R6
   \      0x32A   0xF3C7 0x4605      UBFX     R6,R7,#+16,#+6
   \      0x32E   0xF854 0x4026      LDR      R4,[R4, R6, LSL #+2]
   \      0x332   0x4065             EORS     R5,R4,R5
   \      0x334   0xF3C7 0x6405      UBFX     R4,R7,#+24,#+6
   \      0x338   0xF853 0x3024      LDR      R3,[R3, R4, LSL #+2]
   \      0x33C   0x405D             EORS     R5,R3,R5
   \      0x33E   0x4069             EORS     R1,R5,R1
   \      0x340   0xF850 0x3B04      LDR      R3,[R0], #+4
   \      0x344   0xEA83 0x133A      EOR      R3,R3,R10, ROR #+4
   \      0x348   0xF003 0x043F      AND      R4,R3,#0x3F
   \      0x34C   0xF859 0x4024      LDR      R4,[R9, R4, LSL #+2]
   \      0x350   0xF3C3 0x2505      UBFX     R5,R3,#+8,#+6
   \      0x354   0xF858 0x5025      LDR      R5,[R8, R5, LSL #+2]
   \      0x358   0x406C             EORS     R4,R5,R4
   \      0x35A   0xF3C3 0x4505      UBFX     R5,R3,#+16,#+6
   \      0x35E   0xF85E 0x5025      LDR      R5,[LR, R5, LSL #+2]
   \      0x362   0x406C             EORS     R4,R5,R4
   \      0x364   0xF3C3 0x6305      UBFX     R3,R3,#+24,#+6
   \      0x368   0xF85C 0x3023      LDR      R3,[R12, R3, LSL #+2]
   \      0x36C   0x405C             EORS     R4,R3,R4
   \      0x36E   0x4061             EORS     R1,R4,R1
    743              }
   \      0x370   0x1C52             ADDS     R2,R2,#+1
   \                     ??mbedtls_des3_crypt_ecb_4: (+1)
   \      0x372   0x2A08             CMP      R2,#+8
   \      0x374   0xDB85             BLT.N    ??mbedtls_des3_crypt_ecb_5
   \      0x376   0x9801             LDR      R0,[SP, #+4]
    744          
    745              DES_FP( Y, X );
   \      0x378   0xEA4F 0x0271      ROR      R2,R1,#+1
   \      0x37C   0xEA8A 0x0102      EOR      R1,R10,R2
   \      0x380   0xF021 0x3155      BIC      R1,R1,#0x55555555
   \      0x384   0x404A             EORS     R2,R1,R2
   \      0x386   0xEA81 0x0A0A      EOR      R10,R1,R10
   \      0x38A   0xEA4F 0x017A      ROR      R1,R10,#+1
   \      0x38E   0xEA82 0x2311      EOR      R3,R2,R1, LSR #+8
   \      0x392   0xF023 0x23FF      BIC      R3,R3,#0xFF00FF00
   \      0x396   0x405A             EORS     R2,R3,R2
   \      0x398   0xEA81 0x2103      EOR      R1,R1,R3, LSL #+8
   \      0x39C   0xEA82 0x0391      EOR      R3,R2,R1, LSR #+2
   \      0x3A0   0xF023 0x33CC      BIC      R3,R3,#0xCCCCCCCC
   \      0x3A4   0x405A             EORS     R2,R3,R2
   \      0x3A6   0xEA81 0x0183      EOR      R1,R1,R3, LSL #+2
   \      0x3AA   0xEA81 0x4312      EOR      R3,R1,R2, LSR #+16
   \      0x3AE   0xB29B             UXTH     R3,R3
   \      0x3B0   0x4059             EORS     R1,R3,R1
   \      0x3B2   0xEA82 0x4203      EOR      R2,R2,R3, LSL #+16
   \      0x3B6   0xEA81 0x1312      EOR      R3,R1,R2, LSR #+4
   \      0x3BA   0xF023 0x33F0      BIC      R3,R3,#0xF0F0F0F0
   \      0x3BE   0x4059             EORS     R1,R3,R1
   \      0x3C0   0xEA82 0x1203      EOR      R2,R2,R3, LSL #+4
    746          
    747              PUT_UINT32_BE( Y, output, 0 );
   \      0x3C4   0x4613             MOV      R3,R2
   \      0x3C6   0x0E1B             LSRS     R3,R3,#+24
   \      0x3C8   0x7003             STRB     R3,[R0, #+0]
   \      0x3CA   0x4613             MOV      R3,R2
   \      0x3CC   0x0C1B             LSRS     R3,R3,#+16
   \      0x3CE   0x7043             STRB     R3,[R0, #+1]
   \      0x3D0   0x4613             MOV      R3,R2
   \      0x3D2   0x0A1B             LSRS     R3,R3,#+8
   \      0x3D4   0x7083             STRB     R3,[R0, #+2]
   \      0x3D6   0x70C2             STRB     R2,[R0, #+3]
    748              PUT_UINT32_BE( X, output, 4 );
   \      0x3D8   0x460A             MOV      R2,R1
   \      0x3DA   0x0E12             LSRS     R2,R2,#+24
   \      0x3DC   0x7102             STRB     R2,[R0, #+4]
   \      0x3DE   0x460A             MOV      R2,R1
   \      0x3E0   0x0C12             LSRS     R2,R2,#+16
   \      0x3E2   0x7142             STRB     R2,[R0, #+5]
   \      0x3E4   0x460A             MOV      R2,R1
   \      0x3E6   0x0A12             LSRS     R2,R2,#+8
   \      0x3E8   0x7182             STRB     R2,[R0, #+6]
   \      0x3EA   0x71C1             STRB     R1,[R0, #+7]
    749          
    750              return( 0 );
   \      0x3EC   0x2000             MOVS     R0,#+0
   \      0x3EE   0xE8BD 0x8FF6      POP      {R1,R2,R4-R11,PC}  ;; return
    751          }
    752          #endif /* !MBEDTLS_DES3_CRYPT_ECB_ALT */
    753          
    754          #if defined(MBEDTLS_CIPHER_MODE_CBC)
    755          /*
    756           * 3DES-CBC buffer encryption/decryption
    757           */

   \                                 In section .text, align 2, keep-with-next
    758          int mbedtls_des3_crypt_cbc( mbedtls_des3_context *ctx,
    759                               int mode,
    760                               size_t length,
    761                               unsigned char iv[8],
    762                               const unsigned char *input,
    763                               unsigned char *output )
    764          {
   \                     mbedtls_des3_crypt_cbc: (+1)
   \        0x0   0xE92D 0x41FC      PUSH     {R2-R8,LR}
   \        0x4   0x4607             MOV      R7,R0
   \        0x6   0x4614             MOV      R4,R2
   \        0x8   0x4698             MOV      R8,R3
    765              int i;
    766              unsigned char temp[8];
    767          
    768              if( length % 8 )
   \        0xA   0xF014 0x0F07      TST      R4,#0x7
   \        0xE   0xD002             BEQ.N    ??mbedtls_des3_crypt_cbc_0
    769                  return( MBEDTLS_ERR_DES_INVALID_INPUT_LENGTH );
   \       0x10   0xF06F 0x0031      MVN      R0,#+49
   \       0x14   0xE03C             B.N      ??mbedtls_des3_crypt_cbc_1
   \                     ??mbedtls_des3_crypt_cbc_0: (+1)
   \       0x16   0x9D08             LDR      R5,[SP, #+32]
   \       0x18   0x9E09             LDR      R6,[SP, #+36]
    770          
    771              if( mode == MBEDTLS_DES_ENCRYPT )
   \       0x1A   0x2901             CMP      R1,#+1
   \       0x1C   0xD129             BNE.N    ??mbedtls_des3_crypt_cbc_2
   \       0x1E   0x2C00             CMP      R4,#+0
   \       0x20   0xE014             B.N      ??mbedtls_des3_crypt_cbc_3
    772              {
    773                  while( length > 0 )
    774                  {
    775                      for( i = 0; i < 8; i++ )
    776                          output[i] = (unsigned char)( input[i] ^ iv[i] );
   \                     ??mbedtls_des3_crypt_cbc_4: (+1)
   \       0x22   0x5C29             LDRB     R1,[R5, R0]
   \       0x24   0xF818 0x2000      LDRB     R2,[R8, R0]
   \       0x28   0x4051             EORS     R1,R2,R1
   \       0x2A   0x5431             STRB     R1,[R6, R0]
   \       0x2C   0x1C40             ADDS     R0,R0,#+1
   \                     ??mbedtls_des3_crypt_cbc_5: (+1)
   \       0x2E   0x2808             CMP      R0,#+8
   \       0x30   0xDBF7             BLT.N    ??mbedtls_des3_crypt_cbc_4
    777          
    778                      mbedtls_des3_crypt_ecb( ctx, output, output );
   \       0x32   0x4632             MOV      R2,R6
   \       0x34   0x4631             MOV      R1,R6
   \       0x36   0x4638             MOV      R0,R7
   \       0x38   0x....'....        BL       mbedtls_des3_crypt_ecb
    779                      memcpy( iv, output, 8 );
   \       0x3C   0x2208             MOVS     R2,#+8
   \       0x3E   0x4631             MOV      R1,R6
   \       0x40   0x4640             MOV      R0,R8
   \       0x42   0x....'....        BL       __aeabi_memcpy
    780          
    781                      input  += 8;
   \       0x46   0x3508             ADDS     R5,R5,#+8
    782                      output += 8;
   \       0x48   0x3608             ADDS     R6,R6,#+8
    783                      length -= 8;
   \       0x4A   0x3C08             SUBS     R4,R4,#+8
   \                     ??mbedtls_des3_crypt_cbc_3: (+1)
   \       0x4C   0xD01F             BEQ.N    ??mbedtls_des3_crypt_cbc_6
   \       0x4E   0x2000             MOVS     R0,#+0
   \       0x50   0xE7ED             B.N      ??mbedtls_des3_crypt_cbc_5
    784                  }
    785              }
    786              else /* MBEDTLS_DES_DECRYPT */
    787              {
    788                  while( length > 0 )
    789                  {
    790                      memcpy( temp, input, 8 );
    791                      mbedtls_des3_crypt_ecb( ctx, input, output );
    792          
    793                      for( i = 0; i < 8; i++ )
    794                          output[i] = (unsigned char)( output[i] ^ iv[i] );
   \                     ??mbedtls_des3_crypt_cbc_7: (+1)
   \       0x52   0x5C31             LDRB     R1,[R6, R0]
   \       0x54   0xF818 0x2000      LDRB     R2,[R8, R0]
   \       0x58   0x4051             EORS     R1,R2,R1
   \       0x5A   0x5431             STRB     R1,[R6, R0]
   \       0x5C   0x1C40             ADDS     R0,R0,#+1
   \                     ??mbedtls_des3_crypt_cbc_8: (+1)
   \       0x5E   0x2808             CMP      R0,#+8
   \       0x60   0xDBF7             BLT.N    ??mbedtls_des3_crypt_cbc_7
    795          
    796                      memcpy( iv, temp, 8 );
   \       0x62   0x2208             MOVS     R2,#+8
   \       0x64   0x4669             MOV      R1,SP
   \       0x66   0x4640             MOV      R0,R8
   \       0x68   0x....'....        BL       __aeabi_memcpy
    797          
    798                      input  += 8;
   \       0x6C   0x3508             ADDS     R5,R5,#+8
    799                      output += 8;
   \       0x6E   0x3608             ADDS     R6,R6,#+8
    800                      length -= 8;
   \       0x70   0x3C08             SUBS     R4,R4,#+8
   \                     ??mbedtls_des3_crypt_cbc_2: (+1)
   \       0x72   0x2C00             CMP      R4,#+0
   \       0x74   0xD00B             BEQ.N    ??mbedtls_des3_crypt_cbc_6
   \       0x76   0x2208             MOVS     R2,#+8
   \       0x78   0x4629             MOV      R1,R5
   \       0x7A   0x4668             MOV      R0,SP
   \       0x7C   0x....'....        BL       __aeabi_memcpy
   \       0x80   0x4632             MOV      R2,R6
   \       0x82   0x4629             MOV      R1,R5
   \       0x84   0x4638             MOV      R0,R7
   \       0x86   0x....'....        BL       mbedtls_des3_crypt_ecb
   \       0x8A   0x2000             MOVS     R0,#+0
   \       0x8C   0xE7E7             B.N      ??mbedtls_des3_crypt_cbc_8
    801                  }
    802              }
    803          
    804              return( 0 );
   \                     ??mbedtls_des3_crypt_cbc_6: (+1)
   \       0x8E   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_des3_crypt_cbc_1: (+1)
   \       0x90   0xE8BD 0x81F6      POP      {R1,R2,R4-R8,PC}  ;; return
    805          }
    806          #endif /* MBEDTLS_CIPHER_MODE_CBC */
    807          
    808          #endif /* !MBEDTLS_DES_ALT */
    809          
    810          #if defined(MBEDTLS_SELF_TEST)
    811          /*
    812           * DES and 3DES test vectors from:
    813           *
    814           * http://csrc.nist.gov/groups/STM/cavp/documents/des/tripledes-vectors.zip
    815           */

   \                                 In section .rodata, align 4
    816          static const unsigned char des3_test_keys[24] =
   \                     des3_test_keys:
   \        0x0   0x01 0x23          DC8 1, 35, 69, 103, 137, 171, 205, 239, 35, 69, 103, 137, 171, 205, 239
   \              0x45 0x67    
   \              0x89 0xAB    
   \              0xCD 0xEF    
   \              0x23 0x45    
   \              0x67 0x89    
   \              0xAB 0xCD    
   \              0xEF         
   \        0xF   0x01 0x45          DC8 1, 69, 103, 137, 171, 205, 239, 1, 35
   \              0x67 0x89    
   \              0xAB 0xCD    
   \              0xEF 0x01    
   \              0x23         
    817          {
    818              0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
    819              0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0x01,
    820              0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0x01, 0x23
    821          };
    822          

   \                                 In section .rodata, align 4
    823          static const unsigned char des3_test_buf[8] =
   \                     des3_test_buf:
   \        0x0   0x4E 0x6F          DC8 78, 111, 119, 32, 105, 115, 32, 116
   \              0x77 0x20    
   \              0x69 0x73    
   \              0x20 0x74    
    824          {
    825              0x4E, 0x6F, 0x77, 0x20, 0x69, 0x73, 0x20, 0x74
    826          };
    827          

   \                                 In section .rodata, align 4
    828          static const unsigned char des3_test_ecb_dec[3][8] =
   \                     des3_test_ecb_dec:
   \        0x0   0xCD 0xD6          DC8 205, 214, 79, 47, 148, 39, 193, 93, 105, 150, 200, 250, 71, 162
   \              0x4F 0x2F    
   \              0x94 0x27    
   \              0xC1 0x5D    
   \              0x69 0x96    
   \              0xC8 0xFA    
   \              0x47 0xA2    
   \        0xE   0xAB 0xEB          DC8 171, 235, 131, 37, 57, 118, 68, 9, 26, 10
   \              0x83 0x25    
   \              0x39 0x76    
   \              0x44 0x09    
   \              0x1A 0x0A    
    829          {
    830              { 0xCD, 0xD6, 0x4F, 0x2F, 0x94, 0x27, 0xC1, 0x5D },
    831              { 0x69, 0x96, 0xC8, 0xFA, 0x47, 0xA2, 0xAB, 0xEB },
    832              { 0x83, 0x25, 0x39, 0x76, 0x44, 0x09, 0x1A, 0x0A }
    833          };
    834          

   \                                 In section .rodata, align 4
    835          static const unsigned char des3_test_ecb_enc[3][8] =
   \                     des3_test_ecb_enc:
   \        0x0   0x6A 0x2A          DC8 106, 42, 25, 244, 30, 202, 133, 75, 3, 230, 159, 91, 250, 88, 235
   \              0x19 0xF4    
   \              0x1E 0xCA    
   \              0x85 0x4B    
   \              0x03 0xE6    
   \              0x9F 0x5B    
   \              0xFA 0x58    
   \              0xEB         
   \        0xF   0x42 0xDD          DC8 66, 221, 23, 232, 184, 180, 55, 210, 50
   \              0x17 0xE8    
   \              0xB8 0xB4    
   \              0x37 0xD2    
   \              0x32         
    836          {
    837              { 0x6A, 0x2A, 0x19, 0xF4, 0x1E, 0xCA, 0x85, 0x4B },
    838              { 0x03, 0xE6, 0x9F, 0x5B, 0xFA, 0x58, 0xEB, 0x42 },
    839              { 0xDD, 0x17, 0xE8, 0xB8, 0xB4, 0x37, 0xD2, 0x32 }
    840          };
    841          
    842          #if defined(MBEDTLS_CIPHER_MODE_CBC)

   \                                 In section .rodata, align 4
    843          static const unsigned char des3_test_iv[8] =
   \                     des3_test_iv:
   \        0x0   0x12 0x34          DC8 18, 52, 86, 120, 144, 171, 205, 239
   \              0x56 0x78    
   \              0x90 0xAB    
   \              0xCD 0xEF    
    844          {
    845              0x12, 0x34, 0x56, 0x78, 0x90, 0xAB, 0xCD, 0xEF,
    846          };
    847          

   \                                 In section .rodata, align 4
    848          static const unsigned char des3_test_cbc_dec[3][8] =
   \                     des3_test_cbc_dec:
   \        0x0   0x12 0x9F          DC8 18, 159, 64, 185, 210, 0, 86, 179, 71, 14, 252, 154, 107, 142, 227
   \              0x40 0xB9    
   \              0xD2 0x00    
   \              0x56 0xB3    
   \              0x47 0x0E    
   \              0xFC 0x9A    
   \              0x6B 0x8E    
   \              0xE3         
   \        0xF   0x93 0xC5          DC8 147, 197, 206, 207, 99, 236, 236, 81, 76
   \              0xCE 0xCF    
   \              0x63 0xEC    
   \              0xEC 0x51    
   \              0x4C         
    849          {
    850              { 0x12, 0x9F, 0x40, 0xB9, 0xD2, 0x00, 0x56, 0xB3 },
    851              { 0x47, 0x0E, 0xFC, 0x9A, 0x6B, 0x8E, 0xE3, 0x93 },
    852              { 0xC5, 0xCE, 0xCF, 0x63, 0xEC, 0xEC, 0x51, 0x4C }
    853          };
    854          

   \                                 In section .rodata, align 4
    855          static const unsigned char des3_test_cbc_enc[3][8] =
   \                     des3_test_cbc_enc:
   \        0x0   0x54 0xF1          DC8 84, 241, 90, 246, 235, 227, 164, 180, 53, 118, 17, 86, 95, 161, 142
   \              0x5A 0xF6    
   \              0xEB 0xE3    
   \              0xA4 0xB4    
   \              0x35 0x76    
   \              0x11 0x56    
   \              0x5F 0xA1    
   \              0x8E         
   \        0xF   0x4D 0xCB          DC8 77, 203, 25, 31, 133, 209, 237, 132, 57
   \              0x19 0x1F    
   \              0x85 0xD1    
   \              0xED 0x84    
   \              0x39         
    856          {
    857              { 0x54, 0xF1, 0x5A, 0xF6, 0xEB, 0xE3, 0xA4, 0xB4 },
    858              { 0x35, 0x76, 0x11, 0x56, 0x5F, 0xA1, 0x8E, 0x4D },
    859              { 0xCB, 0x19, 0x1F, 0x85, 0xD1, 0xED, 0x84, 0x39 }
    860          };
    861          #endif /* MBEDTLS_CIPHER_MODE_CBC */
    862          
    863          /*
    864           * Checkup routine
    865           */

   \                                 In section .text, align 4, keep-with-next
    866          int mbedtls_des_self_test( int verbose )
    867          {
   \                     mbedtls_des_self_test: (+1)
   \        0x0   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \        0x4   0xF5AD 0x7D0A      SUB      SP,SP,#+552
   \        0x8   0x4604             MOV      R4,R0
    868              int i, j, u, v, ret = 0;
   \        0xA   0x2700             MOVS     R7,#+0
    869              mbedtls_des_context ctx;
    870              mbedtls_des3_context ctx3;
    871              unsigned char buf[8];
    872          #if defined(MBEDTLS_CIPHER_MODE_CBC)
    873              unsigned char prv[8];
    874              unsigned char iv[8];
    875          #endif
    876          
    877              mbedtls_des_init( &ctx );
   \        0xC   0xA80A             ADD      R0,SP,#+40
   \        0xE   0x....'....        BL       mbedtls_des_init
    878              mbedtls_des3_init( &ctx3 );
   \       0x12   0xA82A             ADD      R0,SP,#+168
   \       0x14   0x....'....        BL       mbedtls_des3_init
    879              /*
    880               * ECB mode
    881               */
    882              for( i = 0; i < 6; i++ )
   \       0x18   0x46B8             MOV      R8,R7
   \       0x1A   0xE01C             B.N      ??mbedtls_des_self_test_2
    883              {
    884                  u = i >> 1;
    885                  v = i  & 1;
    886          
    887                  if( verbose != 0 )
    888                      mbedtls_printf( "  DES%c-ECB-%3d (%s): ",
    889                                       ( u == 0 ) ? ' ' : '3', 56 + u * 56,
    890                                       ( v == MBEDTLS_DES_DECRYPT ) ? "dec" : "enc" );
    891          
    892                  memcpy( buf, des3_test_buf, 8 );
    893          
    894                  switch( i )
    895                  {
    896                  case 0:
    897                      mbedtls_des_setkey_dec( &ctx, des3_test_keys );
    898                      break;
    899          
    900                  case 1:
    901                      mbedtls_des_setkey_enc( &ctx, des3_test_keys );
    902                      break;
    903          
    904                  case 2:
    905                      mbedtls_des3_set2key_dec( &ctx3, des3_test_keys );
    906                      break;
    907          
    908                  case 3:
    909                      mbedtls_des3_set2key_enc( &ctx3, des3_test_keys );
    910                      break;
    911          
    912                  case 4:
    913                      mbedtls_des3_set3key_dec( &ctx3, des3_test_keys );
    914                      break;
    915          
    916                  case 5:
    917                      mbedtls_des3_set3key_enc( &ctx3, des3_test_keys );
    918                      break;
    919          
    920                  default:
    921                      return( 1 );
    922                  }
    923          
    924                  for( j = 0; j < 10000; j++ )
    925                  {
    926                      if( u == 0 )
    927                          mbedtls_des_crypt_ecb( &ctx, buf, buf );
    928                      else
    929                          mbedtls_des3_crypt_ecb( &ctx3, buf, buf );
    930                  }
    931          
    932                  if( ( v == MBEDTLS_DES_DECRYPT &&
    933                          memcmp( buf, des3_test_ecb_dec[u], 8 ) != 0 ) ||
    934                      ( v != MBEDTLS_DES_DECRYPT &&
    935                          memcmp( buf, des3_test_ecb_enc[u], 8 ) != 0 ) )
   \                     ??mbedtls_des_self_test_3: (+1)
   \       0x1C   0x2E00             CMP      R6,#+0
   \       0x1E   0xD108             BNE.N    ??mbedtls_des_self_test_4
   \       0x20   0x2208             MOVS     R2,#+8
   \       0x22   0x....             LDR.N    R0,??DataTable7_11
   \       0x24   0xEB00 0x01C5      ADD      R1,R0,R5, LSL #+3
   \       0x28   0xA802             ADD      R0,SP,#+8
   \       0x2A   0x....'....        BL       memcmp
   \       0x2E   0x2800             CMP      R0,#+0
   \       0x30   0xD169             BNE.N    ??mbedtls_des_self_test_5
   \                     ??mbedtls_des_self_test_4: (+1)
   \       0x32   0x2E00             CMP      R6,#+0
   \       0x34   0xD008             BEQ.N    ??mbedtls_des_self_test_6
   \       0x36   0x2208             MOVS     R2,#+8
   \       0x38   0x....             LDR.N    R0,??DataTable7_12
   \       0x3A   0xEB00 0x01C5      ADD      R1,R0,R5, LSL #+3
   \       0x3E   0xA802             ADD      R0,SP,#+8
   \       0x40   0x....'....        BL       memcmp
   \       0x44   0x2800             CMP      R0,#+0
   \       0x46   0xD15E             BNE.N    ??mbedtls_des_self_test_5
    936                  {
    937                      if( verbose != 0 )
    938                          mbedtls_printf( "failed\n\r" );
    939          
    940                      ret = 1;
    941                      goto exit;
    942                  }
    943          
    944                  if( verbose != 0 )
   \                     ??mbedtls_des_self_test_6: (+1)
   \       0x48   0x2C00             CMP      R4,#+0
   \       0x4A   0xD002             BEQ.N    ??mbedtls_des_self_test_7
    945                      mbedtls_printf( "passed\n\r" );
   \       0x4C   0x....             LDR.N    R0,??DataTable7_13
   \       0x4E   0x....'....        BL       DbgConsole_Printf
   \                     ??mbedtls_des_self_test_7: (+1)
   \       0x52   0xF108 0x0801      ADD      R8,R8,#+1
   \                     ??mbedtls_des_self_test_2: (+1)
   \       0x56   0xF1B8 0x0F06      CMP      R8,#+6
   \       0x5A   0xDA5B             BGE.N    ??mbedtls_des_self_test_8
   \       0x5C   0x4645             MOV      R5,R8
   \       0x5E   0x106D             ASRS     R5,R5,#+1
   \       0x60   0xF008 0x0601      AND      R6,R8,#0x1
   \       0x64   0x2C00             CMP      R4,#+0
   \       0x66   0xD010             BEQ.N    ??mbedtls_des_self_test_9
   \       0x68   0x2E00             CMP      R6,#+0
   \       0x6A   0xD101             BNE.N    ??mbedtls_des_self_test_10
   \       0x6C   0x....             ADR.N    R3,??DataTable7  ;; "dec"
   \       0x6E   0xE000             B.N      ??mbedtls_des_self_test_11
   \                     ??mbedtls_des_self_test_10: (+1)
   \       0x70   0x....             ADR.N    R3,??DataTable7_1  ;; "enc"
   \                     ??mbedtls_des_self_test_11: (+1)
   \       0x72   0x2D00             CMP      R5,#+0
   \       0x74   0xD101             BNE.N    ??mbedtls_des_self_test_12
   \       0x76   0x2120             MOVS     R1,#+32
   \       0x78   0xE000             B.N      ??mbedtls_des_self_test_13
   \                     ??mbedtls_des_self_test_12: (+1)
   \       0x7A   0x2133             MOVS     R1,#+51
   \                     ??mbedtls_des_self_test_13: (+1)
   \       0x7C   0xEBC5 0x00C5      RSB      R0,R5,R5, LSL #+3
   \       0x80   0x00C2             LSLS     R2,R0,#+3
   \       0x82   0x3238             ADDS     R2,R2,#+56
   \       0x84   0x....             LDR.N    R0,??DataTable7_14
   \       0x86   0x....'....        BL       DbgConsole_Printf
   \                     ??mbedtls_des_self_test_9: (+1)
   \       0x8A   0x2208             MOVS     R2,#+8
   \       0x8C   0x....             LDR.N    R1,??DataTable7_15
   \       0x8E   0xA802             ADD      R0,SP,#+8
   \       0x90   0x....'....        BL       __aeabi_memcpy4
   \       0x94   0x4640             MOV      R0,R8
   \       0x96   0x2805             CMP      R0,#+5
   \       0x98   0xF200 0x80B0      BHI.W    ??mbedtls_des_self_test_14
   \       0x9C   0xE8DF 0xF000      TBB      [PC, R0]
   \                     ??mbedtls_des_self_test_0:
   \       0xA0   0x03 0x08          DC8      0x3,0x8,0xD,0x12
   \              0x0D 0x12    
   \       0xA4   0x17 0x1C          DC8      0x17,0x1C
   \                     ??mbedtls_des_self_test_15: (+1)
   \       0xA6   0x....             LDR.N    R1,??DataTable7_16
   \       0xA8   0xA80A             ADD      R0,SP,#+40
   \       0xAA   0x....'....        BL       mbedtls_des_setkey_dec
   \       0xAE   0xE017             B.N      ??mbedtls_des_self_test_16
   \                     ??mbedtls_des_self_test_17: (+1)
   \       0xB0   0x....             LDR.N    R1,??DataTable7_16
   \       0xB2   0xA80A             ADD      R0,SP,#+40
   \       0xB4   0x....'....        BL       mbedtls_des_setkey_enc
   \       0xB8   0xE012             B.N      ??mbedtls_des_self_test_16
   \                     ??mbedtls_des_self_test_18: (+1)
   \       0xBA   0x....             LDR.N    R1,??DataTable7_16
   \       0xBC   0xA82A             ADD      R0,SP,#+168
   \       0xBE   0x....'....        BL       mbedtls_des3_set2key_dec
   \       0xC2   0xE00D             B.N      ??mbedtls_des_self_test_16
   \                     ??mbedtls_des_self_test_19: (+1)
   \       0xC4   0x....             LDR.N    R1,??DataTable7_16
   \       0xC6   0xA82A             ADD      R0,SP,#+168
   \       0xC8   0x....'....        BL       mbedtls_des3_set2key_enc
   \       0xCC   0xE008             B.N      ??mbedtls_des_self_test_16
   \                     ??mbedtls_des_self_test_20: (+1)
   \       0xCE   0x....             LDR.N    R1,??DataTable7_16
   \       0xD0   0xA82A             ADD      R0,SP,#+168
   \       0xD2   0x....'....        BL       mbedtls_des3_set3key_dec
   \       0xD6   0xE003             B.N      ??mbedtls_des_self_test_16
   \                     ??mbedtls_des_self_test_21: (+1)
   \       0xD8   0x....             LDR.N    R1,??DataTable7_16
   \       0xDA   0xA82A             ADD      R0,SP,#+168
   \       0xDC   0x....'....        BL       mbedtls_des3_set3key_enc
   \                     ??mbedtls_des_self_test_16: (+1)
   \       0xE0   0x46B9             MOV      R9,R7
   \                     ??mbedtls_des_self_test_22: (+1)
   \       0xE2   0xF242 0x7010      MOVW     R0,#+10000
   \       0xE6   0x4581             CMP      R9,R0
   \       0xE8   0xDA98             BGE.N    ??mbedtls_des_self_test_3
   \       0xEA   0x2D00             CMP      R5,#+0
   \       0xEC   0xAA02             ADD      R2,SP,#+8
   \       0xEE   0xA902             ADD      R1,SP,#+8
   \       0xF0   0xD003             BEQ.N    ??mbedtls_des_self_test_23
   \       0xF2   0xA82A             ADD      R0,SP,#+168
   \       0xF4   0x....'....        BL       mbedtls_des3_crypt_ecb
   \       0xF8   0xE002             B.N      ??mbedtls_des_self_test_24
   \                     ??mbedtls_des_self_test_23: (+1)
   \       0xFA   0xA80A             ADD      R0,SP,#+40
   \       0xFC   0x....'....        BL       mbedtls_des_crypt_ecb
   \                     ??mbedtls_des_self_test_24: (+1)
   \      0x100   0xF109 0x0901      ADD      R9,R9,#+1
   \      0x104   0xE7ED             B.N      ??mbedtls_des_self_test_22
   \                     ??mbedtls_des_self_test_5: (+1)
   \      0x106   0x2C00             CMP      R4,#+0
   \      0x108   0xF000 0x80DB      BEQ.W    ??mbedtls_des_self_test_25
   \      0x10C   0x....             LDR.N    R0,??DataTable7_17
   \      0x10E   0x....'....        BL       DbgConsole_Printf
   \      0x112   0xE0D6             B.N      ??mbedtls_des_self_test_25
    946              }
    947          
    948              if( verbose != 0 )
   \                     ??mbedtls_des_self_test_8: (+1)
   \      0x114   0x2C00             CMP      R4,#+0
   \      0x116   0xD002             BEQ.N    ??mbedtls_des_self_test_26
    949                  mbedtls_printf( "\n\r" );
   \      0x118   0x....             ADR.N    R0,??DataTable7_2  ;; 0x0A, 0x0D, 0x00, 0x00
   \      0x11A   0x....'....        BL       DbgConsole_Printf
    950          
    951          #if defined(MBEDTLS_CIPHER_MODE_CBC)
    952              /*
    953               * CBC mode
    954               */
    955              for( i = 0; i < 6; i++ )
   \                     ??mbedtls_des_self_test_26: (+1)
   \      0x11E   0x46B9             MOV      R9,R7
   \      0x120   0xE006             B.N      ??mbedtls_des_self_test_27
    956              {
    957                  u = i >> 1;
    958                  v = i  & 1;
    959          
    960                  if( verbose != 0 )
    961                      mbedtls_printf( "  DES%c-CBC-%3d (%s): ",
    962                                       ( u == 0 ) ? ' ' : '3', 56 + u * 56,
    963                                       ( v == MBEDTLS_DES_DECRYPT ) ? "dec" : "enc" );
    964          
    965                  memcpy( iv,  des3_test_iv,  8 );
    966                  memcpy( prv, des3_test_iv,  8 );
    967                  memcpy( buf, des3_test_buf, 8 );
    968          
    969                  switch( i )
    970                  {
    971                  case 0:
    972                      mbedtls_des_setkey_dec( &ctx, des3_test_keys );
    973                      break;
    974          
    975                  case 1:
    976                      mbedtls_des_setkey_enc( &ctx, des3_test_keys );
    977                      break;
    978          
    979                  case 2:
    980                      mbedtls_des3_set2key_dec( &ctx3, des3_test_keys );
    981                      break;
    982          
    983                  case 3:
    984                      mbedtls_des3_set2key_enc( &ctx3, des3_test_keys );
    985                      break;
    986          
    987                  case 4:
    988                      mbedtls_des3_set3key_dec( &ctx3, des3_test_keys );
    989                      break;
    990          
    991                  case 5:
    992                      mbedtls_des3_set3key_enc( &ctx3, des3_test_keys );
    993                      break;
    994          
    995                  default:
    996                      return( 1 );
    997                  }
    998          
    999                  if( v == MBEDTLS_DES_DECRYPT )
   1000                  {
   1001                      for( j = 0; j < 10000; j++ )
   1002                      {
   1003                          if( u == 0 )
   1004                              mbedtls_des_crypt_cbc( &ctx, v, 8, iv, buf, buf );
   1005                          else
   1006                              mbedtls_des3_crypt_cbc( &ctx3, v, 8, iv, buf, buf );
   1007                      }
   1008                  }
   1009                  else
   1010                  {
   1011                      for( j = 0; j < 10000; j++ )
   1012                      {
   1013                          unsigned char tmp[8];
   1014          
   1015                          if( u == 0 )
   1016                              mbedtls_des_crypt_cbc( &ctx, v, 8, iv, buf, buf );
   1017                          else
   1018                              mbedtls_des3_crypt_cbc( &ctx3, v, 8, iv, buf, buf );
   1019          
   1020                          memcpy( tmp, prv, 8 );
   1021                          memcpy( prv, buf, 8 );
   1022                          memcpy( buf, tmp, 8 );
   1023                      }
   1024          
   1025                      memcpy( buf, prv, 8 );
   1026                  }
   1027          
   1028                  if( ( v == MBEDTLS_DES_DECRYPT &&
   1029                          memcmp( buf, des3_test_cbc_dec[u], 8 ) != 0 ) ||
   1030                      ( v != MBEDTLS_DES_DECRYPT &&
   1031                          memcmp( buf, des3_test_cbc_enc[u], 8 ) != 0 ) )
   1032                  {
   1033                      if( verbose != 0 )
   1034                          mbedtls_printf( "failed\n\r" );
   1035          
   1036                      ret = 1;
   1037                      goto exit;
   1038                  }
   1039          
   1040                  if( verbose != 0 )
   \                     ??mbedtls_des_self_test_28: (+1)
   \      0x122   0x2C00             CMP      R4,#+0
   \      0x124   0xD002             BEQ.N    ??mbedtls_des_self_test_29
   1041                      mbedtls_printf( "passed\n\r" );
   \      0x126   0x....             LDR.N    R0,??DataTable7_13
   \      0x128   0x....'....        BL       DbgConsole_Printf
   \                     ??mbedtls_des_self_test_29: (+1)
   \      0x12C   0xF109 0x0901      ADD      R9,R9,#+1
   \                     ??mbedtls_des_self_test_27: (+1)
   \      0x130   0xF1B9 0x0F06      CMP      R9,#+6
   \      0x134   0xF280 0x8093      BGE.W    ??mbedtls_des_self_test_30
   \      0x138   0x464E             MOV      R6,R9
   \      0x13A   0x1076             ASRS     R6,R6,#+1
   \      0x13C   0xF009 0x0501      AND      R5,R9,#0x1
   \      0x140   0x2C00             CMP      R4,#+0
   \      0x142   0xD010             BEQ.N    ??mbedtls_des_self_test_31
   \      0x144   0x2D00             CMP      R5,#+0
   \      0x146   0xD101             BNE.N    ??mbedtls_des_self_test_32
   \      0x148   0x....             ADR.N    R3,??DataTable7  ;; "dec"
   \      0x14A   0xE000             B.N      ??mbedtls_des_self_test_33
   \                     ??mbedtls_des_self_test_32: (+1)
   \      0x14C   0x....             ADR.N    R3,??DataTable7_1  ;; "enc"
   \                     ??mbedtls_des_self_test_33: (+1)
   \      0x14E   0x2E00             CMP      R6,#+0
   \      0x150   0xD101             BNE.N    ??mbedtls_des_self_test_34
   \      0x152   0x2120             MOVS     R1,#+32
   \      0x154   0xE000             B.N      ??mbedtls_des_self_test_35
   \                     ??mbedtls_des_self_test_34: (+1)
   \      0x156   0x2133             MOVS     R1,#+51
   \                     ??mbedtls_des_self_test_35: (+1)
   \      0x158   0xEBC6 0x00C6      RSB      R0,R6,R6, LSL #+3
   \      0x15C   0x00C2             LSLS     R2,R0,#+3
   \      0x15E   0x3238             ADDS     R2,R2,#+56
   \      0x160   0x....             LDR.N    R0,??DataTable7_18
   \      0x162   0x....'....        BL       DbgConsole_Printf
   \                     ??mbedtls_des_self_test_31: (+1)
   \      0x166   0x....'....        LDR.W    R8,??DataTable7_19
   \      0x16A   0x2208             MOVS     R2,#+8
   \      0x16C   0x4641             MOV      R1,R8
   \      0x16E   0xA804             ADD      R0,SP,#+16
   \      0x170   0x....'....        BL       __aeabi_memcpy4
   \      0x174   0x2208             MOVS     R2,#+8
   \      0x176   0x4641             MOV      R1,R8
   \      0x178   0xA806             ADD      R0,SP,#+24
   \      0x17A   0x....'....        BL       __aeabi_memcpy4
   \      0x17E   0x2208             MOVS     R2,#+8
   \      0x180   0x....             LDR.N    R1,??DataTable7_15
   \      0x182   0xA802             ADD      R0,SP,#+8
   \      0x184   0x....'....        BL       __aeabi_memcpy4
   \      0x188   0x4648             MOV      R0,R9
   \      0x18A   0x2805             CMP      R0,#+5
   \      0x18C   0xD836             BHI.N    ??mbedtls_des_self_test_14
   \      0x18E   0xE8DF 0xF000      TBB      [PC, R0]
   \                     ??mbedtls_des_self_test_1:
   \      0x192   0x03 0x08          DC8      0x3,0x8,0xD,0x12
   \              0x0D 0x12    
   \      0x196   0x17 0x1C          DC8      0x17,0x1C
   \                     ??mbedtls_des_self_test_36: (+1)
   \      0x198   0x....             LDR.N    R1,??DataTable7_16
   \      0x19A   0xA80A             ADD      R0,SP,#+40
   \      0x19C   0x....'....        BL       mbedtls_des_setkey_dec
   \      0x1A0   0xE017             B.N      ??mbedtls_des_self_test_37
   \                     ??mbedtls_des_self_test_38: (+1)
   \      0x1A2   0x....             LDR.N    R1,??DataTable7_16
   \      0x1A4   0xA80A             ADD      R0,SP,#+40
   \      0x1A6   0x....'....        BL       mbedtls_des_setkey_enc
   \      0x1AA   0xE012             B.N      ??mbedtls_des_self_test_37
   \                     ??mbedtls_des_self_test_39: (+1)
   \      0x1AC   0x....             LDR.N    R1,??DataTable7_16
   \      0x1AE   0xA82A             ADD      R0,SP,#+168
   \      0x1B0   0x....'....        BL       mbedtls_des3_set2key_dec
   \      0x1B4   0xE00D             B.N      ??mbedtls_des_self_test_37
   \                     ??mbedtls_des_self_test_40: (+1)
   \      0x1B6   0x....             LDR.N    R1,??DataTable7_16
   \      0x1B8   0xA82A             ADD      R0,SP,#+168
   \      0x1BA   0x....'....        BL       mbedtls_des3_set2key_enc
   \      0x1BE   0xE008             B.N      ??mbedtls_des_self_test_37
   \                     ??mbedtls_des_self_test_41: (+1)
   \      0x1C0   0x....             LDR.N    R1,??DataTable7_16
   \      0x1C2   0xA82A             ADD      R0,SP,#+168
   \      0x1C4   0x....'....        BL       mbedtls_des3_set3key_dec
   \      0x1C8   0xE003             B.N      ??mbedtls_des_self_test_37
   \                     ??mbedtls_des_self_test_42: (+1)
   \      0x1CA   0x....             LDR.N    R1,??DataTable7_16
   \      0x1CC   0xA82A             ADD      R0,SP,#+168
   \      0x1CE   0x....'....        BL       mbedtls_des3_set3key_enc
   \                     ??mbedtls_des_self_test_37: (+1)
   \      0x1D2   0x2D00             CMP      R5,#+0
   \      0x1D4   0xD11A             BNE.N    ??mbedtls_des_self_test_43
   \      0x1D6   0x46B8             MOV      R8,R7
   \                     ??mbedtls_des_self_test_44: (+1)
   \      0x1D8   0xF242 0x7010      MOVW     R0,#+10000
   \      0x1DC   0x4580             CMP      R8,R0
   \      0x1DE   0xDA53             BGE.N    ??mbedtls_des_self_test_45
   \      0x1E0   0x2E00             CMP      R6,#+0
   \      0x1E2   0xA802             ADD      R0,SP,#+8
   \      0x1E4   0x9001             STR      R0,[SP, #+4]
   \      0x1E6   0x9000             STR      R0,[SP, #+0]
   \      0x1E8   0xAB04             ADD      R3,SP,#+16
   \      0x1EA   0xD109             BNE.N    ??mbedtls_des_self_test_46
   \      0x1EC   0x2208             MOVS     R2,#+8
   \      0x1EE   0x4639             MOV      R1,R7
   \      0x1F0   0xA80A             ADD      R0,SP,#+40
   \      0x1F2   0x....'....        BL       mbedtls_des_crypt_cbc
   \                     ??mbedtls_des_self_test_47: (+1)
   \      0x1F6   0xF108 0x0801      ADD      R8,R8,#+1
   \      0x1FA   0xE7ED             B.N      ??mbedtls_des_self_test_44
   \                     ??mbedtls_des_self_test_14: (+1)
   \      0x1FC   0x2001             MOVS     R0,#+1
   \      0x1FE   0xE03A             B.N      ??mbedtls_des_self_test_48
   \                     ??mbedtls_des_self_test_46: (+1)
   \      0x200   0x2208             MOVS     R2,#+8
   \      0x202   0x4639             MOV      R1,R7
   \      0x204   0xA82A             ADD      R0,SP,#+168
   \      0x206   0x....'....        BL       mbedtls_des3_crypt_cbc
   \      0x20A   0xE7F4             B.N      ??mbedtls_des_self_test_47
   \                     ??mbedtls_des_self_test_43: (+1)
   \      0x20C   0x46BA             MOV      R10,R7
   \      0x20E   0x46A8             MOV      R8,R5
   \                     ??mbedtls_des_self_test_49: (+1)
   \      0x210   0xF242 0x7010      MOVW     R0,#+10000
   \      0x214   0x4582             CMP      R10,R0
   \      0x216   0xDA32             BGE.N    ??mbedtls_des_self_test_50
   \      0x218   0x2E00             CMP      R6,#+0
   \      0x21A   0xA802             ADD      R0,SP,#+8
   \      0x21C   0x9001             STR      R0,[SP, #+4]
   \      0x21E   0x9000             STR      R0,[SP, #+0]
   \      0x220   0xAB04             ADD      R3,SP,#+16
   \      0x222   0xD005             BEQ.N    ??mbedtls_des_self_test_51
   \      0x224   0x2208             MOVS     R2,#+8
   \      0x226   0x4641             MOV      R1,R8
   \      0x228   0xA82A             ADD      R0,SP,#+168
   \      0x22A   0x....'....        BL       mbedtls_des3_crypt_cbc
   \      0x22E   0xE004             B.N      ??mbedtls_des_self_test_52
   \                     ??mbedtls_des_self_test_51: (+1)
   \      0x230   0x2208             MOVS     R2,#+8
   \      0x232   0x4641             MOV      R1,R8
   \      0x234   0xA80A             ADD      R0,SP,#+40
   \      0x236   0x....'....        BL       mbedtls_des_crypt_cbc
   \                     ??mbedtls_des_self_test_52: (+1)
   \      0x23A   0x2208             MOVS     R2,#+8
   \      0x23C   0xA906             ADD      R1,SP,#+24
   \      0x23E   0xA808             ADD      R0,SP,#+32
   \      0x240   0x....'....        BL       __aeabi_memcpy4
   \      0x244   0x2208             MOVS     R2,#+8
   \      0x246   0xA902             ADD      R1,SP,#+8
   \      0x248   0xA806             ADD      R0,SP,#+24
   \      0x24A   0x....'....        BL       __aeabi_memcpy4
   \      0x24E   0x2208             MOVS     R2,#+8
   \      0x250   0xA908             ADD      R1,SP,#+32
   \      0x252   0xA802             ADD      R0,SP,#+8
   \      0x254   0x....'....        BL       __aeabi_memcpy4
   \      0x258   0xF10A 0x0A01      ADD      R10,R10,#+1
   \      0x25C   0xE7D8             B.N      ??mbedtls_des_self_test_49
   1042              }
   1043          #endif /* MBEDTLS_CIPHER_MODE_CBC */
   1044          
   1045              if( verbose != 0 )
   \                     ??mbedtls_des_self_test_30: (+1)
   \      0x25E   0x2C00             CMP      R4,#+0
   \      0x260   0xD002             BEQ.N    ??mbedtls_des_self_test_53
   1046                  mbedtls_printf( "\n\r" );
   \      0x262   0x....             ADR.N    R0,??DataTable7_2  ;; 0x0A, 0x0D, 0x00, 0x00
   \      0x264   0x....'....        BL       DbgConsole_Printf
   1047          
   1048          exit:
   1049              mbedtls_des_free( &ctx );
   \                     ??mbedtls_des_self_test_53: (+1)
   \      0x268   0xA80A             ADD      R0,SP,#+40
   \      0x26A   0x....'....        BL       mbedtls_des_free
   1050              mbedtls_des3_free( &ctx3 );
   \      0x26E   0xA82A             ADD      R0,SP,#+168
   \      0x270   0x....'....        BL       mbedtls_des3_free
   1051          
   1052              return( ret );
   \      0x274   0x4638             MOV      R0,R7
   \                     ??mbedtls_des_self_test_48: (+1)
   \      0x276   0xF50D 0x7D0A      ADD      SP,SP,#+552
   \      0x27A   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
   \                     ??mbedtls_des_self_test_50: (+1)
   \      0x27E   0x2208             MOVS     R2,#+8
   \      0x280   0xA906             ADD      R1,SP,#+24
   \      0x282   0xA802             ADD      R0,SP,#+8
   \      0x284   0x....'....        BL       __aeabi_memcpy4
   \                     ??mbedtls_des_self_test_45: (+1)
   \      0x288   0x2D00             CMP      R5,#+0
   \      0x28A   0xD108             BNE.N    ??mbedtls_des_self_test_54
   \      0x28C   0x2208             MOVS     R2,#+8
   \      0x28E   0x....             LDR.N    R0,??DataTable7_20
   \      0x290   0xEB00 0x01C6      ADD      R1,R0,R6, LSL #+3
   \      0x294   0xA802             ADD      R0,SP,#+8
   \      0x296   0x....'....        BL       memcmp
   \      0x29A   0x2800             CMP      R0,#+0
   \      0x29C   0xD10C             BNE.N    ??mbedtls_des_self_test_55
   \                     ??mbedtls_des_self_test_54: (+1)
   \      0x29E   0x2D00             CMP      R5,#+0
   \      0x2A0   0xF43F 0xAF3F      BEQ.W    ??mbedtls_des_self_test_28
   \      0x2A4   0x2208             MOVS     R2,#+8
   \      0x2A6   0x....             LDR.N    R0,??DataTable7_21
   \      0x2A8   0xEB00 0x01C6      ADD      R1,R0,R6, LSL #+3
   \      0x2AC   0xA802             ADD      R0,SP,#+8
   \      0x2AE   0x....'....        BL       memcmp
   \      0x2B2   0x2800             CMP      R0,#+0
   \      0x2B4   0xF43F 0xAF35      BEQ.W    ??mbedtls_des_self_test_28
   \                     ??mbedtls_des_self_test_55: (+1)
   \      0x2B8   0x2C00             CMP      R4,#+0
   \      0x2BA   0xD002             BEQ.N    ??mbedtls_des_self_test_25
   \      0x2BC   0x....             LDR.N    R0,??DataTable7_17
   \      0x2BE   0x....'....        BL       DbgConsole_Printf
   \                     ??mbedtls_des_self_test_25: (+1)
   \      0x2C2   0x2001             MOVS     R0,#+1
   \      0x2C4   0x4607             MOV      R7,R0
   \      0x2C6   0xE7CF             B.N      ??mbedtls_des_self_test_53
   1053          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \        0x0   0x....'....        DC32     odd_parity_table

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \        0x0   0x....'....        DC32     weak_key_table

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \        0x0   0x....'....        DC32     LHs

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \        0x0   0x....'....        DC32     RHs

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \        0x0   0x64 0x65          DC8      "dec"
   \              0x63 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \        0x0   0x65 0x6E          DC8      "enc"
   \              0x63 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \        0x0   0x0A 0x0D          DC8      0x0A, 0x0D, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \        0x0   0x....'....        DC32     SB5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \        0x0   0x....'....        DC32     SB7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \        0x0   0x....'....        DC32     SB2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \        0x0   0x....'....        DC32     SB4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_7:
   \        0x0   0x....'....        DC32     SB6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_8:
   \        0x0   0x....'....        DC32     SB8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_9:
   \        0x0   0x....'....        DC32     SB1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_10:
   \        0x0   0x....'....        DC32     SB3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_11:
   \        0x0   0x....'....        DC32     des3_test_ecb_dec

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_12:
   \        0x0   0x....'....        DC32     des3_test_ecb_enc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_13:
   \        0x0   0x....'....        DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_14:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_15:
   \        0x0   0x....'....        DC32     des3_test_buf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_16:
   \        0x0   0x....'....        DC32     des3_test_keys

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_17:
   \        0x0   0x....'....        DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_18:
   \        0x0   0x....'....        DC32     ?_6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_19:
   \        0x0   0x....'....        DC32     des3_test_iv

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_20:
   \        0x0   0x....'....        DC32     des3_test_cbc_dec

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_21:
   \        0x0   0x....'....        DC32     des3_test_cbc_enc

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x20 0x20          DC8 "  DES%c-ECB-%3d (%s): "
   \              0x44 0x45    
   \              0x53 0x25    
   \              0x63 0x2D    
   \              0x45 0x43    
   \              0x42 0x2D    
   \              0x25 0x33    
   \              0x64 0x20    
   \              0x28 0x25    
   \              0x73 0x29    
   \              0x3A 0x20    
   \              0x00         
   \       0x17   0x00               DC8 0

   \                                 In section .rodata, align 4
   \        0x0   0x64 0x65          DC8 "dec"
   \              0x63 0x00    

   \                                 In section .rodata, align 4
   \        0x0   0x65 0x6E          DC8 "enc"
   \              0x63 0x00    

   \                                 In section .rodata, align 4
   \                     ?_3:
   \        0x0   0x66 0x61          DC8 "failed\012\015"
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x0A 0x0D    
   \              0x00         
   \        0x9   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_4:
   \        0x0   0x70 0x61          DC8 "passed\012\015"
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x0A 0x0D    
   \              0x00         
   \        0x9   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \        0x0   0x0A 0x0D          DC8 "\012\015"
   \              0x00         
   \        0x3   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_6:
   \        0x0   0x20 0x20          DC8 "  DES%c-CBC-%3d (%s): "
   \              0x44 0x45    
   \              0x53 0x25    
   \              0x63 0x2D    
   \              0x43 0x42    
   \              0x43 0x2D    
   \              0x25 0x33    
   \              0x64 0x20    
   \              0x28 0x25    
   \              0x73 0x29    
   \              0x3A 0x20    
   \              0x00         
   \       0x17   0x00               DC8 0
   1054          
   1055          #endif /* MBEDTLS_SELF_TEST */
   1056          
   1057          #endif /* MBEDTLS_DES_C */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   des3_set2key
        16   -> mbedtls_des_setkey
      16   des3_set3key
        16   -> mbedtls_des_setkey
      32   mbedtls_des3_crypt_cbc
        32   -> __aeabi_memcpy
        32   -> mbedtls_des3_crypt_ecb
      44   mbedtls_des3_crypt_ecb
       0   mbedtls_des3_free
         0   -> mbedtls_platform_zeroize
       0   mbedtls_des3_init
         0   -> __aeabi_memset4
     392   mbedtls_des3_set2key_dec
       392   -> des3_set2key
       392   -> mbedtls_platform_zeroize
     392   mbedtls_des3_set2key_enc
       392   -> des3_set2key
       392   -> mbedtls_platform_zeroize
     392   mbedtls_des3_set3key_dec
       392   -> des3_set3key
       392   -> mbedtls_platform_zeroize
     392   mbedtls_des3_set3key_enc
       392   -> des3_set3key
       392   -> mbedtls_platform_zeroize
      32   mbedtls_des_crypt_cbc
        32   -> __aeabi_memcpy
        32   -> mbedtls_des_crypt_ecb
      44   mbedtls_des_crypt_ecb
       0   mbedtls_des_free
         0   -> mbedtls_platform_zeroize
       0   mbedtls_des_init
         0   -> __aeabi_memset4
       4   mbedtls_des_key_check_key_parity
      16   mbedtls_des_key_check_weak
        16   -> memcmp
       0   mbedtls_des_key_set_parity
     584   mbedtls_des_self_test
       584   -> DbgConsole_Printf
       584   -> __aeabi_memcpy4
       584   -> mbedtls_des3_crypt_cbc
       584   -> mbedtls_des3_crypt_ecb
       584   -> mbedtls_des3_free
       584   -> mbedtls_des3_init
       584   -> mbedtls_des3_set2key_dec
       584   -> mbedtls_des3_set2key_enc
       584   -> mbedtls_des3_set3key_dec
       584   -> mbedtls_des3_set3key_enc
       584   -> mbedtls_des_crypt_cbc
       584   -> mbedtls_des_crypt_ecb
       584   -> mbedtls_des_free
       584   -> mbedtls_des_init
       584   -> mbedtls_des_setkey_dec
       584   -> mbedtls_des_setkey_enc
       584   -> memcmp
       8   mbedtls_des_setkey
       8   mbedtls_des_setkey_dec
         8   -> mbedtls_des_setkey
       8   mbedtls_des_setkey_enc
         8   -> mbedtls_des_setkey


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_10
       4  ??DataTable7_11
       4  ??DataTable7_12
       4  ??DataTable7_13
       4  ??DataTable7_14
       4  ??DataTable7_15
       4  ??DataTable7_16
       4  ??DataTable7_17
       4  ??DataTable7_18
       4  ??DataTable7_19
       4  ??DataTable7_2
       4  ??DataTable7_20
       4  ??DataTable7_21
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       4  ??DataTable7_7
       4  ??DataTable7_8
       4  ??DataTable7_9
      24  ?_0
       4  ?_1
       4  ?_2
      12  ?_3
      12  ?_4
       4  ?_5
      24  ?_6
      64  LHs
      64  RHs
     256  SB1
     256  SB2
     256  SB3
     256  SB4
     256  SB5
     256  SB6
     256  SB7
     256  SB8
     136  des3_set2key
     140  des3_set3key
       8  des3_test_buf
      24  des3_test_cbc_dec
      24  des3_test_cbc_enc
      24  des3_test_ecb_dec
      24  des3_test_ecb_enc
       8  des3_test_iv
      24  des3_test_keys
     148  mbedtls_des3_crypt_cbc
    1010  mbedtls_des3_crypt_ecb
      14  mbedtls_des3_free
      10  mbedtls_des3_init
      30  mbedtls_des3_set2key_dec
      28  mbedtls_des3_set2key_enc
      30  mbedtls_des3_set3key_dec
      28  mbedtls_des3_set3key_enc
     148  mbedtls_des_crypt_cbc
     498  mbedtls_des_crypt_ecb
      12  mbedtls_des_free
       8  mbedtls_des_init
      38  mbedtls_des_key_check_key_parity
      42  mbedtls_des_key_check_weak
      24  mbedtls_des_key_set_parity
     712  mbedtls_des_self_test
     732  mbedtls_des_setkey
      74  mbedtls_des_setkey_dec
      10  mbedtls_des_setkey_enc
     128  odd_parity_table
     128  weak_key_table

 
 2 652 bytes in section .rodata
 3 976 bytes in section .text
 
 3 976 bytes of CODE  memory
 2 652 bytes of CONST memory

Errors: none
Warnings: none
