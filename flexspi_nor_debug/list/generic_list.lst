###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.3.193/W32 for ARM         10/Jun/2019  13:48:25
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\Development\smart_washing_machine_3080\component\lists\generic_list.c
#    Command line =  
#        -f C:\Users\nxf42695\AppData\Local\Temp\1\EWF18F.tmp
#        (C:\Development\smart_washing_machine_3080\component\lists\generic_list.c
#        -D DEBUG -D USE_RTOS -D XIP_EXTERNAL_FLASH=1 -D
#        XIP_BOOT_HEADER_ENABLE=1 -D CPU_MIMXRT1052DVL6B -D FSL_RTOS_FREE_RTOS
#        -D PRINTF_ADVANCED_ENABLE -D
#        "MBEDTLS_CONFIG_FILE=\"ksdk_mbedtls_config.h\"" -lC
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list -lA
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list
#        --diag_suppress Pa082,Pa050 -o
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_d16 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" --preinclude
#        C:\Development\smart_washing_machine_3080/source\app_preinclude.h -I
#        C:\Development\smart_washing_machine_3080/board\ -I
#        C:\Development\smart_washing_machine_3080/source\ -I
#        C:\Development\smart_washing_machine_3080/CMSIS\ -I
#        C:\Development\smart_washing_machine_3080/amazon-freertos/freertos/portable\
#        -I C:\Development\smart_washing_machine_3080/amazon-freertos/include\
#        -I C:\Development\smart_washing_machine_3080/component/lists\ -I
#        C:\Development\smart_washing_machine_3080/component/serial_manager\ -I
#        C:\Development\smart_washing_machine_3080/component/uart\ -I
#        C:\Development\smart_washing_machine_3080/component/kv\ -I
#        C:\Development\smart_washing_machine_3080/component/kv/include\ -I
#        C:\Development\smart_washing_machine_3080/device\ -I
#        C:\Development\smart_washing_machine_3080/doc\ -I
#        C:\Development\smart_washing_machine_3080/drivers\ -I
#        C:\Development\smart_washing_machine_3080/src\ -I
#        C:\Development\smart_washing_machine_3080/startup\ -I
#        C:\Development\smart_washing_machine_3080/utilities\ -I
#        C:\Development\smart_washing_machine_3080/xip\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\atm\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_model\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_sign\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\infra\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\mqtt\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\external_libs\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\coap_cloud\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\CoAPPacket\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\server\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\os\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\awss_reset\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\mbedtls\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\ -I
#        C:\Development\smart_washing_machine_3080\mbedtls\port\ksdk\ -Om)
#    Locale       =  C
#    List file    =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list\generic_list.lst
#    Object file  =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj\generic_list.o
#
###############################################################################

C:\Development\smart_washing_machine_3080\component\lists\generic_list.c
      1          /*
      2           * Copyright 2018-2019 NXP
      3           * All rights reserved.
      4           *
      5           *
      6           * SPDX-License-Identifier: BSD-3-Clause
      7           */
      8          
      9          /*! *********************************************************************************
     10          *************************************************************************************
     11          * Include
     12          *************************************************************************************
     13          ********************************************************************************** */
     14          #include "fsl_common.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp uint32_t DisableGlobalIRQ(void)
   \                     DisableGlobalIRQ: (+1)
   \        0x0   0xF3EF 0x8010      MRS      R0,PRIMASK
   \        0x4   0xB672             CPSID    I
   \        0x6   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void EnableGlobalIRQ(uint32_t)
   \                     EnableGlobalIRQ: (+1)
   \        0x0   0xF380 0x8810      MSR      PRIMASK,R0
   \        0x4   0x4770             BX       LR               ;; return
     15          #include "generic_list.h"
     16          

   \                                 In section .text, align 2, keep-with-next
     17          static list_status_t LIST_Scan(list_handle_t list, list_element_handle_t newElement)
     18          {
     19              list_element_handle_t element = list->head;
   \                     LIST_Scan: (+1)
   \        0x0   0x6800             LDR      R0,[R0, #+0]
   \        0x2   0xE000             B.N      ??LIST_Scan_0
     20          
     21              while (element != NULL)
     22              {
     23                  if (element == newElement)
     24                  {
     25                      return kLIST_DuplicateError;
     26                  }
     27                  element = element->next;
   \                     ??LIST_Scan_1: (+1)
   \        0x4   0x6800             LDR      R0,[R0, #+0]
   \                     ??LIST_Scan_0: (+1)
   \        0x6   0x2800             CMP      R0,#+0
   \        0x8   0xD004             BEQ.N    ??LIST_Scan_2
   \        0xA   0x4288             CMP      R0,R1
   \        0xC   0xD1FA             BNE.N    ??LIST_Scan_1
   \        0xE   0xF243 0x7079      MOVW     R0,#+14201
   \       0x12   0x4770             BX       LR
     28              }
     29              return kLIST_Ok;
   \                     ??LIST_Scan_2: (+1)
   \       0x14   0x2000             MOVS     R0,#+0
   \       0x16   0x4770             BX       LR               ;; return
     30          }
     31          
     32          /*! *********************************************************************************
     33          *************************************************************************************
     34          * Public functions
     35          *************************************************************************************
     36          ********************************************************************************** */
     37          /*! *********************************************************************************
     38           * \brief     Initialises the list descriptor.
     39           *
     40           * \param[in] list - LIST_ handle to init.
     41           *            max - Maximum number of elements in list. 0 for unlimited.
     42           *
     43           * \return void.
     44           *
     45           * \pre
     46           *
     47           * \post
     48           *
     49           * \remarks
     50           *
     51           ********************************************************************************** */

   \                                 In section .text, align 2, keep-with-next
     52          void LIST_Init(list_handle_t list, uint32_t max)
     53          {
     54              list->head = NULL;
   \                     LIST_Init: (+1)
   \        0x0   0x2200             MOVS     R2,#+0
   \        0x2   0x6002             STR      R2,[R0, #+0]
     55              list->tail = NULL;
   \        0x4   0x6042             STR      R2,[R0, #+4]
     56              list->max  = (uint16_t)max;
   \        0x6   0x8141             STRH     R1,[R0, #+10]
     57              list->size = 0;
   \        0x8   0x4611             MOV      R1,R2
   \        0xA   0x8101             STRH     R1,[R0, #+8]
     58          }
   \        0xC   0x4770             BX       LR               ;; return
     59          
     60          /*! *********************************************************************************
     61           * \brief     Gets the list that contains the given element.
     62           *
     63           * \param[in] element - Handle of the element.
     64           *
     65           * \return NULL if element is orphan.
     66           *         Handle of the list the element is inserted into.
     67           *
     68           * \pre
     69           *
     70           * \post
     71           *
     72           * \remarks
     73           *
     74           ********************************************************************************** */

   \                                 In section .text, align 2, keep-with-next
     75          list_handle_t LIST_GetList(list_element_handle_t element)
     76          {
     77              return element->list;
   \                     LIST_GetList: (+1)
   \        0x0   0x6880             LDR      R0,[R0, #+8]
   \        0x2   0x4770             BX       LR               ;; return
     78          }
     79          
     80          /*! *********************************************************************************
     81           * \brief     Links element to the tail of the list.
     82           *
     83           * \param[in] list - ID of list to insert into.
     84           *            element - element to add
     85           *
     86           * \return kLIST_Full if list is full.
     87           *         kLIST_Ok if insertion was successful.
     88           *
     89           * \pre
     90           *
     91           * \post
     92           *
     93           * \remarks
     94           *
     95           ********************************************************************************** */

   \                                 In section .text, align 2, keep-with-next
     96          list_status_t LIST_AddTail(list_handle_t list, list_element_handle_t element)
     97          {
   \                     LIST_AddTail: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460E             MOV      R6,R1
     98              uint32_t regPrimask = DisableGlobalIRQ();
   \        0x6   0x....'....        BL       DisableGlobalIRQ
   \        0xA   0x4605             MOV      R5,R0
     99          
    100              if ((list->max != 0U) && (list->max == list->size))
   \        0xC   0x8960             LDRH     R0,[R4, #+10]
   \        0xE   0x2800             CMP      R0,#+0
   \       0x10   0xD008             BEQ.N    ??LIST_AddTail_0
   \       0x12   0x8921             LDRH     R1,[R4, #+8]
   \       0x14   0x4288             CMP      R0,R1
   \       0x16   0xD105             BNE.N    ??LIST_AddTail_0
    101              {
    102                  EnableGlobalIRQ(regPrimask);
   \       0x18   0x4628             MOV      R0,R5
   \       0x1A   0x....'....        BL       EnableGlobalIRQ
    103                  return kLIST_Full;
   \       0x1E   0xF243 0x707A      MOVW     R0,#+14202
   \       0x22   0xBDF2             POP      {R1,R4-R7,PC}
    104              }
    105          
    106              if (kLIST_DuplicateError == LIST_Scan(list, element))
   \                     ??LIST_AddTail_0: (+1)
   \       0x24   0xF243 0x7779      MOVW     R7,#+14201
   \       0x28   0x4631             MOV      R1,R6
   \       0x2A   0x4620             MOV      R0,R4
   \       0x2C   0x....'....        BL       LIST_Scan
   \       0x30   0x42B8             CMP      R0,R7
   \       0x32   0xD104             BNE.N    ??LIST_AddTail_1
    107              {
    108                  EnableGlobalIRQ(regPrimask);
   \       0x34   0x4628             MOV      R0,R5
   \       0x36   0x....'....        BL       EnableGlobalIRQ
    109                  return kLIST_DuplicateError;
   \       0x3A   0x4638             MOV      R0,R7
   \       0x3C   0xBDF2             POP      {R1,R4-R7,PC}
    110              }
    111          
    112              if (list->size == 0U)
   \                     ??LIST_AddTail_1: (+1)
   \       0x3E   0x8920             LDRH     R0,[R4, #+8]
   \       0x40   0x2800             CMP      R0,#+0
   \       0x42   0xD101             BNE.N    ??LIST_AddTail_2
    113              {
    114                  list->head = element;
   \       0x44   0x6026             STR      R6,[R4, #+0]
   \       0x46   0xE001             B.N      ??LIST_AddTail_3
    115              }
    116              else
    117              {
    118                  list->tail->next = element;
   \                     ??LIST_AddTail_2: (+1)
   \       0x48   0x6860             LDR      R0,[R4, #+4]
   \       0x4A   0x6006             STR      R6,[R0, #+0]
    119              }
    120              element->prev = list->tail;
   \                     ??LIST_AddTail_3: (+1)
   \       0x4C   0x6860             LDR      R0,[R4, #+4]
   \       0x4E   0x6070             STR      R0,[R6, #+4]
    121              element->next = NULL;
   \       0x50   0x2000             MOVS     R0,#+0
   \       0x52   0x6030             STR      R0,[R6, #+0]
    122              element->list = list;
   \       0x54   0x60B4             STR      R4,[R6, #+8]
    123              list->tail    = element;
   \       0x56   0x6066             STR      R6,[R4, #+4]
    124              list->size++;
   \       0x58   0x8920             LDRH     R0,[R4, #+8]
   \       0x5A   0x1C40             ADDS     R0,R0,#+1
   \       0x5C   0x8120             STRH     R0,[R4, #+8]
    125          
    126              EnableGlobalIRQ(regPrimask);
   \       0x5E   0x4628             MOV      R0,R5
   \       0x60   0x....'....        BL       EnableGlobalIRQ
    127              return kLIST_Ok;
   \       0x64   0x2000             MOVS     R0,#+0
   \       0x66   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    128          }
    129          
    130          /*! *********************************************************************************
    131           * \brief     Links element to the head of the list.
    132           *
    133           * \param[in] list - ID of list to insert into.
    134           *            element - element to add
    135           *
    136           * \return kLIST_Full if list is full.
    137           *         kLIST_Ok if insertion was successful.
    138           *
    139           * \pre
    140           *
    141           * \post
    142           *
    143           * \remarks
    144           *
    145           ********************************************************************************** */

   \                                 In section .text, align 2, keep-with-next
    146          list_status_t LIST_AddHead(list_handle_t list, list_element_handle_t element)
    147          {
   \                     LIST_AddHead: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460E             MOV      R6,R1
    148              uint32_t regPrimask = DisableGlobalIRQ();
   \        0x6   0x....'....        BL       DisableGlobalIRQ
   \        0xA   0x4605             MOV      R5,R0
    149          
    150              if ((list->max != 0U) && (list->max == list->size))
   \        0xC   0x8960             LDRH     R0,[R4, #+10]
   \        0xE   0x2800             CMP      R0,#+0
   \       0x10   0xD008             BEQ.N    ??LIST_AddHead_0
   \       0x12   0x8921             LDRH     R1,[R4, #+8]
   \       0x14   0x4288             CMP      R0,R1
   \       0x16   0xD105             BNE.N    ??LIST_AddHead_0
    151              {
    152                  EnableGlobalIRQ(regPrimask);
   \       0x18   0x4628             MOV      R0,R5
   \       0x1A   0x....'....        BL       EnableGlobalIRQ
    153                  return kLIST_Full;
   \       0x1E   0xF243 0x707A      MOVW     R0,#+14202
   \       0x22   0xBDF2             POP      {R1,R4-R7,PC}
    154              }
    155          
    156              if (kLIST_DuplicateError == LIST_Scan(list, element))
   \                     ??LIST_AddHead_0: (+1)
   \       0x24   0xF243 0x7779      MOVW     R7,#+14201
   \       0x28   0x4631             MOV      R1,R6
   \       0x2A   0x4620             MOV      R0,R4
   \       0x2C   0x....'....        BL       LIST_Scan
   \       0x30   0x42B8             CMP      R0,R7
   \       0x32   0xD104             BNE.N    ??LIST_AddHead_1
    157              {
    158                  EnableGlobalIRQ(regPrimask);
   \       0x34   0x4628             MOV      R0,R5
   \       0x36   0x....'....        BL       EnableGlobalIRQ
    159                  return kLIST_DuplicateError;
   \       0x3A   0x4638             MOV      R0,R7
   \       0x3C   0xBDF2             POP      {R1,R4-R7,PC}
    160              }
    161          
    162              if (list->size == 0U)
   \                     ??LIST_AddHead_1: (+1)
   \       0x3E   0x8920             LDRH     R0,[R4, #+8]
   \       0x40   0x2800             CMP      R0,#+0
   \       0x42   0xD101             BNE.N    ??LIST_AddHead_2
    163              {
    164                  list->tail = element;
   \       0x44   0x6066             STR      R6,[R4, #+4]
   \       0x46   0xE001             B.N      ??LIST_AddHead_3
    165              }
    166              else
    167              {
    168                  list->head->prev = element;
   \                     ??LIST_AddHead_2: (+1)
   \       0x48   0x6820             LDR      R0,[R4, #+0]
   \       0x4A   0x6046             STR      R6,[R0, #+4]
    169              }
    170              element->next = list->head;
   \                     ??LIST_AddHead_3: (+1)
   \       0x4C   0x6820             LDR      R0,[R4, #+0]
   \       0x4E   0x6030             STR      R0,[R6, #+0]
    171              element->prev = NULL;
   \       0x50   0x2000             MOVS     R0,#+0
   \       0x52   0x6070             STR      R0,[R6, #+4]
    172              element->list = list;
   \       0x54   0x60B4             STR      R4,[R6, #+8]
    173              list->head    = element;
   \       0x56   0x6026             STR      R6,[R4, #+0]
    174              list->size++;
   \       0x58   0x8920             LDRH     R0,[R4, #+8]
   \       0x5A   0x1C40             ADDS     R0,R0,#+1
   \       0x5C   0x8120             STRH     R0,[R4, #+8]
    175          
    176              EnableGlobalIRQ(regPrimask);
   \       0x5E   0x4628             MOV      R0,R5
   \       0x60   0x....'....        BL       EnableGlobalIRQ
    177              return kLIST_Ok;
   \       0x64   0x2000             MOVS     R0,#+0
   \       0x66   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    178          }
    179          
    180          /*! *********************************************************************************
    181           * \brief     Unlinks element from the head of the list.
    182           *
    183           * \param[in] list - ID of list to remove from.
    184           *
    185           * \return NULL if list is empty.
    186           *         ID of removed element(pointer) if removal was successful.
    187           *
    188           * \pre
    189           *
    190           * \post
    191           *
    192           * \remarks
    193           *
    194           ********************************************************************************** */

   \                                 In section .text, align 2, keep-with-next
    195          list_element_handle_t LIST_RemoveHead(list_handle_t list)
    196          {
   \                     LIST_RemoveHead: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4604             MOV      R4,R0
    197              list_element_handle_t element;
    198          
    199              uint32_t regPrimask = DisableGlobalIRQ();
   \        0x4   0x....'....        BL       DisableGlobalIRQ
    200          
    201              if ((NULL == list) || (list->size == 0U))
   \        0x8   0x2C00             CMP      R4,#+0
   \        0xA   0xD002             BEQ.N    ??LIST_RemoveHead_0
   \        0xC   0x8921             LDRH     R1,[R4, #+8]
   \        0xE   0x2900             CMP      R1,#+0
   \       0x10   0xD103             BNE.N    ??LIST_RemoveHead_1
    202              {
    203                  EnableGlobalIRQ(regPrimask);
   \                     ??LIST_RemoveHead_0: (+1)
   \       0x12   0x....'....        BL       EnableGlobalIRQ
    204                  return NULL; /*LIST_ is empty*/
   \       0x16   0x2000             MOVS     R0,#+0
   \       0x18   0xBD32             POP      {R1,R4,R5,PC}
    205              }
    206          
    207              element = list->head;
   \                     ??LIST_RemoveHead_1: (+1)
   \       0x1A   0x6825             LDR      R5,[R4, #+0]
    208              list->size--;
   \       0x1C   0x1E49             SUBS     R1,R1,#+1
   \       0x1E   0x8121             STRH     R1,[R4, #+8]
    209              if (list->size == 0U)
   \       0x20   0x8921             LDRH     R1,[R4, #+8]
   \       0x22   0x2900             CMP      R1,#+0
   \       0x24   0xD102             BNE.N    ??LIST_RemoveHead_2
    210              {
    211                  list->tail = NULL;
   \       0x26   0x2100             MOVS     R1,#+0
   \       0x28   0x6061             STR      R1,[R4, #+4]
   \       0x2A   0xE002             B.N      ??LIST_RemoveHead_3
    212              }
    213              else
    214              {
    215                  element->next->prev = NULL;
   \                     ??LIST_RemoveHead_2: (+1)
   \       0x2C   0x2100             MOVS     R1,#+0
   \       0x2E   0x682A             LDR      R2,[R5, #+0]
   \       0x30   0x6051             STR      R1,[R2, #+4]
    216              }
    217              list->head    = element->next; /*Is NULL if element is head*/
   \                     ??LIST_RemoveHead_3: (+1)
   \       0x32   0x6829             LDR      R1,[R5, #+0]
   \       0x34   0x6021             STR      R1,[R4, #+0]
    218              element->list = NULL;
   \       0x36   0x2100             MOVS     R1,#+0
   \       0x38   0x60A9             STR      R1,[R5, #+8]
    219          
    220              EnableGlobalIRQ(regPrimask);
   \       0x3A   0x....'....        BL       EnableGlobalIRQ
    221              return element;
   \       0x3E   0x4628             MOV      R0,R5
   \       0x40   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    222          }
    223          
    224          /*! *********************************************************************************
    225           * \brief     Gets head element ID.
    226           *
    227           * \param[in] list - ID of list.
    228           *
    229           * \return NULL if list is empty.
    230           *         ID of head element if list is not empty.
    231           *
    232           * \pre
    233           *
    234           * \post
    235           *
    236           * \remarks
    237           *
    238           ********************************************************************************** */

   \                                 In section .text, align 2, keep-with-next
    239          list_element_handle_t LIST_GetHead(list_handle_t list)
    240          {
    241              return list->head;
   \                     LIST_GetHead: (+1)
   \        0x0   0x6800             LDR      R0,[R0, #+0]
   \        0x2   0x4770             BX       LR               ;; return
    242          }
    243          
    244          /*! *********************************************************************************
    245           * \brief     Gets next element ID.
    246           *
    247           * \param[in] element - ID of the element.
    248           *
    249           * \return NULL if element is tail.
    250           *         ID of next element if exists.
    251           *
    252           * \pre
    253           *
    254           * \post
    255           *
    256           * \remarks
    257           *
    258           ********************************************************************************** */

   \                                 In section .text, align 2, keep-with-next
    259          list_element_handle_t LIST_GetNext(list_element_handle_t element)
    260          {
    261              return element->next;
   \                     LIST_GetNext: (+1)
   \        0x0   0x6800             LDR      R0,[R0, #+0]
   \        0x2   0x4770             BX       LR               ;; return
    262          }
    263          
    264          /*! *********************************************************************************
    265           * \brief     Gets previous element ID.
    266           *
    267           * \param[in] element - ID of the element.
    268           *
    269           * \return NULL if element is head.
    270           *         ID of previous element if exists.
    271           *
    272           * \pre
    273           *
    274           * \post
    275           *
    276           * \remarks
    277           *
    278           ********************************************************************************** */

   \                                 In section .text, align 2, keep-with-next
    279          list_element_handle_t LIST_GetPrev(list_element_handle_t element)
    280          {
    281              return element->prev;
   \                     LIST_GetPrev: (+1)
   \        0x0   0x6840             LDR      R0,[R0, #+4]
   \        0x2   0x4770             BX       LR               ;; return
    282          }
    283          
    284          /*! *********************************************************************************
    285           * \brief     Unlinks an element from its list.
    286           *
    287           * \param[in] element - ID of the element to remove.
    288           *
    289           * \return kLIST_OrphanElement if element is not part of any list.
    290           *         kLIST_Ok if removal was successful.
    291           *
    292           * \pre
    293           *
    294           * \post
    295           *
    296           * \remarks
    297           *
    298           ********************************************************************************** */

   \                                 In section .text, align 2, keep-with-next
    299          list_status_t LIST_RemoveElement(list_element_handle_t element)
    300          {
   \                     LIST_RemoveElement: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x4604             MOV      R4,R0
    301              if (element->list == NULL)
   \        0x4   0x68A0             LDR      R0,[R4, #+8]
   \        0x6   0x2800             CMP      R0,#+0
   \        0x8   0xD102             BNE.N    ??LIST_RemoveElement_0
    302              {
    303                  return kLIST_OrphanElement; /*Element was previusly removed or never added*/
   \        0xA   0xF243 0x707C      MOVW     R0,#+14204
   \        0xE   0xBD10             POP      {R4,PC}
    304              }
    305          
    306              uint32_t regPrimask = DisableGlobalIRQ();
   \                     ??LIST_RemoveElement_0: (+1)
   \       0x10   0x....'....        BL       DisableGlobalIRQ
    307          
    308              if (element->prev == NULL) /*Element is head or solo*/
   \       0x14   0x6861             LDR      R1,[R4, #+4]
   \       0x16   0x2900             CMP      R1,#+0
   \       0x18   0xD102             BNE.N    ??LIST_RemoveElement_1
    309              {
    310                  element->list->head = element->next; /*is null if solo*/
   \       0x1A   0x6821             LDR      R1,[R4, #+0]
   \       0x1C   0x68A2             LDR      R2,[R4, #+8]
   \       0x1E   0x6011             STR      R1,[R2, #+0]
    311              }
    312              if (element->next == NULL) /*Element is tail or solo*/
   \                     ??LIST_RemoveElement_1: (+1)
   \       0x20   0x6821             LDR      R1,[R4, #+0]
   \       0x22   0x2900             CMP      R1,#+0
   \       0x24   0xD102             BNE.N    ??LIST_RemoveElement_2
    313              {
    314                  element->list->tail = element->prev; /*is null if solo*/
   \       0x26   0x6861             LDR      R1,[R4, #+4]
   \       0x28   0x68A2             LDR      R2,[R4, #+8]
   \       0x2A   0x6051             STR      R1,[R2, #+4]
    315              }
    316              if (element->prev != NULL) /*Element is not head*/
   \                     ??LIST_RemoveElement_2: (+1)
   \       0x2C   0x6861             LDR      R1,[R4, #+4]
   \       0x2E   0x2900             CMP      R1,#+0
   \       0x30   0xD002             BEQ.N    ??LIST_RemoveElement_3
    317              {
    318                  element->prev->next = element->next;
   \       0x32   0x6821             LDR      R1,[R4, #+0]
   \       0x34   0x6862             LDR      R2,[R4, #+4]
   \       0x36   0x6011             STR      R1,[R2, #+0]
    319              }
    320              if (element->next != NULL) /*Element is not tail*/
   \                     ??LIST_RemoveElement_3: (+1)
   \       0x38   0x6821             LDR      R1,[R4, #+0]
   \       0x3A   0x2900             CMP      R1,#+0
   \       0x3C   0xD002             BEQ.N    ??LIST_RemoveElement_4
    321              {
    322                  element->next->prev = element->prev;
   \       0x3E   0x6861             LDR      R1,[R4, #+4]
   \       0x40   0x6822             LDR      R2,[R4, #+0]
   \       0x42   0x6051             STR      R1,[R2, #+4]
    323              }
    324              element->list->size--;
   \                     ??LIST_RemoveElement_4: (+1)
   \       0x44   0x68A1             LDR      R1,[R4, #+8]
   \       0x46   0x8909             LDRH     R1,[R1, #+8]
   \       0x48   0x1E49             SUBS     R1,R1,#+1
   \       0x4A   0x68A2             LDR      R2,[R4, #+8]
   \       0x4C   0x8111             STRH     R1,[R2, #+8]
    325              element->list = NULL;
   \       0x4E   0x2100             MOVS     R1,#+0
   \       0x50   0x60A1             STR      R1,[R4, #+8]
    326          
    327              EnableGlobalIRQ(regPrimask);
   \       0x52   0x....'....        BL       EnableGlobalIRQ
    328              return kLIST_Ok;
   \       0x56   0x2000             MOVS     R0,#+0
   \       0x58   0xBD10             POP      {R4,PC}          ;; return
    329          }
    330          
    331          /*! *********************************************************************************
    332           * \brief     Links an element in the previous position relative to a given member
    333           *            of a list.
    334           *
    335           * \param[in] element - ID of a member of a list.
    336           *            newElement - new element to insert before the given member.
    337           *
    338           * \return kLIST_OrphanElement if element is not part of any list.
    339           *         kLIST_Full if list is full.
    340           *         kLIST_Ok if insertion was successful.
    341           *
    342           * \pre
    343           *
    344           * \post
    345           *
    346           * \remarks
    347           *
    348           ********************************************************************************** */

   \                                 In section .text, align 2, keep-with-next
    349          list_status_t LIST_AddPrevElement(list_element_handle_t element, list_element_handle_t newElement)
    350          {
   \                     LIST_AddPrevElement: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
    351              if (element->list == NULL)
   \        0x6   0x68A0             LDR      R0,[R4, #+8]
   \        0x8   0x2800             CMP      R0,#+0
   \        0xA   0xD102             BNE.N    ??LIST_AddPrevElement_0
    352              {
    353                  return kLIST_OrphanElement; /*Element was previusly removed or never added*/
   \        0xC   0xF243 0x707C      MOVW     R0,#+14204
   \       0x10   0xBDF2             POP      {R1,R4-R7,PC}
    354              }
    355              uint32_t regPrimask = DisableGlobalIRQ();
   \                     ??LIST_AddPrevElement_0: (+1)
   \       0x12   0x....'....        BL       DisableGlobalIRQ
   \       0x16   0x4606             MOV      R6,R0
    356          
    357              if ((element->list->max != 0U) && (element->list->max == element->list->size))
   \       0x18   0x68A0             LDR      R0,[R4, #+8]
   \       0x1A   0x8940             LDRH     R0,[R0, #+10]
   \       0x1C   0x2800             CMP      R0,#+0
   \       0x1E   0xD00B             BEQ.N    ??LIST_AddPrevElement_1
   \       0x20   0x68A0             LDR      R0,[R4, #+8]
   \       0x22   0x8940             LDRH     R0,[R0, #+10]
   \       0x24   0x68A1             LDR      R1,[R4, #+8]
   \       0x26   0x8909             LDRH     R1,[R1, #+8]
   \       0x28   0x4288             CMP      R0,R1
   \       0x2A   0xD105             BNE.N    ??LIST_AddPrevElement_1
    358              {
    359                  EnableGlobalIRQ(regPrimask);
   \       0x2C   0x4630             MOV      R0,R6
   \       0x2E   0x....'....        BL       EnableGlobalIRQ
    360                  return kLIST_Full;
   \       0x32   0xF243 0x707A      MOVW     R0,#+14202
   \       0x36   0xBDF2             POP      {R1,R4-R7,PC}
    361              }
    362          
    363              if (kLIST_DuplicateError == LIST_Scan(element->list, newElement))
   \                     ??LIST_AddPrevElement_1: (+1)
   \       0x38   0xF243 0x7779      MOVW     R7,#+14201
   \       0x3C   0x4629             MOV      R1,R5
   \       0x3E   0x68A0             LDR      R0,[R4, #+8]
   \       0x40   0x....'....        BL       LIST_Scan
   \       0x44   0x42B8             CMP      R0,R7
   \       0x46   0xD104             BNE.N    ??LIST_AddPrevElement_2
    364              {
    365                  EnableGlobalIRQ(regPrimask);
   \       0x48   0x4630             MOV      R0,R6
   \       0x4A   0x....'....        BL       EnableGlobalIRQ
    366                  return kLIST_DuplicateError;
   \       0x4E   0x4638             MOV      R0,R7
   \       0x50   0xBDF2             POP      {R1,R4-R7,PC}
    367              }
    368          
    369              if (element->prev == NULL) /*Element is list head*/
   \                     ??LIST_AddPrevElement_2: (+1)
   \       0x52   0x6860             LDR      R0,[R4, #+4]
   \       0x54   0x2800             CMP      R0,#+0
   \       0x56   0xD102             BNE.N    ??LIST_AddPrevElement_3
    370              {
    371                  element->list->head = newElement;
   \       0x58   0x68A0             LDR      R0,[R4, #+8]
   \       0x5A   0x6005             STR      R5,[R0, #+0]
   \       0x5C   0xE000             B.N      ??LIST_AddPrevElement_4
    372              }
    373              else
    374              {
    375                  element->prev->next = newElement;
   \                     ??LIST_AddPrevElement_3: (+1)
   \       0x5E   0x6005             STR      R5,[R0, #+0]
    376              }
    377              newElement->list = element->list;
   \                     ??LIST_AddPrevElement_4: (+1)
   \       0x60   0x68A0             LDR      R0,[R4, #+8]
   \       0x62   0x60A8             STR      R0,[R5, #+8]
    378              element->list->size++;
   \       0x64   0x68A0             LDR      R0,[R4, #+8]
   \       0x66   0x8900             LDRH     R0,[R0, #+8]
   \       0x68   0x1C40             ADDS     R0,R0,#+1
   \       0x6A   0x68A1             LDR      R1,[R4, #+8]
   \       0x6C   0x8108             STRH     R0,[R1, #+8]
    379              newElement->next = element;
   \       0x6E   0x602C             STR      R4,[R5, #+0]
    380              newElement->prev = element->prev;
   \       0x70   0x6860             LDR      R0,[R4, #+4]
   \       0x72   0x6068             STR      R0,[R5, #+4]
    381              element->prev    = newElement;
   \       0x74   0x6065             STR      R5,[R4, #+4]
    382          
    383              EnableGlobalIRQ(regPrimask);
   \       0x76   0x4630             MOV      R0,R6
   \       0x78   0x....'....        BL       EnableGlobalIRQ
    384              return kLIST_Ok;
   \       0x7C   0x2000             MOVS     R0,#+0
   \       0x7E   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    385          }
    386          
    387          /*! *********************************************************************************
    388           * \brief     Gets the current size of a list.
    389           *
    390           * \param[in] list - ID of the list.
    391           *
    392           * \return Current size of the list.
    393           *
    394           * \pre
    395           *
    396           * \post
    397           *
    398           * \remarks
    399           *
    400           ********************************************************************************** */

   \                                 In section .text, align 2, keep-with-next
    401          uint32_t LIST_GetSize(list_handle_t list)
    402          {
    403              return list->size;
   \                     LIST_GetSize: (+1)
   \        0x0   0x8900             LDRH     R0,[R0, #+8]
   \        0x2   0x4770             BX       LR               ;; return
    404          }
    405          
    406          /*! *********************************************************************************
    407           * \brief     Gets the number of free places in the list.
    408           *
    409           * \param[in] list - ID of the list.
    410           *
    411           * \return Available size of the list.
    412           *
    413           * \pre
    414           *
    415           * \post
    416           *
    417           * \remarks
    418           *
    419           ********************************************************************************** */

   \                                 In section .text, align 2, keep-with-next
    420          uint32_t LIST_GetAvailableSize(list_handle_t list)
    421          {
   \                     LIST_GetAvailableSize: (+1)
   \        0x0   0x4601             MOV      R1,R0
    422              return ((uint32_t)list->max - (uint32_t)list->size);
   \        0x2   0x8948             LDRH     R0,[R1, #+10]
   \        0x4   0x8909             LDRH     R1,[R1, #+8]
   \        0x6   0x1A40             SUBS     R0,R0,R1
   \        0x8   0x4770             BX       LR               ;; return
    423          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   DisableGlobalIRQ
       0   EnableGlobalIRQ
      24   LIST_AddHead
        24   -> DisableGlobalIRQ
        24   -> EnableGlobalIRQ
        24   -> LIST_Scan
      24   LIST_AddPrevElement
        24   -> DisableGlobalIRQ
        24   -> EnableGlobalIRQ
        24   -> LIST_Scan
      24   LIST_AddTail
        24   -> DisableGlobalIRQ
        24   -> EnableGlobalIRQ
        24   -> LIST_Scan
       0   LIST_GetAvailableSize
       0   LIST_GetHead
       0   LIST_GetList
       0   LIST_GetNext
       0   LIST_GetPrev
       0   LIST_GetSize
       0   LIST_Init
       8   LIST_RemoveElement
         8   -> DisableGlobalIRQ
         8   -> EnableGlobalIRQ
      16   LIST_RemoveHead
        16   -> DisableGlobalIRQ
        16   -> EnableGlobalIRQ
       0   LIST_Scan


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       8  DisableGlobalIRQ
       6  EnableGlobalIRQ
     104  LIST_AddHead
     128  LIST_AddPrevElement
     104  LIST_AddTail
      10  LIST_GetAvailableSize
       4  LIST_GetHead
       4  LIST_GetList
       4  LIST_GetNext
       4  LIST_GetPrev
       4  LIST_GetSize
      14  LIST_Init
      90  LIST_RemoveElement
      66  LIST_RemoveHead
      24  LIST_Scan

 
 574 bytes in section .text
 
 574 bytes of CODE memory

Errors: none
Warnings: none
