###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.3.193/W32 for ARM         10/Jun/2019  13:48:37
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\Development\smart_washing_machine_3080\csdk\eng\mqtt\MQTTDeserializePublish.c
#    Command line =  
#        -f C:\Users\nxf42695\AppData\Local\Temp\1\EW211C.tmp
#        (C:\Development\smart_washing_machine_3080\csdk\eng\mqtt\MQTTDeserializePublish.c
#        -D DEBUG -D USE_RTOS -D XIP_EXTERNAL_FLASH=1 -D
#        XIP_BOOT_HEADER_ENABLE=1 -D CPU_MIMXRT1052DVL6B -D FSL_RTOS_FREE_RTOS
#        -D PRINTF_ADVANCED_ENABLE -D
#        "MBEDTLS_CONFIG_FILE=\"ksdk_mbedtls_config.h\"" -lC
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list -lA
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list
#        --diag_suppress Pa082,Pa050 -o
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_d16 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" --preinclude
#        C:\Development\smart_washing_machine_3080/source\app_preinclude.h -I
#        C:\Development\smart_washing_machine_3080/board\ -I
#        C:\Development\smart_washing_machine_3080/source\ -I
#        C:\Development\smart_washing_machine_3080/CMSIS\ -I
#        C:\Development\smart_washing_machine_3080/amazon-freertos/freertos/portable\
#        -I C:\Development\smart_washing_machine_3080/amazon-freertos/include\
#        -I C:\Development\smart_washing_machine_3080/component/lists\ -I
#        C:\Development\smart_washing_machine_3080/component/serial_manager\ -I
#        C:\Development\smart_washing_machine_3080/component/uart\ -I
#        C:\Development\smart_washing_machine_3080/component/kv\ -I
#        C:\Development\smart_washing_machine_3080/component/kv/include\ -I
#        C:\Development\smart_washing_machine_3080/device\ -I
#        C:\Development\smart_washing_machine_3080/doc\ -I
#        C:\Development\smart_washing_machine_3080/drivers\ -I
#        C:\Development\smart_washing_machine_3080/src\ -I
#        C:\Development\smart_washing_machine_3080/startup\ -I
#        C:\Development\smart_washing_machine_3080/utilities\ -I
#        C:\Development\smart_washing_machine_3080/xip\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\atm\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_model\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_sign\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\infra\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\mqtt\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\external_libs\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\coap_cloud\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\CoAPPacket\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\server\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\os\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\awss_reset\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\mbedtls\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\ -I
#        C:\Development\smart_washing_machine_3080\mbedtls\port\ksdk\ -Om)
#    Locale       =  C
#    List file    =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list\MQTTDeserializePublish.lst
#    Object file  =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj\MQTTDeserializePublish.o
#
###############################################################################

C:\Development\smart_washing_machine_3080\csdk\eng\mqtt\MQTTDeserializePublish.c
      1          /*
      2           * Copyright (C) 2015-2018 Alibaba Group Holding Limited
      3           */
      4          
      5          #include "MQTTPacket.h"
      6          #include <string.h>
      7          
      8          #define min(a, b) ((a < b) ? 1 : 0)
      9          
     10          /**
     11            * Deserializes the supplied (wire) buffer into publish data
     12            * @param dup returned integer - the MQTT dup flag
     13            * @param qos returned integer - the MQTT QoS value
     14            * @param retained returned integer - the MQTT retained flag
     15            * @param packetid returned integer - the MQTT packet identifier
     16            * @param topicName returned MQTTString - the MQTT topic in the publish
     17            * @param payload returned byte buffer - the MQTT publish payload
     18            * @param payloadlen returned integer - the length of the MQTT payload
     19            * @param buf the raw buffer data, of the correct length determined by the remaining length field
     20            * @param buflen the length in bytes of the data in the supplied buffer
     21            * @return error code.  1 is success
     22            */

   \                                 In section .text, align 2, keep-with-next
     23          int MQTTDeserialize_publish(unsigned char *dup, int *qos, unsigned char *retained, unsigned short *packetid,
     24                                      MQTTString *topicName,
     25                                      unsigned char **payload, int *payloadlen, unsigned char *buf, int buflen)
     26          {
   \                     MQTTDeserialize_publish: (+1)
   \        0x0   0xE92D 0x43FE      PUSH     {R1-R9,LR}
   \        0x4   0x4606             MOV      R6,R0
   \        0x6   0x460C             MOV      R4,R1
   \        0x8   0x4617             MOV      R7,R2
   \        0xA   0x461D             MOV      R5,R3
   \        0xC   0x980D             LDR      R0,[SP, #+52]
     27              MQTTHeader header = {0};
     28              unsigned char *curdata = buf;
   \        0xE   0x9000             STR      R0,[SP, #+0]
     29              unsigned char *enddata = NULL;
     30              int rc = 0;
   \       0x10   0xF04F 0x0800      MOV      R8,#+0
     31              int mylen = 0;
   \       0x14   0x4640             MOV      R0,R8
   \       0x16   0x9001             STR      R0,[SP, #+4]
     32          
     33              header.byte = readChar(&curdata);
   \       0x18   0x4668             MOV      R0,SP
   \       0x1A   0x....'....        BL       readChar
     34              if (MQTT_HEADER_GET_TYPE(header.byte) != PUBLISH) {
   \       0x1E   0x4601             MOV      R1,R0
   \       0x20   0x0909             LSRS     R1,R1,#+4
   \       0x22   0x2903             CMP      R1,#+3
   \       0x24   0xD12F             BNE.N    ??MQTTDeserialize_publish_0
   \       0x26   0xF8DD 0x9028      LDR      R9,[SP, #+40]
     35                  goto exit;
     36              }
     37              *dup = MQTT_HEADER_GET_DUP(header.byte);
   \       0x2A   0xF3C0 0x01C0      UBFX     R1,R0,#+3,#+1
   \       0x2E   0x7031             STRB     R1,[R6, #+0]
     38              *qos = MQTT_HEADER_GET_QOS(header.byte);
   \       0x30   0x4601             MOV      R1,R0
   \       0x32   0xF3C1 0x0141      UBFX     R1,R1,#+1,#+2
   \       0x36   0x6021             STR      R1,[R4, #+0]
     39              *retained = MQTT_HEADER_GET_RETAIN(header.byte);
   \       0x38   0xF000 0x0001      AND      R0,R0,#0x1
   \       0x3C   0x7038             STRB     R0,[R7, #+0]
     40          
     41              curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   \       0x3E   0xA901             ADD      R1,SP,#+4
   \       0x40   0x9800             LDR      R0,[SP, #+0]
   \       0x42   0x....'....        BL       MQTTPacket_decodeBuf
   \       0x46   0x4680             MOV      R8,R0
   \       0x48   0x9800             LDR      R0,[SP, #+0]
   \       0x4A   0x4440             ADD      R0,R0,R8
   \       0x4C   0x9000             STR      R0,[SP, #+0]
     42              enddata = curdata + mylen;
   \       0x4E   0x9901             LDR      R1,[SP, #+4]
   \       0x50   0x1846             ADDS     R6,R0,R1
     43          
     44              if (!readMQTTLenString(topicName, &curdata, enddata) ||
     45                  enddata - curdata < 0) { /* do we have enough data to read the protocol version byte? */
   \       0x52   0x4632             MOV      R2,R6
   \       0x54   0x4669             MOV      R1,SP
   \       0x56   0x4648             MOV      R0,R9
   \       0x58   0x....'....        BL       readMQTTLenString
   \       0x5C   0x2800             CMP      R0,#+0
   \       0x5E   0xD012             BEQ.N    ??MQTTDeserialize_publish_0
   \       0x60   0x9800             LDR      R0,[SP, #+0]
   \       0x62   0x1A30             SUBS     R0,R6,R0
   \       0x64   0xD40F             BMI.N    ??MQTTDeserialize_publish_0
     46                  goto exit;
     47              }
     48          
     49              if (*qos > 0) {
   \       0x66   0x6820             LDR      R0,[R4, #+0]
   \       0x68   0x2801             CMP      R0,#+1
   \       0x6A   0xDB03             BLT.N    ??MQTTDeserialize_publish_1
     50                  *packetid = readInt(&curdata);
   \       0x6C   0x4668             MOV      R0,SP
   \       0x6E   0x....'....        BL       readInt
   \       0x72   0x8028             STRH     R0,[R5, #+0]
   \                     ??MQTTDeserialize_publish_1: (+1)
   \       0x74   0x9A0C             LDR      R2,[SP, #+48]
   \       0x76   0x990B             LDR      R1,[SP, #+44]
     51              }
     52          
     53              *payloadlen = enddata - curdata;
   \       0x78   0x9800             LDR      R0,[SP, #+0]
   \       0x7A   0x1A36             SUBS     R6,R6,R0
   \       0x7C   0x6016             STR      R6,[R2, #+0]
     54              *payload = curdata;
   \       0x7E   0x9800             LDR      R0,[SP, #+0]
   \       0x80   0x6008             STR      R0,[R1, #+0]
     55              rc = 1;
   \       0x82   0xF04F 0x0801      MOV      R8,#+1
     56          exit:
     57              return rc;
   \                     ??MQTTDeserialize_publish_0: (+1)
   \       0x86   0x4640             MOV      R0,R8
   \       0x88   0xE8BD 0x83FE      POP      {R1-R9,PC}       ;; return
     58          }
     59          
     60          
     61          
     62          /**
     63            * Deserializes the supplied (wire) buffer into an ack
     64            * @param packettype returned integer - the MQTT packet type
     65            * @param dup returned integer - the MQTT dup flag
     66            * @param packetid returned integer - the MQTT packet identifier
     67            * @param buf the raw buffer data, of the correct length determined by the remaining length field
     68            * @param buflen the length in bytes of the data in the supplied buffer
     69            * @return error code.  1 is success, 0 is failure
     70            */

   \                                 In section .text, align 2, keep-with-next
     71          int MQTTDeserialize_ack(unsigned char *packettype, unsigned char *dup, unsigned short *packetid, unsigned char *buf,
     72                                  int buflen)
     73          {
   \                     MQTTDeserialize_ack: (+1)
   \        0x0   0xB57C             PUSH     {R2-R6,LR}
   \        0x2   0x4605             MOV      R5,R0
   \        0x4   0x460E             MOV      R6,R1
   \        0x6   0x4614             MOV      R4,R2
     74              MQTTHeader header = {0};
     75              unsigned char *curdata = buf;
   \        0x8   0x9300             STR      R3,[SP, #+0]
     76              unsigned char *enddata = NULL;
     77              int rc = 0;
     78              int mylen;
     79          
     80              header.byte = readChar(&curdata);
   \        0xA   0x4668             MOV      R0,SP
   \        0xC   0x....'....        BL       readChar
     81              *dup = MQTT_HEADER_GET_DUP(header.byte);
   \       0x10   0xF3C0 0x01C0      UBFX     R1,R0,#+3,#+1
   \       0x14   0x7031             STRB     R1,[R6, #+0]
     82              *packettype = MQTT_HEADER_GET_TYPE(header.byte);
   \       0x16   0x0900             LSRS     R0,R0,#+4
   \       0x18   0x7028             STRB     R0,[R5, #+0]
     83          
     84              curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   \       0x1A   0xA901             ADD      R1,SP,#+4
   \       0x1C   0x9800             LDR      R0,[SP, #+0]
   \       0x1E   0x....'....        BL       MQTTPacket_decodeBuf
   \       0x22   0x9900             LDR      R1,[SP, #+0]
   \       0x24   0x4401             ADD      R1,R1,R0
   \       0x26   0x9100             STR      R1,[SP, #+0]
     85              enddata = curdata + mylen;
     86          
     87              if (enddata - curdata < 2) {
   \       0x28   0x9901             LDR      R1,[SP, #+4]
   \       0x2A   0x2902             CMP      R1,#+2
   \       0x2C   0xDB04             BLT.N    ??MQTTDeserialize_ack_0
     88                  goto exit;
     89              }
     90              *packetid = readInt(&curdata);
   \       0x2E   0x4668             MOV      R0,SP
   \       0x30   0x....'....        BL       readInt
   \       0x34   0x8020             STRH     R0,[R4, #+0]
     91          
     92              rc = 1;
   \       0x36   0x2001             MOVS     R0,#+1
     93          exit:
     94              return rc;
   \                     ??MQTTDeserialize_ack_0: (+1)
   \       0x38   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
     95          }
     96          
     97          
     98          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   MQTTDeserialize_ack
        24   -> MQTTPacket_decodeBuf
        24   -> readChar
        24   -> readInt
      40   MQTTDeserialize_publish
        40   -> MQTTPacket_decodeBuf
        40   -> readChar
        40   -> readInt
        40   -> readMQTTLenString


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      58  MQTTDeserialize_ack
     140  MQTTDeserialize_publish

 
 198 bytes in section .text
 
 198 bytes of CODE memory

Errors: none
Warnings: none
