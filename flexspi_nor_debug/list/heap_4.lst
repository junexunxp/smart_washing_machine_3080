###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.3.193/W32 for ARM         10/Jun/2019  13:48:26
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\Development\smart_washing_machine_3080\amazon-freertos\freertos\portable\heap_4.c
#    Command line =  
#        -f C:\Users\nxf42695\AppData\Local\Temp\1\EWF56C.tmp
#        (C:\Development\smart_washing_machine_3080\amazon-freertos\freertos\portable\heap_4.c
#        -D DEBUG -D USE_RTOS -D XIP_EXTERNAL_FLASH=1 -D
#        XIP_BOOT_HEADER_ENABLE=1 -D CPU_MIMXRT1052DVL6B -D FSL_RTOS_FREE_RTOS
#        -D PRINTF_ADVANCED_ENABLE -D
#        "MBEDTLS_CONFIG_FILE=\"ksdk_mbedtls_config.h\"" -lC
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list -lA
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list
#        --diag_suppress Pa082,Pa050 -o
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_d16 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" --preinclude
#        C:\Development\smart_washing_machine_3080/source\app_preinclude.h -I
#        C:\Development\smart_washing_machine_3080/board\ -I
#        C:\Development\smart_washing_machine_3080/source\ -I
#        C:\Development\smart_washing_machine_3080/CMSIS\ -I
#        C:\Development\smart_washing_machine_3080/amazon-freertos/freertos/portable\
#        -I C:\Development\smart_washing_machine_3080/amazon-freertos/include\
#        -I C:\Development\smart_washing_machine_3080/component/lists\ -I
#        C:\Development\smart_washing_machine_3080/component/serial_manager\ -I
#        C:\Development\smart_washing_machine_3080/component/uart\ -I
#        C:\Development\smart_washing_machine_3080/component/kv\ -I
#        C:\Development\smart_washing_machine_3080/component/kv/include\ -I
#        C:\Development\smart_washing_machine_3080/device\ -I
#        C:\Development\smart_washing_machine_3080/doc\ -I
#        C:\Development\smart_washing_machine_3080/drivers\ -I
#        C:\Development\smart_washing_machine_3080/src\ -I
#        C:\Development\smart_washing_machine_3080/startup\ -I
#        C:\Development\smart_washing_machine_3080/utilities\ -I
#        C:\Development\smart_washing_machine_3080/xip\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\atm\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_model\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_sign\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\infra\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\mqtt\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\external_libs\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\coap_cloud\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\CoAPPacket\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\server\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\os\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\awss_reset\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\mbedtls\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\ -I
#        C:\Development\smart_washing_machine_3080\mbedtls\port\ksdk\ -Om)
#    Locale       =  C
#    List file    =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list\heap_4.lst
#    Object file  =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj\heap_4.o
#
###############################################################################

C:\Development\smart_washing_machine_3080\amazon-freertos\freertos\portable\heap_4.c
      1          /*
      2           * FreeRTOS Kernel V10.2.0
      3           * Copyright (C) 2019 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
      4           *
      5           * Permission is hereby granted, free of charge, to any person obtaining a copy of
      6           * this software and associated documentation files (the "Software"), to deal in
      7           * the Software without restriction, including without limitation the rights to
      8           * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
      9           * the Software, and to permit persons to whom the Software is furnished to do so,
     10           * subject to the following conditions:
     11           *
     12           * The above copyright notice and this permission notice shall be included in all
     13           * copies or substantial portions of the Software.
     14           *
     15           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     16           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
     17           * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
     18           * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
     19           * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
     20           * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
     21           *
     22           * http://www.FreeRTOS.org
     23           * http://aws.amazon.com/freertos
     24           *
     25           * 1 tab == 4 spaces!
     26           */
     27          
     28          /*
     29           * A sample implementation of pvPortMalloc() and vPortFree() that combines
     30           * (coalescences) adjacent memory blocks as they are freed, and in so doing
     31           * limits memory fragmentation.
     32           *
     33           * See heap_1.c, heap_2.c and heap_3.c for alternative implementations, and the
     34           * memory management pages of http://www.FreeRTOS.org for more information.
     35           */
     36          #include <stdlib.h>
     37          
     38          /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
     39          all the API functions to use the MPU wrappers.  That should only be done when
     40          task.h is included from an application file. */
     41          #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
     42          
     43          #include "FreeRTOS.h"
     44          #include "task.h"
     45          
     46          #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE
     47          
     48          #if( configSUPPORT_DYNAMIC_ALLOCATION == 0 )
     49          	#error This file must not be used if configSUPPORT_DYNAMIC_ALLOCATION is 0
     50          #endif
     51          
     52          /* Block sizes must not get too small. */
     53          #define heapMINIMUM_BLOCK_SIZE	( ( size_t ) ( xHeapStructSize << 1 ) )
     54          
     55          /* Assumes 8bit bytes! */
     56          #define heapBITS_PER_BYTE		( ( size_t ) 8 )
     57          
     58          /* Allocate the memory for the heap. */
     59          #if( configAPPLICATION_ALLOCATED_HEAP == 1 )
     60          	/* The application writer has already defined the array used for the RTOS
     61          	heap - probably so it can be placed in a special segment or address. */
     62          	extern uint8_t ucHeap[ configTOTAL_HEAP_SIZE ];
     63          #else

   \                                 In section .bss, align 4
     64          	static uint8_t ucHeap[ configTOTAL_HEAP_SIZE ];
   \                     ucHeap:
   \        0x0                      DS8 81920
     65          #endif /* configAPPLICATION_ALLOCATED_HEAP */
     66          
     67          /* Define the linked list structure.  This is used to link free blocks in order
     68          of their memory address. */
     69          typedef struct A_BLOCK_LINK
     70          {
     71          	struct A_BLOCK_LINK *pxNextFreeBlock;	/*<< The next free block in the list. */
     72          	size_t xBlockSize;						/*<< The size of the free block. */
     73          } BlockLink_t;
     74          
     75          /*-----------------------------------------------------------*/
     76          
     77          /*
     78           * Inserts a block of memory that is being freed into the correct position in
     79           * the list of free memory blocks.  The block being freed will be merged with
     80           * the block in front it and/or the block behind it if the memory blocks are
     81           * adjacent to each other.
     82           */
     83          static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert );
     84          
     85          /*
     86           * Called automatically to setup the required heap structures the first time
     87           * pvPortMalloc() is called.
     88           */
     89          static void prvHeapInit( void );
     90          
     91          /*-----------------------------------------------------------*/
     92          
     93          /* The size of the structure placed at the beginning of each allocated memory
     94          block must by correctly byte aligned. */
     95          static const size_t xHeapStructSize	= ( sizeof( BlockLink_t ) + ( ( size_t ) ( portBYTE_ALIGNMENT - 1 ) ) ) & ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
     96          
     97          /* Create a couple of list links to mark the start and end of the list. */

   \                                 In section .bss, align 4
     98          static BlockLink_t xStart, *pxEnd = NULL;
   \                     xStart:
   \        0x0                      DS8 8

   \                                 In section .bss, align 4
   \                     pxEnd:
   \        0x0                      DS8 4
     99          
    100          /* Keeps track of the number of free bytes remaining, but says nothing about
    101          fragmentation. */

   \                                 In section .bss, align 4
    102          static size_t xFreeBytesRemaining = 0U;
   \                     xFreeBytesRemaining:
   \        0x0                      DS8 4

   \                                 In section .bss, align 4
    103          static size_t xMinimumEverFreeBytesRemaining = 0U;
   \                     xMinimumEverFreeBytesRemaining:
   \        0x0                      DS8 4
    104          
    105          /* Gets set to the top bit of an size_t type.  When this bit in the xBlockSize
    106          member of an BlockLink_t structure is set then the block belongs to the
    107          application.  When the bit is free the block is still part of the free heap
    108          space. */

   \                                 In section .bss, align 4
    109          static size_t xBlockAllocatedBit = 0;
   \                     xBlockAllocatedBit:
   \        0x0                      DS8 4
    110          
    111          /*-----------------------------------------------------------*/
    112          

   \                                 In section .text, align 2, keep-with-next
    113          void *pvPortMalloc( size_t xWantedSize )
    114          {
   \                     pvPortMalloc: (+1)
   \        0x0   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \        0x4   0x4604             MOV      R4,R0
    115          BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
    116          void *pvReturn = NULL;
   \        0x6   0x2500             MOVS     R5,#+0
    117          
    118          	vTaskSuspendAll();
   \        0x8   0x....'....        BL       vTaskSuspendAll
    119          	{
    120          		/* If this is the first call to malloc then the heap will require
    121          		initialisation to setup the list of free blocks. */
    122          		if( pxEnd == NULL )
   \        0xC   0x....'....        LDR.W    R9,??DataTable5
   \       0x10   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \       0x14   0x2800             CMP      R0,#+0
   \       0x16   0xD101             BNE.N    ??pvPortMalloc_0
    123          		{
    124          			prvHeapInit();
   \       0x18   0x....'....        BL       prvHeapInit
    125          		}
    126          		else
    127          		{
    128          			mtCOVERAGE_TEST_MARKER();
    129          		}
    130          
    131          		/* Check the requested block size is not so large that the top bit is
    132          		set.  The top bit of the block size member of the BlockLink_t structure
    133          		is used to determine who owns the block - the application or the
    134          		kernel, so it must be free. */
    135          		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
   \                     ??pvPortMalloc_0: (+1)
   \       0x1C   0x....             LDR.N    R6,??DataTable5_1
   \       0x1E   0x6830             LDR      R0,[R6, #+0]
   \       0x20   0x4204             TST      R4,R0
   \       0x22   0xD145             BNE.N    ??pvPortMalloc_1
    136          		{
    137          			/* The wanted size is increased so it can contain a BlockLink_t
    138          			structure in addition to the requested amount of bytes. */
    139          			if( xWantedSize > 0 )
   \       0x24   0x2C00             CMP      R4,#+0
   \       0x26   0xD013             BEQ.N    ??pvPortMalloc_2
    140          			{
    141          				xWantedSize += xHeapStructSize;
   \       0x28   0x3408             ADDS     R4,R4,#+8
    142          
    143          				/* Ensure that blocks are always aligned to the required number
    144          				of bytes. */
    145          				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
   \       0x2A   0xF014 0x0F07      TST      R4,#0x7
   \       0x2E   0xD00F             BEQ.N    ??pvPortMalloc_2
    146          				{
    147          					/* Byte alignment required. */
    148          					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   \       0x30   0xF104 0x0008      ADD      R0,R4,#+8
   \       0x34   0xF004 0x0407      AND      R4,R4,#0x7
   \       0x38   0x1B04             SUBS     R4,R0,R4
    149          					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
   \       0x3A   0xF014 0x0F07      TST      R4,#0x7
   \       0x3E   0xD007             BEQ.N    ??pvPortMalloc_2
   \       0x40   0x2020             MOVS     R0,#+32
   \       0x42   0xF380 0x8811      MSR      BASEPRI,R0
   \       0x46   0xF3BF 0x8F4F      DSB      SY
   \       0x4A   0xF3BF 0x8F6F      ISB      SY
   \                     ??pvPortMalloc_3: (+1)
   \       0x4E   0xE7FE             B.N      ??pvPortMalloc_3
    150          				}
    151          				else
    152          				{
    153          					mtCOVERAGE_TEST_MARKER();
    154          				}
    155          			}
    156          			else
    157          			{
    158          				mtCOVERAGE_TEST_MARKER();
    159          			}
    160          
    161          			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
   \                     ??pvPortMalloc_2: (+1)
   \       0x50   0x2C00             CMP      R4,#+0
   \       0x52   0xD02D             BEQ.N    ??pvPortMalloc_1
   \       0x54   0x....             LDR.N    R7,??DataTable5_2
   \       0x56   0x6838             LDR      R0,[R7, #+0]
   \       0x58   0x42A0             CMP      R0,R4
   \       0x5A   0xD329             BCC.N    ??pvPortMalloc_1
    162          			{
    163          				/* Traverse the list from the start	(lowest address) block until
    164          				one	of adequate size is found. */
    165          				pxPreviousBlock = &xStart;
   \       0x5C   0x....             LDR.N    R1,??DataTable5_3
    166          				pxBlock = xStart.pxNextFreeBlock;
   \       0x5E   0xF8D1 0x8000      LDR      R8,[R1, #+0]
    167          				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   \                     ??pvPortMalloc_4: (+1)
   \       0x62   0xF8D8 0x0004      LDR      R0,[R8, #+4]
   \       0x66   0x42A0             CMP      R0,R4
   \       0x68   0xD232             BCS.N    ??pvPortMalloc_5
   \       0x6A   0xF8D8 0x0000      LDR      R0,[R8, #+0]
   \       0x6E   0x2800             CMP      R0,#+0
   \       0x70   0xD02E             BEQ.N    ??pvPortMalloc_5
    168          				{
    169          					pxPreviousBlock = pxBlock;
   \       0x72   0x4641             MOV      R1,R8
    170          					pxBlock = pxBlock->pxNextFreeBlock;
   \       0x74   0x4680             MOV      R8,R0
   \       0x76   0xE7F4             B.N      ??pvPortMalloc_4
    171          				}
    172          
    173          				/* If the end marker was reached then a block of adequate size
    174          				was	not found. */
    175          				if( pxBlock != pxEnd )
    176          				{
    177          					/* Return the memory space pointed to - jumping over the
    178          					BlockLink_t structure at its start. */
    179          					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    180          
    181          					/* This block is being returned for use so must be taken out
    182          					of the list of free blocks. */
    183          					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    184          
    185          					/* If the block is larger than required it can be split into
    186          					two. */
    187          					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    188          					{
    189          						/* This block is to be split into two.  Create a new
    190          						block following the number of bytes requested. The void
    191          						cast is used to prevent byte alignment warnings from the
    192          						compiler. */
    193          						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    194          						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
    195          
    196          						/* Calculate the sizes of two blocks split from the
    197          						single block. */
    198          						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   \                     ??pvPortMalloc_6: (+1)
   \       0x78   0xF8D8 0x0004      LDR      R0,[R8, #+4]
   \       0x7C   0x1B00             SUBS     R0,R0,R4
   \       0x7E   0x6048             STR      R0,[R1, #+4]
    199          						pxBlock->xBlockSize = xWantedSize;
   \       0x80   0xF8C8 0x4004      STR      R4,[R8, #+4]
    200          
    201          						/* Insert the new block into the list of free blocks. */
    202          						prvInsertBlockIntoFreeList( pxNewBlockLink );
   \       0x84   0x4608             MOV      R0,R1
   \       0x86   0x....'....        BL       prvInsertBlockIntoFreeList
    203          					}
    204          					else
    205          					{
    206          						mtCOVERAGE_TEST_MARKER();
    207          					}
    208          
    209          					xFreeBytesRemaining -= pxBlock->xBlockSize;
   \                     ??pvPortMalloc_7: (+1)
   \       0x8A   0x6839             LDR      R1,[R7, #+0]
   \       0x8C   0xF8D8 0x0004      LDR      R0,[R8, #+4]
   \       0x90   0x1A09             SUBS     R1,R1,R0
   \       0x92   0x6039             STR      R1,[R7, #+0]
    210          
    211          					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
   \       0x94   0x....             LDR.N    R0,??DataTable5_4
   \       0x96   0x6802             LDR      R2,[R0, #+0]
   \       0x98   0x4291             CMP      R1,R2
   \       0x9A   0xD200             BCS.N    ??pvPortMalloc_8
    212          					{
    213          						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
   \       0x9C   0x6001             STR      R1,[R0, #+0]
    214          					}
    215          					else
    216          					{
    217          						mtCOVERAGE_TEST_MARKER();
    218          					}
    219          
    220          					/* The block is being returned - it is allocated and owned
    221          					by the application and has no "next" block. */
    222          					pxBlock->xBlockSize |= xBlockAllocatedBit;
   \                     ??pvPortMalloc_8: (+1)
   \       0x9E   0xF8D8 0x1004      LDR      R1,[R8, #+4]
   \       0xA2   0x6830             LDR      R0,[R6, #+0]
   \       0xA4   0x4301             ORRS     R1,R0,R1
   \       0xA6   0xF8C8 0x1004      STR      R1,[R8, #+4]
    223          					pxBlock->pxNextFreeBlock = NULL;
   \       0xAA   0x2000             MOVS     R0,#+0
   \       0xAC   0xF8C8 0x0000      STR      R0,[R8, #+0]
    224          				}
    225          				else
    226          				{
    227          					mtCOVERAGE_TEST_MARKER();
    228          				}
    229          			}
    230          			else
    231          			{
    232          				mtCOVERAGE_TEST_MARKER();
    233          			}
    234          		}
    235          		else
    236          		{
    237          			mtCOVERAGE_TEST_MARKER();
    238          		}
    239          
    240          		traceMALLOC( pvReturn, xWantedSize );
    241          	}
    242          	( void ) xTaskResumeAll();
   \                     ??pvPortMalloc_1: (+1)
   \       0xB0   0x....'....        BL       xTaskResumeAll
    243          
    244          	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
    245          	{
    246          		if( pvReturn == NULL )
    247          		{
    248          			extern void vApplicationMallocFailedHook( void );
    249          			vApplicationMallocFailedHook();
    250          		}
    251          		else
    252          		{
    253          			mtCOVERAGE_TEST_MARKER();
    254          		}
    255          	}
    256          	#endif
    257          
    258          	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
   \       0xB4   0xF015 0x0007      ANDS     R0,R5,#0x7
   \       0xB8   0xD007             BEQ.N    ??pvPortMalloc_9
   \       0xBA   0x2020             MOVS     R0,#+32
   \       0xBC   0xF380 0x8811      MSR      BASEPRI,R0
   \       0xC0   0xF3BF 0x8F4F      DSB      SY
   \       0xC4   0xF3BF 0x8F6F      ISB      SY
   \                     ??pvPortMalloc_10: (+1)
   \       0xC8   0xE7FE             B.N      ??pvPortMalloc_10
    259          	return pvReturn;
   \                     ??pvPortMalloc_9: (+1)
   \       0xCA   0x4628             MOV      R0,R5
   \       0xCC   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
   \                     ??pvPortMalloc_5: (+1)
   \       0xD0   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \       0xD4   0x4580             CMP      R8,R0
   \       0xD6   0xD0EB             BEQ.N    ??pvPortMalloc_1
   \       0xD8   0x6808             LDR      R0,[R1, #+0]
   \       0xDA   0x3008             ADDS     R0,R0,#+8
   \       0xDC   0x4605             MOV      R5,R0
   \       0xDE   0xF8D8 0x0000      LDR      R0,[R8, #+0]
   \       0xE2   0x6008             STR      R0,[R1, #+0]
   \       0xE4   0xF8D8 0x0004      LDR      R0,[R8, #+4]
   \       0xE8   0x1B00             SUBS     R0,R0,R4
   \       0xEA   0x2811             CMP      R0,#+17
   \       0xEC   0xD3CD             BCC.N    ??pvPortMalloc_7
   \       0xEE   0xEB08 0x0104      ADD      R1,R8,R4
   \       0xF2   0xF011 0x0007      ANDS     R0,R1,#0x7
   \       0xF6   0xD0BF             BEQ.N    ??pvPortMalloc_6
   \       0xF8   0x2020             MOVS     R0,#+32
   \       0xFA   0xF380 0x8811      MSR      BASEPRI,R0
   \       0xFE   0xF3BF 0x8F4F      DSB      SY
   \      0x102   0xF3BF 0x8F6F      ISB      SY
   \                     ??pvPortMalloc_11: (+1)
   \      0x106   0xE7FE             B.N      ??pvPortMalloc_11
    260          }
    261          /*-----------------------------------------------------------*/
    262          

   \                                 In section .text, align 2, keep-with-next
    263          void vPortFree( void *pv )
    264          {
   \                     vPortFree: (+1)
   \        0x0   0x2800             CMP      R0,#+0
   \        0x2   0xD100             BNE.N    ??vPortFree_0
   \        0x4   0x4770             BX       LR
   \                     ??vPortFree_0: (+1)
   \        0x6   0xB510             PUSH     {R4,LR}
    265          uint8_t *puc = ( uint8_t * ) pv;
    266          BlockLink_t *pxLink;
    267          
    268          	if( pv != NULL )
    269          	{
    270          		/* The memory being freed will have an BlockLink_t structure immediately
    271          		before it. */
    272          		puc -= xHeapStructSize;
    273          
    274          		/* This casting is to keep the compiler from issuing warnings. */
    275          		pxLink = ( void * ) puc;
   \        0x8   0xF1A0 0x0408      SUB      R4,R0,#+8
    276          
    277          		/* Check the block is actually allocated. */
    278          		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
   \        0xC   0x....             LDR.N    R1,??DataTable5_1
   \        0xE   0x6860             LDR      R0,[R4, #+4]
   \       0x10   0x680A             LDR      R2,[R1, #+0]
   \       0x12   0x4210             TST      R0,R2
   \       0x14   0xD107             BNE.N    ??vPortFree_1
   \       0x16   0x2020             MOVS     R0,#+32
   \       0x18   0xF380 0x8811      MSR      BASEPRI,R0
   \       0x1C   0xF3BF 0x8F4F      DSB      SY
   \       0x20   0xF3BF 0x8F6F      ISB      SY
   \                     ??vPortFree_2: (+1)
   \       0x24   0xE7FE             B.N      ??vPortFree_2
    279          		configASSERT( pxLink->pxNextFreeBlock == NULL );
   \                     ??vPortFree_1: (+1)
   \       0x26   0x6820             LDR      R0,[R4, #+0]
   \       0x28   0x2800             CMP      R0,#+0
   \       0x2A   0xD007             BEQ.N    ??vPortFree_3
   \       0x2C   0x2020             MOVS     R0,#+32
   \       0x2E   0xF380 0x8811      MSR      BASEPRI,R0
   \       0x32   0xF3BF 0x8F4F      DSB      SY
   \       0x36   0xF3BF 0x8F6F      ISB      SY
   \                     ??vPortFree_4: (+1)
   \       0x3A   0xE7FE             B.N      ??vPortFree_4
    280          
    281          		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
    282          		{
    283          			if( pxLink->pxNextFreeBlock == NULL )
   \                     ??vPortFree_3: (+1)
   \       0x3C   0xD111             BNE.N    ??vPortFree_5
    284          			{
    285          				/* The block is being returned to the heap - it is no longer
    286          				allocated. */
    287          				pxLink->xBlockSize &= ~xBlockAllocatedBit;
   \       0x3E   0x6862             LDR      R2,[R4, #+4]
   \       0x40   0x6808             LDR      R0,[R1, #+0]
   \       0x42   0x4382             BICS     R2,R2,R0
   \       0x44   0x6062             STR      R2,[R4, #+4]
    288          
    289          				vTaskSuspendAll();
   \       0x46   0x....'....        BL       vTaskSuspendAll
    290          				{
    291          					/* Add this block to the list of free blocks. */
    292          					xFreeBytesRemaining += pxLink->xBlockSize;
   \       0x4A   0x....             LDR.N    R1,??DataTable5_2
   \       0x4C   0x680A             LDR      R2,[R1, #+0]
   \       0x4E   0x6860             LDR      R0,[R4, #+4]
   \       0x50   0x1882             ADDS     R2,R0,R2
   \       0x52   0x600A             STR      R2,[R1, #+0]
    293          					traceFREE( pv, pxLink->xBlockSize );
    294          					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
   \       0x54   0x4620             MOV      R0,R4
   \       0x56   0x....'....        BL       prvInsertBlockIntoFreeList
    295          				}
    296          				( void ) xTaskResumeAll();
   \       0x5A   0xE8BD 0x4010      POP      {R4,LR}
   \       0x5E   0x....'....        B.W      xTaskResumeAll
    297          			}
    298          			else
    299          			{
    300          				mtCOVERAGE_TEST_MARKER();
    301          			}
    302          		}
    303          		else
    304          		{
    305          			mtCOVERAGE_TEST_MARKER();
    306          		}
    307          	}
    308          }
   \                     ??vPortFree_5: (+1)
   \       0x62   0xBD10             POP      {R4,PC}          ;; return
    309          /*-----------------------------------------------------------*/
    310          

   \                                 In section .text, align 2, keep-with-next
    311          size_t xPortGetFreeHeapSize( void )
    312          {
    313          	return xFreeBytesRemaining;
   \                     xPortGetFreeHeapSize: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable5_2
   \        0x2   0x6800             LDR      R0,[R0, #+0]
   \        0x4   0x4770             BX       LR               ;; return
    314          }
    315          /*-----------------------------------------------------------*/
    316          

   \                                 In section .text, align 2, keep-with-next
    317          size_t xPortGetMinimumEverFreeHeapSize( void )
    318          {
    319          	return xMinimumEverFreeBytesRemaining;
   \                     xPortGetMinimumEverFreeHeapSize: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable5_4
   \        0x2   0x6800             LDR      R0,[R0, #+0]
   \        0x4   0x4770             BX       LR               ;; return
    320          }
    321          /*-----------------------------------------------------------*/
    322          

   \                                 In section .text, align 2, keep-with-next
    323          void vPortInitialiseBlocks( void )
    324          {
    325          	/* This just exists to keep the linker quiet. */
    326          }
   \                     vPortInitialiseBlocks: (+1)
   \        0x0   0x4770             BX       LR               ;; return
    327          /*-----------------------------------------------------------*/
    328          

   \                                 In section .text, align 2, keep-with-next
    329          static void prvHeapInit( void )
    330          {
   \                     prvHeapInit: (+1)
   \        0x0   0xB410             PUSH     {R4}
    331          BlockLink_t *pxFirstFreeBlock;
    332          uint8_t *pucAlignedHeap;
    333          size_t uxAddress;
    334          size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
   \        0x2   0xF44F 0x30A0      MOV      R0,#+81920
    335          
    336          	/* Ensure the heap starts on a correctly aligned boundary. */
    337          	uxAddress = ( size_t ) ucHeap;
   \        0x6   0x....             LDR.N    R1,??DataTable5_5
   \        0x8   0x460A             MOV      R2,R1
    338          
    339          	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
   \        0xA   0xF012 0x0F07      TST      R2,#0x7
   \        0xE   0xD005             BEQ.N    ??prvHeapInit_0
    340          	{
    341          		uxAddress += ( portBYTE_ALIGNMENT - 1 );
    342          		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
   \       0x10   0x1DD2             ADDS     R2,R2,#+7
   \       0x12   0x08D2             LSRS     R2,R2,#+3
   \       0x14   0x00D2             LSLS     R2,R2,#+3
    343          		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
   \       0x16   0xF5C2 0x30A0      RSB      R0,R2,#+81920
   \       0x1A   0x1808             ADDS     R0,R1,R0
    344          	}
    345          
    346          	pucAlignedHeap = ( uint8_t * ) uxAddress;
    347          
    348          	/* xStart is used to hold a pointer to the first item in the list of free
    349          	blocks.  The void cast is used to prevent compiler warnings. */
    350          	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
   \                     ??prvHeapInit_0: (+1)
   \       0x1C   0x....             LDR.N    R1,??DataTable5_3
   \       0x1E   0x600A             STR      R2,[R1, #+0]
    351          	xStart.xBlockSize = ( size_t ) 0;
   \       0x20   0x2300             MOVS     R3,#+0
   \       0x22   0x604B             STR      R3,[R1, #+4]
    352          
    353          	/* pxEnd is used to mark the end of the list of free blocks and is inserted
    354          	at the end of the heap space. */
    355          	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    356          	uxAddress -= xHeapStructSize;
    357          	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
   \       0x24   0x1880             ADDS     R0,R0,R2
   \       0x26   0x3808             SUBS     R0,R0,#+8
   \       0x28   0x08C0             LSRS     R0,R0,#+3
   \       0x2A   0x00C0             LSLS     R0,R0,#+3
    358          	pxEnd = ( void * ) uxAddress;
   \       0x2C   0x....             LDR.N    R1,??DataTable5
   \       0x2E   0x6008             STR      R0,[R1, #+0]
    359          	pxEnd->xBlockSize = 0;
   \       0x30   0x4604             MOV      R4,R0
   \       0x32   0x6063             STR      R3,[R4, #+4]
    360          	pxEnd->pxNextFreeBlock = NULL;
   \       0x34   0x680C             LDR      R4,[R1, #+0]
   \       0x36   0x6023             STR      R3,[R4, #+0]
    361          
    362          	/* To start with there is a single free block that is sized to take up the
    363          	entire heap space, minus the space taken by pxEnd. */
    364          	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    365          	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
   \       0x38   0x1A80             SUBS     R0,R0,R2
   \       0x3A   0x6050             STR      R0,[R2, #+4]
    366          	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   \       0x3C   0x6808             LDR      R0,[R1, #+0]
   \       0x3E   0x6010             STR      R0,[R2, #+0]
    367          
    368          	/* Only one block exists - and it covers the entire usable heap space. */
    369          	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
   \       0x40   0x6850             LDR      R0,[R2, #+4]
   \       0x42   0x....             LDR.N    R1,??DataTable5_4
   \       0x44   0x6008             STR      R0,[R1, #+0]
    370          	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
   \       0x46   0x6850             LDR      R0,[R2, #+4]
   \       0x48   0x....             LDR.N    R1,??DataTable5_2
   \       0x4A   0x6008             STR      R0,[R1, #+0]
    371          
    372          	/* Work out the position of the top bit in a size_t variable. */
    373          	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
   \       0x4C   0xF04F 0x4000      MOV      R0,#-2147483648
   \       0x50   0x....             LDR.N    R1,??DataTable5_1
   \       0x52   0x6008             STR      R0,[R1, #+0]
    374          }
   \       0x54   0xBC10             POP      {R4}
   \       0x56   0x4770             BX       LR               ;; return
    375          /*-----------------------------------------------------------*/
    376          

   \                                 In section .text, align 2, keep-with-next
    377          static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
    378          {
   \                     prvInsertBlockIntoFreeList: (+1)
   \        0x0   0xB410             PUSH     {R4}
    379          BlockLink_t *pxIterator;
    380          uint8_t *puc;
    381          
    382          	/* Iterate through the list until a block is found that has a higher address
    383          	than the block being inserted. */
    384          	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   \        0x2   0x....             LDR.N    R2,??DataTable5_3
   \        0x4   0xE000             B.N      ??prvInsertBlockIntoFreeList_0
   \                     ??prvInsertBlockIntoFreeList_1: (+1)
   \        0x6   0x460A             MOV      R2,R1
   \                     ??prvInsertBlockIntoFreeList_0: (+1)
   \        0x8   0x6811             LDR      R1,[R2, #+0]
   \        0xA   0x4281             CMP      R1,R0
   \        0xC   0xD3FB             BCC.N    ??prvInsertBlockIntoFreeList_1
    385          	{
    386          		/* Nothing to do here, just iterate to the right position. */
    387          	}
    388          
    389          	/* Do the block being inserted, and the block it is being inserted after
    390          	make a contiguous block of memory? */
    391          	puc = ( uint8_t * ) pxIterator;
    392          	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
   \        0xE   0x6851             LDR      R1,[R2, #+4]
   \       0x10   0x4411             ADD      R1,R2,R1
   \       0x12   0x4281             CMP      R1,R0
   \       0x14   0xD104             BNE.N    ??prvInsertBlockIntoFreeList_2
    393          	{
    394          		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   \       0x16   0x6851             LDR      R1,[R2, #+4]
   \       0x18   0x6840             LDR      R0,[R0, #+4]
   \       0x1A   0x1841             ADDS     R1,R0,R1
   \       0x1C   0x6051             STR      R1,[R2, #+4]
    395          		pxBlockToInsert = pxIterator;
   \       0x1E   0x4610             MOV      R0,R2
    396          	}
    397          	else
    398          	{
    399          		mtCOVERAGE_TEST_MARKER();
    400          	}
    401          
    402          	/* Do the block being inserted, and the block it is being inserted before
    403          	make a contiguous block of memory? */
    404          	puc = ( uint8_t * ) pxBlockToInsert;
    405          	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
   \                     ??prvInsertBlockIntoFreeList_2: (+1)
   \       0x20   0x6841             LDR      R1,[R0, #+4]
   \       0x22   0x4401             ADD      R1,R0,R1
   \       0x24   0x6813             LDR      R3,[R2, #+0]
   \       0x26   0x4299             CMP      R1,R3
   \       0x28   0xD10F             BNE.N    ??prvInsertBlockIntoFreeList_3
    406          	{
    407          		if( pxIterator->pxNextFreeBlock != pxEnd )
   \       0x2A   0x....             LDR.N    R1,??DataTable5
   \       0x2C   0x680C             LDR      R4,[R1, #+0]
   \       0x2E   0x42A3             CMP      R3,R4
   \       0x30   0xD008             BEQ.N    ??prvInsertBlockIntoFreeList_4
    408          		{
    409          			/* Form one big block from the two blocks. */
    410          			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   \       0x32   0x6843             LDR      R3,[R0, #+4]
   \       0x34   0x6811             LDR      R1,[R2, #+0]
   \       0x36   0x6849             LDR      R1,[R1, #+4]
   \       0x38   0x18CB             ADDS     R3,R1,R3
   \       0x3A   0x6043             STR      R3,[R0, #+4]
    411          			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   \       0x3C   0x6811             LDR      R1,[R2, #+0]
   \       0x3E   0x6809             LDR      R1,[R1, #+0]
   \       0x40   0x6001             STR      R1,[R0, #+0]
   \       0x42   0xE004             B.N      ??prvInsertBlockIntoFreeList_5
    412          		}
    413          		else
    414          		{
    415          			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   \                     ??prvInsertBlockIntoFreeList_4: (+1)
   \       0x44   0x4621             MOV      R1,R4
   \       0x46   0x6001             STR      R1,[R0, #+0]
   \       0x48   0xE001             B.N      ??prvInsertBlockIntoFreeList_5
    416          		}
    417          	}
    418          	else
    419          	{
    420          		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
   \                     ??prvInsertBlockIntoFreeList_3: (+1)
   \       0x4A   0x4619             MOV      R1,R3
   \       0x4C   0x6001             STR      R1,[R0, #+0]
    421          	}
    422          
    423          	/* If the block being inserted plugged a gab, so was merged with the block
    424          	before and the block after, then it's pxNextFreeBlock pointer will have
    425          	already been set, and should not be set here as that would make it point
    426          	to itself. */
    427          	if( pxIterator != pxBlockToInsert )
   \                     ??prvInsertBlockIntoFreeList_5: (+1)
   \       0x4E   0x4282             CMP      R2,R0
   \       0x50   0xD000             BEQ.N    ??prvInsertBlockIntoFreeList_6
    428          	{
    429          		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   \       0x52   0x6010             STR      R0,[R2, #+0]
    430          	}
    431          	else
    432          	{
    433          		mtCOVERAGE_TEST_MARKER();
    434          	}
    435          }
   \                     ??prvInsertBlockIntoFreeList_6: (+1)
   \       0x54   0xBC10             POP      {R4}
   \       0x56   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \        0x0   0x....'....        DC32     pxEnd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \        0x0   0x....'....        DC32     xBlockAllocatedBit

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \        0x0   0x....'....        DC32     xFreeBytesRemaining

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \        0x0   0x....'....        DC32     xStart

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \        0x0   0x....'....        DC32     xMinimumEverFreeBytesRemaining

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \        0x0   0x....'....        DC32     ucHeap
    436          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       4   prvHeapInit
       4   prvInsertBlockIntoFreeList
      32   pvPortMalloc
        32   -> prvHeapInit
        32   -> prvInsertBlockIntoFreeList
        32   -> vTaskSuspendAll
        32   -> xTaskResumeAll
       8   vPortFree
         8   -> prvInsertBlockIntoFreeList
         8   -> vTaskSuspendAll
         0   -> xTaskResumeAll
       0   vPortInitialiseBlocks
       0   xPortGetFreeHeapSize
       0   xPortGetMinimumEverFreeHeapSize


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
      88  prvHeapInit
      88  prvInsertBlockIntoFreeList
     264  pvPortMalloc
       4  pxEnd
   81920  ucHeap
     100  vPortFree
       2  vPortInitialiseBlocks
       4  xBlockAllocatedBit
       4  xFreeBytesRemaining
       4  xMinimumEverFreeBytesRemaining
       6  xPortGetFreeHeapSize
       6  xPortGetMinimumEverFreeHeapSize
       8  xStart

 
 81 944 bytes in section .bss
    578 bytes in section .text
 
    578 bytes of CODE memory
 81 944 bytes of DATA memory

Errors: none
Warnings: none
