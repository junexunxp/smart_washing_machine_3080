###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.3.193/W32 for ARM         10/Jun/2019  13:48:59
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\Development\smart_washing_machine_3080\mbedtls\library\x509_csr.c
#    Command line =  
#        -f C:\Users\nxf42695\AppData\Local\Temp\1\EW76A6.tmp
#        (C:\Development\smart_washing_machine_3080\mbedtls\library\x509_csr.c
#        -D DEBUG -D USE_RTOS -D XIP_EXTERNAL_FLASH=1 -D
#        XIP_BOOT_HEADER_ENABLE=1 -D CPU_MIMXRT1052DVL6B -D FSL_RTOS_FREE_RTOS
#        -D PRINTF_ADVANCED_ENABLE -D
#        "MBEDTLS_CONFIG_FILE=\"ksdk_mbedtls_config.h\"" -lC
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list -lA
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list
#        --diag_suppress Pa082,Pa050 -o
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_d16 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" --preinclude
#        C:\Development\smart_washing_machine_3080/source\app_preinclude.h -I
#        C:\Development\smart_washing_machine_3080/board\ -I
#        C:\Development\smart_washing_machine_3080/source\ -I
#        C:\Development\smart_washing_machine_3080/CMSIS\ -I
#        C:\Development\smart_washing_machine_3080/amazon-freertos/freertos/portable\
#        -I C:\Development\smart_washing_machine_3080/amazon-freertos/include\
#        -I C:\Development\smart_washing_machine_3080/component/lists\ -I
#        C:\Development\smart_washing_machine_3080/component/serial_manager\ -I
#        C:\Development\smart_washing_machine_3080/component/uart\ -I
#        C:\Development\smart_washing_machine_3080/component/kv\ -I
#        C:\Development\smart_washing_machine_3080/component/kv/include\ -I
#        C:\Development\smart_washing_machine_3080/device\ -I
#        C:\Development\smart_washing_machine_3080/doc\ -I
#        C:\Development\smart_washing_machine_3080/drivers\ -I
#        C:\Development\smart_washing_machine_3080/src\ -I
#        C:\Development\smart_washing_machine_3080/startup\ -I
#        C:\Development\smart_washing_machine_3080/utilities\ -I
#        C:\Development\smart_washing_machine_3080/xip\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\atm\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_model\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_sign\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\infra\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\mqtt\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\external_libs\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\coap_cloud\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\CoAPPacket\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\server\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\os\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\awss_reset\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\mbedtls\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\ -I
#        C:\Development\smart_washing_machine_3080\mbedtls\port\ksdk\ -Om)
#    Locale       =  C
#    List file    =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list\x509_csr.lst
#    Object file  =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj\x509_csr.o
#
###############################################################################

C:\Development\smart_washing_machine_3080\mbedtls\library\x509_csr.c
      1          /*
      2           *  X.509 Certificate Signing Request (CSR) parsing
      3           *
      4           *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
      5           *  SPDX-License-Identifier: Apache-2.0
      6           *
      7           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
      8           *  not use this file except in compliance with the License.
      9           *  You may obtain a copy of the License at
     10           *
     11           *  http://www.apache.org/licenses/LICENSE-2.0
     12           *
     13           *  Unless required by applicable law or agreed to in writing, software
     14           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     15           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     16           *  See the License for the specific language governing permissions and
     17           *  limitations under the License.
     18           *
     19           *  This file is part of mbed TLS (https://tls.mbed.org)
     20           */
     21          /*
     22           *  The ITU-T X.509 standard defines a certificate format for PKI.
     23           *
     24           *  http://www.ietf.org/rfc/rfc5280.txt (Certificates and CRLs)
     25           *  http://www.ietf.org/rfc/rfc3279.txt (Alg IDs for CRLs)
     26           *  http://www.ietf.org/rfc/rfc2986.txt (CSRs, aka PKCS#10)
     27           *
     28           *  http://www.itu.int/ITU-T/studygroups/com17/languages/X.680-0207.pdf
     29           *  http://www.itu.int/ITU-T/studygroups/com17/languages/X.690-0207.pdf
     30           */
     31          
     32          #if !defined(MBEDTLS_CONFIG_FILE)
     33          #include "mbedtls/config.h"
     34          #else
     35          #include MBEDTLS_CONFIG_FILE
     36          #endif
     37          
     38          #if defined(MBEDTLS_X509_CSR_PARSE_C)
     39          
     40          #include "mbedtls/x509_csr.h"
     41          #include "mbedtls/oid.h"
     42          #include "mbedtls/platform_util.h"
     43          
     44          #include <string.h>
     45          
     46          #if defined(MBEDTLS_PEM_PARSE_C)
     47          #include "mbedtls/pem.h"
     48          #endif
     49          
     50          #if defined(MBEDTLS_PLATFORM_C)
     51          #include "mbedtls/platform.h"
     52          #else
     53          #include <stdlib.h>
     54          #include <stdio.h>
     55          #define mbedtls_free       free
     56          #define mbedtls_calloc    calloc
     57          #define mbedtls_snprintf   snprintf
     58          #endif
     59          
     60          #if defined(MBEDTLS_FS_IO) || defined(EFIX64) || defined(EFI32)
     61          #include <stdio.h>
     62          #endif
     63          
     64          /*
     65           *  Version  ::=  INTEGER  {  v1(0)  }
     66           */

   \                                 In section .text, align 2, keep-with-next
     67          static int x509_csr_get_version( unsigned char **p,
     68                                       const unsigned char *end,
     69                                       int *ver )
     70          {
   \                     x509_csr_get_version: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x4614             MOV      R4,R2
     71              int ret;
     72          
     73              if( ( ret = mbedtls_asn1_get_int( p, end, ver ) ) != 0 )
   \        0x4   0x....'....        BL       mbedtls_asn1_get_int
   \        0x8   0x2800             CMP      R0,#+0
   \        0xA   0xD008             BEQ.N    ??x509_csr_get_version_0
     74              {
     75                  if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   \        0xC   0xF110 0x0F62      CMN      R0,#+98
   \       0x10   0xD102             BNE.N    ??x509_csr_get_version_1
     76                  {
     77                      *ver = 0;
   \       0x12   0x2000             MOVS     R0,#+0
   \       0x14   0x6020             STR      R0,[R4, #+0]
     78                      return( 0 );
   \       0x16   0xBD10             POP      {R4,PC}
     79                  }
     80          
     81                  return( MBEDTLS_ERR_X509_INVALID_VERSION + ret );
   \                     ??x509_csr_get_version_1: (+1)
   \       0x18   0xF5A0 0x5008      SUB      R0,R0,#+8704
   \       0x1C   0xBD10             POP      {R4,PC}
     82              }
     83          
     84              return( 0 );
   \                     ??x509_csr_get_version_0: (+1)
   \       0x1E   0x2000             MOVS     R0,#+0
   \       0x20   0xBD10             POP      {R4,PC}          ;; return
     85          }
     86          
     87          /*
     88           * Parse a CSR in DER format
     89           */

   \                                 In section .text, align 2, keep-with-next
     90          int mbedtls_x509_csr_parse_der( mbedtls_x509_csr *csr,
     91                                  const unsigned char *buf, size_t buflen )
     92          {
   \                     mbedtls_x509_csr_parse_der: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0xB086             SUB      SP,SP,#+24
   \        0x4   0x4605             MOV      R5,R0
   \        0x6   0x460E             MOV      R6,R1
   \        0x8   0x4614             MOV      R4,R2
     93              int ret;
     94              size_t len;
     95              unsigned char *p, *end;
     96              mbedtls_x509_buf sig_params;
     97          
     98              memset( &sig_params, 0, sizeof( mbedtls_x509_buf ) );
   \        0xA   0x2200             MOVS     R2,#+0
   \        0xC   0x210C             MOVS     R1,#+12
   \        0xE   0xA803             ADD      R0,SP,#+12
   \       0x10   0x....'....        BL       __aeabi_memset4
     99          
    100              /*
    101               * Check for valid input
    102               */
    103              if( csr == NULL || buf == NULL || buflen == 0 )
   \       0x14   0x2D00             CMP      R5,#+0
   \       0x16   0xD003             BEQ.N    ??mbedtls_x509_csr_parse_der_0
   \       0x18   0x2E00             CMP      R6,#+0
   \       0x1A   0xD001             BEQ.N    ??mbedtls_x509_csr_parse_der_0
   \       0x1C   0x2C00             CMP      R4,#+0
   \       0x1E   0xD101             BNE.N    ??mbedtls_x509_csr_parse_der_1
    104                  return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   \                     ??mbedtls_x509_csr_parse_der_0: (+1)
   \       0x20   0x....             LDR.N    R0,??DataTable3  ;; 0xffffd800
   \       0x22   0xE0B4             B.N      ??mbedtls_x509_csr_parse_der_2
    105          
    106              mbedtls_x509_csr_init( csr );
   \                     ??mbedtls_x509_csr_parse_der_1: (+1)
   \       0x24   0x4628             MOV      R0,R5
   \       0x26   0x....'....        BL       mbedtls_x509_csr_init
    107          
    108              /*
    109               * first copy the raw DER data
    110               */
    111              p = mbedtls_calloc( 1, len = buflen );
   \       0x2A   0x9402             STR      R4,[SP, #+8]
   \       0x2C   0x4621             MOV      R1,R4
   \       0x2E   0x2001             MOVS     R0,#+1
   \       0x30   0x....'....        BL       mbedtls_calloc
   \       0x34   0x9001             STR      R0,[SP, #+4]
    112          
    113              if( p == NULL )
   \       0x36   0x2800             CMP      R0,#+0
   \       0x38   0xD101             BNE.N    ??mbedtls_x509_csr_parse_der_3
    114                  return( MBEDTLS_ERR_X509_ALLOC_FAILED );
   \       0x3A   0x....             LDR.N    R0,??DataTable3_1  ;; 0xffffd780
   \       0x3C   0xE0A7             B.N      ??mbedtls_x509_csr_parse_der_2
    115          
    116              memcpy( p, buf, buflen );
   \                     ??mbedtls_x509_csr_parse_der_3: (+1)
   \       0x3E   0x4622             MOV      R2,R4
   \       0x40   0x4631             MOV      R1,R6
   \       0x42   0x....'....        BL       __aeabi_memcpy
    117          
    118              csr->raw.p = p;
   \       0x46   0x9801             LDR      R0,[SP, #+4]
   \       0x48   0x60A8             STR      R0,[R5, #+8]
    119              csr->raw.len = len;
   \       0x4A   0x9802             LDR      R0,[SP, #+8]
   \       0x4C   0x6068             STR      R0,[R5, #+4]
    120              end = p + len;
   \       0x4E   0x9801             LDR      R0,[SP, #+4]
   \       0x50   0x9902             LDR      R1,[SP, #+8]
   \       0x52   0x1844             ADDS     R4,R0,R1
    121          
    122              /*
    123               *  CertificationRequest ::= SEQUENCE {
    124               *       certificationRequestInfo CertificationRequestInfo,
    125               *       signatureAlgorithm AlgorithmIdentifier,
    126               *       signature          BIT STRING
    127               *  }
    128               */
    129              if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
    130                      MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
   \       0x54   0x2330             MOVS     R3,#+48
   \       0x56   0xAA02             ADD      R2,SP,#+8
   \       0x58   0x4621             MOV      R1,R4
   \       0x5A   0xA801             ADD      R0,SP,#+4
   \       0x5C   0x....'....        BL       mbedtls_asn1_get_tag
   \       0x60   0x2800             CMP      R0,#+0
   \       0x62   0xD004             BEQ.N    ??mbedtls_x509_csr_parse_der_4
    131              {
    132                  mbedtls_x509_csr_free( csr );
   \       0x64   0x4628             MOV      R0,R5
   \       0x66   0x....'....        BL       mbedtls_x509_csr_free
    133                  return( MBEDTLS_ERR_X509_INVALID_FORMAT );
   \       0x6A   0x....             LDR.N    R0,??DataTable3_2  ;; 0xffffde80
   \       0x6C   0xE08F             B.N      ??mbedtls_x509_csr_parse_der_2
    134              }
    135          
    136              if( len != (size_t) ( end - p ) )
   \                     ??mbedtls_x509_csr_parse_der_4: (+1)
   \       0x6E   0x9802             LDR      R0,[SP, #+8]
   \       0x70   0x9901             LDR      R1,[SP, #+4]
   \       0x72   0x1A61             SUBS     R1,R4,R1
   \       0x74   0x4288             CMP      R0,R1
   \       0x76   0xF040 0x8084      BNE.W    ??mbedtls_x509_csr_parse_der_5
    137              {
    138                  mbedtls_x509_csr_free( csr );
    139                  return( MBEDTLS_ERR_X509_INVALID_FORMAT +
    140                          MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    141              }
    142          
    143              /*
    144               *  CertificationRequestInfo ::= SEQUENCE {
    145               */
    146              csr->cri.p = p;
   \       0x7A   0x9801             LDR      R0,[SP, #+4]
   \       0x7C   0x6168             STR      R0,[R5, #+20]
    147          
    148              if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
    149                      MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
   \       0x7E   0x2330             MOVS     R3,#+48
   \       0x80   0xAA02             ADD      R2,SP,#+8
   \       0x82   0x4621             MOV      R1,R4
   \       0x84   0xA801             ADD      R0,SP,#+4
   \       0x86   0x....'....        BL       mbedtls_asn1_get_tag
   \       0x8A   0x0004             MOVS     R4,R0
   \       0x8C   0xD13F             BNE.N    ??mbedtls_x509_csr_parse_der_6
    150              {
    151                  mbedtls_x509_csr_free( csr );
    152                  return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    153              }
    154          
    155              end = p + len;
   \       0x8E   0x9801             LDR      R0,[SP, #+4]
   \       0x90   0x9902             LDR      R1,[SP, #+8]
   \       0x92   0x1846             ADDS     R6,R0,R1
    156              csr->cri.len = end - csr->cri.p;
   \       0x94   0x6968             LDR      R0,[R5, #+20]
   \       0x96   0x1A30             SUBS     R0,R6,R0
   \       0x98   0x6128             STR      R0,[R5, #+16]
    157          
    158              /*
    159               *  Version  ::=  INTEGER {  v1(0) }
    160               */
    161              if( ( ret = x509_csr_get_version( &p, end, &csr->version ) ) != 0 )
   \       0x9A   0xF105 0x0218      ADD      R2,R5,#+24
   \       0x9E   0x4631             MOV      R1,R6
   \       0xA0   0xA801             ADD      R0,SP,#+4
   \       0xA2   0x....'....        BL       x509_csr_get_version
   \       0xA6   0x0004             MOVS     R4,R0
   \       0xA8   0xD163             BNE.N    ??mbedtls_x509_csr_parse_der_7
    162              {
    163                  mbedtls_x509_csr_free( csr );
    164                  return( ret );
    165              }
    166          
    167              if( csr->version != 0 )
   \       0xAA   0x69A8             LDR      R0,[R5, #+24]
   \       0xAC   0x2800             CMP      R0,#+0
   \       0xAE   0xD004             BEQ.N    ??mbedtls_x509_csr_parse_der_8
    168              {
    169                  mbedtls_x509_csr_free( csr );
   \       0xB0   0x4628             MOV      R0,R5
   \       0xB2   0x....'....        BL       mbedtls_x509_csr_free
    170                  return( MBEDTLS_ERR_X509_UNKNOWN_VERSION );
   \       0xB6   0x....             LDR.N    R0,??DataTable3_3  ;; 0xffffda80
   \       0xB8   0xE069             B.N      ??mbedtls_x509_csr_parse_der_2
    171              }
    172          
    173              csr->version++;
   \                     ??mbedtls_x509_csr_parse_der_8: (+1)
   \       0xBA   0x1C40             ADDS     R0,R0,#+1
   \       0xBC   0x61A8             STR      R0,[R5, #+24]
    174          
    175              /*
    176               *  subject               Name
    177               */
    178              csr->subject_raw.p = p;
   \       0xBE   0x9801             LDR      R0,[SP, #+4]
   \       0xC0   0x6268             STR      R0,[R5, #+36]
    179          
    180              if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
    181                      MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
   \       0xC2   0x2330             MOVS     R3,#+48
   \       0xC4   0xAA02             ADD      R2,SP,#+8
   \       0xC6   0x4631             MOV      R1,R6
   \       0xC8   0xA801             ADD      R0,SP,#+4
   \       0xCA   0x....'....        BL       mbedtls_asn1_get_tag
   \       0xCE   0x0004             MOVS     R4,R0
   \       0xD0   0xD11D             BNE.N    ??mbedtls_x509_csr_parse_der_6
    182              {
    183                  mbedtls_x509_csr_free( csr );
    184                  return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    185              }
    186          
    187              if( ( ret = mbedtls_x509_get_name( &p, p + len, &csr->subject ) ) != 0 )
   \       0xD2   0xF105 0x0228      ADD      R2,R5,#+40
   \       0xD6   0x9801             LDR      R0,[SP, #+4]
   \       0xD8   0x9902             LDR      R1,[SP, #+8]
   \       0xDA   0x4401             ADD      R1,R0,R1
   \       0xDC   0xA801             ADD      R0,SP,#+4
   \       0xDE   0x....'....        BL       mbedtls_x509_get_name
   \       0xE2   0x0004             MOVS     R4,R0
   \       0xE4   0xD145             BNE.N    ??mbedtls_x509_csr_parse_der_7
    188              {
    189                  mbedtls_x509_csr_free( csr );
    190                  return( ret );
    191              }
    192          
    193              csr->subject_raw.len = p - csr->subject_raw.p;
   \       0xE6   0x9901             LDR      R1,[SP, #+4]
   \       0xE8   0x6A68             LDR      R0,[R5, #+36]
   \       0xEA   0x1A09             SUBS     R1,R1,R0
   \       0xEC   0x6229             STR      R1,[R5, #+32]
    194          
    195              /*
    196               *  subjectPKInfo SubjectPublicKeyInfo
    197               */
    198              if( ( ret = mbedtls_pk_parse_subpubkey( &p, end, &csr->pk ) ) != 0 )
   \       0xEE   0xF105 0x0248      ADD      R2,R5,#+72
   \       0xF2   0x4631             MOV      R1,R6
   \       0xF4   0xA801             ADD      R0,SP,#+4
   \       0xF6   0x....'....        BL       mbedtls_pk_parse_subpubkey
   \       0xFA   0x0004             MOVS     R4,R0
   \       0xFC   0xD139             BNE.N    ??mbedtls_x509_csr_parse_der_7
    199              {
    200                  mbedtls_x509_csr_free( csr );
    201                  return( ret );
    202              }
    203          
    204              /*
    205               *  attributes    [0] Attributes
    206               *
    207               *  The list of possible attributes is open-ended, though RFC 2985
    208               *  (PKCS#9) defines a few in section 5.4. We currently don't support any,
    209               *  so we just ignore them. This is a safe thing to do as the worst thing
    210               *  that could happen is that we issue a certificate that does not match
    211               *  the requester's expectations - this cannot cause a violation of our
    212               *  signature policies.
    213               */
    214              if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
    215                      MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_CONTEXT_SPECIFIC ) ) != 0 )
   \       0xFE   0x23A0             MOVS     R3,#+160
   \      0x100   0xAA02             ADD      R2,SP,#+8
   \      0x102   0x4631             MOV      R1,R6
   \      0x104   0xA801             ADD      R0,SP,#+4
   \      0x106   0x....'....        BL       mbedtls_asn1_get_tag
   \      0x10A   0x0004             MOVS     R4,R0
   \      0x10C   0xD006             BEQ.N    ??mbedtls_x509_csr_parse_der_9
    216              {
    217                  mbedtls_x509_csr_free( csr );
   \                     ??mbedtls_x509_csr_parse_der_6: (+1)
   \      0x10E   0x4628             MOV      R0,R5
   \      0x110   0x....'....        BL       mbedtls_x509_csr_free
    218                  return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
   \      0x114   0xF5A4 0x5406      SUB      R4,R4,#+8576
   \      0x118   0x4620             MOV      R0,R4
   \      0x11A   0xE038             B.N      ??mbedtls_x509_csr_parse_der_2
    219              }
    220          
    221              p += len;
   \                     ??mbedtls_x509_csr_parse_der_9: (+1)
   \      0x11C   0x9801             LDR      R0,[SP, #+4]
   \      0x11E   0x9902             LDR      R1,[SP, #+8]
   \      0x120   0x4408             ADD      R0,R0,R1
   \      0x122   0x9001             STR      R0,[SP, #+4]
    222          
    223              end = csr->raw.p + csr->raw.len;
   \      0x124   0x68A8             LDR      R0,[R5, #+8]
   \      0x126   0x6869             LDR      R1,[R5, #+4]
   \      0x128   0x1846             ADDS     R6,R0,R1
    224          
    225              /*
    226               *  signatureAlgorithm   AlgorithmIdentifier,
    227               *  signature            BIT STRING
    228               */
    229              if( ( ret = mbedtls_x509_get_alg( &p, end, &csr->sig_oid, &sig_params ) ) != 0 )
   \      0x12A   0xAB03             ADD      R3,SP,#+12
   \      0x12C   0xF105 0x0250      ADD      R2,R5,#+80
   \      0x130   0x4631             MOV      R1,R6
   \      0x132   0xA801             ADD      R0,SP,#+4
   \      0x134   0x....'....        BL       mbedtls_x509_get_alg
   \      0x138   0x0004             MOVS     R4,R0
   \      0x13A   0xD11A             BNE.N    ??mbedtls_x509_csr_parse_der_7
    230              {
    231                  mbedtls_x509_csr_free( csr );
    232                  return( ret );
    233              }
    234          
    235              if( ( ret = mbedtls_x509_get_sig_alg( &csr->sig_oid, &sig_params,
    236                                            &csr->sig_md, &csr->sig_pk,
    237                                            &csr->sig_opts ) ) != 0 )
   \      0x13C   0xF105 0x006C      ADD      R0,R5,#+108
   \      0x140   0x9000             STR      R0,[SP, #+0]
   \      0x142   0xF105 0x0369      ADD      R3,R5,#+105
   \      0x146   0xF105 0x0268      ADD      R2,R5,#+104
   \      0x14A   0xA903             ADD      R1,SP,#+12
   \      0x14C   0xF105 0x0050      ADD      R0,R5,#+80
   \      0x150   0x....'....        BL       mbedtls_x509_get_sig_alg
   \      0x154   0x2800             CMP      R0,#+0
   \      0x156   0xD004             BEQ.N    ??mbedtls_x509_csr_parse_der_10
    238              {
    239                  mbedtls_x509_csr_free( csr );
   \      0x158   0x4628             MOV      R0,R5
   \      0x15A   0x....'....        BL       mbedtls_x509_csr_free
    240                  return( MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG );
   \      0x15E   0x....             LDR.N    R0,??DataTable3_4  ;; 0xffffda00
   \      0x160   0xE015             B.N      ??mbedtls_x509_csr_parse_der_2
    241              }
    242          
    243              if( ( ret = mbedtls_x509_get_sig( &p, end, &csr->sig ) ) != 0 )
   \                     ??mbedtls_x509_csr_parse_der_10: (+1)
   \      0x162   0xF105 0x025C      ADD      R2,R5,#+92
   \      0x166   0x4631             MOV      R1,R6
   \      0x168   0xA801             ADD      R0,SP,#+4
   \      0x16A   0x....'....        BL       mbedtls_x509_get_sig
   \      0x16E   0x0004             MOVS     R4,R0
   \      0x170   0xD004             BEQ.N    ??mbedtls_x509_csr_parse_der_11
    244              {
    245                  mbedtls_x509_csr_free( csr );
   \                     ??mbedtls_x509_csr_parse_der_7: (+1)
   \      0x172   0x4628             MOV      R0,R5
   \      0x174   0x....'....        BL       mbedtls_x509_csr_free
    246                  return( ret );
   \      0x178   0x4620             MOV      R0,R4
   \      0x17A   0xE008             B.N      ??mbedtls_x509_csr_parse_der_2
    247              }
    248          
    249              if( p != end )
   \                     ??mbedtls_x509_csr_parse_der_11: (+1)
   \      0x17C   0x9801             LDR      R0,[SP, #+4]
   \      0x17E   0x42B0             CMP      R0,R6
   \      0x180   0xD004             BEQ.N    ??mbedtls_x509_csr_parse_der_12
    250              {
    251                  mbedtls_x509_csr_free( csr );
   \                     ??mbedtls_x509_csr_parse_der_5: (+1)
   \      0x182   0x4628             MOV      R0,R5
   \      0x184   0x....'....        BL       mbedtls_x509_csr_free
    252                  return( MBEDTLS_ERR_X509_INVALID_FORMAT +
    253                          MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   \      0x188   0x....             LDR.N    R0,??DataTable3_5  ;; 0xffffde1a
   \      0x18A   0xE000             B.N      ??mbedtls_x509_csr_parse_der_2
    254              }
    255          
    256              return( 0 );
   \                     ??mbedtls_x509_csr_parse_der_12: (+1)
   \      0x18C   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_x509_csr_parse_der_2: (+1)
   \      0x18E   0xB006             ADD      SP,SP,#+24
   \      0x190   0xBD70             POP      {R4-R6,PC}       ;; return
    257          }
    258          
    259          /*
    260           * Parse a CSR, allowing for PEM or raw DER encoding
    261           */

   \                                 In section .text, align 2, keep-with-next
    262          int mbedtls_x509_csr_parse( mbedtls_x509_csr *csr, const unsigned char *buf, size_t buflen )
    263          {
   \                     mbedtls_x509_csr_parse: (+1)
   \        0x0   0xB5F0             PUSH     {R4-R7,LR}
   \        0x2   0xB087             SUB      SP,SP,#+28
   \        0x4   0x4604             MOV      R4,R0
   \        0x6   0x460D             MOV      R5,R1
   \        0x8   0x4616             MOV      R6,R2
    264          #if defined(MBEDTLS_PEM_PARSE_C)
    265              int ret;
    266              size_t use_len;
    267              mbedtls_pem_context pem;
    268          #endif
    269          
    270              /*
    271               * Check for valid input
    272               */
    273              if( csr == NULL || buf == NULL || buflen == 0 )
   \        0xA   0x2C00             CMP      R4,#+0
   \        0xC   0xD003             BEQ.N    ??mbedtls_x509_csr_parse_0
   \        0xE   0x2D00             CMP      R5,#+0
   \       0x10   0xD001             BEQ.N    ??mbedtls_x509_csr_parse_0
   \       0x12   0x2E00             CMP      R6,#+0
   \       0x14   0xD101             BNE.N    ??mbedtls_x509_csr_parse_1
    274                  return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   \                     ??mbedtls_x509_csr_parse_0: (+1)
   \       0x16   0x....             LDR.N    R0,??DataTable3  ;; 0xffffd800
   \       0x18   0xE027             B.N      ??mbedtls_x509_csr_parse_2
    275          
    276          #if defined(MBEDTLS_PEM_PARSE_C)
    277              /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    278              if( buf[buflen - 1] == '\0' )
   \                     ??mbedtls_x509_csr_parse_1: (+1)
   \       0x1A   0x19A8             ADDS     R0,R5,R6
   \       0x1C   0xF810 0x0C01      LDRB     R0,[R0, #-1]
   \       0x20   0x2800             CMP      R0,#+0
   \       0x22   0xD11D             BNE.N    ??mbedtls_x509_csr_parse_3
    279              {
    280                  mbedtls_pem_init( &pem );
   \       0x24   0xA803             ADD      R0,SP,#+12
   \       0x26   0x....'....        BL       mbedtls_pem_init
    281                  ret = mbedtls_pem_read_buffer( &pem,
    282                                         "-----BEGIN CERTIFICATE REQUEST-----",
    283                                         "-----END CERTIFICATE REQUEST-----",
    284                                         buf, NULL, 0, &use_len );
   \       0x2A   0xA806             ADD      R0,SP,#+24
   \       0x2C   0x9002             STR      R0,[SP, #+8]
   \       0x2E   0x2000             MOVS     R0,#+0
   \       0x30   0x9001             STR      R0,[SP, #+4]
   \       0x32   0x9000             STR      R0,[SP, #+0]
   \       0x34   0x462B             MOV      R3,R5
   \       0x36   0x....             LDR.N    R2,??DataTable3_6
   \       0x38   0x....             LDR.N    R1,??DataTable3_7
   \       0x3A   0xA803             ADD      R0,SP,#+12
   \       0x3C   0x....'....        BL       mbedtls_pem_read_buffer
   \       0x40   0x0007             MOVS     R7,R0
    285          
    286                  if( ret == 0 )
   \       0x42   0xD105             BNE.N    ??mbedtls_x509_csr_parse_4
    287                      /*
    288                       * Was PEM encoded, parse the result
    289                       */
    290                      ret = mbedtls_x509_csr_parse_der( csr, pem.buf, pem.buflen );
   \       0x44   0x9A04             LDR      R2,[SP, #+16]
   \       0x46   0x9903             LDR      R1,[SP, #+12]
   \       0x48   0x4620             MOV      R0,R4
   \       0x4A   0x....'....        BL       mbedtls_x509_csr_parse_der
   \       0x4E   0x4607             MOV      R7,R0
    291          
    292                  mbedtls_pem_free( &pem );
   \                     ??mbedtls_x509_csr_parse_4: (+1)
   \       0x50   0xA803             ADD      R0,SP,#+12
   \       0x52   0x....'....        BL       mbedtls_pem_free
    293                  if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
   \       0x56   0xF517 0x5F84      CMN      R7,#+4224
   \       0x5A   0xD001             BEQ.N    ??mbedtls_x509_csr_parse_3
    294                      return( ret );
   \       0x5C   0x4638             MOV      R0,R7
   \       0x5E   0xE004             B.N      ??mbedtls_x509_csr_parse_2
    295              }
    296          #endif /* MBEDTLS_PEM_PARSE_C */
    297              return( mbedtls_x509_csr_parse_der( csr, buf, buflen ) );
   \                     ??mbedtls_x509_csr_parse_3: (+1)
   \       0x60   0x4632             MOV      R2,R6
   \       0x62   0x4629             MOV      R1,R5
   \       0x64   0x4620             MOV      R0,R4
   \       0x66   0x....'....        BL       mbedtls_x509_csr_parse_der
   \                     ??mbedtls_x509_csr_parse_2: (+1)
   \       0x6A   0xB007             ADD      SP,SP,#+28
   \       0x6C   0xBDF0             POP      {R4-R7,PC}       ;; return
    298          }
    299          
    300          #if defined(MBEDTLS_FS_IO)
    301          /*
    302           * Load a CSR into the structure
    303           */
    304          int mbedtls_x509_csr_parse_file( mbedtls_x509_csr *csr, const char *path )
    305          {
    306              int ret;
    307              size_t n;
    308              unsigned char *buf;
    309          
    310              if( ( ret = mbedtls_pk_load_file( path, &buf, &n ) ) != 0 )
    311                  return( ret );
    312          
    313              ret = mbedtls_x509_csr_parse( csr, buf, n );
    314          
    315              mbedtls_platform_zeroize( buf, n );
    316              mbedtls_free( buf );
    317          
    318              return( ret );
    319          }
    320          #endif /* MBEDTLS_FS_IO */
    321          
    322          #define BEFORE_COLON    14
    323          #define BC              "14"
    324          /*
    325           * Return an informational string about the CSR.
    326           */

   \                                 In section .text, align 2, keep-with-next
    327          int mbedtls_x509_csr_info( char *buf, size_t size, const char *prefix,
    328                             const mbedtls_x509_csr *csr )
    329          {
   \                     mbedtls_x509_csr_info: (+1)
   \        0x0   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \        0x4   0xB086             SUB      SP,SP,#+24
   \        0x6   0x4680             MOV      R8,R0
   \        0x8   0x460D             MOV      R5,R1
   \        0xA   0x4616             MOV      R6,R2
   \        0xC   0x461F             MOV      R7,R3
    330              int ret;
    331              size_t n;
    332              char *p;
    333              char key_size_str[BEFORE_COLON];
    334          
    335              p = buf;
    336              n = size;
    337          
    338              ret = mbedtls_snprintf( p, n, "%sCSR version   : %d",
    339                                         prefix, csr->version );
   \        0xE   0x69B8             LDR      R0,[R7, #+24]
   \       0x10   0x9000             STR      R0,[SP, #+0]
   \       0x12   0x4633             MOV      R3,R6
   \       0x14   0x....             LDR.N    R2,??DataTable3_8
   \       0x16   0x4640             MOV      R0,R8
   \       0x18   0x....'....        BL       snprintf
    340              MBEDTLS_X509_SAFE_SNPRINTF;
   \       0x1C   0x2800             CMP      R0,#+0
   \       0x1E   0xD456             BMI.N    ??mbedtls_x509_csr_info_0
   \       0x20   0x42A8             CMP      R0,R5
   \       0x22   0xD254             BCS.N    ??mbedtls_x509_csr_info_0
   \       0x24   0x1A2C             SUBS     R4,R5,R0
   \       0x26   0x4480             ADD      R8,R8,R0
    341          
    342              ret = mbedtls_snprintf( p, n, "\n%ssubject name  : ", prefix );
   \       0x28   0x4633             MOV      R3,R6
   \       0x2A   0x....             LDR.N    R2,??DataTable3_9
   \       0x2C   0x4621             MOV      R1,R4
   \       0x2E   0x4640             MOV      R0,R8
   \       0x30   0x....'....        BL       snprintf
    343              MBEDTLS_X509_SAFE_SNPRINTF;
   \       0x34   0x2800             CMP      R0,#+0
   \       0x36   0xD44A             BMI.N    ??mbedtls_x509_csr_info_0
   \       0x38   0x42A0             CMP      R0,R4
   \       0x3A   0xD248             BCS.N    ??mbedtls_x509_csr_info_0
   \       0x3C   0x1A24             SUBS     R4,R4,R0
   \       0x3E   0x4480             ADD      R8,R8,R0
    344              ret = mbedtls_x509_dn_gets( p, n, &csr->subject );
   \       0x40   0xF107 0x0228      ADD      R2,R7,#+40
   \       0x44   0x4621             MOV      R1,R4
   \       0x46   0x4640             MOV      R0,R8
   \       0x48   0x....'....        BL       mbedtls_x509_dn_gets
    345              MBEDTLS_X509_SAFE_SNPRINTF;
   \       0x4C   0x2800             CMP      R0,#+0
   \       0x4E   0xD43E             BMI.N    ??mbedtls_x509_csr_info_0
   \       0x50   0x42A0             CMP      R0,R4
   \       0x52   0xD23C             BCS.N    ??mbedtls_x509_csr_info_0
   \       0x54   0x1A24             SUBS     R4,R4,R0
   \       0x56   0x4480             ADD      R8,R8,R0
    346          
    347              ret = mbedtls_snprintf( p, n, "\n%ssigned using  : ", prefix );
   \       0x58   0x4633             MOV      R3,R6
   \       0x5A   0x....             LDR.N    R2,??DataTable3_10
   \       0x5C   0x4621             MOV      R1,R4
   \       0x5E   0x4640             MOV      R0,R8
   \       0x60   0x....'....        BL       snprintf
    348              MBEDTLS_X509_SAFE_SNPRINTF;
   \       0x64   0x2800             CMP      R0,#+0
   \       0x66   0xD432             BMI.N    ??mbedtls_x509_csr_info_0
   \       0x68   0x42A0             CMP      R0,R4
   \       0x6A   0xD230             BCS.N    ??mbedtls_x509_csr_info_0
   \       0x6C   0x1A24             SUBS     R4,R4,R0
   \       0x6E   0x4480             ADD      R8,R8,R0
    349          
    350              ret = mbedtls_x509_sig_alg_gets( p, n, &csr->sig_oid, csr->sig_pk, csr->sig_md,
    351                                       csr->sig_opts );
   \       0x70   0x6EF8             LDR      R0,[R7, #+108]
   \       0x72   0x9001             STR      R0,[SP, #+4]
   \       0x74   0xF897 0x0068      LDRB     R0,[R7, #+104]
   \       0x78   0x9000             STR      R0,[SP, #+0]
   \       0x7A   0xF897 0x3069      LDRB     R3,[R7, #+105]
   \       0x7E   0xF107 0x0250      ADD      R2,R7,#+80
   \       0x82   0x4621             MOV      R1,R4
   \       0x84   0x4640             MOV      R0,R8
   \       0x86   0x....'....        BL       mbedtls_x509_sig_alg_gets
    352              MBEDTLS_X509_SAFE_SNPRINTF;
   \       0x8A   0x2800             CMP      R0,#+0
   \       0x8C   0xD41F             BMI.N    ??mbedtls_x509_csr_info_0
   \       0x8E   0x42A0             CMP      R0,R4
   \       0x90   0xD21D             BCS.N    ??mbedtls_x509_csr_info_0
   \       0x92   0x1A24             SUBS     R4,R4,R0
   \       0x94   0x4480             ADD      R8,R8,R0
    353          
    354              if( ( ret = mbedtls_x509_key_size_helper( key_size_str, BEFORE_COLON,
    355                                                mbedtls_pk_get_name( &csr->pk ) ) ) != 0 )
   \       0x96   0xF107 0x0048      ADD      R0,R7,#+72
   \       0x9A   0x....'....        BL       mbedtls_pk_get_name
   \       0x9E   0x4602             MOV      R2,R0
   \       0xA0   0x210E             MOVS     R1,#+14
   \       0xA2   0xA802             ADD      R0,SP,#+8
   \       0xA4   0x....'....        BL       mbedtls_x509_key_size_helper
   \       0xA8   0x2800             CMP      R0,#+0
   \       0xAA   0xD115             BNE.N    ??mbedtls_x509_csr_info_1
    356              {
    357                  return( ret );
    358              }
    359          
    360              ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits\n", prefix, key_size_str,
    361                                    (int) mbedtls_pk_get_bitlen( &csr->pk ) );
   \       0xAC   0xF107 0x0048      ADD      R0,R7,#+72
   \       0xB0   0x....'....        BL       mbedtls_pk_get_bitlen
   \       0xB4   0x9001             STR      R0,[SP, #+4]
   \       0xB6   0xA802             ADD      R0,SP,#+8
   \       0xB8   0x9000             STR      R0,[SP, #+0]
   \       0xBA   0x4633             MOV      R3,R6
   \       0xBC   0x....             LDR.N    R2,??DataTable3_11
   \       0xBE   0x4621             MOV      R1,R4
   \       0xC0   0x4640             MOV      R0,R8
   \       0xC2   0x....'....        BL       snprintf
    362              MBEDTLS_X509_SAFE_SNPRINTF;
   \       0xC6   0x2800             CMP      R0,#+0
   \       0xC8   0xD401             BMI.N    ??mbedtls_x509_csr_info_0
   \       0xCA   0x42A0             CMP      R0,R4
   \       0xCC   0xD301             BCC.N    ??mbedtls_x509_csr_info_2
   \                     ??mbedtls_x509_csr_info_0: (+1)
   \       0xCE   0x....             LDR.N    R0,??DataTable3_12  ;; 0xffffd680
   \       0xD0   0xE002             B.N      ??mbedtls_x509_csr_info_1
    363          
    364              return( (int) ( size - n ) );
   \                     ??mbedtls_x509_csr_info_2: (+1)
   \       0xD2   0x1B2D             SUBS     R5,R5,R4
   \       0xD4   0x1945             ADDS     R5,R0,R5
   \       0xD6   0x4628             MOV      R0,R5
   \                     ??mbedtls_x509_csr_info_1: (+1)
   \       0xD8   0xB006             ADD      SP,SP,#+24
   \       0xDA   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    365          }
    366          
    367          /*
    368           * Initialize a CSR
    369           */

   \                                 In section .text, align 2, keep-with-next
    370          void mbedtls_x509_csr_init( mbedtls_x509_csr *csr )
    371          {
    372              memset( csr, 0, sizeof(mbedtls_x509_csr) );
   \                     mbedtls_x509_csr_init: (+1)
   \        0x0   0x2200             MOVS     R2,#+0
   \        0x2   0x2170             MOVS     R1,#+112
   \        0x4   0x....'....        B.W      __aeabi_memset4
    373          }
    374          
    375          /*
    376           * Unallocate all CSR data
    377           */

   \                                 In section .text, align 2, keep-with-next
    378          void mbedtls_x509_csr_free( mbedtls_x509_csr *csr )
    379          {
   \                     mbedtls_x509_csr_free: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x0005             MOVS     R5,R0
    380              mbedtls_x509_name *name_cur;
    381              mbedtls_x509_name *name_prv;
    382          
    383              if( csr == NULL )
   \        0x4   0xD022             BEQ.N    ??mbedtls_x509_csr_free_0
    384                  return;
    385          
    386              mbedtls_pk_free( &csr->pk );
   \        0x6   0xF105 0x0048      ADD      R0,R5,#+72
   \        0xA   0x....'....        BL       mbedtls_pk_free
    387          
    388          #if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
    389              mbedtls_free( csr->sig_opts );
   \        0xE   0x6EE8             LDR      R0,[R5, #+108]
   \       0x10   0x....'....        BL       mbedtls_free
    390          #endif
    391          
    392              name_cur = csr->subject.next;
   \       0x14   0x6C2C             LDR      R4,[R5, #+64]
   \       0x16   0xE008             B.N      ??mbedtls_x509_csr_free_1
    393              while( name_cur != NULL )
    394              {
    395                  name_prv = name_cur;
   \                     ??mbedtls_x509_csr_free_2: (+1)
   \       0x18   0x4626             MOV      R6,R4
    396                  name_cur = name_cur->next;
   \       0x1A   0x69A4             LDR      R4,[R4, #+24]
    397                  mbedtls_platform_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
   \       0x1C   0x2120             MOVS     R1,#+32
   \       0x1E   0x4630             MOV      R0,R6
   \       0x20   0x....'....        BL       mbedtls_platform_zeroize
    398                  mbedtls_free( name_prv );
   \       0x24   0x4630             MOV      R0,R6
   \       0x26   0x....'....        BL       mbedtls_free
    399              }
   \                     ??mbedtls_x509_csr_free_1: (+1)
   \       0x2A   0x2C00             CMP      R4,#+0
   \       0x2C   0xD1F4             BNE.N    ??mbedtls_x509_csr_free_2
    400          
    401              if( csr->raw.p != NULL )
   \       0x2E   0x68A8             LDR      R0,[R5, #+8]
   \       0x30   0x2800             CMP      R0,#+0
   \       0x32   0xD005             BEQ.N    ??mbedtls_x509_csr_free_3
    402              {
    403                  mbedtls_platform_zeroize( csr->raw.p, csr->raw.len );
   \       0x34   0x6869             LDR      R1,[R5, #+4]
   \       0x36   0x....'....        BL       mbedtls_platform_zeroize
    404                  mbedtls_free( csr->raw.p );
   \       0x3A   0x68A8             LDR      R0,[R5, #+8]
   \       0x3C   0x....'....        BL       mbedtls_free
    405              }
    406          
    407              mbedtls_platform_zeroize( csr, sizeof( mbedtls_x509_csr ) );
   \                     ??mbedtls_x509_csr_free_3: (+1)
   \       0x40   0x2170             MOVS     R1,#+112
   \       0x42   0x4628             MOV      R0,R5
   \       0x44   0xE8BD 0x4070      POP      {R4-R6,LR}
   \       0x48   0x....'....        B.W      mbedtls_platform_zeroize
   \                     ??mbedtls_x509_csr_free_0: (+1)
   \       0x4C   0xBD70             POP      {R4-R6,PC}       ;; return
    408          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \        0x0   0xFFFF'D800        DC32     0xffffd800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \        0x0   0xFFFF'D780        DC32     0xffffd780

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \        0x0   0xFFFF'DE80        DC32     0xffffde80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \        0x0   0xFFFF'DA80        DC32     0xffffda80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \        0x0   0xFFFF'DA00        DC32     0xffffda00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \        0x0   0xFFFF'DE1A        DC32     0xffffde1a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \        0x0   0x....'....        DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \        0x0   0x....'....        DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_9:
   \        0x0   0x....'....        DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_10:
   \        0x0   0x....'....        DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_11:
   \        0x0   0x....'....        DC32     ?_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_12:
   \        0x0   0xFFFF'D680        DC32     0xffffd680

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x2D 0x2D          DC8 "-----BEGIN CERTIFICATE REQUEST-----"
   \              0x2D 0x2D    
   \              0x2D 0x42    
   \              0x45 0x47    
   \              0x49 0x4E    
   \              0x20 0x43    
   \              0x45 0x52    
   \              0x54 0x49    
   \              0x46 0x49    
   \              0x43 0x41    
   \              0x54 0x45    
   \              0x20 0x52    
   \              0x45 0x51    
   \              0x55 0x45    
   \              0x53 0x54    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x00    

   \                                 In section .rodata, align 4
   \                     ?_1:
   \        0x0   0x2D 0x2D          DC8 "-----END CERTIFICATE REQUEST-----"
   \              0x2D 0x2D    
   \              0x2D 0x45    
   \              0x4E 0x44    
   \              0x20 0x43    
   \              0x45 0x52    
   \              0x54 0x49    
   \              0x46 0x49    
   \              0x43 0x41    
   \              0x54 0x45    
   \              0x20 0x52    
   \              0x45 0x51    
   \              0x55 0x45    
   \              0x53 0x54    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x00    
   \       0x22   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_2:
   \        0x0   0x25 0x73          DC8 "%sCSR version   : %d"
   \              0x43 0x53    
   \              0x52 0x20    
   \              0x76 0x65    
   \              0x72 0x73    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x20 0x20    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x00         
   \       0x15   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_3:
   \        0x0   0x0A 0x25          DC8 "\012%ssubject name  : "
   \              0x73 0x73    
   \              0x75 0x62    
   \              0x6A 0x65    
   \              0x63 0x74    
   \              0x20 0x6E    
   \              0x61 0x6D    
   \              0x65 0x20    
   \              0x20 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_4:
   \        0x0   0x0A 0x25          DC8 "\012%ssigned using  : "
   \              0x73 0x73    
   \              0x69 0x67    
   \              0x6E 0x65    
   \              0x64 0x20    
   \              0x75 0x73    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x20 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_5:
   \        0x0   0x0A 0x25          DC8 "\012%s%-14s: %d bits\012"
   \              0x73 0x25    
   \              0x2D 0x31    
   \              0x34 0x73    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x20 0x62    
   \              0x69 0x74    
   \              0x73 0x0A    
   \              0x00         
   \       0x13   0x00               DC8 0
    409          
    410          #endif /* MBEDTLS_X509_CSR_PARSE_C */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   mbedtls_x509_csr_free
        16   -> mbedtls_free
        16   -> mbedtls_pk_free
         0   -> mbedtls_platform_zeroize
        16   -> mbedtls_platform_zeroize
      48   mbedtls_x509_csr_info
        48   -> mbedtls_pk_get_bitlen
        48   -> mbedtls_pk_get_name
        48   -> mbedtls_x509_dn_gets
        48   -> mbedtls_x509_key_size_helper
        48   -> mbedtls_x509_sig_alg_gets
        48   -> snprintf
       0   mbedtls_x509_csr_init
         0   -> __aeabi_memset4
      48   mbedtls_x509_csr_parse
        48   -> mbedtls_pem_free
        48   -> mbedtls_pem_init
        48   -> mbedtls_pem_read_buffer
        48   -> mbedtls_x509_csr_parse_der
      40   mbedtls_x509_csr_parse_der
        40   -> __aeabi_memcpy
        40   -> __aeabi_memset4
        40   -> mbedtls_asn1_get_tag
        40   -> mbedtls_calloc
        40   -> mbedtls_pk_parse_subpubkey
        40   -> mbedtls_x509_csr_free
        40   -> mbedtls_x509_csr_init
        40   -> mbedtls_x509_get_alg
        40   -> mbedtls_x509_get_name
        40   -> mbedtls_x509_get_sig
        40   -> mbedtls_x509_get_sig_alg
        40   -> x509_csr_get_version
       8   x509_csr_get_version
         8   -> mbedtls_asn1_get_int


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_10
       4  ??DataTable3_11
       4  ??DataTable3_12
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
      36  ?_0
      36  ?_1
      24  ?_2
      20  ?_3
      20  ?_4
      20  ?_5
      78  mbedtls_x509_csr_free
     222  mbedtls_x509_csr_info
       8  mbedtls_x509_csr_init
     110  mbedtls_x509_csr_parse
     402  mbedtls_x509_csr_parse_der
      34  x509_csr_get_version

 
 156 bytes in section .rodata
 906 bytes in section .text
 
 906 bytes of CODE  memory
 156 bytes of CONST memory

Errors: none
Warnings: none
