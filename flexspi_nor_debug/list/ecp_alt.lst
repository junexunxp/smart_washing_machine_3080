###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.3.193/W32 for ARM         10/Jun/2019  13:48:17
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\Development\smart_washing_machine_3080\mbedtls\port\ksdk\ecp_alt.c
#    Command line =  
#        -f C:\Users\nxf42695\AppData\Local\Temp\1\EWCDD1.tmp
#        (C:\Development\smart_washing_machine_3080\mbedtls\port\ksdk\ecp_alt.c
#        -D DEBUG -D USE_RTOS -D XIP_EXTERNAL_FLASH=1 -D
#        XIP_BOOT_HEADER_ENABLE=1 -D CPU_MIMXRT1052DVL6B -D FSL_RTOS_FREE_RTOS
#        -D PRINTF_ADVANCED_ENABLE -D
#        "MBEDTLS_CONFIG_FILE=\"ksdk_mbedtls_config.h\"" -lC
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list -lA
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list
#        --diag_suppress Pa082,Pa050 -o
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_d16 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" --preinclude
#        C:\Development\smart_washing_machine_3080/source\app_preinclude.h -I
#        C:\Development\smart_washing_machine_3080/board\ -I
#        C:\Development\smart_washing_machine_3080/source\ -I
#        C:\Development\smart_washing_machine_3080/CMSIS\ -I
#        C:\Development\smart_washing_machine_3080/amazon-freertos/freertos/portable\
#        -I C:\Development\smart_washing_machine_3080/amazon-freertos/include\
#        -I C:\Development\smart_washing_machine_3080/component/lists\ -I
#        C:\Development\smart_washing_machine_3080/component/serial_manager\ -I
#        C:\Development\smart_washing_machine_3080/component/uart\ -I
#        C:\Development\smart_washing_machine_3080/component/kv\ -I
#        C:\Development\smart_washing_machine_3080/component/kv/include\ -I
#        C:\Development\smart_washing_machine_3080/device\ -I
#        C:\Development\smart_washing_machine_3080/doc\ -I
#        C:\Development\smart_washing_machine_3080/drivers\ -I
#        C:\Development\smart_washing_machine_3080/src\ -I
#        C:\Development\smart_washing_machine_3080/startup\ -I
#        C:\Development\smart_washing_machine_3080/utilities\ -I
#        C:\Development\smart_washing_machine_3080/xip\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\atm\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_model\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_sign\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\infra\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\mqtt\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\external_libs\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\coap_cloud\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\CoAPPacket\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\server\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\os\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\awss_reset\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\mbedtls\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\ -I
#        C:\Development\smart_washing_machine_3080\mbedtls\port\ksdk\ -Om)
#    Locale       =  C
#    List file    =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list\ecp_alt.lst
#    Object file  =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj\ecp_alt.o
#
###############################################################################

C:\Development\smart_washing_machine_3080\mbedtls\port\ksdk\ecp_alt.c
      1          /*
      2           *  Elliptic curves over GF(p): generic functions
      3           *
      4           *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
      5           *  SPDX-License-Identifier: Apache-2.0
      6           *
      7           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
      8           *  not use this file except in compliance with the License.
      9           *  You may obtain a copy of the License at
     10           *
     11           *  http://www.apache.org/licenses/LICENSE-2.0
     12           *
     13           *  Unless required by applicable law or agreed to in writing, software
     14           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     15           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     16           *  See the License for the specific language governing permissions and
     17           *  limitations under the License.
     18           *
     19           *  This file is part of mbed TLS (https://tls.mbed.org)
     20           */
     21          
     22          /*
     23           * References:
     24           *
     25           * SEC1 http://www.secg.org/index.php?action=secg,docs_secg
     26           * GECC = Guide to Elliptic Curve Cryptography - Hankerson, Menezes, Vanstone
     27           * FIPS 186-3 http://csrc.nist.gov/publications/fips/fips186-3/fips_186-3.pdf
     28           * RFC 4492 for the related TLS structures and constants
     29           * RFC 7748 for the Curve448 and Curve25519 curve definitions
     30           *
     31           * [Curve25519] http://cr.yp.to/ecdh/curve25519-20060209.pdf
     32           *
     33           * [2] CORON, Jean-S'ebastien. Resistance against differential power analysis
     34           *     for elliptic curve cryptosystems. In : Cryptographic Hardware and
     35           *     Embedded Systems. Springer Berlin Heidelberg, 1999. p. 292-302.
     36           *     <http://link.springer.com/chapter/10.1007/3-540-48059-5_25>
     37           *
     38           * [3] HEDABOU, Mustapha, PINEL, Pierre, et B'EN'ETEAU, Lucien. A comb method to
     39           *     render ECC resistant against Side Channel Attacks. IACR Cryptology
     40           *     ePrint Archive, 2004, vol. 2004, p. 342.
     41           *     <http://eprint.iacr.org/2004/342.pdf>
     42           */
     43          
     44          #if !defined(MBEDTLS_CONFIG_FILE)
     45          #include "mbedtls/config.h"
     46          #else
     47          #include MBEDTLS_CONFIG_FILE
     48          #endif
     49          
     50          #if defined(MBEDTLS_ECP_C)
     51          
     52          #include "mbedtls/ecp.h"
     53          #include "mbedtls/threading.h"
     54          #include "mbedtls/platform_util.h"
     55          
     56          #include <string.h>
     57          
     58          #if defined(MBEDTLS_ECP_ALT)
     59          
     60          #if defined(TGT_A71CH)
     61          #include <ax_mbedtls.h>
     62          #endif
     63          
     64          #if defined(MBEDTLS_PLATFORM_C)
     65          #include "mbedtls/platform.h"
     66          #else
     67          #include <stdlib.h>
     68          #include <stdio.h>
     69          #define mbedtls_printf     printf
     70          #define mbedtls_calloc    calloc
     71          #define mbedtls_free       free
     72          #endif
     73          
     74          #include "mbedtls/ecp_internal.h"
     75          
     76          #if ( defined(__ARMCC_VERSION) || defined(_MSC_VER) ) && \
     77              !defined(inline) && !defined(__cplusplus)
     78          #define inline __inline
     79          #endif
     80          
     81          #if defined(MBEDTLS_SELF_TEST)
     82          /*
     83           * Counts of point addition and doubling, and field multiplications.
     84           * Used to test resistance of point multiplication to simple timing attacks.
     85           */

   \                                 In section .bss, align 4
     86          static unsigned long add_count, dbl_count, mul_count;
   \                     add_count:
   \        0x0                      DS8 4

   \                                 In section .bss, align 4
   \                     dbl_count:
   \        0x0                      DS8 4

   \                                 In section .bss, align 4
   \                     mul_count:
   \        0x0                      DS8 4
     87          #endif
     88          
     89          #if defined(MBEDTLS_ECP_DP_SECP192R1_ENABLED) ||   \
     90              defined(MBEDTLS_ECP_DP_SECP224R1_ENABLED) ||   \
     91              defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED) ||   \
     92              defined(MBEDTLS_ECP_DP_SECP384R1_ENABLED) ||   \
     93              defined(MBEDTLS_ECP_DP_SECP521R1_ENABLED) ||   \
     94              defined(MBEDTLS_ECP_DP_BP256R1_ENABLED)   ||   \
     95              defined(MBEDTLS_ECP_DP_BP384R1_ENABLED)   ||   \
     96              defined(MBEDTLS_ECP_DP_BP512R1_ENABLED)   ||   \
     97              defined(MBEDTLS_ECP_DP_SECP192K1_ENABLED) ||   \
     98              defined(MBEDTLS_ECP_DP_SECP224K1_ENABLED) ||   \
     99              defined(MBEDTLS_ECP_DP_SECP256K1_ENABLED)
    100          #define ECP_SHORTWEIERSTRASS
    101          #endif
    102          
    103          #if defined(MBEDTLS_ECP_DP_CURVE25519_ENABLED) || \
    104              defined(MBEDTLS_ECP_DP_CURVE448_ENABLED)
    105          #define ECP_MONTGOMERY
    106          #endif
    107          
    108          /*
    109           * Curve types: internal for now, might be exposed later
    110           */
    111          typedef enum
    112          {
    113              ECP_TYPE_NONE = 0,
    114              ECP_TYPE_SHORT_WEIERSTRASS,    /* y^2 = x^3 + a x + b      */
    115              ECP_TYPE_MONTGOMERY,           /* y^2 = x^3 + a x^2 + x    */
    116          } ecp_curve_type;
    117          
    118          /*
    119           * List of supported curves:
    120           *  - internal ID
    121           *  - TLS NamedCurve ID (RFC 4492 sec. 5.1.1, RFC 7071 sec. 2)
    122           *  - size in bits
    123           *  - readable name
    124           *
    125           * Curves are listed in order: largest curves first, and for a given size,
    126           * fastest curves first. This provides the default order for the SSL module.
    127           *
    128           * Reminder: update profiles in x509_crt.c when adding a new curves!
    129           */

   \                                 In section .rodata, align 4
    130          static const mbedtls_ecp_curve_info ecp_supported_curves[] =
   \                     ecp_supported_curves:
   \        0x0   0x03 0x00          DC8 3, 0
   \        0x2   0x0017 0x0100      DC16 23, 256
   \        0x6   0x00 0x00          DC8 0, 0
   \        0x8   0x....'....        DC32 ?_0
   \        0xC   0x00 0x00          DC8 0, 0
   \        0xE   0x0000 0x0000      DC16 0, 0
   \       0x12   0x00 0x00          DC8 0, 0
   \       0x14   0x0000'0000        DC32 0H
    131          {
    132          #if defined(MBEDTLS_ECP_DP_SECP521R1_ENABLED)
    133              { MBEDTLS_ECP_DP_SECP521R1,    25,     521,    "secp521r1"         },
    134          #endif
    135          #if defined(MBEDTLS_ECP_DP_BP512R1_ENABLED)
    136              { MBEDTLS_ECP_DP_BP512R1,      28,     512,    "brainpoolP512r1"   },
    137          #endif
    138          #if defined(MBEDTLS_ECP_DP_SECP384R1_ENABLED)
    139              { MBEDTLS_ECP_DP_SECP384R1,    24,     384,    "secp384r1"         },
    140          #endif
    141          #if defined(MBEDTLS_ECP_DP_BP384R1_ENABLED)
    142              { MBEDTLS_ECP_DP_BP384R1,      27,     384,    "brainpoolP384r1"   },
    143          #endif
    144          #if defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED)
    145              { MBEDTLS_ECP_DP_SECP256R1,    23,     256,    "secp256r1"         },
    146          #endif
    147          #if defined(MBEDTLS_ECP_DP_SECP256K1_ENABLED)
    148              { MBEDTLS_ECP_DP_SECP256K1,    22,     256,    "secp256k1"         },
    149          #endif
    150          #if defined(MBEDTLS_ECP_DP_BP256R1_ENABLED)
    151              { MBEDTLS_ECP_DP_BP256R1,      26,     256,    "brainpoolP256r1"   },
    152          #endif
    153          #if defined(MBEDTLS_ECP_DP_SECP224R1_ENABLED)
    154              { MBEDTLS_ECP_DP_SECP224R1,    21,     224,    "secp224r1"         },
    155          #endif
    156          #if defined(MBEDTLS_ECP_DP_SECP224K1_ENABLED)
    157              { MBEDTLS_ECP_DP_SECP224K1,    20,     224,    "secp224k1"         },
    158          #endif
    159          #if defined(MBEDTLS_ECP_DP_SECP192R1_ENABLED)
    160              { MBEDTLS_ECP_DP_SECP192R1,    19,     192,    "secp192r1"         },
    161          #endif
    162          #if defined(MBEDTLS_ECP_DP_SECP192K1_ENABLED)
    163              { MBEDTLS_ECP_DP_SECP192K1,    18,     192,    "secp192k1"         },
    164          #endif
    165              { MBEDTLS_ECP_DP_NONE,          0,     0,      NULL                },
    166          };
    167          
    168          #define ECP_NB_CURVES   sizeof( ecp_supported_curves ) /    \
    169                                  sizeof( ecp_supported_curves[0] )
    170          

   \                                 In section .bss, align 2
    171          static mbedtls_ecp_group_id ecp_supported_grp_id[ECP_NB_CURVES];
   \                     ecp_supported_grp_id:
   \        0x0                      DS8 2
    172          
    173          /*
    174           * List of supported curves and associated info
    175           */

   \                                 In section .text, align 2, keep-with-next
    176          const mbedtls_ecp_curve_info *mbedtls_ecp_curve_list( void )
    177          {
    178              return( ecp_supported_curves );
   \                     mbedtls_ecp_curve_list: (+1)
   \        0x0   0x....'....        LDR.W    R0,??DataTable11
   \        0x4   0x4770             BX       LR               ;; return
    179          }
    180          
    181          /*
    182           * List of supported curves, group ID only
    183           */

   \                                 In section .text, align 2, keep-with-next
    184          const mbedtls_ecp_group_id *mbedtls_ecp_grp_id_list( void )
    185          {
   \                     mbedtls_ecp_grp_id_list: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
    186              static int init_done = 0;
    187          
    188              if( ! init_done )
   \        0x2   0x....'....        LDR.W    R4,??DataTable11_1
   \        0x6   0x6820             LDR      R0,[R4, #+0]
   \        0x8   0x2800             CMP      R0,#+0
   \        0xA   0xD111             BNE.N    ??mbedtls_ecp_grp_id_list_0
    189              {
    190                  size_t i = 0;
   \        0xC   0x2500             MOVS     R5,#+0
    191                  const mbedtls_ecp_curve_info *curve_info;
    192          
    193                  for( curve_info = mbedtls_ecp_curve_list();
   \        0xE   0x....'....        BL       mbedtls_ecp_curve_list
   \       0x12   0x....'....        LDR.W    R2,??DataTable11_2
   \       0x16   0xE003             B.N      ??mbedtls_ecp_grp_id_list_1
    194                       curve_info->grp_id != MBEDTLS_ECP_DP_NONE;
    195                       curve_info++ )
    196                  {
    197                      ecp_supported_grp_id[i++] = curve_info->grp_id;
   \                     ??mbedtls_ecp_grp_id_list_2: (+1)
   \       0x18   0xF810 0x1B0C      LDRB     R1,[R0], #+12
   \       0x1C   0x5551             STRB     R1,[R2, R5]
   \       0x1E   0x1C6D             ADDS     R5,R5,#+1
    198                  }
   \                     ??mbedtls_ecp_grp_id_list_1: (+1)
   \       0x20   0x7801             LDRB     R1,[R0, #+0]
   \       0x22   0x2900             CMP      R1,#+0
   \       0x24   0xD1F8             BNE.N    ??mbedtls_ecp_grp_id_list_2
    199                  ecp_supported_grp_id[i] = MBEDTLS_ECP_DP_NONE;
   \       0x26   0x2000             MOVS     R0,#+0
   \       0x28   0x4611             MOV      R1,R2
   \       0x2A   0x5548             STRB     R0,[R1, R5]
    200          
    201                  init_done = 1;
   \       0x2C   0x2001             MOVS     R0,#+1
   \       0x2E   0x6020             STR      R0,[R4, #+0]
    202              }
    203          
    204              return( ecp_supported_grp_id );
   \                     ??mbedtls_ecp_grp_id_list_0: (+1)
   \       0x30   0x....'....        LDR.W    R0,??DataTable11_2
   \       0x34   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    205          }

   \                                 In section .bss, align 4
   \                     `mbedtls_ecp_grp_id_list::init_done`:
   \        0x0                      DS8 4
    206          
    207          /*
    208           * Get the curve info for the internal identifier
    209           */

   \                                 In section .text, align 2, keep-with-next
    210          const mbedtls_ecp_curve_info *mbedtls_ecp_curve_info_from_grp_id( mbedtls_ecp_group_id grp_id )
    211          {
   \                     mbedtls_ecp_curve_info_from_grp_id: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x4604             MOV      R4,R0
    212              const mbedtls_ecp_curve_info *curve_info;
    213          
    214              for( curve_info = mbedtls_ecp_curve_list();
   \        0x4   0x....'....        BL       mbedtls_ecp_curve_list
   \        0x8   0x4622             MOV      R2,R4
   \        0xA   0xE000             B.N      ??mbedtls_ecp_curve_info_from_grp_id_0
    215                   curve_info->grp_id != MBEDTLS_ECP_DP_NONE;
    216                   curve_info++ )
   \                     ??mbedtls_ecp_curve_info_from_grp_id_1: (+1)
   \        0xC   0x300C             ADDS     R0,R0,#+12
   \                     ??mbedtls_ecp_curve_info_from_grp_id_0: (+1)
   \        0xE   0x7801             LDRB     R1,[R0, #+0]
   \       0x10   0x2900             CMP      R1,#+0
   \       0x12   0xD002             BEQ.N    ??mbedtls_ecp_curve_info_from_grp_id_2
    217              {
    218                  if( curve_info->grp_id == grp_id )
   \       0x14   0x4291             CMP      R1,R2
   \       0x16   0xD1F9             BNE.N    ??mbedtls_ecp_curve_info_from_grp_id_1
    219                      return( curve_info );
   \       0x18   0xBD10             POP      {R4,PC}
    220              }
    221          
    222              return( NULL );
   \                     ??mbedtls_ecp_curve_info_from_grp_id_2: (+1)
   \       0x1A   0x2000             MOVS     R0,#+0
   \       0x1C   0xBD10             POP      {R4,PC}          ;; return
    223          }
    224          
    225          /*
    226           * Get the curve info from the TLS identifier
    227           */

   \                                 In section .text, align 2, keep-with-next
    228          const mbedtls_ecp_curve_info *mbedtls_ecp_curve_info_from_tls_id( uint16_t tls_id )
    229          {
   \                     mbedtls_ecp_curve_info_from_tls_id: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x4604             MOV      R4,R0
    230              const mbedtls_ecp_curve_info *curve_info;
    231          
    232              for( curve_info = mbedtls_ecp_curve_list();
   \        0x4   0x....'....        BL       mbedtls_ecp_curve_list
   \        0x8   0x4622             MOV      R2,R4
   \        0xA   0xE000             B.N      ??mbedtls_ecp_curve_info_from_tls_id_0
    233                   curve_info->grp_id != MBEDTLS_ECP_DP_NONE;
    234                   curve_info++ )
   \                     ??mbedtls_ecp_curve_info_from_tls_id_1: (+1)
   \        0xC   0x300C             ADDS     R0,R0,#+12
   \                     ??mbedtls_ecp_curve_info_from_tls_id_0: (+1)
   \        0xE   0x7801             LDRB     R1,[R0, #+0]
   \       0x10   0x2900             CMP      R1,#+0
   \       0x12   0xD003             BEQ.N    ??mbedtls_ecp_curve_info_from_tls_id_2
    235              {
    236                  if( curve_info->tls_id == tls_id )
   \       0x14   0x8841             LDRH     R1,[R0, #+2]
   \       0x16   0x4291             CMP      R1,R2
   \       0x18   0xD1F8             BNE.N    ??mbedtls_ecp_curve_info_from_tls_id_1
    237                      return( curve_info );
   \       0x1A   0xBD10             POP      {R4,PC}
    238              }
    239          
    240              return( NULL );
   \                     ??mbedtls_ecp_curve_info_from_tls_id_2: (+1)
   \       0x1C   0x2000             MOVS     R0,#+0
   \       0x1E   0xBD10             POP      {R4,PC}          ;; return
    241          }
    242          
    243          /*
    244           * Get the curve info from the name
    245           */

   \                                 In section .text, align 2, keep-with-next
    246          const mbedtls_ecp_curve_info *mbedtls_ecp_curve_info_from_name( const char *name )
    247          {
   \                     mbedtls_ecp_curve_info_from_name: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4604             MOV      R4,R0
    248              const mbedtls_ecp_curve_info *curve_info;
    249          
    250              for( curve_info = mbedtls_ecp_curve_list();
   \        0x4   0x....'....        BL       mbedtls_ecp_curve_list
   \        0x8   0x4605             MOV      R5,R0
   \        0xA   0xE000             B.N      ??mbedtls_ecp_curve_info_from_name_0
    251                   curve_info->grp_id != MBEDTLS_ECP_DP_NONE;
    252                   curve_info++ )
   \                     ??mbedtls_ecp_curve_info_from_name_1: (+1)
   \        0xC   0x350C             ADDS     R5,R5,#+12
   \                     ??mbedtls_ecp_curve_info_from_name_0: (+1)
   \        0xE   0x7828             LDRB     R0,[R5, #+0]
   \       0x10   0x2800             CMP      R0,#+0
   \       0x12   0xD007             BEQ.N    ??mbedtls_ecp_curve_info_from_name_2
    253              {
    254                  if( strcmp( curve_info->name, name ) == 0 )
   \       0x14   0x4621             MOV      R1,R4
   \       0x16   0x68A8             LDR      R0,[R5, #+8]
   \       0x18   0x....'....        BL       strcmp
   \       0x1C   0x2800             CMP      R0,#+0
   \       0x1E   0xD1F5             BNE.N    ??mbedtls_ecp_curve_info_from_name_1
    255                      return( curve_info );
   \       0x20   0x4628             MOV      R0,R5
   \       0x22   0xBD32             POP      {R1,R4,R5,PC}
    256              }
    257          
    258              return( NULL );
   \                     ??mbedtls_ecp_curve_info_from_name_2: (+1)
   \       0x24   0x2000             MOVS     R0,#+0
   \       0x26   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    259          }
    260          
    261          /*
    262           * Get the type of a curve
    263           */

   \                                 In section .text, align 2, keep-with-next
    264          static inline ecp_curve_type ecp_get_type( const mbedtls_ecp_group *grp )
    265          {
    266              if( grp->G.X.p == NULL )
   \                     ecp_get_type: (+1)
   \        0x0   0x6B01             LDR      R1,[R0, #+48]
   \        0x2   0x2900             CMP      R1,#+0
   \        0x4   0xD101             BNE.N    ??ecp_get_type_0
    267                  return( ECP_TYPE_NONE );
   \        0x6   0x2000             MOVS     R0,#+0
   \        0x8   0x4770             BX       LR
    268          
    269              if( grp->G.Y.p == NULL )
   \                     ??ecp_get_type_0: (+1)
   \        0xA   0x6BC0             LDR      R0,[R0, #+60]
   \        0xC   0x2800             CMP      R0,#+0
   \        0xE   0xD101             BNE.N    ??ecp_get_type_1
    270                  return( ECP_TYPE_MONTGOMERY );
   \       0x10   0x2002             MOVS     R0,#+2
   \       0x12   0x4770             BX       LR
    271              else
    272                  return( ECP_TYPE_SHORT_WEIERSTRASS );
   \                     ??ecp_get_type_1: (+1)
   \       0x14   0x2001             MOVS     R0,#+1
   \       0x16   0x4770             BX       LR               ;; return
    273          }
    274          
    275          /*
    276           * Initialize (the components of) a point
    277           */

   \                                 In section .text, align 2, keep-with-next
    278          void mbedtls_ecp_point_init( mbedtls_ecp_point *pt )
    279          {
   \                     mbedtls_ecp_point_init: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
    280              if( pt == NULL )
   \        0x4   0xD00B             BEQ.N    ??mbedtls_ecp_point_init_0
    281                  return;
    282          
    283              mbedtls_mpi_init( &pt->X );
   \        0x6   0x....'....        BL       mbedtls_mpi_init
    284              mbedtls_mpi_init( &pt->Y );
   \        0xA   0xF104 0x000C      ADD      R0,R4,#+12
   \        0xE   0x....'....        BL       mbedtls_mpi_init
    285              mbedtls_mpi_init( &pt->Z );
   \       0x12   0xF104 0x0018      ADD      R0,R4,#+24
   \       0x16   0xE8BD 0x4010      POP      {R4,LR}
   \       0x1A   0x....'....        B.W      mbedtls_mpi_init
   \                     ??mbedtls_ecp_point_init_0: (+1)
   \       0x1E   0xBD10             POP      {R4,PC}          ;; return
    286          }
    287          
    288          /*
    289           * Initialize (the components of) a group
    290           */

   \                                 In section .text, align 2, keep-with-next
    291          void mbedtls_ecp_group_init( mbedtls_ecp_group *grp )
    292          {
    293              if( grp == NULL )
   \                     mbedtls_ecp_group_init: (+1)
   \        0x0   0x2800             CMP      R0,#+0
   \        0x2   0xD003             BEQ.N    ??mbedtls_ecp_group_init_0
    294                  return;
    295          
    296              memset( grp, 0, sizeof( mbedtls_ecp_group ) );
   \        0x4   0x2200             MOVS     R2,#+0
   \        0x6   0x217C             MOVS     R1,#+124
   \        0x8   0x....'....        B.W      __aeabi_memset4
   \                     ??mbedtls_ecp_group_init_0: (+1)
   \        0xC   0x4770             BX       LR               ;; return
    297          }
    298          
    299          /*
    300           * Initialize (the components of) a key pair
    301           */

   \                                 In section .text, align 2, keep-with-next
    302          void mbedtls_ecp_keypair_init( mbedtls_ecp_keypair *key )
    303          {
   \                     mbedtls_ecp_keypair_init: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
    304              if( key == NULL )
   \        0x4   0xD00A             BEQ.N    ??mbedtls_ecp_keypair_init_0
    305                  return;
    306          
    307              mbedtls_ecp_group_init( &key->grp );
   \        0x6   0x....'....        BL       mbedtls_ecp_group_init
    308              mbedtls_mpi_init( &key->d );
   \        0xA   0xF104 0x007C      ADD      R0,R4,#+124
   \        0xE   0x....'....        BL       mbedtls_mpi_init
    309              mbedtls_ecp_point_init( &key->Q );
   \       0x12   0xF104 0x0088      ADD      R0,R4,#+136
   \       0x16   0xE8BD 0x4010      POP      {R4,LR}
   \       0x1A   0x....             B.N      mbedtls_ecp_point_init
   \                     ??mbedtls_ecp_keypair_init_0: (+1)
   \       0x1C   0xBD10             POP      {R4,PC}          ;; return
    310          }
    311          
    312          /*
    313           * Unallocate (the components of) a point
    314           */

   \                                 In section .text, align 2, keep-with-next
    315          void mbedtls_ecp_point_free( mbedtls_ecp_point *pt )
    316          {
   \                     mbedtls_ecp_point_free: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
    317              if( pt == NULL )
   \        0x4   0xD00B             BEQ.N    ??mbedtls_ecp_point_free_0
    318                  return;
    319          
    320              mbedtls_mpi_free( &( pt->X ) );
   \        0x6   0x....'....        BL       mbedtls_mpi_free
    321              mbedtls_mpi_free( &( pt->Y ) );
   \        0xA   0xF104 0x000C      ADD      R0,R4,#+12
   \        0xE   0x....'....        BL       mbedtls_mpi_free
    322              mbedtls_mpi_free( &( pt->Z ) );
   \       0x12   0xF104 0x0018      ADD      R0,R4,#+24
   \       0x16   0xE8BD 0x4010      POP      {R4,LR}
   \       0x1A   0x....'....        B.W      mbedtls_mpi_free
   \                     ??mbedtls_ecp_point_free_0: (+1)
   \       0x1E   0xBD10             POP      {R4,PC}          ;; return
    323          }
    324          
    325          /*
    326           * Unallocate (the components of) a group
    327           */

   \                                 In section .text, align 2, keep-with-next
    328          void mbedtls_ecp_group_free( mbedtls_ecp_group *grp )
    329          {
   \                     mbedtls_ecp_group_free: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
    330              size_t i;
    331          
    332              if( grp == NULL )
   \        0x4   0xD02D             BEQ.N    ??mbedtls_ecp_group_free_0
    333                  return;
    334          
    335              if( grp->h != 1 )
   \        0x6   0x6E20             LDR      R0,[R4, #+96]
   \        0x8   0x2801             CMP      R0,#+1
   \        0xA   0xD012             BEQ.N    ??mbedtls_ecp_group_free_1
    336              {
    337                  mbedtls_mpi_free( &grp->P );
   \        0xC   0x1D20             ADDS     R0,R4,#+4
   \        0xE   0x....'....        BL       mbedtls_mpi_free
    338                  mbedtls_mpi_free( &grp->A );
   \       0x12   0xF104 0x0010      ADD      R0,R4,#+16
   \       0x16   0x....'....        BL       mbedtls_mpi_free
    339                  mbedtls_mpi_free( &grp->B );
   \       0x1A   0xF104 0x001C      ADD      R0,R4,#+28
   \       0x1E   0x....'....        BL       mbedtls_mpi_free
    340                  mbedtls_ecp_point_free( &grp->G );
   \       0x22   0xF104 0x0028      ADD      R0,R4,#+40
   \       0x26   0x....'....        BL       mbedtls_ecp_point_free
    341                  mbedtls_mpi_free( &grp->N );
   \       0x2A   0xF104 0x004C      ADD      R0,R4,#+76
   \       0x2E   0x....'....        BL       mbedtls_mpi_free
    342              }
    343          
    344              if( grp->T != NULL )
   \                     ??mbedtls_ecp_group_free_1: (+1)
   \       0x32   0x6F60             LDR      R0,[R4, #+116]
   \       0x34   0x2800             CMP      R0,#+0
   \       0x36   0xD00E             BEQ.N    ??mbedtls_ecp_group_free_2
    345              {
    346                  for( i = 0; i < grp->T_size; i++ )
   \       0x38   0x2500             MOVS     R5,#+0
   \       0x3A   0xE006             B.N      ??mbedtls_ecp_group_free_3
    347                      mbedtls_ecp_point_free( &grp->T[i] );
   \                     ??mbedtls_ecp_group_free_4: (+1)
   \       0x3C   0xEB05 0x01C5      ADD      R1,R5,R5, LSL #+3
   \       0x40   0xEB00 0x0081      ADD      R0,R0,R1, LSL #+2
   \       0x44   0x....'....        BL       mbedtls_ecp_point_free
   \       0x48   0x1C6D             ADDS     R5,R5,#+1
   \                     ??mbedtls_ecp_group_free_3: (+1)
   \       0x4A   0x6FA0             LDR      R0,[R4, #+120]
   \       0x4C   0x4285             CMP      R5,R0
   \       0x4E   0x6F60             LDR      R0,[R4, #+116]
   \       0x50   0xD3F4             BCC.N    ??mbedtls_ecp_group_free_4
    348                  mbedtls_free( grp->T );
   \       0x52   0x....'....        BL       mbedtls_free
    349              }
    350          
    351              mbedtls_platform_zeroize( grp, sizeof( mbedtls_ecp_group ) );
   \                     ??mbedtls_ecp_group_free_2: (+1)
   \       0x56   0x217C             MOVS     R1,#+124
   \       0x58   0x4620             MOV      R0,R4
   \       0x5A   0xE8BD 0x4034      POP      {R2,R4,R5,LR}
   \       0x5E   0x....'....        B.W      mbedtls_platform_zeroize
   \                     ??mbedtls_ecp_group_free_0: (+1)
   \       0x62   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    352          }
    353          
    354          /*
    355           * Unallocate (the components of) a key pair
    356           */

   \                                 In section .text, align 2, keep-with-next
    357          void mbedtls_ecp_keypair_free_o( mbedtls_ecp_keypair *key )
    358          {
   \                     mbedtls_ecp_keypair_free_o: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
    359              if( key == NULL )
   \        0x4   0xD00A             BEQ.N    ??mbedtls_ecp_keypair_free_o_0
    360                  return;
    361          
    362              mbedtls_ecp_group_free( &key->grp );
   \        0x6   0x....'....        BL       mbedtls_ecp_group_free
    363              mbedtls_mpi_free( &key->d );
   \        0xA   0xF104 0x007C      ADD      R0,R4,#+124
   \        0xE   0x....'....        BL       mbedtls_mpi_free
    364              mbedtls_ecp_point_free( &key->Q );
   \       0x12   0xF104 0x0088      ADD      R0,R4,#+136
   \       0x16   0xE8BD 0x4010      POP      {R4,LR}
   \       0x1A   0x....             B.N      mbedtls_ecp_point_free
   \                     ??mbedtls_ecp_keypair_free_o_0: (+1)
   \       0x1C   0xBD10             POP      {R4,PC}          ;; return
    365          }
    366          /*
    367           * Secure element hostlib handling
    368           */
    369          #if defined(TGT_A71CH)
    370          void mbedtls_ecp_keypair_free( mbedtls_ecp_keypair *key )
    371          {
    372              if( key == NULL )
    373                  return;
    374          
    375              if ( key->grp.hlse_handle != 0 )
    376              {
    377                  key->grp.hlse_handle = 0;
    378              }
    379              mbedtls_ecp_keypair_free_o(key);
    380          }
    381          #else

   \                                 In section .text, align 2, keep-with-next
    382          void mbedtls_ecp_keypair_free( mbedtls_ecp_keypair *key )
    383          {
    384              mbedtls_ecp_keypair_free_o(key);
   \                     mbedtls_ecp_keypair_free: (+1)
   \        0x0   0x....             B.N      mbedtls_ecp_keypair_free_o
    385          }
    386          #endif
    387          
    388          /*
    389           * Copy the contents of a point
    390           */

   \                                 In section .text, align 2, keep-with-next
    391          int mbedtls_ecp_copy( mbedtls_ecp_point *P, const mbedtls_ecp_point *Q )
    392          {
   \                     mbedtls_ecp_copy: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
    393              int ret;
    394          
    395              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->X, &Q->X ) );
   \        0x6   0x....'....        BL       mbedtls_mpi_copy
   \        0xA   0x2800             CMP      R0,#+0
   \        0xC   0xD10F             BNE.N    ??mbedtls_ecp_copy_0
    396              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Y, &Q->Y ) );
   \        0xE   0xF105 0x010C      ADD      R1,R5,#+12
   \       0x12   0xF104 0x000C      ADD      R0,R4,#+12
   \       0x16   0x....'....        BL       mbedtls_mpi_copy
   \       0x1A   0x2800             CMP      R0,#+0
   \       0x1C   0xD107             BNE.N    ??mbedtls_ecp_copy_0
    397              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Z, &Q->Z ) );
   \       0x1E   0xF105 0x0118      ADD      R1,R5,#+24
   \       0x22   0xF104 0x0018      ADD      R0,R4,#+24
   \       0x26   0xE8BD 0x4034      POP      {R2,R4,R5,LR}
   \       0x2A   0x....'....        B.W      mbedtls_mpi_copy
    398          
    399          cleanup:
    400              return( ret );
   \                     ??mbedtls_ecp_copy_0: (+1)
   \       0x2E   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    401          }
    402          
    403          /*
    404           * Copy the contents of a group object
    405           */

   \                                 In section .text, align 2, keep-with-next
    406          int mbedtls_ecp_group_copy( mbedtls_ecp_group *dst, const mbedtls_ecp_group *src )
    407          {
    408              return mbedtls_ecp_group_load( dst, src->id );
   \                     mbedtls_ecp_group_copy: (+1)
   \        0x0   0x7809             LDRB     R1,[R1, #+0]
   \        0x2   0x....'....        B.W      mbedtls_ecp_group_load
    409          }
    410          
    411          /*
    412           * Set point to zero
    413           */

   \                                 In section .text, align 2, keep-with-next
    414          int mbedtls_ecp_set_zero( mbedtls_ecp_point *pt )
    415          {
   \                     mbedtls_ecp_set_zero: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x4604             MOV      R4,R0
    416              int ret;
    417          
    418              MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->X , 1 ) );
   \        0x4   0x2101             MOVS     R1,#+1
   \        0x6   0x....'....        BL       mbedtls_mpi_lset
   \        0xA   0x2800             CMP      R0,#+0
   \        0xC   0xD10D             BNE.N    ??mbedtls_ecp_set_zero_0
    419              MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Y , 1 ) );
   \        0xE   0x2101             MOVS     R1,#+1
   \       0x10   0xF104 0x000C      ADD      R0,R4,#+12
   \       0x14   0x....'....        BL       mbedtls_mpi_lset
   \       0x18   0x2800             CMP      R0,#+0
   \       0x1A   0xD106             BNE.N    ??mbedtls_ecp_set_zero_0
    420              MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z , 0 ) );
   \       0x1C   0x2100             MOVS     R1,#+0
   \       0x1E   0xF104 0x0018      ADD      R0,R4,#+24
   \       0x22   0xE8BD 0x4010      POP      {R4,LR}
   \       0x26   0x....'....        B.W      mbedtls_mpi_lset
    421          
    422          cleanup:
    423              return( ret );
   \                     ??mbedtls_ecp_set_zero_0: (+1)
   \       0x2A   0xBD10             POP      {R4,PC}          ;; return
    424          }
    425          
    426          /*
    427           * Tell if a point is zero
    428           */

   \                                 In section .text, align 2, keep-with-next
    429          int mbedtls_ecp_is_zero( mbedtls_ecp_point *pt )
    430          {
   \                     mbedtls_ecp_is_zero: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    431              return( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 );
   \        0x2   0x2100             MOVS     R1,#+0
   \        0x4   0x3018             ADDS     R0,R0,#+24
   \        0x6   0x....'....        BL       mbedtls_mpi_cmp_int
   \        0xA   0x1E40             SUBS     R0,R0,#+1
   \        0xC   0x4180             SBCS     R0,R0,R0
   \        0xE   0x0FC0             LSRS     R0,R0,#+31
   \       0x10   0xBD02             POP      {R1,PC}          ;; return
    432          }
    433          
    434          /*
    435           * Compare two points lazyly
    436           */

   \                                 In section .text, align 2, keep-with-next
    437          int mbedtls_ecp_point_cmp( const mbedtls_ecp_point *P,
    438                                     const mbedtls_ecp_point *Q )
    439          {
   \                     mbedtls_ecp_point_cmp: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
    440              if( mbedtls_mpi_cmp_mpi( &P->X, &Q->X ) == 0 &&
    441                  mbedtls_mpi_cmp_mpi( &P->Y, &Q->Y ) == 0 &&
    442                  mbedtls_mpi_cmp_mpi( &P->Z, &Q->Z ) == 0 )
   \        0x6   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \        0xA   0x2800             CMP      R0,#+0
   \        0xC   0xD111             BNE.N    ??mbedtls_ecp_point_cmp_0
   \        0xE   0xF105 0x010C      ADD      R1,R5,#+12
   \       0x12   0xF104 0x000C      ADD      R0,R4,#+12
   \       0x16   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \       0x1A   0x2800             CMP      R0,#+0
   \       0x1C   0xD109             BNE.N    ??mbedtls_ecp_point_cmp_0
   \       0x1E   0xF105 0x0118      ADD      R1,R5,#+24
   \       0x22   0xF104 0x0018      ADD      R0,R4,#+24
   \       0x26   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \       0x2A   0x2800             CMP      R0,#+0
   \       0x2C   0xD101             BNE.N    ??mbedtls_ecp_point_cmp_0
    443              {
    444                  return( 0 );
   \       0x2E   0x2000             MOVS     R0,#+0
   \       0x30   0xBD32             POP      {R1,R4,R5,PC}
    445              }
    446          
    447              return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   \                     ??mbedtls_ecp_point_cmp_0: (+1)
   \       0x32   0x....'....        LDR.W    R0,??DataTable12  ;; 0xffffb080
   \       0x36   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    448          }
    449          
    450          /*
    451           * Import a non-zero point from ASCII strings
    452           */

   \                                 In section .text, align 2, keep-with-next
    453          int mbedtls_ecp_point_read_string( mbedtls_ecp_point *P, int radix,
    454                                     const char *x, const char *y )
    455          {
   \                     mbedtls_ecp_point_read_string: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
   \        0x6   0x461E             MOV      R6,R3
    456              int ret;
    457          
    458              MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &P->X, radix, x ) );
   \        0x8   0x....'....        BL       mbedtls_mpi_read_string
   \        0xC   0x2800             CMP      R0,#+0
   \        0xE   0xD10E             BNE.N    ??mbedtls_ecp_point_read_string_0
    459              MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &P->Y, radix, y ) );
   \       0x10   0x4632             MOV      R2,R6
   \       0x12   0x4629             MOV      R1,R5
   \       0x14   0xF104 0x000C      ADD      R0,R4,#+12
   \       0x18   0x....'....        BL       mbedtls_mpi_read_string
   \       0x1C   0x2800             CMP      R0,#+0
   \       0x1E   0xD106             BNE.N    ??mbedtls_ecp_point_read_string_0
    460              MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &P->Z, 1 ) );
   \       0x20   0x2101             MOVS     R1,#+1
   \       0x22   0xF104 0x0018      ADD      R0,R4,#+24
   \       0x26   0xE8BD 0x4070      POP      {R4-R6,LR}
   \       0x2A   0x....'....        B.W      mbedtls_mpi_lset
    461          
    462          cleanup:
    463              return( ret );
   \                     ??mbedtls_ecp_point_read_string_0: (+1)
   \       0x2E   0xBD70             POP      {R4-R6,PC}       ;; return
    464          }
    465          
    466          /*
    467           * Export a point into unsigned binary data (SEC1 2.3.3)
    468           */

   \                                 In section .text, align 2, keep-with-next
    469          int mbedtls_ecp_point_write_binary( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *P,
    470                                      int format, size_t *olen,
    471                                      unsigned char *buf, size_t buflen )
    472          {
   \                     mbedtls_ecp_point_write_binary: (+1)
   \        0x0   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \        0x4   0x4682             MOV      R10,R0
   \        0x6   0x4689             MOV      R9,R1
   \        0x8   0x4614             MOV      R4,R2
   \        0xA   0x4698             MOV      R8,R3
    473              int ret = 0;
   \        0xC   0x2600             MOVS     R6,#+0
    474              size_t plen;
    475          
    476              if( format != MBEDTLS_ECP_PF_UNCOMPRESSED &&
    477                  format != MBEDTLS_ECP_PF_COMPRESSED )
   \        0xE   0x2C00             CMP      R4,#+0
   \       0x10   0xD004             BEQ.N    ??mbedtls_ecp_point_write_binary_0
   \       0x12   0x2C01             CMP      R4,#+1
   \       0x14   0xD002             BEQ.N    ??mbedtls_ecp_point_write_binary_0
    478                  return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   \       0x16   0x....'....        LDR.W    R0,??DataTable12  ;; 0xffffb080
   \       0x1A   0xE051             B.N      ??mbedtls_ecp_point_write_binary_1
   \                     ??mbedtls_ecp_point_write_binary_0: (+1)
   \       0x1C   0x9F08             LDR      R7,[SP, #+32]
   \       0x1E   0x9D09             LDR      R5,[SP, #+36]
    479          
    480              /*
    481               * Common case: P == 0
    482               */
    483              if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
   \       0x20   0x4631             MOV      R1,R6
   \       0x22   0xF109 0x0018      ADD      R0,R9,#+24
   \       0x26   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x2A   0x2800             CMP      R0,#+0
   \       0x2C   0xD10B             BNE.N    ??mbedtls_ecp_point_write_binary_2
    484              {
    485                  if( buflen < 1 )
   \       0x2E   0x2D00             CMP      R5,#+0
   \       0x30   0xD102             BNE.N    ??mbedtls_ecp_point_write_binary_3
    486                      return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );
   \       0x32   0x....'....        LDR.W    R0,??DataTable12_1  ;; 0xffffb100
   \       0x36   0xE043             B.N      ??mbedtls_ecp_point_write_binary_1
    487          
    488                  buf[0] = 0x00;
   \                     ??mbedtls_ecp_point_write_binary_3: (+1)
   \       0x38   0x4630             MOV      R0,R6
   \       0x3A   0x7038             STRB     R0,[R7, #+0]
    489                  *olen = 1;
   \       0x3C   0x2001             MOVS     R0,#+1
   \       0x3E   0xF8C8 0x0000      STR      R0,[R8, #+0]
    490          
    491                  return( 0 );
   \       0x42   0x4630             MOV      R0,R6
   \       0x44   0xE03C             B.N      ??mbedtls_ecp_point_write_binary_1
    492              }
    493          
    494              plen = mbedtls_mpi_size( &grp->P );
   \                     ??mbedtls_ecp_point_write_binary_2: (+1)
   \       0x46   0xF10A 0x0004      ADD      R0,R10,#+4
   \       0x4A   0x....'....        BL       mbedtls_mpi_size
   \       0x4E   0x4682             MOV      R10,R0
    495          
    496              if( format == MBEDTLS_ECP_PF_UNCOMPRESSED )
   \       0x50   0x2C00             CMP      R4,#+0
   \       0x52   0xD11C             BNE.N    ??mbedtls_ecp_point_write_binary_4
    497              {
    498                  *olen = 2 * plen + 1;
   \       0x54   0xEA4F 0x004A      LSL      R0,R10,#+1
   \       0x58   0x1C40             ADDS     R0,R0,#+1
   \       0x5A   0xF8C8 0x0000      STR      R0,[R8, #+0]
    499          
    500                  if( buflen < *olen )
   \       0x5E   0x4285             CMP      R5,R0
   \       0x60   0xD202             BCS.N    ??mbedtls_ecp_point_write_binary_5
    501                      return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );
   \       0x62   0x....'....        LDR.W    R0,??DataTable12_1  ;; 0xffffb100
   \       0x66   0xE02B             B.N      ??mbedtls_ecp_point_write_binary_1
    502          
    503                  buf[0] = 0x04;
   \                     ??mbedtls_ecp_point_write_binary_5: (+1)
   \       0x68   0x2004             MOVS     R0,#+4
   \       0x6A   0x7038             STRB     R0,[R7, #+0]
    504                  MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
   \       0x6C   0x4652             MOV      R2,R10
   \       0x6E   0x1C79             ADDS     R1,R7,#+1
   \       0x70   0x4648             MOV      R0,R9
   \       0x72   0x....'....        BL       mbedtls_mpi_write_binary
   \       0x76   0x0006             MOVS     R6,R0
   \       0x78   0xD121             BNE.N    ??mbedtls_ecp_point_write_binary_6
    505                  MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->Y, buf + 1 + plen, plen ) );
   \       0x7A   0x4652             MOV      R2,R10
   \       0x7C   0xEB07 0x000A      ADD      R0,R7,R10
   \       0x80   0x1C41             ADDS     R1,R0,#+1
   \       0x82   0xF109 0x000C      ADD      R0,R9,#+12
   \       0x86   0x....'....        BL       mbedtls_mpi_write_binary
   \       0x8A   0x4606             MOV      R6,R0
   \       0x8C   0xE017             B.N      ??mbedtls_ecp_point_write_binary_6
    506              }
    507              else if( format == MBEDTLS_ECP_PF_COMPRESSED )
   \                     ??mbedtls_ecp_point_write_binary_4: (+1)
   \       0x8E   0x2C01             CMP      R4,#+1
   \       0x90   0xD115             BNE.N    ??mbedtls_ecp_point_write_binary_6
    508              {
    509                  *olen = plen + 1;
   \       0x92   0xF10A 0x0001      ADD      R0,R10,#+1
   \       0x96   0xF8C8 0x0000      STR      R0,[R8, #+0]
    510          
    511                  if( buflen < *olen )
   \       0x9A   0x4285             CMP      R5,R0
   \       0x9C   0xD202             BCS.N    ??mbedtls_ecp_point_write_binary_7
    512                      return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );
   \       0x9E   0x....'....        LDR.W    R0,??DataTable12_1  ;; 0xffffb100
   \       0xA2   0xE00D             B.N      ??mbedtls_ecp_point_write_binary_1
    513          
    514                  buf[0] = 0x02 + mbedtls_mpi_get_bit( &P->Y, 0 );
   \                     ??mbedtls_ecp_point_write_binary_7: (+1)
   \       0xA4   0x4631             MOV      R1,R6
   \       0xA6   0xF109 0x000C      ADD      R0,R9,#+12
   \       0xAA   0x....'....        BL       mbedtls_mpi_get_bit
   \       0xAE   0x1C80             ADDS     R0,R0,#+2
   \       0xB0   0x7038             STRB     R0,[R7, #+0]
    515                  MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
   \       0xB2   0x4652             MOV      R2,R10
   \       0xB4   0x1C79             ADDS     R1,R7,#+1
   \       0xB6   0x4648             MOV      R0,R9
   \       0xB8   0x....'....        BL       mbedtls_mpi_write_binary
   \       0xBC   0x4606             MOV      R6,R0
    516              }
    517          
    518          cleanup:
    519              return( ret );
   \                     ??mbedtls_ecp_point_write_binary_6: (+1)
   \       0xBE   0x4630             MOV      R0,R6
   \                     ??mbedtls_ecp_point_write_binary_1: (+1)
   \       0xC0   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    520          }
    521          
    522          /*
    523           * Import a point from unsigned binary data (SEC1 2.3.4)
    524           */

   \                                 In section .text, align 2, keep-with-next
    525          int mbedtls_ecp_point_read_binary( const mbedtls_ecp_group *grp, mbedtls_ecp_point *pt,
    526                                     const unsigned char *buf, size_t ilen )
    527          {
   \                     mbedtls_ecp_point_read_binary: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x460D             MOV      R5,R1
   \        0x4   0x4616             MOV      R6,R2
   \        0x6   0x001C             MOVS     R4,R3
    528              int ret;
    529              size_t plen;
    530          
    531              if( ilen < 1 )
   \        0x8   0xD102             BNE.N    ??mbedtls_ecp_point_read_binary_0
    532                  return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   \        0xA   0x....'....        LDR.W    R0,??DataTable12  ;; 0xffffb080
   \        0xE   0xBDF2             POP      {R1,R4-R7,PC}
    533          
    534              if( buf[0] == 0x00 )
   \                     ??mbedtls_ecp_point_read_binary_0: (+1)
   \       0x10   0x7831             LDRB     R1,[R6, #+0]
   \       0x12   0x2900             CMP      R1,#+0
   \       0x14   0xD108             BNE.N    ??mbedtls_ecp_point_read_binary_1
    535              {
    536                  if( ilen == 1 )
   \       0x16   0x2C01             CMP      R4,#+1
   \       0x18   0xD103             BNE.N    ??mbedtls_ecp_point_read_binary_2
    537                      return( mbedtls_ecp_set_zero( pt ) );
   \       0x1A   0x4628             MOV      R0,R5
   \       0x1C   0xE8BD 0x40F2      POP      {R1,R4-R7,LR}
   \       0x20   0x....             B.N      mbedtls_ecp_set_zero
    538                  else
    539                      return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   \                     ??mbedtls_ecp_point_read_binary_2: (+1)
   \       0x22   0x....'....        LDR.W    R0,??DataTable12  ;; 0xffffb080
   \       0x26   0xBDF2             POP      {R1,R4-R7,PC}
    540              }
    541          
    542              plen = mbedtls_mpi_size( &grp->P );
   \                     ??mbedtls_ecp_point_read_binary_1: (+1)
   \       0x28   0x1D00             ADDS     R0,R0,#+4
   \       0x2A   0x....'....        BL       mbedtls_mpi_size
   \       0x2E   0x4607             MOV      R7,R0
    543          
    544              if( buf[0] != 0x04 )
   \       0x30   0x7830             LDRB     R0,[R6, #+0]
   \       0x32   0x2804             CMP      R0,#+4
   \       0x34   0xD002             BEQ.N    ??mbedtls_ecp_point_read_binary_3
    545                  return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
   \       0x36   0x....'....        LDR.W    R0,??DataTable12_2  ;; 0xffffb180
   \       0x3A   0xBDF2             POP      {R1,R4-R7,PC}
    546          
    547              if( ilen != 2 * plen + 1 )
   \                     ??mbedtls_ecp_point_read_binary_3: (+1)
   \       0x3C   0x0078             LSLS     R0,R7,#+1
   \       0x3E   0x1C40             ADDS     R0,R0,#+1
   \       0x40   0x4284             CMP      R4,R0
   \       0x42   0xD002             BEQ.N    ??mbedtls_ecp_point_read_binary_4
    548                  return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   \       0x44   0x....'....        LDR.W    R0,??DataTable12  ;; 0xffffb080
   \       0x48   0xBDF2             POP      {R1,R4-R7,PC}
    549          
    550              MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &pt->X, buf + 1, plen ) );
   \                     ??mbedtls_ecp_point_read_binary_4: (+1)
   \       0x4A   0x463A             MOV      R2,R7
   \       0x4C   0x1C71             ADDS     R1,R6,#+1
   \       0x4E   0x4628             MOV      R0,R5
   \       0x50   0x....'....        BL       mbedtls_mpi_read_binary
   \       0x54   0x2800             CMP      R0,#+0
   \       0x56   0xD10F             BNE.N    ??mbedtls_ecp_point_read_binary_5
    551              MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &pt->Y, buf + 1 + plen, plen ) );
   \       0x58   0x463A             MOV      R2,R7
   \       0x5A   0x19F0             ADDS     R0,R6,R7
   \       0x5C   0x1C41             ADDS     R1,R0,#+1
   \       0x5E   0xF105 0x000C      ADD      R0,R5,#+12
   \       0x62   0x....'....        BL       mbedtls_mpi_read_binary
   \       0x66   0x2800             CMP      R0,#+0
   \       0x68   0xD106             BNE.N    ??mbedtls_ecp_point_read_binary_5
    552              MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
   \       0x6A   0x2101             MOVS     R1,#+1
   \       0x6C   0xF105 0x0018      ADD      R0,R5,#+24
   \       0x70   0xE8BD 0x40F4      POP      {R2,R4-R7,LR}
   \       0x74   0x....'....        B.W      mbedtls_mpi_lset
    553          
    554          cleanup:
    555              return( ret );
   \                     ??mbedtls_ecp_point_read_binary_5: (+1)
   \       0x78   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    556          }
    557          
    558          /*
    559           * Import a point from a TLS ECPoint record (RFC 4492)
    560           *      struct {
    561           *          opaque point <1..2^8-1>;
    562           *      } ECPoint;
    563           */

   \                                 In section .text, align 2, keep-with-next
    564          int mbedtls_ecp_tls_read_point( const mbedtls_ecp_group *grp, mbedtls_ecp_point *pt,
    565                                  const unsigned char **buf, size_t buf_len )
    566          {
   \                     mbedtls_ecp_tls_read_point: (+1)
   \        0x0   0xB430             PUSH     {R4,R5}
   \        0x2   0x461C             MOV      R4,R3
    567              unsigned char data_len;
    568              const unsigned char *buf_start;
    569          
    570              /*
    571               * We must have at least two bytes (1 for length, at least one for data)
    572               */
    573              if( buf_len < 2 )
   \        0x4   0x2C02             CMP      R4,#+2
   \        0x6   0xD308             BCC.N    ??mbedtls_ecp_tls_read_point_0
    574                  return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
    575          
    576              data_len = *(*buf)++;
   \        0x8   0x6813             LDR      R3,[R2, #+0]
   \        0xA   0x1C5D             ADDS     R5,R3,#+1
   \        0xC   0x6015             STR      R5,[R2, #+0]
   \        0xE   0x781B             LDRB     R3,[R3, #+0]
    577              if( data_len < 1 || data_len > buf_len - 1 )
   \       0x10   0x2B00             CMP      R3,#+0
   \       0x12   0xD002             BEQ.N    ??mbedtls_ecp_tls_read_point_0
   \       0x14   0x1E64             SUBS     R4,R4,#+1
   \       0x16   0x429C             CMP      R4,R3
   \       0x18   0xD202             BCS.N    ??mbedtls_ecp_tls_read_point_1
    578                  return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   \                     ??mbedtls_ecp_tls_read_point_0: (+1)
   \       0x1A   0x....'....        LDR.W    R0,??DataTable12  ;; 0xffffb080
   \       0x1E   0xE005             B.N      ??mbedtls_ecp_tls_read_point_2
    579          
    580              /*
    581               * Save buffer start for read_binary and update buf
    582               */
    583              buf_start = *buf;
   \                     ??mbedtls_ecp_tls_read_point_1: (+1)
   \       0x20   0x462C             MOV      R4,R5
    584              *buf += data_len;
   \       0x22   0x441D             ADD      R5,R5,R3
   \       0x24   0x6015             STR      R5,[R2, #+0]
    585          
    586              return mbedtls_ecp_point_read_binary( grp, pt, buf_start, data_len );
   \       0x26   0x4622             MOV      R2,R4
   \       0x28   0xBC30             POP      {R4,R5}
   \       0x2A   0x....             B.N      mbedtls_ecp_point_read_binary
   \                     ??mbedtls_ecp_tls_read_point_2: (+1)
   \       0x2C   0xBC30             POP      {R4,R5}
   \       0x2E   0x4770             BX       LR               ;; return
    587          }
    588          
    589          /*
    590           * Export a point as a TLS ECPoint record (RFC 4492)
    591           *      struct {
    592           *          opaque point <1..2^8-1>;
    593           *      } ECPoint;
    594           */

   \                                 In section .text, align 2, keep-with-next
    595          int mbedtls_ecp_tls_write_point( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *pt,
    596                                   int format, size_t *olen,
    597                                   unsigned char *buf, size_t blen )
    598          {
   \                     mbedtls_ecp_tls_write_point: (+1)
   \        0x0   0xB53E             PUSH     {R1-R5,LR}
   \        0x2   0x461D             MOV      R5,R3
   \        0x4   0x9B07             LDR      R3,[SP, #+28]
    599              int ret;
    600          
    601              /*
    602               * buffer length must be at least one, for our length byte
    603               */
    604              if( blen < 1 )
   \        0x6   0x2B00             CMP      R3,#+0
   \        0x8   0xD102             BNE.N    ??mbedtls_ecp_tls_write_point_0
    605                  return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   \        0xA   0x....'....        LDR.W    R0,??DataTable12  ;; 0xffffb080
   \        0xE   0xBD3E             POP      {R1-R5,PC}
   \                     ??mbedtls_ecp_tls_write_point_0: (+1)
   \       0x10   0x9C06             LDR      R4,[SP, #+24]
    606          
    607              if( ( ret = mbedtls_ecp_point_write_binary( grp, pt, format,
    608                              olen, buf + 1, blen - 1) ) != 0 )
   \       0x12   0x1E5B             SUBS     R3,R3,#+1
   \       0x14   0x9301             STR      R3,[SP, #+4]
   \       0x16   0x1C63             ADDS     R3,R4,#+1
   \       0x18   0x9300             STR      R3,[SP, #+0]
   \       0x1A   0x462B             MOV      R3,R5
   \       0x1C   0x....'....        BL       mbedtls_ecp_point_write_binary
   \       0x20   0x2800             CMP      R0,#+0
   \       0x22   0xD105             BNE.N    ??mbedtls_ecp_tls_write_point_1
    609                  return( ret );
    610          
    611              /*
    612               * write length to the first byte and update total length
    613               */
    614              buf[0] = (unsigned char) *olen;
   \       0x24   0x6828             LDR      R0,[R5, #+0]
   \       0x26   0x7020             STRB     R0,[R4, #+0]
    615              ++*olen;
   \       0x28   0x6828             LDR      R0,[R5, #+0]
   \       0x2A   0x1C40             ADDS     R0,R0,#+1
   \       0x2C   0x6028             STR      R0,[R5, #+0]
    616          
    617              return( 0 );
   \       0x2E   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_ecp_tls_write_point_1: (+1)
   \       0x30   0xBD3E             POP      {R1-R5,PC}       ;; return
    618          }
    619          
    620          /*
    621           * Set a group from an ECParameters record (RFC 4492)
    622           */

   \                                 In section .text, align 2, keep-with-next
    623          int mbedtls_ecp_tls_read_group_o( mbedtls_ecp_group *grp, const unsigned char **buf, size_t len )
    624          {
   \                     mbedtls_ecp_tls_read_group_o: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x4604             MOV      R4,R0
    625              uint16_t tls_id;
    626              const mbedtls_ecp_curve_info *curve_info;
    627          
    628              /*
    629               * We expect at least three bytes (see below)
    630               */
    631              if( len < 3 )
   \        0x4   0x2A03             CMP      R2,#+3
   \        0x6   0xD305             BCC.N    ??mbedtls_ecp_tls_read_group_o_0
    632                  return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
    633          
    634              /*
    635               * First byte is curve_type; only named_curve is handled
    636               */
    637              if( *(*buf)++ != MBEDTLS_ECP_TLS_NAMED_CURVE )
   \        0x8   0x6808             LDR      R0,[R1, #+0]
   \        0xA   0x1C42             ADDS     R2,R0,#+1
   \        0xC   0x600A             STR      R2,[R1, #+0]
   \        0xE   0x7800             LDRB     R0,[R0, #+0]
   \       0x10   0x2803             CMP      R0,#+3
   \       0x12   0xD002             BEQ.N    ??mbedtls_ecp_tls_read_group_o_1
    638                  return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   \                     ??mbedtls_ecp_tls_read_group_o_0: (+1)
   \       0x14   0x....'....        LDR.W    R0,??DataTable12  ;; 0xffffb080
   \       0x18   0xBD10             POP      {R4,PC}
    639          
    640              /*
    641               * Next two bytes are the namedcurve value
    642               */
    643              tls_id = *(*buf)++;
   \                     ??mbedtls_ecp_tls_read_group_o_1: (+1)
   \       0x1A   0x4610             MOV      R0,R2
   \       0x1C   0x1C42             ADDS     R2,R0,#+1
   \       0x1E   0x600A             STR      R2,[R1, #+0]
   \       0x20   0x7802             LDRB     R2,[R0, #+0]
    644              tls_id <<= 8;
    645              tls_id |= *(*buf)++;
   \       0x22   0x6808             LDR      R0,[R1, #+0]
   \       0x24   0x1C43             ADDS     R3,R0,#+1
   \       0x26   0x600B             STR      R3,[R1, #+0]
   \       0x28   0x7800             LDRB     R0,[R0, #+0]
   \       0x2A   0xEA40 0x2002      ORR      R0,R0,R2, LSL #+8
    646          
    647              if( ( curve_info = mbedtls_ecp_curve_info_from_tls_id( tls_id ) ) == NULL )
   \       0x2E   0x....'....        BL       mbedtls_ecp_curve_info_from_tls_id
   \       0x32   0x2800             CMP      R0,#+0
   \       0x34   0xD102             BNE.N    ??mbedtls_ecp_tls_read_group_o_2
    648                  return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
   \       0x36   0x....'....        LDR.W    R0,??DataTable12_2  ;; 0xffffb180
   \       0x3A   0xBD10             POP      {R4,PC}
    649          
    650              return mbedtls_ecp_group_load( grp, curve_info->grp_id );
   \                     ??mbedtls_ecp_tls_read_group_o_2: (+1)
   \       0x3C   0x7801             LDRB     R1,[R0, #+0]
   \       0x3E   0x4620             MOV      R0,R4
   \       0x40   0xE8BD 0x4010      POP      {R4,LR}
   \       0x44   0x....'....        B.W      mbedtls_ecp_group_load
    651          }
    652          /*
    653           *  Use modified handling for secure element hostlib
    654           */
    655          #if defined(TGT_A71CH)
    656          int mbedtls_ecp_tls_read_group( mbedtls_ecp_group *grp, const unsigned char **buf, size_t len )
    657          {
    658              int ret;
    659              HLSE_OBJECT_HANDLE backup_type_ax_index;
    660              backup_type_ax_index = grp->hlse_handle;
    661              ret = mbedtls_ecp_tls_read_group_o(grp, buf, len);
    662              grp->hlse_handle = backup_type_ax_index;
    663              return ret;
    664          }
    665          #else

   \                                 In section .text, align 2, keep-with-next
    666          int mbedtls_ecp_tls_read_group( mbedtls_ecp_group *grp, const unsigned char **buf, size_t len )
    667          {
    668              int ret = mbedtls_ecp_tls_read_group_o(grp, buf, len);
    669              return ret;
   \                     mbedtls_ecp_tls_read_group: (+1)
   \        0x0   0x....             B.N      mbedtls_ecp_tls_read_group_o
    670          }
    671          #endif
    672          /*
    673           * Write the ECParameters record corresponding to a group (RFC 4492)
    674           */

   \                                 In section .text, align 2, keep-with-next
    675          int mbedtls_ecp_tls_write_group( const mbedtls_ecp_group *grp, size_t *olen,
    676                                   unsigned char *buf, size_t blen )
    677          {
   \                     mbedtls_ecp_tls_write_group: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x460D             MOV      R5,R1
   \        0x4   0x4614             MOV      R4,R2
   \        0x6   0x461E             MOV      R6,R3
    678              const mbedtls_ecp_curve_info *curve_info;
    679          
    680              if( ( curve_info = mbedtls_ecp_curve_info_from_grp_id( grp->id ) ) == NULL )
   \        0x8   0x7800             LDRB     R0,[R0, #+0]
   \        0xA   0x....'....        BL       mbedtls_ecp_curve_info_from_grp_id
   \        0xE   0x2800             CMP      R0,#+0
   \       0x10   0xD102             BNE.N    ??mbedtls_ecp_tls_write_group_0
    681                  return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   \       0x12   0x....'....        LDR.W    R0,??DataTable12  ;; 0xffffb080
   \       0x16   0xBD70             POP      {R4-R6,PC}
    682          
    683              /*
    684               * We are going to write 3 bytes (see below)
    685               */
    686              *olen = 3;
   \                     ??mbedtls_ecp_tls_write_group_0: (+1)
   \       0x18   0x2103             MOVS     R1,#+3
   \       0x1A   0x6029             STR      R1,[R5, #+0]
    687              if( blen < *olen )
   \       0x1C   0x2E03             CMP      R6,#+3
   \       0x1E   0xD202             BCS.N    ??mbedtls_ecp_tls_write_group_1
    688                  return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );
   \       0x20   0x....'....        LDR.W    R0,??DataTable12_1  ;; 0xffffb100
   \       0x24   0xBD70             POP      {R4-R6,PC}
    689          
    690              /*
    691               * First byte is curve_type, always named_curve
    692               */
    693              *buf++ = MBEDTLS_ECP_TLS_NAMED_CURVE;
   \                     ??mbedtls_ecp_tls_write_group_1: (+1)
   \       0x26   0x7021             STRB     R1,[R4, #+0]
    694          
    695              /*
    696               * Next two bytes are the namedcurve value
    697               */
    698              buf[0] = curve_info->tls_id >> 8;
   \       0x28   0x8841             LDRH     R1,[R0, #+2]
   \       0x2A   0x0A09             LSRS     R1,R1,#+8
   \       0x2C   0xF804 0x1F01      STRB     R1,[R4, #+1]!
    699              buf[1] = curve_info->tls_id & 0xFF;
   \       0x30   0x8840             LDRH     R0,[R0, #+2]
   \       0x32   0x7060             STRB     R0,[R4, #+1]
    700          
    701              return( 0 );
   \       0x34   0x2000             MOVS     R0,#+0
   \       0x36   0xBD70             POP      {R4-R6,PC}       ;; return
    702          }
    703          
    704          /*
    705           * Wrapper around fast quasi-modp functions, with fall-back to mbedtls_mpi_mod_mpi.
    706           * See the documentation of struct mbedtls_ecp_group.
    707           *
    708           * This function is in the critial loop for mbedtls_ecp_mul, so pay attention to perf.
    709           */

   \                                 In section .text, align 2, keep-with-next
    710          static int ecp_modp( mbedtls_mpi *N, const mbedtls_ecp_group *grp )
    711          {
   \                     ecp_modp: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4605             MOV      R5,R0
   \        0x4   0x460E             MOV      R6,R1
    712              int ret;
    713          
    714              if( grp->modp == NULL )
   \        0x6   0x6E70             LDR      R0,[R6, #+100]
   \        0x8   0x2800             CMP      R0,#+0
   \        0xA   0xD106             BNE.N    ??ecp_modp_0
    715                  return( mbedtls_mpi_mod_mpi( N, N, &grp->P ) );
   \        0xC   0x1D32             ADDS     R2,R6,#+4
   \        0xE   0x4629             MOV      R1,R5
   \       0x10   0x4628             MOV      R0,R5
   \       0x12   0xE8BD 0x4070      POP      {R4-R6,LR}
   \       0x16   0x....'....        B.W      mbedtls_mpi_mod_mpi
    716          
    717              /* N->s < 0 is a much faster test, which fails only if N is 0 */
    718              if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||
    719                  mbedtls_mpi_bitlen( N ) > 2 * grp->pbits )
   \                     ??ecp_modp_0: (+1)
   \       0x1A   0x6828             LDR      R0,[R5, #+0]
   \       0x1C   0x2800             CMP      R0,#+0
   \       0x1E   0xD505             BPL.N    ??ecp_modp_1
   \       0x20   0x2100             MOVS     R1,#+0
   \       0x22   0x4628             MOV      R0,R5
   \       0x24   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x28   0x2800             CMP      R0,#+0
   \       0x2A   0xD106             BNE.N    ??ecp_modp_2
   \                     ??ecp_modp_1: (+1)
   \       0x2C   0x4628             MOV      R0,R5
   \       0x2E   0x....'....        BL       mbedtls_mpi_bitlen
   \       0x32   0x6DB1             LDR      R1,[R6, #+88]
   \       0x34   0x0049             LSLS     R1,R1,#+1
   \       0x36   0x4281             CMP      R1,R0
   \       0x38   0xD202             BCS.N    ??ecp_modp_3
    720              {
    721                  return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   \                     ??ecp_modp_2: (+1)
   \       0x3A   0x....'....        LDR.W    R0,??DataTable12  ;; 0xffffb080
   \       0x3E   0xBD70             POP      {R4-R6,PC}
    722              }
    723          
    724              MBEDTLS_MPI_CHK( grp->modp( N ) );
   \                     ??ecp_modp_3: (+1)
   \       0x40   0x4628             MOV      R0,R5
   \       0x42   0x6E71             LDR      R1,[R6, #+100]
   \       0x44   0x4788             BLX      R1
   \       0x46   0x0004             MOVS     R4,R0
   \       0x48   0xD10F             BNE.N    ??ecp_modp_4
    725          
    726              /* N->s < 0 is a much faster test, which fails only if N is 0 */
    727              while( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 )
   \                     ??ecp_modp_5: (+1)
   \       0x4A   0x6828             LDR      R0,[R5, #+0]
   \       0x4C   0x2800             CMP      R0,#+0
   \       0x4E   0xD50E             BPL.N    ??ecp_modp_6
   \       0x50   0x2100             MOVS     R1,#+0
   \       0x52   0x4628             MOV      R0,R5
   \       0x54   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x58   0x2800             CMP      R0,#+0
   \       0x5A   0xD008             BEQ.N    ??ecp_modp_6
    728                  MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &grp->P ) );
   \       0x5C   0x1D32             ADDS     R2,R6,#+4
   \       0x5E   0x4629             MOV      R1,R5
   \       0x60   0x4628             MOV      R0,R5
   \       0x62   0x....'....        BL       mbedtls_mpi_add_mpi
   \       0x66   0x0004             MOVS     R4,R0
   \       0x68   0xD0EF             BEQ.N    ??ecp_modp_5
    729          
    730              while( mbedtls_mpi_cmp_mpi( N, &grp->P ) >= 0 )
    731                  /* we known P, N and the result are positive */
    732                  MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, N, &grp->P ) );
    733          
    734          cleanup:
    735              return( ret );
   \                     ??ecp_modp_4: (+1)
   \       0x6A   0x4620             MOV      R0,R4
   \       0x6C   0xBD70             POP      {R4-R6,PC}       ;; return
   \                     ??ecp_modp_6: (+1)
   \       0x6E   0x1D31             ADDS     R1,R6,#+4
   \       0x70   0x4628             MOV      R0,R5
   \       0x72   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \       0x76   0x2800             CMP      R0,#+0
   \       0x78   0xD4F7             BMI.N    ??ecp_modp_4
   \       0x7A   0x1D32             ADDS     R2,R6,#+4
   \       0x7C   0x4629             MOV      R1,R5
   \       0x7E   0x4628             MOV      R0,R5
   \       0x80   0x....'....        BL       mbedtls_mpi_sub_abs
   \       0x84   0x0004             MOVS     R4,R0
   \       0x86   0xD0F2             BEQ.N    ??ecp_modp_6
   \       0x88   0xE7EF             B.N      ??ecp_modp_4
    736          }
    737          
    738          /*
    739           * Fast mod-p functions expect their argument to be in the 0..p^2 range.
    740           *
    741           * In order to guarantee that, we need to ensure that operands of
    742           * mbedtls_mpi_mul_mpi are in the 0..p range. So, after each operation we will
    743           * bring the result back to this range.
    744           *
    745           * The following macros are shortcuts for doing that.
    746           */
    747          
    748          /*
    749           * Reduce a mbedtls_mpi mod p in-place, general case, to use after mbedtls_mpi_mul_mpi
    750           */
    751          #if defined(MBEDTLS_SELF_TEST)
    752          #define INC_MUL_COUNT   mul_count++;
    753          #else
    754          #define INC_MUL_COUNT
    755          #endif
    756          
    757          #define MOD_MUL( N )    do { MBEDTLS_MPI_CHK( ecp_modp( &N, grp ) ); INC_MUL_COUNT } \
    758                                  while( 0 )
    759          
    760          /*
    761           * Reduce a mbedtls_mpi mod p in-place, to use after mbedtls_mpi_sub_mpi
    762           * N->s < 0 is a very fast test, which fails only if N is 0
    763           */
    764          #define MOD_SUB( N )                                \
    765              while( N.s < 0 && mbedtls_mpi_cmp_int( &N, 0 ) != 0 )   \
    766                  MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &N, &N, &grp->P ) )
    767          
    768          /*
    769           * Reduce a mbedtls_mpi mod p in-place, to use after mbedtls_mpi_add_mpi and mbedtls_mpi_mul_int.
    770           * We known P, N and the result are positive, so sub_abs is correct, and
    771           * a bit faster.
    772           */
    773          #define MOD_ADD( N )                                \
    774              while( mbedtls_mpi_cmp_mpi( &N, &grp->P ) >= 0 )        \
    775                  MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &N, &N, &grp->P ) )
    776          
    777          #if defined(ECP_SHORTWEIERSTRASS)
    778          /*
    779           * For curves in short Weierstrass form, we do all the internal operations in
    780           * Jacobian coordinates.
    781           *
    782           * For multiplication, we'll use a comb method with coutermeasueres against
    783           * SPA, hence timing attacks.
    784           */
    785          
    786          /*
    787           * Normalize jacobian coordinates so that Z == 0 || Z == 1  (GECC 3.2.1)
    788           * Cost: 1N := 1I + 3M + 1S
    789           */
    790          #if !defined(MBEDTLS_ECP_MUL_COMB_ALT) || !defined(MBEDTLS_ECP_ADD_ALT)

   \                                 In section .text, align 2, keep-with-next
    791          static int ecp_normalize_jac( const mbedtls_ecp_group *grp, mbedtls_ecp_point *pt )
    792          {
   \                     ecp_normalize_jac: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0xB086             SUB      SP,SP,#+24
   \        0x4   0x4605             MOV      R5,R0
   \        0x6   0x460E             MOV      R6,R1
    793              int ret;
    794              mbedtls_mpi Zi, ZZi;
    795          
    796              if( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 )
   \        0x8   0x2100             MOVS     R1,#+0
   \        0xA   0xF106 0x0018      ADD      R0,R6,#+24
   \        0xE   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x12   0x2800             CMP      R0,#+0
   \       0x14   0xD101             BNE.N    ??ecp_normalize_jac_0
    797                  return( 0 );
   \       0x16   0x2000             MOVS     R0,#+0
   \       0x18   0xE062             B.N      ??ecp_normalize_jac_1
    798          
    799          #if defined(MBEDTLS_ECP_NORMALIZE_JAC_ALT)
    800              if ( mbedtls_internal_ecp_grp_capable( grp ) )
    801              {
    802                  return mbedtls_internal_ecp_normalize_jac( grp, pt );
    803              }
    804          #endif /* MBEDTLS_ECP_NORMALIZE_JAC_ALT */
    805              mbedtls_mpi_init( &Zi ); mbedtls_mpi_init( &ZZi );
   \                     ??ecp_normalize_jac_0: (+1)
   \       0x1A   0xA803             ADD      R0,SP,#+12
   \       0x1C   0x....'....        BL       mbedtls_mpi_init
   \       0x20   0x4668             MOV      R0,SP
   \       0x22   0x....'....        BL       mbedtls_mpi_init
    806          
    807              /*
    808               * X = X / Z^2  mod p
    809               */
    810              MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &Zi,      &pt->Z,     &grp->P ) );
   \       0x26   0x1D2A             ADDS     R2,R5,#+4
   \       0x28   0xF106 0x0118      ADD      R1,R6,#+24
   \       0x2C   0xA803             ADD      R0,SP,#+12
   \       0x2E   0x....'....        BL       mbedtls_mpi_inv_mod
   \       0x32   0x0004             MOVS     R4,R0
   \       0x34   0xD14D             BNE.N    ??ecp_normalize_jac_2
    811              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,        &Zi     ) ); MOD_MUL( ZZi );
   \       0x36   0xAA03             ADD      R2,SP,#+12
   \       0x38   0xA903             ADD      R1,SP,#+12
   \       0x3A   0x4668             MOV      R0,SP
   \       0x3C   0x....'....        BL       mbedtls_mpi_mul_mpi
   \       0x40   0x0004             MOVS     R4,R0
   \       0x42   0xD146             BNE.N    ??ecp_normalize_jac_2
   \       0x44   0x4629             MOV      R1,R5
   \       0x46   0x4668             MOV      R0,SP
   \       0x48   0x....'....        BL       ecp_modp
   \       0x4C   0x0004             MOVS     R4,R0
   \       0x4E   0xD140             BNE.N    ??ecp_normalize_jac_2
   \       0x50   0x....'....        LDR.W    R7,??DataTable13
   \       0x54   0x6838             LDR      R0,[R7, #+0]
   \       0x56   0x1C40             ADDS     R0,R0,#+1
   \       0x58   0x6038             STR      R0,[R7, #+0]
    812              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ZZi    ) ); MOD_MUL( pt->X );
   \       0x5A   0x466A             MOV      R2,SP
   \       0x5C   0x4631             MOV      R1,R6
   \       0x5E   0x4630             MOV      R0,R6
   \       0x60   0x....'....        BL       mbedtls_mpi_mul_mpi
   \       0x64   0x0004             MOVS     R4,R0
   \       0x66   0xD134             BNE.N    ??ecp_normalize_jac_2
   \       0x68   0x4629             MOV      R1,R5
   \       0x6A   0x4630             MOV      R0,R6
   \       0x6C   0x....'....        BL       ecp_modp
   \       0x70   0x0004             MOVS     R4,R0
   \       0x72   0xD12E             BNE.N    ??ecp_normalize_jac_2
   \       0x74   0x6838             LDR      R0,[R7, #+0]
   \       0x76   0x1C40             ADDS     R0,R0,#+1
   \       0x78   0x6038             STR      R0,[R7, #+0]
    813          
    814              /*
    815               * Y = Y / Z^3  mod p
    816               */
    817              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ZZi    ) ); MOD_MUL( pt->Y );
   \       0x7A   0x466A             MOV      R2,SP
   \       0x7C   0xF106 0x010C      ADD      R1,R6,#+12
   \       0x80   0xF106 0x000C      ADD      R0,R6,#+12
   \       0x84   0x....'....        BL       mbedtls_mpi_mul_mpi
   \       0x88   0x0004             MOVS     R4,R0
   \       0x8A   0xD122             BNE.N    ??ecp_normalize_jac_2
   \       0x8C   0x4629             MOV      R1,R5
   \       0x8E   0xF106 0x000C      ADD      R0,R6,#+12
   \       0x92   0x....'....        BL       ecp_modp
   \       0x96   0x0004             MOVS     R4,R0
   \       0x98   0xD11B             BNE.N    ??ecp_normalize_jac_2
   \       0x9A   0x6838             LDR      R0,[R7, #+0]
   \       0x9C   0x1C40             ADDS     R0,R0,#+1
   \       0x9E   0x6038             STR      R0,[R7, #+0]
    818              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &Zi     ) ); MOD_MUL( pt->Y );
   \       0xA0   0xAA03             ADD      R2,SP,#+12
   \       0xA2   0xF106 0x010C      ADD      R1,R6,#+12
   \       0xA6   0xF106 0x000C      ADD      R0,R6,#+12
   \       0xAA   0x....'....        BL       mbedtls_mpi_mul_mpi
   \       0xAE   0x0004             MOVS     R4,R0
   \       0xB0   0xD10F             BNE.N    ??ecp_normalize_jac_2
   \       0xB2   0x4629             MOV      R1,R5
   \       0xB4   0xF106 0x000C      ADD      R0,R6,#+12
   \       0xB8   0x....'....        BL       ecp_modp
   \       0xBC   0x0004             MOVS     R4,R0
   \       0xBE   0xD108             BNE.N    ??ecp_normalize_jac_2
   \       0xC0   0x6838             LDR      R0,[R7, #+0]
   \       0xC2   0x1C40             ADDS     R0,R0,#+1
   \       0xC4   0x6038             STR      R0,[R7, #+0]
    819          
    820              /*
    821               * Z = 1
    822               */
    823              MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
   \       0xC6   0x2101             MOVS     R1,#+1
   \       0xC8   0xF106 0x0018      ADD      R0,R6,#+24
   \       0xCC   0x....'....        BL       mbedtls_mpi_lset
   \       0xD0   0x4604             MOV      R4,R0
    824          
    825          cleanup:
    826          
    827              mbedtls_mpi_free( &Zi ); mbedtls_mpi_free( &ZZi );
   \                     ??ecp_normalize_jac_2: (+1)
   \       0xD2   0xA803             ADD      R0,SP,#+12
   \       0xD4   0x....'....        BL       mbedtls_mpi_free
   \       0xD8   0x4668             MOV      R0,SP
   \       0xDA   0x....'....        BL       mbedtls_mpi_free
    828          
    829              return( ret );
   \       0xDE   0x4620             MOV      R0,R4
   \                     ??ecp_normalize_jac_1: (+1)
   \       0xE0   0xB007             ADD      SP,SP,#+28
   \       0xE2   0xBDF0             POP      {R4-R7,PC}       ;; return
    830          }
    831          #endif /*!MBEDTLS_ECP_MUL_COMB_ALT || !MBEDTLS_ECP_ADD_ALT */
    832          
    833          /*
    834           * Normalize jacobian coordinates of an array of (pointers to) points,
    835           * using Montgomery's trick to perform only one inversion mod P.
    836           * (See for example Cohen's "A Course in Computational Algebraic Number
    837           * Theory", Algorithm 10.3.4.)
    838           *
    839           * Warning: fails (returning an error) if one of the points is zero!
    840           * This should never happen, see choice of w in ecp_mul_comb().
    841           *
    842           * Cost: 1N(t) := 1I + (6t - 3)M + 1S
    843           */
    844          #if !defined(MBEDTLS_ECP_MUL_COMB_ALT)

   \                                 In section .text, align 2, keep-with-next
    845          static int ecp_normalize_jac_many( const mbedtls_ecp_group *grp,
    846                                             mbedtls_ecp_point *T[], size_t t_len )
    847          {
   \                     ecp_normalize_jac_many: (+1)
   \        0x0   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \        0x4   0xB089             SUB      SP,SP,#+36
   \        0x6   0x4607             MOV      R7,R0
   \        0x8   0x4688             MOV      R8,R1
   \        0xA   0x4615             MOV      R5,R2
    848              int ret;
    849              size_t i;
    850              mbedtls_mpi *c, u, Zi, ZZi;
    851          
    852              if( t_len < 2 )
   \        0xC   0x2D02             CMP      R5,#+2
   \        0xE   0xD204             BCS.N    ??ecp_normalize_jac_many_0
    853                  return( ecp_normalize_jac( grp, *T ) );
   \       0x10   0xF8D8 0x1000      LDR      R1,[R8, #+0]
   \       0x14   0x....'....        BL       ecp_normalize_jac
   \       0x18   0xE121             B.N      ??ecp_normalize_jac_many_1
    854          
    855          #if defined(MBEDTLS_ECP_NORMALIZE_JAC_MANY_ALT)
    856              if ( mbedtls_internal_ecp_grp_capable( grp ) )
    857              {
    858                  return mbedtls_internal_ecp_normalize_jac_many(grp, T, t_len);
    859              }
    860          #endif
    861          
    862              if( ( c = mbedtls_calloc( t_len, sizeof( mbedtls_mpi ) ) ) == NULL )
   \                     ??ecp_normalize_jac_many_0: (+1)
   \       0x1A   0x210C             MOVS     R1,#+12
   \       0x1C   0x4628             MOV      R0,R5
   \       0x1E   0x....'....        BL       mbedtls_calloc
   \       0x22   0x4681             MOV      R9,R0
   \       0x24   0xF1B9 0x0F00      CMP      R9,#+0
   \       0x28   0xD102             BNE.N    ??ecp_normalize_jac_many_2
    863                  return( MBEDTLS_ERR_ECP_ALLOC_FAILED );
   \       0x2A   0x....'....        LDR.W    R0,??DataTable14  ;; 0xffffb280
   \       0x2E   0xE116             B.N      ??ecp_normalize_jac_many_1
    864          
    865              mbedtls_mpi_init( &u ); mbedtls_mpi_init( &Zi ); mbedtls_mpi_init( &ZZi );
   \                     ??ecp_normalize_jac_many_2: (+1)
   \       0x30   0xA803             ADD      R0,SP,#+12
   \       0x32   0x....'....        BL       mbedtls_mpi_init
   \       0x36   0x4668             MOV      R0,SP
   \       0x38   0x....'....        BL       mbedtls_mpi_init
   \       0x3C   0xA806             ADD      R0,SP,#+24
   \       0x3E   0x....'....        BL       mbedtls_mpi_init
    866          
    867              /*
    868               * c[i] = Z_0 * ... * Z_i
    869               */
    870              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &c[0], &T[0]->Z ) );
   \       0x42   0xF8D8 0x0000      LDR      R0,[R8, #+0]
   \       0x46   0xF100 0x0118      ADD      R1,R0,#+24
   \       0x4A   0x4648             MOV      R0,R9
   \       0x4C   0x....'....        BL       mbedtls_mpi_copy
   \       0x50   0x0004             MOVS     R4,R0
   \       0x52   0xF040 0x80EC      BNE.W    ??ecp_normalize_jac_many_3
    871              for( i = 1; i < t_len; i++ )
   \       0x56   0x2601             MOVS     R6,#+1
   \       0x58   0xE020             B.N      ??ecp_normalize_jac_many_4
    872              {
    873                  MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &c[i], &c[i-1], &T[i]->Z ) );
   \                     ??ecp_normalize_jac_many_5: (+1)
   \       0x5A   0x240C             MOVS     R4,#+12
   \       0x5C   0xF858 0x0026      LDR      R0,[R8, R6, LSL #+2]
   \       0x60   0xF100 0x0218      ADD      R2,R0,#+24
   \       0x64   0xFB04 0xF006      MUL      R0,R4,R6
   \       0x68   0x4448             ADD      R0,R9,R0
   \       0x6A   0xF1A0 0x010C      SUB      R1,R0,#+12
   \       0x6E   0xFB04 0xF006      MUL      R0,R4,R6
   \       0x72   0x4448             ADD      R0,R9,R0
   \       0x74   0x....'....        BL       mbedtls_mpi_mul_mpi
   \       0x78   0x2800             CMP      R0,#+0
   \       0x7A   0xF040 0x80F3      BNE.W    ??ecp_normalize_jac_many_6
    874                  MOD_MUL( c[i] );
   \       0x7E   0x4639             MOV      R1,R7
   \       0x80   0x4374             MULS     R4,R4,R6
   \       0x82   0xEB09 0x0004      ADD      R0,R9,R4
   \       0x86   0x....'....        BL       ecp_modp
   \       0x8A   0x2800             CMP      R0,#+0
   \       0x8C   0xF040 0x80EA      BNE.W    ??ecp_normalize_jac_many_6
   \       0x90   0x....'....        LDR.W    R0,??DataTable13
   \       0x94   0x6801             LDR      R1,[R0, #+0]
   \       0x96   0x1C49             ADDS     R1,R1,#+1
   \       0x98   0x6001             STR      R1,[R0, #+0]
    875              }
   \       0x9A   0x1C76             ADDS     R6,R6,#+1
   \                     ??ecp_normalize_jac_many_4: (+1)
   \       0x9C   0x42AE             CMP      R6,R5
   \       0x9E   0xD3DC             BCC.N    ??ecp_normalize_jac_many_5
    876          
    877              /*
    878               * u = 1 / (Z_0 * ... * Z_n) mod P
    879               */
    880              MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &u, &c[t_len-1], &grp->P ) );
   \       0xA0   0x260C             MOVS     R6,#+12
   \       0xA2   0x1D3A             ADDS     R2,R7,#+4
   \       0xA4   0xFB06 0xF005      MUL      R0,R6,R5
   \       0xA8   0x4448             ADD      R0,R9,R0
   \       0xAA   0xF1A0 0x010C      SUB      R1,R0,#+12
   \       0xAE   0xA803             ADD      R0,SP,#+12
   \       0xB0   0x....'....        BL       mbedtls_mpi_inv_mod
   \       0xB4   0x0004             MOVS     R4,R0
   \       0xB6   0xF040 0x80BA      BNE.W    ??ecp_normalize_jac_many_3
    881          
    882              for( i = t_len - 1; ; i-- )
   \       0xBA   0x1E6C             SUBS     R4,R5,#+1
   \       0xBC   0xE0AB             B.N      ??ecp_normalize_jac_many_7
    883              {
    884                  /*
    885                   * Zi = 1 / Z_i mod p
    886                   * u = 1 / (Z_0 * ... * Z_i) mod P
    887                   */
    888                  if( i == 0 ) {
    889                      MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Zi, &u ) );
    890                  }
    891                  else
    892                  {
    893                      MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Zi, &u, &c[i-1]  ) ); MOD_MUL( Zi );
   \                     ??ecp_normalize_jac_many_8: (+1)
   \       0xBE   0xFB06 0xF004      MUL      R0,R6,R4
   \       0xC2   0x4448             ADD      R0,R9,R0
   \       0xC4   0xF1A0 0x020C      SUB      R2,R0,#+12
   \       0xC8   0xA903             ADD      R1,SP,#+12
   \       0xCA   0x4668             MOV      R0,SP
   \       0xCC   0x....'....        BL       mbedtls_mpi_mul_mpi
   \       0xD0   0x4683             MOV      R11,R0
   \       0xD2   0x2800             CMP      R0,#+0
   \       0xD4   0xF040 0x80AA      BNE.W    ??ecp_normalize_jac_many_9
   \       0xD8   0x4639             MOV      R1,R7
   \       0xDA   0x4668             MOV      R0,SP
   \       0xDC   0x....'....        BL       ecp_modp
   \       0xE0   0x4683             MOV      R11,R0
   \       0xE2   0x2800             CMP      R0,#+0
   \       0xE4   0xF040 0x80A2      BNE.W    ??ecp_normalize_jac_many_9
   \       0xE8   0x....'....        LDR.W    R10,??DataTable13
   \       0xEC   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \       0xF0   0x1C40             ADDS     R0,R0,#+1
   \       0xF2   0xF8CA 0x0000      STR      R0,[R10, #+0]
    894                      MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &u,  &u, &T[i]->Z ) ); MOD_MUL( u );
   \       0xF6   0xF858 0x0024      LDR      R0,[R8, R4, LSL #+2]
   \       0xFA   0xF100 0x0218      ADD      R2,R0,#+24
   \       0xFE   0xA903             ADD      R1,SP,#+12
   \      0x100   0xA803             ADD      R0,SP,#+12
   \      0x102   0x....'....        BL       mbedtls_mpi_mul_mpi
   \      0x106   0x4683             MOV      R11,R0
   \      0x108   0x2800             CMP      R0,#+0
   \      0x10A   0xF040 0x808F      BNE.W    ??ecp_normalize_jac_many_9
   \      0x10E   0x4639             MOV      R1,R7
   \      0x110   0xA803             ADD      R0,SP,#+12
   \      0x112   0x....'....        BL       ecp_modp
   \      0x116   0x4683             MOV      R11,R0
   \      0x118   0x2800             CMP      R0,#+0
   \      0x11A   0xF040 0x8087      BNE.W    ??ecp_normalize_jac_many_9
   \      0x11E   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \      0x122   0x1C40             ADDS     R0,R0,#+1
   \      0x124   0xF8CA 0x0000      STR      R0,[R10, #+0]
    895                  }
    896          
    897                  /*
    898                   * proceed as in normalize()
    899                   */
    900                  MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,      &Zi  ) ); MOD_MUL( ZZi );
   \                     ??ecp_normalize_jac_many_10: (+1)
   \      0x128   0x466A             MOV      R2,SP
   \      0x12A   0x4669             MOV      R1,SP
   \      0x12C   0xA806             ADD      R0,SP,#+24
   \      0x12E   0x....'....        BL       mbedtls_mpi_mul_mpi
   \      0x132   0x4683             MOV      R11,R0
   \      0x134   0x2800             CMP      R0,#+0
   \      0x136   0xD179             BNE.N    ??ecp_normalize_jac_many_9
   \      0x138   0x4639             MOV      R1,R7
   \      0x13A   0xA806             ADD      R0,SP,#+24
   \      0x13C   0x....'....        BL       ecp_modp
   \      0x140   0x4683             MOV      R11,R0
   \      0x142   0x2800             CMP      R0,#+0
   \      0x144   0xD172             BNE.N    ??ecp_normalize_jac_many_9
   \      0x146   0x....'....        LDR.W    R10,??DataTable13
   \      0x14A   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \      0x14E   0x1C40             ADDS     R0,R0,#+1
   \      0x150   0xF8CA 0x0000      STR      R0,[R10, #+0]
    901                  MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->X, &T[i]->X, &ZZi ) ); MOD_MUL( T[i]->X );
   \      0x154   0xAA06             ADD      R2,SP,#+24
   \      0x156   0xF858 0x1024      LDR      R1,[R8, R4, LSL #+2]
   \      0x15A   0x4608             MOV      R0,R1
   \      0x15C   0x....'....        BL       mbedtls_mpi_mul_mpi
   \      0x160   0x4683             MOV      R11,R0
   \      0x162   0x2800             CMP      R0,#+0
   \      0x164   0xD162             BNE.N    ??ecp_normalize_jac_many_9
   \      0x166   0x4639             MOV      R1,R7
   \      0x168   0xF858 0x0024      LDR      R0,[R8, R4, LSL #+2]
   \      0x16C   0x....'....        BL       ecp_modp
   \      0x170   0x4683             MOV      R11,R0
   \      0x172   0x2800             CMP      R0,#+0
   \      0x174   0xD15A             BNE.N    ??ecp_normalize_jac_many_9
   \      0x176   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \      0x17A   0x1C40             ADDS     R0,R0,#+1
   \      0x17C   0xF8CA 0x0000      STR      R0,[R10, #+0]
    902                  MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &ZZi ) ); MOD_MUL( T[i]->Y );
   \      0x180   0xAA06             ADD      R2,SP,#+24
   \      0x182   0xF858 0x0024      LDR      R0,[R8, R4, LSL #+2]
   \      0x186   0xF100 0x010C      ADD      R1,R0,#+12
   \      0x18A   0x300C             ADDS     R0,R0,#+12
   \      0x18C   0x....'....        BL       mbedtls_mpi_mul_mpi
   \      0x190   0x4683             MOV      R11,R0
   \      0x192   0x2800             CMP      R0,#+0
   \      0x194   0xD14A             BNE.N    ??ecp_normalize_jac_many_9
   \      0x196   0x4639             MOV      R1,R7
   \      0x198   0xF858 0x0024      LDR      R0,[R8, R4, LSL #+2]
   \      0x19C   0x300C             ADDS     R0,R0,#+12
   \      0x19E   0x....'....        BL       ecp_modp
   \      0x1A2   0x4683             MOV      R11,R0
   \      0x1A4   0x2800             CMP      R0,#+0
   \      0x1A6   0xD141             BNE.N    ??ecp_normalize_jac_many_9
   \      0x1A8   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \      0x1AC   0x1C40             ADDS     R0,R0,#+1
   \      0x1AE   0xF8CA 0x0000      STR      R0,[R10, #+0]
    903                  MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &Zi  ) ); MOD_MUL( T[i]->Y );
   \      0x1B2   0x466A             MOV      R2,SP
   \      0x1B4   0xF858 0x0024      LDR      R0,[R8, R4, LSL #+2]
   \      0x1B8   0xF100 0x010C      ADD      R1,R0,#+12
   \      0x1BC   0x300C             ADDS     R0,R0,#+12
   \      0x1BE   0x....'....        BL       mbedtls_mpi_mul_mpi
   \      0x1C2   0x4683             MOV      R11,R0
   \      0x1C4   0x2800             CMP      R0,#+0
   \      0x1C6   0xD131             BNE.N    ??ecp_normalize_jac_many_9
   \      0x1C8   0x4639             MOV      R1,R7
   \      0x1CA   0xF858 0x0024      LDR      R0,[R8, R4, LSL #+2]
   \      0x1CE   0x300C             ADDS     R0,R0,#+12
   \      0x1D0   0x....'....        BL       ecp_modp
   \      0x1D4   0x4683             MOV      R11,R0
   \      0x1D6   0x2800             CMP      R0,#+0
   \      0x1D8   0xD128             BNE.N    ??ecp_normalize_jac_many_9
   \      0x1DA   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \      0x1DE   0x1C40             ADDS     R0,R0,#+1
   \      0x1E0   0xF8CA 0x0000      STR      R0,[R10, #+0]
    904          
    905                  /*
    906                   * Post-precessing: reclaim some memory by shrinking coordinates
    907                   * - not storing Z (always 1)
    908                   * - shrinking other coordinates, but still keeping the same number of
    909                   *   limbs as P, as otherwise it will too likely be regrown too fast.
    910                   */
    911                  MBEDTLS_MPI_CHK( mbedtls_mpi_shrink( &T[i]->X, grp->P.n ) );
   \      0x1E4   0x68B9             LDR      R1,[R7, #+8]
   \      0x1E6   0xF858 0x0024      LDR      R0,[R8, R4, LSL #+2]
   \      0x1EA   0x....'....        BL       mbedtls_mpi_shrink
   \      0x1EE   0x4683             MOV      R11,R0
   \      0x1F0   0x2800             CMP      R0,#+0
   \      0x1F2   0xD11B             BNE.N    ??ecp_normalize_jac_many_9
    912                  MBEDTLS_MPI_CHK( mbedtls_mpi_shrink( &T[i]->Y, grp->P.n ) );
   \      0x1F4   0x68B9             LDR      R1,[R7, #+8]
   \      0x1F6   0xF858 0x0024      LDR      R0,[R8, R4, LSL #+2]
   \      0x1FA   0x300C             ADDS     R0,R0,#+12
   \      0x1FC   0x....'....        BL       mbedtls_mpi_shrink
   \      0x200   0x4683             MOV      R11,R0
   \      0x202   0x2800             CMP      R0,#+0
   \      0x204   0xD112             BNE.N    ??ecp_normalize_jac_many_9
    913                  mbedtls_mpi_free( &T[i]->Z );
   \      0x206   0xF858 0x0024      LDR      R0,[R8, R4, LSL #+2]
   \      0x20A   0x3018             ADDS     R0,R0,#+24
   \      0x20C   0x....'....        BL       mbedtls_mpi_free
    914          
    915                  if( i == 0 )
   \      0x210   0x2C00             CMP      R4,#+0
   \      0x212   0xD00B             BEQ.N    ??ecp_normalize_jac_many_9
   \      0x214   0x1E64             SUBS     R4,R4,#+1
   \                     ??ecp_normalize_jac_many_7: (+1)
   \      0x216   0x2C00             CMP      R4,#+0
   \      0x218   0xF47F 0xAF51      BNE.W    ??ecp_normalize_jac_many_8
   \      0x21C   0xA903             ADD      R1,SP,#+12
   \      0x21E   0x4668             MOV      R0,SP
   \      0x220   0x....'....        BL       mbedtls_mpi_copy
   \      0x224   0x4683             MOV      R11,R0
   \      0x226   0x2800             CMP      R0,#+0
   \      0x228   0xF43F 0xAF7E      BEQ.W    ??ecp_normalize_jac_many_10
   \                     ??ecp_normalize_jac_many_9: (+1)
   \      0x22C   0x465C             MOV      R4,R11
    916                      break;
    917              }
    918          
    919          cleanup:
    920          
    921              mbedtls_mpi_free( &u ); mbedtls_mpi_free( &Zi ); mbedtls_mpi_free( &ZZi );
   \                     ??ecp_normalize_jac_many_3: (+1)
   \      0x22E   0xA803             ADD      R0,SP,#+12
   \      0x230   0x....'....        BL       mbedtls_mpi_free
   \      0x234   0x4668             MOV      R0,SP
   \      0x236   0x....'....        BL       mbedtls_mpi_free
   \      0x23A   0xA806             ADD      R0,SP,#+24
   \      0x23C   0x....'....        BL       mbedtls_mpi_free
    922              for( i = 0; i < t_len; i++ )
   \      0x240   0x2600             MOVS     R6,#+0
   \      0x242   0xE006             B.N      ??ecp_normalize_jac_many_11
    923                  mbedtls_mpi_free( &c[i] );
   \                     ??ecp_normalize_jac_many_12: (+1)
   \      0x244   0xEB06 0x0046      ADD      R0,R6,R6, LSL #+1
   \      0x248   0xEB09 0x0080      ADD      R0,R9,R0, LSL #+2
   \      0x24C   0x....'....        BL       mbedtls_mpi_free
   \      0x250   0x1C76             ADDS     R6,R6,#+1
   \                     ??ecp_normalize_jac_many_11: (+1)
   \      0x252   0x42AE             CMP      R6,R5
   \      0x254   0xD3F6             BCC.N    ??ecp_normalize_jac_many_12
    924              mbedtls_free( c );
   \      0x256   0x4648             MOV      R0,R9
   \      0x258   0x....'....        BL       mbedtls_free
    925          
    926              return( ret );
   \      0x25C   0x4620             MOV      R0,R4
   \                     ??ecp_normalize_jac_many_1: (+1)
   \      0x25E   0xB009             ADD      SP,SP,#+36
   \      0x260   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   \                     ??ecp_normalize_jac_many_6: (+1)
   \      0x264   0x4604             MOV      R4,R0
   \      0x266   0xE7E2             B.N      ??ecp_normalize_jac_many_3
    927          }
    928          #endif /*!MBEDTLS_ECP_MUL_COMB_ALT*/
    929          
    930          /*
    931           * Conditional point inversion: Q -> -Q = (Q.X, -Q.Y, Q.Z) without leak.
    932           * "inv" must be 0 (don't invert) or 1 (invert) or the result will be invalid
    933           */
    934          #if !defined(MBEDTLS_ECP_MUL_COMB_ALT)

   \                                 In section .text, align 2, keep-with-next
    935          static int ecp_safe_invert_jac( const mbedtls_ecp_group *grp,
    936                                      mbedtls_ecp_point *Q,
    937                                      unsigned char inv )
    938          {
   \                     ecp_safe_invert_jac: (+1)
   \        0x0   0xB57F             PUSH     {R0-R6,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
   \        0x6   0x4616             MOV      R6,R2
    939              int ret;
    940              unsigned char nonzero;
    941              mbedtls_mpi mQY;
    942          
    943              mbedtls_mpi_init( &mQY );
   \        0x8   0x4668             MOV      R0,SP
   \        0xA   0x....'....        BL       mbedtls_mpi_init
    944          
    945              /* Use the fact that -Q.Y mod P = P - Q.Y unless Q.Y == 0 */
    946              MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mQY, &grp->P, &Q->Y ) );
   \        0xE   0xF105 0x020C      ADD      R2,R5,#+12
   \       0x12   0x1D21             ADDS     R1,R4,#+4
   \       0x14   0x4668             MOV      R0,SP
   \       0x16   0x....'....        BL       mbedtls_mpi_sub_mpi
   \       0x1A   0x0004             MOVS     R4,R0
   \       0x1C   0xD110             BNE.N    ??ecp_safe_invert_jac_0
    947              nonzero = mbedtls_mpi_cmp_int( &Q->Y, 0 ) != 0;
   \       0x1E   0x2100             MOVS     R1,#+0
   \       0x20   0xF105 0x000C      ADD      R0,R5,#+12
   \       0x24   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x28   0x1E40             SUBS     R0,R0,#+1
   \       0x2A   0x4180             SBCS     R0,R0,R0
   \       0x2C   0x43C0             MVNS     R0,R0
    948              MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &Q->Y, &mQY, inv & nonzero ) );
   \       0x2E   0xEA16 0x76D0      ANDS     R6,R6,R0, LSR #+31
   \       0x32   0x4632             MOV      R2,R6
   \       0x34   0x4669             MOV      R1,SP
   \       0x36   0xF105 0x000C      ADD      R0,R5,#+12
   \       0x3A   0x....'....        BL       mbedtls_mpi_safe_cond_assign
   \       0x3E   0x4604             MOV      R4,R0
    949          
    950          cleanup:
    951              mbedtls_mpi_free( &mQY );
   \                     ??ecp_safe_invert_jac_0: (+1)
   \       0x40   0x4668             MOV      R0,SP
   \       0x42   0x....'....        BL       mbedtls_mpi_free
    952          
    953              return( ret );
   \       0x46   0x4620             MOV      R0,R4
   \       0x48   0xB004             ADD      SP,SP,#+16
   \       0x4A   0xBD70             POP      {R4-R6,PC}       ;; return
    954          }
    955          #endif /*!MBEDTLS_ECP_MUL_COMB_ALT*/
    956          
    957          /*
    958           * Point doubling R = 2 P, Jacobian coordinates
    959           *
    960           * Based on http://www.hyperelliptic.org/EFD/g1p/auto-shortw-jacobian.html#doubling-dbl-1998-cmo-2 .
    961           *
    962           * We follow the variable naming fairly closely. The formula variations that trade a MUL for a SQR
    963           * (plus a few ADDs) aren't useful as our bignum implementation doesn't distinguish squaring.
    964           *
    965           * Standard optimizations are applied when curve parameter A is one of { 0, -3 }.
    966           *
    967           * Cost: 1D := 3M + 4S          (A ==  0)
    968           *             4M + 4S          (A == -3)
    969           *             3M + 6S + 1a     otherwise
    970           */
    971          #if !defined(MBEDTLS_ECP_ADD_ALT)

   \                                 In section .text, align 2, keep-with-next
    972          static int ecp_double_jac( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
    973                                     const mbedtls_ecp_point *P )
    974          {
   \                     ecp_double_jac: (+1)
   \        0x0   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \        0x4   0xB08C             SUB      SP,SP,#+48
   \        0x6   0x4606             MOV      R6,R0
   \        0x8   0x460F             MOV      R7,R1
   \        0xA   0x4690             MOV      R8,R2
    975              int ret;
    976              mbedtls_mpi M, S, T, U;
    977          
    978          #if defined(MBEDTLS_SELF_TEST)
    979              dbl_count++;
   \        0xC   0x....'....        LDR.W    R0,??DataTable14_1
   \       0x10   0x6801             LDR      R1,[R0, #+0]
   \       0x12   0x1C49             ADDS     R1,R1,#+1
   \       0x14   0x6001             STR      R1,[R0, #+0]
    980          #endif
    981          
    982          #if defined(MBEDTLS_ECP_DOUBLE_JAC_ALT)
    983              if ( mbedtls_internal_ecp_grp_capable( grp ) )
    984              {
    985                  return mbedtls_internal_ecp_double_jac( grp, R, P );
    986              }
    987          #endif /* MBEDTLS_ECP_DOUBLE_JAC_ALT */
    988          
    989              mbedtls_mpi_init( &M ); mbedtls_mpi_init( &S ); mbedtls_mpi_init( &T ); mbedtls_mpi_init( &U );
   \       0x16   0xA809             ADD      R0,SP,#+36
   \       0x18   0x....'....        BL       mbedtls_mpi_init
   \       0x1C   0x4668             MOV      R0,SP
   \       0x1E   0x....'....        BL       mbedtls_mpi_init
   \       0x22   0xA803             ADD      R0,SP,#+12
   \       0x24   0x....'....        BL       mbedtls_mpi_init
   \       0x28   0xA806             ADD      R0,SP,#+24
   \       0x2A   0x....'....        BL       mbedtls_mpi_init
    990          
    991              /* Special case for A = -3 */
    992              if( grp->A.p == NULL )
   \       0x2E   0x69B0             LDR      R0,[R6, #+24]
   \       0x30   0x2800             CMP      R0,#+0
   \       0x32   0xD148             BNE.N    ??ecp_double_jac_0
    993              {
    994                  /* M = 3(X + Z^2)(X - Z^2) */
    995                  MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
   \       0x34   0xF108 0x0218      ADD      R2,R8,#+24
   \       0x38   0xF108 0x0118      ADD      R1,R8,#+24
   \       0x3C   0x4668             MOV      R0,SP
   \       0x3E   0x....'....        BL       mbedtls_mpi_mul_mpi
   \       0x42   0x0005             MOVS     R5,R0
   \       0x44   0xF040 0x8240      BNE.W    ??ecp_double_jac_1
   \       0x48   0x4631             MOV      R1,R6
   \       0x4A   0x4668             MOV      R0,SP
   \       0x4C   0x....'....        BL       ecp_modp
   \       0x50   0x0005             MOVS     R5,R0
   \       0x52   0xF040 0x8239      BNE.W    ??ecp_double_jac_1
   \       0x56   0x....'....        LDR.W    R9,??DataTable13
   \       0x5A   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \       0x5E   0x1C40             ADDS     R0,R0,#+1
   \       0x60   0xF8C9 0x0000      STR      R0,[R9, #+0]
    996                  MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T,  &P->X,  &S      ) ); MOD_ADD( T );
   \       0x64   0x466A             MOV      R2,SP
   \       0x66   0x4641             MOV      R1,R8
   \       0x68   0xA803             ADD      R0,SP,#+12
   \       0x6A   0x....'....        BL       mbedtls_mpi_add_mpi
   \       0x6E   0x0005             MOVS     R5,R0
   \       0x70   0xF040 0x822A      BNE.W    ??ecp_double_jac_1
   \                     ??ecp_double_jac_2: (+1)
   \       0x74   0x1D31             ADDS     R1,R6,#+4
   \       0x76   0xA803             ADD      R0,SP,#+12
   \       0x78   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \       0x7C   0x2800             CMP      R0,#+0
   \       0x7E   0xF100 0x80AB      BMI.W    ??ecp_double_jac_3
   \       0x82   0x1D32             ADDS     R2,R6,#+4
   \       0x84   0xA903             ADD      R1,SP,#+12
   \       0x86   0xA803             ADD      R0,SP,#+12
   \       0x88   0x....'....        BL       mbedtls_mpi_sub_abs
   \       0x8C   0x0005             MOVS     R5,R0
   \       0x8E   0xF040 0x821B      BNE.W    ??ecp_double_jac_1
   \       0x92   0xE7EF             B.N      ??ecp_double_jac_2
    997                  MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U,  &P->X,  &S      ) ); MOD_SUB( U );
   \                     ??ecp_double_jac_4: (+1)
   \       0x94   0x2100             MOVS     R1,#+0
   \       0x96   0xA806             ADD      R0,SP,#+24
   \       0x98   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x9C   0x2800             CMP      R0,#+0
   \       0x9E   0xF000 0x80A7      BEQ.W    ??ecp_double_jac_5
   \       0xA2   0x1D32             ADDS     R2,R6,#+4
   \       0xA4   0xA906             ADD      R1,SP,#+24
   \       0xA6   0xA806             ADD      R0,SP,#+24
   \       0xA8   0x....'....        BL       mbedtls_mpi_add_mpi
   \       0xAC   0x0005             MOVS     R5,R0
   \       0xAE   0xF040 0x820B      BNE.W    ??ecp_double_jac_1
   \       0xB2   0xE099             B.N      ??ecp_double_jac_6
    998                  MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &U      ) ); MOD_MUL( S );
    999                  MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
   \                     ??ecp_double_jac_7: (+1)
   \       0xB4   0x1D32             ADDS     R2,R6,#+4
   \       0xB6   0xA909             ADD      R1,SP,#+36
   \       0xB8   0xA809             ADD      R0,SP,#+36
   \       0xBA   0x....'....        BL       mbedtls_mpi_sub_abs
   \       0xBE   0x0005             MOVS     R5,R0
   \       0xC0   0xF040 0x8202      BNE.W    ??ecp_double_jac_1
   \       0xC4   0xE0B0             B.N      ??ecp_double_jac_8
   1000              }
   1001              else
   1002              {
   1003                  /* M = 3.X^2 */
   1004                  MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &P->X   ) ); MOD_MUL( S );
   \                     ??ecp_double_jac_0: (+1)
   \       0xC6   0x4642             MOV      R2,R8
   \       0xC8   0x4641             MOV      R1,R8
   \       0xCA   0x4668             MOV      R0,SP
   \       0xCC   0x....'....        BL       mbedtls_mpi_mul_mpi
   \       0xD0   0x0005             MOVS     R5,R0
   \       0xD2   0xF040 0x81F9      BNE.W    ??ecp_double_jac_1
   \       0xD6   0x4631             MOV      R1,R6
   \       0xD8   0x4668             MOV      R0,SP
   \       0xDA   0x....'....        BL       ecp_modp
   \       0xDE   0x0005             MOVS     R5,R0
   \       0xE0   0xF040 0x81F2      BNE.W    ??ecp_double_jac_1
   \       0xE4   0x....'....        LDR.W    R10,??DataTable13
   \       0xE8   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \       0xEC   0x1C40             ADDS     R0,R0,#+1
   \       0xEE   0xF8CA 0x0000      STR      R0,[R10, #+0]
   1005                  MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
   \       0xF2   0x2203             MOVS     R2,#+3
   \       0xF4   0x4669             MOV      R1,SP
   \       0xF6   0xA809             ADD      R0,SP,#+36
   \       0xF8   0x....'....        BL       mbedtls_mpi_mul_int
   \       0xFC   0x0005             MOVS     R5,R0
   \       0xFE   0xF040 0x81E3      BNE.W    ??ecp_double_jac_1
   \                     ??ecp_double_jac_9: (+1)
   \      0x102   0x1D31             ADDS     R1,R6,#+4
   \      0x104   0xA809             ADD      R0,SP,#+36
   \      0x106   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \      0x10A   0x2800             CMP      R0,#+0
   \      0x10C   0xF100 0x80C0      BMI.W    ??ecp_double_jac_10
   \      0x110   0x1D32             ADDS     R2,R6,#+4
   \      0x112   0xA909             ADD      R1,SP,#+36
   \      0x114   0xA809             ADD      R0,SP,#+36
   \      0x116   0x....'....        BL       mbedtls_mpi_sub_abs
   \      0x11A   0x0005             MOVS     R5,R0
   \      0x11C   0xF040 0x81D4      BNE.W    ??ecp_double_jac_1
   \      0x120   0xE7EF             B.N      ??ecp_double_jac_9
   1006          
   1007                  /* Optimize away for "koblitz" curves with A = 0 */
   1008                  if( mbedtls_mpi_cmp_int( &grp->A, 0 ) != 0 )
   1009                  {
   1010                      /* M += A.Z^4 */
   1011                      MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
   1012                      MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &S,     &S      ) ); MOD_MUL( T );
   1013                      MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &grp->A ) ); MOD_MUL( S );
   1014                      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &M,  &M,     &S      ) ); MOD_ADD( M );
   1015                  }
   1016              }
   1017          
   1018              /* S = 4.X.Y^2 */
   1019              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &P->Y,  &P->Y   ) ); MOD_MUL( T );
   1020              MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T,  1               ) ); MOD_ADD( T );
   1021              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &T      ) ); MOD_MUL( S );
   1022              MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &S,  1               ) ); MOD_ADD( S );
   \                     ??ecp_double_jac_11: (+1)
   \      0x122   0x1D32             ADDS     R2,R6,#+4
   \      0x124   0x4669             MOV      R1,SP
   \      0x126   0x4668             MOV      R0,SP
   \      0x128   0x....'....        BL       mbedtls_mpi_sub_abs
   \      0x12C   0x0005             MOVS     R5,R0
   \      0x12E   0xF040 0x81CB      BNE.W    ??ecp_double_jac_1
   \      0x132   0xE124             B.N      ??ecp_double_jac_12
   1023          
   1024              /* U = 8.Y^4 */
   1025              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &T,     &T      ) ); MOD_MUL( U );
   1026              MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
   \                     ??ecp_double_jac_13: (+1)
   \      0x134   0x1D32             ADDS     R2,R6,#+4
   \      0x136   0xA906             ADD      R1,SP,#+24
   \      0x138   0xA806             ADD      R0,SP,#+24
   \      0x13A   0x....'....        BL       mbedtls_mpi_sub_abs
   \      0x13E   0x0005             MOVS     R5,R0
   \      0x140   0xF040 0x81C2      BNE.W    ??ecp_double_jac_1
   \      0x144   0xE13B             B.N      ??ecp_double_jac_14
   1027          
   1028              /* T = M^2 - 2.S */
   1029              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &M,     &M      ) ); MOD_MUL( T );
   1030              MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
   \                     ??ecp_double_jac_15: (+1)
   \      0x146   0x2100             MOVS     R1,#+0
   \      0x148   0xA803             ADD      R0,SP,#+12
   \      0x14A   0x....'....        BL       mbedtls_mpi_cmp_int
   \      0x14E   0x2800             CMP      R0,#+0
   \      0x150   0xF000 0x8157      BEQ.W    ??ecp_double_jac_16
   \      0x154   0x1D32             ADDS     R2,R6,#+4
   \      0x156   0xA903             ADD      R1,SP,#+12
   \      0x158   0xA803             ADD      R0,SP,#+12
   \      0x15A   0x....'....        BL       mbedtls_mpi_add_mpi
   \      0x15E   0x0005             MOVS     R5,R0
   \      0x160   0xF040 0x81B2      BNE.W    ??ecp_double_jac_1
   \      0x164   0xE149             B.N      ??ecp_double_jac_17
   1031              MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
   \                     ??ecp_double_jac_18: (+1)
   \      0x166   0x2100             MOVS     R1,#+0
   \      0x168   0xA803             ADD      R0,SP,#+12
   \      0x16A   0x....'....        BL       mbedtls_mpi_cmp_int
   \      0x16E   0x2800             CMP      R0,#+0
   \      0x170   0xF000 0x8152      BEQ.W    ??ecp_double_jac_19
   \      0x174   0x1D32             ADDS     R2,R6,#+4
   \      0x176   0xA903             ADD      R1,SP,#+12
   \      0x178   0xA803             ADD      R0,SP,#+12
   \      0x17A   0x....'....        BL       mbedtls_mpi_add_mpi
   \      0x17E   0x0005             MOVS     R5,R0
   \      0x180   0xF040 0x81A2      BNE.W    ??ecp_double_jac_1
   \      0x184   0xE144             B.N      ??ecp_double_jac_20
   1032          
   1033              /* S = M(S - T) - U */
   1034              MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &T      ) ); MOD_SUB( S );
   \                     ??ecp_double_jac_21: (+1)
   \      0x186   0x2100             MOVS     R1,#+0
   \      0x188   0x4668             MOV      R0,SP
   \      0x18A   0x....'....        BL       mbedtls_mpi_cmp_int
   \      0x18E   0x2800             CMP      R0,#+0
   \      0x190   0xF000 0x814D      BEQ.W    ??ecp_double_jac_22
   \      0x194   0x1D32             ADDS     R2,R6,#+4
   \      0x196   0x4669             MOV      R1,SP
   \      0x198   0x4668             MOV      R0,SP
   \      0x19A   0x....'....        BL       mbedtls_mpi_add_mpi
   \      0x19E   0x0005             MOVS     R5,R0
   \      0x1A0   0xF040 0x8192      BNE.W    ??ecp_double_jac_1
   \      0x1A4   0xE13F             B.N      ??ecp_double_jac_23
   1035              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &S,     &M      ) ); MOD_MUL( S );
   1036              MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &U      ) ); MOD_SUB( S );
   \                     ??ecp_double_jac_24: (+1)
   \      0x1A6   0x2100             MOVS     R1,#+0
   \      0x1A8   0x4668             MOV      R0,SP
   \      0x1AA   0x....'....        BL       mbedtls_mpi_cmp_int
   \      0x1AE   0x2800             CMP      R0,#+0
   \      0x1B0   0xF000 0x8158      BEQ.W    ??ecp_double_jac_25
   \      0x1B4   0x1D32             ADDS     R2,R6,#+4
   \      0x1B6   0x4669             MOV      R1,SP
   \      0x1B8   0x4668             MOV      R0,SP
   \      0x1BA   0x....'....        BL       mbedtls_mpi_add_mpi
   \      0x1BE   0x0005             MOVS     R5,R0
   \      0x1C0   0xF040 0x8182      BNE.W    ??ecp_double_jac_1
   \      0x1C4   0xE14A             B.N      ??ecp_double_jac_26
   1037          
   1038              /* U = 2.Y.Z */
   1039              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &P->Y,  &P->Z   ) ); MOD_MUL( U );
   1040              MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
   \                     ??ecp_double_jac_27: (+1)
   \      0x1C6   0x1D32             ADDS     R2,R6,#+4
   \      0x1C8   0xA906             ADD      R1,SP,#+24
   \      0x1CA   0xA806             ADD      R0,SP,#+24
   \      0x1CC   0x....'....        BL       mbedtls_mpi_sub_abs
   \      0x1D0   0x0005             MOVS     R5,R0
   \      0x1D2   0xF040 0x8179      BNE.W    ??ecp_double_jac_1
   \      0x1D6   0xE15D             B.N      ??ecp_double_jac_28
   \                     ??ecp_double_jac_3: (+1)
   \      0x1D8   0x466A             MOV      R2,SP
   \      0x1DA   0x4641             MOV      R1,R8
   \      0x1DC   0xA806             ADD      R0,SP,#+24
   \      0x1DE   0x....'....        BL       mbedtls_mpi_sub_mpi
   \      0x1E2   0x0005             MOVS     R5,R0
   \      0x1E4   0xF040 0x8170      BNE.W    ??ecp_double_jac_1
   \                     ??ecp_double_jac_6: (+1)
   \      0x1E8   0x9806             LDR      R0,[SP, #+24]
   \      0x1EA   0x2800             CMP      R0,#+0
   \      0x1EC   0xF53F 0xAF52      BMI.W    ??ecp_double_jac_4
   \                     ??ecp_double_jac_5: (+1)
   \      0x1F0   0xAA06             ADD      R2,SP,#+24
   \      0x1F2   0xA903             ADD      R1,SP,#+12
   \      0x1F4   0x4668             MOV      R0,SP
   \      0x1F6   0x....'....        BL       mbedtls_mpi_mul_mpi
   \      0x1FA   0x0005             MOVS     R5,R0
   \      0x1FC   0xF040 0x8164      BNE.W    ??ecp_double_jac_1
   \      0x200   0x4631             MOV      R1,R6
   \      0x202   0x4668             MOV      R0,SP
   \      0x204   0x....'....        BL       ecp_modp
   \      0x208   0x0005             MOVS     R5,R0
   \      0x20A   0xF040 0x815D      BNE.W    ??ecp_double_jac_1
   \      0x20E   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \      0x212   0x1C40             ADDS     R0,R0,#+1
   \      0x214   0xF8C9 0x0000      STR      R0,[R9, #+0]
   \      0x218   0x2203             MOVS     R2,#+3
   \      0x21A   0x4669             MOV      R1,SP
   \      0x21C   0xA809             ADD      R0,SP,#+36
   \      0x21E   0x....'....        BL       mbedtls_mpi_mul_int
   \      0x222   0x0005             MOVS     R5,R0
   \      0x224   0xF040 0x8150      BNE.W    ??ecp_double_jac_1
   \                     ??ecp_double_jac_8: (+1)
   \      0x228   0x1D31             ADDS     R1,R6,#+4
   \      0x22A   0xA809             ADD      R0,SP,#+36
   \      0x22C   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \      0x230   0x2800             CMP      R0,#+0
   \      0x232   0xF57F 0xAF3F      BPL.W    ??ecp_double_jac_7
   \                     ??ecp_double_jac_29: (+1)
   \      0x236   0xF108 0x020C      ADD      R2,R8,#+12
   \      0x23A   0xF108 0x010C      ADD      R1,R8,#+12
   \      0x23E   0xA803             ADD      R0,SP,#+12
   \      0x240   0x....'....        BL       mbedtls_mpi_mul_mpi
   \      0x244   0x0005             MOVS     R5,R0
   \      0x246   0xF040 0x813F      BNE.W    ??ecp_double_jac_1
   \      0x24A   0x4631             MOV      R1,R6
   \      0x24C   0xA803             ADD      R0,SP,#+12
   \      0x24E   0x....'....        BL       ecp_modp
   \      0x252   0x0005             MOVS     R5,R0
   \      0x254   0xF040 0x8138      BNE.W    ??ecp_double_jac_1
   \      0x258   0x....'....        LDR.W    R0,??DataTable13
   \      0x25C   0x4604             MOV      R4,R0
   \      0x25E   0x6820             LDR      R0,[R4, #+0]
   \      0x260   0x1C40             ADDS     R0,R0,#+1
   \      0x262   0x6020             STR      R0,[R4, #+0]
   \      0x264   0x2101             MOVS     R1,#+1
   \      0x266   0xA803             ADD      R0,SP,#+12
   \      0x268   0x....'....        BL       mbedtls_mpi_shift_l
   \      0x26C   0x0005             MOVS     R5,R0
   \      0x26E   0xF040 0x812B      BNE.W    ??ecp_double_jac_1
   \                     ??ecp_double_jac_30: (+1)
   \      0x272   0x1D31             ADDS     R1,R6,#+4
   \      0x274   0xA803             ADD      R0,SP,#+12
   \      0x276   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \      0x27A   0x2800             CMP      R0,#+0
   \      0x27C   0xD466             BMI.N    ??ecp_double_jac_31
   \      0x27E   0x1D32             ADDS     R2,R6,#+4
   \      0x280   0xA903             ADD      R1,SP,#+12
   \      0x282   0xA803             ADD      R0,SP,#+12
   \      0x284   0x....'....        BL       mbedtls_mpi_sub_abs
   \      0x288   0x0005             MOVS     R5,R0
   \      0x28A   0xF040 0x811D      BNE.W    ??ecp_double_jac_1
   \      0x28E   0xE7F0             B.N      ??ecp_double_jac_30
   \                     ??ecp_double_jac_10: (+1)
   \      0x290   0x2100             MOVS     R1,#+0
   \      0x292   0xF106 0x0010      ADD      R0,R6,#+16
   \      0x296   0x....'....        BL       mbedtls_mpi_cmp_int
   \      0x29A   0x2800             CMP      R0,#+0
   \      0x29C   0xD0CB             BEQ.N    ??ecp_double_jac_29
   \      0x29E   0xF108 0x0218      ADD      R2,R8,#+24
   \      0x2A2   0xF108 0x0118      ADD      R1,R8,#+24
   \      0x2A6   0x4668             MOV      R0,SP
   \      0x2A8   0x....'....        BL       mbedtls_mpi_mul_mpi
   \      0x2AC   0x0005             MOVS     R5,R0
   \      0x2AE   0xF040 0x810B      BNE.W    ??ecp_double_jac_1
   \      0x2B2   0x4631             MOV      R1,R6
   \      0x2B4   0x4668             MOV      R0,SP
   \      0x2B6   0x....'....        BL       ecp_modp
   \      0x2BA   0x0005             MOVS     R5,R0
   \      0x2BC   0xF040 0x8104      BNE.W    ??ecp_double_jac_1
   \      0x2C0   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \      0x2C4   0x1C40             ADDS     R0,R0,#+1
   \      0x2C6   0xF8CA 0x0000      STR      R0,[R10, #+0]
   \      0x2CA   0x466A             MOV      R2,SP
   \      0x2CC   0x4669             MOV      R1,SP
   \      0x2CE   0xA803             ADD      R0,SP,#+12
   \      0x2D0   0x....'....        BL       mbedtls_mpi_mul_mpi
   \      0x2D4   0x0005             MOVS     R5,R0
   \      0x2D6   0xF040 0x80F7      BNE.W    ??ecp_double_jac_1
   \      0x2DA   0x4631             MOV      R1,R6
   \      0x2DC   0xA803             ADD      R0,SP,#+12
   \      0x2DE   0x....'....        BL       ecp_modp
   \      0x2E2   0x0005             MOVS     R5,R0
   \      0x2E4   0xF040 0x80F0      BNE.W    ??ecp_double_jac_1
   \      0x2E8   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \      0x2EC   0x1C40             ADDS     R0,R0,#+1
   \      0x2EE   0xF8CA 0x0000      STR      R0,[R10, #+0]
   \      0x2F2   0xF106 0x0210      ADD      R2,R6,#+16
   \      0x2F6   0xA903             ADD      R1,SP,#+12
   \      0x2F8   0x4668             MOV      R0,SP
   \      0x2FA   0x....'....        BL       mbedtls_mpi_mul_mpi
   \      0x2FE   0x0005             MOVS     R5,R0
   \      0x300   0xF040 0x80E2      BNE.W    ??ecp_double_jac_1
   \      0x304   0x4631             MOV      R1,R6
   \      0x306   0x4668             MOV      R0,SP
   \      0x308   0x....'....        BL       ecp_modp
   \      0x30C   0x0005             MOVS     R5,R0
   \      0x30E   0xF040 0x80DB      BNE.W    ??ecp_double_jac_1
   \      0x312   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \      0x316   0x1C40             ADDS     R0,R0,#+1
   \      0x318   0xF8CA 0x0000      STR      R0,[R10, #+0]
   \      0x31C   0x466A             MOV      R2,SP
   \      0x31E   0xA909             ADD      R1,SP,#+36
   \      0x320   0xA809             ADD      R0,SP,#+36
   \      0x322   0x....'....        BL       mbedtls_mpi_add_mpi
   \      0x326   0x0005             MOVS     R5,R0
   \      0x328   0xF040 0x80CE      BNE.W    ??ecp_double_jac_1
   \                     ??ecp_double_jac_32: (+1)
   \      0x32C   0x1D31             ADDS     R1,R6,#+4
   \      0x32E   0xA809             ADD      R0,SP,#+36
   \      0x330   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \      0x334   0x2800             CMP      R0,#+0
   \      0x336   0xF53F 0xAF7E      BMI.W    ??ecp_double_jac_29
   \      0x33A   0x1D32             ADDS     R2,R6,#+4
   \      0x33C   0xA909             ADD      R1,SP,#+36
   \      0x33E   0xA809             ADD      R0,SP,#+36
   \      0x340   0x....'....        BL       mbedtls_mpi_sub_abs
   \      0x344   0x0005             MOVS     R5,R0
   \      0x346   0xF040 0x80BF      BNE.W    ??ecp_double_jac_1
   \      0x34A   0xE7EF             B.N      ??ecp_double_jac_32
   \                     ??ecp_double_jac_31: (+1)
   \      0x34C   0xAA03             ADD      R2,SP,#+12
   \      0x34E   0x4641             MOV      R1,R8
   \      0x350   0x4668             MOV      R0,SP
   \      0x352   0x....'....        BL       mbedtls_mpi_mul_mpi
   \      0x356   0x0005             MOVS     R5,R0
   \      0x358   0xF040 0x80B6      BNE.W    ??ecp_double_jac_1
   \      0x35C   0x4631             MOV      R1,R6
   \      0x35E   0x4668             MOV      R0,SP
   \      0x360   0x....'....        BL       ecp_modp
   \      0x364   0x0005             MOVS     R5,R0
   \      0x366   0xF040 0x80AF      BNE.W    ??ecp_double_jac_1
   \      0x36A   0x6820             LDR      R0,[R4, #+0]
   \      0x36C   0x1C40             ADDS     R0,R0,#+1
   \      0x36E   0x6020             STR      R0,[R4, #+0]
   \      0x370   0x2101             MOVS     R1,#+1
   \      0x372   0x4668             MOV      R0,SP
   \      0x374   0x....'....        BL       mbedtls_mpi_shift_l
   \      0x378   0x0005             MOVS     R5,R0
   \      0x37A   0xF040 0x80A5      BNE.W    ??ecp_double_jac_1
   \                     ??ecp_double_jac_12: (+1)
   \      0x37E   0x1D31             ADDS     R1,R6,#+4
   \      0x380   0x4668             MOV      R0,SP
   \      0x382   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \      0x386   0x2800             CMP      R0,#+0
   \      0x388   0xF57F 0xAECB      BPL.W    ??ecp_double_jac_11
   \      0x38C   0xAA03             ADD      R2,SP,#+12
   \      0x38E   0xA903             ADD      R1,SP,#+12
   \      0x390   0xA806             ADD      R0,SP,#+24
   \      0x392   0x....'....        BL       mbedtls_mpi_mul_mpi
   \      0x396   0x0005             MOVS     R5,R0
   \      0x398   0xF040 0x8096      BNE.W    ??ecp_double_jac_1
   \      0x39C   0x4631             MOV      R1,R6
   \      0x39E   0xA806             ADD      R0,SP,#+24
   \      0x3A0   0x....'....        BL       ecp_modp
   \      0x3A4   0x0005             MOVS     R5,R0
   \      0x3A6   0xF040 0x808F      BNE.W    ??ecp_double_jac_1
   \      0x3AA   0x6820             LDR      R0,[R4, #+0]
   \      0x3AC   0x1C40             ADDS     R0,R0,#+1
   \      0x3AE   0x6020             STR      R0,[R4, #+0]
   \      0x3B0   0x2101             MOVS     R1,#+1
   \      0x3B2   0xA806             ADD      R0,SP,#+24
   \      0x3B4   0x....'....        BL       mbedtls_mpi_shift_l
   \      0x3B8   0x0005             MOVS     R5,R0
   \      0x3BA   0xF040 0x8085      BNE.W    ??ecp_double_jac_1
   \                     ??ecp_double_jac_14: (+1)
   \      0x3BE   0x1D31             ADDS     R1,R6,#+4
   \      0x3C0   0xA806             ADD      R0,SP,#+24
   \      0x3C2   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \      0x3C6   0x2800             CMP      R0,#+0
   \      0x3C8   0xF57F 0xAEB4      BPL.W    ??ecp_double_jac_13
   \      0x3CC   0xAA09             ADD      R2,SP,#+36
   \      0x3CE   0xA909             ADD      R1,SP,#+36
   \      0x3D0   0xA803             ADD      R0,SP,#+12
   \      0x3D2   0x....'....        BL       mbedtls_mpi_mul_mpi
   \      0x3D6   0x0005             MOVS     R5,R0
   \      0x3D8   0xD176             BNE.N    ??ecp_double_jac_1
   \      0x3DA   0x4631             MOV      R1,R6
   \      0x3DC   0xA803             ADD      R0,SP,#+12
   \      0x3DE   0x....'....        BL       ecp_modp
   \      0x3E2   0x0005             MOVS     R5,R0
   \      0x3E4   0xD170             BNE.N    ??ecp_double_jac_1
   \      0x3E6   0x6820             LDR      R0,[R4, #+0]
   \      0x3E8   0x1C40             ADDS     R0,R0,#+1
   \      0x3EA   0x6020             STR      R0,[R4, #+0]
   \      0x3EC   0x466A             MOV      R2,SP
   \      0x3EE   0xA903             ADD      R1,SP,#+12
   \      0x3F0   0xA803             ADD      R0,SP,#+12
   \      0x3F2   0x....'....        BL       mbedtls_mpi_sub_mpi
   \      0x3F6   0x0005             MOVS     R5,R0
   \      0x3F8   0xD166             BNE.N    ??ecp_double_jac_1
   \                     ??ecp_double_jac_17: (+1)
   \      0x3FA   0x9803             LDR      R0,[SP, #+12]
   \      0x3FC   0x2800             CMP      R0,#+0
   \      0x3FE   0xF53F 0xAEA2      BMI.W    ??ecp_double_jac_15
   \                     ??ecp_double_jac_16: (+1)
   \      0x402   0x466A             MOV      R2,SP
   \      0x404   0xA903             ADD      R1,SP,#+12
   \      0x406   0xA803             ADD      R0,SP,#+12
   \      0x408   0x....'....        BL       mbedtls_mpi_sub_mpi
   \      0x40C   0x0005             MOVS     R5,R0
   \      0x40E   0xD15B             BNE.N    ??ecp_double_jac_1
   \                     ??ecp_double_jac_20: (+1)
   \      0x410   0x9803             LDR      R0,[SP, #+12]
   \      0x412   0x2800             CMP      R0,#+0
   \      0x414   0xF53F 0xAEA7      BMI.W    ??ecp_double_jac_18
   \                     ??ecp_double_jac_19: (+1)
   \      0x418   0xAA03             ADD      R2,SP,#+12
   \      0x41A   0x4669             MOV      R1,SP
   \      0x41C   0x4668             MOV      R0,SP
   \      0x41E   0x....'....        BL       mbedtls_mpi_sub_mpi
   \      0x422   0x0005             MOVS     R5,R0
   \      0x424   0xD150             BNE.N    ??ecp_double_jac_1
   \                     ??ecp_double_jac_23: (+1)
   \      0x426   0x9800             LDR      R0,[SP, #+0]
   \      0x428   0x2800             CMP      R0,#+0
   \      0x42A   0xF53F 0xAEAC      BMI.W    ??ecp_double_jac_21
   \                     ??ecp_double_jac_22: (+1)
   \      0x42E   0xAA09             ADD      R2,SP,#+36
   \      0x430   0x4669             MOV      R1,SP
   \      0x432   0x4668             MOV      R0,SP
   \      0x434   0x....'....        BL       mbedtls_mpi_mul_mpi
   \      0x438   0x0005             MOVS     R5,R0
   \      0x43A   0xD145             BNE.N    ??ecp_double_jac_1
   \      0x43C   0x4631             MOV      R1,R6
   \      0x43E   0x4668             MOV      R0,SP
   \      0x440   0x....'....        BL       ecp_modp
   \      0x444   0x0005             MOVS     R5,R0
   \      0x446   0xD13F             BNE.N    ??ecp_double_jac_1
   \      0x448   0x6820             LDR      R0,[R4, #+0]
   \      0x44A   0x1C40             ADDS     R0,R0,#+1
   \      0x44C   0x6020             STR      R0,[R4, #+0]
   \      0x44E   0xAA06             ADD      R2,SP,#+24
   \      0x450   0x4669             MOV      R1,SP
   \      0x452   0x4668             MOV      R0,SP
   \      0x454   0x....'....        BL       mbedtls_mpi_sub_mpi
   \      0x458   0x0005             MOVS     R5,R0
   \      0x45A   0xD135             BNE.N    ??ecp_double_jac_1
   \                     ??ecp_double_jac_26: (+1)
   \      0x45C   0x9800             LDR      R0,[SP, #+0]
   \      0x45E   0x2800             CMP      R0,#+0
   \      0x460   0xF53F 0xAEA1      BMI.W    ??ecp_double_jac_24
   \                     ??ecp_double_jac_25: (+1)
   \      0x464   0xF108 0x0218      ADD      R2,R8,#+24
   \      0x468   0xF108 0x010C      ADD      R1,R8,#+12
   \      0x46C   0xA806             ADD      R0,SP,#+24
   \      0x46E   0x....'....        BL       mbedtls_mpi_mul_mpi
   \      0x472   0x0005             MOVS     R5,R0
   \      0x474   0xD128             BNE.N    ??ecp_double_jac_1
   \      0x476   0x4631             MOV      R1,R6
   \      0x478   0xA806             ADD      R0,SP,#+24
   \      0x47A   0x....'....        BL       ecp_modp
   \      0x47E   0x0005             MOVS     R5,R0
   \      0x480   0xD122             BNE.N    ??ecp_double_jac_1
   \      0x482   0x6820             LDR      R0,[R4, #+0]
   \      0x484   0x1C40             ADDS     R0,R0,#+1
   \      0x486   0x6020             STR      R0,[R4, #+0]
   \      0x488   0x2101             MOVS     R1,#+1
   \      0x48A   0xA806             ADD      R0,SP,#+24
   \      0x48C   0x....'....        BL       mbedtls_mpi_shift_l
   \      0x490   0x0005             MOVS     R5,R0
   \      0x492   0xD119             BNE.N    ??ecp_double_jac_1
   \                     ??ecp_double_jac_28: (+1)
   \      0x494   0x1D31             ADDS     R1,R6,#+4
   \      0x496   0xA806             ADD      R0,SP,#+24
   \      0x498   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \      0x49C   0x2800             CMP      R0,#+0
   \      0x49E   0xF57F 0xAE92      BPL.W    ??ecp_double_jac_27
   1041          
   1042              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &T ) );
   \      0x4A2   0xA903             ADD      R1,SP,#+12
   \      0x4A4   0x4638             MOV      R0,R7
   \      0x4A6   0x....'....        BL       mbedtls_mpi_copy
   \      0x4AA   0x0005             MOVS     R5,R0
   \      0x4AC   0xD10C             BNE.N    ??ecp_double_jac_1
   1043              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &S ) );
   \      0x4AE   0x4669             MOV      R1,SP
   \      0x4B0   0xF107 0x000C      ADD      R0,R7,#+12
   \      0x4B4   0x....'....        BL       mbedtls_mpi_copy
   \      0x4B8   0x0005             MOVS     R5,R0
   \      0x4BA   0xD105             BNE.N    ??ecp_double_jac_1
   1044              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &U ) );
   \      0x4BC   0xA906             ADD      R1,SP,#+24
   \      0x4BE   0xF107 0x0018      ADD      R0,R7,#+24
   \      0x4C2   0x....'....        BL       mbedtls_mpi_copy
   \      0x4C6   0x4605             MOV      R5,R0
   1045          
   1046          cleanup:
   1047              mbedtls_mpi_free( &M ); mbedtls_mpi_free( &S ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &U );
   \                     ??ecp_double_jac_1: (+1)
   \      0x4C8   0xA809             ADD      R0,SP,#+36
   \      0x4CA   0x....'....        BL       mbedtls_mpi_free
   \      0x4CE   0x4668             MOV      R0,SP
   \      0x4D0   0x....'....        BL       mbedtls_mpi_free
   \      0x4D4   0xA803             ADD      R0,SP,#+12
   \      0x4D6   0x....'....        BL       mbedtls_mpi_free
   \      0x4DA   0xA806             ADD      R0,SP,#+24
   \      0x4DC   0x....'....        BL       mbedtls_mpi_free
   1048          
   1049              return( ret );
   \      0x4E0   0x4628             MOV      R0,R5
   \      0x4E2   0xB00C             ADD      SP,SP,#+48
   \      0x4E4   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
   1050          }
   1051          #endif /*!MBEDTLS_ECP_ADD_ALT*/
   1052          
   1053          /*
   1054           * Addition: R = P + Q, mixed affine-Jacobian coordinates (GECC 3.22)
   1055           *
   1056           * The coordinates of Q must be normalized (= affine),
   1057           * but those of P don't need to. R is not normalized.
   1058           *
   1059           * Special cases: (1) P or Q is zero, (2) R is zero, (3) P == Q.
   1060           * None of these cases can happen as intermediate step in ecp_mul_comb():
   1061           * - at each step, P, Q and R are multiples of the base point, the factor
   1062           *   being less than its order, so none of them is zero;
   1063           * - Q is an odd multiple of the base point, P an even multiple,
   1064           *   due to the choice of precomputed points in the modified comb method.
   1065           * So branches for these cases do not leak secret information.
   1066           *
   1067           * We accept Q->Z being unset (saving memory in tables) as meaning 1.
   1068           *
   1069           * Cost: 1A := 8M + 3S
   1070           */
   1071          #if !defined(MBEDTLS_ECP_ADD_ALT)

   \                                 In section .text, align 2, keep-with-next
   1072          static int ecp_add_mixed( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
   1073                                    const mbedtls_ecp_point *P, const mbedtls_ecp_point *Q )
   1074          {
   \                     ecp_add_mixed: (+1)
   \        0x0   0xE92D 0x43F0      PUSH     {R4-R9,LR}
   \        0x4   0xB095             SUB      SP,SP,#+84
   \        0x6   0x4605             MOV      R5,R0
   \        0x8   0x460E             MOV      R6,R1
   \        0xA   0x4617             MOV      R7,R2
   \        0xC   0x4698             MOV      R8,R3
   1075              int ret;
   1076              mbedtls_mpi T1, T2, T3, T4, X, Y, Z;
   1077          
   1078          #if defined(MBEDTLS_SELF_TEST)
   1079              add_count++;
   \        0xE   0x....'....        LDR.W    R0,??DataTable20
   \       0x12   0x6801             LDR      R1,[R0, #+0]
   \       0x14   0x1C49             ADDS     R1,R1,#+1
   \       0x16   0x6001             STR      R1,[R0, #+0]
   1080          #endif
   1081          
   1082          #if defined(MBEDTLS_ECP_ADD_MIXED_ALT)
   1083              if ( mbedtls_internal_ecp_grp_capable( grp ) )
   1084              {
   1085                  return mbedtls_internal_ecp_add_mixed( grp, R, P, Q );
   1086              }
   1087          #endif /* MBEDTLS_ECP_ADD_MIXED_ALT */
   1088          
   1089              /*
   1090               * Trivial cases: P == 0 or Q == 0 (case 1)
   1091               */
   1092              if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
   \       0x18   0x2100             MOVS     R1,#+0
   \       0x1A   0xF107 0x0018      ADD      R0,R7,#+24
   \       0x1E   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x22   0x2800             CMP      R0,#+0
   \       0x24   0xD104             BNE.N    ??ecp_add_mixed_0
   1093                  return( mbedtls_ecp_copy( R, Q ) );
   \       0x26   0x4641             MOV      R1,R8
   \       0x28   0x4630             MOV      R0,R6
   \       0x2A   0x....'....        BL       mbedtls_ecp_copy
   \       0x2E   0xE209             B.N      ??ecp_add_mixed_1
   1094          
   1095              if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 0 ) == 0 )
   \                     ??ecp_add_mixed_0: (+1)
   \       0x30   0xF8D8 0x0020      LDR      R0,[R8, #+32]
   \       0x34   0x2800             CMP      R0,#+0
   \       0x36   0xD00B             BEQ.N    ??ecp_add_mixed_2
   \       0x38   0x2100             MOVS     R1,#+0
   \       0x3A   0xF108 0x0018      ADD      R0,R8,#+24
   \       0x3E   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x42   0x2800             CMP      R0,#+0
   \       0x44   0xD104             BNE.N    ??ecp_add_mixed_2
   1096                  return( mbedtls_ecp_copy( R, P ) );
   \       0x46   0x4639             MOV      R1,R7
   \       0x48   0x4630             MOV      R0,R6
   \       0x4A   0x....'....        BL       mbedtls_ecp_copy
   \       0x4E   0xE1F9             B.N      ??ecp_add_mixed_1
   1097          
   1098              /*
   1099               * Make sure Q coordinates are normalized
   1100               */
   1101              if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 1 ) != 0 )
   \                     ??ecp_add_mixed_2: (+1)
   \       0x50   0xF8D8 0x0020      LDR      R0,[R8, #+32]
   \       0x54   0x2800             CMP      R0,#+0
   \       0x56   0xD009             BEQ.N    ??ecp_add_mixed_3
   \       0x58   0x2101             MOVS     R1,#+1
   \       0x5A   0xF108 0x0018      ADD      R0,R8,#+24
   \       0x5E   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x62   0x2800             CMP      R0,#+0
   \       0x64   0xD002             BEQ.N    ??ecp_add_mixed_3
   1102                  return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   \       0x66   0x....'....        LDR.W    R0,??DataTable21  ;; 0xffffb080
   \       0x6A   0xE1EB             B.N      ??ecp_add_mixed_1
   1103          
   1104              mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 ); mbedtls_mpi_init( &T3 ); mbedtls_mpi_init( &T4 );
   \                     ??ecp_add_mixed_3: (+1)
   \       0x6C   0x4668             MOV      R0,SP
   \       0x6E   0x....'....        BL       mbedtls_mpi_init
   \       0x72   0xA809             ADD      R0,SP,#+36
   \       0x74   0x....'....        BL       mbedtls_mpi_init
   \       0x78   0xA803             ADD      R0,SP,#+12
   \       0x7A   0x....'....        BL       mbedtls_mpi_init
   \       0x7E   0xA80F             ADD      R0,SP,#+60
   \       0x80   0x....'....        BL       mbedtls_mpi_init
   1105              mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
   \       0x84   0xA806             ADD      R0,SP,#+24
   \       0x86   0x....'....        BL       mbedtls_mpi_init
   \       0x8A   0xA80C             ADD      R0,SP,#+48
   \       0x8C   0x....'....        BL       mbedtls_mpi_init
   \       0x90   0xA812             ADD      R0,SP,#+72
   \       0x92   0x....'....        BL       mbedtls_mpi_init
   1106          
   1107              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &P->Z,  &P->Z ) );  MOD_MUL( T1 );
   \       0x96   0xF107 0x0218      ADD      R2,R7,#+24
   \       0x9A   0xF107 0x0118      ADD      R1,R7,#+24
   \       0x9E   0x4668             MOV      R0,SP
   \       0xA0   0x....'....        BL       mbedtls_mpi_mul_mpi
   \       0xA4   0x0004             MOVS     R4,R0
   \       0xA6   0xF040 0x81B7      BNE.W    ??ecp_add_mixed_4
   \       0xAA   0x4629             MOV      R1,R5
   \       0xAC   0x4668             MOV      R0,SP
   \       0xAE   0x....'....        BL       ecp_modp
   \       0xB2   0x0004             MOVS     R4,R0
   \       0xB4   0xF040 0x81B0      BNE.W    ??ecp_add_mixed_4
   \       0xB8   0x....'....        LDR.W    R9,??DataTable13
   \       0xBC   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \       0xC0   0x1C40             ADDS     R0,R0,#+1
   \       0xC2   0xF8C9 0x0000      STR      R0,[R9, #+0]
   1108              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T1,    &P->Z ) );  MOD_MUL( T2 );
   \       0xC6   0xF107 0x0218      ADD      R2,R7,#+24
   \       0xCA   0x4669             MOV      R1,SP
   \       0xCC   0xA809             ADD      R0,SP,#+36
   \       0xCE   0x....'....        BL       mbedtls_mpi_mul_mpi
   \       0xD2   0x0004             MOVS     R4,R0
   \       0xD4   0xF040 0x81A0      BNE.W    ??ecp_add_mixed_4
   \       0xD8   0x4629             MOV      R1,R5
   \       0xDA   0xA809             ADD      R0,SP,#+36
   \       0xDC   0x....'....        BL       ecp_modp
   \       0xE0   0x0004             MOVS     R4,R0
   \       0xE2   0xF040 0x8199      BNE.W    ??ecp_add_mixed_4
   \       0xE6   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \       0xEA   0x1C40             ADDS     R0,R0,#+1
   \       0xEC   0xF8C9 0x0000      STR      R0,[R9, #+0]
   1109              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &T1,    &Q->X ) );  MOD_MUL( T1 );
   \       0xF0   0x4642             MOV      R2,R8
   \       0xF2   0x4669             MOV      R1,SP
   \       0xF4   0x4668             MOV      R0,SP
   \       0xF6   0x....'....        BL       mbedtls_mpi_mul_mpi
   \       0xFA   0x0004             MOVS     R4,R0
   \       0xFC   0xF040 0x818C      BNE.W    ??ecp_add_mixed_4
   \      0x100   0x4629             MOV      R1,R5
   \      0x102   0x4668             MOV      R0,SP
   \      0x104   0x....'....        BL       ecp_modp
   \      0x108   0x0004             MOVS     R4,R0
   \      0x10A   0xF040 0x8185      BNE.W    ??ecp_add_mixed_4
   \      0x10E   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \      0x112   0x1C40             ADDS     R0,R0,#+1
   \      0x114   0xF8C9 0x0000      STR      R0,[R9, #+0]
   1110              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T2,    &Q->Y ) );  MOD_MUL( T2 );
   \      0x118   0xF108 0x020C      ADD      R2,R8,#+12
   \      0x11C   0xA909             ADD      R1,SP,#+36
   \      0x11E   0xA809             ADD      R0,SP,#+36
   \      0x120   0x....'....        BL       mbedtls_mpi_mul_mpi
   \      0x124   0x0004             MOVS     R4,R0
   \      0x126   0xF040 0x8177      BNE.W    ??ecp_add_mixed_4
   \      0x12A   0x4629             MOV      R1,R5
   \      0x12C   0xA809             ADD      R0,SP,#+36
   \      0x12E   0x....'....        BL       ecp_modp
   \      0x132   0x0004             MOVS     R4,R0
   \      0x134   0xF040 0x8170      BNE.W    ??ecp_add_mixed_4
   \      0x138   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \      0x13C   0x1C40             ADDS     R0,R0,#+1
   \      0x13E   0xF8C9 0x0000      STR      R0,[R9, #+0]
   1111              MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T1,  &T1,    &P->X ) );  MOD_SUB( T1 );
   \      0x142   0x463A             MOV      R2,R7
   \      0x144   0x4669             MOV      R1,SP
   \      0x146   0x4668             MOV      R0,SP
   \      0x148   0x....'....        BL       mbedtls_mpi_sub_mpi
   \      0x14C   0x0004             MOVS     R4,R0
   \      0x14E   0xF040 0x8163      BNE.W    ??ecp_add_mixed_4
   \                     ??ecp_add_mixed_5: (+1)
   \      0x152   0x9800             LDR      R0,[SP, #+0]
   \      0x154   0x2800             CMP      R0,#+0
   \      0x156   0xF140 0x80CA      BPL.W    ??ecp_add_mixed_6
   \      0x15A   0x2100             MOVS     R1,#+0
   \      0x15C   0x4668             MOV      R0,SP
   \      0x15E   0x....'....        BL       mbedtls_mpi_cmp_int
   \      0x162   0x2800             CMP      R0,#+0
   \      0x164   0xF000 0x80C3      BEQ.W    ??ecp_add_mixed_6
   \      0x168   0x1D2A             ADDS     R2,R5,#+4
   \      0x16A   0x4669             MOV      R1,SP
   \      0x16C   0x4668             MOV      R0,SP
   \      0x16E   0x....'....        BL       mbedtls_mpi_add_mpi
   \      0x172   0x0004             MOVS     R4,R0
   \      0x174   0xF040 0x8150      BNE.W    ??ecp_add_mixed_4
   \      0x178   0xE7EB             B.N      ??ecp_add_mixed_5
   1112              MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T2,  &T2,    &P->Y ) );  MOD_SUB( T2 );
   \                     ??ecp_add_mixed_7: (+1)
   \      0x17A   0x2100             MOVS     R1,#+0
   \      0x17C   0xA809             ADD      R0,SP,#+36
   \      0x17E   0x....'....        BL       mbedtls_mpi_cmp_int
   \      0x182   0x2800             CMP      R0,#+0
   \      0x184   0xF000 0x80C0      BEQ.W    ??ecp_add_mixed_8
   \      0x188   0x1D2A             ADDS     R2,R5,#+4
   \      0x18A   0xA909             ADD      R1,SP,#+36
   \      0x18C   0xA809             ADD      R0,SP,#+36
   \      0x18E   0x....'....        BL       mbedtls_mpi_add_mpi
   \      0x192   0x0004             MOVS     R4,R0
   \      0x194   0xF040 0x8140      BNE.W    ??ecp_add_mixed_4
   \      0x198   0xE0B2             B.N      ??ecp_add_mixed_9
   1113          
   1114              /* Special cases (2) and (3) */
   1115              if( mbedtls_mpi_cmp_int( &T1, 0 ) == 0 )
   1116              {
   1117                  if( mbedtls_mpi_cmp_int( &T2, 0 ) == 0 )
   1118                  {
   1119                      ret = ecp_double_jac( grp, R, P );
   1120                      goto cleanup;
   1121                  }
   1122                  else
   1123                  {
   1124                      ret = mbedtls_ecp_set_zero( R );
   \                     ??ecp_add_mixed_10: (+1)
   \      0x19A   0x4630             MOV      R0,R6
   \      0x19C   0x....'....        BL       mbedtls_ecp_set_zero
   \      0x1A0   0x4604             MOV      R4,R0
   1125                      goto cleanup;
   \      0x1A2   0xE139             B.N      ??ecp_add_mixed_4
   1126                  }
   1127              }
   1128          
   1129              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Z,   &P->Z,  &T1   ) );  MOD_MUL( Z  );
   \                     ??ecp_add_mixed_11: (+1)
   \      0x1A4   0x466A             MOV      R2,SP
   \      0x1A6   0xF107 0x0118      ADD      R1,R7,#+24
   \      0x1AA   0xA812             ADD      R0,SP,#+72
   \      0x1AC   0x....'....        BL       mbedtls_mpi_mul_mpi
   \      0x1B0   0x0004             MOVS     R4,R0
   \      0x1B2   0xF040 0x8131      BNE.W    ??ecp_add_mixed_4
   \      0x1B6   0x4629             MOV      R1,R5
   \      0x1B8   0xA812             ADD      R0,SP,#+72
   \      0x1BA   0x....'....        BL       ecp_modp
   \      0x1BE   0x0004             MOVS     R4,R0
   \      0x1C0   0xF040 0x812A      BNE.W    ??ecp_add_mixed_4
   \      0x1C4   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \      0x1C8   0x1C40             ADDS     R0,R0,#+1
   \      0x1CA   0xF8C9 0x0000      STR      R0,[R9, #+0]
   1130              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T1,    &T1   ) );  MOD_MUL( T3 );
   \      0x1CE   0x466A             MOV      R2,SP
   \      0x1D0   0x4669             MOV      R1,SP
   \      0x1D2   0xA803             ADD      R0,SP,#+12
   \      0x1D4   0x....'....        BL       mbedtls_mpi_mul_mpi
   \      0x1D8   0x0004             MOVS     R4,R0
   \      0x1DA   0xF040 0x811D      BNE.W    ??ecp_add_mixed_4
   \      0x1DE   0x4629             MOV      R1,R5
   \      0x1E0   0xA803             ADD      R0,SP,#+12
   \      0x1E2   0x....'....        BL       ecp_modp
   \      0x1E6   0x0004             MOVS     R4,R0
   \      0x1E8   0xF040 0x8116      BNE.W    ??ecp_add_mixed_4
   \      0x1EC   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \      0x1F0   0x1C40             ADDS     R0,R0,#+1
   \      0x1F2   0xF8C9 0x0000      STR      R0,[R9, #+0]
   1131              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T3,    &T1   ) );  MOD_MUL( T4 );
   \      0x1F6   0x466A             MOV      R2,SP
   \      0x1F8   0xA903             ADD      R1,SP,#+12
   \      0x1FA   0xA80F             ADD      R0,SP,#+60
   \      0x1FC   0x....'....        BL       mbedtls_mpi_mul_mpi
   \      0x200   0x0004             MOVS     R4,R0
   \      0x202   0xF040 0x8109      BNE.W    ??ecp_add_mixed_4
   \      0x206   0x4629             MOV      R1,R5
   \      0x208   0xA80F             ADD      R0,SP,#+60
   \      0x20A   0x....'....        BL       ecp_modp
   \      0x20E   0x0004             MOVS     R4,R0
   \      0x210   0xF040 0x8102      BNE.W    ??ecp_add_mixed_4
   \      0x214   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \      0x218   0x1C40             ADDS     R0,R0,#+1
   \      0x21A   0xF8C9 0x0000      STR      R0,[R9, #+0]
   1132              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &P->X ) );  MOD_MUL( T3 );
   \      0x21E   0x463A             MOV      R2,R7
   \      0x220   0xA903             ADD      R1,SP,#+12
   \      0x222   0xA803             ADD      R0,SP,#+12
   \      0x224   0x....'....        BL       mbedtls_mpi_mul_mpi
   \      0x228   0x0004             MOVS     R4,R0
   \      0x22A   0xF040 0x80F5      BNE.W    ??ecp_add_mixed_4
   \      0x22E   0x4629             MOV      R1,R5
   \      0x230   0xA803             ADD      R0,SP,#+12
   \      0x232   0x....'....        BL       ecp_modp
   \      0x236   0x0004             MOVS     R4,R0
   \      0x238   0xF040 0x80EE      BNE.W    ??ecp_add_mixed_4
   \      0x23C   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \      0x240   0x1C40             ADDS     R0,R0,#+1
   \      0x242   0xF8C9 0x0000      STR      R0,[R9, #+0]
   1133              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1,  &T3,    2     ) );  MOD_ADD( T1 );
   \      0x246   0x2202             MOVS     R2,#+2
   \      0x248   0xA903             ADD      R1,SP,#+12
   \      0x24A   0x4668             MOV      R0,SP
   \      0x24C   0x....'....        BL       mbedtls_mpi_mul_int
   \      0x250   0x0004             MOVS     R4,R0
   \      0x252   0xF040 0x80E1      BNE.W    ??ecp_add_mixed_4
   \                     ??ecp_add_mixed_12: (+1)
   \      0x256   0x1D29             ADDS     R1,R5,#+4
   \      0x258   0x4668             MOV      R0,SP
   \      0x25A   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \      0x25E   0x2800             CMP      R0,#+0
   \      0x260   0xD467             BMI.N    ??ecp_add_mixed_13
   \      0x262   0x1D2A             ADDS     R2,R5,#+4
   \      0x264   0x4669             MOV      R1,SP
   \      0x266   0x4668             MOV      R0,SP
   \      0x268   0x....'....        BL       mbedtls_mpi_sub_abs
   \      0x26C   0x0004             MOVS     R4,R0
   \      0x26E   0xF040 0x80D3      BNE.W    ??ecp_add_mixed_4
   \      0x272   0xE7F0             B.N      ??ecp_add_mixed_12
   1134              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &X,   &T2,    &T2   ) );  MOD_MUL( X  );
   1135              MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T1   ) );  MOD_SUB( X  );
   \                     ??ecp_add_mixed_14: (+1)
   \      0x274   0x2100             MOVS     R1,#+0
   \      0x276   0xA806             ADD      R0,SP,#+24
   \      0x278   0x....'....        BL       mbedtls_mpi_cmp_int
   \      0x27C   0x2800             CMP      R0,#+0
   \      0x27E   0xD074             BEQ.N    ??ecp_add_mixed_15
   \      0x280   0x1D2A             ADDS     R2,R5,#+4
   \      0x282   0xA906             ADD      R1,SP,#+24
   \      0x284   0xA806             ADD      R0,SP,#+24
   \      0x286   0x....'....        BL       mbedtls_mpi_add_mpi
   \      0x28A   0x0004             MOVS     R4,R0
   \      0x28C   0xF040 0x80C4      BNE.W    ??ecp_add_mixed_4
   \      0x290   0xE068             B.N      ??ecp_add_mixed_16
   1136              MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T4   ) );  MOD_SUB( X  );
   \                     ??ecp_add_mixed_17: (+1)
   \      0x292   0x2100             MOVS     R1,#+0
   \      0x294   0xA806             ADD      R0,SP,#+24
   \      0x296   0x....'....        BL       mbedtls_mpi_cmp_int
   \      0x29A   0x2800             CMP      R0,#+0
   \      0x29C   0xD06F             BEQ.N    ??ecp_add_mixed_18
   \      0x29E   0x1D2A             ADDS     R2,R5,#+4
   \      0x2A0   0xA906             ADD      R1,SP,#+24
   \      0x2A2   0xA806             ADD      R0,SP,#+24
   \      0x2A4   0x....'....        BL       mbedtls_mpi_add_mpi
   \      0x2A8   0x0004             MOVS     R4,R0
   \      0x2AA   0xF040 0x80B5      BNE.W    ??ecp_add_mixed_4
   \      0x2AE   0xE063             B.N      ??ecp_add_mixed_19
   1137              MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T3,  &T3,    &X    ) );  MOD_SUB( T3 );
   \                     ??ecp_add_mixed_20: (+1)
   \      0x2B0   0x2100             MOVS     R1,#+0
   \      0x2B2   0xA803             ADD      R0,SP,#+12
   \      0x2B4   0x....'....        BL       mbedtls_mpi_cmp_int
   \      0x2B8   0x2800             CMP      R0,#+0
   \      0x2BA   0xD06A             BEQ.N    ??ecp_add_mixed_21
   \      0x2BC   0x1D2A             ADDS     R2,R5,#+4
   \      0x2BE   0xA903             ADD      R1,SP,#+12
   \      0x2C0   0xA803             ADD      R0,SP,#+12
   \      0x2C2   0x....'....        BL       mbedtls_mpi_add_mpi
   \      0x2C6   0x0004             MOVS     R4,R0
   \      0x2C8   0xF040 0x80A6      BNE.W    ??ecp_add_mixed_4
   \      0x2CC   0xE05E             B.N      ??ecp_add_mixed_22
   1138              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &T2   ) );  MOD_MUL( T3 );
   1139              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T4,    &P->Y ) );  MOD_MUL( T4 );
   1140              MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &Y,   &T3,    &T4   ) );  MOD_SUB( Y  );
   \                     ??ecp_add_mixed_23: (+1)
   \      0x2CE   0x2100             MOVS     R1,#+0
   \      0x2D0   0xA80C             ADD      R0,SP,#+48
   \      0x2D2   0x....'....        BL       mbedtls_mpi_cmp_int
   \      0x2D6   0x2800             CMP      R0,#+0
   \      0x2D8   0xF000 0x808B      BEQ.W    ??ecp_add_mixed_24
   \      0x2DC   0x1D2A             ADDS     R2,R5,#+4
   \      0x2DE   0xA90C             ADD      R1,SP,#+48
   \      0x2E0   0xA80C             ADD      R0,SP,#+48
   \      0x2E2   0x....'....        BL       mbedtls_mpi_add_mpi
   \      0x2E6   0x0004             MOVS     R4,R0
   \      0x2E8   0xF040 0x8096      BNE.W    ??ecp_add_mixed_4
   \      0x2EC   0xE07D             B.N      ??ecp_add_mixed_25
   \                     ??ecp_add_mixed_6: (+1)
   \      0x2EE   0xF107 0x020C      ADD      R2,R7,#+12
   \      0x2F2   0xA909             ADD      R1,SP,#+36
   \      0x2F4   0xA809             ADD      R0,SP,#+36
   \      0x2F6   0x....'....        BL       mbedtls_mpi_sub_mpi
   \      0x2FA   0x0004             MOVS     R4,R0
   \      0x2FC   0xF040 0x808C      BNE.W    ??ecp_add_mixed_4
   \                     ??ecp_add_mixed_9: (+1)
   \      0x300   0x9809             LDR      R0,[SP, #+36]
   \      0x302   0x2800             CMP      R0,#+0
   \      0x304   0xF53F 0xAF39      BMI.W    ??ecp_add_mixed_7
   \                     ??ecp_add_mixed_8: (+1)
   \      0x308   0x2100             MOVS     R1,#+0
   \      0x30A   0x4668             MOV      R0,SP
   \      0x30C   0x....'....        BL       mbedtls_mpi_cmp_int
   \      0x310   0x2800             CMP      R0,#+0
   \      0x312   0xF47F 0xAF47      BNE.W    ??ecp_add_mixed_11
   \      0x316   0x2100             MOVS     R1,#+0
   \      0x318   0xA809             ADD      R0,SP,#+36
   \      0x31A   0x....'....        BL       mbedtls_mpi_cmp_int
   \      0x31E   0x2800             CMP      R0,#+0
   \      0x320   0xF47F 0xAF3B      BNE.W    ??ecp_add_mixed_10
   \      0x324   0x463A             MOV      R2,R7
   \      0x326   0x4631             MOV      R1,R6
   \      0x328   0x4628             MOV      R0,R5
   \      0x32A   0x....'....        BL       ecp_double_jac
   \      0x32E   0x4604             MOV      R4,R0
   \      0x330   0xE072             B.N      ??ecp_add_mixed_4
   \                     ??ecp_add_mixed_13: (+1)
   \      0x332   0xAA09             ADD      R2,SP,#+36
   \      0x334   0xA909             ADD      R1,SP,#+36
   \      0x336   0xA806             ADD      R0,SP,#+24
   \      0x338   0x....'....        BL       mbedtls_mpi_mul_mpi
   \      0x33C   0x0004             MOVS     R4,R0
   \      0x33E   0xD16B             BNE.N    ??ecp_add_mixed_4
   \      0x340   0x4629             MOV      R1,R5
   \      0x342   0xA806             ADD      R0,SP,#+24
   \      0x344   0x....'....        BL       ecp_modp
   \      0x348   0x0004             MOVS     R4,R0
   \      0x34A   0xD165             BNE.N    ??ecp_add_mixed_4
   \      0x34C   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \      0x350   0x1C40             ADDS     R0,R0,#+1
   \      0x352   0xF8C9 0x0000      STR      R0,[R9, #+0]
   \      0x356   0x466A             MOV      R2,SP
   \      0x358   0xA906             ADD      R1,SP,#+24
   \      0x35A   0xA806             ADD      R0,SP,#+24
   \      0x35C   0x....'....        BL       mbedtls_mpi_sub_mpi
   \      0x360   0x0004             MOVS     R4,R0
   \      0x362   0xD159             BNE.N    ??ecp_add_mixed_4
   \                     ??ecp_add_mixed_16: (+1)
   \      0x364   0x9806             LDR      R0,[SP, #+24]
   \      0x366   0x2800             CMP      R0,#+0
   \      0x368   0xD484             BMI.N    ??ecp_add_mixed_14
   \                     ??ecp_add_mixed_15: (+1)
   \      0x36A   0xAA0F             ADD      R2,SP,#+60
   \      0x36C   0xA906             ADD      R1,SP,#+24
   \      0x36E   0xA806             ADD      R0,SP,#+24
   \      0x370   0x....'....        BL       mbedtls_mpi_sub_mpi
   \      0x374   0x0004             MOVS     R4,R0
   \      0x376   0xD14F             BNE.N    ??ecp_add_mixed_4
   \                     ??ecp_add_mixed_19: (+1)
   \      0x378   0x9806             LDR      R0,[SP, #+24]
   \      0x37A   0x2800             CMP      R0,#+0
   \      0x37C   0xD489             BMI.N    ??ecp_add_mixed_17
   \                     ??ecp_add_mixed_18: (+1)
   \      0x37E   0xAA06             ADD      R2,SP,#+24
   \      0x380   0xA903             ADD      R1,SP,#+12
   \      0x382   0xA803             ADD      R0,SP,#+12
   \      0x384   0x....'....        BL       mbedtls_mpi_sub_mpi
   \      0x388   0x0004             MOVS     R4,R0
   \      0x38A   0xD145             BNE.N    ??ecp_add_mixed_4
   \                     ??ecp_add_mixed_22: (+1)
   \      0x38C   0x9803             LDR      R0,[SP, #+12]
   \      0x38E   0x2800             CMP      R0,#+0
   \      0x390   0xD48E             BMI.N    ??ecp_add_mixed_20
   \                     ??ecp_add_mixed_21: (+1)
   \      0x392   0xAA09             ADD      R2,SP,#+36
   \      0x394   0xA903             ADD      R1,SP,#+12
   \      0x396   0xA803             ADD      R0,SP,#+12
   \      0x398   0x....'....        BL       mbedtls_mpi_mul_mpi
   \      0x39C   0x0004             MOVS     R4,R0
   \      0x39E   0xD13B             BNE.N    ??ecp_add_mixed_4
   \      0x3A0   0x4629             MOV      R1,R5
   \      0x3A2   0xA803             ADD      R0,SP,#+12
   \      0x3A4   0x....'....        BL       ecp_modp
   \      0x3A8   0x0004             MOVS     R4,R0
   \      0x3AA   0xD135             BNE.N    ??ecp_add_mixed_4
   \      0x3AC   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \      0x3B0   0x1C40             ADDS     R0,R0,#+1
   \      0x3B2   0xF8C9 0x0000      STR      R0,[R9, #+0]
   \      0x3B6   0xF107 0x020C      ADD      R2,R7,#+12
   \      0x3BA   0xA90F             ADD      R1,SP,#+60
   \      0x3BC   0xA80F             ADD      R0,SP,#+60
   \      0x3BE   0x....'....        BL       mbedtls_mpi_mul_mpi
   \      0x3C2   0x0004             MOVS     R4,R0
   \      0x3C4   0xD128             BNE.N    ??ecp_add_mixed_4
   \      0x3C6   0x4629             MOV      R1,R5
   \      0x3C8   0xA80F             ADD      R0,SP,#+60
   \      0x3CA   0x....'....        BL       ecp_modp
   \      0x3CE   0x0004             MOVS     R4,R0
   \      0x3D0   0xD122             BNE.N    ??ecp_add_mixed_4
   \      0x3D2   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \      0x3D6   0x1C40             ADDS     R0,R0,#+1
   \      0x3D8   0xF8C9 0x0000      STR      R0,[R9, #+0]
   \      0x3DC   0xAA0F             ADD      R2,SP,#+60
   \      0x3DE   0xA903             ADD      R1,SP,#+12
   \      0x3E0   0xA80C             ADD      R0,SP,#+48
   \      0x3E2   0x....'....        BL       mbedtls_mpi_sub_mpi
   \      0x3E6   0x0004             MOVS     R4,R0
   \      0x3E8   0xD116             BNE.N    ??ecp_add_mixed_4
   \                     ??ecp_add_mixed_25: (+1)
   \      0x3EA   0x980C             LDR      R0,[SP, #+48]
   \      0x3EC   0x2800             CMP      R0,#+0
   \      0x3EE   0xF53F 0xAF6E      BMI.W    ??ecp_add_mixed_23
   1141          
   1142              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &X ) );
   \                     ??ecp_add_mixed_24: (+1)
   \      0x3F2   0xA906             ADD      R1,SP,#+24
   \      0x3F4   0x4630             MOV      R0,R6
   \      0x3F6   0x....'....        BL       mbedtls_mpi_copy
   \      0x3FA   0x0004             MOVS     R4,R0
   \      0x3FC   0xD10C             BNE.N    ??ecp_add_mixed_4
   1143              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &Y ) );
   \      0x3FE   0xA90C             ADD      R1,SP,#+48
   \      0x400   0xF106 0x000C      ADD      R0,R6,#+12
   \      0x404   0x....'....        BL       mbedtls_mpi_copy
   \      0x408   0x0004             MOVS     R4,R0
   \      0x40A   0xD105             BNE.N    ??ecp_add_mixed_4
   1144              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &Z ) );
   \      0x40C   0xA912             ADD      R1,SP,#+72
   \      0x40E   0xF106 0x0018      ADD      R0,R6,#+24
   \      0x412   0x....'....        BL       mbedtls_mpi_copy
   \      0x416   0x4604             MOV      R4,R0
   1145          
   1146          cleanup:
   1147          
   1148              mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 ); mbedtls_mpi_free( &T3 ); mbedtls_mpi_free( &T4 );
   \                     ??ecp_add_mixed_4: (+1)
   \      0x418   0x4668             MOV      R0,SP
   \      0x41A   0x....'....        BL       mbedtls_mpi_free
   \      0x41E   0xA809             ADD      R0,SP,#+36
   \      0x420   0x....'....        BL       mbedtls_mpi_free
   \      0x424   0xA803             ADD      R0,SP,#+12
   \      0x426   0x....'....        BL       mbedtls_mpi_free
   \      0x42A   0xA80F             ADD      R0,SP,#+60
   \      0x42C   0x....'....        BL       mbedtls_mpi_free
   1149              mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
   \      0x430   0xA806             ADD      R0,SP,#+24
   \      0x432   0x....'....        BL       mbedtls_mpi_free
   \      0x436   0xA80C             ADD      R0,SP,#+48
   \      0x438   0x....'....        BL       mbedtls_mpi_free
   \      0x43C   0xA812             ADD      R0,SP,#+72
   \      0x43E   0x....'....        BL       mbedtls_mpi_free
   1150          
   1151              return( ret );
   \      0x442   0x4620             MOV      R0,R4
   \                     ??ecp_add_mixed_1: (+1)
   \      0x444   0xB015             ADD      SP,SP,#+84
   \      0x446   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
   1152          }
   1153          #endif /*!MBEDTLS_ECP_ADD_ALT*/
   1154          
   1155          /*
   1156           * Randomize jacobian coordinates:
   1157           * (X, Y, Z) -> (l^2 X, l^3 Y, l Z) for random l
   1158           * This is sort of the reverse operation of ecp_normalize_jac().
   1159           *
   1160           * This countermeasure was first suggested in [2].
   1161           */
   1162          #if !defined(MBEDTLS_ECP_MUL_COMB_ALT)

   \                                 In section .text, align 2, keep-with-next
   1163          static int ecp_randomize_jac( const mbedtls_ecp_group *grp, mbedtls_ecp_point *pt,
   1164                          int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
   1165          {
   \                     ecp_randomize_jac: (+1)
   \        0x0   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \        0x4   0xB086             SUB      SP,SP,#+24
   \        0x6   0x4681             MOV      R9,R0
   \        0x8   0x460D             MOV      R5,R1
   \        0xA   0x4616             MOV      R6,R2
   \        0xC   0x461F             MOV      R7,R3
   1166              int ret;
   1167              mbedtls_mpi l, ll;
   1168              size_t p_size;
   1169              int count = 0;
   \        0xE   0xF04F 0x0A00      MOV      R10,#+0
   1170          
   1171          #if defined(MBEDTLS_ECP_RANDOMIZE_JAC_ALT)
   1172              if ( mbedtls_internal_ecp_grp_capable( grp ) )
   1173              {
   1174                  return mbedtls_internal_ecp_randomize_jac( grp, pt, f_rng, p_rng );
   1175              }
   1176          #endif /* MBEDTLS_ECP_RANDOMIZE_JAC_ALT */
   1177          
   1178              p_size = ( grp->pbits + 7 ) / 8;
   \       0x12   0xF8D9 0x8058      LDR      R8,[R9, #+88]
   \       0x16   0xF108 0x0807      ADD      R8,R8,#+7
   \       0x1A   0xEA4F 0x08D8      LSR      R8,R8,#+3
   1179              mbedtls_mpi_init( &l ); mbedtls_mpi_init( &ll );
   \       0x1E   0x4668             MOV      R0,SP
   \       0x20   0x....'....        BL       mbedtls_mpi_init
   \       0x24   0xA803             ADD      R0,SP,#+12
   \       0x26   0x....'....        BL       mbedtls_mpi_init
   1180          
   1181              /* Generate l such that 1 < l < p */
   1182              do
   1183              {
   1184                  MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &l, p_size, f_rng, p_rng ) );
   \                     ??ecp_randomize_jac_0: (+1)
   \       0x2A   0x463B             MOV      R3,R7
   \       0x2C   0x4632             MOV      R2,R6
   \       0x2E   0x4641             MOV      R1,R8
   \       0x30   0x4668             MOV      R0,SP
   \       0x32   0x....'....        BL       mbedtls_mpi_fill_random
   \       0x36   0x0004             MOVS     R4,R0
   \       0x38   0xD17D             BNE.N    ??ecp_randomize_jac_1
   1185          
   1186                  while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )
   \                     ??ecp_randomize_jac_2: (+1)
   \       0x3A   0xF109 0x0104      ADD      R1,R9,#+4
   \       0x3E   0x4668             MOV      R0,SP
   \       0x40   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \       0x44   0x2800             CMP      R0,#+0
   \       0x46   0xD409             BMI.N    ??ecp_randomize_jac_3
   1187                      MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &l, 1 ) );
   \       0x48   0x2101             MOVS     R1,#+1
   \       0x4A   0x4668             MOV      R0,SP
   \       0x4C   0x....'....        BL       mbedtls_mpi_shift_r
   \       0x50   0x0004             MOVS     R4,R0
   \       0x52   0xD170             BNE.N    ??ecp_randomize_jac_1
   \       0x54   0xE7F1             B.N      ??ecp_randomize_jac_2
   1188          
   1189                  if( count++ > 10 )
   1190                      return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
   \                     ??ecp_randomize_jac_4: (+1)
   \       0x56   0x....'....        LDR.W    R0,??DataTable24  ;; 0xffffb300
   \       0x5A   0xE073             B.N      ??ecp_randomize_jac_5
   \                     ??ecp_randomize_jac_3: (+1)
   \       0x5C   0x4650             MOV      R0,R10
   \       0x5E   0xF100 0x0A01      ADD      R10,R0,#+1
   \       0x62   0x280B             CMP      R0,#+11
   \       0x64   0xDAF7             BGE.N    ??ecp_randomize_jac_4
   1191              }
   1192              while( mbedtls_mpi_cmp_int( &l, 1 ) <= 0 );
   \       0x66   0x2101             MOVS     R1,#+1
   \       0x68   0x4668             MOV      R0,SP
   \       0x6A   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x6E   0x2801             CMP      R0,#+1
   \       0x70   0xDBDB             BLT.N    ??ecp_randomize_jac_0
   1193          
   1194              /* Z = l * Z */
   1195              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Z,   &pt->Z,     &l  ) ); MOD_MUL( pt->Z );
   \       0x72   0x466A             MOV      R2,SP
   \       0x74   0xF105 0x0118      ADD      R1,R5,#+24
   \       0x78   0xF105 0x0018      ADD      R0,R5,#+24
   \       0x7C   0x....'....        BL       mbedtls_mpi_mul_mpi
   \       0x80   0x0004             MOVS     R4,R0
   \       0x82   0xD158             BNE.N    ??ecp_randomize_jac_1
   \       0x84   0x4649             MOV      R1,R9
   \       0x86   0xF105 0x0018      ADD      R0,R5,#+24
   \       0x8A   0x....'....        BL       ecp_modp
   \       0x8E   0x0004             MOVS     R4,R0
   \       0x90   0xD151             BNE.N    ??ecp_randomize_jac_1
   \       0x92   0x....'....        LDR.W    R10,??DataTable24_1
   \       0x96   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \       0x9A   0x1C40             ADDS     R0,R0,#+1
   \       0x9C   0xF8CA 0x0000      STR      R0,[R10, #+0]
   1196          
   1197              /* X = l^2 * X */
   1198              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &l,         &l  ) ); MOD_MUL( ll );
   \       0xA0   0x466A             MOV      R2,SP
   \       0xA2   0x4669             MOV      R1,SP
   \       0xA4   0xA803             ADD      R0,SP,#+12
   \       0xA6   0x....'....        BL       mbedtls_mpi_mul_mpi
   \       0xAA   0x0004             MOVS     R4,R0
   \       0xAC   0xD143             BNE.N    ??ecp_randomize_jac_1
   \       0xAE   0x4649             MOV      R1,R9
   \       0xB0   0xA803             ADD      R0,SP,#+12
   \       0xB2   0x....'....        BL       ecp_modp
   \       0xB6   0x0004             MOVS     R4,R0
   \       0xB8   0xD13D             BNE.N    ??ecp_randomize_jac_1
   \       0xBA   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \       0xBE   0x1C40             ADDS     R0,R0,#+1
   \       0xC0   0xF8CA 0x0000      STR      R0,[R10, #+0]
   1199              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ll ) ); MOD_MUL( pt->X );
   \       0xC4   0xAA03             ADD      R2,SP,#+12
   \       0xC6   0x4629             MOV      R1,R5
   \       0xC8   0x4628             MOV      R0,R5
   \       0xCA   0x....'....        BL       mbedtls_mpi_mul_mpi
   \       0xCE   0x0004             MOVS     R4,R0
   \       0xD0   0xD131             BNE.N    ??ecp_randomize_jac_1
   \       0xD2   0x4649             MOV      R1,R9
   \       0xD4   0x4628             MOV      R0,R5
   \       0xD6   0x....'....        BL       ecp_modp
   \       0xDA   0x0004             MOVS     R4,R0
   \       0xDC   0xD12B             BNE.N    ??ecp_randomize_jac_1
   \       0xDE   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \       0xE2   0x1C40             ADDS     R0,R0,#+1
   \       0xE4   0xF8CA 0x0000      STR      R0,[R10, #+0]
   1200          
   1201              /* Y = l^3 * Y */
   1202              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &ll,        &l  ) ); MOD_MUL( ll );
   \       0xE8   0x466A             MOV      R2,SP
   \       0xEA   0xA903             ADD      R1,SP,#+12
   \       0xEC   0xA803             ADD      R0,SP,#+12
   \       0xEE   0x....'....        BL       mbedtls_mpi_mul_mpi
   \       0xF2   0x0004             MOVS     R4,R0
   \       0xF4   0xD11F             BNE.N    ??ecp_randomize_jac_1
   \       0xF6   0x4649             MOV      R1,R9
   \       0xF8   0xA803             ADD      R0,SP,#+12
   \       0xFA   0x....'....        BL       ecp_modp
   \       0xFE   0x0004             MOVS     R4,R0
   \      0x100   0xD119             BNE.N    ??ecp_randomize_jac_1
   \      0x102   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \      0x106   0x1C40             ADDS     R0,R0,#+1
   \      0x108   0xF8CA 0x0000      STR      R0,[R10, #+0]
   1203              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ll ) ); MOD_MUL( pt->Y );
   \      0x10C   0xAA03             ADD      R2,SP,#+12
   \      0x10E   0xF105 0x010C      ADD      R1,R5,#+12
   \      0x112   0xF105 0x000C      ADD      R0,R5,#+12
   \      0x116   0x....'....        BL       mbedtls_mpi_mul_mpi
   \      0x11A   0x0004             MOVS     R4,R0
   \      0x11C   0xD10B             BNE.N    ??ecp_randomize_jac_1
   \      0x11E   0x4649             MOV      R1,R9
   \      0x120   0xF105 0x000C      ADD      R0,R5,#+12
   \      0x124   0x....'....        BL       ecp_modp
   \      0x128   0x0004             MOVS     R4,R0
   \      0x12A   0xD104             BNE.N    ??ecp_randomize_jac_1
   \      0x12C   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \      0x130   0x1C40             ADDS     R0,R0,#+1
   \      0x132   0xF8CA 0x0000      STR      R0,[R10, #+0]
   1204          
   1205          cleanup:
   1206              mbedtls_mpi_free( &l ); mbedtls_mpi_free( &ll );
   \                     ??ecp_randomize_jac_1: (+1)
   \      0x136   0x4668             MOV      R0,SP
   \      0x138   0x....'....        BL       mbedtls_mpi_free
   \      0x13C   0xA803             ADD      R0,SP,#+12
   \      0x13E   0x....'....        BL       mbedtls_mpi_free
   1207          
   1208              return( ret );
   \      0x142   0x4620             MOV      R0,R4
   \                     ??ecp_randomize_jac_5: (+1)
   \      0x144   0xB006             ADD      SP,SP,#+24
   \      0x146   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
   1209          }
   1210          #endif /*!MBEDTLS_ECP_MUL_COMB_ALT*/
   1211          
   1212          /*
   1213           * Check and define parameters used by the comb method (see below for details)
   1214           */
   1215          #if MBEDTLS_ECP_WINDOW_SIZE < 2 || MBEDTLS_ECP_WINDOW_SIZE > 7
   1216          #error "MBEDTLS_ECP_WINDOW_SIZE out of bounds"
   1217          #endif
   1218          
   1219          /* d = ceil( n / w ) */
   1220          #define COMB_MAX_D      ( MBEDTLS_ECP_MAX_BITS + 1 ) / 2
   1221          
   1222          /* number of precomputed points */
   1223          #define COMB_MAX_PRE    ( 1 << ( MBEDTLS_ECP_WINDOW_SIZE - 1 ) )
   1224          
   1225          /*
   1226           * Compute the representation of m that will be used with our comb method.
   1227           *
   1228           * The basic comb method is described in GECC 3.44 for example. We use a
   1229           * modified version that provides resistance to SPA by avoiding zero
   1230           * digits in the representation as in [3]. We modify the method further by
   1231           * requiring that all K_i be odd, which has the small cost that our
   1232           * representation uses one more K_i, due to carries.
   1233           *
   1234           * Also, for the sake of compactness, only the seven low-order bits of x[i]
   1235           * are used to represent K_i, and the msb of x[i] encodes the the sign (s_i in
   1236           * the paper): it is set if and only if if s_i == -1;
   1237           *
   1238           * Calling conventions:
   1239           * - x is an array of size d + 1
   1240           * - w is the size, ie number of teeth, of the comb, and must be between
   1241           *   2 and 7 (in practice, between 2 and MBEDTLS_ECP_WINDOW_SIZE)
   1242           * - m is the MPI, expected to be odd and such that bitlength(m) <= w * d
   1243           *   (the result will be incorrect if these assumptions are not satisfied)
   1244           */
   1245          #if !defined(MBEDTLS_ECP_MUL_COMB_ALT)

   \                                 In section .text, align 2, keep-with-next
   1246          static void ecp_comb_fixed( unsigned char x[], size_t d,
   1247                                      unsigned char w, const mbedtls_mpi *m )
   1248          {
   \                     ecp_comb_fixed: (+1)
   \        0x0   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \        0x4   0x4606             MOV      R6,R0
   \        0x6   0x460D             MOV      R5,R1
   \        0x8   0x4617             MOV      R7,R2
   \        0xA   0x4698             MOV      R8,R3
   1249              size_t i, j;
   1250              unsigned char c, cc, adjust;
   1251          
   1252              memset( x, 0, d+1 );
   \        0xC   0x2200             MOVS     R2,#+0
   \        0xE   0x1C69             ADDS     R1,R5,#+1
   \       0x10   0x....'....        BL       __aeabi_memset
   1253          
   1254              /* First get the classical comb values (except for x_d = 0) */
   1255              for( i = 0; i < d; i++ )
   \       0x14   0x2400             MOVS     R4,#+0
   \       0x16   0xE00F             B.N      ??ecp_comb_fixed_0
   1256                  for( j = 0; j < w; j++ )
   1257                      x[i] |= mbedtls_mpi_get_bit( m, i + d * j ) << j;
   \                     ??ecp_comb_fixed_1: (+1)
   \       0x18   0xFB09 0x4105      MLA      R1,R9,R5,R4
   \       0x1C   0x4640             MOV      R0,R8
   \       0x1E   0x....'....        BL       mbedtls_mpi_get_bit
   \       0x22   0x5D31             LDRB     R1,[R6, R4]
   \       0x24   0xFA00 0xF009      LSL      R0,R0,R9
   \       0x28   0x4308             ORRS     R0,R0,R1
   \       0x2A   0x5530             STRB     R0,[R6, R4]
   \       0x2C   0xF109 0x0901      ADD      R9,R9,#+1
   \                     ??ecp_comb_fixed_2: (+1)
   \       0x30   0x4638             MOV      R0,R7
   \       0x32   0x4581             CMP      R9,R0
   \       0x34   0xD3F0             BCC.N    ??ecp_comb_fixed_1
   \       0x36   0x1C64             ADDS     R4,R4,#+1
   \                     ??ecp_comb_fixed_0: (+1)
   \       0x38   0x42AC             CMP      R4,R5
   \       0x3A   0xD202             BCS.N    ??ecp_comb_fixed_3
   \       0x3C   0xF04F 0x0900      MOV      R9,#+0
   \       0x40   0xE7F6             B.N      ??ecp_comb_fixed_2
   1258          
   1259              /* Now make sure x_1 .. x_d are odd */
   1260              c = 0;
   \                     ??ecp_comb_fixed_3: (+1)
   \       0x42   0x2100             MOVS     R1,#+0
   1261              for( i = 1; i <= d; i++ )
   \       0x44   0x2001             MOVS     R0,#+1
   \       0x46   0xE023             B.N      ??ecp_comb_fixed_4
   1262              {
   1263                  /* Add carry and update it */
   1264                  cc   = x[i] & c;
   \                     ??ecp_comb_fixed_5: (+1)
   \       0x48   0x5C32             LDRB     R2,[R6, R0]
   \       0x4A   0x400A             ANDS     R2,R1,R2
   1265                  x[i] = x[i] ^ c;
   \       0x4C   0x5C33             LDRB     R3,[R6, R0]
   \       0x4E   0x4059             EORS     R1,R1,R3
   \       0x50   0x5431             STRB     R1,[R6, R0]
   1266                  c = cc;
   1267          
   1268                  /* Adjust if needed, avoiding branches */
   1269                  adjust = 1 - ( x[i] & 0x01 );
   \       0x52   0x5C33             LDRB     R3,[R6, R0]
   \       0x54   0xF003 0x0301      AND      R3,R3,#0x1
   \       0x58   0xF1C3 0x0301      RSB      R3,R3,#+1
   1270                  c   |= x[i] & ( x[i-1] * adjust );
   \       0x5C   0x4611             MOV      R1,R2
   \       0x5E   0x5C32             LDRB     R2,[R6, R0]
   \       0x60   0x1834             ADDS     R4,R6,R0
   \       0x62   0xF814 0x4C01      LDRB     R4,[R4, #-1]
   \       0x66   0xFB13 0xF404      SMULBB   R4,R3,R4
   \       0x6A   0x4022             ANDS     R2,R4,R2
   \       0x6C   0x4311             ORRS     R1,R2,R1
   1271                  x[i] = x[i] ^ ( x[i-1] * adjust );
   \       0x6E   0x5C32             LDRB     R2,[R6, R0]
   \       0x70   0x1834             ADDS     R4,R6,R0
   \       0x72   0xF814 0x4C01      LDRB     R4,[R4, #-1]
   \       0x76   0xFB13 0xF404      SMULBB   R4,R3,R4
   \       0x7A   0x4062             EORS     R2,R4,R2
   \       0x7C   0x5432             STRB     R2,[R6, R0]
   1272                  x[i-1] |= adjust << 7;
   \       0x7E   0x1832             ADDS     R2,R6,R0
   \       0x80   0xF812 0x2C01      LDRB     R2,[R2, #-1]
   \       0x84   0xEA42 0x12C3      ORR      R2,R2,R3, LSL #+7
   \       0x88   0x1833             ADDS     R3,R6,R0
   \       0x8A   0xF803 0x2C01      STRB     R2,[R3, #-1]
   1273              }
   \       0x8E   0x1C40             ADDS     R0,R0,#+1
   \                     ??ecp_comb_fixed_4: (+1)
   \       0x90   0x4285             CMP      R5,R0
   \       0x92   0xD2D9             BCS.N    ??ecp_comb_fixed_5
   1274          }
   \       0x94   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return
   1275          #endif /*!MBEDTLS_ECP_MUL_COMB_ALT*/
   1276          
   1277          /*
   1278           * Precompute points for the comb method
   1279           *
   1280           * If i = i_{w-1} ... i_1 is the binary representation of i, then
   1281           * T[i] = i_{w-1} 2^{(w-1)d} P + ... + i_1 2^d P + P
   1282           *
   1283           * T must be able to hold 2^{w - 1} elements
   1284           *
   1285           * Cost: d(w-1) D + (2^{w-1} - 1) A + 1 N(w-1) + 1 N(2^{w-1} - 1)
   1286           */
   1287          #if !defined(MBEDTLS_ECP_MUL_COMB_ALT)

   \                                 In section .text, align 2, keep-with-next
   1288          static int ecp_precompute_comb( const mbedtls_ecp_group *grp,
   1289                                          mbedtls_ecp_point T[], const mbedtls_ecp_point *P,
   1290                                          unsigned char w, size_t d )
   1291          {
   \                     ecp_precompute_comb: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \        0x4   0x4605             MOV      R5,R0
   \        0x6   0x460E             MOV      R6,R1
   \        0x8   0x469B             MOV      R11,R3
   1292              int ret;
   1293              unsigned char i, k;
   1294              size_t j;
   1295              mbedtls_ecp_point *cur, *TT[COMB_MAX_PRE - 1];
   1296          
   1297              /*
   1298               * Set T[0] = P and
   1299               * T[2^{l-1}] = 2^{dl} P for l = 1 .. w-1 (this is not the final value)
   1300               */
   1301              MBEDTLS_MPI_CHK( mbedtls_ecp_copy( &T[0], P ) );
   \        0xA   0x4611             MOV      R1,R2
   \        0xC   0x4630             MOV      R0,R6
   \        0xE   0x....'....        BL       mbedtls_ecp_copy
   \       0x12   0x2800             CMP      R0,#+0
   \       0x14   0xD172             BNE.N    ??ecp_precompute_comb_0
   1302          
   1303              k = 0;
   \       0x16   0x2700             MOVS     R7,#+0
   1304              for( i = 1; i < ( 1U << ( w - 1 ) ); i <<= 1 )
   \       0x18   0xF04F 0x0801      MOV      R8,#+1
   \       0x1C   0xF8DD 0x9028      LDR      R9,[SP, #+40]
   \       0x20   0xE014             B.N      ??ecp_precompute_comb_1
   1305              {
   1306                  cur = T + i;
   1307                  MBEDTLS_MPI_CHK( mbedtls_ecp_copy( cur, T + ( i >> 1 ) ) );
   1308                  for( j = 0; j < d; j++ )
   1309                      MBEDTLS_MPI_CHK( ecp_double_jac( grp, cur, cur ) );
   \                     ??ecp_precompute_comb_2: (+1)
   \       0x22   0x4622             MOV      R2,R4
   \       0x24   0x4621             MOV      R1,R4
   \       0x26   0x4628             MOV      R0,R5
   \       0x28   0x....'....        BL       ecp_double_jac
   \       0x2C   0x2800             CMP      R0,#+0
   \       0x2E   0xD165             BNE.N    ??ecp_precompute_comb_0
   \       0x30   0xF10A 0x0A01      ADD      R10,R10,#+1
   \                     ??ecp_precompute_comb_3: (+1)
   \       0x34   0x45CA             CMP      R10,R9
   \       0x36   0xD3F4             BCC.N    ??ecp_precompute_comb_2
   1310          
   1311                  TT[k++] = cur;
   \       0x38   0x4668             MOV      R0,SP
   \       0x3A   0x4639             MOV      R1,R7
   \       0x3C   0xB2C9             UXTB     R1,R1
   \       0x3E   0xF840 0x4021      STR      R4,[R0, R1, LSL #+2]
   \       0x42   0x1C7F             ADDS     R7,R7,#+1
   \       0x44   0xEA4F 0x0848      LSL      R8,R8,#+1
   \       0x48   0xFA5F 0xF888      UXTB     R8,R8
   \                     ??ecp_precompute_comb_1: (+1)
   \       0x4C   0x2401             MOVS     R4,#+1
   \       0x4E   0xF1AB 0x0001      SUB      R0,R11,#+1
   \       0x52   0xFA04 0xF000      LSL      R0,R4,R0
   \       0x56   0x4580             CMP      R8,R0
   \       0x58   0xD210             BCS.N    ??ecp_precompute_comb_4
   \       0x5A   0x2024             MOVS     R0,#+36
   \       0x5C   0xFB10 0xF108      SMULBB   R1,R0,R8
   \       0x60   0x1874             ADDS     R4,R6,R1
   \       0x62   0x4641             MOV      R1,R8
   \       0x64   0x1049             ASRS     R1,R1,#+1
   \       0x66   0xFB10 0xF001      SMULBB   R0,R0,R1
   \       0x6A   0x1831             ADDS     R1,R6,R0
   \       0x6C   0x4620             MOV      R0,R4
   \       0x6E   0x....'....        BL       mbedtls_ecp_copy
   \       0x72   0x2800             CMP      R0,#+0
   \       0x74   0xD142             BNE.N    ??ecp_precompute_comb_0
   \       0x76   0xF04F 0x0A00      MOV      R10,#+0
   \       0x7A   0xE7DB             B.N      ??ecp_precompute_comb_3
   1312              }
   1313          
   1314              MBEDTLS_MPI_CHK( ecp_normalize_jac_many( grp, TT, k ) );
   \                     ??ecp_precompute_comb_4: (+1)
   \       0x7C   0xB2FF             UXTB     R7,R7
   \       0x7E   0x463A             MOV      R2,R7
   \       0x80   0x4669             MOV      R1,SP
   \       0x82   0x4628             MOV      R0,R5
   \       0x84   0x....'....        BL       ecp_normalize_jac_many
   \       0x88   0x2800             CMP      R0,#+0
   \       0x8A   0xD137             BNE.N    ??ecp_precompute_comb_0
   1315          
   1316              /*
   1317               * Compute the remaining ones using the minimal number of additions
   1318               * Be careful to update T[2^l] only after using it!
   1319               */
   1320              k = 0;
   \       0x8C   0x2700             MOVS     R7,#+0
   1321              for( i = 1; i < ( 1U << ( w - 1 ) ); i <<= 1 )
   \       0x8E   0x46A0             MOV      R8,R4
   \       0x90   0xE026             B.N      ??ecp_precompute_comb_5
   1322              {
   1323                  j = i;
   1324                  while( j-- )
   1325                  {
   1326                      MBEDTLS_MPI_CHK( ecp_add_mixed( grp, &T[i + j], &T[j], &T[i] ) );
   \                     ??ecp_precompute_comb_6: (+1)
   \       0x92   0xF04F 0x0A24      MOV      R10,#+36
   \       0x96   0xFB1A 0xF008      SMULBB   R0,R10,R8
   \       0x9A   0x1833             ADDS     R3,R6,R0
   \       0x9C   0xFB0A 0xF009      MUL      R0,R10,R9
   \       0xA0   0x1832             ADDS     R2,R6,R0
   \       0xA2   0xEB09 0x0008      ADD      R0,R9,R8
   \       0xA6   0xFB0A 0xF000      MUL      R0,R10,R0
   \       0xAA   0x1831             ADDS     R1,R6,R0
   \       0xAC   0x4628             MOV      R0,R5
   \       0xAE   0x....'....        BL       ecp_add_mixed
   \       0xB2   0x2800             CMP      R0,#+0
   \       0xB4   0xD122             BNE.N    ??ecp_precompute_comb_0
   1327                      TT[k++] = &T[i + j];
   \       0xB6   0xEB09 0x0008      ADD      R0,R9,R8
   \       0xBA   0xFB0A 0xFA00      MUL      R10,R10,R0
   \       0xBE   0xEB06 0x000A      ADD      R0,R6,R10
   \       0xC2   0x4669             MOV      R1,SP
   \       0xC4   0x463A             MOV      R2,R7
   \       0xC6   0xB2D2             UXTB     R2,R2
   \       0xC8   0xF841 0x0022      STR      R0,[R1, R2, LSL #+2]
   \       0xCC   0x1C7F             ADDS     R7,R7,#+1
   1328                  }
   \                     ??ecp_precompute_comb_7: (+1)
   \       0xCE   0x4648             MOV      R0,R9
   \       0xD0   0xF1A0 0x0901      SUB      R9,R0,#+1
   \       0xD4   0x2800             CMP      R0,#+0
   \       0xD6   0xD1DC             BNE.N    ??ecp_precompute_comb_6
   \       0xD8   0xEA4F 0x0848      LSL      R8,R8,#+1
   \       0xDC   0xFA5F 0xF888      UXTB     R8,R8
   \                     ??ecp_precompute_comb_5: (+1)
   \       0xE0   0xF1AB 0x0001      SUB      R0,R11,#+1
   \       0xE4   0xFA04 0xF000      LSL      R0,R4,R0
   \       0xE8   0x4580             CMP      R8,R0
   \       0xEA   0xD201             BCS.N    ??ecp_precompute_comb_8
   \       0xEC   0x46C1             MOV      R9,R8
   \       0xEE   0xE7EE             B.N      ??ecp_precompute_comb_7
   1329              }
   1330          
   1331              MBEDTLS_MPI_CHK( ecp_normalize_jac_many( grp, TT, k ) );
   \                     ??ecp_precompute_comb_8: (+1)
   \       0xF0   0xB2FF             UXTB     R7,R7
   \       0xF2   0x463A             MOV      R2,R7
   \       0xF4   0x4669             MOV      R1,SP
   \       0xF6   0x4628             MOV      R0,R5
   \       0xF8   0x....'....        BL       ecp_normalize_jac_many
   1332          
   1333          cleanup:
   1334          
   1335              return( ret );
   \                     ??ecp_precompute_comb_0: (+1)
   \       0xFC   0xE8BD 0x8FF2      POP      {R1,R4-R11,PC}   ;; return
   1336          }
   1337          #endif /*!MBEDTLS_ECP_MUL_COMB_ALT*/
   1338          
   1339          /*
   1340           * Select precomputed point: R = sign(i) * T[ abs(i) / 2 ]
   1341           */
   1342          #if !defined(MBEDTLS_ECP_MUL_COMB_ALT)

   \                                 In section .text, align 2, keep-with-next
   1343          static int ecp_select_comb( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
   1344                                      const mbedtls_ecp_point T[], unsigned char t_len,
   1345                                      unsigned char i )
   1346          {
   \                     ecp_select_comb: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \        0x4   0x4605             MOV      R5,R0
   \        0x6   0x4689             MOV      R9,R1
   \        0x8   0x4692             MOV      R10,R2
   \        0xA   0x469B             MOV      R11,R3
   \        0xC   0x9C0A             LDR      R4,[SP, #+40]
   1347              int ret;
   1348              unsigned char ii, j;
   1349          
   1350              /* Ignore the "sign" bit and scale down */
   1351              ii =  ( i & 0x7Fu ) >> 1;
   \        0xE   0xF3C4 0x0745      UBFX     R7,R4,#+1,#+6
   1352          
   1353              /* Read the whole table to thwart cache-based timing attacks */
   1354              for( j = 0; j < t_len; j++ )
   \       0x12   0xF04F 0x0800      MOV      R8,#+0
   \       0x16   0xE01F             B.N      ??ecp_select_comb_0
   1355              {
   1356                  MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->X, &T[j].X, j == ii ) );
   1357                  MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->Y, &T[j].Y, j == ii ) );
   \                     ??ecp_select_comb_1: (+1)
   \       0x18   0x2200             MOVS     R2,#+0
   \       0x1A   0xE00D             B.N      ??ecp_select_comb_2
   \                     ??ecp_select_comb_3: (+1)
   \       0x1C   0x2200             MOVS     R2,#+0
   \                     ??ecp_select_comb_4: (+1)
   \       0x1E   0x2624             MOVS     R6,#+36
   \       0x20   0xFB16 0xF008      SMULBB   R0,R6,R8
   \       0x24   0xEB0A 0x0100      ADD      R1,R10,R0
   \       0x28   0x4648             MOV      R0,R9
   \       0x2A   0x....'....        BL       mbedtls_mpi_safe_cond_assign
   \       0x2E   0x2800             CMP      R0,#+0
   \       0x30   0xD121             BNE.N    ??ecp_select_comb_5
   \       0x32   0x45B8             CMP      R8,R7
   \       0x34   0xD1F0             BNE.N    ??ecp_select_comb_1
   \       0x36   0x2201             MOVS     R2,#+1
   \                     ??ecp_select_comb_2: (+1)
   \       0x38   0xFB16 0xF608      SMULBB   R6,R6,R8
   \       0x3C   0xEB0A 0x0006      ADD      R0,R10,R6
   \       0x40   0xF100 0x010C      ADD      R1,R0,#+12
   \       0x44   0xF109 0x000C      ADD      R0,R9,#+12
   \       0x48   0x....'....        BL       mbedtls_mpi_safe_cond_assign
   \       0x4C   0x2800             CMP      R0,#+0
   \       0x4E   0xD112             BNE.N    ??ecp_select_comb_5
   \       0x50   0xF108 0x0801      ADD      R8,R8,#+1
   \       0x54   0xFA5F 0xF888      UXTB     R8,R8
   \                     ??ecp_select_comb_0: (+1)
   \       0x58   0x4658             MOV      R0,R11
   \       0x5A   0x4580             CMP      R8,R0
   \       0x5C   0xDA03             BGE.N    ??ecp_select_comb_6
   \       0x5E   0x45B8             CMP      R8,R7
   \       0x60   0xD1DC             BNE.N    ??ecp_select_comb_3
   \       0x62   0x2201             MOVS     R2,#+1
   \       0x64   0xE7DB             B.N      ??ecp_select_comb_4
   1358              }
   1359          
   1360              /* Safely invert result if i is "negative" */
   1361              MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, R, i >> 7 ) );
   \                     ??ecp_select_comb_6: (+1)
   \       0x66   0x09E4             LSRS     R4,R4,#+7
   \       0x68   0x4622             MOV      R2,R4
   \       0x6A   0x4649             MOV      R1,R9
   \       0x6C   0x4628             MOV      R0,R5
   \       0x6E   0xE8BD 0x4FF8      POP      {R3-R11,LR}
   \       0x72   0x....'....        B.W      ecp_safe_invert_jac
   1362          
   1363          cleanup:
   1364              return( ret );
   \                     ??ecp_select_comb_5: (+1)
   \       0x76   0xE8BD 0x8FF2      POP      {R1,R4-R11,PC}   ;; return
   1365          }
   1366          #endif /*!MBEDTLS_ECP_MUL_COMB_ALT*/
   1367          
   1368          /*
   1369           * Core multiplication algorithm for the (modified) comb method.
   1370           * This part is actually common with the basic comb method (GECC 3.44)
   1371           *
   1372           * Cost: d A + d D + 1 R
   1373           */
   1374          #if !defined(MBEDTLS_ECP_MUL_COMB_ALT)

   \                                 In section .text, align 2, keep-with-next
   1375          static int ecp_mul_comb_core( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
   1376                                        const mbedtls_ecp_point T[], unsigned char t_len,
   1377                                        const unsigned char x[], size_t d,
   1378                                        int (*f_rng)(void *, unsigned char *, size_t),
   1379                                        void *p_rng )
   1380          {
   \                     ecp_mul_comb_core: (+1)
   \        0x0   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \        0x4   0xB08A             SUB      SP,SP,#+40
   \        0x6   0x4604             MOV      R4,R0
   \        0x8   0x460D             MOV      R5,R1
   \        0xA   0x4616             MOV      R6,R2
   \        0xC   0x461F             MOV      R7,R3
   \        0xE   0xF8DD 0x8048      LDR      R8,[SP, #+72]
   \       0x12   0xF8DD 0x904C      LDR      R9,[SP, #+76]
   1381              int ret;
   1382              mbedtls_ecp_point Txi;
   1383              size_t i;
   1384          
   1385              mbedtls_ecp_point_init( &Txi );
   \       0x16   0xA801             ADD      R0,SP,#+4
   \       0x18   0x....'....        BL       mbedtls_ecp_point_init
   1386          
   1387              /* Start with a non-zero point and randomize its coordinates */
   1388              i = d;
   1389              MBEDTLS_MPI_CHK( ecp_select_comb( grp, R, T, t_len, x[i] ) );
   \       0x1C   0xF818 0x0009      LDRB     R0,[R8, R9]
   \       0x20   0x9000             STR      R0,[SP, #+0]
   \       0x22   0x463B             MOV      R3,R7
   \       0x24   0x4632             MOV      R2,R6
   \       0x26   0x4629             MOV      R1,R5
   \       0x28   0x4620             MOV      R0,R4
   \       0x2A   0x....'....        BL       ecp_select_comb
   \       0x2E   0x4682             MOV      R10,R0
   \       0x30   0x2800             CMP      R0,#+0
   \       0x32   0xD133             BNE.N    ??ecp_mul_comb_core_0
   1390              MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->Z, 1 ) );
   \       0x34   0x2101             MOVS     R1,#+1
   \       0x36   0xF105 0x0018      ADD      R0,R5,#+24
   \       0x3A   0x....'....        BL       mbedtls_mpi_lset
   \       0x3E   0x4682             MOV      R10,R0
   \       0x40   0x2800             CMP      R0,#+0
   \       0x42   0xD12B             BNE.N    ??ecp_mul_comb_core_0
   \       0x44   0x9A14             LDR      R2,[SP, #+80]
   1391              if( f_rng != 0 )
   \       0x46   0x0010             MOVS     R0,R2
   \       0x48   0xD007             BEQ.N    ??ecp_mul_comb_core_1
   \       0x4A   0x9B15             LDR      R3,[SP, #+84]
   1392                  MBEDTLS_MPI_CHK( ecp_randomize_jac( grp, R, f_rng, p_rng ) );
   \       0x4C   0x4629             MOV      R1,R5
   \       0x4E   0x4620             MOV      R0,R4
   \       0x50   0x....'....        BL       ecp_randomize_jac
   \       0x54   0x4682             MOV      R10,R0
   \       0x56   0x2800             CMP      R0,#+0
   \       0x58   0xD120             BNE.N    ??ecp_mul_comb_core_0
   \                     ??ecp_mul_comb_core_1: (+1)
   \       0x5A   0x4650             MOV      R0,R10
   1393          
   1394              while( i-- != 0 )
   \                     ??ecp_mul_comb_core_2: (+1)
   \       0x5C   0x4649             MOV      R1,R9
   \       0x5E   0xF1A1 0x0901      SUB      R9,R1,#+1
   \       0x62   0x2900             CMP      R1,#+0
   \       0x64   0xD019             BEQ.N    ??ecp_mul_comb_core_3
   1395              {
   1396                  MBEDTLS_MPI_CHK( ecp_double_jac( grp, R, R ) );
   \       0x66   0x462A             MOV      R2,R5
   \       0x68   0x4629             MOV      R1,R5
   \       0x6A   0x4620             MOV      R0,R4
   \       0x6C   0x....'....        BL       ecp_double_jac
   \       0x70   0x2800             CMP      R0,#+0
   \       0x72   0xD112             BNE.N    ??ecp_mul_comb_core_3
   1397                  MBEDTLS_MPI_CHK( ecp_select_comb( grp, &Txi, T, t_len, x[i] ) );
   \       0x74   0xF818 0x0009      LDRB     R0,[R8, R9]
   \       0x78   0x9000             STR      R0,[SP, #+0]
   \       0x7A   0x463B             MOV      R3,R7
   \       0x7C   0x4632             MOV      R2,R6
   \       0x7E   0xA901             ADD      R1,SP,#+4
   \       0x80   0x4620             MOV      R0,R4
   \       0x82   0x....'....        BL       ecp_select_comb
   \       0x86   0x2800             CMP      R0,#+0
   \       0x88   0xD107             BNE.N    ??ecp_mul_comb_core_3
   1398                  MBEDTLS_MPI_CHK( ecp_add_mixed( grp, R, R, &Txi ) );
   \       0x8A   0xAB01             ADD      R3,SP,#+4
   \       0x8C   0x462A             MOV      R2,R5
   \       0x8E   0x4629             MOV      R1,R5
   \       0x90   0x4620             MOV      R0,R4
   \       0x92   0x....'....        BL       ecp_add_mixed
   \       0x96   0x2800             CMP      R0,#+0
   \       0x98   0xD0E0             BEQ.N    ??ecp_mul_comb_core_2
   \                     ??ecp_mul_comb_core_3: (+1)
   \       0x9A   0x4682             MOV      R10,R0
   1399              }
   1400          
   1401          cleanup:
   1402          
   1403              mbedtls_ecp_point_free( &Txi );
   \                     ??ecp_mul_comb_core_0: (+1)
   \       0x9C   0xA801             ADD      R0,SP,#+4
   \       0x9E   0x....'....        BL       mbedtls_ecp_point_free
   1404          
   1405              return( ret );
   \       0xA2   0x4650             MOV      R0,R10
   \       0xA4   0xB00A             ADD      SP,SP,#+40
   \       0xA6   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
   1406          }
   1407          #endif /*!MBEDTLS_ECP_MUL_COMB_ALT*/
   1408          
   1409          /*
   1410           * Multiplication using the comb method,
   1411           * for curves in short Weierstrass form
   1412           */
   1413          #if !defined(MBEDTLS_ECP_MUL_COMB_ALT)

   \                                 In section .text, align 2, keep-with-next
   1414          static int ecp_mul_comb( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
   1415                                   const mbedtls_mpi *m, const mbedtls_ecp_point *P,
   1416                                   int (*f_rng)(void *, unsigned char *, size_t),
   1417                                   void *p_rng )
   1418          {
   \                     ecp_mul_comb: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \        0x4   0xB0BC             SUB      SP,SP,#+240
   \        0x6   0x4607             MOV      R7,R0
   \        0x8   0x460E             MOV      R6,R1
   \        0xA   0x4692             MOV      R10,R2
   \        0xC   0x461D             MOV      R5,R3
   1419              int ret;
   1420              unsigned char w, m_is_odd, p_eq_g, pre_len, i;
   1421              size_t d;
   1422              unsigned char k[COMB_MAX_D + 1];
   1423              mbedtls_ecp_point *T;
   1424              mbedtls_mpi M, mm;
   1425          
   1426              mbedtls_mpi_init( &M );
   \        0xE   0xA808             ADD      R0,SP,#+32
   \       0x10   0x....'....        BL       mbedtls_mpi_init
   1427              mbedtls_mpi_init( &mm );
   \       0x14   0xA805             ADD      R0,SP,#+20
   \       0x16   0x....'....        BL       mbedtls_mpi_init
   1428          
   1429              /* we need N to be odd to trnaform m in an odd number, check now */
   1430              if( mbedtls_mpi_get_bit( &grp->N, 0 ) != 1 )
   \       0x1A   0x2100             MOVS     R1,#+0
   \       0x1C   0xF107 0x004C      ADD      R0,R7,#+76
   \       0x20   0x....'....        BL       mbedtls_mpi_get_bit
   \       0x24   0x2801             CMP      R0,#+1
   \       0x26   0xD002             BEQ.N    ??ecp_mul_comb_0
   1431                  return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   \       0x28   0x....'....        LDR.W    R0,??DataTable21  ;; 0xffffb080
   \       0x2C   0xE0A4             B.N      ??ecp_mul_comb_1
   1432          
   1433              /*
   1434               * Minimize the number of multiplications, that is minimize
   1435               * 10 * d * w + 18 * 2^(w-1) + 11 * d + 7 * w, with d = ceil( nbits / w )
   1436               * (see costs of the various parts, with 1S = 1M)
   1437               */
   1438              w = grp->nbits >= 384 ? 5 : 4;
   \                     ??ecp_mul_comb_0: (+1)
   \       0x2E   0x6DF8             LDR      R0,[R7, #+92]
   \       0x30   0xF5B0 0x7FC0      CMP      R0,#+384
   \       0x34   0xD302             BCC.N    ??ecp_mul_comb_2
   \       0x36   0xF04F 0x0805      MOV      R8,#+5
   \       0x3A   0xE001             B.N      ??ecp_mul_comb_3
   \                     ??ecp_mul_comb_2: (+1)
   \       0x3C   0xF04F 0x0804      MOV      R8,#+4
   1439          
   1440              /*
   1441               * If P == G, pre-compute a bit more, since this may be re-used later.
   1442               * Just adding one avoids upping the cost of the first mul too much,
   1443               * and the memory cost too.
   1444               */
   1445          #if MBEDTLS_ECP_FIXED_POINT_OPTIM == 1
   1446              p_eq_g = ( mbedtls_mpi_cmp_mpi( &P->Y, &grp->G.Y ) == 0 &&
   1447                         mbedtls_mpi_cmp_mpi( &P->X, &grp->G.X ) == 0 );
   1448              if( p_eq_g )
   1449                  w++;
   1450          #else
   1451              p_eq_g = 0;
   1452          #endif
   1453          
   1454              /*
   1455               * Make sure w is within bounds.
   1456               * (The last test is useful only for very small curves in the test suite.)
   1457               */
   1458              if( w > MBEDTLS_ECP_WINDOW_SIZE )
   \                     ??ecp_mul_comb_3: (+1)
   \       0x40   0x4640             MOV      R0,R8
   \       0x42   0x2803             CMP      R0,#+3
   \       0x44   0xDB01             BLT.N    ??ecp_mul_comb_4
   1459                  w = MBEDTLS_ECP_WINDOW_SIZE;
   \       0x46   0xF04F 0x0802      MOV      R8,#+2
   1460              if( w >= grp->nbits )
   \                     ??ecp_mul_comb_4: (+1)
   \       0x4A   0x4640             MOV      R0,R8
   \       0x4C   0x6DF9             LDR      R1,[R7, #+92]
   \       0x4E   0x4288             CMP      R0,R1
   \       0x50   0xD301             BCC.N    ??ecp_mul_comb_5
   1461                  w = 2;
   \       0x52   0xF04F 0x0802      MOV      R8,#+2
   1462          
   1463              /* Other sizes that depend on w */
   1464              pre_len = 1U << ( w - 1 );
   \                     ??ecp_mul_comb_5: (+1)
   \       0x56   0x2101             MOVS     R1,#+1
   \       0x58   0xF1A8 0x0001      SUB      R0,R8,#+1
   \       0x5C   0x4081             LSLS     R1,R1,R0
   \       0x5E   0xB2C9             UXTB     R1,R1
   \       0x60   0x9104             STR      R1,[SP, #+16]
   1465              d = ( grp->nbits + w - 1 ) / w;
   \       0x62   0x6DF8             LDR      R0,[R7, #+92]
   \       0x64   0x4440             ADD      R0,R0,R8
   \       0x66   0x1E40             SUBS     R0,R0,#+1
   \       0x68   0x4641             MOV      R1,R8
   \       0x6A   0xFBB0 0xF9F1      UDIV     R9,R0,R1
   1466          
   1467              /*
   1468               * Prepare precomputed points: if P == G we want to
   1469               * use grp->T if already initialized, or initialize it.
   1470               */
   1471              T = p_eq_g ? grp->T : NULL;
   1472          
   1473              if( T == NULL )
   1474              {
   1475                  T = mbedtls_calloc( pre_len, sizeof( mbedtls_ecp_point ) );
   \       0x6E   0x2124             MOVS     R1,#+36
   \       0x70   0x9804             LDR      R0,[SP, #+16]
   \       0x72   0x....'....        BL       mbedtls_calloc
   \       0x76   0x0004             MOVS     R4,R0
   1476                  if( T == NULL )
   \       0x78   0xD102             BNE.N    ??ecp_mul_comb_6
   1477                  {
   1478                      ret = MBEDTLS_ERR_ECP_ALLOC_FAILED;
   \       0x7A   0x....'....        LDR.W    R5,??DataTable24_3  ;; 0xffffb280
   1479                      goto cleanup;
   \       0x7E   0xE055             B.N      ??ecp_mul_comb_7
   1480                  }
   1481          
   1482                  MBEDTLS_MPI_CHK( ecp_precompute_comb( grp, T, P, w, d ) );
   \                     ??ecp_mul_comb_6: (+1)
   \       0x80   0xF8CD 0x9000      STR      R9,[SP, #+0]
   \       0x84   0x4643             MOV      R3,R8
   \       0x86   0x462A             MOV      R2,R5
   \       0x88   0x4621             MOV      R1,R4
   \       0x8A   0x4638             MOV      R0,R7
   \       0x8C   0x....'....        BL       ecp_precompute_comb
   \       0x90   0x0005             MOVS     R5,R0
   \       0x92   0xD14B             BNE.N    ??ecp_mul_comb_7
   1483          
   1484                  if( p_eq_g )
   1485                  {
   1486                      grp->T = T;
   1487                      grp->T_size = pre_len;
   1488                  }
   1489              }
   1490          
   1491              /*
   1492               * Make sure M is odd (M = m or M = N - m, since N is odd)
   1493               * using the fact that m * P = - (N - m) * P
   1494               */
   1495              m_is_odd = ( mbedtls_mpi_get_bit( m, 0 ) == 1 );
   \       0x94   0x2100             MOVS     R1,#+0
   \       0x96   0x4650             MOV      R0,R10
   \       0x98   0x....'....        BL       mbedtls_mpi_get_bit
   \       0x9C   0x2801             CMP      R0,#+1
   \       0x9E   0xD102             BNE.N    ??ecp_mul_comb_8
   \       0xA0   0xF04F 0x0B01      MOV      R11,#+1
   \       0xA4   0xE001             B.N      ??ecp_mul_comb_9
   \                     ??ecp_mul_comb_8: (+1)
   \       0xA6   0xF04F 0x0B00      MOV      R11,#+0
   1496              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &M, m ) );
   \                     ??ecp_mul_comb_9: (+1)
   \       0xAA   0x4651             MOV      R1,R10
   \       0xAC   0xA808             ADD      R0,SP,#+32
   \       0xAE   0x....'....        BL       mbedtls_mpi_copy
   \       0xB2   0x0005             MOVS     R5,R0
   \       0xB4   0xD13A             BNE.N    ??ecp_mul_comb_7
   1497              MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mm, &grp->N, m ) );
   \       0xB6   0x4652             MOV      R2,R10
   \       0xB8   0xF107 0x014C      ADD      R1,R7,#+76
   \       0xBC   0xA805             ADD      R0,SP,#+20
   \       0xBE   0x....'....        BL       mbedtls_mpi_sub_mpi
   \       0xC2   0x0005             MOVS     R5,R0
   \       0xC4   0xD132             BNE.N    ??ecp_mul_comb_7
   1498              MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &M, &mm, ! m_is_odd ) );
   \       0xC6   0x4658             MOV      R0,R11
   \       0xC8   0x4602             MOV      R2,R0
   \       0xCA   0x1E52             SUBS     R2,R2,#+1
   \       0xCC   0x4192             SBCS     R2,R2,R2
   \       0xCE   0x0FD2             LSRS     R2,R2,#+31
   \       0xD0   0xA905             ADD      R1,SP,#+20
   \       0xD2   0xA808             ADD      R0,SP,#+32
   \       0xD4   0x....'....        BL       mbedtls_mpi_safe_cond_assign
   \       0xD8   0x0005             MOVS     R5,R0
   \       0xDA   0xD127             BNE.N    ??ecp_mul_comb_7
   \       0xDC   0xF8DD 0xA11C      LDR      R10,[SP, #+284]
   \       0xE0   0x9D46             LDR      R5,[SP, #+280]
   1499          
   1500              /*
   1501               * Go for comb multiplication, R = M * P
   1502               */
   1503              ecp_comb_fixed( k, d, w, &M );
   \       0xE2   0xAB08             ADD      R3,SP,#+32
   \       0xE4   0x4642             MOV      R2,R8
   \       0xE6   0x4649             MOV      R1,R9
   \       0xE8   0xA80B             ADD      R0,SP,#+44
   \       0xEA   0x....'....        BL       ecp_comb_fixed
   1504              MBEDTLS_MPI_CHK( ecp_mul_comb_core( grp, R, T, pre_len, k, d, f_rng, p_rng ) );
   \       0xEE   0xF8CD 0xA00C      STR      R10,[SP, #+12]
   \       0xF2   0x9502             STR      R5,[SP, #+8]
   \       0xF4   0xF8CD 0x9004      STR      R9,[SP, #+4]
   \       0xF8   0xA80B             ADD      R0,SP,#+44
   \       0xFA   0x9000             STR      R0,[SP, #+0]
   \       0xFC   0x9B04             LDR      R3,[SP, #+16]
   \       0xFE   0xB2DB             UXTB     R3,R3
   \      0x100   0x4622             MOV      R2,R4
   \      0x102   0x4631             MOV      R1,R6
   \      0x104   0x4638             MOV      R0,R7
   \      0x106   0x....'....        BL       ecp_mul_comb_core
   \      0x10A   0x0005             MOVS     R5,R0
   \      0x10C   0xD10E             BNE.N    ??ecp_mul_comb_7
   1505          
   1506              /*
   1507               * Now get m * P from M * P and normalize it
   1508               */
   1509              MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, R, ! m_is_odd ) );
   \      0x10E   0x465A             MOV      R2,R11
   \      0x110   0x1E52             SUBS     R2,R2,#+1
   \      0x112   0x4192             SBCS     R2,R2,R2
   \      0x114   0x0FD2             LSRS     R2,R2,#+31
   \      0x116   0x4631             MOV      R1,R6
   \      0x118   0x4638             MOV      R0,R7
   \      0x11A   0x....'....        BL       ecp_safe_invert_jac
   \      0x11E   0x0005             MOVS     R5,R0
   \      0x120   0xD104             BNE.N    ??ecp_mul_comb_7
   1510              MBEDTLS_MPI_CHK( ecp_normalize_jac( grp, R ) );
   \      0x122   0x4631             MOV      R1,R6
   \      0x124   0x4638             MOV      R0,R7
   \      0x126   0x....'....        BL       ecp_normalize_jac
   \      0x12A   0x4605             MOV      R5,R0
   1511          
   1512          cleanup:
   1513          
   1514              /* There are two cases where T is not stored in grp:
   1515               * - P != G
   1516               * - An intermediate operation failed before setting grp->T
   1517               * In either case, T must be freed.
   1518               */
   1519              if( T != NULL && T != grp->T )
   \                     ??ecp_mul_comb_7: (+1)
   \      0x12C   0x2C00             CMP      R4,#+0
   \      0x12E   0xD017             BEQ.N    ??ecp_mul_comb_10
   \      0x130   0x6F78             LDR      R0,[R7, #+116]
   \      0x132   0x4284             CMP      R4,R0
   \      0x134   0xD014             BEQ.N    ??ecp_mul_comb_10
   1520              {
   1521                  for( i = 0; i < pre_len; i++ )
   \      0x136   0xF04F 0x0800      MOV      R8,#+0
   \      0x13A   0x9F04             LDR      R7,[SP, #+16]
   \      0x13C   0xE009             B.N      ??ecp_mul_comb_11
   1522                      mbedtls_ecp_point_free( &T[i] );
   \                     ??ecp_mul_comb_12: (+1)
   \      0x13E   0x4640             MOV      R0,R8
   \      0x140   0xB2C0             UXTB     R0,R0
   \      0x142   0xEB00 0x01C0      ADD      R1,R0,R0, LSL #+3
   \      0x146   0xEB04 0x0081      ADD      R0,R4,R1, LSL #+2
   \      0x14A   0x....'....        BL       mbedtls_ecp_point_free
   \      0x14E   0xF108 0x0801      ADD      R8,R8,#+1
   \                     ??ecp_mul_comb_11: (+1)
   \      0x152   0x4640             MOV      R0,R8
   \      0x154   0xB2C0             UXTB     R0,R0
   \      0x156   0x42B8             CMP      R0,R7
   \      0x158   0xDBF1             BLT.N    ??ecp_mul_comb_12
   1523                  mbedtls_free( T );
   \      0x15A   0x4620             MOV      R0,R4
   \      0x15C   0x....'....        BL       mbedtls_free
   1524              }
   1525          
   1526              mbedtls_mpi_free( &M );
   \                     ??ecp_mul_comb_10: (+1)
   \      0x160   0xA808             ADD      R0,SP,#+32
   \      0x162   0x....'....        BL       mbedtls_mpi_free
   1527              mbedtls_mpi_free( &mm );
   \      0x166   0xA805             ADD      R0,SP,#+20
   \      0x168   0x....'....        BL       mbedtls_mpi_free
   1528          
   1529              if( ret != 0 )
   \      0x16C   0x2D00             CMP      R5,#+0
   \      0x16E   0xD002             BEQ.N    ??ecp_mul_comb_13
   1530                  mbedtls_ecp_point_free( R );
   \      0x170   0x4630             MOV      R0,R6
   \      0x172   0x....'....        BL       mbedtls_ecp_point_free
   1531          
   1532              return( ret );
   \                     ??ecp_mul_comb_13: (+1)
   \      0x176   0x4628             MOV      R0,R5
   \                     ??ecp_mul_comb_1: (+1)
   \      0x178   0xB03D             ADD      SP,SP,#+244
   \      0x17A   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   1533          }
   1534          #else
   1535          int ecp_mul_comb( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
   1536                                   const mbedtls_mpi *m, const mbedtls_ecp_point *P,
   1537                                   int (*f_rng)(void *, unsigned char *, size_t),
   1538                                   void *p_rng );
   1539          #endif /*!MBEDTLS_ECP_MUL_COMB_ALT*/
   1540          
   1541          #endif /* ECP_SHORTWEIERSTRASS */
   1542          
   1543          #if defined(ECP_MONTGOMERY)
   1544          /*
   1545           * For Montgomery curves, we do all the internal arithmetic in projective
   1546           * coordinates. Import/export of points uses only the x coordinates, which is
   1547           * internaly represented as X / Z.
   1548           *
   1549           * For scalar multiplication, we'll use a Montgomery ladder.
   1550           */
   1551          
   1552          /*
   1553           * Normalize Montgomery x/z coordinates: X = X/Z, Z = 1
   1554           * Cost: 1M + 1I
   1555           */
   1556          static int ecp_normalize_mxz( const mbedtls_ecp_group *grp, mbedtls_ecp_point *P )
   1557          {
   1558              int ret;
   1559          
   1560          #if defined(MBEDTLS_ECP_NORMALIZE_MXZ_ALT)
   1561              if ( mbedtls_internal_ecp_grp_capable( grp ) )
   1562              {
   1563                  return mbedtls_internal_ecp_normalize_mxz( grp, P );
   1564              }
   1565          #endif /* MBEDTLS_ECP_NORMALIZE_MXZ_ALT */
   1566          
   1567              MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &P->Z, &P->Z, &grp->P ) );
   1568              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &P->X, &P->X, &P->Z ) ); MOD_MUL( P->X );
   1569              MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &P->Z, 1 ) );
   1570          
   1571          cleanup:
   1572              return( ret );
   1573          }
   1574          
   1575          /*
   1576           * Randomize projective x/z coordinates:
   1577           * (X, Z) -> (l X, l Z) for random l
   1578           * This is sort of the reverse operation of ecp_normalize_mxz().
   1579           *
   1580           * This countermeasure was first suggested in [2].
   1581           * Cost: 2M
   1582           */
   1583          static int ecp_randomize_mxz( const mbedtls_ecp_group *grp, mbedtls_ecp_point *P,
   1584                          int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
   1585          {
   1586              int ret;
   1587              mbedtls_mpi l;
   1588              size_t p_size;
   1589              int count = 0;
   1590          
   1591          #if defined(MBEDTLS_ECP_RANDOMIZE_MXZ_ALT)
   1592              if ( mbedtls_internal_ecp_grp_capable( grp ) )
   1593              {
   1594                  return mbedtls_internal_ecp_randomize_mxz( grp, P, f_rng, p_rng );
   1595              }
   1596          #endif /* MBEDTLS_ECP_RANDOMIZE_MXZ_ALT */
   1597          
   1598              p_size = ( grp->pbits + 7 ) / 8;
   1599              mbedtls_mpi_init( &l );
   1600          
   1601              /* Generate l such that 1 < l < p */
   1602              do
   1603              {
   1604                  MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &l, p_size, f_rng, p_rng ) );
   1605          
   1606                  while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )
   1607                      MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &l, 1 ) );
   1608          
   1609                  if( count++ > 10 )
   1610                      return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
   1611              }
   1612              while( mbedtls_mpi_cmp_int( &l, 1 ) <= 0 );
   1613          
   1614              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &P->X, &P->X, &l ) ); MOD_MUL( P->X );
   1615              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &P->Z, &P->Z, &l ) ); MOD_MUL( P->Z );
   1616          
   1617          cleanup:
   1618              mbedtls_mpi_free( &l );
   1619          
   1620              return( ret );
   1621          }
   1622          
   1623          /*
   1624           * Double-and-add: R = 2P, S = P + Q, with d = X(P - Q),
   1625           * for Montgomery curves in x/z coordinates.
   1626           *
   1627           * http://www.hyperelliptic.org/EFD/g1p/auto-code/montgom/xz/ladder/mladd-1987-m.op3
   1628           * with
   1629           * d =  X1
   1630           * P = (X2, Z2)
   1631           * Q = (X3, Z3)
   1632           * R = (X4, Z4)
   1633           * S = (X5, Z5)
   1634           * and eliminating temporary variables tO, ..., t4.
   1635           *
   1636           * Cost: 5M + 4S
   1637           */
   1638          static int ecp_double_add_mxz( const mbedtls_ecp_group *grp,
   1639                                         mbedtls_ecp_point *R, mbedtls_ecp_point *S,
   1640                                         const mbedtls_ecp_point *P, const mbedtls_ecp_point *Q,
   1641                                         const mbedtls_mpi *d )
   1642          {
   1643              int ret;
   1644              mbedtls_mpi A, AA, B, BB, E, C, D, DA, CB;
   1645          
   1646          #if defined(MBEDTLS_ECP_DOUBLE_ADD_MXZ_ALT)
   1647              if ( mbedtls_internal_ecp_grp_capable( grp ) )
   1648              {
   1649                  return mbedtls_internal_ecp_double_add_mxz( grp, R, S, P, Q, d );
   1650              }
   1651          #endif /* MBEDTLS_ECP_DOUBLE_ADD_MXZ_ALT */
   1652          
   1653              mbedtls_mpi_init( &A ); mbedtls_mpi_init( &AA ); mbedtls_mpi_init( &B );
   1654              mbedtls_mpi_init( &BB ); mbedtls_mpi_init( &E ); mbedtls_mpi_init( &C );
   1655              mbedtls_mpi_init( &D ); mbedtls_mpi_init( &DA ); mbedtls_mpi_init( &CB );
   1656          
   1657              MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &A,    &P->X,   &P->Z ) ); MOD_ADD( A    );
   1658              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &AA,   &A,      &A    ) ); MOD_MUL( AA   );
   1659              MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &B,    &P->X,   &P->Z ) ); MOD_SUB( B    );
   1660              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &BB,   &B,      &B    ) ); MOD_MUL( BB   );
   1661              MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &E,    &AA,     &BB   ) ); MOD_SUB( E    );
   1662              MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &C,    &Q->X,   &Q->Z ) ); MOD_ADD( C    );
   1663              MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &D,    &Q->X,   &Q->Z ) ); MOD_SUB( D    );
   1664              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DA,   &D,      &A    ) ); MOD_MUL( DA   );
   1665              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &CB,   &C,      &B    ) ); MOD_MUL( CB   );
   1666              MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &S->X, &DA,     &CB   ) ); MOD_MUL( S->X );
   1667              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S->X, &S->X,   &S->X ) ); MOD_MUL( S->X );
   1668              MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S->Z, &DA,     &CB   ) ); MOD_SUB( S->Z );
   1669              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S->Z, &S->Z,   &S->Z ) ); MOD_MUL( S->Z );
   1670              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S->Z, d,       &S->Z ) ); MOD_MUL( S->Z );
   1671              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &R->X, &AA,     &BB   ) ); MOD_MUL( R->X );
   1672              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &R->Z, &grp->A, &E    ) ); MOD_MUL( R->Z );
   1673              MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &R->Z, &BB,     &R->Z ) ); MOD_ADD( R->Z );
   1674              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &R->Z, &E,      &R->Z ) ); MOD_MUL( R->Z );
   1675          
   1676          cleanup:
   1677              mbedtls_mpi_free( &A ); mbedtls_mpi_free( &AA ); mbedtls_mpi_free( &B );
   1678              mbedtls_mpi_free( &BB ); mbedtls_mpi_free( &E ); mbedtls_mpi_free( &C );
   1679              mbedtls_mpi_free( &D ); mbedtls_mpi_free( &DA ); mbedtls_mpi_free( &CB );
   1680          
   1681              return( ret );
   1682          }
   1683          
   1684          /*
   1685           * Multiplication with Montgomery ladder in x/z coordinates,
   1686           * for curves in Montgomery form
   1687           */
   1688          #if !defined(MBEDTLS_ECP_MUL_MXZ_ALT)
   1689          static int ecp_mul_mxz( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
   1690                                  const mbedtls_mpi *m, const mbedtls_ecp_point *P,
   1691                                  int (*f_rng)(void *, unsigned char *, size_t),
   1692                                  void *p_rng )
   1693          {
   1694              int ret;
   1695              size_t i;
   1696              unsigned char b;
   1697              mbedtls_ecp_point RP;
   1698              mbedtls_mpi PX;
   1699          
   1700              mbedtls_ecp_point_init( &RP ); mbedtls_mpi_init( &PX );
   1701          
   1702              /* Save PX and read from P before writing to R, in case P == R */
   1703              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &PX, &P->X ) );
   1704              MBEDTLS_MPI_CHK( mbedtls_ecp_copy( &RP, P ) );
   1705          
   1706              /* Set R to zero in modified x/z coordinates */
   1707              MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->X, 1 ) );
   1708              MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->Z, 0 ) );
   1709              mbedtls_mpi_free( &R->Y );
   1710          
   1711              /* RP.X might be sligtly larger than P, so reduce it */
   1712              MOD_ADD( RP.X );
   1713          
   1714              /* Randomize coordinates of the starting point */
   1715              if( f_rng != NULL )
   1716                  MBEDTLS_MPI_CHK( ecp_randomize_mxz( grp, &RP, f_rng, p_rng ) );
   1717          
   1718              /* Loop invariant: R = result so far, RP = R + P */
   1719              i = mbedtls_mpi_bitlen( m ); /* one past the (zero-based) most significant bit */
   1720              while( i-- > 0 )
   1721              {
   1722                  b = mbedtls_mpi_get_bit( m, i );
   1723                  /*
   1724                   *  if (b) R = 2R + P else R = 2R,
   1725                   * which is:
   1726                   *  if (b) double_add( RP, R, RP, R )
   1727                   *  else   double_add( R, RP, R, RP )
   1728                   * but using safe conditional swaps to avoid leaks
   1729                   */
   1730                  MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->X, &RP.X, b ) );
   1731                  MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->Z, &RP.Z, b ) );
   1732                  MBEDTLS_MPI_CHK( ecp_double_add_mxz( grp, R, &RP, R, &RP, &PX ) );
   1733                  MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->X, &RP.X, b ) );
   1734                  MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->Z, &RP.Z, b ) );
   1735              }
   1736          
   1737              MBEDTLS_MPI_CHK( ecp_normalize_mxz( grp, R ) );
   1738          
   1739          cleanup:
   1740              mbedtls_ecp_point_free( &RP ); mbedtls_mpi_free( &PX );
   1741          
   1742              return( ret );
   1743          }
   1744          
   1745          #else
   1746          int ecp_mul_mxz( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
   1747                           const mbedtls_mpi *m, const mbedtls_ecp_point *P,
   1748                           int (*f_rng)(void *, unsigned char *, size_t),
   1749                           void *p_rng );
   1750          #endif /* MBEDTLS_ECP_MUL_MXZ_ALT */
   1751          #endif /* ECP_MONTGOMERY */
   1752          
   1753          /*
   1754           * Multiplication R = m * P
   1755           */

   \                                 In section .text, align 2, keep-with-next
   1756          int mbedtls_ecp_mul( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
   1757                       const mbedtls_mpi *m, const mbedtls_ecp_point *P,
   1758                       int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
   1759          {
   \                     mbedtls_ecp_mul: (+1)
   \        0x0   0xE92D 0x41FC      PUSH     {R2-R8,LR}
   \        0x4   0x4605             MOV      R5,R0
   \        0x6   0x460E             MOV      R6,R1
   \        0x8   0x4617             MOV      R7,R2
   \        0xA   0x4698             MOV      R8,R3
   1760              int ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
   1761          #if defined(MBEDTLS_ECP_INTERNAL_ALT)
   1762              char is_grp_capable = 0;
   1763          #endif
   1764          
   1765              /* Common sanity checks */
   1766              if( mbedtls_mpi_cmp_int( &P->Z, 1 ) != 0 )
   \        0xC   0x2101             MOVS     R1,#+1
   \        0xE   0xF108 0x0018      ADD      R0,R8,#+24
   \       0x12   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x16   0x2800             CMP      R0,#+0
   \       0x18   0xD001             BEQ.N    ??mbedtls_ecp_mul_0
   1767                  return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   \       0x1A   0x....             LDR.N    R0,??DataTable21  ;; 0xffffb080
   \       0x1C   0xE01C             B.N      ??mbedtls_ecp_mul_1
   1768          
   1769              if( ( ret = mbedtls_ecp_check_privkey( grp, m ) ) != 0 ||
   1770                  ( ret = mbedtls_ecp_check_pubkey( grp, P ) ) != 0 )
   \                     ??mbedtls_ecp_mul_0: (+1)
   \       0x1E   0x4639             MOV      R1,R7
   \       0x20   0x4628             MOV      R0,R5
   \       0x22   0x....'....        BL       mbedtls_ecp_check_privkey
   \       0x26   0x0004             MOVS     R4,R0
   \       0x28   0xD115             BNE.N    ??mbedtls_ecp_mul_2
   \       0x2A   0x4641             MOV      R1,R8
   \       0x2C   0x4628             MOV      R0,R5
   \       0x2E   0x....'....        BL       mbedtls_ecp_check_pubkey
   \       0x32   0x0004             MOVS     R4,R0
   \       0x34   0xD10F             BNE.N    ??mbedtls_ecp_mul_2
   1771                  return( ret );
   1772          
   1773          #if defined(MBEDTLS_ECP_INTERNAL_ALT)
   1774              if ( is_grp_capable = mbedtls_internal_ecp_grp_capable( grp )  )
   1775              {
   1776                  MBEDTLS_MPI_CHK( mbedtls_internal_ecp_init( grp ) );
   1777              }
   1778          
   1779          #endif /* MBEDTLS_ECP_INTERNAL_ALT */
   1780          #if defined(ECP_MONTGOMERY)
   1781              if( ecp_get_type( grp ) == ECP_TYPE_MONTGOMERY )
   1782                  ret = ecp_mul_mxz( grp, R, m, P, f_rng, p_rng );
   1783          
   1784          #endif
   1785          #if defined(ECP_SHORTWEIERSTRASS)
   1786              if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
   \       0x36   0x4628             MOV      R0,R5
   \       0x38   0x....'....        BL       ecp_get_type
   \       0x3C   0x2801             CMP      R0,#+1
   \       0x3E   0xD10A             BNE.N    ??mbedtls_ecp_mul_2
   \       0x40   0x9909             LDR      R1,[SP, #+36]
   \       0x42   0x9808             LDR      R0,[SP, #+32]
   1787                  ret = ecp_mul_comb( grp, R, m, P, f_rng, p_rng );
   \       0x44   0x9101             STR      R1,[SP, #+4]
   \       0x46   0x9000             STR      R0,[SP, #+0]
   \       0x48   0x4643             MOV      R3,R8
   \       0x4A   0x463A             MOV      R2,R7
   \       0x4C   0x4631             MOV      R1,R6
   \       0x4E   0x4628             MOV      R0,R5
   \       0x50   0x....'....        BL       ecp_mul_comb
   \       0x54   0x4604             MOV      R4,R0
   1788          
   1789          #endif
   1790          #if defined(MBEDTLS_ECP_INTERNAL_ALT)
   1791          cleanup:
   1792          
   1793              if ( is_grp_capable )
   1794              {
   1795                  mbedtls_internal_ecp_free( grp );
   1796              }
   1797          
   1798          #endif /* MBEDTLS_ECP_INTERNAL_ALT */
   1799              return( ret );
   \                     ??mbedtls_ecp_mul_2: (+1)
   \       0x56   0x4620             MOV      R0,R4
   \                     ??mbedtls_ecp_mul_1: (+1)
   \       0x58   0xE8BD 0x81F6      POP      {R1,R2,R4-R8,PC}  ;; return
   1800          }
   1801          
   1802          #if defined(ECP_SHORTWEIERSTRASS)
   1803          /*
   1804           * Check that an affine point is valid as a public key,
   1805           * short weierstrass curves (SEC1 3.2.3.1)
   1806           */

   \                                 In section .text, align 2, keep-with-next
   1807          static int ecp_check_pubkey_sw( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *pt )
   1808          {
   \                     ecp_check_pubkey_sw: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0xB086             SUB      SP,SP,#+24
   \        0x4   0x4606             MOV      R6,R0
   \        0x6   0x460F             MOV      R7,R1
   1809              int ret;
   1810              mbedtls_mpi YY, RHS;
   1811          
   1812              /* pt coordinates must be normalized for our checks */
   1813              if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||
   1814                  mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||
   1815                  mbedtls_mpi_cmp_mpi( &pt->X, &grp->P ) >= 0 ||
   1816                  mbedtls_mpi_cmp_mpi( &pt->Y, &grp->P ) >= 0 )
   \        0x8   0x2100             MOVS     R1,#+0
   \        0xA   0x4638             MOV      R0,R7
   \        0xC   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x10   0x2800             CMP      R0,#+0
   \       0x12   0xD413             BMI.N    ??ecp_check_pubkey_sw_0
   \       0x14   0x2100             MOVS     R1,#+0
   \       0x16   0xF107 0x000C      ADD      R0,R7,#+12
   \       0x1A   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x1E   0x2800             CMP      R0,#+0
   \       0x20   0xD40C             BMI.N    ??ecp_check_pubkey_sw_0
   \       0x22   0x1D31             ADDS     R1,R6,#+4
   \       0x24   0x4638             MOV      R0,R7
   \       0x26   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \       0x2A   0x2800             CMP      R0,#+0
   \       0x2C   0xD506             BPL.N    ??ecp_check_pubkey_sw_0
   \       0x2E   0x1D31             ADDS     R1,R6,#+4
   \       0x30   0xF107 0x000C      ADD      R0,R7,#+12
   \       0x34   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \       0x38   0x2800             CMP      R0,#+0
   \       0x3A   0xD402             BMI.N    ??ecp_check_pubkey_sw_1
   1817                  return( MBEDTLS_ERR_ECP_INVALID_KEY );
   \                     ??ecp_check_pubkey_sw_0: (+1)
   \       0x3C   0x....'....        LDR.W    R0,??DataTable24_4  ;; 0xffffb380
   \       0x40   0xE08F             B.N      ??ecp_check_pubkey_sw_2
   1818          
   1819              mbedtls_mpi_init( &YY ); mbedtls_mpi_init( &RHS );
   \                     ??ecp_check_pubkey_sw_1: (+1)
   \       0x42   0xA803             ADD      R0,SP,#+12
   \       0x44   0x....'....        BL       mbedtls_mpi_init
   \       0x48   0x4668             MOV      R0,SP
   \       0x4A   0x....'....        BL       mbedtls_mpi_init
   1820          
   1821              /*
   1822               * YY = Y^2
   1823               * RHS = X (X^2 + A) + B = X^3 + A X + B
   1824               */
   1825              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &YY,  &pt->Y,   &pt->Y  ) );  MOD_MUL( YY  );
   \       0x4E   0xF107 0x020C      ADD      R2,R7,#+12
   \       0x52   0xF107 0x010C      ADD      R1,R7,#+12
   \       0x56   0xA803             ADD      R0,SP,#+12
   \       0x58   0x....'....        BL       mbedtls_mpi_mul_mpi
   \       0x5C   0x0004             MOVS     R4,R0
   \       0x5E   0xD179             BNE.N    ??ecp_check_pubkey_sw_3
   \       0x60   0x4631             MOV      R1,R6
   \       0x62   0xA803             ADD      R0,SP,#+12
   \       0x64   0x....'....        BL       ecp_modp
   \       0x68   0x0004             MOVS     R4,R0
   \       0x6A   0xD173             BNE.N    ??ecp_check_pubkey_sw_3
   \       0x6C   0x....'....        LDR.W    R5,??DataTable24_1
   \       0x70   0x6828             LDR      R0,[R5, #+0]
   \       0x72   0x1C40             ADDS     R0,R0,#+1
   \       0x74   0x6028             STR      R0,[R5, #+0]
   1826              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &pt->X,   &pt->X  ) );  MOD_MUL( RHS );
   \       0x76   0x463A             MOV      R2,R7
   \       0x78   0x4639             MOV      R1,R7
   \       0x7A   0x4668             MOV      R0,SP
   \       0x7C   0x....'....        BL       mbedtls_mpi_mul_mpi
   \       0x80   0x0004             MOVS     R4,R0
   \       0x82   0xD167             BNE.N    ??ecp_check_pubkey_sw_3
   \       0x84   0x4631             MOV      R1,R6
   \       0x86   0x4668             MOV      R0,SP
   \       0x88   0x....'....        BL       ecp_modp
   \       0x8C   0x0004             MOVS     R4,R0
   \       0x8E   0xD161             BNE.N    ??ecp_check_pubkey_sw_3
   \       0x90   0x6828             LDR      R0,[R5, #+0]
   \       0x92   0x1C40             ADDS     R0,R0,#+1
   \       0x94   0x6028             STR      R0,[R5, #+0]
   1827          
   1828              /* Special case for A = -3 */
   1829              if( grp->A.p == NULL )
   \       0x96   0x69B0             LDR      R0,[R6, #+24]
   \       0x98   0x2800             CMP      R0,#+0
   \       0x9A   0xD117             BNE.N    ??ecp_check_pubkey_sw_4
   1830              {
   1831                  MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &RHS, &RHS, 3       ) );  MOD_SUB( RHS );
   \       0x9C   0x2203             MOVS     R2,#+3
   \       0x9E   0x4669             MOV      R1,SP
   \       0xA0   0x4668             MOV      R0,SP
   \       0xA2   0x....'....        BL       mbedtls_mpi_sub_int
   \       0xA6   0x0004             MOVS     R4,R0
   \       0xA8   0xD154             BNE.N    ??ecp_check_pubkey_sw_3
   \                     ??ecp_check_pubkey_sw_5: (+1)
   \       0xAA   0x9800             LDR      R0,[SP, #+0]
   \       0xAC   0x2800             CMP      R0,#+0
   \       0xAE   0xD52B             BPL.N    ??ecp_check_pubkey_sw_6
   \       0xB0   0x2100             MOVS     R1,#+0
   \       0xB2   0x4668             MOV      R0,SP
   \       0xB4   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0xB8   0x2800             CMP      R0,#+0
   \       0xBA   0xD025             BEQ.N    ??ecp_check_pubkey_sw_6
   \       0xBC   0x1D32             ADDS     R2,R6,#+4
   \       0xBE   0x4669             MOV      R1,SP
   \       0xC0   0x4668             MOV      R0,SP
   \       0xC2   0x....'....        BL       mbedtls_mpi_add_mpi
   \       0xC6   0x0004             MOVS     R4,R0
   \       0xC8   0xD144             BNE.N    ??ecp_check_pubkey_sw_3
   \       0xCA   0xE7EE             B.N      ??ecp_check_pubkey_sw_5
   1832              }
   1833              else
   1834              {
   1835                  MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS, &grp->A ) );  MOD_ADD( RHS );
   \                     ??ecp_check_pubkey_sw_4: (+1)
   \       0xCC   0xF106 0x0210      ADD      R2,R6,#+16
   \       0xD0   0x4669             MOV      R1,SP
   \       0xD2   0x4668             MOV      R0,SP
   \       0xD4   0x....'....        BL       mbedtls_mpi_add_mpi
   \       0xD8   0x0004             MOVS     R4,R0
   \       0xDA   0xD13B             BNE.N    ??ecp_check_pubkey_sw_3
   \                     ??ecp_check_pubkey_sw_7: (+1)
   \       0xDC   0x1D31             ADDS     R1,R6,#+4
   \       0xDE   0x4668             MOV      R0,SP
   \       0xE0   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \       0xE4   0x2800             CMP      R0,#+0
   \       0xE6   0xD40F             BMI.N    ??ecp_check_pubkey_sw_6
   \       0xE8   0x1D32             ADDS     R2,R6,#+4
   \       0xEA   0x4669             MOV      R1,SP
   \       0xEC   0x4668             MOV      R0,SP
   \       0xEE   0x....'....        BL       mbedtls_mpi_sub_abs
   \       0xF2   0x0004             MOVS     R4,R0
   \       0xF4   0xD12E             BNE.N    ??ecp_check_pubkey_sw_3
   \       0xF6   0xE7F1             B.N      ??ecp_check_pubkey_sw_7
   1836              }
   1837          
   1838              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &RHS,     &pt->X  ) );  MOD_MUL( RHS );
   1839              MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS,     &grp->B ) );  MOD_ADD( RHS );
   \                     ??ecp_check_pubkey_sw_8: (+1)
   \       0xF8   0x1D32             ADDS     R2,R6,#+4
   \       0xFA   0x4669             MOV      R1,SP
   \       0xFC   0x4668             MOV      R0,SP
   \       0xFE   0x....'....        BL       mbedtls_mpi_sub_abs
   \      0x102   0x0004             MOVS     R4,R0
   \      0x104   0xD126             BNE.N    ??ecp_check_pubkey_sw_3
   \      0x106   0xE017             B.N      ??ecp_check_pubkey_sw_9
   \                     ??ecp_check_pubkey_sw_6: (+1)
   \      0x108   0x463A             MOV      R2,R7
   \      0x10A   0x4669             MOV      R1,SP
   \      0x10C   0x4668             MOV      R0,SP
   \      0x10E   0x....'....        BL       mbedtls_mpi_mul_mpi
   \      0x112   0x0004             MOVS     R4,R0
   \      0x114   0xD11E             BNE.N    ??ecp_check_pubkey_sw_3
   \      0x116   0x4631             MOV      R1,R6
   \      0x118   0x4668             MOV      R0,SP
   \      0x11A   0x....'....        BL       ecp_modp
   \      0x11E   0x0004             MOVS     R4,R0
   \      0x120   0xD118             BNE.N    ??ecp_check_pubkey_sw_3
   \      0x122   0x6828             LDR      R0,[R5, #+0]
   \      0x124   0x1C40             ADDS     R0,R0,#+1
   \      0x126   0x6028             STR      R0,[R5, #+0]
   \      0x128   0xF106 0x021C      ADD      R2,R6,#+28
   \      0x12C   0x4669             MOV      R1,SP
   \      0x12E   0x4668             MOV      R0,SP
   \      0x130   0x....'....        BL       mbedtls_mpi_add_mpi
   \      0x134   0x0004             MOVS     R4,R0
   \      0x136   0xD10D             BNE.N    ??ecp_check_pubkey_sw_3
   \                     ??ecp_check_pubkey_sw_9: (+1)
   \      0x138   0x1D31             ADDS     R1,R6,#+4
   \      0x13A   0x4668             MOV      R0,SP
   \      0x13C   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \      0x140   0x2800             CMP      R0,#+0
   \      0x142   0xD5D9             BPL.N    ??ecp_check_pubkey_sw_8
   1840          
   1841              if( mbedtls_mpi_cmp_mpi( &YY, &RHS ) != 0 )
   \      0x144   0x4669             MOV      R1,SP
   \      0x146   0xA803             ADD      R0,SP,#+12
   \      0x148   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \      0x14C   0x2800             CMP      R0,#+0
   \      0x14E   0xD001             BEQ.N    ??ecp_check_pubkey_sw_3
   1842                  ret = MBEDTLS_ERR_ECP_INVALID_KEY;
   \      0x150   0x....'....        LDR.W    R4,??DataTable24_4  ;; 0xffffb380
   1843          
   1844          cleanup:
   1845          
   1846              mbedtls_mpi_free( &YY ); mbedtls_mpi_free( &RHS );
   \                     ??ecp_check_pubkey_sw_3: (+1)
   \      0x154   0xA803             ADD      R0,SP,#+12
   \      0x156   0x....'....        BL       mbedtls_mpi_free
   \      0x15A   0x4668             MOV      R0,SP
   \      0x15C   0x....'....        BL       mbedtls_mpi_free
   1847          
   1848              return( ret );
   \      0x160   0x4620             MOV      R0,R4
   \                     ??ecp_check_pubkey_sw_2: (+1)
   \      0x162   0xB007             ADD      SP,SP,#+28
   \      0x164   0xBDF0             POP      {R4-R7,PC}       ;; return
   1849          }
   1850          #endif /* ECP_SHORTWEIERSTRASS */
   1851          
   1852          /*
   1853           * R = m * P with shortcuts for m == 1 and m == -1
   1854           * NOT constant-time - ONLY for short Weierstrass!
   1855           */
   1856          #if !defined(MBEDTLS_ECP_MULADD_ALT)

   \                                 In section .text, align 2, keep-with-next
   1857          static int mbedtls_ecp_mul_shortcuts( mbedtls_ecp_group *grp,
   1858                                                mbedtls_ecp_point *R,
   1859                                                const mbedtls_mpi *m,
   1860                                                const mbedtls_ecp_point *P )
   1861          {
   \                     mbedtls_ecp_mul_shortcuts: (+1)
   \        0x0   0xB5FE             PUSH     {R1-R7,LR}
   \        0x2   0x4605             MOV      R5,R0
   \        0x4   0x460E             MOV      R6,R1
   \        0x6   0x4614             MOV      R4,R2
   \        0x8   0x461F             MOV      R7,R3
   1862              int ret;
   1863          
   1864              if( mbedtls_mpi_cmp_int( m, 1 ) == 0 )
   \        0xA   0x2101             MOVS     R1,#+1
   \        0xC   0x4620             MOV      R0,R4
   \        0xE   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x12   0x2800             CMP      R0,#+0
   \       0x14   0xD105             BNE.N    ??mbedtls_ecp_mul_shortcuts_0
   1865              {
   1866                  MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );
   \       0x16   0x4639             MOV      R1,R7
   \       0x18   0x4630             MOV      R0,R6
   \       0x1A   0x....'....        BL       mbedtls_ecp_copy
   \       0x1E   0x4604             MOV      R4,R0
   \       0x20   0xE026             B.N      ??mbedtls_ecp_mul_shortcuts_1
   1867              }
   1868              else if( mbedtls_mpi_cmp_int( m, -1 ) == 0 )
   \                     ??mbedtls_ecp_mul_shortcuts_0: (+1)
   \       0x22   0xF04F 0x31FF      MOV      R1,#-1
   \       0x26   0x4620             MOV      R0,R4
   \       0x28   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x2C   0x2800             CMP      R0,#+0
   \       0x2E   0xD115             BNE.N    ??mbedtls_ecp_mul_shortcuts_2
   1869              {
   1870                  MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );
   \       0x30   0x4639             MOV      R1,R7
   \       0x32   0x4630             MOV      R0,R6
   \       0x34   0x....'....        BL       mbedtls_ecp_copy
   \       0x38   0x0004             MOVS     R4,R0
   \       0x3A   0xD119             BNE.N    ??mbedtls_ecp_mul_shortcuts_1
   1871                  if( mbedtls_mpi_cmp_int( &R->Y, 0 ) != 0 )
   \       0x3C   0x2100             MOVS     R1,#+0
   \       0x3E   0xF106 0x000C      ADD      R0,R6,#+12
   \       0x42   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x46   0x2800             CMP      R0,#+0
   \       0x48   0xD012             BEQ.N    ??mbedtls_ecp_mul_shortcuts_1
   1872                      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &R->Y, &grp->P, &R->Y ) );
   \       0x4A   0xF106 0x020C      ADD      R2,R6,#+12
   \       0x4E   0x1D29             ADDS     R1,R5,#+4
   \       0x50   0xF106 0x000C      ADD      R0,R6,#+12
   \       0x54   0x....'....        BL       mbedtls_mpi_sub_mpi
   \       0x58   0x4604             MOV      R4,R0
   \       0x5A   0xE009             B.N      ??mbedtls_ecp_mul_shortcuts_1
   1873              }
   1874              else
   1875              {
   1876                  MBEDTLS_MPI_CHK( mbedtls_ecp_mul( grp, R, m, P, NULL, NULL ) );
   \                     ??mbedtls_ecp_mul_shortcuts_2: (+1)
   \       0x5C   0x2000             MOVS     R0,#+0
   \       0x5E   0x9001             STR      R0,[SP, #+4]
   \       0x60   0x9000             STR      R0,[SP, #+0]
   \       0x62   0x463B             MOV      R3,R7
   \       0x64   0x4622             MOV      R2,R4
   \       0x66   0x4631             MOV      R1,R6
   \       0x68   0x4628             MOV      R0,R5
   \       0x6A   0x....'....        BL       mbedtls_ecp_mul
   \       0x6E   0x4604             MOV      R4,R0
   1877              }
   1878          
   1879          cleanup:
   1880              return( ret );
   \                     ??mbedtls_ecp_mul_shortcuts_1: (+1)
   \       0x70   0x4620             MOV      R0,R4
   \       0x72   0xBDFE             POP      {R1-R7,PC}       ;; return
   1881          }
   1882          #endif /* !MBEDTLS_ECP_MULADD_ALT */
   1883          
   1884          /*
   1885           * Addition: R = P + Q, result's coordinates normalized
   1886           */
   1887          #if !defined(MBEDTLS_ECP_ADD_ALT)

   \                                 In section .text, align 2, keep-with-next
   1888          int ecp_add( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,  const mbedtls_ecp_point *P, const mbedtls_ecp_point *Q )
   1889          {
   \                     ecp_add: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
   \        0x6   0x4616             MOV      R6,R2
   \        0x8   0x461F             MOV      R7,R3
   1890              int ret;
   1891          
   1892              if( ecp_get_type( grp ) != ECP_TYPE_SHORT_WEIERSTRASS )
   \        0xA   0x....'....        BL       ecp_get_type
   \        0xE   0x2801             CMP      R0,#+1
   \       0x10   0xD002             BEQ.N    ??ecp_add_0
   1893                  return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
   \       0x12   0x....'....        LDR.W    R0,??DataTable24_5  ;; 0xffffb180
   \       0x16   0xBDF2             POP      {R1,R4-R7,PC}
   1894          
   1895              MBEDTLS_MPI_CHK( ecp_add_mixed( grp, R, P, Q ) );
   \                     ??ecp_add_0: (+1)
   \       0x18   0x463B             MOV      R3,R7
   \       0x1A   0x4632             MOV      R2,R6
   \       0x1C   0x4629             MOV      R1,R5
   \       0x1E   0x4620             MOV      R0,R4
   \       0x20   0x....'....        BL       ecp_add_mixed
   \       0x24   0x2800             CMP      R0,#+0
   \       0x26   0xD105             BNE.N    ??ecp_add_1
   1896              MBEDTLS_MPI_CHK( ecp_normalize_jac( grp, R ) );
   \       0x28   0x4629             MOV      R1,R5
   \       0x2A   0x4620             MOV      R0,R4
   \       0x2C   0xE8BD 0x40F4      POP      {R2,R4-R7,LR}
   \       0x30   0x....'....        B.W      ecp_normalize_jac
   1897          
   1898          cleanup:
   1899              return( ret );
   \                     ??ecp_add_1: (+1)
   \       0x34   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
   1900          }
   1901          #else
   1902          int ecp_add( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,  const mbedtls_ecp_point *P, const mbedtls_ecp_point *Q );
   1903          #endif /* !MBEDTLS_ECP_ADD_ALT */
   1904          
   1905          /*
   1906           * Linear combination
   1907           * NOT constant-time
   1908           */
   1909          #if !defined(MBEDTLS_ECP_MULADD_ALT)

   \                                 In section .text, align 2, keep-with-next
   1910          int mbedtls_ecp_muladd( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
   1911                       const mbedtls_mpi *m, const mbedtls_ecp_point *P,
   1912                       const mbedtls_mpi *n, const mbedtls_ecp_point *Q )
   1913          {
   \                     mbedtls_ecp_muladd: (+1)
   \        0x0   0xB5F0             PUSH     {R4-R7,LR}
   \        0x2   0xB089             SUB      SP,SP,#+36
   \        0x4   0x4605             MOV      R5,R0
   \        0x6   0x460E             MOV      R6,R1
   \        0x8   0x4614             MOV      R4,R2
   \        0xA   0x461F             MOV      R7,R3
   1914              int ret;
   1915              mbedtls_ecp_point mP;
   1916          #if defined(MBEDTLS_ECP_INTERNAL_ALT)
   1917              char is_grp_capable = 0;
   1918          #endif
   1919          
   1920              if( ecp_get_type( grp ) != ECP_TYPE_SHORT_WEIERSTRASS )
   \        0xC   0x....'....        BL       ecp_get_type
   \       0x10   0x2801             CMP      R0,#+1
   \       0x12   0xD002             BEQ.N    ??mbedtls_ecp_muladd_0
   1921                  return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
   \       0x14   0x....'....        LDR.W    R0,??DataTable24_5  ;; 0xffffb180
   \       0x18   0xE01D             B.N      ??mbedtls_ecp_muladd_1
   1922          
   1923              mbedtls_ecp_point_init( &mP );
   \                     ??mbedtls_ecp_muladd_0: (+1)
   \       0x1A   0x4668             MOV      R0,SP
   \       0x1C   0x....'....        BL       mbedtls_ecp_point_init
   1924          
   1925              MBEDTLS_MPI_CHK( mbedtls_ecp_mul_shortcuts( grp, &mP, m, P ) );
   \       0x20   0x463B             MOV      R3,R7
   \       0x22   0x4622             MOV      R2,R4
   \       0x24   0x4669             MOV      R1,SP
   \       0x26   0x4628             MOV      R0,R5
   \       0x28   0x....'....        BL       mbedtls_ecp_mul_shortcuts
   \       0x2C   0x0004             MOVS     R4,R0
   \       0x2E   0xD10E             BNE.N    ??mbedtls_ecp_muladd_2
   \       0x30   0x9B0F             LDR      R3,[SP, #+60]
   \       0x32   0x9A0E             LDR      R2,[SP, #+56]
   1926              MBEDTLS_MPI_CHK( mbedtls_ecp_mul_shortcuts( grp, R,   n, Q ) );
   \       0x34   0x4631             MOV      R1,R6
   \       0x36   0x4628             MOV      R0,R5
   \       0x38   0x....'....        BL       mbedtls_ecp_mul_shortcuts
   \       0x3C   0x0004             MOVS     R4,R0
   \       0x3E   0xD106             BNE.N    ??mbedtls_ecp_muladd_2
   1927          
   1928          #if defined(MBEDTLS_ECP_INTERNAL_ALT)
   1929              if (  is_grp_capable = mbedtls_internal_ecp_grp_capable( grp )  )
   1930              {
   1931                  MBEDTLS_MPI_CHK( mbedtls_internal_ecp_init( grp ) );
   1932              }
   1933          
   1934          #endif /* MBEDTLS_ECP_INTERNAL_ALT */
   1935              MBEDTLS_MPI_CHK(ecp_add(grp, R, &mP, R ));
   \       0x40   0x4633             MOV      R3,R6
   \       0x42   0x466A             MOV      R2,SP
   \       0x44   0x4631             MOV      R1,R6
   \       0x46   0x4628             MOV      R0,R5
   \       0x48   0x....'....        BL       ecp_add
   \       0x4C   0x4604             MOV      R4,R0
   1936          
   1937          cleanup:
   1938          
   1939          #if defined(MBEDTLS_ECP_INTERNAL_ALT)
   1940              if ( is_grp_capable )
   1941              {
   1942                  mbedtls_internal_ecp_free( grp );
   1943              }
   1944          
   1945          #endif /* MBEDTLS_ECP_INTERNAL_ALT */
   1946              mbedtls_ecp_point_free( &mP );
   \                     ??mbedtls_ecp_muladd_2: (+1)
   \       0x4E   0x4668             MOV      R0,SP
   \       0x50   0x....'....        BL       mbedtls_ecp_point_free
   1947          
   1948              return( ret );
   \       0x54   0x4620             MOV      R0,R4
   \                     ??mbedtls_ecp_muladd_1: (+1)
   \       0x56   0xB009             ADD      SP,SP,#+36
   \       0x58   0xBDF0             POP      {R4-R7,PC}       ;; return
   1949          }
   1950          #endif /* MBEDTLS_ECP_MULADD_ALT */
   1951          
   1952          
   1953          #if defined(ECP_MONTGOMERY)
   1954          /*
   1955           * Check validity of a public key for Montgomery curves with x-only schemes
   1956           */
   1957          static int ecp_check_pubkey_mx( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *pt )
   1958          {
   1959              /* [Curve25519 p. 5] Just check X is the correct number of bytes */
   1960              /* Allow any public value, if it's too big then we'll just reduce it mod p
   1961               * (RFC 7748 sec. 5 para. 3). */
   1962              if( mbedtls_mpi_size( &pt->X ) > ( grp->nbits + 7 ) / 8 )
   1963                  return( MBEDTLS_ERR_ECP_INVALID_KEY );
   1964          
   1965              return( 0 );
   1966          }
   1967          #endif /* ECP_MONTGOMERY */
   1968          
   1969          /*
   1970           * Check that a point is valid as a public key
   1971           */

   \                                 In section .text, align 2, keep-with-next
   1972          int mbedtls_ecp_check_pubkey( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *pt )
   1973          {
   \                     mbedtls_ecp_check_pubkey: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
   1974              /* Must use affine coordinates */
   1975              if( mbedtls_mpi_cmp_int( &pt->Z, 1 ) != 0 )
   \        0x6   0x2101             MOVS     R1,#+1
   \        0x8   0xF105 0x0018      ADD      R0,R5,#+24
   \        0xC   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x10   0x2800             CMP      R0,#+0
   \       0x12   0xD002             BEQ.N    ??mbedtls_ecp_check_pubkey_0
   1976                  return( MBEDTLS_ERR_ECP_INVALID_KEY );
   \       0x14   0x....'....        LDR.W    R0,??DataTable24_4  ;; 0xffffb380
   \       0x18   0xBD32             POP      {R1,R4,R5,PC}
   1977          
   1978          #if defined(ECP_MONTGOMERY)
   1979              if( ecp_get_type( grp ) == ECP_TYPE_MONTGOMERY )
   1980                  return( ecp_check_pubkey_mx( grp, pt ) );
   1981          #endif
   1982          #if defined(ECP_SHORTWEIERSTRASS)
   1983              if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
   \                     ??mbedtls_ecp_check_pubkey_0: (+1)
   \       0x1A   0x4620             MOV      R0,R4
   \       0x1C   0x....'....        BL       ecp_get_type
   \       0x20   0x2801             CMP      R0,#+1
   \       0x22   0xD104             BNE.N    ??mbedtls_ecp_check_pubkey_1
   1984                  return( ecp_check_pubkey_sw( grp, pt ) );
   \       0x24   0x4629             MOV      R1,R5
   \       0x26   0x4620             MOV      R0,R4
   \       0x28   0xE8BD 0x4034      POP      {R2,R4,R5,LR}
   \       0x2C   0x....             B.N      ecp_check_pubkey_sw
   1985          #endif
   1986              return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   \                     ??mbedtls_ecp_check_pubkey_1: (+1)
   \       0x2E   0x....             LDR.N    R0,??DataTable21  ;; 0xffffb080
   \       0x30   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   1987          }
   1988          
   1989          /*
   1990           * Check that an mbedtls_mpi is valid as a private key
   1991           */

   \                                 In section .text, align 2, keep-with-next
   1992          int mbedtls_ecp_check_privkey( const mbedtls_ecp_group *grp, const mbedtls_mpi *d )
   1993          {
   \                     mbedtls_ecp_check_privkey: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
   1994          #if defined(ECP_MONTGOMERY)
   1995              if( ecp_get_type( grp ) == ECP_TYPE_MONTGOMERY )
   1996              {
   1997                  /* see RFC 7748 sec. 5 para. 5 */
   1998                  if( mbedtls_mpi_get_bit( d, 0 ) != 0 ||
   1999                      mbedtls_mpi_get_bit( d, 1 ) != 0 ||
   2000                      mbedtls_mpi_bitlen( d ) - 1 != grp->nbits ) /* mbedtls_mpi_bitlen is one-based! */
   2001                      return( MBEDTLS_ERR_ECP_INVALID_KEY );
   2002          
   2003                  /* see [Curve25519] page 5 */
   2004                  if( grp->nbits == 254 && mbedtls_mpi_get_bit( d, 2 ) != 0 )
   2005                      return( MBEDTLS_ERR_ECP_INVALID_KEY );
   2006          
   2007                  return( 0 );
   2008              }
   2009          #endif /* ECP_MONTGOMERY */
   2010          #if defined(ECP_SHORTWEIERSTRASS)
   2011              if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
   \        0x6   0x....'....        BL       ecp_get_type
   \        0xA   0x2801             CMP      R0,#+1
   \        0xC   0xD111             BNE.N    ??mbedtls_ecp_check_privkey_0
   2012              {
   2013                  /* see SEC1 3.2 */
   2014                  if( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
   2015                      mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )
   \        0xE   0x2101             MOVS     R1,#+1
   \       0x10   0x4628             MOV      R0,R5
   \       0x12   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x16   0x2800             CMP      R0,#+0
   \       0x18   0xD406             BMI.N    ??mbedtls_ecp_check_privkey_1
   \       0x1A   0xF104 0x014C      ADD      R1,R4,#+76
   \       0x1E   0x4628             MOV      R0,R5
   \       0x20   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \       0x24   0x2800             CMP      R0,#+0
   \       0x26   0xD402             BMI.N    ??mbedtls_ecp_check_privkey_2
   2016                      return( MBEDTLS_ERR_ECP_INVALID_KEY );
   \                     ??mbedtls_ecp_check_privkey_1: (+1)
   \       0x28   0x....'....        LDR.W    R0,??DataTable24_4  ;; 0xffffb380
   \       0x2C   0xBD32             POP      {R1,R4,R5,PC}
   2017                  else
   2018                      return( 0 );
   \                     ??mbedtls_ecp_check_privkey_2: (+1)
   \       0x2E   0x2000             MOVS     R0,#+0
   \       0x30   0xBD32             POP      {R1,R4,R5,PC}
   2019              }
   2020          #endif /* ECP_SHORTWEIERSTRASS */
   2021          
   2022              return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   \                     ??mbedtls_ecp_check_privkey_0: (+1)
   \       0x32   0x....             LDR.N    R0,??DataTable21  ;; 0xffffb080
   \       0x34   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   2023          }
   2024          
   2025          /*
   2026           * Generate a keypair with configurable base point
   2027           */

   \                                 In section .text, align 2, keep-with-next
   2028          int mbedtls_ecp_gen_keypair_base( mbedtls_ecp_group *grp,
   2029                               const mbedtls_ecp_point *G,
   2030                               mbedtls_mpi *d, mbedtls_ecp_point *Q,
   2031                               int (*f_rng)(void *, unsigned char *, size_t),
   2032                               void *p_rng )
   2033          {
   \                     mbedtls_ecp_gen_keypair_base: (+1)
   \        0x0   0xE92D 0x4FF2      PUSH     {R1,R4-R11,LR}
   \        0x4   0xB082             SUB      SP,SP,#+8
   \        0x6   0x4606             MOV      R6,R0
   \        0x8   0x4615             MOV      R5,R2
   \        0xA   0x461F             MOV      R7,R3
   2034              int ret;
   2035              size_t n_size = ( grp->nbits + 7 ) / 8;
   \        0xC   0xF8D6 0xA05C      LDR      R10,[R6, #+92]
   \       0x10   0xF10A 0x0A07      ADD      R10,R10,#+7
   \       0x14   0xEA4F 0x0ADA      LSR      R10,R10,#+3
   2036          
   2037          #if defined(ECP_MONTGOMERY)
   2038              if( ecp_get_type( grp ) == ECP_TYPE_MONTGOMERY )
   2039              {
   2040                  /* [M225] page 5 */
   2041                  size_t b;
   2042          
   2043                  do {
   2044                      MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( d, n_size, f_rng, p_rng ) );
   2045                  } while( mbedtls_mpi_bitlen( d ) == 0);
   2046          
   2047                  /* Make sure the most significant bit is nbits */
   2048                  b = mbedtls_mpi_bitlen( d ) - 1; /* mbedtls_mpi_bitlen is one-based */
   2049                  if( b > grp->nbits )
   2050                      MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( d, b - grp->nbits ) );
   2051                  else
   2052                      MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, grp->nbits, 1 ) );
   2053          
   2054                  /* Make sure the last two bits are unset for Curve448, three bits for
   2055                     Curve25519 */
   2056                  MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, 0, 0 ) );
   2057                  MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, 1, 0 ) );
   2058                  if( grp->nbits == 254 )
   2059                  {
   2060                      MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, 2, 0 ) );
   2061                  }
   2062              }
   2063              else
   2064          #endif /* ECP_MONTGOMERY */
   2065          #if defined(ECP_SHORTWEIERSTRASS)
   2066              if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
   \       0x18   0x....'....        BL       ecp_get_type
   \       0x1C   0x2801             CMP      R0,#+1
   \       0x1E   0xD130             BNE.N    ??mbedtls_ecp_gen_keypair_base_0
   2067              {
   2068                  /* SEC1 3.2.1: Generate d such that 1 <= n < N */
   2069                  int count = 0;
   \       0x20   0xF04F 0x0B00      MOV      R11,#+0
   \       0x24   0xF8DD 0x9030      LDR      R9,[SP, #+48]
   \       0x28   0xF8DD 0x8034      LDR      R8,[SP, #+52]
   2070          
   2071                  /*
   2072                   * Match the procedure given in RFC 6979 (deterministic ECDSA):
   2073                   * - use the same byte ordering;
   2074                   * - keep the leftmost nbits bits of the generated octet string;
   2075                   * - try until result is in the desired range.
   2076                   * This also avoids any biais, which is especially important for ECDSA.
   2077                   */
   2078                  do
   2079                  {
   2080                      MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( d, n_size, f_rng, p_rng ) );
   \                     ??mbedtls_ecp_gen_keypair_base_1: (+1)
   \       0x2C   0x4643             MOV      R3,R8
   \       0x2E   0x464A             MOV      R2,R9
   \       0x30   0x4651             MOV      R1,R10
   \       0x32   0x4628             MOV      R0,R5
   \       0x34   0x....'....        BL       mbedtls_mpi_fill_random
   \       0x38   0x0004             MOVS     R4,R0
   \       0x3A   0xD11C             BNE.N    ??mbedtls_ecp_gen_keypair_base_2
   2081                      MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( d, 8 * n_size - grp->nbits ) );
   \       0x3C   0x6DF1             LDR      R1,[R6, #+92]
   \       0x3E   0xEBC1 0x01CA      RSB      R1,R1,R10, LSL #+3
   \       0x42   0x4628             MOV      R0,R5
   \       0x44   0x....'....        BL       mbedtls_mpi_shift_r
   \       0x48   0x0004             MOVS     R4,R0
   \       0x4A   0xD114             BNE.N    ??mbedtls_ecp_gen_keypair_base_2
   2082          
   2083                      /*
   2084                       * Each try has at worst a probability 1/2 of failing (the msb has
   2085                       * a probability 1/2 of being 0, and then the result will be < N),
   2086                       * so after 30 tries failure probability is a most 2**(-30).
   2087                       *
   2088                       * For most curves, 1 try is enough with overwhelming probability,
   2089                       * since N starts with a lot of 1s in binary, but some curves
   2090                       * such as secp224k1 are actually very close to the worst case.
   2091                       */
   2092                      if( ++count > 30 )
   \       0x4C   0xF10B 0x0B01      ADD      R11,R11,#+1
   \       0x50   0xF1BB 0x0F1F      CMP      R11,#+31
   \       0x54   0xDB02             BLT.N    ??mbedtls_ecp_gen_keypair_base_3
   2093                          return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
   \       0x56   0x....'....        LDR.W    R0,??DataTable24  ;; 0xffffb300
   \       0x5A   0xE01C             B.N      ??mbedtls_ecp_gen_keypair_base_4
   2094                  }
   2095                  while( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
   2096                         mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 );
   \                     ??mbedtls_ecp_gen_keypair_base_3: (+1)
   \       0x5C   0x2101             MOVS     R1,#+1
   \       0x5E   0x4628             MOV      R0,R5
   \       0x60   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x64   0x2800             CMP      R0,#+0
   \       0x66   0xD4E1             BMI.N    ??mbedtls_ecp_gen_keypair_base_1
   \       0x68   0xF106 0x014C      ADD      R1,R6,#+76
   \       0x6C   0x4628             MOV      R0,R5
   \       0x6E   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \       0x72   0x2800             CMP      R0,#+0
   \       0x74   0xD5DA             BPL.N    ??mbedtls_ecp_gen_keypair_base_1
   \                     ??mbedtls_ecp_gen_keypair_base_2: (+1)
   \       0x76   0x4630             MOV      R0,R6
   \       0x78   0x462A             MOV      R2,R5
   2097              }
   2098              else
   2099          #endif /* ECP_SHORTWEIERSTRASS */
   2100                  return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   2101          
   2102          cleanup:
   2103              if( ret != 0 )
   \       0x7A   0x2C00             CMP      R4,#+0
   \       0x7C   0xD003             BEQ.N    ??mbedtls_ecp_gen_keypair_base_5
   2104                  return( ret );
   \       0x7E   0x4620             MOV      R0,R4
   \       0x80   0xE009             B.N      ??mbedtls_ecp_gen_keypair_base_4
   \                     ??mbedtls_ecp_gen_keypair_base_0: (+1)
   \       0x82   0x....             LDR.N    R0,??DataTable24_6  ;; 0xffffb080
   \       0x84   0xE007             B.N      ??mbedtls_ecp_gen_keypair_base_4
   \                     ??mbedtls_ecp_gen_keypair_base_5: (+1)
   \       0x86   0x4639             MOV      R1,R7
   \       0x88   0x9B02             LDR      R3,[SP, #+8]
   2105          
   2106              return( mbedtls_ecp_mul( grp, Q, d, G, f_rng, p_rng ) );
   \       0x8A   0xF8CD 0x8004      STR      R8,[SP, #+4]
   \       0x8E   0xF8CD 0x9000      STR      R9,[SP, #+0]
   \       0x92   0x....'....        BL       mbedtls_ecp_mul
   \                     ??mbedtls_ecp_gen_keypair_base_4: (+1)
   \       0x96   0xE8BD 0x8FFE      POP      {R1-R11,PC}      ;; return
   2107          }
   2108          
   2109          /*
   2110           * Generate key pair, wrapper for conventional base point
   2111           */

   \                                 In section .text, align 2, keep-with-next
   2112          int mbedtls_ecp_gen_keypair( mbedtls_ecp_group *grp,
   2113                                       mbedtls_mpi *d, mbedtls_ecp_point *Q,
   2114                                       int (*f_rng)(void *, unsigned char *, size_t),
   2115                                       void *p_rng )
   2116          {
   \                     mbedtls_ecp_gen_keypair: (+1)
   \        0x0   0xB51C             PUSH     {R2-R4,LR}
   \        0x2   0x9C04             LDR      R4,[SP, #+16]
   2117              return( mbedtls_ecp_gen_keypair_base( grp, &grp->G, d, Q, f_rng, p_rng ) );
   \        0x4   0x9401             STR      R4,[SP, #+4]
   \        0x6   0x9300             STR      R3,[SP, #+0]
   \        0x8   0x4613             MOV      R3,R2
   \        0xA   0x460A             MOV      R2,R1
   \        0xC   0xF100 0x0128      ADD      R1,R0,#+40
   \       0x10   0x....'....        BL       mbedtls_ecp_gen_keypair_base
   \       0x14   0xBD16             POP      {R1,R2,R4,PC}    ;; return
   2118          }
   2119          
   2120          /*
   2121           * Generate a keypair, prettier wrapper
   2122           */

   \                                 In section .text, align 2, keep-with-next
   2123          int mbedtls_ecp_gen_key( mbedtls_ecp_group_id grp_id, mbedtls_ecp_keypair *key,
   2124                          int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
   2125          {
   \                     mbedtls_ecp_gen_key: (+1)
   \        0x0   0xB57C             PUSH     {R2-R6,LR}
   \        0x2   0x460C             MOV      R4,R1
   \        0x4   0x4615             MOV      R5,R2
   \        0x6   0x461E             MOV      R6,R3
   2126              int ret;
   2127          
   2128              if( ( ret = mbedtls_ecp_group_load( &key->grp, grp_id ) ) != 0 )
   \        0x8   0x4601             MOV      R1,R0
   \        0xA   0x4620             MOV      R0,R4
   \        0xC   0x....'....        BL       mbedtls_ecp_group_load
   \       0x10   0x2800             CMP      R0,#+0
   \       0x12   0xD108             BNE.N    ??mbedtls_ecp_gen_key_0
   2129                  return( ret );
   2130          
   2131              return( mbedtls_ecp_gen_keypair( &key->grp, &key->d, &key->Q, f_rng, p_rng ) );
   \       0x14   0x9600             STR      R6,[SP, #+0]
   \       0x16   0x462B             MOV      R3,R5
   \       0x18   0xF104 0x0288      ADD      R2,R4,#+136
   \       0x1C   0xF104 0x017C      ADD      R1,R4,#+124
   \       0x20   0x4620             MOV      R0,R4
   \       0x22   0x....'....        BL       mbedtls_ecp_gen_keypair
   \                     ??mbedtls_ecp_gen_key_0: (+1)
   \       0x26   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
   2132          }
   2133          
   2134          /*
   2135           * Check a public-private key pair
   2136           */

   \                                 In section .text, align 2, keep-with-next
   2137          int mbedtls_ecp_check_pub_priv( const mbedtls_ecp_keypair *pub, const mbedtls_ecp_keypair *prv )
   2138          {
   \                     mbedtls_ecp_check_pub_priv: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0xB0AA             SUB      SP,SP,#+168
   \        0x4   0x4604             MOV      R4,R0
   \        0x6   0x460D             MOV      R5,R1
   2139              int ret;
   2140              mbedtls_ecp_point Q;
   2141              mbedtls_ecp_group grp;
   2142          
   2143              if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||
   2144                  pub->grp.id != prv->grp.id ||
   2145                  mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||
   2146                  mbedtls_mpi_cmp_mpi( &pub->Q.Y, &prv->Q.Y ) ||
   2147                  mbedtls_mpi_cmp_mpi( &pub->Q.Z, &prv->Q.Z ) )
   \        0x8   0x7820             LDRB     R0,[R4, #+0]
   \        0xA   0x2800             CMP      R0,#+0
   \        0xC   0xD01A             BEQ.N    ??mbedtls_ecp_check_pub_priv_0
   \        0xE   0x7829             LDRB     R1,[R5, #+0]
   \       0x10   0x4288             CMP      R0,R1
   \       0x12   0xD117             BNE.N    ??mbedtls_ecp_check_pub_priv_0
   \       0x14   0xF105 0x0188      ADD      R1,R5,#+136
   \       0x18   0xF104 0x0088      ADD      R0,R4,#+136
   \       0x1C   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \       0x20   0x2800             CMP      R0,#+0
   \       0x22   0xD10F             BNE.N    ??mbedtls_ecp_check_pub_priv_0
   \       0x24   0xF105 0x0194      ADD      R1,R5,#+148
   \       0x28   0xF104 0x0094      ADD      R0,R4,#+148
   \       0x2C   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \       0x30   0x2800             CMP      R0,#+0
   \       0x32   0xD107             BNE.N    ??mbedtls_ecp_check_pub_priv_0
   \       0x34   0xF105 0x01A0      ADD      R1,R5,#+160
   \       0x38   0xF104 0x00A0      ADD      R0,R4,#+160
   \       0x3C   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \       0x40   0x2800             CMP      R0,#+0
   \       0x42   0xD001             BEQ.N    ??mbedtls_ecp_check_pub_priv_1
   2148              {
   2149                  return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   \                     ??mbedtls_ecp_check_pub_priv_0: (+1)
   \       0x44   0x....             LDR.N    R0,??DataTable24_6  ;; 0xffffb080
   \       0x46   0xE033             B.N      ??mbedtls_ecp_check_pub_priv_2
   2150              }
   2151          
   2152              mbedtls_ecp_point_init( &Q );
   \                     ??mbedtls_ecp_check_pub_priv_1: (+1)
   \       0x48   0xA802             ADD      R0,SP,#+8
   \       0x4A   0x....'....        BL       mbedtls_ecp_point_init
   2153              mbedtls_ecp_group_init( &grp );
   \       0x4E   0xA80B             ADD      R0,SP,#+44
   \       0x50   0x....'....        BL       mbedtls_ecp_group_init
   2154          
   2155              /* mbedtls_ecp_mul() needs a non-const group... */
   2156              mbedtls_ecp_group_copy( &grp, &prv->grp );
   \       0x54   0x4629             MOV      R1,R5
   \       0x56   0xA80B             ADD      R0,SP,#+44
   \       0x58   0x....'....        BL       mbedtls_ecp_group_copy
   2157          
   2158              /* Also checks d is valid */
   2159              MBEDTLS_MPI_CHK( mbedtls_ecp_mul( &grp, &Q, &prv->d, &prv->grp.G, NULL, NULL ) );
   \       0x5C   0x2000             MOVS     R0,#+0
   \       0x5E   0x9001             STR      R0,[SP, #+4]
   \       0x60   0x9000             STR      R0,[SP, #+0]
   \       0x62   0xF105 0x0328      ADD      R3,R5,#+40
   \       0x66   0xF105 0x027C      ADD      R2,R5,#+124
   \       0x6A   0xA902             ADD      R1,SP,#+8
   \       0x6C   0xA80B             ADD      R0,SP,#+44
   \       0x6E   0x....'....        BL       mbedtls_ecp_mul
   \       0x72   0x0004             MOVS     R4,R0
   \       0x74   0xD115             BNE.N    ??mbedtls_ecp_check_pub_priv_3
   2160          
   2161              if( mbedtls_mpi_cmp_mpi( &Q.X, &prv->Q.X ) ||
   2162                  mbedtls_mpi_cmp_mpi( &Q.Y, &prv->Q.Y ) ||
   2163                  mbedtls_mpi_cmp_mpi( &Q.Z, &prv->Q.Z ) )
   \       0x76   0xF105 0x0188      ADD      R1,R5,#+136
   \       0x7A   0xA802             ADD      R0,SP,#+8
   \       0x7C   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \       0x80   0x2800             CMP      R0,#+0
   \       0x82   0xD10D             BNE.N    ??mbedtls_ecp_check_pub_priv_4
   \       0x84   0xF105 0x0194      ADD      R1,R5,#+148
   \       0x88   0xA805             ADD      R0,SP,#+20
   \       0x8A   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \       0x8E   0x2800             CMP      R0,#+0
   \       0x90   0xD106             BNE.N    ??mbedtls_ecp_check_pub_priv_4
   \       0x92   0xF105 0x01A0      ADD      R1,R5,#+160
   \       0x96   0xA808             ADD      R0,SP,#+32
   \       0x98   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \       0x9C   0x2800             CMP      R0,#+0
   \       0x9E   0xD000             BEQ.N    ??mbedtls_ecp_check_pub_priv_3
   2164              {
   2165                  ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
   \                     ??mbedtls_ecp_check_pub_priv_4: (+1)
   \       0xA0   0x....             LDR.N    R4,??DataTable24_6  ;; 0xffffb080
   2166                  goto cleanup;
   2167              }
   2168          
   2169          cleanup:
   2170              mbedtls_ecp_point_free( &Q );
   \                     ??mbedtls_ecp_check_pub_priv_3: (+1)
   \       0xA2   0xA802             ADD      R0,SP,#+8
   \       0xA4   0x....'....        BL       mbedtls_ecp_point_free
   2171              mbedtls_ecp_group_free( &grp );
   \       0xA8   0xA80B             ADD      R0,SP,#+44
   \       0xAA   0x....'....        BL       mbedtls_ecp_group_free
   2172          
   2173              return( ret );
   \       0xAE   0x4620             MOV      R0,R4
   \                     ??mbedtls_ecp_check_pub_priv_2: (+1)
   \       0xB0   0xB02B             ADD      SP,SP,#+172
   \       0xB2   0xBD30             POP      {R4,R5,PC}       ;; return
   2174          }
   2175          
   2176          #if defined(MBEDTLS_SELF_TEST)
   2177          
   2178          /*
   2179           * Checkup routine
   2180           */

   \                                 In section .text, align 2, keep-with-next
   2181          int mbedtls_ecp_self_test( int verbose )
   2182          {
   \                     mbedtls_ecp_self_test: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \        0x4   0xB0BC             SUB      SP,SP,#+240
   \        0x6   0x4604             MOV      R4,R0
   2183              int ret;
   2184              size_t i;
   2185              mbedtls_ecp_group grp;
   2186              mbedtls_ecp_point R, P;
   2187              mbedtls_mpi m;
   2188              unsigned long add_c_prev, dbl_c_prev, mul_c_prev;
   2189              /* exponents especially adapted for secp192r1 */
   2190              const char *exponents[] =
   2191              {
   2192                  "000000000000000000000000000000000000000000000001", /* one */
   2193                  "FFFFFFFFFFFFFFFFFFFFFFFF99DEF836146BC9B1B4D22830", /* N - 1 */
   2194                  "5EA6F389A38B8BC81E767753B15AA5569E1782E30ABE7D25", /* random */
   2195                  "400000000000000000000000000000000000000000000000", /* one and zeros */
   2196                  "7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF", /* all ones */
   2197                  "555555555555555555555555555555555555555555555555", /* 101010... */
   2198              };
   \        0x8   0xA805             ADD      R0,SP,#+20
   \        0xA   0x....             LDR.N    R1,??DataTable24_7
   \        0xC   0x2218             MOVS     R2,#+24
   \        0xE   0x....'....        BL       __aeabi_memcpy4
   2199          
   2200              mbedtls_ecp_group_init( &grp );
   \       0x12   0xA81D             ADD      R0,SP,#+116
   \       0x14   0x....'....        BL       mbedtls_ecp_group_init
   2201              mbedtls_ecp_point_init( &R );
   \       0x18   0xA814             ADD      R0,SP,#+80
   \       0x1A   0x....'....        BL       mbedtls_ecp_point_init
   2202              mbedtls_ecp_point_init( &P );
   \       0x1E   0xA80B             ADD      R0,SP,#+44
   \       0x20   0x....'....        BL       mbedtls_ecp_point_init
   2203              mbedtls_mpi_init( &m );
   \       0x24   0xA802             ADD      R0,SP,#+8
   \       0x26   0x....'....        BL       mbedtls_mpi_init
   2204          
   2205              /* Use secp192r1 if available, or any available curve */
   2206          #if defined(MBEDTLS_ECP_DP_SECP192R1_ENABLED)
   2207              MBEDTLS_MPI_CHK( mbedtls_ecp_group_load( &grp, MBEDTLS_ECP_DP_SECP192R1 ) );
   2208          #else
   2209              MBEDTLS_MPI_CHK( mbedtls_ecp_group_load( &grp, mbedtls_ecp_curve_list()->grp_id ) );
   \       0x2A   0x....'....        BL       mbedtls_ecp_curve_list
   \       0x2E   0x7801             LDRB     R1,[R0, #+0]
   \       0x30   0xA81D             ADD      R0,SP,#+116
   \       0x32   0x....'....        BL       mbedtls_ecp_group_load
   \       0x36   0x0005             MOVS     R5,R0
   \       0x38   0xF040 0x80C2      BNE.W    ??mbedtls_ecp_self_test_0
   2210          #endif
   2211          
   2212              if( verbose != 0 )
   \       0x3C   0x2C00             CMP      R4,#+0
   \       0x3E   0xD002             BEQ.N    ??mbedtls_ecp_self_test_1
   2213                  mbedtls_printf( "  ECP test #1 (constant op_count, base point G): " );
   \       0x40   0x....             LDR.N    R0,??DataTable24_8
   \       0x42   0x....'....        BL       DbgConsole_Printf
   2214          
   2215              /* Do a dummy multiplication first to trigger precomputation */
   2216              MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &m, 2 ) );
   \                     ??mbedtls_ecp_self_test_1: (+1)
   \       0x46   0x2102             MOVS     R1,#+2
   \       0x48   0xA802             ADD      R0,SP,#+8
   \       0x4A   0x....'....        BL       mbedtls_mpi_lset
   \       0x4E   0x0005             MOVS     R5,R0
   \       0x50   0xF040 0x80B6      BNE.W    ??mbedtls_ecp_self_test_0
   2217              MBEDTLS_MPI_CHK( mbedtls_ecp_mul( &grp, &P, &m, &grp.G, NULL, NULL ) );
   \       0x54   0x2000             MOVS     R0,#+0
   \       0x56   0x9001             STR      R0,[SP, #+4]
   \       0x58   0x9000             STR      R0,[SP, #+0]
   \       0x5A   0xAB27             ADD      R3,SP,#+156
   \       0x5C   0xAA02             ADD      R2,SP,#+8
   \       0x5E   0xA90B             ADD      R1,SP,#+44
   \       0x60   0xA81D             ADD      R0,SP,#+116
   \       0x62   0x....'....        BL       mbedtls_ecp_mul
   \       0x66   0x0005             MOVS     R5,R0
   \       0x68   0xF040 0x80AA      BNE.W    ??mbedtls_ecp_self_test_0
   2218          
   2219              add_count = 0;
   \       0x6C   0x....             LDR.N    R6,??DataTable24_9
   \       0x6E   0x2000             MOVS     R0,#+0
   \       0x70   0x6030             STR      R0,[R6, #+0]
   2220              dbl_count = 0;
   \       0x72   0x....             LDR.N    R7,??DataTable24_10
   \       0x74   0x6038             STR      R0,[R7, #+0]
   2221              mul_count = 0;
   \       0x76   0x....'....        LDR.W    R8,??DataTable24_1
   \       0x7A   0xF8C8 0x0000      STR      R0,[R8, #+0]
   2222              MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &m, 16, exponents[0] ) );
   \       0x7E   0x9A05             LDR      R2,[SP, #+20]
   \       0x80   0x2110             MOVS     R1,#+16
   \       0x82   0xA802             ADD      R0,SP,#+8
   \       0x84   0x....'....        BL       mbedtls_mpi_read_string
   \       0x88   0x0005             MOVS     R5,R0
   \       0x8A   0xF040 0x8099      BNE.W    ??mbedtls_ecp_self_test_0
   2223              MBEDTLS_MPI_CHK( mbedtls_ecp_mul( &grp, &R, &m, &grp.G, NULL, NULL ) );
   \       0x8E   0x2000             MOVS     R0,#+0
   \       0x90   0x9001             STR      R0,[SP, #+4]
   \       0x92   0x9000             STR      R0,[SP, #+0]
   \       0x94   0xAB27             ADD      R3,SP,#+156
   \       0x96   0xAA02             ADD      R2,SP,#+8
   \       0x98   0xA914             ADD      R1,SP,#+80
   \       0x9A   0xA81D             ADD      R0,SP,#+116
   \       0x9C   0x....'....        BL       mbedtls_ecp_mul
   \       0xA0   0x0005             MOVS     R5,R0
   \       0xA2   0xF040 0x808D      BNE.W    ??mbedtls_ecp_self_test_0
   2224          
   2225              for( i = 1; i < sizeof( exponents ) / sizeof( exponents[0] ); i++ )
   \       0xA6   0x2501             MOVS     R5,#+1
   \                     ??mbedtls_ecp_self_test_2: (+1)
   \       0xA8   0x2D06             CMP      R5,#+6
   \       0xAA   0xD241             BCS.N    ??mbedtls_ecp_self_test_3
   2226              {
   2227                  add_c_prev = add_count;
   \       0xAC   0xF8D6 0x9000      LDR      R9,[R6, #+0]
   2228                  dbl_c_prev = dbl_count;
   \       0xB0   0xF8D7 0xA000      LDR      R10,[R7, #+0]
   2229                  mul_c_prev = mul_count;
   \       0xB4   0xF8D8 0xB000      LDR      R11,[R8, #+0]
   2230                  add_count = 0;
   \       0xB8   0x2000             MOVS     R0,#+0
   \       0xBA   0x6030             STR      R0,[R6, #+0]
   2231                  dbl_count = 0;
   \       0xBC   0x6038             STR      R0,[R7, #+0]
   2232                  mul_count = 0;
   \       0xBE   0xF8C8 0x0000      STR      R0,[R8, #+0]
   2233          
   2234                  MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &m, 16, exponents[i] ) );
   \       0xC2   0xA805             ADD      R0,SP,#+20
   \       0xC4   0xF850 0x2025      LDR      R2,[R0, R5, LSL #+2]
   \       0xC8   0x2110             MOVS     R1,#+16
   \       0xCA   0xA802             ADD      R0,SP,#+8
   \       0xCC   0x....'....        BL       mbedtls_mpi_read_string
   \       0xD0   0x2800             CMP      R0,#+0
   \       0xD2   0xD166             BNE.N    ??mbedtls_ecp_self_test_4
   2235                  MBEDTLS_MPI_CHK( mbedtls_ecp_mul( &grp, &R, &m, &grp.G, NULL, NULL ) );
   \       0xD4   0x2000             MOVS     R0,#+0
   \       0xD6   0x9001             STR      R0,[SP, #+4]
   \       0xD8   0x9000             STR      R0,[SP, #+0]
   \       0xDA   0xAB27             ADD      R3,SP,#+156
   \       0xDC   0xAA02             ADD      R2,SP,#+8
   \       0xDE   0xA914             ADD      R1,SP,#+80
   \       0xE0   0xA81D             ADD      R0,SP,#+116
   \       0xE2   0x....'....        BL       mbedtls_ecp_mul
   \       0xE6   0x2800             CMP      R0,#+0
   \       0xE8   0xD15B             BNE.N    ??mbedtls_ecp_self_test_4
   2236          
   2237                  if( add_count != add_c_prev ||
   2238                      dbl_count != dbl_c_prev ||
   2239                      mul_count != mul_c_prev )
   \       0xEA   0x6830             LDR      R0,[R6, #+0]
   \       0xEC   0x4548             CMP      R0,R9
   \       0xEE   0xD15A             BNE.N    ??mbedtls_ecp_self_test_5
   \       0xF0   0x6838             LDR      R0,[R7, #+0]
   \       0xF2   0x4550             CMP      R0,R10
   \       0xF4   0xD157             BNE.N    ??mbedtls_ecp_self_test_5
   \       0xF6   0xF8D8 0x0000      LDR      R0,[R8, #+0]
   \       0xFA   0x4558             CMP      R0,R11
   \       0xFC   0xD153             BNE.N    ??mbedtls_ecp_self_test_5
   \       0xFE   0x1C6D             ADDS     R5,R5,#+1
   \      0x100   0xE7D2             B.N      ??mbedtls_ecp_self_test_2
   2240                  {
   2241                      if( verbose != 0 )
   2242                          mbedtls_printf( "failed (%u)\n\r", (unsigned int) i );
   2243          
   2244                      ret = 1;
   2245                      goto cleanup;
   2246                  }
   2247              }
   2248          
   2249              if( verbose != 0 )
   2250                  mbedtls_printf( "passed\n\r" );
   2251          
   2252              if( verbose != 0 )
   2253                  mbedtls_printf( "  ECP test #2 (constant op_count, other point): " );
   2254              /* We computed P = 2G last time, use it */
   2255          
   2256              add_count = 0;
   2257              dbl_count = 0;
   2258              mul_count = 0;
   2259              MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &m, 16, exponents[0] ) );
   2260              MBEDTLS_MPI_CHK( mbedtls_ecp_mul( &grp, &R, &m, &P, NULL, NULL ) );
   2261          
   2262              for( i = 1; i < sizeof( exponents ) / sizeof( exponents[0] ); i++ )
   2263              {
   2264                  add_c_prev = add_count;
   2265                  dbl_c_prev = dbl_count;
   2266                  mul_c_prev = mul_count;
   2267                  add_count = 0;
   2268                  dbl_count = 0;
   2269                  mul_count = 0;
   2270          
   2271                  MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &m, 16, exponents[i] ) );
   2272                  MBEDTLS_MPI_CHK( mbedtls_ecp_mul( &grp, &R, &m, &P, NULL, NULL ) );
   \                     ??mbedtls_ecp_self_test_6: (+1)
   \      0x102   0x2000             MOVS     R0,#+0
   \      0x104   0x9001             STR      R0,[SP, #+4]
   \      0x106   0x9000             STR      R0,[SP, #+0]
   \      0x108   0xAB0B             ADD      R3,SP,#+44
   \      0x10A   0xAA02             ADD      R2,SP,#+8
   \      0x10C   0xA914             ADD      R1,SP,#+80
   \      0x10E   0xA81D             ADD      R0,SP,#+116
   \      0x110   0x....'....        BL       mbedtls_ecp_mul
   \      0x114   0x2800             CMP      R0,#+0
   \      0x116   0xD144             BNE.N    ??mbedtls_ecp_self_test_4
   2273          
   2274                  if( add_count != add_c_prev ||
   2275                      dbl_count != dbl_c_prev ||
   2276                      mul_count != mul_c_prev )
   \      0x118   0x6831             LDR      R1,[R6, #+0]
   \      0x11A   0x4549             CMP      R1,R9
   \      0x11C   0xD16D             BNE.N    ??mbedtls_ecp_self_test_7
   \      0x11E   0x6839             LDR      R1,[R7, #+0]
   \      0x120   0x4551             CMP      R1,R10
   \      0x122   0xD16A             BNE.N    ??mbedtls_ecp_self_test_7
   \      0x124   0xF8D8 0x1000      LDR      R1,[R8, #+0]
   \      0x128   0x4559             CMP      R1,R11
   \      0x12A   0xD166             BNE.N    ??mbedtls_ecp_self_test_7
   \      0x12C   0x1C6D             ADDS     R5,R5,#+1
   \      0x12E   0xE022             B.N      ??mbedtls_ecp_self_test_8
   \                     ??mbedtls_ecp_self_test_3: (+1)
   \      0x130   0x2C00             CMP      R4,#+0
   \      0x132   0xD002             BEQ.N    ??mbedtls_ecp_self_test_9
   \      0x134   0x....             LDR.N    R0,??DataTable24_11
   \      0x136   0x....'....        BL       DbgConsole_Printf
   \                     ??mbedtls_ecp_self_test_9: (+1)
   \      0x13A   0x2C00             CMP      R4,#+0
   \      0x13C   0xD002             BEQ.N    ??mbedtls_ecp_self_test_10
   \      0x13E   0x....             LDR.N    R0,??DataTable24_12
   \      0x140   0x....'....        BL       DbgConsole_Printf
   \                     ??mbedtls_ecp_self_test_10: (+1)
   \      0x144   0x2000             MOVS     R0,#+0
   \      0x146   0x6030             STR      R0,[R6, #+0]
   \      0x148   0x6038             STR      R0,[R7, #+0]
   \      0x14A   0xF8C8 0x0000      STR      R0,[R8, #+0]
   \      0x14E   0x9A05             LDR      R2,[SP, #+20]
   \      0x150   0x2110             MOVS     R1,#+16
   \      0x152   0xA802             ADD      R0,SP,#+8
   \      0x154   0x....'....        BL       mbedtls_mpi_read_string
   \      0x158   0x0005             MOVS     R5,R0
   \      0x15A   0xD131             BNE.N    ??mbedtls_ecp_self_test_0
   \      0x15C   0x2000             MOVS     R0,#+0
   \      0x15E   0x9001             STR      R0,[SP, #+4]
   \      0x160   0x9000             STR      R0,[SP, #+0]
   \      0x162   0xAB0B             ADD      R3,SP,#+44
   \      0x164   0xAA02             ADD      R2,SP,#+8
   \      0x166   0xA914             ADD      R1,SP,#+80
   \      0x168   0xA81D             ADD      R0,SP,#+116
   \      0x16A   0x....'....        BL       mbedtls_ecp_mul
   \      0x16E   0x0005             MOVS     R5,R0
   \      0x170   0xD126             BNE.N    ??mbedtls_ecp_self_test_0
   \      0x172   0x2101             MOVS     R1,#+1
   \      0x174   0x460D             MOV      R5,R1
   \                     ??mbedtls_ecp_self_test_8: (+1)
   \      0x176   0x2D06             CMP      R5,#+6
   \      0x178   0xD21C             BCS.N    ??mbedtls_ecp_self_test_11
   \      0x17A   0xF8D6 0x9000      LDR      R9,[R6, #+0]
   \      0x17E   0xF8D7 0xA000      LDR      R10,[R7, #+0]
   \      0x182   0xF8D8 0xB000      LDR      R11,[R8, #+0]
   \      0x186   0x2000             MOVS     R0,#+0
   \      0x188   0x6030             STR      R0,[R6, #+0]
   \      0x18A   0x6038             STR      R0,[R7, #+0]
   \      0x18C   0xF8C8 0x0000      STR      R0,[R8, #+0]
   \      0x190   0xA805             ADD      R0,SP,#+20
   \      0x192   0xF850 0x2025      LDR      R2,[R0, R5, LSL #+2]
   \      0x196   0x2110             MOVS     R1,#+16
   \      0x198   0xA802             ADD      R0,SP,#+8
   \      0x19A   0x....'....        BL       mbedtls_mpi_read_string
   \      0x19E   0x2800             CMP      R0,#+0
   \      0x1A0   0xD0AF             BEQ.N    ??mbedtls_ecp_self_test_6
   \                     ??mbedtls_ecp_self_test_4: (+1)
   \      0x1A2   0x4605             MOV      R5,R0
   \      0x1A4   0xE00C             B.N      ??mbedtls_ecp_self_test_0
   \                     ??mbedtls_ecp_self_test_5: (+1)
   \      0x1A6   0x4629             MOV      R1,R5
   \      0x1A8   0x2C00             CMP      R4,#+0
   \      0x1AA   0xD02C             BEQ.N    ??mbedtls_ecp_self_test_12
   \      0x1AC   0x....             LDR.N    R0,??DataTable24_13
   \      0x1AE   0x....'....        BL       DbgConsole_Printf
   \      0x1B2   0xE028             B.N      ??mbedtls_ecp_self_test_12
   \                     ??mbedtls_ecp_self_test_11: (+1)
   \      0x1B4   0x4605             MOV      R5,R0
   2277                  {
   2278                      if( verbose != 0 )
   2279                          mbedtls_printf( "failed (%u)\n\r", (unsigned int) i );
   2280          
   2281                      ret = 1;
   2282                      goto cleanup;
   2283                  }
   2284              }
   2285          
   2286              if( verbose != 0 )
   \      0x1B6   0x2C00             CMP      R4,#+0
   \      0x1B8   0xD002             BEQ.N    ??mbedtls_ecp_self_test_0
   2287                  mbedtls_printf( "passed\n\r" );
   \      0x1BA   0x....             LDR.N    R0,??DataTable24_11
   \      0x1BC   0x....'....        BL       DbgConsole_Printf
   2288          
   2289          cleanup:
   2290          
   2291              if( ret < 0 && verbose != 0 )
   \                     ??mbedtls_ecp_self_test_0: (+1)
   \      0x1C0   0x2D00             CMP      R5,#+0
   \      0x1C2   0xD505             BPL.N    ??mbedtls_ecp_self_test_13
   \      0x1C4   0x2C00             CMP      R4,#+0
   \      0x1C6   0xD003             BEQ.N    ??mbedtls_ecp_self_test_13
   2292                  mbedtls_printf( "Unexpected error, return code = %08X\n\r", ret );
   \      0x1C8   0x4629             MOV      R1,R5
   \      0x1CA   0x....             LDR.N    R0,??DataTable24_14
   \      0x1CC   0x....'....        BL       DbgConsole_Printf
   2293          
   2294              mbedtls_ecp_group_free( &grp );
   \                     ??mbedtls_ecp_self_test_13: (+1)
   \      0x1D0   0xA81D             ADD      R0,SP,#+116
   \      0x1D2   0x....'....        BL       mbedtls_ecp_group_free
   2295              mbedtls_ecp_point_free( &R );
   \      0x1D6   0xA814             ADD      R0,SP,#+80
   \      0x1D8   0x....'....        BL       mbedtls_ecp_point_free
   2296              mbedtls_ecp_point_free( &P );
   \      0x1DC   0xA80B             ADD      R0,SP,#+44
   \      0x1DE   0x....'....        BL       mbedtls_ecp_point_free
   2297              mbedtls_mpi_free( &m );
   \      0x1E2   0xA802             ADD      R0,SP,#+8
   \      0x1E4   0x....'....        BL       mbedtls_mpi_free
   2298          
   2299              if( verbose != 0 )
   \      0x1E8   0x2C00             CMP      R4,#+0
   \      0x1EA   0xD002             BEQ.N    ??mbedtls_ecp_self_test_14
   2300                  mbedtls_printf( "\n" );
   \      0x1EC   0x....             ADR.N    R0,??DataTable24_2  ;; "\n"
   \      0x1EE   0x....'....        BL       DbgConsole_Printf
   2301          
   2302              return( ret );
   \                     ??mbedtls_ecp_self_test_14: (+1)
   \      0x1F2   0x4628             MOV      R0,R5
   \      0x1F4   0xB03D             ADD      SP,SP,#+244
   \      0x1F6   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   \                     ??mbedtls_ecp_self_test_7: (+1)
   \      0x1FA   0x4629             MOV      R1,R5
   \      0x1FC   0x2C00             CMP      R4,#+0
   \      0x1FE   0xD002             BEQ.N    ??mbedtls_ecp_self_test_12
   \      0x200   0x....             LDR.N    R0,??DataTable24_13
   \      0x202   0x....'....        BL       DbgConsole_Printf
   \                     ??mbedtls_ecp_self_test_12: (+1)
   \      0x206   0x2501             MOVS     R5,#+1
   \      0x208   0xE7DA             B.N      ??mbedtls_ecp_self_test_0
   2303          }

   \                                 In section .rodata, align 4
   \                     ?_13:
   \        0x0   0x....'....        DC32 ?_1, ?_2, ?_3, ?_4, ?_5, ?_6
   \              0x....'....  
   \              0x....'....  
   \              0x....'....  
   \              0x....'....  
   \              0x....'....  

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \        0x0   0x....'....        DC32     ecp_supported_curves

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_1:
   \        0x0   0x....'....        DC32     `mbedtls_ecp_grp_id_list::init_done`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_2:
   \        0x0   0x....'....        DC32     ecp_supported_grp_id

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \        0x0   0xFFFF'B080        DC32     0xffffb080

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_1:
   \        0x0   0xFFFF'B100        DC32     0xffffb100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_2:
   \        0x0   0xFFFF'B180        DC32     0xffffb180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13:
   \        0x0   0x....'....        DC32     mul_count

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14:
   \        0x0   0xFFFF'B280        DC32     0xffffb280

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_1:
   \        0x0   0x....'....        DC32     dbl_count

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20:
   \        0x0   0x....'....        DC32     add_count

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21:
   \        0x0   0xFFFF'B080        DC32     0xffffb080

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24:
   \        0x0   0xFFFF'B300        DC32     0xffffb300

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_1:
   \        0x0   0x....'....        DC32     mul_count

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_2:
   \        0x0   0x0A 0x00          DC8      "\n",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_3:
   \        0x0   0xFFFF'B280        DC32     0xffffb280

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_4:
   \        0x0   0xFFFF'B380        DC32     0xffffb380

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_5:
   \        0x0   0xFFFF'B180        DC32     0xffffb180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_6:
   \        0x0   0xFFFF'B080        DC32     0xffffb080

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_7:
   \        0x0   0x....'....        DC32     ?_13

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_8:
   \        0x0   0x....'....        DC32     ?_7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_9:
   \        0x0   0x....'....        DC32     add_count

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_10:
   \        0x0   0x....'....        DC32     dbl_count

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_11:
   \        0x0   0x....'....        DC32     ?_9

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_12:
   \        0x0   0x....'....        DC32     ?_10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_13:
   \        0x0   0x....'....        DC32     ?_8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_14:
   \        0x0   0x....'....        DC32     ?_11

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x73 0x65          DC8 "secp256r1"
   \              0x63 0x70    
   \              0x32 0x35    
   \              0x36 0x72    
   \              0x31 0x00    
   \        0xA   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_1:
   \        0x0   0x30 0x30          DC8 "000000000000000000000000000000000000000000000001"
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x31    
   \              0x00         
   \       0x31   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_2:
   \        0x0   0x46 0x46          DC8 "FFFFFFFFFFFFFFFFFFFFFFFF99DEF836146BC9B1B4D22830"
   \              0x46 0x46    
   \              0x46 0x46    
   \              0x46 0x46    
   \              0x46 0x46    
   \              0x46 0x46    
   \              0x46 0x46    
   \              0x46 0x46    
   \              0x46 0x46    
   \              0x46 0x46    
   \              0x46 0x46    
   \              0x46 0x46    
   \              0x39 0x39    
   \              0x44 0x45    
   \              0x46 0x38    
   \              0x33 0x36    
   \              0x31 0x34    
   \              0x36 0x42    
   \              0x43 0x39    
   \              0x42 0x31    
   \              0x42 0x34    
   \              0x44 0x32    
   \              0x32 0x38    
   \              0x33 0x30    
   \              0x00         
   \       0x31   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_3:
   \        0x0   0x35 0x45          DC8 "5EA6F389A38B8BC81E767753B15AA5569E1782E30ABE7D25"
   \              0x41 0x36    
   \              0x46 0x33    
   \              0x38 0x39    
   \              0x41 0x33    
   \              0x38 0x42    
   \              0x38 0x42    
   \              0x43 0x38    
   \              0x31 0x45    
   \              0x37 0x36    
   \              0x37 0x37    
   \              0x35 0x33    
   \              0x42 0x31    
   \              0x35 0x41    
   \              0x41 0x35    
   \              0x35 0x36    
   \              0x39 0x45    
   \              0x31 0x37    
   \              0x38 0x32    
   \              0x45 0x33    
   \              0x30 0x41    
   \              0x42 0x45    
   \              0x37 0x44    
   \              0x32 0x35    
   \              0x00         
   \       0x31   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_4:
   \        0x0   0x34 0x30          DC8 "400000000000000000000000000000000000000000000000"
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x00         
   \       0x31   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_5:
   \        0x0   0x37 0x46          DC8 "7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
   \              0x46 0x46    
   \              0x46 0x46    
   \              0x46 0x46    
   \              0x46 0x46    
   \              0x46 0x46    
   \              0x46 0x46    
   \              0x46 0x46    
   \              0x46 0x46    
   \              0x46 0x46    
   \              0x46 0x46    
   \              0x46 0x46    
   \              0x46 0x46    
   \              0x46 0x46    
   \              0x46 0x46    
   \              0x46 0x46    
   \              0x46 0x46    
   \              0x46 0x46    
   \              0x46 0x46    
   \              0x46 0x46    
   \              0x46 0x46    
   \              0x46 0x46    
   \              0x46 0x46    
   \              0x46 0x46    
   \              0x00         
   \       0x31   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_6:
   \        0x0   0x35 0x35          DC8 "555555555555555555555555555555555555555555555555"
   \              0x35 0x35    
   \              0x35 0x35    
   \              0x35 0x35    
   \              0x35 0x35    
   \              0x35 0x35    
   \              0x35 0x35    
   \              0x35 0x35    
   \              0x35 0x35    
   \              0x35 0x35    
   \              0x35 0x35    
   \              0x35 0x35    
   \              0x35 0x35    
   \              0x35 0x35    
   \              0x35 0x35    
   \              0x35 0x35    
   \              0x35 0x35    
   \              0x35 0x35    
   \              0x35 0x35    
   \              0x35 0x35    
   \              0x35 0x35    
   \              0x35 0x35    
   \              0x35 0x35    
   \              0x35 0x35    
   \              0x00         
   \       0x31   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_7:
   \        0x0   0x20 0x20          DC8 "  ECP test #1 (constant op_count, base point G): "
   \              0x45 0x43    
   \              0x50 0x20    
   \              0x74 0x65    
   \              0x73 0x74    
   \              0x20 0x23    
   \              0x31 0x20    
   \              0x28 0x63    
   \              0x6F 0x6E    
   \              0x73 0x74    
   \              0x61 0x6E    
   \              0x74 0x20    
   \              0x6F 0x70    
   \              0x5F 0x63    
   \              0x6F 0x75    
   \              0x6E 0x74    
   \              0x2C 0x20    
   \              0x62 0x61    
   \              0x73 0x65    
   \              0x20 0x70    
   \              0x6F 0x69    
   \              0x6E 0x74    
   \              0x20 0x47    
   \              0x29 0x3A    
   \              0x20 0x00    
   \       0x32   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_8:
   \        0x0   0x66 0x61          DC8 "failed (%u)\012\015"
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x20 0x28    
   \              0x25 0x75    
   \              0x29 0x0A    
   \              0x0D 0x00    
   \        0xE   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_9:
   \        0x0   0x70 0x61          DC8 "passed\012\015"
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x0A 0x0D    
   \              0x00         
   \        0x9   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_10:
   \        0x0   0x20 0x20          DC8 "  ECP test #2 (constant op_count, other point): "
   \              0x45 0x43    
   \              0x50 0x20    
   \              0x74 0x65    
   \              0x73 0x74    
   \              0x20 0x23    
   \              0x32 0x20    
   \              0x28 0x63    
   \              0x6F 0x6E    
   \              0x73 0x74    
   \              0x61 0x6E    
   \              0x74 0x20    
   \              0x6F 0x70    
   \              0x5F 0x63    
   \              0x6F 0x75    
   \              0x6E 0x74    
   \              0x2C 0x20    
   \              0x6F 0x74    
   \              0x68 0x65    
   \              0x72 0x20    
   \              0x70 0x6F    
   \              0x69 0x6E    
   \              0x74 0x29    
   \              0x3A 0x20    
   \              0x00         
   \       0x31   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_11:
   \        0x0   0x55 0x6E          DC8 "Unexpected error, return code = %08X\012\015"
   \              0x65 0x78    
   \              0x70 0x65    
   \              0x63 0x74    
   \              0x65 0x64    
   \              0x20 0x65    
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x2C 0x20    
   \              0x72 0x65    
   \              0x74 0x75    
   \              0x72 0x6E    
   \              0x20 0x63    
   \              0x6F 0x64    
   \              0x65 0x20    
   \              0x3D 0x20    
   \              0x25 0x30    
   \              0x38 0x58    
   \              0x0A 0x0D    
   \              0x00         
   \       0x27   0x00               DC8 0

   \                                 In section .rodata, align 2
   \        0x0   0x0A 0x00          DC8 "\012"
   2304          
   2305          #endif /* MBEDTLS_SELF_TEST */
   2306          
   2307          #endif /* !MBEDTLS_ECP_ALT */
   2308          
   2309          #endif /* MBEDTLS_ECP_C */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   ecp_add
        24   -> ecp_add_mixed
        24   -> ecp_get_type
         0   -> ecp_normalize_jac
     112   ecp_add_mixed
       112   -> ecp_double_jac
       112   -> ecp_modp
       112   -> mbedtls_ecp_copy
       112   -> mbedtls_ecp_set_zero
       112   -> mbedtls_mpi_add_mpi
       112   -> mbedtls_mpi_cmp_int
       112   -> mbedtls_mpi_cmp_mpi
       112   -> mbedtls_mpi_copy
       112   -> mbedtls_mpi_free
       112   -> mbedtls_mpi_init
       112   -> mbedtls_mpi_mul_int
       112   -> mbedtls_mpi_mul_mpi
       112   -> mbedtls_mpi_sub_abs
       112   -> mbedtls_mpi_sub_mpi
      48   ecp_check_pubkey_sw
        48   -> ecp_modp
        48   -> mbedtls_mpi_add_mpi
        48   -> mbedtls_mpi_cmp_int
        48   -> mbedtls_mpi_cmp_mpi
        48   -> mbedtls_mpi_free
        48   -> mbedtls_mpi_init
        48   -> mbedtls_mpi_mul_mpi
        48   -> mbedtls_mpi_sub_abs
        48   -> mbedtls_mpi_sub_int
      32   ecp_comb_fixed
        32   -> __aeabi_memset
        32   -> mbedtls_mpi_get_bit
      80   ecp_double_jac
        80   -> ecp_modp
        80   -> mbedtls_mpi_add_mpi
        80   -> mbedtls_mpi_cmp_int
        80   -> mbedtls_mpi_cmp_mpi
        80   -> mbedtls_mpi_copy
        80   -> mbedtls_mpi_free
        80   -> mbedtls_mpi_init
        80   -> mbedtls_mpi_mul_int
        80   -> mbedtls_mpi_mul_mpi
        80   -> mbedtls_mpi_shift_l
        80   -> mbedtls_mpi_sub_abs
        80   -> mbedtls_mpi_sub_mpi
       0   ecp_get_type
      16   ecp_modp
        16   -- Indirect call
        16   -> mbedtls_mpi_add_mpi
        16   -> mbedtls_mpi_bitlen
        16   -> mbedtls_mpi_cmp_int
        16   -> mbedtls_mpi_cmp_mpi
         0   -> mbedtls_mpi_mod_mpi
        16   -> mbedtls_mpi_sub_abs
     280   ecp_mul_comb
       280   -> ecp_comb_fixed
       280   -> ecp_mul_comb_core
       280   -> ecp_normalize_jac
       280   -> ecp_precompute_comb
       280   -> ecp_safe_invert_jac
       280   -> mbedtls_calloc
       280   -> mbedtls_ecp_point_free
       280   -> mbedtls_free
       280   -> mbedtls_mpi_copy
       280   -> mbedtls_mpi_free
       280   -> mbedtls_mpi_get_bit
       280   -> mbedtls_mpi_init
       280   -> mbedtls_mpi_safe_cond_assign
       280   -> mbedtls_mpi_sub_mpi
      72   ecp_mul_comb_core
        72   -> ecp_add_mixed
        72   -> ecp_double_jac
        72   -> ecp_randomize_jac
        72   -> ecp_select_comb
        72   -> mbedtls_ecp_point_free
        72   -> mbedtls_ecp_point_init
        72   -> mbedtls_mpi_lset
      48   ecp_normalize_jac
        48   -> ecp_modp
        48   -> mbedtls_mpi_cmp_int
        48   -> mbedtls_mpi_free
        48   -> mbedtls_mpi_init
        48   -> mbedtls_mpi_inv_mod
        48   -> mbedtls_mpi_lset
        48   -> mbedtls_mpi_mul_mpi
      72   ecp_normalize_jac_many
        72   -> ecp_modp
        72   -> ecp_normalize_jac
        72   -> mbedtls_calloc
        72   -> mbedtls_free
        72   -> mbedtls_mpi_copy
        72   -> mbedtls_mpi_free
        72   -> mbedtls_mpi_init
        72   -> mbedtls_mpi_inv_mod
        72   -> mbedtls_mpi_mul_mpi
        72   -> mbedtls_mpi_shrink
      40   ecp_precompute_comb
        40   -> ecp_add_mixed
        40   -> ecp_double_jac
        40   -> ecp_normalize_jac_many
        40   -> mbedtls_ecp_copy
      56   ecp_randomize_jac
        56   -> ecp_modp
        56   -> mbedtls_mpi_cmp_int
        56   -> mbedtls_mpi_cmp_mpi
        56   -> mbedtls_mpi_fill_random
        56   -> mbedtls_mpi_free
        56   -> mbedtls_mpi_init
        56   -> mbedtls_mpi_mul_mpi
        56   -> mbedtls_mpi_shift_r
      32   ecp_safe_invert_jac
        32   -> mbedtls_mpi_cmp_int
        32   -> mbedtls_mpi_free
        32   -> mbedtls_mpi_init
        32   -> mbedtls_mpi_safe_cond_assign
        32   -> mbedtls_mpi_sub_mpi
      40   ecp_select_comb
         0   -> ecp_safe_invert_jac
        40   -> mbedtls_mpi_safe_cond_assign
      16   mbedtls_ecp_check_privkey
        16   -> ecp_get_type
        16   -> mbedtls_mpi_cmp_int
        16   -> mbedtls_mpi_cmp_mpi
     184   mbedtls_ecp_check_pub_priv
       184   -> mbedtls_ecp_group_copy
       184   -> mbedtls_ecp_group_free
       184   -> mbedtls_ecp_group_init
       184   -> mbedtls_ecp_mul
       184   -> mbedtls_ecp_point_free
       184   -> mbedtls_ecp_point_init
       184   -> mbedtls_mpi_cmp_mpi
      16   mbedtls_ecp_check_pubkey
         0   -> ecp_check_pubkey_sw
        16   -> ecp_get_type
        16   -> mbedtls_mpi_cmp_int
      16   mbedtls_ecp_copy
         0   -> mbedtls_mpi_copy
        16   -> mbedtls_mpi_copy
       8   mbedtls_ecp_curve_info_from_grp_id
         8   -> mbedtls_ecp_curve_list
      16   mbedtls_ecp_curve_info_from_name
        16   -> mbedtls_ecp_curve_list
        16   -> strcmp
       8   mbedtls_ecp_curve_info_from_tls_id
         8   -> mbedtls_ecp_curve_list
       0   mbedtls_ecp_curve_list
      24   mbedtls_ecp_gen_key
        24   -> mbedtls_ecp_gen_keypair
        24   -> mbedtls_ecp_group_load
      16   mbedtls_ecp_gen_keypair
        16   -> mbedtls_ecp_gen_keypair_base
      48   mbedtls_ecp_gen_keypair_base
        48   -> ecp_get_type
        48   -> mbedtls_ecp_mul
        48   -> mbedtls_mpi_cmp_int
        48   -> mbedtls_mpi_cmp_mpi
        48   -> mbedtls_mpi_fill_random
        48   -> mbedtls_mpi_shift_r
       0   mbedtls_ecp_group_copy
         0   -> mbedtls_ecp_group_load
      16   mbedtls_ecp_group_free
        16   -> mbedtls_ecp_point_free
        16   -> mbedtls_free
        16   -> mbedtls_mpi_free
         0   -> mbedtls_platform_zeroize
       0   mbedtls_ecp_group_init
         0   -> __aeabi_memset4
      16   mbedtls_ecp_grp_id_list
        16   -> mbedtls_ecp_curve_list
       8   mbedtls_ecp_is_zero
         8   -> mbedtls_mpi_cmp_int
       0   mbedtls_ecp_keypair_free
         0   -> mbedtls_ecp_keypair_free_o
       8   mbedtls_ecp_keypair_free_o
         8   -> mbedtls_ecp_group_free
         0   -> mbedtls_ecp_point_free
         8   -> mbedtls_mpi_free
       8   mbedtls_ecp_keypair_init
         8   -> mbedtls_ecp_group_init
         0   -> mbedtls_ecp_point_init
         8   -> mbedtls_mpi_init
      32   mbedtls_ecp_mul
        32   -> ecp_get_type
        32   -> ecp_mul_comb
        32   -> mbedtls_ecp_check_privkey
        32   -> mbedtls_ecp_check_pubkey
        32   -> mbedtls_mpi_cmp_int
      32   mbedtls_ecp_mul_shortcuts
        32   -> mbedtls_ecp_copy
        32   -> mbedtls_ecp_mul
        32   -> mbedtls_mpi_cmp_int
        32   -> mbedtls_mpi_sub_mpi
      56   mbedtls_ecp_muladd
        56   -> ecp_add
        56   -> ecp_get_type
        56   -> mbedtls_ecp_mul_shortcuts
        56   -> mbedtls_ecp_point_free
        56   -> mbedtls_ecp_point_init
      16   mbedtls_ecp_point_cmp
        16   -> mbedtls_mpi_cmp_mpi
       8   mbedtls_ecp_point_free
         0   -> mbedtls_mpi_free
         8   -> mbedtls_mpi_free
       8   mbedtls_ecp_point_init
         0   -> mbedtls_mpi_init
         8   -> mbedtls_mpi_init
      24   mbedtls_ecp_point_read_binary
         0   -> mbedtls_ecp_set_zero
         0   -> mbedtls_mpi_lset
        24   -> mbedtls_mpi_read_binary
        24   -> mbedtls_mpi_size
      16   mbedtls_ecp_point_read_string
         0   -> mbedtls_mpi_lset
        16   -> mbedtls_mpi_read_string
      32   mbedtls_ecp_point_write_binary
        32   -> mbedtls_mpi_cmp_int
        32   -> mbedtls_mpi_get_bit
        32   -> mbedtls_mpi_size
        32   -> mbedtls_mpi_write_binary
     280   mbedtls_ecp_self_test
       280   -> DbgConsole_Printf
       280   -> __aeabi_memcpy4
       280   -> mbedtls_ecp_curve_list
       280   -> mbedtls_ecp_group_free
       280   -> mbedtls_ecp_group_init
       280   -> mbedtls_ecp_group_load
       280   -> mbedtls_ecp_mul
       280   -> mbedtls_ecp_point_free
       280   -> mbedtls_ecp_point_init
       280   -> mbedtls_mpi_free
       280   -> mbedtls_mpi_init
       280   -> mbedtls_mpi_lset
       280   -> mbedtls_mpi_read_string
       8   mbedtls_ecp_set_zero
         0   -> mbedtls_mpi_lset
         8   -> mbedtls_mpi_lset
       0   mbedtls_ecp_tls_read_group
         0   -> mbedtls_ecp_tls_read_group_o
       8   mbedtls_ecp_tls_read_group_o
         8   -> mbedtls_ecp_curve_info_from_tls_id
         0   -> mbedtls_ecp_group_load
       8   mbedtls_ecp_tls_read_point
         0   -> mbedtls_ecp_point_read_binary
      16   mbedtls_ecp_tls_write_group
        16   -> mbedtls_ecp_curve_info_from_grp_id
      24   mbedtls_ecp_tls_write_point
        24   -> mbedtls_ecp_point_write_binary


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable11
       4  ??DataTable11_1
       4  ??DataTable11_2
       4  ??DataTable12
       4  ??DataTable12_1
       4  ??DataTable12_2
       4  ??DataTable13
       4  ??DataTable14
       4  ??DataTable14_1
       4  ??DataTable20
       4  ??DataTable21
       4  ??DataTable24
       4  ??DataTable24_1
       4  ??DataTable24_10
       4  ??DataTable24_11
       4  ??DataTable24_12
       4  ??DataTable24_13
       4  ??DataTable24_14
       4  ??DataTable24_2
       4  ??DataTable24_3
       4  ??DataTable24_4
       4  ??DataTable24_5
       4  ??DataTable24_6
       4  ??DataTable24_7
       4  ??DataTable24_8
       4  ??DataTable24_9
      12  ?_0
      52  ?_1
      52  ?_10
      40  ?_11
       2  ?_12
      24  ?_13
      52  ?_2
      52  ?_3
      52  ?_4
      52  ?_5
      52  ?_6
      52  ?_7
      16  ?_8
      12  ?_9
       4  add_count
       4  dbl_count
      54  ecp_add
    1098  ecp_add_mixed
     358  ecp_check_pubkey_sw
     152  ecp_comb_fixed
    1256  ecp_double_jac
      24  ecp_get_type
     138  ecp_modp
     382  ecp_mul_comb
     170  ecp_mul_comb_core
     228  ecp_normalize_jac
     616  ecp_normalize_jac_many
     256  ecp_precompute_comb
     330  ecp_randomize_jac
      76  ecp_safe_invert_jac
     122  ecp_select_comb
      24  ecp_supported_curves
       2  ecp_supported_grp_id
       4  init_done
      54  mbedtls_ecp_check_privkey
     180  mbedtls_ecp_check_pub_priv
      50  mbedtls_ecp_check_pubkey
      48  mbedtls_ecp_copy
      30  mbedtls_ecp_curve_info_from_grp_id
      40  mbedtls_ecp_curve_info_from_name
      32  mbedtls_ecp_curve_info_from_tls_id
       6  mbedtls_ecp_curve_list
      40  mbedtls_ecp_gen_key
      22  mbedtls_ecp_gen_keypair
     154  mbedtls_ecp_gen_keypair_base
       6  mbedtls_ecp_group_copy
     100  mbedtls_ecp_group_free
      14  mbedtls_ecp_group_init
      54  mbedtls_ecp_grp_id_list
      18  mbedtls_ecp_is_zero
       2  mbedtls_ecp_keypair_free
      30  mbedtls_ecp_keypair_free_o
      30  mbedtls_ecp_keypair_init
      92  mbedtls_ecp_mul
     116  mbedtls_ecp_mul_shortcuts
      90  mbedtls_ecp_muladd
      56  mbedtls_ecp_point_cmp
      32  mbedtls_ecp_point_free
      32  mbedtls_ecp_point_init
     122  mbedtls_ecp_point_read_binary
      48  mbedtls_ecp_point_read_string
     196  mbedtls_ecp_point_write_binary
     522  mbedtls_ecp_self_test
      44  mbedtls_ecp_set_zero
       2  mbedtls_ecp_tls_read_group
      72  mbedtls_ecp_tls_read_group_o
      48  mbedtls_ecp_tls_read_point
      56  mbedtls_ecp_tls_write_group
      50  mbedtls_ecp_tls_write_point
       4  mul_count

 
    18 bytes in section .bss
   546 bytes in section .rodata
 7 852 bytes in section .text
 
 7 852 bytes of CODE  memory
   546 bytes of CONST memory
    18 bytes of DATA  memory

Errors: none
Warnings: none
