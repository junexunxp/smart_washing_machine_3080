###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.3.193/W32 for ARM         10/Jun/2019  13:48:49
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\Development\smart_washing_machine_3080\mbedtls\library\ssl_cookie.c
#    Command line =  
#        -f C:\Users\nxf42695\AppData\Local\Temp\1\EW4F47.tmp
#        (C:\Development\smart_washing_machine_3080\mbedtls\library\ssl_cookie.c
#        -D DEBUG -D USE_RTOS -D XIP_EXTERNAL_FLASH=1 -D
#        XIP_BOOT_HEADER_ENABLE=1 -D CPU_MIMXRT1052DVL6B -D FSL_RTOS_FREE_RTOS
#        -D PRINTF_ADVANCED_ENABLE -D
#        "MBEDTLS_CONFIG_FILE=\"ksdk_mbedtls_config.h\"" -lC
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list -lA
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list
#        --diag_suppress Pa082,Pa050 -o
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_d16 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" --preinclude
#        C:\Development\smart_washing_machine_3080/source\app_preinclude.h -I
#        C:\Development\smart_washing_machine_3080/board\ -I
#        C:\Development\smart_washing_machine_3080/source\ -I
#        C:\Development\smart_washing_machine_3080/CMSIS\ -I
#        C:\Development\smart_washing_machine_3080/amazon-freertos/freertos/portable\
#        -I C:\Development\smart_washing_machine_3080/amazon-freertos/include\
#        -I C:\Development\smart_washing_machine_3080/component/lists\ -I
#        C:\Development\smart_washing_machine_3080/component/serial_manager\ -I
#        C:\Development\smart_washing_machine_3080/component/uart\ -I
#        C:\Development\smart_washing_machine_3080/component/kv\ -I
#        C:\Development\smart_washing_machine_3080/component/kv/include\ -I
#        C:\Development\smart_washing_machine_3080/device\ -I
#        C:\Development\smart_washing_machine_3080/doc\ -I
#        C:\Development\smart_washing_machine_3080/drivers\ -I
#        C:\Development\smart_washing_machine_3080/src\ -I
#        C:\Development\smart_washing_machine_3080/startup\ -I
#        C:\Development\smart_washing_machine_3080/utilities\ -I
#        C:\Development\smart_washing_machine_3080/xip\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\atm\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_model\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_sign\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\infra\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\mqtt\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\external_libs\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\coap_cloud\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\CoAPPacket\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\server\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\os\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\awss_reset\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\mbedtls\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\ -I
#        C:\Development\smart_washing_machine_3080\mbedtls\port\ksdk\ -Om)
#    Locale       =  C
#    List file    =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list\ssl_cookie.lst
#    Object file  =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj\ssl_cookie.o
#
###############################################################################

C:\Development\smart_washing_machine_3080\mbedtls\library\ssl_cookie.c
      1          /*
      2           *  DTLS cookie callbacks implementation
      3           *
      4           *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
      5           *  SPDX-License-Identifier: Apache-2.0
      6           *
      7           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
      8           *  not use this file except in compliance with the License.
      9           *  You may obtain a copy of the License at
     10           *
     11           *  http://www.apache.org/licenses/LICENSE-2.0
     12           *
     13           *  Unless required by applicable law or agreed to in writing, software
     14           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     15           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     16           *  See the License for the specific language governing permissions and
     17           *  limitations under the License.
     18           *
     19           *  This file is part of mbed TLS (https://tls.mbed.org)
     20           */
     21          /*
     22           * These session callbacks use a simple chained list
     23           * to store and retrieve the session information.
     24           */
     25          
     26          #if !defined(MBEDTLS_CONFIG_FILE)
     27          #include "mbedtls/config.h"
     28          #else
     29          #include MBEDTLS_CONFIG_FILE
     30          #endif
     31          
     32          #if defined(MBEDTLS_SSL_COOKIE_C)
     33          
     34          #if defined(MBEDTLS_PLATFORM_C)
     35          #include "mbedtls/platform.h"
     36          #else
     37          #define mbedtls_calloc    calloc
     38          #define mbedtls_free      free
     39          #endif
     40          
     41          #include "mbedtls/ssl_cookie.h"
     42          #include "mbedtls/ssl_internal.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp int mbedtls_ssl_safer_memcmp(void const *, void const *, size_t)
   \                     mbedtls_ssl_safer_memcmp: (+1)
   \        0x0   0xB478             PUSH     {R3-R6}
   \        0x2   0x2300             MOVS     R3,#+0
   \        0x4   0xF88D 0x3000      STRB     R3,[SP, #+0]
   \        0x8   0xE008             B.N      ??mbedtls_ssl_safer_memcmp_0
   \                     ??mbedtls_ssl_safer_memcmp_1: (+1)
   \        0xA   0x5CC4             LDRB     R4,[R0, R3]
   \        0xC   0x5CCD             LDRB     R5,[R1, R3]
   \        0xE   0xF89D 0x6000      LDRB     R6,[SP, #+0]
   \       0x12   0x406C             EORS     R4,R5,R4
   \       0x14   0x4334             ORRS     R4,R4,R6
   \       0x16   0xF88D 0x4000      STRB     R4,[SP, #+0]
   \       0x1A   0x1C5B             ADDS     R3,R3,#+1
   \                     ??mbedtls_ssl_safer_memcmp_0: (+1)
   \       0x1C   0x4293             CMP      R3,R2
   \       0x1E   0xD3F4             BCC.N    ??mbedtls_ssl_safer_memcmp_1
   \       0x20   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \       0x24   0xBC72             POP      {R1,R4-R6}
   \       0x26   0x4770             BX       LR               ;; return
     43          #include "mbedtls/platform_util.h"
     44          
     45          #include <string.h>
     46          
     47          /*
     48           * If DTLS is in use, then at least one of SHA-1, SHA-256, SHA-512 is
     49           * available. Try SHA-256 first, 512 wastes resources since we need to stay
     50           * with max 32 bytes of cookie for DTLS 1.0
     51           */
     52          #if defined(MBEDTLS_SHA256_C)
     53          #define COOKIE_MD           MBEDTLS_MD_SHA256
     54          #define COOKIE_MD_OUTLEN    32
     55          #define COOKIE_HMAC_LEN     28
     56          #elif defined(MBEDTLS_SHA512_C)
     57          #define COOKIE_MD           MBEDTLS_MD_SHA384
     58          #define COOKIE_MD_OUTLEN    48
     59          #define COOKIE_HMAC_LEN     28
     60          #elif defined(MBEDTLS_SHA1_C)
     61          #define COOKIE_MD           MBEDTLS_MD_SHA1
     62          #define COOKIE_MD_OUTLEN    20
     63          #define COOKIE_HMAC_LEN     20
     64          #else
     65          #error "DTLS hello verify needs SHA-1 or SHA-2"
     66          #endif
     67          
     68          /*
     69           * Cookies are formed of a 4-bytes timestamp (or serial number) and
     70           * an HMAC of timestemp and client ID.
     71           */
     72          #define COOKIE_LEN      ( 4 + COOKIE_HMAC_LEN )
     73          

   \                                 In section .text, align 2, keep-with-next
     74          void mbedtls_ssl_cookie_init( mbedtls_ssl_cookie_ctx *ctx )
     75          {
   \                     mbedtls_ssl_cookie_init: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x4604             MOV      R4,R0
     76              mbedtls_md_init( &ctx->hmac_ctx );
   \        0x4   0x....'....        BL       mbedtls_md_init
     77          #if !defined(MBEDTLS_HAVE_TIME)
     78              ctx->serial = 0;
   \        0x8   0x2000             MOVS     R0,#+0
   \        0xA   0x60E0             STR      R0,[R4, #+12]
     79          #endif
     80              ctx->timeout = MBEDTLS_SSL_COOKIE_TIMEOUT;
   \        0xC   0x203C             MOVS     R0,#+60
   \        0xE   0x6120             STR      R0,[R4, #+16]
     81          
     82          #if defined(MBEDTLS_THREADING_C)
     83              mbedtls_mutex_init( &ctx->mutex );
     84          #endif
     85          }
   \       0x10   0xBD10             POP      {R4,PC}          ;; return
     86          

   \                                 In section .text, align 2, keep-with-next
     87          void mbedtls_ssl_cookie_set_timeout( mbedtls_ssl_cookie_ctx *ctx, unsigned long delay )
     88          {
     89              ctx->timeout = delay;
   \                     mbedtls_ssl_cookie_set_timeout: (+1)
   \        0x0   0x6101             STR      R1,[R0, #+16]
     90          }
   \        0x2   0x4770             BX       LR               ;; return
     91          

   \                                 In section .text, align 2, keep-with-next
     92          void mbedtls_ssl_cookie_free( mbedtls_ssl_cookie_ctx *ctx )
     93          {
   \                     mbedtls_ssl_cookie_free: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x4604             MOV      R4,R0
     94              mbedtls_md_free( &ctx->hmac_ctx );
   \        0x4   0x....'....        BL       mbedtls_md_free
     95          
     96          #if defined(MBEDTLS_THREADING_C)
     97              mbedtls_mutex_free( &ctx->mutex );
     98          #endif
     99          
    100              mbedtls_platform_zeroize( ctx, sizeof( mbedtls_ssl_cookie_ctx ) );
   \        0x8   0x2114             MOVS     R1,#+20
   \        0xA   0x4620             MOV      R0,R4
   \        0xC   0xE8BD 0x4010      POP      {R4,LR}
   \       0x10   0x....'....        B.W      mbedtls_platform_zeroize
    101          }
    102          

   \                                 In section .text, align 2, keep-with-next
    103          int mbedtls_ssl_cookie_setup( mbedtls_ssl_cookie_ctx *ctx,
    104                                int (*f_rng)(void *, unsigned char *, size_t),
    105                                void *p_rng )
    106          {
   \                     mbedtls_ssl_cookie_setup: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0xB088             SUB      SP,SP,#+32
   \        0x4   0x4604             MOV      R4,R0
   \        0x6   0x460B             MOV      R3,R1
   \        0x8   0x4610             MOV      R0,R2
    107              int ret;
    108              unsigned char key[COOKIE_MD_OUTLEN];
    109          
    110              if( ( ret = f_rng( p_rng, key, sizeof( key ) ) ) != 0 )
   \        0xA   0x2220             MOVS     R2,#+32
   \        0xC   0x4669             MOV      R1,SP
   \        0xE   0x4798             BLX      R3
   \       0x10   0x2800             CMP      R0,#+0
   \       0x12   0xD115             BNE.N    ??mbedtls_ssl_cookie_setup_0
    111                  return( ret );
    112          
    113              ret = mbedtls_md_setup( &ctx->hmac_ctx, mbedtls_md_info_from_type( COOKIE_MD ), 1 );
   \       0x14   0x2006             MOVS     R0,#+6
   \       0x16   0x....'....        BL       mbedtls_md_info_from_type
   \       0x1A   0x2201             MOVS     R2,#+1
   \       0x1C   0x4601             MOV      R1,R0
   \       0x1E   0x4620             MOV      R0,R4
   \       0x20   0x....'....        BL       mbedtls_md_setup
    114              if( ret != 0 )
   \       0x24   0x2800             CMP      R0,#+0
   \       0x26   0xD10B             BNE.N    ??mbedtls_ssl_cookie_setup_0
    115                  return( ret );
    116          
    117              ret = mbedtls_md_hmac_starts( &ctx->hmac_ctx, key, sizeof( key ) );
   \       0x28   0x2220             MOVS     R2,#+32
   \       0x2A   0x4669             MOV      R1,SP
   \       0x2C   0x4620             MOV      R0,R4
   \       0x2E   0x....'....        BL       mbedtls_md_hmac_starts
    118              if( ret != 0 )
   \       0x32   0x2800             CMP      R0,#+0
   \       0x34   0xD104             BNE.N    ??mbedtls_ssl_cookie_setup_0
    119                  return( ret );
    120          
    121              mbedtls_platform_zeroize( key, sizeof( key ) );
   \       0x36   0x2120             MOVS     R1,#+32
   \       0x38   0x4668             MOV      R0,SP
   \       0x3A   0x....'....        BL       mbedtls_platform_zeroize
    122          
    123              return( 0 );
   \       0x3E   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_ssl_cookie_setup_0: (+1)
   \       0x40   0xB008             ADD      SP,SP,#+32
   \       0x42   0xBD10             POP      {R4,PC}          ;; return
    124          }
    125          
    126          /*
    127           * Generate the HMAC part of a cookie
    128           */

   \                                 In section .text, align 2, keep-with-next
    129          static int ssl_cookie_hmac( mbedtls_md_context_t *hmac_ctx,
    130                                      const unsigned char time[4],
    131                                      unsigned char **p, unsigned char *end,
    132                                      const unsigned char *cli_id, size_t cli_id_len )
    133          {
   \                     ssl_cookie_hmac: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0xB088             SUB      SP,SP,#+32
   \        0x4   0x4605             MOV      R5,R0
   \        0x6   0x460E             MOV      R6,R1
   \        0x8   0x4614             MOV      R4,R2
    134              unsigned char hmac_out[COOKIE_MD_OUTLEN];
    135          
    136              if( (size_t)( end - *p ) < COOKIE_HMAC_LEN )
   \        0xA   0x6820             LDR      R0,[R4, #+0]
   \        0xC   0x1A1B             SUBS     R3,R3,R0
   \        0xE   0x2B1C             CMP      R3,#+28
   \       0x10   0xD201             BCS.N    ??ssl_cookie_hmac_0
    137                  return( MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL );
   \       0x12   0x....             LDR.N    R0,??DataTable3  ;; 0xffff9600
   \       0x14   0xE023             B.N      ??ssl_cookie_hmac_1
    138          
    139              if( mbedtls_md_hmac_reset(  hmac_ctx ) != 0 ||
    140                  mbedtls_md_hmac_update( hmac_ctx, time, 4 ) != 0 ||
    141                  mbedtls_md_hmac_update( hmac_ctx, cli_id, cli_id_len ) != 0 ||
    142                  mbedtls_md_hmac_finish( hmac_ctx, hmac_out ) != 0 )
   \                     ??ssl_cookie_hmac_0: (+1)
   \       0x16   0x4628             MOV      R0,R5
   \       0x18   0x....'....        BL       mbedtls_md_hmac_reset
   \       0x1C   0x2800             CMP      R0,#+0
   \       0x1E   0xD113             BNE.N    ??ssl_cookie_hmac_2
   \       0x20   0x2204             MOVS     R2,#+4
   \       0x22   0x4631             MOV      R1,R6
   \       0x24   0x4628             MOV      R0,R5
   \       0x26   0x....'....        BL       mbedtls_md_hmac_update
   \       0x2A   0x2800             CMP      R0,#+0
   \       0x2C   0xD10C             BNE.N    ??ssl_cookie_hmac_2
   \       0x2E   0x9A0D             LDR      R2,[SP, #+52]
   \       0x30   0x990C             LDR      R1,[SP, #+48]
   \       0x32   0x4628             MOV      R0,R5
   \       0x34   0x....'....        BL       mbedtls_md_hmac_update
   \       0x38   0x2800             CMP      R0,#+0
   \       0x3A   0xD105             BNE.N    ??ssl_cookie_hmac_2
   \       0x3C   0x4669             MOV      R1,SP
   \       0x3E   0x4628             MOV      R0,R5
   \       0x40   0x....'....        BL       mbedtls_md_hmac_finish
   \       0x44   0x2800             CMP      R0,#+0
   \       0x46   0xD001             BEQ.N    ??ssl_cookie_hmac_3
    143              {
    144                  return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   \                     ??ssl_cookie_hmac_2: (+1)
   \       0x48   0x....             LDR.N    R0,??DataTable3_1  ;; 0xffff9400
   \       0x4A   0xE008             B.N      ??ssl_cookie_hmac_1
    145              }
    146          
    147              memcpy( *p, hmac_out, COOKIE_HMAC_LEN );
   \                     ??ssl_cookie_hmac_3: (+1)
   \       0x4C   0x221C             MOVS     R2,#+28
   \       0x4E   0x4669             MOV      R1,SP
   \       0x50   0x6820             LDR      R0,[R4, #+0]
   \       0x52   0x....'....        BL       __aeabi_memcpy
    148              *p += COOKIE_HMAC_LEN;
   \       0x56   0x6820             LDR      R0,[R4, #+0]
   \       0x58   0x301C             ADDS     R0,R0,#+28
   \       0x5A   0x6020             STR      R0,[R4, #+0]
    149          
    150              return( 0 );
   \       0x5C   0x2000             MOVS     R0,#+0
   \                     ??ssl_cookie_hmac_1: (+1)
   \       0x5E   0xB008             ADD      SP,SP,#+32
   \       0x60   0xBD70             POP      {R4-R6,PC}       ;; return
    151          }
    152          
    153          /*
    154           * Generate cookie for DTLS ClientHello verification
    155           */

   \                                 In section .text, align 2, keep-with-next
    156          int mbedtls_ssl_cookie_write( void *p_ctx,
    157                                unsigned char **p, unsigned char *end,
    158                                const unsigned char *cli_id, size_t cli_id_len )
    159          {
   \                     mbedtls_ssl_cookie_write: (+1)
   \        0x0   0xB5FE             PUSH     {R1-R7,LR}
    160              int ret;
    161              mbedtls_ssl_cookie_ctx *ctx = (mbedtls_ssl_cookie_ctx *) p_ctx;
    162              unsigned long t;
    163          
    164              if( ctx == NULL || cli_id == NULL )
   \        0x2   0x2800             CMP      R0,#+0
   \        0x4   0xD001             BEQ.N    ??mbedtls_ssl_cookie_write_0
   \        0x6   0x2B00             CMP      R3,#+0
   \        0x8   0xD101             BNE.N    ??mbedtls_ssl_cookie_write_1
    165                  return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   \                     ??mbedtls_ssl_cookie_write_0: (+1)
   \        0xA   0x....             LDR.N    R0,??DataTable3_2  ;; 0xffff8f00
   \        0xC   0xBDFE             POP      {R1-R7,PC}
    166          
    167              if( (size_t)( end - *p ) < COOKIE_LEN )
   \                     ??mbedtls_ssl_cookie_write_1: (+1)
   \        0xE   0x680C             LDR      R4,[R1, #+0]
   \       0x10   0x1B14             SUBS     R4,R2,R4
   \       0x12   0x2C20             CMP      R4,#+32
   \       0x14   0xD201             BCS.N    ??mbedtls_ssl_cookie_write_2
    168                  return( MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL );
   \       0x16   0x....             LDR.N    R0,??DataTable3  ;; 0xffff9600
   \       0x18   0xBDFE             POP      {R1-R7,PC}
   \                     ??mbedtls_ssl_cookie_write_2: (+1)
   \       0x1A   0x9C08             LDR      R4,[SP, #+32]
    169          
    170          #if defined(MBEDTLS_HAVE_TIME)
    171              t = (unsigned long) mbedtls_time( NULL );
    172          #else
    173              t = ctx->serial++;
   \       0x1C   0x68C5             LDR      R5,[R0, #+12]
   \       0x1E   0x1C6E             ADDS     R6,R5,#+1
   \       0x20   0x60C6             STR      R6,[R0, #+12]
    174          #endif
    175          
    176              (*p)[0] = (unsigned char)( t >> 24 );
   \       0x22   0x462E             MOV      R6,R5
   \       0x24   0x0E36             LSRS     R6,R6,#+24
   \       0x26   0x680F             LDR      R7,[R1, #+0]
   \       0x28   0x703E             STRB     R6,[R7, #+0]
    177              (*p)[1] = (unsigned char)( t >> 16 );
   \       0x2A   0x462E             MOV      R6,R5
   \       0x2C   0x0C36             LSRS     R6,R6,#+16
   \       0x2E   0x680F             LDR      R7,[R1, #+0]
   \       0x30   0x707E             STRB     R6,[R7, #+1]
    178              (*p)[2] = (unsigned char)( t >>  8 );
   \       0x32   0x462E             MOV      R6,R5
   \       0x34   0x0A36             LSRS     R6,R6,#+8
   \       0x36   0x680F             LDR      R7,[R1, #+0]
   \       0x38   0x70BE             STRB     R6,[R7, #+2]
    179              (*p)[3] = (unsigned char)( t       );
   \       0x3A   0x680E             LDR      R6,[R1, #+0]
   \       0x3C   0x70F5             STRB     R5,[R6, #+3]
    180              *p += 4;
   \       0x3E   0x680D             LDR      R5,[R1, #+0]
   \       0x40   0x1D2D             ADDS     R5,R5,#+4
   \       0x42   0x600D             STR      R5,[R1, #+0]
    181          
    182          #if defined(MBEDTLS_THREADING_C)
    183              if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
    184                  return( MBEDTLS_ERR_SSL_INTERNAL_ERROR + ret );
    185          #endif
    186          
    187              ret = ssl_cookie_hmac( &ctx->hmac_ctx, *p - 4,
    188                                     p, end, cli_id, cli_id_len );
    189          
    190          #if defined(MBEDTLS_THREADING_C)
    191              if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
    192                  return( MBEDTLS_ERR_SSL_INTERNAL_ERROR +
    193                          MBEDTLS_ERR_THREADING_MUTEX_ERROR );
    194          #endif
    195          
    196              return( ret );
   \       0x44   0x9401             STR      R4,[SP, #+4]
   \       0x46   0x9300             STR      R3,[SP, #+0]
   \       0x48   0x4613             MOV      R3,R2
   \       0x4A   0x460A             MOV      R2,R1
   \       0x4C   0x6809             LDR      R1,[R1, #+0]
   \       0x4E   0x1F09             SUBS     R1,R1,#+4
   \       0x50   0x....'....        BL       ssl_cookie_hmac
   \       0x54   0xBDFE             POP      {R1-R7,PC}       ;; return
    197          }
    198          
    199          /*
    200           * Check a cookie
    201           */

   \                                 In section .text, align 2, keep-with-next
    202          int mbedtls_ssl_cookie_check( void *p_ctx,
    203                                const unsigned char *cookie, size_t cookie_len,
    204                                const unsigned char *cli_id, size_t cli_id_len )
    205          {
   \                     mbedtls_ssl_cookie_check: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0xB08A             SUB      SP,SP,#+40
   \        0x4   0x4604             MOV      R4,R0
   \        0x6   0x460E             MOV      R6,R1
    206              unsigned char ref_hmac[COOKIE_HMAC_LEN];
    207              int ret = 0;
   \        0x8   0x2500             MOVS     R5,#+0
    208              unsigned char *p = ref_hmac;
   \        0xA   0xA803             ADD      R0,SP,#+12
   \        0xC   0x9002             STR      R0,[SP, #+8]
    209              mbedtls_ssl_cookie_ctx *ctx = (mbedtls_ssl_cookie_ctx *) p_ctx;
    210              unsigned long cur_time, cookie_time;
    211          
    212              if( ctx == NULL || cli_id == NULL )
   \        0xE   0x2C00             CMP      R4,#+0
   \       0x10   0xD001             BEQ.N    ??mbedtls_ssl_cookie_check_0
   \       0x12   0x2B00             CMP      R3,#+0
   \       0x14   0xD101             BNE.N    ??mbedtls_ssl_cookie_check_1
    213                  return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   \                     ??mbedtls_ssl_cookie_check_0: (+1)
   \       0x16   0x....             LDR.N    R0,??DataTable3_2  ;; 0xffff8f00
   \       0x18   0xE030             B.N      ??mbedtls_ssl_cookie_check_2
    214          
    215              if( cookie_len != COOKIE_LEN )
   \                     ??mbedtls_ssl_cookie_check_1: (+1)
   \       0x1A   0x2A20             CMP      R2,#+32
   \       0x1C   0xD12A             BNE.N    ??mbedtls_ssl_cookie_check_3
   \       0x1E   0x980E             LDR      R0,[SP, #+56]
    216                  return( -1 );
    217          
    218          #if defined(MBEDTLS_THREADING_C)
    219              if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
    220                  return( MBEDTLS_ERR_SSL_INTERNAL_ERROR + ret );
    221          #endif
    222          
    223              if( ssl_cookie_hmac( &ctx->hmac_ctx, cookie,
    224                                   &p, p + sizeof( ref_hmac ),
    225                                   cli_id, cli_id_len ) != 0 )
   \       0x20   0x9001             STR      R0,[SP, #+4]
   \       0x22   0x9300             STR      R3,[SP, #+0]
   \       0x24   0x9802             LDR      R0,[SP, #+8]
   \       0x26   0xF100 0x031C      ADD      R3,R0,#+28
   \       0x2A   0xAA02             ADD      R2,SP,#+8
   \       0x2C   0x4620             MOV      R0,R4
   \       0x2E   0x....'....        BL       ssl_cookie_hmac
   \       0x32   0x2800             CMP      R0,#+0
   \       0x34   0xD001             BEQ.N    ??mbedtls_ssl_cookie_check_4
    226                  ret = -1;
   \       0x36   0xF04F 0x35FF      MOV      R5,#-1
    227          
    228          #if defined(MBEDTLS_THREADING_C)
    229              if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
    230                  return( MBEDTLS_ERR_SSL_INTERNAL_ERROR +
    231                          MBEDTLS_ERR_THREADING_MUTEX_ERROR );
    232          #endif
    233          
    234              if( ret != 0 )
   \                     ??mbedtls_ssl_cookie_check_4: (+1)
   \       0x3A   0x2D00             CMP      R5,#+0
   \       0x3C   0xD001             BEQ.N    ??mbedtls_ssl_cookie_check_5
    235                  return( ret );
   \       0x3E   0x4628             MOV      R0,R5
   \       0x40   0xE01C             B.N      ??mbedtls_ssl_cookie_check_2
    236          
    237              if( mbedtls_ssl_safer_memcmp( cookie + 4, ref_hmac, sizeof( ref_hmac ) ) != 0 )
   \                     ??mbedtls_ssl_cookie_check_5: (+1)
   \       0x42   0x221C             MOVS     R2,#+28
   \       0x44   0xA903             ADD      R1,SP,#+12
   \       0x46   0x1D30             ADDS     R0,R6,#+4
   \       0x48   0x....'....        BL       mbedtls_ssl_safer_memcmp
   \       0x4C   0x2800             CMP      R0,#+0
   \       0x4E   0xD111             BNE.N    ??mbedtls_ssl_cookie_check_3
    238                  return( -1 );
    239          
    240          #if defined(MBEDTLS_HAVE_TIME)
    241              cur_time = (unsigned long) mbedtls_time( NULL );
    242          #else
    243              cur_time = ctx->serial;
    244          #endif
    245          
    246              cookie_time = ( (unsigned long) cookie[0] << 24 ) |
    247                            ( (unsigned long) cookie[1] << 16 ) |
    248                            ( (unsigned long) cookie[2] <<  8 ) |
    249                            ( (unsigned long) cookie[3]       );
    250          
    251              if( ctx->timeout != 0 && cur_time - cookie_time > ctx->timeout )
   \       0x50   0x6920             LDR      R0,[R4, #+16]
   \       0x52   0x2800             CMP      R0,#+0
   \       0x54   0xD011             BEQ.N    ??mbedtls_ssl_cookie_check_6
   \       0x56   0x4601             MOV      R1,R0
   \       0x58   0x68E2             LDR      R2,[R4, #+12]
   \       0x5A   0x7830             LDRB     R0,[R6, #+0]
   \       0x5C   0x7873             LDRB     R3,[R6, #+1]
   \       0x5E   0x041B             LSLS     R3,R3,#+16
   \       0x60   0xEA43 0x6300      ORR      R3,R3,R0, LSL #+24
   \       0x64   0x78B0             LDRB     R0,[R6, #+2]
   \       0x66   0xEA43 0x2300      ORR      R3,R3,R0, LSL #+8
   \       0x6A   0x78F0             LDRB     R0,[R6, #+3]
   \       0x6C   0x4303             ORRS     R3,R0,R3
   \       0x6E   0x1AD2             SUBS     R2,R2,R3
   \       0x70   0x4291             CMP      R1,R2
   \       0x72   0xD202             BCS.N    ??mbedtls_ssl_cookie_check_6
    252                  return( -1 );
   \                     ??mbedtls_ssl_cookie_check_3: (+1)
   \       0x74   0xF04F 0x30FF      MOV      R0,#-1
   \       0x78   0xE000             B.N      ??mbedtls_ssl_cookie_check_2
    253          
    254              return( 0 );
   \                     ??mbedtls_ssl_cookie_check_6: (+1)
   \       0x7A   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_ssl_cookie_check_2: (+1)
   \       0x7C   0xB00A             ADD      SP,SP,#+40
   \       0x7E   0xBD70             POP      {R4-R6,PC}       ;; return
    255          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \        0x0   0xFFFF'9600        DC32     0xffff9600

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \        0x0   0xFFFF'9400        DC32     0xffff9400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \        0x0   0xFFFF'8F00        DC32     0xffff8f00
    256          #endif /* MBEDTLS_SSL_COOKIE_C */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      56   mbedtls_ssl_cookie_check
        56   -> mbedtls_ssl_safer_memcmp
        56   -> ssl_cookie_hmac
       8   mbedtls_ssl_cookie_free
         8   -> mbedtls_md_free
         0   -> mbedtls_platform_zeroize
       8   mbedtls_ssl_cookie_init
         8   -> mbedtls_md_init
       0   mbedtls_ssl_cookie_set_timeout
      40   mbedtls_ssl_cookie_setup
        40   -- Indirect call
        40   -> mbedtls_md_hmac_starts
        40   -> mbedtls_md_info_from_type
        40   -> mbedtls_md_setup
        40   -> mbedtls_platform_zeroize
      32   mbedtls_ssl_cookie_write
        32   -> ssl_cookie_hmac
      16   mbedtls_ssl_safer_memcmp
      48   ssl_cookie_hmac
        48   -> __aeabi_memcpy
        48   -> mbedtls_md_hmac_finish
        48   -> mbedtls_md_hmac_reset
        48   -> mbedtls_md_hmac_update


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
     128  mbedtls_ssl_cookie_check
      20  mbedtls_ssl_cookie_free
      18  mbedtls_ssl_cookie_init
       4  mbedtls_ssl_cookie_set_timeout
      68  mbedtls_ssl_cookie_setup
      86  mbedtls_ssl_cookie_write
      40  mbedtls_ssl_safer_memcmp
      98  ssl_cookie_hmac

 
 474 bytes in section .text
 
 474 bytes of CODE memory

Errors: none
Warnings: none
