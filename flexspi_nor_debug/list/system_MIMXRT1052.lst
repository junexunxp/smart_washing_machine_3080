###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.3.193/W32 for ARM         10/Jun/2019  13:48:53
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\Development\smart_washing_machine_3080\device\system_MIMXRT1052.c
#    Command line =  
#        -f C:\Users\nxf42695\AppData\Local\Temp\1\EW5E6F.tmp
#        (C:\Development\smart_washing_machine_3080\device\system_MIMXRT1052.c
#        -D DEBUG -D USE_RTOS -D XIP_EXTERNAL_FLASH=1 -D
#        XIP_BOOT_HEADER_ENABLE=1 -D CPU_MIMXRT1052DVL6B -D FSL_RTOS_FREE_RTOS
#        -D PRINTF_ADVANCED_ENABLE -D
#        "MBEDTLS_CONFIG_FILE=\"ksdk_mbedtls_config.h\"" -lC
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list -lA
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list
#        --diag_suppress Pa082,Pa050 -o
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_d16 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" --preinclude
#        C:\Development\smart_washing_machine_3080/source\app_preinclude.h -I
#        C:\Development\smart_washing_machine_3080/board\ -I
#        C:\Development\smart_washing_machine_3080/source\ -I
#        C:\Development\smart_washing_machine_3080/CMSIS\ -I
#        C:\Development\smart_washing_machine_3080/amazon-freertos/freertos/portable\
#        -I C:\Development\smart_washing_machine_3080/amazon-freertos/include\
#        -I C:\Development\smart_washing_machine_3080/component/lists\ -I
#        C:\Development\smart_washing_machine_3080/component/serial_manager\ -I
#        C:\Development\smart_washing_machine_3080/component/uart\ -I
#        C:\Development\smart_washing_machine_3080/component/kv\ -I
#        C:\Development\smart_washing_machine_3080/component/kv/include\ -I
#        C:\Development\smart_washing_machine_3080/device\ -I
#        C:\Development\smart_washing_machine_3080/doc\ -I
#        C:\Development\smart_washing_machine_3080/drivers\ -I
#        C:\Development\smart_washing_machine_3080/src\ -I
#        C:\Development\smart_washing_machine_3080/startup\ -I
#        C:\Development\smart_washing_machine_3080/utilities\ -I
#        C:\Development\smart_washing_machine_3080/xip\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\atm\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_model\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_sign\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\infra\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\mqtt\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\external_libs\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\coap_cloud\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\CoAPPacket\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\server\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\os\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\awss_reset\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\mbedtls\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\ -I
#        C:\Development\smart_washing_machine_3080\mbedtls\port\ksdk\ -Om)
#    Locale       =  C
#    List file    =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list\system_MIMXRT1052.lst
#    Object file  =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj\system_MIMXRT1052.o
#
###############################################################################

C:\Development\smart_washing_machine_3080\device\system_MIMXRT1052.c
      1          /*
      2          ** ###################################################################
      3          **     Processors:          MIMXRT1052CVJ5B
      4          **                          MIMXRT1052CVL5B
      5          **                          MIMXRT1052DVJ6B
      6          **                          MIMXRT1052DVL6B
      7          **
      8          **     Compilers:           Freescale C/C++ for Embedded ARM
      9          **                          GNU C Compiler
     10          **                          IAR ANSI C/C++ Compiler for ARM
     11          **                          Keil ARM C/C++ Compiler
     12          **                          MCUXpresso Compiler
     13          **
     14          **     Reference manual:    IMXRT1050RM Rev.2.1, 12/2018
     15          **     Version:             rev. 1.2, 2018-11-27
     16          **     Build:               b190329
     17          **
     18          **     Abstract:
     19          **         Provides a system configuration function and a global variable that
     20          **         contains the system frequency. It configures the device and initializes
     21          **         the oscillator (PLL) that is part of the microcontroller device.
     22          **
     23          **     Copyright 2016 Freescale Semiconductor, Inc.
     24          **     Copyright 2016-2019 NXP
     25          **     All rights reserved.
     26          **
     27          **     SPDX-License-Identifier: BSD-3-Clause
     28          **
     29          **     http:                 www.nxp.com
     30          **     mail:                 support@nxp.com
     31          **
     32          **     Revisions:
     33          **     - rev. 0.1 (2017-01-10)
     34          **         Initial version.
     35          **     - rev. 1.0 (2018-09-21)
     36          **         Update interrupt vector table and dma request source.
     37          **         Update register BEE_ADDR_OFFSET1's bitfield name to ADDR_OFFSET1.
     38          **         Split GPIO_COMBINED_IRQS to GPIO_COMBINED_LOW_IRQS and GPIO_COMBINED_HIGH_IRQS.
     39          **     - rev. 1.1 (2018-11-16)
     40          **         Update header files to align with IMXRT1050RM Rev.1.
     41          **     - rev. 1.2 (2018-11-27)
     42          **         Update header files to align with IMXRT1050RM Rev.2.1.
     43          **
     44          ** ###################################################################
     45          */
     46          
     47          /*!
     48           * @file MIMXRT1052
     49           * @version 1.2
     50           * @date 2018-11-27
     51           * @brief Device specific configuration file for MIMXRT1052 (implementation file)
     52           *
     53           * Provides a system configuration function and a global variable that contains
     54           * the system frequency. It configures the device and initializes the oscillator
     55           * (PLL) that is part of the microcontroller device.
     56           */
     57          
     58          #include <stdint.h>
     59          #include "fsl_device_registers.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void SCB_EnableICache(void)
   \                     SCB_EnableICache: (+1)
   \        0x0   0xF3BF 0x8F4F      DSB      SY
   \        0x4   0xF3BF 0x8F6F      ISB      SY
   \        0x8   0x2000             MOVS     R0,#+0
   \        0xA   0x....             LDR.N    R1,??DataTable3  ;; 0xe000ef50
   \        0xC   0x6008             STR      R0,[R1, #+0]
   \        0xE   0xF3BF 0x8F4F      DSB      SY
   \       0x12   0xF3BF 0x8F6F      ISB      SY
   \       0x16   0x....             LDR.N    R0,??DataTable3_1  ;; 0xe000ed14
   \       0x18   0x6801             LDR      R1,[R0, #+0]
   \       0x1A   0xF441 0x3100      ORR      R1,R1,#0x20000
   \       0x1E   0x6001             STR      R1,[R0, #+0]
   \       0x20   0xF3BF 0x8F4F      DSB      SY
   \       0x24   0xF3BF 0x8F6F      ISB      SY
   \       0x28   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void SCB_EnableDCache(void)
   \                     SCB_EnableDCache: (+1)
   \        0x0   0xB410             PUSH     {R4}
   \        0x2   0x2000             MOVS     R0,#+0
   \        0x4   0x....             LDR.N    R1,??DataTable3_2  ;; 0xe000ed84
   \        0x6   0x6008             STR      R0,[R1, #+0]
   \        0x8   0xF3BF 0x8F4F      DSB      SY
   \        0xC   0x....             LDR.N    R0,??DataTable3_3  ;; 0xe000ed80
   \        0xE   0x6801             LDR      R1,[R0, #+0]
   \       0x10   0xF3C1 0x324E      UBFX     R2,R1,#+13,#+15
   \       0x14   0x....             LDR.N    R4,??DataTable3_4  ;; 0xe000ef60
   \                     ??SCB_EnableDCache_0: (+1)
   \       0x16   0xF3C1 0x03C9      UBFX     R3,R1,#+3,#+10
   \                     ??SCB_EnableDCache_1: (+1)
   \       0x1A   0xF643 0x70E0      MOVW     R0,#+16352
   \       0x1E   0xEA00 0x1042      AND      R0,R0,R2, LSL #+5
   \       0x22   0xEA40 0x7083      ORR      R0,R0,R3, LSL #+30
   \       0x26   0x6020             STR      R0,[R4, #+0]
   \       0x28   0x4618             MOV      R0,R3
   \       0x2A   0x1E43             SUBS     R3,R0,#+1
   \       0x2C   0x2800             CMP      R0,#+0
   \       0x2E   0xD1F4             BNE.N    ??SCB_EnableDCache_1
   \       0x30   0x4610             MOV      R0,R2
   \       0x32   0x1E42             SUBS     R2,R0,#+1
   \       0x34   0x2800             CMP      R0,#+0
   \       0x36   0xD1EE             BNE.N    ??SCB_EnableDCache_0
   \       0x38   0xF3BF 0x8F4F      DSB      SY
   \       0x3C   0x....             LDR.N    R0,??DataTable3_1  ;; 0xe000ed14
   \       0x3E   0x6801             LDR      R1,[R0, #+0]
   \       0x40   0xF441 0x3180      ORR      R1,R1,#0x10000
   \       0x44   0x6001             STR      R1,[R0, #+0]
   \       0x46   0xF3BF 0x8F4F      DSB      SY
   \       0x4A   0xF3BF 0x8F6F      ISB      SY
   \       0x4E   0xBC10             POP      {R4}
   \       0x50   0x4770             BX       LR               ;; return
     60          
     61          
     62          
     63          /* ----------------------------------------------------------------------------
     64             -- Core clock
     65             ---------------------------------------------------------------------------- */
     66          

   \                                 In section .data, align 4
     67          uint32_t SystemCoreClock = DEFAULT_SYSTEM_CLOCK;
   \                     SystemCoreClock:
   \        0x0   0x1F78'A400        DC32 528000000
     68          
     69          /* ----------------------------------------------------------------------------
     70             -- SystemInit()
     71             ---------------------------------------------------------------------------- */
     72          

   \                                 In section .text, align 2, keep-with-next
     73          void SystemInit (void) {
   \                     SystemInit: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
     74          #if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
     75            SCB->CPACR |= ((3UL << 10*2) | (3UL << 11*2));    /* set CP10, CP11 Full Access */
   \        0x2   0x....             LDR.N    R0,??DataTable3_5  ;; 0xe000ed88
   \        0x4   0x6801             LDR      R1,[R0, #+0]
   \        0x6   0xF441 0x0170      ORR      R1,R1,#0xF00000
   \        0xA   0x6001             STR      R1,[R0, #+0]
     76          #endif /* ((__FPU_PRESENT == 1) && (__FPU_USED == 1)) */
     77          
     78          #if defined(__MCUXPRESSO)
     79              extern uint32_t g_pfnVectors[];  // Vector table defined in startup code
     80              SCB->VTOR = (uint32_t)g_pfnVectors;
     81          #endif
     82          
     83          /* Disable Watchdog Power Down Counter */
     84          WDOG1->WMCR &= ~WDOG_WMCR_PDE_MASK;
   \        0xC   0x....             LDR.N    R1,??DataTable3_6  ;; 0x400b8008
   \        0xE   0x880A             LDRH     R2,[R1, #+0]
   \       0x10   0xF64F 0x70FE      MOVW     R0,#+65534
   \       0x14   0x4002             ANDS     R2,R0,R2
   \       0x16   0x800A             STRH     R2,[R1, #+0]
     85          WDOG2->WMCR &= ~WDOG_WMCR_PDE_MASK;
   \       0x18   0x....             LDR.N    R1,??DataTable3_7  ;; 0x400d0008
   \       0x1A   0x880A             LDRH     R2,[R1, #+0]
   \       0x1C   0x4002             ANDS     R2,R0,R2
   \       0x1E   0x800A             STRH     R2,[R1, #+0]
     86          
     87          /* Watchdog disable */
     88          
     89          #if (DISABLE_WDOG)
     90              if (WDOG1->WCR & WDOG_WCR_WDE_MASK)
   \       0x20   0x....             LDR.N    R1,??DataTable3_8  ;; 0x400b8000
   \       0x22   0x8808             LDRH     R0,[R1, #+0]
   \       0x24   0x0740             LSLS     R0,R0,#+29
   \       0x26   0xD504             BPL.N    ??SystemInit_0
     91              {
     92                  WDOG1->WCR &= ~WDOG_WCR_WDE_MASK;
   \       0x28   0x880A             LDRH     R2,[R1, #+0]
   \       0x2A   0xF64F 0x70FB      MOVW     R0,#+65531
   \       0x2E   0x4002             ANDS     R2,R0,R2
   \       0x30   0x800A             STRH     R2,[R1, #+0]
     93              }
     94              if (WDOG2->WCR & WDOG_WCR_WDE_MASK)
   \                     ??SystemInit_0: (+1)
   \       0x32   0x....             LDR.N    R1,??DataTable3_9  ;; 0x400d0000
   \       0x34   0x8808             LDRH     R0,[R1, #+0]
   \       0x36   0x0740             LSLS     R0,R0,#+29
   \       0x38   0xD504             BPL.N    ??SystemInit_1
     95              {
     96                  WDOG2->WCR &= ~WDOG_WCR_WDE_MASK;
   \       0x3A   0x880A             LDRH     R2,[R1, #+0]
   \       0x3C   0xF64F 0x70FB      MOVW     R0,#+65531
   \       0x40   0x4002             ANDS     R2,R0,R2
   \       0x42   0x800A             STRH     R2,[R1, #+0]
     97              }
     98              RTWDOG->CNT = 0xD928C520U; /* 0xD928C520U is the update key */
   \                     ??SystemInit_1: (+1)
   \       0x44   0x....             LDR.N    R0,??DataTable3_10  ;; 0xd928c520
   \       0x46   0x....             LDR.N    R1,??DataTable3_11  ;; 0x400bc004
   \       0x48   0x6008             STR      R0,[R1, #+0]
     99              RTWDOG->TOVAL = 0xFFFF;
   \       0x4A   0xF64F 0x70FF      MOVW     R0,#+65535
   \       0x4E   0x....             LDR.N    R1,??DataTable3_12  ;; 0x400bc008
   \       0x50   0x6008             STR      R0,[R1, #+0]
    100              RTWDOG->CS = (uint32_t) ((RTWDOG->CS) & ~RTWDOG_CS_EN_MASK) | RTWDOG_CS_UPDATE_MASK;
   \       0x52   0x....             LDR.N    R0,??DataTable3_13  ;; 0x400bc000
   \       0x54   0x6801             LDR      R1,[R0, #+0]
   \       0x56   0xF021 0x0180      BIC      R1,R1,#0x80
   \       0x5A   0xF041 0x0120      ORR      R1,R1,#0x20
   \       0x5E   0x6001             STR      R1,[R0, #+0]
    101          #endif /* (DISABLE_WDOG) */
    102          
    103              /* Disable Systick which might be enabled by bootrom */
    104              if (SysTick->CTRL & SysTick_CTRL_ENABLE_Msk)
   \       0x60   0x....             LDR.N    R0,??DataTable3_14  ;; 0xe000e010
   \       0x62   0x6801             LDR      R1,[R0, #+0]
   \       0x64   0x07C9             LSLS     R1,R1,#+31
   \       0x66   0xD503             BPL.N    ??SystemInit_2
    105              {
    106                  SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
   \       0x68   0x6801             LDR      R1,[R0, #+0]
   \       0x6A   0x0849             LSRS     R1,R1,#+1
   \       0x6C   0x0049             LSLS     R1,R1,#+1
   \       0x6E   0x6001             STR      R1,[R0, #+0]
    107              }
    108          
    109          /* Enable instruction and data caches */
    110          #if defined(__ICACHE_PRESENT) && __ICACHE_PRESENT
    111              if (SCB_CCR_IC_Msk != (SCB_CCR_IC_Msk & SCB->CCR)) {
   \                     ??SystemInit_2: (+1)
   \       0x70   0x....             LDR.N    R4,??DataTable3_1  ;; 0xe000ed14
   \       0x72   0x6820             LDR      R0,[R4, #+0]
   \       0x74   0x0380             LSLS     R0,R0,#+14
   \       0x76   0xD401             BMI.N    ??SystemInit_3
    112                  SCB_EnableICache();
   \       0x78   0x....'....        BL       SCB_EnableICache
    113              }
    114          #endif
    115          #if defined(__DCACHE_PRESENT) && __DCACHE_PRESENT
    116              if (SCB_CCR_DC_Msk != (SCB_CCR_DC_Msk & SCB->CCR)) {
   \                     ??SystemInit_3: (+1)
   \       0x7C   0x6820             LDR      R0,[R4, #+0]
   \       0x7E   0x03C0             LSLS     R0,R0,#+15
   \       0x80   0xD401             BMI.N    ??SystemInit_4
    117                  SCB_EnableDCache();
   \       0x82   0x....'....        BL       SCB_EnableDCache
    118              }
    119          #endif
    120          
    121            SystemInitHook();
   \                     ??SystemInit_4: (+1)
   \       0x86   0xE8BD 0x4010      POP      {R4,LR}
   \       0x8A   0x....'....        B.W      SystemInitHook
    122          }
    123          
    124          /* ----------------------------------------------------------------------------
    125             -- SystemCoreClockUpdate()
    126             ---------------------------------------------------------------------------- */
    127          

   \                                 In section .text, align 2, keep-with-next
    128          void SystemCoreClockUpdate (void) {
   \                     SystemCoreClockUpdate: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
    129          
    130              uint32_t freq;
    131              uint32_t PLL1MainClock;
    132              uint32_t PLL2MainClock;
    133          
    134              /* Periph_clk2_clk ---> Periph_clk */
    135              if (CCM->CBCDR & CCM_CBCDR_PERIPH_CLK_SEL_MASK)
   \        0x2   0x....             LDR.N    R4,??DataTable3_15  ;; 0x400fc014
   \        0x4   0x6820             LDR      R0,[R4, #+0]
   \        0x6   0x0180             LSLS     R0,R0,#+6
   \        0x8   0xD534             BPL.N    ??SystemCoreClockUpdate_0
    136              {
    137                  switch (CCM->CBCMR & CCM_CBCMR_PERIPH_CLK2_SEL_MASK)
   \        0xA   0x....             LDR.N    R0,??DataTable3_16  ;; 0x400fc018
   \        0xC   0x6800             LDR      R0,[R0, #+0]
   \        0xE   0xF410 0x5040      ANDS     R0,R0,#0x3000
   \       0x12   0xD006             BEQ.N    ??SystemCoreClockUpdate_1
   \       0x14   0xF5B0 0x5F80      CMP      R0,#+4096
   \       0x18   0xD018             BEQ.N    ??SystemCoreClockUpdate_2
   \       0x1A   0xF5B0 0x5F00      CMP      R0,#+8192
   \       0x1E   0xD017             BEQ.N    ??SystemCoreClockUpdate_3
   \       0x20   0xE020             B.N      ??SystemCoreClockUpdate_4
    138                  {
    139                      /* Pll3_sw_clk ---> Periph_clk2_clk ---> Periph_clk */
    140                      case CCM_CBCMR_PERIPH_CLK2_SEL(0U):
    141                          if(CCM_ANALOG->PLL_USB1 & CCM_ANALOG_PLL_USB1_BYPASS_MASK)
   \                     ??SystemCoreClockUpdate_1: (+1)
   \       0x22   0x....             LDR.N    R0,??DataTable3_17  ;; 0x400d8010
   \       0x24   0x6801             LDR      R1,[R0, #+0]
   \       0x26   0x03C9             LSLS     R1,R1,#+15
   \       0x28   0x6800             LDR      R0,[R0, #+0]
   \       0x2A   0xD507             BPL.N    ??SystemCoreClockUpdate_5
    142                          {
    143                              freq = (((CCM_ANALOG->PLL_USB1 & CCM_ANALOG_PLL_USB1_BYPASS_CLK_SRC_MASK) >> CCM_ANALOG_PLL_USB1_BYPASS_CLK_SRC_SHIFT) == 0U) ?
    144                                     CPU_XTAL_CLK_HZ : CPU_CLK1_HZ;
   \       0x2C   0xF3C0 0x3081      UBFX     R0,R0,#+14,#+2
   \       0x30   0x2800             CMP      R0,#+0
   \       0x32   0xD101             BNE.N    ??SystemCoreClockUpdate_6
   \       0x34   0x....             LDR.N    R1,??DataTable3_18  ;; 0x16e3600
   \       0x36   0xE016             B.N      ??SystemCoreClockUpdate_7
   \                     ??SystemCoreClockUpdate_6: (+1)
   \       0x38   0x2100             MOVS     R1,#+0
   \       0x3A   0xE014             B.N      ??SystemCoreClockUpdate_7
    145                          }
    146                          else
    147                          {
    148                              freq = (CPU_XTAL_CLK_HZ * ((CCM_ANALOG->PLL_USB1 & CCM_ANALOG_PLL_USB1_DIV_SELECT_MASK) ? 22U : 20U));
   \                     ??SystemCoreClockUpdate_5: (+1)
   \       0x3C   0x0780             LSLS     R0,R0,#+30
   \       0x3E   0xD501             BPL.N    ??SystemCoreClockUpdate_8
   \       0x40   0x2116             MOVS     R1,#+22
   \       0x42   0xE000             B.N      ??SystemCoreClockUpdate_9
   \                     ??SystemCoreClockUpdate_8: (+1)
   \       0x44   0x2114             MOVS     R1,#+20
   \                     ??SystemCoreClockUpdate_9: (+1)
   \       0x46   0x....             LDR.N    R0,??DataTable3_18  ;; 0x16e3600
   \       0x48   0x4341             MULS     R1,R0,R1
   \       0x4A   0xE00C             B.N      ??SystemCoreClockUpdate_7
    149                          }
    150                          break;
    151          
    152                      /* Osc_clk ---> Periph_clk2_clk ---> Periph_clk */
    153                      case CCM_CBCMR_PERIPH_CLK2_SEL(1U):
    154                          freq = CPU_XTAL_CLK_HZ;
   \                     ??SystemCoreClockUpdate_2: (+1)
   \       0x4C   0x....             LDR.N    R1,??DataTable3_18  ;; 0x16e3600
    155                          break;
   \       0x4E   0xE00A             B.N      ??SystemCoreClockUpdate_7
    156          
    157                      case CCM_CBCMR_PERIPH_CLK2_SEL(2U):
    158                          freq = (((CCM_ANALOG->PLL_SYS & CCM_ANALOG_PLL_SYS_BYPASS_CLK_SRC_MASK) >> CCM_ANALOG_PLL_SYS_BYPASS_CLK_SRC_SHIFT) == 0U) ?
    159                             CPU_XTAL_CLK_HZ : CPU_CLK1_HZ;
   \                     ??SystemCoreClockUpdate_3: (+1)
   \       0x50   0x....             LDR.N    R0,??DataTable3_19  ;; 0x400d8030
   \       0x52   0x6800             LDR      R0,[R0, #+0]
   \       0x54   0xF3C0 0x3081      UBFX     R0,R0,#+14,#+2
   \       0x58   0x2800             CMP      R0,#+0
   \       0x5A   0xD101             BNE.N    ??SystemCoreClockUpdate_10
   \       0x5C   0x....             LDR.N    R1,??DataTable3_18  ;; 0x16e3600
   \       0x5E   0xE002             B.N      ??SystemCoreClockUpdate_7
   \                     ??SystemCoreClockUpdate_10: (+1)
   \       0x60   0x2100             MOVS     R1,#+0
   \       0x62   0xE000             B.N      ??SystemCoreClockUpdate_7
    160                          break;
    161          
    162                      case CCM_CBCMR_PERIPH_CLK2_SEL(3U):
    163                      default:
    164                          freq = 0U;
   \                     ??SystemCoreClockUpdate_4: (+1)
   \       0x64   0x2100             MOVS     R1,#+0
    165                          break;
    166                  }
    167          
    168                  freq /= (((CCM->CBCDR & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) >> CCM_CBCDR_PERIPH_CLK2_PODF_SHIFT) + 1U);
   \                     ??SystemCoreClockUpdate_7: (+1)
   \       0x66   0x6820             LDR      R0,[R4, #+0]
   \       0x68   0xF3C0 0x60C2      UBFX     R0,R0,#+27,#+3
   \       0x6C   0x1C40             ADDS     R0,R0,#+1
   \       0x6E   0xFBB1 0xF6F0      UDIV     R6,R1,R0
   \       0x72   0xE05D             B.N      ??SystemCoreClockUpdate_11
    169              }
    170              /* Pre_Periph_clk ---> Periph_clk */
    171              else
    172              {
    173                  /* check if pll is bypassed */
    174                  if(CCM_ANALOG->PLL_ARM & CCM_ANALOG_PLL_ARM_BYPASS_MASK)
   \                     ??SystemCoreClockUpdate_0: (+1)
   \       0x74   0x....             LDR.N    R0,??DataTable3_20  ;; 0x400d8000
   \       0x76   0x6801             LDR      R1,[R0, #+0]
   \       0x78   0x03C9             LSLS     R1,R1,#+15
   \       0x7A   0xD508             BPL.N    ??SystemCoreClockUpdate_12
    175                  {
    176                      PLL1MainClock = (((CCM_ANALOG->PLL_ARM & CCM_ANALOG_PLL_ARM_BYPASS_CLK_SRC_MASK) >> CCM_ANALOG_PLL_ARM_BYPASS_CLK_SRC_SHIFT) == 0U) ?
    177                             CPU_XTAL_CLK_HZ : CPU_CLK1_HZ;
   \       0x7C   0x6800             LDR      R0,[R0, #+0]
   \       0x7E   0xF3C0 0x3081      UBFX     R0,R0,#+14,#+2
   \       0x82   0x2800             CMP      R0,#+0
   \       0x84   0xD101             BNE.N    ??SystemCoreClockUpdate_13
   \       0x86   0x....             LDR.N    R5,??DataTable3_18  ;; 0x16e3600
   \       0x88   0xE007             B.N      ??SystemCoreClockUpdate_14
   \                     ??SystemCoreClockUpdate_13: (+1)
   \       0x8A   0x2500             MOVS     R5,#+0
   \       0x8C   0xE005             B.N      ??SystemCoreClockUpdate_14
    178                  }
    179                  else
    180                  {
    181                      PLL1MainClock = ((CPU_XTAL_CLK_HZ * ((CCM_ANALOG->PLL_ARM & CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK) >>
    182                                                       CCM_ANALOG_PLL_ARM_DIV_SELECT_SHIFT)) >> 1U);
   \                     ??SystemCoreClockUpdate_12: (+1)
   \       0x8E   0x6805             LDR      R5,[R0, #+0]
   \       0x90   0xF005 0x057F      AND      R5,R5,#0x7F
   \       0x94   0x....             LDR.N    R0,??DataTable3_18  ;; 0x16e3600
   \       0x96   0x4345             MULS     R5,R0,R5
   \       0x98   0x086D             LSRS     R5,R5,#+1
    183                  }
    184          
    185                  /* check if pll is bypassed */
    186                  if(CCM_ANALOG->PLL_SYS & CCM_ANALOG_PLL_SYS_BYPASS_MASK)
   \                     ??SystemCoreClockUpdate_14: (+1)
   \       0x9A   0x....             LDR.N    R0,??DataTable3_19  ;; 0x400d8030
   \       0x9C   0x6801             LDR      R1,[R0, #+0]
   \       0x9E   0x03C9             LSLS     R1,R1,#+15
   \       0xA0   0x6800             LDR      R0,[R0, #+0]
   \       0xA2   0xD507             BPL.N    ??SystemCoreClockUpdate_15
    187                  {
    188                      PLL2MainClock = (((CCM_ANALOG->PLL_SYS & CCM_ANALOG_PLL_SYS_BYPASS_CLK_SRC_MASK) >> CCM_ANALOG_PLL_SYS_BYPASS_CLK_SRC_SHIFT) == 0U) ?
    189                             CPU_XTAL_CLK_HZ : CPU_CLK1_HZ;
   \       0xA4   0xF3C0 0x3081      UBFX     R0,R0,#+14,#+2
   \       0xA8   0x2800             CMP      R0,#+0
   \       0xAA   0xD101             BNE.N    ??SystemCoreClockUpdate_16
   \       0xAC   0x....             LDR.N    R6,??DataTable3_18  ;; 0x16e3600
   \       0xAE   0xE008             B.N      ??SystemCoreClockUpdate_17
   \                     ??SystemCoreClockUpdate_16: (+1)
   \       0xB0   0x2600             MOVS     R6,#+0
   \       0xB2   0xE006             B.N      ??SystemCoreClockUpdate_17
    190                  }
    191                  else
    192                  {
    193                      PLL2MainClock = (CPU_XTAL_CLK_HZ * ((CCM_ANALOG->PLL_SYS & CCM_ANALOG_PLL_SYS_DIV_SELECT_MASK) ? 22U : 20U));
   \                     ??SystemCoreClockUpdate_15: (+1)
   \       0xB4   0x07C0             LSLS     R0,R0,#+31
   \       0xB6   0xD501             BPL.N    ??SystemCoreClockUpdate_18
   \       0xB8   0x2616             MOVS     R6,#+22
   \       0xBA   0xE000             B.N      ??SystemCoreClockUpdate_19
   \                     ??SystemCoreClockUpdate_18: (+1)
   \       0xBC   0x2614             MOVS     R6,#+20
   \                     ??SystemCoreClockUpdate_19: (+1)
   \       0xBE   0x....             LDR.N    R0,??DataTable3_18  ;; 0x16e3600
   \       0xC0   0x4346             MULS     R6,R0,R6
    194                  }
    195                  PLL2MainClock += ((uint64_t)CPU_XTAL_CLK_HZ * ((uint64_t)(CCM_ANALOG->PLL_SYS_NUM))) / ((uint64_t)(CCM_ANALOG->PLL_SYS_DENOM));
   \                     ??SystemCoreClockUpdate_17: (+1)
   \       0xC2   0x....             LDR.N    R0,??DataTable3_21  ;; 0x400d8050
   \       0xC4   0x6800             LDR      R0,[R0, #+0]
   \       0xC6   0x....             LDR.N    R1,??DataTable3_18  ;; 0x16e3600
   \       0xC8   0xFBA1 0x0100      UMULL    R0,R1,R1,R0
   \       0xCC   0x....             LDR.N    R2,??DataTable3_22  ;; 0x400d8060
   \       0xCE   0x6812             LDR      R2,[R2, #+0]
   \       0xD0   0x2300             MOVS     R3,#+0
   \       0xD2   0x....'....        BL       __aeabi_uldivmod
   \       0xD6   0x1986             ADDS     R6,R0,R6
    196          
    197          
    198                  switch (CCM->CBCMR & CCM_CBCMR_PRE_PERIPH_CLK_SEL_MASK)
   \       0xD8   0x....             LDR.N    R0,??DataTable3_16  ;; 0x400fc018
   \       0xDA   0x6800             LDR      R0,[R0, #+0]
   \       0xDC   0xF410 0x2040      ANDS     R0,R0,#0xC0000
   \       0xE0   0xD026             BEQ.N    ??SystemCoreClockUpdate_11
   \       0xE2   0xF5B0 0x2F80      CMP      R0,#+262144
   \       0xE6   0xD006             BEQ.N    ??SystemCoreClockUpdate_20
   \       0xE8   0xF5B0 0x2F00      CMP      R0,#+524288
   \       0xEC   0xD00D             BEQ.N    ??SystemCoreClockUpdate_21
   \       0xEE   0xF5B0 0x2F40      CMP      R0,#+786432
   \       0xF2   0xD014             BEQ.N    ??SystemCoreClockUpdate_22
   \       0xF4   0xE01B             B.N      ??SystemCoreClockUpdate_23
    199                  {
    200                      /* PLL2 ---> Pre_Periph_clk ---> Periph_clk */
    201                      case CCM_CBCMR_PRE_PERIPH_CLK_SEL(0U):
    202                          freq = PLL2MainClock;
    203                          break;
    204          
    205                      /* PLL2 PFD2 ---> Pre_Periph_clk ---> Periph_clk */
    206                      case CCM_CBCMR_PRE_PERIPH_CLK_SEL(1U):
    207                          freq = PLL2MainClock / ((CCM_ANALOG->PFD_528 & CCM_ANALOG_PFD_528_PFD2_FRAC_MASK) >> CCM_ANALOG_PFD_528_PFD2_FRAC_SHIFT) * 18U;
   \                     ??SystemCoreClockUpdate_20: (+1)
   \       0xF6   0x....             LDR.N    R0,??DataTable3_23  ;; 0x400d8100
   \       0xF8   0x6800             LDR      R0,[R0, #+0]
   \       0xFA   0xF3C0 0x4005      UBFX     R0,R0,#+16,#+6
   \       0xFE   0xFBB6 0xF0F0      UDIV     R0,R6,R0
   \      0x102   0xEB00 0x01C0      ADD      R1,R0,R0, LSL #+3
   \      0x106   0x004E             LSLS     R6,R1,#+1
    208                          break;
   \      0x108   0xE012             B.N      ??SystemCoreClockUpdate_11
    209          
    210                      /* PLL2 PFD0 ---> Pre_Periph_clk ---> Periph_clk */
    211                      case CCM_CBCMR_PRE_PERIPH_CLK_SEL(2U):
    212                          freq = PLL2MainClock / ((CCM_ANALOG->PFD_528 & CCM_ANALOG_PFD_528_PFD0_FRAC_MASK) >> CCM_ANALOG_PFD_528_PFD0_FRAC_SHIFT) * 18U;
   \                     ??SystemCoreClockUpdate_21: (+1)
   \      0x10A   0x....             LDR.N    R0,??DataTable3_23  ;; 0x400d8100
   \      0x10C   0x6800             LDR      R0,[R0, #+0]
   \      0x10E   0xF000 0x003F      AND      R0,R0,#0x3F
   \      0x112   0xFBB6 0xF0F0      UDIV     R0,R6,R0
   \      0x116   0xEB00 0x01C0      ADD      R1,R0,R0, LSL #+3
   \      0x11A   0x004E             LSLS     R6,R1,#+1
    213                          break;
   \      0x11C   0xE008             B.N      ??SystemCoreClockUpdate_11
    214          
    215                      /* PLL1 divided(/2) ---> Pre_Periph_clk ---> Periph_clk */
    216                      case CCM_CBCMR_PRE_PERIPH_CLK_SEL(3U):
    217                          freq = PLL1MainClock / (((CCM->CACRR & CCM_CACRR_ARM_PODF_MASK) >> CCM_CACRR_ARM_PODF_SHIFT) + 1U);
   \                     ??SystemCoreClockUpdate_22: (+1)
   \      0x11E   0x....             LDR.N    R0,??DataTable3_24  ;; 0x400fc010
   \      0x120   0x6800             LDR      R0,[R0, #+0]
   \      0x122   0xF000 0x0007      AND      R0,R0,#0x7
   \      0x126   0x1C40             ADDS     R0,R0,#+1
   \      0x128   0xFBB5 0xF6F0      UDIV     R6,R5,R0
    218                          break;
   \      0x12C   0xE000             B.N      ??SystemCoreClockUpdate_11
    219          
    220                      default:
    221                          freq = 0U;
   \                     ??SystemCoreClockUpdate_23: (+1)
   \      0x12E   0x2600             MOVS     R6,#+0
    222                          break;
    223                  }
    224              }
    225          
    226              SystemCoreClock = (freq / (((CCM->CBCDR & CCM_CBCDR_AHB_PODF_MASK) >> CCM_CBCDR_AHB_PODF_SHIFT) + 1U));
   \                     ??SystemCoreClockUpdate_11: (+1)
   \      0x130   0x6820             LDR      R0,[R4, #+0]
   \      0x132   0xF3C0 0x2082      UBFX     R0,R0,#+10,#+3
   \      0x136   0x1C40             ADDS     R0,R0,#+1
   \      0x138   0xFBB6 0xF0F0      UDIV     R0,R6,R0
   \      0x13C   0x....             LDR.N    R1,??DataTable3_25
   \      0x13E   0x6008             STR      R0,[R1, #+0]
    227          
    228          }
   \      0x140   0xBD70             POP      {R4-R6,PC}       ;; return
    229          
    230          /* ----------------------------------------------------------------------------
    231             -- SystemInitHook()
    232             ---------------------------------------------------------------------------- */
    233          

   \                                 In section .text, align 2
    234          __attribute__ ((weak)) void SystemInitHook (void) {
    235            /* Void implementation of the weak function. */
    236          }
   \                     SystemInitHook: (+1)
   \        0x0   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \        0x0   0xE000'EF50        DC32     0xe000ef50

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \        0x0   0xE000'ED14        DC32     0xe000ed14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \        0x0   0xE000'ED84        DC32     0xe000ed84

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \        0x0   0xE000'ED80        DC32     0xe000ed80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \        0x0   0xE000'EF60        DC32     0xe000ef60

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \        0x0   0xE000'ED88        DC32     0xe000ed88

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \        0x0   0x400B'8008        DC32     0x400b8008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \        0x0   0x400D'0008        DC32     0x400d0008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \        0x0   0x400B'8000        DC32     0x400b8000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_9:
   \        0x0   0x400D'0000        DC32     0x400d0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_10:
   \        0x0   0xD928'C520        DC32     0xd928c520

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_11:
   \        0x0   0x400B'C004        DC32     0x400bc004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_12:
   \        0x0   0x400B'C008        DC32     0x400bc008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_13:
   \        0x0   0x400B'C000        DC32     0x400bc000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_14:
   \        0x0   0xE000'E010        DC32     0xe000e010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_15:
   \        0x0   0x400F'C014        DC32     0x400fc014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_16:
   \        0x0   0x400F'C018        DC32     0x400fc018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_17:
   \        0x0   0x400D'8010        DC32     0x400d8010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_18:
   \        0x0   0x016E'3600        DC32     0x16e3600

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_19:
   \        0x0   0x400D'8030        DC32     0x400d8030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_20:
   \        0x0   0x400D'8000        DC32     0x400d8000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_21:
   \        0x0   0x400D'8050        DC32     0x400d8050

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_22:
   \        0x0   0x400D'8060        DC32     0x400d8060

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_23:
   \        0x0   0x400D'8100        DC32     0x400d8100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_24:
   \        0x0   0x400F'C010        DC32     0x400fc010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_25:
   \        0x0   0x....'....        DC32     SystemCoreClock

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       4   SCB_EnableDCache
       0   SCB_EnableICache
      16   SystemCoreClockUpdate
        16 __aeabi_uldivmod
       8   SystemInit
         8   -> SCB_EnableDCache
         8   -> SCB_EnableICache
         0   -> SystemInitHook
       0   SystemInitHook


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_10
       4  ??DataTable3_11
       4  ??DataTable3_12
       4  ??DataTable3_13
       4  ??DataTable3_14
       4  ??DataTable3_15
       4  ??DataTable3_16
       4  ??DataTable3_17
       4  ??DataTable3_18
       4  ??DataTable3_19
       4  ??DataTable3_2
       4  ??DataTable3_20
       4  ??DataTable3_21
       4  ??DataTable3_22
       4  ??DataTable3_23
       4  ??DataTable3_24
       4  ??DataTable3_25
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
      82  SCB_EnableDCache
      42  SCB_EnableICache
       4  SystemCoreClock
     322  SystemCoreClockUpdate
     142  SystemInit
       2  SystemInitHook

 
   4 bytes in section .data
 694 bytes in section .text
 
 692 bytes of CODE memory (+ 2 bytes shared)
   4 bytes of DATA memory

Errors: none
Warnings: none
