###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.3.193/W32 for ARM         10/Jun/2019  13:48:58
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\Development\smart_washing_machine_3080\mbedtls\library\x509_crl.c
#    Command line =  
#        -f C:\Users\nxf42695\AppData\Local\Temp\1\EW72FB.tmp
#        (C:\Development\smart_washing_machine_3080\mbedtls\library\x509_crl.c
#        -D DEBUG -D USE_RTOS -D XIP_EXTERNAL_FLASH=1 -D
#        XIP_BOOT_HEADER_ENABLE=1 -D CPU_MIMXRT1052DVL6B -D FSL_RTOS_FREE_RTOS
#        -D PRINTF_ADVANCED_ENABLE -D
#        "MBEDTLS_CONFIG_FILE=\"ksdk_mbedtls_config.h\"" -lC
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list -lA
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list
#        --diag_suppress Pa082,Pa050 -o
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_d16 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" --preinclude
#        C:\Development\smart_washing_machine_3080/source\app_preinclude.h -I
#        C:\Development\smart_washing_machine_3080/board\ -I
#        C:\Development\smart_washing_machine_3080/source\ -I
#        C:\Development\smart_washing_machine_3080/CMSIS\ -I
#        C:\Development\smart_washing_machine_3080/amazon-freertos/freertos/portable\
#        -I C:\Development\smart_washing_machine_3080/amazon-freertos/include\
#        -I C:\Development\smart_washing_machine_3080/component/lists\ -I
#        C:\Development\smart_washing_machine_3080/component/serial_manager\ -I
#        C:\Development\smart_washing_machine_3080/component/uart\ -I
#        C:\Development\smart_washing_machine_3080/component/kv\ -I
#        C:\Development\smart_washing_machine_3080/component/kv/include\ -I
#        C:\Development\smart_washing_machine_3080/device\ -I
#        C:\Development\smart_washing_machine_3080/doc\ -I
#        C:\Development\smart_washing_machine_3080/drivers\ -I
#        C:\Development\smart_washing_machine_3080/src\ -I
#        C:\Development\smart_washing_machine_3080/startup\ -I
#        C:\Development\smart_washing_machine_3080/utilities\ -I
#        C:\Development\smart_washing_machine_3080/xip\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\atm\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_model\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_sign\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\infra\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\mqtt\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\external_libs\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\coap_cloud\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\CoAPPacket\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\server\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\os\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\awss_reset\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\mbedtls\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\ -I
#        C:\Development\smart_washing_machine_3080\mbedtls\port\ksdk\ -Om)
#    Locale       =  C
#    List file    =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list\x509_crl.lst
#    Object file  =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj\x509_crl.o
#
###############################################################################

C:\Development\smart_washing_machine_3080\mbedtls\library\x509_crl.c
      1          /*
      2           *  X.509 Certidicate Revocation List (CRL) parsing
      3           *
      4           *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
      5           *  SPDX-License-Identifier: Apache-2.0
      6           *
      7           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
      8           *  not use this file except in compliance with the License.
      9           *  You may obtain a copy of the License at
     10           *
     11           *  http://www.apache.org/licenses/LICENSE-2.0
     12           *
     13           *  Unless required by applicable law or agreed to in writing, software
     14           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     15           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     16           *  See the License for the specific language governing permissions and
     17           *  limitations under the License.
     18           *
     19           *  This file is part of mbed TLS (https://tls.mbed.org)
     20           */
     21          /*
     22           *  The ITU-T X.509 standard defines a certificate format for PKI.
     23           *
     24           *  http://www.ietf.org/rfc/rfc5280.txt (Certificates and CRLs)
     25           *  http://www.ietf.org/rfc/rfc3279.txt (Alg IDs for CRLs)
     26           *  http://www.ietf.org/rfc/rfc2986.txt (CSRs, aka PKCS#10)
     27           *
     28           *  http://www.itu.int/ITU-T/studygroups/com17/languages/X.680-0207.pdf
     29           *  http://www.itu.int/ITU-T/studygroups/com17/languages/X.690-0207.pdf
     30           */
     31          
     32          #if !defined(MBEDTLS_CONFIG_FILE)
     33          #include "mbedtls/config.h"
     34          #else
     35          #include MBEDTLS_CONFIG_FILE
     36          #endif
     37          
     38          #if defined(MBEDTLS_X509_CRL_PARSE_C)
     39          
     40          #include "mbedtls/x509_crl.h"
     41          #include "mbedtls/oid.h"
     42          #include "mbedtls/platform_util.h"
     43          
     44          #include <string.h>
     45          
     46          #if defined(MBEDTLS_PEM_PARSE_C)
     47          #include "mbedtls/pem.h"
     48          #endif
     49          
     50          #if defined(MBEDTLS_PLATFORM_C)
     51          #include "mbedtls/platform.h"
     52          #else
     53          #include <stdlib.h>
     54          #include <stdio.h>
     55          #define mbedtls_free       free
     56          #define mbedtls_calloc    calloc
     57          #define mbedtls_snprintf   snprintf
     58          #endif
     59          
     60          #if defined(_WIN32) && !defined(EFIX64) && !defined(EFI32)
     61          #include <windows.h>
     62          #else
     63          #include <time.h>
     64          #endif
     65          
     66          #if defined(MBEDTLS_FS_IO) || defined(EFIX64) || defined(EFI32)
     67          #include <stdio.h>
     68          #endif
     69          
     70          /*
     71           *  Version  ::=  INTEGER  {  v1(0), v2(1)  }
     72           */

   \                                 In section .text, align 2, keep-with-next
     73          static int x509_crl_get_version( unsigned char **p,
     74                                       const unsigned char *end,
     75                                       int *ver )
     76          {
   \                     x509_crl_get_version: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x4614             MOV      R4,R2
     77              int ret;
     78          
     79              if( ( ret = mbedtls_asn1_get_int( p, end, ver ) ) != 0 )
   \        0x4   0x....'....        BL       mbedtls_asn1_get_int
   \        0x8   0x2800             CMP      R0,#+0
   \        0xA   0xD008             BEQ.N    ??x509_crl_get_version_0
     80              {
     81                  if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   \        0xC   0xF110 0x0F62      CMN      R0,#+98
   \       0x10   0xD102             BNE.N    ??x509_crl_get_version_1
     82                  {
     83                      *ver = 0;
   \       0x12   0x2000             MOVS     R0,#+0
   \       0x14   0x6020             STR      R0,[R4, #+0]
     84                      return( 0 );
   \       0x16   0xBD10             POP      {R4,PC}
     85                  }
     86          
     87                  return( MBEDTLS_ERR_X509_INVALID_VERSION + ret );
   \                     ??x509_crl_get_version_1: (+1)
   \       0x18   0xF5A0 0x5008      SUB      R0,R0,#+8704
   \       0x1C   0xBD10             POP      {R4,PC}
     88              }
     89          
     90              return( 0 );
   \                     ??x509_crl_get_version_0: (+1)
   \       0x1E   0x2000             MOVS     R0,#+0
   \       0x20   0xBD10             POP      {R4,PC}          ;; return
     91          }
     92          
     93          /*
     94           * X.509 CRL v2 extensions
     95           *
     96           * We currently don't parse any extension's content, but we do check that the
     97           * list of extensions is well-formed and abort on critical extensions (that
     98           * are unsupported as we don't support any extension so far)
     99           */

   \                                 In section .text, align 2, keep-with-next
    100          static int x509_get_crl_ext( unsigned char **p,
    101                                       const unsigned char *end,
    102                                       mbedtls_x509_buf *ext )
    103          {
   \                     x509_get_crl_ext: (+1)
   \        0x0   0xB57C             PUSH     {R2-R6,LR}
   \        0x2   0x4605             MOV      R5,R0
   \        0x4   0x460E             MOV      R6,R1
    104              int ret;
    105          
    106              /*
    107               * crlExtensions           [0]  EXPLICIT Extensions OPTIONAL
    108               *                              -- if present, version MUST be v2
    109               */
    110              if( ( ret = mbedtls_x509_get_ext( p, end, ext, 0 ) ) != 0 )
   \        0x6   0x2300             MOVS     R3,#+0
   \        0x8   0x....'....        BL       mbedtls_x509_get_ext
   \        0xC   0x2800             CMP      R0,#+0
   \        0xE   0xD040             BEQ.N    ??x509_get_crl_ext_0
    111              {
    112                  if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   \       0x10   0xF110 0x0F62      CMN      R0,#+98
   \       0x14   0xD13C             BNE.N    ??x509_get_crl_ext_1
    113                      return( 0 );
   \       0x16   0x2000             MOVS     R0,#+0
   \       0x18   0xBD76             POP      {R1,R2,R4-R6,PC}
    114          
    115                  return( ret );
    116              }
    117          
    118              while( *p < end )
    119              {
    120                  /*
    121                   * Extension  ::=  SEQUENCE  {
    122                   *      extnID      OBJECT IDENTIFIER,
    123                   *      critical    BOOLEAN DEFAULT FALSE,
    124                   *      extnValue   OCTET STRING  }
    125                   */
    126                  int is_critical = 0;
   \                     ??x509_get_crl_ext_2: (+1)
   \       0x1A   0x2000             MOVS     R0,#+0
   \       0x1C   0x9001             STR      R0,[SP, #+4]
    127                  const unsigned char *end_ext_data;
    128                  size_t len;
    129          
    130                  /* Get enclosing sequence tag */
    131                  if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
    132                          MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
   \       0x1E   0x2330             MOVS     R3,#+48
   \       0x20   0x466A             MOV      R2,SP
   \       0x22   0x4631             MOV      R1,R6
   \       0x24   0x4628             MOV      R0,R5
   \       0x26   0x....'....        BL       mbedtls_asn1_get_tag
   \       0x2A   0x2800             CMP      R0,#+0
   \       0x2C   0xD138             BNE.N    ??x509_get_crl_ext_3
    133                      return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
    134          
    135                  end_ext_data = *p + len;
   \       0x2E   0x6828             LDR      R0,[R5, #+0]
   \       0x30   0x9900             LDR      R1,[SP, #+0]
   \       0x32   0x1844             ADDS     R4,R0,R1
    136          
    137                  /* Get OID (currently ignored) */
    138                  if( ( ret = mbedtls_asn1_get_tag( p, end_ext_data, &len,
    139                                                    MBEDTLS_ASN1_OID ) ) != 0 )
   \       0x34   0x2306             MOVS     R3,#+6
   \       0x36   0x466A             MOV      R2,SP
   \       0x38   0x4621             MOV      R1,R4
   \       0x3A   0x4628             MOV      R0,R5
   \       0x3C   0x....'....        BL       mbedtls_asn1_get_tag
   \       0x40   0x2800             CMP      R0,#+0
   \       0x42   0xD12D             BNE.N    ??x509_get_crl_ext_3
    140                  {
    141                      return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
    142                  }
    143                  *p += len;
   \       0x44   0x6828             LDR      R0,[R5, #+0]
   \       0x46   0x9900             LDR      R1,[SP, #+0]
   \       0x48   0x4408             ADD      R0,R0,R1
   \       0x4A   0x6028             STR      R0,[R5, #+0]
    144          
    145                  /* Get optional critical */
    146                  if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data,
    147                                                     &is_critical ) ) != 0 &&
    148                      ( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG ) )
   \       0x4C   0xAA01             ADD      R2,SP,#+4
   \       0x4E   0x4621             MOV      R1,R4
   \       0x50   0x4628             MOV      R0,R5
   \       0x52   0x....'....        BL       mbedtls_asn1_get_bool
   \       0x56   0x2800             CMP      R0,#+0
   \       0x58   0xD002             BEQ.N    ??x509_get_crl_ext_4
   \       0x5A   0xF110 0x0F62      CMN      R0,#+98
   \       0x5E   0xD11F             BNE.N    ??x509_get_crl_ext_3
    149                  {
    150                      return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
    151                  }
    152          
    153                  /* Data should be octet string type */
    154                  if( ( ret = mbedtls_asn1_get_tag( p, end_ext_data, &len,
    155                          MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
   \                     ??x509_get_crl_ext_4: (+1)
   \       0x60   0x2304             MOVS     R3,#+4
   \       0x62   0x466A             MOV      R2,SP
   \       0x64   0x4621             MOV      R1,R4
   \       0x66   0x4628             MOV      R0,R5
   \       0x68   0x....'....        BL       mbedtls_asn1_get_tag
   \       0x6C   0x2800             CMP      R0,#+0
   \       0x6E   0xD117             BNE.N    ??x509_get_crl_ext_3
    156                      return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
    157          
    158                  /* Ignore data so far and just check its length */
    159                  *p += len;
   \       0x70   0x6828             LDR      R0,[R5, #+0]
   \       0x72   0x9900             LDR      R1,[SP, #+0]
   \       0x74   0x4408             ADD      R0,R0,R1
   \       0x76   0x6028             STR      R0,[R5, #+0]
    160                  if( *p != end_ext_data )
   \       0x78   0x42A0             CMP      R0,R4
   \       0x7A   0xD105             BNE.N    ??x509_get_crl_ext_5
    161                      return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
    162                              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    163          
    164                  /* Abort on (unsupported) critical extensions */
    165                  if( is_critical )
   \       0x7C   0x9801             LDR      R0,[SP, #+4]
   \       0x7E   0x2800             CMP      R0,#+0
   \       0x80   0xD007             BEQ.N    ??x509_get_crl_ext_0
    166                      return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
    167                              MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
   \       0x82   0x....'....        LDR.W    R0,??DataTable6_1  ;; 0xffffda9e
   \       0x86   0xBD76             POP      {R1,R2,R4-R6,PC}
   \                     ??x509_get_crl_ext_5: (+1)
   \       0x88   0x....'....        LDR.W    R0,??DataTable6_2  ;; 0xffffda9a
   \       0x8C   0xBD76             POP      {R1,R2,R4-R6,PC}
    168              }
    169          
    170              if( *p != end )
    171                  return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
    172                          MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    173          
    174              return( 0 );
   \                     ??x509_get_crl_ext_6: (+1)
   \       0x8E   0x2000             MOVS     R0,#+0
   \                     ??x509_get_crl_ext_1: (+1)
   \       0x90   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
   \                     ??x509_get_crl_ext_0: (+1)
   \       0x92   0x6828             LDR      R0,[R5, #+0]
   \       0x94   0x42B0             CMP      R0,R6
   \       0x96   0xD3C0             BCC.N    ??x509_get_crl_ext_2
   \       0x98   0xD0F9             BEQ.N    ??x509_get_crl_ext_6
   \       0x9A   0x....'....        LDR.W    R0,??DataTable6_2  ;; 0xffffda9a
   \       0x9E   0xBD76             POP      {R1,R2,R4-R6,PC}
   \                     ??x509_get_crl_ext_3: (+1)
   \       0xA0   0xF5A0 0x5014      SUB      R0,R0,#+9472
   \       0xA4   0xBD76             POP      {R1,R2,R4-R6,PC}
    175          }
    176          
    177          /*
    178           * X.509 CRL v2 entry extensions (no extensions parsed yet.)
    179           */

   \                                 In section .text, align 2, keep-with-next
    180          static int x509_get_crl_entry_ext( unsigned char **p,
    181                                       const unsigned char *end,
    182                                       mbedtls_x509_buf *ext )
    183          {
   \                     x509_get_crl_entry_ext: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x4615             MOV      R5,R2
    184              int ret;
    185              size_t len = 0;
   \        0x6   0x2000             MOVS     R0,#+0
   \        0x8   0x9000             STR      R0,[SP, #+0]
    186          
    187              /* OPTIONAL */
    188              if( end <= *p )
   \        0xA   0x6820             LDR      R0,[R4, #+0]
   \        0xC   0x4288             CMP      R0,R1
   \        0xE   0xD301             BCC.N    ??x509_get_crl_entry_ext_0
    189                  return( 0 );
   \       0x10   0x2000             MOVS     R0,#+0
   \       0x12   0xBD32             POP      {R1,R4,R5,PC}
    190          
    191              ext->tag = **p;
   \                     ??x509_get_crl_entry_ext_0: (+1)
   \       0x14   0x7800             LDRB     R0,[R0, #+0]
   \       0x16   0x6028             STR      R0,[R5, #+0]
    192              ext->p = *p;
   \       0x18   0x6820             LDR      R0,[R4, #+0]
   \       0x1A   0x60A8             STR      R0,[R5, #+8]
    193          
    194              /*
    195               * Get CRL-entry extension sequence header
    196               * crlEntryExtensions      Extensions OPTIONAL  -- if present, MUST be v2
    197               */
    198              if( ( ret = mbedtls_asn1_get_tag( p, end, &ext->len,
    199                      MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
   \       0x1C   0x2330             MOVS     R3,#+48
   \       0x1E   0x1D2A             ADDS     R2,R5,#+4
   \       0x20   0x4620             MOV      R0,R4
   \       0x22   0x....'....        BL       mbedtls_asn1_get_tag
   \       0x26   0x2800             CMP      R0,#+0
   \       0x28   0xD008             BEQ.N    ??x509_get_crl_entry_ext_1
    200              {
    201                  if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   \       0x2A   0xF110 0x0F62      CMN      R0,#+98
   \       0x2E   0xD102             BNE.N    ??x509_get_crl_entry_ext_2
    202                  {
    203                      ext->p = NULL;
   \       0x30   0x2000             MOVS     R0,#+0
   \       0x32   0x60A8             STR      R0,[R5, #+8]
    204                      return( 0 );
   \       0x34   0xBD32             POP      {R1,R4,R5,PC}
    205                  }
    206                  return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
   \                     ??x509_get_crl_entry_ext_2: (+1)
   \       0x36   0xF5A0 0x5014      SUB      R0,R0,#+9472
   \       0x3A   0xBD32             POP      {R1,R4,R5,PC}
    207              }
    208          
    209              end = *p + ext->len;
   \                     ??x509_get_crl_entry_ext_1: (+1)
   \       0x3C   0x6820             LDR      R0,[R4, #+0]
   \       0x3E   0x6869             LDR      R1,[R5, #+4]
   \       0x40   0x1845             ADDS     R5,R0,R1
    210          
    211              if( end != *p + ext->len )
   \       0x42   0xE003             B.N      ??x509_get_crl_entry_ext_3
    212                  return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
    213                          MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    214          
    215              while( *p < end )
    216              {
    217                  if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
    218                          MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    219                      return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
    220          
    221                  *p += len;
   \                     ??x509_get_crl_entry_ext_4: (+1)
   \       0x44   0x6820             LDR      R0,[R4, #+0]
   \       0x46   0x9900             LDR      R1,[SP, #+0]
   \       0x48   0x4408             ADD      R0,R0,R1
   \       0x4A   0x6020             STR      R0,[R4, #+0]
   \                     ??x509_get_crl_entry_ext_3: (+1)
   \       0x4C   0x6820             LDR      R0,[R4, #+0]
   \       0x4E   0x42A8             CMP      R0,R5
   \       0x50   0xD20C             BCS.N    ??x509_get_crl_entry_ext_5
   \       0x52   0x2330             MOVS     R3,#+48
   \       0x54   0x466A             MOV      R2,SP
   \       0x56   0x4629             MOV      R1,R5
   \       0x58   0x4620             MOV      R0,R4
   \       0x5A   0x....'....        BL       mbedtls_asn1_get_tag
   \       0x5E   0x2800             CMP      R0,#+0
   \       0x60   0xD0F0             BEQ.N    ??x509_get_crl_entry_ext_4
   \       0x62   0xF5A0 0x5014      SUB      R0,R0,#+9472
   \       0x66   0xBD32             POP      {R1,R4,R5,PC}
    222              }
    223          
    224              if( *p != end )
    225                  return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
    226                          MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    227          
    228              return( 0 );
   \                     ??x509_get_crl_entry_ext_6: (+1)
   \       0x68   0x2000             MOVS     R0,#+0
   \       0x6A   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   \                     ??x509_get_crl_entry_ext_5: (+1)
   \       0x6C   0xD0FC             BEQ.N    ??x509_get_crl_entry_ext_6
   \       0x6E   0x....'....        LDR.W    R0,??DataTable6_2  ;; 0xffffda9a
   \       0x72   0xBD32             POP      {R1,R4,R5,PC}
    229          }
    230          
    231          /*
    232           * X.509 CRL Entries
    233           */

   \                                 In section .text, align 2, keep-with-next
    234          static int x509_get_entries( unsigned char **p,
    235                                       const unsigned char *end,
    236                                       mbedtls_x509_crl_entry *entry )
    237          {
   \                     x509_get_entries: (+1)
   \        0x0   0xB5FE             PUSH     {R1-R7,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x4615             MOV      R5,R2
    238              int ret;
    239              size_t entry_len;
    240              mbedtls_x509_crl_entry *cur_entry = entry;
    241          
    242              if( *p == end )
   \        0x6   0x6820             LDR      R0,[R4, #+0]
   \        0x8   0x4288             CMP      R0,R1
   \        0xA   0xD101             BNE.N    ??x509_get_entries_0
    243                  return( 0 );
   \        0xC   0x2000             MOVS     R0,#+0
   \        0xE   0xBDFE             POP      {R1-R7,PC}
    244          
    245              if( ( ret = mbedtls_asn1_get_tag( p, end, &entry_len,
    246                      MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED ) ) != 0 )
   \                     ??x509_get_entries_0: (+1)
   \       0x10   0x2330             MOVS     R3,#+48
   \       0x12   0x466A             MOV      R2,SP
   \       0x14   0x4620             MOV      R0,R4
   \       0x16   0x....'....        BL       mbedtls_asn1_get_tag
   \       0x1A   0x2800             CMP      R0,#+0
   \       0x1C   0xD004             BEQ.N    ??x509_get_entries_1
    247              {
    248                  if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   \       0x1E   0xF110 0x0F62      CMN      R0,#+98
   \       0x22   0xD141             BNE.N    ??x509_get_entries_2
    249                      return( 0 );
   \       0x24   0x2000             MOVS     R0,#+0
   \       0x26   0xBDFE             POP      {R1-R7,PC}
    250          
    251                  return( ret );
    252              }
    253          
    254              end = *p + entry_len;
   \                     ??x509_get_entries_1: (+1)
   \       0x28   0x6820             LDR      R0,[R4, #+0]
   \       0x2A   0x9900             LDR      R1,[SP, #+0]
   \       0x2C   0x1846             ADDS     R6,R0,R1
   \       0x2E   0xE000             B.N      ??x509_get_entries_3
    255          
    256              while( *p < end )
    257              {
    258                  size_t len2;
    259                  const unsigned char *end2;
    260          
    261                  if( ( ret = mbedtls_asn1_get_tag( p, end, &len2,
    262                          MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED ) ) != 0 )
    263                  {
    264                      return( ret );
    265                  }
    266          
    267                  cur_entry->raw.tag = **p;
    268                  cur_entry->raw.p = *p;
    269                  cur_entry->raw.len = len2;
    270                  end2 = *p + len2;
    271          
    272                  if( ( ret = mbedtls_x509_get_serial( p, end2, &cur_entry->serial ) ) != 0 )
    273                      return( ret );
    274          
    275                  if( ( ret = mbedtls_x509_get_time( p, end2,
    276                                             &cur_entry->revocation_date ) ) != 0 )
    277                      return( ret );
    278          
    279                  if( ( ret = x509_get_crl_entry_ext( p, end2,
    280                                                      &cur_entry->entry_ext ) ) != 0 )
    281                      return( ret );
    282          
    283                  if( *p < end )
    284                  {
    285                      cur_entry->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_crl_entry ) );
    286          
    287                      if( cur_entry->next == NULL )
    288                          return( MBEDTLS_ERR_X509_ALLOC_FAILED );
    289          
    290                      cur_entry = cur_entry->next;
   \                     ??x509_get_entries_4: (+1)
   \       0x30   0x4605             MOV      R5,R0
   \                     ??x509_get_entries_3: (+1)
   \       0x32   0x6820             LDR      R0,[R4, #+0]
   \       0x34   0x42B0             CMP      R0,R6
   \       0x36   0xD236             BCS.N    ??x509_get_entries_5
   \       0x38   0x2330             MOVS     R3,#+48
   \       0x3A   0xAA01             ADD      R2,SP,#+4
   \       0x3C   0x4631             MOV      R1,R6
   \       0x3E   0x4620             MOV      R0,R4
   \       0x40   0x....'....        BL       mbedtls_asn1_get_tag
   \       0x44   0x2800             CMP      R0,#+0
   \       0x46   0xD12F             BNE.N    ??x509_get_entries_2
   \       0x48   0x6820             LDR      R0,[R4, #+0]
   \       0x4A   0x7800             LDRB     R0,[R0, #+0]
   \       0x4C   0x6028             STR      R0,[R5, #+0]
   \       0x4E   0x6820             LDR      R0,[R4, #+0]
   \       0x50   0x60A8             STR      R0,[R5, #+8]
   \       0x52   0x9801             LDR      R0,[SP, #+4]
   \       0x54   0x6068             STR      R0,[R5, #+4]
   \       0x56   0x6820             LDR      R0,[R4, #+0]
   \       0x58   0x9901             LDR      R1,[SP, #+4]
   \       0x5A   0x1847             ADDS     R7,R0,R1
   \       0x5C   0xF105 0x020C      ADD      R2,R5,#+12
   \       0x60   0x4639             MOV      R1,R7
   \       0x62   0x4620             MOV      R0,R4
   \       0x64   0x....'....        BL       mbedtls_x509_get_serial
   \       0x68   0x2800             CMP      R0,#+0
   \       0x6A   0xD11D             BNE.N    ??x509_get_entries_2
   \       0x6C   0xF105 0x0218      ADD      R2,R5,#+24
   \       0x70   0x4639             MOV      R1,R7
   \       0x72   0x4620             MOV      R0,R4
   \       0x74   0x....'....        BL       mbedtls_x509_get_time
   \       0x78   0x2800             CMP      R0,#+0
   \       0x7A   0xD115             BNE.N    ??x509_get_entries_2
   \       0x7C   0xF105 0x0230      ADD      R2,R5,#+48
   \       0x80   0x4639             MOV      R1,R7
   \       0x82   0x4620             MOV      R0,R4
   \       0x84   0x....'....        BL       x509_get_crl_entry_ext
   \       0x88   0x2800             CMP      R0,#+0
   \       0x8A   0xD10D             BNE.N    ??x509_get_entries_2
   \       0x8C   0x6820             LDR      R0,[R4, #+0]
   \       0x8E   0x42B0             CMP      R0,R6
   \       0x90   0xD2CF             BCS.N    ??x509_get_entries_3
   \       0x92   0x2140             MOVS     R1,#+64
   \       0x94   0x2001             MOVS     R0,#+1
   \       0x96   0x....'....        BL       mbedtls_calloc
   \       0x9A   0x63E8             STR      R0,[R5, #+60]
   \       0x9C   0x2800             CMP      R0,#+0
   \       0x9E   0xD1C7             BNE.N    ??x509_get_entries_4
   \       0xA0   0x....'....        LDR.W    R0,??DataTable6_3  ;; 0xffffd780
   \       0xA4   0xBDFE             POP      {R1-R7,PC}
    291                  }
    292              }
    293          
    294              return( 0 );
   \                     ??x509_get_entries_5: (+1)
   \       0xA6   0x2000             MOVS     R0,#+0
   \                     ??x509_get_entries_2: (+1)
   \       0xA8   0xBDFE             POP      {R1-R7,PC}       ;; return
    295          }
    296          
    297          /*
    298           * Parse one  CRLs in DER format and append it to the chained list
    299           */

   \                                 In section .text, align 2, keep-with-next
    300          int mbedtls_x509_crl_parse_der( mbedtls_x509_crl *chain,
    301                                  const unsigned char *buf, size_t buflen )
    302          {
   \                     mbedtls_x509_crl_parse_der: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0xB08C             SUB      SP,SP,#+48
   \        0x4   0x4605             MOV      R5,R0
   \        0x6   0x460C             MOV      R4,R1
   \        0x8   0x4616             MOV      R6,R2
    303              int ret;
    304              size_t len;
    305              unsigned char *p = NULL, *end = NULL;
   \        0xA   0x2000             MOVS     R0,#+0
   \        0xC   0x9001             STR      R0,[SP, #+4]
    306              mbedtls_x509_buf sig_params1, sig_params2, sig_oid2;
    307              mbedtls_x509_crl *crl = chain;
    308          
    309              /*
    310               * Check for valid input
    311               */
    312              if( crl == NULL || buf == NULL )
   \        0xE   0x2D00             CMP      R5,#+0
   \       0x10   0xD001             BEQ.N    ??mbedtls_x509_crl_parse_der_0
   \       0x12   0x2C00             CMP      R4,#+0
   \       0x14   0xD102             BNE.N    ??mbedtls_x509_crl_parse_der_1
    313                  return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   \                     ??mbedtls_x509_crl_parse_der_0: (+1)
   \       0x16   0x....'....        LDR.W    R0,??DataTable6_4  ;; 0xffffd800
   \       0x1A   0xE116             B.N      ??mbedtls_x509_crl_parse_der_2
    314          
    315              memset( &sig_params1, 0, sizeof( mbedtls_x509_buf ) );
   \                     ??mbedtls_x509_crl_parse_der_1: (+1)
   \       0x1C   0x4602             MOV      R2,R0
   \       0x1E   0x210C             MOVS     R1,#+12
   \       0x20   0xA803             ADD      R0,SP,#+12
   \       0x22   0x....'....        BL       __aeabi_memset4
    316              memset( &sig_params2, 0, sizeof( mbedtls_x509_buf ) );
   \       0x26   0x2200             MOVS     R2,#+0
   \       0x28   0x210C             MOVS     R1,#+12
   \       0x2A   0xA809             ADD      R0,SP,#+36
   \       0x2C   0x....'....        BL       __aeabi_memset4
    317              memset( &sig_oid2, 0, sizeof( mbedtls_x509_buf ) );
   \       0x30   0x2200             MOVS     R2,#+0
   \       0x32   0x210C             MOVS     R1,#+12
   \       0x34   0xA806             ADD      R0,SP,#+24
   \       0x36   0x....'....        BL       __aeabi_memset4
    318          
    319              /*
    320               * Add new CRL on the end of the chain if needed.
    321               */
    322              while( crl->version != 0 && crl->next != NULL )
   \                     ??mbedtls_x509_crl_parse_der_3: (+1)
   \       0x3A   0x69A8             LDR      R0,[R5, #+24]
   \       0x3C   0x2800             CMP      R0,#+0
   \       0x3E   0xF000 0x8106      BEQ.W    ??mbedtls_x509_crl_parse_der_4
   \       0x42   0xF8D5 0x00F0      LDR      R0,[R5, #+240]
   \       0x46   0x2800             CMP      R0,#+0
   \       0x48   0xF000 0x8101      BEQ.W    ??mbedtls_x509_crl_parse_der_4
    323                  crl = crl->next;
   \       0x4C   0x4605             MOV      R5,R0
   \       0x4E   0xE7F4             B.N      ??mbedtls_x509_crl_parse_der_3
    324          
    325              if( crl->version != 0 && crl->next == NULL )
    326              {
    327                  crl->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_crl ) );
    328          
    329                  if( crl->next == NULL )
    330                  {
    331                      mbedtls_x509_crl_free( crl );
    332                      return( MBEDTLS_ERR_X509_ALLOC_FAILED );
    333                  }
    334          
    335                  mbedtls_x509_crl_init( crl->next );
   \                     ??mbedtls_x509_crl_parse_der_5: (+1)
   \       0x50   0x....'....        BL       mbedtls_x509_crl_init
    336                  crl = crl->next;
   \       0x54   0xF8D5 0x50F0      LDR      R5,[R5, #+240]
    337              }
    338          
    339              /*
    340               * Copy raw DER-encoded CRL
    341               */
    342              if( buflen == 0 )
   \                     ??mbedtls_x509_crl_parse_der_6: (+1)
   \       0x58   0x2E00             CMP      R6,#+0
   \       0x5A   0xD102             BNE.N    ??mbedtls_x509_crl_parse_der_7
    343                  return( MBEDTLS_ERR_X509_INVALID_FORMAT );
   \       0x5C   0x....'....        LDR.W    R0,??DataTable6_5  ;; 0xffffde80
   \       0x60   0xE0F3             B.N      ??mbedtls_x509_crl_parse_der_2
    344          
    345              p = mbedtls_calloc( 1, buflen );
   \                     ??mbedtls_x509_crl_parse_der_7: (+1)
   \       0x62   0x4631             MOV      R1,R6
   \       0x64   0x2001             MOVS     R0,#+1
   \       0x66   0x....'....        BL       mbedtls_calloc
   \       0x6A   0x9001             STR      R0,[SP, #+4]
    346              if( p == NULL )
   \       0x6C   0x2800             CMP      R0,#+0
   \       0x6E   0xD102             BNE.N    ??mbedtls_x509_crl_parse_der_8
    347                  return( MBEDTLS_ERR_X509_ALLOC_FAILED );
   \       0x70   0x....'....        LDR.W    R0,??DataTable6_3  ;; 0xffffd780
   \       0x74   0xE0E9             B.N      ??mbedtls_x509_crl_parse_der_2
    348          
    349              memcpy( p, buf, buflen );
   \                     ??mbedtls_x509_crl_parse_der_8: (+1)
   \       0x76   0x4632             MOV      R2,R6
   \       0x78   0x4621             MOV      R1,R4
   \       0x7A   0x....'....        BL       __aeabi_memcpy
    350          
    351              crl->raw.p = p;
   \       0x7E   0x9801             LDR      R0,[SP, #+4]
   \       0x80   0x60A8             STR      R0,[R5, #+8]
    352              crl->raw.len = buflen;
   \       0x82   0x606E             STR      R6,[R5, #+4]
    353          
    354              end = p + buflen;
   \       0x84   0x9801             LDR      R0,[SP, #+4]
   \       0x86   0x1984             ADDS     R4,R0,R6
    355          
    356              /*
    357               * CertificateList  ::=  SEQUENCE  {
    358               *      tbsCertList          TBSCertList,
    359               *      signatureAlgorithm   AlgorithmIdentifier,
    360               *      signatureValue       BIT STRING  }
    361               */
    362              if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
    363                      MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
   \       0x88   0x2330             MOVS     R3,#+48
   \       0x8A   0xAA02             ADD      R2,SP,#+8
   \       0x8C   0x4621             MOV      R1,R4
   \       0x8E   0xA801             ADD      R0,SP,#+4
   \       0x90   0x....'....        BL       mbedtls_asn1_get_tag
   \       0x94   0x2800             CMP      R0,#+0
   \       0x96   0xD005             BEQ.N    ??mbedtls_x509_crl_parse_der_9
    364              {
    365                  mbedtls_x509_crl_free( crl );
   \       0x98   0x4628             MOV      R0,R5
   \       0x9A   0x....'....        BL       mbedtls_x509_crl_free
    366                  return( MBEDTLS_ERR_X509_INVALID_FORMAT );
   \       0x9E   0x....'....        LDR.W    R0,??DataTable6_5  ;; 0xffffde80
   \       0xA2   0xE0D2             B.N      ??mbedtls_x509_crl_parse_der_2
    367              }
    368          
    369              if( len != (size_t) ( end - p ) )
   \                     ??mbedtls_x509_crl_parse_der_9: (+1)
   \       0xA4   0x9802             LDR      R0,[SP, #+8]
   \       0xA6   0x9901             LDR      R1,[SP, #+4]
   \       0xA8   0x1A61             SUBS     R1,R4,R1
   \       0xAA   0x4288             CMP      R0,R1
   \       0xAC   0xF040 0x80C7      BNE.W    ??mbedtls_x509_crl_parse_der_10
    370              {
    371                  mbedtls_x509_crl_free( crl );
    372                  return( MBEDTLS_ERR_X509_INVALID_FORMAT +
    373                          MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    374              }
    375          
    376              /*
    377               * TBSCertList  ::=  SEQUENCE  {
    378               */
    379              crl->tbs.p = p;
   \       0xB0   0x9801             LDR      R0,[SP, #+4]
   \       0xB2   0x6168             STR      R0,[R5, #+20]
    380          
    381              if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
    382                      MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
   \       0xB4   0x2330             MOVS     R3,#+48
   \       0xB6   0xAA02             ADD      R2,SP,#+8
   \       0xB8   0x4621             MOV      R1,R4
   \       0xBA   0xA801             ADD      R0,SP,#+4
   \       0xBC   0x....'....        BL       mbedtls_asn1_get_tag
   \       0xC0   0x0004             MOVS     R4,R0
   \       0xC2   0xD141             BNE.N    ??mbedtls_x509_crl_parse_der_11
    383              {
    384                  mbedtls_x509_crl_free( crl );
    385                  return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    386              }
    387          
    388              end = p + len;
   \       0xC4   0x9801             LDR      R0,[SP, #+4]
   \       0xC6   0x9902             LDR      R1,[SP, #+8]
   \       0xC8   0x1846             ADDS     R6,R0,R1
    389              crl->tbs.len = end - crl->tbs.p;
   \       0xCA   0x6968             LDR      R0,[R5, #+20]
   \       0xCC   0x1A30             SUBS     R0,R6,R0
   \       0xCE   0x6128             STR      R0,[R5, #+16]
    390          
    391              /*
    392               * Version  ::=  INTEGER  OPTIONAL {  v1(0), v2(1)  }
    393               *               -- if present, MUST be v2
    394               *
    395               * signature            AlgorithmIdentifier
    396               */
    397              if( ( ret = x509_crl_get_version( &p, end, &crl->version ) ) != 0 ||
    398                  ( ret = mbedtls_x509_get_alg( &p, end, &crl->sig_oid, &sig_params1 ) ) != 0 )
   \       0xD0   0xF105 0x0218      ADD      R2,R5,#+24
   \       0xD4   0x4631             MOV      R1,R6
   \       0xD6   0xA801             ADD      R0,SP,#+4
   \       0xD8   0x....'....        BL       x509_crl_get_version
   \       0xDC   0x0004             MOVS     R4,R0
   \       0xDE   0xF040 0x80A6      BNE.W    ??mbedtls_x509_crl_parse_der_12
   \       0xE2   0xAB03             ADD      R3,SP,#+12
   \       0xE4   0xF105 0x021C      ADD      R2,R5,#+28
   \       0xE8   0x4631             MOV      R1,R6
   \       0xEA   0xA801             ADD      R0,SP,#+4
   \       0xEC   0x....'....        BL       mbedtls_x509_get_alg
   \       0xF0   0x0004             MOVS     R4,R0
   \       0xF2   0xF040 0x809C      BNE.W    ??mbedtls_x509_crl_parse_der_12
    399              {
    400                  mbedtls_x509_crl_free( crl );
    401                  return( ret );
    402              }
    403          
    404              if( crl->version < 0 || crl->version > 1 )
   \       0xF6   0x69A8             LDR      R0,[R5, #+24]
   \       0xF8   0x2802             CMP      R0,#+2
   \       0xFA   0xD305             BCC.N    ??mbedtls_x509_crl_parse_der_13
    405              {
    406                  mbedtls_x509_crl_free( crl );
   \       0xFC   0x4628             MOV      R0,R5
   \       0xFE   0x....'....        BL       mbedtls_x509_crl_free
    407                  return( MBEDTLS_ERR_X509_UNKNOWN_VERSION );
   \      0x102   0x....'....        LDR.W    R0,??DataTable6_6  ;; 0xffffda80
   \      0x106   0xE0A0             B.N      ??mbedtls_x509_crl_parse_der_2
    408              }
    409          
    410              crl->version++;
   \                     ??mbedtls_x509_crl_parse_der_13: (+1)
   \      0x108   0x1C40             ADDS     R0,R0,#+1
   \      0x10A   0x61A8             STR      R0,[R5, #+24]
    411          
    412              if( ( ret = mbedtls_x509_get_sig_alg( &crl->sig_oid, &sig_params1,
    413                                            &crl->sig_md, &crl->sig_pk,
    414                                            &crl->sig_opts ) ) != 0 )
   \      0x10C   0xF105 0x00EC      ADD      R0,R5,#+236
   \      0x110   0x9000             STR      R0,[SP, #+0]
   \      0x112   0xF105 0x03E9      ADD      R3,R5,#+233
   \      0x116   0xF105 0x02E8      ADD      R2,R5,#+232
   \      0x11A   0xA903             ADD      R1,SP,#+12
   \      0x11C   0xF105 0x001C      ADD      R0,R5,#+28
   \      0x120   0x....'....        BL       mbedtls_x509_get_sig_alg
   \      0x124   0x2800             CMP      R0,#+0
   \      0x126   0xD005             BEQ.N    ??mbedtls_x509_crl_parse_der_14
    415              {
    416                  mbedtls_x509_crl_free( crl );
   \      0x128   0x4628             MOV      R0,R5
   \      0x12A   0x....'....        BL       mbedtls_x509_crl_free
    417                  return( MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG );
   \      0x12E   0x....'....        LDR.W    R0,??DataTable6_7  ;; 0xffffda00
   \      0x132   0xE08A             B.N      ??mbedtls_x509_crl_parse_der_2
    418              }
    419          
    420              /*
    421               * issuer               Name
    422               */
    423              crl->issuer_raw.p = p;
   \                     ??mbedtls_x509_crl_parse_der_14: (+1)
   \      0x134   0x9801             LDR      R0,[SP, #+4]
   \      0x136   0x6328             STR      R0,[R5, #+48]
    424          
    425              if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
    426                      MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
   \      0x138   0x2330             MOVS     R3,#+48
   \      0x13A   0xAA02             ADD      R2,SP,#+8
   \      0x13C   0x4631             MOV      R1,R6
   \      0x13E   0xA801             ADD      R0,SP,#+4
   \      0x140   0x....'....        BL       mbedtls_asn1_get_tag
   \      0x144   0x0004             MOVS     R4,R0
   \      0x146   0xD006             BEQ.N    ??mbedtls_x509_crl_parse_der_15
    427              {
    428                  mbedtls_x509_crl_free( crl );
   \                     ??mbedtls_x509_crl_parse_der_11: (+1)
   \      0x148   0x4628             MOV      R0,R5
   \      0x14A   0x....'....        BL       mbedtls_x509_crl_free
    429                  return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
   \      0x14E   0xF5A4 0x5406      SUB      R4,R4,#+8576
   \      0x152   0x4620             MOV      R0,R4
   \      0x154   0xE079             B.N      ??mbedtls_x509_crl_parse_der_2
    430              }
    431          
    432              if( ( ret = mbedtls_x509_get_name( &p, p + len, &crl->issuer ) ) != 0 )
   \                     ??mbedtls_x509_crl_parse_der_15: (+1)
   \      0x156   0xF105 0x0234      ADD      R2,R5,#+52
   \      0x15A   0x9801             LDR      R0,[SP, #+4]
   \      0x15C   0x9902             LDR      R1,[SP, #+8]
   \      0x15E   0x4401             ADD      R1,R0,R1
   \      0x160   0xA801             ADD      R0,SP,#+4
   \      0x162   0x....'....        BL       mbedtls_x509_get_name
   \      0x166   0x0004             MOVS     R4,R0
   \      0x168   0xD161             BNE.N    ??mbedtls_x509_crl_parse_der_12
    433              {
    434                  mbedtls_x509_crl_free( crl );
    435                  return( ret );
    436              }
    437          
    438              crl->issuer_raw.len = p - crl->issuer_raw.p;
   \      0x16A   0x9901             LDR      R1,[SP, #+4]
   \      0x16C   0x6B28             LDR      R0,[R5, #+48]
   \      0x16E   0x1A09             SUBS     R1,R1,R0
   \      0x170   0x62E9             STR      R1,[R5, #+44]
    439          
    440              /*
    441               * thisUpdate          Time
    442               * nextUpdate          Time OPTIONAL
    443               */
    444              if( ( ret = mbedtls_x509_get_time( &p, end, &crl->this_update ) ) != 0 )
   \      0x172   0xF105 0x0254      ADD      R2,R5,#+84
   \      0x176   0x4631             MOV      R1,R6
   \      0x178   0xA801             ADD      R0,SP,#+4
   \      0x17A   0x....'....        BL       mbedtls_x509_get_time
   \      0x17E   0x0004             MOVS     R4,R0
   \      0x180   0xD155             BNE.N    ??mbedtls_x509_crl_parse_der_12
    445              {
    446                  mbedtls_x509_crl_free( crl );
    447                  return( ret );
    448              }
    449          
    450              if( ( ret = mbedtls_x509_get_time( &p, end, &crl->next_update ) ) != 0 )
   \      0x182   0xF105 0x026C      ADD      R2,R5,#+108
   \      0x186   0x4631             MOV      R1,R6
   \      0x188   0xA801             ADD      R0,SP,#+4
   \      0x18A   0x....'....        BL       mbedtls_x509_get_time
   \      0x18E   0x0004             MOVS     R4,R0
   \      0x190   0xD007             BEQ.N    ??mbedtls_x509_crl_parse_der_16
    451              {
    452                  if( ret != ( MBEDTLS_ERR_X509_INVALID_DATE +
    453                                  MBEDTLS_ERR_ASN1_UNEXPECTED_TAG ) &&
    454                      ret != ( MBEDTLS_ERR_X509_INVALID_DATE +
    455                                  MBEDTLS_ERR_ASN1_OUT_OF_DATA ) )
   \      0x192   0x....'....        LDR.W    R0,??DataTable6_8  ;; 0xffffdb9e
   \      0x196   0x4284             CMP      R4,R0
   \      0x198   0xD003             BEQ.N    ??mbedtls_x509_crl_parse_der_16
   \      0x19A   0x....'....        LDR.W    R0,??DataTable6_9  ;; 0xffffdba0
   \      0x19E   0x4284             CMP      R4,R0
   \      0x1A0   0xD145             BNE.N    ??mbedtls_x509_crl_parse_der_12
    456                  {
    457                      mbedtls_x509_crl_free( crl );
    458                      return( ret );
    459                  }
    460              }
    461          
    462              /*
    463               * revokedCertificates    SEQUENCE OF SEQUENCE   {
    464               *      userCertificate        CertificateSerialNumber,
    465               *      revocationDate         Time,
    466               *      crlEntryExtensions     Extensions OPTIONAL
    467               *                                   -- if present, MUST be v2
    468               *                        } OPTIONAL
    469               */
    470              if( ( ret = x509_get_entries( &p, end, &crl->entry ) ) != 0 )
   \                     ??mbedtls_x509_crl_parse_der_16: (+1)
   \      0x1A2   0xF105 0x0284      ADD      R2,R5,#+132
   \      0x1A6   0x4631             MOV      R1,R6
   \      0x1A8   0xA801             ADD      R0,SP,#+4
   \      0x1AA   0x....'....        BL       x509_get_entries
   \      0x1AE   0x0004             MOVS     R4,R0
   \      0x1B0   0xD13D             BNE.N    ??mbedtls_x509_crl_parse_der_12
    471              {
    472                  mbedtls_x509_crl_free( crl );
    473                  return( ret );
    474              }
    475          
    476              /*
    477               * crlExtensions          EXPLICIT Extensions OPTIONAL
    478               *                              -- if present, MUST be v2
    479               */
    480              if( crl->version == 2 )
   \      0x1B2   0x69A8             LDR      R0,[R5, #+24]
   \      0x1B4   0x2802             CMP      R0,#+2
   \      0x1B6   0xD107             BNE.N    ??mbedtls_x509_crl_parse_der_17
    481              {
    482                  ret = x509_get_crl_ext( &p, end, &crl->crl_ext );
   \      0x1B8   0xF105 0x02C4      ADD      R2,R5,#+196
   \      0x1BC   0x4631             MOV      R1,R6
   \      0x1BE   0xA801             ADD      R0,SP,#+4
   \      0x1C0   0x....'....        BL       x509_get_crl_ext
   \      0x1C4   0x0004             MOVS     R4,R0
    483          
    484                  if( ret != 0 )
   \      0x1C6   0xD132             BNE.N    ??mbedtls_x509_crl_parse_der_12
    485                  {
    486                      mbedtls_x509_crl_free( crl );
    487                      return( ret );
    488                  }
    489              }
    490          
    491              if( p != end )
   \                     ??mbedtls_x509_crl_parse_der_17: (+1)
   \      0x1C8   0x9801             LDR      R0,[SP, #+4]
   \      0x1CA   0x42B0             CMP      R0,R6
   \      0x1CC   0xD137             BNE.N    ??mbedtls_x509_crl_parse_der_10
    492              {
    493                  mbedtls_x509_crl_free( crl );
    494                  return( MBEDTLS_ERR_X509_INVALID_FORMAT +
    495                          MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    496              }
    497          
    498              end = crl->raw.p + crl->raw.len;
   \      0x1CE   0x68A8             LDR      R0,[R5, #+8]
   \      0x1D0   0x6869             LDR      R1,[R5, #+4]
   \      0x1D2   0x1846             ADDS     R6,R0,R1
    499          
    500              /*
    501               *  signatureAlgorithm   AlgorithmIdentifier,
    502               *  signatureValue       BIT STRING
    503               */
    504              if( ( ret = mbedtls_x509_get_alg( &p, end, &sig_oid2, &sig_params2 ) ) != 0 )
   \      0x1D4   0xAB09             ADD      R3,SP,#+36
   \      0x1D6   0xAA06             ADD      R2,SP,#+24
   \      0x1D8   0x4631             MOV      R1,R6
   \      0x1DA   0xA801             ADD      R0,SP,#+4
   \      0x1DC   0x....'....        BL       mbedtls_x509_get_alg
   \      0x1E0   0x0004             MOVS     R4,R0
   \      0x1E2   0xD124             BNE.N    ??mbedtls_x509_crl_parse_der_12
    505              {
    506                  mbedtls_x509_crl_free( crl );
    507                  return( ret );
    508              }
    509          
    510              if( crl->sig_oid.len != sig_oid2.len ||
    511                  memcmp( crl->sig_oid.p, sig_oid2.p, crl->sig_oid.len ) != 0 ||
    512                  sig_params1.len != sig_params2.len ||
    513                  ( sig_params1.len != 0 &&
    514                    memcmp( sig_params1.p, sig_params2.p, sig_params1.len ) != 0 ) )
   \      0x1E4   0x6A28             LDR      R0,[R5, #+32]
   \      0x1E6   0x9907             LDR      R1,[SP, #+28]
   \      0x1E8   0x4288             CMP      R0,R1
   \      0x1EA   0xD113             BNE.N    ??mbedtls_x509_crl_parse_der_18
   \      0x1EC   0x4602             MOV      R2,R0
   \      0x1EE   0x9908             LDR      R1,[SP, #+32]
   \      0x1F0   0x6A68             LDR      R0,[R5, #+36]
   \      0x1F2   0x....'....        BL       memcmp
   \      0x1F6   0x2800             CMP      R0,#+0
   \      0x1F8   0xD10C             BNE.N    ??mbedtls_x509_crl_parse_der_18
   \      0x1FA   0x9804             LDR      R0,[SP, #+16]
   \      0x1FC   0x990A             LDR      R1,[SP, #+40]
   \      0x1FE   0x4288             CMP      R0,R1
   \      0x200   0xD108             BNE.N    ??mbedtls_x509_crl_parse_der_18
   \      0x202   0x2800             CMP      R0,#+0
   \      0x204   0xD00B             BEQ.N    ??mbedtls_x509_crl_parse_der_19
   \      0x206   0x4602             MOV      R2,R0
   \      0x208   0x990B             LDR      R1,[SP, #+44]
   \      0x20A   0x9805             LDR      R0,[SP, #+20]
   \      0x20C   0x....'....        BL       memcmp
   \      0x210   0x2800             CMP      R0,#+0
   \      0x212   0xD004             BEQ.N    ??mbedtls_x509_crl_parse_der_19
    515              {
    516                  mbedtls_x509_crl_free( crl );
   \                     ??mbedtls_x509_crl_parse_der_18: (+1)
   \      0x214   0x4628             MOV      R0,R5
   \      0x216   0x....'....        BL       mbedtls_x509_crl_free
    517                  return( MBEDTLS_ERR_X509_SIG_MISMATCH );
   \      0x21A   0x....             LDR.N    R0,??DataTable6_10  ;; 0xffffd980
   \      0x21C   0xE015             B.N      ??mbedtls_x509_crl_parse_der_2
    518              }
    519          
    520              if( ( ret = mbedtls_x509_get_sig( &p, end, &crl->sig ) ) != 0 )
   \                     ??mbedtls_x509_crl_parse_der_19: (+1)
   \      0x21E   0xF105 0x02DC      ADD      R2,R5,#+220
   \      0x222   0x4631             MOV      R1,R6
   \      0x224   0xA801             ADD      R0,SP,#+4
   \      0x226   0x....'....        BL       mbedtls_x509_get_sig
   \      0x22A   0x0004             MOVS     R4,R0
   \      0x22C   0xD004             BEQ.N    ??mbedtls_x509_crl_parse_der_20
    521              {
    522                  mbedtls_x509_crl_free( crl );
   \                     ??mbedtls_x509_crl_parse_der_12: (+1)
   \      0x22E   0x4628             MOV      R0,R5
   \      0x230   0x....'....        BL       mbedtls_x509_crl_free
    523                  return( ret );
   \      0x234   0x4620             MOV      R0,R4
   \      0x236   0xE008             B.N      ??mbedtls_x509_crl_parse_der_2
    524              }
    525          
    526              if( p != end )
   \                     ??mbedtls_x509_crl_parse_der_20: (+1)
   \      0x238   0x9801             LDR      R0,[SP, #+4]
   \      0x23A   0x42B0             CMP      R0,R6
   \      0x23C   0xD004             BEQ.N    ??mbedtls_x509_crl_parse_der_21
    527              {
    528                  mbedtls_x509_crl_free( crl );
   \                     ??mbedtls_x509_crl_parse_der_10: (+1)
   \      0x23E   0x4628             MOV      R0,R5
   \      0x240   0x....'....        BL       mbedtls_x509_crl_free
    529                  return( MBEDTLS_ERR_X509_INVALID_FORMAT +
    530                          MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   \      0x244   0x....             LDR.N    R0,??DataTable6_11  ;; 0xffffde1a
   \      0x246   0xE000             B.N      ??mbedtls_x509_crl_parse_der_2
    531              }
    532          
    533              return( 0 );
   \                     ??mbedtls_x509_crl_parse_der_21: (+1)
   \      0x248   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_x509_crl_parse_der_2: (+1)
   \      0x24A   0xB00C             ADD      SP,SP,#+48
   \      0x24C   0xBD70             POP      {R4-R6,PC}       ;; return
   \                     ??mbedtls_x509_crl_parse_der_4: (+1)
   \      0x24E   0x69A8             LDR      R0,[R5, #+24]
   \      0x250   0x2800             CMP      R0,#+0
   \      0x252   0xF43F 0xAF01      BEQ.W    ??mbedtls_x509_crl_parse_der_6
   \      0x256   0xF8D5 0x00F0      LDR      R0,[R5, #+240]
   \      0x25A   0x2800             CMP      R0,#+0
   \      0x25C   0xF47F 0xAEFC      BNE.W    ??mbedtls_x509_crl_parse_der_6
   \      0x260   0x21F4             MOVS     R1,#+244
   \      0x262   0x2001             MOVS     R0,#+1
   \      0x264   0x....'....        BL       mbedtls_calloc
   \      0x268   0xF8C5 0x00F0      STR      R0,[R5, #+240]
   \      0x26C   0x2800             CMP      R0,#+0
   \      0x26E   0xF47F 0xAEEF      BNE.W    ??mbedtls_x509_crl_parse_der_5
   \      0x272   0x4628             MOV      R0,R5
   \      0x274   0x....'....        BL       mbedtls_x509_crl_free
   \      0x278   0x....             LDR.N    R0,??DataTable6_3  ;; 0xffffd780
   \      0x27A   0xE7E6             B.N      ??mbedtls_x509_crl_parse_der_2
    534          }
    535          
    536          /*
    537           * Parse one or more CRLs and add them to the chained list
    538           */

   \                                 In section .text, align 2, keep-with-next
    539          int mbedtls_x509_crl_parse( mbedtls_x509_crl *chain, const unsigned char *buf, size_t buflen )
    540          {
   \                     mbedtls_x509_crl_parse: (+1)
   \        0x0   0xE92D 0x41F8      PUSH     {R3-R8,LR}
   \        0x4   0xB087             SUB      SP,SP,#+28
   \        0x6   0x4607             MOV      R7,R0
   \        0x8   0x4688             MOV      R8,R1
   \        0xA   0x4616             MOV      R6,R2
    541          #if defined(MBEDTLS_PEM_PARSE_C)
    542              int ret;
    543              size_t use_len;
    544              mbedtls_pem_context pem;
    545              int is_pem = 0;
   \        0xC   0x2400             MOVS     R4,#+0
    546          
    547              if( chain == NULL || buf == NULL )
   \        0xE   0x2F00             CMP      R7,#+0
   \       0x10   0xD002             BEQ.N    ??mbedtls_x509_crl_parse_0
   \       0x12   0xF1B8 0x0F00      CMP      R8,#+0
   \       0x16   0xD134             BNE.N    ??mbedtls_x509_crl_parse_1
    548                  return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   \                     ??mbedtls_x509_crl_parse_0: (+1)
   \       0x18   0x....             LDR.N    R0,??DataTable6_4  ;; 0xffffd800
   \       0x1A   0xE02F             B.N      ??mbedtls_x509_crl_parse_2
    549          
    550              do
    551              {
    552                  mbedtls_pem_init( &pem );
    553          
    554                  // Avoid calling mbedtls_pem_read_buffer() on non-null-terminated
    555                  // string
    556                  if( buflen == 0 || buf[buflen - 1] != '\0' )
    557                      ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
    558                  else
    559                      ret = mbedtls_pem_read_buffer( &pem,
    560                                                     "-----BEGIN X509 CRL-----",
    561                                                     "-----END X509 CRL-----",
    562                                                      buf, NULL, 0, &use_len );
   \                     ??mbedtls_x509_crl_parse_3: (+1)
   \       0x1C   0xA803             ADD      R0,SP,#+12
   \       0x1E   0x9002             STR      R0,[SP, #+8]
   \       0x20   0x2000             MOVS     R0,#+0
   \       0x22   0x9001             STR      R0,[SP, #+4]
   \       0x24   0x9000             STR      R0,[SP, #+0]
   \       0x26   0x4643             MOV      R3,R8
   \       0x28   0x....             LDR.N    R2,??DataTable6_12
   \       0x2A   0x....             LDR.N    R1,??DataTable6_13
   \       0x2C   0xA804             ADD      R0,SP,#+16
   \       0x2E   0x....'....        BL       mbedtls_pem_read_buffer
   \       0x32   0x4605             MOV      R5,R0
    563          
    564                  if( ret == 0 )
   \                     ??mbedtls_x509_crl_parse_4: (+1)
   \       0x34   0x2D00             CMP      R5,#+0
   \       0x36   0xD111             BNE.N    ??mbedtls_x509_crl_parse_5
    565                  {
    566                      /*
    567                       * Was PEM encoded
    568                       */
    569                      is_pem = 1;
   \       0x38   0x2401             MOVS     R4,#+1
    570          
    571                      buflen -= use_len;
   \       0x3A   0x9803             LDR      R0,[SP, #+12]
   \       0x3C   0x1A36             SUBS     R6,R6,R0
    572                      buf += use_len;
   \       0x3E   0x4480             ADD      R8,R8,R0
    573          
    574                      if( ( ret = mbedtls_x509_crl_parse_der( chain,
    575                                                      pem.buf, pem.buflen ) ) != 0 )
   \       0x40   0x9A05             LDR      R2,[SP, #+20]
   \       0x42   0x9904             LDR      R1,[SP, #+16]
   \       0x44   0x4638             MOV      R0,R7
   \       0x46   0x....'....        BL       mbedtls_x509_crl_parse_der
   \       0x4A   0x0005             MOVS     R5,R0
   \       0x4C   0xD008             BEQ.N    ??mbedtls_x509_crl_parse_6
    576                      {
    577                          mbedtls_pem_free( &pem );
    578                          return( ret );
    579                      }
    580                  }
    581                  else if( is_pem )
    582                  {
    583                      mbedtls_pem_free( &pem );
   \                     ??mbedtls_x509_crl_parse_7: (+1)
   \       0x4E   0xA804             ADD      R0,SP,#+16
   \       0x50   0x....'....        BL       mbedtls_pem_free
    584                      return( ret );
   \       0x54   0x4628             MOV      R0,R5
   \       0x56   0xE011             B.N      ??mbedtls_x509_crl_parse_2
    585                  }
    586          
    587                  mbedtls_pem_free( &pem );
    588              }
    589              /* In the PEM case, buflen is 1 at the end, for the terminated NULL byte.
    590               * And a valid CRL cannot be less than 1 byte anyway. */
    591              while( is_pem && buflen > 1 );
    592          
    593              if( is_pem )
    594                  return( 0 );
   \                     ??mbedtls_x509_crl_parse_8: (+1)
   \       0x58   0x2000             MOVS     R0,#+0
   \       0x5A   0xE00F             B.N      ??mbedtls_x509_crl_parse_2
   \                     ??mbedtls_x509_crl_parse_5: (+1)
   \       0x5C   0x2C00             CMP      R4,#+0
   \       0x5E   0xD1F6             BNE.N    ??mbedtls_x509_crl_parse_7
   \                     ??mbedtls_x509_crl_parse_6: (+1)
   \       0x60   0xA804             ADD      R0,SP,#+16
   \       0x62   0x....'....        BL       mbedtls_pem_free
   \       0x66   0x2C00             CMP      R4,#+0
   \       0x68   0xD001             BEQ.N    ??mbedtls_x509_crl_parse_9
   \       0x6A   0x2E02             CMP      R6,#+2
   \       0x6C   0xD209             BCS.N    ??mbedtls_x509_crl_parse_1
   \                     ??mbedtls_x509_crl_parse_9: (+1)
   \       0x6E   0x2C00             CMP      R4,#+0
   \       0x70   0xD1F2             BNE.N    ??mbedtls_x509_crl_parse_8
    595              else
    596          #endif /* MBEDTLS_PEM_PARSE_C */
    597                  return( mbedtls_x509_crl_parse_der( chain, buf, buflen ) );
   \       0x72   0x4632             MOV      R2,R6
   \       0x74   0x4641             MOV      R1,R8
   \       0x76   0x4638             MOV      R0,R7
   \       0x78   0x....'....        BL       mbedtls_x509_crl_parse_der
   \                     ??mbedtls_x509_crl_parse_2: (+1)
   \       0x7C   0xB008             ADD      SP,SP,#+32
   \       0x7E   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   \                     ??mbedtls_x509_crl_parse_1: (+1)
   \       0x82   0xA804             ADD      R0,SP,#+16
   \       0x84   0x....'....        BL       mbedtls_pem_init
   \       0x88   0x2E00             CMP      R6,#+0
   \       0x8A   0xD005             BEQ.N    ??mbedtls_x509_crl_parse_10
   \       0x8C   0xEB08 0x0006      ADD      R0,R8,R6
   \       0x90   0xF810 0x0C01      LDRB     R0,[R0, #-1]
   \       0x94   0x2800             CMP      R0,#+0
   \       0x96   0xD0C1             BEQ.N    ??mbedtls_x509_crl_parse_3
   \                     ??mbedtls_x509_crl_parse_10: (+1)
   \       0x98   0x....             LDR.N    R5,??DataTable6_14  ;; 0xffffef80
   \       0x9A   0xE7CB             B.N      ??mbedtls_x509_crl_parse_4
    598          }
    599          
    600          #if defined(MBEDTLS_FS_IO)
    601          /*
    602           * Load one or more CRLs and add them to the chained list
    603           */
    604          int mbedtls_x509_crl_parse_file( mbedtls_x509_crl *chain, const char *path )
    605          {
    606              int ret;
    607              size_t n;
    608              unsigned char *buf;
    609          
    610              if( ( ret = mbedtls_pk_load_file( path, &buf, &n ) ) != 0 )
    611                  return( ret );
    612          
    613              ret = mbedtls_x509_crl_parse( chain, buf, n );
    614          
    615              mbedtls_platform_zeroize( buf, n );
    616              mbedtls_free( buf );
    617          
    618              return( ret );
    619          }
    620          #endif /* MBEDTLS_FS_IO */
    621          
    622          /*
    623           * Return an informational string about the certificate.
    624           */
    625          #define BEFORE_COLON    14
    626          #define BC              "14"
    627          /*
    628           * Return an informational string about the CRL.
    629           */

   \                                 In section .text, align 2, keep-with-next
    630          int mbedtls_x509_crl_info( char *buf, size_t size, const char *prefix,
    631                             const mbedtls_x509_crl *crl )
    632          {
   \                     mbedtls_x509_crl_info: (+1)
   \        0x0   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \        0x4   0xB086             SUB      SP,SP,#+24
   \        0x6   0x4605             MOV      R5,R0
   \        0x8   0x460E             MOV      R6,R1
   \        0xA   0x4690             MOV      R8,R2
   \        0xC   0x461F             MOV      R7,R3
    633              int ret;
    634              size_t n;
    635              char *p;
    636              const mbedtls_x509_crl_entry *entry;
    637          
    638              p = buf;
    639              n = size;
    640          
    641              ret = mbedtls_snprintf( p, n, "%sCRL version   : %d",
    642                                         prefix, crl->version );
   \        0xE   0x69B8             LDR      R0,[R7, #+24]
   \       0x10   0x9000             STR      R0,[SP, #+0]
   \       0x12   0x4643             MOV      R3,R8
   \       0x14   0x....             LDR.N    R2,??DataTable6_15
   \       0x16   0x4628             MOV      R0,R5
   \       0x18   0x....'....        BL       snprintf
    643              MBEDTLS_X509_SAFE_SNPRINTF;
   \       0x1C   0x2800             CMP      R0,#+0
   \       0x1E   0xF100 0x80C7      BMI.W    ??mbedtls_x509_crl_info_0
   \       0x22   0x42B0             CMP      R0,R6
   \       0x24   0xF080 0x80C4      BCS.W    ??mbedtls_x509_crl_info_0
   \       0x28   0x1A34             SUBS     R4,R6,R0
   \       0x2A   0x4405             ADD      R5,R5,R0
    644          
    645              ret = mbedtls_snprintf( p, n, "\n%sissuer name   : ", prefix );
   \       0x2C   0x4643             MOV      R3,R8
   \       0x2E   0x....             LDR.N    R2,??DataTable6_16
   \       0x30   0x4621             MOV      R1,R4
   \       0x32   0x4628             MOV      R0,R5
   \       0x34   0x....'....        BL       snprintf
    646              MBEDTLS_X509_SAFE_SNPRINTF;
   \       0x38   0x2800             CMP      R0,#+0
   \       0x3A   0xF100 0x80B9      BMI.W    ??mbedtls_x509_crl_info_0
   \       0x3E   0x42A0             CMP      R0,R4
   \       0x40   0xF080 0x80B6      BCS.W    ??mbedtls_x509_crl_info_0
   \       0x44   0x1A24             SUBS     R4,R4,R0
   \       0x46   0x4405             ADD      R5,R5,R0
    647              ret = mbedtls_x509_dn_gets( p, n, &crl->issuer );
   \       0x48   0xF107 0x0234      ADD      R2,R7,#+52
   \       0x4C   0x4621             MOV      R1,R4
   \       0x4E   0x4628             MOV      R0,R5
   \       0x50   0x....'....        BL       mbedtls_x509_dn_gets
    648              MBEDTLS_X509_SAFE_SNPRINTF;
   \       0x54   0x2800             CMP      R0,#+0
   \       0x56   0xF100 0x80AB      BMI.W    ??mbedtls_x509_crl_info_0
   \       0x5A   0x42A0             CMP      R0,R4
   \       0x5C   0xF080 0x80A8      BCS.W    ??mbedtls_x509_crl_info_0
   \       0x60   0x1A24             SUBS     R4,R4,R0
   \       0x62   0x4405             ADD      R5,R5,R0
    649          
    650              ret = mbedtls_snprintf( p, n, "\n%sthis update   : " \
    651                             "%04d-%02d-%02d %02d:%02d:%02d", prefix,
    652                             crl->this_update.year, crl->this_update.mon,
    653                             crl->this_update.day,  crl->this_update.hour,
    654                             crl->this_update.min,  crl->this_update.sec );
   \       0x64   0x6EB8             LDR      R0,[R7, #+104]
   \       0x66   0x9005             STR      R0,[SP, #+20]
   \       0x68   0x6E78             LDR      R0,[R7, #+100]
   \       0x6A   0x9004             STR      R0,[SP, #+16]
   \       0x6C   0x6E38             LDR      R0,[R7, #+96]
   \       0x6E   0x9003             STR      R0,[SP, #+12]
   \       0x70   0x6DF8             LDR      R0,[R7, #+92]
   \       0x72   0x9002             STR      R0,[SP, #+8]
   \       0x74   0x6DB8             LDR      R0,[R7, #+88]
   \       0x76   0x9001             STR      R0,[SP, #+4]
   \       0x78   0x6D78             LDR      R0,[R7, #+84]
   \       0x7A   0x9000             STR      R0,[SP, #+0]
   \       0x7C   0x4643             MOV      R3,R8
   \       0x7E   0x....             LDR.N    R2,??DataTable6_17
   \       0x80   0x4621             MOV      R1,R4
   \       0x82   0x4628             MOV      R0,R5
   \       0x84   0x....'....        BL       snprintf
    655              MBEDTLS_X509_SAFE_SNPRINTF;
   \       0x88   0x2800             CMP      R0,#+0
   \       0x8A   0xF100 0x8091      BMI.W    ??mbedtls_x509_crl_info_0
   \       0x8E   0x42A0             CMP      R0,R4
   \       0x90   0xF080 0x808E      BCS.W    ??mbedtls_x509_crl_info_0
   \       0x94   0x1A24             SUBS     R4,R4,R0
   \       0x96   0x4405             ADD      R5,R5,R0
    656          
    657              ret = mbedtls_snprintf( p, n, "\n%snext update   : " \
    658                             "%04d-%02d-%02d %02d:%02d:%02d", prefix,
    659                             crl->next_update.year, crl->next_update.mon,
    660                             crl->next_update.day,  crl->next_update.hour,
    661                             crl->next_update.min,  crl->next_update.sec );
   \       0x98   0xF8D7 0x0080      LDR      R0,[R7, #+128]
   \       0x9C   0x9005             STR      R0,[SP, #+20]
   \       0x9E   0x6FF8             LDR      R0,[R7, #+124]
   \       0xA0   0x9004             STR      R0,[SP, #+16]
   \       0xA2   0x6FB8             LDR      R0,[R7, #+120]
   \       0xA4   0x9003             STR      R0,[SP, #+12]
   \       0xA6   0x6F78             LDR      R0,[R7, #+116]
   \       0xA8   0x9002             STR      R0,[SP, #+8]
   \       0xAA   0x6F38             LDR      R0,[R7, #+112]
   \       0xAC   0x9001             STR      R0,[SP, #+4]
   \       0xAE   0x6EF8             LDR      R0,[R7, #+108]
   \       0xB0   0x9000             STR      R0,[SP, #+0]
   \       0xB2   0x4643             MOV      R3,R8
   \       0xB4   0x....             LDR.N    R2,??DataTable6_18
   \       0xB6   0x4621             MOV      R1,R4
   \       0xB8   0x4628             MOV      R0,R5
   \       0xBA   0x....'....        BL       snprintf
    662              MBEDTLS_X509_SAFE_SNPRINTF;
   \       0xBE   0x2800             CMP      R0,#+0
   \       0xC0   0xD476             BMI.N    ??mbedtls_x509_crl_info_0
   \       0xC2   0x42A0             CMP      R0,R4
   \       0xC4   0xD274             BCS.N    ??mbedtls_x509_crl_info_0
   \       0xC6   0x1A24             SUBS     R4,R4,R0
   \       0xC8   0xEB05 0x0900      ADD      R9,R5,R0
    663          
    664              entry = &crl->entry;
   \       0xCC   0xF107 0x0584      ADD      R5,R7,#+132
    665          
    666              ret = mbedtls_snprintf( p, n, "\n%sRevoked certificates:",
    667                                         prefix );
   \       0xD0   0x4643             MOV      R3,R8
   \       0xD2   0x....             LDR.N    R2,??DataTable6_19
   \       0xD4   0x4621             MOV      R1,R4
   \       0xD6   0x4648             MOV      R0,R9
   \       0xD8   0x....'....        BL       snprintf
    668              MBEDTLS_X509_SAFE_SNPRINTF;
   \       0xDC   0x2800             CMP      R0,#+0
   \       0xDE   0xD467             BMI.N    ??mbedtls_x509_crl_info_0
   \       0xE0   0x42A0             CMP      R0,R4
   \       0xE2   0xD265             BCS.N    ??mbedtls_x509_crl_info_0
   \       0xE4   0x1A24             SUBS     R4,R4,R0
   \       0xE6   0x4481             ADD      R9,R9,R0
    669          
    670              while( entry != NULL && entry->raw.len != 0 )
   \                     ??mbedtls_x509_crl_info_1: (+1)
   \       0xE8   0x2D00             CMP      R5,#+0
   \       0xEA   0xD038             BEQ.N    ??mbedtls_x509_crl_info_2
   \       0xEC   0x6868             LDR      R0,[R5, #+4]
   \       0xEE   0x2800             CMP      R0,#+0
   \       0xF0   0xD035             BEQ.N    ??mbedtls_x509_crl_info_2
    671              {
    672                  ret = mbedtls_snprintf( p, n, "\n%sserial number: ",
    673                                         prefix );
   \       0xF2   0x4643             MOV      R3,R8
   \       0xF4   0x....             LDR.N    R2,??DataTable6_20
   \       0xF6   0x4621             MOV      R1,R4
   \       0xF8   0x4648             MOV      R0,R9
   \       0xFA   0x....'....        BL       snprintf
    674                  MBEDTLS_X509_SAFE_SNPRINTF;
   \       0xFE   0x2800             CMP      R0,#+0
   \      0x100   0xD456             BMI.N    ??mbedtls_x509_crl_info_0
   \      0x102   0x42A0             CMP      R0,R4
   \      0x104   0xD254             BCS.N    ??mbedtls_x509_crl_info_0
   \      0x106   0x1A24             SUBS     R4,R4,R0
   \      0x108   0x4481             ADD      R9,R9,R0
    675          
    676                  ret = mbedtls_x509_serial_gets( p, n, &entry->serial );
   \      0x10A   0xF105 0x020C      ADD      R2,R5,#+12
   \      0x10E   0x4621             MOV      R1,R4
   \      0x110   0x4648             MOV      R0,R9
   \      0x112   0x....'....        BL       mbedtls_x509_serial_gets
    677                  MBEDTLS_X509_SAFE_SNPRINTF;
   \      0x116   0x2800             CMP      R0,#+0
   \      0x118   0xD44A             BMI.N    ??mbedtls_x509_crl_info_0
   \      0x11A   0x42A0             CMP      R0,R4
   \      0x11C   0xD248             BCS.N    ??mbedtls_x509_crl_info_0
   \      0x11E   0x1A24             SUBS     R4,R4,R0
   \      0x120   0x4481             ADD      R9,R9,R0
    678          
    679                  ret = mbedtls_snprintf( p, n, " revocation date: " \
    680                             "%04d-%02d-%02d %02d:%02d:%02d",
    681                             entry->revocation_date.year, entry->revocation_date.mon,
    682                             entry->revocation_date.day,  entry->revocation_date.hour,
    683                             entry->revocation_date.min,  entry->revocation_date.sec );
   \      0x122   0x6AE8             LDR      R0,[R5, #+44]
   \      0x124   0x9004             STR      R0,[SP, #+16]
   \      0x126   0x6AA8             LDR      R0,[R5, #+40]
   \      0x128   0x9003             STR      R0,[SP, #+12]
   \      0x12A   0x6A68             LDR      R0,[R5, #+36]
   \      0x12C   0x9002             STR      R0,[SP, #+8]
   \      0x12E   0x6A28             LDR      R0,[R5, #+32]
   \      0x130   0x9001             STR      R0,[SP, #+4]
   \      0x132   0x69E8             LDR      R0,[R5, #+28]
   \      0x134   0x9000             STR      R0,[SP, #+0]
   \      0x136   0x69AB             LDR      R3,[R5, #+24]
   \      0x138   0x....             LDR.N    R2,??DataTable6_21
   \      0x13A   0x4621             MOV      R1,R4
   \      0x13C   0x4648             MOV      R0,R9
   \      0x13E   0x....'....        BL       snprintf
    684                  MBEDTLS_X509_SAFE_SNPRINTF;
   \      0x142   0x2800             CMP      R0,#+0
   \      0x144   0xD434             BMI.N    ??mbedtls_x509_crl_info_0
   \      0x146   0x42A0             CMP      R0,R4
   \      0x148   0xD232             BCS.N    ??mbedtls_x509_crl_info_0
   \      0x14A   0x1A24             SUBS     R4,R4,R0
   \      0x14C   0x4481             ADD      R9,R9,R0
    685          
    686                  entry = entry->next;
   \      0x14E   0x6BED             LDR      R5,[R5, #+60]
   \      0x150   0xE7CA             B.N      ??mbedtls_x509_crl_info_1
    687              }
    688          
    689              ret = mbedtls_snprintf( p, n, "\n%ssigned using  : ", prefix );
    690              MBEDTLS_X509_SAFE_SNPRINTF;
    691          
    692              ret = mbedtls_x509_sig_alg_gets( p, n, &crl->sig_oid, crl->sig_pk, crl->sig_md,
    693                                       crl->sig_opts );
    694              MBEDTLS_X509_SAFE_SNPRINTF;
    695          
    696              ret = mbedtls_snprintf( p, n, "\n" );
    697              MBEDTLS_X509_SAFE_SNPRINTF;
    698          
    699              return( (int) ( size - n ) );
   \                     ??mbedtls_x509_crl_info_3: (+1)
   \      0x152   0x1B36             SUBS     R6,R6,R4
   \      0x154   0x1986             ADDS     R6,R0,R6
   \      0x156   0x4630             MOV      R0,R6
   \                     ??mbedtls_x509_crl_info_4: (+1)
   \      0x158   0xB007             ADD      SP,SP,#+28
   \      0x15A   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
   \                     ??mbedtls_x509_crl_info_2: (+1)
   \      0x15E   0x4643             MOV      R3,R8
   \      0x160   0x....             LDR.N    R2,??DataTable6_22
   \      0x162   0x4621             MOV      R1,R4
   \      0x164   0x4648             MOV      R0,R9
   \      0x166   0x....'....        BL       snprintf
   \      0x16A   0x2800             CMP      R0,#+0
   \      0x16C   0xD420             BMI.N    ??mbedtls_x509_crl_info_0
   \      0x16E   0x42A0             CMP      R0,R4
   \      0x170   0xD21E             BCS.N    ??mbedtls_x509_crl_info_0
   \      0x172   0x1A24             SUBS     R4,R4,R0
   \      0x174   0xEB09 0x0500      ADD      R5,R9,R0
   \      0x178   0xF8D7 0x00EC      LDR      R0,[R7, #+236]
   \      0x17C   0x9001             STR      R0,[SP, #+4]
   \      0x17E   0xF897 0x00E8      LDRB     R0,[R7, #+232]
   \      0x182   0x9000             STR      R0,[SP, #+0]
   \      0x184   0xF897 0x30E9      LDRB     R3,[R7, #+233]
   \      0x188   0xF107 0x021C      ADD      R2,R7,#+28
   \      0x18C   0x4621             MOV      R1,R4
   \      0x18E   0x4628             MOV      R0,R5
   \      0x190   0x....'....        BL       mbedtls_x509_sig_alg_gets
   \      0x194   0x2800             CMP      R0,#+0
   \      0x196   0xD40B             BMI.N    ??mbedtls_x509_crl_info_0
   \      0x198   0x42A0             CMP      R0,R4
   \      0x19A   0xD209             BCS.N    ??mbedtls_x509_crl_info_0
   \      0x19C   0x1A24             SUBS     R4,R4,R0
   \      0x19E   0x....             ADR.N    R2,??DataTable6  ;; "\n"
   \      0x1A0   0x4621             MOV      R1,R4
   \      0x1A2   0x4428             ADD      R0,R5,R0
   \      0x1A4   0x....'....        BL       snprintf
   \      0x1A8   0x2800             CMP      R0,#+0
   \      0x1AA   0xD401             BMI.N    ??mbedtls_x509_crl_info_0
   \      0x1AC   0x42A0             CMP      R0,R4
   \      0x1AE   0xD3D0             BCC.N    ??mbedtls_x509_crl_info_3
   \                     ??mbedtls_x509_crl_info_0: (+1)
   \      0x1B0   0x....             LDR.N    R0,??DataTable6_23  ;; 0xffffd680
   \      0x1B2   0xE7D1             B.N      ??mbedtls_x509_crl_info_4
    700          }
    701          
    702          /*
    703           * Initialize a CRL chain
    704           */

   \                                 In section .text, align 2, keep-with-next
    705          void mbedtls_x509_crl_init( mbedtls_x509_crl *crl )
    706          {
    707              memset( crl, 0, sizeof(mbedtls_x509_crl) );
   \                     mbedtls_x509_crl_init: (+1)
   \        0x0   0x2200             MOVS     R2,#+0
   \        0x2   0x21F4             MOVS     R1,#+244
   \        0x4   0x....'....        B.W      __aeabi_memset4
    708          }
    709          
    710          /*
    711           * Unallocate all CRL data
    712           */

   \                                 In section .text, align 2, keep-with-next
    713          void mbedtls_x509_crl_free( mbedtls_x509_crl *crl )
    714          {
   \                     mbedtls_x509_crl_free: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x4606             MOV      R6,R0
    715              mbedtls_x509_crl *crl_cur = crl;
   \        0x4   0x0035             MOVS     R5,R6
    716              mbedtls_x509_crl *crl_prv;
    717              mbedtls_x509_name *name_cur;
    718              mbedtls_x509_name *name_prv;
    719              mbedtls_x509_crl_entry *entry_cur;
    720              mbedtls_x509_crl_entry *entry_prv;
    721          
    722              if( crl == NULL )
   \        0x6   0xD03A             BEQ.N    ??mbedtls_x509_crl_free_0
    723                  return;
    724          
    725              do
    726              {
    727          #if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
    728                  mbedtls_free( crl_cur->sig_opts );
   \                     ??mbedtls_x509_crl_free_1: (+1)
   \        0x8   0xF8D5 0x00EC      LDR      R0,[R5, #+236]
   \        0xC   0x....'....        BL       mbedtls_free
    729          #endif
    730          
    731                  name_cur = crl_cur->issuer.next;
   \       0x10   0x6CEC             LDR      R4,[R5, #+76]
   \       0x12   0xE008             B.N      ??mbedtls_x509_crl_free_2
    732                  while( name_cur != NULL )
    733                  {
    734                      name_prv = name_cur;
   \                     ??mbedtls_x509_crl_free_3: (+1)
   \       0x14   0x4627             MOV      R7,R4
    735                      name_cur = name_cur->next;
   \       0x16   0x69A4             LDR      R4,[R4, #+24]
    736                      mbedtls_platform_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
   \       0x18   0x2120             MOVS     R1,#+32
   \       0x1A   0x4638             MOV      R0,R7
   \       0x1C   0x....'....        BL       mbedtls_platform_zeroize
    737                      mbedtls_free( name_prv );
   \       0x20   0x4638             MOV      R0,R7
   \       0x22   0x....'....        BL       mbedtls_free
    738                  }
   \                     ??mbedtls_x509_crl_free_2: (+1)
   \       0x26   0x2C00             CMP      R4,#+0
   \       0x28   0xD1F4             BNE.N    ??mbedtls_x509_crl_free_3
    739          
    740                  entry_cur = crl_cur->entry.next;
   \       0x2A   0xF8D5 0x40C0      LDR      R4,[R5, #+192]
   \       0x2E   0xE008             B.N      ??mbedtls_x509_crl_free_4
    741                  while( entry_cur != NULL )
    742                  {
    743                      entry_prv = entry_cur;
   \                     ??mbedtls_x509_crl_free_5: (+1)
   \       0x30   0x4627             MOV      R7,R4
    744                      entry_cur = entry_cur->next;
   \       0x32   0x6BE4             LDR      R4,[R4, #+60]
    745                      mbedtls_platform_zeroize( entry_prv,
    746                                                sizeof( mbedtls_x509_crl_entry ) );
   \       0x34   0x2140             MOVS     R1,#+64
   \       0x36   0x4638             MOV      R0,R7
   \       0x38   0x....'....        BL       mbedtls_platform_zeroize
    747                      mbedtls_free( entry_prv );
   \       0x3C   0x4638             MOV      R0,R7
   \       0x3E   0x....'....        BL       mbedtls_free
    748                  }
   \                     ??mbedtls_x509_crl_free_4: (+1)
   \       0x42   0x2C00             CMP      R4,#+0
   \       0x44   0xD1F4             BNE.N    ??mbedtls_x509_crl_free_5
    749          
    750                  if( crl_cur->raw.p != NULL )
   \       0x46   0x68A8             LDR      R0,[R5, #+8]
   \       0x48   0x2800             CMP      R0,#+0
   \       0x4A   0xD005             BEQ.N    ??mbedtls_x509_crl_free_6
    751                  {
    752                      mbedtls_platform_zeroize( crl_cur->raw.p, crl_cur->raw.len );
   \       0x4C   0x6869             LDR      R1,[R5, #+4]
   \       0x4E   0x....'....        BL       mbedtls_platform_zeroize
    753                      mbedtls_free( crl_cur->raw.p );
   \       0x52   0x68A8             LDR      R0,[R5, #+8]
   \       0x54   0x....'....        BL       mbedtls_free
    754                  }
    755          
    756                  crl_cur = crl_cur->next;
   \                     ??mbedtls_x509_crl_free_6: (+1)
   \       0x58   0xF8D5 0x50F0      LDR      R5,[R5, #+240]
    757              }
    758              while( crl_cur != NULL );
   \       0x5C   0x2D00             CMP      R5,#+0
   \       0x5E   0xD1D3             BNE.N    ??mbedtls_x509_crl_free_1
    759          
    760              crl_cur = crl;
   \       0x60   0x4634             MOV      R4,R6
    761              do
    762              {
    763                  crl_prv = crl_cur;
   \                     ??mbedtls_x509_crl_free_7: (+1)
   \       0x62   0x4625             MOV      R5,R4
    764                  crl_cur = crl_cur->next;
   \       0x64   0xF8D4 0x40F0      LDR      R4,[R4, #+240]
    765          
    766                  mbedtls_platform_zeroize( crl_prv, sizeof( mbedtls_x509_crl ) );
   \       0x68   0x21F4             MOVS     R1,#+244
   \       0x6A   0x4628             MOV      R0,R5
   \       0x6C   0x....'....        BL       mbedtls_platform_zeroize
    767                  if( crl_prv != crl )
   \       0x70   0x42B5             CMP      R5,R6
   \       0x72   0xD002             BEQ.N    ??mbedtls_x509_crl_free_8
    768                      mbedtls_free( crl_prv );
   \       0x74   0x4628             MOV      R0,R5
   \       0x76   0x....'....        BL       mbedtls_free
    769              }
    770              while( crl_cur != NULL );
   \                     ??mbedtls_x509_crl_free_8: (+1)
   \       0x7A   0x2C00             CMP      R4,#+0
   \       0x7C   0xD1F1             BNE.N    ??mbedtls_x509_crl_free_7
    771          }
   \                     ??mbedtls_x509_crl_free_0: (+1)
   \       0x7E   0xBDF1             POP      {R0,R4-R7,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \        0x0   0x0A 0x00          DC8      "\n",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \        0x0   0xFFFF'DA9E        DC32     0xffffda9e

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \        0x0   0xFFFF'DA9A        DC32     0xffffda9a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \        0x0   0xFFFF'D780        DC32     0xffffd780

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \        0x0   0xFFFF'D800        DC32     0xffffd800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \        0x0   0xFFFF'DE80        DC32     0xffffde80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \        0x0   0xFFFF'DA80        DC32     0xffffda80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_7:
   \        0x0   0xFFFF'DA00        DC32     0xffffda00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_8:
   \        0x0   0xFFFF'DB9E        DC32     0xffffdb9e

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_9:
   \        0x0   0xFFFF'DBA0        DC32     0xffffdba0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_10:
   \        0x0   0xFFFF'D980        DC32     0xffffd980

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_11:
   \        0x0   0xFFFF'DE1A        DC32     0xffffde1a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_12:
   \        0x0   0x....'....        DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_13:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_14:
   \        0x0   0xFFFF'EF80        DC32     0xffffef80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_15:
   \        0x0   0x....'....        DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_16:
   \        0x0   0x....'....        DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_17:
   \        0x0   0x....'....        DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_18:
   \        0x0   0x....'....        DC32     ?_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_19:
   \        0x0   0x....'....        DC32     ?_6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_20:
   \        0x0   0x....'....        DC32     ?_7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_21:
   \        0x0   0x....'....        DC32     ?_8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_22:
   \        0x0   0x....'....        DC32     ?_9

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_23:
   \        0x0   0xFFFF'D680        DC32     0xffffd680

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x2D 0x2D          DC8 "-----BEGIN X509 CRL-----"
   \              0x2D 0x2D    
   \              0x2D 0x42    
   \              0x45 0x47    
   \              0x49 0x4E    
   \              0x20 0x58    
   \              0x35 0x30    
   \              0x39 0x20    
   \              0x43 0x52    
   \              0x4C 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x00         
   \       0x19   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_1:
   \        0x0   0x2D 0x2D          DC8 "-----END X509 CRL-----"
   \              0x2D 0x2D    
   \              0x2D 0x45    
   \              0x4E 0x44    
   \              0x20 0x58    
   \              0x35 0x30    
   \              0x39 0x20    
   \              0x43 0x52    
   \              0x4C 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x00         
   \       0x17   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_2:
   \        0x0   0x25 0x73          DC8 "%sCRL version   : %d"
   \              0x43 0x52    
   \              0x4C 0x20    
   \              0x76 0x65    
   \              0x72 0x73    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x20 0x20    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x00         
   \       0x15   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_3:
   \        0x0   0x0A 0x25          DC8 "\012%sissuer name   : "
   \              0x73 0x69    
   \              0x73 0x73    
   \              0x75 0x65    
   \              0x72 0x20    
   \              0x6E 0x61    
   \              0x6D 0x65    
   \              0x20 0x20    
   \              0x20 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_4:
   \        0x0   0x0A 0x25          DC8 "\012%sthis update   : %04d-%02d-%02d %02d:%02d:%02d"
   \              0x73 0x74    
   \              0x68 0x69    
   \              0x73 0x20    
   \              0x75 0x70    
   \              0x64 0x61    
   \              0x74 0x65    
   \              0x20 0x20    
   \              0x20 0x3A    
   \              0x20 0x25    
   \              0x30 0x34    
   \              0x64 0x2D    
   \              0x25 0x30    
   \              0x32 0x64    
   \              0x2D 0x25    
   \              0x30 0x32    
   \              0x64 0x20    
   \              0x25 0x30    
   \              0x32 0x64    
   \              0x3A 0x25    
   \              0x30 0x32    
   \              0x64 0x3A    
   \              0x25 0x30    
   \              0x32 0x64    
   \              0x00         
   \       0x31   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_5:
   \        0x0   0x0A 0x25          DC8 "\012%snext update   : %04d-%02d-%02d %02d:%02d:%02d"
   \              0x73 0x6E    
   \              0x65 0x78    
   \              0x74 0x20    
   \              0x75 0x70    
   \              0x64 0x61    
   \              0x74 0x65    
   \              0x20 0x20    
   \              0x20 0x3A    
   \              0x20 0x25    
   \              0x30 0x34    
   \              0x64 0x2D    
   \              0x25 0x30    
   \              0x32 0x64    
   \              0x2D 0x25    
   \              0x30 0x32    
   \              0x64 0x20    
   \              0x25 0x30    
   \              0x32 0x64    
   \              0x3A 0x25    
   \              0x30 0x32    
   \              0x64 0x3A    
   \              0x25 0x30    
   \              0x32 0x64    
   \              0x00         
   \       0x31   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_6:
   \        0x0   0x0A 0x25          DC8 "\012%sRevoked certificates:"
   \              0x73 0x52    
   \              0x65 0x76    
   \              0x6F 0x6B    
   \              0x65 0x64    
   \              0x20 0x63    
   \              0x65 0x72    
   \              0x74 0x69    
   \              0x66 0x69    
   \              0x63 0x61    
   \              0x74 0x65    
   \              0x73 0x3A    
   \              0x00         
   \       0x19   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_7:
   \        0x0   0x0A 0x25          DC8 "\012%sserial number: "
   \              0x73 0x73    
   \              0x65 0x72    
   \              0x69 0x61    
   \              0x6C 0x20    
   \              0x6E 0x75    
   \              0x6D 0x62    
   \              0x65 0x72    
   \              0x3A 0x20    
   \              0x00         
   \       0x13   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_8:
   \        0x0   0x20 0x72          DC8 " revocation date: %04d-%02d-%02d %02d:%02d:%02d"
   \              0x65 0x76    
   \              0x6F 0x63    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x64 0x61    
   \              0x74 0x65    
   \              0x3A 0x20    
   \              0x25 0x30    
   \              0x34 0x64    
   \              0x2D 0x25    
   \              0x30 0x32    
   \              0x64 0x2D    
   \              0x25 0x30    
   \              0x32 0x64    
   \              0x20 0x25    
   \              0x30 0x32    
   \              0x64 0x3A    
   \              0x25 0x30    
   \              0x32 0x64    
   \              0x3A 0x25    
   \              0x30 0x32    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     ?_9:
   \        0x0   0x0A 0x25          DC8 "\012%ssigned using  : "
   \              0x73 0x73    
   \              0x69 0x67    
   \              0x6E 0x65    
   \              0x64 0x20    
   \              0x75 0x73    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x20 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 2
   \        0x0   0x0A 0x00          DC8 "\012"
    772          
    773          #endif /* MBEDTLS_X509_CRL_PARSE_C */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   mbedtls_x509_crl_free
        24   -> mbedtls_free
        24   -> mbedtls_platform_zeroize
      56   mbedtls_x509_crl_info
        56   -> mbedtls_x509_dn_gets
        56   -> mbedtls_x509_serial_gets
        56   -> mbedtls_x509_sig_alg_gets
        56   -> snprintf
       0   mbedtls_x509_crl_init
         0   -> __aeabi_memset4
      56   mbedtls_x509_crl_parse
        56   -> mbedtls_pem_free
        56   -> mbedtls_pem_init
        56   -> mbedtls_pem_read_buffer
        56   -> mbedtls_x509_crl_parse_der
      64   mbedtls_x509_crl_parse_der
        64   -> __aeabi_memcpy
        64   -> __aeabi_memset4
        64   -> mbedtls_asn1_get_tag
        64   -> mbedtls_calloc
        64   -> mbedtls_x509_crl_free
        64   -> mbedtls_x509_crl_init
        64   -> mbedtls_x509_get_alg
        64   -> mbedtls_x509_get_name
        64   -> mbedtls_x509_get_sig
        64   -> mbedtls_x509_get_sig_alg
        64   -> mbedtls_x509_get_time
        64   -> memcmp
        64   -> x509_crl_get_version
        64   -> x509_get_crl_ext
        64   -> x509_get_entries
       8   x509_crl_get_version
         8   -> mbedtls_asn1_get_int
      16   x509_get_crl_entry_ext
        16   -> mbedtls_asn1_get_tag
      24   x509_get_crl_ext
        24   -> mbedtls_asn1_get_bool
        24   -> mbedtls_asn1_get_tag
        24   -> mbedtls_x509_get_ext
      32   x509_get_entries
        32   -> mbedtls_asn1_get_tag
        32   -> mbedtls_calloc
        32   -> mbedtls_x509_get_serial
        32   -> mbedtls_x509_get_time
        32   -> x509_get_crl_entry_ext


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_10
       4  ??DataTable6_11
       4  ??DataTable6_12
       4  ??DataTable6_13
       4  ??DataTable6_14
       4  ??DataTable6_15
       4  ??DataTable6_16
       4  ??DataTable6_17
       4  ??DataTable6_18
       4  ??DataTable6_19
       4  ??DataTable6_2
       4  ??DataTable6_20
       4  ??DataTable6_21
       4  ??DataTable6_22
       4  ??DataTable6_23
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable6_6
       4  ??DataTable6_7
       4  ??DataTable6_8
       4  ??DataTable6_9
      28  ?_0
      24  ?_1
       2  ?_10
      24  ?_2
      20  ?_3
      52  ?_4
      52  ?_5
      28  ?_6
      20  ?_7
      48  ?_8
      20  ?_9
     128  mbedtls_x509_crl_free
     436  mbedtls_x509_crl_info
       8  mbedtls_x509_crl_init
     156  mbedtls_x509_crl_parse
     636  mbedtls_x509_crl_parse_der
      34  x509_crl_get_version
     116  x509_get_crl_entry_ext
     166  x509_get_crl_ext
     170  x509_get_entries

 
   318 bytes in section .rodata
 1 946 bytes in section .text
 
 1 946 bytes of CODE  memory
   318 bytes of CONST memory

Errors: none
Warnings: none
