###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.3.193/W32 for ARM         10/Jun/2019  13:48:40
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\Development\smart_washing_machine_3080\mbedtls\library\pem.c
#    Command line =  
#        -f C:\Users\nxf42695\AppData\Local\Temp\1\EW2A8E.tmp
#        (C:\Development\smart_washing_machine_3080\mbedtls\library\pem.c -D
#        DEBUG -D USE_RTOS -D XIP_EXTERNAL_FLASH=1 -D XIP_BOOT_HEADER_ENABLE=1
#        -D CPU_MIMXRT1052DVL6B -D FSL_RTOS_FREE_RTOS -D PRINTF_ADVANCED_ENABLE
#        -D "MBEDTLS_CONFIG_FILE=\"ksdk_mbedtls_config.h\"" -lC
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list -lA
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list
#        --diag_suppress Pa082,Pa050 -o
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_d16 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" --preinclude
#        C:\Development\smart_washing_machine_3080/source\app_preinclude.h -I
#        C:\Development\smart_washing_machine_3080/board\ -I
#        C:\Development\smart_washing_machine_3080/source\ -I
#        C:\Development\smart_washing_machine_3080/CMSIS\ -I
#        C:\Development\smart_washing_machine_3080/amazon-freertos/freertos/portable\
#        -I C:\Development\smart_washing_machine_3080/amazon-freertos/include\
#        -I C:\Development\smart_washing_machine_3080/component/lists\ -I
#        C:\Development\smart_washing_machine_3080/component/serial_manager\ -I
#        C:\Development\smart_washing_machine_3080/component/uart\ -I
#        C:\Development\smart_washing_machine_3080/component/kv\ -I
#        C:\Development\smart_washing_machine_3080/component/kv/include\ -I
#        C:\Development\smart_washing_machine_3080/device\ -I
#        C:\Development\smart_washing_machine_3080/doc\ -I
#        C:\Development\smart_washing_machine_3080/drivers\ -I
#        C:\Development\smart_washing_machine_3080/src\ -I
#        C:\Development\smart_washing_machine_3080/startup\ -I
#        C:\Development\smart_washing_machine_3080/utilities\ -I
#        C:\Development\smart_washing_machine_3080/xip\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\atm\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_model\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_sign\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\infra\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\mqtt\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\external_libs\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\coap_cloud\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\CoAPPacket\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\server\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\os\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\awss_reset\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\mbedtls\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\ -I
#        C:\Development\smart_washing_machine_3080\mbedtls\port\ksdk\ -Om)
#    Locale       =  C
#    List file    =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list\pem.lst
#    Object file  =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj\pem.o
#
###############################################################################

C:\Development\smart_washing_machine_3080\mbedtls\library\pem.c
      1          /*
      2           *  Privacy Enhanced Mail (PEM) decoding
      3           *
      4           *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
      5           *  SPDX-License-Identifier: Apache-2.0
      6           *
      7           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
      8           *  not use this file except in compliance with the License.
      9           *  You may obtain a copy of the License at
     10           *
     11           *  http://www.apache.org/licenses/LICENSE-2.0
     12           *
     13           *  Unless required by applicable law or agreed to in writing, software
     14           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     15           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     16           *  See the License for the specific language governing permissions and
     17           *  limitations under the License.
     18           *
     19           *  This file is part of mbed TLS (https://tls.mbed.org)
     20           */
     21          
     22          #if !defined(MBEDTLS_CONFIG_FILE)
     23          #include "mbedtls/config.h"
     24          #else
     25          #include MBEDTLS_CONFIG_FILE
     26          #endif
     27          
     28          #if defined(MBEDTLS_PEM_PARSE_C) || defined(MBEDTLS_PEM_WRITE_C)
     29          
     30          #include "mbedtls/pem.h"
     31          #include "mbedtls/base64.h"
     32          #include "mbedtls/des.h"
     33          #include "mbedtls/aes.h"
     34          #include "mbedtls/md5.h"
     35          #include "mbedtls/cipher.h"
     36          #include "mbedtls/platform_util.h"
     37          
     38          #include <string.h>
     39          
     40          #if defined(MBEDTLS_PLATFORM_C)
     41          #include "mbedtls/platform.h"
     42          #else
     43          #include <stdlib.h>
     44          #define mbedtls_calloc    calloc
     45          #define mbedtls_free       free
     46          #endif
     47          
     48          #if defined(MBEDTLS_PEM_PARSE_C)

   \                                 In section .text, align 2, keep-with-next
     49          void mbedtls_pem_init( mbedtls_pem_context *ctx )
     50          {
     51              memset( ctx, 0, sizeof( mbedtls_pem_context ) );
   \                     mbedtls_pem_init: (+1)
   \        0x0   0x2200             MOVS     R2,#+0
   \        0x2   0x210C             MOVS     R1,#+12
   \        0x4   0x....'....        B.W      __aeabi_memset4
     52          }
     53          
     54          #if defined(MBEDTLS_MD5_C) && defined(MBEDTLS_CIPHER_MODE_CBC) &&         \
     55              ( defined(MBEDTLS_DES_C) || defined(MBEDTLS_AES_C) )
     56          /*
     57           * Read a 16-byte hex string and convert it to binary
     58           */

   \                                 In section .text, align 2, keep-with-next
     59          static int pem_get_iv( const unsigned char *s, unsigned char *iv,
     60                                 size_t iv_len )
     61          {
   \                     pem_get_iv: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
   \        0x6   0x4616             MOV      R6,R2
     62              size_t i, j, k;
     63          
     64              memset( iv, 0, iv_len );
   \        0x8   0x2200             MOVS     R2,#+0
   \        0xA   0x4631             MOV      R1,R6
   \        0xC   0x4628             MOV      R0,R5
   \        0xE   0x....'....        BL       __aeabi_memset
     65          
     66              for( i = 0; i < iv_len * 2; i++, s++ )
   \       0x12   0x2000             MOVS     R0,#+0
   \       0x14   0xE011             B.N      ??pem_get_iv_0
     67              {
     68                  if( *s >= '0' && *s <= '9' ) j = *s - '0'; else
     69                  if( *s >= 'A' && *s <= 'F' ) j = *s - '7'; else
     70                  if( *s >= 'a' && *s <= 'f' ) j = *s - 'W'; else
     71                      return( MBEDTLS_ERR_PEM_INVALID_ENC_IV );
     72          
     73                  k = ( ( i & 1 ) != 0 ) ? j : j << 4;
   \                     ??pem_get_iv_1: (+1)
   \       0x16   0x0109             LSLS     R1,R1,#+4
   \       0x18   0xE006             B.N      ??pem_get_iv_2
   \                     ??pem_get_iv_3: (+1)
   \       0x1A   0x3961             SUBS     R1,R1,#+97
   \       0x1C   0x2906             CMP      R1,#+6
   \       0x1E   0xD21E             BCS.N    ??pem_get_iv_4
   \       0x20   0x7821             LDRB     R1,[R4, #+0]
   \       0x22   0x3957             SUBS     R1,R1,#+87
   \                     ??pem_get_iv_5: (+1)
   \       0x24   0x07C2             LSLS     R2,R0,#+31
   \       0x26   0xD5F6             BPL.N    ??pem_get_iv_1
     74          
     75                  iv[i >> 1] = (unsigned char)( iv[i >> 1] | k );
   \                     ??pem_get_iv_2: (+1)
   \       0x28   0x4602             MOV      R2,R0
   \       0x2A   0x0852             LSRS     R2,R2,#+1
   \       0x2C   0x5CAA             LDRB     R2,[R5, R2]
   \       0x2E   0x4311             ORRS     R1,R1,R2
   \       0x30   0x4602             MOV      R2,R0
   \       0x32   0x0852             LSRS     R2,R2,#+1
   \       0x34   0x54A9             STRB     R1,[R5, R2]
   \       0x36   0x1C40             ADDS     R0,R0,#+1
   \       0x38   0x1C64             ADDS     R4,R4,#+1
   \                     ??pem_get_iv_0: (+1)
   \       0x3A   0xEBB0 0x0F46      CMP      R0,R6, LSL #+1
   \       0x3E   0xD20C             BCS.N    ??pem_get_iv_6
   \       0x40   0x7821             LDRB     R1,[R4, #+0]
   \       0x42   0x3930             SUBS     R1,R1,#+48
   \       0x44   0x290A             CMP      R1,#+10
   \       0x46   0x7821             LDRB     R1,[R4, #+0]
   \       0x48   0xD201             BCS.N    ??pem_get_iv_7
   \       0x4A   0x3930             SUBS     R1,R1,#+48
   \       0x4C   0xE7EA             B.N      ??pem_get_iv_5
   \                     ??pem_get_iv_7: (+1)
   \       0x4E   0x3941             SUBS     R1,R1,#+65
   \       0x50   0x2906             CMP      R1,#+6
   \       0x52   0x7821             LDRB     R1,[R4, #+0]
   \       0x54   0xD2E1             BCS.N    ??pem_get_iv_3
   \       0x56   0x3937             SUBS     R1,R1,#+55
   \       0x58   0xE7E4             B.N      ??pem_get_iv_5
     76              }
     77          
     78              return( 0 );
   \                     ??pem_get_iv_6: (+1)
   \       0x5A   0x2000             MOVS     R0,#+0
   \       0x5C   0xBD70             POP      {R4-R6,PC}       ;; return
   \                     ??pem_get_iv_4: (+1)
   \       0x5E   0x....'....        LDR.W    R0,??DataTable3  ;; 0xffffee00
   \       0x62   0xBD70             POP      {R4-R6,PC}
     79          }
     80          

   \                                 In section .text, align 2, keep-with-next
     81          static int pem_pbkdf1( unsigned char *key, size_t keylen,
     82                                 unsigned char *iv,
     83                                 const unsigned char *pwd, size_t pwdlen )
     84          {
   \                     pem_pbkdf1: (+1)
   \        0x0   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \        0x4   0xB09A             SUB      SP,SP,#+104
   \        0x6   0x4605             MOV      R5,R0
   \        0x8   0x460E             MOV      R6,R1
   \        0xA   0x4691             MOV      R9,R2
   \        0xC   0x4698             MOV      R8,R3
     85              mbedtls_md5_context md5_ctx;
     86              unsigned char md5sum[16];
     87              size_t use_len;
     88              int ret;
     89          
     90              mbedtls_md5_init( &md5_ctx );
   \        0xE   0xA804             ADD      R0,SP,#+16
   \       0x10   0x....'....        BL       mbedtls_md5_init
     91          
     92              /*
     93               * key[ 0..15] = MD5(pwd || IV)
     94               */
     95              if( ( ret = mbedtls_md5_starts_ret( &md5_ctx ) ) != 0 )
   \       0x14   0xA804             ADD      R0,SP,#+16
   \       0x16   0x....'....        BL       mbedtls_md5_starts_ret
   \       0x1A   0x0004             MOVS     R4,R0
   \       0x1C   0xD14B             BNE.N    ??pem_pbkdf1_0
   \       0x1E   0x9F22             LDR      R7,[SP, #+136]
     96                  goto exit;
     97              if( ( ret = mbedtls_md5_update_ret( &md5_ctx, pwd, pwdlen ) ) != 0 )
   \       0x20   0x463A             MOV      R2,R7
   \       0x22   0x4641             MOV      R1,R8
   \       0x24   0xA804             ADD      R0,SP,#+16
   \       0x26   0x....'....        BL       mbedtls_md5_update_ret
   \       0x2A   0x0004             MOVS     R4,R0
   \       0x2C   0xD143             BNE.N    ??pem_pbkdf1_0
     98                  goto exit;
     99              if( ( ret = mbedtls_md5_update_ret( &md5_ctx, iv,  8 ) ) != 0 )
   \       0x2E   0x2208             MOVS     R2,#+8
   \       0x30   0x4649             MOV      R1,R9
   \       0x32   0xA804             ADD      R0,SP,#+16
   \       0x34   0x....'....        BL       mbedtls_md5_update_ret
   \       0x38   0x0004             MOVS     R4,R0
   \       0x3A   0xD13C             BNE.N    ??pem_pbkdf1_0
    100                  goto exit;
    101              if( ( ret = mbedtls_md5_finish_ret( &md5_ctx, md5sum ) ) != 0 )
   \       0x3C   0x4669             MOV      R1,SP
   \       0x3E   0xA804             ADD      R0,SP,#+16
   \       0x40   0x....'....        BL       mbedtls_md5_finish_ret
   \       0x44   0x0004             MOVS     R4,R0
   \       0x46   0xD136             BNE.N    ??pem_pbkdf1_0
    102                  goto exit;
    103          
    104              if( keylen <= 16 )
   \       0x48   0x2E11             CMP      R6,#+17
   \       0x4A   0xD205             BCS.N    ??pem_pbkdf1_1
    105              {
    106                  memcpy( key, md5sum, keylen );
   \       0x4C   0x4632             MOV      R2,R6
   \       0x4E   0x4669             MOV      R1,SP
   \       0x50   0x4628             MOV      R0,R5
   \       0x52   0x....'....        BL       __aeabi_memcpy
    107                  goto exit;
   \       0x56   0xE02E             B.N      ??pem_pbkdf1_0
    108              }
    109          
    110              memcpy( key, md5sum, 16 );
   \                     ??pem_pbkdf1_1: (+1)
   \       0x58   0x2210             MOVS     R2,#+16
   \       0x5A   0x4669             MOV      R1,SP
   \       0x5C   0x4628             MOV      R0,R5
   \       0x5E   0x....'....        BL       __aeabi_memcpy
    111          
    112              /*
    113               * key[16..23] = MD5(key[ 0..15] || pwd || IV])
    114               */
    115              if( ( ret = mbedtls_md5_starts_ret( &md5_ctx ) ) != 0 )
   \       0x62   0xA804             ADD      R0,SP,#+16
   \       0x64   0x....'....        BL       mbedtls_md5_starts_ret
   \       0x68   0x0004             MOVS     R4,R0
   \       0x6A   0xD124             BNE.N    ??pem_pbkdf1_0
    116                  goto exit;
    117              if( ( ret = mbedtls_md5_update_ret( &md5_ctx, md5sum, 16 ) ) != 0 )
   \       0x6C   0x2210             MOVS     R2,#+16
   \       0x6E   0x4669             MOV      R1,SP
   \       0x70   0xA804             ADD      R0,SP,#+16
   \       0x72   0x....'....        BL       mbedtls_md5_update_ret
   \       0x76   0x0004             MOVS     R4,R0
   \       0x78   0xD11D             BNE.N    ??pem_pbkdf1_0
    118                  goto exit;
    119              if( ( ret = mbedtls_md5_update_ret( &md5_ctx, pwd, pwdlen ) ) != 0 )
   \       0x7A   0x463A             MOV      R2,R7
   \       0x7C   0x4641             MOV      R1,R8
   \       0x7E   0xA804             ADD      R0,SP,#+16
   \       0x80   0x....'....        BL       mbedtls_md5_update_ret
   \       0x84   0x0004             MOVS     R4,R0
   \       0x86   0xD116             BNE.N    ??pem_pbkdf1_0
    120                  goto exit;
    121              if( ( ret = mbedtls_md5_update_ret( &md5_ctx, iv, 8 ) ) != 0 )
   \       0x88   0x2208             MOVS     R2,#+8
   \       0x8A   0x4649             MOV      R1,R9
   \       0x8C   0xA804             ADD      R0,SP,#+16
   \       0x8E   0x....'....        BL       mbedtls_md5_update_ret
   \       0x92   0x0004             MOVS     R4,R0
   \       0x94   0xD10F             BNE.N    ??pem_pbkdf1_0
    122                  goto exit;
    123              if( ( ret = mbedtls_md5_finish_ret( &md5_ctx, md5sum ) ) != 0 )
   \       0x96   0x4669             MOV      R1,SP
   \       0x98   0xA804             ADD      R0,SP,#+16
   \       0x9A   0x....'....        BL       mbedtls_md5_finish_ret
   \       0x9E   0x0004             MOVS     R4,R0
   \       0xA0   0xD109             BNE.N    ??pem_pbkdf1_0
    124                  goto exit;
    125          
    126              use_len = 16;
   \       0xA2   0x2210             MOVS     R2,#+16
    127              if( keylen < 32 )
   \       0xA4   0x2E20             CMP      R6,#+32
   \       0xA6   0xD201             BCS.N    ??pem_pbkdf1_2
    128                  use_len = keylen - 16;
   \       0xA8   0x3E10             SUBS     R6,R6,#+16
   \       0xAA   0x4632             MOV      R2,R6
    129          
    130              memcpy( key + 16, md5sum, use_len );
   \                     ??pem_pbkdf1_2: (+1)
   \       0xAC   0x4669             MOV      R1,SP
   \       0xAE   0xF105 0x0010      ADD      R0,R5,#+16
   \       0xB2   0x....'....        BL       __aeabi_memcpy
    131          
    132          exit:
    133              mbedtls_md5_free( &md5_ctx );
   \                     ??pem_pbkdf1_0: (+1)
   \       0xB6   0xA804             ADD      R0,SP,#+16
   \       0xB8   0x....'....        BL       mbedtls_md5_free
    134              mbedtls_platform_zeroize( md5sum, 16 );
   \       0xBC   0x2110             MOVS     R1,#+16
   \       0xBE   0x4668             MOV      R0,SP
   \       0xC0   0x....'....        BL       mbedtls_platform_zeroize
    135          
    136              return( ret );
   \       0xC4   0x4620             MOV      R0,R4
   \       0xC6   0xB01B             ADD      SP,SP,#+108
   \       0xC8   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
    137          }
    138          
    139          #if defined(MBEDTLS_DES_C)
    140          /*
    141           * Decrypt with DES-CBC, using PBKDF1 for key derivation
    142           */

   \                                 In section .text, align 2, keep-with-next
    143          static int pem_des_decrypt( unsigned char des_iv[8],
    144                                      unsigned char *buf, size_t buflen,
    145                                      const unsigned char *pwd, size_t pwdlen )
    146          {
   \                     pem_des_decrypt: (+1)
   \        0x0   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \        0x4   0xB0A4             SUB      SP,SP,#+144
   \        0x6   0x4605             MOV      R5,R0
   \        0x8   0x460E             MOV      R6,R1
   \        0xA   0x4617             MOV      R7,R2
   \        0xC   0x461C             MOV      R4,R3
   \        0xE   0xF8DD 0x80A8      LDR      R8,[SP, #+168]
    147              mbedtls_des_context des_ctx;
    148              unsigned char des_key[8];
    149              int ret;
    150          
    151              mbedtls_des_init( &des_ctx );
   \       0x12   0xA804             ADD      R0,SP,#+16
   \       0x14   0x....'....        BL       mbedtls_des_init
    152          
    153              if( ( ret = pem_pbkdf1( des_key, 8, des_iv, pwd, pwdlen ) ) != 0 )
   \       0x18   0xF8CD 0x8000      STR      R8,[SP, #+0]
   \       0x1C   0x4623             MOV      R3,R4
   \       0x1E   0x462A             MOV      R2,R5
   \       0x20   0x2108             MOVS     R1,#+8
   \       0x22   0xA802             ADD      R0,SP,#+8
   \       0x24   0x....'....        BL       pem_pbkdf1
   \       0x28   0x0004             MOVS     R4,R0
   \       0x2A   0xD10E             BNE.N    ??pem_des_decrypt_0
    154                  goto exit;
    155          
    156              if( ( ret = mbedtls_des_setkey_dec( &des_ctx, des_key ) ) != 0 )
   \       0x2C   0xA902             ADD      R1,SP,#+8
   \       0x2E   0xA804             ADD      R0,SP,#+16
   \       0x30   0x....'....        BL       mbedtls_des_setkey_dec
   \       0x34   0x0004             MOVS     R4,R0
   \       0x36   0xD108             BNE.N    ??pem_des_decrypt_0
    157                  goto exit;
    158              ret = mbedtls_des_crypt_cbc( &des_ctx, MBEDTLS_DES_DECRYPT, buflen,
    159                               des_iv, buf, buf );
   \       0x38   0x9601             STR      R6,[SP, #+4]
   \       0x3A   0x9600             STR      R6,[SP, #+0]
   \       0x3C   0x462B             MOV      R3,R5
   \       0x3E   0x463A             MOV      R2,R7
   \       0x40   0x2100             MOVS     R1,#+0
   \       0x42   0xA804             ADD      R0,SP,#+16
   \       0x44   0x....'....        BL       mbedtls_des_crypt_cbc
   \       0x48   0x4604             MOV      R4,R0
    160          
    161          exit:
    162              mbedtls_des_free( &des_ctx );
   \                     ??pem_des_decrypt_0: (+1)
   \       0x4A   0xA804             ADD      R0,SP,#+16
   \       0x4C   0x....'....        BL       mbedtls_des_free
    163              mbedtls_platform_zeroize( des_key, 8 );
   \       0x50   0x2108             MOVS     R1,#+8
   \       0x52   0xA802             ADD      R0,SP,#+8
   \       0x54   0x....'....        BL       mbedtls_platform_zeroize
    164          
    165              return( ret );
   \       0x58   0x4620             MOV      R0,R4
   \       0x5A   0xB024             ADD      SP,SP,#+144
   \       0x5C   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    166          }
    167          
    168          /*
    169           * Decrypt with 3DES-CBC, using PBKDF1 for key derivation
    170           */

   \                                 In section .text, align 2, keep-with-next
    171          static int pem_des3_decrypt( unsigned char des3_iv[8],
    172                                       unsigned char *buf, size_t buflen,
    173                                       const unsigned char *pwd, size_t pwdlen )
    174          {
   \                     pem_des3_decrypt: (+1)
   \        0x0   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \        0x4   0xB0E8             SUB      SP,SP,#+416
   \        0x6   0x4605             MOV      R5,R0
   \        0x8   0x460E             MOV      R6,R1
   \        0xA   0x4617             MOV      R7,R2
   \        0xC   0x461C             MOV      R4,R3
   \        0xE   0xF8DD 0x81B8      LDR      R8,[SP, #+440]
    175              mbedtls_des3_context des3_ctx;
    176              unsigned char des3_key[24];
    177              int ret;
    178          
    179              mbedtls_des3_init( &des3_ctx );
   \       0x12   0xA808             ADD      R0,SP,#+32
   \       0x14   0x....'....        BL       mbedtls_des3_init
    180          
    181              if( ( ret = pem_pbkdf1( des3_key, 24, des3_iv, pwd, pwdlen ) ) != 0 )
   \       0x18   0xF8CD 0x8000      STR      R8,[SP, #+0]
   \       0x1C   0x4623             MOV      R3,R4
   \       0x1E   0x462A             MOV      R2,R5
   \       0x20   0x2118             MOVS     R1,#+24
   \       0x22   0xA802             ADD      R0,SP,#+8
   \       0x24   0x....'....        BL       pem_pbkdf1
   \       0x28   0x0004             MOVS     R4,R0
   \       0x2A   0xD10E             BNE.N    ??pem_des3_decrypt_0
    182                  goto exit;
    183          
    184              if( ( ret = mbedtls_des3_set3key_dec( &des3_ctx, des3_key ) ) != 0 )
   \       0x2C   0xA902             ADD      R1,SP,#+8
   \       0x2E   0xA808             ADD      R0,SP,#+32
   \       0x30   0x....'....        BL       mbedtls_des3_set3key_dec
   \       0x34   0x0004             MOVS     R4,R0
   \       0x36   0xD108             BNE.N    ??pem_des3_decrypt_0
    185                  goto exit;
    186              ret = mbedtls_des3_crypt_cbc( &des3_ctx, MBEDTLS_DES_DECRYPT, buflen,
    187                               des3_iv, buf, buf );
   \       0x38   0x9601             STR      R6,[SP, #+4]
   \       0x3A   0x9600             STR      R6,[SP, #+0]
   \       0x3C   0x462B             MOV      R3,R5
   \       0x3E   0x463A             MOV      R2,R7
   \       0x40   0x2100             MOVS     R1,#+0
   \       0x42   0xA808             ADD      R0,SP,#+32
   \       0x44   0x....'....        BL       mbedtls_des3_crypt_cbc
   \       0x48   0x4604             MOV      R4,R0
    188          
    189          exit:
    190              mbedtls_des3_free( &des3_ctx );
   \                     ??pem_des3_decrypt_0: (+1)
   \       0x4A   0xA808             ADD      R0,SP,#+32
   \       0x4C   0x....'....        BL       mbedtls_des3_free
    191              mbedtls_platform_zeroize( des3_key, 24 );
   \       0x50   0x2118             MOVS     R1,#+24
   \       0x52   0xA802             ADD      R0,SP,#+8
   \       0x54   0x....'....        BL       mbedtls_platform_zeroize
    192          
    193              return( ret );
   \       0x58   0x4620             MOV      R0,R4
   \       0x5A   0xB068             ADD      SP,SP,#+416
   \       0x5C   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    194          }
    195          #endif /* MBEDTLS_DES_C */
    196          
    197          #if defined(MBEDTLS_AES_C)
    198          /*
    199           * Decrypt with AES-XXX-CBC, using PBKDF1 for key derivation
    200           */

   \                                 In section .text, align 2, keep-with-next
    201          static int pem_aes_decrypt( unsigned char aes_iv[16], unsigned int keylen,
    202                                      unsigned char *buf, size_t buflen,
    203                                      const unsigned char *pwd, size_t pwdlen )
    204          {
   \                     pem_aes_decrypt: (+1)
   \        0x0   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \        0x4   0xB0D0             SUB      SP,SP,#+320
   \        0x6   0x4605             MOV      R5,R0
   \        0x8   0x460E             MOV      R6,R1
   \        0xA   0x4617             MOV      R7,R2
   \        0xC   0x4698             MOV      R8,R3
   \        0xE   0x9C58             LDR      R4,[SP, #+352]
   \       0x10   0xF8DD 0x9164      LDR      R9,[SP, #+356]
    205              mbedtls_aes_context aes_ctx;
    206              unsigned char aes_key[32];
    207              int ret;
    208          
    209              mbedtls_aes_init( &aes_ctx );
   \       0x14   0xA80A             ADD      R0,SP,#+40
   \       0x16   0x....'....        BL       mbedtls_aes_init
    210          
    211              if( ( ret = pem_pbkdf1( aes_key, keylen, aes_iv, pwd, pwdlen ) ) != 0 )
   \       0x1A   0xF8CD 0x9000      STR      R9,[SP, #+0]
   \       0x1E   0x4623             MOV      R3,R4
   \       0x20   0x462A             MOV      R2,R5
   \       0x22   0x4631             MOV      R1,R6
   \       0x24   0xA802             ADD      R0,SP,#+8
   \       0x26   0x....'....        BL       pem_pbkdf1
   \       0x2A   0x0004             MOVS     R4,R0
   \       0x2C   0xD10F             BNE.N    ??pem_aes_decrypt_0
    212                  goto exit;
    213          
    214              if( ( ret = mbedtls_aes_setkey_dec( &aes_ctx, aes_key, keylen * 8 ) ) != 0 )
   \       0x2E   0x00F2             LSLS     R2,R6,#+3
   \       0x30   0xA902             ADD      R1,SP,#+8
   \       0x32   0xA80A             ADD      R0,SP,#+40
   \       0x34   0x....'....        BL       mbedtls_aes_setkey_dec
   \       0x38   0x0004             MOVS     R4,R0
   \       0x3A   0xD108             BNE.N    ??pem_aes_decrypt_0
    215                  goto exit;
    216              ret = mbedtls_aes_crypt_cbc( &aes_ctx, MBEDTLS_AES_DECRYPT, buflen,
    217                               aes_iv, buf, buf );
   \       0x3C   0x9701             STR      R7,[SP, #+4]
   \       0x3E   0x9700             STR      R7,[SP, #+0]
   \       0x40   0x462B             MOV      R3,R5
   \       0x42   0x4642             MOV      R2,R8
   \       0x44   0x2100             MOVS     R1,#+0
   \       0x46   0xA80A             ADD      R0,SP,#+40
   \       0x48   0x....'....        BL       mbedtls_aes_crypt_cbc
   \       0x4C   0x4604             MOV      R4,R0
    218          
    219          exit:
    220              mbedtls_aes_free( &aes_ctx );
   \                     ??pem_aes_decrypt_0: (+1)
   \       0x4E   0xA80A             ADD      R0,SP,#+40
   \       0x50   0x....'....        BL       mbedtls_aes_free
    221              mbedtls_platform_zeroize( aes_key, keylen );
   \       0x54   0x4631             MOV      R1,R6
   \       0x56   0xA802             ADD      R0,SP,#+8
   \       0x58   0x....'....        BL       mbedtls_platform_zeroize
    222          
    223              return( ret );
   \       0x5C   0x4620             MOV      R0,R4
   \       0x5E   0xB051             ADD      SP,SP,#+324
   \       0x60   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
    224          }
    225          #endif /* MBEDTLS_AES_C */
    226          
    227          #endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
    228                    ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    229          

   \                                 In section .text, align 2, keep-with-next
    230          int mbedtls_pem_read_buffer( mbedtls_pem_context *ctx, const char *header, const char *footer,
    231                               const unsigned char *data, const unsigned char *pwd,
    232                               size_t pwdlen, size_t *use_len )
    233          {
   \                     mbedtls_pem_read_buffer: (+1)
   \        0x0   0xE92D 0x47F8      PUSH     {R3-R10,LR}
   \        0x4   0xB087             SUB      SP,SP,#+28
   \        0x6   0x4604             MOV      R4,R0
   \        0x8   0x4689             MOV      R9,R1
   \        0xA   0x4692             MOV      R10,R2
   \        0xC   0x461F             MOV      R7,R3
    234              int ret, enc;
    235              size_t len;
    236              unsigned char *buf;
    237              const unsigned char *s1, *s2, *end;
    238          #if defined(MBEDTLS_MD5_C) && defined(MBEDTLS_CIPHER_MODE_CBC) &&         \
    239              ( defined(MBEDTLS_DES_C) || defined(MBEDTLS_AES_C) )
    240              unsigned char pem_iv[16];
    241              mbedtls_cipher_type_t enc_alg = MBEDTLS_CIPHER_NONE;
   \        0xE   0xF04F 0x0800      MOV      R8,#+0
    242          #else
    243              ((void) pwd);
    244              ((void) pwdlen);
    245          #endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
    246                    ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    247          
    248              if( ctx == NULL )
   \       0x12   0x2C00             CMP      R4,#+0
   \       0x14   0xD102             BNE.N    ??mbedtls_pem_read_buffer_0
    249                  return( MBEDTLS_ERR_PEM_BAD_INPUT_DATA );
   \       0x16   0x....'....        LDR.W    R0,??DataTable3_1  ;; 0xffffeb80
   \       0x1A   0xE165             B.N      ??mbedtls_pem_read_buffer_1
    250          
    251              s1 = (unsigned char *) strstr( (const char *) data, header );
   \                     ??mbedtls_pem_read_buffer_0: (+1)
   \       0x1C   0x4638             MOV      R0,R7
   \       0x1E   0x....'....        BL       strstr
   \       0x22   0x0005             MOVS     R5,R0
    252          
    253              if( s1 == NULL )
   \       0x24   0xD061             BEQ.N    ??mbedtls_pem_read_buffer_2
    254                  return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );
    255          
    256              s2 = (unsigned char *) strstr( (const char *) data, footer );
   \       0x26   0x4651             MOV      R1,R10
   \       0x28   0x4638             MOV      R0,R7
   \       0x2A   0x....'....        BL       strstr
   \       0x2E   0x0006             MOVS     R6,R0
    257          
    258              if( s2 == NULL || s2 <= s1 )
   \       0x30   0xD05B             BEQ.N    ??mbedtls_pem_read_buffer_2
   \       0x32   0x42B5             CMP      R5,R6
   \       0x34   0xD259             BCS.N    ??mbedtls_pem_read_buffer_2
    259                  return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );
    260          
    261              s1 += strlen( header );
   \       0x36   0x4648             MOV      R0,R9
   \       0x38   0x....'....        BL       strlen
   \       0x3C   0x4428             ADD      R0,R5,R0
    262              if( *s1 == ' '  ) s1++;
   \       0x3E   0x7801             LDRB     R1,[R0, #+0]
   \       0x40   0x2920             CMP      R1,#+32
   \       0x42   0xD100             BNE.N    ??mbedtls_pem_read_buffer_3
   \       0x44   0x1C40             ADDS     R0,R0,#+1
    263              if( *s1 == '\r' ) s1++;
   \                     ??mbedtls_pem_read_buffer_3: (+1)
   \       0x46   0x7801             LDRB     R1,[R0, #+0]
   \       0x48   0x290D             CMP      R1,#+13
   \       0x4A   0xD100             BNE.N    ??mbedtls_pem_read_buffer_4
   \       0x4C   0x1C40             ADDS     R0,R0,#+1
    264              if( *s1 == '\n' ) s1++;
   \                     ??mbedtls_pem_read_buffer_4: (+1)
   \       0x4E   0x7801             LDRB     R1,[R0, #+0]
   \       0x50   0x290A             CMP      R1,#+10
   \       0x52   0xD14A             BNE.N    ??mbedtls_pem_read_buffer_2
   \       0x54   0xF100 0x0901      ADD      R9,R0,#+1
    265              else return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );
    266          
    267              end = s2;
    268              end += strlen( footer );
   \       0x58   0x4650             MOV      R0,R10
   \       0x5A   0x....'....        BL       strlen
   \       0x5E   0x1831             ADDS     R1,R6,R0
    269              if( *end == ' '  ) end++;
   \       0x60   0x7808             LDRB     R0,[R1, #+0]
   \       0x62   0x2820             CMP      R0,#+32
   \       0x64   0xD100             BNE.N    ??mbedtls_pem_read_buffer_5
   \       0x66   0x1C49             ADDS     R1,R1,#+1
    270              if( *end == '\r' ) end++;
   \                     ??mbedtls_pem_read_buffer_5: (+1)
   \       0x68   0x7808             LDRB     R0,[R1, #+0]
   \       0x6A   0x280D             CMP      R0,#+13
   \       0x6C   0xD100             BNE.N    ??mbedtls_pem_read_buffer_6
   \       0x6E   0x1C49             ADDS     R1,R1,#+1
    271              if( *end == '\n' ) end++;
   \                     ??mbedtls_pem_read_buffer_6: (+1)
   \       0x70   0x7808             LDRB     R0,[R1, #+0]
   \       0x72   0x280A             CMP      R0,#+10
   \       0x74   0xD100             BNE.N    ??mbedtls_pem_read_buffer_7
   \       0x76   0x1C49             ADDS     R1,R1,#+1
   \                     ??mbedtls_pem_read_buffer_7: (+1)
   \       0x78   0x9812             LDR      R0,[SP, #+72]
    272              *use_len = end - data;
   \       0x7A   0x1BCF             SUBS     R7,R1,R7
   \       0x7C   0x6007             STR      R7,[R0, #+0]
    273          
    274              enc = 0;
   \       0x7E   0x4647             MOV      R7,R8
    275          
    276              if( s2 - s1 >= 22 && memcmp( s1, "Proc-Type: 4,ENCRYPTED", 22 ) == 0 )
   \       0x80   0xEBA6 0x0009      SUB      R0,R6,R9
   \       0x84   0x2816             CMP      R0,#+22
   \       0x86   0xF2C0 0x8092      BLT.W    ??mbedtls_pem_read_buffer_8
   \       0x8A   0x2216             MOVS     R2,#+22
   \       0x8C   0x....'....        LDR.W    R1,??DataTable3_2
   \       0x90   0x4648             MOV      R0,R9
   \       0x92   0x....'....        BL       memcmp
   \       0x96   0x2800             CMP      R0,#+0
   \       0x98   0xF040 0x8089      BNE.W    ??mbedtls_pem_read_buffer_8
    277              {
    278          #if defined(MBEDTLS_MD5_C) && defined(MBEDTLS_CIPHER_MODE_CBC) &&         \
    279              ( defined(MBEDTLS_DES_C) || defined(MBEDTLS_AES_C) )
    280                  enc++;
   \       0x9C   0x2701             MOVS     R7,#+1
    281          
    282                  s1 += 22;
    283                  if( *s1 == '\r' ) s1++;
   \       0x9E   0xF819 0x0F16      LDRB     R0,[R9, #+22]!
   \       0xA2   0x280D             CMP      R0,#+13
   \       0xA4   0xD101             BNE.N    ??mbedtls_pem_read_buffer_9
   \       0xA6   0xF109 0x0901      ADD      R9,R9,#+1
    284                  if( *s1 == '\n' ) s1++;
   \                     ??mbedtls_pem_read_buffer_9: (+1)
   \       0xAA   0xF899 0x0000      LDRB     R0,[R9, #+0]
   \       0xAE   0x280A             CMP      R0,#+10
   \       0xB0   0xF040 0x807F      BNE.W    ??mbedtls_pem_read_buffer_10
   \       0xB4   0xF109 0x0501      ADD      R5,R9,#+1
    285                  else return( MBEDTLS_ERR_PEM_INVALID_DATA );
    286          
    287          
    288          #if defined(MBEDTLS_DES_C)
    289                  if( s2 - s1 >= 23 && memcmp( s1, "DEK-Info: DES-EDE3-CBC,", 23 ) == 0 )
   \       0xB8   0x1B70             SUBS     R0,R6,R5
   \       0xBA   0x2817             CMP      R0,#+23
   \       0xBC   0xDB18             BLT.N    ??mbedtls_pem_read_buffer_11
   \       0xBE   0x2217             MOVS     R2,#+23
   \       0xC0   0x....'....        LDR.W    R1,??DataTable3_3
   \       0xC4   0x4628             MOV      R0,R5
   \       0xC6   0x....'....        BL       memcmp
   \       0xCA   0x2800             CMP      R0,#+0
   \       0xCC   0xD110             BNE.N    ??mbedtls_pem_read_buffer_11
    290                  {
    291                      enc_alg = MBEDTLS_CIPHER_DES_EDE3_CBC;
   \       0xCE   0xF04F 0x0825      MOV      R8,#+37
    292          
    293                      s1 += 23;
   \       0xD2   0x3517             ADDS     R5,R5,#+23
    294                      if( s2 - s1 < 16 || pem_get_iv( s1, pem_iv, 8 ) != 0 )
   \       0xD4   0x1B70             SUBS     R0,R6,R5
   \       0xD6   0x2810             CMP      R0,#+16
   \       0xD8   0xDB58             BLT.N    ??mbedtls_pem_read_buffer_12
   \       0xDA   0x2208             MOVS     R2,#+8
   \       0xDC   0xA903             ADD      R1,SP,#+12
   \       0xDE   0x4628             MOV      R0,R5
   \       0xE0   0x....'....        BL       pem_get_iv
   \       0xE4   0x2800             CMP      R0,#+0
   \       0xE6   0xD151             BNE.N    ??mbedtls_pem_read_buffer_12
   \       0xE8   0xE01A             B.N      ??mbedtls_pem_read_buffer_13
    295                          return( MBEDTLS_ERR_PEM_INVALID_ENC_IV );
    296          
    297                      s1 += 16;
    298                  }
   \                     ??mbedtls_pem_read_buffer_2: (+1)
   \       0xEA   0x....'....        LDR.W    R0,??DataTable3_4  ;; 0xffffef80
   \       0xEE   0xE0FB             B.N      ??mbedtls_pem_read_buffer_1
    299                  else if( s2 - s1 >= 18 && memcmp( s1, "DEK-Info: DES-CBC,", 18 ) == 0 )
   \                     ??mbedtls_pem_read_buffer_11: (+1)
   \       0xF0   0x1B70             SUBS     R0,R6,R5
   \       0xF2   0x2812             CMP      R0,#+18
   \       0xF4   0xDB15             BLT.N    ??mbedtls_pem_read_buffer_14
   \       0xF6   0x2212             MOVS     R2,#+18
   \       0xF8   0x....'....        LDR.W    R1,??DataTable3_5
   \       0xFC   0x4628             MOV      R0,R5
   \       0xFE   0x....'....        BL       memcmp
   \      0x102   0x2800             CMP      R0,#+0
   \      0x104   0xD10D             BNE.N    ??mbedtls_pem_read_buffer_14
    300                  {
    301                      enc_alg = MBEDTLS_CIPHER_DES_CBC;
   \      0x106   0xF04F 0x0821      MOV      R8,#+33
    302          
    303                      s1 += 18;
   \      0x10A   0x3512             ADDS     R5,R5,#+18
    304                      if( s2 - s1 < 16 || pem_get_iv( s1, pem_iv, 8) != 0 )
   \      0x10C   0x1B70             SUBS     R0,R6,R5
   \      0x10E   0x2810             CMP      R0,#+16
   \      0x110   0xDB3C             BLT.N    ??mbedtls_pem_read_buffer_12
   \      0x112   0x2208             MOVS     R2,#+8
   \      0x114   0xA903             ADD      R1,SP,#+12
   \      0x116   0x4628             MOV      R0,R5
   \      0x118   0x....'....        BL       pem_get_iv
   \      0x11C   0x2800             CMP      R0,#+0
   \      0x11E   0xD135             BNE.N    ??mbedtls_pem_read_buffer_12
    305                          return( MBEDTLS_ERR_PEM_INVALID_ENC_IV );
    306          
    307                      s1 += 16;
   \                     ??mbedtls_pem_read_buffer_13: (+1)
   \      0x120   0x3510             ADDS     R5,R5,#+16
    308                  }
    309          #endif /* MBEDTLS_DES_C */
    310          
    311          #if defined(MBEDTLS_AES_C)
    312                  if( s2 - s1 >= 14 && memcmp( s1, "DEK-Info: AES-", 14 ) == 0 )
   \                     ??mbedtls_pem_read_buffer_14: (+1)
   \      0x122   0x1B70             SUBS     R0,R6,R5
   \      0x124   0x280E             CMP      R0,#+14
   \      0x126   0xDB34             BLT.N    ??mbedtls_pem_read_buffer_15
   \      0x128   0x220E             MOVS     R2,#+14
   \      0x12A   0x....             LDR.N    R1,??DataTable3_6
   \      0x12C   0x4628             MOV      R0,R5
   \      0x12E   0x....'....        BL       memcmp
   \      0x132   0x2800             CMP      R0,#+0
   \      0x134   0xD12D             BNE.N    ??mbedtls_pem_read_buffer_15
    313                  {
    314                      if( s2 - s1 < 22 )
   \      0x136   0x1B70             SUBS     R0,R6,R5
   \      0x138   0x2816             CMP      R0,#+22
   \      0x13A   0xDB2D             BLT.N    ??mbedtls_pem_read_buffer_16
    315                          return( MBEDTLS_ERR_PEM_UNKNOWN_ENC_ALG );
    316                      else if( memcmp( s1, "DEK-Info: AES-128-CBC,", 22 ) == 0 )
   \      0x13C   0x2216             MOVS     R2,#+22
   \      0x13E   0x....             LDR.N    R1,??DataTable3_7
   \      0x140   0x4628             MOV      R0,R5
   \      0x142   0x....'....        BL       memcmp
   \      0x146   0x2800             CMP      R0,#+0
   \      0x148   0xD102             BNE.N    ??mbedtls_pem_read_buffer_17
    317                          enc_alg = MBEDTLS_CIPHER_AES_128_CBC;
   \      0x14A   0xF04F 0x0805      MOV      R8,#+5
   \      0x14E   0xE012             B.N      ??mbedtls_pem_read_buffer_18
    318                      else if( memcmp( s1, "DEK-Info: AES-192-CBC,", 22 ) == 0 )
   \                     ??mbedtls_pem_read_buffer_17: (+1)
   \      0x150   0x2216             MOVS     R2,#+22
   \      0x152   0x....             LDR.N    R1,??DataTable3_8
   \      0x154   0x4628             MOV      R0,R5
   \      0x156   0x....'....        BL       memcmp
   \      0x15A   0x2800             CMP      R0,#+0
   \      0x15C   0xD102             BNE.N    ??mbedtls_pem_read_buffer_19
    319                          enc_alg = MBEDTLS_CIPHER_AES_192_CBC;
   \      0x15E   0xF04F 0x0806      MOV      R8,#+6
   \      0x162   0xE008             B.N      ??mbedtls_pem_read_buffer_18
    320                      else if( memcmp( s1, "DEK-Info: AES-256-CBC,", 22 ) == 0 )
   \                     ??mbedtls_pem_read_buffer_19: (+1)
   \      0x164   0x2216             MOVS     R2,#+22
   \      0x166   0x....             LDR.N    R1,??DataTable3_9
   \      0x168   0x4628             MOV      R0,R5
   \      0x16A   0x....'....        BL       memcmp
   \      0x16E   0x2800             CMP      R0,#+0
   \      0x170   0xD112             BNE.N    ??mbedtls_pem_read_buffer_16
    321                          enc_alg = MBEDTLS_CIPHER_AES_256_CBC;
   \      0x172   0xF04F 0x0807      MOV      R8,#+7
    322                      else
    323                          return( MBEDTLS_ERR_PEM_UNKNOWN_ENC_ALG );
    324          
    325                      s1 += 22;
   \                     ??mbedtls_pem_read_buffer_18: (+1)
   \      0x176   0x3516             ADDS     R5,R5,#+22
    326                      if( s2 - s1 < 32 || pem_get_iv( s1, pem_iv, 16 ) != 0 )
   \      0x178   0x1B70             SUBS     R0,R6,R5
   \      0x17A   0x2820             CMP      R0,#+32
   \      0x17C   0xDB06             BLT.N    ??mbedtls_pem_read_buffer_12
   \      0x17E   0x2210             MOVS     R2,#+16
   \      0x180   0xA903             ADD      R1,SP,#+12
   \      0x182   0x4628             MOV      R0,R5
   \      0x184   0x....'....        BL       pem_get_iv
   \      0x188   0x2800             CMP      R0,#+0
   \      0x18A   0xD001             BEQ.N    ??mbedtls_pem_read_buffer_20
    327                          return( MBEDTLS_ERR_PEM_INVALID_ENC_IV );
   \                     ??mbedtls_pem_read_buffer_12: (+1)
   \      0x18C   0x....             LDR.N    R0,??DataTable3  ;; 0xffffee00
   \      0x18E   0xE0AB             B.N      ??mbedtls_pem_read_buffer_1
    328          
    329                      s1 += 32;
   \                     ??mbedtls_pem_read_buffer_20: (+1)
   \      0x190   0x3520             ADDS     R5,R5,#+32
    330                  }
    331          #endif /* MBEDTLS_AES_C */
    332          
    333                  if( enc_alg == MBEDTLS_CIPHER_NONE )
   \                     ??mbedtls_pem_read_buffer_15: (+1)
   \      0x192   0x4640             MOV      R0,R8
   \      0x194   0x2800             CMP      R0,#+0
   \      0x196   0xD101             BNE.N    ??mbedtls_pem_read_buffer_21
    334                      return( MBEDTLS_ERR_PEM_UNKNOWN_ENC_ALG );
   \                     ??mbedtls_pem_read_buffer_16: (+1)
   \      0x198   0x....             LDR.N    R0,??DataTable3_10  ;; 0xffffed80
   \      0x19A   0xE0A5             B.N      ??mbedtls_pem_read_buffer_1
    335          
    336                  if( *s1 == '\r' ) s1++;
   \                     ??mbedtls_pem_read_buffer_21: (+1)
   \      0x19C   0x7828             LDRB     R0,[R5, #+0]
   \      0x19E   0x280D             CMP      R0,#+13
   \      0x1A0   0xD100             BNE.N    ??mbedtls_pem_read_buffer_22
   \      0x1A2   0x1C6D             ADDS     R5,R5,#+1
    337                  if( *s1 == '\n' ) s1++;
   \                     ??mbedtls_pem_read_buffer_22: (+1)
   \      0x1A4   0x7828             LDRB     R0,[R5, #+0]
   \      0x1A6   0x280A             CMP      R0,#+10
   \      0x1A8   0xD103             BNE.N    ??mbedtls_pem_read_buffer_10
   \      0x1AA   0xF105 0x0901      ADD      R9,R5,#+1
    338                  else return( MBEDTLS_ERR_PEM_INVALID_DATA );
    339          #else
    340                  return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
    341          #endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
    342                    ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    343              }
    344          
    345              if( s1 >= s2 )
   \                     ??mbedtls_pem_read_buffer_8: (+1)
   \      0x1AE   0x45B1             CMP      R9,R6
   \      0x1B0   0xD301             BCC.N    ??mbedtls_pem_read_buffer_23
    346                  return( MBEDTLS_ERR_PEM_INVALID_DATA );
   \                     ??mbedtls_pem_read_buffer_10: (+1)
   \      0x1B2   0x....             LDR.N    R0,??DataTable3_11  ;; 0xffffef00
   \      0x1B4   0xE098             B.N      ??mbedtls_pem_read_buffer_1
    347          
    348              ret = mbedtls_base64_decode( NULL, 0, &len, s1, s2 - s1 );
    349          
    350              if( ret == MBEDTLS_ERR_BASE64_INVALID_CHARACTER )
   \                     ??mbedtls_pem_read_buffer_23: (+1)
   \      0x1B6   0xEBA6 0x0009      SUB      R0,R6,R9
   \      0x1BA   0x9000             STR      R0,[SP, #+0]
   \      0x1BC   0x464B             MOV      R3,R9
   \      0x1BE   0xAA02             ADD      R2,SP,#+8
   \      0x1C0   0x2100             MOVS     R1,#+0
   \      0x1C2   0x4608             MOV      R0,R1
   \      0x1C4   0x....'....        BL       mbedtls_base64_decode
   \      0x1C8   0xF110 0x0F2C      CMN      R0,#+44
   \      0x1CC   0xD101             BNE.N    ??mbedtls_pem_read_buffer_24
    351                  return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
   \      0x1CE   0x....             LDR.N    R0,??DataTable3_12  ;; 0xffffeed4
   \      0x1D0   0xE08A             B.N      ??mbedtls_pem_read_buffer_1
    352          
    353              if( ( buf = mbedtls_calloc( 1, len ) ) == NULL )
   \                     ??mbedtls_pem_read_buffer_24: (+1)
   \      0x1D2   0x9902             LDR      R1,[SP, #+8]
   \      0x1D4   0x2001             MOVS     R0,#+1
   \      0x1D6   0x....'....        BL       mbedtls_calloc
   \      0x1DA   0x0005             MOVS     R5,R0
   \      0x1DC   0xD101             BNE.N    ??mbedtls_pem_read_buffer_25
    354                  return( MBEDTLS_ERR_PEM_ALLOC_FAILED );
   \      0x1DE   0x....             LDR.N    R0,??DataTable3_13  ;; 0xffffee80
   \      0x1E0   0xE082             B.N      ??mbedtls_pem_read_buffer_1
    355          
    356              if( ( ret = mbedtls_base64_decode( buf, len, &len, s1, s2 - s1 ) ) != 0 )
   \                     ??mbedtls_pem_read_buffer_25: (+1)
   \      0x1E2   0xEBA6 0x0609      SUB      R6,R6,R9
   \      0x1E6   0x9600             STR      R6,[SP, #+0]
   \      0x1E8   0x464B             MOV      R3,R9
   \      0x1EA   0xAA02             ADD      R2,SP,#+8
   \      0x1EC   0x9902             LDR      R1,[SP, #+8]
   \      0x1EE   0x....'....        BL       mbedtls_base64_decode
   \      0x1F2   0x0006             MOVS     R6,R0
   \      0x1F4   0xD00A             BEQ.N    ??mbedtls_pem_read_buffer_26
    357              {
    358                  mbedtls_platform_zeroize( buf, len );
   \      0x1F6   0x9902             LDR      R1,[SP, #+8]
   \      0x1F8   0x4628             MOV      R0,R5
   \      0x1FA   0x....'....        BL       mbedtls_platform_zeroize
    359                  mbedtls_free( buf );
   \      0x1FE   0x4628             MOV      R0,R5
   \      0x200   0x....'....        BL       mbedtls_free
    360                  return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
   \      0x204   0xF5A6 0x5688      SUB      R6,R6,#+4352
   \      0x208   0x4630             MOV      R0,R6
   \      0x20A   0xE06D             B.N      ??mbedtls_pem_read_buffer_1
    361              }
    362          
    363              if( enc != 0 )
   \                     ??mbedtls_pem_read_buffer_26: (+1)
   \      0x20C   0x2F00             CMP      R7,#+0
   \      0x20E   0xD067             BEQ.N    ??mbedtls_pem_read_buffer_27
   \      0x210   0x9E10             LDR      R6,[SP, #+64]
    364              {
    365          #if defined(MBEDTLS_MD5_C) && defined(MBEDTLS_CIPHER_MODE_CBC) &&         \
    366              ( defined(MBEDTLS_DES_C) || defined(MBEDTLS_AES_C) )
    367                  if( pwd == NULL )
   \      0x212   0x2E00             CMP      R6,#+0
   \      0x214   0xD108             BNE.N    ??mbedtls_pem_read_buffer_28
    368                  {
    369                      mbedtls_platform_zeroize( buf, len );
   \      0x216   0x9902             LDR      R1,[SP, #+8]
   \      0x218   0x4628             MOV      R0,R5
   \      0x21A   0x....'....        BL       mbedtls_platform_zeroize
    370                      mbedtls_free( buf );
   \      0x21E   0x4628             MOV      R0,R5
   \      0x220   0x....'....        BL       mbedtls_free
    371                      return( MBEDTLS_ERR_PEM_PASSWORD_REQUIRED );
   \      0x224   0x....             LDR.N    R0,??DataTable3_14  ;; 0xffffed00
   \      0x226   0xE05F             B.N      ??mbedtls_pem_read_buffer_1
    372                  }
    373          
    374                  ret = 0;
   \                     ??mbedtls_pem_read_buffer_28: (+1)
   \      0x228   0x2700             MOVS     R7,#+0
   \      0x22A   0xF8DD 0x9044      LDR      R9,[SP, #+68]
    375          
    376          #if defined(MBEDTLS_DES_C)
    377                  if( enc_alg == MBEDTLS_CIPHER_DES_EDE3_CBC )
   \      0x22E   0x4640             MOV      R0,R8
   \      0x230   0x2825             CMP      R0,#+37
   \      0x232   0xD109             BNE.N    ??mbedtls_pem_read_buffer_29
    378                      ret = pem_des3_decrypt( pem_iv, buf, len, pwd, pwdlen );
   \      0x234   0xF8CD 0x9000      STR      R9,[SP, #+0]
   \      0x238   0x4633             MOV      R3,R6
   \      0x23A   0x9A02             LDR      R2,[SP, #+8]
   \      0x23C   0x4629             MOV      R1,R5
   \      0x23E   0xA803             ADD      R0,SP,#+12
   \      0x240   0x....'....        BL       pem_des3_decrypt
   \      0x244   0x4607             MOV      R7,R0
   \      0x246   0xE00A             B.N      ??mbedtls_pem_read_buffer_30
    379                  else if( enc_alg == MBEDTLS_CIPHER_DES_CBC )
   \                     ??mbedtls_pem_read_buffer_29: (+1)
   \      0x248   0x2821             CMP      R0,#+33
   \      0x24A   0xD108             BNE.N    ??mbedtls_pem_read_buffer_30
    380                      ret = pem_des_decrypt( pem_iv, buf, len, pwd, pwdlen );
   \      0x24C   0xF8CD 0x9000      STR      R9,[SP, #+0]
   \      0x250   0x4633             MOV      R3,R6
   \      0x252   0x9A02             LDR      R2,[SP, #+8]
   \      0x254   0x4629             MOV      R1,R5
   \      0x256   0xA803             ADD      R0,SP,#+12
   \      0x258   0x....'....        BL       pem_des_decrypt
   \      0x25C   0x4607             MOV      R7,R0
    381          #endif /* MBEDTLS_DES_C */
    382          
    383          #if defined(MBEDTLS_AES_C)
    384                  if( enc_alg == MBEDTLS_CIPHER_AES_128_CBC )
   \                     ??mbedtls_pem_read_buffer_30: (+1)
   \      0x25E   0x4640             MOV      R0,R8
   \      0x260   0x2805             CMP      R0,#+5
   \      0x262   0xD10A             BNE.N    ??mbedtls_pem_read_buffer_31
    385                      ret = pem_aes_decrypt( pem_iv, 16, buf, len, pwd, pwdlen );
   \      0x264   0xF8CD 0x9004      STR      R9,[SP, #+4]
   \      0x268   0x9600             STR      R6,[SP, #+0]
   \      0x26A   0x9B02             LDR      R3,[SP, #+8]
   \      0x26C   0x462A             MOV      R2,R5
   \      0x26E   0x2110             MOVS     R1,#+16
   \      0x270   0xA803             ADD      R0,SP,#+12
   \      0x272   0x....'....        BL       pem_aes_decrypt
   \      0x276   0x4607             MOV      R7,R0
   \      0x278   0xE019             B.N      ??mbedtls_pem_read_buffer_32
    386                  else if( enc_alg == MBEDTLS_CIPHER_AES_192_CBC )
   \                     ??mbedtls_pem_read_buffer_31: (+1)
   \      0x27A   0x2806             CMP      R0,#+6
   \      0x27C   0xD10A             BNE.N    ??mbedtls_pem_read_buffer_33
    387                      ret = pem_aes_decrypt( pem_iv, 24, buf, len, pwd, pwdlen );
   \      0x27E   0xF8CD 0x9004      STR      R9,[SP, #+4]
   \      0x282   0x9600             STR      R6,[SP, #+0]
   \      0x284   0x9B02             LDR      R3,[SP, #+8]
   \      0x286   0x462A             MOV      R2,R5
   \      0x288   0x2118             MOVS     R1,#+24
   \      0x28A   0xA803             ADD      R0,SP,#+12
   \      0x28C   0x....'....        BL       pem_aes_decrypt
   \      0x290   0x4607             MOV      R7,R0
   \      0x292   0xE00C             B.N      ??mbedtls_pem_read_buffer_32
    388                  else if( enc_alg == MBEDTLS_CIPHER_AES_256_CBC )
   \                     ??mbedtls_pem_read_buffer_33: (+1)
   \      0x294   0xF1B8 0x0F07      CMP      R8,#+7
   \      0x298   0xD109             BNE.N    ??mbedtls_pem_read_buffer_32
    389                      ret = pem_aes_decrypt( pem_iv, 32, buf, len, pwd, pwdlen );
   \      0x29A   0xF8CD 0x9004      STR      R9,[SP, #+4]
   \      0x29E   0x9600             STR      R6,[SP, #+0]
   \      0x2A0   0x9B02             LDR      R3,[SP, #+8]
   \      0x2A2   0x462A             MOV      R2,R5
   \      0x2A4   0x2120             MOVS     R1,#+32
   \      0x2A6   0xA803             ADD      R0,SP,#+12
   \      0x2A8   0x....'....        BL       pem_aes_decrypt
   \      0x2AC   0x4607             MOV      R7,R0
    390          #endif /* MBEDTLS_AES_C */
    391          
    392                  if( ret != 0 )
   \                     ??mbedtls_pem_read_buffer_32: (+1)
   \      0x2AE   0x2F00             CMP      R7,#+0
   \      0x2B0   0xD004             BEQ.N    ??mbedtls_pem_read_buffer_34
    393                  {
    394                      mbedtls_free( buf );
   \      0x2B2   0x4628             MOV      R0,R5
   \      0x2B4   0x....'....        BL       mbedtls_free
    395                      return( ret );
   \      0x2B8   0x4638             MOV      R0,R7
   \      0x2BA   0xE015             B.N      ??mbedtls_pem_read_buffer_1
    396                  }
    397          
    398                  /*
    399                   * The result will be ASN.1 starting with a SEQUENCE tag, with 1 to 3
    400                   * length bytes (allow 4 to be sure) in all known use cases.
    401                   *
    402                   * Use that as a heuristic to try to detect password mismatches.
    403                   */
    404                  if( len <= 2 || buf[0] != 0x30 || buf[1] > 0x83 )
   \                     ??mbedtls_pem_read_buffer_34: (+1)
   \      0x2BC   0x9802             LDR      R0,[SP, #+8]
   \      0x2BE   0x2803             CMP      R0,#+3
   \      0x2C0   0xD305             BCC.N    ??mbedtls_pem_read_buffer_35
   \      0x2C2   0x7828             LDRB     R0,[R5, #+0]
   \      0x2C4   0x2830             CMP      R0,#+48
   \      0x2C6   0xD102             BNE.N    ??mbedtls_pem_read_buffer_35
   \      0x2C8   0x7868             LDRB     R0,[R5, #+1]
   \      0x2CA   0x2884             CMP      R0,#+132
   \      0x2CC   0xDB08             BLT.N    ??mbedtls_pem_read_buffer_27
    405                  {
    406                      mbedtls_platform_zeroize( buf, len );
   \                     ??mbedtls_pem_read_buffer_35: (+1)
   \      0x2CE   0x9902             LDR      R1,[SP, #+8]
   \      0x2D0   0x4628             MOV      R0,R5
   \      0x2D2   0x....'....        BL       mbedtls_platform_zeroize
    407                      mbedtls_free( buf );
   \      0x2D6   0x4628             MOV      R0,R5
   \      0x2D8   0x....'....        BL       mbedtls_free
    408                      return( MBEDTLS_ERR_PEM_PASSWORD_MISMATCH );
   \      0x2DC   0x....             LDR.N    R0,??DataTable3_15  ;; 0xffffec80
   \      0x2DE   0xE003             B.N      ??mbedtls_pem_read_buffer_1
    409                  }
    410          #else
    411                  mbedtls_platform_zeroize( buf, len );
    412                  mbedtls_free( buf );
    413                  return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
    414          #endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
    415                    ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    416              }
    417          
    418              ctx->buf = buf;
   \                     ??mbedtls_pem_read_buffer_27: (+1)
   \      0x2E0   0x6025             STR      R5,[R4, #+0]
    419              ctx->buflen = len;
   \      0x2E2   0x9802             LDR      R0,[SP, #+8]
   \      0x2E4   0x6060             STR      R0,[R4, #+4]
    420          
    421              return( 0 );
   \      0x2E6   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_pem_read_buffer_1: (+1)
   \      0x2E8   0xB008             ADD      SP,SP,#+32
   \      0x2EA   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    422          }
    423          

   \                                 In section .text, align 2, keep-with-next
    424          void mbedtls_pem_free( mbedtls_pem_context *ctx )
    425          {
   \                     mbedtls_pem_free: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x4604             MOV      R4,R0
    426              if( ctx->buf != NULL )
   \        0x4   0x6820             LDR      R0,[R4, #+0]
   \        0x6   0x2800             CMP      R0,#+0
   \        0x8   0xD002             BEQ.N    ??mbedtls_pem_free_0
    427                  mbedtls_platform_zeroize( ctx->buf, ctx->buflen );
   \        0xA   0x6861             LDR      R1,[R4, #+4]
   \        0xC   0x....'....        BL       mbedtls_platform_zeroize
    428              mbedtls_free( ctx->buf );
   \                     ??mbedtls_pem_free_0: (+1)
   \       0x10   0x6820             LDR      R0,[R4, #+0]
   \       0x12   0x....'....        BL       mbedtls_free
    429              mbedtls_free( ctx->info );
   \       0x16   0x68A0             LDR      R0,[R4, #+8]
   \       0x18   0x....'....        BL       mbedtls_free
    430          
    431              mbedtls_platform_zeroize( ctx, sizeof( mbedtls_pem_context ) );
   \       0x1C   0x210C             MOVS     R1,#+12
   \       0x1E   0x4620             MOV      R0,R4
   \       0x20   0xE8BD 0x4010      POP      {R4,LR}
   \       0x24   0x....'....        B.W      mbedtls_platform_zeroize
    432          }
    433          #endif /* MBEDTLS_PEM_PARSE_C */
    434          
    435          #if defined(MBEDTLS_PEM_WRITE_C)

   \                                 In section .text, align 2, keep-with-next
    436          int mbedtls_pem_write_buffer( const char *header, const char *footer,
    437                                const unsigned char *der_data, size_t der_len,
    438                                unsigned char *buf, size_t buf_len, size_t *olen )
    439          {
   \                     mbedtls_pem_write_buffer: (+1)
   \        0x0   0xE92D 0x4FFE      PUSH     {R1-R11,LR}
   \        0x4   0x4680             MOV      R8,R0
   \        0x6   0x460D             MOV      R5,R1
   \        0x8   0x4617             MOV      R7,R2
   \        0xA   0x4699             MOV      R9,R3
   \        0xC   0xF8DD 0xA034      LDR      R10,[SP, #+52]
   \       0x10   0x9E0E             LDR      R6,[SP, #+56]
    440              int ret;
    441              unsigned char *encode_buf = NULL, *c, *p = buf;
   \       0x12   0x2400             MOVS     R4,#+0
    442              size_t len = 0, use_len, add_len = 0;
    443          
    444              mbedtls_base64_encode( NULL, 0, &use_len, der_data, der_len );
   \       0x14   0xF8CD 0x9000      STR      R9,[SP, #+0]
   \       0x18   0x463B             MOV      R3,R7
   \       0x1A   0xAA01             ADD      R2,SP,#+4
   \       0x1C   0x4621             MOV      R1,R4
   \       0x1E   0x4608             MOV      R0,R1
   \       0x20   0x....'....        BL       mbedtls_base64_encode
    445              add_len = strlen( header ) + strlen( footer ) + ( use_len / 64 ) + 1;
   \       0x24   0x4640             MOV      R0,R8
   \       0x26   0x....'....        BL       strlen
   \       0x2A   0x4683             MOV      R11,R0
   \       0x2C   0x4628             MOV      R0,R5
   \       0x2E   0x....'....        BL       strlen
   \       0x32   0x4483             ADD      R11,R0,R11
   \       0x34   0x9801             LDR      R0,[SP, #+4]
   \       0x36   0xEB0B 0x1B90      ADD      R11,R11,R0, LSR #+6
   \       0x3A   0xF10B 0x0B01      ADD      R11,R11,#+1
    446          
    447              if( use_len + add_len > buf_len )
   \       0x3E   0x4458             ADD      R0,R11,R0
   \       0x40   0x4582             CMP      R10,R0
   \       0x42   0x9801             LDR      R0,[SP, #+4]
   \       0x44   0xD205             BCS.N    ??mbedtls_pem_write_buffer_0
    448              {
    449                  *olen = use_len + add_len;
   \       0x46   0x4483             ADD      R11,R11,R0
   \       0x48   0xF8C6 0xB000      STR      R11,[R6, #+0]
    450                  return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
   \       0x4C   0xF06F 0x0029      MVN      R0,#+41
   \       0x50   0xE054             B.N      ??mbedtls_pem_write_buffer_1
    451              }
    452          
    453              if( use_len != 0 &&
    454                  ( ( encode_buf = mbedtls_calloc( 1, use_len ) ) == NULL ) )
   \                     ??mbedtls_pem_write_buffer_0: (+1)
   \       0x52   0x2800             CMP      R0,#+0
   \       0x54   0xD007             BEQ.N    ??mbedtls_pem_write_buffer_2
   \       0x56   0x4601             MOV      R1,R0
   \       0x58   0x2001             MOVS     R0,#+1
   \       0x5A   0x....'....        BL       mbedtls_calloc
   \       0x5E   0x0004             MOVS     R4,R0
   \       0x60   0xD101             BNE.N    ??mbedtls_pem_write_buffer_2
    455                  return( MBEDTLS_ERR_PEM_ALLOC_FAILED );
   \       0x62   0x....             LDR.N    R0,??DataTable3_13  ;; 0xffffee80
   \       0x64   0xE04A             B.N      ??mbedtls_pem_write_buffer_1
    456          
    457              if( ( ret = mbedtls_base64_encode( encode_buf, use_len, &use_len, der_data,
    458                                         der_len ) ) != 0 )
   \                     ??mbedtls_pem_write_buffer_2: (+1)
   \       0x66   0xF8CD 0x9000      STR      R9,[SP, #+0]
   \       0x6A   0x463B             MOV      R3,R7
   \       0x6C   0xAA01             ADD      R2,SP,#+4
   \       0x6E   0x9901             LDR      R1,[SP, #+4]
   \       0x70   0x4620             MOV      R0,R4
   \       0x72   0x....'....        BL       mbedtls_base64_encode
   \       0x76   0x0007             MOVS     R7,R0
   \       0x78   0xD004             BEQ.N    ??mbedtls_pem_write_buffer_3
    459              {
    460                  mbedtls_free( encode_buf );
   \       0x7A   0x4620             MOV      R0,R4
   \       0x7C   0x....'....        BL       mbedtls_free
    461                  return( ret );
   \       0x80   0x4638             MOV      R0,R7
   \       0x82   0xE03B             B.N      ??mbedtls_pem_write_buffer_1
    462              }
   \                     ??mbedtls_pem_write_buffer_3: (+1)
   \       0x84   0x9F0C             LDR      R7,[SP, #+48]
    463          
    464              memcpy( p, header, strlen( header ) );
   \       0x86   0x4640             MOV      R0,R8
   \       0x88   0x....'....        BL       strlen
   \       0x8C   0x4602             MOV      R2,R0
   \       0x8E   0x4641             MOV      R1,R8
   \       0x90   0x4638             MOV      R0,R7
   \       0x92   0x....'....        BL       __aeabi_memcpy
    465              p += strlen( header );
   \       0x96   0x4640             MOV      R0,R8
   \       0x98   0x....'....        BL       strlen
   \       0x9C   0xEB07 0x0800      ADD      R8,R7,R0
    466              c = encode_buf;
   \       0xA0   0x46A1             MOV      R9,R4
    467          
    468              while( use_len )
   \                     ??mbedtls_pem_write_buffer_4: (+1)
   \       0xA2   0x9801             LDR      R0,[SP, #+4]
   \       0xA4   0x2800             CMP      R0,#+0
   \       0xA6   0xD014             BEQ.N    ??mbedtls_pem_write_buffer_5
    469              {
    470                  len = ( use_len > 64 ) ? 64 : use_len;
   \       0xA8   0x2841             CMP      R0,#+65
   \       0xAA   0xD201             BCS.N    ??mbedtls_pem_write_buffer_6
   \       0xAC   0x4682             MOV      R10,R0
   \       0xAE   0xE001             B.N      ??mbedtls_pem_write_buffer_7
   \                     ??mbedtls_pem_write_buffer_6: (+1)
   \       0xB0   0xF04F 0x0A40      MOV      R10,#+64
    471                  memcpy( p, c, len );
   \                     ??mbedtls_pem_write_buffer_7: (+1)
   \       0xB4   0x4652             MOV      R2,R10
   \       0xB6   0x4649             MOV      R1,R9
   \       0xB8   0x4640             MOV      R0,R8
   \       0xBA   0x....'....        BL       __aeabi_memcpy
    472                  use_len -= len;
   \       0xBE   0x9801             LDR      R0,[SP, #+4]
   \       0xC0   0xEBA0 0x000A      SUB      R0,R0,R10
   \       0xC4   0x9001             STR      R0,[SP, #+4]
    473                  p += len;
   \       0xC6   0x44D0             ADD      R8,R8,R10
    474                  c += len;
   \       0xC8   0x44D1             ADD      R9,R9,R10
    475                  *p++ = '\n';
   \       0xCA   0x200A             MOVS     R0,#+10
   \       0xCC   0xF808 0x0B01      STRB     R0,[R8], #+1
   \       0xD0   0xE7E7             B.N      ??mbedtls_pem_write_buffer_4
    476              }
    477          
    478              memcpy( p, footer, strlen( footer ) );
   \                     ??mbedtls_pem_write_buffer_5: (+1)
   \       0xD2   0x4628             MOV      R0,R5
   \       0xD4   0x....'....        BL       strlen
   \       0xD8   0x4602             MOV      R2,R0
   \       0xDA   0x4629             MOV      R1,R5
   \       0xDC   0x4640             MOV      R0,R8
   \       0xDE   0x....'....        BL       __aeabi_memcpy
    479              p += strlen( footer );
   \       0xE2   0x4628             MOV      R0,R5
   \       0xE4   0x....'....        BL       strlen
   \       0xE8   0x4440             ADD      R0,R8,R0
    480          
    481              *p++ = '\0';
   \       0xEA   0x2100             MOVS     R1,#+0
   \       0xEC   0xF800 0x1B01      STRB     R1,[R0], #+1
    482              *olen = p - buf;
   \       0xF0   0x1BC7             SUBS     R7,R0,R7
   \       0xF2   0x6037             STR      R7,[R6, #+0]
    483          
    484              mbedtls_free( encode_buf );
   \       0xF4   0x4620             MOV      R0,R4
   \       0xF6   0x....'....        BL       mbedtls_free
    485              return( 0 );
   \       0xFA   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_pem_write_buffer_1: (+1)
   \       0xFC   0xE8BD 0x8FFE      POP      {R1-R11,PC}      ;; return
    486          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \        0x0   0xFFFF'EE00        DC32     0xffffee00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \        0x0   0xFFFF'EB80        DC32     0xffffeb80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \        0x0   0x....'....        DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \        0x0   0xFFFF'EF80        DC32     0xffffef80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \        0x0   0x....'....        DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \        0x0   0x....'....        DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \        0x0   0x....'....        DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \        0x0   0x....'....        DC32     ?_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_9:
   \        0x0   0x....'....        DC32     ?_6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_10:
   \        0x0   0xFFFF'ED80        DC32     0xffffed80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_11:
   \        0x0   0xFFFF'EF00        DC32     0xffffef00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_12:
   \        0x0   0xFFFF'EED4        DC32     0xffffeed4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_13:
   \        0x0   0xFFFF'EE80        DC32     0xffffee80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_14:
   \        0x0   0xFFFF'ED00        DC32     0xffffed00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_15:
   \        0x0   0xFFFF'EC80        DC32     0xffffec80

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x50 0x72          DC8 "Proc-Type: 4,ENCRYPTED"
   \              0x6F 0x63    
   \              0x2D 0x54    
   \              0x79 0x70    
   \              0x65 0x3A    
   \              0x20 0x34    
   \              0x2C 0x45    
   \              0x4E 0x43    
   \              0x52 0x59    
   \              0x50 0x54    
   \              0x45 0x44    
   \              0x00         
   \       0x17   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_1:
   \        0x0   0x44 0x45          DC8 "DEK-Info: DES-EDE3-CBC,"
   \              0x4B 0x2D    
   \              0x49 0x6E    
   \              0x66 0x6F    
   \              0x3A 0x20    
   \              0x44 0x45    
   \              0x53 0x2D    
   \              0x45 0x44    
   \              0x45 0x33    
   \              0x2D 0x43    
   \              0x42 0x43    
   \              0x2C 0x00    

   \                                 In section .rodata, align 4
   \                     ?_2:
   \        0x0   0x44 0x45          DC8 "DEK-Info: DES-CBC,"
   \              0x4B 0x2D    
   \              0x49 0x6E    
   \              0x66 0x6F    
   \              0x3A 0x20    
   \              0x44 0x45    
   \              0x53 0x2D    
   \              0x43 0x42    
   \              0x43 0x2C    
   \              0x00         
   \       0x13   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_3:
   \        0x0   0x44 0x45          DC8 "DEK-Info: AES-"
   \              0x4B 0x2D    
   \              0x49 0x6E    
   \              0x66 0x6F    
   \              0x3A 0x20    
   \              0x41 0x45    
   \              0x53 0x2D    
   \              0x00         
   \        0xF   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_4:
   \        0x0   0x44 0x45          DC8 "DEK-Info: AES-128-CBC,"
   \              0x4B 0x2D    
   \              0x49 0x6E    
   \              0x66 0x6F    
   \              0x3A 0x20    
   \              0x41 0x45    
   \              0x53 0x2D    
   \              0x31 0x32    
   \              0x38 0x2D    
   \              0x43 0x42    
   \              0x43 0x2C    
   \              0x00         
   \       0x17   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_5:
   \        0x0   0x44 0x45          DC8 "DEK-Info: AES-192-CBC,"
   \              0x4B 0x2D    
   \              0x49 0x6E    
   \              0x66 0x6F    
   \              0x3A 0x20    
   \              0x41 0x45    
   \              0x53 0x2D    
   \              0x31 0x39    
   \              0x32 0x2D    
   \              0x43 0x42    
   \              0x43 0x2C    
   \              0x00         
   \       0x17   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_6:
   \        0x0   0x44 0x45          DC8 "DEK-Info: AES-256-CBC,"
   \              0x4B 0x2D    
   \              0x49 0x6E    
   \              0x66 0x6F    
   \              0x3A 0x20    
   \              0x41 0x45    
   \              0x53 0x2D    
   \              0x32 0x35    
   \              0x36 0x2D    
   \              0x43 0x42    
   \              0x43 0x2C    
   \              0x00         
   \       0x17   0x00               DC8 0
    487          #endif /* MBEDTLS_PEM_WRITE_C */
    488          #endif /* MBEDTLS_PEM_PARSE_C || MBEDTLS_PEM_WRITE_C */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   mbedtls_pem_free
         8   -> mbedtls_free
         0   -> mbedtls_platform_zeroize
         8   -> mbedtls_platform_zeroize
       0   mbedtls_pem_init
         0   -> __aeabi_memset4
      64   mbedtls_pem_read_buffer
        64   -> mbedtls_base64_decode
        64   -> mbedtls_calloc
        64   -> mbedtls_free
        64   -> mbedtls_platform_zeroize
        64   -> memcmp
        64   -> pem_aes_decrypt
        64   -> pem_des3_decrypt
        64   -> pem_des_decrypt
        64   -> pem_get_iv
        64   -> strlen
        64   -> strstr
      48   mbedtls_pem_write_buffer
        48   -> __aeabi_memcpy
        48   -> mbedtls_base64_encode
        48   -> mbedtls_calloc
        48   -> mbedtls_free
        48   -> strlen
     352   pem_aes_decrypt
       352   -> mbedtls_aes_crypt_cbc
       352   -> mbedtls_aes_free
       352   -> mbedtls_aes_init
       352   -> mbedtls_aes_setkey_dec
       352   -> mbedtls_platform_zeroize
       352   -> pem_pbkdf1
     440   pem_des3_decrypt
       440   -> mbedtls_des3_crypt_cbc
       440   -> mbedtls_des3_free
       440   -> mbedtls_des3_init
       440   -> mbedtls_des3_set3key_dec
       440   -> mbedtls_platform_zeroize
       440   -> pem_pbkdf1
     168   pem_des_decrypt
       168   -> mbedtls_des_crypt_cbc
       168   -> mbedtls_des_free
       168   -> mbedtls_des_init
       168   -> mbedtls_des_setkey_dec
       168   -> mbedtls_platform_zeroize
       168   -> pem_pbkdf1
      16   pem_get_iv
        16   -> __aeabi_memset
     136   pem_pbkdf1
       136   -> __aeabi_memcpy
       136   -> mbedtls_md5_finish_ret
       136   -> mbedtls_md5_free
       136   -> mbedtls_md5_init
       136   -> mbedtls_md5_starts_ret
       136   -> mbedtls_md5_update_ret
       136   -> mbedtls_platform_zeroize


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_10
       4  ??DataTable3_11
       4  ??DataTable3_12
       4  ??DataTable3_13
       4  ??DataTable3_14
       4  ??DataTable3_15
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
      24  ?_0
      24  ?_1
      20  ?_2
      16  ?_3
      24  ?_4
      24  ?_5
      24  ?_6
      40  mbedtls_pem_free
       8  mbedtls_pem_init
     750  mbedtls_pem_read_buffer
     256  mbedtls_pem_write_buffer
     100  pem_aes_decrypt
      96  pem_des3_decrypt
      96  pem_des_decrypt
     100  pem_get_iv
     204  pem_pbkdf1

 
   156 bytes in section .rodata
 1 714 bytes in section .text
 
 1 714 bytes of CODE  memory
   156 bytes of CONST memory

Errors: none
Warnings: none
