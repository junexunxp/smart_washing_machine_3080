###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.3.193/W32 for ARM         10/Jun/2019  13:48:13
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_model\dm_manager.c
#    Command line =  
#        -f C:\Users\nxf42695\AppData\Local\Temp\1\EWC1BC.tmp
#        (C:\Development\smart_washing_machine_3080\csdk\eng\dev_model\dm_manager.c
#        -D DEBUG -D USE_RTOS -D XIP_EXTERNAL_FLASH=1 -D
#        XIP_BOOT_HEADER_ENABLE=1 -D CPU_MIMXRT1052DVL6B -D FSL_RTOS_FREE_RTOS
#        -D PRINTF_ADVANCED_ENABLE -D
#        "MBEDTLS_CONFIG_FILE=\"ksdk_mbedtls_config.h\"" -lC
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list -lA
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list
#        --diag_suppress Pa082,Pa050 -o
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_d16 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" --preinclude
#        C:\Development\smart_washing_machine_3080/source\app_preinclude.h -I
#        C:\Development\smart_washing_machine_3080/board\ -I
#        C:\Development\smart_washing_machine_3080/source\ -I
#        C:\Development\smart_washing_machine_3080/CMSIS\ -I
#        C:\Development\smart_washing_machine_3080/amazon-freertos/freertos/portable\
#        -I C:\Development\smart_washing_machine_3080/amazon-freertos/include\
#        -I C:\Development\smart_washing_machine_3080/component/lists\ -I
#        C:\Development\smart_washing_machine_3080/component/serial_manager\ -I
#        C:\Development\smart_washing_machine_3080/component/uart\ -I
#        C:\Development\smart_washing_machine_3080/component/kv\ -I
#        C:\Development\smart_washing_machine_3080/component/kv/include\ -I
#        C:\Development\smart_washing_machine_3080/device\ -I
#        C:\Development\smart_washing_machine_3080/doc\ -I
#        C:\Development\smart_washing_machine_3080/drivers\ -I
#        C:\Development\smart_washing_machine_3080/src\ -I
#        C:\Development\smart_washing_machine_3080/startup\ -I
#        C:\Development\smart_washing_machine_3080/utilities\ -I
#        C:\Development\smart_washing_machine_3080/xip\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\atm\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_model\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_sign\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\infra\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\mqtt\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\external_libs\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\coap_cloud\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\CoAPPacket\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\server\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\os\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\awss_reset\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\mbedtls\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\ -I
#        C:\Development\smart_washing_machine_3080\mbedtls\port\ksdk\ -Om)
#    Locale       =  C
#    List file    =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list\dm_manager.lst
#    Object file  =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj\dm_manager.o
#
###############################################################################

C:\Development\smart_washing_machine_3080\csdk\eng\dev_model\dm_manager.c
      1          /*
      2           * Copyright (C) 2015-2018 Alibaba Group Holding Limited
      3           */
      4          
      5          
      6          
      7          #include "iotx_dm_internal.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void __dlist_add(dlist_t *, dlist_t *, dlist_t *)
   \                     __dlist_add: (+1)
   \        0x0   0x6042             STR      R2,[R0, #+4]
   \        0x2   0x6001             STR      R1,[R0, #+0]
   \        0x4   0x6048             STR      R0,[R1, #+4]
   \        0x6   0x6010             STR      R0,[R2, #+0]
   \        0x8   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void dlist_add_tail(dlist_t *, dlist_t *)
   \                     dlist_add_tail: (+1)
   \        0x0   0x460A             MOV      R2,R1
   \        0x2   0x6811             LDR      R1,[R2, #+0]
   \        0x4   0x....             B.N      __dlist_add

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void dlist_del(dlist_t *)
   \                     dlist_del: (+1)
   \        0x0   0x6801             LDR      R1,[R0, #+0]
   \        0x2   0x6840             LDR      R0,[R0, #+4]
   \        0x4   0x6048             STR      R0,[R1, #+4]
   \        0x6   0x6001             STR      R1,[R0, #+0]
   \        0x8   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void INIT_AOS_DLIST_HEAD(dlist_t *)
   \                     INIT_AOS_DLIST_HEAD: (+1)
   \        0x0   0x6040             STR      R0,[R0, #+4]
   \        0x2   0x6000             STR      R0,[R0, #+0]
   \        0x4   0x4770             BX       LR               ;; return
      8          

   \                                 In section .bss, align 4
      9          static dm_mgr_ctx g_dm_mgr = {0};
   \                     g_dm_mgr:
   \        0x0                      DS8 16
     10          

   \                                 In section .text, align 2, keep-with-next
     11          static dm_mgr_ctx *_dm_mgr_get_ctx(void)
     12          {
     13              return &g_dm_mgr;
   \                     _dm_mgr_get_ctx: (+1)
   \        0x0   0x....'....        LDR.W    R0,??DataTable10
   \        0x4   0x4770             BX       LR               ;; return
     14          }
     15          

   \                                 In section .text, align 2, keep-with-next
     16          static void _dm_mgr_mutex_lock(void)
     17          {
   \                     _dm_mgr_mutex_lock: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     18              dm_mgr_ctx *ctx = _dm_mgr_get_ctx();
   \        0x2   0x....'....        BL       _dm_mgr_get_ctx
     19              if (ctx->mutex) {
   \        0x6   0x6801             LDR      R1,[R0, #+0]
   \        0x8   0x2900             CMP      R1,#+0
   \        0xA   0xD004             BEQ.N    ??_dm_mgr_mutex_lock_0
     20                  HAL_MutexLock(ctx->mutex);
   \        0xC   0x4608             MOV      R0,R1
   \        0xE   0xE8BD 0x4002      POP      {R1,LR}
   \       0x12   0x....'....        B.W      HAL_MutexLock
     21              }
     22          }
   \                     ??_dm_mgr_mutex_lock_0: (+1)
   \       0x16   0xBD01             POP      {R0,PC}          ;; return
     23          

   \                                 In section .text, align 2, keep-with-next
     24          static void _dm_mgr_mutex_unlock(void)
     25          {
   \                     _dm_mgr_mutex_unlock: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     26              dm_mgr_ctx *ctx = _dm_mgr_get_ctx();
   \        0x2   0x....'....        BL       _dm_mgr_get_ctx
     27              if (ctx->mutex) {
   \        0x6   0x6801             LDR      R1,[R0, #+0]
   \        0x8   0x2900             CMP      R1,#+0
   \        0xA   0xD004             BEQ.N    ??_dm_mgr_mutex_unlock_0
     28                  HAL_MutexUnlock(ctx->mutex);
   \        0xC   0x4608             MOV      R0,R1
   \        0xE   0xE8BD 0x4002      POP      {R1,LR}
   \       0x12   0x....'....        B.W      HAL_MutexUnlock
     29              }
     30          }
   \                     ??_dm_mgr_mutex_unlock_0: (+1)
   \       0x16   0xBD01             POP      {R0,PC}          ;; return
     31          

   \                                 In section .text, align 2, keep-with-next
     32          static int _dm_mgr_next_devid(void)
     33          {
   \                     _dm_mgr_next_devid: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     34              dm_mgr_ctx *ctx = _dm_mgr_get_ctx();
   \        0x2   0x....'....        BL       _dm_mgr_get_ctx
   \        0x6   0x4601             MOV      R1,R0
     35          
     36              return ctx->global_devid++;
   \        0x8   0x6848             LDR      R0,[R1, #+4]
   \        0xA   0x1C42             ADDS     R2,R0,#+1
   \        0xC   0x604A             STR      R2,[R1, #+4]
   \        0xE   0xBD02             POP      {R1,PC}          ;; return
     37          }
     38          

   \                                 In section .text, align 2, keep-with-next
     39          static int _dm_mgr_search_dev_by_devid(_IN_ int devid, _OU_ dm_mgr_dev_node_t **node)
     40          {
   \                     _dm_mgr_search_dev_by_devid: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4605             MOV      R5,R0
   \        0x4   0x460C             MOV      R4,R1
     41              dm_mgr_ctx *ctx = _dm_mgr_get_ctx();
   \        0x6   0x....'....        BL       _dm_mgr_get_ctx
     42              dm_mgr_dev_node_t *search_node = NULL;
     43          
     44              list_for_each_entry(search_node, &ctx->dev_list, linked_list, dm_mgr_dev_node_t) {
   \        0xA   0x68C1             LDR      R1,[R0, #+12]
   \        0xC   0x3984             SUBS     R1,R1,#+132
   \        0xE   0xF100 0x0308      ADD      R3,R0,#+8
   \       0x12   0xE002             B.N      ??_dm_mgr_search_dev_by_devid_0
   \                     ??_dm_mgr_search_dev_by_devid_1: (+1)
   \       0x14   0xF8D1 0x1088      LDR      R1,[R1, #+136]
   \       0x18   0x3984             SUBS     R1,R1,#+132
   \                     ??_dm_mgr_search_dev_by_devid_0: (+1)
   \       0x1A   0xF101 0x0284      ADD      R2,R1,#+132
   \       0x1E   0x429A             CMP      R2,R3
   \       0x20   0xD007             BEQ.N    ??_dm_mgr_search_dev_by_devid_2
     45                  if (search_node->devid == devid) {
   \       0x22   0x680A             LDR      R2,[R1, #+0]
   \       0x24   0x42AA             CMP      R2,R5
   \       0x26   0xD1F5             BNE.N    ??_dm_mgr_search_dev_by_devid_1
     46                      /* dm_log_debug("Device Found, devid: %d", devid); */
     47                      if (node) {
   \       0x28   0x2C00             CMP      R4,#+0
   \       0x2A   0xD000             BEQ.N    ??_dm_mgr_search_dev_by_devid_3
     48                          *node = search_node;
   \       0x2C   0x6021             STR      R1,[R4, #+0]
     49                      }
     50                      return SUCCESS_RETURN;
   \                     ??_dm_mgr_search_dev_by_devid_3: (+1)
   \       0x2E   0x2000             MOVS     R0,#+0
   \       0x30   0xBD32             POP      {R1,R4,R5,PC}
     51                  }
     52              }
     53          
     54              dm_log_debug("Device Not Found, devid: %d", devid);
     55              return FAIL_RETURN;
   \                     ??_dm_mgr_search_dev_by_devid_2: (+1)
   \       0x32   0xF04F 0x30FF      MOV      R0,#-1
   \       0x36   0xBD32             POP      {R1,R4,R5,PC}    ;; return
     56          }
     57          

   \                                 In section .text, align 2, keep-with-next
     58          static int _dm_mgr_search_dev_by_pkdn(_IN_ char product_key[IOTX_PRODUCT_KEY_LEN + 1],
     59                                                _IN_ char device_name[IOTX_DEVICE_NAME_LEN + 1], _OU_ dm_mgr_dev_node_t **node)
     60          {
   \                     _dm_mgr_search_dev_by_pkdn: (+1)
   \        0x0   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \        0x4   0x4605             MOV      R5,R0
   \        0x6   0x460E             MOV      R6,R1
   \        0x8   0x4614             MOV      R4,R2
     61              dm_mgr_ctx *ctx = _dm_mgr_get_ctx();
   \        0xA   0x....'....        BL       _dm_mgr_get_ctx
   \        0xE   0x4607             MOV      R7,R0
     62              dm_mgr_dev_node_t *search_node = NULL;
     63          
     64              list_for_each_entry(search_node, &ctx->dev_list, linked_list, dm_mgr_dev_node_t) {
   \       0x10   0x68F8             LDR      R0,[R7, #+12]
   \       0x12   0xF1A0 0x0884      SUB      R8,R0,#+132
   \       0x16   0xE003             B.N      ??_dm_mgr_search_dev_by_pkdn_0
   \                     ??_dm_mgr_search_dev_by_pkdn_1: (+1)
   \       0x18   0xF8D8 0x0088      LDR      R0,[R8, #+136]
   \       0x1C   0xF1A0 0x0884      SUB      R8,R0,#+132
   \                     ??_dm_mgr_search_dev_by_pkdn_0: (+1)
   \       0x20   0xF108 0x0084      ADD      R0,R8,#+132
   \       0x24   0xF107 0x0108      ADD      R1,R7,#+8
   \       0x28   0x4288             CMP      R0,R1
   \       0x2A   0xD02F             BEQ.N    ??_dm_mgr_search_dev_by_pkdn_2
     65                  if ((strlen(search_node->product_key) == strlen(product_key)) &&
     66                      (memcmp(search_node->product_key, product_key, strlen(product_key)) == 0) &&
     67                      (strlen(search_node->device_name) == strlen(device_name)) &&
     68                      (memcmp(search_node->device_name, device_name, strlen(device_name)) == 0)) {
   \       0x2C   0xF108 0x0008      ADD      R0,R8,#+8
   \       0x30   0x....'....        BL       strlen
   \       0x34   0x4681             MOV      R9,R0
   \       0x36   0x4628             MOV      R0,R5
   \       0x38   0x....'....        BL       strlen
   \       0x3C   0x4581             CMP      R9,R0
   \       0x3E   0xD1EB             BNE.N    ??_dm_mgr_search_dev_by_pkdn_1
   \       0x40   0x4628             MOV      R0,R5
   \       0x42   0x....'....        BL       strlen
   \       0x46   0x4602             MOV      R2,R0
   \       0x48   0x4629             MOV      R1,R5
   \       0x4A   0xF108 0x0008      ADD      R0,R8,#+8
   \       0x4E   0x....'....        BL       memcmp
   \       0x52   0x2800             CMP      R0,#+0
   \       0x54   0xD1E0             BNE.N    ??_dm_mgr_search_dev_by_pkdn_1
   \       0x56   0xF108 0x001D      ADD      R0,R8,#+29
   \       0x5A   0x....'....        BL       strlen
   \       0x5E   0x4681             MOV      R9,R0
   \       0x60   0x4630             MOV      R0,R6
   \       0x62   0x....'....        BL       strlen
   \       0x66   0x4581             CMP      R9,R0
   \       0x68   0xD1D6             BNE.N    ??_dm_mgr_search_dev_by_pkdn_1
   \       0x6A   0x4630             MOV      R0,R6
   \       0x6C   0x....'....        BL       strlen
   \       0x70   0x4602             MOV      R2,R0
   \       0x72   0x4631             MOV      R1,R6
   \       0x74   0xF108 0x001D      ADD      R0,R8,#+29
   \       0x78   0x....'....        BL       memcmp
   \       0x7C   0x2800             CMP      R0,#+0
   \       0x7E   0xD1CB             BNE.N    ??_dm_mgr_search_dev_by_pkdn_1
     69                      /* dm_log_debug("Device Found, Product Key: %s, Device Name: %s", product_key, device_name); */
     70                      if (node) {
   \       0x80   0x2C00             CMP      R4,#+0
   \       0x82   0xD001             BEQ.N    ??_dm_mgr_search_dev_by_pkdn_3
     71                          *node = search_node;
   \       0x84   0xF8C4 0x8000      STR      R8,[R4, #+0]
     72                      }
     73                      return SUCCESS_RETURN;
   \                     ??_dm_mgr_search_dev_by_pkdn_3: (+1)
   \       0x88   0x2000             MOVS     R0,#+0
   \       0x8A   0xE001             B.N      ??_dm_mgr_search_dev_by_pkdn_4
     74                  }
     75              }
     76          
     77              dm_log_debug("Device Not Found, Product Key: %s, Device Name: %s", product_key, device_name);
     78              return FAIL_RETURN;
   \                     ??_dm_mgr_search_dev_by_pkdn_2: (+1)
   \       0x8C   0xF04F 0x30FF      MOV      R0,#-1
   \                     ??_dm_mgr_search_dev_by_pkdn_4: (+1)
   \       0x90   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
     79          }
     80          

   \                                 In section .text, align 2, keep-with-next
     81          static int _dm_mgr_insert_dev(_IN_ int devid, _IN_ int dev_type, char product_key[IOTX_PRODUCT_KEY_LEN + 1],
     82                                        char device_name[IOTX_DEVICE_NAME_LEN + 1])
     83          {
   \                     _dm_mgr_insert_dev: (+1)
   \        0x0   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \        0x4   0x4607             MOV      R7,R0
   \        0x6   0x4688             MOV      R8,R1
   \        0x8   0x4616             MOV      R6,R2
   \        0xA   0x461D             MOV      R5,R3
     84              int res = 0;
     85              dm_mgr_ctx *ctx = _dm_mgr_get_ctx();
   \        0xC   0x....'....        BL       _dm_mgr_get_ctx
   \       0x10   0x4681             MOV      R9,R0
     86              dm_mgr_dev_node_t *node = NULL;
     87          
     88              if (devid < 0 || product_key == NULL || strlen(product_key) >= IOTX_PRODUCT_KEY_LEN + 1 ||
     89                  device_name == NULL || strlen(device_name) >= IOTX_DEVICE_NAME_LEN + 1) {
   \       0x12   0x2F00             CMP      R7,#+0
   \       0x14   0xD40D             BMI.N    ??_dm_mgr_insert_dev_0
   \       0x16   0x2E00             CMP      R6,#+0
   \       0x18   0xD00B             BEQ.N    ??_dm_mgr_insert_dev_0
   \       0x1A   0x4630             MOV      R0,R6
   \       0x1C   0x....'....        BL       strlen
   \       0x20   0x2815             CMP      R0,#+21
   \       0x22   0xD206             BCS.N    ??_dm_mgr_insert_dev_0
   \       0x24   0x2D00             CMP      R5,#+0
   \       0x26   0xD004             BEQ.N    ??_dm_mgr_insert_dev_0
   \       0x28   0x4628             MOV      R0,R5
   \       0x2A   0x....'....        BL       strlen
   \       0x2E   0x2821             CMP      R0,#+33
   \       0x30   0xD302             BCC.N    ??_dm_mgr_insert_dev_1
     90                  return DM_INVALID_PARAMETER;
   \                     ??_dm_mgr_insert_dev_0: (+1)
   \       0x32   0xF06F 0x0001      MVN      R0,#+1
   \       0x36   0xE034             B.N      ??_dm_mgr_insert_dev_2
     91              }
     92          
     93              res = _dm_mgr_search_dev_by_devid(devid, NULL);
     94              if (res == SUCCESS_RETURN) {
   \                     ??_dm_mgr_insert_dev_1: (+1)
   \       0x38   0x2100             MOVS     R1,#+0
   \       0x3A   0x4638             MOV      R0,R7
   \       0x3C   0x....'....        BL       _dm_mgr_search_dev_by_devid
   \       0x40   0x2800             CMP      R0,#+0
   \       0x42   0xD102             BNE.N    ??_dm_mgr_insert_dev_3
     95                  return FAIL_RETURN;
   \       0x44   0xF04F 0x30FF      MOV      R0,#-1
   \       0x48   0xE02B             B.N      ??_dm_mgr_insert_dev_2
     96              }
     97          
     98              node = DM_malloc(sizeof(dm_mgr_dev_node_t));
   \                     ??_dm_mgr_insert_dev_3: (+1)
   \       0x4A   0x208C             MOVS     R0,#+140
   \       0x4C   0x....'....        BL       HAL_Malloc
   \       0x50   0x0004             MOVS     R4,R0
     99              if (node == NULL) {
   \       0x52   0xD102             BNE.N    ??_dm_mgr_insert_dev_4
    100                  return DM_MEMORY_NOT_ENOUGH;
   \       0x54   0xF06F 0x0002      MVN      R0,#+2
   \       0x58   0xE023             B.N      ??_dm_mgr_insert_dev_2
    101              }
    102              memset(node, 0, sizeof(dm_mgr_dev_node_t));
   \                     ??_dm_mgr_insert_dev_4: (+1)
   \       0x5A   0x2200             MOVS     R2,#+0
   \       0x5C   0x218C             MOVS     R1,#+140
   \       0x5E   0x....'....        BL       __aeabi_memset4
    103          
    104              node->devid = devid;
   \       0x62   0x6027             STR      R7,[R4, #+0]
    105              node->dev_type = dev_type;
   \       0x64   0xF8C4 0x8004      STR      R8,[R4, #+4]
    106              memcpy(node->product_key, product_key, strlen(product_key));
   \       0x68   0x4630             MOV      R0,R6
   \       0x6A   0x....'....        BL       strlen
   \       0x6E   0x4602             MOV      R2,R0
   \       0x70   0x4631             MOV      R1,R6
   \       0x72   0xF104 0x0008      ADD      R0,R4,#+8
   \       0x76   0x....'....        BL       __aeabi_memcpy
    107              memcpy(node->device_name, device_name, strlen(device_name));
   \       0x7A   0x4628             MOV      R0,R5
   \       0x7C   0x....'....        BL       strlen
   \       0x80   0x4602             MOV      R2,R0
   \       0x82   0x4629             MOV      R1,R5
   \       0x84   0xF104 0x001D      ADD      R0,R4,#+29
   \       0x88   0x....'....        BL       __aeabi_memcpy
    108              INIT_LIST_HEAD(&node->linked_list);
   \       0x8C   0xF104 0x0084      ADD      R0,R4,#+132
   \       0x90   0x....'....        BL       INIT_AOS_DLIST_HEAD
    109          
    110              list_add_tail(&node->linked_list, &ctx->dev_list);
   \       0x94   0xF109 0x0108      ADD      R1,R9,#+8
   \       0x98   0xF104 0x0084      ADD      R0,R4,#+132
   \       0x9C   0x....'....        BL       dlist_add_tail
    111          
    112              return SUCCESS_RETURN;
   \       0xA0   0x2000             MOVS     R0,#+0
   \                     ??_dm_mgr_insert_dev_2: (+1)
   \       0xA2   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
    113          }
    114          

   \                                 In section .text, align 2, keep-with-next
    115          static void _dm_mgr_destroy_devlist(void)
    116          {
   \                     _dm_mgr_destroy_devlist: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
    117              dm_mgr_ctx *ctx = _dm_mgr_get_ctx();
   \        0x2   0x....'....        BL       _dm_mgr_get_ctx
   \        0x6   0x4604             MOV      R4,R0
    118              dm_mgr_dev_node_t *del_node = NULL;
    119              dm_mgr_dev_node_t *next_node = NULL;
    120          
    121              list_for_each_entry_safe(del_node, next_node, &ctx->dev_list, linked_list, dm_mgr_dev_node_t) {
   \        0x8   0x68E0             LDR      R0,[R4, #+12]
   \        0xA   0xF1A0 0x0584      SUB      R5,R0,#+132
   \        0xE   0xF8D5 0x0088      LDR      R0,[R5, #+136]
   \       0x12   0xF1A0 0x0684      SUB      R6,R0,#+132
   \       0x16   0xE009             B.N      ??_dm_mgr_destroy_devlist_0
    122                  list_del(&del_node->linked_list);
   \                     ??_dm_mgr_destroy_devlist_1: (+1)
   \       0x18   0x....'....        BL       dlist_del
    123          #ifdef DEPRECATED_LINKKIT
    124                  dm_shw_destroy(&del_node->dev_shadow);
    125          #endif
    126                  DM_free(del_node);
   \       0x1C   0x4628             MOV      R0,R5
   \       0x1E   0x....'....        BL       HAL_Free
    127              }
   \       0x22   0x4635             MOV      R5,R6
   \       0x24   0xF8D6 0x0088      LDR      R0,[R6, #+136]
   \       0x28   0xF1A0 0x0684      SUB      R6,R0,#+132
   \                     ??_dm_mgr_destroy_devlist_0: (+1)
   \       0x2C   0xF105 0x0084      ADD      R0,R5,#+132
   \       0x30   0xF104 0x0108      ADD      R1,R4,#+8
   \       0x34   0x4288             CMP      R0,R1
   \       0x36   0xD1EF             BNE.N    ??_dm_mgr_destroy_devlist_1
    128          }
   \       0x38   0xBD70             POP      {R4-R6,PC}       ;; return
    129          
    130          #ifdef DEPRECATED_LINKKIT
    131          static int _dm_mgr_legacy_thing_created(int devid)
    132          {
    133              int res = 0, message_len = 0;
    134              const char *thing_created_fmt = "{\"devid\":%d}";
    135              char *message = NULL;
    136          
    137              message_len = strlen(thing_created_fmt) + DM_UTILS_UINT32_STRLEN + 1;
    138              message = DM_malloc(message_len);
    139              if (message == NULL) {
    140                  return DM_MEMORY_NOT_ENOUGH;
    141              }
    142              memset(message, 0, message_len);
    143              HAL_Snprintf(message, message_len, thing_created_fmt, devid);
    144          
    145              res = _dm_msg_send_to_user(IOTX_DM_EVENT_LEGACY_THING_CREATED, message);
    146              if (res != SUCCESS_RETURN) {
    147                  DM_free(message);
    148                  return FAIL_RETURN;
    149              }
    150          
    151              return SUCCESS_RETURN;
    152          }
    153          #endif
    154          

   \                                 In section .text, align 2, keep-with-next
    155          int dm_mgr_init(void)
    156          {
   \                     dm_mgr_init: (+1)
   \        0x0   0xB518             PUSH     {R3,R4,LR}
   \        0x2   0xB08F             SUB      SP,SP,#+60
    157              int res = 0;
    158              dm_mgr_ctx *ctx = _dm_mgr_get_ctx();
   \        0x4   0x....'....        BL       _dm_mgr_get_ctx
   \        0x8   0x4604             MOV      R4,R0
    159              char product_key[IOTX_PRODUCT_KEY_LEN + 1] = {0};
   \        0xA   0x4668             MOV      R0,SP
   \        0xC   0x2118             MOVS     R1,#+24
   \        0xE   0x....'....        BL       __aeabi_memclr4
    160              char device_name[IOTX_DEVICE_NAME_LEN + 1] = {0};
   \       0x12   0xA806             ADD      R0,SP,#+24
   \       0x14   0x2124             MOVS     R1,#+36
   \       0x16   0x....'....        BL       __aeabi_memclr4
    161          
    162              memset(ctx, 0, sizeof(dm_mgr_ctx));
   \       0x1A   0x2200             MOVS     R2,#+0
   \       0x1C   0x2110             MOVS     R1,#+16
   \       0x1E   0x4620             MOV      R0,R4
   \       0x20   0x....'....        BL       __aeabi_memset4
    163          
    164              /* Create Mutex */
    165              ctx->mutex = HAL_MutexCreate();
   \       0x24   0x....'....        BL       HAL_MutexCreate
   \       0x28   0x6020             STR      R0,[R4, #+0]
    166              if (ctx->mutex == NULL) {
   \       0x2A   0x2800             CMP      R0,#+0
   \       0x2C   0xD015             BEQ.N    ??dm_mgr_init_0
    167                  goto ERROR;
    168              }
    169          
    170              /* Init Device Id*/
    171              ctx->global_devid = IOTX_DM_LOCAL_NODE_DEVID + 1;
   \       0x2E   0x2001             MOVS     R0,#+1
   \       0x30   0x6060             STR      R0,[R4, #+4]
    172          
    173              /* Init Device List */
    174              INIT_LIST_HEAD(&ctx->dev_list);
   \       0x32   0xF104 0x0008      ADD      R0,R4,#+8
   \       0x36   0x....'....        BL       INIT_AOS_DLIST_HEAD
    175          
    176              /* Local Node */
    177              HAL_GetProductKey(product_key);
   \       0x3A   0x4668             MOV      R0,SP
   \       0x3C   0x....'....        BL       HAL_GetProductKey
    178              HAL_GetDeviceName(device_name);
   \       0x40   0xA806             ADD      R0,SP,#+24
   \       0x42   0x....'....        BL       HAL_GetDeviceName
    179              res = _dm_mgr_insert_dev(IOTX_DM_LOCAL_NODE_DEVID, IOTX_DM_DEVICE_TYPE, product_key, device_name);
    180              if (res != SUCCESS_RETURN) {
   \       0x46   0xAB06             ADD      R3,SP,#+24
   \       0x48   0x466A             MOV      R2,SP
   \       0x4A   0x2101             MOVS     R1,#+1
   \       0x4C   0x2000             MOVS     R0,#+0
   \       0x4E   0x....'....        BL       _dm_mgr_insert_dev
   \       0x52   0x2800             CMP      R0,#+0
   \       0x54   0xD101             BNE.N    ??dm_mgr_init_0
    181                  goto ERROR;
    182              }
    183          
    184          #ifdef DEPRECATED_LINKKIT
    185              _dm_mgr_legacy_thing_created(IOTX_DM_LOCAL_NODE_DEVID);
    186          #endif
    187          
    188              return SUCCESS_RETURN;
   \       0x56   0x2000             MOVS     R0,#+0
   \       0x58   0xE00B             B.N      ??dm_mgr_init_1
    189          
    190          ERROR:
    191              if (ctx->mutex) {
   \                     ??dm_mgr_init_0: (+1)
   \       0x5A   0x6820             LDR      R0,[R4, #+0]
   \       0x5C   0x2800             CMP      R0,#+0
   \       0x5E   0xD001             BEQ.N    ??dm_mgr_init_2
    192                  HAL_MutexDestroy(ctx->mutex);
   \       0x60   0x....'....        BL       HAL_MutexDestroy
    193              }
    194              memset(ctx, 0, sizeof(dm_mgr_ctx));
   \                     ??dm_mgr_init_2: (+1)
   \       0x64   0x2200             MOVS     R2,#+0
   \       0x66   0x2110             MOVS     R1,#+16
   \       0x68   0x4620             MOV      R0,R4
   \       0x6A   0x....'....        BL       __aeabi_memset4
    195              return FAIL_RETURN;
   \       0x6E   0xF04F 0x30FF      MOV      R0,#-1
   \                     ??dm_mgr_init_1: (+1)
   \       0x72   0xB010             ADD      SP,SP,#+64
   \       0x74   0xBD10             POP      {R4,PC}          ;; return
    196          }
    197          

   \                                 In section .text, align 2, keep-with-next
    198          int dm_mgr_deinit(void)
    199          {
   \                     dm_mgr_deinit: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
    200              dm_mgr_ctx *ctx = _dm_mgr_get_ctx();
   \        0x2   0x....'....        BL       _dm_mgr_get_ctx
   \        0x6   0x4604             MOV      R4,R0
    201          
    202              _dm_mgr_mutex_lock();
   \        0x8   0x....'....        BL       _dm_mgr_mutex_lock
    203              _dm_mgr_destroy_devlist();
   \        0xC   0x....'....        BL       _dm_mgr_destroy_devlist
    204              _dm_mgr_mutex_unlock();
   \       0x10   0x....'....        BL       _dm_mgr_mutex_unlock
    205          
    206              if (ctx->mutex) {
   \       0x14   0x6820             LDR      R0,[R4, #+0]
   \       0x16   0x2800             CMP      R0,#+0
   \       0x18   0xD001             BEQ.N    ??dm_mgr_deinit_0
    207                  HAL_MutexDestroy(ctx->mutex);
   \       0x1A   0x....'....        BL       HAL_MutexDestroy
    208              }
    209          
    210              return SUCCESS_RETURN;
   \                     ??dm_mgr_deinit_0: (+1)
   \       0x1E   0x2000             MOVS     R0,#+0
   \       0x20   0xBD10             POP      {R4,PC}          ;; return
    211          }
    212          

   \                                 In section .text, align 2, keep-with-next
    213          int dm_mgr_device_query(_IN_ char product_key[IOTX_PRODUCT_KEY_LEN + 1], _IN_ char device_name[IOTX_DEVICE_NAME_LEN + 1], _OU_ int *devid)
    214          {
   \                     dm_mgr_device_query: (+1)
   \        0x0   0xB57C             PUSH     {R2-R6,LR}
   \        0x2   0x4605             MOV      R5,R0
   \        0x4   0x460E             MOV      R6,R1
   \        0x6   0x4614             MOV      R4,R2
    215              int res = 0;
    216              dm_mgr_ctx *ctx = _dm_mgr_get_ctx();
   \        0x8   0x....'....        BL       _dm_mgr_get_ctx
    217              dm_mgr_dev_node_t *node = NULL;
   \        0xC   0x2000             MOVS     R0,#+0
   \        0xE   0x9000             STR      R0,[SP, #+0]
    218          
    219              /* duplicated parameters check is removed */
    220          
    221              res = _dm_mgr_search_dev_by_pkdn(product_key, device_name, &node);
    222              if (res == SUCCESS_RETURN) {
   \       0x10   0x466A             MOV      R2,SP
   \       0x12   0x4631             MOV      R1,R6
   \       0x14   0x4628             MOV      R0,R5
   \       0x16   0x....'....        BL       _dm_mgr_search_dev_by_pkdn
   \       0x1A   0x2800             CMP      R0,#+0
   \       0x1C   0xD106             BNE.N    ??dm_mgr_device_query_0
    223                  if (devid) {
   \       0x1E   0x2C00             CMP      R4,#+0
   \       0x20   0xD002             BEQ.N    ??dm_mgr_device_query_1
    224                      *devid = node->devid;
   \       0x22   0x9800             LDR      R0,[SP, #+0]
   \       0x24   0x6800             LDR      R0,[R0, #+0]
   \       0x26   0x6020             STR      R0,[R4, #+0]
    225                  }
    226                  return SUCCESS_RETURN;
   \                     ??dm_mgr_device_query_1: (+1)
   \       0x28   0x2000             MOVS     R0,#+0
   \       0x2A   0xBD76             POP      {R1,R2,R4-R6,PC}
    227              }
    228          
    229              return FAIL_RETURN;
   \                     ??dm_mgr_device_query_0: (+1)
   \       0x2C   0xF04F 0x30FF      MOV      R0,#-1
   \       0x30   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
    230          }
    231          

   \                                 In section .text, align 2, keep-with-next
    232          int dm_mgr_device_create(_IN_ int dev_type, _IN_ char product_key[IOTX_PRODUCT_KEY_LEN + 1],
    233                                   _IN_ char device_name[IOTX_DEVICE_NAME_LEN + 1], _IN_ char device_secret[IOTX_DEVICE_SECRET_LEN + 1], _OU_ int *devid)
    234          {
   \                     dm_mgr_device_create: (+1)
   \        0x0   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \        0x4   0x4681             MOV      R9,R0
   \        0x6   0x460F             MOV      R7,R1
   \        0x8   0x4616             MOV      R6,R2
   \        0xA   0x461D             MOV      R5,R3
    235              int res = 0;
    236              dm_mgr_ctx *ctx = _dm_mgr_get_ctx();
   \        0xC   0x....'....        BL       _dm_mgr_get_ctx
   \       0x10   0x4680             MOV      R8,R0
    237              dm_mgr_dev_node_t *node = NULL;
   \       0x12   0x2000             MOVS     R0,#+0
   \       0x14   0x9000             STR      R0,[SP, #+0]
    238          
    239              if (product_key == NULL || device_name == NULL ||
    240                  strlen(product_key) >= IOTX_PRODUCT_KEY_LEN + 1 ||
    241                  strlen(device_name) >= IOTX_DEVICE_NAME_LEN + 1) {
   \       0x16   0x2F00             CMP      R7,#+0
   \       0x18   0xD012             BEQ.N    ??dm_mgr_device_create_0
   \       0x1A   0x2E00             CMP      R6,#+0
   \       0x1C   0xD010             BEQ.N    ??dm_mgr_device_create_0
   \       0x1E   0x4638             MOV      R0,R7
   \       0x20   0x....'....        BL       strlen
   \       0x24   0x2815             CMP      R0,#+21
   \       0x26   0xD20B             BCS.N    ??dm_mgr_device_create_0
   \       0x28   0x4630             MOV      R0,R6
   \       0x2A   0x....'....        BL       strlen
   \       0x2E   0x2821             CMP      R0,#+33
   \       0x30   0xD206             BCS.N    ??dm_mgr_device_create_0
    242                  return DM_INVALID_PARAMETER;
    243              }
    244          
    245              if (device_secret != NULL && strlen(device_secret) >= IOTX_DEVICE_SECRET_LEN + 1) {
   \       0x32   0x2D00             CMP      R5,#+0
   \       0x34   0xD007             BEQ.N    ??dm_mgr_device_create_1
   \       0x36   0x4628             MOV      R0,R5
   \       0x38   0x....'....        BL       strlen
   \       0x3C   0x2841             CMP      R0,#+65
   \       0x3E   0xD302             BCC.N    ??dm_mgr_device_create_1
    246                  return DM_INVALID_PARAMETER;
   \                     ??dm_mgr_device_create_0: (+1)
   \       0x40   0xF06F 0x0001      MVN      R0,#+1
   \       0x44   0xE054             B.N      ??dm_mgr_device_create_2
    247              }
   \                     ??dm_mgr_device_create_1: (+1)
   \       0x46   0x9C08             LDR      R4,[SP, #+32]
    248          
    249              res = _dm_mgr_search_dev_by_pkdn(product_key, device_name, &node);
    250              if (res == SUCCESS_RETURN) {
   \       0x48   0x466A             MOV      R2,SP
   \       0x4A   0x4631             MOV      R1,R6
   \       0x4C   0x4638             MOV      R0,R7
   \       0x4E   0x....'....        BL       _dm_mgr_search_dev_by_pkdn
   \       0x52   0x2800             CMP      R0,#+0
   \       0x54   0xD107             BNE.N    ??dm_mgr_device_create_3
    251                  if (devid) {
   \       0x56   0x2C00             CMP      R4,#+0
   \       0x58   0xD002             BEQ.N    ??dm_mgr_device_create_4
    252                      *devid = node->devid;
   \       0x5A   0x9800             LDR      R0,[SP, #+0]
   \       0x5C   0x6800             LDR      R0,[R0, #+0]
   \       0x5E   0x6020             STR      R0,[R4, #+0]
    253                  }
    254                  return FAIL_RETURN;
   \                     ??dm_mgr_device_create_4: (+1)
   \       0x60   0xF04F 0x30FF      MOV      R0,#-1
   \       0x64   0xE044             B.N      ??dm_mgr_device_create_2
    255              }
    256          
    257              node = DM_malloc(sizeof(dm_mgr_dev_node_t));
   \                     ??dm_mgr_device_create_3: (+1)
   \       0x66   0x208C             MOVS     R0,#+140
   \       0x68   0x....'....        BL       HAL_Malloc
   \       0x6C   0x9000             STR      R0,[SP, #+0]
    258              if (node == NULL) {
   \       0x6E   0x2800             CMP      R0,#+0
   \       0x70   0xD102             BNE.N    ??dm_mgr_device_create_5
    259                  return DM_MEMORY_NOT_ENOUGH;
   \       0x72   0xF06F 0x0002      MVN      R0,#+2
   \       0x76   0xE03B             B.N      ??dm_mgr_device_create_2
    260              }
    261              memset(node, 0, sizeof(dm_mgr_dev_node_t));
   \                     ??dm_mgr_device_create_5: (+1)
   \       0x78   0x2200             MOVS     R2,#+0
   \       0x7A   0x218C             MOVS     R1,#+140
   \       0x7C   0x....'....        BL       __aeabi_memset4
    262          
    263              node->devid = _dm_mgr_next_devid();
   \       0x80   0x....'....        BL       _dm_mgr_next_devid
   \       0x84   0x9900             LDR      R1,[SP, #+0]
   \       0x86   0x6008             STR      R0,[R1, #+0]
    264              node->dev_type = dev_type;
   \       0x88   0x9800             LDR      R0,[SP, #+0]
   \       0x8A   0xF8C0 0x9004      STR      R9,[R0, #+4]
    265          #if defined(DEPRECATED_LINKKIT)
    266              node->dev_shadow = NULL;
    267              node->tsl_source = IOTX_DM_TSL_SOURCE_CLOUD;
    268          #endif
    269              memcpy(node->product_key, product_key, strlen(product_key));
   \       0x8E   0x4638             MOV      R0,R7
   \       0x90   0x....'....        BL       strlen
   \       0x94   0x4602             MOV      R2,R0
   \       0x96   0x4639             MOV      R1,R7
   \       0x98   0x9800             LDR      R0,[SP, #+0]
   \       0x9A   0x3008             ADDS     R0,R0,#+8
   \       0x9C   0x....'....        BL       __aeabi_memcpy
    270              memcpy(node->device_name, device_name, strlen(device_name));
   \       0xA0   0x4630             MOV      R0,R6
   \       0xA2   0x....'....        BL       strlen
   \       0xA6   0x4602             MOV      R2,R0
   \       0xA8   0x4631             MOV      R1,R6
   \       0xAA   0x9800             LDR      R0,[SP, #+0]
   \       0xAC   0x301D             ADDS     R0,R0,#+29
   \       0xAE   0x....'....        BL       __aeabi_memcpy
    271              if (device_secret != NULL) {
   \       0xB2   0x2D00             CMP      R5,#+0
   \       0xB4   0xD008             BEQ.N    ??dm_mgr_device_create_6
    272                  memcpy(node->device_secret, device_secret, strlen(device_secret));
   \       0xB6   0x4628             MOV      R0,R5
   \       0xB8   0x....'....        BL       strlen
   \       0xBC   0x4602             MOV      R2,R0
   \       0xBE   0x4629             MOV      R1,R5
   \       0xC0   0x9800             LDR      R0,[SP, #+0]
   \       0xC2   0x303E             ADDS     R0,R0,#+62
   \       0xC4   0x....'....        BL       __aeabi_memcpy
    273              }
    274              node->dev_status = IOTX_DM_DEV_STATUS_AUTHORIZED;
   \                     ??dm_mgr_device_create_6: (+1)
   \       0xC8   0x2001             MOVS     R0,#+1
   \       0xCA   0x9900             LDR      R1,[SP, #+0]
   \       0xCC   0xF881 0x0080      STRB     R0,[R1, #+128]
    275              INIT_LIST_HEAD(&node->linked_list);
   \       0xD0   0x9800             LDR      R0,[SP, #+0]
   \       0xD2   0x3084             ADDS     R0,R0,#+132
   \       0xD4   0x....'....        BL       INIT_AOS_DLIST_HEAD
    276          
    277              list_add_tail(&node->linked_list, &ctx->dev_list);
   \       0xD8   0xF108 0x0108      ADD      R1,R8,#+8
   \       0xDC   0x9800             LDR      R0,[SP, #+0]
   \       0xDE   0x3084             ADDS     R0,R0,#+132
   \       0xE0   0x....'....        BL       dlist_add_tail
    278          
    279              if (devid) {
   \       0xE4   0x2C00             CMP      R4,#+0
   \       0xE6   0xD002             BEQ.N    ??dm_mgr_device_create_7
    280                  *devid = node->devid;
   \       0xE8   0x9800             LDR      R0,[SP, #+0]
   \       0xEA   0x6800             LDR      R0,[R0, #+0]
   \       0xEC   0x6020             STR      R0,[R4, #+0]
    281              }
    282          
    283              return SUCCESS_RETURN;
   \                     ??dm_mgr_device_create_7: (+1)
   \       0xEE   0x2000             MOVS     R0,#+0
   \                     ??dm_mgr_device_create_2: (+1)
   \       0xF0   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
    284          }
    285          

   \                                 In section .text, align 2, keep-with-next
    286          int dm_mgr_device_destroy(_IN_ int devid)
    287          {
   \                     dm_mgr_device_destroy: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    288              int res = 0;
    289              dm_mgr_dev_node_t *node = NULL;
   \        0x2   0x2100             MOVS     R1,#+0
   \        0x4   0x9100             STR      R1,[SP, #+0]
    290          
    291              if (devid < 0) {
   \        0x6   0x2800             CMP      R0,#+0
   \        0x8   0xD502             BPL.N    ??dm_mgr_device_destroy_0
    292                  return DM_INVALID_PARAMETER;
   \        0xA   0xF06F 0x0001      MVN      R0,#+1
   \        0xE   0xBD02             POP      {R1,PC}
    293              }
    294          
    295              res = _dm_mgr_search_dev_by_devid(devid, &node);
    296              if (res != SUCCESS_RETURN) {
   \                     ??dm_mgr_device_destroy_0: (+1)
   \       0x10   0x4669             MOV      R1,SP
   \       0x12   0x....'....        BL       _dm_mgr_search_dev_by_devid
   \       0x16   0x2800             CMP      R0,#+0
   \       0x18   0xD002             BEQ.N    ??dm_mgr_device_destroy_1
    297                  return FAIL_RETURN;
   \       0x1A   0xF04F 0x30FF      MOV      R0,#-1
   \       0x1E   0xBD02             POP      {R1,PC}
    298              }
    299          
    300              if (node->devid == IOTX_DM_LOCAL_NODE_DEVID) {
   \                     ??dm_mgr_device_destroy_1: (+1)
   \       0x20   0x9800             LDR      R0,[SP, #+0]
   \       0x22   0x6800             LDR      R0,[R0, #+0]
   \       0x24   0x2800             CMP      R0,#+0
   \       0x26   0xD102             BNE.N    ??dm_mgr_device_destroy_2
    301                  return FAIL_RETURN;
   \       0x28   0xF04F 0x30FF      MOV      R0,#-1
   \       0x2C   0xBD02             POP      {R1,PC}
    302              }
    303          
    304              list_del(&node->linked_list);
   \                     ??dm_mgr_device_destroy_2: (+1)
   \       0x2E   0x9800             LDR      R0,[SP, #+0]
   \       0x30   0x3084             ADDS     R0,R0,#+132
   \       0x32   0x....'....        BL       dlist_del
    305          
    306          #if defined(DEPRECATED_LINKKIT)
    307              if (node->dev_shadow) {
    308                  dm_shw_destroy(&node->dev_shadow);
    309              }
    310          #endif
    311          
    312          #ifdef DEVICE_MODEL_GATEWAY
    313              dm_client_subdev_unsubscribe(node->product_key,node->device_name);
    314          #endif
    315          
    316              DM_free(node);
   \       0x36   0x9800             LDR      R0,[SP, #+0]
   \       0x38   0x....'....        BL       HAL_Free
    317          
    318              return SUCCESS_RETURN;
   \       0x3C   0x2000             MOVS     R0,#+0
   \       0x3E   0xBD02             POP      {R1,PC}          ;; return
    319          }
    320          

   \                                 In section .text, align 2, keep-with-next
    321          int dm_mgr_device_number(void)
    322          {
   \                     dm_mgr_device_number: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
    323              int index = 0;
   \        0x2   0x2400             MOVS     R4,#+0
    324              dm_mgr_ctx *ctx = _dm_mgr_get_ctx();
   \        0x4   0x....'....        BL       _dm_mgr_get_ctx
    325              dm_mgr_dev_node_t *search_node = NULL;
    326          
    327              list_for_each_entry(search_node, &ctx->dev_list, linked_list, dm_mgr_dev_node_t) {
   \        0x8   0x68C1             LDR      R1,[R0, #+12]
   \        0xA   0x3984             SUBS     R1,R1,#+132
   \        0xC   0xF100 0x0308      ADD      R3,R0,#+8
   \       0x10   0xE003             B.N      ??dm_mgr_device_number_0
    328                  index++;
   \                     ??dm_mgr_device_number_1: (+1)
   \       0x12   0x1C64             ADDS     R4,R4,#+1
    329              }
   \       0x14   0xF8D1 0x1088      LDR      R1,[R1, #+136]
   \       0x18   0x3984             SUBS     R1,R1,#+132
   \                     ??dm_mgr_device_number_0: (+1)
   \       0x1A   0xF101 0x0284      ADD      R2,R1,#+132
   \       0x1E   0x429A             CMP      R2,R3
   \       0x20   0xD1F7             BNE.N    ??dm_mgr_device_number_1
    330          
    331              return index;
   \       0x22   0x4620             MOV      R0,R4
   \       0x24   0xBD10             POP      {R4,PC}          ;; return
    332          }
    333          

   \                                 In section .text, align 2, keep-with-next
    334          int dm_mgr_get_devid_by_index(_IN_ int index, _OU_ int *devid)
    335          {
   \                     dm_mgr_get_devid_by_index: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4605             MOV      R5,R0
   \        0x4   0x460C             MOV      R4,R1
    336              int search_index = 0;
   \        0x6   0x2600             MOVS     R6,#+0
    337              dm_mgr_ctx *ctx = _dm_mgr_get_ctx();
   \        0x8   0x....'....        BL       _dm_mgr_get_ctx
    338              dm_mgr_dev_node_t *search_node = NULL;
    339          
    340              if (index < 0 || devid == NULL) {
   \        0xC   0x2D00             CMP      R5,#+0
   \        0xE   0xD401             BMI.N    ??dm_mgr_get_devid_by_index_0
   \       0x10   0x2C00             CMP      R4,#+0
   \       0x12   0xD102             BNE.N    ??dm_mgr_get_devid_by_index_1
    341                  return DM_INVALID_PARAMETER;
   \                     ??dm_mgr_get_devid_by_index_0: (+1)
   \       0x14   0xF06F 0x0001      MVN      R0,#+1
   \       0x18   0xBD70             POP      {R4-R6,PC}
    342              }
    343          
    344              list_for_each_entry(search_node, &ctx->dev_list, linked_list, dm_mgr_dev_node_t) {
   \                     ??dm_mgr_get_devid_by_index_1: (+1)
   \       0x1A   0x68C1             LDR      R1,[R0, #+12]
   \       0x1C   0x3984             SUBS     R1,R1,#+132
   \       0x1E   0xF100 0x0308      ADD      R3,R0,#+8
   \       0x22   0xE003             B.N      ??dm_mgr_get_devid_by_index_2
    345                  if (search_index == index) {
    346                      *devid = search_node->devid;
    347                      return SUCCESS_RETURN;
    348                  }
    349                  search_index++;
   \                     ??dm_mgr_get_devid_by_index_3: (+1)
   \       0x24   0x1C76             ADDS     R6,R6,#+1
   \       0x26   0xF8D1 0x1088      LDR      R1,[R1, #+136]
   \       0x2A   0x3984             SUBS     R1,R1,#+132
   \                     ??dm_mgr_get_devid_by_index_2: (+1)
   \       0x2C   0xF101 0x0284      ADD      R2,R1,#+132
   \       0x30   0x429A             CMP      R2,R3
   \       0x32   0xD005             BEQ.N    ??dm_mgr_get_devid_by_index_4
   \       0x34   0x42AE             CMP      R6,R5
   \       0x36   0xD1F5             BNE.N    ??dm_mgr_get_devid_by_index_3
   \       0x38   0x6808             LDR      R0,[R1, #+0]
   \       0x3A   0x6020             STR      R0,[R4, #+0]
   \       0x3C   0x2000             MOVS     R0,#+0
   \       0x3E   0xBD70             POP      {R4-R6,PC}
    350              }
    351          
    352              return FAIL_RETURN;
   \                     ??dm_mgr_get_devid_by_index_4: (+1)
   \       0x40   0xF04F 0x30FF      MOV      R0,#-1
   \       0x44   0xBD70             POP      {R4-R6,PC}       ;; return
    353          }
    354          

   \                                 In section .text, align 2, keep-with-next
    355          int dm_mgr_get_next_devid(_IN_ int devid, _OU_ int *devid_next)
    356          {
   \                     dm_mgr_get_next_devid: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4605             MOV      R5,R0
   \        0x4   0x460C             MOV      R4,R1
    357              dm_mgr_ctx *ctx = _dm_mgr_get_ctx();
   \        0x6   0x....'....        BL       _dm_mgr_get_ctx
   \        0xA   0x4601             MOV      R1,R0
    358              dm_mgr_dev_node_t *search_node = NULL;
   \        0xC   0x2000             MOVS     R0,#+0
    359              dm_mgr_dev_node_t *next_node = NULL;
    360          
    361              if (devid < 0 || devid_next == NULL) {
   \        0xE   0x2D00             CMP      R5,#+0
   \       0x10   0xD401             BMI.N    ??dm_mgr_get_next_devid_0
   \       0x12   0x2C00             CMP      R4,#+0
   \       0x14   0xD102             BNE.N    ??dm_mgr_get_next_devid_1
    362                  return DM_INVALID_PARAMETER;
   \                     ??dm_mgr_get_next_devid_0: (+1)
   \       0x16   0xF06F 0x0001      MVN      R0,#+1
   \       0x1A   0xBD70             POP      {R4-R6,PC}
    363              }
    364          
    365              list_for_each_entry(next_node, &ctx->dev_list, linked_list, dm_mgr_dev_node_t) {
   \                     ??dm_mgr_get_next_devid_1: (+1)
   \       0x1C   0x68CA             LDR      R2,[R1, #+12]
   \       0x1E   0x3A84             SUBS     R2,R2,#+132
   \       0x20   0xF101 0x0608      ADD      R6,R1,#+8
   \       0x24   0xE006             B.N      ??dm_mgr_get_next_devid_2
    366                  if (search_node && search_node->devid == devid) {
    367                      *devid_next = next_node->devid;
    368                      return SUCCESS_RETURN;
    369                  }
    370          
    371                  if (next_node->devid == devid) {
   \                     ??dm_mgr_get_next_devid_3: (+1)
   \       0x26   0x6813             LDR      R3,[R2, #+0]
   \       0x28   0x42AB             CMP      R3,R5
   \       0x2A   0xD100             BNE.N    ??dm_mgr_get_next_devid_4
    372                      search_node = next_node;
   \       0x2C   0x4610             MOV      R0,R2
    373                  }
   \                     ??dm_mgr_get_next_devid_4: (+1)
   \       0x2E   0xF8D2 0x2088      LDR      R2,[R2, #+136]
   \       0x32   0x3A84             SUBS     R2,R2,#+132
   \                     ??dm_mgr_get_next_devid_2: (+1)
   \       0x34   0xF102 0x0384      ADD      R3,R2,#+132
   \       0x38   0x42B3             CMP      R3,R6
   \       0x3A   0xD008             BEQ.N    ??dm_mgr_get_next_devid_5
   \       0x3C   0x2800             CMP      R0,#+0
   \       0x3E   0xD0F2             BEQ.N    ??dm_mgr_get_next_devid_3
   \       0x40   0x6803             LDR      R3,[R0, #+0]
   \       0x42   0x42AB             CMP      R3,R5
   \       0x44   0xD1EF             BNE.N    ??dm_mgr_get_next_devid_3
   \       0x46   0x6810             LDR      R0,[R2, #+0]
   \       0x48   0x6020             STR      R0,[R4, #+0]
   \       0x4A   0x2000             MOVS     R0,#+0
   \       0x4C   0xBD70             POP      {R4-R6,PC}
    374              }
    375          
    376              return FAIL_RETURN;
   \                     ??dm_mgr_get_next_devid_5: (+1)
   \       0x4E   0xF04F 0x30FF      MOV      R0,#-1
   \       0x52   0xBD70             POP      {R4-R6,PC}       ;; return
    377          }
    378          

   \                                 In section .text, align 2, keep-with-next
    379          int dm_mgr_search_device_by_devid(_IN_ int devid, _OU_ char product_key[IOTX_PRODUCT_KEY_LEN + 1],
    380                                            _OU_ char device_name[IOTX_DEVICE_NAME_LEN + 1], _OU_ char device_secret[IOTX_DEVICE_SECRET_LEN + 1])
    381          {
   \                     dm_mgr_search_device_by_devid: (+1)
   \        0x0   0xB57C             PUSH     {R2-R6,LR}
   \        0x2   0x460E             MOV      R6,R1
   \        0x4   0x4615             MOV      R5,R2
   \        0x6   0x461C             MOV      R4,R3
    382              int res = 0;
    383              dm_mgr_dev_node_t *node = NULL;
   \        0x8   0x2100             MOVS     R1,#+0
   \        0xA   0x9100             STR      R1,[SP, #+0]
    384          
    385              if (product_key == NULL || device_name == NULL || device_secret == NULL) {
   \        0xC   0x2E00             CMP      R6,#+0
   \        0xE   0xD003             BEQ.N    ??dm_mgr_search_device_by_devid_0
   \       0x10   0x2D00             CMP      R5,#+0
   \       0x12   0xD001             BEQ.N    ??dm_mgr_search_device_by_devid_0
   \       0x14   0x2C00             CMP      R4,#+0
   \       0x16   0xD102             BNE.N    ??dm_mgr_search_device_by_devid_1
    386                  return DM_INVALID_PARAMETER;
   \                     ??dm_mgr_search_device_by_devid_0: (+1)
   \       0x18   0xF06F 0x0001      MVN      R0,#+1
   \       0x1C   0xBD76             POP      {R1,R2,R4-R6,PC}
    387              }
    388          
    389              res = _dm_mgr_search_dev_by_devid(devid, &node);
    390              if (res != SUCCESS_RETURN) {
   \                     ??dm_mgr_search_device_by_devid_1: (+1)
   \       0x1E   0x4669             MOV      R1,SP
   \       0x20   0x....'....        BL       _dm_mgr_search_dev_by_devid
   \       0x24   0x2800             CMP      R0,#+0
   \       0x26   0xD002             BEQ.N    ??dm_mgr_search_device_by_devid_2
    391                  return FAIL_RETURN;
   \       0x28   0xF04F 0x30FF      MOV      R0,#-1
   \       0x2C   0xBD76             POP      {R1,R2,R4-R6,PC}
    392              }
    393          
    394              memcpy(product_key, node->product_key, strlen(node->product_key));
   \                     ??dm_mgr_search_device_by_devid_2: (+1)
   \       0x2E   0x9800             LDR      R0,[SP, #+0]
   \       0x30   0x3008             ADDS     R0,R0,#+8
   \       0x32   0x....'....        BL       strlen
   \       0x36   0x4602             MOV      R2,R0
   \       0x38   0x9800             LDR      R0,[SP, #+0]
   \       0x3A   0xF100 0x0108      ADD      R1,R0,#+8
   \       0x3E   0x4630             MOV      R0,R6
   \       0x40   0x....'....        BL       __aeabi_memcpy
    395              memcpy(device_name, node->device_name, strlen(node->device_name));
   \       0x44   0x9800             LDR      R0,[SP, #+0]
   \       0x46   0x301D             ADDS     R0,R0,#+29
   \       0x48   0x....'....        BL       strlen
   \       0x4C   0x4602             MOV      R2,R0
   \       0x4E   0x9800             LDR      R0,[SP, #+0]
   \       0x50   0xF100 0x011D      ADD      R1,R0,#+29
   \       0x54   0x4628             MOV      R0,R5
   \       0x56   0x....'....        BL       __aeabi_memcpy
    396              memcpy(device_secret, node->device_secret, strlen(node->device_secret));
   \       0x5A   0x9800             LDR      R0,[SP, #+0]
   \       0x5C   0x303E             ADDS     R0,R0,#+62
   \       0x5E   0x....'....        BL       strlen
   \       0x62   0x4602             MOV      R2,R0
   \       0x64   0x9800             LDR      R0,[SP, #+0]
   \       0x66   0xF100 0x013E      ADD      R1,R0,#+62
   \       0x6A   0x4620             MOV      R0,R4
   \       0x6C   0x....'....        BL       __aeabi_memcpy
    397          
    398              return SUCCESS_RETURN;
   \       0x70   0x2000             MOVS     R0,#+0
   \       0x72   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
    399          }
    400          

   \                                 In section .text, align 2, keep-with-next
    401          int dm_mgr_search_device_by_pkdn(_IN_ char product_key[IOTX_PRODUCT_KEY_LEN + 1], _IN_ char device_name[IOTX_DEVICE_NAME_LEN + 1],
    402                                           _OU_ int *devid)
    403          {
   \                     dm_mgr_search_device_by_pkdn: (+1)
   \        0x0   0xB51C             PUSH     {R2-R4,LR}
   \        0x2   0x4614             MOV      R4,R2
    404              int res = 0;
    405              dm_mgr_dev_node_t *node = NULL;
   \        0x4   0x2200             MOVS     R2,#+0
   \        0x6   0x9200             STR      R2,[SP, #+0]
    406          
    407              if (product_key == NULL || device_name == NULL) {
   \        0x8   0x2800             CMP      R0,#+0
   \        0xA   0xD001             BEQ.N    ??dm_mgr_search_device_by_pkdn_0
   \        0xC   0x2900             CMP      R1,#+0
   \        0xE   0xD102             BNE.N    ??dm_mgr_search_device_by_pkdn_1
    408                  return DM_INVALID_PARAMETER;
   \                     ??dm_mgr_search_device_by_pkdn_0: (+1)
   \       0x10   0xF06F 0x0001      MVN      R0,#+1
   \       0x14   0xBD16             POP      {R1,R2,R4,PC}
    409              }
    410          
    411              res = _dm_mgr_search_dev_by_pkdn(product_key, device_name, &node);
    412              if (res != SUCCESS_RETURN) {
   \                     ??dm_mgr_search_device_by_pkdn_1: (+1)
   \       0x16   0x466A             MOV      R2,SP
   \       0x18   0x....'....        BL       _dm_mgr_search_dev_by_pkdn
   \       0x1C   0x2800             CMP      R0,#+0
   \       0x1E   0xD002             BEQ.N    ??dm_mgr_search_device_by_pkdn_2
    413                  return FAIL_RETURN;
   \       0x20   0xF04F 0x30FF      MOV      R0,#-1
   \       0x24   0xBD16             POP      {R1,R2,R4,PC}
    414              }
    415          
    416              if (devid) {
   \                     ??dm_mgr_search_device_by_pkdn_2: (+1)
   \       0x26   0x2C00             CMP      R4,#+0
   \       0x28   0xD002             BEQ.N    ??dm_mgr_search_device_by_pkdn_3
    417                  *devid = node->devid;
   \       0x2A   0x9800             LDR      R0,[SP, #+0]
   \       0x2C   0x6800             LDR      R0,[R0, #+0]
   \       0x2E   0x6020             STR      R0,[R4, #+0]
    418              }
    419          
    420              return SUCCESS_RETURN;
   \                     ??dm_mgr_search_device_by_pkdn_3: (+1)
   \       0x30   0x2000             MOVS     R0,#+0
   \       0x32   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    421          }
    422          

   \                                 In section .text, align 2, keep-with-next
    423          int dm_mgr_search_device_node_by_devid(_IN_ int devid, _OU_ void **node)
    424          {
   \                     dm_mgr_search_device_node_by_devid: (+1)
   \        0x0   0xB51C             PUSH     {R2-R4,LR}
   \        0x2   0x460C             MOV      R4,R1
    425              int res = 0;
    426              dm_mgr_dev_node_t *search_node = NULL;
   \        0x4   0x2100             MOVS     R1,#+0
   \        0x6   0x9100             STR      R1,[SP, #+0]
    427          
    428              res = _dm_mgr_search_dev_by_devid(devid, &search_node);
    429              if (res != SUCCESS_RETURN) {
   \        0x8   0x4669             MOV      R1,SP
   \        0xA   0x....'....        BL       _dm_mgr_search_dev_by_devid
   \        0xE   0x2800             CMP      R0,#+0
   \       0x10   0xD002             BEQ.N    ??dm_mgr_search_device_node_by_devid_0
    430                  return FAIL_RETURN;
   \       0x12   0xF04F 0x30FF      MOV      R0,#-1
   \       0x16   0xBD16             POP      {R1,R2,R4,PC}
    431              }
    432          
    433              if (node) {
   \                     ??dm_mgr_search_device_node_by_devid_0: (+1)
   \       0x18   0x2C00             CMP      R4,#+0
   \       0x1A   0xD001             BEQ.N    ??dm_mgr_search_device_node_by_devid_1
    434                  *node = (void *)search_node;
   \       0x1C   0x9800             LDR      R0,[SP, #+0]
   \       0x1E   0x6020             STR      R0,[R4, #+0]
    435              }
    436          
    437              return SUCCESS_RETURN;
   \                     ??dm_mgr_search_device_node_by_devid_1: (+1)
   \       0x20   0x2000             MOVS     R0,#+0
   \       0x22   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    438          }
    439          

   \                                 In section .text, align 2, keep-with-next
    440          int dm_mgr_get_dev_type(_IN_ int devid, _OU_ int *dev_type)
    441          {
   \                     dm_mgr_get_dev_type: (+1)
   \        0x0   0xB51C             PUSH     {R2-R4,LR}
   \        0x2   0x460C             MOV      R4,R1
    442              int res = 0;
    443              dm_mgr_dev_node_t *node = NULL;
   \        0x4   0x2100             MOVS     R1,#+0
   \        0x6   0x9100             STR      R1,[SP, #+0]
    444          
    445              if (devid < 0 || dev_type == NULL) {
   \        0x8   0x2800             CMP      R0,#+0
   \        0xA   0xD401             BMI.N    ??dm_mgr_get_dev_type_0
   \        0xC   0x2C00             CMP      R4,#+0
   \        0xE   0xD102             BNE.N    ??dm_mgr_get_dev_type_1
    446                  return DM_INVALID_PARAMETER;
   \                     ??dm_mgr_get_dev_type_0: (+1)
   \       0x10   0xF06F 0x0001      MVN      R0,#+1
   \       0x14   0xBD16             POP      {R1,R2,R4,PC}
    447              }
    448          
    449              res = _dm_mgr_search_dev_by_devid(devid, &node);
    450              if (res != SUCCESS_RETURN) {
   \                     ??dm_mgr_get_dev_type_1: (+1)
   \       0x16   0x4669             MOV      R1,SP
   \       0x18   0x....'....        BL       _dm_mgr_search_dev_by_devid
   \       0x1C   0x2800             CMP      R0,#+0
   \       0x1E   0xD002             BEQ.N    ??dm_mgr_get_dev_type_2
    451                  return FAIL_RETURN;
   \       0x20   0xF04F 0x30FF      MOV      R0,#-1
   \       0x24   0xBD16             POP      {R1,R2,R4,PC}
    452              }
    453          
    454              *dev_type = node->dev_type;
   \                     ??dm_mgr_get_dev_type_2: (+1)
   \       0x26   0x9800             LDR      R0,[SP, #+0]
   \       0x28   0x6840             LDR      R0,[R0, #+4]
   \       0x2A   0x6020             STR      R0,[R4, #+0]
    455          
    456              return SUCCESS_RETURN;
   \       0x2C   0x2000             MOVS     R0,#+0
   \       0x2E   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    457          }
    458          

   \                                 In section .text, align 2, keep-with-next
    459          int dm_mgr_set_dev_enable(_IN_ int devid)
    460          {
   \                     dm_mgr_set_dev_enable: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    461              int res = 0;
    462              dm_mgr_dev_node_t *node = NULL;
   \        0x2   0x2100             MOVS     R1,#+0
   \        0x4   0x9100             STR      R1,[SP, #+0]
    463          
    464              if (devid < 0) {
   \        0x6   0x2800             CMP      R0,#+0
   \        0x8   0xD502             BPL.N    ??dm_mgr_set_dev_enable_0
    465                  return DM_INVALID_PARAMETER;
   \        0xA   0xF06F 0x0001      MVN      R0,#+1
   \        0xE   0xBD02             POP      {R1,PC}
    466              }
    467          
    468              res = _dm_mgr_search_dev_by_devid(devid, &node);
    469              if (res != SUCCESS_RETURN) {
   \                     ??dm_mgr_set_dev_enable_0: (+1)
   \       0x10   0x4669             MOV      R1,SP
   \       0x12   0x....'....        BL       _dm_mgr_search_dev_by_devid
   \       0x16   0x2800             CMP      R0,#+0
   \       0x18   0xD002             BEQ.N    ??dm_mgr_set_dev_enable_1
    470                  return FAIL_RETURN;
   \       0x1A   0xF04F 0x30FF      MOV      R0,#-1
   \       0x1E   0xBD02             POP      {R1,PC}
    471              }
    472          
    473              node->status = IOTX_DM_DEV_AVAIL_ENABLE;
   \                     ??dm_mgr_set_dev_enable_1: (+1)
   \       0x20   0x2000             MOVS     R0,#+0
   \       0x22   0x9900             LDR      R1,[SP, #+0]
   \       0x24   0xF881 0x007F      STRB     R0,[R1, #+127]
    474          
    475              return SUCCESS_RETURN;
   \       0x28   0xBD02             POP      {R1,PC}          ;; return
    476          }
    477          

   \                                 In section .text, align 2, keep-with-next
    478          int dm_mgr_set_dev_disable(_IN_ int devid)
    479          {
   \                     dm_mgr_set_dev_disable: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    480              int res = 0;
    481              dm_mgr_dev_node_t *node = NULL;
   \        0x2   0x2100             MOVS     R1,#+0
   \        0x4   0x9100             STR      R1,[SP, #+0]
    482          
    483              if (devid < 0) {
   \        0x6   0x2800             CMP      R0,#+0
   \        0x8   0xD502             BPL.N    ??dm_mgr_set_dev_disable_0
    484                  return DM_INVALID_PARAMETER;
   \        0xA   0xF06F 0x0001      MVN      R0,#+1
   \        0xE   0xBD02             POP      {R1,PC}
    485              }
    486          
    487              res = _dm_mgr_search_dev_by_devid(devid, &node);
    488              if (res != SUCCESS_RETURN) {
   \                     ??dm_mgr_set_dev_disable_0: (+1)
   \       0x10   0x4669             MOV      R1,SP
   \       0x12   0x....'....        BL       _dm_mgr_search_dev_by_devid
   \       0x16   0x2800             CMP      R0,#+0
   \       0x18   0xD002             BEQ.N    ??dm_mgr_set_dev_disable_1
    489                  return FAIL_RETURN;
   \       0x1A   0xF04F 0x30FF      MOV      R0,#-1
   \       0x1E   0xBD02             POP      {R1,PC}
    490              }
    491          
    492              node->status = IOTX_DM_DEV_AVAIL_DISABLE;
   \                     ??dm_mgr_set_dev_disable_1: (+1)
   \       0x20   0x2001             MOVS     R0,#+1
   \       0x22   0x9900             LDR      R1,[SP, #+0]
   \       0x24   0xF881 0x007F      STRB     R0,[R1, #+127]
    493          
    494              return SUCCESS_RETURN;
   \       0x28   0x2000             MOVS     R0,#+0
   \       0x2A   0xBD02             POP      {R1,PC}          ;; return
    495          }
    496          

   \                                 In section .text, align 2, keep-with-next
    497          int dm_mgr_get_dev_avail(_IN_ char product_key[IOTX_PRODUCT_KEY_LEN + 1], _IN_ char device_name[IOTX_DEVICE_NAME_LEN + 1],
    498                                   _OU_ iotx_dm_dev_avail_t *status)
    499          {
   \                     dm_mgr_get_dev_avail: (+1)
   \        0x0   0xB57C             PUSH     {R2-R6,LR}
   \        0x2   0x4606             MOV      R6,R0
   \        0x4   0x460D             MOV      R5,R1
   \        0x6   0x4614             MOV      R4,R2
    500              int res = 0;
    501              dm_mgr_dev_node_t *node = NULL;
   \        0x8   0x2000             MOVS     R0,#+0
   \        0xA   0x9000             STR      R0,[SP, #+0]
    502          
    503              if (product_key == NULL || device_name == NULL || status == NULL ||
    504                  (strlen(product_key) >= IOTX_PRODUCT_KEY_LEN + 1) ||
    505                  (strlen(device_name) >= IOTX_DEVICE_NAME_LEN + 1)) {
   \        0xC   0x2E00             CMP      R6,#+0
   \        0xE   0xD00D             BEQ.N    ??dm_mgr_get_dev_avail_0
   \       0x10   0x2D00             CMP      R5,#+0
   \       0x12   0xD00B             BEQ.N    ??dm_mgr_get_dev_avail_0
   \       0x14   0x2C00             CMP      R4,#+0
   \       0x16   0xD009             BEQ.N    ??dm_mgr_get_dev_avail_0
   \       0x18   0x4630             MOV      R0,R6
   \       0x1A   0x....'....        BL       strlen
   \       0x1E   0x2815             CMP      R0,#+21
   \       0x20   0xD204             BCS.N    ??dm_mgr_get_dev_avail_0
   \       0x22   0x4628             MOV      R0,R5
   \       0x24   0x....'....        BL       strlen
   \       0x28   0x2821             CMP      R0,#+33
   \       0x2A   0xD302             BCC.N    ??dm_mgr_get_dev_avail_1
    506                  return DM_INVALID_PARAMETER;
   \                     ??dm_mgr_get_dev_avail_0: (+1)
   \       0x2C   0xF06F 0x0001      MVN      R0,#+1
   \       0x30   0xBD76             POP      {R1,R2,R4-R6,PC}
    507              }
    508          
    509              res = _dm_mgr_search_dev_by_pkdn(product_key, device_name, &node);
    510              if (res != SUCCESS_RETURN) {
   \                     ??dm_mgr_get_dev_avail_1: (+1)
   \       0x32   0x466A             MOV      R2,SP
   \       0x34   0x4629             MOV      R1,R5
   \       0x36   0x4630             MOV      R0,R6
   \       0x38   0x....'....        BL       _dm_mgr_search_dev_by_pkdn
   \       0x3C   0x2800             CMP      R0,#+0
   \       0x3E   0xD002             BEQ.N    ??dm_mgr_get_dev_avail_2
    511                  return FAIL_RETURN;
   \       0x40   0xF04F 0x30FF      MOV      R0,#-1
   \       0x44   0xBD76             POP      {R1,R2,R4-R6,PC}
    512              }
    513          
    514              *status = node->status;
   \                     ??dm_mgr_get_dev_avail_2: (+1)
   \       0x46   0x9800             LDR      R0,[SP, #+0]
   \       0x48   0xF890 0x007F      LDRB     R0,[R0, #+127]
   \       0x4C   0x7020             STRB     R0,[R4, #+0]
    515          
    516              return SUCCESS_RETURN;
   \       0x4E   0x2000             MOVS     R0,#+0
   \       0x50   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
    517          }
    518          

   \                                 In section .text, align 2, keep-with-next
    519          int dm_mgr_set_dev_status(_IN_ int devid, _IN_ iotx_dm_dev_status_t status)
    520          {
   \                     dm_mgr_set_dev_status: (+1)
   \        0x0   0xB51C             PUSH     {R2-R4,LR}
   \        0x2   0x460C             MOV      R4,R1
    521              int res = 0;
    522              dm_mgr_dev_node_t *node = NULL;
   \        0x4   0x2100             MOVS     R1,#+0
   \        0x6   0x9100             STR      R1,[SP, #+0]
    523          
    524              if (devid < 0) {
   \        0x8   0x2800             CMP      R0,#+0
   \        0xA   0xD502             BPL.N    ??dm_mgr_set_dev_status_0
    525                  return DM_INVALID_PARAMETER;
   \        0xC   0xF06F 0x0001      MVN      R0,#+1
   \       0x10   0xBD16             POP      {R1,R2,R4,PC}
    526              }
    527          
    528              res = _dm_mgr_search_dev_by_devid(devid, &node);
    529              if (res != SUCCESS_RETURN) {
   \                     ??dm_mgr_set_dev_status_0: (+1)
   \       0x12   0x4669             MOV      R1,SP
   \       0x14   0x....'....        BL       _dm_mgr_search_dev_by_devid
   \       0x18   0x2800             CMP      R0,#+0
   \       0x1A   0xD002             BEQ.N    ??dm_mgr_set_dev_status_1
    530                  return FAIL_RETURN;
   \       0x1C   0xF04F 0x30FF      MOV      R0,#-1
   \       0x20   0xBD16             POP      {R1,R2,R4,PC}
    531              }
    532          
    533              node->dev_status = status;
   \                     ??dm_mgr_set_dev_status_1: (+1)
   \       0x22   0x9800             LDR      R0,[SP, #+0]
   \       0x24   0xF880 0x4080      STRB     R4,[R0, #+128]
    534          
    535              return SUCCESS_RETURN;
   \       0x28   0x2000             MOVS     R0,#+0
   \       0x2A   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    536          }
    537          

   \                                 In section .text, align 2, keep-with-next
    538          int dm_mgr_get_dev_status(_IN_ int devid, _OU_ iotx_dm_dev_status_t *status)
    539          {
   \                     dm_mgr_get_dev_status: (+1)
   \        0x0   0xB51C             PUSH     {R2-R4,LR}
   \        0x2   0x460C             MOV      R4,R1
    540              int res = 0;
    541              dm_mgr_dev_node_t *node = NULL;
   \        0x4   0x2100             MOVS     R1,#+0
   \        0x6   0x9100             STR      R1,[SP, #+0]
    542          
    543              if (devid < 0 || status == NULL) {
   \        0x8   0x2800             CMP      R0,#+0
   \        0xA   0xD401             BMI.N    ??dm_mgr_get_dev_status_0
   \        0xC   0x2C00             CMP      R4,#+0
   \        0xE   0xD102             BNE.N    ??dm_mgr_get_dev_status_1
    544                  return DM_INVALID_PARAMETER;
   \                     ??dm_mgr_get_dev_status_0: (+1)
   \       0x10   0xF06F 0x0001      MVN      R0,#+1
   \       0x14   0xBD16             POP      {R1,R2,R4,PC}
    545              }
    546          
    547              res = _dm_mgr_search_dev_by_devid(devid, &node);
    548              if (res != SUCCESS_RETURN) {
   \                     ??dm_mgr_get_dev_status_1: (+1)
   \       0x16   0x4669             MOV      R1,SP
   \       0x18   0x....'....        BL       _dm_mgr_search_dev_by_devid
   \       0x1C   0x2800             CMP      R0,#+0
   \       0x1E   0xD002             BEQ.N    ??dm_mgr_get_dev_status_2
    549                  return FAIL_RETURN;
   \       0x20   0xF04F 0x30FF      MOV      R0,#-1
   \       0x24   0xBD16             POP      {R1,R2,R4,PC}
    550              }
    551          
    552              *status = node->dev_status;
   \                     ??dm_mgr_get_dev_status_2: (+1)
   \       0x26   0x9800             LDR      R0,[SP, #+0]
   \       0x28   0xF890 0x0080      LDRB     R0,[R0, #+128]
   \       0x2C   0x7020             STRB     R0,[R4, #+0]
    553          
    554              return SUCCESS_RETURN;
   \       0x2E   0x2000             MOVS     R0,#+0
   \       0x30   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    555          }
    556          

   \                                 In section .text, align 2, keep-with-next
    557          int dm_mgr_set_device_secret(_IN_ int devid, _IN_ char device_secret[IOTX_DEVICE_SECRET_LEN + 1])
    558          {
   \                     dm_mgr_set_device_secret: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4605             MOV      R5,R0
   \        0x4   0x460C             MOV      R4,R1
    559              int res = 0;
    560              dm_mgr_dev_node_t *node = NULL;
   \        0x6   0x2000             MOVS     R0,#+0
   \        0x8   0x9000             STR      R0,[SP, #+0]
    561          
    562              if (devid < 0 || device_secret == NULL ||
    563                  strlen(device_secret) >= IOTX_DEVICE_SECRET_LEN + 1) {
   \        0xA   0x2D00             CMP      R5,#+0
   \        0xC   0xD406             BMI.N    ??dm_mgr_set_device_secret_0
   \        0xE   0x2C00             CMP      R4,#+0
   \       0x10   0xD004             BEQ.N    ??dm_mgr_set_device_secret_0
   \       0x12   0x4620             MOV      R0,R4
   \       0x14   0x....'....        BL       strlen
   \       0x18   0x2841             CMP      R0,#+65
   \       0x1A   0xD302             BCC.N    ??dm_mgr_set_device_secret_1
    564                  return DM_INVALID_PARAMETER;
   \                     ??dm_mgr_set_device_secret_0: (+1)
   \       0x1C   0xF06F 0x0001      MVN      R0,#+1
   \       0x20   0xBD32             POP      {R1,R4,R5,PC}
    565              }
    566          
    567              res = _dm_mgr_search_dev_by_devid(devid, &node);
    568              if (res != SUCCESS_RETURN) {
   \                     ??dm_mgr_set_device_secret_1: (+1)
   \       0x22   0x4669             MOV      R1,SP
   \       0x24   0x4628             MOV      R0,R5
   \       0x26   0x....'....        BL       _dm_mgr_search_dev_by_devid
   \       0x2A   0x2800             CMP      R0,#+0
   \       0x2C   0xD002             BEQ.N    ??dm_mgr_set_device_secret_2
    569                  return FAIL_RETURN;
   \       0x2E   0xF04F 0x30FF      MOV      R0,#-1
   \       0x32   0xBD32             POP      {R1,R4,R5,PC}
    570              }
    571          
    572              memset(node->device_secret, 0, IOTX_DEVICE_SECRET_LEN + 1);
   \                     ??dm_mgr_set_device_secret_2: (+1)
   \       0x34   0x2200             MOVS     R2,#+0
   \       0x36   0x2141             MOVS     R1,#+65
   \       0x38   0x9800             LDR      R0,[SP, #+0]
   \       0x3A   0x303E             ADDS     R0,R0,#+62
   \       0x3C   0x....'....        BL       __aeabi_memset
    573              memcpy(node->device_secret, device_secret, strlen(device_secret));
   \       0x40   0x4620             MOV      R0,R4
   \       0x42   0x....'....        BL       strlen
   \       0x46   0x4602             MOV      R2,R0
   \       0x48   0x4621             MOV      R1,R4
   \       0x4A   0x9800             LDR      R0,[SP, #+0]
   \       0x4C   0x303E             ADDS     R0,R0,#+62
   \       0x4E   0x....'....        BL       __aeabi_memcpy
    574          
    575              return SUCCESS_RETURN;
   \       0x52   0x2000             MOVS     R0,#+0
   \       0x54   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    576          }
    577          

   \                                 In section .text, align 2, keep-with-next
    578          int dm_mgr_dev_initialized(int devid)
    579          {
   \                     dm_mgr_dev_initialized: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x4605             MOV      R5,R0
    580              int res = 0, message_len = 0;
    581              char *message = NULL;
    582              const char *fmt = "{\"devid\":%d}";
   \        0x4   0x....'....        LDR.W    R6,??DataTable17
    583          
    584              message_len = strlen(fmt) + DM_UTILS_UINT32_STRLEN + 1;
   \        0x8   0x4630             MOV      R0,R6
   \        0xA   0x....'....        BL       strlen
   \        0xE   0x4607             MOV      R7,R0
   \       0x10   0x370B             ADDS     R7,R7,#+11
    585              message = DM_malloc(message_len);
   \       0x12   0x4638             MOV      R0,R7
   \       0x14   0x....'....        BL       HAL_Malloc
   \       0x18   0x0004             MOVS     R4,R0
    586              if (message == NULL) {
   \       0x1A   0xD102             BNE.N    ??dm_mgr_dev_initialized_0
    587                  return DM_MEMORY_NOT_ENOUGH;
   \       0x1C   0xF06F 0x0002      MVN      R0,#+2
   \       0x20   0xBDF2             POP      {R1,R4-R7,PC}
    588              }
    589              memset(message, 0, message_len);
   \                     ??dm_mgr_dev_initialized_0: (+1)
   \       0x22   0x2200             MOVS     R2,#+0
   \       0x24   0x4639             MOV      R1,R7
   \       0x26   0x....'....        BL       __aeabi_memset
    590              HAL_Snprintf(message, message_len, fmt, devid);
   \       0x2A   0x462B             MOV      R3,R5
   \       0x2C   0x4632             MOV      R2,R6
   \       0x2E   0x4639             MOV      R1,R7
   \       0x30   0x4620             MOV      R0,R4
   \       0x32   0x....'....        BL       HAL_Snprintf
    591          
    592              res = _dm_msg_send_to_user(IOTX_DM_EVENT_INITIALIZED, message);
    593              if (res != SUCCESS_RETURN) {
   \       0x36   0x4621             MOV      R1,R4
   \       0x38   0x200A             MOVS     R0,#+10
   \       0x3A   0x....'....        BL       _dm_msg_send_to_user
   \       0x3E   0x2800             CMP      R0,#+0
   \       0x40   0xD005             BEQ.N    ??dm_mgr_dev_initialized_1
    594                  DM_free(message);
   \       0x42   0x4620             MOV      R0,R4
   \       0x44   0x....'....        BL       HAL_Free
    595                  return FAIL_RETURN;
   \       0x48   0xF04F 0x30FF      MOV      R0,#-1
   \       0x4C   0xBDF2             POP      {R1,R4-R7,PC}
    596              }
    597          
    598              return SUCCESS_RETURN;
   \                     ??dm_mgr_dev_initialized_1: (+1)
   \       0x4E   0x2000             MOVS     R0,#+0
   \       0x50   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    599          }
    600          
    601          #ifdef DEVICE_MODEL_GATEWAY
    602          int dm_mgr_upstream_thing_sub_register(_IN_ int devid)
    603          {
    604              int res = 0;
    605              dm_mgr_dev_node_t *node = NULL;
    606              dm_msg_request_t request;
    607          
    608              if (devid < 0) {
    609                  return DM_INVALID_PARAMETER;
    610              }
    611          
    612              res = _dm_mgr_search_dev_by_devid(devid, &node);
    613              if (res != SUCCESS_RETURN) {
    614                  return FAIL_RETURN;
    615              }
    616          
    617              memset(&request, 0, sizeof(dm_msg_request_t));
    618              request.service_prefix = DM_URI_SYS_PREFIX;
    619              request.service_name = DM_URI_THING_SUB_REGISTER;
    620              HAL_GetProductKey(request.product_key);
    621              HAL_GetDeviceName(request.device_name);
    622          
    623              /* Get Params And Method */
    624              res = dm_msg_thing_sub_register(node->product_key, node->device_name, &request);
    625              if (res != SUCCESS_RETURN) {
    626                  return FAIL_RETURN;
    627              }
    628          
    629              /* Get Msg ID */
    630              request.msgid = iotx_report_id();
    631          
    632              /* Get Dev ID */
    633              request.devid = devid;
    634          
    635              /* Callback */
    636              request.callback = dm_client_thing_sub_register_reply;
    637          
    638              /* Send Message To Cloud */
    639              res = dm_msg_request(DM_MSG_DEST_CLOUD, &request);
    640          #if !defined(DM_MESSAGE_CACHE_DISABLED)
    641              if (res == SUCCESS_RETURN) {
    642                  dm_msg_cache_insert(request.msgid, request.devid, IOTX_DM_EVENT_SUBDEV_REGISTER_REPLY, NULL);
    643                  res = request.msgid;
    644              }
    645          #endif
    646              DM_free(request.params);
    647          
    648              return res;
    649          }
    650          
    651          int dm_mgr_upstream_thing_sub_unregister(_IN_ int devid)
    652          {
    653              int res = 0;
    654              dm_mgr_dev_node_t *node = NULL;
    655              dm_msg_request_t request;
    656          
    657              if (devid < 0) {
    658                  return DM_INVALID_PARAMETER;
    659              }
    660          
    661              res = _dm_mgr_search_dev_by_devid(devid, &node);
    662              if (res != SUCCESS_RETURN) {
    663                  return FAIL_RETURN;
    664              }
    665          
    666              memset(&request, 0, sizeof(dm_msg_request_t));
    667              request.service_prefix = DM_URI_SYS_PREFIX;
    668              request.service_name = DM_URI_THING_SUB_UNREGISTER;
    669              HAL_GetProductKey(request.product_key);
    670              HAL_GetDeviceName(request.device_name);
    671          
    672              /* Get Params And Method */
    673              res = dm_msg_thing_sub_unregister(node->product_key, node->device_name, &request);
    674              if (res != SUCCESS_RETURN) {
    675                  return FAIL_RETURN;
    676              }
    677          
    678              /* Get Msg ID */
    679              request.msgid = iotx_report_id();
    680          
    681              /* Get Dev ID */
    682              request.devid = devid;
    683          
    684              /* Callback */
    685              request.callback = dm_client_thing_sub_unregister_reply;
    686          
    687              /* Send Message To Cloud */
    688              res = dm_msg_request(DM_MSG_DEST_CLOUD, &request);
    689          #if !defined(DM_MESSAGE_CACHE_DISABLED)
    690              if (res == SUCCESS_RETURN) {
    691                  dm_msg_cache_insert(request.msgid, request.devid, IOTX_DM_EVENT_SUBDEV_UNREGISTER_REPLY, NULL);
    692                  res = request.msgid;
    693              }
    694          #endif
    695              DM_free(request.params);
    696          
    697              return res;
    698          }
    699          
    700          int dm_mgr_upstream_thing_topo_add(_IN_ int devid)
    701          {
    702              int res = 0;
    703              dm_mgr_dev_node_t *node = NULL;
    704              dm_msg_request_t request;
    705          
    706              if (devid < 0) {
    707                  return DM_INVALID_PARAMETER;
    708              }
    709          
    710              res = _dm_mgr_search_dev_by_devid(devid, &node);
    711              if (res != SUCCESS_RETURN) {
    712                  return FAIL_RETURN;
    713              }
    714          
    715              memset(&request, 0, sizeof(dm_msg_request_t));
    716              request.service_prefix = DM_URI_SYS_PREFIX;
    717              request.service_name = DM_URI_THING_TOPO_ADD;
    718              HAL_GetProductKey(request.product_key);
    719              HAL_GetDeviceName(request.device_name);
    720          
    721              /* Get Params And Method */
    722              res = dm_msg_thing_topo_add(node->product_key, node->device_name, node->device_secret, &request);
    723              if (res != SUCCESS_RETURN) {
    724                  return FAIL_RETURN;
    725              }
    726          
    727              /* Get Msg ID */
    728              request.msgid = iotx_report_id();
    729          
    730              /* Get Dev ID */
    731              request.devid = devid;
    732          
    733              /* Callback */
    734              request.callback = dm_client_thing_topo_add_reply;
    735          
    736              /* Send Message To Cloud */
    737              res = dm_msg_request(DM_MSG_DEST_CLOUD, &request);
    738          #if !defined(DM_MESSAGE_CACHE_DISABLED)
    739              if (res == SUCCESS_RETURN) {
    740                  dm_msg_cache_insert(request.msgid, request.devid, IOTX_DM_EVENT_TOPO_ADD_REPLY, NULL);
    741                  res = request.msgid;
    742              }
    743          #endif
    744              DM_free(request.params);
    745          
    746              return res;
    747          }
    748          
    749          int dm_mgr_upstream_thing_topo_delete(_IN_ int devid)
    750          {
    751              int res = 0;
    752              dm_mgr_dev_node_t *node = NULL;
    753              dm_msg_request_t request;
    754          
    755              if (devid < 0) {
    756                  return DM_INVALID_PARAMETER;
    757              }
    758          
    759              res = _dm_mgr_search_dev_by_devid(devid, &node);
    760              if (res != SUCCESS_RETURN) {
    761                  return FAIL_RETURN;
    762              }
    763          
    764              memset(&request, 0, sizeof(dm_msg_request_t));
    765              request.service_prefix = DM_URI_SYS_PREFIX;
    766              request.service_name = DM_URI_THING_TOPO_DELETE;
    767              HAL_GetProductKey(request.product_key);
    768              HAL_GetDeviceName(request.device_name);
    769          
    770              /* Get Params And Method */
    771              res = dm_msg_thing_topo_delete(node->product_key, node->device_name, &request);
    772              if (res != SUCCESS_RETURN) {
    773                  return FAIL_RETURN;
    774              }
    775          
    776              /* Get Msg ID */
    777              request.msgid = iotx_report_id();
    778          
    779              /* Get Dev ID */
    780              request.devid = devid;
    781          
    782              /* Callback */
    783              request.callback = dm_client_thing_topo_delete_reply;
    784          
    785              /* Send Message To Cloud */
    786              res = dm_msg_request(DM_MSG_DEST_CLOUD, &request);
    787          #if !defined(DM_MESSAGE_CACHE_DISABLED)
    788              if (res == SUCCESS_RETURN) {
    789                  dm_msg_cache_insert(request.msgid, request.devid, IOTX_DM_EVENT_TOPO_DELETE_REPLY, NULL);
    790                  res = request.msgid;
    791              }
    792          #endif
    793              DM_free(request.params);
    794          
    795              return res;
    796          }
    797          
    798          int dm_mgr_upstream_thing_topo_get(void)
    799          {
    800              int res = 0;
    801              dm_mgr_dev_node_t *node = NULL;
    802              dm_msg_request_t request;
    803          
    804              memset(&request, 0, sizeof(dm_msg_request_t));
    805              request.service_prefix = DM_URI_SYS_PREFIX;
    806              request.service_name = DM_URI_THING_TOPO_GET;
    807              HAL_GetProductKey(request.product_key);
    808              HAL_GetDeviceName(request.device_name);
    809          
    810              res = _dm_mgr_search_dev_by_pkdn(request.product_key, request.device_name, &node);
    811              if (res != SUCCESS_RETURN) {
    812                  return FAIL_RETURN;
    813              }
    814          
    815              /* Get Params And Method */
    816              res = dm_msg_thing_topo_get(&request);
    817              if (res != SUCCESS_RETURN) {
    818                  return FAIL_RETURN;
    819              }
    820          
    821              /* Get Msg ID */
    822              request.msgid = iotx_report_id();
    823          
    824              /* Get Dev ID */
    825              request.devid = node->devid;
    826          
    827              /* Callback */
    828              request.callback = dm_client_thing_topo_get_reply;
    829          
    830              /* Send Message To Cloud */
    831              res = dm_msg_request(DM_MSG_DEST_CLOUD, &request);
    832          #if !defined(DM_MESSAGE_CACHE_DISABLED)
    833              if (res == SUCCESS_RETURN) {
    834                  dm_msg_cache_insert(request.msgid, request.devid, IOTX_DM_EVENT_TOPO_GET_REPLY, NULL);
    835                  res = request.msgid;
    836              }
    837          #endif
    838              DM_free(request.params);
    839          
    840              return res;
    841          }
    842          
    843          int dm_mgr_upstream_thing_list_found(_IN_ int devid)
    844          {
    845              int res = 0;
    846              dm_mgr_dev_node_t *node = NULL;
    847              dm_msg_request_t request;
    848          
    849              if (devid < 0) {
    850                  return DM_INVALID_PARAMETER;
    851              }
    852          
    853              res = _dm_mgr_search_dev_by_devid(devid, &node);
    854              if (res != SUCCESS_RETURN) {
    855                  return FAIL_RETURN;
    856              }
    857          
    858              memset(&request, 0, sizeof(dm_msg_request_t));
    859              request.service_prefix = DM_URI_SYS_PREFIX;
    860              request.service_name = DM_URI_THING_LIST_FOUND;
    861              HAL_GetProductKey(request.product_key);
    862              HAL_GetDeviceName(request.device_name);
    863          
    864              /* Get Params And Method */
    865              res = dm_msg_thing_list_found(node->product_key, node->device_name, &request);
    866              if (res != SUCCESS_RETURN) {
    867                  return FAIL_RETURN;
    868              }
    869          
    870              /* Get Msg ID */
    871              request.msgid = iotx_report_id();
    872          
    873              /* Get Dev ID */
    874              request.devid = devid;
    875          
    876              /* Callback */
    877              request.callback = dm_client_thing_list_found_reply;
    878          
    879              /* Send Message To Cloud */
    880              res = dm_msg_request(DM_MSG_DEST_CLOUD, &request);
    881          #if !defined(DM_MESSAGE_CACHE_DISABLED)
    882              if (res == SUCCESS_RETURN) {
    883                  dm_msg_cache_insert(request.msgid, request.devid, IOTX_DM_EVENT_TOPO_ADD_NOTIFY_REPLY, NULL);
    884                  res = request.msgid;
    885              }
    886          #endif
    887              DM_free(request.params);
    888          
    889              return res;
    890          }
    891          
    892          int dm_mgr_upstream_combine_login(_IN_ int devid)
    893          {
    894              int res = 0;
    895              dm_mgr_dev_node_t *node = NULL;
    896              dm_msg_request_t request;
    897          
    898              if (devid < 0) {
    899                  return DM_INVALID_PARAMETER;
    900              }
    901          
    902              res = _dm_mgr_search_dev_by_devid(devid, &node);
    903              if (res != SUCCESS_RETURN) {
    904                  return FAIL_RETURN;
    905              }
    906          
    907              memset(&request, 0, sizeof(dm_msg_request_t));
    908              request.service_prefix = DM_URI_EXT_SESSION_PREFIX;
    909              request.service_name = DM_URI_COMBINE_LOGIN;
    910              HAL_GetProductKey(request.product_key);
    911              HAL_GetDeviceName(request.device_name);
    912          
    913              /* Get Params And Method */
    914              res = dm_msg_combine_login(node->product_key, node->device_name, node->device_secret, &request);
    915              if (res != SUCCESS_RETURN) {
    916                  return FAIL_RETURN;
    917              }
    918          
    919              /* Get Msg ID */
    920              request.msgid = iotx_report_id();
    921          
    922              /* Get Dev ID */
    923              request.devid = devid;
    924          
    925              /* Callback */
    926              request.callback = dm_client_combine_login_reply;
    927          
    928              /* Send Message To Cloud */
    929              res = dm_msg_request(DM_MSG_DEST_CLOUD, &request);
    930          #if !defined(DM_MESSAGE_CACHE_DISABLED)
    931              if (res == SUCCESS_RETURN) {
    932                  dm_msg_cache_insert(request.msgid, request.devid, IOTX_DM_EVENT_COMBINE_LOGIN_REPLY, NULL);
    933                  res = request.msgid;
    934              }
    935          #endif
    936              DM_free(request.params);
    937          
    938              return res;
    939          }
    940          
    941          int dm_mgr_upstream_combine_logout(_IN_ int devid)
    942          {
    943              int res = 0;
    944              dm_mgr_dev_node_t *node = NULL;
    945              dm_msg_request_t request;
    946          
    947              if (devid < 0) {
    948                  return DM_INVALID_PARAMETER;
    949              }
    950          
    951              res = _dm_mgr_search_dev_by_devid(devid, &node);
    952              if (res != SUCCESS_RETURN) {
    953                  return FAIL_RETURN;
    954              }
    955          
    956              if (node->dev_status < IOTX_DM_DEV_STATUS_LOGINED) {
    957                  return FAIL_RETURN;
    958              }
    959          
    960              memset(&request, 0, sizeof(dm_msg_request_t));
    961              request.service_prefix = DM_URI_EXT_SESSION_PREFIX;
    962              request.service_name = DM_URI_COMBINE_LOGOUT;
    963              HAL_GetProductKey(request.product_key);
    964              HAL_GetDeviceName(request.device_name);
    965          
    966              /* Get Params And Method */
    967              res = dm_msg_combine_logout(node->product_key, node->device_name, &request);
    968              if (res != SUCCESS_RETURN) {
    969                  return FAIL_RETURN;
    970              }
    971          
    972              /* Get Msg ID */
    973              request.msgid = iotx_report_id();
    974          
    975              /* Get Dev ID */
    976              request.devid = devid;
    977          
    978              /* Callback */
    979              request.callback = dm_client_combine_logout_reply;
    980          
    981              /* Send Message To Cloud */
    982              res = dm_msg_request(DM_MSG_DEST_CLOUD, &request);
    983          #if !defined(DM_MESSAGE_CACHE_DISABLED)
    984              if (res == SUCCESS_RETURN) {
    985                  dm_msg_cache_insert(request.msgid, request.devid, IOTX_DM_EVENT_COMBINE_LOGOUT_REPLY, NULL);
    986                  res = request.msgid;
    987              }
    988          #endif
    989              DM_free(request.params);
    990          
    991              return res;
    992          }
    993          
    994          #ifdef DEVICE_MODEL_SUBDEV_OTA
    995          int dm_mgr_upstream_thing_firmware_version_update(_IN_ int devid, _IN_ char *payload, _IN_ int payload_len)
    996          {
    997              int res = 0, res1 = 0;
    998              dm_mgr_dev_node_t *node = NULL;
    999              char *uri = NULL;
   1000              dm_msg_request_t request;
   1001          
   1002              if (devid < 0 || payload == NULL || payload_len <= 0) {
   1003                  return DM_INVALID_PARAMETER;
   1004              }
   1005          
   1006              res = _dm_mgr_search_dev_by_devid(devid, &node);
   1007              if (res != SUCCESS_RETURN) {
   1008                  return FAIL_RETURN;
   1009              }
   1010          
   1011              memset(&request, 0, sizeof(dm_msg_request_t));
   1012              request.service_prefix = DM_URI_OTA_DEVICE_INFORM;
   1013              request.service_name = NULL;
   1014              memcpy(request.product_key, node->product_key, strlen(node->product_key));
   1015              memcpy(request.device_name, node->device_name, strlen(node->device_name));
   1016          
   1017              /* Request URI */
   1018              res = dm_utils_service_name(request.service_prefix, request.service_name,
   1019                                          request.product_key, request.device_name, &uri);
   1020              if (res != SUCCESS_RETURN) {
   1021                  return FAIL_RETURN;
   1022              }
   1023          
   1024              dm_log_info("DM Send Raw Data:");
   1025              HEXDUMP_INFO(payload, payload_len);
   1026          
   1027              res = dm_client_publish(uri, (unsigned char *)payload, strlen(payload), dm_client_thing_model_up_raw_reply);
   1028          
   1029              if (res < SUCCESS_RETURN || res1 < SUCCESS_RETURN) {
   1030                  dm_log_info("res of pub is %d:", res);
   1031                  DM_free(uri);
   1032                  return FAIL_RETURN;
   1033              }
   1034          
   1035              DM_free(uri);
   1036              return SUCCESS_RETURN;
   1037          }
   1038          #endif
   1039          #endif
   1040          

   \                                 In section .text, align 2, keep-with-next
   1041          int dm_mgr_upstream_thing_model_up_raw(_IN_ int devid, _IN_ char *payload, _IN_ int payload_len)
   1042          {
   \                     dm_mgr_upstream_thing_model_up_raw: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0xB09A             SUB      SP,SP,#+104
   \        0x4   0x460C             MOV      R4,R1
   \        0x6   0x4615             MOV      R5,R2
   1043              int res = 0, res1 = 0;
   1044              dm_mgr_dev_node_t *node = NULL;
   \        0x8   0x2100             MOVS     R1,#+0
   \        0xA   0x9102             STR      R1,[SP, #+8]
   1045              char *uri = NULL;
   \        0xC   0x9103             STR      R1,[SP, #+12]
   1046              dm_msg_request_t request;
   1047          
   1048              if (devid < 0 || payload == NULL || payload_len <= 0) {
   \        0xE   0x2800             CMP      R0,#+0
   \       0x10   0xD403             BMI.N    ??dm_mgr_upstream_thing_model_up_raw_0
   \       0x12   0x2C00             CMP      R4,#+0
   \       0x14   0xD001             BEQ.N    ??dm_mgr_upstream_thing_model_up_raw_0
   \       0x16   0x2D01             CMP      R5,#+1
   \       0x18   0xDA02             BGE.N    ??dm_mgr_upstream_thing_model_up_raw_1
   1049                  return DM_INVALID_PARAMETER;
   \                     ??dm_mgr_upstream_thing_model_up_raw_0: (+1)
   \       0x1A   0xF06F 0x0001      MVN      R0,#+1
   \       0x1E   0xE051             B.N      ??dm_mgr_upstream_thing_model_up_raw_2
   1050              }
   1051          
   1052              res = _dm_mgr_search_dev_by_devid(devid, &node);
   1053              if (res != SUCCESS_RETURN) {
   \                     ??dm_mgr_upstream_thing_model_up_raw_1: (+1)
   \       0x20   0xA902             ADD      R1,SP,#+8
   \       0x22   0x....'....        BL       _dm_mgr_search_dev_by_devid
   \       0x26   0x2800             CMP      R0,#+0
   \       0x28   0xD12C             BNE.N    ??dm_mgr_upstream_thing_model_up_raw_3
   1054                  return FAIL_RETURN;
   1055              }
   1056          
   1057              memset(&request, 0, sizeof(dm_msg_request_t));
   \       0x2A   0x2200             MOVS     R2,#+0
   \       0x2C   0x2158             MOVS     R1,#+88
   \       0x2E   0xA804             ADD      R0,SP,#+16
   \       0x30   0x....'....        BL       __aeabi_memset4
   1058              request.service_prefix = DM_URI_SYS_PREFIX;
   \       0x34   0x....'....        LDR.W    R0,??DataTable17_1
   \       0x38   0x9006             STR      R0,[SP, #+24]
   1059              request.service_name = DM_URI_THING_MODEL_UP_RAW;
   \       0x3A   0x....'....        LDR.W    R0,??DataTable17_2
   \       0x3E   0x9007             STR      R0,[SP, #+28]
   1060              memcpy(request.product_key, node->product_key, strlen(node->product_key));
   \       0x40   0x9802             LDR      R0,[SP, #+8]
   \       0x42   0x3008             ADDS     R0,R0,#+8
   \       0x44   0x....'....        BL       strlen
   \       0x48   0x4602             MOV      R2,R0
   \       0x4A   0x9802             LDR      R0,[SP, #+8]
   \       0x4C   0xF100 0x0108      ADD      R1,R0,#+8
   \       0x50   0xA808             ADD      R0,SP,#+32
   \       0x52   0x....'....        BL       __aeabi_memcpy4
   1061              memcpy(request.device_name, node->device_name, strlen(node->device_name));
   \       0x56   0x9802             LDR      R0,[SP, #+8]
   \       0x58   0x301D             ADDS     R0,R0,#+29
   \       0x5A   0x....'....        BL       strlen
   \       0x5E   0x4602             MOV      R2,R0
   \       0x60   0x9802             LDR      R0,[SP, #+8]
   \       0x62   0xF100 0x011D      ADD      R1,R0,#+29
   \       0x66   0xF10D 0x0035      ADD      R0,SP,#+53
   \       0x6A   0x....'....        BL       __aeabi_memcpy
   1062          
   1063              /* Request URI */
   1064              res = dm_utils_service_name(request.service_prefix, request.service_name,
   1065                                          request.product_key, request.device_name, &uri);
   1066              if (res != SUCCESS_RETURN) {
   \       0x6E   0xA803             ADD      R0,SP,#+12
   \       0x70   0x9000             STR      R0,[SP, #+0]
   \       0x72   0xF10D 0x0335      ADD      R3,SP,#+53
   \       0x76   0xAA08             ADD      R2,SP,#+32
   \       0x78   0x9907             LDR      R1,[SP, #+28]
   \       0x7A   0x9806             LDR      R0,[SP, #+24]
   \       0x7C   0x....'....        BL       dm_utils_service_name
   \       0x80   0x2800             CMP      R0,#+0
   \       0x82   0xD002             BEQ.N    ??dm_mgr_upstream_thing_model_up_raw_4
   1067                  return FAIL_RETURN;
   \                     ??dm_mgr_upstream_thing_model_up_raw_3: (+1)
   \       0x84   0xF04F 0x30FF      MOV      R0,#-1
   \       0x88   0xE01C             B.N      ??dm_mgr_upstream_thing_model_up_raw_2
   1068              }
   1069          
   1070              dm_log_info("DM Send Raw Data:");
   1071              HEXDUMP_INFO(payload, payload_len);
                     ^
Warning[Pe191]: type qualifier is meaningless on cast type
   \                     ??dm_mgr_upstream_thing_model_up_raw_4: (+1)
   \       0x8A   0x9501             STR      R5,[SP, #+4]
   \       0x8C   0x9400             STR      R4,[SP, #+0]
   \       0x8E   0x....'....        LDR.W    R3,??DataTable17_3
   \       0x92   0x2204             MOVS     R2,#+4
   \       0x94   0xF240 0x412F      MOVW     R1,#+1071
   \       0x98   0x....'....        LDR.W    R0,??DataTable17_4
   \       0x9C   0x....'....        BL       LITE_rich_hexdump
   1072          
   1073              res = dm_client_publish(uri, (unsigned char *)payload, payload_len, dm_client_thing_model_up_raw_reply);
   1074          #ifdef ALCS_ENABLED
   1075              res1 = dm_server_send(uri, (unsigned char *)payload, payload_len, NULL);
   1076          #endif
   1077          
   1078              if (res < SUCCESS_RETURN || res1 < SUCCESS_RETURN) {
   \       0xA0   0x....'....        LDR.W    R3,??DataTable17_5
   \       0xA4   0x462A             MOV      R2,R5
   \       0xA6   0x4621             MOV      R1,R4
   \       0xA8   0x9803             LDR      R0,[SP, #+12]
   \       0xAA   0x....'....        BL       dm_client_publish
   \       0xAE   0x2800             CMP      R0,#+0
   \       0xB0   0x9803             LDR      R0,[SP, #+12]
   \       0xB2   0xD403             BMI.N    ??dm_mgr_upstream_thing_model_up_raw_5
   1079                  DM_free(uri);
   1080                  return FAIL_RETURN;
   1081              }
   1082          
   1083              DM_free(uri);
   \       0xB4   0x....'....        BL       HAL_Free
   1084              return SUCCESS_RETURN;
   \       0xB8   0x2000             MOVS     R0,#+0
   \       0xBA   0xE003             B.N      ??dm_mgr_upstream_thing_model_up_raw_2
   \                     ??dm_mgr_upstream_thing_model_up_raw_5: (+1)
   \       0xBC   0x....'....        BL       HAL_Free
   \       0xC0   0xF04F 0x30FF      MOV      R0,#-1
   \                     ??dm_mgr_upstream_thing_model_up_raw_2: (+1)
   \       0xC4   0xB01B             ADD      SP,SP,#+108
   \       0xC6   0xBD30             POP      {R4,R5,PC}       ;; return
   1085          }
   1086          
   1087          #if !defined(DEVICE_MODEL_RAWDATA_SOLO)

   \                                 In section .text, align 2, keep-with-next
   1088          static int _dm_mgr_upstream_request_assemble(_IN_ int msgid, _IN_ int devid, _IN_ const char *service_prefix,
   1089                  _IN_ const char *service_name,
   1090                  _IN_ char *params, _IN_ int params_len, _IN_ char *method, _OU_ dm_msg_request_t *request)
   1091          {
   \                     _dm_mgr_upstream_request_assemble: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \        0x4   0x4680             MOV      R8,R0
   \        0x6   0x4689             MOV      R9,R1
   \        0x8   0x4692             MOV      R10,R2
   \        0xA   0x469B             MOV      R11,R3
   1092              int res = 0;
   1093              dm_mgr_dev_node_t *node = NULL;
   \        0xC   0x2000             MOVS     R0,#+0
   \        0xE   0x9000             STR      R0,[SP, #+0]
   1094          
   1095              res = _dm_mgr_search_dev_by_devid(devid, &node);
   1096              if (res != SUCCESS_RETURN) {
   \       0x10   0x4669             MOV      R1,SP
   \       0x12   0x4648             MOV      R0,R9
   \       0x14   0x....'....        BL       _dm_mgr_search_dev_by_devid
   \       0x18   0x2800             CMP      R0,#+0
   \       0x1A   0xD002             BEQ.N    ??_dm_mgr_upstream_request_assemble_0
   1097                  return FAIL_RETURN;
   \       0x1C   0xF04F 0x30FF      MOV      R0,#-1
   \       0x20   0xE027             B.N      ??_dm_mgr_upstream_request_assemble_1
   1098              }
   \                     ??_dm_mgr_upstream_request_assemble_0: (+1)
   \       0x22   0x9C0D             LDR      R4,[SP, #+52]
   \       0x24   0x9D0C             LDR      R5,[SP, #+48]
   \       0x26   0x9E0B             LDR      R6,[SP, #+44]
   \       0x28   0x9F0A             LDR      R7,[SP, #+40]
   1099          
   1100              request->msgid = msgid;
   \       0x2A   0xF8C4 0x8000      STR      R8,[R4, #+0]
   1101              request->devid = devid;
   \       0x2E   0xF8C4 0x9004      STR      R9,[R4, #+4]
   1102              request->service_prefix = service_prefix;
   \       0x32   0xF8C4 0xA008      STR      R10,[R4, #+8]
   1103              request->service_name = service_name;
   \       0x36   0xF8C4 0xB00C      STR      R11,[R4, #+12]
   1104              memcpy(request->product_key, node->product_key, strlen(node->product_key));
   \       0x3A   0x9800             LDR      R0,[SP, #+0]
   \       0x3C   0x3008             ADDS     R0,R0,#+8
   \       0x3E   0x....'....        BL       strlen
   \       0x42   0x4602             MOV      R2,R0
   \       0x44   0x9800             LDR      R0,[SP, #+0]
   \       0x46   0xF100 0x0108      ADD      R1,R0,#+8
   \       0x4A   0xF104 0x0010      ADD      R0,R4,#+16
   \       0x4E   0x....'....        BL       __aeabi_memcpy4
   1105              memcpy(request->device_name, node->device_name, strlen(node->device_name));
   \       0x52   0x9800             LDR      R0,[SP, #+0]
   \       0x54   0x301D             ADDS     R0,R0,#+29
   \       0x56   0x....'....        BL       strlen
   \       0x5A   0x4602             MOV      R2,R0
   \       0x5C   0x9800             LDR      R0,[SP, #+0]
   \       0x5E   0xF100 0x011D      ADD      R1,R0,#+29
   \       0x62   0xF104 0x0025      ADD      R0,R4,#+37
   \       0x66   0x....'....        BL       __aeabi_memcpy
   1106              request->params = params;
   \       0x6A   0x64A7             STR      R7,[R4, #+72]
   1107              request->params_len = params_len;
   \       0x6C   0x64E6             STR      R6,[R4, #+76]
   1108              request->method = method;
   \       0x6E   0x6525             STR      R5,[R4, #+80]
   1109          
   1110              return SUCCESS_RETURN;
   \       0x70   0x2000             MOVS     R0,#+0
   \                     ??_dm_mgr_upstream_request_assemble_1: (+1)
   \       0x72   0xE8BD 0x8FF2      POP      {R1,R4-R11,PC}   ;; return
   1111          }
   1112          #ifdef DEVICE_MODEL_SHADOW

   \                                 In section .text, align 2, keep-with-next
   1113          int dm_mgr_upstream_thing_property_desired_get(_IN_ int devid, _IN_ char *payload, _IN_ int payload_len)
   1114          {
   \                     dm_mgr_upstream_thing_property_desired_get: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0xB09A             SUB      SP,SP,#+104
   \        0x4   0x4605             MOV      R5,R0
   \        0x6   0x460C             MOV      R4,R1
   \        0x8   0x4616             MOV      R6,R2
   1115              int res = 0;
   1116              dm_msg_request_t request;
   1117          
   1118              if (devid < 0 || payload == NULL || payload_len <= 0) {
   \        0xA   0x2D00             CMP      R5,#+0
   \        0xC   0xD403             BMI.N    ??dm_mgr_upstream_thing_property_desired_get_0
   \        0xE   0x2C00             CMP      R4,#+0
   \       0x10   0xD001             BEQ.N    ??dm_mgr_upstream_thing_property_desired_get_0
   \       0x12   0x2E01             CMP      R6,#+1
   \       0x14   0xDA02             BGE.N    ??dm_mgr_upstream_thing_property_desired_get_1
   1119                  return DM_INVALID_PARAMETER;
   \                     ??dm_mgr_upstream_thing_property_desired_get_0: (+1)
   \       0x16   0xF06F 0x0001      MVN      R0,#+1
   \       0x1A   0xE034             B.N      ??dm_mgr_upstream_thing_property_desired_get_2
   1120              }
   1121          
   1122              memset(&request, 0, sizeof(dm_msg_request_t));
   \                     ??dm_mgr_upstream_thing_property_desired_get_1: (+1)
   \       0x1C   0x2200             MOVS     R2,#+0
   \       0x1E   0x2158             MOVS     R1,#+88
   \       0x20   0xA804             ADD      R0,SP,#+16
   \       0x22   0x....'....        BL       __aeabi_memset4
   1123              res = _dm_mgr_upstream_request_assemble(iotx_report_id(), devid, DM_URI_SYS_PREFIX, DM_URI_THING_PROPERTY_DESIRED_GET,
   1124                                                      payload, payload_len, "thing.property.desired.get", &request);
   1125              if (res != SUCCESS_RETURN) {
   \       0x26   0x....'....        BL       iotx_report_id
   \       0x2A   0xA904             ADD      R1,SP,#+16
   \       0x2C   0x9103             STR      R1,[SP, #+12]
   \       0x2E   0x....'....        LDR.W    R1,??DataTable17_6
   \       0x32   0x9102             STR      R1,[SP, #+8]
   \       0x34   0x9601             STR      R6,[SP, #+4]
   \       0x36   0x9400             STR      R4,[SP, #+0]
   \       0x38   0x....'....        LDR.W    R3,??DataTable17_7
   \       0x3C   0x....'....        LDR.W    R2,??DataTable17_1
   \       0x40   0x4629             MOV      R1,R5
   \       0x42   0x....'....        BL       _dm_mgr_upstream_request_assemble
   \       0x46   0x2800             CMP      R0,#+0
   \       0x48   0xD002             BEQ.N    ??dm_mgr_upstream_thing_property_desired_get_3
   1126                  return FAIL_RETURN;
   \       0x4A   0xF04F 0x30FF      MOV      R0,#-1
   \       0x4E   0xE01A             B.N      ??dm_mgr_upstream_thing_property_desired_get_2
   1127              }
   1128          
   1129              /* Callback */
   1130              request.callback = dm_client_thing_property_desired_get_reply;
   \                     ??dm_mgr_upstream_thing_property_desired_get_3: (+1)
   \       0x50   0x....'....        LDR.W    R0,??DataTable17_8
   \       0x54   0x9019             STR      R0,[SP, #+100]
   1131          
   1132              /* Send Message To Cloud */
   1133              res = dm_msg_request(DM_MSG_DEST_CLOUD, &request);
   \       0x56   0xA904             ADD      R1,SP,#+16
   \       0x58   0x2001             MOVS     R0,#+1
   \       0x5A   0x....'....        BL       dm_msg_request
   1134              /*TODO */
   1135          #if !defined(DM_MESSAGE_CACHE_DISABLED)
   1136              if (res == SUCCESS_RETURN) {
   \       0x5E   0x2800             CMP      R0,#+0
   \       0x60   0xD111             BNE.N    ??dm_mgr_upstream_thing_property_desired_get_2
   1137                  int prop_desired_get_reply = 0;
   \       0x62   0x2000             MOVS     R0,#+0
   \       0x64   0x9000             STR      R0,[SP, #+0]
   1138                  res = dm_opt_get(DM_OPT_DOWNSTREAM_EVENT_PROPERTY_DESIRED_GET_REPLY, &prop_desired_get_reply);
   1139                  if (res == SUCCESS_RETURN && prop_desired_get_reply) {
   \       0x66   0x4669             MOV      R1,SP
   \       0x68   0x2004             MOVS     R0,#+4
   \       0x6A   0x....'....        BL       dm_opt_get
   \       0x6E   0x2800             CMP      R0,#+0
   \       0x70   0xD108             BNE.N    ??dm_mgr_upstream_thing_property_desired_get_4
   \       0x72   0x9800             LDR      R0,[SP, #+0]
   \       0x74   0x2800             CMP      R0,#+0
   \       0x76   0xD005             BEQ.N    ??dm_mgr_upstream_thing_property_desired_get_4
   1140                      dm_msg_cache_insert(request.msgid, request.devid, IOTX_DM_EVENT_PROPERTY_DESIRED_GET_REPLY, NULL);
   \       0x78   0x2300             MOVS     R3,#+0
   \       0x7A   0x2211             MOVS     R2,#+17
   \       0x7C   0x9905             LDR      R1,[SP, #+20]
   \       0x7E   0x9804             LDR      R0,[SP, #+16]
   \       0x80   0x....'....        BL       dm_msg_cache_insert
   1141                  }
   1142                  res = request.msgid;
   \                     ??dm_mgr_upstream_thing_property_desired_get_4: (+1)
   \       0x84   0x9804             LDR      R0,[SP, #+16]
   1143              }
   1144          #endif
   1145              return res;
   \                     ??dm_mgr_upstream_thing_property_desired_get_2: (+1)
   \       0x86   0xB01A             ADD      SP,SP,#+104
   \       0x88   0xBD70             POP      {R4-R6,PC}       ;; return
   1146          }
   1147          

   \                                 In section .text, align 2, keep-with-next
   1148          int dm_mgr_upstream_thing_property_desired_delete(_IN_ int devid, _IN_ char *payload, _IN_ int payload_len)
   1149          {
   \                     dm_mgr_upstream_thing_property_desired_delete: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0xB09A             SUB      SP,SP,#+104
   \        0x4   0x4605             MOV      R5,R0
   \        0x6   0x460C             MOV      R4,R1
   \        0x8   0x4616             MOV      R6,R2
   1150              int res = 0;
   1151              dm_msg_request_t request;
   1152          
   1153              if (devid < 0 || payload == NULL || payload_len <= 0) {
   \        0xA   0x2D00             CMP      R5,#+0
   \        0xC   0xD403             BMI.N    ??dm_mgr_upstream_thing_property_desired_delete_0
   \        0xE   0x2C00             CMP      R4,#+0
   \       0x10   0xD001             BEQ.N    ??dm_mgr_upstream_thing_property_desired_delete_0
   \       0x12   0x2E01             CMP      R6,#+1
   \       0x14   0xDA02             BGE.N    ??dm_mgr_upstream_thing_property_desired_delete_1
   1154                  return DM_INVALID_PARAMETER;
   \                     ??dm_mgr_upstream_thing_property_desired_delete_0: (+1)
   \       0x16   0xF06F 0x0001      MVN      R0,#+1
   \       0x1A   0xE034             B.N      ??dm_mgr_upstream_thing_property_desired_delete_2
   1155              }
   1156          
   1157              memset(&request, 0, sizeof(dm_msg_request_t));
   \                     ??dm_mgr_upstream_thing_property_desired_delete_1: (+1)
   \       0x1C   0x2200             MOVS     R2,#+0
   \       0x1E   0x2158             MOVS     R1,#+88
   \       0x20   0xA804             ADD      R0,SP,#+16
   \       0x22   0x....'....        BL       __aeabi_memset4
   1158              res = _dm_mgr_upstream_request_assemble(iotx_report_id(), devid, DM_URI_SYS_PREFIX,
   1159                                                      DM_URI_THING_PROPERTY_DESIRED_DELETE,
   1160                                                      payload, payload_len, "thing.property.desired.delete", &request);
   1161              if (res != SUCCESS_RETURN) {
   \       0x26   0x....'....        BL       iotx_report_id
   \       0x2A   0xA904             ADD      R1,SP,#+16
   \       0x2C   0x9103             STR      R1,[SP, #+12]
   \       0x2E   0x....'....        LDR.W    R1,??DataTable17_9
   \       0x32   0x9102             STR      R1,[SP, #+8]
   \       0x34   0x9601             STR      R6,[SP, #+4]
   \       0x36   0x9400             STR      R4,[SP, #+0]
   \       0x38   0x....'....        LDR.W    R3,??DataTable17_10
   \       0x3C   0x....'....        LDR.W    R2,??DataTable17_1
   \       0x40   0x4629             MOV      R1,R5
   \       0x42   0x....'....        BL       _dm_mgr_upstream_request_assemble
   \       0x46   0x2800             CMP      R0,#+0
   \       0x48   0xD002             BEQ.N    ??dm_mgr_upstream_thing_property_desired_delete_3
   1162                  return FAIL_RETURN;
   \       0x4A   0xF04F 0x30FF      MOV      R0,#-1
   \       0x4E   0xE01A             B.N      ??dm_mgr_upstream_thing_property_desired_delete_2
   1163              }
   1164          
   1165              /* Callback */
   1166              request.callback = dm_client_thing_property_desired_delete_reply;
   \                     ??dm_mgr_upstream_thing_property_desired_delete_3: (+1)
   \       0x50   0x....'....        LDR.W    R0,??DataTable17_11
   \       0x54   0x9019             STR      R0,[SP, #+100]
   1167              /* Send Message To Cloud */
   1168              res = dm_msg_request(DM_MSG_DEST_CLOUD, &request);
   \       0x56   0xA904             ADD      R1,SP,#+16
   \       0x58   0x2001             MOVS     R0,#+1
   \       0x5A   0x....'....        BL       dm_msg_request
   1169          #if !defined(DM_MESSAGE_CACHE_DISABLED)
   1170              if (res == SUCCESS_RETURN) {
   \       0x5E   0x2800             CMP      R0,#+0
   \       0x60   0xD111             BNE.N    ??dm_mgr_upstream_thing_property_desired_delete_2
   1171                  int prop_desired_delete_reply = 0;
   \       0x62   0x2000             MOVS     R0,#+0
   \       0x64   0x9000             STR      R0,[SP, #+0]
   1172                  res = dm_opt_get(DM_OPT_DOWNSTREAM_EVENT_PROPERTY_DESIRED_DELETE_REPLY, &prop_desired_delete_reply);
   1173                  if (res == SUCCESS_RETURN && prop_desired_delete_reply) {
   \       0x66   0x4669             MOV      R1,SP
   \       0x68   0x2003             MOVS     R0,#+3
   \       0x6A   0x....'....        BL       dm_opt_get
   \       0x6E   0x2800             CMP      R0,#+0
   \       0x70   0xD108             BNE.N    ??dm_mgr_upstream_thing_property_desired_delete_4
   \       0x72   0x9800             LDR      R0,[SP, #+0]
   \       0x74   0x2800             CMP      R0,#+0
   \       0x76   0xD005             BEQ.N    ??dm_mgr_upstream_thing_property_desired_delete_4
   1174                      dm_msg_cache_insert(request.msgid, request.devid, IOTX_DM_EVENT_PROPERTY_DESIRED_DELETE_REPLY, NULL);
   \       0x78   0x2300             MOVS     R3,#+0
   \       0x7A   0x2212             MOVS     R2,#+18
   \       0x7C   0x9905             LDR      R1,[SP, #+20]
   \       0x7E   0x9804             LDR      R0,[SP, #+16]
   \       0x80   0x....'....        BL       dm_msg_cache_insert
   1175                  }
   1176                  res = request.msgid;
   \                     ??dm_mgr_upstream_thing_property_desired_delete_4: (+1)
   \       0x84   0x9804             LDR      R0,[SP, #+16]
   1177              }
   1178          #endif
   1179              return res;
   \                     ??dm_mgr_upstream_thing_property_desired_delete_2: (+1)
   \       0x86   0xB01A             ADD      SP,SP,#+104
   \       0x88   0xBD70             POP      {R4-R6,PC}       ;; return
   1180          }
   1181          #endif
   1182          

   \                                 In section .text, align 2, keep-with-next
   1183          int dm_mgr_upstream_thing_property_post(_IN_ int devid, _IN_ char *payload, _IN_ int payload_len)
   1184          {
   \                     dm_mgr_upstream_thing_property_post: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0xB09A             SUB      SP,SP,#+104
   \        0x4   0x4605             MOV      R5,R0
   \        0x6   0x460C             MOV      R4,R1
   \        0x8   0x4616             MOV      R6,R2
   1185              int res = 0;
   1186              dm_msg_request_t request;
   1187          
   1188              if (devid < 0 || payload == NULL || payload_len <= 0) {
   \        0xA   0x2D00             CMP      R5,#+0
   \        0xC   0xD403             BMI.N    ??dm_mgr_upstream_thing_property_post_0
   \        0xE   0x2C00             CMP      R4,#+0
   \       0x10   0xD001             BEQ.N    ??dm_mgr_upstream_thing_property_post_0
   \       0x12   0x2E01             CMP      R6,#+1
   \       0x14   0xDA02             BGE.N    ??dm_mgr_upstream_thing_property_post_1
   1189                  return DM_INVALID_PARAMETER;
   \                     ??dm_mgr_upstream_thing_property_post_0: (+1)
   \       0x16   0xF06F 0x0001      MVN      R0,#+1
   \       0x1A   0xE034             B.N      ??dm_mgr_upstream_thing_property_post_2
   1190              }
   1191          
   1192              memset(&request, 0, sizeof(dm_msg_request_t));
   \                     ??dm_mgr_upstream_thing_property_post_1: (+1)
   \       0x1C   0x2200             MOVS     R2,#+0
   \       0x1E   0x2158             MOVS     R1,#+88
   \       0x20   0xA804             ADD      R0,SP,#+16
   \       0x22   0x....'....        BL       __aeabi_memset4
   1193              res = _dm_mgr_upstream_request_assemble(iotx_report_id(), devid, DM_URI_SYS_PREFIX, DM_URI_THING_EVENT_PROPERTY_POST,
   1194                                                      payload, payload_len, "thing.event.property.post", &request);
   1195              if (res != SUCCESS_RETURN) {
   \       0x26   0x....'....        BL       iotx_report_id
   \       0x2A   0xA904             ADD      R1,SP,#+16
   \       0x2C   0x9103             STR      R1,[SP, #+12]
   \       0x2E   0x....'....        LDR.W    R1,??DataTable17_12
   \       0x32   0x9102             STR      R1,[SP, #+8]
   \       0x34   0x9601             STR      R6,[SP, #+4]
   \       0x36   0x9400             STR      R4,[SP, #+0]
   \       0x38   0x....'....        LDR.W    R3,??DataTable17_13
   \       0x3C   0x....'....        LDR.W    R2,??DataTable17_1
   \       0x40   0x4629             MOV      R1,R5
   \       0x42   0x....'....        BL       _dm_mgr_upstream_request_assemble
   \       0x46   0x2800             CMP      R0,#+0
   \       0x48   0xD002             BEQ.N    ??dm_mgr_upstream_thing_property_post_3
   1196                  return FAIL_RETURN;
   \       0x4A   0xF04F 0x30FF      MOV      R0,#-1
   \       0x4E   0xE01A             B.N      ??dm_mgr_upstream_thing_property_post_2
   1197              }
   1198          
   1199              /* Callback */
   1200              request.callback = dm_client_thing_event_post_reply;
   \                     ??dm_mgr_upstream_thing_property_post_3: (+1)
   \       0x50   0x....'....        LDR.W    R0,??DataTable17_14
   \       0x54   0x9019             STR      R0,[SP, #+100]
   1201          
   1202              /* Send Message To Cloud */
   1203              res = dm_msg_request(DM_MSG_DEST_ALL, &request);
   \       0x56   0xA904             ADD      R1,SP,#+16
   \       0x58   0x2003             MOVS     R0,#+3
   \       0x5A   0x....'....        BL       dm_msg_request
   1204          #if !defined(DM_MESSAGE_CACHE_DISABLED)
   1205              if (res == SUCCESS_RETURN) {
   \       0x5E   0x2800             CMP      R0,#+0
   \       0x60   0xD111             BNE.N    ??dm_mgr_upstream_thing_property_post_2
   1206                  int prop_post_reply = 0;
   \       0x62   0x2000             MOVS     R0,#+0
   \       0x64   0x9000             STR      R0,[SP, #+0]
   1207                  res = dm_opt_get(DM_OPT_DOWNSTREAM_EVENT_POST_REPLY, &prop_post_reply);
   1208                  if (res == SUCCESS_RETURN && prop_post_reply) {
   \       0x66   0x4669             MOV      R1,SP
   \       0x68   0x2001             MOVS     R0,#+1
   \       0x6A   0x....'....        BL       dm_opt_get
   \       0x6E   0x2800             CMP      R0,#+0
   \       0x70   0xD108             BNE.N    ??dm_mgr_upstream_thing_property_post_4
   \       0x72   0x9800             LDR      R0,[SP, #+0]
   \       0x74   0x2800             CMP      R0,#+0
   \       0x76   0xD005             BEQ.N    ??dm_mgr_upstream_thing_property_post_4
   1209                      dm_msg_cache_insert(request.msgid, request.devid, IOTX_DM_EVENT_EVENT_PROPERTY_POST_REPLY, NULL);
   \       0x78   0x2300             MOVS     R3,#+0
   \       0x7A   0x2220             MOVS     R2,#+32
   \       0x7C   0x9905             LDR      R1,[SP, #+20]
   \       0x7E   0x9804             LDR      R0,[SP, #+16]
   \       0x80   0x....'....        BL       dm_msg_cache_insert
   1210                  }
   1211                  res = request.msgid;
   \                     ??dm_mgr_upstream_thing_property_post_4: (+1)
   \       0x84   0x9804             LDR      R0,[SP, #+16]
   1212              }
   1213          #endif
   1214              return res;
   \                     ??dm_mgr_upstream_thing_property_post_2: (+1)
   \       0x86   0xB01A             ADD      SP,SP,#+104
   \       0x88   0xBD70             POP      {R4-R6,PC}       ;; return
   1215          }
   1216          
   1217          #ifdef LOG_REPORT_TO_CLOUD

   \                                 In section .bss, align 4
   1218          static unsigned int log_size = 0;
   \                     log_size:
   \        0x0                      DS8 4

   \                                 In section .text, align 2, keep-with-next
   1219          int dm_mgr_upstream_thing_log_post(_IN_ int devid, _IN_ char *payload, _IN_ int payload_len, int force_upload)
   1220          {
   \                     dm_mgr_upstream_thing_log_post: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0xB09A             SUB      SP,SP,#+104
   \        0x4   0x4604             MOV      R4,R0
   \        0x6   0x4608             MOV      R0,R1
   1221              int res = 0;
   1222              dm_msg_request_t request;
   1223              extern REPORT_STATE g_report_status;
   1224              extern char *g_log_poll;
   1225          
   1226              if (0 == force_upload) {
   \        0x8   0x2B00             CMP      R3,#+0
   \        0xA   0xD11E             BNE.N    ??dm_mgr_upstream_thing_log_post_0
   1227                  if (devid < 0 || payload == NULL || payload_len <= 0) {
   \        0xC   0x2C00             CMP      R4,#+0
   \        0xE   0xD403             BMI.N    ??dm_mgr_upstream_thing_log_post_1
   \       0x10   0x2800             CMP      R0,#+0
   \       0x12   0xD001             BEQ.N    ??dm_mgr_upstream_thing_log_post_1
   \       0x14   0x2A01             CMP      R2,#+1
   \       0x16   0xDA02             BGE.N    ??dm_mgr_upstream_thing_log_post_2
   1228                      return DM_INVALID_PARAMETER;
   \                     ??dm_mgr_upstream_thing_log_post_1: (+1)
   \       0x18   0xF06F 0x0001      MVN      R0,#+1
   \       0x1C   0xE043             B.N      ??dm_mgr_upstream_thing_log_post_3
   1229                  }
   1230          
   1231                  if (log_size + payload_len < OVERFLOW_LEN) {
   \                     ??dm_mgr_upstream_thing_log_post_2: (+1)
   \       0x1E   0x....'....        LDR.W    R5,??DataTable17_15
   \       0x22   0x6829             LDR      R1,[R5, #+0]
   \       0x24   0x1851             ADDS     R1,R2,R1
   \       0x26   0xF5B1 0x7F52      CMP      R1,#+840
   \       0x2A   0xD22F             BCS.N    ??dm_mgr_upstream_thing_log_post_4
   1232                      log_size = push_log(payload, payload_len);
   \       0x2C   0x4611             MOV      R1,R2
   \       0x2E   0x....'....        BL       push_log
   \       0x32   0x6028             STR      R0,[R5, #+0]
   1233                  } else {
   1234                      /* it should NOT happen; it means that it is too late to upload log files */
   1235                      reset_log_poll();
   1236                      dm_log_err("it it too late to upload log, reset pool");
   1237                      return FAIL_RETURN;
   1238                  }
   1239          
   1240                  dm_log_info("push log, len is %d, log_size is %d\n", payload_len, log_size);
   1241                  if (!(log_size > REPORT_LEN && DONE == g_report_status)) {
   \       0x34   0xF240 0x21E5      MOVW     R1,#+741
   \       0x38   0x4288             CMP      R0,R1
   \       0x3A   0xD304             BCC.N    ??dm_mgr_upstream_thing_log_post_5
   \       0x3C   0x....'....        LDR.W    R0,??DataTable17_16
   \       0x40   0x7800             LDRB     R0,[R0, #+0]
   \       0x42   0x2802             CMP      R0,#+2
   \       0x44   0xD001             BEQ.N    ??dm_mgr_upstream_thing_log_post_0
   1242                      return SUCCESS_RETURN;
   \                     ??dm_mgr_upstream_thing_log_post_5: (+1)
   \       0x46   0x2000             MOVS     R0,#+0
   \       0x48   0xE02D             B.N      ??dm_mgr_upstream_thing_log_post_3
   1243                  }
   1244              }
   1245          
   1246              log_size = add_tail();
   \                     ??dm_mgr_upstream_thing_log_post_0: (+1)
   \       0x4A   0x....'....        LDR.W    R5,??DataTable17_15
   \       0x4E   0x....'....        BL       add_tail
   \       0x52   0x6028             STR      R0,[R5, #+0]
   1247              memset(&request, 0, sizeof(dm_msg_request_t));
   \       0x54   0x2200             MOVS     R2,#+0
   \       0x56   0x2158             MOVS     R1,#+88
   \       0x58   0xA804             ADD      R0,SP,#+16
   \       0x5A   0x....'....        BL       __aeabi_memset4
   1248              res = _dm_mgr_upstream_request_assemble(iotx_report_id(), devid, DM_URI_SYS_PREFIX, DM_URI_THING_LOG_POST,
   1249                                                      g_log_poll, log_size + 1, "thing.log.post", &request);
   1250          
   1251              if (res != SUCCESS_RETURN) {
   \       0x5E   0x....'....        BL       iotx_report_id
   \       0x62   0xA904             ADD      R1,SP,#+16
   \       0x64   0x9103             STR      R1,[SP, #+12]
   \       0x66   0x....'....        LDR.W    R1,??DataTable17_17
   \       0x6A   0x9102             STR      R1,[SP, #+8]
   \       0x6C   0x6829             LDR      R1,[R5, #+0]
   \       0x6E   0x1C49             ADDS     R1,R1,#+1
   \       0x70   0x9101             STR      R1,[SP, #+4]
   \       0x72   0x....'....        LDR.W    R1,??DataTable17_18
   \       0x76   0x6809             LDR      R1,[R1, #+0]
   \       0x78   0x9100             STR      R1,[SP, #+0]
   \       0x7A   0x....'....        LDR.W    R3,??DataTable17_19
   \       0x7E   0x....'....        LDR.W    R2,??DataTable17_1
   \       0x82   0x4621             MOV      R1,R4
   \       0x84   0x....'....        BL       _dm_mgr_upstream_request_assemble
   \       0x88   0x2800             CMP      R0,#+0
   \       0x8A   0xD004             BEQ.N    ??dm_mgr_upstream_thing_log_post_6
   1252                  reset_log_poll();
   \                     ??dm_mgr_upstream_thing_log_post_4: (+1)
   \       0x8C   0x....'....        BL       reset_log_poll
   1253                  return FAIL_RETURN;
   \       0x90   0xF04F 0x30FF      MOV      R0,#-1
   \       0x94   0xE007             B.N      ??dm_mgr_upstream_thing_log_post_3
   1254              }
   1255              /* Send Message To Cloud */
   1256              res = dm_msg_request(DM_MSG_DEST_CLOUD, &request);
   \                     ??dm_mgr_upstream_thing_log_post_6: (+1)
   \       0x96   0xA904             ADD      R1,SP,#+16
   \       0x98   0x2001             MOVS     R0,#+1
   \       0x9A   0x....'....        BL       dm_msg_request
   \       0x9E   0x4604             MOV      R4,R0
   1257              reset_log_poll();
   \       0xA0   0x....'....        BL       reset_log_poll
   1258              return res;
   \       0xA4   0x4620             MOV      R0,R4
   \                     ??dm_mgr_upstream_thing_log_post_3: (+1)
   \       0xA6   0xB01B             ADD      SP,SP,#+108
   \       0xA8   0xBD30             POP      {R4,R5,PC}       ;; return
   1259          }
   1260          #endif
   1261          
   1262          
   1263          

   \                                 In section .text, align 2, keep-with-next
   1264          int dm_mgr_upstream_thing_event_post(_IN_ int devid, _IN_ char *identifier, _IN_ int identifier_len, _IN_ char *method,
   1265                                               _IN_ char *payload, _IN_ int payload_len)
   1266          {
   \                     dm_mgr_upstream_thing_event_post: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \        0x4   0xB09A             SUB      SP,SP,#+104
   \        0x6   0x0007             MOVS     R7,R0
   \        0x8   0x4690             MOV      R8,R2
   1267              int res = 0, service_name_len = 0;
   1268              char *service_name = NULL;
   1269              dm_msg_request_t request;
   1270          
   1271              if (devid < 0 || identifier == NULL || identifier_len <= 0 ||
   1272                  method == NULL || payload == NULL || payload_len <= 0) {
   \        0xA   0xD410             BMI.N    ??dm_mgr_upstream_thing_event_post_0
   \        0xC   0x9101             STR      R1,[SP, #+4]
   \        0xE   0x4608             MOV      R0,R1
   \       0x10   0x2800             CMP      R0,#+0
   \       0x12   0xD00C             BEQ.N    ??dm_mgr_upstream_thing_event_post_0
   \       0x14   0xF1B8 0x0F01      CMP      R8,#+1
   \       0x18   0xDB09             BLT.N    ??dm_mgr_upstream_thing_event_post_0
   \       0x1A   0x001C             MOVS     R4,R3
   \       0x1C   0xD007             BEQ.N    ??dm_mgr_upstream_thing_event_post_0
   \       0x1E   0x9E24             LDR      R6,[SP, #+144]
   \       0x20   0x2E00             CMP      R6,#+0
   \       0x22   0xD004             BEQ.N    ??dm_mgr_upstream_thing_event_post_0
   \       0x24   0xF8DD 0x9094      LDR      R9,[SP, #+148]
   \       0x28   0xF1B9 0x0F01      CMP      R9,#+1
   \       0x2C   0xDA02             BGE.N    ??dm_mgr_upstream_thing_event_post_1
   1273                  return DM_INVALID_PARAMETER;
   \                     ??dm_mgr_upstream_thing_event_post_0: (+1)
   \       0x2E   0xF06F 0x0001      MVN      R0,#+1
   \       0x32   0xE053             B.N      ??dm_mgr_upstream_thing_event_post_2
   1274              }
   1275          
   1276              service_name_len = strlen(DM_URI_THING_EVENT_POST) + identifier_len + 1;
   \                     ??dm_mgr_upstream_thing_event_post_1: (+1)
   \       0x34   0x....'....        LDR.W    R10,??DataTable17_20
   \       0x38   0x4650             MOV      R0,R10
   \       0x3A   0x....'....        BL       strlen
   \       0x3E   0x4683             MOV      R11,R0
   \       0x40   0x44C3             ADD      R11,R8,R11
   \       0x42   0xF10B 0x0B01      ADD      R11,R11,#+1
   1277              service_name = DM_malloc(service_name_len);
   \       0x46   0x4658             MOV      R0,R11
   \       0x48   0x....'....        BL       HAL_Malloc
   \       0x4C   0x0005             MOVS     R5,R0
   1278              if (service_name == NULL) {
   \       0x4E   0xD102             BNE.N    ??dm_mgr_upstream_thing_event_post_3
   1279                  return DM_MEMORY_NOT_ENOUGH;
   \       0x50   0xF06F 0x0002      MVN      R0,#+2
   \       0x54   0xE042             B.N      ??dm_mgr_upstream_thing_event_post_2
   1280              }
   1281              memset(service_name, 0, service_name_len);
   \                     ??dm_mgr_upstream_thing_event_post_3: (+1)
   \       0x56   0x2200             MOVS     R2,#+0
   \       0x58   0x4659             MOV      R1,R11
   \       0x5A   0x....'....        BL       __aeabi_memset
   1282              HAL_Snprintf(service_name, service_name_len, DM_URI_THING_EVENT_POST, identifier_len, identifier);
   \       0x5E   0x9801             LDR      R0,[SP, #+4]
   \       0x60   0x9000             STR      R0,[SP, #+0]
   \       0x62   0x4643             MOV      R3,R8
   \       0x64   0x4652             MOV      R2,R10
   \       0x66   0x4659             MOV      R1,R11
   \       0x68   0x4628             MOV      R0,R5
   \       0x6A   0x....'....        BL       HAL_Snprintf
   1283          
   1284              memset(&request, 0, sizeof(dm_msg_request_t));
   \       0x6E   0x2200             MOVS     R2,#+0
   \       0x70   0x2158             MOVS     R1,#+88
   \       0x72   0xA804             ADD      R0,SP,#+16
   \       0x74   0x....'....        BL       __aeabi_memset4
   1285              res = _dm_mgr_upstream_request_assemble(iotx_report_id(), devid, DM_URI_SYS_PREFIX, service_name,
   1286                                                      payload, payload_len, method, &request);
   1287              if (res != SUCCESS_RETURN) {
   \       0x78   0x....'....        BL       iotx_report_id
   \       0x7C   0xA904             ADD      R1,SP,#+16
   \       0x7E   0x9103             STR      R1,[SP, #+12]
   \       0x80   0x9402             STR      R4,[SP, #+8]
   \       0x82   0xF8CD 0x9004      STR      R9,[SP, #+4]
   \       0x86   0x9600             STR      R6,[SP, #+0]
   \       0x88   0x462B             MOV      R3,R5
   \       0x8A   0x....'....        LDR.W    R2,??DataTable17_1
   \       0x8E   0x4639             MOV      R1,R7
   \       0x90   0x....'....        BL       _dm_mgr_upstream_request_assemble
   \       0x94   0x2800             CMP      R0,#+0
   \       0x96   0xD002             BEQ.N    ??dm_mgr_upstream_thing_event_post_4
   1288                  return FAIL_RETURN;
   \       0x98   0xF04F 0x30FF      MOV      R0,#-1
   \       0x9C   0xE01E             B.N      ??dm_mgr_upstream_thing_event_post_2
   1289              }
   1290          
   1291              /* Callback */
   1292              request.callback = dm_client_thing_event_post_reply;
   \                     ??dm_mgr_upstream_thing_event_post_4: (+1)
   \       0x9E   0x....'....        LDR.W    R0,??DataTable17_14
   \       0xA2   0x9019             STR      R0,[SP, #+100]
   1293          
   1294              /* Send Message To Cloud */
   1295              res = dm_msg_request(DM_MSG_DEST_ALL, &request);
   \       0xA4   0xA904             ADD      R1,SP,#+16
   \       0xA6   0x2003             MOVS     R0,#+3
   \       0xA8   0x....'....        BL       dm_msg_request
   \       0xAC   0x0004             MOVS     R4,R0
   1296          #if !defined(DM_MESSAGE_CACHE_DISABLED)
   1297              if (res == SUCCESS_RETURN) {
   \       0xAE   0xD111             BNE.N    ??dm_mgr_upstream_thing_event_post_5
   1298                  int event_post_reply = 0;
   \       0xB0   0x2000             MOVS     R0,#+0
   \       0xB2   0x9000             STR      R0,[SP, #+0]
   1299                  res = dm_opt_get(DM_OPT_DOWNSTREAM_EVENT_POST_REPLY, &event_post_reply);
   1300                  if (res == SUCCESS_RETURN && event_post_reply) {
   \       0xB4   0x4669             MOV      R1,SP
   \       0xB6   0x2001             MOVS     R0,#+1
   \       0xB8   0x....'....        BL       dm_opt_get
   \       0xBC   0x2800             CMP      R0,#+0
   \       0xBE   0xD108             BNE.N    ??dm_mgr_upstream_thing_event_post_6
   \       0xC0   0x9800             LDR      R0,[SP, #+0]
   \       0xC2   0x2800             CMP      R0,#+0
   \       0xC4   0xD005             BEQ.N    ??dm_mgr_upstream_thing_event_post_6
   1301                      dm_msg_cache_insert(request.msgid, request.devid, IOTX_DM_EVENT_EVENT_PROPERTY_POST_REPLY, NULL);
   \       0xC6   0x2300             MOVS     R3,#+0
   \       0xC8   0x2220             MOVS     R2,#+32
   \       0xCA   0x9905             LDR      R1,[SP, #+20]
   \       0xCC   0x9804             LDR      R0,[SP, #+16]
   \       0xCE   0x....'....        BL       dm_msg_cache_insert
   1302                  }
   1303                  res = request.msgid;
   \                     ??dm_mgr_upstream_thing_event_post_6: (+1)
   \       0xD2   0x9C04             LDR      R4,[SP, #+16]
   1304              }
   1305          #endif
   1306              DM_free(service_name);
   \                     ??dm_mgr_upstream_thing_event_post_5: (+1)
   \       0xD4   0x4628             MOV      R0,R5
   \       0xD6   0x....'....        BL       HAL_Free
   1307          
   1308              return res;
   \       0xDA   0x4620             MOV      R0,R4
   \                     ??dm_mgr_upstream_thing_event_post_2: (+1)
   \       0xDC   0xB01B             ADD      SP,SP,#+108
   \       0xDE   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   1309          }
   1310          
   1311          

   \                                 In section .text, align 2, keep-with-next
   1312          int dm_mgr_upstream_thing_deviceinfo_update(_IN_ int devid, _IN_ char *payload, _IN_ int payload_len)
   1313          {
   \                     dm_mgr_upstream_thing_deviceinfo_update: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0xB09A             SUB      SP,SP,#+104
   \        0x4   0x4605             MOV      R5,R0
   \        0x6   0x460C             MOV      R4,R1
   \        0x8   0x4616             MOV      R6,R2
   1314              int res = 0;
   1315              dm_msg_request_t request;
   1316          
   1317              if (devid < 0 || payload == NULL || payload_len <= 0) {
   \        0xA   0x2D00             CMP      R5,#+0
   \        0xC   0xD403             BMI.N    ??dm_mgr_upstream_thing_deviceinfo_update_0
   \        0xE   0x2C00             CMP      R4,#+0
   \       0x10   0xD001             BEQ.N    ??dm_mgr_upstream_thing_deviceinfo_update_0
   \       0x12   0x2E01             CMP      R6,#+1
   \       0x14   0xDA02             BGE.N    ??dm_mgr_upstream_thing_deviceinfo_update_1
   1318                  return DM_INVALID_PARAMETER;
   \                     ??dm_mgr_upstream_thing_deviceinfo_update_0: (+1)
   \       0x16   0xF06F 0x0001      MVN      R0,#+1
   \       0x1A   0xE029             B.N      ??dm_mgr_upstream_thing_deviceinfo_update_2
   1319              }
   1320          
   1321              memset(&request, 0, sizeof(dm_msg_request_t));
   \                     ??dm_mgr_upstream_thing_deviceinfo_update_1: (+1)
   \       0x1C   0x2200             MOVS     R2,#+0
   \       0x1E   0x2158             MOVS     R1,#+88
   \       0x20   0xA804             ADD      R0,SP,#+16
   \       0x22   0x....'....        BL       __aeabi_memset4
   1322              res = _dm_mgr_upstream_request_assemble(iotx_report_id(), devid, DM_URI_SYS_PREFIX, DM_URI_THING_DEVICEINFO_UPDATE,
   1323                                                      payload, payload_len, "thing.deviceinfo.update", &request);
   1324              if (res != SUCCESS_RETURN) {
   \       0x26   0x....'....        BL       iotx_report_id
   \       0x2A   0xA904             ADD      R1,SP,#+16
   \       0x2C   0x9103             STR      R1,[SP, #+12]
   \       0x2E   0x....'....        LDR.W    R1,??DataTable17_21
   \       0x32   0x9102             STR      R1,[SP, #+8]
   \       0x34   0x9601             STR      R6,[SP, #+4]
   \       0x36   0x9400             STR      R4,[SP, #+0]
   \       0x38   0x....'....        LDR.W    R3,??DataTable17_22
   \       0x3C   0x....'....        LDR.W    R2,??DataTable17_1
   \       0x40   0x4629             MOV      R1,R5
   \       0x42   0x....'....        BL       _dm_mgr_upstream_request_assemble
   \       0x46   0x2800             CMP      R0,#+0
   \       0x48   0xD002             BEQ.N    ??dm_mgr_upstream_thing_deviceinfo_update_3
   1325                  return FAIL_RETURN;
   \       0x4A   0xF04F 0x30FF      MOV      R0,#-1
   \       0x4E   0xE00F             B.N      ??dm_mgr_upstream_thing_deviceinfo_update_2
   1326              }
   1327          
   1328              /* Callback */
   1329              request.callback = dm_client_thing_deviceinfo_update_reply;
   \                     ??dm_mgr_upstream_thing_deviceinfo_update_3: (+1)
   \       0x50   0x....'....        LDR.W    R0,??DataTable17_23
   \       0x54   0x9019             STR      R0,[SP, #+100]
   1330          
   1331              /* Send Message To Cloud */
   1332              res = dm_msg_request(DM_MSG_DEST_CLOUD, &request);
   \       0x56   0xA904             ADD      R1,SP,#+16
   \       0x58   0x2001             MOVS     R0,#+1
   \       0x5A   0x....'....        BL       dm_msg_request
   1333          #if !defined(DM_MESSAGE_CACHE_DISABLED)
   1334              if (res == SUCCESS_RETURN) {
   \       0x5E   0x2800             CMP      R0,#+0
   \       0x60   0xD106             BNE.N    ??dm_mgr_upstream_thing_deviceinfo_update_2
   1335                  dm_msg_cache_insert(request.msgid, request.devid, IOTX_DM_EVENT_DEVICEINFO_UPDATE_REPLY, NULL);
   \       0x62   0x2300             MOVS     R3,#+0
   \       0x64   0x2222             MOVS     R2,#+34
   \       0x66   0x9905             LDR      R1,[SP, #+20]
   \       0x68   0x9804             LDR      R0,[SP, #+16]
   \       0x6A   0x....'....        BL       dm_msg_cache_insert
   1336                  res = request.msgid;
   \       0x6E   0x9804             LDR      R0,[SP, #+16]
   1337              }
   1338          #endif
   1339              return res;
   \                     ??dm_mgr_upstream_thing_deviceinfo_update_2: (+1)
   \       0x70   0xB01A             ADD      SP,SP,#+104
   \       0x72   0xBD70             POP      {R4-R6,PC}       ;; return
   1340          }
   1341          

   \                                 In section .text, align 2, keep-with-next
   1342          int dm_mgr_upstream_thing_deviceinfo_delete(_IN_ int devid, _IN_ char *payload, _IN_ int payload_len)
   1343          {
   \                     dm_mgr_upstream_thing_deviceinfo_delete: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0xB09A             SUB      SP,SP,#+104
   \        0x4   0x4605             MOV      R5,R0
   \        0x6   0x460C             MOV      R4,R1
   \        0x8   0x4616             MOV      R6,R2
   1344              int res = 0;
   1345              dm_msg_request_t request;
   1346          
   1347              if (devid < 0 || payload == NULL || payload_len <= 0) {
   \        0xA   0x2D00             CMP      R5,#+0
   \        0xC   0xD403             BMI.N    ??dm_mgr_upstream_thing_deviceinfo_delete_0
   \        0xE   0x2C00             CMP      R4,#+0
   \       0x10   0xD001             BEQ.N    ??dm_mgr_upstream_thing_deviceinfo_delete_0
   \       0x12   0x2E01             CMP      R6,#+1
   \       0x14   0xDA02             BGE.N    ??dm_mgr_upstream_thing_deviceinfo_delete_1
   1348                  return DM_INVALID_PARAMETER;
   \                     ??dm_mgr_upstream_thing_deviceinfo_delete_0: (+1)
   \       0x16   0xF06F 0x0001      MVN      R0,#+1
   \       0x1A   0xE029             B.N      ??dm_mgr_upstream_thing_deviceinfo_delete_2
   1349              }
   1350          
   1351              memset(&request, 0, sizeof(dm_msg_request_t));
   \                     ??dm_mgr_upstream_thing_deviceinfo_delete_1: (+1)
   \       0x1C   0x2200             MOVS     R2,#+0
   \       0x1E   0x2158             MOVS     R1,#+88
   \       0x20   0xA804             ADD      R0,SP,#+16
   \       0x22   0x....'....        BL       __aeabi_memset4
   1352              res = _dm_mgr_upstream_request_assemble(iotx_report_id(), devid, DM_URI_SYS_PREFIX, DM_URI_THING_DEVICEINFO_DELETE,
   1353                                                      payload, payload_len, "thing.deviceinfo.delete", &request);
   1354              if (res != SUCCESS_RETURN) {
   \       0x26   0x....'....        BL       iotx_report_id
   \       0x2A   0xA904             ADD      R1,SP,#+16
   \       0x2C   0x9103             STR      R1,[SP, #+12]
   \       0x2E   0x....'....        LDR.W    R1,??DataTable17_24
   \       0x32   0x9102             STR      R1,[SP, #+8]
   \       0x34   0x9601             STR      R6,[SP, #+4]
   \       0x36   0x9400             STR      R4,[SP, #+0]
   \       0x38   0x....'....        LDR.W    R3,??DataTable17_25
   \       0x3C   0x....'....        LDR.W    R2,??DataTable17_1
   \       0x40   0x4629             MOV      R1,R5
   \       0x42   0x....'....        BL       _dm_mgr_upstream_request_assemble
   \       0x46   0x2800             CMP      R0,#+0
   \       0x48   0xD002             BEQ.N    ??dm_mgr_upstream_thing_deviceinfo_delete_3
   1355                  return FAIL_RETURN;
   \       0x4A   0xF04F 0x30FF      MOV      R0,#-1
   \       0x4E   0xE00F             B.N      ??dm_mgr_upstream_thing_deviceinfo_delete_2
   1356              }
   1357          
   1358              /* Callback */
   1359              request.callback = dm_client_thing_deviceinfo_delete_reply;
   \                     ??dm_mgr_upstream_thing_deviceinfo_delete_3: (+1)
   \       0x50   0x....'....        LDR.W    R0,??DataTable17_26
   \       0x54   0x9019             STR      R0,[SP, #+100]
   1360          
   1361              /* Send Message To Cloud */
   1362              res = dm_msg_request(DM_MSG_DEST_CLOUD, &request);
   \       0x56   0xA904             ADD      R1,SP,#+16
   \       0x58   0x2001             MOVS     R0,#+1
   \       0x5A   0x....'....        BL       dm_msg_request
   1363          #if !defined(DM_MESSAGE_CACHE_DISABLED)
   1364              if (res == SUCCESS_RETURN) {
   \       0x5E   0x2800             CMP      R0,#+0
   \       0x60   0xD106             BNE.N    ??dm_mgr_upstream_thing_deviceinfo_delete_2
   1365                  dm_msg_cache_insert(request.msgid, request.devid, IOTX_DM_EVENT_DEVICEINFO_DELETE_REPLY, NULL);
   \       0x62   0x2300             MOVS     R3,#+0
   \       0x64   0x2223             MOVS     R2,#+35
   \       0x66   0x9905             LDR      R1,[SP, #+20]
   \       0x68   0x9804             LDR      R0,[SP, #+16]
   \       0x6A   0x....'....        BL       dm_msg_cache_insert
   1366                  res = request.msgid;
   \       0x6E   0x9804             LDR      R0,[SP, #+16]
   1367              }
   1368          #endif
   1369              return res;
   \                     ??dm_mgr_upstream_thing_deviceinfo_delete_2: (+1)
   \       0x70   0xB01A             ADD      SP,SP,#+104
   \       0x72   0xBD70             POP      {R4-R6,PC}       ;; return
   1370          }
   1371          

   \                                 In section .text, align 2, keep-with-next
   1372          int dm_mgr_upstream_thing_dsltemplate_get(_IN_ int devid)
   1373          {
   \                     dm_mgr_upstream_thing_dsltemplate_get: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0xB09A             SUB      SP,SP,#+104
   \        0x4   0x4604             MOV      R4,R0
   1374              int res = 0;
   1375              char *params = "{}";
   \        0x6   0x....             ADR.N    R5,??DataTable15  ;; 0x7B, 0x7D, 0x00, 0x00
   1376              int params_len = strlen(params);
   \        0x8   0x4628             MOV      R0,R5
   \        0xA   0x....'....        BL       strlen
   \        0xE   0x4606             MOV      R6,R0
   1377              dm_msg_request_t request;
   1378          
   1379              if (devid < 0) {
   \       0x10   0x2C00             CMP      R4,#+0
   \       0x12   0xD502             BPL.N    ??dm_mgr_upstream_thing_dsltemplate_get_0
   1380                  return DM_INVALID_PARAMETER;
   \       0x14   0xF06F 0x0001      MVN      R0,#+1
   \       0x18   0xE026             B.N      ??dm_mgr_upstream_thing_dsltemplate_get_1
   1381              }
   1382          
   1383              memset(&request, 0, sizeof(dm_msg_request_t));
   \                     ??dm_mgr_upstream_thing_dsltemplate_get_0: (+1)
   \       0x1A   0x2200             MOVS     R2,#+0
   \       0x1C   0x2158             MOVS     R1,#+88
   \       0x1E   0xA804             ADD      R0,SP,#+16
   \       0x20   0x....'....        BL       __aeabi_memset4
   1384              res = _dm_mgr_upstream_request_assemble(iotx_report_id(), devid, DM_URI_SYS_PREFIX, DM_URI_THING_DSLTEMPLATE_GET,
   1385                                                      params, params_len, "thing.dsltemplate.get", &request);
   1386              if (res != SUCCESS_RETURN) {
   \       0x24   0x....'....        BL       iotx_report_id
   \       0x28   0xA904             ADD      R1,SP,#+16
   \       0x2A   0x9103             STR      R1,[SP, #+12]
   \       0x2C   0x....'....        LDR.W    R1,??DataTable17_27
   \       0x30   0x9102             STR      R1,[SP, #+8]
   \       0x32   0x9601             STR      R6,[SP, #+4]
   \       0x34   0x9500             STR      R5,[SP, #+0]
   \       0x36   0x....'....        LDR.W    R3,??DataTable17_28
   \       0x3A   0x....'....        LDR.W    R2,??DataTable17_1
   \       0x3E   0x4621             MOV      R1,R4
   \       0x40   0x....'....        BL       _dm_mgr_upstream_request_assemble
   \       0x44   0x2800             CMP      R0,#+0
   \       0x46   0xD002             BEQ.N    ??dm_mgr_upstream_thing_dsltemplate_get_2
   1387                  return FAIL_RETURN;
   \       0x48   0xF04F 0x30FF      MOV      R0,#-1
   \       0x4C   0xE00C             B.N      ??dm_mgr_upstream_thing_dsltemplate_get_1
   1388              }
   1389          
   1390              /* Send Message To Cloud */
   1391              res = dm_msg_request(DM_MSG_DEST_CLOUD, &request);
   \                     ??dm_mgr_upstream_thing_dsltemplate_get_2: (+1)
   \       0x4E   0xA904             ADD      R1,SP,#+16
   \       0x50   0x2001             MOVS     R0,#+1
   \       0x52   0x....'....        BL       dm_msg_request
   1392          #if !defined(DM_MESSAGE_CACHE_DISABLED)
   1393              if (res == SUCCESS_RETURN) {
   \       0x56   0x2800             CMP      R0,#+0
   \       0x58   0xD106             BNE.N    ??dm_mgr_upstream_thing_dsltemplate_get_1
   1394                  dm_msg_cache_insert(request.msgid, request.devid, IOTX_DM_EVENT_DSLTEMPLATE_GET_REPLY, NULL);
   \       0x5A   0x2300             MOVS     R3,#+0
   \       0x5C   0x2224             MOVS     R2,#+36
   \       0x5E   0x9905             LDR      R1,[SP, #+20]
   \       0x60   0x9804             LDR      R0,[SP, #+16]
   \       0x62   0x....'....        BL       dm_msg_cache_insert
   1395                  res = request.msgid;
   \       0x66   0x9804             LDR      R0,[SP, #+16]
   1396              }
   1397          #endif
   1398              return res;
   \                     ??dm_mgr_upstream_thing_dsltemplate_get_1: (+1)
   \       0x68   0xB01A             ADD      SP,SP,#+104
   \       0x6A   0xBD70             POP      {R4-R6,PC}       ;; return
   1399          }
   1400          

   \                                 In section .text, align 2, keep-with-next
   1401          int dm_mgr_upstream_thing_dynamictsl_get(_IN_ int devid)
   1402          {
   \                     dm_mgr_upstream_thing_dynamictsl_get: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0xB09A             SUB      SP,SP,#+104
   \        0x4   0x4604             MOV      R4,R0
   1403              int res = 0;
   1404              char *params = "{\"nodes\":[\"type\",\"identifier\"],\"addDefault\":false}";
   \        0x6   0x....'....        LDR.W    R5,??DataTable17_29
   1405              int params_len = strlen(params);
   \        0xA   0x4628             MOV      R0,R5
   \        0xC   0x....'....        BL       strlen
   \       0x10   0x4606             MOV      R6,R0
   1406              dm_msg_request_t request;
   1407          
   1408              if (devid < 0) {
   \       0x12   0x2C00             CMP      R4,#+0
   \       0x14   0xD502             BPL.N    ??dm_mgr_upstream_thing_dynamictsl_get_0
   1409                  return DM_INVALID_PARAMETER;
   \       0x16   0xF06F 0x0001      MVN      R0,#+1
   \       0x1A   0xE029             B.N      ??dm_mgr_upstream_thing_dynamictsl_get_1
   1410              }
   1411          
   1412              memset(&request, 0, sizeof(dm_msg_request_t));
   \                     ??dm_mgr_upstream_thing_dynamictsl_get_0: (+1)
   \       0x1C   0x2200             MOVS     R2,#+0
   \       0x1E   0x2158             MOVS     R1,#+88
   \       0x20   0xA804             ADD      R0,SP,#+16
   \       0x22   0x....'....        BL       __aeabi_memset4
   1413              res = _dm_mgr_upstream_request_assemble(iotx_report_id(), devid, DM_URI_SYS_PREFIX, DM_URI_THING_DYNAMICTSL_GET,
   1414                                                      params, params_len, "thing.dynamicTsl.get", &request);
   1415              if (res != SUCCESS_RETURN) {
   \       0x26   0x....'....        BL       iotx_report_id
   \       0x2A   0xA904             ADD      R1,SP,#+16
   \       0x2C   0x9103             STR      R1,[SP, #+12]
   \       0x2E   0x....'....        LDR.W    R1,??DataTable17_30
   \       0x32   0x9102             STR      R1,[SP, #+8]
   \       0x34   0x9601             STR      R6,[SP, #+4]
   \       0x36   0x9500             STR      R5,[SP, #+0]
   \       0x38   0x....'....        LDR.W    R3,??DataTable17_31
   \       0x3C   0x....'....        LDR.W    R2,??DataTable17_1
   \       0x40   0x4621             MOV      R1,R4
   \       0x42   0x....'....        BL       _dm_mgr_upstream_request_assemble
   \       0x46   0x2800             CMP      R0,#+0
   \       0x48   0xD002             BEQ.N    ??dm_mgr_upstream_thing_dynamictsl_get_2
   1416                  return FAIL_RETURN;
   \       0x4A   0xF04F 0x30FF      MOV      R0,#-1
   \       0x4E   0xE00F             B.N      ??dm_mgr_upstream_thing_dynamictsl_get_1
   1417              }
   1418          
   1419              /* Callback */
   1420              request.callback = dm_client_thing_dynamictsl_get_reply;
   \                     ??dm_mgr_upstream_thing_dynamictsl_get_2: (+1)
   \       0x50   0x....'....        LDR.W    R0,??DataTable17_32
   \       0x54   0x9019             STR      R0,[SP, #+100]
   1421          
   1422              /* Send Message To Cloud */
   1423              res = dm_msg_request(DM_MSG_DEST_CLOUD, &request);
   \       0x56   0xA904             ADD      R1,SP,#+16
   \       0x58   0x2001             MOVS     R0,#+1
   \       0x5A   0x....'....        BL       dm_msg_request
   1424          #if !defined(DM_MESSAGE_CACHE_DISABLED)
   1425              if (res == SUCCESS_RETURN) {
   \       0x5E   0x2800             CMP      R0,#+0
   \       0x60   0xD106             BNE.N    ??dm_mgr_upstream_thing_dynamictsl_get_1
   1426                  dm_msg_cache_insert(request.msgid, request.devid, IOTX_DM_EVENT_DSLTEMPLATE_GET_REPLY, NULL);
   \       0x62   0x2300             MOVS     R3,#+0
   \       0x64   0x2224             MOVS     R2,#+36
   \       0x66   0x9905             LDR      R1,[SP, #+20]
   \       0x68   0x9804             LDR      R0,[SP, #+16]
   \       0x6A   0x....'....        BL       dm_msg_cache_insert
   1427                  res = request.msgid;
   \       0x6E   0x9804             LDR      R0,[SP, #+16]
   1428              }
   1429          #endif
   1430              return res;
   \                     ??dm_mgr_upstream_thing_dynamictsl_get_1: (+1)
   \       0x70   0xB01A             ADD      SP,SP,#+104
   \       0x72   0xBD70             POP      {R4-R6,PC}       ;; return
   1431          }
   1432          

   \                                 In section .text, align 2, keep-with-next
   1433          int dm_mgr_upstream_ntp_request(void)
   1434          {
   \                     dm_mgr_upstream_ntp_request: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0xB098             SUB      SP,SP,#+96
   1435              int res = 0;
   1436              const char *ntp_request_fmt = "{\"deviceSendTime\":\"1234\"}";
   \        0x4   0x....'....        LDR.W    R4,??DataTable17_33
   1437              char /* *cloud_payload = NULL, */ *uri = NULL;
   \        0x8   0x2000             MOVS     R0,#+0
   \        0xA   0x9001             STR      R0,[SP, #+4]
   1438              dm_msg_request_t request;
   1439          
   1440              memset(&request, 0, sizeof(dm_msg_request_t));
   \        0xC   0x4602             MOV      R2,R0
   \        0xE   0x2158             MOVS     R1,#+88
   \       0x10   0xA802             ADD      R0,SP,#+8
   \       0x12   0x....'....        BL       __aeabi_memset4
   1441              request.service_prefix = DM_URI_EXT_NTP_PREFIX;
   \       0x16   0x....'....        LDR.W    R0,??DataTable17_34
   \       0x1A   0x9004             STR      R0,[SP, #+16]
   1442              request.service_name = DM_URI_NTP_REQUEST;
   \       0x1C   0x....'....        LDR.W    R0,??DataTable17_35
   \       0x20   0x9005             STR      R0,[SP, #+20]
   1443              HAL_GetProductKey(request.product_key);
   \       0x22   0xA806             ADD      R0,SP,#+24
   \       0x24   0x....'....        BL       HAL_GetProductKey
   1444              HAL_GetDeviceName(request.device_name);
   \       0x28   0xF10D 0x002D      ADD      R0,SP,#+45
   \       0x2C   0x....'....        BL       HAL_GetDeviceName
   1445          
   1446              /* Request URI */
   1447              res = dm_utils_service_name(request.service_prefix, request.service_name,
   1448                                          request.product_key, request.device_name, &uri);
   1449              if (res != SUCCESS_RETURN) {
   \       0x30   0xA801             ADD      R0,SP,#+4
   \       0x32   0x9000             STR      R0,[SP, #+0]
   \       0x34   0xF10D 0x032D      ADD      R3,SP,#+45
   \       0x38   0xAA06             ADD      R2,SP,#+24
   \       0x3A   0x9905             LDR      R1,[SP, #+20]
   \       0x3C   0x9804             LDR      R0,[SP, #+16]
   \       0x3E   0x....'....        BL       dm_utils_service_name
   \       0x42   0x2800             CMP      R0,#+0
   \       0x44   0xD002             BEQ.N    ??dm_mgr_upstream_ntp_request_0
   1450                  return FAIL_RETURN;
   \       0x46   0xF04F 0x30FF      MOV      R0,#-1
   \       0x4A   0xE014             B.N      ??dm_mgr_upstream_ntp_request_1
   1451              }
   1452          
   1453              res = dm_client_publish(uri, (unsigned char *)ntp_request_fmt, strlen(ntp_request_fmt), dm_client_ntp_response);
   1454              if (res != SUCCESS_RETURN) {
   \                     ??dm_mgr_upstream_ntp_request_0: (+1)
   \       0x4C   0x4620             MOV      R0,R4
   \       0x4E   0x....'....        BL       strlen
   \       0x52   0x4602             MOV      R2,R0
   \       0x54   0x....'....        LDR.W    R3,??DataTable17_36
   \       0x58   0x4621             MOV      R1,R4
   \       0x5A   0x9801             LDR      R0,[SP, #+4]
   \       0x5C   0x....'....        BL       dm_client_publish
   \       0x60   0x2800             CMP      R0,#+0
   \       0x62   0x9801             LDR      R0,[SP, #+4]
   \       0x64   0xD004             BEQ.N    ??dm_mgr_upstream_ntp_request_2
   1455                  DM_free(uri); /* DM_free(cloud_payload); */
   \       0x66   0x....'....        BL       HAL_Free
   1456                  return FAIL_RETURN;
   \       0x6A   0xF04F 0x30FF      MOV      R0,#-1
   \       0x6E   0xE002             B.N      ??dm_mgr_upstream_ntp_request_1
   1457              }
   1458          
   1459              DM_free(uri); /* DM_free(cloud_payload); */
   \                     ??dm_mgr_upstream_ntp_request_2: (+1)
   \       0x70   0x....'....        BL       HAL_Free
   1460              return SUCCESS_RETURN;
   \       0x74   0x2000             MOVS     R0,#+0
   \                     ??dm_mgr_upstream_ntp_request_1: (+1)
   \       0x76   0xB018             ADD      SP,SP,#+96
   \       0x78   0xBD10             POP      {R4,PC}          ;; return
   1461          }
   1462          

   \                                 In section .text, align 2, keep-with-next
   1463          static int _dm_mgr_upstream_response_assemble(_IN_ int devid, _IN_ char *msgid, _IN_ int msgid_len,
   1464                  _IN_ const char *prefix,
   1465                  _IN_ const char *service_name, _IN_ int code, _OU_ dm_msg_request_payload_t *request, _OU_ dm_msg_response_t *response)
   1466          {
   \                     _dm_mgr_upstream_response_assemble: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x460C             MOV      R4,R1
   \        0x4   0x4615             MOV      R5,R2
   1467              int res = 0;
   1468              dm_mgr_dev_node_t *node = NULL;
   \        0x6   0x2100             MOVS     R1,#+0
   \        0x8   0x9100             STR      R1,[SP, #+0]
   1469          
   1470              res = _dm_mgr_search_dev_by_devid(devid, &node);
   1471              if (res != SUCCESS_RETURN) {
   \        0xA   0x4669             MOV      R1,SP
   \        0xC   0x....'....        BL       _dm_mgr_search_dev_by_devid
   \       0x10   0x2800             CMP      R0,#+0
   \       0x12   0xD002             BEQ.N    ??_dm_mgr_upstream_response_assemble_0
   1472                  return FAIL_RETURN;
   \       0x14   0xF04F 0x30FF      MOV      R0,#-1
   \       0x18   0xBDF2             POP      {R1,R4-R7,PC}
   1473              }
   \                     ??_dm_mgr_upstream_response_assemble_0: (+1)
   \       0x1A   0x9E09             LDR      R6,[SP, #+36]
   \       0x1C   0x9908             LDR      R1,[SP, #+32]
   \       0x1E   0x9F07             LDR      R7,[SP, #+28]
   \       0x20   0x9806             LDR      R0,[SP, #+24]
   1474          
   1475              request->id.value = msgid;
   \       0x22   0x604C             STR      R4,[R1, #+4]
   1476              request->id.value_length = msgid_len;
   \       0x24   0x608D             STR      R5,[R1, #+8]
   1477          
   1478              response->service_prefix = DM_URI_SYS_PREFIX;
   \       0x26   0x....             LDR.N    R1,??DataTable17_1
   \       0x28   0x6031             STR      R1,[R6, #+0]
   1479              response->service_name = service_name;
   \       0x2A   0x6070             STR      R0,[R6, #+4]
   1480              memcpy(response->product_key, node->product_key, strlen(node->product_key));
   \       0x2C   0x9800             LDR      R0,[SP, #+0]
   \       0x2E   0x3008             ADDS     R0,R0,#+8
   \       0x30   0x....'....        BL       strlen
   \       0x34   0x4602             MOV      R2,R0
   \       0x36   0x9800             LDR      R0,[SP, #+0]
   \       0x38   0xF100 0x0108      ADD      R1,R0,#+8
   \       0x3C   0xF106 0x0008      ADD      R0,R6,#+8
   \       0x40   0x....'....        BL       __aeabi_memcpy4
   1481              memcpy(response->device_name, node->device_name, strlen(node->device_name));
   \       0x44   0x9800             LDR      R0,[SP, #+0]
   \       0x46   0x301D             ADDS     R0,R0,#+29
   \       0x48   0x....'....        BL       strlen
   \       0x4C   0x4602             MOV      R2,R0
   \       0x4E   0x9800             LDR      R0,[SP, #+0]
   \       0x50   0xF100 0x011D      ADD      R1,R0,#+29
   \       0x54   0xF106 0x001D      ADD      R0,R6,#+29
   \       0x58   0x....'....        BL       __aeabi_memcpy
   1482              response->code = code;
                                    ^
Warning[Pe188]: enumerated type mixed with another type
   \       0x5C   0x6437             STR      R7,[R6, #+64]
   1483          
   1484              return SUCCESS_RETURN;
   \       0x5E   0x2000             MOVS     R0,#+0
   \       0x60   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
   1485          }
   1486          

   \                                 In section .text, align 2, keep-with-next
   1487          int dm_mgr_upstream_thing_service_response(_IN_ int devid, _IN_ char *msgid, _IN_ int msgid_len,
   1488                  _IN_ iotx_dm_error_code_t code,
   1489                  _IN_ char *identifier, _IN_ int identifier_len, _IN_ char *payload, _IN_ int payload_len, void *ctx)
   1490          {
   \                     dm_mgr_upstream_thing_service_response: (+1)
   \        0x0   0xE92D 0x4FF1      PUSH     {R0,R4-R11,LR}
   \        0x4   0xB0B8             SUB      SP,SP,#+224
   \        0x6   0x460C             MOV      R4,R1
   \        0x8   0x4615             MOV      R5,R2
   \        0xA   0x461F             MOV      R7,R3
   1491              int res = 0, service_name_len = 0;
   1492              char *service_name = NULL;
   1493              dm_msg_request_payload_t request;
   1494              dm_msg_response_t response;
   1495          
   1496              memset(&request, 0, sizeof(dm_msg_request_payload_t));
   \        0xC   0x2200             MOVS     R2,#+0
   \        0xE   0x2180             MOVS     R1,#+128
   \       0x10   0xA818             ADD      R0,SP,#+96
   \       0x12   0x....'....        BL       __aeabi_memset4
   1497              memset(&response, 0, sizeof(dm_msg_response_t));
   \       0x16   0x2200             MOVS     R2,#+0
   \       0x18   0x2144             MOVS     R1,#+68
   \       0x1A   0xA806             ADD      R0,SP,#+24
   \       0x1C   0x....'....        BL       __aeabi_memset4
   1498          
   1499              if (devid < 0 || msgid == NULL || msgid_len <= 0 || identifier == NULL || identifier_len <= 0 ||
   1500                  payload == NULL || payload_len <= 0) {
   \       0x20   0x9838             LDR      R0,[SP, #+224]
   \       0x22   0x2800             CMP      R0,#+0
   \       0x24   0xD417             BMI.N    ??dm_mgr_upstream_thing_service_response_0
   \       0x26   0x9405             STR      R4,[SP, #+20]
   \       0x28   0x4620             MOV      R0,R4
   \       0x2A   0x2800             CMP      R0,#+0
   \       0x2C   0xD013             BEQ.N    ??dm_mgr_upstream_thing_service_response_0
   \       0x2E   0x9504             STR      R5,[SP, #+16]
   \       0x30   0x4628             MOV      R0,R5
   \       0x32   0x2801             CMP      R0,#+1
   \       0x34   0xDB0F             BLT.N    ??dm_mgr_upstream_thing_service_response_0
   \       0x36   0x9E42             LDR      R6,[SP, #+264]
   \       0x38   0x2E00             CMP      R6,#+0
   \       0x3A   0xD00C             BEQ.N    ??dm_mgr_upstream_thing_service_response_0
   \       0x3C   0xF8DD 0x910C      LDR      R9,[SP, #+268]
   \       0x40   0xF1B9 0x0F01      CMP      R9,#+1
   \       0x44   0xDB07             BLT.N    ??dm_mgr_upstream_thing_service_response_0
   \       0x46   0x9C44             LDR      R4,[SP, #+272]
   \       0x48   0x2C00             CMP      R4,#+0
   \       0x4A   0xD004             BEQ.N    ??dm_mgr_upstream_thing_service_response_0
   \       0x4C   0xF8DD 0x8114      LDR      R8,[SP, #+276]
   \       0x50   0xF1B8 0x0F01      CMP      R8,#+1
   \       0x54   0xDA02             BGE.N    ??dm_mgr_upstream_thing_service_response_1
   1501                  return DM_INVALID_PARAMETER;
   \                     ??dm_mgr_upstream_thing_service_response_0: (+1)
   \       0x56   0xF06F 0x0001      MVN      R0,#+1
   \       0x5A   0xE047             B.N      ??dm_mgr_upstream_thing_service_response_2
   1502              }
   1503          
   1504              /* Service Name */
   1505              service_name_len = strlen(DM_URI_THING_SERVICE_RESPONSE) + identifier_len + 1;
   \                     ??dm_mgr_upstream_thing_service_response_1: (+1)
   \       0x5C   0x....'....        LDR.W    R10,??DataTable17_37
   \       0x60   0x4650             MOV      R0,R10
   \       0x62   0x....'....        BL       strlen
   \       0x66   0x4683             MOV      R11,R0
   \       0x68   0x44CB             ADD      R11,R9,R11
   \       0x6A   0xF10B 0x0B01      ADD      R11,R11,#+1
   1506              service_name = DM_malloc(service_name_len);
   \       0x6E   0x4658             MOV      R0,R11
   \       0x70   0x....'....        BL       HAL_Malloc
   \       0x74   0x0005             MOVS     R5,R0
   1507              if (service_name == NULL) {
   \       0x76   0xD102             BNE.N    ??dm_mgr_upstream_thing_service_response_3
   1508                  return DM_MEMORY_NOT_ENOUGH;
   \       0x78   0xF06F 0x0002      MVN      R0,#+2
   \       0x7C   0xE036             B.N      ??dm_mgr_upstream_thing_service_response_2
   1509              }
   1510              memset(service_name, 0, service_name_len);
   \                     ??dm_mgr_upstream_thing_service_response_3: (+1)
   \       0x7E   0x2200             MOVS     R2,#+0
   \       0x80   0x4659             MOV      R1,R11
   \       0x82   0x....'....        BL       __aeabi_memset
   1511              HAL_Snprintf(service_name, service_name_len, DM_URI_THING_SERVICE_RESPONSE, identifier_len, identifier);
   \       0x86   0x9600             STR      R6,[SP, #+0]
   \       0x88   0x464B             MOV      R3,R9
   \       0x8A   0x4652             MOV      R2,R10
   \       0x8C   0x4659             MOV      R1,R11
   \       0x8E   0x4628             MOV      R0,R5
   \       0x90   0x....'....        BL       HAL_Snprintf
   1512          
   1513              res = _dm_mgr_upstream_response_assemble(devid, msgid, msgid_len, DM_URI_SYS_PREFIX, service_name, code, &request,
   1514                      &response);
   1515              if (res != SUCCESS_RETURN) {
   \       0x94   0xA806             ADD      R0,SP,#+24
   \       0x96   0x9003             STR      R0,[SP, #+12]
   \       0x98   0xA818             ADD      R0,SP,#+96
   \       0x9A   0x9002             STR      R0,[SP, #+8]
   \       0x9C   0x9701             STR      R7,[SP, #+4]
   \       0x9E   0x9500             STR      R5,[SP, #+0]
   \       0xA0   0x....             LDR.N    R3,??DataTable17_1
   \       0xA2   0x9A04             LDR      R2,[SP, #+16]
   \       0xA4   0x9905             LDR      R1,[SP, #+20]
   \       0xA6   0x9838             LDR      R0,[SP, #+224]
   \       0xA8   0x....'....        BL       _dm_mgr_upstream_response_assemble
   \       0xAC   0x2800             CMP      R0,#+0
   \       0xAE   0xD002             BEQ.N    ??dm_mgr_upstream_thing_service_response_4
   1516                  return FAIL_RETURN;
   \       0xB0   0xF04F 0x30FF      MOV      R0,#-1
   \       0xB4   0xE01A             B.N      ??dm_mgr_upstream_thing_service_response_2
   1517              }
   \                     ??dm_mgr_upstream_thing_service_response_4: (+1)
   \       0xB6   0x9846             LDR      R0,[SP, #+280]
   1518          
   1519              dm_log_debug("Current Service Name: %s", service_name);
   1520              if (ctx != NULL) {
   \       0xB8   0x2800             CMP      R0,#+0
   \       0xBA   0xD009             BEQ.N    ??dm_mgr_upstream_thing_service_response_5
   1521                  dm_msg_response(DM_MSG_DEST_LOCAL, &request, &response, payload, payload_len, ctx);
   \       0xBC   0x9001             STR      R0,[SP, #+4]
   \       0xBE   0xF8CD 0x8000      STR      R8,[SP, #+0]
   \       0xC2   0x4623             MOV      R3,R4
   \       0xC4   0xAA06             ADD      R2,SP,#+24
   \       0xC6   0xA918             ADD      R1,SP,#+96
   \       0xC8   0x2002             MOVS     R0,#+2
   \       0xCA   0x....'....        BL       dm_msg_response
   \       0xCE   0xE009             B.N      ??dm_mgr_upstream_thing_service_response_6
   1522              } else {
   1523                  dm_msg_response(DM_MSG_DEST_CLOUD, &request, &response, payload, payload_len, ctx);
   \                     ??dm_mgr_upstream_thing_service_response_5: (+1)
   \       0xD0   0x2000             MOVS     R0,#+0
   \       0xD2   0x9001             STR      R0,[SP, #+4]
   \       0xD4   0xF8CD 0x8000      STR      R8,[SP, #+0]
   \       0xD8   0x4623             MOV      R3,R4
   \       0xDA   0xAA06             ADD      R2,SP,#+24
   \       0xDC   0xA918             ADD      R1,SP,#+96
   \       0xDE   0x2001             MOVS     R0,#+1
   \       0xE0   0x....'....        BL       dm_msg_response
   1524              }
   1525          
   1526              DM_free(service_name);
   \                     ??dm_mgr_upstream_thing_service_response_6: (+1)
   \       0xE4   0x4628             MOV      R0,R5
   \       0xE6   0x....'....        BL       HAL_Free
   1527              return SUCCESS_RETURN;
   \       0xEA   0x2000             MOVS     R0,#+0
   \                     ??dm_mgr_upstream_thing_service_response_2: (+1)
   \       0xEC   0xB039             ADD      SP,SP,#+228
   \       0xEE   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   1528          }
   1529          

   \                                 In section .text, align 2, keep-with-next
   1530          int dm_mgr_upstream_thing_property_get_response(_IN_ int devid, _IN_ char *msgid, _IN_ int msgid_len,
   1531                  _IN_ iotx_dm_error_code_t code,
   1532                  _IN_ char *payload, _IN_ int payload_len, _IN_ void *ctx)
   1533          {
   \                     dm_mgr_upstream_thing_property_get_response: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \        0x4   0xB0B6             SUB      SP,SP,#+216
   \        0x6   0x4607             MOV      R7,R0
   \        0x8   0x460E             MOV      R6,R1
   \        0xA   0x4693             MOV      R11,R2
   \        0xC   0x4698             MOV      R8,R3
   1534              int res = 0;
   1535              dm_msg_request_payload_t request;
   1536              dm_msg_response_t response;
   1537              const char *reply_service_name = NULL;
   1538              dm_msg_dest_type_t reply_msg_type;
   1539          #ifdef ALCS_ENABLED
   1540              dm_server_alcs_context_t *alcs_context = NULL;
   1541          #endif
   1542          
   1543              if (devid < 0 || msgid == NULL || msgid_len <= 0 ||
   1544                  payload == NULL || payload_len <= 0) {
   \        0xE   0x2F00             CMP      R7,#+0
   \       0x10   0xD40C             BMI.N    ??dm_mgr_upstream_thing_property_get_response_0
   \       0x12   0x2E00             CMP      R6,#+0
   \       0x14   0xD00A             BEQ.N    ??dm_mgr_upstream_thing_property_get_response_0
   \       0x16   0xF1BB 0x0F01      CMP      R11,#+1
   \       0x1A   0xDB07             BLT.N    ??dm_mgr_upstream_thing_property_get_response_0
   \       0x1C   0x9C40             LDR      R4,[SP, #+256]
   \       0x1E   0x2C00             CMP      R4,#+0
   \       0x20   0xD004             BEQ.N    ??dm_mgr_upstream_thing_property_get_response_0
   \       0x22   0xF8DD 0x9104      LDR      R9,[SP, #+260]
   \       0x26   0xF1B9 0x0F01      CMP      R9,#+1
   \       0x2A   0xDA02             BGE.N    ??dm_mgr_upstream_thing_property_get_response_1
   1545                  return DM_INVALID_PARAMETER;
   \                     ??dm_mgr_upstream_thing_property_get_response_0: (+1)
   \       0x2C   0xF06F 0x0001      MVN      R0,#+1
   \       0x30   0xE02E             B.N      ??dm_mgr_upstream_thing_property_get_response_2
   1546              }
   \                     ??dm_mgr_upstream_thing_property_get_response_1: (+1)
   \       0x32   0x9D42             LDR      R5,[SP, #+264]
   1547          
   1548              memset(&request, 0, sizeof(dm_msg_request_payload_t));
   \       0x34   0x2200             MOVS     R2,#+0
   \       0x36   0x2180             MOVS     R1,#+128
   \       0x38   0xA816             ADD      R0,SP,#+88
   \       0x3A   0x....'....        BL       __aeabi_memset4
   1549              memset(&response, 0, sizeof(dm_msg_response_t));
   \       0x3E   0x2200             MOVS     R2,#+0
   \       0x40   0x2144             MOVS     R1,#+68
   \       0x42   0xA804             ADD      R0,SP,#+16
   \       0x44   0x....'....        BL       __aeabi_memset4
   1550          
   1551              /* Send Property Get Response Message To Local */
   1552              reply_service_name = DM_URI_THING_SERVICE_PROPERTY_GET;
   \       0x48   0x....             LDR.N    R0,??DataTable17_38
   1553              reply_msg_type = DM_MSG_DEST_LOCAL;
   \       0x4A   0xF04F 0x0A02      MOV      R10,#+2
   1554          
   1555              /* Send Property Get Response Message To Cloud */
   1556              if (NULL == ctx) {
   \       0x4E   0x2D00             CMP      R5,#+0
   \       0x50   0xD102             BNE.N    ??dm_mgr_upstream_thing_property_get_response_3
   1557                  reply_service_name = DM_URI_THING_SERVICE_PROPERTY_GET_REPLY;
   \       0x52   0x....             LDR.N    R0,??DataTable17_39
   1558                  reply_msg_type = DM_MSG_DEST_CLOUD;
   \       0x54   0xF04F 0x0A01      MOV      R10,#+1
   1559              }
   1560          
   1561              res = _dm_mgr_upstream_response_assemble(devid, msgid, msgid_len, DM_URI_SYS_PREFIX,
   1562                      reply_service_name, code, &request, &response);
   1563              if (res != SUCCESS_RETURN) {
   \                     ??dm_mgr_upstream_thing_property_get_response_3: (+1)
   \       0x58   0xA904             ADD      R1,SP,#+16
   \       0x5A   0x9103             STR      R1,[SP, #+12]
   \       0x5C   0xA916             ADD      R1,SP,#+88
   \       0x5E   0x9102             STR      R1,[SP, #+8]
   \       0x60   0xF8CD 0x8004      STR      R8,[SP, #+4]
   \       0x64   0x9000             STR      R0,[SP, #+0]
   \       0x66   0x....             LDR.N    R3,??DataTable17_1
   \       0x68   0x465A             MOV      R2,R11
   \       0x6A   0x4631             MOV      R1,R6
   \       0x6C   0x4638             MOV      R0,R7
   \       0x6E   0x....'....        BL       _dm_mgr_upstream_response_assemble
   \       0x72   0x2800             CMP      R0,#+0
   \       0x74   0xD002             BEQ.N    ??dm_mgr_upstream_thing_property_get_response_4
   1564                  return FAIL_RETURN;
   \       0x76   0xF04F 0x30FF      MOV      R0,#-1
   \       0x7A   0xE009             B.N      ??dm_mgr_upstream_thing_property_get_response_2
   1565              }
   1566              dm_log_debug("Current Service Name: %s", reply_service_name);
   1567              dm_msg_response(reply_msg_type, &request, &response, payload, payload_len, ctx);
   \                     ??dm_mgr_upstream_thing_property_get_response_4: (+1)
   \       0x7C   0x9501             STR      R5,[SP, #+4]
   \       0x7E   0xF8CD 0x9000      STR      R9,[SP, #+0]
   \       0x82   0x4623             MOV      R3,R4
   \       0x84   0xAA04             ADD      R2,SP,#+16
   \       0x86   0xA916             ADD      R1,SP,#+88
   \       0x88   0x4650             MOV      R0,R10
   \       0x8A   0x....'....        BL       dm_msg_response
   1568          
   1569          #ifdef ALCS_ENABLED
   1570              alcs_context = (dm_server_alcs_context_t *)ctx;
   1571          
   1572              if (alcs_context) {
   1573                  DM_free(alcs_context->ip);
   1574                  DM_free(alcs_context->token);
   1575                  DM_free(alcs_context);
   1576              }
   1577          #endif
   1578          
   1579              return SUCCESS_RETURN;
   \       0x8E   0x2000             MOVS     R0,#+0
   \                     ??dm_mgr_upstream_thing_property_get_response_2: (+1)
   \       0x90   0xB037             ADD      SP,SP,#+220
   \       0x92   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   1580          }
   1581          

   \                                 In section .text, align 2, keep-with-next
   1582          int dm_mgr_upstream_rrpc_response(_IN_ int devid, _IN_ char *msgid, _IN_ int msgid_len, _IN_ iotx_dm_error_code_t code,
   1583                                            _IN_ char *rrpcid, _IN_ int rrpcid_len, _IN_ char *payload, _IN_ int payload_len)
   1584          {
   \                     dm_mgr_upstream_rrpc_response: (+1)
   \        0x0   0xE92D 0x4FF1      PUSH     {R0,R4-R11,LR}
   \        0x4   0xB0B8             SUB      SP,SP,#+224
   \        0x6   0x460C             MOV      R4,R1
   \        0x8   0x4615             MOV      R5,R2
   \        0xA   0x461F             MOV      R7,R3
   1585              int res = 0, service_name_len = 0;
   1586              const char *rrpc_response_service_name = "rrpc/response/%.*s";
   \        0xC   0x....'....        LDR.W    R8,??DataTable17_40
   1587              char *service_name = NULL;
   1588              dm_msg_request_payload_t request;
   1589              dm_msg_response_t response;
   1590          
   1591              memset(&request, 0, sizeof(dm_msg_request_payload_t));
   \       0x10   0x2200             MOVS     R2,#+0
   \       0x12   0x2180             MOVS     R1,#+128
   \       0x14   0xA818             ADD      R0,SP,#+96
   \       0x16   0x....'....        BL       __aeabi_memset4
   1592              memset(&response, 0, sizeof(dm_msg_response_t));
   \       0x1A   0x2200             MOVS     R2,#+0
   \       0x1C   0x2144             MOVS     R1,#+68
   \       0x1E   0xA806             ADD      R0,SP,#+24
   \       0x20   0x....'....        BL       __aeabi_memset4
   1593          
   1594              if (devid < 0 || msgid == NULL || msgid_len <= 0 ||
   1595                  rrpcid == NULL || rrpcid_len <= 0 || payload == NULL || payload_len <= 0) {
   \       0x24   0x9838             LDR      R0,[SP, #+224]
   \       0x26   0x2800             CMP      R0,#+0
   \       0x28   0xD417             BMI.N    ??dm_mgr_upstream_rrpc_response_0
   \       0x2A   0x9405             STR      R4,[SP, #+20]
   \       0x2C   0x4620             MOV      R0,R4
   \       0x2E   0x2800             CMP      R0,#+0
   \       0x30   0xD013             BEQ.N    ??dm_mgr_upstream_rrpc_response_0
   \       0x32   0x9504             STR      R5,[SP, #+16]
   \       0x34   0x4628             MOV      R0,R5
   \       0x36   0x2801             CMP      R0,#+1
   \       0x38   0xDB0F             BLT.N    ??dm_mgr_upstream_rrpc_response_0
   \       0x3A   0x9C42             LDR      R4,[SP, #+264]
   \       0x3C   0x2C00             CMP      R4,#+0
   \       0x3E   0xD00C             BEQ.N    ??dm_mgr_upstream_rrpc_response_0
   \       0x40   0xF8DD 0x910C      LDR      R9,[SP, #+268]
   \       0x44   0xF1B9 0x0F01      CMP      R9,#+1
   \       0x48   0xDB07             BLT.N    ??dm_mgr_upstream_rrpc_response_0
   \       0x4A   0x9D44             LDR      R5,[SP, #+272]
   \       0x4C   0x2D00             CMP      R5,#+0
   \       0x4E   0xD004             BEQ.N    ??dm_mgr_upstream_rrpc_response_0
   \       0x50   0xF8DD 0xA114      LDR      R10,[SP, #+276]
   \       0x54   0xF1BA 0x0F01      CMP      R10,#+1
   \       0x58   0xDA02             BGE.N    ??dm_mgr_upstream_rrpc_response_1
   1596                  return DM_INVALID_PARAMETER;
   \                     ??dm_mgr_upstream_rrpc_response_0: (+1)
   \       0x5A   0xF06F 0x0001      MVN      R0,#+1
   \       0x5E   0xE038             B.N      ??dm_mgr_upstream_rrpc_response_2
   1597              }
   1598          
   1599              /* Service Name */
   1600              service_name_len = strlen(rrpc_response_service_name) + rrpcid_len + 1;
   \                     ??dm_mgr_upstream_rrpc_response_1: (+1)
   \       0x60   0x4640             MOV      R0,R8
   \       0x62   0x....'....        BL       strlen
   \       0x66   0x4683             MOV      R11,R0
   \       0x68   0x44CB             ADD      R11,R9,R11
   \       0x6A   0xF10B 0x0B01      ADD      R11,R11,#+1
   1601              service_name = DM_malloc(service_name_len);
   \       0x6E   0x4658             MOV      R0,R11
   \       0x70   0x....'....        BL       HAL_Malloc
   \       0x74   0x0006             MOVS     R6,R0
   1602              if (service_name == NULL) {
   \       0x76   0xD102             BNE.N    ??dm_mgr_upstream_rrpc_response_3
   1603                  return DM_MEMORY_NOT_ENOUGH;
   \       0x78   0xF06F 0x0002      MVN      R0,#+2
   \       0x7C   0xE029             B.N      ??dm_mgr_upstream_rrpc_response_2
   1604              }
   1605              memset(service_name, 0, service_name_len);
   \                     ??dm_mgr_upstream_rrpc_response_3: (+1)
   \       0x7E   0x2200             MOVS     R2,#+0
   \       0x80   0x4659             MOV      R1,R11
   \       0x82   0x....'....        BL       __aeabi_memset
   1606              HAL_Snprintf(service_name, service_name_len, rrpc_response_service_name, rrpcid_len, rrpcid);
   \       0x86   0x9400             STR      R4,[SP, #+0]
   \       0x88   0x464B             MOV      R3,R9
   \       0x8A   0x4642             MOV      R2,R8
   \       0x8C   0x4659             MOV      R1,R11
   \       0x8E   0x4630             MOV      R0,R6
   \       0x90   0x....'....        BL       HAL_Snprintf
   1607          
   1608              res = _dm_mgr_upstream_response_assemble(devid, msgid, msgid_len, DM_URI_SYS_PREFIX, service_name, code, &request,
   1609                      &response);
   1610              if (res != SUCCESS_RETURN) {
   \       0x94   0xA806             ADD      R0,SP,#+24
   \       0x96   0x9003             STR      R0,[SP, #+12]
   \       0x98   0xA818             ADD      R0,SP,#+96
   \       0x9A   0x9002             STR      R0,[SP, #+8]
   \       0x9C   0x9701             STR      R7,[SP, #+4]
   \       0x9E   0x9600             STR      R6,[SP, #+0]
   \       0xA0   0x....             LDR.N    R3,??DataTable17_1
   \       0xA2   0x9A04             LDR      R2,[SP, #+16]
   \       0xA4   0x9905             LDR      R1,[SP, #+20]
   \       0xA6   0x9838             LDR      R0,[SP, #+224]
   \       0xA8   0x....'....        BL       _dm_mgr_upstream_response_assemble
   \       0xAC   0x2800             CMP      R0,#+0
   \       0xAE   0xD002             BEQ.N    ??dm_mgr_upstream_rrpc_response_4
   1611                  return FAIL_RETURN;
   \       0xB0   0xF04F 0x30FF      MOV      R0,#-1
   \       0xB4   0xE00D             B.N      ??dm_mgr_upstream_rrpc_response_2
   1612              }
   1613          
   1614              dm_log_debug("Current Service Name: %s", service_name);
   1615              dm_msg_response(DM_MSG_DEST_ALL, &request, &response, payload, payload_len, NULL);
   \                     ??dm_mgr_upstream_rrpc_response_4: (+1)
   \       0xB6   0x2000             MOVS     R0,#+0
   \       0xB8   0x9001             STR      R0,[SP, #+4]
   \       0xBA   0xF8CD 0xA000      STR      R10,[SP, #+0]
   \       0xBE   0x462B             MOV      R3,R5
   \       0xC0   0xAA06             ADD      R2,SP,#+24
   \       0xC2   0xA918             ADD      R1,SP,#+96
   \       0xC4   0x2003             MOVS     R0,#+3
   \       0xC6   0x....'....        BL       dm_msg_response
   1616          
   1617              DM_free(service_name);
   \       0xCA   0x4630             MOV      R0,R6
   \       0xCC   0x....'....        BL       HAL_Free
   1618          
   1619              return SUCCESS_RETURN;
   \       0xD0   0x2000             MOVS     R0,#+0
   \                     ??dm_mgr_upstream_rrpc_response_2: (+1)
   \       0xD2   0xB039             ADD      SP,SP,#+228
   \       0xD4   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   1620          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \        0x0   0x....'....        DC32     g_dm_mgr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15:
   \        0x0   0x7B 0x7D          DC8      0x7B, 0x7D, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17:
   \        0x0   0x....'....        DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_1:
   \        0x0   0x....'....        DC32     DM_URI_SYS_PREFIX

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_2:
   \        0x0   0x....'....        DC32     DM_URI_THING_MODEL_UP_RAW

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_3:
   \        0x0   0x....'....        DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_4:
   \        0x0   0x....'....        DC32     `dm_mgr_upstream_thing_model_up_raw::__func__`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_5:
   \        0x0   0x....'....        DC32     dm_client_thing_model_up_raw_reply

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_6:
   \        0x0   0x....'....        DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_7:
   \        0x0   0x....'....        DC32     DM_URI_THING_PROPERTY_DESIRED_GET

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_8:
   \        0x0   0x....'....        DC32     dm_client_thing_property_desired_get_reply

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_9:
   \        0x0   0x....'....        DC32     ?_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_10:
   \        0x0   0x....'....        DC32     DM_URI_THING_PROPERTY_DESIRED_DELETE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_11:
   \        0x0   0x....'....        DC32     dm_client_thing_property_desired_delete_reply

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_12:
   \        0x0   0x....'....        DC32     ?_6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_13:
   \        0x0   0x....'....        DC32     DM_URI_THING_EVENT_PROPERTY_POST

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_14:
   \        0x0   0x....'....        DC32     dm_client_thing_event_post_reply

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_15:
   \        0x0   0x....'....        DC32     log_size

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_16:
   \        0x0   0x....'....        DC32     g_report_status

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_17:
   \        0x0   0x....'....        DC32     ?_7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_18:
   \        0x0   0x....'....        DC32     g_log_poll

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_19:
   \        0x0   0x....'....        DC32     DM_URI_THING_LOG_POST

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_20:
   \        0x0   0x....'....        DC32     DM_URI_THING_EVENT_POST

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_21:
   \        0x0   0x....'....        DC32     ?_8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_22:
   \        0x0   0x....'....        DC32     DM_URI_THING_DEVICEINFO_UPDATE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_23:
   \        0x0   0x....'....        DC32     dm_client_thing_deviceinfo_update_reply

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_24:
   \        0x0   0x....'....        DC32     ?_9

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_25:
   \        0x0   0x....'....        DC32     DM_URI_THING_DEVICEINFO_DELETE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_26:
   \        0x0   0x....'....        DC32     dm_client_thing_deviceinfo_delete_reply

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_27:
   \        0x0   0x....'....        DC32     ?_11

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_28:
   \        0x0   0x....'....        DC32     DM_URI_THING_DSLTEMPLATE_GET

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_29:
   \        0x0   0x....'....        DC32     ?_12

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_30:
   \        0x0   0x....'....        DC32     ?_13

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_31:
   \        0x0   0x....'....        DC32     DM_URI_THING_DYNAMICTSL_GET

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_32:
   \        0x0   0x....'....        DC32     dm_client_thing_dynamictsl_get_reply

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_33:
   \        0x0   0x....'....        DC32     ?_14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_34:
   \        0x0   0x....'....        DC32     DM_URI_EXT_NTP_PREFIX

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_35:
   \        0x0   0x....'....        DC32     DM_URI_NTP_REQUEST

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_36:
   \        0x0   0x....'....        DC32     dm_client_ntp_response

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_37:
   \        0x0   0x....'....        DC32     DM_URI_THING_SERVICE_RESPONSE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_38:
   \        0x0   0x....'....        DC32     DM_URI_THING_SERVICE_PROPERTY_GET

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_39:
   \        0x0   0x....'....        DC32     DM_URI_THING_SERVICE_PROPERTY_GET_REPLY

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_40:
   \        0x0   0x....'....        DC32     ?_15

   \                                 In section .rodata, align 4
   \        0x0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \       0x15   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \        0x0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \       0x17   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_2:
   \        0x0   0x7B 0x22          DC8 "{\"devid\":%d}"
   \              0x64 0x65    
   \              0x76 0x69    
   \              0x64 0x22    
   \              0x3A 0x25    
   \              0x64 0x7D    
   \              0x00         
   \        0xD   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_3:
   \        0x0   0x70 0x61          DC8 "payload"
   \              0x79 0x6C    
   \              0x6F 0x61    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     ?_4:
   \        0x0   0x74 0x68          DC8 "thing.property.desired.get"
   \              0x69 0x6E    
   \              0x67 0x2E    
   \              0x70 0x72    
   \              0x6F 0x70    
   \              0x65 0x72    
   \              0x74 0x79    
   \              0x2E 0x64    
   \              0x65 0x73    
   \              0x69 0x72    
   \              0x65 0x64    
   \              0x2E 0x67    
   \              0x65 0x74    
   \              0x00         
   \       0x1B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_5:
   \        0x0   0x74 0x68          DC8 "thing.property.desired.delete"
   \              0x69 0x6E    
   \              0x67 0x2E    
   \              0x70 0x72    
   \              0x6F 0x70    
   \              0x65 0x72    
   \              0x74 0x79    
   \              0x2E 0x64    
   \              0x65 0x73    
   \              0x69 0x72    
   \              0x65 0x64    
   \              0x2E 0x64    
   \              0x65 0x6C    
   \              0x65 0x74    
   \              0x65 0x00    
   \       0x1E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_6:
   \        0x0   0x74 0x68          DC8 "thing.event.property.post"
   \              0x69 0x6E    
   \              0x67 0x2E    
   \              0x65 0x76    
   \              0x65 0x6E    
   \              0x74 0x2E    
   \              0x70 0x72    
   \              0x6F 0x70    
   \              0x65 0x72    
   \              0x74 0x79    
   \              0x2E 0x70    
   \              0x6F 0x73    
   \              0x74 0x00    
   \       0x1A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_7:
   \        0x0   0x74 0x68          DC8 "thing.log.post"
   \              0x69 0x6E    
   \              0x67 0x2E    
   \              0x6C 0x6F    
   \              0x67 0x2E    
   \              0x70 0x6F    
   \              0x73 0x74    
   \              0x00         
   \        0xF   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_8:
   \        0x0   0x74 0x68          DC8 "thing.deviceinfo.update"
   \              0x69 0x6E    
   \              0x67 0x2E    
   \              0x64 0x65    
   \              0x76 0x69    
   \              0x63 0x65    
   \              0x69 0x6E    
   \              0x66 0x6F    
   \              0x2E 0x75    
   \              0x70 0x64    
   \              0x61 0x74    
   \              0x65 0x00    

   \                                 In section .rodata, align 4
   \                     ?_9:
   \        0x0   0x74 0x68          DC8 "thing.deviceinfo.delete"
   \              0x69 0x6E    
   \              0x67 0x2E    
   \              0x64 0x65    
   \              0x76 0x69    
   \              0x63 0x65    
   \              0x69 0x6E    
   \              0x66 0x6F    
   \              0x2E 0x64    
   \              0x65 0x6C    
   \              0x65 0x74    
   \              0x65 0x00    

   \                                 In section .rodata, align 4
   \        0x0   0x7B 0x7D          DC8 "{}"
   \              0x00         
   \        0x3   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_11:
   \        0x0   0x74 0x68          DC8 "thing.dsltemplate.get"
   \              0x69 0x6E    
   \              0x67 0x2E    
   \              0x64 0x73    
   \              0x6C 0x74    
   \              0x65 0x6D    
   \              0x70 0x6C    
   \              0x61 0x74    
   \              0x65 0x2E    
   \              0x67 0x65    
   \              0x74 0x00    
   \       0x16   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_12:
   \        0x0   0x7B 0x22          DC8 7BH, 22H, 6EH, 6FH, 64H, 65H, 73H, 22H
   \              0x6E 0x6F    
   \              0x64 0x65    
   \              0x73 0x22    
   \        0x8   0x3A 0x5B          DC8 3AH, 5BH, 22H, 74H, 79H, 70H, 65H, 22H
   \              0x22 0x74    
   \              0x79 0x70    
   \              0x65 0x22    
   \       0x10   0x2C 0x22          DC8 2CH, 22H, 69H, 64H, 65H, 6EH, 74H, 69H
   \              0x69 0x64    
   \              0x65 0x6E    
   \              0x74 0x69    
   \       0x18   0x66 0x69          DC8 66H, 69H, 65H, 72H, 22H, 5DH, 2CH, 22H
   \              0x65 0x72    
   \              0x22 0x5D    
   \              0x2C 0x22    
   \       0x20   0x61 0x64          DC8 61H, 64H, 64H, 44H, 65H, 66H, 61H, 75H
   \              0x64 0x44    
   \              0x65 0x66    
   \              0x61 0x75    
   \       0x28   0x6C 0x74          DC8 6CH, 74H, 22H, 3AH, 66H, 61H, 6CH, 73H
   \              0x22 0x3A    
   \              0x66 0x61    
   \              0x6C 0x73    
   \       0x30   0x65 0x7D          DC8 65H, 7DH, 0
   \              0x00         
   \       0x33   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_13:
   \        0x0   0x74 0x68          DC8 "thing.dynamicTsl.get"
   \              0x69 0x6E    
   \              0x67 0x2E    
   \              0x64 0x79    
   \              0x6E 0x61    
   \              0x6D 0x69    
   \              0x63 0x54    
   \              0x73 0x6C    
   \              0x2E 0x67    
   \              0x65 0x74    
   \              0x00         
   \       0x15   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_14:
   \        0x0   0x7B 0x22          DC8 "{\"deviceSendTime\":\"1234\"}"
   \              0x64 0x65    
   \              0x76 0x69    
   \              0x63 0x65    
   \              0x53 0x65    
   \              0x6E 0x64    
   \              0x54 0x69    
   \              0x6D 0x65    
   \              0x22 0x3A    
   \              0x22 0x31    
   \              0x32 0x33    
   \              0x34 0x22    
   \              0x7D 0x00    
   \       0x1A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_15:
   \        0x0   0x72 0x72          DC8 "rrpc/response/%.*s"
   \              0x70 0x63    
   \              0x2F 0x72    
   \              0x65 0x73    
   \              0x70 0x6F    
   \              0x6E 0x73    
   \              0x65 0x2F    
   \              0x25 0x2E    
   \              0x2A 0x73    
   \              0x00         
   \       0x13   0x00               DC8 0
   1621          #endif
   1622          
   1623          #ifdef DEPRECATED_LINKKIT
   1624          int dm_mgr_deprecated_set_tsl_source(_IN_ int devid, _IN_ iotx_dm_tsl_source_t tsl_source)
   1625          {
   1626              int res = 0;
   1627              dm_mgr_dev_node_t *node = NULL;
   1628          
   1629              if (devid < 0) {
   1630                  return DM_INVALID_PARAMETER;
   1631              }
   1632          
   1633              res = _dm_mgr_search_dev_by_devid(devid, &node);
   1634              if (res != SUCCESS_RETURN) {
   1635                  return FAIL_RETURN;
   1636              }
   1637          
   1638              node->tsl_source = tsl_source;
   1639          
   1640              return SUCCESS_RETURN;
   1641          }
   1642          
   1643          int dm_mgr_deprecated_get_tsl_source(_IN_ int devid, _IN_ iotx_dm_tsl_source_t *tsl_source)
   1644          {
   1645              int res = 0;
   1646              dm_mgr_dev_node_t *node = NULL;
   1647          
   1648              if (devid < 0 || tsl_source == NULL) {
   1649                  return DM_INVALID_PARAMETER;
   1650              }
   1651          
   1652              res = _dm_mgr_search_dev_by_devid(devid, &node);
   1653              if (res != SUCCESS_RETURN) {
   1654                  return FAIL_RETURN;
   1655              }
   1656          
   1657              *tsl_source = node->tsl_source;
   1658          
   1659              return SUCCESS_RETURN;
   1660          }
   1661          
   1662          static int dm_mgr_deprecated_search_devid_by_node(_IN_ dm_mgr_dev_node_t *node, _OU_ int *devid)
   1663          {
   1664              dm_mgr_ctx *ctx = _dm_mgr_get_ctx();
   1665              dm_mgr_dev_node_t *search_node = NULL;
   1666          
   1667              list_for_each_entry(search_node, &ctx->dev_list, linked_list, dm_mgr_dev_node_t) {
   1668                  if (search_node == node) {
   1669                      /* dm_log_debug("Device Found, node: %p", node); */
   1670                      if (devid) {
   1671                          *devid = search_node->devid;
   1672                      }
   1673                      return SUCCESS_RETURN;
   1674                  }
   1675              }
   1676          
   1677              dm_log_debug("Device Not Found, node: %p", node);
   1678              return FAIL_RETURN;
   1679          }
   1680          
   1681          int dm_mgr_deprecated_search_devid_by_device_node(_IN_ void *node, _OU_ int *devid)
   1682          {
   1683              int res = 0;
   1684          
   1685              if (node == NULL || devid == NULL) {
   1686                  return DM_INVALID_PARAMETER;
   1687              }
   1688          
   1689              res = dm_mgr_deprecated_search_devid_by_node((dm_mgr_dev_node_t *)node, devid);
   1690              if (res != SUCCESS_RETURN) {
   1691                  return FAIL_RETURN;
   1692              }
   1693          
   1694              return SUCCESS_RETURN;
   1695          }
   1696          
   1697          int dm_mgr_deprecated_set_tsl(int devid, iotx_dm_tsl_type_t tsl_type, const char *tsl, int tsl_len)
   1698          {
   1699              int res = 0;
   1700              dm_mgr_dev_node_t *node = NULL;
   1701          
   1702              if (tsl == NULL || tsl_len <= 0) {
   1703                  return DM_INVALID_PARAMETER;
   1704              }
   1705          
   1706              res = _dm_mgr_search_dev_by_devid(devid, &node);
   1707              if (res != SUCCESS_RETURN) {
   1708                  return FAIL_RETURN;
   1709              }
   1710          
   1711              res = dm_shw_create(tsl_type, tsl, tsl_len, &node->dev_shadow);
   1712              if (res != SUCCESS_RETURN) {
   1713                  return FAIL_RETURN;
   1714              }
   1715          
   1716              return SUCCESS_RETURN;
   1717          }
   1718          
   1719          int dm_mgr_deprecated_get_property_data(_IN_ int devid, _IN_ char *key, _IN_ int key_len, _OU_ void **data)
   1720          {
   1721              int res = 0;
   1722              dm_mgr_dev_node_t *node = NULL;
   1723          
   1724              if (key == NULL || key_len <= 0) {
   1725                  return DM_INVALID_PARAMETER;
   1726              }
   1727          
   1728              res = _dm_mgr_search_dev_by_devid(devid, &node);
   1729              if (res != SUCCESS_RETURN) {
   1730                  return FAIL_RETURN;
   1731              }
   1732          
   1733              res = dm_shw_get_property_data(node->dev_shadow, key, key_len, data);
   1734              if (res != SUCCESS_RETURN) {
   1735                  return FAIL_RETURN;
   1736              }
   1737          
   1738              return SUCCESS_RETURN;
   1739          }
   1740          
   1741          int dm_mgr_deprecated_get_service_input_data(_IN_ int devid, _IN_ char *key, _IN_ int key_len, _OU_ void **data)
   1742          {
   1743              int res = 0;
   1744              dm_mgr_dev_node_t *node = NULL;
   1745          
   1746              if (key == NULL || key_len <= 0) {
   1747                  return DM_INVALID_PARAMETER;
   1748              }
   1749          
   1750              res = _dm_mgr_search_dev_by_devid(devid, &node);
   1751              if (res != SUCCESS_RETURN) {
   1752                  return FAIL_RETURN;
   1753              }
   1754          
   1755              res = dm_shw_get_service_input_output_data(DM_SHW_DATA_TARGET_SERVICE_INPUT_DATA, node->dev_shadow, key, key_len, data);
   1756              if (res != SUCCESS_RETURN) {
   1757                  return FAIL_RETURN;
   1758              }
   1759          
   1760              return SUCCESS_RETURN;
   1761          }
   1762          
   1763          int dm_mgr_deprecated_get_service_output_data(_IN_ int devid, _IN_ char *key, _IN_ int key_len, _OU_ void **data)
   1764          {
   1765              int res = 0;
   1766              dm_mgr_dev_node_t *node = NULL;
   1767          
   1768              if (key == NULL || key_len <= 0) {
   1769                  return DM_INVALID_PARAMETER;
   1770              }
   1771          
   1772              res = _dm_mgr_search_dev_by_devid(devid, &node);
   1773              if (res != SUCCESS_RETURN) {
   1774                  return FAIL_RETURN;
   1775              }
   1776          
   1777              res = dm_shw_get_service_input_output_data(DM_SHW_DATA_TARGET_SERVICE_OUTPUT_DATA, node->dev_shadow, key, key_len,
   1778                      data);
   1779              if (res != SUCCESS_RETURN) {
   1780                  return FAIL_RETURN;
   1781              }
   1782          
   1783              return SUCCESS_RETURN;
   1784          }
   1785          
   1786          int dm_mgr_deprecated_get_event_output_data(_IN_ int devid, _IN_ char *key, _IN_ int key_len, _OU_ void **data)
   1787          {
   1788              int res = 0;
   1789              dm_mgr_dev_node_t *node = NULL;
   1790          
   1791              if (key == NULL || key_len <= 0) {
   1792                  return DM_INVALID_PARAMETER;
   1793              }
   1794          
   1795              res = _dm_mgr_search_dev_by_devid(devid, &node);
   1796              if (res != SUCCESS_RETURN) {
   1797                  return FAIL_RETURN;
   1798              }
   1799          
   1800              res = dm_shw_get_event_output_data(node->dev_shadow, key, key_len, data);
   1801              if (res != SUCCESS_RETURN) {
   1802                  return FAIL_RETURN;
   1803              }
   1804          
   1805              return SUCCESS_RETURN;
   1806          }
   1807          
   1808          int dm_mgr_deprecated_get_data_type(_IN_ void *data, _OU_ dm_shw_data_type_e *type)
   1809          {
   1810              if (data == NULL || type == NULL) {
   1811                  return DM_INVALID_PARAMETER;
   1812              }
   1813          
   1814              return dm_shw_get_data_type(data, type);
   1815          }
   1816          
   1817          int dm_mgr_deprecated_get_property_number(_IN_ int devid, _OU_ int *number)
   1818          {
   1819              int res = 0;
   1820              dm_mgr_dev_node_t *node = NULL;
   1821          
   1822              if (devid < 0 || number == NULL) {
   1823                  return DM_INVALID_PARAMETER;
   1824              }
   1825          
   1826              res = _dm_mgr_search_dev_by_devid(devid, &node);
   1827              if (res != SUCCESS_RETURN) {
   1828                  return FAIL_RETURN;
   1829              }
   1830          
   1831              return dm_shw_get_property_number(node->dev_shadow, number);
   1832          }
   1833          
   1834          int dm_mgr_deprecated_get_service_number(_IN_ int devid, _OU_ int *number)
   1835          {
   1836              int res = 0;
   1837              dm_mgr_dev_node_t *node = NULL;
   1838          
   1839              if (devid < 0 || number == NULL) {
   1840                  return DM_INVALID_PARAMETER;
   1841              }
   1842          
   1843              res = _dm_mgr_search_dev_by_devid(devid, &node);
   1844              if (res != SUCCESS_RETURN) {
   1845                  return FAIL_RETURN;
   1846              }
   1847          
   1848              return dm_shw_get_service_number(node->dev_shadow, number);
   1849          }
   1850          
   1851          int dm_mgr_deprecated_get_event_number(_IN_ int devid, _OU_ int *number)
   1852          {
   1853              int res = 0;
   1854              dm_mgr_dev_node_t *node = NULL;
   1855          
   1856              if (devid < 0 || number == NULL) {
   1857                  return DM_INVALID_PARAMETER;
   1858              }
   1859          
   1860              res = _dm_mgr_search_dev_by_devid(devid, &node);
   1861              if (res != SUCCESS_RETURN) {
   1862                  return FAIL_RETURN;
   1863              }
   1864          
   1865              return dm_shw_get_event_number(node->dev_shadow, number);
   1866          }
   1867          
   1868          int dm_mgr_deprecated_get_property_by_index(_IN_ int devid, _IN_ int index, _OU_ void **property)
   1869          {
   1870              int res = 0;
   1871              dm_mgr_dev_node_t *node = NULL;
   1872          
   1873              if (devid < 0 || index < 0) {
   1874                  return DM_INVALID_PARAMETER;
   1875              }
   1876          
   1877              res = _dm_mgr_search_dev_by_devid(devid, &node);
   1878              if (res != SUCCESS_RETURN) {
   1879                  return FAIL_RETURN;
   1880              }
   1881          
   1882              return dm_shw_get_property_by_index(node->dev_shadow, index, property);
   1883          }
   1884          
   1885          int dm_mgr_deprecated_get_service_by_index(_IN_ int devid, _IN_ int index, _OU_ void **service)
   1886          {
   1887              int res = 0;
   1888              dm_mgr_dev_node_t *node = NULL;
   1889          
   1890              if (devid < 0 || index < 0) {
   1891                  return DM_INVALID_PARAMETER;
   1892              }
   1893          
   1894              res = _dm_mgr_search_dev_by_devid(devid, &node);
   1895              if (res != SUCCESS_RETURN) {
   1896                  return FAIL_RETURN;
   1897              }
   1898          
   1899              return dm_shw_get_service_by_index(node->dev_shadow, index, service);
   1900          }
   1901          
   1902          int dm_mgr_deprecated_get_event_by_index(_IN_ int devid, _IN_ int index, _OU_ void **event)
   1903          {
   1904              int res = 0;
   1905              dm_mgr_dev_node_t *node = NULL;
   1906          
   1907              if (devid < 0 || index < 0) {
   1908                  return DM_INVALID_PARAMETER;
   1909              }
   1910          
   1911              res = _dm_mgr_search_dev_by_devid(devid, &node);
   1912              if (res != SUCCESS_RETURN) {
   1913                  return FAIL_RETURN;
   1914              }
   1915          
   1916              return dm_shw_get_event_by_index(node->dev_shadow, index, event);
   1917          }
   1918          
   1919          int dm_mgr_deprecated_get_service_by_identifier(_IN_ int devid, _IN_ char *identifier, _OU_ void **service)
   1920          {
   1921              int res = 0;
   1922              dm_mgr_dev_node_t *node = NULL;
   1923          
   1924              if (devid < 0 || identifier == NULL || service == NULL || *service != NULL) {
   1925                  return DM_INVALID_PARAMETER;
   1926              }
   1927              res = _dm_mgr_search_dev_by_devid(devid, &node);
   1928              if (res != SUCCESS_RETURN) {
   1929                  return FAIL_RETURN;
   1930              }
   1931          
   1932              return dm_shw_get_service_by_identifier(node->dev_shadow, identifier, service);
   1933          }
   1934          
   1935          int dm_mgr_deprecated_get_event_by_identifier(_IN_ int devid, _IN_ char *identifier, _OU_ void **event)
   1936          {
   1937              int res = 0;
   1938              dm_mgr_dev_node_t *node = NULL;
   1939          
   1940              if (devid < 0 || identifier == NULL || event == NULL || *event != NULL) {
   1941                  return DM_INVALID_PARAMETER;
   1942              }
   1943          
   1944              res = _dm_mgr_search_dev_by_devid(devid, &node);
   1945              if (res != SUCCESS_RETURN) {
   1946                  return FAIL_RETURN;
   1947              }
   1948          
   1949              return dm_shw_get_event_by_identifier(node->dev_shadow, identifier, event);
   1950          }
   1951          
   1952          int dm_mgr_deprecated_get_property_identifier(_IN_ void *property, _OU_ char **identifier)
   1953          {
   1954              if (property == NULL || identifier == NULL) {
   1955                  return DM_INVALID_PARAMETER;
   1956              }
   1957          
   1958              return dm_shw_get_property_identifier(property, identifier);
   1959          }
   1960          
   1961          int dm_mgr_deprecated_get_service_method(_IN_ void *service, _OU_ char **method)
   1962          {
   1963              if (service == NULL || method == NULL || *method != NULL) {
   1964                  return DM_INVALID_PARAMETER;
   1965              }
   1966          
   1967              return dm_shw_get_service_method(service, method);
   1968          }
   1969          
   1970          int dm_mgr_deprecated_get_event_method(_IN_ void *event, _OU_ char **method)
   1971          {
   1972              if (event == NULL || method == NULL) {
   1973                  return DM_INVALID_PARAMETER;
   1974              }
   1975          
   1976              return dm_shw_get_event_method(event, method);
   1977          }
   1978          
   1979          int dm_mgr_deprecated_set_property_value(_IN_ int devid, _IN_ char *key, _IN_ int key_len, _IN_ void *value,
   1980                  _IN_ int value_len)
   1981          {
   1982              int res = 0;
   1983              dm_mgr_dev_node_t *node = NULL;
   1984          
   1985              if (key == NULL || key_len <= 0 || value == NULL) {
   1986                  return DM_INVALID_PARAMETER;
   1987              }
   1988          
   1989              res = _dm_mgr_search_dev_by_devid(devid, &node);
   1990              if (res != SUCCESS_RETURN) {
   1991                  return FAIL_RETURN;
   1992              }
   1993          
   1994              res = dm_shw_set_property_value(node->dev_shadow, key, key_len, value, value_len);
   1995              if (res != SUCCESS_RETURN) {
   1996                  return FAIL_RETURN;
   1997              }
   1998          
   1999              return SUCCESS_RETURN;
   2000          }
   2001          
   2002          int dm_mgr_deprecated_get_property_value(_IN_ int devid, _IN_ char *key, _IN_ int key_len, _IN_ void *value)
   2003          {
   2004              int res = 0;
   2005              dm_mgr_dev_node_t *node = NULL;
   2006          
   2007              if (key == NULL || key_len <= 0 || value == NULL) {
   2008                  return DM_INVALID_PARAMETER;
   2009              }
   2010          
   2011              res = _dm_mgr_search_dev_by_devid(devid, &node);
   2012              if (res != SUCCESS_RETURN) {
   2013                  return FAIL_RETURN;
   2014              }
   2015          
   2016              res = dm_shw_get_property_value(node->dev_shadow, key, key_len, value);
   2017              if (res != SUCCESS_RETURN) {
   2018                  return FAIL_RETURN;
   2019              }
   2020          
   2021              return SUCCESS_RETURN;
   2022          }
   2023          
   2024          int dm_mgr_deprecated_set_event_output_value(_IN_ int devid, _IN_ char *key, _IN_ int key_len, _IN_ void *value,
   2025                  _IN_ int value_len)
   2026          {
   2027              int res = 0;
   2028              dm_mgr_dev_node_t *node = NULL;
   2029          
   2030              if (key == NULL || key_len <= 0 || value == NULL) {
   2031                  return DM_INVALID_PARAMETER;
   2032              }
   2033          
   2034              res = _dm_mgr_search_dev_by_devid(devid, &node);
   2035              if (res != SUCCESS_RETURN) {
   2036                  return FAIL_RETURN;
   2037              }
   2038          
   2039              res = dm_shw_set_event_output_value(node->dev_shadow, key, key_len, value, value_len);
   2040              if (res != SUCCESS_RETURN) {
   2041                  return FAIL_RETURN;
   2042              }
   2043          
   2044              return SUCCESS_RETURN;
   2045          }
   2046          
   2047          int dm_mgr_deprecated_get_event_output_value(_IN_ int devid, _IN_ char *key, _IN_ int key_len, _IN_ void *value)
   2048          {
   2049              int res = 0;
   2050              dm_mgr_dev_node_t *node = NULL;
   2051          
   2052              if (key == NULL || key_len <= 0 || value == NULL) {
   2053                  return DM_INVALID_PARAMETER;
   2054              }
   2055          
   2056              res = _dm_mgr_search_dev_by_devid(devid, &node);
   2057              if (res != SUCCESS_RETURN) {
   2058                  return FAIL_RETURN;
   2059              }
   2060          
   2061              res = dm_shw_get_event_output_value(node->dev_shadow, key, key_len, value);
   2062              if (res != SUCCESS_RETURN) {
   2063                  return FAIL_RETURN;
   2064              }
   2065          
   2066              return SUCCESS_RETURN;
   2067          }
   2068          
   2069          int dm_mgr_deprecated_set_service_input_value(_IN_ int devid, _IN_ char *key, _IN_ int key_len, _IN_ void *value,
   2070                  _IN_ int value_len)
   2071          {
   2072              int res = 0;
   2073              dm_mgr_dev_node_t *node = NULL;
   2074          
   2075              if (key == NULL || key_len <= 0 || value == NULL) {
   2076                  return DM_INVALID_PARAMETER;
   2077              }
   2078          
   2079              res = _dm_mgr_search_dev_by_devid(devid, &node);
   2080              if (res != SUCCESS_RETURN) {
   2081                  return FAIL_RETURN;
   2082              }
   2083          
   2084              res = dm_shw_set_service_input_output_value(DM_SHW_DATA_TARGET_SERVICE_INPUT_DATA, node->dev_shadow, key, key_len,
   2085                      value, value_len);
   2086              if (res != SUCCESS_RETURN) {
   2087                  return FAIL_RETURN;
   2088              }
   2089          
   2090              return SUCCESS_RETURN;
   2091          }
   2092          
   2093          int dm_mgr_deprecated_get_service_input_value(_IN_ int devid, _IN_ char *key, _IN_ int key_len, _IN_ void *value)
   2094          {
   2095              int res = 0;
   2096              dm_mgr_dev_node_t *node = NULL;
   2097          
   2098              if (key == NULL || key_len <= 0 || value == NULL) {
   2099                  return DM_INVALID_PARAMETER;
   2100              }
   2101          
   2102              res = _dm_mgr_search_dev_by_devid(devid, &node);
   2103              if (res != SUCCESS_RETURN) {
   2104                  return FAIL_RETURN;
   2105              }
   2106          
   2107              res = dm_shw_get_service_input_output_value(DM_SHW_DATA_TARGET_SERVICE_INPUT_DATA, node->dev_shadow, key, key_len,
   2108                      value);
   2109              if (res != SUCCESS_RETURN) {
   2110                  return FAIL_RETURN;
   2111              }
   2112          
   2113              return SUCCESS_RETURN;
   2114          }
   2115          
   2116          int dm_mgr_deprecated_set_service_output_value(_IN_ int devid, _IN_ char *key, _IN_ int key_len, _IN_ void *value,
   2117                  _IN_ int value_len)
   2118          {
   2119              int res = 0;
   2120              dm_mgr_dev_node_t *node = NULL;
   2121          
   2122              if (key == NULL || key_len <= 0 || value == NULL) {
   2123                  return DM_INVALID_PARAMETER;
   2124              }
   2125          
   2126              res = _dm_mgr_search_dev_by_devid(devid, &node);
   2127              if (res != SUCCESS_RETURN) {
   2128                  return FAIL_RETURN;
   2129              }
   2130          
   2131              res = dm_shw_set_service_input_output_value(DM_SHW_DATA_TARGET_SERVICE_OUTPUT_DATA, node->dev_shadow, key, key_len,
   2132                      value, value_len);
   2133              if (res != SUCCESS_RETURN) {
   2134                  return FAIL_RETURN;
   2135              }
   2136          
   2137              return SUCCESS_RETURN;
   2138          }
   2139          
   2140          int dm_mgr_deprecated_get_service_output_value(_IN_ int devid, _IN_ char *key, _IN_ int key_len, _IN_ void *value)
   2141          {
   2142              int res = 0;
   2143              dm_mgr_dev_node_t *node = NULL;
   2144          
   2145              if (devid < 0 || key == NULL || key_len <= 0 || value == NULL) {
   2146                  return DM_INVALID_PARAMETER;
   2147              }
   2148          
   2149              res = _dm_mgr_search_dev_by_devid(devid, &node);
   2150              if (res != SUCCESS_RETURN) {
   2151                  return FAIL_RETURN;
   2152              }
   2153          
   2154              res = dm_shw_get_service_input_output_value(DM_SHW_DATA_TARGET_SERVICE_OUTPUT_DATA, node->dev_shadow, key, key_len,
   2155                      value);
   2156              if (res != SUCCESS_RETURN) {
   2157                  return FAIL_RETURN;
   2158              }
   2159          
   2160              return SUCCESS_RETURN;
   2161          }
   2162          
   2163          int dm_mgr_deprecated_assemble_property(_IN_ int devid, _IN_ char *identifier, _IN_ int identifier_len,
   2164                                                  _IN_ lite_cjson_item_t *lite)
   2165          {
   2166              int res = 0;
   2167              dm_mgr_dev_node_t *node = NULL;
   2168          
   2169              if (devid < 0 || identifier == NULL || identifier_len <= 0 || lite == NULL || lite->type != cJSON_Object) {
   2170                  return DM_INVALID_PARAMETER;
   2171              }
   2172          
   2173              res = _dm_mgr_search_dev_by_devid(devid, &node);
   2174              if (res != SUCCESS_RETURN) {
   2175                  return FAIL_RETURN;
   2176              }
   2177          
   2178              res = dm_shw_assemble_property(node->dev_shadow, identifier, identifier_len, lite);
   2179              if (res != SUCCESS_RETURN) {
   2180                  return FAIL_RETURN;
   2181              }
   2182          
   2183              return SUCCESS_RETURN;
   2184          }
   2185          
   2186          int dm_mgr_deprecated_assemble_event_output(_IN_ int devid, _IN_ char *identifier, _IN_ int identifier_len,
   2187                  _IN_ lite_cjson_item_t *lite)
   2188          {
   2189              int res = 0;
   2190              dm_mgr_dev_node_t *node = NULL;
   2191          
   2192              if (devid < 0 || identifier == NULL || identifier_len <= 0 || lite == NULL || lite->type != cJSON_Object) {
   2193                  return DM_INVALID_PARAMETER;
   2194              }
   2195          
   2196              res = _dm_mgr_search_dev_by_devid(devid, &node);
   2197              if (res != SUCCESS_RETURN) {
   2198                  return FAIL_RETURN;
   2199              }
   2200          
   2201              res = dm_shw_assemble_event_output(node->dev_shadow, identifier, identifier_len, lite);
   2202              if (res != SUCCESS_RETURN) {
   2203                  return FAIL_RETURN;
   2204              }
   2205          
   2206              return SUCCESS_RETURN;
   2207          }
   2208          
   2209          int dm_mgr_deprecated_assemble_service_output(_IN_ int devid, _IN_ char *identifier, _IN_ int identifier_len,
   2210                  _IN_ lite_cjson_item_t *lite)
   2211          {
   2212              int res = 0;
   2213              dm_mgr_dev_node_t *node = NULL;
   2214          
   2215              if (devid < 0 || identifier == NULL || identifier_len <= 0 || lite == NULL || lite->type != cJSON_Object) {
   2216                  return DM_INVALID_PARAMETER;
   2217              }
   2218          
   2219              res = _dm_mgr_search_dev_by_devid(devid, &node);
   2220              if (res != SUCCESS_RETURN) {
   2221                  return FAIL_RETURN;
   2222              }
   2223          
   2224              res = dm_shw_assemble_service_output(node->dev_shadow, identifier, identifier_len, lite);
   2225              if (res != SUCCESS_RETURN) {
   2226                  return FAIL_RETURN;
   2227              }
   2228          
   2229              return SUCCESS_RETURN;
   2230          }
   2231          
   2232          int dm_mgr_deprecated_upstream_thing_service_response(_IN_ int devid, _IN_ int msgid, _IN_ iotx_dm_error_code_t code,
   2233                  _IN_ char *identifier, _IN_ int identifier_len, _IN_ char *payload, _IN_ int payload_len)
   2234          {
   2235              int res = 0, service_name_len = 0;
   2236              char *msgid_str = NULL, *service_name = NULL;
   2237              dm_msg_request_payload_t request;
   2238              dm_msg_response_t response;
   2239          
   2240              memset(&request, 0, sizeof(dm_msg_request_payload_t));
   2241              memset(&response, 0, sizeof(dm_msg_response_t));
   2242          
   2243              if (devid < 0 || msgid < 0 || identifier == NULL || identifier_len <= 0 ||
   2244                  payload == NULL || payload_len <= 0) {
   2245                  return DM_INVALID_PARAMETER;
   2246              }
   2247          
   2248              /* Response Msg ID */
   2249              res = dm_utils_itoa(msgid, &msgid_str);
   2250              if (res != SUCCESS_RETURN) {
   2251                  return FAIL_RETURN;
   2252              }
   2253              request.id.value = msgid_str;
   2254              request.id.value_length = strlen(msgid_str);
   2255          
   2256              /* Service Name */
   2257              service_name_len = strlen(DM_URI_THING_SERVICE_RESPONSE) + identifier_len + 1;
   2258              service_name = DM_malloc(service_name_len);
   2259              if (service_name == NULL) {
   2260                  DM_free(msgid_str);
   2261                  return DM_MEMORY_NOT_ENOUGH;
   2262              }
   2263              memset(service_name, 0, service_name_len);
   2264              HAL_Snprintf(service_name, service_name_len, DM_URI_THING_SERVICE_RESPONSE, identifier_len, identifier);
   2265          
   2266              res = _dm_mgr_upstream_response_assemble(devid, msgid_str, strlen(msgid_str), DM_URI_SYS_PREFIX, service_name, code,
   2267                      &request,
   2268                      &response);
   2269              if (res != SUCCESS_RETURN) {
   2270                  return FAIL_RETURN;
   2271              }
   2272          
   2273              dm_log_debug("Current Service Name: %s", service_name);
   2274              dm_msg_response(DM_MSG_DEST_ALL, &request, &response, payload, payload_len, NULL);
   2275          
   2276              DM_free(msgid_str);
   2277              DM_free(service_name);
   2278              return SUCCESS_RETURN;
   2279          }
   2280          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   INIT_AOS_DLIST_HEAD
       0   __dlist_add
      16   _dm_mgr_destroy_devlist
        16   -> HAL_Free
        16   -> _dm_mgr_get_ctx
        16   -> dlist_del
       0   _dm_mgr_get_ctx
      32   _dm_mgr_insert_dev
        32   -> HAL_Malloc
        32   -> INIT_AOS_DLIST_HEAD
        32   -> __aeabi_memcpy
        32   -> __aeabi_memset4
        32   -> _dm_mgr_get_ctx
        32   -> _dm_mgr_search_dev_by_devid
        32   -> dlist_add_tail
        32   -> strlen
       8   _dm_mgr_mutex_lock
         0   -> HAL_MutexLock
         8   -> _dm_mgr_get_ctx
       8   _dm_mgr_mutex_unlock
         0   -> HAL_MutexUnlock
         8   -> _dm_mgr_get_ctx
       8   _dm_mgr_next_devid
         8   -> _dm_mgr_get_ctx
      16   _dm_mgr_search_dev_by_devid
        16   -> _dm_mgr_get_ctx
      32   _dm_mgr_search_dev_by_pkdn
        32   -> _dm_mgr_get_ctx
        32   -> memcmp
        32   -> strlen
      40   _dm_mgr_upstream_request_assemble
        40   -> __aeabi_memcpy
        40   -> __aeabi_memcpy4
        40   -> _dm_mgr_search_dev_by_devid
        40   -> strlen
      24   _dm_mgr_upstream_response_assemble
        24   -> __aeabi_memcpy
        24   -> __aeabi_memcpy4
        24   -> _dm_mgr_search_dev_by_devid
        24   -> strlen
       0   dlist_add_tail
         0   -> __dlist_add
       0   dlist_del
       8   dm_mgr_deinit
         8   -> HAL_MutexDestroy
         8   -> _dm_mgr_destroy_devlist
         8   -> _dm_mgr_get_ctx
         8   -> _dm_mgr_mutex_lock
         8   -> _dm_mgr_mutex_unlock
      24   dm_mgr_dev_initialized
        24   -> HAL_Free
        24   -> HAL_Malloc
        24   -> HAL_Snprintf
        24   -> __aeabi_memset
        24   -> _dm_msg_send_to_user
        24   -> strlen
      32   dm_mgr_device_create
        32   -> HAL_Malloc
        32   -> INIT_AOS_DLIST_HEAD
        32   -> __aeabi_memcpy
        32   -> __aeabi_memset4
        32   -> _dm_mgr_get_ctx
        32   -> _dm_mgr_next_devid
        32   -> _dm_mgr_search_dev_by_pkdn
        32   -> dlist_add_tail
        32   -> strlen
       8   dm_mgr_device_destroy
         8   -> HAL_Free
         8   -> _dm_mgr_search_dev_by_devid
         8   -> dlist_del
       8   dm_mgr_device_number
         8   -> _dm_mgr_get_ctx
      24   dm_mgr_device_query
        24   -> _dm_mgr_get_ctx
        24   -> _dm_mgr_search_dev_by_pkdn
      24   dm_mgr_get_dev_avail
        24   -> _dm_mgr_search_dev_by_pkdn
        24   -> strlen
      16   dm_mgr_get_dev_status
        16   -> _dm_mgr_search_dev_by_devid
      16   dm_mgr_get_dev_type
        16   -> _dm_mgr_search_dev_by_devid
      16   dm_mgr_get_devid_by_index
        16   -> _dm_mgr_get_ctx
      16   dm_mgr_get_next_devid
        16   -> _dm_mgr_get_ctx
      72   dm_mgr_init
        72   -> HAL_GetDeviceName
        72   -> HAL_GetProductKey
        72   -> HAL_MutexCreate
        72   -> HAL_MutexDestroy
        72   -> INIT_AOS_DLIST_HEAD
        72   -> __aeabi_memclr4
        72   -> __aeabi_memset4
        72   -> _dm_mgr_get_ctx
        72   -> _dm_mgr_insert_dev
      24   dm_mgr_search_device_by_devid
        24   -> __aeabi_memcpy
        24   -> _dm_mgr_search_dev_by_devid
        24   -> strlen
      16   dm_mgr_search_device_by_pkdn
        16   -> _dm_mgr_search_dev_by_pkdn
      16   dm_mgr_search_device_node_by_devid
        16   -> _dm_mgr_search_dev_by_devid
       8   dm_mgr_set_dev_disable
         8   -> _dm_mgr_search_dev_by_devid
       8   dm_mgr_set_dev_enable
         8   -> _dm_mgr_search_dev_by_devid
      16   dm_mgr_set_dev_status
        16   -> _dm_mgr_search_dev_by_devid
      16   dm_mgr_set_device_secret
        16   -> __aeabi_memcpy
        16   -> __aeabi_memset
        16   -> _dm_mgr_search_dev_by_devid
        16   -> strlen
     104   dm_mgr_upstream_ntp_request
       104   -> HAL_Free
       104   -> HAL_GetDeviceName
       104   -> HAL_GetProductKey
       104   -> __aeabi_memset4
       104   -> dm_client_publish
       104   -> dm_utils_service_name
       104   -> strlen
     264   dm_mgr_upstream_rrpc_response
       264   -> HAL_Free
       264   -> HAL_Malloc
       264   -> HAL_Snprintf
       264   -> __aeabi_memset
       264   -> __aeabi_memset4
       264   -> _dm_mgr_upstream_response_assemble
       264   -> dm_msg_response
       264   -> strlen
     120   dm_mgr_upstream_thing_deviceinfo_delete
       120   -> __aeabi_memset4
       120   -> _dm_mgr_upstream_request_assemble
       120   -> dm_msg_cache_insert
       120   -> dm_msg_request
       120   -> iotx_report_id
     120   dm_mgr_upstream_thing_deviceinfo_update
       120   -> __aeabi_memset4
       120   -> _dm_mgr_upstream_request_assemble
       120   -> dm_msg_cache_insert
       120   -> dm_msg_request
       120   -> iotx_report_id
     120   dm_mgr_upstream_thing_dsltemplate_get
       120   -> __aeabi_memset4
       120   -> _dm_mgr_upstream_request_assemble
       120   -> dm_msg_cache_insert
       120   -> dm_msg_request
       120   -> iotx_report_id
       120   -> strlen
     120   dm_mgr_upstream_thing_dynamictsl_get
       120   -> __aeabi_memset4
       120   -> _dm_mgr_upstream_request_assemble
       120   -> dm_msg_cache_insert
       120   -> dm_msg_request
       120   -> iotx_report_id
       120   -> strlen
     144   dm_mgr_upstream_thing_event_post
       144   -> HAL_Free
       144   -> HAL_Malloc
       144   -> HAL_Snprintf
       144   -> __aeabi_memset
       144   -> __aeabi_memset4
       144   -> _dm_mgr_upstream_request_assemble
       144   -> dm_msg_cache_insert
       144   -> dm_msg_request
       144   -> dm_opt_get
       144   -> iotx_report_id
       144   -> strlen
     120   dm_mgr_upstream_thing_log_post
       120   -> __aeabi_memset4
       120   -> _dm_mgr_upstream_request_assemble
       120   -> add_tail
       120   -> dm_msg_request
       120   -> iotx_report_id
       120   -> push_log
       120   -> reset_log_poll
     120   dm_mgr_upstream_thing_model_up_raw
       120   -> HAL_Free
       120   -> LITE_rich_hexdump
       120   -> __aeabi_memcpy
       120   -> __aeabi_memcpy4
       120   -> __aeabi_memset4
       120   -> _dm_mgr_search_dev_by_devid
       120   -> dm_client_publish
       120   -> dm_utils_service_name
       120   -> strlen
     120   dm_mgr_upstream_thing_property_desired_delete
       120   -> __aeabi_memset4
       120   -> _dm_mgr_upstream_request_assemble
       120   -> dm_msg_cache_insert
       120   -> dm_msg_request
       120   -> dm_opt_get
       120   -> iotx_report_id
     120   dm_mgr_upstream_thing_property_desired_get
       120   -> __aeabi_memset4
       120   -> _dm_mgr_upstream_request_assemble
       120   -> dm_msg_cache_insert
       120   -> dm_msg_request
       120   -> dm_opt_get
       120   -> iotx_report_id
     256   dm_mgr_upstream_thing_property_get_response
       256   -> __aeabi_memset4
       256   -> _dm_mgr_upstream_response_assemble
       256   -> dm_msg_response
     120   dm_mgr_upstream_thing_property_post
       120   -> __aeabi_memset4
       120   -> _dm_mgr_upstream_request_assemble
       120   -> dm_msg_cache_insert
       120   -> dm_msg_request
       120   -> dm_opt_get
       120   -> iotx_report_id
     264   dm_mgr_upstream_thing_service_response
       264   -> HAL_Free
       264   -> HAL_Malloc
       264   -> HAL_Snprintf
       264   -> __aeabi_memset
       264   -> __aeabi_memset4
       264   -> _dm_mgr_upstream_response_assemble
       264   -> dm_msg_response
       264   -> strlen


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable10
       4  ??DataTable15
       4  ??DataTable17
       4  ??DataTable17_1
       4  ??DataTable17_10
       4  ??DataTable17_11
       4  ??DataTable17_12
       4  ??DataTable17_13
       4  ??DataTable17_14
       4  ??DataTable17_15
       4  ??DataTable17_16
       4  ??DataTable17_17
       4  ??DataTable17_18
       4  ??DataTable17_19
       4  ??DataTable17_2
       4  ??DataTable17_20
       4  ??DataTable17_21
       4  ??DataTable17_22
       4  ??DataTable17_23
       4  ??DataTable17_24
       4  ??DataTable17_25
       4  ??DataTable17_26
       4  ??DataTable17_27
       4  ??DataTable17_28
       4  ??DataTable17_29
       4  ??DataTable17_3
       4  ??DataTable17_30
       4  ??DataTable17_31
       4  ??DataTable17_32
       4  ??DataTable17_33
       4  ??DataTable17_34
       4  ??DataTable17_35
       4  ??DataTable17_36
       4  ??DataTable17_37
       4  ??DataTable17_38
       4  ??DataTable17_39
       4  ??DataTable17_4
       4  ??DataTable17_40
       4  ??DataTable17_5
       4  ??DataTable17_6
       4  ??DataTable17_7
       4  ??DataTable17_8
       4  ??DataTable17_9
      24  ?_0
      36  ?_1
       4  ?_10
      24  ?_11
      52  ?_12
      24  ?_13
      28  ?_14
      20  ?_15
      16  ?_2
       8  ?_3
      28  ?_4
      32  ?_5
      28  ?_6
      16  ?_7
      24  ?_8
      24  ?_9
       6  INIT_AOS_DLIST_HEAD
      10  __dlist_add
      58  _dm_mgr_destroy_devlist
       6  _dm_mgr_get_ctx
     166  _dm_mgr_insert_dev
      24  _dm_mgr_mutex_lock
      24  _dm_mgr_mutex_unlock
      16  _dm_mgr_next_devid
      56  _dm_mgr_search_dev_by_devid
     148  _dm_mgr_search_dev_by_pkdn
     118  _dm_mgr_upstream_request_assemble
      98  _dm_mgr_upstream_response_assemble
       6  dlist_add_tail
      10  dlist_del
      34  dm_mgr_deinit
      82  dm_mgr_dev_initialized
     244  dm_mgr_device_create
      64  dm_mgr_device_destroy
      38  dm_mgr_device_number
      50  dm_mgr_device_query
      82  dm_mgr_get_dev_avail
      50  dm_mgr_get_dev_status
      48  dm_mgr_get_dev_type
      70  dm_mgr_get_devid_by_index
      84  dm_mgr_get_next_devid
     118  dm_mgr_init
     116  dm_mgr_search_device_by_devid
      52  dm_mgr_search_device_by_pkdn
      36  dm_mgr_search_device_node_by_devid
      44  dm_mgr_set_dev_disable
      42  dm_mgr_set_dev_enable
      44  dm_mgr_set_dev_status
      86  dm_mgr_set_device_secret
     122  dm_mgr_upstream_ntp_request
     216  dm_mgr_upstream_rrpc_response
     116  dm_mgr_upstream_thing_deviceinfo_delete
     116  dm_mgr_upstream_thing_deviceinfo_update
     108  dm_mgr_upstream_thing_dsltemplate_get
     116  dm_mgr_upstream_thing_dynamictsl_get
     226  dm_mgr_upstream_thing_event_post
     170  dm_mgr_upstream_thing_log_post
     200  dm_mgr_upstream_thing_model_up_raw
     138  dm_mgr_upstream_thing_property_desired_delete
     138  dm_mgr_upstream_thing_property_desired_get
     150  dm_mgr_upstream_thing_property_get_response
     138  dm_mgr_upstream_thing_property_post
     242  dm_mgr_upstream_thing_service_response
      16  g_dm_mgr
       4  log_size
      36  -- Other

 
    20 bytes in section .bss
   424 bytes in section .rodata
 4 498 bytes in section .text
 
 4 498 bytes of CODE  memory
   424 bytes of CONST memory
    20 bytes of DATA  memory

Errors: none
Warnings: 2
