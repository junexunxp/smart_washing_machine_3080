###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.3.193/W32 for ARM         10/Jun/2019  13:48:56
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\Development\smart_washing_machine_3080\mbedtls\library\ssl_tls.c
#    Command line =  
#        -f C:\Users\nxf42695\AppData\Local\Temp\1\EW590E.tmp
#        (C:\Development\smart_washing_machine_3080\mbedtls\library\ssl_tls.c
#        -D DEBUG -D USE_RTOS -D XIP_EXTERNAL_FLASH=1 -D
#        XIP_BOOT_HEADER_ENABLE=1 -D CPU_MIMXRT1052DVL6B -D FSL_RTOS_FREE_RTOS
#        -D PRINTF_ADVANCED_ENABLE -D
#        "MBEDTLS_CONFIG_FILE=\"ksdk_mbedtls_config.h\"" -lC
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list -lA
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list
#        --diag_suppress Pa082,Pa050 -o
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_d16 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" --preinclude
#        C:\Development\smart_washing_machine_3080/source\app_preinclude.h -I
#        C:\Development\smart_washing_machine_3080/board\ -I
#        C:\Development\smart_washing_machine_3080/source\ -I
#        C:\Development\smart_washing_machine_3080/CMSIS\ -I
#        C:\Development\smart_washing_machine_3080/amazon-freertos/freertos/portable\
#        -I C:\Development\smart_washing_machine_3080/amazon-freertos/include\
#        -I C:\Development\smart_washing_machine_3080/component/lists\ -I
#        C:\Development\smart_washing_machine_3080/component/serial_manager\ -I
#        C:\Development\smart_washing_machine_3080/component/uart\ -I
#        C:\Development\smart_washing_machine_3080/component/kv\ -I
#        C:\Development\smart_washing_machine_3080/component/kv/include\ -I
#        C:\Development\smart_washing_machine_3080/device\ -I
#        C:\Development\smart_washing_machine_3080/doc\ -I
#        C:\Development\smart_washing_machine_3080/drivers\ -I
#        C:\Development\smart_washing_machine_3080/src\ -I
#        C:\Development\smart_washing_machine_3080/startup\ -I
#        C:\Development\smart_washing_machine_3080/utilities\ -I
#        C:\Development\smart_washing_machine_3080/xip\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\atm\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_model\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_sign\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\infra\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\mqtt\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\external_libs\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\coap_cloud\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\CoAPPacket\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\server\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\os\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\awss_reset\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\mbedtls\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\ -I
#        C:\Development\smart_washing_machine_3080\mbedtls\port\ksdk\ -Om)
#    Locale       =  C
#    List file    =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list\ssl_tls.lst
#    Object file  =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj\ssl_tls.o
#
###############################################################################

C:\Development\smart_washing_machine_3080\mbedtls\library\ssl_tls.c
      1          /*
      2           *  SSLv3/TLSv1 shared functions
      3           *
      4           *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
      5           *  SPDX-License-Identifier: Apache-2.0
      6           *
      7           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
      8           *  not use this file except in compliance with the License.
      9           *  You may obtain a copy of the License at
     10           *
     11           *  http://www.apache.org/licenses/LICENSE-2.0
     12           *
     13           *  Unless required by applicable law or agreed to in writing, software
     14           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     15           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     16           *  See the License for the specific language governing permissions and
     17           *  limitations under the License.
     18           *
     19           *  This file is part of mbed TLS (https://tls.mbed.org)
     20           */
     21          /*
     22           *  The SSL 3.0 specification was drafted by Netscape in 1996,
     23           *  and became an IETF standard in 1999.
     24           *
     25           *  http://wp.netscape.com/eng/ssl3/
     26           *  http://www.ietf.org/rfc/rfc2246.txt
     27           *  http://www.ietf.org/rfc/rfc4346.txt
     28           */
     29          
     30          #if !defined(MBEDTLS_CONFIG_FILE)
     31          #include "mbedtls/config.h"
     32          #else
     33          #include MBEDTLS_CONFIG_FILE
     34          #endif
     35          
     36          #if defined(MBEDTLS_SSL_TLS_C)
     37          
     38          #if defined(MBEDTLS_PLATFORM_C)
     39          #include "mbedtls/platform.h"
     40          #else
     41          #include <stdlib.h>
     42          #define mbedtls_calloc    calloc
     43          #define mbedtls_free      free
     44          #endif
     45          
     46          #include "mbedtls/debug.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp mbedtls_ecp_keypair *mbedtls_pk_ec(mbedtls_pk_context const)
   \                     mbedtls_pk_ec: (+1)
   \        0x0   0x4608             MOV      R0,R1
   \        0x2   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp unsigned int mbedtls_cipher_get_block_size(mbedtls_cipher_context_t const *)
   \                     mbedtls_cipher_get_block_size: (+1)
   \        0x0   0x2800             CMP      R0,#+0
   \        0x2   0xD002             BEQ.N    ??mbedtls_cipher_get_block_size_0
   \        0x4   0x6801             LDR      R1,[R0, #+0]
   \        0x6   0x2900             CMP      R1,#+0
   \        0x8   0xD101             BNE.N    ??mbedtls_cipher_get_block_size_1
   \                     ??mbedtls_cipher_get_block_size_0: (+1)
   \        0xA   0x2000             MOVS     R0,#+0
   \        0xC   0x4770             BX       LR
   \                     ??mbedtls_cipher_get_block_size_1: (+1)
   \        0xE   0x4608             MOV      R0,R1
   \       0x10   0x6940             LDR      R0,[R0, #+20]
   \       0x12   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp enum <unnamed>#118 mbedtls_cipher_get_cipher_mode(mbedtls_cipher_context_t const *)
   \                     mbedtls_cipher_get_cipher_mode: (+1)
   \        0x0   0x2800             CMP      R0,#+0
   \        0x2   0xD002             BEQ.N    ??mbedtls_cipher_get_cipher_mode_0
   \        0x4   0x6801             LDR      R1,[R0, #+0]
   \        0x6   0x2900             CMP      R1,#+0
   \        0x8   0xD101             BNE.N    ??mbedtls_cipher_get_cipher_mode_1
   \                     ??mbedtls_cipher_get_cipher_mode_0: (+1)
   \        0xA   0x2000             MOVS     R0,#+0
   \        0xC   0x4770             BX       LR
   \                     ??mbedtls_cipher_get_cipher_mode_1: (+1)
   \        0xE   0x4608             MOV      R0,R1
   \       0x10   0x7840             LDRB     R0,[R0, #+1]
   \       0x12   0x4770             BX       LR               ;; return
     47          #include "mbedtls/ssl.h"
     48          #include "mbedtls/ssl_internal.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void mbedtls_ssl_sig_hash_set_init(mbedtls_ssl_sig_hash_set_t *)
   \                     mbedtls_ssl_sig_hash_set_init: (+1)
   \        0x0   0x2100             MOVS     R1,#+0
   \        0x2   0x....'....        B.W      mbedtls_ssl_sig_hash_set_const_hash

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp mbedtls_x509_crt *mbedtls_ssl_own_cert(mbedtls_ssl_context *)
   \                     mbedtls_ssl_own_cert: (+1)
   \        0x0   0x6BC1             LDR      R1,[R0, #+60]
   \        0x2   0x2900             CMP      R1,#+0
   \        0x4   0xD005             BEQ.N    ??mbedtls_ssl_own_cert_0
   \        0x6   0xF8D1 0x11C0      LDR      R1,[R1, #+448]
   \        0xA   0x2900             CMP      R1,#+0
   \        0xC   0xD001             BEQ.N    ??mbedtls_ssl_own_cert_0
   \        0xE   0x4608             MOV      R0,R1
   \       0x10   0xE001             B.N      ??mbedtls_ssl_own_cert_1
   \                     ??mbedtls_ssl_own_cert_0: (+1)
   \       0x12   0x6800             LDR      R0,[R0, #+0]
   \       0x14   0x6E80             LDR      R0,[R0, #+104]
   \                     ??mbedtls_ssl_own_cert_1: (+1)
   \       0x16   0x2800             CMP      R0,#+0
   \       0x18   0xD101             BNE.N    ??mbedtls_ssl_own_cert_2
   \       0x1A   0x2000             MOVS     R0,#+0
   \       0x1C   0x4770             BX       LR
   \                     ??mbedtls_ssl_own_cert_2: (+1)
   \       0x1E   0x6800             LDR      R0,[R0, #+0]
   \       0x20   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp size_t mbedtls_ssl_hdr_len(mbedtls_ssl_context const *)
   \                     mbedtls_ssl_hdr_len: (+1)
   \        0x0   0x6800             LDR      R0,[R0, #+0]
   \        0x2   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \        0x6   0xF3C0 0x0040      UBFX     R0,R0,#+1,#+1
   \        0xA   0x2800             CMP      R0,#+0
   \        0xC   0xD001             BEQ.N    ??mbedtls_ssl_hdr_len_0
   \        0xE   0x200D             MOVS     R0,#+13
   \       0x10   0x4770             BX       LR
   \                     ??mbedtls_ssl_hdr_len_0: (+1)
   \       0x12   0x2005             MOVS     R0,#+5
   \       0x14   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp size_t mbedtls_ssl_hs_hdr_len(mbedtls_ssl_context const *)
   \                     mbedtls_ssl_hs_hdr_len: (+1)
   \        0x0   0x6800             LDR      R0,[R0, #+0]
   \        0x2   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \        0x6   0xF3C0 0x0040      UBFX     R0,R0,#+1,#+1
   \        0xA   0x2800             CMP      R0,#+0
   \        0xC   0xD001             BEQ.N    ??mbedtls_ssl_hs_hdr_len_0
   \        0xE   0x200C             MOVS     R0,#+12
   \       0x10   0x4770             BX       LR
   \                     ??mbedtls_ssl_hs_hdr_len_0: (+1)
   \       0x12   0x2004             MOVS     R0,#+4
   \       0x14   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp int mbedtls_ssl_safer_memcmp(void const *, void const *, size_t)
   \                     mbedtls_ssl_safer_memcmp: (+1)
   \        0x0   0xB478             PUSH     {R3-R6}
   \        0x2   0x2300             MOVS     R3,#+0
   \        0x4   0xF88D 0x3000      STRB     R3,[SP, #+0]
   \        0x8   0xE008             B.N      ??mbedtls_ssl_safer_memcmp_0
   \                     ??mbedtls_ssl_safer_memcmp_1: (+1)
   \        0xA   0x5CC4             LDRB     R4,[R0, R3]
   \        0xC   0x5CCD             LDRB     R5,[R1, R3]
   \        0xE   0xF89D 0x6000      LDRB     R6,[SP, #+0]
   \       0x12   0x406C             EORS     R4,R5,R4
   \       0x14   0x4334             ORRS     R4,R4,R6
   \       0x16   0xF88D 0x4000      STRB     R4,[SP, #+0]
   \       0x1A   0x1C5B             ADDS     R3,R3,#+1
   \                     ??mbedtls_ssl_safer_memcmp_0: (+1)
   \       0x1C   0x4293             CMP      R3,R2
   \       0x1E   0xD3F4             BCC.N    ??mbedtls_ssl_safer_memcmp_1
   \       0x20   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \       0x24   0xBC72             POP      {R1,R4-R6}
   \       0x26   0x4770             BX       LR               ;; return
     49          #include "mbedtls/platform_util.h"
     50          
     51          #include <string.h>
     52          
     53          #if defined(MBEDTLS_X509_CRT_PARSE_C)
     54          #include "mbedtls/oid.h"
     55          #endif
     56          
     57          static void ssl_reset_in_out_pointers( mbedtls_ssl_context *ssl );
     58          static uint32_t ssl_get_hs_total_len( mbedtls_ssl_context const *ssl );
     59          
     60          /* Length of the "epoch" field in the record header */

   \                                 In section .text, align 2, keep-with-next
     61          static inline size_t ssl_ep_len( const mbedtls_ssl_context *ssl )
     62          {
     63          #if defined(MBEDTLS_SSL_PROTO_DTLS)
     64              if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
   \                     ssl_ep_len: (+1)
   \        0x0   0x6800             LDR      R0,[R0, #+0]
   \        0x2   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \        0x6   0xF3C0 0x0040      UBFX     R0,R0,#+1,#+1
   \        0xA   0x2800             CMP      R0,#+0
   \        0xC   0xD001             BEQ.N    ??ssl_ep_len_0
     65                  return( 2 );
   \        0xE   0x2002             MOVS     R0,#+2
   \       0x10   0x4770             BX       LR
     66          #else
     67              ((void) ssl);
     68          #endif
     69              return( 0 );
   \                     ??ssl_ep_len_0: (+1)
   \       0x12   0x2000             MOVS     R0,#+0
   \       0x14   0x4770             BX       LR               ;; return
     70          }
     71          
     72          /*
     73           * Start a timer.
     74           * Passing millisecs = 0 cancels a running timer.
     75           */

   \                                 In section .text, align 2, keep-with-next
     76          static void ssl_set_timer( mbedtls_ssl_context *ssl, uint32_t millisecs )
     77          {
   \                     ssl_set_timer: (+1)
   \        0x0   0xB53E             PUSH     {R1-R5,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
     78              if( ssl->f_set_timer == NULL )
   \        0x6   0x6D60             LDR      R0,[R4, #+84]
   \        0x8   0x2800             CMP      R0,#+0
   \        0xA   0xD013             BEQ.N    ??ssl_set_timer_0
     79                  return;
     80          
     81              MBEDTLS_SSL_DEBUG_MSG( 3, ( "set_timer to %d ms", (int) millisecs ) );
   \        0xC   0x9501             STR      R5,[SP, #+4]
   \        0xE   0x....'....        LDR.W    R0,??DataTable10
   \       0x12   0x9000             STR      R0,[SP, #+0]
   \       0x14   0x2351             MOVS     R3,#+81
   \       0x16   0x....'....        LDR.W    R2,??DataTable12
   \       0x1A   0x2103             MOVS     R1,#+3
   \       0x1C   0x4620             MOV      R0,R4
   \       0x1E   0x....'....        BL       mbedtls_debug_print_msg
     82              ssl->f_set_timer( ssl->p_timer, millisecs / 4, millisecs );
   \       0x22   0x462A             MOV      R2,R5
   \       0x24   0x08AD             LSRS     R5,R5,#+2
   \       0x26   0x4629             MOV      R1,R5
   \       0x28   0x6D20             LDR      R0,[R4, #+80]
   \       0x2A   0x6D63             LDR      R3,[R4, #+84]
   \       0x2C   0xB003             ADD      SP,SP,#+12
   \       0x2E   0xE8BD 0x4030      POP      {R4,R5,LR}
   \       0x32   0x4718             BX       R3
   \                     ??ssl_set_timer_0: (+1)
   \       0x34   0xBD37             POP      {R0-R2,R4,R5,PC}  ;; return
     83          }
     84          
     85          /*
     86           * Return -1 is timer is expired, 0 if it isn't.
     87           */

   \                                 In section .text, align 2, keep-with-next
     88          static int ssl_check_timer( mbedtls_ssl_context *ssl )
     89          {
   \                     ssl_check_timer: (+1)
   \        0x0   0xB51C             PUSH     {R2-R4,LR}
   \        0x2   0x4604             MOV      R4,R0
     90              if( ssl->f_get_timer == NULL )
   \        0x4   0x6DA0             LDR      R0,[R4, #+88]
   \        0x6   0x2800             CMP      R0,#+0
   \        0x8   0xD101             BNE.N    ??ssl_check_timer_0
     91                  return( 0 );
   \        0xA   0x2000             MOVS     R0,#+0
   \        0xC   0xBD16             POP      {R1,R2,R4,PC}
     92          
     93              if( ssl->f_get_timer( ssl->p_timer ) == 2 )
   \                     ??ssl_check_timer_0: (+1)
   \        0xE   0x6D20             LDR      R0,[R4, #+80]
   \       0x10   0x6DA1             LDR      R1,[R4, #+88]
   \       0x12   0x4788             BLX      R1
   \       0x14   0x2802             CMP      R0,#+2
   \       0x16   0xD10C             BNE.N    ??ssl_check_timer_1
     94              {
     95                  MBEDTLS_SSL_DEBUG_MSG( 3, ( "timer expired" ) );
   \       0x18   0x....'....        LDR.W    R0,??DataTable10_1
   \       0x1C   0x9000             STR      R0,[SP, #+0]
   \       0x1E   0x235F             MOVS     R3,#+95
   \       0x20   0x....'....        LDR.W    R2,??DataTable12
   \       0x24   0x2103             MOVS     R1,#+3
   \       0x26   0x4620             MOV      R0,R4
   \       0x28   0x....'....        BL       mbedtls_debug_print_msg
     96                  return( -1 );
   \       0x2C   0xF04F 0x30FF      MOV      R0,#-1
   \       0x30   0xBD16             POP      {R1,R2,R4,PC}
     97              }
     98          
     99              return( 0 );
   \                     ??ssl_check_timer_1: (+1)
   \       0x32   0x2000             MOVS     R0,#+0
   \       0x34   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    100          }
    101          
    102          static void ssl_update_out_pointers( mbedtls_ssl_context *ssl,
    103                                               mbedtls_ssl_transform *transform );
    104          static void ssl_update_in_pointers( mbedtls_ssl_context *ssl,
    105                                              mbedtls_ssl_transform *transform );
    106          
    107          #define SSL_DONT_FORCE_FLUSH 0
    108          #define SSL_FORCE_FLUSH      1
    109          
    110          #if defined(MBEDTLS_SSL_PROTO_DTLS)
    111          
    112          /* Forward declarations for functions related to message buffering. */
    113          static void ssl_buffering_free( mbedtls_ssl_context *ssl );
    114          static void ssl_buffering_free_slot( mbedtls_ssl_context *ssl,
    115                                               uint8_t slot );
    116          static void ssl_free_buffered_record( mbedtls_ssl_context *ssl );
    117          static int ssl_load_buffered_message( mbedtls_ssl_context *ssl );
    118          static int ssl_load_buffered_record( mbedtls_ssl_context *ssl );
    119          static int ssl_buffer_message( mbedtls_ssl_context *ssl );
    120          static int ssl_buffer_future_record( mbedtls_ssl_context *ssl );
    121          static int ssl_next_record_is_in_datagram( mbedtls_ssl_context *ssl );
    122          
    123          static size_t ssl_get_current_mtu( const mbedtls_ssl_context *ssl );

   \                                 In section .text, align 2, keep-with-next
    124          static size_t ssl_get_maximum_datagram_size( mbedtls_ssl_context const *ssl )
    125          {
   \                     ssl_get_maximum_datagram_size: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    126              size_t mtu = ssl_get_current_mtu( ssl );
   \        0x2   0x....'....        BL       ssl_get_current_mtu
    127          
    128              if( mtu != 0 && mtu < MBEDTLS_SSL_OUT_BUFFER_LEN )
   \        0x6   0x2800             CMP      R0,#+0
   \        0x8   0xD003             BEQ.N    ??ssl_get_maximum_datagram_size_0
   \        0xA   0xF642 0x114D      MOVW     R1,#+10573
   \        0xE   0x4288             CMP      R0,R1
   \       0x10   0xD301             BCC.N    ??ssl_get_maximum_datagram_size_1
    129                  return( mtu );
    130          
    131              return( MBEDTLS_SSL_OUT_BUFFER_LEN );
   \                     ??ssl_get_maximum_datagram_size_0: (+1)
   \       0x12   0xF642 0x104D      MOVW     R0,#+10573
   \                     ??ssl_get_maximum_datagram_size_1: (+1)
   \       0x16   0xBD02             POP      {R1,PC}          ;; return
    132          }
    133          

   \                                 In section .text, align 2, keep-with-next
    134          static int ssl_get_remaining_space_in_datagram( mbedtls_ssl_context const *ssl )
    135          {
   \                     ssl_get_remaining_space_in_datagram: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
    136              size_t const bytes_written = ssl->out_left;
   \        0x2   0xF8D0 0x40D0      LDR      R4,[R0, #+208]
    137              size_t const mtu           = ssl_get_maximum_datagram_size( ssl );
   \        0x6   0x....'....        BL       ssl_get_maximum_datagram_size
    138          
    139              /* Double-check that the write-index hasn't gone
    140               * past what we can transmit in a single datagram. */
    141              if( bytes_written > mtu )
   \        0xA   0x42A0             CMP      R0,R4
   \        0xC   0xD202             BCS.N    ??ssl_get_remaining_space_in_datagram_0
    142              {
    143                  /* Should never happen... */
    144                  return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   \        0xE   0x....'....        LDR.W    R0,??DataTable12_1  ;; 0xffff9400
   \       0x12   0xBD10             POP      {R4,PC}
    145              }
    146          
    147              return( (int) ( mtu - bytes_written ) );
   \                     ??ssl_get_remaining_space_in_datagram_0: (+1)
   \       0x14   0x1B04             SUBS     R4,R0,R4
   \       0x16   0x4620             MOV      R0,R4
   \       0x18   0xBD10             POP      {R4,PC}          ;; return
    148          }
    149          

   \                                 In section .text, align 2, keep-with-next
    150          static int ssl_get_remaining_payload_in_datagram( mbedtls_ssl_context const *ssl )
    151          {
   \                     ssl_get_remaining_payload_in_datagram: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4604             MOV      R4,R0
    152              int ret;
    153              size_t remaining, expansion;
    154              size_t max_len = MBEDTLS_SSL_MAX_CONTENT_LEN;
   \        0x4   0xF44F 0x5520      MOV      R5,#+10240
    155          
    156          #if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)
    157              const size_t mfl = mbedtls_ssl_get_max_frag_len( ssl );
   \        0x8   0x....'....        BL       mbedtls_ssl_get_max_frag_len
    158          
    159              if( max_len > mfl )
   \        0xC   0xF5B0 0x5F20      CMP      R0,#+10240
   \       0x10   0xD200             BCS.N    ??ssl_get_remaining_payload_in_datagram_0
    160                  max_len = mfl;
   \       0x12   0x4605             MOV      R5,R0
    161          
    162              /* By the standard (RFC 6066 Sect. 4), the MFL extension
    163               * only limits the maximum record payload size, so in theory
    164               * we would be allowed to pack multiple records of payload size
    165               * MFL into a single datagram. However, this would mean that there's
    166               * no way to explicitly communicate MTU restrictions to the peer.
    167               *
    168               * The following reduction of max_len makes sure that we never
    169               * write datagrams larger than MFL + Record Expansion Overhead.
    170               */
    171              if( max_len <= ssl->out_left )
   \                     ??ssl_get_remaining_payload_in_datagram_0: (+1)
   \       0x14   0xF8D4 0x00D0      LDR      R0,[R4, #+208]
   \       0x18   0x42A8             CMP      R0,R5
   \       0x1A   0xD20D             BCS.N    ??ssl_get_remaining_payload_in_datagram_1
    172                  return( 0 );
    173          
    174              max_len -= ssl->out_left;
   \       0x1C   0x1A2D             SUBS     R5,R5,R0
    175          #endif
    176          
    177              ret = ssl_get_remaining_space_in_datagram( ssl );
   \       0x1E   0x4620             MOV      R0,R4
   \       0x20   0x....'....        BL       ssl_get_remaining_space_in_datagram
    178              if( ret < 0 )
   \       0x24   0x2800             CMP      R0,#+0
   \       0x26   0xD40E             BMI.N    ??ssl_get_remaining_payload_in_datagram_2
    179                  return( ret );
    180              remaining = (size_t) ret;
   \       0x28   0x4606             MOV      R6,R0
    181          
    182              ret = mbedtls_ssl_get_record_expansion( ssl );
   \       0x2A   0x4620             MOV      R0,R4
   \       0x2C   0x....'....        BL       mbedtls_ssl_get_record_expansion
    183              if( ret < 0 )
   \       0x30   0x2800             CMP      R0,#+0
   \       0x32   0xD408             BMI.N    ??ssl_get_remaining_payload_in_datagram_2
    184                  return( ret );
    185              expansion = (size_t) ret;
    186          
    187              if( remaining <= expansion )
   \       0x34   0x42B0             CMP      R0,R6
   \       0x36   0xD301             BCC.N    ??ssl_get_remaining_payload_in_datagram_3
    188                  return( 0 );
   \                     ??ssl_get_remaining_payload_in_datagram_1: (+1)
   \       0x38   0x2000             MOVS     R0,#+0
   \       0x3A   0xBD70             POP      {R4-R6,PC}
    189          
    190              remaining -= expansion;
   \                     ??ssl_get_remaining_payload_in_datagram_3: (+1)
   \       0x3C   0x1A30             SUBS     R0,R6,R0
    191              if( remaining >= max_len )
   \       0x3E   0x4285             CMP      R5,R0
   \       0x40   0xD900             BLS.N    ??ssl_get_remaining_payload_in_datagram_4
   \       0x42   0x4605             MOV      R5,R0
    192                  remaining = max_len;
    193          
    194              return( (int) remaining );
   \                     ??ssl_get_remaining_payload_in_datagram_4: (+1)
   \       0x44   0x4628             MOV      R0,R5
   \                     ??ssl_get_remaining_payload_in_datagram_2: (+1)
   \       0x46   0xBD70             POP      {R4-R6,PC}       ;; return
    195          }
    196          
    197          /*
    198           * Double the retransmit timeout value, within the allowed range,
    199           * returning -1 if the maximum value has already been reached.
    200           */

   \                                 In section .text, align 2, keep-with-next
    201          static int ssl_double_retransmit_timeout( mbedtls_ssl_context *ssl )
    202          {
   \                     ssl_double_retransmit_timeout: (+1)
   \        0x0   0xB5E0             PUSH     {R5-R7,LR}
    203              uint32_t new_timeout;
    204          
    205              if( ssl->handshake->retransmit_timeout >= ssl->conf->hs_timeout_max )
   \        0x2   0x6BC1             LDR      R1,[R0, #+60]
   \        0x4   0xF8D1 0x11E4      LDR      R1,[R1, #+484]
   \        0x8   0x6802             LDR      R2,[R0, #+0]
   \        0xA   0xF8D2 0x20B0      LDR      R2,[R2, #+176]
   \        0xE   0x4291             CMP      R1,R2
   \       0x10   0xD302             BCC.N    ??ssl_double_retransmit_timeout_0
    206                  return( -1 );
   \       0x12   0xF04F 0x30FF      MOV      R0,#-1
   \       0x16   0xBD0E             POP      {R1-R3,PC}
    207          
    208              /* Implement the final paragraph of RFC 6347 section 4.1.1.1
    209               * in the following way: after the initial transmission and a first
    210               * retransmission, back off to a temporary estimated MTU of 508 bytes.
    211               * This value is guaranteed to be deliverable (if not guaranteed to be
    212               * delivered) of any compliant IPv4 (and IPv6) network, and should work
    213               * on most non-IP stacks too. */
    214              if( ssl->handshake->retransmit_timeout != ssl->conf->hs_timeout_min )
   \                     ??ssl_double_retransmit_timeout_0: (+1)
   \       0x18   0x6BC1             LDR      R1,[R0, #+60]
   \       0x1A   0xF8D1 0x11E4      LDR      R1,[R1, #+484]
   \       0x1E   0x6802             LDR      R2,[R0, #+0]
   \       0x20   0xF8D2 0x20AC      LDR      R2,[R2, #+172]
   \       0x24   0x4291             CMP      R1,R2
   \       0x26   0xD004             BEQ.N    ??ssl_double_retransmit_timeout_1
    215                  ssl->handshake->mtu = 508;
   \       0x28   0xF44F 0x71FE      MOV      R1,#+508
   \       0x2C   0x6BC2             LDR      R2,[R0, #+60]
   \       0x2E   0xF8A2 0x124C      STRH     R1,[R2, #+588]
    216          
    217              new_timeout = 2 * ssl->handshake->retransmit_timeout;
   \                     ??ssl_double_retransmit_timeout_1: (+1)
   \       0x32   0x6BC1             LDR      R1,[R0, #+60]
   \       0x34   0xF8D1 0x11E4      LDR      R1,[R1, #+484]
   \       0x38   0x0049             LSLS     R1,R1,#+1
    218          
    219              /* Avoid arithmetic overflow and range overflow */
    220              if( new_timeout < ssl->handshake->retransmit_timeout ||
    221                  new_timeout > ssl->conf->hs_timeout_max )
   \       0x3A   0x6BC2             LDR      R2,[R0, #+60]
   \       0x3C   0xF8D2 0x21E4      LDR      R2,[R2, #+484]
   \       0x40   0x4291             CMP      R1,R2
   \       0x42   0xD304             BCC.N    ??ssl_double_retransmit_timeout_2
   \       0x44   0x6802             LDR      R2,[R0, #+0]
   \       0x46   0xF8D2 0x20B0      LDR      R2,[R2, #+176]
   \       0x4A   0x428A             CMP      R2,R1
   \       0x4C   0xD202             BCS.N    ??ssl_double_retransmit_timeout_3
    222              {
    223                  new_timeout = ssl->conf->hs_timeout_max;
   \                     ??ssl_double_retransmit_timeout_2: (+1)
   \       0x4E   0x6801             LDR      R1,[R0, #+0]
   \       0x50   0xF8D1 0x10B0      LDR      R1,[R1, #+176]
    224              }
    225          
    226              ssl->handshake->retransmit_timeout = new_timeout;
   \                     ??ssl_double_retransmit_timeout_3: (+1)
   \       0x54   0x6BC2             LDR      R2,[R0, #+60]
   \       0x56   0xF8C2 0x11E4      STR      R1,[R2, #+484]
    227              MBEDTLS_SSL_DEBUG_MSG( 3, ( "update timeout value to %d millisecs",
    228                                  ssl->handshake->retransmit_timeout ) );
   \       0x5A   0x6BC1             LDR      R1,[R0, #+60]
   \       0x5C   0xF8D1 0x11E4      LDR      R1,[R1, #+484]
   \       0x60   0x9101             STR      R1,[SP, #+4]
   \       0x62   0x....'....        LDR.W    R1,??DataTable12_2
   \       0x66   0x9100             STR      R1,[SP, #+0]
   \       0x68   0x23E4             MOVS     R3,#+228
   \       0x6A   0x....'....        LDR.W    R2,??DataTable12
   \       0x6E   0x2103             MOVS     R1,#+3
   \       0x70   0x....'....        BL       mbedtls_debug_print_msg
    229          
    230              return( 0 );
   \       0x74   0x2000             MOVS     R0,#+0
   \       0x76   0xBD0E             POP      {R1-R3,PC}       ;; return
    231          }
    232          

   \                                 In section .text, align 2, keep-with-next
    233          static void ssl_reset_retransmit_timeout( mbedtls_ssl_context *ssl )
    234          {
   \                     ssl_reset_retransmit_timeout: (+1)
   \        0x0   0xB5E0             PUSH     {R5-R7,LR}
    235              ssl->handshake->retransmit_timeout = ssl->conf->hs_timeout_min;
   \        0x2   0x6801             LDR      R1,[R0, #+0]
   \        0x4   0xF8D1 0x10AC      LDR      R1,[R1, #+172]
   \        0x8   0x6BC2             LDR      R2,[R0, #+60]
   \        0xA   0xF8C2 0x11E4      STR      R1,[R2, #+484]
    236              MBEDTLS_SSL_DEBUG_MSG( 3, ( "update timeout value to %d millisecs",
    237                                  ssl->handshake->retransmit_timeout ) );
   \        0xE   0x6BC1             LDR      R1,[R0, #+60]
   \       0x10   0xF8D1 0x11E4      LDR      R1,[R1, #+484]
   \       0x14   0x9101             STR      R1,[SP, #+4]
   \       0x16   0x....'....        LDR.W    R1,??DataTable12_2
   \       0x1A   0x9100             STR      R1,[SP, #+0]
   \       0x1C   0x23ED             MOVS     R3,#+237
   \       0x1E   0x....'....        LDR.W    R2,??DataTable12
   \       0x22   0x2103             MOVS     R1,#+3
   \       0x24   0x....'....        BL       mbedtls_debug_print_msg
    238          }
   \       0x28   0xBD07             POP      {R0-R2,PC}       ;; return
    239          #endif /* MBEDTLS_SSL_PROTO_DTLS */
    240          
    241          #if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)
    242          /*
    243           * Convert max_fragment_length codes to length.
    244           * RFC 6066 says:
    245           *    enum{
    246           *        2^9(1), 2^10(2), 2^11(3), 2^12(4), (255)
    247           *    } MaxFragmentLength;
    248           * and we add 0 -> extension unused
    249           */

   \                                 In section .text, align 4, keep-with-next
    250          static unsigned int ssl_mfl_code_to_length( int mfl )
    251          {
    252              switch( mfl )
   \                     ssl_mfl_code_to_length: (+1)
   \        0x0   0x1E40             SUBS     R0,R0,#+1
   \        0x2   0x2803             CMP      R0,#+3
   \        0x4   0xD80F             BHI.N    ??ssl_mfl_code_to_length_1
   \        0x6   0xE8DF 0xF000      TBB      [PC, R0]
   \                     ??ssl_mfl_code_to_length_0:
   \        0xA   0x02 0x05          DC8      0x2,0x5,0x8,0xB
   \              0x08 0x0B    
    253              {
    254              case MBEDTLS_SSL_MAX_FRAG_LEN_NONE:
    255                  return ( MBEDTLS_TLS_EXT_ADV_CONTENT_LEN );
    256              case MBEDTLS_SSL_MAX_FRAG_LEN_512:
    257                  return 512;
   \                     ??ssl_mfl_code_to_length_2: (+1)
   \        0xE   0xF44F 0x7000      MOV      R0,#+512
   \       0x12   0x4770             BX       LR
    258              case MBEDTLS_SSL_MAX_FRAG_LEN_1024:
    259                  return 1024;
   \                     ??ssl_mfl_code_to_length_3: (+1)
   \       0x14   0xF44F 0x6080      MOV      R0,#+1024
   \       0x18   0x4770             BX       LR
    260              case MBEDTLS_SSL_MAX_FRAG_LEN_2048:
    261                  return 2048;
   \                     ??ssl_mfl_code_to_length_4: (+1)
   \       0x1A   0xF44F 0x6000      MOV      R0,#+2048
   \       0x1E   0x4770             BX       LR
    262              case MBEDTLS_SSL_MAX_FRAG_LEN_4096:
    263                  return 4096;
   \                     ??ssl_mfl_code_to_length_5: (+1)
   \       0x20   0xF44F 0x5080      MOV      R0,#+4096
   \       0x24   0x4770             BX       LR
    264              default:
    265                  return ( MBEDTLS_TLS_EXT_ADV_CONTENT_LEN );
   \                     ??ssl_mfl_code_to_length_1: (+1)
   \       0x26   0xF44F 0x5020      MOV      R0,#+10240
   \       0x2A   0x4770             BX       LR               ;; return
    266              }
    267          }
    268          #endif /* MBEDTLS_SSL_MAX_FRAGMENT_LENGTH */
    269          
    270          #if defined(MBEDTLS_SSL_CLI_C)

   \                                 In section .text, align 2, keep-with-next
    271          static int ssl_session_copy( mbedtls_ssl_session *dst, const mbedtls_ssl_session *src )
    272          {
   \                     ssl_session_copy: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4605             MOV      R5,R0
   \        0x4   0x460E             MOV      R6,R1
    273              mbedtls_ssl_session_free( dst );
   \        0x6   0x....'....        BL       mbedtls_ssl_session_free
    274              memcpy( dst, src, sizeof( mbedtls_ssl_session ) );
   \        0xA   0x227C             MOVS     R2,#+124
   \        0xC   0x4631             MOV      R1,R6
   \        0xE   0x4628             MOV      R0,R5
   \       0x10   0x....'....        BL       __aeabi_memcpy4
    275          
    276          #if defined(MBEDTLS_X509_CRT_PARSE_C)
    277              if( src->peer_cert != NULL )
   \       0x14   0x6DF0             LDR      R0,[R6, #+92]
   \       0x16   0x2800             CMP      R0,#+0
   \       0x18   0xD018             BEQ.N    ??ssl_session_copy_0
    278              {
    279                  int ret;
    280          
    281                  dst->peer_cert = mbedtls_calloc( 1, sizeof(mbedtls_x509_crt) );
   \       0x1A   0xF44F 0x719A      MOV      R1,#+308
   \       0x1E   0x2001             MOVS     R0,#+1
   \       0x20   0x....'....        BL       mbedtls_calloc
   \       0x24   0x65E8             STR      R0,[R5, #+92]
    282                  if( dst->peer_cert == NULL )
   \       0x26   0x2800             CMP      R0,#+0
   \       0x28   0xD01A             BEQ.N    ??ssl_session_copy_1
    283                      return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
    284          
    285                  mbedtls_x509_crt_init( dst->peer_cert );
   \       0x2A   0x....'....        BL       mbedtls_x509_crt_init
    286          
    287                  if( ( ret = mbedtls_x509_crt_parse_der( dst->peer_cert, src->peer_cert->raw.p,
    288                                                  src->peer_cert->raw.len ) ) != 0 )
   \       0x2E   0x6DF0             LDR      R0,[R6, #+92]
   \       0x30   0x6842             LDR      R2,[R0, #+4]
   \       0x32   0x6881             LDR      R1,[R0, #+8]
   \       0x34   0x6DE8             LDR      R0,[R5, #+92]
   \       0x36   0x....'....        BL       mbedtls_x509_crt_parse_der
   \       0x3A   0x0004             MOVS     R4,R0
   \       0x3C   0xD006             BEQ.N    ??ssl_session_copy_0
    289                  {
    290                      mbedtls_free( dst->peer_cert );
   \       0x3E   0x6DE8             LDR      R0,[R5, #+92]
   \       0x40   0x....'....        BL       mbedtls_free
    291                      dst->peer_cert = NULL;
   \       0x44   0x2000             MOVS     R0,#+0
   \       0x46   0x65E8             STR      R0,[R5, #+92]
    292                      return( ret );
   \       0x48   0x4620             MOV      R0,R4
   \       0x4A   0xBD70             POP      {R4-R6,PC}
    293                  }
    294              }
    295          #endif /* MBEDTLS_X509_CRT_PARSE_C */
    296          
    297          #if defined(MBEDTLS_SSL_SESSION_TICKETS) && defined(MBEDTLS_SSL_CLI_C)
    298              if( src->ticket != NULL )
   \                     ??ssl_session_copy_0: (+1)
   \       0x4C   0x6E70             LDR      R0,[R6, #+100]
   \       0x4E   0x2800             CMP      R0,#+0
   \       0x50   0xD00D             BEQ.N    ??ssl_session_copy_2
    299              {
    300                  dst->ticket = mbedtls_calloc( 1, src->ticket_len );
   \       0x52   0x6EB1             LDR      R1,[R6, #+104]
   \       0x54   0x2001             MOVS     R0,#+1
   \       0x56   0x....'....        BL       mbedtls_calloc
   \       0x5A   0x6668             STR      R0,[R5, #+100]
    301                  if( dst->ticket == NULL )
   \       0x5C   0x2800             CMP      R0,#+0
   \       0x5E   0xD102             BNE.N    ??ssl_session_copy_3
    302                      return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
   \                     ??ssl_session_copy_1: (+1)
   \       0x60   0x....'....        LDR.W    R0,??DataTable13  ;; 0xffff8100
   \       0x64   0xBD70             POP      {R4-R6,PC}
    303          
    304                  memcpy( dst->ticket, src->ticket, src->ticket_len );
   \                     ??ssl_session_copy_3: (+1)
   \       0x66   0x6EB2             LDR      R2,[R6, #+104]
   \       0x68   0x6E71             LDR      R1,[R6, #+100]
   \       0x6A   0x....'....        BL       __aeabi_memcpy
    305              }
    306          #endif /* MBEDTLS_SSL_SESSION_TICKETS && MBEDTLS_SSL_CLI_C */
    307          
    308              return( 0 );
   \                     ??ssl_session_copy_2: (+1)
   \       0x6E   0x2000             MOVS     R0,#+0
   \       0x70   0xBD70             POP      {R4-R6,PC}       ;; return
    309          }
    310          #endif /* MBEDTLS_SSL_CLI_C */
    311          
    312          #if defined(MBEDTLS_SSL_HW_RECORD_ACCEL)
    313          int (*mbedtls_ssl_hw_record_init)( mbedtls_ssl_context *ssl,
    314                               const unsigned char *key_enc, const unsigned char *key_dec,
    315                               size_t keylen,
    316                               const unsigned char *iv_enc,  const unsigned char *iv_dec,
    317                               size_t ivlen,
    318                               const unsigned char *mac_enc, const unsigned char *mac_dec,
    319                               size_t maclen ) = NULL;
    320          int (*mbedtls_ssl_hw_record_activate)( mbedtls_ssl_context *ssl, int direction) = NULL;
    321          int (*mbedtls_ssl_hw_record_reset)( mbedtls_ssl_context *ssl ) = NULL;
    322          int (*mbedtls_ssl_hw_record_write)( mbedtls_ssl_context *ssl ) = NULL;
    323          int (*mbedtls_ssl_hw_record_read)( mbedtls_ssl_context *ssl ) = NULL;
    324          int (*mbedtls_ssl_hw_record_finish)( mbedtls_ssl_context *ssl ) = NULL;
    325          #endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
    326          
    327          /*
    328           * Key material generation
    329           */
    330          #if defined(MBEDTLS_SSL_PROTO_SSL3)
    331          static int ssl3_prf( const unsigned char *secret, size_t slen,
    332                               const char *label,
    333                               const unsigned char *random, size_t rlen,
    334                               unsigned char *dstbuf, size_t dlen )
    335          {
    336              int ret = 0;
    337              size_t i;
    338              mbedtls_md5_context md5;
    339              mbedtls_sha1_context sha1;
    340              unsigned char padding[16];
    341              unsigned char sha1sum[20];
    342              ((void)label);
    343          
    344              mbedtls_md5_init(  &md5  );
    345              mbedtls_sha1_init( &sha1 );
    346          
    347              /*
    348               *  SSLv3:
    349               *    block =
    350               *      MD5( secret + SHA1( 'A'    + secret + random ) ) +
    351               *      MD5( secret + SHA1( 'BB'   + secret + random ) ) +
    352               *      MD5( secret + SHA1( 'CCC'  + secret + random ) ) +
    353               *      ...
    354               */
    355              for( i = 0; i < dlen / 16; i++ )
    356              {
    357                  memset( padding, (unsigned char) ('A' + i), 1 + i );
    358          
    359                  if( ( ret = mbedtls_sha1_starts_ret( &sha1 ) ) != 0 )
    360                      goto exit;
    361                  if( ( ret = mbedtls_sha1_update_ret( &sha1, padding, 1 + i ) ) != 0 )
    362                      goto exit;
    363                  if( ( ret = mbedtls_sha1_update_ret( &sha1, secret, slen ) ) != 0 )
    364                      goto exit;
    365                  if( ( ret = mbedtls_sha1_update_ret( &sha1, random, rlen ) ) != 0 )
    366                      goto exit;
    367                  if( ( ret = mbedtls_sha1_finish_ret( &sha1, sha1sum ) ) != 0 )
    368                      goto exit;
    369          
    370                  if( ( ret = mbedtls_md5_starts_ret( &md5 ) ) != 0 )
    371                      goto exit;
    372                  if( ( ret = mbedtls_md5_update_ret( &md5, secret, slen ) ) != 0 )
    373                      goto exit;
    374                  if( ( ret = mbedtls_md5_update_ret( &md5, sha1sum, 20 ) ) != 0 )
    375                      goto exit;
    376                  if( ( ret = mbedtls_md5_finish_ret( &md5, dstbuf + i * 16 ) ) != 0 )
    377                      goto exit;
    378              }
    379          
    380          exit:
    381              mbedtls_md5_free(  &md5  );
    382              mbedtls_sha1_free( &sha1 );
    383          
    384              mbedtls_platform_zeroize( padding, sizeof( padding ) );
    385              mbedtls_platform_zeroize( sha1sum, sizeof( sha1sum ) );
    386          
    387              return( ret );
    388          }
    389          #endif /* MBEDTLS_SSL_PROTO_SSL3 */
    390          
    391          #if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1)

   \                                 In section .text, align 2, keep-with-next
    392          static int tls1_prf( const unsigned char *secret, size_t slen,
    393                               const char *label,
    394                               const unsigned char *random, size_t rlen,
    395                               unsigned char *dstbuf, size_t dlen )
    396          {
   \                     tls1_prf: (+1)
   \        0x0   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \        0x4   0xB0A8             SUB      SP,SP,#+160
   \        0x6   0x4605             MOV      R5,R0
   \        0x8   0x460F             MOV      R7,R1
   \        0xA   0x4691             MOV      R9,R2
   \        0xC   0x4698             MOV      R8,R3
   \        0xE   0x9C30             LDR      R4,[SP, #+192]
    397              size_t nb, hs;
    398              size_t i, j, k;
    399              const unsigned char *S1, *S2;
    400              unsigned char tmp[128];
    401              unsigned char h_i[20];
    402              const mbedtls_md_info_t *md_info;
    403              mbedtls_md_context_t md_ctx;
    404              int ret;
    405          
    406              mbedtls_md_init( &md_ctx );
   \       0x10   0x4668             MOV      R0,SP
   \       0x12   0x....'....        BL       mbedtls_md_init
    407          
    408              if( sizeof( tmp ) < 20 + strlen( label ) + rlen )
   \       0x16   0x4648             MOV      R0,R9
   \       0x18   0x....'....        BL       strlen
   \       0x1C   0x1820             ADDS     R0,R4,R0
   \       0x1E   0x3014             ADDS     R0,R0,#+20
   \       0x20   0x2881             CMP      R0,#+129
   \       0x22   0xD302             BCC.N    ??tls1_prf_0
    409                  return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   \       0x24   0x....'....        LDR.W    R0,??DataTable12_3  ;; 0xffff8f00
   \       0x28   0xE0C6             B.N      ??tls1_prf_1
    410          
    411              hs = ( slen + 1 ) / 2;
   \                     ??tls1_prf_0: (+1)
   \       0x2A   0x1C7E             ADDS     R6,R7,#+1
   \       0x2C   0x0876             LSRS     R6,R6,#+1
    412              S1 = secret;
    413              S2 = secret + slen - hs;
   \       0x2E   0x19E8             ADDS     R0,R5,R7
   \       0x30   0x4271             RSBS     R1,R6,#+0
   \       0x32   0x1847             ADDS     R7,R0,R1
    414          
    415              nb = strlen( label );
   \       0x34   0x4648             MOV      R0,R9
   \       0x36   0x....'....        BL       strlen
   \       0x3A   0x4682             MOV      R10,R0
    416              memcpy( tmp + 20, label, nb );
   \       0x3C   0x4652             MOV      R2,R10
   \       0x3E   0x4649             MOV      R1,R9
   \       0x40   0xA80D             ADD      R0,SP,#+52
   \       0x42   0x....'....        BL       __aeabi_memcpy
    417              memcpy( tmp + 20 + nb, random, rlen );
   \       0x46   0x4622             MOV      R2,R4
   \       0x48   0x4641             MOV      R1,R8
   \       0x4A   0xA808             ADD      R0,SP,#+32
   \       0x4C   0x4450             ADD      R0,R0,R10
   \       0x4E   0x3014             ADDS     R0,R0,#+20
   \       0x50   0x....'....        BL       __aeabi_memcpy
    418              nb += rlen;
   \       0x54   0x4454             ADD      R4,R4,R10
    419          
    420              /*
    421               * First compute P_md5(secret,label+random)[0..dlen]
    422               */
    423              if( ( md_info = mbedtls_md_info_from_type( MBEDTLS_MD_MD5 ) ) == NULL )
   \       0x56   0x2003             MOVS     R0,#+3
   \       0x58   0x....'....        BL       mbedtls_md_info_from_type
   \       0x5C   0x2800             CMP      R0,#+0
   \       0x5E   0xD051             BEQ.N    ??tls1_prf_2
    424                  return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    425          
    426              if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
   \       0x60   0x2201             MOVS     R2,#+1
   \       0x62   0x4601             MOV      R1,R0
   \       0x64   0x4668             MOV      R0,SP
   \       0x66   0x....'....        BL       mbedtls_md_setup
   \       0x6A   0x2800             CMP      R0,#+0
   \       0x6C   0xF040 0x80A4      BNE.W    ??tls1_prf_1
    427                  return( ret );
    428          
    429              mbedtls_md_hmac_starts( &md_ctx, S1, hs );
   \       0x70   0x4632             MOV      R2,R6
   \       0x72   0x4629             MOV      R1,R5
   \       0x74   0x4668             MOV      R0,SP
   \       0x76   0x....'....        BL       mbedtls_md_hmac_starts
    430              mbedtls_md_hmac_update( &md_ctx, tmp + 20, nb );
   \       0x7A   0x4622             MOV      R2,R4
   \       0x7C   0xA90D             ADD      R1,SP,#+52
   \       0x7E   0x4668             MOV      R0,SP
   \       0x80   0x....'....        BL       mbedtls_md_hmac_update
    431              mbedtls_md_hmac_finish( &md_ctx, 4 + tmp );
   \       0x84   0xA909             ADD      R1,SP,#+36
   \       0x86   0x4668             MOV      R0,SP
   \       0x88   0x....'....        BL       mbedtls_md_hmac_finish
    432          
    433              for( i = 0; i < dlen; i += 16 )
   \       0x8C   0xF04F 0x0900      MOV      R9,#+0
   \       0x90   0x9D31             LDR      R5,[SP, #+196]
   \       0x92   0xF8DD 0x80C8      LDR      R8,[SP, #+200]
   \       0x96   0xE009             B.N      ??tls1_prf_3
    434              {
    435                  mbedtls_md_hmac_reset ( &md_ctx );
    436                  mbedtls_md_hmac_update( &md_ctx, 4 + tmp, 16 + nb );
    437                  mbedtls_md_hmac_finish( &md_ctx, h_i );
    438          
    439                  mbedtls_md_hmac_reset ( &md_ctx );
    440                  mbedtls_md_hmac_update( &md_ctx, 4 + tmp, 16 );
    441                  mbedtls_md_hmac_finish( &md_ctx, 4 + tmp );
    442          
    443                  k = ( i + 16 > dlen ) ? dlen % 16 : 16;
    444          
    445                  for( j = 0; j < k; j++ )
    446                      dstbuf[i + j]  = h_i[j];
   \                     ??tls1_prf_4: (+1)
   \       0x98   0xAA03             ADD      R2,SP,#+12
   \       0x9A   0x5C12             LDRB     R2,[R2, R0]
   \       0x9C   0xEB00 0x0309      ADD      R3,R0,R9
   \       0xA0   0x54EA             STRB     R2,[R5, R3]
   \       0xA2   0x1C40             ADDS     R0,R0,#+1
   \                     ??tls1_prf_5: (+1)
   \       0xA4   0x4288             CMP      R0,R1
   \       0xA6   0xD3F7             BCC.N    ??tls1_prf_4
   \       0xA8   0xF109 0x0910      ADD      R9,R9,#+16
   \                     ??tls1_prf_3: (+1)
   \       0xAC   0x45C1             CMP      R9,R8
   \       0xAE   0x4668             MOV      R0,SP
   \       0xB0   0xD221             BCS.N    ??tls1_prf_6
   \       0xB2   0x....'....        BL       mbedtls_md_hmac_reset
   \       0xB6   0xF104 0x0210      ADD      R2,R4,#+16
   \       0xBA   0xA909             ADD      R1,SP,#+36
   \       0xBC   0x4668             MOV      R0,SP
   \       0xBE   0x....'....        BL       mbedtls_md_hmac_update
   \       0xC2   0xA903             ADD      R1,SP,#+12
   \       0xC4   0x4668             MOV      R0,SP
   \       0xC6   0x....'....        BL       mbedtls_md_hmac_finish
   \       0xCA   0x4668             MOV      R0,SP
   \       0xCC   0x....'....        BL       mbedtls_md_hmac_reset
   \       0xD0   0x2210             MOVS     R2,#+16
   \       0xD2   0xA909             ADD      R1,SP,#+36
   \       0xD4   0x4668             MOV      R0,SP
   \       0xD6   0x....'....        BL       mbedtls_md_hmac_update
   \       0xDA   0xA909             ADD      R1,SP,#+36
   \       0xDC   0x4668             MOV      R0,SP
   \       0xDE   0x....'....        BL       mbedtls_md_hmac_finish
   \       0xE2   0xF109 0x0010      ADD      R0,R9,#+16
   \       0xE6   0x4580             CMP      R8,R0
   \       0xE8   0xD202             BCS.N    ??tls1_prf_7
   \       0xEA   0xF008 0x010F      AND      R1,R8,#0xF
   \       0xEE   0xE000             B.N      ??tls1_prf_8
   \                     ??tls1_prf_7: (+1)
   \       0xF0   0x2110             MOVS     R1,#+16
   \                     ??tls1_prf_8: (+1)
   \       0xF2   0x2000             MOVS     R0,#+0
   \       0xF4   0xE7D6             B.N      ??tls1_prf_5
    447              }
    448          
    449              mbedtls_md_free( &md_ctx );
   \                     ??tls1_prf_6: (+1)
   \       0xF6   0x....'....        BL       mbedtls_md_free
    450          
    451              /*
    452               * XOR out with P_sha1(secret,label+random)[0..dlen]
    453               */
    454              if( ( md_info = mbedtls_md_info_from_type( MBEDTLS_MD_SHA1 ) ) == NULL )
   \       0xFA   0x2004             MOVS     R0,#+4
   \       0xFC   0x....'....        BL       mbedtls_md_info_from_type
   \      0x100   0x2800             CMP      R0,#+0
   \      0x102   0xD102             BNE.N    ??tls1_prf_9
    455                  return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   \                     ??tls1_prf_2: (+1)
   \      0x104   0x....'....        LDR.W    R0,??DataTable13_1  ;; 0xffff9400
   \      0x108   0xE056             B.N      ??tls1_prf_1
    456          
    457              if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
   \                     ??tls1_prf_9: (+1)
   \      0x10A   0x2201             MOVS     R2,#+1
   \      0x10C   0x4601             MOV      R1,R0
   \      0x10E   0x4668             MOV      R0,SP
   \      0x110   0x....'....        BL       mbedtls_md_setup
   \      0x114   0x2800             CMP      R0,#+0
   \      0x116   0xD14F             BNE.N    ??tls1_prf_1
    458                  return( ret );
    459          
    460              mbedtls_md_hmac_starts( &md_ctx, S2, hs );
   \      0x118   0x4632             MOV      R2,R6
   \      0x11A   0x4639             MOV      R1,R7
   \      0x11C   0x4668             MOV      R0,SP
   \      0x11E   0x....'....        BL       mbedtls_md_hmac_starts
    461              mbedtls_md_hmac_update( &md_ctx, tmp + 20, nb );
   \      0x122   0x4622             MOV      R2,R4
   \      0x124   0xA90D             ADD      R1,SP,#+52
   \      0x126   0x4668             MOV      R0,SP
   \      0x128   0x....'....        BL       mbedtls_md_hmac_update
    462              mbedtls_md_hmac_finish( &md_ctx, tmp );
   \      0x12C   0xA908             ADD      R1,SP,#+32
   \      0x12E   0x4668             MOV      R0,SP
   \      0x130   0x....'....        BL       mbedtls_md_hmac_finish
    463          
    464              for( i = 0; i < dlen; i += 20 )
   \      0x134   0x2600             MOVS     R6,#+0
   \      0x136   0xE00A             B.N      ??tls1_prf_10
    465              {
    466                  mbedtls_md_hmac_reset ( &md_ctx );
    467                  mbedtls_md_hmac_update( &md_ctx, tmp, 20 + nb );
    468                  mbedtls_md_hmac_finish( &md_ctx, h_i );
    469          
    470                  mbedtls_md_hmac_reset ( &md_ctx );
    471                  mbedtls_md_hmac_update( &md_ctx, tmp, 20 );
    472                  mbedtls_md_hmac_finish( &md_ctx, tmp );
    473          
    474                  k = ( i + 20 > dlen ) ? dlen % 20 : 20;
    475          
    476                  for( j = 0; j < k; j++ )
    477                      dstbuf[i + j] = (unsigned char)( dstbuf[i + j] ^ h_i[j] );
   \                     ??tls1_prf_11: (+1)
   \      0x138   0x1982             ADDS     R2,R0,R6
   \      0x13A   0x5CAA             LDRB     R2,[R5, R2]
   \      0x13C   0xAB03             ADD      R3,SP,#+12
   \      0x13E   0x5C1B             LDRB     R3,[R3, R0]
   \      0x140   0x405A             EORS     R2,R3,R2
   \      0x142   0x1983             ADDS     R3,R0,R6
   \      0x144   0x54EA             STRB     R2,[R5, R3]
   \      0x146   0x1C40             ADDS     R0,R0,#+1
   \                     ??tls1_prf_12: (+1)
   \      0x148   0x4288             CMP      R0,R1
   \      0x14A   0xD3F5             BCC.N    ??tls1_prf_11
   \      0x14C   0x3614             ADDS     R6,R6,#+20
   \                     ??tls1_prf_10: (+1)
   \      0x14E   0x4546             CMP      R6,R8
   \      0x150   0x4668             MOV      R0,SP
   \      0x152   0xD226             BCS.N    ??tls1_prf_13
   \      0x154   0x....'....        BL       mbedtls_md_hmac_reset
   \      0x158   0xF104 0x0214      ADD      R2,R4,#+20
   \      0x15C   0xA908             ADD      R1,SP,#+32
   \      0x15E   0x4668             MOV      R0,SP
   \      0x160   0x....'....        BL       mbedtls_md_hmac_update
   \      0x164   0xA903             ADD      R1,SP,#+12
   \      0x166   0x4668             MOV      R0,SP
   \      0x168   0x....'....        BL       mbedtls_md_hmac_finish
   \      0x16C   0x4668             MOV      R0,SP
   \      0x16E   0x....'....        BL       mbedtls_md_hmac_reset
   \      0x172   0x2214             MOVS     R2,#+20
   \      0x174   0xA908             ADD      R1,SP,#+32
   \      0x176   0x4668             MOV      R0,SP
   \      0x178   0x....'....        BL       mbedtls_md_hmac_update
   \      0x17C   0xA908             ADD      R1,SP,#+32
   \      0x17E   0x4668             MOV      R0,SP
   \      0x180   0x....'....        BL       mbedtls_md_hmac_finish
   \      0x184   0xF106 0x0014      ADD      R0,R6,#+20
   \      0x188   0x4580             CMP      R8,R0
   \      0x18A   0xD207             BCS.N    ??tls1_prf_14
   \      0x18C   0x2014             MOVS     R0,#+20
   \      0x18E   0xFBB8 0xF0F0      UDIV     R0,R8,R0
   \      0x192   0xEB00 0x0180      ADD      R1,R0,R0, LSL #+2
   \      0x196   0xEBA8 0x0181      SUB      R1,R8,R1, LSL #+2
   \      0x19A   0xE000             B.N      ??tls1_prf_15
   \                     ??tls1_prf_14: (+1)
   \      0x19C   0x2114             MOVS     R1,#+20
   \                     ??tls1_prf_15: (+1)
   \      0x19E   0x2000             MOVS     R0,#+0
   \      0x1A0   0xE7D2             B.N      ??tls1_prf_12
    478              }
    479          
    480              mbedtls_md_free( &md_ctx );
   \                     ??tls1_prf_13: (+1)
   \      0x1A2   0x....'....        BL       mbedtls_md_free
    481          
    482              mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
   \      0x1A6   0x2180             MOVS     R1,#+128
   \      0x1A8   0xA808             ADD      R0,SP,#+32
   \      0x1AA   0x....'....        BL       mbedtls_platform_zeroize
    483              mbedtls_platform_zeroize( h_i, sizeof( h_i ) );
   \      0x1AE   0x2114             MOVS     R1,#+20
   \      0x1B0   0xA803             ADD      R0,SP,#+12
   \      0x1B2   0x....'....        BL       mbedtls_platform_zeroize
    484          
    485              return( 0 );
   \      0x1B6   0x2000             MOVS     R0,#+0
   \                     ??tls1_prf_1: (+1)
   \      0x1B8   0xB028             ADD      SP,SP,#+160
   \      0x1BA   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    486          }
    487          #endif /* MBEDTLS_SSL_PROTO_TLS1) || MBEDTLS_SSL_PROTO_TLS1_1 */
    488          
    489          #if defined(MBEDTLS_SSL_PROTO_TLS1_2)

   \                                 In section .text, align 2, keep-with-next
    490          static int tls_prf_generic( mbedtls_md_type_t md_type,
    491                                      const unsigned char *secret, size_t slen,
    492                                      const char *label,
    493                                      const unsigned char *random, size_t rlen,
    494                                      unsigned char *dstbuf, size_t dlen )
    495          {
   \                     tls_prf_generic: (+1)
   \        0x0   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \        0x4   0xB0B3             SUB      SP,SP,#+204
   \        0x6   0x4606             MOV      R6,R0
   \        0x8   0x460C             MOV      R4,R1
   \        0xA   0x4615             MOV      R5,R2
   \        0xC   0x4699             MOV      R9,R3
    496              size_t nb;
    497              size_t i, j, k, md_len;
    498              unsigned char tmp[128];
    499              unsigned char h_i[MBEDTLS_MD_MAX_SIZE];
    500              const mbedtls_md_info_t *md_info;
    501              mbedtls_md_context_t md_ctx;
    502              int ret;
    503          
    504              mbedtls_md_init( &md_ctx );
   \        0xE   0x4668             MOV      R0,SP
   \       0x10   0x....'....        BL       mbedtls_md_init
    505          
    506              if( ( md_info = mbedtls_md_info_from_type( md_type ) ) == NULL )
   \       0x14   0x4630             MOV      R0,R6
   \       0x16   0x....'....        BL       mbedtls_md_info_from_type
   \       0x1A   0x0006             MOVS     R6,R0
   \       0x1C   0xD102             BNE.N    ??tls_prf_generic_0
    507                  return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   \       0x1E   0x....'....        LDR.W    R0,??DataTable12_1  ;; 0xffff9400
   \       0x22   0xE075             B.N      ??tls_prf_generic_1
   \                     ??tls_prf_generic_0: (+1)
   \       0x24   0xF8DD 0x80F4      LDR      R8,[SP, #+244]
    508          
    509              md_len = mbedtls_md_get_size( md_info );
   \       0x28   0x....'....        BL       mbedtls_md_get_size
   \       0x2C   0x4607             MOV      R7,R0
    510          
    511              if( sizeof( tmp ) < md_len + strlen( label ) + rlen )
   \       0x2E   0x4648             MOV      R0,R9
   \       0x30   0x....'....        BL       strlen
   \       0x34   0x19C0             ADDS     R0,R0,R7
   \       0x36   0x4440             ADD      R0,R8,R0
   \       0x38   0x2881             CMP      R0,#+129
   \       0x3A   0xD302             BCC.N    ??tls_prf_generic_2
    512                  return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   \       0x3C   0x....'....        LDR.W    R0,??DataTable12_3  ;; 0xffff8f00
   \       0x40   0xE066             B.N      ??tls_prf_generic_1
   \                     ??tls_prf_generic_2: (+1)
   \       0x42   0xF8DD 0xA0F0      LDR      R10,[SP, #+240]
    513          
    514              nb = strlen( label );
   \       0x46   0x4648             MOV      R0,R9
   \       0x48   0x....'....        BL       strlen
   \       0x4C   0x4683             MOV      R11,R0
    515              memcpy( tmp + md_len, label, nb );
   \       0x4E   0x465A             MOV      R2,R11
   \       0x50   0x4649             MOV      R1,R9
   \       0x52   0xA813             ADD      R0,SP,#+76
   \       0x54   0x4438             ADD      R0,R0,R7
   \       0x56   0x....'....        BL       __aeabi_memcpy
    516              memcpy( tmp + md_len + nb, random, rlen );
   \       0x5A   0x4642             MOV      R2,R8
   \       0x5C   0x4651             MOV      R1,R10
   \       0x5E   0xA813             ADD      R0,SP,#+76
   \       0x60   0x4438             ADD      R0,R0,R7
   \       0x62   0x4458             ADD      R0,R0,R11
   \       0x64   0x....'....        BL       __aeabi_memcpy
    517              nb += rlen;
   \       0x68   0x44D8             ADD      R8,R8,R11
    518          
    519              /*
    520               * Compute P_<hash>(secret, label + random)[0..dlen]
    521               */
    522              if ( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
   \       0x6A   0x2201             MOVS     R2,#+1
   \       0x6C   0x4631             MOV      R1,R6
   \       0x6E   0x4668             MOV      R0,SP
   \       0x70   0x....'....        BL       mbedtls_md_setup
   \       0x74   0x2800             CMP      R0,#+0
   \       0x76   0xD14B             BNE.N    ??tls_prf_generic_1
    523                  return( ret );
   \       0x78   0x462A             MOV      R2,R5
   \       0x7A   0x4621             MOV      R1,R4
    524          
    525              mbedtls_md_hmac_starts( &md_ctx, secret, slen );
   \       0x7C   0x4668             MOV      R0,SP
   \       0x7E   0x....'....        BL       mbedtls_md_hmac_starts
    526              mbedtls_md_hmac_update( &md_ctx, tmp + md_len, nb );
   \       0x82   0x4642             MOV      R2,R8
   \       0x84   0xA813             ADD      R0,SP,#+76
   \       0x86   0x19C1             ADDS     R1,R0,R7
   \       0x88   0x4668             MOV      R0,SP
   \       0x8A   0x....'....        BL       mbedtls_md_hmac_update
    527              mbedtls_md_hmac_finish( &md_ctx, tmp );
   \       0x8E   0xA913             ADD      R1,SP,#+76
   \       0x90   0x4668             MOV      R0,SP
   \       0x92   0x....'....        BL       mbedtls_md_hmac_finish
    528          
    529              for( i = 0; i < dlen; i += md_len )
   \       0x96   0x2600             MOVS     R6,#+0
   \       0x98   0x9D3E             LDR      R5,[SP, #+248]
   \       0x9A   0x9C3F             LDR      R4,[SP, #+252]
   \       0x9C   0xE007             B.N      ??tls_prf_generic_3
    530              {
    531                  mbedtls_md_hmac_reset ( &md_ctx );
    532                  mbedtls_md_hmac_update( &md_ctx, tmp, md_len + nb );
    533                  mbedtls_md_hmac_finish( &md_ctx, h_i );
    534          
    535                  mbedtls_md_hmac_reset ( &md_ctx );
    536                  mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
    537                  mbedtls_md_hmac_finish( &md_ctx, tmp );
    538          
    539                  k = ( i + md_len > dlen ) ? dlen % md_len : md_len;
    540          
    541                  for( j = 0; j < k; j++ )
    542                      dstbuf[i + j]  = h_i[j];
   \                     ??tls_prf_generic_4: (+1)
   \       0x9E   0xAA03             ADD      R2,SP,#+12
   \       0xA0   0x5C12             LDRB     R2,[R2, R0]
   \       0xA2   0x1983             ADDS     R3,R0,R6
   \       0xA4   0x54EA             STRB     R2,[R5, R3]
   \       0xA6   0x1C40             ADDS     R0,R0,#+1
   \                     ??tls_prf_generic_5: (+1)
   \       0xA8   0x4288             CMP      R0,R1
   \       0xAA   0xD3F8             BCC.N    ??tls_prf_generic_4
   \       0xAC   0x19BE             ADDS     R6,R7,R6
   \                     ??tls_prf_generic_3: (+1)
   \       0xAE   0x42A6             CMP      R6,R4
   \       0xB0   0x4668             MOV      R0,SP
   \       0xB2   0xD222             BCS.N    ??tls_prf_generic_6
   \       0xB4   0x....'....        BL       mbedtls_md_hmac_reset
   \       0xB8   0xEB08 0x0207      ADD      R2,R8,R7
   \       0xBC   0xA913             ADD      R1,SP,#+76
   \       0xBE   0x4668             MOV      R0,SP
   \       0xC0   0x....'....        BL       mbedtls_md_hmac_update
   \       0xC4   0xA903             ADD      R1,SP,#+12
   \       0xC6   0x4668             MOV      R0,SP
   \       0xC8   0x....'....        BL       mbedtls_md_hmac_finish
   \       0xCC   0x4668             MOV      R0,SP
   \       0xCE   0x....'....        BL       mbedtls_md_hmac_reset
   \       0xD2   0x463A             MOV      R2,R7
   \       0xD4   0xA913             ADD      R1,SP,#+76
   \       0xD6   0x4668             MOV      R0,SP
   \       0xD8   0x....'....        BL       mbedtls_md_hmac_update
   \       0xDC   0xA913             ADD      R1,SP,#+76
   \       0xDE   0x4668             MOV      R0,SP
   \       0xE0   0x....'....        BL       mbedtls_md_hmac_finish
   \       0xE4   0x19B8             ADDS     R0,R7,R6
   \       0xE6   0x4284             CMP      R4,R0
   \       0xE8   0xD204             BCS.N    ??tls_prf_generic_7
   \       0xEA   0xFBB4 0xF1F7      UDIV     R1,R4,R7
   \       0xEE   0xFB07 0x4111      MLS      R1,R7,R1,R4
   \       0xF2   0xE000             B.N      ??tls_prf_generic_8
   \                     ??tls_prf_generic_7: (+1)
   \       0xF4   0x4639             MOV      R1,R7
   \                     ??tls_prf_generic_8: (+1)
   \       0xF6   0x2000             MOVS     R0,#+0
   \       0xF8   0xE7D6             B.N      ??tls_prf_generic_5
    543              }
    544          
    545              mbedtls_md_free( &md_ctx );
   \                     ??tls_prf_generic_6: (+1)
   \       0xFA   0x....'....        BL       mbedtls_md_free
    546          
    547              mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
   \       0xFE   0x2180             MOVS     R1,#+128
   \      0x100   0xA813             ADD      R0,SP,#+76
   \      0x102   0x....'....        BL       mbedtls_platform_zeroize
    548              mbedtls_platform_zeroize( h_i, sizeof( h_i ) );
   \      0x106   0x2140             MOVS     R1,#+64
   \      0x108   0xA803             ADD      R0,SP,#+12
   \      0x10A   0x....'....        BL       mbedtls_platform_zeroize
    549          
    550              return( 0 );
   \      0x10E   0x2000             MOVS     R0,#+0
   \                     ??tls_prf_generic_1: (+1)
   \      0x110   0xB033             ADD      SP,SP,#+204
   \      0x112   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    551          }
    552          
    553          #if defined(MBEDTLS_SHA256_C)

   \                                 In section .text, align 2, keep-with-next
    554          static int tls_prf_sha256( const unsigned char *secret, size_t slen,
    555                                     const char *label,
    556                                     const unsigned char *random, size_t rlen,
    557                                     unsigned char *dstbuf, size_t dlen )
    558          {
   \                     tls_prf_sha256: (+1)
   \        0x0   0xB57F             PUSH     {R0-R6,LR}
   \        0x2   0x9C08             LDR      R4,[SP, #+32]
   \        0x4   0x9D09             LDR      R5,[SP, #+36]
   \        0x6   0x9E0A             LDR      R6,[SP, #+40]
    559              return( tls_prf_generic( MBEDTLS_MD_SHA256, secret, slen,
    560                                       label, random, rlen, dstbuf, dlen ) );
   \        0x8   0x9603             STR      R6,[SP, #+12]
   \        0xA   0x9502             STR      R5,[SP, #+8]
   \        0xC   0x9401             STR      R4,[SP, #+4]
   \        0xE   0x9300             STR      R3,[SP, #+0]
   \       0x10   0x4613             MOV      R3,R2
   \       0x12   0x460A             MOV      R2,R1
   \       0x14   0x4601             MOV      R1,R0
   \       0x16   0x2006             MOVS     R0,#+6
   \       0x18   0x....'....        BL       tls_prf_generic
   \       0x1C   0xB004             ADD      SP,SP,#+16
   \       0x1E   0xBD70             POP      {R4-R6,PC}       ;; return
    561          }
    562          #endif /* MBEDTLS_SHA256_C */
    563          
    564          #if defined(MBEDTLS_SHA512_C)

   \                                 In section .text, align 2, keep-with-next
    565          static int tls_prf_sha384( const unsigned char *secret, size_t slen,
    566                                     const char *label,
    567                                     const unsigned char *random, size_t rlen,
    568                                     unsigned char *dstbuf, size_t dlen )
    569          {
   \                     tls_prf_sha384: (+1)
   \        0x0   0xB57F             PUSH     {R0-R6,LR}
   \        0x2   0x9C08             LDR      R4,[SP, #+32]
   \        0x4   0x9D09             LDR      R5,[SP, #+36]
   \        0x6   0x9E0A             LDR      R6,[SP, #+40]
    570              return( tls_prf_generic( MBEDTLS_MD_SHA384, secret, slen,
    571                                       label, random, rlen, dstbuf, dlen ) );
   \        0x8   0x9603             STR      R6,[SP, #+12]
   \        0xA   0x9502             STR      R5,[SP, #+8]
   \        0xC   0x9401             STR      R4,[SP, #+4]
   \        0xE   0x9300             STR      R3,[SP, #+0]
   \       0x10   0x4613             MOV      R3,R2
   \       0x12   0x460A             MOV      R2,R1
   \       0x14   0x4601             MOV      R1,R0
   \       0x16   0x2007             MOVS     R0,#+7
   \       0x18   0x....'....        BL       tls_prf_generic
   \       0x1C   0xB004             ADD      SP,SP,#+16
   \       0x1E   0xBD70             POP      {R4-R6,PC}       ;; return
    572          }
    573          #endif /* MBEDTLS_SHA512_C */
    574          #endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
    575          
    576          static void ssl_update_checksum_start( mbedtls_ssl_context *, const unsigned char *, size_t );
    577          
    578          #if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1) || \
    579              defined(MBEDTLS_SSL_PROTO_TLS1_1)
    580          static void ssl_update_checksum_md5sha1( mbedtls_ssl_context *, const unsigned char *, size_t );
    581          #endif
    582          
    583          #if defined(MBEDTLS_SSL_PROTO_SSL3)
    584          static void ssl_calc_verify_ssl( mbedtls_ssl_context *, unsigned char * );
    585          static void ssl_calc_finished_ssl( mbedtls_ssl_context *, unsigned char *, int );
    586          #endif
    587          
    588          #if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1)
    589          static void ssl_calc_verify_tls( mbedtls_ssl_context *, unsigned char * );
    590          static void ssl_calc_finished_tls( mbedtls_ssl_context *, unsigned char *, int );
    591          #endif
    592          
    593          #if defined(MBEDTLS_SSL_PROTO_TLS1_2)
    594          #if defined(MBEDTLS_SHA256_C)
    595          static void ssl_update_checksum_sha256( mbedtls_ssl_context *, const unsigned char *, size_t );
    596          static void ssl_calc_verify_tls_sha256( mbedtls_ssl_context *,unsigned char * );
    597          static void ssl_calc_finished_tls_sha256( mbedtls_ssl_context *,unsigned char *, int );
    598          #endif
    599          
    600          #if defined(MBEDTLS_SHA512_C)
    601          static void ssl_update_checksum_sha384( mbedtls_ssl_context *, const unsigned char *, size_t );
    602          static void ssl_calc_verify_tls_sha384( mbedtls_ssl_context *, unsigned char * );
    603          static void ssl_calc_finished_tls_sha384( mbedtls_ssl_context *, unsigned char *, int );
    604          #endif
    605          #endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
    606          

   \                                 In section .text, align 4, keep-with-next
    607          int mbedtls_ssl_derive_keys( mbedtls_ssl_context *ssl )
    608          {
   \                     mbedtls_ssl_derive_keys: (+1)
   \        0x0   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \        0x4   0xB0DF             SUB      SP,SP,#+380
   \        0x6   0x4607             MOV      R7,R0
    609              int ret = 0;
    610              unsigned char tmp[64];
    611              unsigned char keyblk[256];
    612              unsigned char *key1;
    613              unsigned char *key2;
    614              unsigned char *mac_enc;
    615              unsigned char *mac_dec;
    616              size_t mac_key_len;
    617              size_t iv_copy_len;
    618              const mbedtls_cipher_info_t *cipher_info;
    619              const mbedtls_md_info_t *md_info;
    620          
    621              mbedtls_ssl_session *session = ssl->session_negotiate;
   \        0x8   0xF8D7 0x8038      LDR      R8,[R7, #+56]
    622              mbedtls_ssl_transform *transform = ssl->transform_negotiate;
   \        0xC   0xF8D7 0x904C      LDR      R9,[R7, #+76]
    623              mbedtls_ssl_handshake_params *handshake = ssl->handshake;
   \       0x10   0xF8D7 0xB03C      LDR      R11,[R7, #+60]
    624          
    625              MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> derive keys" ) );
   \       0x14   0x....'....        LDR.W    R10,??DataTable12
   \       0x18   0x....'....        LDR.W    R0,??DataTable13_2
   \       0x1C   0x9000             STR      R0,[SP, #+0]
   \       0x1E   0xF240 0x2371      MOVW     R3,#+625
   \       0x22   0x4652             MOV      R2,R10
   \       0x24   0x2102             MOVS     R1,#+2
   \       0x26   0x4638             MOV      R0,R7
   \       0x28   0x....'....        BL       mbedtls_debug_print_msg
    626          
    627              cipher_info = mbedtls_cipher_info_from_type( transform->ciphersuite_info->cipher );
   \       0x2C   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \       0x30   0x7A00             LDRB     R0,[R0, #+8]
   \       0x32   0x....'....        BL       mbedtls_cipher_info_from_type
   \       0x36   0x0005             MOVS     R5,R0
    628              if( cipher_info == NULL )
   \       0x38   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \       0x3C   0xD10E             BNE.N    ??mbedtls_ssl_derive_keys_1
    629              {
    630                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "cipher info for %d not found",
    631                                      transform->ciphersuite_info->cipher ) );
   \       0x3E   0x7A00             LDRB     R0,[R0, #+8]
   \       0x40   0x9001             STR      R0,[SP, #+4]
   \       0x42   0x....'....        LDR.W    R0,??DataTable13_3
   \       0x46   0x9000             STR      R0,[SP, #+0]
   \       0x48   0xF240 0x2377      MOVW     R3,#+631
   \       0x4C   0x4652             MOV      R2,R10
   \       0x4E   0x2101             MOVS     R1,#+1
   \       0x50   0x4638             MOV      R0,R7
   \       0x52   0x....'....        BL       mbedtls_debug_print_msg
    632                  return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   \       0x56   0x....'....        LDR.W    R0,??DataTable12_3  ;; 0xffff8f00
   \       0x5A   0xE31F             B.N      ??mbedtls_ssl_derive_keys_2
    633              }
    634          
    635              md_info = mbedtls_md_info_from_type( transform->ciphersuite_info->mac );
   \                     ??mbedtls_ssl_derive_keys_1: (+1)
   \       0x5C   0x7A40             LDRB     R0,[R0, #+9]
   \       0x5E   0x....'....        BL       mbedtls_md_info_from_type
   \       0x62   0x0006             MOVS     R6,R0
    636              if( md_info == NULL )
   \       0x64   0xD110             BNE.N    ??mbedtls_ssl_derive_keys_3
    637              {
    638                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "mbedtls_md info for %d not found",
    639                                      transform->ciphersuite_info->mac ) );
   \       0x66   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \       0x6A   0x7A40             LDRB     R0,[R0, #+9]
   \       0x6C   0x9001             STR      R0,[SP, #+4]
   \       0x6E   0x....'....        LDR.W    R0,??DataTable13_4
   \       0x72   0x9000             STR      R0,[SP, #+0]
   \       0x74   0xF240 0x237F      MOVW     R3,#+639
   \       0x78   0x4652             MOV      R2,R10
   \       0x7A   0x2101             MOVS     R1,#+1
   \       0x7C   0x4638             MOV      R0,R7
   \       0x7E   0x....'....        BL       mbedtls_debug_print_msg
    640                  return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   \       0x82   0x....'....        LDR.W    R0,??DataTable12_3  ;; 0xffff8f00
   \       0x86   0xE309             B.N      ??mbedtls_ssl_derive_keys_2
    641              }
    642          
    643              /*
    644               * Set appropriate PRF function and other SSL / TLS / TLS1.2 functions
    645               */
    646          #if defined(MBEDTLS_SSL_PROTO_SSL3)
    647              if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 )
    648              {
    649                  handshake->tls_prf = ssl3_prf;
    650                  handshake->calc_verify = ssl_calc_verify_ssl;
    651                  handshake->calc_finished = ssl_calc_finished_ssl;
    652              }
    653              else
    654          #endif
    655          #if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1)
    656              if( ssl->minor_ver < MBEDTLS_SSL_MINOR_VERSION_3 )
   \                     ??mbedtls_ssl_derive_keys_3: (+1)
   \       0x88   0x6978             LDR      R0,[R7, #+20]
   \       0x8A   0x2803             CMP      R0,#+3
   \       0x8C   0xDA3F             BGE.N    ??mbedtls_ssl_derive_keys_4
    657              {
    658                  handshake->tls_prf = tls1_prf;
   \       0x8E   0x....'....        LDR.W    R0,??DataTable13_5
   \       0x92   0xF8CB 0x0454      STR      R0,[R11, #+1108]
    659                  handshake->calc_verify = ssl_calc_verify_tls;
   \       0x96   0x....'....        LDR.W    R0,??DataTable13_6
   \       0x9A   0xF8CB 0x044C      STR      R0,[R11, #+1100]
    660                  handshake->calc_finished = ssl_calc_finished_tls;
   \       0x9E   0x....'....        LDR.W    R0,??DataTable13_7
   \       0xA2   0xF8CB 0x0450      STR      R0,[R11, #+1104]
    661              }
    662              else
    663          #endif
    664          #if defined(MBEDTLS_SSL_PROTO_TLS1_2)
    665          #if defined(MBEDTLS_SHA512_C)
    666              if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 &&
    667                  transform->ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
    668              {
    669                  handshake->tls_prf = tls_prf_sha384;
    670                  handshake->calc_verify = ssl_calc_verify_tls_sha384;
    671                  handshake->calc_finished = ssl_calc_finished_tls_sha384;
    672              }
    673              else
    674          #endif
    675          #if defined(MBEDTLS_SHA256_C)
    676              if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
    677              {
    678                  handshake->tls_prf = tls_prf_sha256;
    679                  handshake->calc_verify = ssl_calc_verify_tls_sha256;
    680                  handshake->calc_finished = ssl_calc_finished_tls_sha256;
    681              }
    682              else
    683          #endif
    684          #endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
    685              {
    686                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
    687                  return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    688              }
    689          
    690              /*
    691               * SSLv3:
    692               *   master =
    693               *     MD5( premaster + SHA1( 'A'   + premaster + randbytes ) ) +
    694               *     MD5( premaster + SHA1( 'BB'  + premaster + randbytes ) ) +
    695               *     MD5( premaster + SHA1( 'CCC' + premaster + randbytes ) )
    696               *
    697               * TLSv1+:
    698               *   master = PRF( premaster, "master secret", randbytes )[0..47]
    699               */
    700              if( handshake->resume == 0 )
   \                     ??mbedtls_ssl_derive_keys_5: (+1)
   \       0xA6   0xF8DB 0x06C0      LDR      R0,[R11, #+1728]
   \       0xAA   0x2800             CMP      R0,#+0
   \       0xAC   0xF040 0x80B5      BNE.W    ??mbedtls_ssl_derive_keys_6
    701              {
    702                  MBEDTLS_SSL_DEBUG_BUF( 3, "premaster secret", handshake->premaster,
    703                                 handshake->pmslen );
   \       0xB0   0xF8DB 0x0458      LDR      R0,[R11, #+1112]
   \       0xB4   0x9002             STR      R0,[SP, #+8]
   \       0xB6   0xF20B 0x409C      ADDW     R0,R11,#+1180
   \       0xBA   0x9001             STR      R0,[SP, #+4]
   \       0xBC   0x....'....        LDR.W    R0,??DataTable13_8
   \       0xC0   0x9000             STR      R0,[SP, #+0]
   \       0xC2   0xF240 0x23BF      MOVW     R3,#+703
   \       0xC6   0x4652             MOV      R2,R10
   \       0xC8   0x2103             MOVS     R1,#+3
   \       0xCA   0x4638             MOV      R0,R7
   \       0xCC   0x....'....        BL       mbedtls_debug_print_buf
    704          
    705          #if defined(MBEDTLS_SSL_EXTENDED_MASTER_SECRET)
    706                  if( ssl->handshake->extended_ms == MBEDTLS_SSL_EXTENDED_MS_ENABLED )
   \       0xD0   0x6BF8             LDR      R0,[R7, #+60]
   \       0xD2   0xF8D0 0x06D4      LDR      R0,[R0, #+1748]
   \       0xD6   0x2801             CMP      R0,#+1
   \       0xD8   0xD177             BNE.N    ??mbedtls_ssl_derive_keys_7
    707                  {
    708                      unsigned char session_hash[48];
    709                      size_t hash_len;
    710          
    711                      MBEDTLS_SSL_DEBUG_MSG( 3, ( "using extended master secret" ) );
   \       0xDA   0x....'....        LDR.W    R0,??DataTable13_9
   \       0xDE   0x9000             STR      R0,[SP, #+0]
   \       0xE0   0xF240 0x23C7      MOVW     R3,#+711
   \       0xE4   0x4652             MOV      R2,R10
   \       0xE6   0x2103             MOVS     R1,#+3
   \       0xE8   0x4638             MOV      R0,R7
   \       0xEA   0x....'....        BL       mbedtls_debug_print_msg
    712          
    713                      ssl->handshake->calc_verify( ssl, session_hash );
   \       0xEE   0xA903             ADD      R1,SP,#+12
   \       0xF0   0x4638             MOV      R0,R7
   \       0xF2   0x6BFA             LDR      R2,[R7, #+60]
   \       0xF4   0xF8D2 0x244C      LDR      R2,[R2, #+1100]
   \       0xF8   0x4790             BLX      R2
    714          
    715          #if defined(MBEDTLS_SSL_PROTO_TLS1_2)
    716                      if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
   \       0xFA   0x6978             LDR      R0,[R7, #+20]
   \       0xFC   0x2803             CMP      R0,#+3
   \       0xFE   0xD138             BNE.N    ??mbedtls_ssl_derive_keys_8
    717                      {
    718          #if defined(MBEDTLS_SHA512_C)
    719                          if( ssl->transform_negotiate->ciphersuite_info->mac ==
    720                              MBEDTLS_MD_SHA384 )
   \      0x100   0x6CF8             LDR      R0,[R7, #+76]
   \      0x102   0x6800             LDR      R0,[R0, #+0]
   \      0x104   0x7A40             LDRB     R0,[R0, #+9]
   \      0x106   0x2807             CMP      R0,#+7
   \      0x108   0xD131             BNE.N    ??mbedtls_ssl_derive_keys_9
    721                          {
    722                              hash_len = 48;
   \      0x10A   0x2430             MOVS     R4,#+48
   \      0x10C   0xE032             B.N      ??mbedtls_ssl_derive_keys_10
    723                          }
   \                     ??mbedtls_ssl_derive_keys_4: (+1)
   \      0x10E   0xD111             BNE.N    ??mbedtls_ssl_derive_keys_11
   \      0x110   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \      0x114   0x7A40             LDRB     R0,[R0, #+9]
   \      0x116   0x2807             CMP      R0,#+7
   \      0x118   0xD10C             BNE.N    ??mbedtls_ssl_derive_keys_11
   \      0x11A   0x....'....        LDR.W    R0,??DataTable13_10
   \      0x11E   0xF8CB 0x0454      STR      R0,[R11, #+1108]
   \      0x122   0x....'....        LDR.W    R0,??DataTable13_11
   \      0x126   0xF8CB 0x044C      STR      R0,[R11, #+1100]
   \      0x12A   0x....'....        LDR.W    R0,??DataTable13_12
   \      0x12E   0xF8CB 0x0450      STR      R0,[R11, #+1104]
   \      0x132   0xE7B8             B.N      ??mbedtls_ssl_derive_keys_5
   \                     ??mbedtls_ssl_derive_keys_11: (+1)
   \      0x134   0x6978             LDR      R0,[R7, #+20]
   \      0x136   0x2803             CMP      R0,#+3
   \      0x138   0xD10C             BNE.N    ??mbedtls_ssl_derive_keys_12
   \      0x13A   0x....'....        LDR.W    R0,??DataTable13_13
   \      0x13E   0xF8CB 0x0454      STR      R0,[R11, #+1108]
   \      0x142   0x....'....        LDR.W    R0,??DataTable13_14
   \      0x146   0xF8CB 0x044C      STR      R0,[R11, #+1100]
   \      0x14A   0x....'....        LDR.W    R0,??DataTable13_15
   \      0x14E   0xF8CB 0x0450      STR      R0,[R11, #+1104]
   \      0x152   0xE7A8             B.N      ??mbedtls_ssl_derive_keys_5
   \                     ??mbedtls_ssl_derive_keys_12: (+1)
   \      0x154   0x....'....        LDR.W    R0,??DataTable13_16
   \      0x158   0x9000             STR      R0,[SP, #+0]
   \      0x15A   0xF240 0x23AE      MOVW     R3,#+686
   \      0x15E   0x4652             MOV      R2,R10
   \      0x160   0x2101             MOVS     R1,#+1
   \      0x162   0x4638             MOV      R0,R7
   \      0x164   0x....'....        BL       mbedtls_debug_print_msg
   \      0x168   0x....'....        LDR.W    R0,??DataTable12_1  ;; 0xffff9400
   \      0x16C   0xE296             B.N      ??mbedtls_ssl_derive_keys_2
    724                          else
    725          #endif
    726                              hash_len = 32;
   \                     ??mbedtls_ssl_derive_keys_9: (+1)
   \      0x16E   0x2420             MOVS     R4,#+32
   \      0x170   0xE000             B.N      ??mbedtls_ssl_derive_keys_10
    727                      }
    728                      else
    729          #endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
    730                          hash_len = 36;
   \                     ??mbedtls_ssl_derive_keys_8: (+1)
   \      0x172   0x2424             MOVS     R4,#+36
    731          
    732                      MBEDTLS_SSL_DEBUG_BUF( 3, "session hash", session_hash, hash_len );
   \                     ??mbedtls_ssl_derive_keys_10: (+1)
   \      0x174   0x9402             STR      R4,[SP, #+8]
   \      0x176   0xA803             ADD      R0,SP,#+12
   \      0x178   0x9001             STR      R0,[SP, #+4]
   \      0x17A   0x....'....        LDR.W    R0,??DataTable13_17
   \      0x17E   0x9000             STR      R0,[SP, #+0]
   \      0x180   0xF44F 0x7337      MOV      R3,#+732
   \      0x184   0x4652             MOV      R2,R10
   \      0x186   0x2103             MOVS     R1,#+3
   \      0x188   0x4638             MOV      R0,R7
   \      0x18A   0x....'....        BL       mbedtls_debug_print_buf
    733          
    734                      ret = handshake->tls_prf( handshake->premaster, handshake->pmslen,
    735                                                "extended master secret",
    736                                                session_hash, hash_len,
    737                                                session->master, 48 );
   \      0x18E   0x2030             MOVS     R0,#+48
   \      0x190   0x9002             STR      R0,[SP, #+8]
   \      0x192   0xF108 0x002C      ADD      R0,R8,#+44
   \      0x196   0x9001             STR      R0,[SP, #+4]
   \      0x198   0x9400             STR      R4,[SP, #+0]
   \      0x19A   0xAB03             ADD      R3,SP,#+12
   \      0x19C   0x....'....        LDR.W    R2,??DataTable13_18
   \      0x1A0   0xF8DB 0x1458      LDR      R1,[R11, #+1112]
   \      0x1A4   0xF20B 0x409C      ADDW     R0,R11,#+1180
   \      0x1A8   0xF8DB 0x4454      LDR      R4,[R11, #+1108]
   \      0x1AC   0x47A0             BLX      R4
   \      0x1AE   0x0004             MOVS     R4,R0
    738                      if( ret != 0 )
   \      0x1B0   0xD01E             BEQ.N    ??mbedtls_ssl_derive_keys_13
    739                      {
    740                          MBEDTLS_SSL_DEBUG_RET( 1, "prf", ret );
   \      0x1B2   0x9401             STR      R4,[SP, #+4]
   \      0x1B4   0xA095             ADR.N    R0,??mbedtls_ssl_derive_keys_0  ;; "prf"
   \      0x1B6   0x9000             STR      R0,[SP, #+0]
   \      0x1B8   0xF44F 0x7339      MOV      R3,#+740
   \      0x1BC   0x4652             MOV      R2,R10
   \      0x1BE   0x2101             MOVS     R1,#+1
   \      0x1C0   0x4638             MOV      R0,R7
   \      0x1C2   0x....'....        BL       mbedtls_debug_print_ret
    741                          return( ret );
   \      0x1C6   0x4620             MOV      R0,R4
   \      0x1C8   0xE268             B.N      ??mbedtls_ssl_derive_keys_2
    742                      }
    743          
    744                  }
    745                  else
    746          #endif
    747                  ret = handshake->tls_prf( handshake->premaster, handshake->pmslen,
    748                                            "master secret",
    749                                            handshake->randbytes, 64,
    750                                            session->master, 48 );
   \                     ??mbedtls_ssl_derive_keys_7: (+1)
   \      0x1CA   0x2030             MOVS     R0,#+48
   \      0x1CC   0x9002             STR      R0,[SP, #+8]
   \      0x1CE   0xF108 0x002C      ADD      R0,R8,#+44
   \      0x1D2   0x9001             STR      R0,[SP, #+4]
   \      0x1D4   0x2040             MOVS     R0,#+64
   \      0x1D6   0x9000             STR      R0,[SP, #+0]
   \      0x1D8   0xF20B 0x435C      ADDW     R3,R11,#+1116
   \      0x1DC   0x....'....        LDR.W    R2,??DataTable13_19
   \      0x1E0   0xF8DB 0x1458      LDR      R1,[R11, #+1112]
   \      0x1E4   0xF20B 0x409C      ADDW     R0,R11,#+1180
   \      0x1E8   0xF8DB 0x4454      LDR      R4,[R11, #+1108]
   \      0x1EC   0x47A0             BLX      R4
   \      0x1EE   0x4604             MOV      R4,R0
    751                  if( ret != 0 )
   \                     ??mbedtls_ssl_derive_keys_13: (+1)
   \      0x1F0   0x2C00             CMP      R4,#+0
   \      0x1F2   0xD00B             BEQ.N    ??mbedtls_ssl_derive_keys_14
    752                  {
    753                      MBEDTLS_SSL_DEBUG_RET( 1, "prf", ret );
   \      0x1F4   0x9401             STR      R4,[SP, #+4]
   \      0x1F6   0xA085             ADR.N    R0,??mbedtls_ssl_derive_keys_0  ;; "prf"
   \      0x1F8   0x9000             STR      R0,[SP, #+0]
   \      0x1FA   0xF240 0x23F1      MOVW     R3,#+753
   \      0x1FE   0x4652             MOV      R2,R10
   \      0x200   0x2101             MOVS     R1,#+1
   \      0x202   0x4638             MOV      R0,R7
   \      0x204   0x....'....        BL       mbedtls_debug_print_ret
    754                      return( ret );
   \      0x208   0x4620             MOV      R0,R4
   \      0x20A   0xE247             B.N      ??mbedtls_ssl_derive_keys_2
    755                  }
    756          
    757                  mbedtls_platform_zeroize( handshake->premaster,
    758                                            sizeof(handshake->premaster) );
   \                     ??mbedtls_ssl_derive_keys_14: (+1)
   \      0x20C   0xF44F 0x7109      MOV      R1,#+548
   \      0x210   0xF20B 0x409C      ADDW     R0,R11,#+1180
   \      0x214   0x....'....        BL       mbedtls_platform_zeroize
   \      0x218   0xE009             B.N      ??mbedtls_ssl_derive_keys_15
    759              }
    760              else
    761                  MBEDTLS_SSL_DEBUG_MSG( 3, ( "no premaster (session resumed)" ) );
   \                     ??mbedtls_ssl_derive_keys_6: (+1)
   \      0x21A   0x....'....        LDR.W    R0,??DataTable13_20
   \      0x21E   0x9000             STR      R0,[SP, #+0]
   \      0x220   0xF240 0x23F9      MOVW     R3,#+761
   \      0x224   0x4652             MOV      R2,R10
   \      0x226   0x2103             MOVS     R1,#+3
   \      0x228   0x4638             MOV      R0,R7
   \      0x22A   0x....'....        BL       mbedtls_debug_print_msg
    762          
    763              /*
    764               * Swap the client and server random values.
    765               */
    766              memcpy( tmp, handshake->randbytes, 64 );
   \                     ??mbedtls_ssl_derive_keys_15: (+1)
   \      0x22E   0x2240             MOVS     R2,#+64
   \      0x230   0xF20B 0x415C      ADDW     R1,R11,#+1116
   \      0x234   0xA84F             ADD      R0,SP,#+316
   \      0x236   0x....'....        BL       __aeabi_memcpy4
    767              memcpy( handshake->randbytes, tmp + 32, 32 );
   \      0x23A   0x2220             MOVS     R2,#+32
   \      0x23C   0xA957             ADD      R1,SP,#+348
   \      0x23E   0xF20B 0x405C      ADDW     R0,R11,#+1116
   \      0x242   0x....'....        BL       __aeabi_memcpy4
    768              memcpy( handshake->randbytes + 32, tmp, 32 );
   \      0x246   0x2220             MOVS     R2,#+32
   \      0x248   0xA94F             ADD      R1,SP,#+316
   \      0x24A   0xF20B 0x407C      ADDW     R0,R11,#+1148
   \      0x24E   0x....'....        BL       __aeabi_memcpy4
    769              mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
   \      0x252   0x2140             MOVS     R1,#+64
   \      0x254   0xA84F             ADD      R0,SP,#+316
   \      0x256   0x....'....        BL       mbedtls_platform_zeroize
    770          
    771              /*
    772               *  SSLv3:
    773               *    key block =
    774               *      MD5( master + SHA1( 'A'    + master + randbytes ) ) +
    775               *      MD5( master + SHA1( 'BB'   + master + randbytes ) ) +
    776               *      MD5( master + SHA1( 'CCC'  + master + randbytes ) ) +
    777               *      MD5( master + SHA1( 'DDDD' + master + randbytes ) ) +
    778               *      ...
    779               *
    780               *  TLSv1:
    781               *    key block = PRF( master, "key expansion", randbytes )
    782               */
    783              ret = handshake->tls_prf( session->master, 48, "key expansion",
    784                                        handshake->randbytes, 64, keyblk, 256 );
   \      0x25A   0xF44F 0x7080      MOV      R0,#+256
   \      0x25E   0x9002             STR      R0,[SP, #+8]
   \      0x260   0xA80F             ADD      R0,SP,#+60
   \      0x262   0x9001             STR      R0,[SP, #+4]
   \      0x264   0x2040             MOVS     R0,#+64
   \      0x266   0x9000             STR      R0,[SP, #+0]
   \      0x268   0xF20B 0x435C      ADDW     R3,R11,#+1116
   \      0x26C   0x....'....        LDR.W    R2,??DataTable13_21
   \      0x270   0x2130             MOVS     R1,#+48
   \      0x272   0xF108 0x002C      ADD      R0,R8,#+44
   \      0x276   0xF8DB 0x4454      LDR      R4,[R11, #+1108]
   \      0x27A   0x47A0             BLX      R4
   \      0x27C   0x0004             MOVS     R4,R0
    785              if( ret != 0 )
   \      0x27E   0xD00B             BEQ.N    ??mbedtls_ssl_derive_keys_16
    786              {
    787                  MBEDTLS_SSL_DEBUG_RET( 1, "prf", ret );
   \      0x280   0x9401             STR      R4,[SP, #+4]
   \      0x282   0xA062             ADR.N    R0,??mbedtls_ssl_derive_keys_0  ;; "prf"
   \      0x284   0x9000             STR      R0,[SP, #+0]
   \      0x286   0xF240 0x3313      MOVW     R3,#+787
   \      0x28A   0x4652             MOV      R2,R10
   \      0x28C   0x2101             MOVS     R1,#+1
   \      0x28E   0x4638             MOV      R0,R7
   \      0x290   0x....'....        BL       mbedtls_debug_print_ret
    788                  return( ret );
   \      0x294   0x4620             MOV      R0,R4
   \      0x296   0xE201             B.N      ??mbedtls_ssl_derive_keys_2
    789              }
    790          
    791              MBEDTLS_SSL_DEBUG_MSG( 3, ( "ciphersuite = %s",
    792                             mbedtls_ssl_get_ciphersuite_name( session->ciphersuite ) ) );
   \                     ??mbedtls_ssl_derive_keys_16: (+1)
   \      0x298   0xF8D8 0x0000      LDR      R0,[R8, #+0]
   \      0x29C   0x....'....        BL       mbedtls_ssl_get_ciphersuite_name
   \      0x2A0   0x9001             STR      R0,[SP, #+4]
   \      0x2A2   0x....'....        LDR.W    R0,??DataTable13_22
   \      0x2A6   0x9000             STR      R0,[SP, #+0]
   \      0x2A8   0xF44F 0x7346      MOV      R3,#+792
   \      0x2AC   0x4652             MOV      R2,R10
   \      0x2AE   0x2103             MOVS     R1,#+3
   \      0x2B0   0x4638             MOV      R0,R7
   \      0x2B2   0x....'....        BL       mbedtls_debug_print_msg
    793              MBEDTLS_SSL_DEBUG_BUF( 3, "master secret", session->master, 48 );
   \      0x2B6   0x2030             MOVS     R0,#+48
   \      0x2B8   0x9002             STR      R0,[SP, #+8]
   \      0x2BA   0xF108 0x002C      ADD      R0,R8,#+44
   \      0x2BE   0x9001             STR      R0,[SP, #+4]
   \      0x2C0   0x....'....        LDR.W    R0,??DataTable13_19
   \      0x2C4   0x9000             STR      R0,[SP, #+0]
   \      0x2C6   0xF240 0x3319      MOVW     R3,#+793
   \      0x2CA   0x4652             MOV      R2,R10
   \      0x2CC   0x2103             MOVS     R1,#+3
   \      0x2CE   0x4638             MOV      R0,R7
   \      0x2D0   0x....'....        BL       mbedtls_debug_print_buf
    794              MBEDTLS_SSL_DEBUG_BUF( 4, "random bytes", handshake->randbytes, 64 );
   \      0x2D4   0x2040             MOVS     R0,#+64
   \      0x2D6   0x9002             STR      R0,[SP, #+8]
   \      0x2D8   0xF20B 0x405C      ADDW     R0,R11,#+1116
   \      0x2DC   0x9001             STR      R0,[SP, #+4]
   \      0x2DE   0x....'....        LDR.W    R0,??DataTable13_23
   \      0x2E2   0x9000             STR      R0,[SP, #+0]
   \      0x2E4   0xF240 0x331A      MOVW     R3,#+794
   \      0x2E8   0x4652             MOV      R2,R10
   \      0x2EA   0x2104             MOVS     R1,#+4
   \      0x2EC   0x4638             MOV      R0,R7
   \      0x2EE   0x....'....        BL       mbedtls_debug_print_buf
    795              MBEDTLS_SSL_DEBUG_BUF( 4, "key block", keyblk, 256 );
   \      0x2F2   0xF44F 0x7080      MOV      R0,#+256
   \      0x2F6   0x9002             STR      R0,[SP, #+8]
   \      0x2F8   0xA80F             ADD      R0,SP,#+60
   \      0x2FA   0x9001             STR      R0,[SP, #+4]
   \      0x2FC   0x....'....        LDR.W    R0,??DataTable13_24
   \      0x300   0x9000             STR      R0,[SP, #+0]
   \      0x302   0xF240 0x331B      MOVW     R3,#+795
   \      0x306   0x4652             MOV      R2,R10
   \      0x308   0x2104             MOVS     R1,#+4
   \      0x30A   0x4638             MOV      R0,R7
   \      0x30C   0x....'....        BL       mbedtls_debug_print_buf
    796          
    797              mbedtls_platform_zeroize( handshake->randbytes,
    798                                        sizeof( handshake->randbytes ) );
   \      0x310   0x2140             MOVS     R1,#+64
   \      0x312   0xF20B 0x405C      ADDW     R0,R11,#+1116
   \      0x316   0x....'....        BL       mbedtls_platform_zeroize
    799          
    800              /*
    801               * Determine the appropriate key, IV and MAC length.
    802               */
    803          
    804              transform->keylen = cipher_info->key_bitlen / 8;
   \      0x31A   0x6868             LDR      R0,[R5, #+4]
   \      0x31C   0x08C0             LSRS     R0,R0,#+3
   \      0x31E   0xF8C9 0x0004      STR      R0,[R9, #+4]
    805          
    806              if( cipher_info->mode == MBEDTLS_MODE_GCM ||
    807                  cipher_info->mode == MBEDTLS_MODE_CCM ||
    808                  cipher_info->mode == MBEDTLS_MODE_CHACHAPOLY )
   \      0x322   0x7868             LDRB     R0,[R5, #+1]
   \      0x324   0x2806             CMP      R0,#+6
   \      0x326   0xD003             BEQ.N    ??mbedtls_ssl_derive_keys_17
   \      0x328   0x2808             CMP      R0,#+8
   \      0x32A   0xD001             BEQ.N    ??mbedtls_ssl_derive_keys_17
   \      0x32C   0x280A             CMP      R0,#+10
   \      0x32E   0xD14F             BNE.N    ??mbedtls_ssl_derive_keys_18
    809              {
    810                  size_t taglen, explicit_ivlen;
    811          
    812                  transform->maclen = 0;
   \                     ??mbedtls_ssl_derive_keys_17: (+1)
   \      0x330   0x2000             MOVS     R0,#+0
   \      0x332   0xF8C9 0x0014      STR      R0,[R9, #+20]
    813                  mac_key_len = 0;
   \      0x336   0x4604             MOV      R4,R0
    814          
    815                  /* All modes haves 96-bit IVs;
    816                   * GCM and CCM has 4 implicit and 8 explicit bytes
    817                   * ChachaPoly has all 12 bytes implicit
    818                   */
    819                  transform->ivlen = 12;
   \      0x338   0x200C             MOVS     R0,#+12
   \      0x33A   0xF8C9 0x000C      STR      R0,[R9, #+12]
    820                  if( cipher_info->mode == MBEDTLS_MODE_CHACHAPOLY )
   \      0x33E   0x7868             LDRB     R0,[R5, #+1]
   \      0x340   0x280A             CMP      R0,#+10
   \      0x342   0xD103             BNE.N    ??mbedtls_ssl_derive_keys_19
    821                      transform->fixed_ivlen = 12;
   \      0x344   0x200C             MOVS     R0,#+12
   \      0x346   0xF8C9 0x0010      STR      R0,[R9, #+16]
   \      0x34A   0xE002             B.N      ??mbedtls_ssl_derive_keys_20
    822                  else
    823                      transform->fixed_ivlen = 4;
   \                     ??mbedtls_ssl_derive_keys_19: (+1)
   \      0x34C   0x2004             MOVS     R0,#+4
   \      0x34E   0xF8C9 0x0010      STR      R0,[R9, #+16]
    824          
    825                  /* All modes have 128-bit tags, except CCM_8 (ciphersuite flag) */
    826                  taglen = transform->ciphersuite_info->flags &
    827                            MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
   \                     ??mbedtls_ssl_derive_keys_20: (+1)
   \      0x352   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \      0x356   0x7F00             LDRB     R0,[R0, #+28]
   \      0x358   0x0780             LSLS     R0,R0,#+30
   \      0x35A   0xD501             BPL.N    ??mbedtls_ssl_derive_keys_21
   \      0x35C   0x2108             MOVS     R1,#+8
   \      0x35E   0xE000             B.N      ??mbedtls_ssl_derive_keys_22
   \                     ??mbedtls_ssl_derive_keys_21: (+1)
   \      0x360   0x2110             MOVS     R1,#+16
    828          
    829          
    830                  /* Minimum length of encrypted record */
    831                  explicit_ivlen = transform->ivlen - transform->fixed_ivlen;
    832                  transform->minlen = explicit_ivlen + taglen;
   \                     ??mbedtls_ssl_derive_keys_22: (+1)
   \      0x362   0x220C             MOVS     R2,#+12
   \      0x364   0xF8D9 0x0010      LDR      R0,[R9, #+16]
   \      0x368   0x1A12             SUBS     R2,R2,R0
   \      0x36A   0x1889             ADDS     R1,R1,R2
   \      0x36C   0xF8C9 0x1008      STR      R1,[R9, #+8]
    833              }
    834              else
    835              {
    836                  /* Initialize HMAC contexts */
    837                  if( ( ret = mbedtls_md_setup( &transform->md_ctx_enc, md_info, 1 ) ) != 0 ||
    838                      ( ret = mbedtls_md_setup( &transform->md_ctx_dec, md_info, 1 ) ) != 0 )
    839                  {
    840                      MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_setup", ret );
    841                      return( ret );
    842                  }
    843          
    844                  /* Get MAC length */
    845                  mac_key_len = mbedtls_md_get_size( md_info );
    846                  transform->maclen = mac_key_len;
    847          
    848          #if defined(MBEDTLS_SSL_TRUNCATED_HMAC)
    849                  /*
    850                   * If HMAC is to be truncated, we shall keep the leftmost bytes,
    851                   * (rfc 6066 page 13 or rfc 2104 section 4),
    852                   * so we only need to adjust the length here.
    853                   */
    854                  if( session->trunc_hmac == MBEDTLS_SSL_TRUNC_HMAC_ENABLED )
    855                  {
    856                      transform->maclen = MBEDTLS_SSL_TRUNCATED_HMAC_LEN;
    857          
    858          #if defined(MBEDTLS_SSL_TRUNCATED_HMAC_COMPAT)
    859                      /* Fall back to old, non-compliant version of the truncated
    860                       * HMAC implementation which also truncates the key
    861                       * (Mbed TLS versions from 1.3 to 2.6.0) */
    862                      mac_key_len = transform->maclen;
    863          #endif
    864                  }
    865          #endif /* MBEDTLS_SSL_TRUNCATED_HMAC */
    866          
    867                  /* IV length */
    868                  transform->ivlen = cipher_info->iv_size;
    869          
    870                  /* Minimum length */
    871                  if( cipher_info->mode == MBEDTLS_MODE_STREAM )
    872                      transform->minlen = transform->maclen;
    873                  else
    874                  {
    875                      /*
    876                       * GenericBlockCipher:
    877                       * 1. if EtM is in use: one block plus MAC
    878                       *    otherwise: * first multiple of blocklen greater than maclen
    879                       * 2. IV except for SSL3 and TLS 1.0
    880                       */
    881          #if defined(MBEDTLS_SSL_ENCRYPT_THEN_MAC)
    882                      if( session->encrypt_then_mac == MBEDTLS_SSL_ETM_ENABLED )
    883                      {
    884                          transform->minlen = transform->maclen
    885                                            + cipher_info->block_size;
    886                      }
    887                      else
    888          #endif
    889                      {
    890                          transform->minlen = transform->maclen
    891                                            + cipher_info->block_size
    892                                            - transform->maclen % cipher_info->block_size;
    893                      }
    894          
    895          #if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1)
    896                      if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ||
    897                          ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_1 )
    898                          ; /* No need to adjust minlen */
    899                      else
    900          #endif
    901          #if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
    902                      if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_2 ||
    903                          ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
    904                      {
    905                          transform->minlen += transform->ivlen;
    906                      }
    907                      else
    908          #endif
    909                      {
    910                          MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
    911                          return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    912                      }
    913                  }
    914              }
    915          
    916              MBEDTLS_SSL_DEBUG_MSG( 3, ( "keylen: %d, minlen: %d, ivlen: %d, maclen: %d",
    917                             transform->keylen, transform->minlen, transform->ivlen,
    918                             transform->maclen ) );
   \                     ??mbedtls_ssl_derive_keys_23: (+1)
   \      0x370   0xF8D9 0x0014      LDR      R0,[R9, #+20]
   \      0x374   0x9004             STR      R0,[SP, #+16]
   \      0x376   0xF8D9 0x000C      LDR      R0,[R9, #+12]
   \      0x37A   0x9003             STR      R0,[SP, #+12]
   \      0x37C   0xF8D9 0x0008      LDR      R0,[R9, #+8]
   \      0x380   0x9002             STR      R0,[SP, #+8]
   \      0x382   0xF8D9 0x0004      LDR      R0,[R9, #+4]
   \      0x386   0x9001             STR      R0,[SP, #+4]
   \      0x388   0x....'....        LDR.W    R0,??DataTable14
   \      0x38C   0x9000             STR      R0,[SP, #+0]
   \      0x38E   0xF240 0x3396      MOVW     R3,#+918
   \      0x392   0x4652             MOV      R2,R10
   \      0x394   0x2103             MOVS     R1,#+3
   \      0x396   0x4638             MOV      R0,R7
   \      0x398   0x....'....        BL       mbedtls_debug_print_msg
    919          
    920              /*
    921               * Finally setup the cipher contexts, IVs and MAC secrets.
    922               */
    923          #if defined(MBEDTLS_SSL_CLI_C)
    924              if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
   \      0x39C   0x6838             LDR      R0,[R7, #+0]
   \      0x39E   0xF890 0x00CC      LDRB     R0,[R0, #+204]
   \      0x3A2   0x07C0             LSLS     R0,R0,#+31
   \      0x3A4   0xA80F             ADD      R0,SP,#+60
   \      0x3A6   0xEB00 0x0044      ADD      R0,R0,R4, LSL #+1
   \      0x3AA   0xF100 0x8092      BMI.W    ??mbedtls_ssl_derive_keys_24
    925              {
    926                  key1 = keyblk + mac_key_len * 2;
   \      0x3AE   0x9002             STR      R0,[SP, #+8]
    927                  key2 = keyblk + mac_key_len * 2 + transform->keylen;
   \      0x3B0   0xA80F             ADD      R0,SP,#+60
   \      0x3B2   0xEB00 0x0044      ADD      R0,R0,R4, LSL #+1
   \      0x3B6   0xF8D9 0x1004      LDR      R1,[R9, #+4]
   \      0x3BA   0x1846             ADDS     R6,R0,R1
    928          
    929                  mac_enc = keyblk;
   \      0x3BC   0xA80F             ADD      R0,SP,#+60
   \      0x3BE   0x9001             STR      R0,[SP, #+4]
    930                  mac_dec = keyblk + mac_key_len;
   \      0x3C0   0x4420             ADD      R0,R0,R4
   \      0x3C2   0x9000             STR      R0,[SP, #+0]
    931          
    932                  /*
    933                   * This is not used in TLS v1.1.
    934                   */
    935                  iv_copy_len = ( transform->fixed_ivlen ) ?
    936                                      transform->fixed_ivlen : transform->ivlen;
   \      0x3C4   0xF8D9 0x0010      LDR      R0,[R9, #+16]
   \      0x3C8   0x2800             CMP      R0,#+0
   \      0x3CA   0xD06D             BEQ.N    ??mbedtls_ssl_derive_keys_25
   \      0x3CC   0x4683             MOV      R11,R0
   \      0x3CE   0xE06D             B.N      ??mbedtls_ssl_derive_keys_26
   \                     ??mbedtls_ssl_derive_keys_18: (+1)
   \      0x3D0   0x2201             MOVS     R2,#+1
   \      0x3D2   0x4631             MOV      R1,R6
   \      0x3D4   0xF109 0x0038      ADD      R0,R9,#+56
   \      0x3D8   0x....'....        BL       mbedtls_md_setup
   \      0x3DC   0x0004             MOVS     R4,R0
   \      0x3DE   0xD107             BNE.N    ??mbedtls_ssl_derive_keys_27
   \      0x3E0   0x2201             MOVS     R2,#+1
   \      0x3E2   0x4631             MOV      R1,R6
   \      0x3E4   0xF109 0x0044      ADD      R0,R9,#+68
   \      0x3E8   0x....'....        BL       mbedtls_md_setup
   \      0x3EC   0x0004             MOVS     R4,R0
   \      0x3EE   0xD00F             BEQ.N    ??mbedtls_ssl_derive_keys_28
   \                     ??mbedtls_ssl_derive_keys_27: (+1)
   \      0x3F0   0x9401             STR      R4,[SP, #+4]
   \      0x3F2   0x....'....        LDR.W    R0,??DataTable14_1
   \      0x3F6   0x9000             STR      R0,[SP, #+0]
   \      0x3F8   0xF44F 0x7352      MOV      R3,#+840
   \      0x3FC   0x4652             MOV      R2,R10
   \      0x3FE   0x2101             MOVS     R1,#+1
   \      0x400   0x4638             MOV      R0,R7
   \      0x402   0x....'....        BL       mbedtls_debug_print_ret
   \      0x406   0x4620             MOV      R0,R4
   \      0x408   0xE148             B.N      ??mbedtls_ssl_derive_keys_2
   \      0x40A   0xBF00             Nop      
   \                     ??mbedtls_ssl_derive_keys_0:
   \      0x40C   0x70 0x72          DC8      "prf"
   \              0x66 0x00    
   \                     ??mbedtls_ssl_derive_keys_28: (+1)
   \      0x410   0x4630             MOV      R0,R6
   \      0x412   0x....'....        BL       mbedtls_md_get_size
   \      0x416   0x4604             MOV      R4,R0
   \      0x418   0xF8C9 0x4014      STR      R4,[R9, #+20]
   \      0x41C   0xF8D8 0x0074      LDR      R0,[R8, #+116]
   \      0x420   0x2801             CMP      R0,#+1
   \      0x422   0xD102             BNE.N    ??mbedtls_ssl_derive_keys_29
   \      0x424   0x200A             MOVS     R0,#+10
   \      0x426   0xF8C9 0x0014      STR      R0,[R9, #+20]
   \                     ??mbedtls_ssl_derive_keys_29: (+1)
   \      0x42A   0x68E8             LDR      R0,[R5, #+12]
   \      0x42C   0xF8C9 0x000C      STR      R0,[R9, #+12]
   \      0x430   0x7868             LDRB     R0,[R5, #+1]
   \      0x432   0x2807             CMP      R0,#+7
   \      0x434   0xD104             BNE.N    ??mbedtls_ssl_derive_keys_30
   \      0x436   0xF8D9 0x0014      LDR      R0,[R9, #+20]
   \      0x43A   0xF8C9 0x0008      STR      R0,[R9, #+8]
   \      0x43E   0xE797             B.N      ??mbedtls_ssl_derive_keys_23
   \                     ??mbedtls_ssl_derive_keys_30: (+1)
   \      0x440   0xF8D8 0x0078      LDR      R0,[R8, #+120]
   \      0x444   0x2801             CMP      R0,#+1
   \      0x446   0xD106             BNE.N    ??mbedtls_ssl_derive_keys_31
   \      0x448   0xF8D9 0x1014      LDR      R1,[R9, #+20]
   \      0x44C   0x6968             LDR      R0,[R5, #+20]
   \      0x44E   0x1841             ADDS     R1,R0,R1
   \      0x450   0xF8C9 0x1008      STR      R1,[R9, #+8]
   \      0x454   0xE009             B.N      ??mbedtls_ssl_derive_keys_32
   \                     ??mbedtls_ssl_derive_keys_31: (+1)
   \      0x456   0x6968             LDR      R0,[R5, #+20]
   \      0x458   0x4601             MOV      R1,R0
   \      0x45A   0xF8D9 0x2014      LDR      R2,[R9, #+20]
   \      0x45E   0xFBB2 0xF2F0      UDIV     R2,R2,R0
   \      0x462   0xFB00 0x1002      MLA      R0,R0,R2,R1
   \      0x466   0xF8C9 0x0008      STR      R0,[R9, #+8]
   \                     ??mbedtls_ssl_derive_keys_32: (+1)
   \      0x46A   0x6978             LDR      R0,[R7, #+20]
   \      0x46C   0x2800             CMP      R0,#+0
   \      0x46E   0xF43F 0xAF7F      BEQ.W    ??mbedtls_ssl_derive_keys_23
   \      0x472   0x2801             CMP      R0,#+1
   \      0x474   0xF43F 0xAF7C      BEQ.W    ??mbedtls_ssl_derive_keys_23
   \      0x478   0x2802             CMP      R0,#+2
   \      0x47A   0xD001             BEQ.N    ??mbedtls_ssl_derive_keys_33
   \      0x47C   0x2803             CMP      R0,#+3
   \      0x47E   0xD107             BNE.N    ??mbedtls_ssl_derive_keys_34
   \                     ??mbedtls_ssl_derive_keys_33: (+1)
   \      0x480   0xF8D9 0x1008      LDR      R1,[R9, #+8]
   \      0x484   0xF8D9 0x000C      LDR      R0,[R9, #+12]
   \      0x488   0x1841             ADDS     R1,R0,R1
   \      0x48A   0xF8C9 0x1008      STR      R1,[R9, #+8]
   \      0x48E   0xE76F             B.N      ??mbedtls_ssl_derive_keys_23
   \                     ??mbedtls_ssl_derive_keys_34: (+1)
   \      0x490   0x....'....        LDR.W    R0,??DataTable13_16
   \      0x494   0x9000             STR      R0,[SP, #+0]
   \      0x496   0xF240 0x338E      MOVW     R3,#+910
   \      0x49A   0x4652             MOV      R2,R10
   \      0x49C   0x2101             MOVS     R1,#+1
   \      0x49E   0x4638             MOV      R0,R7
   \      0x4A0   0x....'....        BL       mbedtls_debug_print_msg
   \      0x4A4   0x....             LDR.N    R0,??DataTable12_1  ;; 0xffff9400
   \      0x4A6   0xE0F9             B.N      ??mbedtls_ssl_derive_keys_2
   \                     ??mbedtls_ssl_derive_keys_25: (+1)
   \      0x4A8   0xF8D9 0xB00C      LDR      R11,[R9, #+12]
    937                  memcpy( transform->iv_enc, key2 + transform->keylen,  iv_copy_len );
   \                     ??mbedtls_ssl_derive_keys_26: (+1)
   \      0x4AC   0x465A             MOV      R2,R11
   \      0x4AE   0xF8D9 0x0004      LDR      R0,[R9, #+4]
   \      0x4B2   0x1831             ADDS     R1,R6,R0
   \      0x4B4   0xF109 0x0018      ADD      R0,R9,#+24
   \      0x4B8   0x....'....        BL       __aeabi_memcpy
    938                  memcpy( transform->iv_dec, key2 + transform->keylen + iv_copy_len,
    939                          iv_copy_len );
   \      0x4BC   0x465A             MOV      R2,R11
   \      0x4BE   0xF8D9 0x0004      LDR      R0,[R9, #+4]
   \      0x4C2   0x4430             ADD      R0,R6,R0
   \      0x4C4   0xEB00 0x010B      ADD      R1,R0,R11
   \      0x4C8   0xF109 0x0028      ADD      R0,R9,#+40
   \      0x4CC   0x....'....        BL       __aeabi_memcpy
    940              }
   \      0x4D0   0xE026             B.N      ??mbedtls_ssl_derive_keys_35
    941              else
    942          #endif /* MBEDTLS_SSL_CLI_C */
    943          #if defined(MBEDTLS_SSL_SRV_C)
    944              if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
    945              {
    946                  key1 = keyblk + mac_key_len * 2 + transform->keylen;
   \                     ??mbedtls_ssl_derive_keys_24: (+1)
   \      0x4D2   0xF8D9 0x1004      LDR      R1,[R9, #+4]
   \      0x4D6   0x4408             ADD      R0,R0,R1
   \      0x4D8   0x9002             STR      R0,[SP, #+8]
    947                  key2 = keyblk + mac_key_len * 2;
   \      0x4DA   0xA80F             ADD      R0,SP,#+60
   \      0x4DC   0xEB00 0x0644      ADD      R6,R0,R4, LSL #+1
    948          
    949                  mac_enc = keyblk + mac_key_len;
   \      0x4E0   0x4420             ADD      R0,R0,R4
   \      0x4E2   0x9001             STR      R0,[SP, #+4]
    950                  mac_dec = keyblk;
   \      0x4E4   0xA80F             ADD      R0,SP,#+60
   \      0x4E6   0x9000             STR      R0,[SP, #+0]
    951          
    952                  /*
    953                   * This is not used in TLS v1.1.
    954                   */
    955                  iv_copy_len = ( transform->fixed_ivlen ) ?
    956                                      transform->fixed_ivlen : transform->ivlen;
   \      0x4E8   0xF8D9 0x0010      LDR      R0,[R9, #+16]
   \      0x4EC   0x2800             CMP      R0,#+0
   \      0x4EE   0xD001             BEQ.N    ??mbedtls_ssl_derive_keys_36
   \      0x4F0   0x4683             MOV      R11,R0
   \      0x4F2   0xE001             B.N      ??mbedtls_ssl_derive_keys_37
   \                     ??mbedtls_ssl_derive_keys_36: (+1)
   \      0x4F4   0xF8D9 0xB00C      LDR      R11,[R9, #+12]
    957                  memcpy( transform->iv_dec, key1 + transform->keylen,  iv_copy_len );
   \                     ??mbedtls_ssl_derive_keys_37: (+1)
   \      0x4F8   0x465A             MOV      R2,R11
   \      0x4FA   0x9802             LDR      R0,[SP, #+8]
   \      0x4FC   0xF8D9 0x1004      LDR      R1,[R9, #+4]
   \      0x500   0x4401             ADD      R1,R0,R1
   \      0x502   0xF109 0x0028      ADD      R0,R9,#+40
   \      0x506   0x....'....        BL       __aeabi_memcpy
    958                  memcpy( transform->iv_enc, key1 + transform->keylen + iv_copy_len,
    959                          iv_copy_len );
   \      0x50A   0x465A             MOV      R2,R11
   \      0x50C   0x9802             LDR      R0,[SP, #+8]
   \      0x50E   0xF8D9 0x1004      LDR      R1,[R9, #+4]
   \      0x512   0x4408             ADD      R0,R0,R1
   \      0x514   0xEB00 0x010B      ADD      R1,R0,R11
   \      0x518   0xF109 0x0018      ADD      R0,R9,#+24
   \      0x51C   0x....'....        BL       __aeabi_memcpy
    960              }
    961              else
    962          #endif /* MBEDTLS_SSL_SRV_C */
    963              {
    964                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
    965                  return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    966              }
    967          
    968          #if defined(MBEDTLS_SSL_PROTO_SSL3)
    969              if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 )
    970              {
    971                  if( mac_key_len > sizeof transform->mac_enc )
    972                  {
    973                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
    974                      return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    975                  }
    976          
    977                  memcpy( transform->mac_enc, mac_enc, mac_key_len );
    978                  memcpy( transform->mac_dec, mac_dec, mac_key_len );
    979              }
    980              else
    981          #endif /* MBEDTLS_SSL_PROTO_SSL3 */
    982          #if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    983              defined(MBEDTLS_SSL_PROTO_TLS1_2)
    984              if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
   \                     ??mbedtls_ssl_derive_keys_35: (+1)
   \      0x520   0x6978             LDR      R0,[R7, #+20]
   \      0x522   0x2801             CMP      R0,#+1
   \      0x524   0xDB33             BLT.N    ??mbedtls_ssl_derive_keys_38
    985              {
    986                  /* For HMAC-based ciphersuites, initialize the HMAC transforms.
    987                     For AEAD-based ciphersuites, there is nothing to do here. */
    988                  if( mac_key_len != 0 )
   \      0x526   0x2C00             CMP      R4,#+0
   \      0x528   0xD00B             BEQ.N    ??mbedtls_ssl_derive_keys_39
    989                  {
    990                      mbedtls_md_hmac_starts( &transform->md_ctx_enc, mac_enc, mac_key_len );
   \      0x52A   0x4622             MOV      R2,R4
   \      0x52C   0x9901             LDR      R1,[SP, #+4]
   \      0x52E   0xF109 0x0038      ADD      R0,R9,#+56
   \      0x532   0x....'....        BL       mbedtls_md_hmac_starts
    991                      mbedtls_md_hmac_starts( &transform->md_ctx_dec, mac_dec, mac_key_len );
   \      0x536   0x4622             MOV      R2,R4
   \      0x538   0x9900             LDR      R1,[SP, #+0]
   \      0x53A   0xF109 0x0044      ADD      R0,R9,#+68
   \      0x53E   0x....'....        BL       mbedtls_md_hmac_starts
    992                  }
    993              }
    994              else
    995          #endif
    996              {
    997                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
    998                  return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    999              }
   1000          
   1001          #if defined(MBEDTLS_SSL_HW_RECORD_ACCEL)
   1002              if( mbedtls_ssl_hw_record_init != NULL )
   1003              {
   1004                  int ret = 0;
   1005          
   1006                  MBEDTLS_SSL_DEBUG_MSG( 2, ( "going for mbedtls_ssl_hw_record_init()" ) );
   1007          
   1008                  if( ( ret = mbedtls_ssl_hw_record_init( ssl, key1, key2, transform->keylen,
   1009                                                  transform->iv_enc, transform->iv_dec,
   1010                                                  iv_copy_len,
   1011                                                  mac_enc, mac_dec,
   1012                                                  mac_key_len ) ) != 0 )
   1013                  {
   1014                      MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_hw_record_init", ret );
   1015                      return( MBEDTLS_ERR_SSL_HW_ACCEL_FAILED );
   1016                  }
   1017              }
   1018          #endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
   1019          
   1020          #if defined(MBEDTLS_SSL_EXPORT_KEYS)
   1021              if( ssl->conf->f_export_keys != NULL )
   \                     ??mbedtls_ssl_derive_keys_39: (+1)
   \      0x542   0x6838             LDR      R0,[R7, #+0]
   \      0x544   0x6DC0             LDR      R0,[R0, #+92]
   \      0x546   0x2800             CMP      R0,#+0
   \      0x548   0xD00D             BEQ.N    ??mbedtls_ssl_derive_keys_40
   1022              {
   1023                  ssl->conf->f_export_keys( ssl->conf->p_export_keys,
   1024                                            session->master, keyblk,
   1025                                            mac_key_len, transform->keylen,
   1026                                            iv_copy_len );
   \      0x54A   0xF8CD 0xB004      STR      R11,[SP, #+4]
   \      0x54E   0xF8D9 0x0004      LDR      R0,[R9, #+4]
   \      0x552   0x9000             STR      R0,[SP, #+0]
   \      0x554   0x4623             MOV      R3,R4
   \      0x556   0xAA0F             ADD      R2,SP,#+60
   \      0x558   0xF108 0x012C      ADD      R1,R8,#+44
   \      0x55C   0x6838             LDR      R0,[R7, #+0]
   \      0x55E   0x6E00             LDR      R0,[R0, #+96]
   \      0x560   0x683C             LDR      R4,[R7, #+0]
   \      0x562   0x6DE4             LDR      R4,[R4, #+92]
   \      0x564   0x47A0             BLX      R4
   1027              }
   1028          #endif
   1029          
   1030              if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_enc,
   1031                                           cipher_info ) ) != 0 )
   \                     ??mbedtls_ssl_derive_keys_40: (+1)
   \      0x566   0x4629             MOV      R1,R5
   \      0x568   0xF109 0x0050      ADD      R0,R9,#+80
   \      0x56C   0x....'....        BL       mbedtls_cipher_setup
   \      0x570   0x0004             MOVS     R4,R0
   \      0x572   0xD018             BEQ.N    ??mbedtls_ssl_derive_keys_41
   1032              {
   1033                  MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setup", ret );
   \      0x574   0x9401             STR      R4,[SP, #+4]
   \      0x576   0x....'....        LDR.W    R0,??DataTable14_2
   \      0x57A   0x9000             STR      R0,[SP, #+0]
   \      0x57C   0xF240 0x4309      MOVW     R3,#+1033
   \      0x580   0x4652             MOV      R2,R10
   \      0x582   0x2101             MOVS     R1,#+1
   \      0x584   0x4638             MOV      R0,R7
   \      0x586   0x....'....        BL       mbedtls_debug_print_ret
   1034                  return( ret );
   \      0x58A   0x4620             MOV      R0,R4
   \      0x58C   0xE086             B.N      ??mbedtls_ssl_derive_keys_2
   1035              }
   \                     ??mbedtls_ssl_derive_keys_38: (+1)
   \      0x58E   0x....'....        LDR.W    R0,??DataTable13_16
   \      0x592   0x9000             STR      R0,[SP, #+0]
   \      0x594   0xF240 0x33E5      MOVW     R3,#+997
   \      0x598   0x4652             MOV      R2,R10
   \      0x59A   0x2101             MOVS     R1,#+1
   \      0x59C   0x4638             MOV      R0,R7
   \      0x59E   0x....'....        BL       mbedtls_debug_print_msg
   \      0x5A2   0x....             LDR.N    R0,??DataTable12_1  ;; 0xffff9400
   \      0x5A4   0xE07A             B.N      ??mbedtls_ssl_derive_keys_2
   1036          
   1037              if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_dec,
   1038                                           cipher_info ) ) != 0 )
   \                     ??mbedtls_ssl_derive_keys_41: (+1)
   \      0x5A6   0x4629             MOV      R1,R5
   \      0x5A8   0xF109 0x0090      ADD      R0,R9,#+144
   \      0x5AC   0x....'....        BL       mbedtls_cipher_setup
   \      0x5B0   0x0004             MOVS     R4,R0
   \      0x5B2   0xD00C             BEQ.N    ??mbedtls_ssl_derive_keys_42
   1039              {
   1040                  MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setup", ret );
   \      0x5B4   0x9401             STR      R4,[SP, #+4]
   \      0x5B6   0x....'....        LDR.W    R0,??DataTable14_2
   \      0x5BA   0x9000             STR      R0,[SP, #+0]
   \      0x5BC   0xF44F 0x6382      MOV      R3,#+1040
   \      0x5C0   0x4652             MOV      R2,R10
   \      0x5C2   0x2101             MOVS     R1,#+1
   \      0x5C4   0x4638             MOV      R0,R7
   \      0x5C6   0x....'....        BL       mbedtls_debug_print_ret
   1041                  return( ret );
   \      0x5CA   0x4620             MOV      R0,R4
   \      0x5CC   0xE066             B.N      ??mbedtls_ssl_derive_keys_2
   1042              }
   1043          
   1044              if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_enc, key1,
   1045                                         cipher_info->key_bitlen,
   1046                                         MBEDTLS_ENCRYPT ) ) != 0 )
   \                     ??mbedtls_ssl_derive_keys_42: (+1)
   \      0x5CE   0x2301             MOVS     R3,#+1
   \      0x5D0   0x686A             LDR      R2,[R5, #+4]
   \      0x5D2   0x9902             LDR      R1,[SP, #+8]
   \      0x5D4   0xF109 0x0050      ADD      R0,R9,#+80
   \      0x5D8   0x....'....        BL       mbedtls_cipher_setkey
   \      0x5DC   0x0004             MOVS     R4,R0
   \      0x5DE   0xD00C             BEQ.N    ??mbedtls_ssl_derive_keys_43
   1047              {
   1048                  MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setkey", ret );
   \      0x5E0   0x9401             STR      R4,[SP, #+4]
   \      0x5E2   0x....'....        LDR.W    R0,??DataTable14_3
   \      0x5E6   0x9000             STR      R0,[SP, #+0]
   \      0x5E8   0xF44F 0x6383      MOV      R3,#+1048
   \      0x5EC   0x4652             MOV      R2,R10
   \      0x5EE   0x2101             MOVS     R1,#+1
   \      0x5F0   0x4638             MOV      R0,R7
   \      0x5F2   0x....'....        BL       mbedtls_debug_print_ret
   1049                  return( ret );
   \      0x5F6   0x4620             MOV      R0,R4
   \      0x5F8   0xE050             B.N      ??mbedtls_ssl_derive_keys_2
   1050              }
   1051          
   1052              if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_dec, key2,
   1053                                         cipher_info->key_bitlen,
   1054                                         MBEDTLS_DECRYPT ) ) != 0 )
   \                     ??mbedtls_ssl_derive_keys_43: (+1)
   \      0x5FA   0x2300             MOVS     R3,#+0
   \      0x5FC   0x686A             LDR      R2,[R5, #+4]
   \      0x5FE   0x4631             MOV      R1,R6
   \      0x600   0xF109 0x0090      ADD      R0,R9,#+144
   \      0x604   0x....'....        BL       mbedtls_cipher_setkey
   \      0x608   0x0004             MOVS     R4,R0
   \      0x60A   0xD00C             BEQ.N    ??mbedtls_ssl_derive_keys_44
   1055              {
   1056                  MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setkey", ret );
   \      0x60C   0x9401             STR      R4,[SP, #+4]
   \      0x60E   0x....'....        LDR.W    R0,??DataTable14_3
   \      0x612   0x9000             STR      R0,[SP, #+0]
   \      0x614   0xF44F 0x6384      MOV      R3,#+1056
   \      0x618   0x4652             MOV      R2,R10
   \      0x61A   0x2101             MOVS     R1,#+1
   \      0x61C   0x4638             MOV      R0,R7
   \      0x61E   0x....'....        BL       mbedtls_debug_print_ret
   1057                  return( ret );
   \      0x622   0x4620             MOV      R0,R4
   \      0x624   0xE03A             B.N      ??mbedtls_ssl_derive_keys_2
   1058              }
   1059          
   1060          #if defined(MBEDTLS_CIPHER_MODE_CBC)
   1061              if( cipher_info->mode == MBEDTLS_MODE_CBC )
   \                     ??mbedtls_ssl_derive_keys_44: (+1)
   \      0x626   0x7868             LDRB     R0,[R5, #+1]
   \      0x628   0x2802             CMP      R0,#+2
   \      0x62A   0xD127             BNE.N    ??mbedtls_ssl_derive_keys_45
   1062              {
   1063                  if( ( ret = mbedtls_cipher_set_padding_mode( &transform->cipher_ctx_enc,
   1064                                                       MBEDTLS_PADDING_NONE ) ) != 0 )
   \      0x62C   0x2104             MOVS     R1,#+4
   \      0x62E   0xF109 0x0050      ADD      R0,R9,#+80
   \      0x632   0x....'....        BL       mbedtls_cipher_set_padding_mode
   \      0x636   0x0004             MOVS     R4,R0
   \      0x638   0xD00C             BEQ.N    ??mbedtls_ssl_derive_keys_46
   1065                  {
   1066                      MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_set_padding_mode", ret );
   \      0x63A   0x9401             STR      R4,[SP, #+4]
   \      0x63C   0x....'....        LDR.W    R0,??DataTable14_4
   \      0x640   0x9000             STR      R0,[SP, #+0]
   \      0x642   0xF240 0x432A      MOVW     R3,#+1066
   \      0x646   0x4652             MOV      R2,R10
   \      0x648   0x2101             MOVS     R1,#+1
   \      0x64A   0x4638             MOV      R0,R7
   \      0x64C   0x....'....        BL       mbedtls_debug_print_ret
   1067                      return( ret );
   \      0x650   0x4620             MOV      R0,R4
   \      0x652   0xE023             B.N      ??mbedtls_ssl_derive_keys_2
   1068                  }
   1069          
   1070                  if( ( ret = mbedtls_cipher_set_padding_mode( &transform->cipher_ctx_dec,
   1071                                                       MBEDTLS_PADDING_NONE ) ) != 0 )
   \                     ??mbedtls_ssl_derive_keys_46: (+1)
   \      0x654   0x2104             MOVS     R1,#+4
   \      0x656   0xF109 0x0090      ADD      R0,R9,#+144
   \      0x65A   0x....'....        BL       mbedtls_cipher_set_padding_mode
   \      0x65E   0x0004             MOVS     R4,R0
   \      0x660   0xD00C             BEQ.N    ??mbedtls_ssl_derive_keys_45
   1072                  {
   1073                      MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_set_padding_mode", ret );
   \      0x662   0x9401             STR      R4,[SP, #+4]
   \      0x664   0x....'....        LDR.W    R0,??DataTable14_4
   \      0x668   0x9000             STR      R0,[SP, #+0]
   \      0x66A   0xF240 0x4331      MOVW     R3,#+1073
   \      0x66E   0x4652             MOV      R2,R10
   \      0x670   0x2101             MOVS     R1,#+1
   \      0x672   0x4638             MOV      R0,R7
   \      0x674   0x....'....        BL       mbedtls_debug_print_ret
   1074                      return( ret );
   \      0x678   0x4620             MOV      R0,R4
   \      0x67A   0xE00F             B.N      ??mbedtls_ssl_derive_keys_2
   1075                  }
   1076              }
   1077          #endif /* MBEDTLS_CIPHER_MODE_CBC */
   1078          
   1079              mbedtls_platform_zeroize( keyblk, sizeof( keyblk ) );
   \                     ??mbedtls_ssl_derive_keys_45: (+1)
   \      0x67C   0xF44F 0x7180      MOV      R1,#+256
   \      0x680   0xA80F             ADD      R0,SP,#+60
   \      0x682   0x....'....        BL       mbedtls_platform_zeroize
   1080          
   1081          #if defined(MBEDTLS_ZLIB_SUPPORT)
   1082              // Initialize compression
   1083              //
   1084              if( session->compression == MBEDTLS_SSL_COMPRESS_DEFLATE )
   1085              {
   1086                  if( ssl->compress_buf == NULL )
   1087                  {
   1088                      MBEDTLS_SSL_DEBUG_MSG( 3, ( "Allocating compression buffer" ) );
   1089                      ssl->compress_buf = mbedtls_calloc( 1, MBEDTLS_SSL_COMPRESS_BUFFER_LEN );
   1090                      if( ssl->compress_buf == NULL )
   1091                      {
   1092                          MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed",
   1093                                              MBEDTLS_SSL_COMPRESS_BUFFER_LEN ) );
   1094                          return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
   1095                      }
   1096                  }
   1097          
   1098                  MBEDTLS_SSL_DEBUG_MSG( 3, ( "Initializing zlib states" ) );
   1099          
   1100                  memset( &transform->ctx_deflate, 0, sizeof( transform->ctx_deflate ) );
   1101                  memset( &transform->ctx_inflate, 0, sizeof( transform->ctx_inflate ) );
   1102          
   1103                  if( deflateInit( &transform->ctx_deflate,
   1104                                   Z_DEFAULT_COMPRESSION )   != Z_OK ||
   1105                      inflateInit( &transform->ctx_inflate ) != Z_OK )
   1106                  {
   1107                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "Failed to initialize compression" ) );
   1108                      return( MBEDTLS_ERR_SSL_COMPRESSION_FAILED );
   1109                  }
   1110              }
   1111          #endif /* MBEDTLS_ZLIB_SUPPORT */
   1112          
   1113              MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= derive keys" ) );
   \      0x686   0x....'....        LDR.W    R0,??DataTable14_5
   \      0x68A   0x9000             STR      R0,[SP, #+0]
   \      0x68C   0xF240 0x4359      MOVW     R3,#+1113
   \      0x690   0x4652             MOV      R2,R10
   \      0x692   0x2102             MOVS     R1,#+2
   \      0x694   0x4638             MOV      R0,R7
   \      0x696   0x....'....        BL       mbedtls_debug_print_msg
   1114          
   1115              return( 0 );
   \      0x69A   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_ssl_derive_keys_2: (+1)
   \      0x69C   0xB05F             ADD      SP,SP,#+380
   \      0x69E   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   1116          }
   1117          
   1118          #if defined(MBEDTLS_SSL_PROTO_SSL3)
   1119          void ssl_calc_verify_ssl( mbedtls_ssl_context *ssl, unsigned char hash[36] )
   1120          {
   1121              mbedtls_md5_context md5;
   1122              mbedtls_sha1_context sha1;
   1123              unsigned char pad_1[48];
   1124              unsigned char pad_2[48];
   1125          
   1126              MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc verify ssl" ) );
   1127          
   1128              mbedtls_md5_init( &md5 );
   1129              mbedtls_sha1_init( &sha1 );
   1130          
   1131              mbedtls_md5_clone( &md5, &ssl->handshake->fin_md5 );
   1132              mbedtls_sha1_clone( &sha1, &ssl->handshake->fin_sha1 );
   1133          
   1134              memset( pad_1, 0x36, 48 );
   1135              memset( pad_2, 0x5C, 48 );
   1136          
   1137              mbedtls_md5_update_ret( &md5, ssl->session_negotiate->master, 48 );
   1138              mbedtls_md5_update_ret( &md5, pad_1, 48 );
   1139              mbedtls_md5_finish_ret( &md5, hash );
   1140          
   1141              mbedtls_md5_starts_ret( &md5 );
   1142              mbedtls_md5_update_ret( &md5, ssl->session_negotiate->master, 48 );
   1143              mbedtls_md5_update_ret( &md5, pad_2, 48 );
   1144              mbedtls_md5_update_ret( &md5, hash,  16 );
   1145              mbedtls_md5_finish_ret( &md5, hash );
   1146          
   1147              mbedtls_sha1_update_ret( &sha1, ssl->session_negotiate->master, 48 );
   1148              mbedtls_sha1_update_ret( &sha1, pad_1, 40 );
   1149              mbedtls_sha1_finish_ret( &sha1, hash + 16 );
   1150          
   1151              mbedtls_sha1_starts_ret( &sha1 );
   1152              mbedtls_sha1_update_ret( &sha1, ssl->session_negotiate->master, 48 );
   1153              mbedtls_sha1_update_ret( &sha1, pad_2, 40 );
   1154              mbedtls_sha1_update_ret( &sha1, hash + 16, 20 );
   1155              mbedtls_sha1_finish_ret( &sha1, hash + 16 );
   1156          
   1157              MBEDTLS_SSL_DEBUG_BUF( 3, "calculated verify result", hash, 36 );
   1158              MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc verify" ) );
   1159          
   1160              mbedtls_md5_free(  &md5  );
   1161              mbedtls_sha1_free( &sha1 );
   1162          
   1163              return;
   1164          }
   1165          #endif /* MBEDTLS_SSL_PROTO_SSL3 */
   1166          
   1167          #if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1)

   \                                 In section .text, align 2, keep-with-next
   1168          void ssl_calc_verify_tls( mbedtls_ssl_context *ssl, unsigned char hash[36] )
   1169          {
   \                     ssl_calc_verify_tls: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0xB0B0             SUB      SP,SP,#+192
   \        0x4   0x4604             MOV      R4,R0
   \        0x6   0x460E             MOV      R6,R1
   1170              mbedtls_md5_context md5;
   1171              mbedtls_sha1_context sha1;
   1172          
   1173              MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc verify tls" ) );
   \        0x8   0x....             LDR.N    R5,??DataTable12
   \        0xA   0x....'....        LDR.W    R0,??DataTable14_6
   \        0xE   0x9000             STR      R0,[SP, #+0]
   \       0x10   0xF240 0x4395      MOVW     R3,#+1173
   \       0x14   0x462A             MOV      R2,R5
   \       0x16   0x2102             MOVS     R1,#+2
   \       0x18   0x4620             MOV      R0,R4
   \       0x1A   0x....'....        BL       mbedtls_debug_print_msg
   1174          
   1175              mbedtls_md5_init( &md5 );
   \       0x1E   0xA81A             ADD      R0,SP,#+104
   \       0x20   0x....'....        BL       mbedtls_md5_init
   1176              mbedtls_sha1_init( &sha1 );
   \       0x24   0xA803             ADD      R0,SP,#+12
   \       0x26   0x....'....        BL       mbedtls_sha1_init
   1177          
   1178              mbedtls_md5_clone( &md5, &ssl->handshake->fin_md5 );
   \       0x2A   0x6BE0             LDR      R0,[R4, #+60]
   \       0x2C   0xF500 0x7114      ADD      R1,R0,#+592
   \       0x30   0xA81A             ADD      R0,SP,#+104
   \       0x32   0x....'....        BL       mbedtls_md5_clone
   1179              mbedtls_sha1_clone( &sha1, &ssl->handshake->fin_sha1 );
   \       0x36   0x6BE0             LDR      R0,[R4, #+60]
   \       0x38   0xF500 0x712A      ADD      R1,R0,#+680
   \       0x3C   0xA803             ADD      R0,SP,#+12
   \       0x3E   0x....'....        BL       mbedtls_sha1_clone
   1180          
   1181               mbedtls_md5_finish_ret( &md5,  hash );
   \       0x42   0x4631             MOV      R1,R6
   \       0x44   0xA81A             ADD      R0,SP,#+104
   \       0x46   0x....'....        BL       mbedtls_md5_finish_ret
   1182              mbedtls_sha1_finish_ret( &sha1, hash + 16 );
   \       0x4A   0xF106 0x0110      ADD      R1,R6,#+16
   \       0x4E   0xA803             ADD      R0,SP,#+12
   \       0x50   0x....'....        BL       mbedtls_sha1_finish_ret
   1183          
   1184              MBEDTLS_SSL_DEBUG_BUF( 3, "calculated verify result", hash, 36 );
   \       0x54   0x2024             MOVS     R0,#+36
   \       0x56   0x9002             STR      R0,[SP, #+8]
   \       0x58   0x9601             STR      R6,[SP, #+4]
   \       0x5A   0x....'....        LDR.W    R0,??DataTable14_7
   \       0x5E   0x9000             STR      R0,[SP, #+0]
   \       0x60   0xF44F 0x6394      MOV      R3,#+1184
   \       0x64   0x462A             MOV      R2,R5
   \       0x66   0x2103             MOVS     R1,#+3
   \       0x68   0x4620             MOV      R0,R4
   \       0x6A   0x....'....        BL       mbedtls_debug_print_buf
   1185              MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc verify" ) );
   \       0x6E   0x....'....        LDR.W    R0,??DataTable14_8
   \       0x72   0x9000             STR      R0,[SP, #+0]
   \       0x74   0xF240 0x43A1      MOVW     R3,#+1185
   \       0x78   0x462A             MOV      R2,R5
   \       0x7A   0x2102             MOVS     R1,#+2
   \       0x7C   0x4620             MOV      R0,R4
   \       0x7E   0x....'....        BL       mbedtls_debug_print_msg
   1186          
   1187              mbedtls_md5_free(  &md5  );
   \       0x82   0xA81A             ADD      R0,SP,#+104
   \       0x84   0x....'....        BL       mbedtls_md5_free
   1188              mbedtls_sha1_free( &sha1 );
   \       0x88   0xA803             ADD      R0,SP,#+12
   \       0x8A   0x....'....        BL       mbedtls_sha1_free
   1189          
   1190              return;
   \       0x8E   0xB030             ADD      SP,SP,#+192
   \       0x90   0xBD70             POP      {R4-R6,PC}       ;; return
   1191          }
   1192          #endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 */
   1193          
   1194          #if defined(MBEDTLS_SSL_PROTO_TLS1_2)
   1195          #if defined(MBEDTLS_SHA256_C)

   \                                 In section .text, align 2, keep-with-next
   1196          void ssl_calc_verify_tls_sha256( mbedtls_ssl_context *ssl, unsigned char hash[32] )
   1197          {
   \                     ssl_calc_verify_tls_sha256: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0xB09E             SUB      SP,SP,#+120
   \        0x4   0x4604             MOV      R4,R0
   \        0x6   0x460D             MOV      R5,R1
   1198              mbedtls_sha256_context sha256;
   1199          
   1200              mbedtls_sha256_init( &sha256 );
   \        0x8   0xA803             ADD      R0,SP,#+12
   \        0xA   0x....'....        BL       mbedtls_sha256_init
   1201          
   1202              MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc verify sha256" ) );
   \        0xE   0x....             LDR.N    R6,??DataTable12
   \       0x10   0x....'....        LDR.W    R0,??DataTable14_9
   \       0x14   0x9000             STR      R0,[SP, #+0]
   \       0x16   0xF240 0x43B2      MOVW     R3,#+1202
   \       0x1A   0x4632             MOV      R2,R6
   \       0x1C   0x2102             MOVS     R1,#+2
   \       0x1E   0x4620             MOV      R0,R4
   \       0x20   0x....'....        BL       mbedtls_debug_print_msg
   1203          
   1204              mbedtls_sha256_clone( &sha256, &ssl->handshake->fin_sha256 );
   \       0x24   0x6BE0             LDR      R0,[R4, #+60]
   \       0x26   0xF500 0x7141      ADD      R1,R0,#+772
   \       0x2A   0xA803             ADD      R0,SP,#+12
   \       0x2C   0x....'....        BL       mbedtls_sha256_clone
   1205              mbedtls_sha256_finish_ret( &sha256, hash );
   \       0x30   0x4629             MOV      R1,R5
   \       0x32   0xA803             ADD      R0,SP,#+12
   \       0x34   0x....'....        BL       mbedtls_sha256_finish_ret
   1206          
   1207              MBEDTLS_SSL_DEBUG_BUF( 3, "calculated verify result", hash, 32 );
   \       0x38   0x2020             MOVS     R0,#+32
   \       0x3A   0x9002             STR      R0,[SP, #+8]
   \       0x3C   0x9501             STR      R5,[SP, #+4]
   \       0x3E   0x....'....        LDR.W    R0,??DataTable14_7
   \       0x42   0x9000             STR      R0,[SP, #+0]
   \       0x44   0xF240 0x43B7      MOVW     R3,#+1207
   \       0x48   0x4632             MOV      R2,R6
   \       0x4A   0x2103             MOVS     R1,#+3
   \       0x4C   0x4620             MOV      R0,R4
   \       0x4E   0x....'....        BL       mbedtls_debug_print_buf
   1208              MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc verify" ) );
   \       0x52   0x....'....        LDR.W    R0,??DataTable14_8
   \       0x56   0x9000             STR      R0,[SP, #+0]
   \       0x58   0xF44F 0x6397      MOV      R3,#+1208
   \       0x5C   0x4632             MOV      R2,R6
   \       0x5E   0x2102             MOVS     R1,#+2
   \       0x60   0x4620             MOV      R0,R4
   \       0x62   0x....'....        BL       mbedtls_debug_print_msg
   1209          
   1210              mbedtls_sha256_free( &sha256 );
   \       0x66   0xA803             ADD      R0,SP,#+12
   \       0x68   0x....'....        BL       mbedtls_sha256_free
   1211          
   1212              return;
   \       0x6C   0xB01E             ADD      SP,SP,#+120
   \       0x6E   0xBD70             POP      {R4-R6,PC}       ;; return
   1213          }
   1214          #endif /* MBEDTLS_SHA256_C */
   1215          
   1216          #if defined(MBEDTLS_SHA512_C)

   \                                 In section .text, align 2, keep-with-next
   1217          void ssl_calc_verify_tls_sha384( mbedtls_ssl_context *ssl, unsigned char hash[48] )
   1218          {
   \                     ssl_calc_verify_tls_sha384: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0xB0BA             SUB      SP,SP,#+232
   \        0x4   0x4604             MOV      R4,R0
   \        0x6   0x460D             MOV      R5,R1
   1219              mbedtls_sha512_context sha512;
   1220          
   1221              mbedtls_sha512_init( &sha512 );
   \        0x8   0xA804             ADD      R0,SP,#+16
   \        0xA   0x....'....        BL       mbedtls_sha512_init
   1222          
   1223              MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc verify sha384" ) );
   \        0xE   0x....             LDR.N    R6,??DataTable12
   \       0x10   0x....'....        LDR.W    R0,??DataTable14_10
   \       0x14   0x9000             STR      R0,[SP, #+0]
   \       0x16   0xF240 0x43C7      MOVW     R3,#+1223
   \       0x1A   0x4632             MOV      R2,R6
   \       0x1C   0x2102             MOVS     R1,#+2
   \       0x1E   0x4620             MOV      R0,R4
   \       0x20   0x....'....        BL       mbedtls_debug_print_msg
   1224          
   1225              mbedtls_sha512_clone( &sha512, &ssl->handshake->fin_sha512 );
   \       0x24   0x6BE0             LDR      R0,[R4, #+60]
   \       0x26   0xF500 0x715C      ADD      R1,R0,#+880
   \       0x2A   0xA804             ADD      R0,SP,#+16
   \       0x2C   0x....'....        BL       mbedtls_sha512_clone
   1226              mbedtls_sha512_finish_ret( &sha512, hash );
   \       0x30   0x4629             MOV      R1,R5
   \       0x32   0xA804             ADD      R0,SP,#+16
   \       0x34   0x....'....        BL       mbedtls_sha512_finish_ret
   1227          
   1228              MBEDTLS_SSL_DEBUG_BUF( 3, "calculated verify result", hash, 48 );
   \       0x38   0x2030             MOVS     R0,#+48
   \       0x3A   0x9002             STR      R0,[SP, #+8]
   \       0x3C   0x9501             STR      R5,[SP, #+4]
   \       0x3E   0x....'....        LDR.W    R0,??DataTable14_7
   \       0x42   0x9000             STR      R0,[SP, #+0]
   \       0x44   0xF240 0x43CC      MOVW     R3,#+1228
   \       0x48   0x4632             MOV      R2,R6
   \       0x4A   0x2103             MOVS     R1,#+3
   \       0x4C   0x4620             MOV      R0,R4
   \       0x4E   0x....'....        BL       mbedtls_debug_print_buf
   1229              MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc verify" ) );
   \       0x52   0x....'....        LDR.W    R0,??DataTable14_8
   \       0x56   0x9000             STR      R0,[SP, #+0]
   \       0x58   0xF240 0x43CD      MOVW     R3,#+1229
   \       0x5C   0x4632             MOV      R2,R6
   \       0x5E   0x2102             MOVS     R1,#+2
   \       0x60   0x4620             MOV      R0,R4
   \       0x62   0x....'....        BL       mbedtls_debug_print_msg
   1230          
   1231              mbedtls_sha512_free( &sha512 );
   \       0x66   0xA804             ADD      R0,SP,#+16
   \       0x68   0x....'....        BL       mbedtls_sha512_free
   1232          
   1233              return;
   \       0x6C   0xB03A             ADD      SP,SP,#+232
   \       0x6E   0xBD70             POP      {R4-R6,PC}       ;; return
   1234          }
   1235          #endif /* MBEDTLS_SHA512_C */
   1236          #endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
   1237          
   1238          #if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)

   \                                 In section .text, align 2, keep-with-next
   1239          int mbedtls_ssl_psk_derive_premaster( mbedtls_ssl_context *ssl, mbedtls_key_exchange_type_t key_ex )
   1240          {
   \                     mbedtls_ssl_psk_derive_premaster: (+1)
   \        0x0   0xE92D 0x43FE      PUSH     {R1-R9,LR}
   \        0x4   0x4605             MOV      R5,R0
   1241              unsigned char *p = ssl->handshake->premaster;
   \        0x6   0x6BE8             LDR      R0,[R5, #+60]
   \        0x8   0xF200 0x469C      ADDW     R6,R0,#+1180
   1242              unsigned char *end = p + sizeof( ssl->handshake->premaster );
   \        0xC   0xF506 0x7709      ADD      R7,R6,#+548
   1243              const unsigned char *psk = ssl->conf->psk;
   \       0x10   0x6828             LDR      R0,[R5, #+0]
   \       0x12   0xF8D0 0x8094      LDR      R8,[R0, #+148]
   1244              size_t psk_len = ssl->conf->psk_len;
   \       0x16   0xF8D0 0x9098      LDR      R9,[R0, #+152]
   1245          
   1246              /* If the psk callback was called, use its result */
   1247              if( ssl->handshake->psk != NULL )
   \       0x1A   0x6BE8             LDR      R0,[R5, #+60]
   \       0x1C   0xF8D0 0x01B8      LDR      R0,[R0, #+440]
   \       0x20   0x2800             CMP      R0,#+0
   \       0x22   0xD004             BEQ.N    ??mbedtls_ssl_psk_derive_premaster_0
   1248              {
   1249                  psk = ssl->handshake->psk;
   \       0x24   0x6BE8             LDR      R0,[R5, #+60]
   \       0x26   0xF8D0 0x81B8      LDR      R8,[R0, #+440]
   1250                  psk_len = ssl->handshake->psk_len;
   \       0x2A   0xF8D0 0x91BC      LDR      R9,[R0, #+444]
   1251              }
   1252          
   1253              /*
   1254               * PMS = struct {
   1255               *     opaque other_secret<0..2^16-1>;
   1256               *     opaque psk<0..2^16-1>;
   1257               * };
   1258               * with "other_secret" depending on the particular key exchange
   1259               */
   1260          #if defined(MBEDTLS_KEY_EXCHANGE_PSK_ENABLED)
   1261              if( key_ex == MBEDTLS_KEY_EXCHANGE_PSK )
   \                     ??mbedtls_ssl_psk_derive_premaster_0: (+1)
   \       0x2E   0x4608             MOV      R0,R1
   \       0x30   0x2805             CMP      R0,#+5
   \       0x32   0xD125             BNE.N    ??mbedtls_ssl_psk_derive_premaster_1
   1262              {
   1263                  if( end - p < 2 )
   \       0x34   0x1BB8             SUBS     R0,R7,R6
   \       0x36   0x2802             CMP      R0,#+2
   \       0x38   0xDB1F             BLT.N    ??mbedtls_ssl_psk_derive_premaster_2
   1264                      return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   1265          
   1266                  *(p++) = (unsigned char)( psk_len >> 8 );
   \       0x3A   0x4648             MOV      R0,R9
   \       0x3C   0x0A00             LSRS     R0,R0,#+8
   \       0x3E   0x7030             STRB     R0,[R6, #+0]
   1267                  *(p++) = (unsigned char)( psk_len      );
   \       0x40   0xF886 0x9001      STRB     R9,[R6, #+1]
   \       0x44   0x1CB4             ADDS     R4,R6,#+2
   1268          
   1269                  if( end < p || (size_t)( end - p ) < psk_len )
   \       0x46   0x42A7             CMP      R7,R4
   \       0x48   0xD317             BCC.N    ??mbedtls_ssl_psk_derive_premaster_2
   \       0x4A   0x1B38             SUBS     R0,R7,R4
   \       0x4C   0x4548             CMP      R0,R9
   \       0x4E   0xD314             BCC.N    ??mbedtls_ssl_psk_derive_premaster_2
   1270                      return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   1271          
   1272                  memset( p, 0, psk_len );
   \       0x50   0x2200             MOVS     R2,#+0
   \       0x52   0x4649             MOV      R1,R9
   \       0x54   0x4620             MOV      R0,R4
   \       0x56   0x....'....        BL       __aeabi_memset
   1273                  p += psk_len;
   \       0x5A   0x444C             ADD      R4,R4,R9
   1274              }
   1275              else
   1276          #endif /* MBEDTLS_KEY_EXCHANGE_PSK_ENABLED */
   1277          #if defined(MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED)
   1278              if( key_ex == MBEDTLS_KEY_EXCHANGE_RSA_PSK )
   1279              {
   1280                  /*
   1281                   * other_secret already set by the ClientKeyExchange message,
   1282                   * and is 48 bytes long
   1283                   */
   1284                  if( end - p < 2 )
   1285                      return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   1286          
   1287                  *p++ = 0;
   1288                  *p++ = 48;
   1289                  p += 48;
   1290              }
   1291              else
   1292          #endif /* MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED */
   1293          #if defined(MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED)
   1294              if( key_ex == MBEDTLS_KEY_EXCHANGE_DHE_PSK )
   1295              {
   1296                  int ret;
   1297                  size_t len;
   1298          
   1299                  /* Write length only when we know the actual value */
   1300                  if( ( ret = mbedtls_dhm_calc_secret( &ssl->handshake->dhm_ctx,
   1301                                                p + 2, end - ( p + 2 ), &len,
   1302                                                ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
   1303                  {
   1304                      MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_dhm_calc_secret", ret );
   1305                      return( ret );
   1306                  }
   1307                  *(p++) = (unsigned char)( len >> 8 );
   1308                  *(p++) = (unsigned char)( len );
   1309                  p += len;
   1310          
   1311                  MBEDTLS_SSL_DEBUG_MPI( 3, "DHM: K ", &ssl->handshake->dhm_ctx.K  );
   1312              }
   1313              else
   1314          #endif /* MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED */
   1315          #if defined(MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED)
   1316              if( key_ex == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK )
   1317              {
   1318                  int ret;
   1319                  size_t zlen;
   1320          
   1321                  if( ( ret = mbedtls_ecdh_calc_secret( &ssl->handshake->ecdh_ctx, &zlen,
   1322                                                 p + 2, end - ( p + 2 ),
   1323                                                 ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
   1324                  {
   1325                      MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ecdh_calc_secret", ret );
   1326                      return( ret );
   1327                  }
   1328          
   1329                  *(p++) = (unsigned char)( zlen >> 8 );
   1330                  *(p++) = (unsigned char)( zlen      );
   1331                  p += zlen;
   1332          
   1333                  MBEDTLS_SSL_DEBUG_MPI( 3, "ECDH: z", &ssl->handshake->ecdh_ctx.z );
   1334              }
   1335              else
   1336          #endif /* MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED */
   1337              {
   1338                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
   1339                  return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   1340              }
   1341          
   1342              /* opaque psk<0..2^16-1>; */
   1343              if( end - p < 2 )
   \                     ??mbedtls_ssl_psk_derive_premaster_3: (+1)
   \       0x5C   0x1B38             SUBS     R0,R7,R4
   \       0x5E   0x2802             CMP      R0,#+2
   \       0x60   0xDB0B             BLT.N    ??mbedtls_ssl_psk_derive_premaster_2
   1344                  return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   1345          
   1346              *(p++) = (unsigned char)( psk_len >> 8 );
   \       0x62   0x4648             MOV      R0,R9
   \       0x64   0x0A00             LSRS     R0,R0,#+8
   \       0x66   0x7020             STRB     R0,[R4, #+0]
   1347              *(p++) = (unsigned char)( psk_len      );
   \       0x68   0xF884 0x9001      STRB     R9,[R4, #+1]
   \       0x6C   0x1CA4             ADDS     R4,R4,#+2
   1348          
   1349              if( end < p || (size_t)( end - p ) < psk_len )
   \       0x6E   0x42A7             CMP      R7,R4
   \       0x70   0xD303             BCC.N    ??mbedtls_ssl_psk_derive_premaster_2
   \       0x72   0x1B3F             SUBS     R7,R7,R4
   \       0x74   0x454F             CMP      R7,R9
   \       0x76   0xF080 0x8086      BCS.W    ??mbedtls_ssl_psk_derive_premaster_4
   1350                  return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   \                     ??mbedtls_ssl_psk_derive_premaster_2: (+1)
   \       0x7A   0x....'....        LDR.W    R0,??DataTable14_11  ;; 0xffff8f00
   \       0x7E   0xE091             B.N      ??mbedtls_ssl_psk_derive_premaster_5
   \                     ??mbedtls_ssl_psk_derive_premaster_1: (+1)
   \       0x80   0x2807             CMP      R0,#+7
   \       0x82   0xD109             BNE.N    ??mbedtls_ssl_psk_derive_premaster_6
   \       0x84   0x1BB8             SUBS     R0,R7,R6
   \       0x86   0x2802             CMP      R0,#+2
   \       0x88   0xDBF7             BLT.N    ??mbedtls_ssl_psk_derive_premaster_2
   \       0x8A   0x2000             MOVS     R0,#+0
   \       0x8C   0x7030             STRB     R0,[R6, #+0]
   \       0x8E   0x2030             MOVS     R0,#+48
   \       0x90   0x7070             STRB     R0,[R6, #+1]
   \       0x92   0xF106 0x0432      ADD      R4,R6,#+50
   \       0x96   0xE7E1             B.N      ??mbedtls_ssl_psk_derive_premaster_3
   \                     ??mbedtls_ssl_psk_derive_premaster_6: (+1)
   \       0x98   0x2806             CMP      R0,#+6
   \       0x9A   0xD132             BNE.N    ??mbedtls_ssl_psk_derive_premaster_7
   \       0x9C   0x6828             LDR      R0,[R5, #+0]
   \       0x9E   0x69C0             LDR      R0,[R0, #+28]
   \       0xA0   0x9001             STR      R0,[SP, #+4]
   \       0xA2   0x6828             LDR      R0,[R5, #+0]
   \       0xA4   0x6980             LDR      R0,[R0, #+24]
   \       0xA6   0x9000             STR      R0,[SP, #+0]
   \       0xA8   0xAB02             ADD      R3,SP,#+8
   \       0xAA   0x1CB2             ADDS     R2,R6,#+2
   \       0xAC   0x1ABA             SUBS     R2,R7,R2
   \       0xAE   0x1CB1             ADDS     R1,R6,#+2
   \       0xB0   0x6BE8             LDR      R0,[R5, #+60]
   \       0xB2   0x1D00             ADDS     R0,R0,#+4
   \       0xB4   0x....'....        BL       mbedtls_dhm_calc_secret
   \       0xB8   0x0004             MOVS     R4,R0
   \       0xBA   0xD00C             BEQ.N    ??mbedtls_ssl_psk_derive_premaster_8
   \       0xBC   0x9401             STR      R4,[SP, #+4]
   \       0xBE   0x....'....        LDR.W    R0,??DataTable14_12
   \       0xC2   0x9000             STR      R0,[SP, #+0]
   \       0xC4   0xF44F 0x63A3      MOV      R3,#+1304
   \       0xC8   0x....             LDR.N    R2,??DataTable13_25
   \       0xCA   0x2101             MOVS     R1,#+1
   \       0xCC   0x4628             MOV      R0,R5
   \       0xCE   0x....'....        BL       mbedtls_debug_print_ret
   \       0xD2   0x4620             MOV      R0,R4
   \       0xD4   0xE066             B.N      ??mbedtls_ssl_psk_derive_premaster_5
   \                     ??mbedtls_ssl_psk_derive_premaster_8: (+1)
   \       0xD6   0x9802             LDR      R0,[SP, #+8]
   \       0xD8   0x0A00             LSRS     R0,R0,#+8
   \       0xDA   0x7030             STRB     R0,[R6, #+0]
   \       0xDC   0x9802             LDR      R0,[SP, #+8]
   \       0xDE   0x7070             STRB     R0,[R6, #+1]
   \       0xE0   0x9802             LDR      R0,[SP, #+8]
   \       0xE2   0x4430             ADD      R0,R6,R0
   \       0xE4   0x1C84             ADDS     R4,R0,#+2
   \       0xE6   0x6BE8             LDR      R0,[R5, #+60]
   \       0xE8   0x3044             ADDS     R0,R0,#+68
   \       0xEA   0x9001             STR      R0,[SP, #+4]
   \       0xEC   0x....'....        LDR.W    R0,??DataTable14_13
   \       0xF0   0x9000             STR      R0,[SP, #+0]
   \       0xF2   0xF240 0x531F      MOVW     R3,#+1311
   \       0xF6   0x....             LDR.N    R2,??DataTable13_25
   \       0xF8   0x2103             MOVS     R1,#+3
   \       0xFA   0x4628             MOV      R0,R5
   \       0xFC   0x....'....        BL       mbedtls_debug_print_mpi
   \      0x100   0xE7AC             B.N      ??mbedtls_ssl_psk_derive_premaster_3
   \                     ??mbedtls_ssl_psk_derive_premaster_7: (+1)
   \      0x102   0x2908             CMP      R1,#+8
   \      0x104   0xD133             BNE.N    ??mbedtls_ssl_psk_derive_premaster_9
   \      0x106   0x6828             LDR      R0,[R5, #+0]
   \      0x108   0x69C0             LDR      R0,[R0, #+28]
   \      0x10A   0x9001             STR      R0,[SP, #+4]
   \      0x10C   0x6828             LDR      R0,[R5, #+0]
   \      0x10E   0x6980             LDR      R0,[R0, #+24]
   \      0x110   0x9000             STR      R0,[SP, #+0]
   \      0x112   0x1CB3             ADDS     R3,R6,#+2
   \      0x114   0x1AFB             SUBS     R3,R7,R3
   \      0x116   0x1CB2             ADDS     R2,R6,#+2
   \      0x118   0xA902             ADD      R1,SP,#+8
   \      0x11A   0x6BE8             LDR      R0,[R5, #+60]
   \      0x11C   0x3080             ADDS     R0,R0,#+128
   \      0x11E   0x....'....        BL       mbedtls_ecdh_calc_secret
   \      0x122   0x0004             MOVS     R4,R0
   \      0x124   0xD00C             BEQ.N    ??mbedtls_ssl_psk_derive_premaster_10
   \      0x126   0x9401             STR      R4,[SP, #+4]
   \      0x128   0x....'....        LDR.W    R0,??DataTable14_14
   \      0x12C   0x9000             STR      R0,[SP, #+0]
   \      0x12E   0xF240 0x532D      MOVW     R3,#+1325
   \      0x132   0x....             LDR.N    R2,??DataTable13_25
   \      0x134   0x2101             MOVS     R1,#+1
   \      0x136   0x4628             MOV      R0,R5
   \      0x138   0x....'....        BL       mbedtls_debug_print_ret
   \      0x13C   0x4620             MOV      R0,R4
   \      0x13E   0xE031             B.N      ??mbedtls_ssl_psk_derive_premaster_5
   \                     ??mbedtls_ssl_psk_derive_premaster_10: (+1)
   \      0x140   0x9802             LDR      R0,[SP, #+8]
   \      0x142   0x0A00             LSRS     R0,R0,#+8
   \      0x144   0x7030             STRB     R0,[R6, #+0]
   \      0x146   0x9802             LDR      R0,[SP, #+8]
   \      0x148   0x7070             STRB     R0,[R6, #+1]
   \      0x14A   0x9802             LDR      R0,[SP, #+8]
   \      0x14C   0x4430             ADD      R0,R6,R0
   \      0x14E   0x1C84             ADDS     R4,R0,#+2
   \      0x150   0x6BE8             LDR      R0,[R5, #+60]
   \      0x152   0xF500 0x70A8      ADD      R0,R0,#+336
   \      0x156   0x9001             STR      R0,[SP, #+4]
   \      0x158   0x....'....        LDR.W    R0,??DataTable14_15
   \      0x15C   0x9000             STR      R0,[SP, #+0]
   \      0x15E   0xF240 0x5335      MOVW     R3,#+1333
   \      0x162   0x....             LDR.N    R2,??DataTable13_25
   \      0x164   0x2103             MOVS     R1,#+3
   \      0x166   0x4628             MOV      R0,R5
   \      0x168   0x....'....        BL       mbedtls_debug_print_mpi
   \      0x16C   0xE776             B.N      ??mbedtls_ssl_psk_derive_premaster_3
   \                     ??mbedtls_ssl_psk_derive_premaster_9: (+1)
   \      0x16E   0x....             LDR.N    R0,??DataTable13_16
   \      0x170   0x9000             STR      R0,[SP, #+0]
   \      0x172   0xF240 0x533A      MOVW     R3,#+1338
   \      0x176   0x....             LDR.N    R2,??DataTable13_25
   \      0x178   0x2101             MOVS     R1,#+1
   \      0x17A   0x4628             MOV      R0,R5
   \      0x17C   0x....'....        BL       mbedtls_debug_print_msg
   \      0x180   0x....'....        LDR.W    R0,??DataTable14_16  ;; 0xffff9400
   \      0x184   0xE00E             B.N      ??mbedtls_ssl_psk_derive_premaster_5
   1351          
   1352              memcpy( p, psk, psk_len );
   \                     ??mbedtls_ssl_psk_derive_premaster_4: (+1)
   \      0x186   0x464A             MOV      R2,R9
   \      0x188   0x4641             MOV      R1,R8
   \      0x18A   0x4620             MOV      R0,R4
   \      0x18C   0x....'....        BL       __aeabi_memcpy
   1353              p += psk_len;
   1354          
   1355              ssl->handshake->pmslen = p - ssl->handshake->premaster;
   \      0x190   0xEB04 0x0109      ADD      R1,R4,R9
   \      0x194   0x6BE8             LDR      R0,[R5, #+60]
   \      0x196   0xF200 0x409C      ADDW     R0,R0,#+1180
   \      0x19A   0x1A09             SUBS     R1,R1,R0
   \      0x19C   0x6BE8             LDR      R0,[R5, #+60]
   \      0x19E   0xF8C0 0x1458      STR      R1,[R0, #+1112]
   1356          
   1357              return( 0 );
   \      0x1A2   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_ssl_psk_derive_premaster_5: (+1)
   \      0x1A4   0xE8BD 0x83FE      POP      {R1-R9,PC}       ;; return
   1358          }
   1359          #endif /* MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED */
   1360          
   1361          #if defined(MBEDTLS_SSL_PROTO_SSL3)
   1362          /*
   1363           * SSLv3.0 MAC functions
   1364           */
   1365          #define SSL_MAC_MAX_BYTES   20  /* MD-5 or SHA-1 */
   1366          static void ssl_mac( mbedtls_md_context_t *md_ctx,
   1367                               const unsigned char *secret,
   1368                               const unsigned char *buf, size_t len,
   1369                               const unsigned char *ctr, int type,
   1370                               unsigned char out[SSL_MAC_MAX_BYTES] )
   1371          {
   1372              unsigned char header[11];
   1373              unsigned char padding[48];
   1374              int padlen;
   1375              int md_size = mbedtls_md_get_size( md_ctx->md_info );
   1376              int md_type = mbedtls_md_get_type( md_ctx->md_info );
   1377          
   1378              /* Only MD5 and SHA-1 supported */
   1379              if( md_type == MBEDTLS_MD_MD5 )
   1380                  padlen = 48;
   1381              else
   1382                  padlen = 40;
   1383          
   1384              memcpy( header, ctr, 8 );
   1385              header[ 8] = (unsigned char)  type;
   1386              header[ 9] = (unsigned char)( len >> 8 );
   1387              header[10] = (unsigned char)( len      );
   1388          
   1389              memset( padding, 0x36, padlen );
   1390              mbedtls_md_starts( md_ctx );
   1391              mbedtls_md_update( md_ctx, secret,  md_size );
   1392              mbedtls_md_update( md_ctx, padding, padlen  );
   1393              mbedtls_md_update( md_ctx, header,  11      );
   1394              mbedtls_md_update( md_ctx, buf,     len     );
   1395              mbedtls_md_finish( md_ctx, out              );
   1396          
   1397              memset( padding, 0x5C, padlen );
   1398              mbedtls_md_starts( md_ctx );
   1399              mbedtls_md_update( md_ctx, secret,    md_size );
   1400              mbedtls_md_update( md_ctx, padding,   padlen  );
   1401              mbedtls_md_update( md_ctx, out,       md_size );
   1402              mbedtls_md_finish( md_ctx, out                );
   1403          }
   1404          #endif /* MBEDTLS_SSL_PROTO_SSL3 */
   1405          
   1406          #if defined(MBEDTLS_ARC4_C) || defined(MBEDTLS_CIPHER_NULL_CIPHER) ||     \
   1407              ( defined(MBEDTLS_CIPHER_MODE_CBC) &&                                  \
   1408                ( defined(MBEDTLS_AES_C) || defined(MBEDTLS_CAMELLIA_C) || defined(MBEDTLS_ARIA_C)) )
   1409          #define SSL_SOME_MODES_USE_MAC
   1410          #endif
   1411          
   1412          /* The function below is only used in the Lucky 13 counter-measure in
   1413           * ssl_decrypt_buf(). These are the defines that guard the call site. */
   1414          #if defined(SSL_SOME_MODES_USE_MAC) && \
   1415              ( defined(MBEDTLS_SSL_PROTO_TLS1) || \
   1416                defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
   1417                defined(MBEDTLS_SSL_PROTO_TLS1_2) )
   1418          /* This function makes sure every byte in the memory region is accessed
   1419           * (in ascending addresses order) */

   \                                 In section .text, align 2, keep-with-next
   1420          static void ssl_read_memory( unsigned char *p, size_t len )
   1421          {
   \                     ssl_read_memory: (+1)
   \        0x0   0xB081             SUB      SP,SP,#+4
   1422              unsigned char acc = 0;
   \        0x2   0x2200             MOVS     R2,#+0
   \        0x4   0x2900             CMP      R1,#+0
   \        0x6   0xE003             B.N      ??ssl_read_memory_0
   1423              volatile unsigned char force;
   1424          
   1425              for( ; len != 0; p++, len-- )
   1426                  acc ^= *p;
   \                     ??ssl_read_memory_1: (+1)
   \        0x8   0xF810 0x3B01      LDRB     R3,[R0], #+1
   \        0xC   0x405A             EORS     R2,R3,R2
   \        0xE   0x1E49             SUBS     R1,R1,#+1
   \                     ??ssl_read_memory_0: (+1)
   \       0x10   0xD1FA             BNE.N    ??ssl_read_memory_1
   1427          
   1428              force = acc;
   \       0x12   0xF88D 0x2000      STRB     R2,[SP, #+0]
   1429              (void) force;
   \       0x16   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   1430          }
   \       0x1A   0xB001             ADD      SP,SP,#+4
   \       0x1C   0x4770             BX       LR               ;; return
   1431          #endif /* SSL_SOME_MODES_USE_MAC && ( TLS1 || TLS1_1 || TLS1_2 ) */
   1432          
   1433          /*
   1434           * Encryption/decryption functions
   1435           */

   \                                 In section .text, align 2, keep-with-next
   1436          static int ssl_encrypt_buf( mbedtls_ssl_context *ssl )
   1437          {
   \                     ssl_encrypt_buf: (+1)
   \        0x0   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \        0x4   0xB095             SUB      SP,SP,#+84
   \        0x6   0x4604             MOV      R4,R0
   1438              mbedtls_cipher_mode_t mode;
   1439              int auth_done = 0;
   \        0x8   0x2500             MOVS     R5,#+0
   1440          
   1441              MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> encrypt buf" ) );
   \        0xA   0x....'....        LDR.W    R6,??DataTable14_17
   \        0xE   0x....'....        LDR.W    R0,??DataTable14_18
   \       0x12   0x9000             STR      R0,[SP, #+0]
   \       0x14   0xF240 0x53A1      MOVW     R3,#+1441
   \       0x18   0x4632             MOV      R2,R6
   \       0x1A   0x2102             MOVS     R1,#+2
   \       0x1C   0x4620             MOV      R0,R4
   \       0x1E   0x....'....        BL       mbedtls_debug_print_msg
   1442          
   1443              if( ssl->session_out == NULL || ssl->transform_out == NULL )
   \       0x22   0x6B20             LDR      R0,[R4, #+48]
   \       0x24   0x2800             CMP      R0,#+0
   \       0x26   0xD002             BEQ.N    ??ssl_encrypt_buf_0
   \       0x28   0x6C60             LDR      R0,[R4, #+68]
   \       0x2A   0x2800             CMP      R0,#+0
   \       0x2C   0xD10C             BNE.N    ??ssl_encrypt_buf_1
   1444              {
   1445                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
   \                     ??ssl_encrypt_buf_0: (+1)
   \       0x2E   0x....'....        LDR.W    R0,??DataTable14_19
   \       0x32   0x9000             STR      R0,[SP, #+0]
   \       0x34   0xF240 0x53A5      MOVW     R3,#+1445
   \       0x38   0x4632             MOV      R2,R6
   \       0x3A   0x2101             MOVS     R1,#+1
   \       0x3C   0x4620             MOV      R0,R4
   \       0x3E   0x....'....        BL       mbedtls_debug_print_msg
   1446                  return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   \       0x42   0x....'....        LDR.W    R0,??DataTable14_16  ;; 0xffff9400
   \       0x46   0xE281             B.N      ??ssl_encrypt_buf_2
   1447              }
   1448          
   1449              mode = mbedtls_cipher_get_cipher_mode( &ssl->transform_out->cipher_ctx_enc );
   \                     ??ssl_encrypt_buf_1: (+1)
   \       0x48   0x3050             ADDS     R0,R0,#+80
   \       0x4A   0x....'....        BL       mbedtls_cipher_get_cipher_mode
   \       0x4E   0x4607             MOV      R7,R0
   1450          
   1451              MBEDTLS_SSL_DEBUG_BUF( 4, "before encrypt: output payload",
   1452                                ssl->out_msg, ssl->out_msglen );
   \       0x50   0xF8D4 0x00CC      LDR      R0,[R4, #+204]
   \       0x54   0x9002             STR      R0,[SP, #+8]
   \       0x56   0xF8D4 0x00C4      LDR      R0,[R4, #+196]
   \       0x5A   0x9001             STR      R0,[SP, #+4]
   \       0x5C   0x....'....        LDR.W    R0,??DataTable14_20
   \       0x60   0x9000             STR      R0,[SP, #+0]
   \       0x62   0xF240 0x53AC      MOVW     R3,#+1452
   \       0x66   0x4632             MOV      R2,R6
   \       0x68   0x2104             MOVS     R1,#+4
   \       0x6A   0x4620             MOV      R0,R4
   \       0x6C   0x....'....        BL       mbedtls_debug_print_buf
   1453          
   1454              /*
   1455               * Add MAC before if needed
   1456               */
   1457          #if defined(SSL_SOME_MODES_USE_MAC)
   1458              if( mode == MBEDTLS_MODE_STREAM ||
   1459                  ( mode == MBEDTLS_MODE_CBC
   1460          #if defined(MBEDTLS_SSL_ENCRYPT_THEN_MAC)
   1461                    && ssl->session_out->encrypt_then_mac == MBEDTLS_SSL_ETM_DISABLED
   1462          #endif
   1463                  ) )
   \       0x70   0x2F07             CMP      R7,#+7
   \       0x72   0xD005             BEQ.N    ??ssl_encrypt_buf_3
   \       0x74   0x2F02             CMP      R7,#+2
   \       0x76   0xD151             BNE.N    ??ssl_encrypt_buf_4
   \       0x78   0x6B20             LDR      R0,[R4, #+48]
   \       0x7A   0x6F80             LDR      R0,[R0, #+120]
   \       0x7C   0x2800             CMP      R0,#+0
   \       0x7E   0xD14D             BNE.N    ??ssl_encrypt_buf_4
   1464              {
   1465          #if defined(MBEDTLS_SSL_PROTO_SSL3)
   1466                  if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 )
   1467                  {
   1468                      unsigned char mac[SSL_MAC_MAX_BYTES];
   1469          
   1470                      ssl_mac( &ssl->transform_out->md_ctx_enc,
   1471                                ssl->transform_out->mac_enc,
   1472                                ssl->out_msg, ssl->out_msglen,
   1473                                ssl->out_ctr, ssl->out_msgtype,
   1474                                mac );
   1475          
   1476                      memcpy( ssl->out_msg + ssl->out_msglen, mac, ssl->transform_out->maclen );
   1477                  }
   1478                  else
   1479          #endif
   1480          #if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
   1481                  defined(MBEDTLS_SSL_PROTO_TLS1_2)
   1482                  if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
   \                     ??ssl_encrypt_buf_3: (+1)
   \       0x80   0x6960             LDR      R0,[R4, #+20]
   \       0x82   0x2801             CMP      R0,#+1
   \       0x84   0xDB59             BLT.N    ??ssl_encrypt_buf_5
   1483                  {
   1484                      unsigned char mac[MBEDTLS_SSL_MAC_ADD];
   1485          
   1486                      mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_ctr, 8 );
   \       0x86   0x2208             MOVS     R2,#+8
   \       0x88   0xF8D4 0x10B4      LDR      R1,[R4, #+180]
   \       0x8C   0x6C60             LDR      R0,[R4, #+68]
   \       0x8E   0x3038             ADDS     R0,R0,#+56
   \       0x90   0x....'....        BL       mbedtls_md_hmac_update
   1487                      mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_hdr, 3 );
   \       0x94   0x2203             MOVS     R2,#+3
   \       0x96   0xF8D4 0x10B8      LDR      R1,[R4, #+184]
   \       0x9A   0x6C60             LDR      R0,[R4, #+68]
   \       0x9C   0x3038             ADDS     R0,R0,#+56
   \       0x9E   0x....'....        BL       mbedtls_md_hmac_update
   1488                      mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_len, 2 );
   \       0xA2   0x2202             MOVS     R2,#+2
   \       0xA4   0xF8D4 0x10BC      LDR      R1,[R4, #+188]
   \       0xA8   0x6C60             LDR      R0,[R4, #+68]
   \       0xAA   0x3038             ADDS     R0,R0,#+56
   \       0xAC   0x....'....        BL       mbedtls_md_hmac_update
   1489                      mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc,
   1490                                       ssl->out_msg, ssl->out_msglen );
   \       0xB0   0xF8D4 0x20CC      LDR      R2,[R4, #+204]
   \       0xB4   0xF8D4 0x10C4      LDR      R1,[R4, #+196]
   \       0xB8   0x6C60             LDR      R0,[R4, #+68]
   \       0xBA   0x3038             ADDS     R0,R0,#+56
   \       0xBC   0x....'....        BL       mbedtls_md_hmac_update
   1491                      mbedtls_md_hmac_finish( &ssl->transform_out->md_ctx_enc, mac );
   \       0xC0   0x4669             MOV      R1,SP
   \       0xC2   0x6C60             LDR      R0,[R4, #+68]
   \       0xC4   0x3038             ADDS     R0,R0,#+56
   \       0xC6   0x....'....        BL       mbedtls_md_hmac_finish
   1492                      mbedtls_md_hmac_reset( &ssl->transform_out->md_ctx_enc );
   \       0xCA   0x6C60             LDR      R0,[R4, #+68]
   \       0xCC   0x3038             ADDS     R0,R0,#+56
   \       0xCE   0x....'....        BL       mbedtls_md_hmac_reset
   1493          
   1494                      memcpy( ssl->out_msg + ssl->out_msglen, mac, ssl->transform_out->maclen );
   \       0xD2   0x6C60             LDR      R0,[R4, #+68]
   \       0xD4   0x6942             LDR      R2,[R0, #+20]
   \       0xD6   0x4669             MOV      R1,SP
   \       0xD8   0xF8D4 0x00C4      LDR      R0,[R4, #+196]
   \       0xDC   0xF8D4 0x30CC      LDR      R3,[R4, #+204]
   \       0xE0   0x4418             ADD      R0,R0,R3
   \       0xE2   0x....'....        BL       __aeabi_memcpy
   1495                  }
   1496                  else
   1497          #endif
   1498                  {
   1499                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
   1500                      return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   1501                  }
   1502          
   1503                  MBEDTLS_SSL_DEBUG_BUF( 4, "computed mac",
   1504                                 ssl->out_msg + ssl->out_msglen,
   1505                                 ssl->transform_out->maclen );
   \       0xE6   0x6C60             LDR      R0,[R4, #+68]
   \       0xE8   0x6940             LDR      R0,[R0, #+20]
   \       0xEA   0x9002             STR      R0,[SP, #+8]
   \       0xEC   0xF8D4 0x00C4      LDR      R0,[R4, #+196]
   \       0xF0   0xF8D4 0x10CC      LDR      R1,[R4, #+204]
   \       0xF4   0x4408             ADD      R0,R0,R1
   \       0xF6   0x9001             STR      R0,[SP, #+4]
   \       0xF8   0x....'....        LDR.W    R0,??DataTable15
   \       0xFC   0x9000             STR      R0,[SP, #+0]
   \       0xFE   0xF240 0x53E1      MOVW     R3,#+1505
   \      0x102   0x4632             MOV      R2,R6
   \      0x104   0x2104             MOVS     R1,#+4
   \      0x106   0x4620             MOV      R0,R4
   \      0x108   0x....'....        BL       mbedtls_debug_print_buf
   1506          
   1507                  ssl->out_msglen += ssl->transform_out->maclen;
   \      0x10C   0xF8D4 0x10CC      LDR      R1,[R4, #+204]
   \      0x110   0x6C60             LDR      R0,[R4, #+68]
   \      0x112   0x6940             LDR      R0,[R0, #+20]
   \      0x114   0x1841             ADDS     R1,R0,R1
   \      0x116   0xF8C4 0x10CC      STR      R1,[R4, #+204]
   1508                  auth_done++;
   \      0x11A   0x2501             MOVS     R5,#+1
   1509              }
   1510          #endif /* AEAD not the only option */
   1511          
   1512              /*
   1513               * Encrypt
   1514               */
   1515          #if defined(MBEDTLS_ARC4_C) || defined(MBEDTLS_CIPHER_NULL_CIPHER)
   1516              if( mode == MBEDTLS_MODE_STREAM )
   1517              {
   1518                  int ret;
   1519                  size_t olen = 0;
   1520          
   1521                  MBEDTLS_SSL_DEBUG_MSG( 3, ( "before encrypt: msglen = %d, "
   1522                                      "including %d bytes of padding",
   1523                                 ssl->out_msglen, 0 ) );
   1524          
   1525                  if( ( ret = mbedtls_cipher_crypt( &ssl->transform_out->cipher_ctx_enc,
   1526                                             ssl->transform_out->iv_enc,
   1527                                             ssl->transform_out->ivlen,
   1528                                             ssl->out_msg, ssl->out_msglen,
   1529                                             ssl->out_msg, &olen ) ) != 0 )
   1530                  {
   1531                      MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_crypt", ret );
   1532                      return( ret );
   1533                  }
   1534          
   1535                  if( ssl->out_msglen != olen )
   1536                  {
   1537                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
   1538                      return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   1539                  }
   1540              }
   1541              else
   1542          #endif /* MBEDTLS_ARC4_C || MBEDTLS_CIPHER_NULL_CIPHER */
   1543          #if defined(MBEDTLS_GCM_C) || \
   1544              defined(MBEDTLS_CCM_C) || \
   1545              defined(MBEDTLS_CHACHAPOLY_C)
   1546              if( mode == MBEDTLS_MODE_GCM ||
   1547                  mode == MBEDTLS_MODE_CCM ||
   1548                  mode == MBEDTLS_MODE_CHACHAPOLY )
   \                     ??ssl_encrypt_buf_4: (+1)
   \      0x11C   0x2F06             CMP      R7,#+6
   \      0x11E   0xD004             BEQ.N    ??ssl_encrypt_buf_6
   \      0x120   0x2F08             CMP      R7,#+8
   \      0x122   0xD002             BEQ.N    ??ssl_encrypt_buf_6
   \      0x124   0x2F0A             CMP      R7,#+10
   \      0x126   0xF040 0x8112      BNE.W    ??ssl_encrypt_buf_7
   1549              {
   1550                  int ret;
   1551                  size_t enc_msglen, olen;
   1552                  unsigned char *enc_msg;
   1553                  unsigned char add_data[13];
   1554                  unsigned char iv[12];
   1555                  mbedtls_ssl_transform *transform = ssl->transform_out;
   \                     ??ssl_encrypt_buf_6: (+1)
   \      0x12A   0x6C67             LDR      R7,[R4, #+68]
   1556                  unsigned char taglen = transform->ciphersuite_info->flags &
   1557                                         MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
   \      0x12C   0x6838             LDR      R0,[R7, #+0]
   \      0x12E   0x7F00             LDRB     R0,[R0, #+28]
   \      0x130   0x0780             LSLS     R0,R0,#+30
   \      0x132   0xD50F             BPL.N    ??ssl_encrypt_buf_8
   \      0x134   0xF04F 0x0808      MOV      R8,#+8
   \      0x138   0xE00E             B.N      ??ssl_encrypt_buf_9
   \                     ??ssl_encrypt_buf_5: (+1)
   \      0x13A   0x....'....        LDR.W    R0,??DataTable14_19
   \      0x13E   0x9000             STR      R0,[SP, #+0]
   \      0x140   0xF240 0x53DB      MOVW     R3,#+1499
   \      0x144   0x4632             MOV      R2,R6
   \      0x146   0x2101             MOVS     R1,#+1
   \      0x148   0x4620             MOV      R0,R4
   \      0x14A   0x....'....        BL       mbedtls_debug_print_msg
   \      0x14E   0x....'....        LDR.W    R0,??DataTable14_16  ;; 0xffff9400
   \      0x152   0xE1FB             B.N      ??ssl_encrypt_buf_2
   \                     ??ssl_encrypt_buf_8: (+1)
   \      0x154   0xF04F 0x0810      MOV      R8,#+16
   1558                  size_t explicit_ivlen = transform->ivlen - transform->fixed_ivlen;
   \                     ??ssl_encrypt_buf_9: (+1)
   \      0x158   0x68F8             LDR      R0,[R7, #+12]
   \      0x15A   0xF8D7 0x9010      LDR      R9,[R7, #+16]
   \      0x15E   0xEBA0 0x0909      SUB      R9,R0,R9
   1559          
   1560                  /*
   1561                   * Prepare additional authenticated data
   1562                   */
   1563                  memcpy( add_data, ssl->out_ctr, 8 );
   \      0x162   0x2208             MOVS     R2,#+8
   \      0x164   0xF8D4 0x10B4      LDR      R1,[R4, #+180]
   \      0x168   0xA80B             ADD      R0,SP,#+44
   \      0x16A   0x....'....        BL       __aeabi_memcpy
   1564                  add_data[8]  = ssl->out_msgtype;
   \      0x16E   0xF10D 0x0A2C      ADD      R10,SP,#+44
   \      0x172   0xF8D4 0x00C8      LDR      R0,[R4, #+200]
   \      0x176   0xF88A 0x0008      STRB     R0,[R10, #+8]
   1565                  mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
   1566                                     ssl->conf->transport, add_data + 9 );
   \      0x17A   0xF10D 0x0335      ADD      R3,SP,#+53
   \      0x17E   0x6820             LDR      R0,[R4, #+0]
   \      0x180   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \      0x184   0xF3C0 0x0240      UBFX     R2,R0,#+1,#+1
   \      0x188   0x6961             LDR      R1,[R4, #+20]
   \      0x18A   0x6920             LDR      R0,[R4, #+16]
   \      0x18C   0x....'....        BL       mbedtls_ssl_write_version
   1567                  add_data[11] = ( ssl->out_msglen >> 8 ) & 0xFF;
   \      0x190   0xF8D4 0x00CC      LDR      R0,[R4, #+204]
   \      0x194   0x0A00             LSRS     R0,R0,#+8
   \      0x196   0xF88A 0x000B      STRB     R0,[R10, #+11]
   1568                  add_data[12] = ssl->out_msglen & 0xFF;
   \      0x19A   0xF8D4 0x00CC      LDR      R0,[R4, #+204]
   \      0x19E   0xF88A 0x000C      STRB     R0,[R10, #+12]
   1569          
   1570                  MBEDTLS_SSL_DEBUG_BUF( 4, "additional data for AEAD", add_data, 13 );
   \      0x1A2   0x200D             MOVS     R0,#+13
   \      0x1A4   0x9002             STR      R0,[SP, #+8]
   \      0x1A6   0xA80B             ADD      R0,SP,#+44
   \      0x1A8   0x9001             STR      R0,[SP, #+4]
   \      0x1AA   0x....'....        LDR.W    R0,??DataTable16
   \      0x1AE   0x9000             STR      R0,[SP, #+0]
   \      0x1B0   0xF240 0x6322      MOVW     R3,#+1570
   \      0x1B4   0x4632             MOV      R2,R6
   \      0x1B6   0x2104             MOVS     R1,#+4
   \      0x1B8   0x4620             MOV      R0,R4
   \      0x1BA   0x....'....        BL       mbedtls_debug_print_buf
   1571          
   1572                  /*
   1573                   * Generate IV
   1574                   */
   1575                  if( transform->ivlen == 12 && transform->fixed_ivlen == 4 )
   \      0x1BE   0x68F8             LDR      R0,[R7, #+12]
   \      0x1C0   0x280C             CMP      R0,#+12
   \      0x1C2   0xD16D             BNE.N    ??ssl_encrypt_buf_10
   \      0x1C4   0x6938             LDR      R0,[R7, #+16]
   \      0x1C6   0x2804             CMP      R0,#+4
   \      0x1C8   0xD16A             BNE.N    ??ssl_encrypt_buf_10
   1576                  {
   1577                      /* GCM and CCM: fixed || explicit (=seqnum) */
   1578                      memcpy( iv, transform->iv_enc, transform->fixed_ivlen );
   \      0x1CA   0x4602             MOV      R2,R0
   \      0x1CC   0xF107 0x0118      ADD      R1,R7,#+24
   \      0x1D0   0xA808             ADD      R0,SP,#+32
   \      0x1D2   0x....'....        BL       __aeabi_memcpy4
   1579                      memcpy( iv + transform->fixed_ivlen, ssl->out_ctr, 8 );
   \      0x1D6   0x2208             MOVS     R2,#+8
   \      0x1D8   0xF8D4 0x10B4      LDR      R1,[R4, #+180]
   \      0x1DC   0xA808             ADD      R0,SP,#+32
   \      0x1DE   0x693B             LDR      R3,[R7, #+16]
   \      0x1E0   0x4418             ADD      R0,R0,R3
   \      0x1E2   0x....'....        BL       __aeabi_memcpy
   1580                      memcpy( ssl->out_iv, ssl->out_ctr, 8 );
   \      0x1E6   0x2208             MOVS     R2,#+8
   \      0x1E8   0xF8D4 0x10B4      LDR      R1,[R4, #+180]
   \      0x1EC   0xF8D4 0x00C0      LDR      R0,[R4, #+192]
   \      0x1F0   0x....'....        BL       __aeabi_memcpy
   1581          
   1582                  }
   1583                  else if( transform->ivlen == 12 && transform->fixed_ivlen == 12 )
   1584                  {
   1585                      /* ChachaPoly: fixed XOR sequence number */
   1586                      unsigned char i;
   1587          
   1588                      memcpy( iv, transform->iv_enc, transform->fixed_ivlen );
   1589          
   1590                      for( i = 0; i < 8; i++ )
   1591                          iv[i+4] ^= ssl->out_ctr[i];
   1592                  }
   1593                  else
   1594                  {
   1595                      /* Reminder if we ever add an AEAD mode with a different size */
   1596                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
   1597                      return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   1598                  }
   1599          
   1600                  MBEDTLS_SSL_DEBUG_BUF( 4, "IV used (internal)",
   1601                                            iv, transform->ivlen );
   \                     ??ssl_encrypt_buf_11: (+1)
   \      0x1F4   0x68F8             LDR      R0,[R7, #+12]
   \      0x1F6   0x9002             STR      R0,[SP, #+8]
   \      0x1F8   0xA808             ADD      R0,SP,#+32
   \      0x1FA   0x9001             STR      R0,[SP, #+4]
   \      0x1FC   0x....'....        LDR.W    R0,??DataTable16_1
   \      0x200   0x9000             STR      R0,[SP, #+0]
   \      0x202   0xF240 0x6341      MOVW     R3,#+1601
   \      0x206   0x4632             MOV      R2,R6
   \      0x208   0x2104             MOVS     R1,#+4
   \      0x20A   0x4620             MOV      R0,R4
   \      0x20C   0x....'....        BL       mbedtls_debug_print_buf
   1602                  MBEDTLS_SSL_DEBUG_BUF( 4, "IV used (transmitted)",
   1603                                            ssl->out_iv, explicit_ivlen );
   \      0x210   0xF8CD 0x9008      STR      R9,[SP, #+8]
   \      0x214   0xF8D4 0x00C0      LDR      R0,[R4, #+192]
   \      0x218   0x9001             STR      R0,[SP, #+4]
   \      0x21A   0x....'....        LDR.W    R0,??DataTable16_2
   \      0x21E   0x9000             STR      R0,[SP, #+0]
   \      0x220   0xF240 0x6343      MOVW     R3,#+1603
   \      0x224   0x4632             MOV      R2,R6
   \      0x226   0x2104             MOVS     R1,#+4
   \      0x228   0x4620             MOV      R0,R4
   \      0x22A   0x....'....        BL       mbedtls_debug_print_buf
   1604          
   1605                  /*
   1606                   * Fix message length with added IV
   1607                   */
   1608                  enc_msg = ssl->out_msg;
   \      0x22E   0xF8D4 0xA0C4      LDR      R10,[R4, #+196]
   1609                  enc_msglen = ssl->out_msglen;
   \      0x232   0xF8D4 0xB0CC      LDR      R11,[R4, #+204]
   1610                  ssl->out_msglen += explicit_ivlen;
   \      0x236   0x4658             MOV      R0,R11
   \      0x238   0x4481             ADD      R9,R9,R0
   \      0x23A   0xF8C4 0x90CC      STR      R9,[R4, #+204]
   1611          
   1612                  MBEDTLS_SSL_DEBUG_MSG( 3, ( "before encrypt: msglen = %d, "
   1613                                              "including 0 bytes of padding",
   1614                                              ssl->out_msglen ) );
   \      0x23E   0x4648             MOV      R0,R9
   \      0x240   0x9001             STR      R0,[SP, #+4]
   \      0x242   0x....'....        LDR.W    R0,??DataTable16_3
   \      0x246   0x9000             STR      R0,[SP, #+0]
   \      0x248   0xF240 0x634E      MOVW     R3,#+1614
   \      0x24C   0x4632             MOV      R2,R6
   \      0x24E   0x2103             MOVS     R1,#+3
   \      0x250   0x4620             MOV      R0,R4
   \      0x252   0x....'....        BL       mbedtls_debug_print_msg
   1615          
   1616                  /*
   1617                   * Encrypt and authenticate
   1618                   */
   1619                  if( ( ret = mbedtls_cipher_auth_encrypt( &transform->cipher_ctx_enc,
   1620                                                   iv, transform->ivlen,
   1621                                                   add_data, 13,
   1622                                                   enc_msg, enc_msglen,
   1623                                                   enc_msg, &olen,
   1624                                                   enc_msg + enc_msglen, taglen ) ) != 0 )
   \      0x256   0xF8CD 0x8018      STR      R8,[SP, #+24]
   \      0x25A   0xEB0A 0x000B      ADD      R0,R10,R11
   \      0x25E   0x9005             STR      R0,[SP, #+20]
   \      0x260   0xA807             ADD      R0,SP,#+28
   \      0x262   0x9004             STR      R0,[SP, #+16]
   \      0x264   0xF8CD 0xA00C      STR      R10,[SP, #+12]
   \      0x268   0xF8CD 0xB008      STR      R11,[SP, #+8]
   \      0x26C   0xF8CD 0xA004      STR      R10,[SP, #+4]
   \      0x270   0x200D             MOVS     R0,#+13
   \      0x272   0x9000             STR      R0,[SP, #+0]
   \      0x274   0xAB0B             ADD      R3,SP,#+44
   \      0x276   0x68FA             LDR      R2,[R7, #+12]
   \      0x278   0xA908             ADD      R1,SP,#+32
   \      0x27A   0xF107 0x0050      ADD      R0,R7,#+80
   \      0x27E   0x....'....        BL       mbedtls_cipher_auth_encrypt
   \      0x282   0x0007             MOVS     R7,R0
   \      0x284   0xD032             BEQ.N    ??ssl_encrypt_buf_12
   1625                  {
   1626                      MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_auth_encrypt", ret );
   \      0x286   0x9701             STR      R7,[SP, #+4]
   \      0x288   0x....'....        LDR.W    R0,??DataTable16_4
   \      0x28C   0x9000             STR      R0,[SP, #+0]
   \      0x28E   0xF240 0x635A      MOVW     R3,#+1626
   \      0x292   0x4632             MOV      R2,R6
   \      0x294   0x2101             MOVS     R1,#+1
   \      0x296   0x4620             MOV      R0,R4
   \      0x298   0x....'....        BL       mbedtls_debug_print_ret
   1627                      return( ret );
   \      0x29C   0x4638             MOV      R0,R7
   \      0x29E   0xE155             B.N      ??ssl_encrypt_buf_2
   1628                  }
   \                     ??ssl_encrypt_buf_10: (+1)
   \      0x2A0   0x68F8             LDR      R0,[R7, #+12]
   \      0x2A2   0x280C             CMP      R0,#+12
   \      0x2A4   0xD117             BNE.N    ??ssl_encrypt_buf_13
   \      0x2A6   0x6938             LDR      R0,[R7, #+16]
   \      0x2A8   0x280C             CMP      R0,#+12
   \      0x2AA   0xD114             BNE.N    ??ssl_encrypt_buf_13
   \      0x2AC   0x4602             MOV      R2,R0
   \      0x2AE   0xF107 0x0118      ADD      R1,R7,#+24
   \      0x2B2   0xA808             ADD      R0,SP,#+32
   \      0x2B4   0x....'....        BL       __aeabi_memcpy4
   \      0x2B8   0x2000             MOVS     R0,#+0
   \                     ??ssl_encrypt_buf_14: (+1)
   \      0x2BA   0x2808             CMP      R0,#+8
   \      0x2BC   0xDA9A             BGE.N    ??ssl_encrypt_buf_11
   \      0x2BE   0xA908             ADD      R1,SP,#+32
   \      0x2C0   0x4401             ADD      R1,R1,R0
   \      0x2C2   0x7909             LDRB     R1,[R1, #+4]
   \      0x2C4   0xF8D4 0x20B4      LDR      R2,[R4, #+180]
   \      0x2C8   0x5C12             LDRB     R2,[R2, R0]
   \      0x2CA   0x4051             EORS     R1,R2,R1
   \      0x2CC   0xAA08             ADD      R2,SP,#+32
   \      0x2CE   0x4402             ADD      R2,R2,R0
   \      0x2D0   0x7111             STRB     R1,[R2, #+4]
   \      0x2D2   0x1C40             ADDS     R0,R0,#+1
   \      0x2D4   0xE7F1             B.N      ??ssl_encrypt_buf_14
   \                     ??ssl_encrypt_buf_13: (+1)
   \      0x2D6   0x....             LDR.N    R0,??DataTable14_19
   \      0x2D8   0x9000             STR      R0,[SP, #+0]
   \      0x2DA   0xF240 0x633C      MOVW     R3,#+1596
   \      0x2DE   0x4632             MOV      R2,R6
   \      0x2E0   0x2101             MOVS     R1,#+1
   \      0x2E2   0x4620             MOV      R0,R4
   \      0x2E4   0x....'....        BL       mbedtls_debug_print_msg
   \      0x2E8   0x....             LDR.N    R0,??DataTable14_16  ;; 0xffff9400
   \      0x2EA   0xE12F             B.N      ??ssl_encrypt_buf_2
   1629          
   1630                  if( olen != enc_msglen )
   \                     ??ssl_encrypt_buf_12: (+1)
   \      0x2EC   0x9807             LDR      R0,[SP, #+28]
   \      0x2EE   0x4558             CMP      R0,R11
   \      0x2F0   0xD00A             BEQ.N    ??ssl_encrypt_buf_15
   1631                  {
   1632                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
   \      0x2F2   0x....             LDR.N    R0,??DataTable14_19
   \      0x2F4   0x9000             STR      R0,[SP, #+0]
   \      0x2F6   0xF44F 0x63CC      MOV      R3,#+1632
   \      0x2FA   0x4632             MOV      R2,R6
   \      0x2FC   0x2101             MOVS     R1,#+1
   \      0x2FE   0x4620             MOV      R0,R4
   \      0x300   0x....'....        BL       mbedtls_debug_print_msg
   1633                      return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   \      0x304   0x....             LDR.N    R0,??DataTable14_16  ;; 0xffff9400
   \      0x306   0xE121             B.N      ??ssl_encrypt_buf_2
   1634                  }
   1635          
   1636                  ssl->out_msglen += taglen;
   \                     ??ssl_encrypt_buf_15: (+1)
   \      0x308   0xF8D4 0x00CC      LDR      R0,[R4, #+204]
   \      0x30C   0x4440             ADD      R0,R8,R0
   \      0x30E   0xF8C4 0x00CC      STR      R0,[R4, #+204]
   1637                  auth_done++;
   \      0x312   0x1C6D             ADDS     R5,R5,#+1
   1638          
   1639                  MBEDTLS_SSL_DEBUG_BUF( 4, "after encrypt: tag", enc_msg + enc_msglen, taglen );
   \      0x314   0xF8CD 0x8008      STR      R8,[SP, #+8]
   \      0x318   0xEB0A 0x000B      ADD      R0,R10,R11
   \      0x31C   0x9001             STR      R0,[SP, #+4]
   \      0x31E   0x....'....        LDR.W    R0,??DataTable16_5
   \      0x322   0x9000             STR      R0,[SP, #+0]
   \      0x324   0xF240 0x6367      MOVW     R3,#+1639
   \      0x328   0x4632             MOV      R2,R6
   \      0x32A   0x2104             MOVS     R1,#+4
   \      0x32C   0x4620             MOV      R0,R4
   \      0x32E   0x....'....        BL       mbedtls_debug_print_buf
   1640              }
   1641              else
   1642          #endif /* MBEDTLS_GCM_C || MBEDTLS_CCM_C */
   1643          #if defined(MBEDTLS_CIPHER_MODE_CBC) &&                                    \
   1644              ( defined(MBEDTLS_AES_C) || defined(MBEDTLS_CAMELLIA_C) || defined(MBEDTLS_ARIA_C) )
   1645              if( mode == MBEDTLS_MODE_CBC )
   1646              {
   1647                  int ret;
   1648                  unsigned char *enc_msg;
   1649                  size_t enc_msglen, padlen, olen = 0, i;
   1650          
   1651                  padlen = ssl->transform_out->ivlen - ( ssl->out_msglen + 1 ) %
   1652                           ssl->transform_out->ivlen;
   1653                  if( padlen == ssl->transform_out->ivlen )
   1654                      padlen = 0;
   1655          
   1656                  for( i = 0; i <= padlen; i++ )
   1657                      ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;
   1658          
   1659                  ssl->out_msglen += padlen + 1;
   1660          
   1661                  enc_msglen = ssl->out_msglen;
   1662                  enc_msg = ssl->out_msg;
   1663          
   1664          #if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
   1665                  /*
   1666                   * Prepend per-record IV for block cipher in TLS v1.1 and up as per
   1667                   * Method 1 (6.2.3.2. in RFC4346 and RFC5246)
   1668                   */
   1669                  if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
   1670                  {
   1671                      /*
   1672                       * Generate IV
   1673                       */
   1674                      ret = ssl->conf->f_rng( ssl->conf->p_rng, ssl->transform_out->iv_enc,
   1675                                            ssl->transform_out->ivlen );
   1676                      if( ret != 0 )
   1677                          return( ret );
   1678          
   1679                      memcpy( ssl->out_iv, ssl->transform_out->iv_enc,
   1680                              ssl->transform_out->ivlen );
   1681          
   1682                      /*
   1683                       * Fix pointer positions and message length with added IV
   1684                       */
   1685                      enc_msg = ssl->out_msg;
   1686                      enc_msglen = ssl->out_msglen;
   1687                      ssl->out_msglen += ssl->transform_out->ivlen;
   1688                  }
   1689          #endif /* MBEDTLS_SSL_PROTO_TLS1_1 || MBEDTLS_SSL_PROTO_TLS1_2 */
   1690          
   1691                  MBEDTLS_SSL_DEBUG_MSG( 3, ( "before encrypt: msglen = %d, "
   1692                                      "including %d bytes of IV and %d bytes of padding",
   1693                                      ssl->out_msglen, ssl->transform_out->ivlen,
   1694                                      padlen + 1 ) );
   1695          
   1696                  if( ( ret = mbedtls_cipher_crypt( &ssl->transform_out->cipher_ctx_enc,
   1697                                             ssl->transform_out->iv_enc,
   1698                                             ssl->transform_out->ivlen,
   1699                                             enc_msg, enc_msglen,
   1700                                             enc_msg, &olen ) ) != 0 )
   1701                  {
   1702                      MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_crypt", ret );
   1703                      return( ret );
   1704                  }
   1705          
   1706                  if( enc_msglen != olen )
   1707                  {
   1708                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
   1709                      return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   1710                  }
   1711          
   1712          #if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1)
   1713                  if( ssl->minor_ver < MBEDTLS_SSL_MINOR_VERSION_2 )
   1714                  {
   1715                      /*
   1716                       * Save IV in SSL3 and TLS1
   1717                       */
   1718                      memcpy( ssl->transform_out->iv_enc,
   1719                              ssl->transform_out->cipher_ctx_enc.iv,
   1720                              ssl->transform_out->ivlen );
   1721                  }
   1722          #endif
   1723          
   1724          #if defined(MBEDTLS_SSL_ENCRYPT_THEN_MAC)
   1725                  if( auth_done == 0 )
   1726                  {
   1727                      unsigned char mac[MBEDTLS_SSL_MAC_ADD];
   1728          
   1729                      /*
   1730                       * MAC(MAC_write_key, seq_num +
   1731                       *     TLSCipherText.type +
   1732                       *     TLSCipherText.version +
   1733                       *     length_of( (IV +) ENC(...) ) +
   1734                       *     IV + // except for TLS 1.0
   1735                       *     ENC(content + padding + padding_length));
   1736                       */
   1737                      unsigned char pseudo_hdr[13];
   1738          
   1739                      MBEDTLS_SSL_DEBUG_MSG( 3, ( "using encrypt then mac" ) );
   1740          
   1741                      memcpy( pseudo_hdr +  0, ssl->out_ctr, 8 );
   1742                      memcpy( pseudo_hdr +  8, ssl->out_hdr, 3 );
   1743                      pseudo_hdr[11] = (unsigned char)( ( ssl->out_msglen >> 8 ) & 0xFF );
   1744                      pseudo_hdr[12] = (unsigned char)( ( ssl->out_msglen      ) & 0xFF );
   1745          
   1746                      MBEDTLS_SSL_DEBUG_BUF( 4, "MAC'd meta-data", pseudo_hdr, 13 );
   1747          
   1748                      mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, pseudo_hdr, 13 );
   1749                      mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc,
   1750                                       ssl->out_iv, ssl->out_msglen );
   1751                      mbedtls_md_hmac_finish( &ssl->transform_out->md_ctx_enc, mac );
   1752                      mbedtls_md_hmac_reset( &ssl->transform_out->md_ctx_enc );
   1753          
   1754                      memcpy( ssl->out_iv + ssl->out_msglen, mac,
   1755                              ssl->transform_out->maclen );
   1756          
   1757                      ssl->out_msglen += ssl->transform_out->maclen;
   1758                      auth_done++;
   1759                  }
   1760          #endif /* MBEDTLS_SSL_ENCRYPT_THEN_MAC */
   1761              }
   1762              else
   1763          #endif /* MBEDTLS_CIPHER_MODE_CBC &&
   1764                    ( MBEDTLS_AES_C || MBEDTLS_CAMELLIA_C || MBEDTLS_ARIA_C ) */
   1765              {
   1766                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
   1767                  return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   1768              }
   1769          
   1770              /* Make extra sure authentication was performed, exactly once */
   1771              if( auth_done != 1 )
   \                     ??ssl_encrypt_buf_16: (+1)
   \      0x332   0x2D01             CMP      R5,#+1
   \      0x334   0xF000 0x80FF      BEQ.W    ??ssl_encrypt_buf_17
   1772              {
   1773                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
   \      0x338   0x....             LDR.N    R0,??DataTable14_19
   \      0x33A   0x9000             STR      R0,[SP, #+0]
   \      0x33C   0xF240 0x63ED      MOVW     R3,#+1773
   \      0x340   0x4632             MOV      R2,R6
   \      0x342   0x2101             MOVS     R1,#+1
   \      0x344   0x4620             MOV      R0,R4
   \      0x346   0x....'....        BL       mbedtls_debug_print_msg
   1774                  return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   \      0x34A   0x....             LDR.N    R0,??DataTable14_16  ;; 0xffff9400
   \      0x34C   0xE0FE             B.N      ??ssl_encrypt_buf_2
   1775              }
   \                     ??ssl_encrypt_buf_7: (+1)
   \      0x34E   0x2F02             CMP      R7,#+2
   \      0x350   0xF040 0x80E6      BNE.W    ??ssl_encrypt_buf_18
   \      0x354   0x2000             MOVS     R0,#+0
   \      0x356   0x9004             STR      R0,[SP, #+16]
   \      0x358   0xF8D4 0x00CC      LDR      R0,[R4, #+204]
   \      0x35C   0x1C40             ADDS     R0,R0,#+1
   \      0x35E   0x6C61             LDR      R1,[R4, #+68]
   \      0x360   0x68C9             LDR      R1,[R1, #+12]
   \      0x362   0x460A             MOV      R2,R1
   \      0x364   0x1A12             SUBS     R2,R2,R0
   \      0x366   0xFBB0 0xF7F1      UDIV     R7,R0,R1
   \      0x36A   0xFB01 0x2707      MLA      R7,R1,R7,R2
   \      0x36E   0x4608             MOV      R0,R1
   \      0x370   0x4287             CMP      R7,R0
   \      0x372   0xD100             BNE.N    ??ssl_encrypt_buf_19
   \      0x374   0x2700             MOVS     R7,#+0
   \                     ??ssl_encrypt_buf_19: (+1)
   \      0x376   0x2000             MOVS     R0,#+0
   \      0x378   0xE006             B.N      ??ssl_encrypt_buf_20
   \                     ??ssl_encrypt_buf_21: (+1)
   \      0x37A   0xF8D4 0x10C4      LDR      R1,[R4, #+196]
   \      0x37E   0xF8D4 0x20CC      LDR      R2,[R4, #+204]
   \      0x382   0x1882             ADDS     R2,R0,R2
   \      0x384   0x548F             STRB     R7,[R1, R2]
   \      0x386   0x1C40             ADDS     R0,R0,#+1
   \                     ??ssl_encrypt_buf_20: (+1)
   \      0x388   0x4287             CMP      R7,R0
   \      0x38A   0xD2F6             BCS.N    ??ssl_encrypt_buf_21
   \      0x38C   0xF8D4 0x10CC      LDR      R1,[R4, #+204]
   \      0x390   0x1C78             ADDS     R0,R7,#+1
   \      0x392   0x1841             ADDS     R1,R0,R1
   \      0x394   0xF8C4 0x10CC      STR      R1,[R4, #+204]
   \      0x398   0x4688             MOV      R8,R1
   \      0x39A   0xF8D4 0x90C4      LDR      R9,[R4, #+196]
   \      0x39E   0x6960             LDR      R0,[R4, #+20]
   \      0x3A0   0x2802             CMP      R0,#+2
   \      0x3A2   0xDB1D             BLT.N    ??ssl_encrypt_buf_22
   \      0x3A4   0x6C60             LDR      R0,[R4, #+68]
   \      0x3A6   0x68C2             LDR      R2,[R0, #+12]
   \      0x3A8   0xF100 0x0118      ADD      R1,R0,#+24
   \      0x3AC   0x6820             LDR      R0,[R4, #+0]
   \      0x3AE   0x69C0             LDR      R0,[R0, #+28]
   \      0x3B0   0x6823             LDR      R3,[R4, #+0]
   \      0x3B2   0x699B             LDR      R3,[R3, #+24]
   \      0x3B4   0x4798             BLX      R3
   \      0x3B6   0x2800             CMP      R0,#+0
   \      0x3B8   0xF040 0x80C8      BNE.W    ??ssl_encrypt_buf_2
   \      0x3BC   0x6C60             LDR      R0,[R4, #+68]
   \      0x3BE   0x68C2             LDR      R2,[R0, #+12]
   \      0x3C0   0xF100 0x0118      ADD      R1,R0,#+24
   \      0x3C4   0xF8D4 0x00C0      LDR      R0,[R4, #+192]
   \      0x3C8   0x....'....        BL       __aeabi_memcpy
   \      0x3CC   0xF8D4 0x90C4      LDR      R9,[R4, #+196]
   \      0x3D0   0xF8D4 0x80CC      LDR      R8,[R4, #+204]
   \      0x3D4   0x4641             MOV      R1,R8
   \      0x3D6   0x6C60             LDR      R0,[R4, #+68]
   \      0x3D8   0x68C0             LDR      R0,[R0, #+12]
   \      0x3DA   0x1841             ADDS     R1,R0,R1
   \      0x3DC   0xF8C4 0x10CC      STR      R1,[R4, #+204]
   \                     ??ssl_encrypt_buf_22: (+1)
   \      0x3E0   0x1C7F             ADDS     R7,R7,#+1
   \      0x3E2   0x9703             STR      R7,[SP, #+12]
   \      0x3E4   0x6C60             LDR      R0,[R4, #+68]
   \      0x3E6   0x68C0             LDR      R0,[R0, #+12]
   \      0x3E8   0x9002             STR      R0,[SP, #+8]
   \      0x3EA   0xF8D4 0x00CC      LDR      R0,[R4, #+204]
   \      0x3EE   0x9001             STR      R0,[SP, #+4]
   \      0x3F0   0x....'....        LDR.W    R0,??DataTable16_6
   \      0x3F4   0x9000             STR      R0,[SP, #+0]
   \      0x3F6   0xF240 0x639E      MOVW     R3,#+1694
   \      0x3FA   0x4632             MOV      R2,R6
   \      0x3FC   0x2103             MOVS     R1,#+3
   \      0x3FE   0x4620             MOV      R0,R4
   \      0x400   0x....'....        BL       mbedtls_debug_print_msg
   \      0x404   0xA804             ADD      R0,SP,#+16
   \      0x406   0x9002             STR      R0,[SP, #+8]
   \      0x408   0xF8CD 0x9004      STR      R9,[SP, #+4]
   \      0x40C   0xF8CD 0x8000      STR      R8,[SP, #+0]
   \      0x410   0x464B             MOV      R3,R9
   \      0x412   0x6C60             LDR      R0,[R4, #+68]
   \      0x414   0x68C2             LDR      R2,[R0, #+12]
   \      0x416   0xF100 0x0118      ADD      R1,R0,#+24
   \      0x41A   0x3050             ADDS     R0,R0,#+80
   \      0x41C   0x....'....        BL       mbedtls_cipher_crypt
   \      0x420   0x0007             MOVS     R7,R0
   \      0x422   0xD00C             BEQ.N    ??ssl_encrypt_buf_23
   \      0x424   0x9701             STR      R7,[SP, #+4]
   \      0x426   0x....'....        LDR.W    R0,??DataTable16_7
   \      0x42A   0x9000             STR      R0,[SP, #+0]
   \      0x42C   0xF240 0x63A6      MOVW     R3,#+1702
   \      0x430   0x4632             MOV      R2,R6
   \      0x432   0x2101             MOVS     R1,#+1
   \      0x434   0x4620             MOV      R0,R4
   \      0x436   0x....'....        BL       mbedtls_debug_print_ret
   \      0x43A   0x4638             MOV      R0,R7
   \      0x43C   0xE086             B.N      ??ssl_encrypt_buf_2
   \                     ??ssl_encrypt_buf_23: (+1)
   \      0x43E   0x9804             LDR      R0,[SP, #+16]
   \      0x440   0x4580             CMP      R8,R0
   \      0x442   0xD00A             BEQ.N    ??ssl_encrypt_buf_24
   \      0x444   0x....             LDR.N    R0,??DataTable14_19
   \      0x446   0x9000             STR      R0,[SP, #+0]
   \      0x448   0xF240 0x63AC      MOVW     R3,#+1708
   \      0x44C   0x4632             MOV      R2,R6
   \      0x44E   0x2101             MOVS     R1,#+1
   \      0x450   0x4620             MOV      R0,R4
   \      0x452   0x....'....        BL       mbedtls_debug_print_msg
   \      0x456   0x....             LDR.N    R0,??DataTable14_16  ;; 0xffff9400
   \      0x458   0xE078             B.N      ??ssl_encrypt_buf_2
   \                     ??ssl_encrypt_buf_24: (+1)
   \      0x45A   0x6960             LDR      R0,[R4, #+20]
   \      0x45C   0x2802             CMP      R0,#+2
   \      0x45E   0xDA06             BGE.N    ??ssl_encrypt_buf_25
   \      0x460   0x6C60             LDR      R0,[R4, #+68]
   \      0x462   0x68C2             LDR      R2,[R0, #+12]
   \      0x464   0xF100 0x0178      ADD      R1,R0,#+120
   \      0x468   0x3018             ADDS     R0,R0,#+24
   \      0x46A   0x....'....        BL       __aeabi_memcpy4
   \                     ??ssl_encrypt_buf_25: (+1)
   \      0x46E   0x2D00             CMP      R5,#+0
   \      0x470   0xF47F 0xAF5F      BNE.W    ??ssl_encrypt_buf_16
   \      0x474   0x....'....        LDR.W    R0,??DataTable16_8
   \      0x478   0x9000             STR      R0,[SP, #+0]
   \      0x47A   0xF240 0x63CB      MOVW     R3,#+1739
   \      0x47E   0x4632             MOV      R2,R6
   \      0x480   0x2103             MOVS     R1,#+3
   \      0x482   0x4620             MOV      R0,R4
   \      0x484   0x....'....        BL       mbedtls_debug_print_msg
   \      0x488   0x2208             MOVS     R2,#+8
   \      0x48A   0xF8D4 0x10B4      LDR      R1,[R4, #+180]
   \      0x48E   0xA805             ADD      R0,SP,#+20
   \      0x490   0x....'....        BL       __aeabi_memcpy
   \      0x494   0x2203             MOVS     R2,#+3
   \      0x496   0xF8D4 0x10B8      LDR      R1,[R4, #+184]
   \      0x49A   0xA807             ADD      R0,SP,#+28
   \      0x49C   0x....'....        BL       __aeabi_memcpy
   \      0x4A0   0xA805             ADD      R0,SP,#+20
   \      0x4A2   0xF8D4 0x10CC      LDR      R1,[R4, #+204]
   \      0x4A6   0x0A09             LSRS     R1,R1,#+8
   \      0x4A8   0x72C1             STRB     R1,[R0, #+11]
   \      0x4AA   0xF8D4 0x10CC      LDR      R1,[R4, #+204]
   \      0x4AE   0x7301             STRB     R1,[R0, #+12]
   \      0x4B0   0x200D             MOVS     R0,#+13
   \      0x4B2   0x9002             STR      R0,[SP, #+8]
   \      0x4B4   0xA805             ADD      R0,SP,#+20
   \      0x4B6   0x9001             STR      R0,[SP, #+4]
   \      0x4B8   0x....'....        LDR.W    R0,??DataTable16_9
   \      0x4BC   0x9000             STR      R0,[SP, #+0]
   \      0x4BE   0xF240 0x63D2      MOVW     R3,#+1746
   \      0x4C2   0x4632             MOV      R2,R6
   \      0x4C4   0x2104             MOVS     R1,#+4
   \      0x4C6   0x4620             MOV      R0,R4
   \      0x4C8   0x....'....        BL       mbedtls_debug_print_buf
   \      0x4CC   0x220D             MOVS     R2,#+13
   \      0x4CE   0xA905             ADD      R1,SP,#+20
   \      0x4D0   0x6C60             LDR      R0,[R4, #+68]
   \      0x4D2   0x3038             ADDS     R0,R0,#+56
   \      0x4D4   0x....'....        BL       mbedtls_md_hmac_update
   \      0x4D8   0xF8D4 0x20CC      LDR      R2,[R4, #+204]
   \      0x4DC   0xF8D4 0x10C0      LDR      R1,[R4, #+192]
   \      0x4E0   0x6C60             LDR      R0,[R4, #+68]
   \      0x4E2   0x3038             ADDS     R0,R0,#+56
   \      0x4E4   0x....'....        BL       mbedtls_md_hmac_update
   \      0x4E8   0xA909             ADD      R1,SP,#+36
   \      0x4EA   0x6C60             LDR      R0,[R4, #+68]
   \      0x4EC   0x3038             ADDS     R0,R0,#+56
   \      0x4EE   0x....'....        BL       mbedtls_md_hmac_finish
   \      0x4F2   0x6C60             LDR      R0,[R4, #+68]
   \      0x4F4   0x3038             ADDS     R0,R0,#+56
   \      0x4F6   0x....'....        BL       mbedtls_md_hmac_reset
   \      0x4FA   0x6C60             LDR      R0,[R4, #+68]
   \      0x4FC   0x6942             LDR      R2,[R0, #+20]
   \      0x4FE   0xA909             ADD      R1,SP,#+36
   \      0x500   0xF8D4 0x00C0      LDR      R0,[R4, #+192]
   \      0x504   0xF8D4 0x30CC      LDR      R3,[R4, #+204]
   \      0x508   0x4418             ADD      R0,R0,R3
   \      0x50A   0x....'....        BL       __aeabi_memcpy
   \      0x50E   0xF8D4 0x10CC      LDR      R1,[R4, #+204]
   \      0x512   0x6C60             LDR      R0,[R4, #+68]
   \      0x514   0x6940             LDR      R0,[R0, #+20]
   \      0x516   0x1841             ADDS     R1,R0,R1
   \      0x518   0xF8C4 0x10CC      STR      R1,[R4, #+204]
   \      0x51C   0x2501             MOVS     R5,#+1
   \      0x51E   0xE708             B.N      ??ssl_encrypt_buf_16
   \                     ??ssl_encrypt_buf_18: (+1)
   \      0x520   0x....             LDR.N    R0,??DataTable14_19
   \      0x522   0x9000             STR      R0,[SP, #+0]
   \      0x524   0xF240 0x63E6      MOVW     R3,#+1766
   \      0x528   0x4632             MOV      R2,R6
   \      0x52A   0x2101             MOVS     R1,#+1
   \      0x52C   0x4620             MOV      R0,R4
   \      0x52E   0x....'....        BL       mbedtls_debug_print_msg
   \      0x532   0x....             LDR.N    R0,??DataTable14_16  ;; 0xffff9400
   \      0x534   0xE00A             B.N      ??ssl_encrypt_buf_2
   1776          
   1777              MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= encrypt buf" ) );
   \                     ??ssl_encrypt_buf_17: (+1)
   \      0x536   0x....'....        LDR.W    R0,??DataTable17
   \      0x53A   0x9000             STR      R0,[SP, #+0]
   \      0x53C   0xF240 0x63F1      MOVW     R3,#+1777
   \      0x540   0x4632             MOV      R2,R6
   \      0x542   0x2102             MOVS     R1,#+2
   \      0x544   0x4620             MOV      R0,R4
   \      0x546   0x....'....        BL       mbedtls_debug_print_msg
   1778          
   1779              return( 0 );
   \      0x54A   0x2000             MOVS     R0,#+0
   \                     ??ssl_encrypt_buf_2: (+1)
   \      0x54C   0xB015             ADD      SP,SP,#+84
   \      0x54E   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   1780          }
   1781          

   \                                 In section .text, align 2, keep-with-next
   1782          static int ssl_decrypt_buf( mbedtls_ssl_context *ssl )
   1783          {
   \                     ssl_decrypt_buf: (+1)
   \        0x0   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \        0x4   0xB095             SUB      SP,SP,#+84
   \        0x6   0x4605             MOV      R5,R0
   1784              mbedtls_cipher_mode_t mode;
   1785              int auth_done = 0;
   \        0x8   0x2400             MOVS     R4,#+0
   1786          #if defined(SSL_SOME_MODES_USE_MAC)
   1787              size_t padlen = 0, correct = 1;
   \        0xA   0x46A1             MOV      R9,R4
   \        0xC   0x2701             MOVS     R7,#+1
   1788          #endif
   1789          
   1790              MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> decrypt buf" ) );
   \        0xE   0x....'....        LDR.W    R8,??DataTable18
   \       0x12   0x....'....        LDR.W    R0,??DataTable17_1
   \       0x16   0x9000             STR      R0,[SP, #+0]
   \       0x18   0xF240 0x63FE      MOVW     R3,#+1790
   \       0x1C   0x4642             MOV      R2,R8
   \       0x1E   0x2102             MOVS     R1,#+2
   \       0x20   0x4628             MOV      R0,R5
   \       0x22   0x....'....        BL       mbedtls_debug_print_msg
   1791          
   1792              if( ssl->session_in == NULL || ssl->transform_in == NULL )
   \       0x26   0x6AE8             LDR      R0,[R5, #+44]
   \       0x28   0x2800             CMP      R0,#+0
   \       0x2A   0xD002             BEQ.N    ??ssl_decrypt_buf_0
   \       0x2C   0x6C28             LDR      R0,[R5, #+64]
   \       0x2E   0x2800             CMP      R0,#+0
   \       0x30   0xD10C             BNE.N    ??ssl_decrypt_buf_1
   1793              {
   1794                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
   \                     ??ssl_decrypt_buf_0: (+1)
   \       0x32   0x....'....        LDR.W    R0,??DataTable17_2
   \       0x36   0x9000             STR      R0,[SP, #+0]
   \       0x38   0xF240 0x7302      MOVW     R3,#+1794
   \       0x3C   0x4642             MOV      R2,R8
   \       0x3E   0x4639             MOV      R1,R7
   \       0x40   0x4628             MOV      R0,R5
   \       0x42   0x....'....        BL       mbedtls_debug_print_msg
   1795                  return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   \       0x46   0x....'....        LDR.W    R0,??DataTable18_1  ;; 0xffff9400
   \       0x4A   0xE3AE             B.N      ??ssl_decrypt_buf_2
   1796              }
   1797          
   1798              mode = mbedtls_cipher_get_cipher_mode( &ssl->transform_in->cipher_ctx_dec );
   \                     ??ssl_decrypt_buf_1: (+1)
   \       0x4C   0x3090             ADDS     R0,R0,#+144
   \       0x4E   0x....'....        BL       mbedtls_cipher_get_cipher_mode
   1799          
   1800              if( ssl->in_msglen < ssl->transform_in->minlen )
   \       0x52   0x6FE9             LDR      R1,[R5, #+124]
   \       0x54   0x6C2A             LDR      R2,[R5, #+64]
   \       0x56   0x6892             LDR      R2,[R2, #+8]
   \       0x58   0x4291             CMP      R1,R2
   \       0x5A   0xD210             BCS.N    ??ssl_decrypt_buf_3
   1801              {
   1802                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "in_msglen (%d) < minlen (%d)",
   1803                                 ssl->in_msglen, ssl->transform_in->minlen ) );
   \       0x5C   0x4610             MOV      R0,R2
   \       0x5E   0x9002             STR      R0,[SP, #+8]
   \       0x60   0x6FE8             LDR      R0,[R5, #+124]
   \       0x62   0x9001             STR      R0,[SP, #+4]
   \       0x64   0x....'....        LDR.W    R0,??DataTable17_3
   \       0x68   0x9000             STR      R0,[SP, #+0]
   \       0x6A   0xF240 0x730B      MOVW     R3,#+1803
   \       0x6E   0x4642             MOV      R2,R8
   \       0x70   0x4639             MOV      R1,R7
   \       0x72   0x4628             MOV      R0,R5
   \       0x74   0x....'....        BL       mbedtls_debug_print_msg
   1804                  return( MBEDTLS_ERR_SSL_INVALID_MAC );
   \       0x78   0x....'....        LDR.W    R0,??DataTable17_4  ;; 0xffff8e80
   \       0x7C   0xE395             B.N      ??ssl_decrypt_buf_2
   1805              }
   1806          
   1807          #if defined(MBEDTLS_ARC4_C) || defined(MBEDTLS_CIPHER_NULL_CIPHER)
   1808              if( mode == MBEDTLS_MODE_STREAM )
   1809              {
   1810                  int ret;
   1811                  size_t olen = 0;
   1812          
   1813                  padlen = 0;
   1814          
   1815                  if( ( ret = mbedtls_cipher_crypt( &ssl->transform_in->cipher_ctx_dec,
   1816                                             ssl->transform_in->iv_dec,
   1817                                             ssl->transform_in->ivlen,
   1818                                             ssl->in_msg, ssl->in_msglen,
   1819                                             ssl->in_msg, &olen ) ) != 0 )
   1820                  {
   1821                      MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_crypt", ret );
   1822                      return( ret );
   1823                  }
   1824          
   1825                  if( ssl->in_msglen != olen )
   1826                  {
   1827                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
   1828                      return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   1829                  }
   1830              }
   1831              else
   1832          #endif /* MBEDTLS_ARC4_C || MBEDTLS_CIPHER_NULL_CIPHER */
   1833          #if defined(MBEDTLS_GCM_C) || \
   1834              defined(MBEDTLS_CCM_C) || \
   1835              defined(MBEDTLS_CHACHAPOLY_C)
   1836              if( mode == MBEDTLS_MODE_GCM ||
   1837                  mode == MBEDTLS_MODE_CCM ||
   1838                  mode == MBEDTLS_MODE_CHACHAPOLY )
   \                     ??ssl_decrypt_buf_3: (+1)
   \       0x7E   0x2806             CMP      R0,#+6
   \       0x80   0xD004             BEQ.N    ??ssl_decrypt_buf_4
   \       0x82   0x2808             CMP      R0,#+8
   \       0x84   0xD002             BEQ.N    ??ssl_decrypt_buf_4
   \       0x86   0x280A             CMP      R0,#+10
   \       0x88   0xF040 0x80F6      BNE.W    ??ssl_decrypt_buf_5
   1839              {
   1840                  int ret;
   1841                  size_t dec_msglen, olen;
   1842                  unsigned char *dec_msg;
   1843                  unsigned char *dec_msg_result;
   1844                  unsigned char add_data[13];
   1845                  unsigned char iv[12];
   1846                  mbedtls_ssl_transform *transform = ssl->transform_in;
   \                     ??ssl_decrypt_buf_4: (+1)
   \       0x8C   0xF8D5 0xA040      LDR      R10,[R5, #+64]
   1847                  unsigned char taglen = transform->ciphersuite_info->flags &
   1848                                         MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
   \       0x90   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \       0x94   0x7F00             LDRB     R0,[R0, #+28]
   \       0x96   0x0780             LSLS     R0,R0,#+30
   \       0x98   0xD502             BPL.N    ??ssl_decrypt_buf_6
   \       0x9A   0xF04F 0x0B08      MOV      R11,#+8
   \       0x9E   0xE001             B.N      ??ssl_decrypt_buf_7
   \                     ??ssl_decrypt_buf_6: (+1)
   \       0xA0   0xF04F 0x0B10      MOV      R11,#+16
   1849                  size_t explicit_iv_len = transform->ivlen - transform->fixed_ivlen;
   \                     ??ssl_decrypt_buf_7: (+1)
   \       0xA4   0xF8DA 0x100C      LDR      R1,[R10, #+12]
   \       0xA8   0xF8DA 0x0010      LDR      R0,[R10, #+16]
   \       0xAC   0x1A08             SUBS     R0,R1,R0
   1850          
   1851                  /*
   1852                   * Compute and update sizes
   1853                   */
   1854                  if( ssl->in_msglen < explicit_iv_len + taglen )
   \       0xAE   0x6FE9             LDR      R1,[R5, #+124]
   \       0xB0   0xEB0B 0x0200      ADD      R2,R11,R0
   \       0xB4   0x4291             CMP      R1,R2
   \       0xB6   0xD211             BCS.N    ??ssl_decrypt_buf_8
   1855                  {
   1856                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) < explicit_iv_len (%d) "
   1857                                          "+ taglen (%d)", ssl->in_msglen,
   1858                                          explicit_iv_len, taglen ) );
   \       0xB8   0xF8CD 0xB00C      STR      R11,[SP, #+12]
   \       0xBC   0x9002             STR      R0,[SP, #+8]
   \       0xBE   0x6FE8             LDR      R0,[R5, #+124]
   \       0xC0   0x9001             STR      R0,[SP, #+4]
   \       0xC2   0x....'....        LDR.W    R0,??DataTable17_5
   \       0xC6   0x9000             STR      R0,[SP, #+0]
   \       0xC8   0xF240 0x7342      MOVW     R3,#+1858
   \       0xCC   0x4642             MOV      R2,R8
   \       0xCE   0x4639             MOV      R1,R7
   \       0xD0   0x4628             MOV      R0,R5
   \       0xD2   0x....'....        BL       mbedtls_debug_print_msg
   1859                      return( MBEDTLS_ERR_SSL_INVALID_MAC );
   \       0xD6   0x....'....        LDR.W    R0,??DataTable17_4  ;; 0xffff8e80
   \       0xDA   0xE366             B.N      ??ssl_decrypt_buf_2
   1860                  }
   1861                  dec_msglen = ssl->in_msglen - explicit_iv_len - taglen;
   \                     ??ssl_decrypt_buf_8: (+1)
   \       0xDC   0x1A08             SUBS     R0,R1,R0
   \       0xDE   0xEBA0 0x000B      SUB      R0,R0,R11
   \       0xE2   0x9008             STR      R0,[SP, #+32]
   1862          
   1863                  dec_msg = ssl->in_msg;
   \       0xE4   0x6F28             LDR      R0,[R5, #+112]
   \       0xE6   0x9009             STR      R0,[SP, #+36]
   1864                  dec_msg_result = ssl->in_msg;
   \       0xE8   0x6F28             LDR      R0,[R5, #+112]
   \       0xEA   0x9011             STR      R0,[SP, #+68]
   1865                  ssl->in_msglen = dec_msglen;
   \       0xEC   0x9808             LDR      R0,[SP, #+32]
   \       0xEE   0x67E8             STR      R0,[R5, #+124]
   1866          
   1867                  /*
   1868                   * Prepare additional authenticated data
   1869                   */
   1870                  memcpy( add_data, ssl->in_ctr, 8 );
   \       0xF0   0x2208             MOVS     R2,#+8
   \       0xF2   0x6E29             LDR      R1,[R5, #+96]
   \       0xF4   0xA80D             ADD      R0,SP,#+52
   \       0xF6   0x....'....        BL       __aeabi_memcpy
   1871                  add_data[8]  = ssl->in_msgtype;
   \       0xFA   0xAC0D             ADD      R4,SP,#+52
   \       0xFC   0x6FA8             LDR      R0,[R5, #+120]
   \       0xFE   0x7220             STRB     R0,[R4, #+8]
   1872                  mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
   1873                                     ssl->conf->transport, add_data + 9 );
   \      0x100   0xF10D 0x033D      ADD      R3,SP,#+61
   \      0x104   0x6828             LDR      R0,[R5, #+0]
   \      0x106   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \      0x10A   0xF3C0 0x0240      UBFX     R2,R0,#+1,#+1
   \      0x10E   0x6969             LDR      R1,[R5, #+20]
   \      0x110   0x6928             LDR      R0,[R5, #+16]
   \      0x112   0x....'....        BL       mbedtls_ssl_write_version
   1874                  add_data[11] = ( ssl->in_msglen >> 8 ) & 0xFF;
   \      0x116   0x6FE8             LDR      R0,[R5, #+124]
   \      0x118   0x0A00             LSRS     R0,R0,#+8
   \      0x11A   0x72E0             STRB     R0,[R4, #+11]
   1875                  add_data[12] = ssl->in_msglen & 0xFF;
   \      0x11C   0x6FE8             LDR      R0,[R5, #+124]
   \      0x11E   0x7320             STRB     R0,[R4, #+12]
   1876          
   1877                  MBEDTLS_SSL_DEBUG_BUF( 4, "additional data for AEAD", add_data, 13 );
   \      0x120   0x200D             MOVS     R0,#+13
   \      0x122   0x9002             STR      R0,[SP, #+8]
   \      0x124   0xA80D             ADD      R0,SP,#+52
   \      0x126   0x9001             STR      R0,[SP, #+4]
   \      0x128   0x....'....        LDR.W    R0,??DataTable16
   \      0x12C   0x9000             STR      R0,[SP, #+0]
   \      0x12E   0xF240 0x7355      MOVW     R3,#+1877
   \      0x132   0x4642             MOV      R2,R8
   \      0x134   0x2104             MOVS     R1,#+4
   \      0x136   0x4628             MOV      R0,R5
   \      0x138   0x....'....        BL       mbedtls_debug_print_buf
   1878          
   1879                  /*
   1880                   * Prepare IV
   1881                   */
   1882                  if( transform->ivlen == 12 && transform->fixed_ivlen == 4 )
   \      0x13C   0xF8DA 0x000C      LDR      R0,[R10, #+12]
   \      0x140   0x280C             CMP      R0,#+12
   \      0x142   0xD15B             BNE.N    ??ssl_decrypt_buf_9
   \      0x144   0xF8DA 0x0010      LDR      R0,[R10, #+16]
   \      0x148   0x2804             CMP      R0,#+4
   \      0x14A   0xD157             BNE.N    ??ssl_decrypt_buf_9
   1883                  {
   1884                      /* GCM and CCM: fixed || explicit (transmitted) */
   1885                      memcpy( iv, transform->iv_dec, transform->fixed_ivlen );
   \      0x14C   0x4602             MOV      R2,R0
   \      0x14E   0xF10A 0x0128      ADD      R1,R10,#+40
   \      0x152   0xA80A             ADD      R0,SP,#+40
   \      0x154   0x....'....        BL       __aeabi_memcpy4
   1886                      memcpy( iv + transform->fixed_ivlen, ssl->in_iv, 8 );
   \      0x158   0x2208             MOVS     R2,#+8
   \      0x15A   0x6EE9             LDR      R1,[R5, #+108]
   \      0x15C   0xA80A             ADD      R0,SP,#+40
   \      0x15E   0xF8DA 0x3010      LDR      R3,[R10, #+16]
   \      0x162   0x4418             ADD      R0,R0,R3
   \      0x164   0x....'....        BL       __aeabi_memcpy
   1887          
   1888                  }
   1889                  else if( transform->ivlen == 12 && transform->fixed_ivlen == 12 )
   1890                  {
   1891                      /* ChachaPoly: fixed XOR sequence number */
   1892                      unsigned char i;
   1893          
   1894                      memcpy( iv, transform->iv_dec, transform->fixed_ivlen );
   1895          
   1896                      for( i = 0; i < 8; i++ )
   1897                          iv[i+4] ^= ssl->in_ctr[i];
   1898                  }
   1899                  else
   1900                  {
   1901                      /* Reminder if we ever add an AEAD mode with a different size */
   1902                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
   1903                      return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   1904                  }
   1905          
   1906                  MBEDTLS_SSL_DEBUG_BUF( 4, "IV used", iv, transform->ivlen );
   \                     ??ssl_decrypt_buf_10: (+1)
   \      0x168   0xF8DA 0x000C      LDR      R0,[R10, #+12]
   \      0x16C   0x9002             STR      R0,[SP, #+8]
   \      0x16E   0xA80A             ADD      R0,SP,#+40
   \      0x170   0x9001             STR      R0,[SP, #+4]
   \      0x172   0x....'....        LDR.W    R0,??DataTable18_2
   \      0x176   0x9000             STR      R0,[SP, #+0]
   \      0x178   0xF240 0x7372      MOVW     R3,#+1906
   \      0x17C   0x4642             MOV      R2,R8
   \      0x17E   0x2104             MOVS     R1,#+4
   \      0x180   0x4628             MOV      R0,R5
   \      0x182   0x....'....        BL       mbedtls_debug_print_buf
   1907                  MBEDTLS_SSL_DEBUG_BUF( 4, "TAG used", dec_msg + dec_msglen, taglen );
   \      0x186   0xF8CD 0xB008      STR      R11,[SP, #+8]
   \      0x18A   0x9809             LDR      R0,[SP, #+36]
   \      0x18C   0x9908             LDR      R1,[SP, #+32]
   \      0x18E   0x4408             ADD      R0,R0,R1
   \      0x190   0x9001             STR      R0,[SP, #+4]
   \      0x192   0x....'....        LDR.W    R0,??DataTable18_3
   \      0x196   0x9000             STR      R0,[SP, #+0]
   \      0x198   0xF240 0x7373      MOVW     R3,#+1907
   \      0x19C   0x4642             MOV      R2,R8
   \      0x19E   0x2104             MOVS     R1,#+4
   \      0x1A0   0x4628             MOV      R0,R5
   \      0x1A2   0x....'....        BL       mbedtls_debug_print_buf
   1908          
   1909                  /*
   1910                   * Decrypt and authenticate
   1911                   */
   1912                  if( ( ret = mbedtls_cipher_auth_decrypt( &ssl->transform_in->cipher_ctx_dec,
   1913                                                   iv, transform->ivlen,
   1914                                                   add_data, 13,
   1915                                                   dec_msg, dec_msglen,
   1916                                                   dec_msg_result, &olen,
   1917                                                   dec_msg + dec_msglen, taglen ) ) != 0 )
   \      0x1A6   0xF8CD 0xB018      STR      R11,[SP, #+24]
   \      0x1AA   0x9809             LDR      R0,[SP, #+36]
   \      0x1AC   0x9908             LDR      R1,[SP, #+32]
   \      0x1AE   0x4408             ADD      R0,R0,R1
   \      0x1B0   0x9005             STR      R0,[SP, #+20]
   \      0x1B2   0xA807             ADD      R0,SP,#+28
   \      0x1B4   0x9004             STR      R0,[SP, #+16]
   \      0x1B6   0x9811             LDR      R0,[SP, #+68]
   \      0x1B8   0x9003             STR      R0,[SP, #+12]
   \      0x1BA   0x9808             LDR      R0,[SP, #+32]
   \      0x1BC   0x9002             STR      R0,[SP, #+8]
   \      0x1BE   0x9809             LDR      R0,[SP, #+36]
   \      0x1C0   0x9001             STR      R0,[SP, #+4]
   \      0x1C2   0x200D             MOVS     R0,#+13
   \      0x1C4   0x9000             STR      R0,[SP, #+0]
   \      0x1C6   0xAB0D             ADD      R3,SP,#+52
   \      0x1C8   0xF8DA 0x200C      LDR      R2,[R10, #+12]
   \      0x1CC   0xA90A             ADD      R1,SP,#+40
   \      0x1CE   0x6C28             LDR      R0,[R5, #+64]
   \      0x1D0   0x3090             ADDS     R0,R0,#+144
   \      0x1D2   0x....'....        BL       mbedtls_cipher_auth_decrypt
   \      0x1D6   0x0004             MOVS     R4,R0
   \      0x1D8   0xD03B             BEQ.N    ??ssl_decrypt_buf_11
   1918                  {
   1919                      MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_auth_decrypt", ret );
   \      0x1DA   0x9401             STR      R4,[SP, #+4]
   \      0x1DC   0x....'....        LDR.W    R0,??DataTable18_4
   \      0x1E0   0x9000             STR      R0,[SP, #+0]
   \      0x1E2   0xF240 0x737F      MOVW     R3,#+1919
   \      0x1E6   0x4642             MOV      R2,R8
   \      0x1E8   0x4639             MOV      R1,R7
   \      0x1EA   0x4628             MOV      R0,R5
   \      0x1EC   0x....'....        BL       mbedtls_debug_print_ret
   1920          
   1921                      if( ret == MBEDTLS_ERR_CIPHER_AUTH_FAILED )
   \      0x1F0   0xF514 0x4FC6      CMN      R4,#+25344
   \      0x1F4   0xD12B             BNE.N    ??ssl_decrypt_buf_12
   1922                          return( MBEDTLS_ERR_SSL_INVALID_MAC );
   \      0x1F6   0x....'....        LDR.W    R0,??DataTable17_4  ;; 0xffff8e80
   \      0x1FA   0xE2D6             B.N      ??ssl_decrypt_buf_2
   \                     ??ssl_decrypt_buf_9: (+1)
   \      0x1FC   0xF8DA 0x000C      LDR      R0,[R10, #+12]
   \      0x200   0x280C             CMP      R0,#+12
   \      0x202   0xD117             BNE.N    ??ssl_decrypt_buf_13
   \      0x204   0xF8DA 0x0010      LDR      R0,[R10, #+16]
   \      0x208   0x280C             CMP      R0,#+12
   \      0x20A   0xD113             BNE.N    ??ssl_decrypt_buf_13
   \      0x20C   0x4602             MOV      R2,R0
   \      0x20E   0xF10A 0x0128      ADD      R1,R10,#+40
   \      0x212   0xA80A             ADD      R0,SP,#+40
   \      0x214   0x....'....        BL       __aeabi_memcpy4
   \      0x218   0x4648             MOV      R0,R9
   \                     ??ssl_decrypt_buf_14: (+1)
   \      0x21A   0x2808             CMP      R0,#+8
   \      0x21C   0xDAA4             BGE.N    ??ssl_decrypt_buf_10
   \      0x21E   0xA90A             ADD      R1,SP,#+40
   \      0x220   0x4401             ADD      R1,R1,R0
   \      0x222   0x7909             LDRB     R1,[R1, #+4]
   \      0x224   0x6E2A             LDR      R2,[R5, #+96]
   \      0x226   0x5C12             LDRB     R2,[R2, R0]
   \      0x228   0x4051             EORS     R1,R2,R1
   \      0x22A   0xAA0A             ADD      R2,SP,#+40
   \      0x22C   0x4402             ADD      R2,R2,R0
   \      0x22E   0x7111             STRB     R1,[R2, #+4]
   \      0x230   0x1C40             ADDS     R0,R0,#+1
   \      0x232   0xE7F2             B.N      ??ssl_decrypt_buf_14
   \                     ??ssl_decrypt_buf_13: (+1)
   \      0x234   0x....'....        LDR.W    R0,??DataTable17_2
   \      0x238   0x9000             STR      R0,[SP, #+0]
   \      0x23A   0xF240 0x736E      MOVW     R3,#+1902
   \      0x23E   0x4642             MOV      R2,R8
   \      0x240   0x4639             MOV      R1,R7
   \      0x242   0x4628             MOV      R0,R5
   \      0x244   0x....'....        BL       mbedtls_debug_print_msg
   \      0x248   0x....'....        LDR.W    R0,??DataTable18_1  ;; 0xffff9400
   \      0x24C   0xE2AD             B.N      ??ssl_decrypt_buf_2
   1923          
   1924                      return( ret );
   \                     ??ssl_decrypt_buf_12: (+1)
   \      0x24E   0x4620             MOV      R0,R4
   \      0x250   0xE2AB             B.N      ??ssl_decrypt_buf_2
   1925                  }
   1926                  auth_done++;
   \                     ??ssl_decrypt_buf_11: (+1)
   \      0x252   0x463C             MOV      R4,R7
   1927          
   1928                  if( olen != dec_msglen )
   \      0x254   0x9807             LDR      R0,[SP, #+28]
   \      0x256   0x9908             LDR      R1,[SP, #+32]
   \      0x258   0x4288             CMP      R0,R1
   \      0x25A   0xF000 0x8176      BEQ.W    ??ssl_decrypt_buf_15
   1929                  {
   1930                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
   \      0x25E   0x....'....        LDR.W    R0,??DataTable17_2
   \      0x262   0x9000             STR      R0,[SP, #+0]
   \      0x264   0xF240 0x738A      MOVW     R3,#+1930
   \      0x268   0x4642             MOV      R2,R8
   \      0x26A   0x4621             MOV      R1,R4
   \      0x26C   0x4628             MOV      R0,R5
   \      0x26E   0x....'....        BL       mbedtls_debug_print_msg
   1931                      return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   \      0x272   0x....'....        LDR.W    R0,??DataTable18_1  ;; 0xffff9400
   \      0x276   0xE298             B.N      ??ssl_decrypt_buf_2
   1932                  }
   1933              }
   1934              else
   1935          #endif /* MBEDTLS_GCM_C || MBEDTLS_CCM_C */
   1936          #if defined(MBEDTLS_CIPHER_MODE_CBC) &&                                    \
   1937              ( defined(MBEDTLS_AES_C) || defined(MBEDTLS_CAMELLIA_C) || defined(MBEDTLS_ARIA_C) )
   1938              if( mode == MBEDTLS_MODE_CBC )
   \                     ??ssl_decrypt_buf_5: (+1)
   \      0x278   0x2802             CMP      R0,#+2
   \      0x27A   0xF040 0x818F      BNE.W    ??ssl_decrypt_buf_16
   1939              {
   1940                  /*
   1941                   * Decrypt and check the padding
   1942                   */
   1943                  int ret;
   1944                  unsigned char *dec_msg;
   1945                  unsigned char *dec_msg_result;
   1946                  size_t dec_msglen;
   1947                  size_t minlen = 0;
   \      0x27E   0x4621             MOV      R1,R4
   1948                  size_t olen = 0;
   \      0x280   0x4608             MOV      R0,R1
   \      0x282   0x9004             STR      R0,[SP, #+16]
   1949          
   1950                  /*
   1951                   * Check immediate ciphertext sanity
   1952                   */
   1953          #if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
   1954                  if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
   \      0x284   0x6968             LDR      R0,[R5, #+20]
   \      0x286   0x2802             CMP      R0,#+2
   \      0x288   0xDB01             BLT.N    ??ssl_decrypt_buf_17
   1955                      minlen += ssl->transform_in->ivlen;
   \      0x28A   0x6C28             LDR      R0,[R5, #+64]
   \      0x28C   0x68C1             LDR      R1,[R0, #+12]
   1956          #endif
   1957          
   1958                  if( ssl->in_msglen < minlen + ssl->transform_in->ivlen ||
   1959                      ssl->in_msglen < minlen + ssl->transform_in->maclen + 1 )
   \                     ??ssl_decrypt_buf_17: (+1)
   \      0x28E   0x6FE8             LDR      R0,[R5, #+124]
   \      0x290   0x6C2A             LDR      R2,[R5, #+64]
   \      0x292   0x68D2             LDR      R2,[R2, #+12]
   \      0x294   0x1852             ADDS     R2,R2,R1
   \      0x296   0x4290             CMP      R0,R2
   \      0x298   0xD306             BCC.N    ??ssl_decrypt_buf_18
   \      0x29A   0x4602             MOV      R2,R0
   \      0x29C   0x6C28             LDR      R0,[R5, #+64]
   \      0x29E   0x6940             LDR      R0,[R0, #+20]
   \      0x2A0   0x1841             ADDS     R1,R0,R1
   \      0x2A2   0x1C49             ADDS     R1,R1,#+1
   \      0x2A4   0x428A             CMP      R2,R1
   \      0x2A6   0xD214             BCS.N    ??ssl_decrypt_buf_19
   1960                  {
   1961                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) < max( ivlen(%d), maclen (%d) "
   1962                                          "+ 1 ) ( + expl IV )", ssl->in_msglen,
   1963                                          ssl->transform_in->ivlen,
   1964                                          ssl->transform_in->maclen ) );
   \                     ??ssl_decrypt_buf_18: (+1)
   \      0x2A8   0x6C28             LDR      R0,[R5, #+64]
   \      0x2AA   0x6940             LDR      R0,[R0, #+20]
   \      0x2AC   0x9003             STR      R0,[SP, #+12]
   \      0x2AE   0x6C28             LDR      R0,[R5, #+64]
   \      0x2B0   0x68C0             LDR      R0,[R0, #+12]
   \      0x2B2   0x9002             STR      R0,[SP, #+8]
   \      0x2B4   0x6FE8             LDR      R0,[R5, #+124]
   \      0x2B6   0x9001             STR      R0,[SP, #+4]
   \      0x2B8   0x....'....        LDR.W    R0,??DataTable20
   \      0x2BC   0x9000             STR      R0,[SP, #+0]
   \      0x2BE   0xF240 0x73AC      MOVW     R3,#+1964
   \      0x2C2   0x4642             MOV      R2,R8
   \      0x2C4   0x4639             MOV      R1,R7
   \      0x2C6   0x4628             MOV      R0,R5
   \      0x2C8   0x....'....        BL       mbedtls_debug_print_msg
   1965                      return( MBEDTLS_ERR_SSL_INVALID_MAC );
   \      0x2CC   0x....'....        LDR.W    R0,??DataTable17_4  ;; 0xffff8e80
   \      0x2D0   0xE26B             B.N      ??ssl_decrypt_buf_2
   1966                  }
   1967          
   1968                  dec_msglen = ssl->in_msglen;
   \                     ??ssl_decrypt_buf_19: (+1)
   \      0x2D2   0x4691             MOV      R9,R2
   1969                  dec_msg = ssl->in_msg;
   \      0x2D4   0x6F2E             LDR      R6,[R5, #+112]
   1970                  dec_msg_result = ssl->in_msg;
   \      0x2D6   0x46B2             MOV      R10,R6
   1971          
   1972                  /*
   1973                   * Authenticate before decrypt if enabled
   1974                   */
   1975          #if defined(MBEDTLS_SSL_ENCRYPT_THEN_MAC)
   1976                  if( ssl->session_in->encrypt_then_mac == MBEDTLS_SSL_ETM_ENABLED )
   \      0x2D8   0x6AE8             LDR      R0,[R5, #+44]
   \      0x2DA   0x6F80             LDR      R0,[R0, #+120]
   \      0x2DC   0x2801             CMP      R0,#+1
   \      0x2DE   0xD17D             BNE.N    ??ssl_decrypt_buf_20
   1977                  {
   1978                      unsigned char mac_expect[MBEDTLS_SSL_MAC_ADD];
   1979                      unsigned char pseudo_hdr[13];
   1980          
   1981                      MBEDTLS_SSL_DEBUG_MSG( 3, ( "using encrypt then mac" ) );
   \      0x2E0   0x....'....        LDR.W    R0,??DataTable16_8
   \      0x2E4   0x9000             STR      R0,[SP, #+0]
   \      0x2E6   0xF240 0x73BD      MOVW     R3,#+1981
   \      0x2EA   0x4642             MOV      R2,R8
   \      0x2EC   0x2103             MOVS     R1,#+3
   \      0x2EE   0x4628             MOV      R0,R5
   \      0x2F0   0x....'....        BL       mbedtls_debug_print_msg
   1982          
   1983                      dec_msglen -= ssl->transform_in->maclen;
   \      0x2F4   0x6C28             LDR      R0,[R5, #+64]
   \      0x2F6   0x6940             LDR      R0,[R0, #+20]
   \      0x2F8   0xEBA9 0x0900      SUB      R9,R9,R0
   1984                      ssl->in_msglen -= ssl->transform_in->maclen;
   \      0x2FC   0x6FE9             LDR      R1,[R5, #+124]
   \      0x2FE   0x6C28             LDR      R0,[R5, #+64]
   \      0x300   0x6940             LDR      R0,[R0, #+20]
   \      0x302   0x1A09             SUBS     R1,R1,R0
   \      0x304   0x67E9             STR      R1,[R5, #+124]
   1985          
   1986                      memcpy( pseudo_hdr +  0, ssl->in_ctr, 8 );
   \      0x306   0x2208             MOVS     R2,#+8
   \      0x308   0x6E29             LDR      R1,[R5, #+96]
   \      0x30A   0xA805             ADD      R0,SP,#+20
   \      0x30C   0x....'....        BL       __aeabi_memcpy
   1987                      memcpy( pseudo_hdr +  8, ssl->in_hdr, 3 );
   \      0x310   0x2203             MOVS     R2,#+3
   \      0x312   0x6E69             LDR      R1,[R5, #+100]
   \      0x314   0xA807             ADD      R0,SP,#+28
   \      0x316   0x....'....        BL       __aeabi_memcpy
   1988                      pseudo_hdr[11] = (unsigned char)( ( ssl->in_msglen >> 8 ) & 0xFF );
   \      0x31A   0xA805             ADD      R0,SP,#+20
   \      0x31C   0x6FE9             LDR      R1,[R5, #+124]
   \      0x31E   0x0A09             LSRS     R1,R1,#+8
   \      0x320   0x72C1             STRB     R1,[R0, #+11]
   1989                      pseudo_hdr[12] = (unsigned char)( ( ssl->in_msglen      ) & 0xFF );
   \      0x322   0x6FE9             LDR      R1,[R5, #+124]
   \      0x324   0x7301             STRB     R1,[R0, #+12]
   1990          
   1991                      MBEDTLS_SSL_DEBUG_BUF( 4, "MAC'd meta-data", pseudo_hdr, 13 );
   \      0x326   0x200D             MOVS     R0,#+13
   \      0x328   0x9002             STR      R0,[SP, #+8]
   \      0x32A   0xA805             ADD      R0,SP,#+20
   \      0x32C   0x9001             STR      R0,[SP, #+4]
   \      0x32E   0x....'....        LDR.W    R0,??DataTable16_9
   \      0x332   0x9000             STR      R0,[SP, #+0]
   \      0x334   0xF240 0x73C7      MOVW     R3,#+1991
   \      0x338   0x4642             MOV      R2,R8
   \      0x33A   0x2104             MOVS     R1,#+4
   \      0x33C   0x4628             MOV      R0,R5
   \      0x33E   0x....'....        BL       mbedtls_debug_print_buf
   1992          
   1993                      mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, pseudo_hdr, 13 );
   \      0x342   0x220D             MOVS     R2,#+13
   \      0x344   0xA905             ADD      R1,SP,#+20
   \      0x346   0x6C28             LDR      R0,[R5, #+64]
   \      0x348   0x3044             ADDS     R0,R0,#+68
   \      0x34A   0x....'....        BL       mbedtls_md_hmac_update
   1994                      mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec,
   1995                                       ssl->in_iv, ssl->in_msglen );
   \      0x34E   0x6FEA             LDR      R2,[R5, #+124]
   \      0x350   0x6EE9             LDR      R1,[R5, #+108]
   \      0x352   0x6C28             LDR      R0,[R5, #+64]
   \      0x354   0x3044             ADDS     R0,R0,#+68
   \      0x356   0x....'....        BL       mbedtls_md_hmac_update
   1996                      mbedtls_md_hmac_finish( &ssl->transform_in->md_ctx_dec, mac_expect );
   \      0x35A   0xA909             ADD      R1,SP,#+36
   \      0x35C   0x6C28             LDR      R0,[R5, #+64]
   \      0x35E   0x3044             ADDS     R0,R0,#+68
   \      0x360   0x....'....        BL       mbedtls_md_hmac_finish
   1997                      mbedtls_md_hmac_reset( &ssl->transform_in->md_ctx_dec );
   \      0x364   0x6C28             LDR      R0,[R5, #+64]
   \      0x366   0x3044             ADDS     R0,R0,#+68
   \      0x368   0x....'....        BL       mbedtls_md_hmac_reset
   1998          
   1999                      MBEDTLS_SSL_DEBUG_BUF( 4, "message  mac", ssl->in_iv + ssl->in_msglen,
   2000                                                        ssl->transform_in->maclen );
   \      0x36C   0x6C28             LDR      R0,[R5, #+64]
   \      0x36E   0x6940             LDR      R0,[R0, #+20]
   \      0x370   0x9002             STR      R0,[SP, #+8]
   \      0x372   0x6EE8             LDR      R0,[R5, #+108]
   \      0x374   0x6FE9             LDR      R1,[R5, #+124]
   \      0x376   0x4408             ADD      R0,R0,R1
   \      0x378   0x9001             STR      R0,[SP, #+4]
   \      0x37A   0x....'....        LDR.W    R0,??DataTable21
   \      0x37E   0x9000             STR      R0,[SP, #+0]
   \      0x380   0xF44F 0x63FA      MOV      R3,#+2000
   \      0x384   0x4642             MOV      R2,R8
   \      0x386   0x2104             MOVS     R1,#+4
   \      0x388   0x4628             MOV      R0,R5
   \      0x38A   0x....'....        BL       mbedtls_debug_print_buf
   2001                      MBEDTLS_SSL_DEBUG_BUF( 4, "expected mac", mac_expect,
   2002                                                        ssl->transform_in->maclen );
   \      0x38E   0x6C28             LDR      R0,[R5, #+64]
   \      0x390   0x6940             LDR      R0,[R0, #+20]
   \      0x392   0x9002             STR      R0,[SP, #+8]
   \      0x394   0xA809             ADD      R0,SP,#+36
   \      0x396   0x9001             STR      R0,[SP, #+4]
   \      0x398   0x....'....        LDR.W    R0,??DataTable21_1
   \      0x39C   0x9000             STR      R0,[SP, #+0]
   \      0x39E   0xF240 0x73D2      MOVW     R3,#+2002
   \      0x3A2   0x4642             MOV      R2,R8
   \      0x3A4   0x2104             MOVS     R1,#+4
   \      0x3A6   0x4628             MOV      R0,R5
   \      0x3A8   0x....'....        BL       mbedtls_debug_print_buf
   2003          
   2004                      if( mbedtls_ssl_safer_memcmp( ssl->in_iv + ssl->in_msglen, mac_expect,
   2005                                                    ssl->transform_in->maclen ) != 0 )
   \      0x3AC   0x6C28             LDR      R0,[R5, #+64]
   \      0x3AE   0x6942             LDR      R2,[R0, #+20]
   \      0x3B0   0xA909             ADD      R1,SP,#+36
   \      0x3B2   0x6EE8             LDR      R0,[R5, #+108]
   \      0x3B4   0x6FEB             LDR      R3,[R5, #+124]
   \      0x3B6   0x4418             ADD      R0,R0,R3
   \      0x3B8   0x....'....        BL       mbedtls_ssl_safer_memcmp
   \      0x3BC   0x2800             CMP      R0,#+0
   \      0x3BE   0xD00C             BEQ.N    ??ssl_decrypt_buf_21
   2006                      {
   2007                          MBEDTLS_SSL_DEBUG_MSG( 1, ( "message mac does not match" ) );
   \      0x3C0   0x....'....        LDR.W    R0,??DataTable21_2
   \      0x3C4   0x9000             STR      R0,[SP, #+0]
   \      0x3C6   0xF240 0x73D7      MOVW     R3,#+2007
   \      0x3CA   0x4642             MOV      R2,R8
   \      0x3CC   0x4639             MOV      R1,R7
   \      0x3CE   0x4628             MOV      R0,R5
   \      0x3D0   0x....'....        BL       mbedtls_debug_print_msg
   2008          
   2009                          return( MBEDTLS_ERR_SSL_INVALID_MAC );
   \      0x3D4   0x....'....        LDR.W    R0,??DataTable17_4  ;; 0xffff8e80
   \      0x3D8   0xE1E7             B.N      ??ssl_decrypt_buf_2
   2010                      }
   2011                      auth_done++;
   \                     ??ssl_decrypt_buf_21: (+1)
   \      0x3DA   0x463C             MOV      R4,R7
   2012                  }
   2013          #endif /* MBEDTLS_SSL_ENCRYPT_THEN_MAC */
   2014          
   2015                  /*
   2016                   * Check length sanity
   2017                   */
   2018                  if( ssl->in_msglen % ssl->transform_in->ivlen != 0 )
   \                     ??ssl_decrypt_buf_20: (+1)
   \      0x3DC   0x6FE8             LDR      R0,[R5, #+124]
   \      0x3DE   0x6C29             LDR      R1,[R5, #+64]
   \      0x3E0   0x68C9             LDR      R1,[R1, #+12]
   \      0x3E2   0xFBB0 0xF2F1      UDIV     R2,R0,R1
   \      0x3E6   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \      0x3EA   0x2800             CMP      R0,#+0
   \      0x3EC   0xD010             BEQ.N    ??ssl_decrypt_buf_22
   2019                  {
   2020                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) %% ivlen (%d) != 0",
   2021                                     ssl->in_msglen, ssl->transform_in->ivlen ) );
   \      0x3EE   0x4608             MOV      R0,R1
   \      0x3F0   0x9002             STR      R0,[SP, #+8]
   \      0x3F2   0x6FE8             LDR      R0,[R5, #+124]
   \      0x3F4   0x9001             STR      R0,[SP, #+4]
   \      0x3F6   0x....'....        LDR.W    R0,??DataTable21_3
   \      0x3FA   0x9000             STR      R0,[SP, #+0]
   \      0x3FC   0xF240 0x73E5      MOVW     R3,#+2021
   \      0x400   0x4642             MOV      R2,R8
   \      0x402   0x4639             MOV      R1,R7
   \      0x404   0x4628             MOV      R0,R5
   \      0x406   0x....'....        BL       mbedtls_debug_print_msg
   2022                      return( MBEDTLS_ERR_SSL_INVALID_MAC );
   \      0x40A   0x....'....        LDR.W    R0,??DataTable17_4  ;; 0xffff8e80
   \      0x40E   0xE1CC             B.N      ??ssl_decrypt_buf_2
   2023                  }
   2024          
   2025          #if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
   2026                  /*
   2027                   * Initialize for prepended IV for block cipher in TLS v1.1 and up
   2028                   */
   2029                  if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
   \                     ??ssl_decrypt_buf_22: (+1)
   \      0x410   0x6968             LDR      R0,[R5, #+20]
   \      0x412   0x2802             CMP      R0,#+2
   \      0x414   0xDB15             BLT.N    ??ssl_decrypt_buf_23
   2030                  {
   2031                      unsigned char i;
   2032                      dec_msglen -= ssl->transform_in->ivlen;
   \      0x416   0x4608             MOV      R0,R1
   \      0x418   0xEBA9 0x0900      SUB      R9,R9,R0
   2033                      ssl->in_msglen -= ssl->transform_in->ivlen;
   \      0x41C   0x6FE9             LDR      R1,[R5, #+124]
   \      0x41E   0x6C28             LDR      R0,[R5, #+64]
   \      0x420   0x68C0             LDR      R0,[R0, #+12]
   \      0x422   0x1A09             SUBS     R1,R1,R0
   \      0x424   0x67E9             STR      R1,[R5, #+124]
   2034          
   2035                      for( i = 0; i < ssl->transform_in->ivlen; i++ )
   \      0x426   0x2000             MOVS     R0,#+0
   \      0x428   0xE007             B.N      ??ssl_decrypt_buf_24
   2036                          ssl->transform_in->iv_dec[i] = ssl->in_iv[i];
   \                     ??ssl_decrypt_buf_25: (+1)
   \      0x42A   0x6EE9             LDR      R1,[R5, #+108]
   \      0x42C   0x5C09             LDRB     R1,[R1, R0]
   \      0x42E   0x6C2A             LDR      R2,[R5, #+64]
   \      0x430   0x4402             ADD      R2,R2,R0
   \      0x432   0xF882 0x1028      STRB     R1,[R2, #+40]
   \      0x436   0x1C40             ADDS     R0,R0,#+1
   \      0x438   0xB2C0             UXTB     R0,R0
   \                     ??ssl_decrypt_buf_24: (+1)
   \      0x43A   0x6C29             LDR      R1,[R5, #+64]
   \      0x43C   0x68C9             LDR      R1,[R1, #+12]
   \      0x43E   0x4288             CMP      R0,R1
   \      0x440   0xD3F3             BCC.N    ??ssl_decrypt_buf_25
   2037                  }
   2038          #endif /* MBEDTLS_SSL_PROTO_TLS1_1 || MBEDTLS_SSL_PROTO_TLS1_2 */
   2039          
   2040                  if( ( ret = mbedtls_cipher_crypt( &ssl->transform_in->cipher_ctx_dec,
   2041                                             ssl->transform_in->iv_dec,
   2042                                             ssl->transform_in->ivlen,
   2043                                             dec_msg, dec_msglen,
   2044                                             dec_msg_result, &olen ) ) != 0 )
   \                     ??ssl_decrypt_buf_23: (+1)
   \      0x442   0xA804             ADD      R0,SP,#+16
   \      0x444   0x9002             STR      R0,[SP, #+8]
   \      0x446   0xF8CD 0xA004      STR      R10,[SP, #+4]
   \      0x44A   0xF8CD 0x9000      STR      R9,[SP, #+0]
   \      0x44E   0x4633             MOV      R3,R6
   \      0x450   0x6C28             LDR      R0,[R5, #+64]
   \      0x452   0x68C2             LDR      R2,[R0, #+12]
   \      0x454   0xF100 0x0128      ADD      R1,R0,#+40
   \      0x458   0x3090             ADDS     R0,R0,#+144
   \      0x45A   0x....'....        BL       mbedtls_cipher_crypt
   \      0x45E   0x0006             MOVS     R6,R0
   \      0x460   0xD00C             BEQ.N    ??ssl_decrypt_buf_26
   2045                  {
   2046                      MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_crypt", ret );
   \      0x462   0x9601             STR      R6,[SP, #+4]
   \      0x464   0x....'....        LDR.W    R0,??DataTable16_7
   \      0x468   0x9000             STR      R0,[SP, #+0]
   \      0x46A   0xF240 0x73FE      MOVW     R3,#+2046
   \      0x46E   0x4642             MOV      R2,R8
   \      0x470   0x4639             MOV      R1,R7
   \      0x472   0x4628             MOV      R0,R5
   \      0x474   0x....'....        BL       mbedtls_debug_print_ret
   2047                      return( ret );
   \      0x478   0x4630             MOV      R0,R6
   \      0x47A   0xE196             B.N      ??ssl_decrypt_buf_2
   2048                  }
   2049          
   2050                  if( dec_msglen != olen )
   \                     ??ssl_decrypt_buf_26: (+1)
   \      0x47C   0x9804             LDR      R0,[SP, #+16]
   \      0x47E   0x4581             CMP      R9,R0
   \      0x480   0xD00C             BEQ.N    ??ssl_decrypt_buf_27
   2051                  {
   2052                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
   \      0x482   0x....'....        LDR.W    R0,??DataTable17_2
   \      0x486   0x9000             STR      R0,[SP, #+0]
   \      0x488   0xF640 0x0304      MOVW     R3,#+2052
   \      0x48C   0x4642             MOV      R2,R8
   \      0x48E   0x4639             MOV      R1,R7
   \      0x490   0x4628             MOV      R0,R5
   \      0x492   0x....'....        BL       mbedtls_debug_print_msg
   2053                      return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   \      0x496   0x....'....        LDR.W    R0,??DataTable18_1  ;; 0xffff9400
   \      0x49A   0xE186             B.N      ??ssl_decrypt_buf_2
   2054                  }
   2055          
   2056          #if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1)
   2057                  if( ssl->minor_ver < MBEDTLS_SSL_MINOR_VERSION_2 )
   \                     ??ssl_decrypt_buf_27: (+1)
   \      0x49C   0x6968             LDR      R0,[R5, #+20]
   \      0x49E   0x2802             CMP      R0,#+2
   \      0x4A0   0xDA06             BGE.N    ??ssl_decrypt_buf_28
   2058                  {
   2059                      /*
   2060                       * Save IV in SSL3 and TLS1
   2061                       */
   2062                      memcpy( ssl->transform_in->iv_dec,
   2063                              ssl->transform_in->cipher_ctx_dec.iv,
   2064                              ssl->transform_in->ivlen );
   \      0x4A2   0x6C28             LDR      R0,[R5, #+64]
   \      0x4A4   0x68C2             LDR      R2,[R0, #+12]
   \      0x4A6   0xF100 0x01B8      ADD      R1,R0,#+184
   \      0x4AA   0x3028             ADDS     R0,R0,#+40
   \      0x4AC   0x....'....        BL       __aeabi_memcpy4
   2065                  }
   2066          #endif
   2067          
   2068                  padlen = 1 + ssl->in_msg[ssl->in_msglen - 1];
   \                     ??ssl_decrypt_buf_28: (+1)
   \      0x4B0   0x6F28             LDR      R0,[R5, #+112]
   \      0x4B2   0x6FE9             LDR      R1,[R5, #+124]
   \      0x4B4   0x4408             ADD      R0,R0,R1
   \      0x4B6   0xF810 0x1C01      LDRB     R1,[R0, #-1]
   \      0x4BA   0x1C49             ADDS     R1,R1,#+1
   2069          
   2070                  if( ssl->in_msglen < ssl->transform_in->maclen + padlen &&
   2071                      auth_done == 0 )
   \      0x4BC   0x6FE8             LDR      R0,[R5, #+124]
   \      0x4BE   0x6C2A             LDR      R2,[R5, #+64]
   \      0x4C0   0x6952             LDR      R2,[R2, #+20]
   \      0x4C2   0x188A             ADDS     R2,R1,R2
   \      0x4C4   0x4290             CMP      R0,R2
   \      0x4C6   0xD203             BCS.N    ??ssl_decrypt_buf_29
   \      0x4C8   0x2C00             CMP      R4,#+0
   \      0x4CA   0xD101             BNE.N    ??ssl_decrypt_buf_29
   2072                  {
   2073          #if defined(MBEDTLS_SSL_DEBUG_ALL)
   2074                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) < maclen (%d) + padlen (%d)",
   2075                                  ssl->in_msglen, ssl->transform_in->maclen, padlen ) );
   2076          #endif
   2077                      padlen = 0;
   \      0x4CC   0x2100             MOVS     R1,#+0
   2078                      correct = 0;
   \      0x4CE   0x460F             MOV      R7,R1
   2079                  }
   2080          
   2081          #if defined(MBEDTLS_SSL_PROTO_SSL3)
   2082                  if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 )
   2083                  {
   2084                      if( padlen > ssl->transform_in->ivlen )
   2085                      {
   2086          #if defined(MBEDTLS_SSL_DEBUG_ALL)
   2087                          MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad padding length: is %d, "
   2088                                              "should be no more than %d",
   2089                                         padlen, ssl->transform_in->ivlen ) );
   2090          #endif
   2091                          correct = 0;
   2092                      }
   2093                  }
   2094                  else
   2095          #endif /* MBEDTLS_SSL_PROTO_SSL3 */
   2096          #if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
   2097              defined(MBEDTLS_SSL_PROTO_TLS1_2)
   2098                  if( ssl->minor_ver > MBEDTLS_SSL_MINOR_VERSION_0 )
   \                     ??ssl_decrypt_buf_29: (+1)
   \      0x4D0   0x6968             LDR      R0,[R5, #+20]
   \      0x4D2   0x2801             CMP      R0,#+1
   \      0x4D4   0xDB55             BLT.N    ??ssl_decrypt_buf_30
   2099                  {
   2100                      /*
   2101                       * TLSv1+: always check the padding up to the first failure
   2102                       * and fake check up to 256 bytes of padding
   2103                       */
   2104                      size_t pad_count = 0, real_count = 1;
   \      0x4D6   0x2200             MOVS     R2,#+0
   \      0x4D8   0x2301             MOVS     R3,#+1
   2105                      size_t padding_idx = ssl->in_msglen - padlen;
   \      0x4DA   0x6FEE             LDR      R6,[R5, #+124]
   \      0x4DC   0x1A76             SUBS     R6,R6,R1
   2106                      size_t i;
   2107          
   2108                      /*
   2109                       * Padding is guaranteed to be incorrect if:
   2110                       *   1. padlen > ssl->in_msglen
   2111                       *
   2112                       *   2. padding_idx > MBEDTLS_SSL_IN_CONTENT_LEN +
   2113                       *                     ssl->transform_in->maclen
   2114                       *
   2115                       * In both cases we reset padding_idx to a safe value (0) to
   2116                       * prevent out-of-buffer reads.
   2117                       */
   2118                      correct &= ( padlen <= ssl->in_msglen );
   \      0x4DE   0x6FE8             LDR      R0,[R5, #+124]
   \      0x4E0   0x4180             SBCS     R0,R0,R0
   \      0x4E2   0x43C0             MVNS     R0,R0
   \      0x4E4   0xEA17 0x77D0      ANDS     R7,R7,R0, LSR #+31
   2119                      correct &= ( padding_idx <= MBEDTLS_SSL_IN_CONTENT_LEN +
   2120                                                 ssl->transform_in->maclen );
   \      0x4E8   0x6C28             LDR      R0,[R5, #+64]
   \      0x4EA   0x6940             LDR      R0,[R0, #+20]
   \      0x4EC   0xF500 0x5020      ADD      R0,R0,#+10240
   \      0x4F0   0x42B0             CMP      R0,R6
   \      0x4F2   0x4180             SBCS     R0,R0,R0
   \      0x4F4   0x43C0             MVNS     R0,R0
   \      0x4F6   0xEA17 0x77D0      ANDS     R7,R7,R0, LSR #+31
   \      0x4FA   0x9700             STR      R7,[SP, #+0]
   2121          
   2122                      padding_idx *= correct;
   \      0x4FC   0x9800             LDR      R0,[SP, #+0]
   \      0x4FE   0x4346             MULS     R6,R0,R6
   2123          
   2124                      for( i = 0; i < 256; i++ )
   \      0x500   0x4610             MOV      R0,R2
   \                     ??ssl_decrypt_buf_31: (+1)
   \      0x502   0xF5B0 0x7F80      CMP      R0,#+256
   \      0x506   0xF080 0x8153      BCS.W    ??ssl_decrypt_buf_32
   2125                      {
   2126                          real_count &= ( i < padlen );
   \      0x50A   0x4288             CMP      R0,R1
   \      0x50C   0x41BF             SBCS     R7,R7,R7
   \      0x50E   0xEA13 0x73D7      ANDS     R3,R3,R7, LSR #+31
   2127                          pad_count += real_count *
   2128                                       ( ssl->in_msg[padding_idx + i] == padlen - 1 );
   \      0x512   0x6F2F             LDR      R7,[R5, #+112]
   \      0x514   0xEB00 0x0C06      ADD      R12,R0,R6
   \      0x518   0xF817 0x700C      LDRB     R7,[R7, R12]
   \      0x51C   0xF1A1 0x0C01      SUB      R12,R1,#+1
   \      0x520   0x4567             CMP      R7,R12
   \      0x522   0xD001             BEQ.N    ??ssl_decrypt_buf_33
   \      0x524   0x2700             MOVS     R7,#+0
   \      0x526   0xE000             B.N      ??ssl_decrypt_buf_34
   \                     ??ssl_decrypt_buf_33: (+1)
   \      0x528   0x2701             MOVS     R7,#+1
   \                     ??ssl_decrypt_buf_34: (+1)
   \      0x52A   0xFB17 0x2203      SMLABB   R2,R7,R3,R2
   2129                      }
   \      0x52E   0x1C40             ADDS     R0,R0,#+1
   \      0x530   0xE7E7             B.N      ??ssl_decrypt_buf_31
   2130          
   2131                      correct &= ( pad_count == padlen ); /* Only 1 on correct padding */
   \                     ??ssl_decrypt_buf_35: (+1)
   \      0x532   0x2000             MOVS     R0,#+0
   \                     ??ssl_decrypt_buf_36: (+1)
   \      0x534   0x9F00             LDR      R7,[SP, #+0]
   \      0x536   0x4007             ANDS     R7,R0,R7
   2132          
   2133          #if defined(MBEDTLS_SSL_DEBUG_ALL)
   2134                      if( padlen > 0 && correct == 0 )
   2135                          MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad padding byte detected" ) );
   2136          #endif
   2137                      padlen &= correct * 0x1FF;
   \      0x538   0x4689             MOV      R9,R1
   \      0x53A   0xEBC7 0x2047      RSB      R0,R7,R7, LSL #+9
   \      0x53E   0xEA00 0x0909      AND      R9,R0,R9
   2138                  }
   2139                  else
   2140          #endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 || \
   2141                    MBEDTLS_SSL_PROTO_TLS1_2 */
   2142                  {
   2143                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
   2144                      return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   2145                  }
   2146          
   2147                  ssl->in_msglen -= padlen;
   \      0x542   0x6FE8             LDR      R0,[R5, #+124]
   \      0x544   0xEBA0 0x0009      SUB      R0,R0,R9
   \      0x548   0x67E8             STR      R0,[R5, #+124]
   2148              }
   2149              else
   2150          #endif /* MBEDTLS_CIPHER_MODE_CBC &&
   2151                    ( MBEDTLS_AES_C || MBEDTLS_CAMELLIA_C || MBEDTLS_ARIA_C ) */
   2152              {
   2153                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
   2154                  return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   2155              }
   2156          
   2157          #if defined(MBEDTLS_SSL_DEBUG_ALL)
   2158              MBEDTLS_SSL_DEBUG_BUF( 4, "raw buffer after decryption",
   2159                             ssl->in_msg, ssl->in_msglen );
   2160          #endif
   2161          
   2162              /*
   2163               * Authenticate if not done yet.
   2164               * Compute the MAC regardless of the padding result (RFC4346, CBCTIME).
   2165               */
   2166          #if defined(SSL_SOME_MODES_USE_MAC)
   2167              if( auth_done == 0 )
   \                     ??ssl_decrypt_buf_15: (+1)
   \      0x54A   0x2C00             CMP      R4,#+0
   \      0x54C   0xF040 0x80C6      BNE.W    ??ssl_decrypt_buf_37
   2168              {
   2169                  unsigned char mac_expect[MBEDTLS_SSL_MAC_ADD];
   2170          
   2171                  ssl->in_msglen -= ssl->transform_in->maclen;
   \      0x550   0x6FE9             LDR      R1,[R5, #+124]
   \      0x552   0x6C28             LDR      R0,[R5, #+64]
   \      0x554   0x6940             LDR      R0,[R0, #+20]
   \      0x556   0x1A09             SUBS     R1,R1,R0
   \      0x558   0x67E9             STR      R1,[R5, #+124]
   2172          
   2173                  ssl->in_len[0] = (unsigned char)( ssl->in_msglen >> 8 );
   \      0x55A   0x4608             MOV      R0,R1
   \      0x55C   0x0A00             LSRS     R0,R0,#+8
   \      0x55E   0x6EA9             LDR      R1,[R5, #+104]
   \      0x560   0x7008             STRB     R0,[R1, #+0]
   2174                  ssl->in_len[1] = (unsigned char)( ssl->in_msglen      );
   \      0x562   0x6FE8             LDR      R0,[R5, #+124]
   \      0x564   0x6EA9             LDR      R1,[R5, #+104]
   \      0x566   0x7048             STRB     R0,[R1, #+1]
   2175          
   2176          #if defined(MBEDTLS_SSL_PROTO_SSL3)
   2177                  if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 )
   2178                  {
   2179                      ssl_mac( &ssl->transform_in->md_ctx_dec,
   2180                                ssl->transform_in->mac_dec,
   2181                                ssl->in_msg, ssl->in_msglen,
   2182                                ssl->in_ctr, ssl->in_msgtype,
   2183                                mac_expect );
   2184                  }
   2185                  else
   2186          #endif /* MBEDTLS_SSL_PROTO_SSL3 */
   2187          #if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
   2188                  defined(MBEDTLS_SSL_PROTO_TLS1_2)
   2189                  if( ssl->minor_ver > MBEDTLS_SSL_MINOR_VERSION_0 )
   \      0x568   0x6968             LDR      R0,[R5, #+20]
   \      0x56A   0x2801             CMP      R0,#+1
   \      0x56C   0xF2C0 0x80A9      BLT.W    ??ssl_decrypt_buf_38
   2190                  {
   2191                      /*
   2192                       * Process MAC and always update for padlen afterwards to make
   2193                       * total time independent of padlen.
   2194                       *
   2195                       * Known timing attacks:
   2196                       *  - Lucky Thirteen (http://www.isg.rhul.ac.uk/tls/TLStiming.pdf)
   2197                       *
   2198                       * To compensate for different timings for the MAC calculation
   2199                       * depending on how much padding was removed (which is determined
   2200                       * by padlen), process extra_run more blocks through the hash
   2201                       * function.
   2202                       *
   2203                       * The formula in the paper is
   2204                       *   extra_run = ceil( (L1-55) / 64 ) - ceil( (L2-55) / 64 )
   2205                       * where L1 is the size of the header plus the decrypted message
   2206                       * plus CBC padding and L2 is the size of the header plus the
   2207                       * decrypted message. This is for an underlying hash function
   2208                       * with 64-byte blocks.
   2209                       * We use ( (Lx+8) / 64 ) to handle 'negative Lx' values
   2210                       * correctly. We round down instead of up, so -56 is the correct
   2211                       * value for our calculations instead of -55.
   2212                       *
   2213                       * Repeat the formula rather than defining a block_size variable.
   2214                       * This avoids requiring division by a variable at runtime
   2215                       * (which would be marginally less efficient and would require
   2216                       * linking an extra division function in some builds).
   2217                       */
   2218                      size_t j, extra_run = 0;
   2219          
   2220                      /*
   2221                       * The next two sizes are the minimum and maximum values of
   2222                       * in_msglen over all padlen values.
   2223                       *
   2224                       * They're independent of padlen, since we previously did
   2225                       * in_msglen -= padlen.
   2226                       *
   2227                       * Note that max_len + maclen is never more than the buffer
   2228                       * length, as we previously did in_msglen -= maclen too.
   2229                       */
   2230                      const size_t max_len = ssl->in_msglen + padlen;
   \      0x570   0x6FEC             LDR      R4,[R5, #+124]
   \      0x572   0x444C             ADD      R4,R9,R4
   2231                      const size_t min_len = ( max_len > 256 ) ? max_len - 256 : 0;
   \      0x574   0xF240 0x1001      MOVW     R0,#+257
   \      0x578   0x4284             CMP      R4,R0
   \      0x57A   0xD31C             BCC.N    ??ssl_decrypt_buf_39
   \      0x57C   0xF5A4 0x7680      SUB      R6,R4,#+256
   \      0x580   0xE01A             B.N      ??ssl_decrypt_buf_40
   \                     ??ssl_decrypt_buf_30: (+1)
   \      0x582   0x....'....        LDR.W    R0,??DataTable17_2
   \      0x586   0x9000             STR      R0,[SP, #+0]
   \      0x588   0xF640 0x035F      MOVW     R3,#+2143
   \      0x58C   0x4642             MOV      R2,R8
   \      0x58E   0x2101             MOVS     R1,#+1
   \      0x590   0x4628             MOV      R0,R5
   \      0x592   0x....'....        BL       mbedtls_debug_print_msg
   \      0x596   0x....'....        LDR.W    R0,??DataTable18_1  ;; 0xffff9400
   \      0x59A   0xE106             B.N      ??ssl_decrypt_buf_2
   \                     ??ssl_decrypt_buf_16: (+1)
   \      0x59C   0x....'....        LDR.W    R0,??DataTable17_2
   \      0x5A0   0x9000             STR      R0,[SP, #+0]
   \      0x5A2   0xF640 0x0369      MOVW     R3,#+2153
   \      0x5A6   0x4642             MOV      R2,R8
   \      0x5A8   0x4639             MOV      R1,R7
   \      0x5AA   0x4628             MOV      R0,R5
   \      0x5AC   0x....'....        BL       mbedtls_debug_print_msg
   \      0x5B0   0x....'....        LDR.W    R0,??DataTable18_1  ;; 0xffff9400
   \      0x5B4   0xE0F9             B.N      ??ssl_decrypt_buf_2
   \                     ??ssl_decrypt_buf_39: (+1)
   \      0x5B6   0x2600             MOVS     R6,#+0
   2232          
   2233                      switch( ssl->transform_in->ciphersuite_info->mac )
   \                     ??ssl_decrypt_buf_40: (+1)
   \      0x5B8   0x6C28             LDR      R0,[R5, #+64]
   \      0x5BA   0x6800             LDR      R0,[R0, #+0]
   \      0x5BC   0x7A40             LDRB     R0,[R0, #+9]
   \      0x5BE   0x2803             CMP      R0,#+3
   \      0x5C0   0xD006             BEQ.N    ??ssl_decrypt_buf_41
   \      0x5C2   0x2804             CMP      R0,#+4
   \      0x5C4   0xD004             BEQ.N    ??ssl_decrypt_buf_41
   \      0x5C6   0x2806             CMP      R0,#+6
   \      0x5C8   0xD002             BEQ.N    ??ssl_decrypt_buf_41
   \      0x5CA   0x2807             CMP      R0,#+7
   \      0x5CC   0xD036             BEQ.N    ??ssl_decrypt_buf_42
   \      0x5CE   0xE041             B.N      ??ssl_decrypt_buf_43
   2234                      {
   2235          #if defined(MBEDTLS_MD5_C) || defined(MBEDTLS_SHA1_C) || \
   2236              defined(MBEDTLS_SHA256_C)
   2237                          case MBEDTLS_MD_MD5:
   2238                          case MBEDTLS_MD_SHA1:
   2239                          case MBEDTLS_MD_SHA256:
   2240                              /* 8 bytes of message size, 64-byte compression blocks */
   2241                              extra_run = ( 13 + ssl->in_msglen + padlen + 8 ) / 64 -
   2242                                          ( 13 + ssl->in_msglen          + 8 ) / 64;
   \                     ??ssl_decrypt_buf_41: (+1)
   \      0x5D0   0xF8D5 0xA07C      LDR      R10,[R5, #+124]
   \      0x5D4   0x44CA             ADD      R10,R9,R10
   \      0x5D6   0xF10A 0x0A15      ADD      R10,R10,#+21
   \      0x5DA   0xEA4F 0x1A9A      LSR      R10,R10,#+6
   \      0x5DE   0x6FE8             LDR      R0,[R5, #+124]
   \      0x5E0   0x3015             ADDS     R0,R0,#+21
   \      0x5E2   0xEBAA 0x1A90      SUB      R10,R10,R0, LSR #+6
   2243                              break;
   2244          #endif
   2245          #if defined(MBEDTLS_SHA512_C)
   2246                          case MBEDTLS_MD_SHA384:
   2247                              /* 16 bytes of message size, 128-byte compression blocks */
   2248                              extra_run = ( 13 + ssl->in_msglen + padlen + 16 ) / 128 -
   2249                                          ( 13 + ssl->in_msglen          + 16 ) / 128;
   2250                              break;
   2251          #endif
   2252                          default:
   2253                              MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
   2254                              return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   2255                      }
   2256          
   2257                      extra_run &= correct * 0xFF;
   \                     ??ssl_decrypt_buf_44: (+1)
   \      0x5E6   0xEBC7 0x2007      RSB      R0,R7,R7, LSL #+8
   \      0x5EA   0xEA00 0x0A0A      AND      R10,R0,R10
   2258          
   2259                      mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_ctr, 8 );
   \      0x5EE   0x2208             MOVS     R2,#+8
   \      0x5F0   0x6E29             LDR      R1,[R5, #+96]
   \      0x5F2   0x6C28             LDR      R0,[R5, #+64]
   \      0x5F4   0x3044             ADDS     R0,R0,#+68
   \      0x5F6   0x....'....        BL       mbedtls_md_hmac_update
   2260                      mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_hdr, 3 );
   \      0x5FA   0x2203             MOVS     R2,#+3
   \      0x5FC   0x6E69             LDR      R1,[R5, #+100]
   \      0x5FE   0x6C28             LDR      R0,[R5, #+64]
   \      0x600   0x3044             ADDS     R0,R0,#+68
   \      0x602   0x....'....        BL       mbedtls_md_hmac_update
   2261                      mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_len, 2 );
   \      0x606   0x2202             MOVS     R2,#+2
   \      0x608   0x6EA9             LDR      R1,[R5, #+104]
   \      0x60A   0x6C28             LDR      R0,[R5, #+64]
   \      0x60C   0x3044             ADDS     R0,R0,#+68
   \      0x60E   0x....'....        BL       mbedtls_md_hmac_update
   2262                      mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_msg,
   2263                                       ssl->in_msglen );
   \      0x612   0x6FEA             LDR      R2,[R5, #+124]
   \      0x614   0x6F29             LDR      R1,[R5, #+112]
   \      0x616   0x6C28             LDR      R0,[R5, #+64]
   \      0x618   0x3044             ADDS     R0,R0,#+68
   \      0x61A   0x....'....        BL       mbedtls_md_hmac_update
   2264                      /* Make sure we access everything even when padlen > 0. This
   2265                       * makes the synchronisation requirements for just-in-time
   2266                       * Prime+Probe attacks much tighter and hopefully impractical. */
   2267                      ssl_read_memory( ssl->in_msg + ssl->in_msglen, padlen );
   \      0x61E   0x4649             MOV      R1,R9
   \      0x620   0x6F28             LDR      R0,[R5, #+112]
   \      0x622   0x6FEA             LDR      R2,[R5, #+124]
   \      0x624   0x4410             ADD      R0,R0,R2
   \      0x626   0x....'....        BL       ssl_read_memory
   2268                      mbedtls_md_hmac_finish( &ssl->transform_in->md_ctx_dec, mac_expect );
   \      0x62A   0xA901             ADD      R1,SP,#+4
   \      0x62C   0x6C28             LDR      R0,[R5, #+64]
   \      0x62E   0x3044             ADDS     R0,R0,#+68
   \      0x630   0x....'....        BL       mbedtls_md_hmac_finish
   2269          
   2270                      /* Call mbedtls_md_process at least once due to cache attacks
   2271                       * that observe whether md_process() was called of not */
   2272                      for( j = 0; j < extra_run + 1; j++ )
   \      0x634   0x2000             MOVS     R0,#+0
   \      0x636   0x46D1             MOV      R9,R10
   \      0x638   0x4682             MOV      R10,R0
   \      0x63A   0xE01F             B.N      ??ssl_decrypt_buf_45
   \                     ??ssl_decrypt_buf_42: (+1)
   \      0x63C   0xF8D5 0xA07C      LDR      R10,[R5, #+124]
   \      0x640   0x44CA             ADD      R10,R9,R10
   \      0x642   0xF10A 0x0A1D      ADD      R10,R10,#+29
   \      0x646   0xEA4F 0x1ADA      LSR      R10,R10,#+7
   \      0x64A   0x6FE8             LDR      R0,[R5, #+124]
   \      0x64C   0x301D             ADDS     R0,R0,#+29
   \      0x64E   0xEBAA 0x1AD0      SUB      R10,R10,R0, LSR #+7
   \      0x652   0xE7C8             B.N      ??ssl_decrypt_buf_44
   \                     ??ssl_decrypt_buf_43: (+1)
   \      0x654   0x....'....        LDR.W    R0,??DataTable17_2
   \      0x658   0x9000             STR      R0,[SP, #+0]
   \      0x65A   0xF640 0x03CD      MOVW     R3,#+2253
   \      0x65E   0x4642             MOV      R2,R8
   \      0x660   0x2101             MOVS     R1,#+1
   \      0x662   0x4628             MOV      R0,R5
   \      0x664   0x....'....        BL       mbedtls_debug_print_msg
   \      0x668   0x....'....        LDR.W    R0,??DataTable18_1  ;; 0xffff9400
   \      0x66C   0xE09D             B.N      ??ssl_decrypt_buf_2
   2273                          mbedtls_md_process( &ssl->transform_in->md_ctx_dec, ssl->in_msg );
   \                     ??ssl_decrypt_buf_46: (+1)
   \      0x66E   0x6F29             LDR      R1,[R5, #+112]
   \      0x670   0x6C28             LDR      R0,[R5, #+64]
   \      0x672   0x3044             ADDS     R0,R0,#+68
   \      0x674   0x....'....        BL       mbedtls_md_process
   \      0x678   0xF10A 0x0A01      ADD      R10,R10,#+1
   \                     ??ssl_decrypt_buf_45: (+1)
   \      0x67C   0xF109 0x0001      ADD      R0,R9,#+1
   \      0x680   0x4582             CMP      R10,R0
   \      0x682   0xD3F4             BCC.N    ??ssl_decrypt_buf_46
   2274          
   2275                      mbedtls_md_hmac_reset( &ssl->transform_in->md_ctx_dec );
   \      0x684   0x6C28             LDR      R0,[R5, #+64]
   \      0x686   0x3044             ADDS     R0,R0,#+68
   \      0x688   0x....'....        BL       mbedtls_md_hmac_reset
   2276          
   2277                      /* Make sure we access all the memory that could contain the MAC,
   2278                       * before we check it in the next code block. This makes the
   2279                       * synchronisation requirements for just-in-time Prime+Probe
   2280                       * attacks much tighter and hopefully impractical. */
   2281                      ssl_read_memory( ssl->in_msg + min_len,
   2282                                           max_len - min_len + ssl->transform_in->maclen );
   \      0x68C   0x1BA4             SUBS     R4,R4,R6
   \      0x68E   0x6C28             LDR      R0,[R5, #+64]
   \      0x690   0x6940             LDR      R0,[R0, #+20]
   \      0x692   0x1904             ADDS     R4,R0,R4
   \      0x694   0x4621             MOV      R1,R4
   \      0x696   0x6F28             LDR      R0,[R5, #+112]
   \      0x698   0x4430             ADD      R0,R0,R6
   \      0x69A   0x....'....        BL       ssl_read_memory
   2283                  }
   2284                  else
   2285          #endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 || \
   2286                        MBEDTLS_SSL_PROTO_TLS1_2 */
   2287                  {
   2288                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
   2289                      return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   2290                  }
   2291          
   2292          #if defined(MBEDTLS_SSL_DEBUG_ALL)
   2293                  MBEDTLS_SSL_DEBUG_BUF( 4, "expected mac", mac_expect, ssl->transform_in->maclen );
   2294                  MBEDTLS_SSL_DEBUG_BUF( 4, "message  mac", ssl->in_msg + ssl->in_msglen,
   2295                                         ssl->transform_in->maclen );
   2296          #endif
   2297          
   2298                  if( mbedtls_ssl_safer_memcmp( ssl->in_msg + ssl->in_msglen, mac_expect,
   2299                                                ssl->transform_in->maclen ) != 0 )
   \      0x69E   0x6C28             LDR      R0,[R5, #+64]
   \      0x6A0   0x6942             LDR      R2,[R0, #+20]
   \      0x6A2   0xA901             ADD      R1,SP,#+4
   \      0x6A4   0x6F28             LDR      R0,[R5, #+112]
   \      0x6A6   0x6FEB             LDR      R3,[R5, #+124]
   \      0x6A8   0x4418             ADD      R0,R0,R3
   \      0x6AA   0x....'....        BL       mbedtls_ssl_safer_memcmp
   \      0x6AE   0x2800             CMP      R0,#+0
   \      0x6B0   0xD001             BEQ.N    ??ssl_decrypt_buf_47
   2300                  {
   2301          #if defined(MBEDTLS_SSL_DEBUG_ALL)
   2302                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "message mac does not match" ) );
   2303          #endif
   2304                      correct = 0;
   \      0x6B2   0x2000             MOVS     R0,#+0
   \      0x6B4   0x4607             MOV      R7,R0
   2305                  }
   2306                  auth_done++;
   \                     ??ssl_decrypt_buf_47: (+1)
   \      0x6B6   0x2401             MOVS     R4,#+1
   2307          
   2308                  /*
   2309                   * Finally check the correct flag
   2310                   */
   2311                  if( correct == 0 )
   \      0x6B8   0x2F00             CMP      R7,#+0
   \      0x6BA   0xD10F             BNE.N    ??ssl_decrypt_buf_37
   2312                      return( MBEDTLS_ERR_SSL_INVALID_MAC );
   \      0x6BC   0x....'....        LDR.W    R0,??DataTable17_4  ;; 0xffff8e80
   \      0x6C0   0xE073             B.N      ??ssl_decrypt_buf_2
   \                     ??ssl_decrypt_buf_38: (+1)
   \      0x6C2   0x....'....        LDR.W    R0,??DataTable17_2
   \      0x6C6   0x9000             STR      R0,[SP, #+0]
   \      0x6C8   0xF44F 0x630F      MOV      R3,#+2288
   \      0x6CC   0x4642             MOV      R2,R8
   \      0x6CE   0x2101             MOVS     R1,#+1
   \      0x6D0   0x4628             MOV      R0,R5
   \      0x6D2   0x....'....        BL       mbedtls_debug_print_msg
   \      0x6D6   0x....'....        LDR.W    R0,??DataTable18_1  ;; 0xffff9400
   \      0x6DA   0xE066             B.N      ??ssl_decrypt_buf_2
   2313              }
   2314          #endif /* SSL_SOME_MODES_USE_MAC */
   2315          
   2316              /* Make extra sure authentication was performed, exactly once */
   2317              if( auth_done != 1 )
   \                     ??ssl_decrypt_buf_37: (+1)
   \      0x6DC   0x2C01             CMP      R4,#+1
   \      0x6DE   0xD00C             BEQ.N    ??ssl_decrypt_buf_48
   2318              {
   2319                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
   \      0x6E0   0x....'....        LDR.W    R0,??DataTable17_2
   \      0x6E4   0x9000             STR      R0,[SP, #+0]
   \      0x6E6   0xF640 0x130F      MOVW     R3,#+2319
   \      0x6EA   0x4642             MOV      R2,R8
   \      0x6EC   0x2101             MOVS     R1,#+1
   \      0x6EE   0x4628             MOV      R0,R5
   \      0x6F0   0x....'....        BL       mbedtls_debug_print_msg
   2320                  return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   \      0x6F4   0x....'....        LDR.W    R0,??DataTable18_1  ;; 0xffff9400
   \      0x6F8   0xE057             B.N      ??ssl_decrypt_buf_2
   2321              }
   2322          
   2323              if( ssl->in_msglen == 0 )
   \                     ??ssl_decrypt_buf_48: (+1)
   \      0x6FA   0x6FE8             LDR      R0,[R5, #+124]
   \      0x6FC   0x2800             CMP      R0,#+0
   \      0x6FE   0xD127             BNE.N    ??ssl_decrypt_buf_49
   2324              {
   2325          #if defined(MBEDTLS_SSL_PROTO_TLS1_2)
   2326                  if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3
   2327                      && ssl->in_msgtype != MBEDTLS_SSL_MSG_APPLICATION_DATA )
   \      0x700   0x6968             LDR      R0,[R5, #+20]
   \      0x702   0x2803             CMP      R0,#+3
   \      0x704   0xD110             BNE.N    ??ssl_decrypt_buf_50
   \      0x706   0x6FA8             LDR      R0,[R5, #+120]
   \      0x708   0x2817             CMP      R0,#+23
   \      0x70A   0xD00D             BEQ.N    ??ssl_decrypt_buf_50
   2328                  {
   2329                      /* TLS v1.2 explicitly disallows zero-length messages which are not application data */
   2330                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid zero-length message type: %d", ssl->in_msgtype ) );
   \      0x70C   0x9001             STR      R0,[SP, #+4]
   \      0x70E   0x....'....        LDR.W    R0,??DataTable22
   \      0x712   0x9000             STR      R0,[SP, #+0]
   \      0x714   0xF640 0x131A      MOVW     R3,#+2330
   \      0x718   0x4642             MOV      R2,R8
   \      0x71A   0x2101             MOVS     R1,#+1
   \      0x71C   0x4628             MOV      R0,R5
   \      0x71E   0x....'....        BL       mbedtls_debug_print_msg
   2331                      return( MBEDTLS_ERR_SSL_INVALID_RECORD );
   \      0x722   0x....'....        LDR.W    R0,??DataTable22_1  ;; 0xffff8e00
   \      0x726   0xE040             B.N      ??ssl_decrypt_buf_2
   2332                  }
   2333          #endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
   2334          
   2335                  ssl->nb_zero++;
   \                     ??ssl_decrypt_buf_50: (+1)
   \      0x728   0xF8D5 0x00A4      LDR      R0,[R5, #+164]
   \      0x72C   0x1C40             ADDS     R0,R0,#+1
   \      0x72E   0xF8C5 0x00A4      STR      R0,[R5, #+164]
   2336          
   2337                  /*
   2338                   * Three or more empty messages may be a DoS attack
   2339                   * (excessive CPU consumption).
   2340                   */
   2341                  if( ssl->nb_zero > 3 )
   \      0x732   0x2804             CMP      R0,#+4
   \      0x734   0xDB0F             BLT.N    ??ssl_decrypt_buf_51
   2342                  {
   2343                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "received four consecutive empty "
   2344                                          "messages, possible DoS attack" ) );
   \      0x736   0x....'....        LDR.W    R0,??DataTable22_2
   \      0x73A   0x9000             STR      R0,[SP, #+0]
   \      0x73C   0xF640 0x1328      MOVW     R3,#+2344
   \      0x740   0x4642             MOV      R2,R8
   \      0x742   0x2101             MOVS     R1,#+1
   \      0x744   0x4628             MOV      R0,R5
   \      0x746   0x....'....        BL       mbedtls_debug_print_msg
   2345                      return( MBEDTLS_ERR_SSL_INVALID_MAC );
   \      0x74A   0x....'....        LDR.W    R0,??DataTable17_4  ;; 0xffff8e80
   \      0x74E   0xE02C             B.N      ??ssl_decrypt_buf_2
   2346                  }
   2347              }
   2348              else
   2349                  ssl->nb_zero = 0;
   \                     ??ssl_decrypt_buf_49: (+1)
   \      0x750   0x2000             MOVS     R0,#+0
   \      0x752   0xF8C5 0x00A4      STR      R0,[R5, #+164]
   2350          
   2351          #if defined(MBEDTLS_SSL_PROTO_DTLS)
   2352              if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
   \                     ??ssl_decrypt_buf_51: (+1)
   \      0x756   0x6828             LDR      R0,[R5, #+0]
   \      0x758   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \      0x75C   0xF3C0 0x0040      UBFX     R0,R0,#+1,#+1
   \      0x760   0x2800             CMP      R0,#+0
   \      0x762   0xD117             BNE.N    ??ssl_decrypt_buf_52
   2353              {
   2354                  ; /* in_ctr read from peer, not maintained internally */
   2355              }
   2356              else
   2357          #endif
   2358              {
   2359                  unsigned char i;
   2360                  for( i = 8; i > ssl_ep_len( ssl ); i-- )
   \      0x764   0x2608             MOVS     R6,#+8
   \                     ??ssl_decrypt_buf_53: (+1)
   \      0x766   0x4628             MOV      R0,R5
   \      0x768   0x....'....        BL       ssl_ep_len
   \      0x76C   0x42B0             CMP      R0,R6
   \      0x76E   0xD224             BCS.N    ??ssl_decrypt_buf_54
   2361                      if( ++ssl->in_ctr[i - 1] != 0 )
   \      0x770   0x6E28             LDR      R0,[R5, #+96]
   \      0x772   0x4430             ADD      R0,R0,R6
   \      0x774   0xF810 0x0C01      LDRB     R0,[R0, #-1]
   \      0x778   0x1C40             ADDS     R0,R0,#+1
   \      0x77A   0x6E29             LDR      R1,[R5, #+96]
   \      0x77C   0x4431             ADD      R1,R1,R6
   \      0x77E   0xF801 0x0C01      STRB     R0,[R1, #-1]
   \      0x782   0x6E28             LDR      R0,[R5, #+96]
   \      0x784   0x4430             ADD      R0,R0,R6
   \      0x786   0xF810 0x0C01      LDRB     R0,[R0, #-1]
   \      0x78A   0x2800             CMP      R0,#+0
   \      0x78C   0xD115             BNE.N    ??ssl_decrypt_buf_54
   \      0x78E   0x1E76             SUBS     R6,R6,#+1
   \      0x790   0xB2F6             UXTB     R6,R6
   \      0x792   0xE7E8             B.N      ??ssl_decrypt_buf_53
   2362                          break;
   2363          
   2364                  /* The loop goes to its end iff the counter is wrapping */
   2365                  if( i == ssl_ep_len( ssl ) )
   2366                  {
   2367                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "incoming message counter would wrap" ) );
   2368                      return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
   2369                  }
   2370              }
   2371          
   2372              MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= decrypt buf" ) );
   \                     ??ssl_decrypt_buf_52: (+1)
   \      0x794   0x....'....        LDR.W    R0,??DataTable22_3
   \      0x798   0x9000             STR      R0,[SP, #+0]
   \      0x79A   0xF640 0x1344      MOVW     R3,#+2372
   \      0x79E   0x4642             MOV      R2,R8
   \      0x7A0   0x2102             MOVS     R1,#+2
   \      0x7A2   0x4628             MOV      R0,R5
   \      0x7A4   0x....'....        BL       mbedtls_debug_print_msg
   2373          
   2374              return( 0 );
   \      0x7A8   0x2000             MOVS     R0,#+0
   \                     ??ssl_decrypt_buf_2: (+1)
   \      0x7AA   0xB015             ADD      SP,SP,#+84
   \      0x7AC   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   \                     ??ssl_decrypt_buf_32: (+1)
   \      0x7B0   0x428A             CMP      R2,R1
   \      0x7B2   0xF47F 0xAEBE      BNE.W    ??ssl_decrypt_buf_35
   \      0x7B6   0x2001             MOVS     R0,#+1
   \      0x7B8   0xE6BC             B.N      ??ssl_decrypt_buf_36
   \                     ??ssl_decrypt_buf_54: (+1)
   \      0x7BA   0x4628             MOV      R0,R5
   \      0x7BC   0x....'....        BL       ssl_ep_len
   \      0x7C0   0x4286             CMP      R6,R0
   \      0x7C2   0xD1E7             BNE.N    ??ssl_decrypt_buf_52
   \      0x7C4   0x....'....        LDR.W    R0,??DataTable22_4
   \      0x7C8   0x9000             STR      R0,[SP, #+0]
   \      0x7CA   0xF640 0x133F      MOVW     R3,#+2367
   \      0x7CE   0x4642             MOV      R2,R8
   \      0x7D0   0x2101             MOVS     R1,#+1
   \      0x7D2   0x4628             MOV      R0,R5
   \      0x7D4   0x....'....        BL       mbedtls_debug_print_msg
   \      0x7D8   0x....'....        LDR.W    R0,??DataTable23  ;; 0xffff9480
   \      0x7DC   0xE7E5             B.N      ??ssl_decrypt_buf_2
   2375          }
   2376          
   2377          #undef MAC_NONE
   2378          #undef MAC_PLAINTEXT
   2379          #undef MAC_CIPHERTEXT
   2380          
   2381          #if defined(MBEDTLS_ZLIB_SUPPORT)
   2382          /*
   2383           * Compression/decompression functions
   2384           */
   2385          static int ssl_compress_buf( mbedtls_ssl_context *ssl )
   2386          {
   2387              int ret;
   2388              unsigned char *msg_post = ssl->out_msg;
   2389              ptrdiff_t bytes_written = ssl->out_msg - ssl->out_buf;
   2390              size_t len_pre = ssl->out_msglen;
   2391              unsigned char *msg_pre = ssl->compress_buf;
   2392          
   2393              MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> compress buf" ) );
   2394          
   2395              if( len_pre == 0 )
   2396                  return( 0 );
   2397          
   2398              memcpy( msg_pre, ssl->out_msg, len_pre );
   2399          
   2400              MBEDTLS_SSL_DEBUG_MSG( 3, ( "before compression: msglen = %d, ",
   2401                             ssl->out_msglen ) );
   2402          
   2403              MBEDTLS_SSL_DEBUG_BUF( 4, "before compression: output payload",
   2404                             ssl->out_msg, ssl->out_msglen );
   2405          
   2406              ssl->transform_out->ctx_deflate.next_in = msg_pre;
   2407              ssl->transform_out->ctx_deflate.avail_in = len_pre;
   2408              ssl->transform_out->ctx_deflate.next_out = msg_post;
   2409              ssl->transform_out->ctx_deflate.avail_out = MBEDTLS_SSL_OUT_BUFFER_LEN - bytes_written;
   2410          
   2411              ret = deflate( &ssl->transform_out->ctx_deflate, Z_SYNC_FLUSH );
   2412              if( ret != Z_OK )
   2413              {
   2414                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "failed to perform compression (%d)", ret ) );
   2415                  return( MBEDTLS_ERR_SSL_COMPRESSION_FAILED );
   2416              }
   2417          
   2418              ssl->out_msglen = MBEDTLS_SSL_OUT_BUFFER_LEN -
   2419                                ssl->transform_out->ctx_deflate.avail_out - bytes_written;
   2420          
   2421              MBEDTLS_SSL_DEBUG_MSG( 3, ( "after compression: msglen = %d, ",
   2422                             ssl->out_msglen ) );
   2423          
   2424              MBEDTLS_SSL_DEBUG_BUF( 4, "after compression: output payload",
   2425                             ssl->out_msg, ssl->out_msglen );
   2426          
   2427              MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= compress buf" ) );
   2428          
   2429              return( 0 );
   2430          }
   2431          
   2432          static int ssl_decompress_buf( mbedtls_ssl_context *ssl )
   2433          {
   2434              int ret;
   2435              unsigned char *msg_post = ssl->in_msg;
   2436              ptrdiff_t header_bytes = ssl->in_msg - ssl->in_buf;
   2437              size_t len_pre = ssl->in_msglen;
   2438              unsigned char *msg_pre = ssl->compress_buf;
   2439          
   2440              MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> decompress buf" ) );
   2441          
   2442              if( len_pre == 0 )
   2443                  return( 0 );
   2444          
   2445              memcpy( msg_pre, ssl->in_msg, len_pre );
   2446          
   2447              MBEDTLS_SSL_DEBUG_MSG( 3, ( "before decompression: msglen = %d, ",
   2448                             ssl->in_msglen ) );
   2449          
   2450              MBEDTLS_SSL_DEBUG_BUF( 4, "before decompression: input payload",
   2451                             ssl->in_msg, ssl->in_msglen );
   2452          
   2453              ssl->transform_in->ctx_inflate.next_in = msg_pre;
   2454              ssl->transform_in->ctx_inflate.avail_in = len_pre;
   2455              ssl->transform_in->ctx_inflate.next_out = msg_post;
   2456              ssl->transform_in->ctx_inflate.avail_out = MBEDTLS_SSL_IN_BUFFER_LEN -
   2457                                                         header_bytes;
   2458          
   2459              ret = inflate( &ssl->transform_in->ctx_inflate, Z_SYNC_FLUSH );
   2460              if( ret != Z_OK )
   2461              {
   2462                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "failed to perform decompression (%d)", ret ) );
   2463                  return( MBEDTLS_ERR_SSL_COMPRESSION_FAILED );
   2464              }
   2465          
   2466              ssl->in_msglen = MBEDTLS_SSL_IN_BUFFER_LEN -
   2467                               ssl->transform_in->ctx_inflate.avail_out - header_bytes;
   2468          
   2469              MBEDTLS_SSL_DEBUG_MSG( 3, ( "after decompression: msglen = %d, ",
   2470                             ssl->in_msglen ) );
   2471          
   2472              MBEDTLS_SSL_DEBUG_BUF( 4, "after decompression: input payload",
   2473                             ssl->in_msg, ssl->in_msglen );
   2474          
   2475              MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= decompress buf" ) );
   2476          
   2477              return( 0 );
   2478          }
   2479          #endif /* MBEDTLS_ZLIB_SUPPORT */
   2480          
   2481          #if defined(MBEDTLS_SSL_SRV_C) && defined(MBEDTLS_SSL_RENEGOTIATION)
   2482          static int ssl_write_hello_request( mbedtls_ssl_context *ssl );
   2483          
   2484          #if defined(MBEDTLS_SSL_PROTO_DTLS)

   \                                 In section .text, align 2, keep-with-next
   2485          static int ssl_resend_hello_request( mbedtls_ssl_context *ssl )
   2486          {
   \                     ssl_resend_hello_request: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   2487              /* If renegotiation is not enforced, retransmit until we would reach max
   2488               * timeout if we were using the usual handshake doubling scheme */
   2489              if( ssl->conf->renego_max_records < 0 )
   \        0x2   0x6801             LDR      R1,[R0, #+0]
   \        0x4   0xF8D1 0x10B4      LDR      R1,[R1, #+180]
   \        0x8   0x2900             CMP      R1,#+0
   \        0xA   0xD520             BPL.N    ??ssl_resend_hello_request_0
   2490              {
   2491                  uint32_t ratio = ssl->conf->hs_timeout_max / ssl->conf->hs_timeout_min + 1;
   \        0xC   0x6801             LDR      R1,[R0, #+0]
   \        0xE   0xF8D1 0x10B0      LDR      R1,[R1, #+176]
   \       0x12   0x6802             LDR      R2,[R0, #+0]
   \       0x14   0xF8D2 0x20AC      LDR      R2,[R2, #+172]
   \       0x18   0xFBB1 0xF1F2      UDIV     R1,R1,R2
   \       0x1C   0x1C49             ADDS     R1,R1,#+1
   2492                  unsigned char doublings = 1;
   \       0x1E   0x2201             MOVS     R2,#+1
   \       0x20   0x2900             CMP      R1,#+0
   \       0x22   0xE001             B.N      ??ssl_resend_hello_request_1
   2493          
   2494                  while( ratio != 0 )
   2495                  {
   2496                      ++doublings;
   \                     ??ssl_resend_hello_request_2: (+1)
   \       0x24   0x1C52             ADDS     R2,R2,#+1
   2497                      ratio >>= 1;
   \       0x26   0x0849             LSRS     R1,R1,#+1
   2498                  }
   \                     ??ssl_resend_hello_request_1: (+1)
   \       0x28   0xD1FC             BNE.N    ??ssl_resend_hello_request_2
   2499          
   2500                  if( ++ssl->renego_records_seen > doublings )
   \       0x2A   0x68C1             LDR      R1,[R0, #+12]
   \       0x2C   0x1C49             ADDS     R1,R1,#+1
   \       0x2E   0x60C1             STR      R1,[R0, #+12]
   \       0x30   0xB2D2             UXTB     R2,R2
   \       0x32   0x428A             CMP      R2,R1
   \       0x34   0xDA0B             BGE.N    ??ssl_resend_hello_request_0
   2501                  {
   2502                      MBEDTLS_SSL_DEBUG_MSG( 2, ( "no longer retransmitting hello request" ) );
   \       0x36   0x....'....        LDR.W    R1,??DataTable22_5
   \       0x3A   0x9100             STR      R1,[SP, #+0]
   \       0x3C   0xF640 0x13C6      MOVW     R3,#+2502
   \       0x40   0x....'....        LDR.W    R2,??DataTable18
   \       0x44   0x2102             MOVS     R1,#+2
   \       0x46   0x....'....        BL       mbedtls_debug_print_msg
   2503                      return( 0 );
   \       0x4A   0x2000             MOVS     R0,#+0
   \       0x4C   0xBD02             POP      {R1,PC}
   2504                  }
   2505              }
   2506          
   2507              return( ssl_write_hello_request( ssl ) );
   \                     ??ssl_resend_hello_request_0: (+1)
   \       0x4E   0xE8BD 0x4002      POP      {R1,LR}
   \       0x52   0x....'....        B.W      ssl_write_hello_request
   2508          }
   2509          #endif
   2510          #endif /* MBEDTLS_SSL_SRV_C && MBEDTLS_SSL_RENEGOTIATION */
   2511          
   2512          /*
   2513           * Fill the input message buffer by appending data to it.
   2514           * The amount of data already fetched is in ssl->in_left.
   2515           *
   2516           * If we return 0, is it guaranteed that (at least) nb_want bytes are
   2517           * available (from this read and/or a previous one). Otherwise, an error code
   2518           * is returned (possibly EOF or WANT_READ).
   2519           *
   2520           * With stream transport (TLS) on success ssl->in_left == nb_want, but
   2521           * with datagram transport (DTLS) on success ssl->in_left >= nb_want,
   2522           * since we always read a whole datagram at once.
   2523           *
   2524           * For DTLS, it is up to the caller to set ssl->next_record_offset when
   2525           * they're done reading a record.
   2526           */

   \                                 In section .text, align 2, keep-with-next
   2527          int mbedtls_ssl_fetch_input( mbedtls_ssl_context *ssl, size_t nb_want )
   2528          {
   \                     mbedtls_ssl_fetch_input: (+1)
   \        0x0   0xE92D 0x43FE      PUSH     {R1-R9,LR}
   \        0x4   0x4605             MOV      R5,R0
   \        0x6   0x4688             MOV      R8,R1
   2529              int ret;
   2530              size_t len;
   2531          
   2532              MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> fetch input" ) );
   \        0x8   0x....'....        LDR.W    R7,??DataTable18
   \        0xC   0x....'....        LDR.W    R0,??DataTable22_6
   \       0x10   0x9000             STR      R0,[SP, #+0]
   \       0x12   0xF640 0x13E4      MOVW     R3,#+2532
   \       0x16   0x463A             MOV      R2,R7
   \       0x18   0x2102             MOVS     R1,#+2
   \       0x1A   0x4628             MOV      R0,R5
   \       0x1C   0x....'....        BL       mbedtls_debug_print_msg
   2533          
   2534              if( ssl->f_recv == NULL && ssl->f_recv_timeout == NULL )
   \       0x20   0x6A28             LDR      R0,[R5, #+32]
   \       0x22   0x2800             CMP      R0,#+0
   \       0x24   0xD10F             BNE.N    ??mbedtls_ssl_fetch_input_0
   \       0x26   0x6A68             LDR      R0,[R5, #+36]
   \       0x28   0x2800             CMP      R0,#+0
   \       0x2A   0xD10C             BNE.N    ??mbedtls_ssl_fetch_input_0
   2535              {
   2536                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
   2537                                      "or mbedtls_ssl_set_bio()" ) );
   \       0x2C   0x....'....        LDR.W    R0,??DataTable23_1
   \       0x30   0x9000             STR      R0,[SP, #+0]
   \       0x32   0xF640 0x13E9      MOVW     R3,#+2537
   \       0x36   0x463A             MOV      R2,R7
   \       0x38   0x2101             MOVS     R1,#+1
   \       0x3A   0x4628             MOV      R0,R5
   \       0x3C   0x....'....        BL       mbedtls_debug_print_msg
   2538                  return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   \       0x40   0x....'....        LDR.W    R0,??DataTable23_2  ;; 0xffff8f00
   \       0x44   0xE142             B.N      ??mbedtls_ssl_fetch_input_1
   2539              }
   2540          
   2541              if( nb_want > MBEDTLS_SSL_IN_BUFFER_LEN - (size_t)( ssl->in_hdr - ssl->in_buf ) )
   \                     ??mbedtls_ssl_fetch_input_0: (+1)
   \       0x46   0xF642 0x144D      MOVW     R4,#+10573
   \       0x4A   0x6E69             LDR      R1,[R5, #+100]
   \       0x4C   0x1A61             SUBS     R1,R4,R1
   \       0x4E   0x6DE8             LDR      R0,[R5, #+92]
   \       0x50   0x1841             ADDS     R1,R0,R1
   \       0x52   0x4541             CMP      R1,R8
   \       0x54   0xD20C             BCS.N    ??mbedtls_ssl_fetch_input_2
   2542              {
   2543                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "requesting more data than fits" ) );
   \       0x56   0x....'....        LDR.W    R0,??DataTable23_3
   \       0x5A   0x9000             STR      R0,[SP, #+0]
   \       0x5C   0xF640 0x13EF      MOVW     R3,#+2543
   \       0x60   0x463A             MOV      R2,R7
   \       0x62   0x2101             MOVS     R1,#+1
   \       0x64   0x4628             MOV      R0,R5
   \       0x66   0x....'....        BL       mbedtls_debug_print_msg
   2544                  return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   \       0x6A   0x....'....        LDR.W    R0,??DataTable23_2  ;; 0xffff8f00
   \       0x6E   0xE12D             B.N      ??mbedtls_ssl_fetch_input_1
   2545              }
   2546          
   2547          #if defined(MBEDTLS_SSL_PROTO_DTLS)
   2548              if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
   \                     ??mbedtls_ssl_fetch_input_2: (+1)
   \       0x70   0x6828             LDR      R0,[R5, #+0]
   \       0x72   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \       0x76   0xF3C0 0x0040      UBFX     R0,R0,#+1,#+1
   \       0x7A   0x2800             CMP      R0,#+0
   \       0x7C   0xF000 0x8128      BEQ.W    ??mbedtls_ssl_fetch_input_3
   2549              {
   2550                  uint32_t timeout;
   2551          
   2552                  /* Just to be sure */
   2553                  if( ssl->f_set_timer == NULL || ssl->f_get_timer == NULL )
   \       0x80   0x6D68             LDR      R0,[R5, #+84]
   \       0x82   0x2800             CMP      R0,#+0
   \       0x84   0xD002             BEQ.N    ??mbedtls_ssl_fetch_input_4
   \       0x86   0x6DA8             LDR      R0,[R5, #+88]
   \       0x88   0x2800             CMP      R0,#+0
   \       0x8A   0xD10C             BNE.N    ??mbedtls_ssl_fetch_input_5
   2554                  {
   2555                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "You must use "
   2556                                  "mbedtls_ssl_set_timer_cb() for DTLS" ) );
   \                     ??mbedtls_ssl_fetch_input_4: (+1)
   \       0x8C   0x....'....        LDR.W    R0,??DataTable23_4
   \       0x90   0x9000             STR      R0,[SP, #+0]
   \       0x92   0xF640 0x13FC      MOVW     R3,#+2556
   \       0x96   0x463A             MOV      R2,R7
   \       0x98   0x2101             MOVS     R1,#+1
   \       0x9A   0x4628             MOV      R0,R5
   \       0x9C   0x....'....        BL       mbedtls_debug_print_msg
   2557                      return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   \       0xA0   0x....'....        LDR.W    R0,??DataTable23_2  ;; 0xffff8f00
   \       0xA4   0xE112             B.N      ??mbedtls_ssl_fetch_input_1
   2558                  }
   2559          
   2560                  /*
   2561                   * The point is, we need to always read a full datagram at once, so we
   2562                   * sometimes read more then requested, and handle the additional data.
   2563                   * It could be the rest of the current record (while fetching the
   2564                   * header) and/or some other records in the same datagram.
   2565                   */
   2566          
   2567                  /*
   2568                   * Move to the next record in the already read datagram if applicable
   2569                   */
   2570                  if( ssl->next_record_offset != 0 )
   \                     ??mbedtls_ssl_fetch_input_5: (+1)
   \       0xA6   0xF8D5 0x0088      LDR      R0,[R5, #+136]
   \       0xAA   0x2800             CMP      R0,#+0
   \       0xAC   0xD02E             BEQ.N    ??mbedtls_ssl_fetch_input_6
   2571                  {
   2572                      if( ssl->in_left < ssl->next_record_offset )
   \       0xAE   0xF8D5 0x0080      LDR      R0,[R5, #+128]
   \       0xB2   0xF8D5 0x1088      LDR      R1,[R5, #+136]
   \       0xB6   0x4288             CMP      R0,R1
   \       0xB8   0xD20B             BCS.N    ??mbedtls_ssl_fetch_input_7
   2573                      {
   2574                          MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
   \       0xBA   0x....             LDR.N    R0,??DataTable17_2
   \       0xBC   0x9000             STR      R0,[SP, #+0]
   \       0xBE   0xF640 0x230E      MOVW     R3,#+2574
   \       0xC2   0x463A             MOV      R2,R7
   \       0xC4   0x2101             MOVS     R1,#+1
   \       0xC6   0x4628             MOV      R0,R5
   \       0xC8   0x....'....        BL       mbedtls_debug_print_msg
   2575                          return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   \       0xCC   0x....'....        LDR.W    R0,??DataTable18_1  ;; 0xffff9400
   \       0xD0   0xE0FC             B.N      ??mbedtls_ssl_fetch_input_1
   2576                      }
   2577          
   2578                      ssl->in_left -= ssl->next_record_offset;
   \                     ??mbedtls_ssl_fetch_input_7: (+1)
   \       0xD2   0x4601             MOV      R1,R0
   \       0xD4   0xF8D5 0x0088      LDR      R0,[R5, #+136]
   \       0xD8   0x1A09             SUBS     R1,R1,R0
   \       0xDA   0xF8C5 0x1080      STR      R1,[R5, #+128]
   2579          
   2580                      if( ssl->in_left != 0 )
   \       0xDE   0xD012             BEQ.N    ??mbedtls_ssl_fetch_input_8
   2581                      {
   2582                          MBEDTLS_SSL_DEBUG_MSG( 2, ( "next record in same datagram, offset: %d",
   2583                                              ssl->next_record_offset ) );
   \       0xE0   0x9001             STR      R0,[SP, #+4]
   \       0xE2   0x....'....        LDR.W    R0,??DataTable23_5
   \       0xE6   0x9000             STR      R0,[SP, #+0]
   \       0xE8   0xF640 0x2317      MOVW     R3,#+2583
   \       0xEC   0x463A             MOV      R2,R7
   \       0xEE   0x2102             MOVS     R1,#+2
   \       0xF0   0x4628             MOV      R0,R5
   \       0xF2   0x....'....        BL       mbedtls_debug_print_msg
   2584                          memmove( ssl->in_hdr,
   2585                                   ssl->in_hdr + ssl->next_record_offset,
   2586                                   ssl->in_left );
   \       0xF6   0xF8D5 0x2080      LDR      R2,[R5, #+128]
   \       0xFA   0x6E68             LDR      R0,[R5, #+100]
   \       0xFC   0xF8D5 0x1088      LDR      R1,[R5, #+136]
   \      0x100   0x4401             ADD      R1,R0,R1
   \      0x102   0x....'....        BL       __aeabi_memmove
   2587                      }
   2588          
   2589                      ssl->next_record_offset = 0;
   \                     ??mbedtls_ssl_fetch_input_8: (+1)
   \      0x106   0x2000             MOVS     R0,#+0
   \      0x108   0xF8C5 0x0088      STR      R0,[R5, #+136]
   2590                  }
   2591          
   2592                  MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
   2593                                 ssl->in_left, nb_want ) );
   \                     ??mbedtls_ssl_fetch_input_6: (+1)
   \      0x10C   0xF8CD 0x8008      STR      R8,[SP, #+8]
   \      0x110   0xF8D5 0x0080      LDR      R0,[R5, #+128]
   \      0x114   0x9001             STR      R0,[SP, #+4]
   \      0x116   0x....'....        LDR.W    R0,??DataTable23_6
   \      0x11A   0x9000             STR      R0,[SP, #+0]
   \      0x11C   0xF640 0x2321      MOVW     R3,#+2593
   \      0x120   0x463A             MOV      R2,R7
   \      0x122   0x2102             MOVS     R1,#+2
   \      0x124   0x4628             MOV      R0,R5
   \      0x126   0x....'....        BL       mbedtls_debug_print_msg
   2594          
   2595                  /*
   2596                   * Done if we already have enough data.
   2597                   */
   2598                  if( nb_want <= ssl->in_left)
   \      0x12A   0xF8D5 0x0080      LDR      R0,[R5, #+128]
   \      0x12E   0x4540             CMP      R0,R8
   \      0x130   0xD30B             BCC.N    ??mbedtls_ssl_fetch_input_9
   2599                  {
   2600                      MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= fetch input" ) );
   \      0x132   0x....'....        LDR.W    R0,??DataTable23_7
   \      0x136   0x9000             STR      R0,[SP, #+0]
   \      0x138   0xF640 0x2328      MOVW     R3,#+2600
   \      0x13C   0x463A             MOV      R2,R7
   \      0x13E   0x2102             MOVS     R1,#+2
   \      0x140   0x4628             MOV      R0,R5
   \      0x142   0x....'....        BL       mbedtls_debug_print_msg
   2601                      return( 0 );
   \      0x146   0x2000             MOVS     R0,#+0
   \      0x148   0xE0C0             B.N      ??mbedtls_ssl_fetch_input_1
   2602                  }
   2603          
   2604                  /*
   2605                   * A record can't be split accross datagrams. If we need to read but
   2606                   * are not at the beginning of a new record, the caller did something
   2607                   * wrong.
   2608                   */
   2609                  if( ssl->in_left != 0 )
   \                     ??mbedtls_ssl_fetch_input_9: (+1)
   \      0x14A   0x2800             CMP      R0,#+0
   \      0x14C   0xD00B             BEQ.N    ??mbedtls_ssl_fetch_input_10
   2610                  {
   2611                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
   \      0x14E   0x....             LDR.N    R0,??DataTable17_2
   \      0x150   0x9000             STR      R0,[SP, #+0]
   \      0x152   0xF640 0x2333      MOVW     R3,#+2611
   \      0x156   0x463A             MOV      R2,R7
   \      0x158   0x2101             MOVS     R1,#+1
   \      0x15A   0x4628             MOV      R0,R5
   \      0x15C   0x....'....        BL       mbedtls_debug_print_msg
   2612                      return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   \      0x160   0x....'....        LDR.W    R0,??DataTable18_1  ;; 0xffff9400
   \      0x164   0xE0B2             B.N      ??mbedtls_ssl_fetch_input_1
   2613                  }
   2614          
   2615                  /*
   2616                   * Don't even try to read if time's out already.
   2617                   * This avoids by-passing the timer when repeatedly receiving messages
   2618                   * that will end up being dropped.
   2619                   */
   2620                  if( ssl_check_timer( ssl ) != 0 )
   \                     ??mbedtls_ssl_fetch_input_10: (+1)
   \      0x166   0x4628             MOV      R0,R5
   \      0x168   0x....'....        BL       ssl_check_timer
   \      0x16C   0x2800             CMP      R0,#+0
   \      0x16E   0xD00C             BEQ.N    ??mbedtls_ssl_fetch_input_11
   2621                  {
   2622                      MBEDTLS_SSL_DEBUG_MSG( 2, ( "timer has expired" ) );
   \      0x170   0x....'....        LDR.W    R0,??DataTable23_8
   \      0x174   0x9000             STR      R0,[SP, #+0]
   \      0x176   0xF640 0x233E      MOVW     R3,#+2622
   \      0x17A   0x463A             MOV      R2,R7
   \      0x17C   0x2102             MOVS     R1,#+2
   \      0x17E   0x4628             MOV      R0,R5
   \      0x180   0x....'....        BL       mbedtls_debug_print_msg
   2623                      ret = MBEDTLS_ERR_SSL_TIMEOUT;
   \      0x184   0x....'....        LDR.W    R4,??DataTable23_9  ;; 0xffff9800
   \      0x188   0xE037             B.N      ??mbedtls_ssl_fetch_input_12
   2624                  }
   2625                  else
   2626                  {
   2627                      len = MBEDTLS_SSL_IN_BUFFER_LEN - ( ssl->in_hdr - ssl->in_buf );
   \                     ??mbedtls_ssl_fetch_input_11: (+1)
   \      0x18A   0x6E68             LDR      R0,[R5, #+100]
   \      0x18C   0x1A24             SUBS     R4,R4,R0
   \      0x18E   0x6DE8             LDR      R0,[R5, #+92]
   \      0x190   0x1904             ADDS     R4,R0,R4
   2628          
   2629                      if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
   \      0x192   0x6868             LDR      R0,[R5, #+4]
   \      0x194   0x2810             CMP      R0,#+16
   \      0x196   0xD003             BEQ.N    ??mbedtls_ssl_fetch_input_13
   2630                          timeout = ssl->handshake->retransmit_timeout;
   \      0x198   0x6BE8             LDR      R0,[R5, #+60]
   \      0x19A   0xF8D0 0x61E4      LDR      R6,[R0, #+484]
   \      0x19E   0xE002             B.N      ??mbedtls_ssl_fetch_input_14
   2631                      else
   2632                          timeout = ssl->conf->read_timeout;
   \                     ??mbedtls_ssl_fetch_input_13: (+1)
   \      0x1A0   0x6828             LDR      R0,[R5, #+0]
   \      0x1A2   0xF8D0 0x60A8      LDR      R6,[R0, #+168]
   2633          
   2634                      MBEDTLS_SSL_DEBUG_MSG( 3, ( "f_recv_timeout: %u ms", timeout ) );
   \                     ??mbedtls_ssl_fetch_input_14: (+1)
   \      0x1A6   0x9601             STR      R6,[SP, #+4]
   \      0x1A8   0x....'....        LDR.W    R0,??DataTable23_10
   \      0x1AC   0x9000             STR      R0,[SP, #+0]
   \      0x1AE   0xF640 0x234A      MOVW     R3,#+2634
   \      0x1B2   0x463A             MOV      R2,R7
   \      0x1B4   0x2103             MOVS     R1,#+3
   \      0x1B6   0x4628             MOV      R0,R5
   \      0x1B8   0x....'....        BL       mbedtls_debug_print_msg
   2635          
   2636                      if( ssl->f_recv_timeout != NULL )
   \      0x1BC   0x6A68             LDR      R0,[R5, #+36]
   \      0x1BE   0x2800             CMP      R0,#+0
   \      0x1C0   0xD007             BEQ.N    ??mbedtls_ssl_fetch_input_15
   2637                          ret = ssl->f_recv_timeout( ssl->p_bio, ssl->in_hdr, len,
   2638                                                                              timeout );
   \      0x1C2   0x4633             MOV      R3,R6
   \      0x1C4   0x4622             MOV      R2,R4
   \      0x1C6   0x6E69             LDR      R1,[R5, #+100]
   \      0x1C8   0x6AA8             LDR      R0,[R5, #+40]
   \      0x1CA   0x6A6C             LDR      R4,[R5, #+36]
   \      0x1CC   0x47A0             BLX      R4
   \      0x1CE   0x4604             MOV      R4,R0
   \      0x1D0   0xE005             B.N      ??mbedtls_ssl_fetch_input_16
   2639                      else
   2640                          ret = ssl->f_recv( ssl->p_bio, ssl->in_hdr, len );
   \                     ??mbedtls_ssl_fetch_input_15: (+1)
   \      0x1D2   0x4622             MOV      R2,R4
   \      0x1D4   0x6E69             LDR      R1,[R5, #+100]
   \      0x1D6   0x6AA8             LDR      R0,[R5, #+40]
   \      0x1D8   0x6A2B             LDR      R3,[R5, #+32]
   \      0x1DA   0x4798             BLX      R3
   \      0x1DC   0x4604             MOV      R4,R0
   2641          
   2642                      MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_recv(_timeout)", ret );
   \                     ??mbedtls_ssl_fetch_input_16: (+1)
   \      0x1DE   0x9401             STR      R4,[SP, #+4]
   \      0x1E0   0x....'....        LDR.W    R0,??DataTable23_11
   \      0x1E4   0x9000             STR      R0,[SP, #+0]
   \      0x1E6   0xF640 0x2352      MOVW     R3,#+2642
   \      0x1EA   0x463A             MOV      R2,R7
   \      0x1EC   0x2102             MOVS     R1,#+2
   \      0x1EE   0x4628             MOV      R0,R5
   \      0x1F0   0x....'....        BL       mbedtls_debug_print_ret
   2643          
   2644                      if( ret == 0 )
   \      0x1F4   0x2C00             CMP      R4,#+0
   \      0x1F6   0xF000 0x80C7      BEQ.W    ??mbedtls_ssl_fetch_input_17
   2645                          return( MBEDTLS_ERR_SSL_CONN_EOF );
   2646                  }
   2647          
   2648                  if( ret == MBEDTLS_ERR_SSL_TIMEOUT )
   \                     ??mbedtls_ssl_fetch_input_12: (+1)
   \      0x1FA   0x....'....        LDR.W    R6,??DataTable23_9  ;; 0xffff9800
   \      0x1FE   0x42B4             CMP      R4,R6
   \      0x200   0xD153             BNE.N    ??mbedtls_ssl_fetch_input_18
   2649                  {
   2650                      MBEDTLS_SSL_DEBUG_MSG( 2, ( "timeout" ) );
   \      0x202   0x....'....        LDR.W    R0,??DataTable23_12
   \      0x206   0x9000             STR      R0,[SP, #+0]
   \      0x208   0xF640 0x235A      MOVW     R3,#+2650
   \      0x20C   0x463A             MOV      R2,R7
   \      0x20E   0x2102             MOVS     R1,#+2
   \      0x210   0x4628             MOV      R0,R5
   \      0x212   0x....'....        BL       mbedtls_debug_print_msg
   2651                      ssl_set_timer( ssl, 0 );
   \      0x216   0x2100             MOVS     R1,#+0
   \      0x218   0x4628             MOV      R0,R5
   \      0x21A   0x....'....        BL       ssl_set_timer
   2652          
   2653                      if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
   \      0x21E   0x6868             LDR      R0,[R5, #+4]
   \      0x220   0x2810             CMP      R0,#+16
   \      0x222   0xD025             BEQ.N    ??mbedtls_ssl_fetch_input_19
   2654                      {
   2655                          if( ssl_double_retransmit_timeout( ssl ) != 0 )
   \      0x224   0x4628             MOV      R0,R5
   \      0x226   0x....'....        BL       ssl_double_retransmit_timeout
   \      0x22A   0x2800             CMP      R0,#+0
   \      0x22C   0xD00B             BEQ.N    ??mbedtls_ssl_fetch_input_20
   2656                          {
   2657                              MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake timeout" ) );
   \      0x22E   0x....'....        LDR.W    R0,??DataTable23_13
   \      0x232   0x9000             STR      R0,[SP, #+0]
   \      0x234   0xF640 0x2361      MOVW     R3,#+2657
   \      0x238   0x463A             MOV      R2,R7
   \      0x23A   0x2101             MOVS     R1,#+1
   \      0x23C   0x4628             MOV      R0,R5
   \      0x23E   0x....'....        BL       mbedtls_debug_print_msg
   2658                              return( MBEDTLS_ERR_SSL_TIMEOUT );
   \      0x242   0x4630             MOV      R0,R6
   \      0x244   0xE042             B.N      ??mbedtls_ssl_fetch_input_1
   2659                          }
   2660          
   2661                          if( ( ret = mbedtls_ssl_resend( ssl ) ) != 0 )
   \                     ??mbedtls_ssl_fetch_input_20: (+1)
   \      0x246   0x4628             MOV      R0,R5
   \      0x248   0x....'....        BL       mbedtls_ssl_resend
   \      0x24C   0x0004             MOVS     R4,R0
   \      0x24E   0xD00C             BEQ.N    ??mbedtls_ssl_fetch_input_21
   2662                          {
   2663                              MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_resend", ret );
   \      0x250   0x9401             STR      R4,[SP, #+4]
   \      0x252   0x....'....        LDR.W    R0,??DataTable23_14
   \      0x256   0x9000             STR      R0,[SP, #+0]
   \      0x258   0xF640 0x2367      MOVW     R3,#+2663
   \      0x25C   0x463A             MOV      R2,R7
   \      0x25E   0x2101             MOVS     R1,#+1
   \      0x260   0x4628             MOV      R0,R5
   \      0x262   0x....'....        BL       mbedtls_debug_print_ret
   2664                              return( ret );
   \      0x266   0x4620             MOV      R0,R4
   \      0x268   0xE030             B.N      ??mbedtls_ssl_fetch_input_1
   2665                          }
   2666          
   2667                          return( MBEDTLS_ERR_SSL_WANT_READ );
   \                     ??mbedtls_ssl_fetch_input_21: (+1)
   \      0x26A   0x....'....        LDR.W    R0,??DataTable23_15  ;; 0xffff9700
   \      0x26E   0xE02D             B.N      ??mbedtls_ssl_fetch_input_1
   2668                      }
   2669          #if defined(MBEDTLS_SSL_SRV_C) && defined(MBEDTLS_SSL_RENEGOTIATION)
   2670                      else if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER &&
   2671                               ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_PENDING )
   \                     ??mbedtls_ssl_fetch_input_19: (+1)
   \      0x270   0x6828             LDR      R0,[R5, #+0]
   \      0x272   0xF890 0x00CC      LDRB     R0,[R0, #+204]
   \      0x276   0x07C0             LSLS     R0,R0,#+31
   \      0x278   0xD517             BPL.N    ??mbedtls_ssl_fetch_input_18
   \      0x27A   0x68A8             LDR      R0,[R5, #+8]
   \      0x27C   0x2803             CMP      R0,#+3
   \      0x27E   0xD114             BNE.N    ??mbedtls_ssl_fetch_input_18
   2672                      {
   2673                          if( ( ret = ssl_resend_hello_request( ssl ) ) != 0 )
   \      0x280   0x4628             MOV      R0,R5
   \      0x282   0x....'....        BL       ssl_resend_hello_request
   \      0x286   0x0004             MOVS     R4,R0
   \      0x288   0xD00C             BEQ.N    ??mbedtls_ssl_fetch_input_22
   2674                          {
   2675                              MBEDTLS_SSL_DEBUG_RET( 1, "ssl_resend_hello_request", ret );
   \      0x28A   0x9401             STR      R4,[SP, #+4]
   \      0x28C   0x....'....        LDR.W    R0,??DataTable24
   \      0x290   0x9000             STR      R0,[SP, #+0]
   \      0x292   0xF640 0x2373      MOVW     R3,#+2675
   \      0x296   0x463A             MOV      R2,R7
   \      0x298   0x2101             MOVS     R1,#+1
   \      0x29A   0x4628             MOV      R0,R5
   \      0x29C   0x....'....        BL       mbedtls_debug_print_ret
   2676                              return( ret );
   \      0x2A0   0x4620             MOV      R0,R4
   \      0x2A2   0xE013             B.N      ??mbedtls_ssl_fetch_input_1
   2677                          }
   2678          
   2679                          return( MBEDTLS_ERR_SSL_WANT_READ );
   \                     ??mbedtls_ssl_fetch_input_22: (+1)
   \      0x2A4   0x....'....        LDR.W    R0,??DataTable23_15  ;; 0xffff9700
   \      0x2A8   0xE010             B.N      ??mbedtls_ssl_fetch_input_1
   2680                      }
   2681          #endif /* MBEDTLS_SSL_SRV_C && MBEDTLS_SSL_RENEGOTIATION */
   2682                  }
   2683          
   2684                  if( ret < 0 )
   \                     ??mbedtls_ssl_fetch_input_18: (+1)
   \      0x2AA   0x2C00             CMP      R4,#+0
   \      0x2AC   0xD501             BPL.N    ??mbedtls_ssl_fetch_input_23
   2685                      return( ret );
   \      0x2AE   0x4620             MOV      R0,R4
   \      0x2B0   0xE00C             B.N      ??mbedtls_ssl_fetch_input_1
   2686          
   2687                  ssl->in_left = ret;
   \                     ??mbedtls_ssl_fetch_input_23: (+1)
   \      0x2B2   0xF8C5 0x4080      STR      R4,[R5, #+128]
   2688              }
   2689              else
   2690          #endif
   2691              {
   2692                  MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
   2693                                 ssl->in_left, nb_want ) );
   2694          
   2695                  while( ssl->in_left < nb_want )
   2696                  {
   2697                      len = nb_want - ssl->in_left;
   2698          
   2699                      if( ssl_check_timer( ssl ) != 0 )
   2700                          ret = MBEDTLS_ERR_SSL_TIMEOUT;
   2701                      else
   2702                      {
   2703                          if( ssl->f_recv_timeout != NULL )
   2704                          {
   2705                              ret = ssl->f_recv_timeout( ssl->p_bio,
   2706                                                         ssl->in_hdr + ssl->in_left, len,
   2707                                                         ssl->conf->read_timeout );
   2708                          }
   2709                          else
   2710                          {
   2711                              ret = ssl->f_recv( ssl->p_bio,
   2712                                                 ssl->in_hdr + ssl->in_left, len );
   2713                          }
   2714                      }
   2715          
   2716                      MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
   2717                                                  ssl->in_left, nb_want ) );
   2718                      MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_recv(_timeout)", ret );
   2719          
   2720                      if( ret == 0 )
   2721                          return( MBEDTLS_ERR_SSL_CONN_EOF );
   2722          
   2723                      if( ret < 0 )
   2724                          return( ret );
   2725          
   2726                      if ( (size_t)ret > len || ( INT_MAX > SIZE_MAX && ret > SIZE_MAX ) )
   2727                      {
   2728                          MBEDTLS_SSL_DEBUG_MSG( 1,
   2729                              ( "f_recv returned %d bytes but only %lu were requested",
   2730                              ret, (unsigned long)len ) );
   2731                          return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   2732                      }
   2733          
   2734                      ssl->in_left += ret;
   2735                  }
   2736              }
   2737          
   2738              MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= fetch input" ) );
   \                     ??mbedtls_ssl_fetch_input_24: (+1)
   \      0x2B6   0x....'....        LDR.W    R0,??DataTable23_7
   \      0x2BA   0x9000             STR      R0,[SP, #+0]
   \      0x2BC   0xF640 0x23B2      MOVW     R3,#+2738
   \      0x2C0   0x463A             MOV      R2,R7
   \      0x2C2   0x2102             MOVS     R1,#+2
   \      0x2C4   0x4628             MOV      R0,R5
   \      0x2C6   0x....'....        BL       mbedtls_debug_print_msg
   2739          
   2740              return( 0 );
   \      0x2CA   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_ssl_fetch_input_1: (+1)
   \      0x2CC   0xE8BD 0x83FE      POP      {R1-R9,PC}       ;; return
   \                     ??mbedtls_ssl_fetch_input_3: (+1)
   \      0x2D0   0x....'....        LDR.W    R9,??DataTable23_6
   \      0x2D4   0xF8CD 0x8008      STR      R8,[SP, #+8]
   \      0x2D8   0xF8D5 0x0080      LDR      R0,[R5, #+128]
   \      0x2DC   0x9001             STR      R0,[SP, #+4]
   \      0x2DE   0xF8CD 0x9000      STR      R9,[SP, #+0]
   \      0x2E2   0xF640 0x2385      MOVW     R3,#+2693
   \      0x2E6   0x463A             MOV      R2,R7
   \      0x2E8   0x2102             MOVS     R1,#+2
   \      0x2EA   0x4628             MOV      R0,R5
   \      0x2EC   0x....'....        BL       mbedtls_debug_print_msg
   \      0x2F0   0xE007             B.N      ??mbedtls_ssl_fetch_input_25
   \                     ??mbedtls_ssl_fetch_input_26: (+1)
   \      0x2F2   0xD44C             BMI.N    ??mbedtls_ssl_fetch_input_27
   \      0x2F4   0x42A6             CMP      R6,R4
   \      0x2F6   0xD34C             BCC.N    ??mbedtls_ssl_fetch_input_28
   \      0x2F8   0xF8D5 0x0080      LDR      R0,[R5, #+128]
   \      0x2FC   0x1824             ADDS     R4,R4,R0
   \      0x2FE   0xF8C5 0x4080      STR      R4,[R5, #+128]
   \                     ??mbedtls_ssl_fetch_input_25: (+1)
   \      0x302   0xF8D5 0x0080      LDR      R0,[R5, #+128]
   \      0x306   0x4540             CMP      R0,R8
   \      0x308   0xD2D5             BCS.N    ??mbedtls_ssl_fetch_input_24
   \      0x30A   0x4606             MOV      R6,R0
   \      0x30C   0xEBA8 0x0606      SUB      R6,R8,R6
   \      0x310   0x4628             MOV      R0,R5
   \      0x312   0x....'....        BL       ssl_check_timer
   \      0x316   0x2800             CMP      R0,#+0
   \      0x318   0xD002             BEQ.N    ??mbedtls_ssl_fetch_input_29
   \      0x31A   0x....'....        LDR.W    R4,??DataTable23_9  ;; 0xffff9800
   \      0x31E   0xE018             B.N      ??mbedtls_ssl_fetch_input_30
   \                     ??mbedtls_ssl_fetch_input_29: (+1)
   \      0x320   0x6A68             LDR      R0,[R5, #+36]
   \      0x322   0x2800             CMP      R0,#+0
   \      0x324   0xD00C             BEQ.N    ??mbedtls_ssl_fetch_input_31
   \      0x326   0x6828             LDR      R0,[R5, #+0]
   \      0x328   0xF8D0 0x30A8      LDR      R3,[R0, #+168]
   \      0x32C   0x4632             MOV      R2,R6
   \      0x32E   0x6E68             LDR      R0,[R5, #+100]
   \      0x330   0xF8D5 0x1080      LDR      R1,[R5, #+128]
   \      0x334   0x4401             ADD      R1,R0,R1
   \      0x336   0x6AA8             LDR      R0,[R5, #+40]
   \      0x338   0x6A6C             LDR      R4,[R5, #+36]
   \      0x33A   0x47A0             BLX      R4
   \      0x33C   0x4604             MOV      R4,R0
   \      0x33E   0xE008             B.N      ??mbedtls_ssl_fetch_input_30
   \                     ??mbedtls_ssl_fetch_input_31: (+1)
   \      0x340   0x4632             MOV      R2,R6
   \      0x342   0x6E68             LDR      R0,[R5, #+100]
   \      0x344   0xF8D5 0x1080      LDR      R1,[R5, #+128]
   \      0x348   0x4401             ADD      R1,R0,R1
   \      0x34A   0x6AA8             LDR      R0,[R5, #+40]
   \      0x34C   0x6A2B             LDR      R3,[R5, #+32]
   \      0x34E   0x4798             BLX      R3
   \      0x350   0x4604             MOV      R4,R0
   \                     ??mbedtls_ssl_fetch_input_30: (+1)
   \      0x352   0xF8CD 0x8008      STR      R8,[SP, #+8]
   \      0x356   0xF8D5 0x0080      LDR      R0,[R5, #+128]
   \      0x35A   0x9001             STR      R0,[SP, #+4]
   \      0x35C   0xF8CD 0x9000      STR      R9,[SP, #+0]
   \      0x360   0xF640 0x239D      MOVW     R3,#+2717
   \      0x364   0x463A             MOV      R2,R7
   \      0x366   0x2102             MOVS     R1,#+2
   \      0x368   0x4628             MOV      R0,R5
   \      0x36A   0x....'....        BL       mbedtls_debug_print_msg
   \      0x36E   0x9401             STR      R4,[SP, #+4]
   \      0x370   0x....'....        LDR.W    R0,??DataTable23_11
   \      0x374   0x9000             STR      R0,[SP, #+0]
   \      0x376   0xF640 0x239E      MOVW     R3,#+2718
   \      0x37A   0x463A             MOV      R2,R7
   \      0x37C   0x2102             MOVS     R1,#+2
   \      0x37E   0x4628             MOV      R0,R5
   \      0x380   0x....'....        BL       mbedtls_debug_print_ret
   \      0x384   0x2C00             CMP      R4,#+0
   \      0x386   0xD1B4             BNE.N    ??mbedtls_ssl_fetch_input_26
   \                     ??mbedtls_ssl_fetch_input_17: (+1)
   \      0x388   0x....'....        LDR.W    R0,??DataTable25  ;; 0xffff8d80
   \      0x38C   0xE79E             B.N      ??mbedtls_ssl_fetch_input_1
   \                     ??mbedtls_ssl_fetch_input_27: (+1)
   \      0x38E   0x4620             MOV      R0,R4
   \      0x390   0xE79C             B.N      ??mbedtls_ssl_fetch_input_1
   \                     ??mbedtls_ssl_fetch_input_28: (+1)
   \      0x392   0x9602             STR      R6,[SP, #+8]
   \      0x394   0x9401             STR      R4,[SP, #+4]
   \      0x396   0x....'....        LDR.W    R0,??DataTable25_1
   \      0x39A   0x9000             STR      R0,[SP, #+0]
   \      0x39C   0xF640 0x23AA      MOVW     R3,#+2730
   \      0x3A0   0x463A             MOV      R2,R7
   \      0x3A2   0x2101             MOVS     R1,#+1
   \      0x3A4   0x4628             MOV      R0,R5
   \      0x3A6   0x....'....        BL       mbedtls_debug_print_msg
   \      0x3AA   0x....             LDR.N    R0,??DataTable18_1  ;; 0xffff9400
   \      0x3AC   0xE78E             B.N      ??mbedtls_ssl_fetch_input_1
   2741          }
   2742          
   2743          /*
   2744           * Flush any data not yet written
   2745           */

   \                                 In section .text, align 2, keep-with-next
   2746          int mbedtls_ssl_flush_output( mbedtls_ssl_context *ssl )
   2747          {
   \                     mbedtls_ssl_flush_output: (+1)
   \        0x0   0xB57F             PUSH     {R0-R6,LR}
   \        0x2   0x4604             MOV      R4,R0
   2748              int ret;
   2749              unsigned char *buf;
   2750          
   2751              MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> flush output" ) );
   \        0x4   0x....             LDR.N    R5,??DataTable18
   \        0x6   0x....'....        LDR.W    R0,??DataTable25_2
   \        0xA   0x9000             STR      R0,[SP, #+0]
   \        0xC   0xF640 0x23BF      MOVW     R3,#+2751
   \       0x10   0x462A             MOV      R2,R5
   \       0x12   0x2102             MOVS     R1,#+2
   \       0x14   0x4620             MOV      R0,R4
   \       0x16   0x....'....        BL       mbedtls_debug_print_msg
   2752          
   2753              if( ssl->f_send == NULL )
   \       0x1A   0x69E0             LDR      R0,[R4, #+28]
   \       0x1C   0x2800             CMP      R0,#+0
   \       0x1E   0xD10C             BNE.N    ??mbedtls_ssl_flush_output_0
   2754              {
   2755                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
   2756                                      "or mbedtls_ssl_set_bio()" ) );
   \       0x20   0x....'....        LDR.W    R0,??DataTable23_1
   \       0x24   0x9000             STR      R0,[SP, #+0]
   \       0x26   0xF640 0x23C4      MOVW     R3,#+2756
   \       0x2A   0x462A             MOV      R2,R5
   \       0x2C   0x2101             MOVS     R1,#+1
   \       0x2E   0x4620             MOV      R0,R4
   \       0x30   0x....'....        BL       mbedtls_debug_print_msg
   2757                  return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   \       0x34   0x....'....        LDR.W    R0,??DataTable23_2  ;; 0xffff8f00
   \       0x38   0xE068             B.N      ??mbedtls_ssl_flush_output_1
   2758              }
   2759          
   2760              /* Avoid incrementing counter if data is flushed */
   2761              if( ssl->out_left == 0 )
   \                     ??mbedtls_ssl_flush_output_0: (+1)
   \       0x3A   0xF8D4 0x00D0      LDR      R0,[R4, #+208]
   \       0x3E   0x2800             CMP      R0,#+0
   \       0x40   0xD112             BNE.N    ??mbedtls_ssl_flush_output_2
   2762              {
   2763                  MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );
   \       0x42   0x....'....        LDR.W    R0,??DataTable25_3
   \       0x46   0x9000             STR      R0,[SP, #+0]
   \       0x48   0xF640 0x23CB      MOVW     R3,#+2763
   \       0x4C   0x462A             MOV      R2,R5
   \       0x4E   0x2102             MOVS     R1,#+2
   \       0x50   0x4620             MOV      R0,R4
   \       0x52   0x....'....        BL       mbedtls_debug_print_msg
   2764                  return( 0 );
   \       0x56   0x2000             MOVS     R0,#+0
   \       0x58   0xE058             B.N      ??mbedtls_ssl_flush_output_1
   2765              }
   2766          
   2767              while( ssl->out_left > 0 )
   2768              {
   2769                  MBEDTLS_SSL_DEBUG_MSG( 2, ( "message length: %d, out_left: %d",
   2770                                 mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen, ssl->out_left ) );
   2771          
   2772                  buf = ssl->out_hdr - ssl->out_left;
   2773                  ret = ssl->f_send( ssl->p_bio, buf, ssl->out_left );
   2774          
   2775                  MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_send", ret );
   2776          
   2777                  if( ret <= 0 )
   2778                      return( ret );
   2779          
   2780                  if( (size_t)ret > ssl->out_left || ( INT_MAX > SIZE_MAX && ret > SIZE_MAX ) )
   \                     ??mbedtls_ssl_flush_output_3: (+1)
   \       0x5A   0xF8D4 0x00D0      LDR      R0,[R4, #+208]
   \       0x5E   0x42B0             CMP      R0,R6
   \       0x60   0xD334             BCC.N    ??mbedtls_ssl_flush_output_4
   2781                  {
   2782                      MBEDTLS_SSL_DEBUG_MSG( 1,
   2783                          ( "f_send returned %d bytes but only %lu bytes were sent",
   2784                          ret, (unsigned long)ssl->out_left ) );
   2785                      return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   2786                  }
   2787          
   2788                  ssl->out_left -= ret;
   \       0x62   0x1B86             SUBS     R6,R0,R6
   \       0x64   0xF8C4 0x60D0      STR      R6,[R4, #+208]
   \                     ??mbedtls_ssl_flush_output_2: (+1)
   \       0x68   0xF8D4 0x00D0      LDR      R0,[R4, #+208]
   \       0x6C   0x2800             CMP      R0,#+0
   \       0x6E   0xD04F             BEQ.N    ??mbedtls_ssl_flush_output_5
   \       0x70   0x4620             MOV      R0,R4
   \       0x72   0x....'....        BL       mbedtls_ssl_hdr_len
   \       0x76   0xF8D4 0x10D0      LDR      R1,[R4, #+208]
   \       0x7A   0x9102             STR      R1,[SP, #+8]
   \       0x7C   0xF8D4 0x10CC      LDR      R1,[R4, #+204]
   \       0x80   0x1808             ADDS     R0,R1,R0
   \       0x82   0x9001             STR      R0,[SP, #+4]
   \       0x84   0x....'....        LDR.W    R0,??DataTable25_4
   \       0x88   0x9000             STR      R0,[SP, #+0]
   \       0x8A   0xF640 0x23D2      MOVW     R3,#+2770
   \       0x8E   0x462A             MOV      R2,R5
   \       0x90   0x2102             MOVS     R1,#+2
   \       0x92   0x4620             MOV      R0,R4
   \       0x94   0x....'....        BL       mbedtls_debug_print_msg
   \       0x98   0xF8D4 0x20D0      LDR      R2,[R4, #+208]
   \       0x9C   0xF8D4 0x00B8      LDR      R0,[R4, #+184]
   \       0xA0   0x4611             MOV      R1,R2
   \       0xA2   0x4249             RSBS     R1,R1,#+0
   \       0xA4   0x4401             ADD      R1,R0,R1
   \       0xA6   0x6AA0             LDR      R0,[R4, #+40]
   \       0xA8   0x69E3             LDR      R3,[R4, #+28]
   \       0xAA   0x4798             BLX      R3
   \       0xAC   0x4606             MOV      R6,R0
   \       0xAE   0x9601             STR      R6,[SP, #+4]
   \       0xB0   0x....'....        LDR.W    R0,??DataTable25_5
   \       0xB4   0x9000             STR      R0,[SP, #+0]
   \       0xB6   0xF640 0x23D7      MOVW     R3,#+2775
   \       0xBA   0x462A             MOV      R2,R5
   \       0xBC   0x2102             MOVS     R1,#+2
   \       0xBE   0x4620             MOV      R0,R4
   \       0xC0   0x....'....        BL       mbedtls_debug_print_ret
   \       0xC4   0x2E01             CMP      R6,#+1
   \       0xC6   0xDAC8             BGE.N    ??mbedtls_ssl_flush_output_3
   \       0xC8   0x4630             MOV      R0,R6
   \       0xCA   0xE01F             B.N      ??mbedtls_ssl_flush_output_1
   \                     ??mbedtls_ssl_flush_output_4: (+1)
   \       0xCC   0x9002             STR      R0,[SP, #+8]
   \       0xCE   0x9601             STR      R6,[SP, #+4]
   \       0xD0   0x....'....        LDR.W    R0,??DataTable25_6
   \       0xD4   0x9000             STR      R0,[SP, #+0]
   \       0xD6   0xF44F 0x632E      MOV      R3,#+2784
   \       0xDA   0x462A             MOV      R2,R5
   \       0xDC   0x2101             MOVS     R1,#+1
   \       0xDE   0x4620             MOV      R0,R4
   \       0xE0   0x....'....        BL       mbedtls_debug_print_msg
   \       0xE4   0x....             LDR.N    R0,??DataTable18_1  ;; 0xffff9400
   \       0xE6   0xE011             B.N      ??mbedtls_ssl_flush_output_1
   2789              }
   2790          
   2791          #if defined(MBEDTLS_SSL_PROTO_DTLS)
   2792              if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
   2793              {
   2794                  ssl->out_hdr = ssl->out_buf;
   2795              }
   2796              else
   2797          #endif
   2798              {
   2799                  ssl->out_hdr = ssl->out_buf + 8;
   \                     ??mbedtls_ssl_flush_output_6: (+1)
   \       0xE8   0x3008             ADDS     R0,R0,#+8
   \       0xEA   0xF8C4 0x00B8      STR      R0,[R4, #+184]
   2800              }
   2801              ssl_update_out_pointers( ssl, ssl->transform_out );
   \                     ??mbedtls_ssl_flush_output_7: (+1)
   \       0xEE   0x6C61             LDR      R1,[R4, #+68]
   \       0xF0   0x4620             MOV      R0,R4
   \       0xF2   0x....'....        BL       ssl_update_out_pointers
   2802          
   2803              MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );
   \       0xF6   0x....'....        LDR.W    R0,??DataTable25_3
   \       0xFA   0x9000             STR      R0,[SP, #+0]
   \       0xFC   0xF640 0x23F3      MOVW     R3,#+2803
   \      0x100   0x462A             MOV      R2,R5
   \      0x102   0x2102             MOVS     R1,#+2
   \      0x104   0x4620             MOV      R0,R4
   \      0x106   0x....'....        BL       mbedtls_debug_print_msg
   2804          
   2805              return( 0 );
   \      0x10A   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_ssl_flush_output_1: (+1)
   \      0x10C   0xB004             ADD      SP,SP,#+16
   \      0x10E   0xBD70             POP      {R4-R6,PC}       ;; return
   \                     ??mbedtls_ssl_flush_output_5: (+1)
   \      0x110   0x6820             LDR      R0,[R4, #+0]
   \      0x112   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \      0x116   0xF3C0 0x0040      UBFX     R0,R0,#+1,#+1
   \      0x11A   0x2800             CMP      R0,#+0
   \      0x11C   0xF8D4 0x00B0      LDR      R0,[R4, #+176]
   \      0x120   0xD0E2             BEQ.N    ??mbedtls_ssl_flush_output_6
   \      0x122   0xF8C4 0x00B8      STR      R0,[R4, #+184]
   \      0x126   0xE7E2             B.N      ??mbedtls_ssl_flush_output_7
   2806          }
   2807          
   2808          /*
   2809           * Functions to handle the DTLS retransmission state machine
   2810           */
   2811          #if defined(MBEDTLS_SSL_PROTO_DTLS)
   2812          /*
   2813           * Append current handshake message to current outgoing flight
   2814           */

   \                                 In section .text, align 2, keep-with-next
   2815          static int ssl_flight_append( mbedtls_ssl_context *ssl )
   2816          {
   \                     ssl_flight_append: (+1)
   \        0x0   0xB57F             PUSH     {R0-R6,LR}
   \        0x2   0x4605             MOV      R5,R0
   2817              mbedtls_ssl_flight_item *msg;
   2818              MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> ssl_flight_append" ) );
   \        0x4   0x....'....        LDR.W    R6,??DataTable25_8
   \        0x8   0x....'....        LDR.W    R0,??DataTable25_9
   \        0xC   0x9000             STR      R0,[SP, #+0]
   \        0xE   0xF640 0x3302      MOVW     R3,#+2818
   \       0x12   0x4632             MOV      R2,R6
   \       0x14   0x2102             MOVS     R1,#+2
   \       0x16   0x4628             MOV      R0,R5
   \       0x18   0x....'....        BL       mbedtls_debug_print_msg
   2819              MBEDTLS_SSL_DEBUG_BUF( 4, "message appended to flight",
   2820                                     ssl->out_msg, ssl->out_msglen );
   \       0x1C   0xF8D5 0x00CC      LDR      R0,[R5, #+204]
   \       0x20   0x9002             STR      R0,[SP, #+8]
   \       0x22   0xF8D5 0x00C4      LDR      R0,[R5, #+196]
   \       0x26   0x9001             STR      R0,[SP, #+4]
   \       0x28   0x....'....        LDR.W    R0,??DataTable25_10
   \       0x2C   0x9000             STR      R0,[SP, #+0]
   \       0x2E   0xF640 0x3304      MOVW     R3,#+2820
   \       0x32   0x4632             MOV      R2,R6
   \       0x34   0x2104             MOVS     R1,#+4
   \       0x36   0x4628             MOV      R0,R5
   \       0x38   0x....'....        BL       mbedtls_debug_print_buf
   2821          
   2822              /* Allocate space for current message */
   2823              if( ( msg = mbedtls_calloc( 1, sizeof(  mbedtls_ssl_flight_item ) ) ) == NULL )
   \       0x3C   0x2110             MOVS     R1,#+16
   \       0x3E   0x2001             MOVS     R0,#+1
   \       0x40   0x....'....        BL       mbedtls_calloc
   \       0x44   0x0004             MOVS     R4,R0
   \       0x46   0xD10E             BNE.N    ??ssl_flight_append_0
   2824              {
   2825                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc %d bytes failed",
   2826                                      sizeof( mbedtls_ssl_flight_item ) ) );
   \       0x48   0x2010             MOVS     R0,#+16
   \       0x4A   0x9001             STR      R0,[SP, #+4]
   \       0x4C   0x....'....        LDR.W    R0,??DataTable25_11
   \       0x50   0x9000             STR      R0,[SP, #+0]
   \       0x52   0xF640 0x330A      MOVW     R3,#+2826
   \       0x56   0x4632             MOV      R2,R6
   \       0x58   0x2101             MOVS     R1,#+1
   \       0x5A   0x4628             MOV      R0,R5
   \       0x5C   0x....'....        BL       mbedtls_debug_print_msg
   2827                  return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
   \       0x60   0x....'....        LDR.W    R0,??DataTable25_12  ;; 0xffff8100
   \       0x64   0xE044             B.N      ??ssl_flight_append_1
   2828              }
   2829          
   2830              if( ( msg->p = mbedtls_calloc( 1, ssl->out_msglen ) ) == NULL )
   \                     ??ssl_flight_append_0: (+1)
   \       0x66   0xF8D5 0x10CC      LDR      R1,[R5, #+204]
   \       0x6A   0x2001             MOVS     R0,#+1
   \       0x6C   0x....'....        BL       mbedtls_calloc
   \       0x70   0x6020             STR      R0,[R4, #+0]
   \       0x72   0x2800             CMP      R0,#+0
   \       0x74   0xD112             BNE.N    ??ssl_flight_append_2
   2831              {
   2832                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc %d bytes failed", ssl->out_msglen ) );
   \       0x76   0xF8D5 0x00CC      LDR      R0,[R5, #+204]
   \       0x7A   0x9001             STR      R0,[SP, #+4]
   \       0x7C   0x....'....        LDR.W    R0,??DataTable25_11
   \       0x80   0x9000             STR      R0,[SP, #+0]
   \       0x82   0xF44F 0x6331      MOV      R3,#+2832
   \       0x86   0x4632             MOV      R2,R6
   \       0x88   0x2101             MOVS     R1,#+1
   \       0x8A   0x4628             MOV      R0,R5
   \       0x8C   0x....'....        BL       mbedtls_debug_print_msg
   2833                  mbedtls_free( msg );
   \       0x90   0x4620             MOV      R0,R4
   \       0x92   0x....'....        BL       mbedtls_free
   2834                  return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
   \       0x96   0x....'....        LDR.W    R0,??DataTable25_12  ;; 0xffff8100
   \       0x9A   0xE029             B.N      ??ssl_flight_append_1
   2835              }
   2836          
   2837              /* Copy current handshake message with headers */
   2838              memcpy( msg->p, ssl->out_msg, ssl->out_msglen );
   \                     ??ssl_flight_append_2: (+1)
   \       0x9C   0xF8D5 0x20CC      LDR      R2,[R5, #+204]
   \       0xA0   0xF8D5 0x10C4      LDR      R1,[R5, #+196]
   \       0xA4   0x....'....        BL       __aeabi_memcpy
   2839              msg->len = ssl->out_msglen;
   \       0xA8   0xF8D5 0x00CC      LDR      R0,[R5, #+204]
   \       0xAC   0x6060             STR      R0,[R4, #+4]
   2840              msg->type = ssl->out_msgtype;
   \       0xAE   0xF8D5 0x00C8      LDR      R0,[R5, #+200]
   \       0xB2   0x7220             STRB     R0,[R4, #+8]
   2841              msg->next = NULL;
   \       0xB4   0x2000             MOVS     R0,#+0
   \       0xB6   0x60E0             STR      R0,[R4, #+12]
   2842          
   2843              /* Append to the current flight */
   2844              if( ssl->handshake->flight == NULL )
   \       0xB8   0x6BE8             LDR      R0,[R5, #+60]
   \       0xBA   0xF8D0 0x01EC      LDR      R0,[R0, #+492]
   \       0xBE   0x2800             CMP      R0,#+0
   \       0xC0   0x6BE8             LDR      R0,[R5, #+60]
   \       0xC2   0xD102             BNE.N    ??ssl_flight_append_3
   2845                  ssl->handshake->flight = msg;
   \       0xC4   0xF8C0 0x41EC      STR      R4,[R0, #+492]
   \       0xC8   0xE007             B.N      ??ssl_flight_append_4
   2846              else
   2847              {
   2848                  mbedtls_ssl_flight_item *cur = ssl->handshake->flight;
   \                     ??ssl_flight_append_3: (+1)
   \       0xCA   0xF8D0 0x11EC      LDR      R1,[R0, #+492]
   \       0xCE   0xE000             B.N      ??ssl_flight_append_5
   2849                  while( cur->next != NULL )
   2850                      cur = cur->next;
   \                     ??ssl_flight_append_6: (+1)
   \       0xD0   0x4601             MOV      R1,R0
   \                     ??ssl_flight_append_5: (+1)
   \       0xD2   0x68C8             LDR      R0,[R1, #+12]
   \       0xD4   0x2800             CMP      R0,#+0
   \       0xD6   0xD1FB             BNE.N    ??ssl_flight_append_6
   2851                  cur->next = msg;
   \       0xD8   0x60CC             STR      R4,[R1, #+12]
   2852              }
   2853          
   2854              MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= ssl_flight_append" ) );
   \                     ??ssl_flight_append_4: (+1)
   \       0xDA   0x....'....        LDR.W    R0,??DataTable26
   \       0xDE   0x9000             STR      R0,[SP, #+0]
   \       0xE0   0xF640 0x3326      MOVW     R3,#+2854
   \       0xE4   0x4632             MOV      R2,R6
   \       0xE6   0x2102             MOVS     R1,#+2
   \       0xE8   0x4628             MOV      R0,R5
   \       0xEA   0x....'....        BL       mbedtls_debug_print_msg
   2855              return( 0 );
   \       0xEE   0x2000             MOVS     R0,#+0
   \                     ??ssl_flight_append_1: (+1)
   \       0xF0   0xB004             ADD      SP,SP,#+16
   \       0xF2   0xBD70             POP      {R4-R6,PC}       ;; return
   2856          }
   2857          
   2858          /*
   2859           * Free the current flight of handshake messages
   2860           */

   \                                 In section .text, align 2, keep-with-next
   2861          static void ssl_flight_free( mbedtls_ssl_flight_item *flight )
   2862          {
   \                     ssl_flight_free: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
   2863              mbedtls_ssl_flight_item *cur = flight;
   \        0x4   0xE007             B.N      ??ssl_flight_free_0
   2864              mbedtls_ssl_flight_item *next;
   2865          
   2866              while( cur != NULL )
   2867              {
   2868                  next = cur->next;
   \                     ??ssl_flight_free_1: (+1)
   \        0x6   0x68E5             LDR      R5,[R4, #+12]
   2869          
   2870                  mbedtls_free( cur->p );
   \        0x8   0x6820             LDR      R0,[R4, #+0]
   \        0xA   0x....'....        BL       mbedtls_free
   2871                  mbedtls_free( cur );
   \        0xE   0x4620             MOV      R0,R4
   \       0x10   0x....'....        BL       mbedtls_free
   2872          
   2873                  cur = next;
   \       0x14   0x002C             MOVS     R4,R5
   2874              }
   \                     ??ssl_flight_free_0: (+1)
   \       0x16   0xD1F6             BNE.N    ??ssl_flight_free_1
   2875          }
   \       0x18   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   2876          
   2877          #if defined(MBEDTLS_SSL_DTLS_ANTI_REPLAY)
   2878          static void ssl_dtls_replay_reset( mbedtls_ssl_context *ssl );
   2879          #endif
   2880          
   2881          /*
   2882           * Swap transform_out and out_ctr with the alternative ones
   2883           */

   \                                 In section .text, align 2, keep-with-next
   2884          static void ssl_swap_epochs( mbedtls_ssl_context *ssl )
   2885          {
   \                     ssl_swap_epochs: (+1)
   \        0x0   0xB51F             PUSH     {R0-R4,LR}
   \        0x2   0x4604             MOV      R4,R0
   2886              mbedtls_ssl_transform *tmp_transform;
   2887              unsigned char tmp_out_ctr[8];
   2888          
   2889              if( ssl->transform_out == ssl->handshake->alt_transform_out )
   \        0x4   0x6C60             LDR      R0,[R4, #+68]
   \        0x6   0x6BE1             LDR      R1,[R4, #+60]
   \        0x8   0xF8D1 0x11FC      LDR      R1,[R1, #+508]
   \        0xC   0x4288             CMP      R0,R1
   \        0xE   0xD10B             BNE.N    ??ssl_swap_epochs_0
   2890              {
   2891                  MBEDTLS_SSL_DEBUG_MSG( 3, ( "skip swap epochs" ) );
   \       0x10   0x....'....        LDR.W    R0,??DataTable26_1
   \       0x14   0x9000             STR      R0,[SP, #+0]
   \       0x16   0xF640 0x334B      MOVW     R3,#+2891
   \       0x1A   0x....'....        LDR.W    R2,??DataTable25_8
   \       0x1E   0x2103             MOVS     R1,#+3
   \       0x20   0x4620             MOV      R0,R4
   \       0x22   0x....'....        BL       mbedtls_debug_print_msg
   2892                  return;
   \       0x26   0xBD1F             POP      {R0-R4,PC}
   2893              }
   2894          
   2895              MBEDTLS_SSL_DEBUG_MSG( 3, ( "swap epochs" ) );
   \                     ??ssl_swap_epochs_0: (+1)
   \       0x28   0x....'....        LDR.W    R0,??DataTable26_2
   \       0x2C   0x9000             STR      R0,[SP, #+0]
   \       0x2E   0xF640 0x334F      MOVW     R3,#+2895
   \       0x32   0x....'....        LDR.W    R2,??DataTable25_8
   \       0x36   0x2103             MOVS     R1,#+3
   \       0x38   0x4620             MOV      R0,R4
   \       0x3A   0x....'....        BL       mbedtls_debug_print_msg
   2896          
   2897              /* Swap transforms */
   2898              tmp_transform                     = ssl->transform_out;
   \       0x3E   0x6C60             LDR      R0,[R4, #+68]
   2899              ssl->transform_out                = ssl->handshake->alt_transform_out;
   \       0x40   0x6BE1             LDR      R1,[R4, #+60]
   \       0x42   0xF8D1 0x11FC      LDR      R1,[R1, #+508]
   \       0x46   0x6461             STR      R1,[R4, #+68]
   2900              ssl->handshake->alt_transform_out = tmp_transform;
   \       0x48   0x6BE1             LDR      R1,[R4, #+60]
   \       0x4A   0xF8C1 0x01FC      STR      R0,[R1, #+508]
   2901          
   2902              /* Swap epoch + sequence_number */
   2903              memcpy( tmp_out_ctr,                 ssl->cur_out_ctr,            8 );
   \       0x4E   0x2208             MOVS     R2,#+8
   \       0x50   0xF104 0x01D4      ADD      R1,R4,#+212
   \       0x54   0xA801             ADD      R0,SP,#+4
   \       0x56   0x....'....        BL       __aeabi_memcpy4
   2904              memcpy( ssl->cur_out_ctr,            ssl->handshake->alt_out_ctr, 8 );
   \       0x5A   0x2208             MOVS     R2,#+8
   \       0x5C   0x6BE0             LDR      R0,[R4, #+60]
   \       0x5E   0xF500 0x7100      ADD      R1,R0,#+512
   \       0x62   0xF104 0x00D4      ADD      R0,R4,#+212
   \       0x66   0x....'....        BL       __aeabi_memcpy4
   2905              memcpy( ssl->handshake->alt_out_ctr, tmp_out_ctr,                 8 );
   \       0x6A   0x2208             MOVS     R2,#+8
   \       0x6C   0xA901             ADD      R1,SP,#+4
   \       0x6E   0x6BE0             LDR      R0,[R4, #+60]
   \       0x70   0xF500 0x7000      ADD      R0,R0,#+512
   \       0x74   0x....'....        BL       __aeabi_memcpy4
   2906          
   2907              /* Adjust to the newly activated transform */
   2908              ssl_update_out_pointers( ssl, ssl->transform_out );
   \       0x78   0x6C61             LDR      R1,[R4, #+68]
   \       0x7A   0x4620             MOV      R0,R4
   \       0x7C   0x....'....        BL       ssl_update_out_pointers
   2909          
   2910          #if defined(MBEDTLS_SSL_HW_RECORD_ACCEL)
   2911              if( mbedtls_ssl_hw_record_activate != NULL )
   2912              {
   2913                  if( ( ret = mbedtls_ssl_hw_record_activate( ssl, MBEDTLS_SSL_CHANNEL_OUTBOUND ) ) != 0 )
   2914                  {
   2915                      MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_hw_record_activate", ret );
   2916                      return( MBEDTLS_ERR_SSL_HW_ACCEL_FAILED );
   2917                  }
   2918              }
   2919          #endif
   2920          }
   \       0x80   0xBD1F             POP      {R0-R4,PC}       ;; return
   2921          
   2922          /*
   2923           * Retransmit the current flight of messages.
   2924           */

   \                                 In section .text, align 2, keep-with-next
   2925          int mbedtls_ssl_resend( mbedtls_ssl_context *ssl )
   2926          {
   \                     mbedtls_ssl_resend: (+1)
   \        0x0   0xB57C             PUSH     {R2-R6,LR}
   \        0x2   0x4604             MOV      R4,R0
   2927              int ret = 0;
   2928          
   2929              MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> mbedtls_ssl_resend" ) );
   \        0x4   0x....'....        LDR.W    R5,??DataTable25_8
   \        0x8   0x....'....        LDR.W    R0,??DataTable26_3
   \        0xC   0x9000             STR      R0,[SP, #+0]
   \        0xE   0xF640 0x3371      MOVW     R3,#+2929
   \       0x12   0x462A             MOV      R2,R5
   \       0x14   0x2102             MOVS     R1,#+2
   \       0x16   0x4620             MOV      R0,R4
   \       0x18   0x....'....        BL       mbedtls_debug_print_msg
   2930          
   2931              ret = mbedtls_ssl_flight_transmit( ssl );
   \       0x1C   0x4620             MOV      R0,R4
   \       0x1E   0x....'....        BL       mbedtls_ssl_flight_transmit
   \       0x22   0x4606             MOV      R6,R0
   2932          
   2933              MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= mbedtls_ssl_resend" ) );
   \       0x24   0x....'....        LDR.W    R0,??DataTable26_4
   \       0x28   0x9000             STR      R0,[SP, #+0]
   \       0x2A   0xF640 0x3375      MOVW     R3,#+2933
   \       0x2E   0x462A             MOV      R2,R5
   \       0x30   0x2102             MOVS     R1,#+2
   \       0x32   0x4620             MOV      R0,R4
   \       0x34   0x....'....        BL       mbedtls_debug_print_msg
   2934          
   2935              return( ret );
   \       0x38   0x4630             MOV      R0,R6
   \       0x3A   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
   2936          }
   2937          
   2938          /*
   2939           * Transmit or retransmit the current flight of messages.
   2940           *
   2941           * Need to remember the current message in case flush_output returns
   2942           * WANT_WRITE, causing us to exit this function and come back later.
   2943           * This function must be called until state is no longer SENDING.
   2944           */

   \                                 In section .text, align 2, keep-with-next
   2945          int mbedtls_ssl_flight_transmit( mbedtls_ssl_context *ssl )
   2946          {
   \                     mbedtls_ssl_flight_transmit: (+1)
   \        0x0   0xE92D 0x47FF      PUSH     {R0-R10,LR}
   \        0x4   0x4606             MOV      R6,R0
   2947              int ret;
   2948              MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> mbedtls_ssl_flight_transmit" ) );
   \        0x6   0x....'....        LDR.W    R7,??DataTable25_8
   \        0xA   0x....'....        LDR.W    R0,??DataTable26_5
   \        0xE   0x9000             STR      R0,[SP, #+0]
   \       0x10   0xF640 0x3384      MOVW     R3,#+2948
   \       0x14   0x463A             MOV      R2,R7
   \       0x16   0x2102             MOVS     R1,#+2
   \       0x18   0x4630             MOV      R0,R6
   \       0x1A   0x....'....        BL       mbedtls_debug_print_msg
   2949          
   2950              if( ssl->handshake->retransmit_state != MBEDTLS_SSL_RETRANS_SENDING )
   \       0x1E   0x6BF0             LDR      R0,[R6, #+60]
   \       0x20   0xF890 0x01E8      LDRB     R0,[R0, #+488]
   \       0x24   0x2801             CMP      R0,#+1
   \       0x26   0xD01E             BEQ.N    ??mbedtls_ssl_flight_transmit_0
   2951              {
   2952                  MBEDTLS_SSL_DEBUG_MSG( 2, ( "initialise flight transmission" ) );
   \       0x28   0x....'....        LDR.W    R0,??DataTable26_6
   \       0x2C   0x9000             STR      R0,[SP, #+0]
   \       0x2E   0xF640 0x3388      MOVW     R3,#+2952
   \       0x32   0x463A             MOV      R2,R7
   \       0x34   0x2102             MOVS     R1,#+2
   \       0x36   0x4630             MOV      R0,R6
   \       0x38   0x....'....        BL       mbedtls_debug_print_msg
   2953          
   2954                  ssl->handshake->cur_msg = ssl->handshake->flight;
   \       0x3C   0x6BF0             LDR      R0,[R6, #+60]
   \       0x3E   0xF8D0 0x01EC      LDR      R0,[R0, #+492]
   \       0x42   0x6BF1             LDR      R1,[R6, #+60]
   \       0x44   0xF8C1 0x01F0      STR      R0,[R1, #+496]
   2955                  ssl->handshake->cur_msg_p = ssl->handshake->flight->p + 12;
   \       0x48   0x6BF0             LDR      R0,[R6, #+60]
   \       0x4A   0xF8D0 0x01EC      LDR      R0,[R0, #+492]
   \       0x4E   0x6800             LDR      R0,[R0, #+0]
   \       0x50   0x300C             ADDS     R0,R0,#+12
   \       0x52   0x6BF1             LDR      R1,[R6, #+60]
   \       0x54   0xF8C1 0x01F4      STR      R0,[R1, #+500]
   2956                  ssl_swap_epochs( ssl );
   \       0x58   0x4630             MOV      R0,R6
   \       0x5A   0x....'....        BL       ssl_swap_epochs
   2957          
   2958                  ssl->handshake->retransmit_state = MBEDTLS_SSL_RETRANS_SENDING;
   \       0x5E   0x2001             MOVS     R0,#+1
   \       0x60   0x6BF1             LDR      R1,[R6, #+60]
   \       0x62   0xF881 0x01E8      STRB     R0,[R1, #+488]
   2959              }
   2960          
   2961              while( ssl->handshake->cur_msg != NULL )
   \                     ??mbedtls_ssl_flight_transmit_0: (+1)
   \       0x66   0x6BF0             LDR      R0,[R6, #+60]
   \       0x68   0xF8D0 0x01F0      LDR      R0,[R0, #+496]
   \       0x6C   0x2800             CMP      R0,#+0
   \       0x6E   0xF000 0x8129      BEQ.W    ??mbedtls_ssl_flight_transmit_1
   2962              {
   2963                  size_t max_frag_len;
   2964                  const mbedtls_ssl_flight_item * const cur = ssl->handshake->cur_msg;
   \       0x72   0x6BF0             LDR      R0,[R6, #+60]
   \       0x74   0xF8D0 0x81F0      LDR      R8,[R0, #+496]
   2965          
   2966                  int const is_finished =
   2967                      ( cur->type == MBEDTLS_SSL_MSG_HANDSHAKE &&
   2968                        cur->p[0] == MBEDTLS_SSL_HS_FINISHED );
   \       0x78   0xF898 0x0008      LDRB     R0,[R8, #+8]
   \       0x7C   0x2816             CMP      R0,#+22
   \       0x7E   0xD106             BNE.N    ??mbedtls_ssl_flight_transmit_2
   \       0x80   0xF8D8 0x0000      LDR      R0,[R8, #+0]
   \       0x84   0x7800             LDRB     R0,[R0, #+0]
   \       0x86   0x2814             CMP      R0,#+20
   \       0x88   0xD101             BNE.N    ??mbedtls_ssl_flight_transmit_2
   \       0x8A   0x2401             MOVS     R4,#+1
   \       0x8C   0xE000             B.N      ??mbedtls_ssl_flight_transmit_3
   \                     ??mbedtls_ssl_flight_transmit_2: (+1)
   \       0x8E   0x2400             MOVS     R4,#+0
   2969          
   2970                  uint8_t const force_flush = ssl->disable_datagram_packing == 1 ?
   2971                      SSL_FORCE_FLUSH : SSL_DONT_FORCE_FLUSH;
   \                     ??mbedtls_ssl_flight_transmit_3: (+1)
   \       0x90   0xF896 0x00AC      LDRB     R0,[R6, #+172]
   \       0x94   0x2801             CMP      R0,#+1
   \       0x96   0xD102             BNE.N    ??mbedtls_ssl_flight_transmit_4
   \       0x98   0xF04F 0x0901      MOV      R9,#+1
   \       0x9C   0xE001             B.N      ??mbedtls_ssl_flight_transmit_5
   \                     ??mbedtls_ssl_flight_transmit_4: (+1)
   \       0x9E   0xF04F 0x0900      MOV      R9,#+0
   2972          
   2973                  /* Swap epochs before sending Finished: we can't do it after
   2974                   * sending ChangeCipherSpec, in case write returns WANT_READ.
   2975                   * Must be done before copying, may change out_msg pointer */
   2976                  if( is_finished && ssl->handshake->cur_msg_p == ( cur->p + 12 ) )
   \                     ??mbedtls_ssl_flight_transmit_5: (+1)
   \       0xA2   0x2C00             CMP      R4,#+0
   \       0xA4   0xD014             BEQ.N    ??mbedtls_ssl_flight_transmit_6
   \       0xA6   0x6BF0             LDR      R0,[R6, #+60]
   \       0xA8   0xF8D0 0x01F4      LDR      R0,[R0, #+500]
   \       0xAC   0xF8D8 0x1000      LDR      R1,[R8, #+0]
   \       0xB0   0x310C             ADDS     R1,R1,#+12
   \       0xB2   0x4288             CMP      R0,R1
   \       0xB4   0xD10C             BNE.N    ??mbedtls_ssl_flight_transmit_6
   2977                  {
   2978                      MBEDTLS_SSL_DEBUG_MSG( 2, ( "swap epochs to send finished message" ) );
   \       0xB6   0x....'....        LDR.W    R0,??DataTable26_7
   \       0xBA   0x9000             STR      R0,[SP, #+0]
   \       0xBC   0xF640 0x33A2      MOVW     R3,#+2978
   \       0xC0   0x463A             MOV      R2,R7
   \       0xC2   0x2102             MOVS     R1,#+2
   \       0xC4   0x4630             MOV      R0,R6
   \       0xC6   0x....'....        BL       mbedtls_debug_print_msg
   2979                      ssl_swap_epochs( ssl );
   \       0xCA   0x4630             MOV      R0,R6
   \       0xCC   0x....'....        BL       ssl_swap_epochs
   2980                  }
   2981          
   2982                  ret = ssl_get_remaining_payload_in_datagram( ssl );
   \                     ??mbedtls_ssl_flight_transmit_6: (+1)
   \       0xD0   0x4630             MOV      R0,R6
   \       0xD2   0x....'....        BL       ssl_get_remaining_payload_in_datagram
   2983                  if( ret < 0 )
   \       0xD6   0x2800             CMP      R0,#+0
   \       0xD8   0xF100 0x80F1      BMI.W    ??mbedtls_ssl_flight_transmit_7
   2984                      return( ret );
   2985                  max_frag_len = (size_t) ret;
   2986          
   2987                  /* CCS is copied as is, while HS messages may need fragmentation */
   2988                  if( cur->type == MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC )
   \       0xDC   0xF898 0x1008      LDRB     R1,[R8, #+8]
   \       0xE0   0x2914             CMP      R1,#+20
   \       0xE2   0xD122             BNE.N    ??mbedtls_ssl_flight_transmit_8
   2989                  {
   2990                      if( max_frag_len == 0 )
   \       0xE4   0x2800             CMP      R0,#+0
   \       0xE6   0xD106             BNE.N    ??mbedtls_ssl_flight_transmit_9
   2991                      {
   2992                          if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
   \       0xE8   0x4630             MOV      R0,R6
   \       0xEA   0x....'....        BL       mbedtls_ssl_flush_output
   \       0xEE   0x2800             CMP      R0,#+0
   \       0xF0   0xF040 0x80E5      BNE.W    ??mbedtls_ssl_flight_transmit_7
   \       0xF4   0xE7B7             B.N      ??mbedtls_ssl_flight_transmit_0
   2993                              return( ret );
   2994          
   2995                          continue;
   2996                      }
   2997          
   2998                      memcpy( ssl->out_msg, cur->p, cur->len );
   \                     ??mbedtls_ssl_flight_transmit_9: (+1)
   \       0xF6   0xF8D8 0x2004      LDR      R2,[R8, #+4]
   \       0xFA   0xF8D8 0x1000      LDR      R1,[R8, #+0]
   \       0xFE   0xF8D6 0x00C4      LDR      R0,[R6, #+196]
   \      0x102   0x....'....        BL       __aeabi_memcpy
   2999                      ssl->out_msglen  = cur->len;
   \      0x106   0xF8D8 0x0004      LDR      R0,[R8, #+4]
   \      0x10A   0xF8C6 0x00CC      STR      R0,[R6, #+204]
   3000                      ssl->out_msgtype = cur->type;
   \      0x10E   0xF898 0x0008      LDRB     R0,[R8, #+8]
   \      0x112   0xF8C6 0x00C8      STR      R0,[R6, #+200]
   3001          
   3002                      /* Update position inside current message */
   3003                      ssl->handshake->cur_msg_p += cur->len;
   \      0x116   0x6BF0             LDR      R0,[R6, #+60]
   \      0x118   0xF8D0 0x01F4      LDR      R0,[R0, #+500]
   \      0x11C   0xF8D8 0x1004      LDR      R1,[R8, #+4]
   \      0x120   0x4408             ADD      R0,R0,R1
   \      0x122   0x6BF1             LDR      R1,[R6, #+60]
   \      0x124   0xF8C1 0x01F4      STR      R0,[R1, #+500]
   \      0x128   0xE078             B.N      ??mbedtls_ssl_flight_transmit_10
   3004                  }
   3005                  else
   3006                  {
   3007                      const unsigned char * const p = ssl->handshake->cur_msg_p;
   \                     ??mbedtls_ssl_flight_transmit_8: (+1)
   \      0x12A   0x6BF1             LDR      R1,[R6, #+60]
   \      0x12C   0xF8D1 0xA1F4      LDR      R10,[R1, #+500]
   3008                      const size_t hs_len = cur->len - 12;
   \      0x130   0xF8D8 0x1004      LDR      R1,[R8, #+4]
   \      0x134   0x390C             SUBS     R1,R1,#+12
   3009                      const size_t frag_off = p - ( cur->p + 12 );
   \      0x136   0xF8D8 0x2000      LDR      R2,[R8, #+0]
   \      0x13A   0xF102 0x050C      ADD      R5,R2,#+12
   \      0x13E   0xEBAA 0x0505      SUB      R5,R10,R5
   3010                      const size_t rem_len = hs_len - frag_off;
   \      0x142   0x1B4A             SUBS     R2,R1,R5
   3011                      size_t cur_hs_frag_len, max_hs_frag_len;
   3012          
   3013                      if( ( max_frag_len < 12 ) || ( max_frag_len == 12 && hs_len != 0 ) )
   \      0x144   0x280C             CMP      R0,#+12
   \      0x146   0xD302             BCC.N    ??mbedtls_ssl_flight_transmit_11
   \      0x148   0xD10D             BNE.N    ??mbedtls_ssl_flight_transmit_12
   \      0x14A   0x2900             CMP      R1,#+0
   \      0x14C   0xD00B             BEQ.N    ??mbedtls_ssl_flight_transmit_12
   3014                      {
   3015                          if( is_finished )
   \                     ??mbedtls_ssl_flight_transmit_11: (+1)
   \      0x14E   0x2C00             CMP      R4,#+0
   \      0x150   0xD002             BEQ.N    ??mbedtls_ssl_flight_transmit_13
   3016                              ssl_swap_epochs( ssl );
   \      0x152   0x4630             MOV      R0,R6
   \      0x154   0x....'....        BL       ssl_swap_epochs
   3017          
   3018                          if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
   \                     ??mbedtls_ssl_flight_transmit_13: (+1)
   \      0x158   0x4630             MOV      R0,R6
   \      0x15A   0x....'....        BL       mbedtls_ssl_flush_output
   \      0x15E   0x2800             CMP      R0,#+0
   \      0x160   0xF040 0x80AD      BNE.W    ??mbedtls_ssl_flight_transmit_7
   \      0x164   0xE77F             B.N      ??mbedtls_ssl_flight_transmit_0
   3019                              return( ret );
   3020          
   3021                          continue;
   3022                      }
   3023                      max_hs_frag_len = max_frag_len - 12;
   \                     ??mbedtls_ssl_flight_transmit_12: (+1)
   \      0x166   0x380C             SUBS     R0,R0,#+12
   3024          
   3025                      cur_hs_frag_len = rem_len > max_hs_frag_len ?
   3026                          max_hs_frag_len : rem_len;
   \      0x168   0x4604             MOV      R4,R0
   \      0x16A   0x4290             CMP      R0,R2
   \      0x16C   0xD900             BLS.N    ??mbedtls_ssl_flight_transmit_14
   \      0x16E   0x4614             MOV      R4,R2
   3027          
   3028                      if( frag_off == 0 && cur_hs_frag_len != hs_len )
   \                     ??mbedtls_ssl_flight_transmit_14: (+1)
   \      0x170   0x2D00             CMP      R5,#+0
   \      0x172   0xD10D             BNE.N    ??mbedtls_ssl_flight_transmit_15
   \      0x174   0x428C             CMP      R4,R1
   \      0x176   0xD00B             BEQ.N    ??mbedtls_ssl_flight_transmit_15
   3029                      {
   3030                          MBEDTLS_SSL_DEBUG_MSG( 2, ( "fragmenting handshake message (%u > %u)",
   3031                                                      (unsigned) cur_hs_frag_len,
   3032                                                      (unsigned) max_hs_frag_len ) );
   \      0x178   0x9002             STR      R0,[SP, #+8]
   \      0x17A   0x9401             STR      R4,[SP, #+4]
   \      0x17C   0x....'....        LDR.W    R0,??DataTable26_8
   \      0x180   0x9000             STR      R0,[SP, #+0]
   \      0x182   0xF640 0x33D8      MOVW     R3,#+3032
   \      0x186   0x463A             MOV      R2,R7
   \      0x188   0x2102             MOVS     R1,#+2
   \      0x18A   0x4630             MOV      R0,R6
   \      0x18C   0x....'....        BL       mbedtls_debug_print_msg
   3033                      }
   3034          
   3035                      /* Messages are stored with handshake headers as if not fragmented,
   3036                       * copy beginning of headers then fill fragmentation fields.
   3037                       * Handshake headers: type(1) len(3) seq(2) f_off(3) f_len(3) */
   3038                      memcpy( ssl->out_msg, cur->p, 6 );
   \                     ??mbedtls_ssl_flight_transmit_15: (+1)
   \      0x190   0x2206             MOVS     R2,#+6
   \      0x192   0xF8D8 0x1000      LDR      R1,[R8, #+0]
   \      0x196   0xF8D6 0x00C4      LDR      R0,[R6, #+196]
   \      0x19A   0x....'....        BL       __aeabi_memcpy
   3039          
   3040                      ssl->out_msg[6] = ( ( frag_off >> 16 ) & 0xff );
   \      0x19E   0x4628             MOV      R0,R5
   \      0x1A0   0x0C00             LSRS     R0,R0,#+16
   \      0x1A2   0xF8D6 0x10C4      LDR      R1,[R6, #+196]
   \      0x1A6   0x7188             STRB     R0,[R1, #+6]
   3041                      ssl->out_msg[7] = ( ( frag_off >>  8 ) & 0xff );
   \      0x1A8   0x4628             MOV      R0,R5
   \      0x1AA   0x0A00             LSRS     R0,R0,#+8
   \      0x1AC   0xF8D6 0x10C4      LDR      R1,[R6, #+196]
   \      0x1B0   0x71C8             STRB     R0,[R1, #+7]
   3042                      ssl->out_msg[8] = ( ( frag_off       ) & 0xff );
   \      0x1B2   0xF8D6 0x00C4      LDR      R0,[R6, #+196]
   \      0x1B6   0x7205             STRB     R5,[R0, #+8]
   3043          
   3044                      ssl->out_msg[ 9] = ( ( cur_hs_frag_len >> 16 ) & 0xff );
   \      0x1B8   0x4620             MOV      R0,R4
   \      0x1BA   0x0C00             LSRS     R0,R0,#+16
   \      0x1BC   0xF8D6 0x10C4      LDR      R1,[R6, #+196]
   \      0x1C0   0x7248             STRB     R0,[R1, #+9]
   3045                      ssl->out_msg[10] = ( ( cur_hs_frag_len >>  8 ) & 0xff );
   \      0x1C2   0x4620             MOV      R0,R4
   \      0x1C4   0x0A00             LSRS     R0,R0,#+8
   \      0x1C6   0xF8D6 0x10C4      LDR      R1,[R6, #+196]
   \      0x1CA   0x7288             STRB     R0,[R1, #+10]
   3046                      ssl->out_msg[11] = ( ( cur_hs_frag_len       ) & 0xff );
   \      0x1CC   0xF8D6 0x00C4      LDR      R0,[R6, #+196]
   \      0x1D0   0x72C4             STRB     R4,[R0, #+11]
   3047          
   3048                      MBEDTLS_SSL_DEBUG_BUF( 3, "handshake header", ssl->out_msg, 12 );
   \      0x1D2   0x200C             MOVS     R0,#+12
   \      0x1D4   0x9002             STR      R0,[SP, #+8]
   \      0x1D6   0xF8D6 0x00C4      LDR      R0,[R6, #+196]
   \      0x1DA   0x9001             STR      R0,[SP, #+4]
   \      0x1DC   0x....'....        LDR.W    R0,??DataTable26_9
   \      0x1E0   0x9000             STR      R0,[SP, #+0]
   \      0x1E2   0xF640 0x33E8      MOVW     R3,#+3048
   \      0x1E6   0x463A             MOV      R2,R7
   \      0x1E8   0x2103             MOVS     R1,#+3
   \      0x1EA   0x4630             MOV      R0,R6
   \      0x1EC   0x....'....        BL       mbedtls_debug_print_buf
   3049          
   3050                      /* Copy the handshake message content and set records fields */
   3051                      memcpy( ssl->out_msg + 12, p, cur_hs_frag_len );
   \      0x1F0   0x4622             MOV      R2,R4
   \      0x1F2   0x4651             MOV      R1,R10
   \      0x1F4   0xF8D6 0x00C4      LDR      R0,[R6, #+196]
   \      0x1F8   0x300C             ADDS     R0,R0,#+12
   \      0x1FA   0x....'....        BL       __aeabi_memcpy
   3052                      ssl->out_msglen = cur_hs_frag_len + 12;
   \      0x1FE   0xF104 0x000C      ADD      R0,R4,#+12
   \      0x202   0xF8C6 0x00CC      STR      R0,[R6, #+204]
   3053                      ssl->out_msgtype = cur->type;
   \      0x206   0xF898 0x0008      LDRB     R0,[R8, #+8]
   \      0x20A   0xF8C6 0x00C8      STR      R0,[R6, #+200]
   3054          
   3055                      /* Update position inside current message */
   3056                      ssl->handshake->cur_msg_p += cur_hs_frag_len;
   \      0x20E   0x6BF0             LDR      R0,[R6, #+60]
   \      0x210   0xF8D0 0x01F4      LDR      R0,[R0, #+500]
   \      0x214   0x4420             ADD      R0,R0,R4
   \      0x216   0x6BF1             LDR      R1,[R6, #+60]
   \      0x218   0xF8C1 0x01F4      STR      R0,[R1, #+500]
   3057                  }
   3058          
   3059                  /* If done with the current message move to the next one if any */
   3060                  if( ssl->handshake->cur_msg_p >= cur->p + cur->len )
   \                     ??mbedtls_ssl_flight_transmit_10: (+1)
   \      0x21C   0x6BF0             LDR      R0,[R6, #+60]
   \      0x21E   0xF8D0 0x01F4      LDR      R0,[R0, #+500]
   \      0x222   0xF8D8 0x1000      LDR      R1,[R8, #+0]
   \      0x226   0xF8D8 0x2004      LDR      R2,[R8, #+4]
   \      0x22A   0x4411             ADD      R1,R1,R2
   \      0x22C   0x4288             CMP      R0,R1
   \      0x22E   0xD315             BCC.N    ??mbedtls_ssl_flight_transmit_16
   3061                  {
   3062                      if( cur->next != NULL )
   \      0x230   0xF8D8 0x000C      LDR      R0,[R8, #+12]
   \      0x234   0x2800             CMP      R0,#+0
   \      0x236   0xD00A             BEQ.N    ??mbedtls_ssl_flight_transmit_17
   3063                      {
   3064                          ssl->handshake->cur_msg = cur->next;
   \      0x238   0x6BF1             LDR      R1,[R6, #+60]
   \      0x23A   0xF8C1 0x01F0      STR      R0,[R1, #+496]
   3065                          ssl->handshake->cur_msg_p = cur->next->p + 12;
   \      0x23E   0xF8D8 0x000C      LDR      R0,[R8, #+12]
   \      0x242   0x6800             LDR      R0,[R0, #+0]
   \      0x244   0x300C             ADDS     R0,R0,#+12
   \      0x246   0x6BF1             LDR      R1,[R6, #+60]
   \      0x248   0xF8C1 0x01F4      STR      R0,[R1, #+500]
   \      0x24C   0xE006             B.N      ??mbedtls_ssl_flight_transmit_16
   3066                      }
   3067                      else
   3068                      {
   3069                          ssl->handshake->cur_msg = NULL;
   \                     ??mbedtls_ssl_flight_transmit_17: (+1)
   \      0x24E   0x2000             MOVS     R0,#+0
   \      0x250   0x6BF1             LDR      R1,[R6, #+60]
   \      0x252   0xF8C1 0x01F0      STR      R0,[R1, #+496]
   3070                          ssl->handshake->cur_msg_p = NULL;
   \      0x256   0x6BF1             LDR      R1,[R6, #+60]
   \      0x258   0xF8C1 0x01F4      STR      R0,[R1, #+500]
   3071                      }
   3072                  }
   3073          
   3074                  /* Actually send the message out */
   3075                  if( ( ret = mbedtls_ssl_write_record( ssl, force_flush ) ) != 0 )
   \                     ??mbedtls_ssl_flight_transmit_16: (+1)
   \      0x25C   0x4649             MOV      R1,R9
   \      0x25E   0x4630             MOV      R0,R6
   \      0x260   0x....'....        BL       mbedtls_ssl_write_record
   \      0x264   0x0004             MOVS     R4,R0
   \      0x266   0xF43F 0xAEFE      BEQ.W    ??mbedtls_ssl_flight_transmit_0
   \      0x26A   0x4630             MOV      R0,R6
   3076                  {
   3077                      MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
   \      0x26C   0x9401             STR      R4,[SP, #+4]
   \      0x26E   0x....'....        LDR.W    R1,??DataTable27
   \      0x272   0x9100             STR      R1,[SP, #+0]
   \      0x274   0xF640 0x4305      MOVW     R3,#+3077
   \      0x278   0x463A             MOV      R2,R7
   \      0x27A   0x2101             MOVS     R1,#+1
   \      0x27C   0x....'....        BL       mbedtls_debug_print_ret
   3078                      return( ret );
   \      0x280   0x4620             MOV      R0,R4
   \      0x282   0xE01C             B.N      ??mbedtls_ssl_flight_transmit_7
   3079                  }
   3080              }
   3081          
   3082              if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
   3083                  return( ret );
   3084          
   3085              /* Update state and set timer */
   3086              if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER )
   \                     ??mbedtls_ssl_flight_transmit_18: (+1)
   \      0x284   0x6870             LDR      R0,[R6, #+4]
   \      0x286   0x2810             CMP      R0,#+16
   \      0x288   0xD104             BNE.N    ??mbedtls_ssl_flight_transmit_19
   3087                  ssl->handshake->retransmit_state = MBEDTLS_SSL_RETRANS_FINISHED;
   \      0x28A   0x2003             MOVS     R0,#+3
   \      0x28C   0x6BF1             LDR      R1,[R6, #+60]
   \      0x28E   0xF881 0x01E8      STRB     R0,[R1, #+488]
   \      0x292   0xE009             B.N      ??mbedtls_ssl_flight_transmit_20
   3088              else
   3089              {
   3090                  ssl->handshake->retransmit_state = MBEDTLS_SSL_RETRANS_WAITING;
   \                     ??mbedtls_ssl_flight_transmit_19: (+1)
   \      0x294   0x2002             MOVS     R0,#+2
   \      0x296   0x6BF1             LDR      R1,[R6, #+60]
   \      0x298   0xF881 0x01E8      STRB     R0,[R1, #+488]
   3091                  ssl_set_timer( ssl, ssl->handshake->retransmit_timeout );
   \      0x29C   0x6BF0             LDR      R0,[R6, #+60]
   \      0x29E   0xF8D0 0x11E4      LDR      R1,[R0, #+484]
   \      0x2A2   0x4630             MOV      R0,R6
   \      0x2A4   0x....'....        BL       ssl_set_timer
   3092              }
   3093          
   3094              MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= mbedtls_ssl_flight_transmit" ) );
   \                     ??mbedtls_ssl_flight_transmit_20: (+1)
   \      0x2A8   0x....'....        LDR.W    R0,??DataTable28
   \      0x2AC   0x9000             STR      R0,[SP, #+0]
   \      0x2AE   0xF640 0x4316      MOVW     R3,#+3094
   \      0x2B2   0x463A             MOV      R2,R7
   \      0x2B4   0x2102             MOVS     R1,#+2
   \      0x2B6   0x4630             MOV      R0,R6
   \      0x2B8   0x....'....        BL       mbedtls_debug_print_msg
   3095          
   3096              return( 0 );
   \      0x2BC   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_ssl_flight_transmit_7: (+1)
   \      0x2BE   0xB004             ADD      SP,SP,#+16
   \      0x2C0   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
   \                     ??mbedtls_ssl_flight_transmit_1: (+1)
   \      0x2C4   0x4630             MOV      R0,R6
   \      0x2C6   0x....'....        BL       mbedtls_ssl_flush_output
   \      0x2CA   0x2800             CMP      R0,#+0
   \      0x2CC   0xD0DA             BEQ.N    ??mbedtls_ssl_flight_transmit_18
   \      0x2CE   0xE7F6             B.N      ??mbedtls_ssl_flight_transmit_7
   3097          }
   3098          
   3099          /*
   3100           * To be called when the last message of an incoming flight is received.
   3101           */

   \                                 In section .text, align 2, keep-with-next
   3102          void mbedtls_ssl_recv_flight_completed( mbedtls_ssl_context *ssl )
   3103          {
   \                     mbedtls_ssl_recv_flight_completed: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x4604             MOV      R4,R0
   3104              /* We won't need to resend that one any more */
   3105              ssl_flight_free( ssl->handshake->flight );
   \        0x4   0x6BE0             LDR      R0,[R4, #+60]
   \        0x6   0xF8D0 0x01EC      LDR      R0,[R0, #+492]
   \        0xA   0x....'....        BL       ssl_flight_free
   3106              ssl->handshake->flight = NULL;
   \        0xE   0x2000             MOVS     R0,#+0
   \       0x10   0x6BE1             LDR      R1,[R4, #+60]
   \       0x12   0xF8C1 0x01EC      STR      R0,[R1, #+492]
   3107              ssl->handshake->cur_msg = NULL;
   \       0x16   0x6BE1             LDR      R1,[R4, #+60]
   \       0x18   0xF8C1 0x01F0      STR      R0,[R1, #+496]
   3108          
   3109              /* The next incoming flight will start with this msg_seq */
   3110              ssl->handshake->in_flight_start_seq = ssl->handshake->in_msg_seq;
   \       0x1C   0x6BE0             LDR      R0,[R4, #+60]
   \       0x1E   0xF8D0 0x01D8      LDR      R0,[R0, #+472]
   \       0x22   0x6BE1             LDR      R1,[R4, #+60]
   \       0x24   0xF8C1 0x01F8      STR      R0,[R1, #+504]
   3111          
   3112              /* We don't want to remember CCS's across flight boundaries. */
   3113              ssl->handshake->buffering.seen_ccs = 0;
   \       0x28   0x2000             MOVS     R0,#+0
   \       0x2A   0x6BE1             LDR      R1,[R4, #+60]
   \       0x2C   0xF881 0x020C      STRB     R0,[R1, #+524]
   3114          
   3115              /* Clear future message buffering structure. */
   3116              ssl_buffering_free( ssl );
   \       0x30   0x4620             MOV      R0,R4
   \       0x32   0x....'....        BL       ssl_buffering_free
   3117          
   3118              /* Cancel timer */
   3119              ssl_set_timer( ssl, 0 );
   \       0x36   0x2100             MOVS     R1,#+0
   \       0x38   0x4620             MOV      R0,R4
   \       0x3A   0x....'....        BL       ssl_set_timer
   3120          
   3121              if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE &&
   3122                  ssl->in_msg[0] == MBEDTLS_SSL_HS_FINISHED )
   \       0x3E   0x6FA0             LDR      R0,[R4, #+120]
   \       0x40   0x2816             CMP      R0,#+22
   \       0x42   0xD108             BNE.N    ??mbedtls_ssl_recv_flight_completed_0
   \       0x44   0x6F20             LDR      R0,[R4, #+112]
   \       0x46   0x7800             LDRB     R0,[R0, #+0]
   \       0x48   0x2814             CMP      R0,#+20
   \       0x4A   0xD104             BNE.N    ??mbedtls_ssl_recv_flight_completed_0
   3123              {
   3124                  ssl->handshake->retransmit_state = MBEDTLS_SSL_RETRANS_FINISHED;
   \       0x4C   0x2003             MOVS     R0,#+3
   \       0x4E   0x6BE1             LDR      R1,[R4, #+60]
   \       0x50   0xF881 0x01E8      STRB     R0,[R1, #+488]
   \       0x54   0xBD10             POP      {R4,PC}
   3125              }
   3126              else
   3127                  ssl->handshake->retransmit_state = MBEDTLS_SSL_RETRANS_PREPARING;
   \                     ??mbedtls_ssl_recv_flight_completed_0: (+1)
   \       0x56   0x2000             MOVS     R0,#+0
   \       0x58   0x6BE1             LDR      R1,[R4, #+60]
   \       0x5A   0xF881 0x01E8      STRB     R0,[R1, #+488]
   3128          }
   \       0x5E   0xBD10             POP      {R4,PC}          ;; return
   3129          
   3130          /*
   3131           * To be called when the last message of an outgoing flight is send.
   3132           */

   \                                 In section .text, align 2, keep-with-next
   3133          void mbedtls_ssl_send_flight_completed( mbedtls_ssl_context *ssl )
   3134          {
   \                     mbedtls_ssl_send_flight_completed: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x4604             MOV      R4,R0
   3135              ssl_reset_retransmit_timeout( ssl );
   \        0x4   0x....'....        BL       ssl_reset_retransmit_timeout
   3136              ssl_set_timer( ssl, ssl->handshake->retransmit_timeout );
   \        0x8   0x6BE0             LDR      R0,[R4, #+60]
   \        0xA   0xF8D0 0x11E4      LDR      R1,[R0, #+484]
   \        0xE   0x4620             MOV      R0,R4
   \       0x10   0x....'....        BL       ssl_set_timer
   3137          
   3138              if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE &&
   3139                  ssl->in_msg[0] == MBEDTLS_SSL_HS_FINISHED )
   \       0x14   0x6FA0             LDR      R0,[R4, #+120]
   \       0x16   0x2816             CMP      R0,#+22
   \       0x18   0xD108             BNE.N    ??mbedtls_ssl_send_flight_completed_0
   \       0x1A   0x6F20             LDR      R0,[R4, #+112]
   \       0x1C   0x7800             LDRB     R0,[R0, #+0]
   \       0x1E   0x2814             CMP      R0,#+20
   \       0x20   0xD104             BNE.N    ??mbedtls_ssl_send_flight_completed_0
   3140              {
   3141                  ssl->handshake->retransmit_state = MBEDTLS_SSL_RETRANS_FINISHED;
   \       0x22   0x2003             MOVS     R0,#+3
   \       0x24   0x6BE1             LDR      R1,[R4, #+60]
   \       0x26   0xF881 0x01E8      STRB     R0,[R1, #+488]
   \       0x2A   0xBD10             POP      {R4,PC}
   3142              }
   3143              else
   3144                  ssl->handshake->retransmit_state = MBEDTLS_SSL_RETRANS_WAITING;
   \                     ??mbedtls_ssl_send_flight_completed_0: (+1)
   \       0x2C   0x2002             MOVS     R0,#+2
   \       0x2E   0x6BE1             LDR      R1,[R4, #+60]
   \       0x30   0xF881 0x01E8      STRB     R0,[R1, #+488]
   3145          }
   \       0x34   0xBD10             POP      {R4,PC}          ;; return
   3146          #endif /* MBEDTLS_SSL_PROTO_DTLS */
   3147          
   3148          /*
   3149           * Handshake layer functions
   3150           */
   3151          
   3152          /*
   3153           * Write (DTLS: or queue) current handshake (including CCS) message.
   3154           *
   3155           *  - fill in handshake headers
   3156           *  - update handshake checksum
   3157           *  - DTLS: save message for resending
   3158           *  - then pass to the record layer
   3159           *
   3160           * DTLS: except for HelloRequest, messages are only queued, and will only be
   3161           * actually sent when calling flight_transmit() or resend().
   3162           *
   3163           * Inputs:
   3164           *  - ssl->out_msglen: 4 + actual handshake message len
   3165           *      (4 is the size of handshake headers for TLS)
   3166           *  - ssl->out_msg[0]: the handshake type (ClientHello, ServerHello, etc)
   3167           *  - ssl->out_msg + 4: the handshake message body
   3168           *
   3169           * Outputs, ie state before passing to flight_append() or write_record():
   3170           *   - ssl->out_msglen: the length of the record contents
   3171           *      (including handshake headers but excluding record headers)
   3172           *   - ssl->out_msg: the record contents (handshake headers + content)
   3173           */

   \                                 In section .text, align 2, keep-with-next
   3174          int mbedtls_ssl_write_handshake_msg( mbedtls_ssl_context *ssl )
   3175          {
   \                     mbedtls_ssl_write_handshake_msg: (+1)
   \        0x0   0xB5FE             PUSH     {R1-R7,LR}
   \        0x2   0x4605             MOV      R5,R0
   3176              int ret;
   3177              const size_t hs_len = ssl->out_msglen - 4;
   \        0x4   0xF8D5 0x70CC      LDR      R7,[R5, #+204]
   \        0x8   0x1F3F             SUBS     R7,R7,#+4
   3178              const unsigned char hs_type = ssl->out_msg[0];
   \        0xA   0xF8D5 0x00C4      LDR      R0,[R5, #+196]
   \        0xE   0x7804             LDRB     R4,[R0, #+0]
   3179          
   3180              MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write handshake message" ) );
   \       0x10   0x....'....        LDR.W    R6,??DataTable25_8
   \       0x14   0x....'....        LDR.W    R0,??DataTable28_1
   \       0x18   0x9000             STR      R0,[SP, #+0]
   \       0x1A   0xF640 0x436C      MOVW     R3,#+3180
   \       0x1E   0x4632             MOV      R2,R6
   \       0x20   0x2102             MOVS     R1,#+2
   \       0x22   0x4628             MOV      R0,R5
   \       0x24   0x....'....        BL       mbedtls_debug_print_msg
   3181          
   3182              /*
   3183               * Sanity checks
   3184               */
   3185              if( ssl->out_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE          &&
   3186                  ssl->out_msgtype != MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC )
   \       0x28   0xF8D5 0x00C8      LDR      R0,[R5, #+200]
   \       0x2C   0x2816             CMP      R0,#+22
   \       0x2E   0xD00E             BEQ.N    ??mbedtls_ssl_write_handshake_msg_0
   \       0x30   0x2814             CMP      R0,#+20
   \       0x32   0xD00C             BEQ.N    ??mbedtls_ssl_write_handshake_msg_0
   3187              {
   3188                  /* In SSLv3, the client might send a NoCertificate alert. */
   3189          #if defined(MBEDTLS_SSL_PROTO_SSL3) && defined(MBEDTLS_SSL_CLI_C)
   3190                  if( ! ( ssl->minor_ver      == MBEDTLS_SSL_MINOR_VERSION_0 &&
   3191                          ssl->out_msgtype    == MBEDTLS_SSL_MSG_ALERT       &&
   3192                          ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT ) )
   3193          #endif /* MBEDTLS_SSL_PROTO_SSL3 && MBEDTLS_SSL_SRV_C */
   3194                  {
   3195                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
   \       0x34   0x....'....        LDR.W    R0,??DataTable28_2
   \       0x38   0x9000             STR      R0,[SP, #+0]
   \       0x3A   0xF640 0x437B      MOVW     R3,#+3195
   \       0x3E   0x4632             MOV      R2,R6
   \       0x40   0x2101             MOVS     R1,#+1
   \       0x42   0x4628             MOV      R0,R5
   \       0x44   0x....'....        BL       mbedtls_debug_print_msg
   3196                      return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   \       0x48   0x....'....        LDR.W    R0,??DataTable25_13  ;; 0xffff9400
   \       0x4C   0xBDFE             POP      {R1-R7,PC}
   3197                  }
   3198              }
   3199          
   3200              if( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE &&
   3201                  hs_type != MBEDTLS_SSL_HS_HELLO_REQUEST &&
   3202                  ssl->handshake == NULL )
   \                     ??mbedtls_ssl_write_handshake_msg_0: (+1)
   \       0x4E   0x2816             CMP      R0,#+22
   \       0x50   0xD111             BNE.N    ??mbedtls_ssl_write_handshake_msg_1
   \       0x52   0x2C00             CMP      R4,#+0
   \       0x54   0xD00F             BEQ.N    ??mbedtls_ssl_write_handshake_msg_1
   \       0x56   0x6BE8             LDR      R0,[R5, #+60]
   \       0x58   0x2800             CMP      R0,#+0
   \       0x5A   0xD10C             BNE.N    ??mbedtls_ssl_write_handshake_msg_1
   3203              {
   3204                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
   \       0x5C   0x....'....        LDR.W    R0,??DataTable28_2
   \       0x60   0x9000             STR      R0,[SP, #+0]
   \       0x62   0xF640 0x4384      MOVW     R3,#+3204
   \       0x66   0x4632             MOV      R2,R6
   \       0x68   0x2101             MOVS     R1,#+1
   \       0x6A   0x4628             MOV      R0,R5
   \       0x6C   0x....'....        BL       mbedtls_debug_print_msg
   3205                  return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   \       0x70   0x....'....        LDR.W    R0,??DataTable25_13  ;; 0xffff9400
   \       0x74   0xBDFE             POP      {R1-R7,PC}
   3206              }
   3207          
   3208          #if defined(MBEDTLS_SSL_PROTO_DTLS)
   3209              if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM &&
   3210                  ssl->handshake != NULL &&
   3211                  ssl->handshake->retransmit_state == MBEDTLS_SSL_RETRANS_SENDING )
   \                     ??mbedtls_ssl_write_handshake_msg_1: (+1)
   \       0x76   0x6828             LDR      R0,[R5, #+0]
   \       0x78   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \       0x7C   0xF3C0 0x0040      UBFX     R0,R0,#+1,#+1
   \       0x80   0x2800             CMP      R0,#+0
   \       0x82   0xD013             BEQ.N    ??mbedtls_ssl_write_handshake_msg_2
   \       0x84   0x6BE8             LDR      R0,[R5, #+60]
   \       0x86   0x2800             CMP      R0,#+0
   \       0x88   0xD010             BEQ.N    ??mbedtls_ssl_write_handshake_msg_2
   \       0x8A   0xF890 0x01E8      LDRB     R0,[R0, #+488]
   \       0x8E   0x2801             CMP      R0,#+1
   \       0x90   0xD10C             BNE.N    ??mbedtls_ssl_write_handshake_msg_2
   3212              {
   3213                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
   \       0x92   0x....'....        LDR.W    R0,??DataTable28_2
   \       0x96   0x9000             STR      R0,[SP, #+0]
   \       0x98   0xF640 0x438D      MOVW     R3,#+3213
   \       0x9C   0x4632             MOV      R2,R6
   \       0x9E   0x2101             MOVS     R1,#+1
   \       0xA0   0x4628             MOV      R0,R5
   \       0xA2   0x....'....        BL       mbedtls_debug_print_msg
   3214                  return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   \       0xA6   0x....'....        LDR.W    R0,??DataTable25_13  ;; 0xffff9400
   \       0xAA   0xBDFE             POP      {R1-R7,PC}
   3215              }
   3216          #endif
   3217          
   3218              /* Double-check that we did not exceed the bounds
   3219               * of the outgoing record buffer.
   3220               * This should never fail as the various message
   3221               * writing functions must obey the bounds of the
   3222               * outgoing record buffer, but better be safe.
   3223               *
   3224               * Note: We deliberately do not check for the MTU or MFL here.
   3225               */
   3226              if( ssl->out_msglen > MBEDTLS_SSL_OUT_CONTENT_LEN )
   \                     ??mbedtls_ssl_write_handshake_msg_2: (+1)
   \       0xAC   0xF8D5 0x00CC      LDR      R0,[R5, #+204]
   \       0xB0   0xF642 0x0101      MOVW     R1,#+10241
   \       0xB4   0x4288             CMP      R0,R1
   \       0xB6   0xD312             BCC.N    ??mbedtls_ssl_write_handshake_msg_3
   3227              {
   3228                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "Record too large: "
   3229                                              "size %u, maximum %u",
   3230                                              (unsigned) ssl->out_msglen,
   3231                                              (unsigned) MBEDTLS_SSL_OUT_CONTENT_LEN ) );
   \       0xB8   0xF44F 0x5020      MOV      R0,#+10240
   \       0xBC   0x9002             STR      R0,[SP, #+8]
   \       0xBE   0xF8D5 0x00CC      LDR      R0,[R5, #+204]
   \       0xC2   0x9001             STR      R0,[SP, #+4]
   \       0xC4   0x....'....        LDR.W    R0,??DataTable28_3
   \       0xC8   0x9000             STR      R0,[SP, #+0]
   \       0xCA   0xF640 0x439F      MOVW     R3,#+3231
   \       0xCE   0x4632             MOV      R2,R6
   \       0xD0   0x2101             MOVS     R1,#+1
   \       0xD2   0x4628             MOV      R0,R5
   \       0xD4   0x....'....        BL       mbedtls_debug_print_msg
   3232                  return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   \       0xD8   0x....'....        LDR.W    R0,??DataTable25_13  ;; 0xffff9400
   \       0xDC   0xBDFE             POP      {R1-R7,PC}
   3233              }
   3234          
   3235              /*
   3236               * Fill handshake headers
   3237               */
   3238              if( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
   \                     ??mbedtls_ssl_write_handshake_msg_3: (+1)
   \       0xDE   0xF8D5 0x00C8      LDR      R0,[R5, #+200]
   \       0xE2   0x2816             CMP      R0,#+22
   \       0xE4   0xD16C             BNE.N    ??mbedtls_ssl_write_handshake_msg_4
   3239              {
   3240                  ssl->out_msg[1] = (unsigned char)( hs_len >> 16 );
   \       0xE6   0x4638             MOV      R0,R7
   \       0xE8   0x0C00             LSRS     R0,R0,#+16
   \       0xEA   0xF8D5 0x10C4      LDR      R1,[R5, #+196]
   \       0xEE   0x7048             STRB     R0,[R1, #+1]
   3241                  ssl->out_msg[2] = (unsigned char)( hs_len >>  8 );
   \       0xF0   0x4638             MOV      R0,R7
   \       0xF2   0x0A00             LSRS     R0,R0,#+8
   \       0xF4   0xF8D5 0x10C4      LDR      R1,[R5, #+196]
   \       0xF8   0x7088             STRB     R0,[R1, #+2]
   3242                  ssl->out_msg[3] = (unsigned char)( hs_len       );
   \       0xFA   0xF8D5 0x00C4      LDR      R0,[R5, #+196]
   \       0xFE   0x70C7             STRB     R7,[R0, #+3]
   3243          
   3244                  /*
   3245                   * DTLS has additional fields in the Handshake layer,
   3246                   * between the length field and the actual payload:
   3247                   *      uint16 message_seq;
   3248                   *      uint24 fragment_offset;
   3249                   *      uint24 fragment_length;
   3250                   */
   3251          #if defined(MBEDTLS_SSL_PROTO_DTLS)
   3252                  if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
   \      0x100   0x6828             LDR      R0,[R5, #+0]
   \      0x102   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \      0x106   0xF3C0 0x0040      UBFX     R0,R0,#+1,#+1
   \      0x10A   0x2800             CMP      R0,#+0
   \      0x10C   0xD04D             BEQ.N    ??mbedtls_ssl_write_handshake_msg_5
   3253                  {
   3254                      /* Make room for the additional DTLS fields */
   3255                      if( MBEDTLS_SSL_OUT_CONTENT_LEN - ssl->out_msglen < 8 )
   \      0x10E   0xF8D5 0x00CC      LDR      R0,[R5, #+204]
   \      0x112   0xF5C0 0x5020      RSB      R0,R0,#+10240
   \      0x116   0x2808             CMP      R0,#+8
   \      0x118   0xD20F             BCS.N    ??mbedtls_ssl_write_handshake_msg_6
   3256                      {
   3257                          MBEDTLS_SSL_DEBUG_MSG( 1, ( "DTLS handshake message too large: "
   3258                                        "size %u, maximum %u",
   3259                                         (unsigned) ( hs_len ),
   3260                                         (unsigned) ( MBEDTLS_SSL_OUT_CONTENT_LEN - 12 ) ) );
   \      0x11A   0xF242 0x70F4      MOVW     R0,#+10228
   \      0x11E   0x9002             STR      R0,[SP, #+8]
   \      0x120   0x9701             STR      R7,[SP, #+4]
   \      0x122   0x....'....        LDR.W    R0,??DataTable28_4
   \      0x126   0x9000             STR      R0,[SP, #+0]
   \      0x128   0xF640 0x43BC      MOVW     R3,#+3260
   \      0x12C   0x4632             MOV      R2,R6
   \      0x12E   0x2101             MOVS     R1,#+1
   \      0x130   0x4628             MOV      R0,R5
   \      0x132   0x....'....        BL       mbedtls_debug_print_msg
   3261                          return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   \      0x136   0x....             LDR.N    R0,??DataTable23_2  ;; 0xffff8f00
   \      0x138   0xBDFE             POP      {R1-R7,PC}
   3262                      }
   3263          
   3264                      memmove( ssl->out_msg + 12, ssl->out_msg + 4, hs_len );
   \                     ??mbedtls_ssl_write_handshake_msg_6: (+1)
   \      0x13A   0x463A             MOV      R2,R7
   \      0x13C   0xF8D5 0x00C4      LDR      R0,[R5, #+196]
   \      0x140   0x1D01             ADDS     R1,R0,#+4
   \      0x142   0x300C             ADDS     R0,R0,#+12
   \      0x144   0x....'....        BL       __aeabi_memmove
   3265                      ssl->out_msglen += 8;
   \      0x148   0xF8D5 0x00CC      LDR      R0,[R5, #+204]
   \      0x14C   0x3008             ADDS     R0,R0,#+8
   \      0x14E   0xF8C5 0x00CC      STR      R0,[R5, #+204]
   3266          
   3267                      /* Write message_seq and update it, except for HelloRequest */
   3268                      if( hs_type != MBEDTLS_SSL_HS_HELLO_REQUEST )
   \      0x152   0x2C00             CMP      R4,#+0
   \      0x154   0xD014             BEQ.N    ??mbedtls_ssl_write_handshake_msg_7
   3269                      {
   3270                          ssl->out_msg[4] = ( ssl->handshake->out_msg_seq >> 8 ) & 0xFF;
   \      0x156   0x6BE8             LDR      R0,[R5, #+60]
   \      0x158   0xF8D0 0x01D4      LDR      R0,[R0, #+468]
   \      0x15C   0x0A00             LSRS     R0,R0,#+8
   \      0x15E   0xF8D5 0x10C4      LDR      R1,[R5, #+196]
   \      0x162   0x7108             STRB     R0,[R1, #+4]
   3271                          ssl->out_msg[5] = ( ssl->handshake->out_msg_seq      ) & 0xFF;
   \      0x164   0x6BE8             LDR      R0,[R5, #+60]
   \      0x166   0xF8D0 0x01D4      LDR      R0,[R0, #+468]
   \      0x16A   0xF8D5 0x10C4      LDR      R1,[R5, #+196]
   \      0x16E   0x7148             STRB     R0,[R1, #+5]
   3272                          ++( ssl->handshake->out_msg_seq );
   \      0x170   0x6BE8             LDR      R0,[R5, #+60]
   \      0x172   0xF8D0 0x01D4      LDR      R0,[R0, #+468]
   \      0x176   0x1C40             ADDS     R0,R0,#+1
   \      0x178   0x6BE9             LDR      R1,[R5, #+60]
   \      0x17A   0xF8C1 0x01D4      STR      R0,[R1, #+468]
   \      0x17E   0xE006             B.N      ??mbedtls_ssl_write_handshake_msg_8
   3273                      }
   3274                      else
   3275                      {
   3276                          ssl->out_msg[4] = 0;
   \                     ??mbedtls_ssl_write_handshake_msg_7: (+1)
   \      0x180   0x2000             MOVS     R0,#+0
   \      0x182   0xF8D5 0x10C4      LDR      R1,[R5, #+196]
   \      0x186   0x7108             STRB     R0,[R1, #+4]
   3277                          ssl->out_msg[5] = 0;
   \      0x188   0xF8D5 0x10C4      LDR      R1,[R5, #+196]
   \      0x18C   0x7148             STRB     R0,[R1, #+5]
   3278                      }
   3279          
   3280                      /* Handshake hashes are computed without fragmentation,
   3281                       * so set frag_offset = 0 and frag_len = hs_len for now */
   3282                      memset( ssl->out_msg + 6, 0x00, 3 );
   \                     ??mbedtls_ssl_write_handshake_msg_8: (+1)
   \      0x18E   0x2200             MOVS     R2,#+0
   \      0x190   0x2103             MOVS     R1,#+3
   \      0x192   0xF8D5 0x00C4      LDR      R0,[R5, #+196]
   \      0x196   0x1D80             ADDS     R0,R0,#+6
   \      0x198   0x....'....        BL       __aeabi_memset
   3283                      memcpy( ssl->out_msg + 9, ssl->out_msg + 1, 3 );
   \      0x19C   0x2203             MOVS     R2,#+3
   \      0x19E   0xF8D5 0x00C4      LDR      R0,[R5, #+196]
   \      0x1A2   0x1C41             ADDS     R1,R0,#+1
   \      0x1A4   0x3009             ADDS     R0,R0,#+9
   \      0x1A6   0x....'....        BL       __aeabi_memcpy
   3284                  }
   3285          #endif /* MBEDTLS_SSL_PROTO_DTLS */
   3286          
   3287                  /* Update running hashes of handshake messages seen */
   3288                  if( hs_type != MBEDTLS_SSL_HS_HELLO_REQUEST )
   \                     ??mbedtls_ssl_write_handshake_msg_5: (+1)
   \      0x1AA   0x2C00             CMP      R4,#+0
   \      0x1AC   0xD008             BEQ.N    ??mbedtls_ssl_write_handshake_msg_4
   3289                      ssl->handshake->update_checksum( ssl, ssl->out_msg, ssl->out_msglen );
   \      0x1AE   0xF8D5 0x20CC      LDR      R2,[R5, #+204]
   \      0x1B2   0xF8D5 0x10C4      LDR      R1,[R5, #+196]
   \      0x1B6   0x4628             MOV      R0,R5
   \      0x1B8   0x6BEB             LDR      R3,[R5, #+60]
   \      0x1BA   0xF8D3 0x3448      LDR      R3,[R3, #+1096]
   \      0x1BE   0x4798             BLX      R3
   3290              }
   3291          
   3292              /* Either send now, or just save to be sent (and resent) later */
   3293          #if defined(MBEDTLS_SSL_PROTO_DTLS)
   3294              if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM &&
   3295                  ( ssl->out_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE ||
   3296                    hs_type != MBEDTLS_SSL_HS_HELLO_REQUEST ) )
   \                     ??mbedtls_ssl_write_handshake_msg_4: (+1)
   \      0x1C0   0x6828             LDR      R0,[R5, #+0]
   \      0x1C2   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \      0x1C6   0xF3C0 0x0040      UBFX     R0,R0,#+1,#+1
   \      0x1CA   0x2800             CMP      R0,#+0
   \      0x1CC   0xD017             BEQ.N    ??mbedtls_ssl_write_handshake_msg_9
   \      0x1CE   0xF8D5 0x00C8      LDR      R0,[R5, #+200]
   \      0x1D2   0x2816             CMP      R0,#+22
   \      0x1D4   0xD101             BNE.N    ??mbedtls_ssl_write_handshake_msg_10
   \      0x1D6   0x2C00             CMP      R4,#+0
   \      0x1D8   0xD011             BEQ.N    ??mbedtls_ssl_write_handshake_msg_9
   3297              {
   3298                  if( ( ret = ssl_flight_append( ssl ) ) != 0 )
   \                     ??mbedtls_ssl_write_handshake_msg_10: (+1)
   \      0x1DA   0x4628             MOV      R0,R5
   \      0x1DC   0x....'....        BL       ssl_flight_append
   \      0x1E0   0x0004             MOVS     R4,R0
   \      0x1E2   0xD01F             BEQ.N    ??mbedtls_ssl_write_handshake_msg_11
   3299                  {
   3300                      MBEDTLS_SSL_DEBUG_RET( 1, "ssl_flight_append", ret );
   \      0x1E4   0x9401             STR      R4,[SP, #+4]
   \      0x1E6   0x....'....        LDR.W    R0,??DataTable28_5
   \      0x1EA   0x9000             STR      R0,[SP, #+0]
   \      0x1EC   0xF640 0x43E4      MOVW     R3,#+3300
   \      0x1F0   0x4632             MOV      R2,R6
   \      0x1F2   0x2101             MOVS     R1,#+1
   \      0x1F4   0x4628             MOV      R0,R5
   \      0x1F6   0x....'....        BL       mbedtls_debug_print_ret
   3301                      return( ret );
   \      0x1FA   0x4620             MOV      R0,R4
   \      0x1FC   0xBDFE             POP      {R1-R7,PC}
   3302                  }
   3303              }
   3304              else
   3305          #endif
   3306              {
   3307                  if( ( ret = mbedtls_ssl_write_record( ssl, SSL_FORCE_FLUSH ) ) != 0 )
   \                     ??mbedtls_ssl_write_handshake_msg_9: (+1)
   \      0x1FE   0x2101             MOVS     R1,#+1
   \      0x200   0x4628             MOV      R0,R5
   \      0x202   0x....'....        BL       mbedtls_ssl_write_record
   \      0x206   0x0004             MOVS     R4,R0
   \      0x208   0xD00C             BEQ.N    ??mbedtls_ssl_write_handshake_msg_11
   3308                  {
   3309                      MBEDTLS_SSL_DEBUG_RET( 1, "ssl_write_record", ret );
   \      0x20A   0x9401             STR      R4,[SP, #+4]
   \      0x20C   0x....'....        LDR.W    R0,??DataTable28_6
   \      0x210   0x9000             STR      R0,[SP, #+0]
   \      0x212   0xF640 0x43ED      MOVW     R3,#+3309
   \      0x216   0x4632             MOV      R2,R6
   \      0x218   0x2101             MOVS     R1,#+1
   \      0x21A   0x4628             MOV      R0,R5
   \      0x21C   0x....'....        BL       mbedtls_debug_print_ret
   3310                      return( ret );
   \      0x220   0x4620             MOV      R0,R4
   \      0x222   0xBDFE             POP      {R1-R7,PC}
   3311                  }
   3312              }
   3313          
   3314              MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write handshake message" ) );
   \                     ??mbedtls_ssl_write_handshake_msg_11: (+1)
   \      0x224   0x....'....        LDR.W    R0,??DataTable30
   \      0x228   0x9000             STR      R0,[SP, #+0]
   \      0x22A   0xF640 0x43F2      MOVW     R3,#+3314
   \      0x22E   0x4632             MOV      R2,R6
   \      0x230   0x2102             MOVS     R1,#+2
   \      0x232   0x4628             MOV      R0,R5
   \      0x234   0x....'....        BL       mbedtls_debug_print_msg
   3315          
   3316              return( 0 );
   \      0x238   0x2000             MOVS     R0,#+0
   \      0x23A   0xBDFE             POP      {R1-R7,PC}       ;; return
   3317          }
   3318          
   3319          /*
   3320           * Record layer functions
   3321           */
   3322          
   3323          /*
   3324           * Write current record.
   3325           *
   3326           * Uses:
   3327           *  - ssl->out_msgtype: type of the message (AppData, Handshake, Alert, CCS)
   3328           *  - ssl->out_msglen: length of the record content (excl headers)
   3329           *  - ssl->out_msg: record content
   3330           */

   \                                 In section .text, align 2, keep-with-next
   3331          int mbedtls_ssl_write_record( mbedtls_ssl_context *ssl, uint8_t force_flush )
   3332          {
   \                     mbedtls_ssl_write_record: (+1)
   \        0x0   0xE92D 0x41F8      PUSH     {R3-R8,LR}
   \        0x4   0xB085             SUB      SP,SP,#+20
   \        0x6   0x4607             MOV      R7,R0
   3333              int ret, done = 0;
   3334              size_t len = ssl->out_msglen;
   \        0x8   0xF8D7 0x40CC      LDR      R4,[R7, #+204]
   3335              uint8_t flush = force_flush;
   \        0xC   0x460D             MOV      R5,R1
   3336          
   3337              MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write record" ) );
   \        0xE   0x....             LDR.N    R6,??DataTable25_8
   \       0x10   0x....'....        LDR.W    R0,??DataTable29
   \       0x14   0x9000             STR      R0,[SP, #+0]
   \       0x16   0xF640 0x5309      MOVW     R3,#+3337
   \       0x1A   0x4632             MOV      R2,R6
   \       0x1C   0x2102             MOVS     R1,#+2
   \       0x1E   0x4638             MOV      R0,R7
   \       0x20   0x....'....        BL       mbedtls_debug_print_msg
   3338          
   3339          #if defined(MBEDTLS_ZLIB_SUPPORT)
   3340              if( ssl->transform_out != NULL &&
   3341                  ssl->session_out->compression == MBEDTLS_SSL_COMPRESS_DEFLATE )
   3342              {
   3343                  if( ( ret = ssl_compress_buf( ssl ) ) != 0 )
   3344                  {
   3345                      MBEDTLS_SSL_DEBUG_RET( 1, "ssl_compress_buf", ret );
   3346                      return( ret );
   3347                  }
   3348          
   3349                  len = ssl->out_msglen;
   3350              }
   3351          #endif /*MBEDTLS_ZLIB_SUPPORT */
   3352          
   3353          #if defined(MBEDTLS_SSL_HW_RECORD_ACCEL)
   3354              if( mbedtls_ssl_hw_record_write != NULL )
   3355              {
   3356                  MBEDTLS_SSL_DEBUG_MSG( 2, ( "going for mbedtls_ssl_hw_record_write()" ) );
   3357          
   3358                  ret = mbedtls_ssl_hw_record_write( ssl );
   3359                  if( ret != 0 && ret != MBEDTLS_ERR_SSL_HW_ACCEL_FALLTHROUGH )
   3360                  {
   3361                      MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_hw_record_write", ret );
   3362                      return( MBEDTLS_ERR_SSL_HW_ACCEL_FAILED );
   3363                  }
   3364          
   3365                  if( ret == 0 )
   3366                      done = 1;
   3367              }
   3368          #endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
   3369              if( !done )
   3370              {
   3371                  unsigned i;
   3372                  size_t protected_record_size;
   3373          
   3374                  ssl->out_hdr[0] = (unsigned char) ssl->out_msgtype;
   \       0x24   0xF8D7 0x00C8      LDR      R0,[R7, #+200]
   \       0x28   0xF8D7 0x10B8      LDR      R1,[R7, #+184]
   \       0x2C   0x7008             STRB     R0,[R1, #+0]
   3375                  mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
   3376                                     ssl->conf->transport, ssl->out_hdr + 1 );
   \       0x2E   0xF8D7 0x00B8      LDR      R0,[R7, #+184]
   \       0x32   0x1C43             ADDS     R3,R0,#+1
   \       0x34   0x6838             LDR      R0,[R7, #+0]
   \       0x36   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \       0x3A   0xF3C0 0x0240      UBFX     R2,R0,#+1,#+1
   \       0x3E   0x6979             LDR      R1,[R7, #+20]
   \       0x40   0x6938             LDR      R0,[R7, #+16]
   \       0x42   0x....'....        BL       mbedtls_ssl_write_version
   3377          
   3378                  memcpy( ssl->out_ctr, ssl->cur_out_ctr, 8 );
   \       0x46   0x2208             MOVS     R2,#+8
   \       0x48   0xF107 0x01D4      ADD      R1,R7,#+212
   \       0x4C   0xF8D7 0x00B4      LDR      R0,[R7, #+180]
   \       0x50   0x....'....        BL       __aeabi_memcpy
   3379                  ssl->out_len[0] = (unsigned char)( len >> 8 );
   \       0x54   0x4620             MOV      R0,R4
   \       0x56   0x0A00             LSRS     R0,R0,#+8
   \       0x58   0xF8D7 0x10BC      LDR      R1,[R7, #+188]
   \       0x5C   0x7008             STRB     R0,[R1, #+0]
   3380                  ssl->out_len[1] = (unsigned char)( len      );
   \       0x5E   0xF8D7 0x00BC      LDR      R0,[R7, #+188]
   \       0x62   0x7044             STRB     R4,[R0, #+1]
   3381          
   3382                  if( ssl->transform_out != NULL )
   \       0x64   0x6C78             LDR      R0,[R7, #+68]
   \       0x66   0x2800             CMP      R0,#+0
   \       0x68   0xD01B             BEQ.N    ??mbedtls_ssl_write_record_0
   3383                  {
   3384                      if( ( ret = ssl_encrypt_buf( ssl ) ) != 0 )
   \       0x6A   0x4638             MOV      R0,R7
   \       0x6C   0x....'....        BL       ssl_encrypt_buf
   \       0x70   0x0004             MOVS     R4,R0
   \       0x72   0xD00C             BEQ.N    ??mbedtls_ssl_write_record_1
   3385                      {
   3386                          MBEDTLS_SSL_DEBUG_RET( 1, "ssl_encrypt_buf", ret );
   \       0x74   0x9401             STR      R4,[SP, #+4]
   \       0x76   0x....'....        LDR.W    R0,??DataTable29_1
   \       0x7A   0x9000             STR      R0,[SP, #+0]
   \       0x7C   0xF640 0x533A      MOVW     R3,#+3386
   \       0x80   0x4632             MOV      R2,R6
   \       0x82   0x2101             MOVS     R1,#+1
   \       0x84   0x4638             MOV      R0,R7
   \       0x86   0x....'....        BL       mbedtls_debug_print_ret
   3387                          return( ret );
   \       0x8A   0x4620             MOV      R0,R4
   \       0x8C   0xE0AF             B.N      ??mbedtls_ssl_write_record_2
   3388                      }
   3389          
   3390                      len = ssl->out_msglen;
   \                     ??mbedtls_ssl_write_record_1: (+1)
   \       0x8E   0xF8D7 0x40CC      LDR      R4,[R7, #+204]
   3391                      ssl->out_len[0] = (unsigned char)( len >> 8 );
   \       0x92   0x4620             MOV      R0,R4
   \       0x94   0x0A00             LSRS     R0,R0,#+8
   \       0x96   0xF8D7 0x10BC      LDR      R1,[R7, #+188]
   \       0x9A   0x7008             STRB     R0,[R1, #+0]
   3392                      ssl->out_len[1] = (unsigned char)( len      );
   \       0x9C   0xF8D7 0x00BC      LDR      R0,[R7, #+188]
   \       0xA0   0x7044             STRB     R4,[R0, #+1]
   3393                  }
   3394          
   3395                  protected_record_size = len + mbedtls_ssl_hdr_len( ssl );
   \                     ??mbedtls_ssl_write_record_0: (+1)
   \       0xA2   0x4638             MOV      R0,R7
   \       0xA4   0x....'....        BL       mbedtls_ssl_hdr_len
   \       0xA8   0x4680             MOV      R8,R0
   \       0xAA   0x44A0             ADD      R8,R8,R4
   3396          
   3397          #if defined(MBEDTLS_SSL_PROTO_DTLS)
   3398                  /* In case of DTLS, double-check that we don't exceed
   3399                   * the remaining space in the datagram. */
   3400                  if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
   \       0xAC   0x6838             LDR      R0,[R7, #+0]
   \       0xAE   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \       0xB2   0xF3C0 0x0040      UBFX     R0,R0,#+1,#+1
   \       0xB6   0x2800             CMP      R0,#+0
   \       0xB8   0xD009             BEQ.N    ??mbedtls_ssl_write_record_3
   3401                  {
   3402                      ret = ssl_get_remaining_space_in_datagram( ssl );
   \       0xBA   0x4638             MOV      R0,R7
   \       0xBC   0x....'....        BL       ssl_get_remaining_space_in_datagram
   3403                      if( ret < 0 )
   \       0xC0   0x2800             CMP      R0,#+0
   \       0xC2   0xF100 0x8094      BMI.W    ??mbedtls_ssl_write_record_2
   3404                          return( ret );
   3405          
   3406                      if( protected_record_size > (size_t) ret )
   \       0xC6   0x4540             CMP      R0,R8
   \       0xC8   0xD201             BCS.N    ??mbedtls_ssl_write_record_3
   3407                      {
   3408                          /* Should never happen */
   3409                          return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   \       0xCA   0x....             LDR.N    R0,??DataTable25_13  ;; 0xffff9400
   \       0xCC   0xE08F             B.N      ??mbedtls_ssl_write_record_2
   3410                      }
   3411                  }
   3412          #endif /* MBEDTLS_SSL_PROTO_DTLS */
   3413          
   3414                  MBEDTLS_SSL_DEBUG_MSG( 3, ( "output record: msgtype = %d, "
   3415                                              "version = [%d:%d], msglen = %d",
   3416                                              ssl->out_hdr[0], ssl->out_hdr[1],
   3417                                              ssl->out_hdr[2], len ) );
   \                     ??mbedtls_ssl_write_record_3: (+1)
   \       0xCE   0x9404             STR      R4,[SP, #+16]
   \       0xD0   0xF8D7 0x00B8      LDR      R0,[R7, #+184]
   \       0xD4   0x7880             LDRB     R0,[R0, #+2]
   \       0xD6   0x9003             STR      R0,[SP, #+12]
   \       0xD8   0xF8D7 0x00B8      LDR      R0,[R7, #+184]
   \       0xDC   0x7840             LDRB     R0,[R0, #+1]
   \       0xDE   0x9002             STR      R0,[SP, #+8]
   \       0xE0   0xF8D7 0x00B8      LDR      R0,[R7, #+184]
   \       0xE4   0x7800             LDRB     R0,[R0, #+0]
   \       0xE6   0x9001             STR      R0,[SP, #+4]
   \       0xE8   0x....'....        LDR.W    R0,??DataTable30_1
   \       0xEC   0x9000             STR      R0,[SP, #+0]
   \       0xEE   0xF640 0x5359      MOVW     R3,#+3417
   \       0xF2   0x4632             MOV      R2,R6
   \       0xF4   0x2103             MOVS     R1,#+3
   \       0xF6   0x4638             MOV      R0,R7
   \       0xF8   0x....'....        BL       mbedtls_debug_print_msg
   3418          
   3419                  MBEDTLS_SSL_DEBUG_BUF( 4, "output record sent to network",
   3420                                         ssl->out_hdr, protected_record_size );
   \       0xFC   0xF8CD 0x8008      STR      R8,[SP, #+8]
   \      0x100   0xF8D7 0x00B8      LDR      R0,[R7, #+184]
   \      0x104   0x9001             STR      R0,[SP, #+4]
   \      0x106   0x....'....        LDR.W    R0,??DataTable30_2
   \      0x10A   0x9000             STR      R0,[SP, #+0]
   \      0x10C   0xF640 0x535C      MOVW     R3,#+3420
   \      0x110   0x4632             MOV      R2,R6
   \      0x112   0x2104             MOVS     R1,#+4
   \      0x114   0x4638             MOV      R0,R7
   \      0x116   0x....'....        BL       mbedtls_debug_print_buf
   3421          
   3422                  ssl->out_left += protected_record_size;
   \      0x11A   0xF8D7 0x00D0      LDR      R0,[R7, #+208]
   \      0x11E   0x4440             ADD      R0,R8,R0
   \      0x120   0xF8C7 0x00D0      STR      R0,[R7, #+208]
   3423                  ssl->out_hdr  += protected_record_size;
   \      0x124   0xF8D7 0x00B8      LDR      R0,[R7, #+184]
   \      0x128   0x4440             ADD      R0,R0,R8
   \      0x12A   0xF8C7 0x00B8      STR      R0,[R7, #+184]
   3424                  ssl_update_out_pointers( ssl, ssl->transform_out );
   \      0x12E   0x6C79             LDR      R1,[R7, #+68]
   \      0x130   0x4638             MOV      R0,R7
   \      0x132   0x....'....        BL       ssl_update_out_pointers
   3425          
   3426                  for( i = 8; i > ssl_ep_len( ssl ); i-- )
   \      0x136   0x2408             MOVS     R4,#+8
   \                     ??mbedtls_ssl_write_record_4: (+1)
   \      0x138   0x4638             MOV      R0,R7
   \      0x13A   0x....'....        BL       ssl_ep_len
   \      0x13E   0x42A0             CMP      R0,R4
   \      0x140   0xD258             BCS.N    ??mbedtls_ssl_write_record_5
   3427                      if( ++ssl->cur_out_ctr[i - 1] != 0 )
   \      0x142   0x1938             ADDS     R0,R7,R4
   \      0x144   0xF890 0x00D3      LDRB     R0,[R0, #+211]
   \      0x148   0x1C40             ADDS     R0,R0,#+1
   \      0x14A   0x1939             ADDS     R1,R7,R4
   \      0x14C   0xF881 0x00D3      STRB     R0,[R1, #+211]
   \      0x150   0x1938             ADDS     R0,R7,R4
   \      0x152   0xF890 0x00D3      LDRB     R0,[R0, #+211]
   \      0x156   0x2800             CMP      R0,#+0
   \      0x158   0xD14C             BNE.N    ??mbedtls_ssl_write_record_5
   \      0x15A   0x1E64             SUBS     R4,R4,#+1
   \      0x15C   0xE7EC             B.N      ??mbedtls_ssl_write_record_4
   3428                          break;
   3429          
   3430                  /* The loop goes to its end iff the counter is wrapping */
   3431                  if( i == ssl_ep_len( ssl ) )
   3432                  {
   3433                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "outgoing message counter would wrap" ) );
   3434                      return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
   3435                  }
   3436              }
   3437          
   3438          #if defined(MBEDTLS_SSL_PROTO_DTLS)
   3439              if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM &&
   3440                  flush == SSL_DONT_FORCE_FLUSH )
   \                     ??mbedtls_ssl_write_record_6: (+1)
   \      0x15E   0x6838             LDR      R0,[R7, #+0]
   \      0x160   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \      0x164   0xF3C0 0x0040      UBFX     R0,R0,#+1,#+1
   \      0x168   0x2800             CMP      R0,#+0
   \      0x16A   0xD021             BEQ.N    ??mbedtls_ssl_write_record_7
   \      0x16C   0x0028             MOVS     R0,R5
   \      0x16E   0xD11F             BNE.N    ??mbedtls_ssl_write_record_7
   3441              {
   3442                  size_t remaining;
   3443                  ret = ssl_get_remaining_payload_in_datagram( ssl );
   \      0x170   0x4638             MOV      R0,R7
   \      0x172   0x....'....        BL       ssl_get_remaining_payload_in_datagram
   \      0x176   0x0004             MOVS     R4,R0
   3444                  if( ret < 0 )
   \      0x178   0xD50C             BPL.N    ??mbedtls_ssl_write_record_8
   3445                  {
   3446                      MBEDTLS_SSL_DEBUG_RET( 1, "ssl_get_remaining_payload_in_datagram",
   3447                                             ret );
   \      0x17A   0x9401             STR      R4,[SP, #+4]
   \      0x17C   0x....'....        LDR.W    R0,??DataTable30_3
   \      0x180   0x9000             STR      R0,[SP, #+0]
   \      0x182   0xF640 0x5377      MOVW     R3,#+3447
   \      0x186   0x4632             MOV      R2,R6
   \      0x188   0x2101             MOVS     R1,#+1
   \      0x18A   0x4638             MOV      R0,R7
   \      0x18C   0x....'....        BL       mbedtls_debug_print_ret
   3448                      return( ret );
   \      0x190   0x4620             MOV      R0,R4
   \      0x192   0xE02C             B.N      ??mbedtls_ssl_write_record_2
   3449                  }
   3450          
   3451                  remaining = (size_t) ret;
   3452                  if( remaining == 0 )
   \                     ??mbedtls_ssl_write_record_8: (+1)
   \      0x194   0xD101             BNE.N    ??mbedtls_ssl_write_record_9
   3453                  {
   3454                      flush = SSL_FORCE_FLUSH;
   \      0x196   0x2501             MOVS     R5,#+1
   \      0x198   0xE00A             B.N      ??mbedtls_ssl_write_record_7
   3455                  }
   3456                  else
   3457                  {
   3458                      MBEDTLS_SSL_DEBUG_MSG( 2, ( "Still %u bytes available in current datagram", (unsigned) remaining ) );
   \                     ??mbedtls_ssl_write_record_9: (+1)
   \      0x19A   0x9401             STR      R4,[SP, #+4]
   \      0x19C   0x....'....        LDR.W    R0,??DataTable30_4
   \      0x1A0   0x9000             STR      R0,[SP, #+0]
   \      0x1A2   0xF640 0x5382      MOVW     R3,#+3458
   \      0x1A6   0x4632             MOV      R2,R6
   \      0x1A8   0x2102             MOVS     R1,#+2
   \      0x1AA   0x4638             MOV      R0,R7
   \      0x1AC   0x....'....        BL       mbedtls_debug_print_msg
   3459                  }
   3460              }
   3461          #endif /* MBEDTLS_SSL_PROTO_DTLS */
   3462          
   3463              if( ( flush == SSL_FORCE_FLUSH ) &&
   3464                  ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
   \                     ??mbedtls_ssl_write_record_7: (+1)
   \      0x1B0   0x2D01             CMP      R5,#+1
   \      0x1B2   0xD111             BNE.N    ??mbedtls_ssl_write_record_10
   \      0x1B4   0x4638             MOV      R0,R7
   \      0x1B6   0x....'....        BL       mbedtls_ssl_flush_output
   \      0x1BA   0x0004             MOVS     R4,R0
   \      0x1BC   0xD00C             BEQ.N    ??mbedtls_ssl_write_record_10
   3465              {
   3466                  MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_flush_output", ret );
   \      0x1BE   0x9401             STR      R4,[SP, #+4]
   \      0x1C0   0x....'....        LDR.W    R0,??DataTable30_5
   \      0x1C4   0x9000             STR      R0,[SP, #+0]
   \      0x1C6   0xF640 0x538A      MOVW     R3,#+3466
   \      0x1CA   0x4632             MOV      R2,R6
   \      0x1CC   0x2101             MOVS     R1,#+1
   \      0x1CE   0x4638             MOV      R0,R7
   \      0x1D0   0x....'....        BL       mbedtls_debug_print_ret
   3467                  return( ret );
   \      0x1D4   0x4620             MOV      R0,R4
   \      0x1D6   0xE00A             B.N      ??mbedtls_ssl_write_record_2
   3468              }
   3469          
   3470              MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write record" ) );
   \                     ??mbedtls_ssl_write_record_10: (+1)
   \      0x1D8   0x....'....        LDR.W    R0,??DataTable30_6
   \      0x1DC   0x9000             STR      R0,[SP, #+0]
   \      0x1DE   0xF640 0x538E      MOVW     R3,#+3470
   \      0x1E2   0x4632             MOV      R2,R6
   \      0x1E4   0x2102             MOVS     R1,#+2
   \      0x1E6   0x4638             MOV      R0,R7
   \      0x1E8   0x....'....        BL       mbedtls_debug_print_msg
   3471          
   3472              return( 0 );
   \      0x1EC   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_ssl_write_record_2: (+1)
   \      0x1EE   0xB006             ADD      SP,SP,#+24
   \      0x1F0   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   \                     ??mbedtls_ssl_write_record_5: (+1)
   \      0x1F4   0x4638             MOV      R0,R7
   \      0x1F6   0x....'....        BL       ssl_ep_len
   \      0x1FA   0x4284             CMP      R4,R0
   \      0x1FC   0xD1AF             BNE.N    ??mbedtls_ssl_write_record_6
   \      0x1FE   0x....'....        LDR.W    R0,??DataTable31
   \      0x202   0x9000             STR      R0,[SP, #+0]
   \      0x204   0xF640 0x5369      MOVW     R3,#+3433
   \      0x208   0x4632             MOV      R2,R6
   \      0x20A   0x2101             MOVS     R1,#+1
   \      0x20C   0x4638             MOV      R0,R7
   \      0x20E   0x....'....        BL       mbedtls_debug_print_msg
   \      0x212   0x....'....        LDR.W    R0,??DataTable31_1  ;; 0xffff9480
   \      0x216   0xE7EA             B.N      ??mbedtls_ssl_write_record_2
   3473          }
   3474          
   3475          #if defined(MBEDTLS_SSL_PROTO_DTLS)
   3476          

   \                                 In section .text, align 2, keep-with-next
   3477          static int ssl_hs_is_proper_fragment( mbedtls_ssl_context *ssl )
   3478          {
   \                     ssl_hs_is_proper_fragment: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x4604             MOV      R4,R0
   3479              if( ssl->in_msglen < ssl->in_hslen ||
   3480                  memcmp( ssl->in_msg + 6, "\0\0\0",        3 ) != 0 ||
   3481                  memcmp( ssl->in_msg + 9, ssl->in_msg + 1, 3 ) != 0 )
   \        0x4   0x6FE0             LDR      R0,[R4, #+124]
   \        0x6   0xF8D4 0x10A0      LDR      R1,[R4, #+160]
   \        0xA   0x4288             CMP      R0,R1
   \        0xC   0xD30F             BCC.N    ??ssl_hs_is_proper_fragment_0
   \        0xE   0x2203             MOVS     R2,#+3
   \       0x10   0x....             ADR.N    R1,??DataTable25_7  ;; 0x00, 0x00, 0x00, 0x00
   \       0x12   0x6F20             LDR      R0,[R4, #+112]
   \       0x14   0x1D80             ADDS     R0,R0,#+6
   \       0x16   0x....'....        BL       memcmp
   \       0x1A   0x2800             CMP      R0,#+0
   \       0x1C   0xD107             BNE.N    ??ssl_hs_is_proper_fragment_0
   \       0x1E   0x2203             MOVS     R2,#+3
   \       0x20   0x6F20             LDR      R0,[R4, #+112]
   \       0x22   0x1C41             ADDS     R1,R0,#+1
   \       0x24   0x3009             ADDS     R0,R0,#+9
   \       0x26   0x....'....        BL       memcmp
   \       0x2A   0x2800             CMP      R0,#+0
   \       0x2C   0xD001             BEQ.N    ??ssl_hs_is_proper_fragment_1
   3482              {
   3483                  return( 1 );
   \                     ??ssl_hs_is_proper_fragment_0: (+1)
   \       0x2E   0x2001             MOVS     R0,#+1
   \       0x30   0xBD10             POP      {R4,PC}
   3484              }
   3485              return( 0 );
   \                     ??ssl_hs_is_proper_fragment_1: (+1)
   \       0x32   0x2000             MOVS     R0,#+0
   \       0x34   0xBD10             POP      {R4,PC}          ;; return
   3486          }
   3487          

   \                                 In section .text, align 2, keep-with-next
   3488          static uint32_t ssl_get_hs_frag_len( mbedtls_ssl_context const *ssl )
   3489          {
   \                     ssl_get_hs_frag_len: (+1)
   \        0x0   0x4601             MOV      R1,R0
   3490              return( ( ssl->in_msg[9] << 16  ) |
   3491                      ( ssl->in_msg[10] << 8  ) |
   3492                        ssl->in_msg[11] );
   \        0x2   0x6F08             LDR      R0,[R1, #+112]
   \        0x4   0x7A42             LDRB     R2,[R0, #+9]
   \        0x6   0x7A80             LDRB     R0,[R0, #+10]
   \        0x8   0x0200             LSLS     R0,R0,#+8
   \        0xA   0xEA40 0x4002      ORR      R0,R0,R2, LSL #+16
   \        0xE   0x6F09             LDR      R1,[R1, #+112]
   \       0x10   0x7AC9             LDRB     R1,[R1, #+11]
   \       0x12   0x4308             ORRS     R0,R1,R0
   \       0x14   0x4770             BX       LR               ;; return
   3493          }
   3494          

   \                                 In section .text, align 2, keep-with-next
   3495          static uint32_t ssl_get_hs_frag_off( mbedtls_ssl_context const *ssl )
   3496          {
   \                     ssl_get_hs_frag_off: (+1)
   \        0x0   0x4601             MOV      R1,R0
   3497              return( ( ssl->in_msg[6] << 16 ) |
   3498                      ( ssl->in_msg[7] << 8  ) |
   3499                        ssl->in_msg[8] );
   \        0x2   0x6F08             LDR      R0,[R1, #+112]
   \        0x4   0x7982             LDRB     R2,[R0, #+6]
   \        0x6   0x79C0             LDRB     R0,[R0, #+7]
   \        0x8   0x0200             LSLS     R0,R0,#+8
   \        0xA   0xEA40 0x4002      ORR      R0,R0,R2, LSL #+16
   \        0xE   0x6F09             LDR      R1,[R1, #+112]
   \       0x10   0x7A09             LDRB     R1,[R1, #+8]
   \       0x12   0x4308             ORRS     R0,R1,R0
   \       0x14   0x4770             BX       LR               ;; return
   3500          }
   3501          

   \                                 In section .text, align 2, keep-with-next
   3502          static int ssl_check_hs_header( mbedtls_ssl_context const *ssl )
   3503          {
   \                     ssl_check_hs_header: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4604             MOV      R4,R0
   3504              uint32_t msg_len, frag_off, frag_len;
   3505          
   3506              msg_len  = ssl_get_hs_total_len( ssl );
   \        0x4   0x....'....        BL       ssl_get_hs_total_len
   \        0x8   0x4605             MOV      R5,R0
   3507              frag_off = ssl_get_hs_frag_off( ssl );
   \        0xA   0x4620             MOV      R0,R4
   \        0xC   0x....'....        BL       ssl_get_hs_frag_off
   \       0x10   0x4606             MOV      R6,R0
   3508              frag_len = ssl_get_hs_frag_len( ssl );
   \       0x12   0x4620             MOV      R0,R4
   \       0x14   0x....'....        BL       ssl_get_hs_frag_len
   3509          
   3510              if( frag_off > msg_len )
   \       0x18   0x42B5             CMP      R5,R6
   \       0x1A   0xD202             BCS.N    ??ssl_check_hs_header_0
   3511                  return( -1 );
   \       0x1C   0xF04F 0x30FF      MOV      R0,#-1
   \       0x20   0xBD70             POP      {R4-R6,PC}
   3512          
   3513              if( frag_len > msg_len - frag_off )
   \                     ??ssl_check_hs_header_0: (+1)
   \       0x22   0x1BAD             SUBS     R5,R5,R6
   \       0x24   0x4285             CMP      R5,R0
   \       0x26   0xD202             BCS.N    ??ssl_check_hs_header_1
   3514                  return( -1 );
   \       0x28   0xF04F 0x30FF      MOV      R0,#-1
   \       0x2C   0xBD70             POP      {R4-R6,PC}
   3515          
   3516              if( frag_len + 12 > ssl->in_msglen )
   \                     ??ssl_check_hs_header_1: (+1)
   \       0x2E   0x6FE1             LDR      R1,[R4, #+124]
   \       0x30   0x300C             ADDS     R0,R0,#+12
   \       0x32   0x4281             CMP      R1,R0
   \       0x34   0xD202             BCS.N    ??ssl_check_hs_header_2
   3517                  return( -1 );
   \       0x36   0xF04F 0x30FF      MOV      R0,#-1
   \       0x3A   0xBD70             POP      {R4-R6,PC}
   3518          
   3519              return( 0 );
   \                     ??ssl_check_hs_header_2: (+1)
   \       0x3C   0x2000             MOVS     R0,#+0
   \       0x3E   0xBD70             POP      {R4-R6,PC}       ;; return
   3520          }
   3521          
   3522          /*
   3523           * Mark bits in bitmask (used for DTLS HS reassembly)
   3524           */

   \                                 In section .text, align 2, keep-with-next
   3525          static void ssl_bitmask_set( unsigned char *mask, size_t offset, size_t len )
   3526          {
   \                     ssl_bitmask_set: (+1)
   \        0x0   0xB4F0             PUSH     {R4-R7}
   \        0x2   0x4603             MOV      R3,R0
   \        0x4   0x460C             MOV      R4,R1
   \        0x6   0x4611             MOV      R1,R2
   3527              unsigned int start_bits, end_bits;
   3528          
   3529              start_bits = 8 - ( offset % 8 );
   \        0x8   0xF004 0x0007      AND      R0,R4,#0x7
   \        0xC   0xF1C0 0x0008      RSB      R0,R0,#+8
   3530              if( start_bits != 8 )
   \       0x10   0x2808             CMP      R0,#+8
   \       0x12   0xD01A             BEQ.N    ??ssl_bitmask_set_0
   3531              {
   3532                  size_t first_byte_idx = offset / 8;
   \       0x14   0x4622             MOV      R2,R4
   \       0x16   0x08D2             LSRS     R2,R2,#+3
   3533          
   3534                  /* Special case */
   3535                  if( len <= start_bits )
   \       0x18   0x4288             CMP      R0,R1
   \       0x1A   0xD20A             BCS.N    ??ssl_bitmask_set_1
   3536                  {
   3537                      for( ; len != 0; len-- )
   3538                          mask[first_byte_idx] |= 1 << ( start_bits - len );
   3539          
   3540                      /* Avoid potential issues with offset or len becoming invalid */
   3541                      return;
   3542                  }
   3543          
   3544                  offset += start_bits; /* Now offset % 8 == 0 */
   \       0x1C   0x1904             ADDS     R4,R0,R4
   3545                  len -= start_bits;
   \       0x1E   0x1A09             SUBS     R1,R1,R0
   \       0x20   0x2800             CMP      R0,#+0
   \       0x22   0xE011             B.N      ??ssl_bitmask_set_2
   \                     ??ssl_bitmask_set_3: (+1)
   \       0x24   0x5C9C             LDRB     R4,[R3, R2]
   \       0x26   0x2501             MOVS     R5,#+1
   \       0x28   0x1A46             SUBS     R6,R0,R1
   \       0x2A   0x40B5             LSLS     R5,R5,R6
   \       0x2C   0x432C             ORRS     R4,R5,R4
   \       0x2E   0x549C             STRB     R4,[R3, R2]
   \       0x30   0x1E49             SUBS     R1,R1,#+1
   \                     ??ssl_bitmask_set_1: (+1)
   \       0x32   0x2900             CMP      R1,#+0
   \       0x34   0xD1F6             BNE.N    ??ssl_bitmask_set_3
   \       0x36   0xE020             B.N      ??ssl_bitmask_set_4
   3546          
   3547                  for( ; start_bits != 0; start_bits-- )
   3548                      mask[first_byte_idx] |= 1 << ( start_bits - 1 );
   \                     ??ssl_bitmask_set_5: (+1)
   \       0x38   0x5C9D             LDRB     R5,[R3, R2]
   \       0x3A   0x2601             MOVS     R6,#+1
   \       0x3C   0x4607             MOV      R7,R0
   \       0x3E   0x1E7F             SUBS     R7,R7,#+1
   \       0x40   0x40BE             LSLS     R6,R6,R7
   \       0x42   0x4335             ORRS     R5,R6,R5
   \       0x44   0x549D             STRB     R5,[R3, R2]
   \       0x46   0x1E40             SUBS     R0,R0,#+1
   \                     ??ssl_bitmask_set_2: (+1)
   \       0x48   0xD1F6             BNE.N    ??ssl_bitmask_set_5
   3549              }
   3550          
   3551              end_bits = len % 8;
   \                     ??ssl_bitmask_set_0: (+1)
   \       0x4A   0xF011 0x0007      ANDS     R0,R1,#0x7
   3552              if( end_bits != 0 )
   \       0x4E   0xD00D             BEQ.N    ??ssl_bitmask_set_6
   3553              {
   3554                  size_t last_byte_idx = ( offset + len ) / 8;
   \       0x50   0x190A             ADDS     R2,R1,R4
   \       0x52   0x08D2             LSRS     R2,R2,#+3
   3555          
   3556                  len -= end_bits; /* Now len % 8 == 0 */
   \       0x54   0x1A09             SUBS     R1,R1,R0
   \       0x56   0x2800             CMP      R0,#+0
   \       0x58   0xE007             B.N      ??ssl_bitmask_set_7
   3557          
   3558                  for( ; end_bits != 0; end_bits-- )
   3559                      mask[last_byte_idx] |= 1 << ( 8 - end_bits );
   \                     ??ssl_bitmask_set_8: (+1)
   \       0x5A   0x5C9D             LDRB     R5,[R3, R2]
   \       0x5C   0x2601             MOVS     R6,#+1
   \       0x5E   0xF1C0 0x0708      RSB      R7,R0,#+8
   \       0x62   0x40BE             LSLS     R6,R6,R7
   \       0x64   0x4335             ORRS     R5,R6,R5
   \       0x66   0x549D             STRB     R5,[R3, R2]
   \       0x68   0x1E40             SUBS     R0,R0,#+1
   \                     ??ssl_bitmask_set_7: (+1)
   \       0x6A   0xD1F6             BNE.N    ??ssl_bitmask_set_8
   3560              }
   3561          
   3562              memset( mask + offset / 8, 0xFF, len / 8 );
   \                     ??ssl_bitmask_set_6: (+1)
   \       0x6C   0x22FF             MOVS     R2,#+255
   \       0x6E   0x08C9             LSRS     R1,R1,#+3
   \       0x70   0xEB13 0x00D4      ADDS     R0,R3,R4, LSR #+3
   \       0x74   0xBCF0             POP      {R4-R7}
   \       0x76   0x....'....        B.W      __aeabi_memset
   \                     ??ssl_bitmask_set_4: (+1)
   \       0x7A   0xBCF0             POP      {R4-R7}
   \       0x7C   0x4770             BX       LR               ;; return
   3563          }
   3564          
   3565          /*
   3566           * Check that bitmask is full
   3567           */

   \                                 In section .text, align 2, keep-with-next
   3568          static int ssl_bitmask_check( unsigned char *mask, size_t len )
   3569          {
   \                     ssl_bitmask_check: (+1)
   \        0x0   0xB430             PUSH     {R4,R5}
   3570              size_t i;
   3571          
   3572              for( i = 0; i < len / 8; i++ )
   \        0x2   0x2200             MOVS     R2,#+0
   \        0x4   0xE003             B.N      ??ssl_bitmask_check_0
   3573                  if( mask[i] != 0xFF )
   \                     ??ssl_bitmask_check_1: (+1)
   \        0x6   0x5C83             LDRB     R3,[R0, R2]
   \        0x8   0x2BFF             CMP      R3,#+255
   \        0xA   0xD113             BNE.N    ??ssl_bitmask_check_2
   \        0xC   0x1C52             ADDS     R2,R2,#+1
   \                     ??ssl_bitmask_check_0: (+1)
   \        0xE   0xEBB2 0x0FD1      CMP      R2,R1, LSR #+3
   \       0x12   0xD3F8             BCC.N    ??ssl_bitmask_check_1
   3574                      return( -1 );
   3575          
   3576              for( i = 0; i < len % 8; i++ )
   \       0x14   0x2200             MOVS     R2,#+0
   \                     ??ssl_bitmask_check_3: (+1)
   \       0x16   0xF001 0x0307      AND      R3,R1,#0x7
   \       0x1A   0x429A             CMP      R2,R3
   \       0x1C   0xD20D             BCS.N    ??ssl_bitmask_check_4
   3577                  if( ( mask[len / 8] & ( 1 << ( 7 - i ) ) ) == 0 )
   \       0x1E   0x460B             MOV      R3,R1
   \       0x20   0x08DB             LSRS     R3,R3,#+3
   \       0x22   0x5CC3             LDRB     R3,[R0, R3]
   \       0x24   0x2401             MOVS     R4,#+1
   \       0x26   0xF1C2 0x0507      RSB      R5,R2,#+7
   \       0x2A   0x40AC             LSLS     R4,R4,R5
   \       0x2C   0x4223             TST      R3,R4
   \       0x2E   0xD001             BEQ.N    ??ssl_bitmask_check_2
   \       0x30   0x1C52             ADDS     R2,R2,#+1
   \       0x32   0xE7F0             B.N      ??ssl_bitmask_check_3
   3578                      return( -1 );
   \                     ??ssl_bitmask_check_2: (+1)
   \       0x34   0xF04F 0x30FF      MOV      R0,#-1
   \       0x38   0xE000             B.N      ??ssl_bitmask_check_5
   3579          
   3580              return( 0 );
   \                     ??ssl_bitmask_check_4: (+1)
   \       0x3A   0x2000             MOVS     R0,#+0
   \                     ??ssl_bitmask_check_5: (+1)
   \       0x3C   0xBC30             POP      {R4,R5}
   \       0x3E   0x4770             BX       LR               ;; return
   3581          }
   3582          
   3583          /* msg_len does not include the handshake header */

   \                                 In section .text, align 2, keep-with-next
   3584          static size_t ssl_get_reassembly_buffer_size( size_t msg_len,
   3585                                                        unsigned add_bitmap )
   3586          {
   \                     ssl_get_reassembly_buffer_size: (+1)
   \        0x0   0x4602             MOV      R2,R0
   3587              size_t alloc_len;
   3588          
   3589              alloc_len  = 12;                                 /* Handshake header */
   3590              alloc_len += msg_len;                            /* Content buffer   */
   \        0x2   0xF102 0x000C      ADD      R0,R2,#+12
   3591          
   3592              if( add_bitmap )
   \        0x6   0x2900             CMP      R1,#+0
   \        0x8   0xD008             BEQ.N    ??ssl_get_reassembly_buffer_size_0
   3593                  alloc_len += msg_len / 8 + ( msg_len % 8 != 0 ); /* Bitmap       */
   \        0xA   0xF002 0x0107      AND      R1,R2,#0x7
   \        0xE   0x1E49             SUBS     R1,R1,#+1
   \       0x10   0x4189             SBCS     R1,R1,R1
   \       0x12   0x43C9             MVNS     R1,R1
   \       0x14   0x08D2             LSRS     R2,R2,#+3
   \       0x16   0xEB12 0x71D1      ADDS     R1,R2,R1, LSR #+31
   \       0x1A   0x1808             ADDS     R0,R1,R0
   3594          
   3595              return( alloc_len );
   \                     ??ssl_get_reassembly_buffer_size_0: (+1)
   \       0x1C   0x4770             BX       LR               ;; return
   3596          }
   3597          
   3598          #endif /* MBEDTLS_SSL_PROTO_DTLS */
   3599          

   \                                 In section .text, align 2, keep-with-next
   3600          static uint32_t ssl_get_hs_total_len( mbedtls_ssl_context const *ssl )
   3601          {
   \                     ssl_get_hs_total_len: (+1)
   \        0x0   0x4601             MOV      R1,R0
   3602              return( ( ssl->in_msg[1] << 16 ) |
   3603                      ( ssl->in_msg[2] << 8  ) |
   3604                        ssl->in_msg[3] );
   \        0x2   0x6F08             LDR      R0,[R1, #+112]
   \        0x4   0x7842             LDRB     R2,[R0, #+1]
   \        0x6   0x7880             LDRB     R0,[R0, #+2]
   \        0x8   0x0200             LSLS     R0,R0,#+8
   \        0xA   0xEA40 0x4002      ORR      R0,R0,R2, LSL #+16
   \        0xE   0x6F09             LDR      R1,[R1, #+112]
   \       0x10   0x78C9             LDRB     R1,[R1, #+3]
   \       0x12   0x4308             ORRS     R0,R1,R0
   \       0x14   0x4770             BX       LR               ;; return
   3605          }
   3606          

   \                                 In section .text, align 2, keep-with-next
   3607          int mbedtls_ssl_prepare_handshake_record( mbedtls_ssl_context *ssl )
   3608          {
   \                     mbedtls_ssl_prepare_handshake_record: (+1)
   \        0x0   0xB57F             PUSH     {R0-R6,LR}
   \        0x2   0x4605             MOV      R5,R0
   3609              if( ssl->in_msglen < mbedtls_ssl_hs_hdr_len( ssl ) )
   \        0x4   0x....'....        BL       mbedtls_ssl_hs_hdr_len
   \        0x8   0x6FE9             LDR      R1,[R5, #+124]
   \        0xA   0x4281             CMP      R1,R0
   \        0xC   0xD20F             BCS.N    ??mbedtls_ssl_prepare_handshake_record_0
   3610              {
   3611                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake message too short: %d",
   3612                                      ssl->in_msglen ) );
   \        0xE   0x4608             MOV      R0,R1
   \       0x10   0x9001             STR      R0,[SP, #+4]
   \       0x12   0x....'....        LDR.W    R0,??DataTable32
   \       0x16   0x9000             STR      R0,[SP, #+0]
   \       0x18   0xF640 0x631C      MOVW     R3,#+3612
   \       0x1C   0x....'....        LDR.W    R2,??DataTable32_1
   \       0x20   0x2101             MOVS     R1,#+1
   \       0x22   0x4628             MOV      R0,R5
   \       0x24   0x....'....        BL       mbedtls_debug_print_msg
   3613                  return( MBEDTLS_ERR_SSL_INVALID_RECORD );
   \       0x28   0x....'....        LDR.W    R0,??DataTable32_2  ;; 0xffff8e00
   \       0x2C   0xE0C6             B.N      ??mbedtls_ssl_prepare_handshake_record_1
   3614              }
   3615          
   3616              ssl->in_hslen = mbedtls_ssl_hs_hdr_len( ssl ) + ssl_get_hs_total_len( ssl );
   \                     ??mbedtls_ssl_prepare_handshake_record_0: (+1)
   \       0x2E   0x4628             MOV      R0,R5
   \       0x30   0x....'....        BL       mbedtls_ssl_hs_hdr_len
   \       0x34   0x4604             MOV      R4,R0
   \       0x36   0x4628             MOV      R0,R5
   \       0x38   0x....'....        BL       ssl_get_hs_total_len
   \       0x3C   0x1904             ADDS     R4,R0,R4
   \       0x3E   0xF8C5 0x40A0      STR      R4,[R5, #+160]
   3617          
   3618              MBEDTLS_SSL_DEBUG_MSG( 3, ( "handshake message: msglen ="
   3619                                  " %d, type = %d, hslen = %d",
   3620                                  ssl->in_msglen, ssl->in_msg[0], ssl->in_hslen ) );
   \       0x42   0x....'....        LDR.W    R6,??DataTable32_1
   \       0x46   0x4620             MOV      R0,R4
   \       0x48   0x9003             STR      R0,[SP, #+12]
   \       0x4A   0x6F28             LDR      R0,[R5, #+112]
   \       0x4C   0x7800             LDRB     R0,[R0, #+0]
   \       0x4E   0x9002             STR      R0,[SP, #+8]
   \       0x50   0x6FE8             LDR      R0,[R5, #+124]
   \       0x52   0x9001             STR      R0,[SP, #+4]
   \       0x54   0x....'....        LDR.W    R0,??DataTable32_3
   \       0x58   0x9000             STR      R0,[SP, #+0]
   \       0x5A   0xF640 0x6324      MOVW     R3,#+3620
   \       0x5E   0x4632             MOV      R2,R6
   \       0x60   0x2103             MOVS     R1,#+3
   \       0x62   0x4628             MOV      R0,R5
   \       0x64   0x....'....        BL       mbedtls_debug_print_msg
   3621          
   3622          #if defined(MBEDTLS_SSL_PROTO_DTLS)
   3623              if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
   \       0x68   0x6828             LDR      R0,[R5, #+0]
   \       0x6A   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \       0x6E   0xF3C0 0x0040      UBFX     R0,R0,#+1,#+1
   \       0x72   0x2800             CMP      R0,#+0
   \       0x74   0xF000 0x808F      BEQ.W    ??mbedtls_ssl_prepare_handshake_record_2
   3624              {
   3625                  int ret;
   3626                  unsigned int recv_msg_seq = ( ssl->in_msg[4] << 8 ) | ssl->in_msg[5];
   \       0x78   0x6F28             LDR      R0,[R5, #+112]
   \       0x7A   0x7900             LDRB     R0,[R0, #+4]
   \       0x7C   0x6F29             LDR      R1,[R5, #+112]
   \       0x7E   0x794C             LDRB     R4,[R1, #+5]
   \       0x80   0xEA44 0x2400      ORR      R4,R4,R0, LSL #+8
   3627          
   3628                  if( ssl_check_hs_header( ssl ) != 0 )
   \       0x84   0x4628             MOV      R0,R5
   \       0x86   0x....'....        BL       ssl_check_hs_header
   \       0x8A   0x2800             CMP      R0,#+0
   \       0x8C   0xD00C             BEQ.N    ??mbedtls_ssl_prepare_handshake_record_3
   3629                  {
   3630                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid handshake header" ) );
   \       0x8E   0x....'....        LDR.W    R0,??DataTable32_4
   \       0x92   0x9000             STR      R0,[SP, #+0]
   \       0x94   0xF640 0x632E      MOVW     R3,#+3630
   \       0x98   0x4632             MOV      R2,R6
   \       0x9A   0x2101             MOVS     R1,#+1
   \       0x9C   0x4628             MOV      R0,R5
   \       0x9E   0x....'....        BL       mbedtls_debug_print_msg
   3631                      return( MBEDTLS_ERR_SSL_INVALID_RECORD );
   \       0xA2   0x....'....        LDR.W    R0,??DataTable32_2  ;; 0xffff8e00
   \       0xA6   0xE089             B.N      ??mbedtls_ssl_prepare_handshake_record_1
   3632                  }
   3633          
   3634                  if( ssl->handshake != NULL &&
   3635                      ( ( ssl->state   != MBEDTLS_SSL_HANDSHAKE_OVER &&
   3636                          recv_msg_seq != ssl->handshake->in_msg_seq ) ||
   3637                        ( ssl->state  == MBEDTLS_SSL_HANDSHAKE_OVER &&
   3638                          ssl->in_msg[0] != MBEDTLS_SSL_HS_CLIENT_HELLO ) ) )
   \                     ??mbedtls_ssl_prepare_handshake_record_3: (+1)
   \       0xA8   0x6BE8             LDR      R0,[R5, #+60]
   \       0xAA   0x2800             CMP      R0,#+0
   \       0xAC   0xD061             BEQ.N    ??mbedtls_ssl_prepare_handshake_record_4
   \       0xAE   0x6868             LDR      R0,[R5, #+4]
   \       0xB0   0x2810             CMP      R0,#+16
   \       0xB2   0xD004             BEQ.N    ??mbedtls_ssl_prepare_handshake_record_5
   \       0xB4   0x6BE8             LDR      R0,[R5, #+60]
   \       0xB6   0xF8D0 0x01D8      LDR      R0,[R0, #+472]
   \       0xBA   0x4284             CMP      R4,R0
   \       0xBC   0xD106             BNE.N    ??mbedtls_ssl_prepare_handshake_record_6
   \                     ??mbedtls_ssl_prepare_handshake_record_5: (+1)
   \       0xBE   0x6868             LDR      R0,[R5, #+4]
   \       0xC0   0x2810             CMP      R0,#+16
   \       0xC2   0xD156             BNE.N    ??mbedtls_ssl_prepare_handshake_record_4
   \       0xC4   0x6F28             LDR      R0,[R5, #+112]
   \       0xC6   0x7800             LDRB     R0,[R0, #+0]
   \       0xC8   0x2801             CMP      R0,#+1
   \       0xCA   0xD052             BEQ.N    ??mbedtls_ssl_prepare_handshake_record_4
   3639                  {
   3640                      if( recv_msg_seq > ssl->handshake->in_msg_seq )
   \                     ??mbedtls_ssl_prepare_handshake_record_6: (+1)
   \       0xCC   0x6BE8             LDR      R0,[R5, #+60]
   \       0xCE   0xF8D0 0x01D8      LDR      R0,[R0, #+472]
   \       0xD2   0x42A0             CMP      R0,R4
   \       0xD4   0x6BE8             LDR      R0,[R5, #+60]
   \       0xD6   0xD210             BCS.N    ??mbedtls_ssl_prepare_handshake_record_7
   3641                      {
   3642                          MBEDTLS_SSL_DEBUG_MSG( 2, ( "received future handshake message of sequence number %u (next %u)",
   3643                                                      recv_msg_seq,
   3644                                                      ssl->handshake->in_msg_seq ) );
   \       0xD8   0xF8D0 0x01D8      LDR      R0,[R0, #+472]
   \       0xDC   0x9002             STR      R0,[SP, #+8]
   \       0xDE   0x9401             STR      R4,[SP, #+4]
   \       0xE0   0x....'....        LDR.W    R0,??DataTable33
   \       0xE4   0x9000             STR      R0,[SP, #+0]
   \       0xE6   0xF640 0x633C      MOVW     R3,#+3644
   \       0xEA   0x4632             MOV      R2,R6
   \       0xEC   0x2102             MOVS     R1,#+2
   \       0xEE   0x4628             MOV      R0,R5
   \       0xF0   0x....'....        BL       mbedtls_debug_print_msg
   3645                          return( MBEDTLS_ERR_SSL_EARLY_MESSAGE );
   \       0xF4   0x....'....        LDR.W    R0,??DataTable33_1  ;; 0xffff9b80
   \       0xF8   0xE060             B.N      ??mbedtls_ssl_prepare_handshake_record_1
   3646                      }
   3647          
   3648                      /* Retransmit only on last message from previous flight, to avoid
   3649                       * too many retransmissions.
   3650                       * Besides, No sane server ever retransmits HelloVerifyRequest */
   3651                      if( recv_msg_seq == ssl->handshake->in_flight_start_seq - 1 &&
   3652                          ssl->in_msg[0] != MBEDTLS_SSL_HS_HELLO_VERIFY_REQUEST )
   \                     ??mbedtls_ssl_prepare_handshake_record_7: (+1)
   \       0xFA   0xF8D0 0x01F8      LDR      R0,[R0, #+504]
   \       0xFE   0x1E40             SUBS     R0,R0,#+1
   \      0x100   0x4284             CMP      R4,R0
   \      0x102   0xD124             BNE.N    ??mbedtls_ssl_prepare_handshake_record_8
   \      0x104   0x6F28             LDR      R0,[R5, #+112]
   \      0x106   0x7800             LDRB     R0,[R0, #+0]
   \      0x108   0x2803             CMP      R0,#+3
   \      0x10A   0xD020             BEQ.N    ??mbedtls_ssl_prepare_handshake_record_8
   3653                      {
   3654                          MBEDTLS_SSL_DEBUG_MSG( 2, ( "received message from last flight, "
   3655                                              "message_seq = %d, start_of_flight = %d",
   3656                                              recv_msg_seq,
   3657                                              ssl->handshake->in_flight_start_seq ) );
   \      0x10C   0x6BE8             LDR      R0,[R5, #+60]
   \      0x10E   0xF8D0 0x01F8      LDR      R0,[R0, #+504]
   \      0x112   0x9002             STR      R0,[SP, #+8]
   \      0x114   0x9401             STR      R4,[SP, #+4]
   \      0x116   0x....'....        LDR.W    R0,??DataTable33_2
   \      0x11A   0x9000             STR      R0,[SP, #+0]
   \      0x11C   0xF640 0x6349      MOVW     R3,#+3657
   \      0x120   0x4632             MOV      R2,R6
   \      0x122   0x2102             MOVS     R1,#+2
   \      0x124   0x4628             MOV      R0,R5
   \      0x126   0x....'....        BL       mbedtls_debug_print_msg
   3658          
   3659                          if( ( ret = mbedtls_ssl_resend( ssl ) ) != 0 )
   \      0x12A   0x4628             MOV      R0,R5
   \      0x12C   0x....'....        BL       mbedtls_ssl_resend
   \      0x130   0x0004             MOVS     R4,R0
   \      0x132   0xD01B             BEQ.N    ??mbedtls_ssl_prepare_handshake_record_9
   3660                          {
   3661                              MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_resend", ret );
   \      0x134   0x9401             STR      R4,[SP, #+4]
   \      0x136   0x....'....        LDR.W    R0,??DataTable33_3
   \      0x13A   0x9000             STR      R0,[SP, #+0]
   \      0x13C   0xF640 0x634D      MOVW     R3,#+3661
   \      0x140   0x4632             MOV      R2,R6
   \      0x142   0x2101             MOVS     R1,#+1
   \      0x144   0x4628             MOV      R0,R5
   \      0x146   0x....'....        BL       mbedtls_debug_print_ret
   3662                              return( ret );
   \      0x14A   0x4620             MOV      R0,R4
   \      0x14C   0xE036             B.N      ??mbedtls_ssl_prepare_handshake_record_1
   3663                          }
   3664                      }
   3665                      else
   3666                      {
   3667                          MBEDTLS_SSL_DEBUG_MSG( 2, ( "dropping out-of-sequence message: "
   3668                                              "message_seq = %d, expected = %d",
   3669                                              recv_msg_seq,
   3670                                              ssl->handshake->in_msg_seq ) );
   \                     ??mbedtls_ssl_prepare_handshake_record_8: (+1)
   \      0x14E   0x6BE8             LDR      R0,[R5, #+60]
   \      0x150   0xF8D0 0x01D8      LDR      R0,[R0, #+472]
   \      0x154   0x9002             STR      R0,[SP, #+8]
   \      0x156   0x9401             STR      R4,[SP, #+4]
   \      0x158   0x....'....        LDR.W    R0,??DataTable33_4
   \      0x15C   0x9000             STR      R0,[SP, #+0]
   \      0x15E   0xF640 0x6356      MOVW     R3,#+3670
   \      0x162   0x4632             MOV      R2,R6
   \      0x164   0x2102             MOVS     R1,#+2
   \      0x166   0x4628             MOV      R0,R5
   \      0x168   0x....'....        BL       mbedtls_debug_print_msg
   3671                      }
   3672          
   3673                      return( MBEDTLS_ERR_SSL_CONTINUE_PROCESSING );
   \                     ??mbedtls_ssl_prepare_handshake_record_9: (+1)
   \      0x16C   0x....'....        LDR.W    R0,??DataTable33_5  ;; 0xffff9a80
   \      0x170   0xE024             B.N      ??mbedtls_ssl_prepare_handshake_record_1
   3674                  }
   3675                  /* Wait until message completion to increment in_msg_seq */
   3676          
   3677                  /* Message reassembly is handled alongside buffering of future
   3678                   * messages; the commonality is that both handshake fragments and
   3679                   * future messages cannot be forwarded immediately to the
   3680                   * handshake logic layer. */
   3681                  if( ssl_hs_is_proper_fragment( ssl ) == 1 )
   \                     ??mbedtls_ssl_prepare_handshake_record_4: (+1)
   \      0x172   0x4628             MOV      R0,R5
   \      0x174   0x....'....        BL       ssl_hs_is_proper_fragment
   \      0x178   0x2801             CMP      R0,#+1
   \      0x17A   0xD11E             BNE.N    ??mbedtls_ssl_prepare_handshake_record_10
   3682                  {
   3683                      MBEDTLS_SSL_DEBUG_MSG( 2, ( "found fragmented DTLS handshake message" ) );
   \      0x17C   0x....'....        LDR.W    R0,??DataTable33_6
   \      0x180   0x9000             STR      R0,[SP, #+0]
   \      0x182   0xF640 0x6363      MOVW     R3,#+3683
   \      0x186   0x4632             MOV      R2,R6
   \      0x188   0x2102             MOVS     R1,#+2
   \      0x18A   0x4628             MOV      R0,R5
   \      0x18C   0x....'....        BL       mbedtls_debug_print_msg
   3684                      return( MBEDTLS_ERR_SSL_EARLY_MESSAGE );
   \      0x190   0x....'....        LDR.W    R0,??DataTable33_1  ;; 0xffff9b80
   \      0x194   0xE012             B.N      ??mbedtls_ssl_prepare_handshake_record_1
   3685                  }
   3686              }
   3687              else
   3688          #endif /* MBEDTLS_SSL_PROTO_DTLS */
   3689              /* With TLS we don't handle fragmentation (for now) */
   3690              if( ssl->in_msglen < ssl->in_hslen )
   \                     ??mbedtls_ssl_prepare_handshake_record_2: (+1)
   \      0x196   0x6FE8             LDR      R0,[R5, #+124]
   \      0x198   0xF8D5 0x10A0      LDR      R1,[R5, #+160]
   \      0x19C   0x4288             CMP      R0,R1
   \      0x19E   0xD20C             BCS.N    ??mbedtls_ssl_prepare_handshake_record_10
   3691              {
   3692                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "TLS handshake fragmentation not supported" ) );
   \      0x1A0   0x....'....        LDR.W    R0,??DataTable33_7
   \      0x1A4   0x9000             STR      R0,[SP, #+0]
   \      0x1A6   0xF640 0x636C      MOVW     R3,#+3692
   \      0x1AA   0x4632             MOV      R2,R6
   \      0x1AC   0x2101             MOVS     R1,#+1
   \      0x1AE   0x4628             MOV      R0,R5
   \      0x1B0   0x....'....        BL       mbedtls_debug_print_msg
   3693                  return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
   \      0x1B4   0x....'....        LDR.W    R0,??DataTable33_8  ;; 0xffff8f80
   \      0x1B8   0xE000             B.N      ??mbedtls_ssl_prepare_handshake_record_1
   3694              }
   3695          
   3696              return( 0 );
   \                     ??mbedtls_ssl_prepare_handshake_record_10: (+1)
   \      0x1BA   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_ssl_prepare_handshake_record_1: (+1)
   \      0x1BC   0xB004             ADD      SP,SP,#+16
   \      0x1BE   0xBD70             POP      {R4-R6,PC}       ;; return
   3697          }
   3698          

   \                                 In section .text, align 2, keep-with-next
   3699          void mbedtls_ssl_update_handshake_status( mbedtls_ssl_context *ssl )
   3700          {
   \                     mbedtls_ssl_update_handshake_status: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4605             MOV      R5,R0
   3701              mbedtls_ssl_handshake_params * const hs = ssl->handshake;
   \        0x4   0x6BEC             LDR      R4,[R5, #+60]
   3702          
   3703              if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER && hs != NULL )
   \        0x6   0x6868             LDR      R0,[R5, #+4]
   \        0x8   0x2810             CMP      R0,#+16
   \        0xA   0xD009             BEQ.N    ??mbedtls_ssl_update_handshake_status_0
   \        0xC   0x2C00             CMP      R4,#+0
   \        0xE   0xD007             BEQ.N    ??mbedtls_ssl_update_handshake_status_0
   3704              {
   3705                  ssl->handshake->update_checksum( ssl, ssl->in_msg, ssl->in_hslen );
   \       0x10   0xF8D5 0x20A0      LDR      R2,[R5, #+160]
   \       0x14   0x6F29             LDR      R1,[R5, #+112]
   \       0x16   0x4628             MOV      R0,R5
   \       0x18   0x4623             MOV      R3,R4
   \       0x1A   0xF8D3 0x3448      LDR      R3,[R3, #+1096]
   \       0x1E   0x4798             BLX      R3
   3706              }
   3707          
   3708              /* Handshake message is complete, increment counter */
   3709          #if defined(MBEDTLS_SSL_PROTO_DTLS)
   3710              if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM &&
   3711                  ssl->handshake != NULL )
   \                     ??mbedtls_ssl_update_handshake_status_0: (+1)
   \       0x20   0x6828             LDR      R0,[R5, #+0]
   \       0x22   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \       0x26   0xF3C0 0x0040      UBFX     R0,R0,#+1,#+1
   \       0x2A   0x2800             CMP      R0,#+0
   \       0x2C   0xD020             BEQ.N    ??mbedtls_ssl_update_handshake_status_1
   \       0x2E   0x6BE8             LDR      R0,[R5, #+60]
   \       0x30   0x2800             CMP      R0,#+0
   \       0x32   0xD01D             BEQ.N    ??mbedtls_ssl_update_handshake_status_1
   3712              {
   3713                  unsigned offset;
   3714                  mbedtls_ssl_hs_buffer *hs_buf;
   3715          
   3716                  /* Increment handshake sequence number */
   3717                  hs->in_msg_seq++;
   \       0x34   0xF8D4 0x01D8      LDR      R0,[R4, #+472]
   \       0x38   0x1C40             ADDS     R0,R0,#+1
   \       0x3A   0xF8C4 0x01D8      STR      R0,[R4, #+472]
   3718          
   3719                  /*
   3720                   * Clear up handshake buffering and reassembly structure.
   3721                   */
   3722          
   3723                  /* Free first entry */
   3724                  ssl_buffering_free_slot( ssl, 0 );
   \       0x3E   0x2100             MOVS     R1,#+0
   \       0x40   0x4628             MOV      R0,R5
   \       0x42   0x....'....        BL       ssl_buffering_free_slot
   3725          
   3726                  /* Shift all other entries */
   3727                  for( offset = 0, hs_buf = &hs->buffering.hs[0];
   \       0x46   0x2100             MOVS     R1,#+0
   \       0x48   0xF504 0x7004      ADD      R0,R4,#+528
   \       0x4C   0xE007             B.N      ??mbedtls_ssl_update_handshake_status_2
   3728                       offset + 1 < MBEDTLS_SSL_MAX_BUFFERED_HS;
   3729                       offset++, hs_buf++ )
   3730                  {
   3731                      *hs_buf = *(hs_buf + 1);
   \                     ??mbedtls_ssl_update_handshake_status_3: (+1)
   \       0x4E   0xF100 0x020C      ADD      R2,R0,#+12
   \       0x52   0xE892 0x0038      LDM      R2,{R3-R5}
   \       0x56   0xE880 0x0038      STM      R0,{R3-R5}
   3732                  }
   \       0x5A   0x1C49             ADDS     R1,R1,#+1
   \       0x5C   0x300C             ADDS     R0,R0,#+12
   \                     ??mbedtls_ssl_update_handshake_status_2: (+1)
   \       0x5E   0x1C4A             ADDS     R2,R1,#+1
   \       0x60   0x2A04             CMP      R2,#+4
   \       0x62   0xD3F4             BCC.N    ??mbedtls_ssl_update_handshake_status_3
   3733          
   3734                  /* Create a fresh last entry */
   3735                  memset( hs_buf, 0, sizeof( mbedtls_ssl_hs_buffer ) );
   \       0x64   0x2200             MOVS     R2,#+0
   \       0x66   0x210C             MOVS     R1,#+12
   \       0x68   0xE8BD 0x4038      POP      {R3-R5,LR}
   \       0x6C   0x....'....        B.W      __aeabi_memset4
   3736              }
   3737          #endif
   3738          }
   \                     ??mbedtls_ssl_update_handshake_status_1: (+1)
   \       0x70   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   3739          
   3740          /*
   3741           * DTLS anti-replay: RFC 6347 4.1.2.6
   3742           *
   3743           * in_window is a field of bits numbered from 0 (lsb) to 63 (msb).
   3744           * Bit n is set iff record number in_window_top - n has been seen.
   3745           *
   3746           * Usually, in_window_top is the last record number seen and the lsb of
   3747           * in_window is set. The only exception is the initial state (record number 0
   3748           * not seen yet).
   3749           */
   3750          #if defined(MBEDTLS_SSL_DTLS_ANTI_REPLAY)

   \                                 In section .text, align 2, keep-with-next
   3751          static void ssl_dtls_replay_reset( mbedtls_ssl_context *ssl )
   3752          {
   3753              ssl->in_window_top = 0;
   \                     ssl_dtls_replay_reset: (+1)
   \        0x0   0x2200             MOVS     R2,#+0
   \        0x2   0x4613             MOV      R3,R2
   \        0x4   0xE9C0 0x2324      STRD     R2,R3,[R0, #+144]
   3754              ssl->in_window = 0;
   \        0x8   0xE9C0 0x2326      STRD     R2,R3,[R0, #+152]
   3755          }
   \        0xC   0x4770             BX       LR               ;; return
   3756          

   \                                 In section .text, align 2, keep-with-next
   3757          static inline uint64_t ssl_load_six_bytes( unsigned char *buf )
   3758          {
   \                     ssl_load_six_bytes: (+1)
   \        0x0   0xB430             PUSH     {R4,R5}
   3759              return( ( (uint64_t) buf[0] << 40 ) |
   3760                      ( (uint64_t) buf[1] << 32 ) |
   3761                      ( (uint64_t) buf[2] << 24 ) |
   3762                      ( (uint64_t) buf[3] << 16 ) |
   3763                      ( (uint64_t) buf[4] <<  8 ) |
   3764                      ( (uint64_t) buf[5]       ) );
   \        0x2   0x7804             LDRB     R4,[R0, #+0]
   \        0x4   0x0225             LSLS     R5,R4,#+8
   \        0x6   0x2400             MOVS     R4,#+0
   \        0x8   0x7842             LDRB     R2,[R0, #+1]
   \        0xA   0x4613             MOV      R3,R2
   \        0xC   0x431D             ORRS     R5,R5,R3
   \        0xE   0x7882             LDRB     R2,[R0, #+2]
   \       0x10   0x4623             MOV      R3,R4
   \       0x12   0xEA54 0x6402      ORRS     R4,R4,R2, LSL #+24
   \       0x16   0x78C2             LDRB     R2,[R0, #+3]
   \       0x18   0xEA54 0x4402      ORRS     R4,R4,R2, LSL #+16
   \       0x1C   0x7902             LDRB     R2,[R0, #+4]
   \       0x1E   0xEA54 0x2202      ORRS     R2,R4,R2, LSL #+8
   \       0x22   0x432B             ORRS     R3,R5,R3
   \       0x24   0x7940             LDRB     R0,[R0, #+5]
   \       0x26   0x2100             MOVS     R1,#+0
   \       0x28   0x4310             ORRS     R0,R2,R0
   \       0x2A   0x4319             ORRS     R1,R3,R1
   \       0x2C   0xBC30             POP      {R4,R5}
   \       0x2E   0x4770             BX       LR               ;; return
   3765          }
   3766          
   3767          /*
   3768           * Return 0 if sequence number is acceptable, -1 otherwise
   3769           */

   \                                 In section .text, align 2, keep-with-next
   3770          int mbedtls_ssl_dtls_replay_check( mbedtls_ssl_context *ssl )
   3771          {
   \                     mbedtls_ssl_dtls_replay_check: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x4604             MOV      R4,R0
   3772              uint64_t rec_seqnum = ssl_load_six_bytes( ssl->in_ctr + 2 );
   \        0x4   0x6E20             LDR      R0,[R4, #+96]
   \        0x6   0x1C80             ADDS     R0,R0,#+2
   \        0x8   0x....'....        BL       ssl_load_six_bytes
   3773              uint64_t bit;
   3774          
   3775              if( ssl->conf->anti_replay == MBEDTLS_SSL_ANTI_REPLAY_DISABLED )
   \        0xC   0x6822             LDR      R2,[R4, #+0]
   \        0xE   0xF8D2 0x20CC      LDR      R2,[R2, #+204]
   \       0x12   0xF3C2 0x22C0      UBFX     R2,R2,#+11,#+1
   \       0x16   0x2A00             CMP      R2,#+0
   \       0x18   0xD101             BNE.N    ??mbedtls_ssl_dtls_replay_check_0
   3776                  return( 0 );
   \       0x1A   0x2000             MOVS     R0,#+0
   \       0x1C   0xBD10             POP      {R4,PC}
   3777          
   3778              if( rec_seqnum > ssl->in_window_top )
   \                     ??mbedtls_ssl_dtls_replay_check_0: (+1)
   \       0x1E   0xE9D4 0x2324      LDRD     R2,R3,[R4, #+144]
   \       0x22   0x428B             CMP      R3,R1
   \       0x24   0xD804             BHI.N    ??mbedtls_ssl_dtls_replay_check_1
   \       0x26   0xD301             BCC.N    ??mbedtls_ssl_dtls_replay_check_2
   \       0x28   0x4282             CMP      R2,R0
   \       0x2A   0xD201             BCS.N    ??mbedtls_ssl_dtls_replay_check_1
   3779                  return( 0 );
   \                     ??mbedtls_ssl_dtls_replay_check_2: (+1)
   \       0x2C   0x2000             MOVS     R0,#+0
   \       0x2E   0xBD10             POP      {R4,PC}
   3780          
   3781              bit = ssl->in_window_top - rec_seqnum;
   \                     ??mbedtls_ssl_dtls_replay_check_1: (+1)
   \       0x30   0x1A12             SUBS     R2,R2,R0
   \       0x32   0x418B             SBCS     R3,R3,R1
   3782          
   3783              if( bit >= 64 )
   \       0x34   0x2B00             CMP      R3,#+0
   \       0x36   0xD305             BCC.N    ??mbedtls_ssl_dtls_replay_check_3
   \       0x38   0xD801             BHI.N    ??mbedtls_ssl_dtls_replay_check_4
   \       0x3A   0x2A40             CMP      R2,#+64
   \       0x3C   0xD302             BCC.N    ??mbedtls_ssl_dtls_replay_check_3
   3784                  return( -1 );
   \                     ??mbedtls_ssl_dtls_replay_check_4: (+1)
   \       0x3E   0xF04F 0x30FF      MOV      R0,#-1
   \       0x42   0xBD10             POP      {R4,PC}
   3785          
   3786              if( ( ssl->in_window & ( (uint64_t) 1 << bit ) ) != 0 )
   \                     ??mbedtls_ssl_dtls_replay_check_3: (+1)
   \       0x44   0xE9D4 0x0126      LDRD     R0,R1,[R4, #+152]
   \       0x48   0x....'....        BL       __aeabi_llsr
   \       0x4C   0x07C0             LSLS     R0,R0,#+31
   \       0x4E   0xD502             BPL.N    ??mbedtls_ssl_dtls_replay_check_5
   3787                  return( -1 );
   \       0x50   0xF04F 0x30FF      MOV      R0,#-1
   \       0x54   0xBD10             POP      {R4,PC}
   3788          
   3789              return( 0 );
   \                     ??mbedtls_ssl_dtls_replay_check_5: (+1)
   \       0x56   0x2000             MOVS     R0,#+0
   \       0x58   0xBD10             POP      {R4,PC}          ;; return
   3790          }
   3791          
   3792          /*
   3793           * Update replay window on new validated record
   3794           */

   \                                 In section .text, align 2, keep-with-next
   3795          void mbedtls_ssl_dtls_replay_update( mbedtls_ssl_context *ssl )
   3796          {
   \                     mbedtls_ssl_dtls_replay_update: (+1)
   \        0x0   0xB5D0             PUSH     {R4,R6,R7,LR}
   \        0x2   0x4604             MOV      R4,R0
   3797              uint64_t rec_seqnum = ssl_load_six_bytes( ssl->in_ctr + 2 );
   \        0x4   0x6E20             LDR      R0,[R4, #+96]
   \        0x6   0x1C80             ADDS     R0,R0,#+2
   \        0x8   0x....'....        BL       ssl_load_six_bytes
   \        0xC   0x4606             MOV      R6,R0
   \        0xE   0x460F             MOV      R7,R1
   3798          
   3799              if( ssl->conf->anti_replay == MBEDTLS_SSL_ANTI_REPLAY_DISABLED )
   \       0x10   0x6820             LDR      R0,[R4, #+0]
   \       0x12   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \       0x16   0xF3C0 0x20C0      UBFX     R0,R0,#+11,#+1
   \       0x1A   0x2800             CMP      R0,#+0
   \       0x1C   0xD032             BEQ.N    ??mbedtls_ssl_dtls_replay_update_0
   3800                  return;
   3801          
   3802              if( rec_seqnum > ssl->in_window_top )
   \       0x1E   0xE9D4 0x0124      LDRD     R0,R1,[R4, #+144]
   \       0x22   0x42B9             CMP      R1,R7
   \       0x24   0xD81C             BHI.N    ??mbedtls_ssl_dtls_replay_update_1
   \       0x26   0xD301             BCC.N    ??mbedtls_ssl_dtls_replay_update_2
   \       0x28   0x42B0             CMP      R0,R6
   \       0x2A   0xD219             BCS.N    ??mbedtls_ssl_dtls_replay_update_1
   3803              {
   3804                  /* Update window_top and the contents of the window */
   3805                  uint64_t shift = rec_seqnum - ssl->in_window_top;
   \                     ??mbedtls_ssl_dtls_replay_update_2: (+1)
   \       0x2C   0x1A32             SUBS     R2,R6,R0
   \       0x2E   0xEB67 0x0301      SBC      R3,R7,R1
   3806          
   3807                  if( shift >= 64 )
   \       0x32   0x2B00             CMP      R3,#+0
   \       0x34   0xD307             BCC.N    ??mbedtls_ssl_dtls_replay_update_3
   \       0x36   0xD801             BHI.N    ??mbedtls_ssl_dtls_replay_update_4
   \       0x38   0x2A40             CMP      R2,#+64
   \       0x3A   0xD304             BCC.N    ??mbedtls_ssl_dtls_replay_update_3
   3808                      ssl->in_window = 1;
   \                     ??mbedtls_ssl_dtls_replay_update_4: (+1)
   \       0x3C   0x2001             MOVS     R0,#+1
   \       0x3E   0x2100             MOVS     R1,#+0
   \       0x40   0xE9C4 0x0126      STRD     R0,R1,[R4, #+152]
   \       0x44   0xE009             B.N      ??mbedtls_ssl_dtls_replay_update_5
   3809                  else
   3810                  {
   3811                      ssl->in_window <<= shift;
   \                     ??mbedtls_ssl_dtls_replay_update_3: (+1)
   \       0x46   0xE9D4 0x0126      LDRD     R0,R1,[R4, #+152]
   \       0x4A   0x....'....        BL       __aeabi_llsl
   \       0x4E   0xE9C4 0x0126      STRD     R0,R1,[R4, #+152]
   3812                      ssl->in_window |= 1;
   \       0x52   0xF040 0x0001      ORR      R0,R0,#0x1
   \       0x56   0xE9C4 0x0126      STRD     R0,R1,[R4, #+152]
   3813                  }
   3814          
   3815                  ssl->in_window_top = rec_seqnum;
   \                     ??mbedtls_ssl_dtls_replay_update_5: (+1)
   \       0x5A   0xE9C4 0x6724      STRD     R6,R7,[R4, #+144]
   \       0x5E   0xBDD0             POP      {R4,R6,R7,PC}
   3816              }
   3817              else
   3818              {
   3819                  /* Mark that number as seen in the current window */
   3820                  uint64_t bit = ssl->in_window_top - rec_seqnum;
   \                     ??mbedtls_ssl_dtls_replay_update_1: (+1)
   \       0x60   0x1B82             SUBS     R2,R0,R6
   \       0x62   0xEB61 0x0307      SBC      R3,R1,R7
   3821          
   3822                  if( bit < 64 ) /* Always true, but be extra sure */
   \       0x66   0x2B00             CMP      R3,#+0
   \       0x68   0xD80C             BHI.N    ??mbedtls_ssl_dtls_replay_update_0
   \       0x6A   0xD301             BCC.N    ??mbedtls_ssl_dtls_replay_update_6
   \       0x6C   0x2A40             CMP      R2,#+64
   \       0x6E   0xD209             BCS.N    ??mbedtls_ssl_dtls_replay_update_0
   3823                      ssl->in_window |= (uint64_t) 1 << bit;
   \                     ??mbedtls_ssl_dtls_replay_update_6: (+1)
   \       0x70   0xE9D4 0x6726      LDRD     R6,R7,[R4, #+152]
   \       0x74   0x2001             MOVS     R0,#+1
   \       0x76   0x2100             MOVS     R1,#+0
   \       0x78   0x....'....        BL       __aeabi_llsl
   \       0x7C   0x4330             ORRS     R0,R6,R0
   \       0x7E   0x4339             ORRS     R1,R7,R1
   \       0x80   0xE9C4 0x0126      STRD     R0,R1,[R4, #+152]
   3824              }
   3825          }
   \                     ??mbedtls_ssl_dtls_replay_update_0: (+1)
   \       0x84   0xBDD0             POP      {R4,R6,R7,PC}    ;; return
   3826          #endif /* MBEDTLS_SSL_DTLS_ANTI_REPLAY */
   3827          
   3828          #if defined(MBEDTLS_SSL_DTLS_CLIENT_PORT_REUSE) && defined(MBEDTLS_SSL_SRV_C)
   3829          /* Forward declaration */
   3830          static int ssl_session_reset_int( mbedtls_ssl_context *ssl, int partial );
   3831          
   3832          /*
   3833           * Without any SSL context, check if a datagram looks like a ClientHello with
   3834           * a valid cookie, and if it doesn't, generate a HelloVerifyRequest message.
   3835           * Both input and output include full DTLS headers.
   3836           *
   3837           * - if cookie is valid, return 0
   3838           * - if ClientHello looks superficially valid but cookie is not,
   3839           *   fill obuf and set olen, then
   3840           *   return MBEDTLS_ERR_SSL_HELLO_VERIFY_REQUIRED
   3841           * - otherwise return a specific error code
   3842           */

   \                                 In section .text, align 2, keep-with-next
   3843          static int ssl_check_dtls_clihlo_cookie(
   3844                                     mbedtls_ssl_cookie_write_t *f_cookie_write,
   3845                                     mbedtls_ssl_cookie_check_t *f_cookie_check,
   3846                                     void *p_cookie,
   3847                                     const unsigned char *cli_id, size_t cli_id_len,
   3848                                     const unsigned char *in, size_t in_len,
   3849                                     unsigned char *obuf, size_t buf_len, size_t *olen )
   3850          {
   \                     ssl_check_dtls_clihlo_cookie: (+1)
   \        0x0   0xE92D 0x47FC      PUSH     {R2-R10,LR}
   \        0x4   0x4605             MOV      R5,R0
   \        0x6   0x460C             MOV      R4,R1
   3851              size_t sid_len, cookie_len;
   3852              unsigned char *p;
   3853          
   3854              if( f_cookie_write == NULL || f_cookie_check == NULL )
   \        0x8   0x0028             MOVS     R0,R5
   \        0xA   0xD001             BEQ.N    ??ssl_check_dtls_clihlo_cookie_0
   \        0xC   0x0020             MOVS     R0,R4
   \        0xE   0xD102             BNE.N    ??ssl_check_dtls_clihlo_cookie_1
   3855                  return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   \                     ??ssl_check_dtls_clihlo_cookie_0: (+1)
   \       0x10   0x....'....        LDR.W    R0,??DataTable33_9  ;; 0xffff8f00
   \       0x14   0xE07A             B.N      ??ssl_check_dtls_clihlo_cookie_2
   \                     ??ssl_check_dtls_clihlo_cookie_1: (+1)
   \       0x16   0x990C             LDR      R1,[SP, #+48]
   3856          
   3857              /*
   3858               * Structure of ClientHello with record and handshake headers,
   3859               * and expected values. We don't need to check a lot, more checks will be
   3860               * done when actually parsing the ClientHello - skipping those checks
   3861               * avoids code duplication and does not make cookie forging any easier.
   3862               *
   3863               *  0-0  ContentType type;                  copied, must be handshake
   3864               *  1-2  ProtocolVersion version;           copied
   3865               *  3-4  uint16 epoch;                      copied, must be 0
   3866               *  5-10 uint48 sequence_number;            copied
   3867               * 11-12 uint16 length;                     (ignored)
   3868               *
   3869               * 13-13 HandshakeType msg_type;            (ignored)
   3870               * 14-16 uint24 length;                     (ignored)
   3871               * 17-18 uint16 message_seq;                copied
   3872               * 19-21 uint24 fragment_offset;            copied, must be 0
   3873               * 22-24 uint24 fragment_length;            (ignored)
   3874               *
   3875               * 25-26 ProtocolVersion client_version;    (ignored)
   3876               * 27-58 Random random;                     (ignored)
   3877               * 59-xx SessionID session_id;              1 byte len + sid_len content
   3878               * 60+   opaque cookie<0..2^8-1>;           1 byte len + content
   3879               *       ...
   3880               *
   3881               * Minimum length is 61 bytes.
   3882               */
   3883              if( in_len < 61 ||
   3884                  in[0] != MBEDTLS_SSL_MSG_HANDSHAKE ||
   3885                  in[3] != 0 || in[4] != 0 ||
   3886                  in[19] != 0 || in[20] != 0 || in[21] != 0 )
   \       0x18   0x293D             CMP      R1,#+61
   \       0x1A   0xD31F             BCC.N    ??ssl_check_dtls_clihlo_cookie_3
   \       0x1C   0x9E0B             LDR      R6,[SP, #+44]
   \       0x1E   0x7830             LDRB     R0,[R6, #+0]
   \       0x20   0x2816             CMP      R0,#+22
   \       0x22   0xD11B             BNE.N    ??ssl_check_dtls_clihlo_cookie_3
   \       0x24   0x78F0             LDRB     R0,[R6, #+3]
   \       0x26   0x2800             CMP      R0,#+0
   \       0x28   0xD118             BNE.N    ??ssl_check_dtls_clihlo_cookie_3
   \       0x2A   0x7930             LDRB     R0,[R6, #+4]
   \       0x2C   0x2800             CMP      R0,#+0
   \       0x2E   0xD115             BNE.N    ??ssl_check_dtls_clihlo_cookie_3
   \       0x30   0x7CF0             LDRB     R0,[R6, #+19]
   \       0x32   0x2800             CMP      R0,#+0
   \       0x34   0xD112             BNE.N    ??ssl_check_dtls_clihlo_cookie_3
   \       0x36   0x7D30             LDRB     R0,[R6, #+20]
   \       0x38   0x2800             CMP      R0,#+0
   \       0x3A   0xD10F             BNE.N    ??ssl_check_dtls_clihlo_cookie_3
   \       0x3C   0x7D70             LDRB     R0,[R6, #+21]
   \       0x3E   0x2800             CMP      R0,#+0
   \       0x40   0xD10C             BNE.N    ??ssl_check_dtls_clihlo_cookie_3
   3887              {
   3888                  return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
   3889              }
   3890          
   3891              sid_len = in[59];
   \       0x42   0xF896 0xC03B      LDRB     R12,[R6, #+59]
   3892              if( sid_len > in_len - 61 )
   \       0x46   0xF1A1 0x003D      SUB      R0,R1,#+61
   \       0x4A   0x4560             CMP      R0,R12
   \       0x4C   0xD306             BCC.N    ??ssl_check_dtls_clihlo_cookie_3
   3893                  return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
   3894          
   3895              cookie_len = in[60 + sid_len];
   \       0x4E   0xEB06 0x000C      ADD      R0,R6,R12
   \       0x52   0xF890 0x003C      LDRB     R0,[R0, #+60]
   3896              if( cookie_len > in_len - 60 )
   \       0x56   0x393C             SUBS     R1,R1,#+60
   \       0x58   0x4281             CMP      R1,R0
   \       0x5A   0xD202             BCS.N    ??ssl_check_dtls_clihlo_cookie_4
   3897                  return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
   \                     ??ssl_check_dtls_clihlo_cookie_3: (+1)
   \       0x5C   0x....'....        LDR.W    R0,??DataTable34  ;; 0xffff8700
   \       0x60   0xE054             B.N      ??ssl_check_dtls_clihlo_cookie_2
   \                     ??ssl_check_dtls_clihlo_cookie_4: (+1)
   \       0x62   0xF8DD 0x8028      LDR      R8,[SP, #+40]
   \       0x66   0x461F             MOV      R7,R3
   \       0x68   0x4691             MOV      R9,R2
   3898          
   3899              if( f_cookie_check( p_cookie, in + sid_len + 61, cookie_len,
   3900                                  cli_id, cli_id_len ) == 0 )
   \       0x6A   0xF8CD 0x8000      STR      R8,[SP, #+0]
   \       0x6E   0x4602             MOV      R2,R0
   \       0x70   0xEB06 0x000C      ADD      R0,R6,R12
   \       0x74   0xF100 0x013D      ADD      R1,R0,#+61
   \       0x78   0x4648             MOV      R0,R9
   \       0x7A   0x47A0             BLX      R4
   \       0x7C   0x2800             CMP      R0,#+0
   \       0x7E   0xD101             BNE.N    ??ssl_check_dtls_clihlo_cookie_5
   3901              {
   3902                  /* Valid cookie */
   3903                  return( 0 );
   \       0x80   0x2000             MOVS     R0,#+0
   \       0x82   0xE043             B.N      ??ssl_check_dtls_clihlo_cookie_2
   3904              }
   \                     ??ssl_check_dtls_clihlo_cookie_5: (+1)
   \       0x84   0xF8DD 0xA038      LDR      R10,[SP, #+56]
   3905          
   3906              /*
   3907               * If we get here, we've got an invalid cookie, let's prepare HVR.
   3908               *
   3909               *  0-0  ContentType type;                  copied
   3910               *  1-2  ProtocolVersion version;           copied
   3911               *  3-4  uint16 epoch;                      copied
   3912               *  5-10 uint48 sequence_number;            copied
   3913               * 11-12 uint16 length;                     olen - 13
   3914               *
   3915               * 13-13 HandshakeType msg_type;            hello_verify_request
   3916               * 14-16 uint24 length;                     olen - 25
   3917               * 17-18 uint16 message_seq;                copied
   3918               * 19-21 uint24 fragment_offset;            copied
   3919               * 22-24 uint24 fragment_length;            olen - 25
   3920               *
   3921               * 25-26 ProtocolVersion server_version;    0xfe 0xff
   3922               * 27-27 opaque cookie<0..2^8-1>;           cookie_len = olen - 27, cookie
   3923               *
   3924               * Minimum length is 28.
   3925               */
   3926              if( buf_len < 28 )
   \       0x88   0xF1BA 0x0F1C      CMP      R10,#+28
   \       0x8C   0xD202             BCS.N    ??ssl_check_dtls_clihlo_cookie_6
   3927                  return( MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL );
   \       0x8E   0x....'....        LDR.W    R0,??DataTable35  ;; 0xffff9600
   \       0x92   0xE03B             B.N      ??ssl_check_dtls_clihlo_cookie_2
   \                     ??ssl_check_dtls_clihlo_cookie_6: (+1)
   \       0x94   0x9C0D             LDR      R4,[SP, #+52]
   3928          
   3929              /* Copy most fields and adapt others */
   3930              memcpy( obuf, in, 25 );
   \       0x96   0x2219             MOVS     R2,#+25
   \       0x98   0x4631             MOV      R1,R6
   \       0x9A   0x4620             MOV      R0,R4
   \       0x9C   0x....'....        BL       __aeabi_memcpy
   3931              obuf[13] = MBEDTLS_SSL_HS_HELLO_VERIFY_REQUEST;
   \       0xA0   0x2003             MOVS     R0,#+3
   \       0xA2   0x7360             STRB     R0,[R4, #+13]
   3932              obuf[25] = 0xfe;
   \       0xA4   0x20FE             MOVS     R0,#+254
   \       0xA6   0x7660             STRB     R0,[R4, #+25]
   3933              obuf[26] = 0xff;
   \       0xA8   0x20FF             MOVS     R0,#+255
   \       0xAA   0x76A0             STRB     R0,[R4, #+26]
   3934          
   3935              /* Generate and write actual cookie */
   3936              p = obuf + 28;
   \       0xAC   0xF104 0x001C      ADD      R0,R4,#+28
   \       0xB0   0x9001             STR      R0,[SP, #+4]
   3937              if( f_cookie_write( p_cookie,
   3938                                  &p, obuf + buf_len, cli_id, cli_id_len ) != 0 )
   \       0xB2   0xF8CD 0x8000      STR      R8,[SP, #+0]
   \       0xB6   0x463B             MOV      R3,R7
   \       0xB8   0xEB04 0x020A      ADD      R2,R4,R10
   \       0xBC   0xA901             ADD      R1,SP,#+4
   \       0xBE   0x4648             MOV      R0,R9
   \       0xC0   0x47A8             BLX      R5
   \       0xC2   0x2800             CMP      R0,#+0
   \       0xC4   0xD002             BEQ.N    ??ssl_check_dtls_clihlo_cookie_7
   3939              {
   3940                  return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   \       0xC6   0x....'....        LDR.W    R0,??DataTable35_1  ;; 0xffff9400
   \       0xCA   0xE01F             B.N      ??ssl_check_dtls_clihlo_cookie_2
   3941              }
   \                     ??ssl_check_dtls_clihlo_cookie_7: (+1)
   \       0xCC   0x980F             LDR      R0,[SP, #+60]
   3942          
   3943              *olen = p - obuf;
   \       0xCE   0x9901             LDR      R1,[SP, #+4]
   \       0xD0   0x1B09             SUBS     R1,R1,R4
   \       0xD2   0x6001             STR      R1,[R0, #+0]
   3944          
   3945              /* Go back and fill length fields */
   3946              obuf[27] = (unsigned char)( *olen - 28 );
   \       0xD4   0x391C             SUBS     R1,R1,#+28
   \       0xD6   0x76E1             STRB     R1,[R4, #+27]
   3947          
   3948              obuf[14] = obuf[22] = (unsigned char)( ( *olen - 25 ) >> 16 );
   \       0xD8   0x6801             LDR      R1,[R0, #+0]
   \       0xDA   0x3919             SUBS     R1,R1,#+25
   \       0xDC   0x0C09             LSRS     R1,R1,#+16
   \       0xDE   0x75A1             STRB     R1,[R4, #+22]
   \       0xE0   0x7DA1             LDRB     R1,[R4, #+22]
   \       0xE2   0x73A1             STRB     R1,[R4, #+14]
   3949              obuf[15] = obuf[23] = (unsigned char)( ( *olen - 25 ) >>  8 );
   \       0xE4   0x6801             LDR      R1,[R0, #+0]
   \       0xE6   0x3919             SUBS     R1,R1,#+25
   \       0xE8   0x0A09             LSRS     R1,R1,#+8
   \       0xEA   0x75E1             STRB     R1,[R4, #+23]
   \       0xEC   0x7DE1             LDRB     R1,[R4, #+23]
   \       0xEE   0x73E1             STRB     R1,[R4, #+15]
   3950              obuf[16] = obuf[24] = (unsigned char)( ( *olen - 25 )       );
   \       0xF0   0x6801             LDR      R1,[R0, #+0]
   \       0xF2   0x3919             SUBS     R1,R1,#+25
   \       0xF4   0x7621             STRB     R1,[R4, #+24]
   \       0xF6   0x7E21             LDRB     R1,[R4, #+24]
   \       0xF8   0x7421             STRB     R1,[R4, #+16]
   3951          
   3952              obuf[11] = (unsigned char)( ( *olen - 13 ) >>  8 );
   \       0xFA   0x6801             LDR      R1,[R0, #+0]
   \       0xFC   0x390D             SUBS     R1,R1,#+13
   \       0xFE   0x0A09             LSRS     R1,R1,#+8
   \      0x100   0x72E1             STRB     R1,[R4, #+11]
   3953              obuf[12] = (unsigned char)( ( *olen - 13 )       );
   \      0x102   0x6800             LDR      R0,[R0, #+0]
   \      0x104   0x380D             SUBS     R0,R0,#+13
   \      0x106   0x7320             STRB     R0,[R4, #+12]
   3954          
   3955              return( MBEDTLS_ERR_SSL_HELLO_VERIFY_REQUIRED );
   \      0x108   0x....'....        LDR.W    R0,??DataTable35_2  ;; 0xffff9580
   \                     ??ssl_check_dtls_clihlo_cookie_2: (+1)
   \      0x10C   0xE8BD 0x87F6      POP      {R1,R2,R4-R10,PC}  ;; return
   3956          }
   3957          
   3958          /*
   3959           * Handle possible client reconnect with the same UDP quadruplet
   3960           * (RFC 6347 Section 4.2.8).
   3961           *
   3962           * Called by ssl_parse_record_header() in case we receive an epoch 0 record
   3963           * that looks like a ClientHello.
   3964           *
   3965           * - if the input looks like a ClientHello without cookies,
   3966           *   send back HelloVerifyRequest, then
   3967           *   return MBEDTLS_ERR_SSL_HELLO_VERIFY_REQUIRED
   3968           * - if the input looks like a ClientHello with a valid cookie,
   3969           *   reset the session of the current context, and
   3970           *   return MBEDTLS_ERR_SSL_CLIENT_RECONNECT
   3971           * - if anything goes wrong, return a specific error code
   3972           *
   3973           * mbedtls_ssl_read_record() will ignore the record if anything else than
   3974           * MBEDTLS_ERR_SSL_CLIENT_RECONNECT or 0 is returned, although this function
   3975           * cannot not return 0.
   3976           */

   \                                 In section .text, align 2, keep-with-next
   3977          static int ssl_handle_possible_reconnect( mbedtls_ssl_context *ssl )
   3978          {
   \                     ssl_handle_possible_reconnect: (+1)
   \        0x0   0xB5F0             PUSH     {R4-R7,LR}
   \        0x2   0xB087             SUB      SP,SP,#+28
   \        0x4   0x4605             MOV      R5,R0
   3979              int ret;
   3980              size_t len;
   3981          
   3982              ret = ssl_check_dtls_clihlo_cookie(
   3983                      ssl->conf->f_cookie_write,
   3984                      ssl->conf->f_cookie_check,
   3985                      ssl->conf->p_cookie,
   3986                      ssl->cli_id, ssl->cli_id_len,
   3987                      ssl->in_buf, ssl->in_left,
   3988                      ssl->out_buf, MBEDTLS_SSL_OUT_CONTENT_LEN, &len );
   \        0x6   0xA806             ADD      R0,SP,#+24
   \        0x8   0x9005             STR      R0,[SP, #+20]
   \        0xA   0xF44F 0x5020      MOV      R0,#+10240
   \        0xE   0x9004             STR      R0,[SP, #+16]
   \       0x10   0xF8D5 0x00B0      LDR      R0,[R5, #+176]
   \       0x14   0x9003             STR      R0,[SP, #+12]
   \       0x16   0xF8D5 0x0080      LDR      R0,[R5, #+128]
   \       0x1A   0x9002             STR      R0,[SP, #+8]
   \       0x1C   0x6DE8             LDR      R0,[R5, #+92]
   \       0x1E   0x9001             STR      R0,[SP, #+4]
   \       0x20   0xF8D5 0x00F0      LDR      R0,[R5, #+240]
   \       0x24   0x9000             STR      R0,[SP, #+0]
   \       0x26   0xF8D5 0x30EC      LDR      R3,[R5, #+236]
   \       0x2A   0x6828             LDR      R0,[R5, #+0]
   \       0x2C   0x6CC2             LDR      R2,[R0, #+76]
   \       0x2E   0x6C81             LDR      R1,[R0, #+72]
   \       0x30   0x6C40             LDR      R0,[R0, #+68]
   \       0x32   0x....'....        BL       ssl_check_dtls_clihlo_cookie
   \       0x36   0x4604             MOV      R4,R0
   3989          
   3990              MBEDTLS_SSL_DEBUG_RET( 2, "ssl_check_dtls_clihlo_cookie", ret );
   \       0x38   0x....'....        LDR.W    R6,??DataTable32_1
   \       0x3C   0x9401             STR      R4,[SP, #+4]
   \       0x3E   0x....'....        LDR.W    R0,??DataTable35_3
   \       0x42   0x9000             STR      R0,[SP, #+0]
   \       0x44   0xF640 0x7396      MOVW     R3,#+3990
   \       0x48   0x4632             MOV      R2,R6
   \       0x4A   0x2102             MOVS     R1,#+2
   \       0x4C   0x4628             MOV      R0,R5
   \       0x4E   0x....'....        BL       mbedtls_debug_print_ret
   3991          
   3992              if( ret == MBEDTLS_ERR_SSL_HELLO_VERIFY_REQUIRED )
   \       0x52   0x....'....        LDR.W    R7,??DataTable35_2  ;; 0xffff9580
   \       0x56   0x42BC             CMP      R4,R7
   \       0x58   0xD107             BNE.N    ??ssl_handle_possible_reconnect_0
   3993              {
   3994                  /* Don't check write errors as we can't do anything here.
   3995                   * If the error is permanent we'll catch it later,
   3996                   * if it's not, then hopefully it'll work next time. */
   3997                  (void) ssl->f_send( ssl->p_bio, ssl->out_buf, len );
   \       0x5A   0x9A06             LDR      R2,[SP, #+24]
   \       0x5C   0xF8D5 0x10B0      LDR      R1,[R5, #+176]
   \       0x60   0x6AA8             LDR      R0,[R5, #+40]
   \       0x62   0x69EB             LDR      R3,[R5, #+28]
   \       0x64   0x4798             BLX      R3
   3998          
   3999                  return( MBEDTLS_ERR_SSL_HELLO_VERIFY_REQUIRED );
   \       0x66   0x4638             MOV      R0,R7
   \       0x68   0xE018             B.N      ??ssl_handle_possible_reconnect_1
   4000              }
   4001          
   4002              if( ret == 0 )
   \                     ??ssl_handle_possible_reconnect_0: (+1)
   \       0x6A   0x2C00             CMP      R4,#+0
   \       0x6C   0xD115             BNE.N    ??ssl_handle_possible_reconnect_2
   4003              {
   4004                  /* Got a valid cookie, partially reset context */
   4005                  if( ( ret = ssl_session_reset_int( ssl, 1 ) ) != 0 )
   \       0x6E   0x2101             MOVS     R1,#+1
   \       0x70   0x4628             MOV      R0,R5
   \       0x72   0x....'....        BL       ssl_session_reset_int
   \       0x76   0x0004             MOVS     R4,R0
   \       0x78   0xD00C             BEQ.N    ??ssl_handle_possible_reconnect_3
   4006                  {
   4007                      MBEDTLS_SSL_DEBUG_RET( 1, "reset", ret );
   \       0x7A   0x9401             STR      R4,[SP, #+4]
   \       0x7C   0x....'....        LDR.W    R0,??DataTable35_4
   \       0x80   0x9000             STR      R0,[SP, #+0]
   \       0x82   0xF640 0x73A7      MOVW     R3,#+4007
   \       0x86   0x4632             MOV      R2,R6
   \       0x88   0x2101             MOVS     R1,#+1
   \       0x8A   0x4628             MOV      R0,R5
   \       0x8C   0x....'....        BL       mbedtls_debug_print_ret
   4008                      return( ret );
   \       0x90   0x4620             MOV      R0,R4
   \       0x92   0xE003             B.N      ??ssl_handle_possible_reconnect_1
   4009                  }
   4010          
   4011                  return( MBEDTLS_ERR_SSL_CLIENT_RECONNECT );
   \                     ??ssl_handle_possible_reconnect_3: (+1)
   \       0x94   0x....'....        LDR.W    R0,??DataTable36  ;; 0xffff9880
   \       0x98   0xE000             B.N      ??ssl_handle_possible_reconnect_1
   4012              }
   4013          
   4014              return( ret );
   \                     ??ssl_handle_possible_reconnect_2: (+1)
   \       0x9A   0x4620             MOV      R0,R4
   \                     ??ssl_handle_possible_reconnect_1: (+1)
   \       0x9C   0xB007             ADD      SP,SP,#+28
   \       0x9E   0xBDF0             POP      {R4-R7,PC}       ;; return
   4015          }
   4016          #endif /* MBEDTLS_SSL_DTLS_CLIENT_PORT_REUSE && MBEDTLS_SSL_SRV_C */
   4017          
   4018          /*
   4019           * ContentType type;
   4020           * ProtocolVersion version;
   4021           * uint16 epoch;            // DTLS only
   4022           * uint48 sequence_number;  // DTLS only
   4023           * uint16 length;
   4024           *
   4025           * Return 0 if header looks sane (and, for DTLS, the record is expected)
   4026           * MBEDTLS_ERR_SSL_INVALID_RECORD if the header looks bad,
   4027           * MBEDTLS_ERR_SSL_UNEXPECTED_RECORD (DTLS only) if sane but unexpected.
   4028           *
   4029           * With DTLS, mbedtls_ssl_read_record() will:
   4030           * 1. proceed with the record if this function returns 0
   4031           * 2. drop only the current record if this function returns UNEXPECTED_RECORD
   4032           * 3. return CLIENT_RECONNECT if this function return that value
   4033           * 4. drop the whole datagram if this function returns anything else.
   4034           * Point 2 is needed when the peer is resending, and we have already received
   4035           * the first record from a datagram but are still waiting for the others.
   4036           */

   \                                 In section .text, align 2, keep-with-next
   4037          static int ssl_parse_record_header( mbedtls_ssl_context *ssl )
   4038          {
   \                     ssl_parse_record_header: (+1)
   \        0x0   0xB578             PUSH     {R3-R6,LR}
   \        0x2   0xB087             SUB      SP,SP,#+28
   \        0x4   0x4605             MOV      R5,R0
   4039              int major_ver, minor_ver;
   4040          
   4041              MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );
   \        0x6   0x....'....        BL       mbedtls_ssl_hdr_len
   \        0xA   0x....'....        LDR.W    R6,??DataTable32_1
   \        0xE   0x9002             STR      R0,[SP, #+8]
   \       0x10   0x6E68             LDR      R0,[R5, #+100]
   \       0x12   0x9001             STR      R0,[SP, #+4]
   \       0x14   0x....'....        LDR.W    R0,??DataTable35_5
   \       0x18   0x9000             STR      R0,[SP, #+0]
   \       0x1A   0xF640 0x73C9      MOVW     R3,#+4041
   \       0x1E   0x4632             MOV      R2,R6
   \       0x20   0x2104             MOVS     R1,#+4
   \       0x22   0x4628             MOV      R0,R5
   \       0x24   0x....'....        BL       mbedtls_debug_print_buf
   4042          
   4043              ssl->in_msgtype =  ssl->in_hdr[0];
   \       0x28   0x6E68             LDR      R0,[R5, #+100]
   \       0x2A   0x7800             LDRB     R0,[R0, #+0]
   \       0x2C   0x67A8             STR      R0,[R5, #+120]
   4044              ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
   \       0x2E   0x6EA8             LDR      R0,[R5, #+104]
   \       0x30   0x7800             LDRB     R0,[R0, #+0]
   \       0x32   0x6EA9             LDR      R1,[R5, #+104]
   \       0x34   0x7849             LDRB     R1,[R1, #+1]
   \       0x36   0xEA41 0x2100      ORR      R1,R1,R0, LSL #+8
   \       0x3A   0x67E9             STR      R1,[R5, #+124]
   4045              mbedtls_ssl_read_version( &major_ver, &minor_ver, ssl->conf->transport, ssl->in_hdr + 1 );
   \       0x3C   0x6E68             LDR      R0,[R5, #+100]
   \       0x3E   0x1C43             ADDS     R3,R0,#+1
   \       0x40   0x6828             LDR      R0,[R5, #+0]
   \       0x42   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \       0x46   0xF3C0 0x0240      UBFX     R2,R0,#+1,#+1
   \       0x4A   0xA905             ADD      R1,SP,#+20
   \       0x4C   0xA806             ADD      R0,SP,#+24
   \       0x4E   0x....'....        BL       mbedtls_ssl_read_version
   4046          
   4047              MBEDTLS_SSL_DEBUG_MSG( 3, ( "input record: msgtype = %d, "
   4048                                  "version = [%d:%d], msglen = %d",
   4049                                  ssl->in_msgtype,
   4050                                  major_ver, minor_ver, ssl->in_msglen ) );
   \       0x52   0x6FE8             LDR      R0,[R5, #+124]
   \       0x54   0x9004             STR      R0,[SP, #+16]
   \       0x56   0x9805             LDR      R0,[SP, #+20]
   \       0x58   0x9003             STR      R0,[SP, #+12]
   \       0x5A   0x9806             LDR      R0,[SP, #+24]
   \       0x5C   0x9002             STR      R0,[SP, #+8]
   \       0x5E   0x6FA8             LDR      R0,[R5, #+120]
   \       0x60   0x9001             STR      R0,[SP, #+4]
   \       0x62   0x....'....        LDR.W    R0,??DataTable36_1
   \       0x66   0x9000             STR      R0,[SP, #+0]
   \       0x68   0xF640 0x73D2      MOVW     R3,#+4050
   \       0x6C   0x4632             MOV      R2,R6
   \       0x6E   0x2103             MOVS     R1,#+3
   \       0x70   0x4628             MOV      R0,R5
   \       0x72   0x....'....        BL       mbedtls_debug_print_msg
   4051          
   4052              /* Check record type */
   4053              if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE &&
   4054                  ssl->in_msgtype != MBEDTLS_SSL_MSG_ALERT &&
   4055                  ssl->in_msgtype != MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC &&
   4056                  ssl->in_msgtype != MBEDTLS_SSL_MSG_APPLICATION_DATA )
   \       0x76   0x6FA8             LDR      R0,[R5, #+120]
   \       0x78   0x2816             CMP      R0,#+22
   \       0x7A   0xD01E             BEQ.N    ??ssl_parse_record_header_0
   \       0x7C   0x2815             CMP      R0,#+21
   \       0x7E   0xD01C             BEQ.N    ??ssl_parse_record_header_0
   \       0x80   0x2814             CMP      R0,#+20
   \       0x82   0xD01A             BEQ.N    ??ssl_parse_record_header_0
   \       0x84   0x2817             CMP      R0,#+23
   \       0x86   0xD018             BEQ.N    ??ssl_parse_record_header_0
   4057              {
   4058                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "unknown record type" ) );
   \       0x88   0x....'....        LDR.W    R0,??DataTable36_2
   \       0x8C   0x9000             STR      R0,[SP, #+0]
   \       0x8E   0xF640 0x73DA      MOVW     R3,#+4058
   \       0x92   0x4632             MOV      R2,R6
   \       0x94   0x2101             MOVS     R1,#+1
   \       0x96   0x4628             MOV      R0,R5
   \       0x98   0x....'....        BL       mbedtls_debug_print_msg
   4059          
   4060          #if defined(MBEDTLS_SSL_PROTO_DTLS)
   4061                  /* Silently ignore invalid DTLS records as recommended by RFC 6347
   4062                   * Section 4.1.2.7 */
   4063                  if( ssl->conf->transport != MBEDTLS_SSL_TRANSPORT_DATAGRAM )
   \       0x9C   0x6828             LDR      R0,[R5, #+0]
   \       0x9E   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \       0xA2   0xF3C0 0x0040      UBFX     R0,R0,#+1,#+1
   \       0xA6   0x2800             CMP      R0,#+0
   \       0xA8   0xD104             BNE.N    ??ssl_parse_record_header_1
   4064          #endif /* MBEDTLS_SSL_PROTO_DTLS */
   4065                      mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   4066                                              MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
   \       0xAA   0x220A             MOVS     R2,#+10
   \       0xAC   0x2102             MOVS     R1,#+2
   \       0xAE   0x4628             MOV      R0,R5
   \       0xB0   0x....'....        BL       mbedtls_ssl_send_alert_message
   4067          
   4068                  return( MBEDTLS_ERR_SSL_INVALID_RECORD );
   \                     ??ssl_parse_record_header_1: (+1)
   \       0xB4   0x....'....        LDR.W    R0,??DataTable32_2  ;; 0xffff8e00
   \       0xB8   0xE0FB             B.N      ??ssl_parse_record_header_2
   4069              }
   4070          
   4071              /* Check version */
   4072              if( major_ver != ssl->major_ver )
   \                     ??ssl_parse_record_header_0: (+1)
   \       0xBA   0x9806             LDR      R0,[SP, #+24]
   \       0xBC   0x6929             LDR      R1,[R5, #+16]
   \       0xBE   0x4288             CMP      R0,R1
   \       0xC0   0xD00C             BEQ.N    ??ssl_parse_record_header_3
   4073              {
   4074                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "major version mismatch" ) );
   \       0xC2   0x....'....        LDR.W    R0,??DataTable36_3
   \       0xC6   0x9000             STR      R0,[SP, #+0]
   \       0xC8   0xF640 0x73EA      MOVW     R3,#+4074
   \       0xCC   0x4632             MOV      R2,R6
   \       0xCE   0x2101             MOVS     R1,#+1
   \       0xD0   0x4628             MOV      R0,R5
   \       0xD2   0x....'....        BL       mbedtls_debug_print_msg
   4075                  return( MBEDTLS_ERR_SSL_INVALID_RECORD );
   \       0xD6   0x....'....        LDR.W    R0,??DataTable32_2  ;; 0xffff8e00
   \       0xDA   0xE0EA             B.N      ??ssl_parse_record_header_2
   4076              }
   4077          
   4078              if( minor_ver > ssl->conf->max_minor_ver )
   \                     ??ssl_parse_record_header_3: (+1)
   \       0xDC   0x6828             LDR      R0,[R5, #+0]
   \       0xDE   0xF890 0x00C9      LDRB     R0,[R0, #+201]
   \       0xE2   0x9905             LDR      R1,[SP, #+20]
   \       0xE4   0x4288             CMP      R0,R1
   \       0xE6   0xDA0C             BGE.N    ??ssl_parse_record_header_4
   4079              {
   4080                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "minor version mismatch" ) );
   \       0xE8   0x....'....        LDR.W    R0,??DataTable36_4
   \       0xEC   0x9000             STR      R0,[SP, #+0]
   \       0xEE   0xF44F 0x637F      MOV      R3,#+4080
   \       0xF2   0x4632             MOV      R2,R6
   \       0xF4   0x2101             MOVS     R1,#+1
   \       0xF6   0x4628             MOV      R0,R5
   \       0xF8   0x....'....        BL       mbedtls_debug_print_msg
   4081                  return( MBEDTLS_ERR_SSL_INVALID_RECORD );
   \       0xFC   0x....'....        LDR.W    R0,??DataTable32_2  ;; 0xffff8e00
   \      0x100   0xE0D7             B.N      ??ssl_parse_record_header_2
   4082              }
   4083          
   4084              /* Check length against the size of our buffer */
   4085              if( ssl->in_msglen > MBEDTLS_SSL_IN_BUFFER_LEN
   4086                                   - (size_t)( ssl->in_msg - ssl->in_buf ) )
   \                     ??ssl_parse_record_header_4: (+1)
   \      0x102   0xF642 0x114D      MOVW     R1,#+10573
   \      0x106   0x6F28             LDR      R0,[R5, #+112]
   \      0x108   0x1A09             SUBS     R1,R1,R0
   \      0x10A   0x6DE8             LDR      R0,[R5, #+92]
   \      0x10C   0x1841             ADDS     R1,R0,R1
   \      0x10E   0x6FE8             LDR      R0,[R5, #+124]
   \      0x110   0x4281             CMP      R1,R0
   \      0x112   0xD20C             BCS.N    ??ssl_parse_record_header_5
   4087              {
   4088                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
   \      0x114   0x....'....        LDR.W    R0,??DataTable37_1
   \      0x118   0x9000             STR      R0,[SP, #+0]
   \      0x11A   0xF640 0x73F8      MOVW     R3,#+4088
   \      0x11E   0x4632             MOV      R2,R6
   \      0x120   0x2101             MOVS     R1,#+1
   \      0x122   0x4628             MOV      R0,R5
   \      0x124   0x....'....        BL       mbedtls_debug_print_msg
   4089                  return( MBEDTLS_ERR_SSL_INVALID_RECORD );
   \      0x128   0x....'....        LDR.W    R0,??DataTable32_2  ;; 0xffff8e00
   \      0x12C   0xE0C1             B.N      ??ssl_parse_record_header_2
   4090              }
   4091          
   4092              /*
   4093               * DTLS-related tests.
   4094               * Check epoch before checking length constraint because
   4095               * the latter varies with the epoch. E.g., if a ChangeCipherSpec
   4096               * message gets duplicated before the corresponding Finished message,
   4097               * the second ChangeCipherSpec should be discarded because it belongs
   4098               * to an old epoch, but not because its length is shorter than
   4099               * the minimum record length for packets using the new record transform.
   4100               * Note that these two kinds of failures are handled differently,
   4101               * as an unexpected record is silently skipped but an invalid
   4102               * record leads to the entire datagram being dropped.
   4103               */
   4104          #if defined(MBEDTLS_SSL_PROTO_DTLS)
   4105              if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
   \                     ??ssl_parse_record_header_5: (+1)
   \      0x12E   0x6828             LDR      R0,[R5, #+0]
   \      0x130   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \      0x134   0xF3C0 0x0040      UBFX     R0,R0,#+1,#+1
   \      0x138   0x2800             CMP      R0,#+0
   \      0x13A   0xD07B             BEQ.N    ??ssl_parse_record_header_6
   4106              {
   4107                  unsigned int rec_epoch = ( ssl->in_ctr[0] << 8 ) | ssl->in_ctr[1];
   \      0x13C   0x6E28             LDR      R0,[R5, #+96]
   \      0x13E   0x7800             LDRB     R0,[R0, #+0]
   \      0x140   0x6E29             LDR      R1,[R5, #+96]
   \      0x142   0x784C             LDRB     R4,[R1, #+1]
   \      0x144   0xEA44 0x2400      ORR      R4,R4,R0, LSL #+8
   4108          
   4109                  /* Check epoch (and sequence number) with DTLS */
   4110                  if( rec_epoch != ssl->in_epoch )
   \      0x148   0xF8B5 0x0084      LDRH     R0,[R5, #+132]
   \      0x14C   0x4284             CMP      R4,R0
   \      0x14E   0xD045             BEQ.N    ??ssl_parse_record_header_7
   4111                  {
   4112                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "record from another epoch: "
   4113                                                  "expected %d, received %d",
   4114                                                  ssl->in_epoch, rec_epoch ) );
   \      0x150   0x9402             STR      R4,[SP, #+8]
   \      0x152   0xF8B5 0x0084      LDRH     R0,[R5, #+132]
   \      0x156   0x9001             STR      R0,[SP, #+4]
   \      0x158   0x....'....        LDR.W    R0,??DataTable37_2
   \      0x15C   0x9000             STR      R0,[SP, #+0]
   \      0x15E   0xF241 0x0312      MOVW     R3,#+4114
   \      0x162   0x4632             MOV      R2,R6
   \      0x164   0x2101             MOVS     R1,#+1
   \      0x166   0x4628             MOV      R0,R5
   \      0x168   0x....'....        BL       mbedtls_debug_print_msg
   4115          
   4116          #if defined(MBEDTLS_SSL_DTLS_CLIENT_PORT_REUSE) && defined(MBEDTLS_SSL_SRV_C)
   4117                      /*
   4118                       * Check for an epoch 0 ClientHello. We can't use in_msg here to
   4119                       * access the first byte of record content (handshake type), as we
   4120                       * have an active transform (possibly iv_len != 0), so use the
   4121                       * fact that the record header len is 13 instead.
   4122                       */
   4123                      if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER &&
   4124                          ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER &&
   4125                          rec_epoch == 0 &&
   4126                          ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE &&
   4127                          ssl->in_left > 13 &&
   4128                          ssl->in_buf[13] == MBEDTLS_SSL_HS_CLIENT_HELLO )
   \      0x16C   0x6828             LDR      R0,[R5, #+0]
   \      0x16E   0xF890 0x00CC      LDRB     R0,[R0, #+204]
   \      0x172   0x07C0             LSLS     R0,R0,#+31
   \      0x174   0xD51D             BPL.N    ??ssl_parse_record_header_8
   \      0x176   0x6868             LDR      R0,[R5, #+4]
   \      0x178   0x2810             CMP      R0,#+16
   \      0x17A   0xD11A             BNE.N    ??ssl_parse_record_header_8
   \      0x17C   0x2C00             CMP      R4,#+0
   \      0x17E   0xD118             BNE.N    ??ssl_parse_record_header_8
   \      0x180   0x6FA8             LDR      R0,[R5, #+120]
   \      0x182   0x2816             CMP      R0,#+22
   \      0x184   0xD115             BNE.N    ??ssl_parse_record_header_8
   \      0x186   0xF8D5 0x0080      LDR      R0,[R5, #+128]
   \      0x18A   0x280E             CMP      R0,#+14
   \      0x18C   0xD311             BCC.N    ??ssl_parse_record_header_8
   \      0x18E   0x6DE8             LDR      R0,[R5, #+92]
   \      0x190   0x7B40             LDRB     R0,[R0, #+13]
   \      0x192   0x2801             CMP      R0,#+1
   \      0x194   0xD10D             BNE.N    ??ssl_parse_record_header_8
   4129                      {
   4130                          MBEDTLS_SSL_DEBUG_MSG( 1, ( "possible client reconnect "
   4131                                                      "from the same port" ) );
   \      0x196   0x....'....        LDR.W    R0,??DataTable37_3
   \      0x19A   0x9000             STR      R0,[SP, #+0]
   \      0x19C   0xF241 0x0323      MOVW     R3,#+4131
   \      0x1A0   0x4632             MOV      R2,R6
   \      0x1A2   0x2101             MOVS     R1,#+1
   \      0x1A4   0x4628             MOV      R0,R5
   \      0x1A6   0x....'....        BL       mbedtls_debug_print_msg
   4132                          return( ssl_handle_possible_reconnect( ssl ) );
   \      0x1AA   0x4628             MOV      R0,R5
   \      0x1AC   0x....'....        BL       ssl_handle_possible_reconnect
   \      0x1B0   0xE07F             B.N      ??ssl_parse_record_header_2
   4133                      }
   4134                      else
   4135          #endif /* MBEDTLS_SSL_DTLS_CLIENT_PORT_REUSE && MBEDTLS_SSL_SRV_C */
   4136                      {
   4137                          /* Consider buffering the record. */
   4138                          if( rec_epoch == (unsigned int) ssl->in_epoch + 1 )
   \                     ??ssl_parse_record_header_8: (+1)
   \      0x1B2   0xF8B5 0x0084      LDRH     R0,[R5, #+132]
   \      0x1B6   0x1C40             ADDS     R0,R0,#+1
   \      0x1B8   0x4284             CMP      R4,R0
   \      0x1BA   0xD10C             BNE.N    ??ssl_parse_record_header_9
   4139                          {
   4140                              MBEDTLS_SSL_DEBUG_MSG( 2, ( "Consider record for buffering" ) );
   \      0x1BC   0x....'....        LDR.W    R0,??DataTable37_4
   \      0x1C0   0x9000             STR      R0,[SP, #+0]
   \      0x1C2   0xF241 0x032C      MOVW     R3,#+4140
   \      0x1C6   0x4632             MOV      R2,R6
   \      0x1C8   0x2102             MOVS     R1,#+2
   \      0x1CA   0x4628             MOV      R0,R5
   \      0x1CC   0x....'....        BL       mbedtls_debug_print_msg
   4141                              return( MBEDTLS_ERR_SSL_EARLY_MESSAGE );
   \      0x1D0   0x....'....        LDR.W    R0,??DataTable33_1  ;; 0xffff9b80
   \      0x1D4   0xE06D             B.N      ??ssl_parse_record_header_2
   4142                          }
   4143          
   4144                          return( MBEDTLS_ERR_SSL_UNEXPECTED_RECORD );
   \                     ??ssl_parse_record_header_9: (+1)
   \      0x1D6   0x....'....        LDR.W    R0,??DataTable37_5  ;; 0xffff9900
   \      0x1DA   0xE06A             B.N      ??ssl_parse_record_header_2
   4145                      }
   4146                  }
   4147          
   4148          #if defined(MBEDTLS_SSL_DTLS_ANTI_REPLAY)
   4149                  /* Replay detection only works for the current epoch */
   4150                  if( rec_epoch == ssl->in_epoch &&
   4151                      mbedtls_ssl_dtls_replay_check( ssl ) != 0 )
   \                     ??ssl_parse_record_header_7: (+1)
   \      0x1DC   0xD111             BNE.N    ??ssl_parse_record_header_10
   \      0x1DE   0x4628             MOV      R0,R5
   \      0x1E0   0x....'....        BL       mbedtls_ssl_dtls_replay_check
   \      0x1E4   0x2800             CMP      R0,#+0
   \      0x1E6   0xD00C             BEQ.N    ??ssl_parse_record_header_10
   4152                  {
   4153                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "replayed record" ) );
   \      0x1E8   0x....'....        LDR.W    R0,??DataTable37_6
   \      0x1EC   0x9000             STR      R0,[SP, #+0]
   \      0x1EE   0xF241 0x0339      MOVW     R3,#+4153
   \      0x1F2   0x4632             MOV      R2,R6
   \      0x1F4   0x2101             MOVS     R1,#+1
   \      0x1F6   0x4628             MOV      R0,R5
   \      0x1F8   0x....'....        BL       mbedtls_debug_print_msg
   4154                      return( MBEDTLS_ERR_SSL_UNEXPECTED_RECORD );
   \      0x1FC   0x....'....        LDR.W    R0,??DataTable37_5  ;; 0xffff9900
   \      0x200   0xE057             B.N      ??ssl_parse_record_header_2
   4155                  }
   4156          #endif
   4157          
   4158                  /* Drop unexpected ApplicationData records,
   4159                   * except at the beginning of renegotiations */
   4160                  if( ssl->in_msgtype == MBEDTLS_SSL_MSG_APPLICATION_DATA &&
   4161                      ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER
   4162          #if defined(MBEDTLS_SSL_RENEGOTIATION)
   4163                      && ! ( ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS &&
   4164                             ssl->state == MBEDTLS_SSL_SERVER_HELLO )
   4165          #endif
   4166                      )
   \                     ??ssl_parse_record_header_10: (+1)
   \      0x202   0x6FA8             LDR      R0,[R5, #+120]
   \      0x204   0x2817             CMP      R0,#+23
   \      0x206   0xD115             BNE.N    ??ssl_parse_record_header_6
   \      0x208   0x6868             LDR      R0,[R5, #+4]
   \      0x20A   0x2810             CMP      R0,#+16
   \      0x20C   0xD012             BEQ.N    ??ssl_parse_record_header_6
   \      0x20E   0x68A8             LDR      R0,[R5, #+8]
   \      0x210   0x2801             CMP      R0,#+1
   \      0x212   0xD102             BNE.N    ??ssl_parse_record_header_11
   \      0x214   0x6868             LDR      R0,[R5, #+4]
   \      0x216   0x2802             CMP      R0,#+2
   \      0x218   0xD00C             BEQ.N    ??ssl_parse_record_header_6
   4167                  {
   4168                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "dropping unexpected ApplicationData" ) );
   \                     ??ssl_parse_record_header_11: (+1)
   \      0x21A   0x....'....        LDR.W    R0,??DataTable37_7
   \      0x21E   0x9000             STR      R0,[SP, #+0]
   \      0x220   0xF241 0x0348      MOVW     R3,#+4168
   \      0x224   0x4632             MOV      R2,R6
   \      0x226   0x2101             MOVS     R1,#+1
   \      0x228   0x4628             MOV      R0,R5
   \      0x22A   0x....'....        BL       mbedtls_debug_print_msg
   4169                      return( MBEDTLS_ERR_SSL_UNEXPECTED_RECORD );
   \      0x22E   0x....'....        LDR.W    R0,??DataTable37_5  ;; 0xffff9900
   \      0x232   0xE03E             B.N      ??ssl_parse_record_header_2
   4170                  }
   4171              }
   4172          #endif /* MBEDTLS_SSL_PROTO_DTLS */
   4173          
   4174          
   4175              /* Check length against bounds of the current transform and version */
   4176              if( ssl->transform_in == NULL )
   \                     ??ssl_parse_record_header_6: (+1)
   \      0x234   0x6C28             LDR      R0,[R5, #+64]
   \      0x236   0x2800             CMP      R0,#+0
   \      0x238   0x6FE8             LDR      R0,[R5, #+124]
   \      0x23A   0xD112             BNE.N    ??ssl_parse_record_header_12
   4177              {
   4178                  if( ssl->in_msglen < 1 ||
   4179                      ssl->in_msglen > MBEDTLS_SSL_IN_CONTENT_LEN )
   \      0x23C   0x2800             CMP      R0,#+0
   \      0x23E   0xD003             BEQ.N    ??ssl_parse_record_header_13
   \      0x240   0xF642 0x0101      MOVW     R1,#+10241
   \      0x244   0x4288             CMP      R0,R1
   \      0x246   0xD333             BCC.N    ??ssl_parse_record_header_14
   4180                  {
   4181                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
   \                     ??ssl_parse_record_header_13: (+1)
   \      0x248   0x....'....        LDR.W    R0,??DataTable37_1
   \      0x24C   0x9000             STR      R0,[SP, #+0]
   \      0x24E   0xF241 0x0355      MOVW     R3,#+4181
   \      0x252   0x4632             MOV      R2,R6
   \      0x254   0x2101             MOVS     R1,#+1
   \      0x256   0x4628             MOV      R0,R5
   \      0x258   0x....'....        BL       mbedtls_debug_print_msg
   4182                      return( MBEDTLS_ERR_SSL_INVALID_RECORD );
   \      0x25C   0x....'....        LDR.W    R0,??DataTable32_2  ;; 0xffff8e00
   \      0x260   0xE027             B.N      ??ssl_parse_record_header_2
   4183                  }
   4184              }
   4185              else
   4186              {
   4187                  if( ssl->in_msglen < ssl->transform_in->minlen )
   \                     ??ssl_parse_record_header_12: (+1)
   \      0x262   0x6C29             LDR      R1,[R5, #+64]
   \      0x264   0x6889             LDR      R1,[R1, #+8]
   \      0x266   0x4288             CMP      R0,R1
   \      0x268   0xD20C             BCS.N    ??ssl_parse_record_header_15
   4188                  {
   4189                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
   \      0x26A   0x....'....        LDR.W    R0,??DataTable37_1
   \      0x26E   0x9000             STR      R0,[SP, #+0]
   \      0x270   0xF241 0x035D      MOVW     R3,#+4189
   \      0x274   0x4632             MOV      R2,R6
   \      0x276   0x2101             MOVS     R1,#+1
   \      0x278   0x4628             MOV      R0,R5
   \      0x27A   0x....'....        BL       mbedtls_debug_print_msg
   4190                      return( MBEDTLS_ERR_SSL_INVALID_RECORD );
   \      0x27E   0x....'....        LDR.W    R0,??DataTable32_2  ;; 0xffff8e00
   \      0x282   0xE016             B.N      ??ssl_parse_record_header_2
   4191                  }
   4192          
   4193          #if defined(MBEDTLS_SSL_PROTO_SSL3)
   4194                  if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 &&
   4195                      ssl->in_msglen > ssl->transform_in->minlen + MBEDTLS_SSL_IN_CONTENT_LEN )
   4196                  {
   4197                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
   4198                      return( MBEDTLS_ERR_SSL_INVALID_RECORD );
   4199                  }
   4200          #endif
   4201          #if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
   4202              defined(MBEDTLS_SSL_PROTO_TLS1_2)
   4203                  /*
   4204                   * TLS encrypted messages can have up to 256 bytes of padding
   4205                   */
   4206                  if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 &&
   4207                      ssl->in_msglen > ssl->transform_in->minlen +
   4208                                       MBEDTLS_SSL_IN_CONTENT_LEN + 256 )
   \                     ??ssl_parse_record_header_15: (+1)
   \      0x284   0x6968             LDR      R0,[R5, #+20]
   \      0x286   0x2801             CMP      R0,#+1
   \      0x288   0xDB12             BLT.N    ??ssl_parse_record_header_14
   \      0x28A   0x4608             MOV      R0,R1
   \      0x28C   0xF500 0x5024      ADD      R0,R0,#+10496
   \      0x290   0x6FE9             LDR      R1,[R5, #+124]
   \      0x292   0x4288             CMP      R0,R1
   \      0x294   0xD20C             BCS.N    ??ssl_parse_record_header_14
   4209                  {
   4210                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
   \      0x296   0x....'....        LDR.W    R0,??DataTable37_1
   \      0x29A   0x9000             STR      R0,[SP, #+0]
   \      0x29C   0xF241 0x0372      MOVW     R3,#+4210
   \      0x2A0   0x4632             MOV      R2,R6
   \      0x2A2   0x2101             MOVS     R1,#+1
   \      0x2A4   0x4628             MOV      R0,R5
   \      0x2A6   0x....'....        BL       mbedtls_debug_print_msg
   4211                      return( MBEDTLS_ERR_SSL_INVALID_RECORD );
   \      0x2AA   0x....'....        LDR.W    R0,??DataTable32_2  ;; 0xffff8e00
   \      0x2AE   0xE000             B.N      ??ssl_parse_record_header_2
   4212                  }
   4213          #endif
   4214              }
   4215          
   4216              return( 0 );
   \                     ??ssl_parse_record_header_14: (+1)
   \      0x2B0   0x2000             MOVS     R0,#+0
   \                     ??ssl_parse_record_header_2: (+1)
   \      0x2B2   0xB008             ADD      SP,SP,#+32
   \      0x2B4   0xBD70             POP      {R4-R6,PC}       ;; return
   4217          }
   4218          
   4219          /*
   4220           * If applicable, decrypt (and decompress) record content
   4221           */

   \                                 In section .text, align 2, keep-with-next
   4222          static int ssl_prepare_record_content( mbedtls_ssl_context *ssl )
   4223          {
   \                     ssl_prepare_record_content: (+1)
   \        0x0   0xB57F             PUSH     {R0-R6,LR}
   \        0x2   0x4605             MOV      R5,R0
   4224              int ret, done = 0;
   4225          
   4226              MBEDTLS_SSL_DEBUG_BUF( 4, "input record from network",
   4227                             ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) + ssl->in_msglen );
   \        0x4   0x....'....        BL       mbedtls_ssl_hdr_len
   \        0x8   0x....'....        LDR.W    R6,??DataTable32_1
   \        0xC   0x6FE9             LDR      R1,[R5, #+124]
   \        0xE   0x1808             ADDS     R0,R1,R0
   \       0x10   0x9002             STR      R0,[SP, #+8]
   \       0x12   0x6E68             LDR      R0,[R5, #+100]
   \       0x14   0x9001             STR      R0,[SP, #+4]
   \       0x16   0x....'....        LDR.W    R0,??DataTable37_8
   \       0x1A   0x9000             STR      R0,[SP, #+0]
   \       0x1C   0xF241 0x0383      MOVW     R3,#+4227
   \       0x20   0x4632             MOV      R2,R6
   \       0x22   0x2104             MOVS     R1,#+4
   \       0x24   0x4628             MOV      R0,R5
   \       0x26   0x....'....        BL       mbedtls_debug_print_buf
   4228          
   4229          #if defined(MBEDTLS_SSL_HW_RECORD_ACCEL)
   4230              if( mbedtls_ssl_hw_record_read != NULL )
   4231              {
   4232                  MBEDTLS_SSL_DEBUG_MSG( 2, ( "going for mbedtls_ssl_hw_record_read()" ) );
   4233          
   4234                  ret = mbedtls_ssl_hw_record_read( ssl );
   4235                  if( ret != 0 && ret != MBEDTLS_ERR_SSL_HW_ACCEL_FALLTHROUGH )
   4236                  {
   4237                      MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_hw_record_read", ret );
   4238                      return( MBEDTLS_ERR_SSL_HW_ACCEL_FAILED );
   4239                  }
   4240          
   4241                  if( ret == 0 )
   4242                      done = 1;
   4243              }
   4244          #endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
   4245              if( !done && ssl->transform_in != NULL )
   \       0x2A   0x6C28             LDR      R0,[R5, #+64]
   \       0x2C   0x2800             CMP      R0,#+0
   \       0x2E   0xD030             BEQ.N    ??ssl_prepare_record_content_0
   4246              {
   4247                  if( ( ret = ssl_decrypt_buf( ssl ) ) != 0 )
   \       0x30   0x4628             MOV      R0,R5
   \       0x32   0x....'....        BL       ssl_decrypt_buf
   \       0x36   0x0004             MOVS     R4,R0
   \       0x38   0xD00C             BEQ.N    ??ssl_prepare_record_content_1
   4248                  {
   4249                      MBEDTLS_SSL_DEBUG_RET( 1, "ssl_decrypt_buf", ret );
   \       0x3A   0x9401             STR      R4,[SP, #+4]
   \       0x3C   0x....'....        LDR.W    R0,??DataTable37_9
   \       0x40   0x9000             STR      R0,[SP, #+0]
   \       0x42   0xF241 0x0399      MOVW     R3,#+4249
   \       0x46   0x4632             MOV      R2,R6
   \       0x48   0x2101             MOVS     R1,#+1
   \       0x4A   0x4628             MOV      R0,R5
   \       0x4C   0x....'....        BL       mbedtls_debug_print_ret
   4250                      return( ret );
   \       0x50   0x4620             MOV      R0,R4
   \       0x52   0xE029             B.N      ??ssl_prepare_record_content_2
   4251                  }
   4252          
   4253                  MBEDTLS_SSL_DEBUG_BUF( 4, "input payload after decrypt",
   4254                                 ssl->in_msg, ssl->in_msglen );
   \                     ??ssl_prepare_record_content_1: (+1)
   \       0x54   0x6FE8             LDR      R0,[R5, #+124]
   \       0x56   0x9002             STR      R0,[SP, #+8]
   \       0x58   0x6F28             LDR      R0,[R5, #+112]
   \       0x5A   0x9001             STR      R0,[SP, #+4]
   \       0x5C   0x....'....        LDR.W    R0,??DataTable38
   \       0x60   0x9000             STR      R0,[SP, #+0]
   \       0x62   0xF241 0x039E      MOVW     R3,#+4254
   \       0x66   0x4632             MOV      R2,R6
   \       0x68   0x2104             MOVS     R1,#+4
   \       0x6A   0x4628             MOV      R0,R5
   \       0x6C   0x....'....        BL       mbedtls_debug_print_buf
   4255          
   4256                  if( ssl->in_msglen > MBEDTLS_SSL_IN_CONTENT_LEN )
   \       0x70   0x6FE8             LDR      R0,[R5, #+124]
   \       0x72   0xF642 0x0101      MOVW     R1,#+10241
   \       0x76   0x4288             CMP      R0,R1
   \       0x78   0xD30B             BCC.N    ??ssl_prepare_record_content_0
   4257                  {
   4258                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
   \       0x7A   0x....'....        LDR.W    R0,??DataTable37_1
   \       0x7E   0x9000             STR      R0,[SP, #+0]
   \       0x80   0xF241 0x03A2      MOVW     R3,#+4258
   \       0x84   0x4632             MOV      R2,R6
   \       0x86   0x2101             MOVS     R1,#+1
   \       0x88   0x4628             MOV      R0,R5
   \       0x8A   0x....'....        BL       mbedtls_debug_print_msg
   4259                      return( MBEDTLS_ERR_SSL_INVALID_RECORD );
   \       0x8E   0x....             LDR.N    R0,??DataTable32_2  ;; 0xffff8e00
   \       0x90   0xE00A             B.N      ??ssl_prepare_record_content_2
   4260                  }
   4261              }
   4262          
   4263          #if defined(MBEDTLS_ZLIB_SUPPORT)
   4264              if( ssl->transform_in != NULL &&
   4265                  ssl->session_in->compression == MBEDTLS_SSL_COMPRESS_DEFLATE )
   4266              {
   4267                  if( ( ret = ssl_decompress_buf( ssl ) ) != 0 )
   4268                  {
   4269                      MBEDTLS_SSL_DEBUG_RET( 1, "ssl_decompress_buf", ret );
   4270                      return( ret );
   4271                  }
   4272              }
   4273          #endif /* MBEDTLS_ZLIB_SUPPORT */
   4274          
   4275          #if defined(MBEDTLS_SSL_DTLS_ANTI_REPLAY)
   4276              if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
   \                     ??ssl_prepare_record_content_0: (+1)
   \       0x92   0x6828             LDR      R0,[R5, #+0]
   \       0x94   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \       0x98   0xF3C0 0x0040      UBFX     R0,R0,#+1,#+1
   \       0x9C   0x2800             CMP      R0,#+0
   \       0x9E   0xD002             BEQ.N    ??ssl_prepare_record_content_3
   4277              {
   4278                  mbedtls_ssl_dtls_replay_update( ssl );
   \       0xA0   0x4628             MOV      R0,R5
   \       0xA2   0x....'....        BL       mbedtls_ssl_dtls_replay_update
   4279              }
   4280          #endif
   4281          
   4282              return( 0 );
   \                     ??ssl_prepare_record_content_3: (+1)
   \       0xA6   0x2000             MOVS     R0,#+0
   \                     ??ssl_prepare_record_content_2: (+1)
   \       0xA8   0xB004             ADD      SP,SP,#+16
   \       0xAA   0xBD70             POP      {R4-R6,PC}       ;; return
   4283          }
   4284          
   4285          static void ssl_handshake_wrapup_free_hs_transform( mbedtls_ssl_context *ssl );
   4286          
   4287          /*
   4288           * Read a record.
   4289           *
   4290           * Silently ignore non-fatal alert (and for DTLS, invalid records as well,
   4291           * RFC 6347 4.1.2.7) and continue reading until a valid record is found.
   4292           *
   4293           */
   4294          
   4295          /* Helper functions for mbedtls_ssl_read_record(). */
   4296          static int ssl_consume_current_message( mbedtls_ssl_context *ssl );
   4297          static int ssl_get_next_record( mbedtls_ssl_context *ssl );
   4298          static int ssl_record_is_in_progress( mbedtls_ssl_context *ssl );
   4299          

   \                                 In section .text, align 2, keep-with-next
   4300          int mbedtls_ssl_read_record( mbedtls_ssl_context *ssl,
   4301                                       unsigned update_hs_digest )
   4302          {
   \                     mbedtls_ssl_read_record: (+1)
   \        0x0   0xB5FE             PUSH     {R1-R7,LR}
   \        0x2   0x4605             MOV      R5,R0
   \        0x4   0x460E             MOV      R6,R1
   4303              int ret;
   4304          
   4305              MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> read record" ) );
   \        0x6   0x....             LDR.N    R7,??DataTable32_1
   \        0x8   0x....'....        LDR.W    R0,??DataTable38_1
   \        0xC   0x9000             STR      R0,[SP, #+0]
   \        0xE   0xF241 0x03D1      MOVW     R3,#+4305
   \       0x12   0x463A             MOV      R2,R7
   \       0x14   0x2102             MOVS     R1,#+2
   \       0x16   0x4628             MOV      R0,R5
   \       0x18   0x....'....        BL       mbedtls_debug_print_msg
   4306          
   4307              if( ssl->keep_current_message == 0 )
   \       0x1C   0xF8D5 0x00A8      LDR      R0,[R5, #+168]
   \       0x20   0x2800             CMP      R0,#+0
   \       0x22   0xD15F             BNE.N    ??mbedtls_ssl_read_record_0
   4308              {
   4309                  do {
   4310          
   4311                      ret = ssl_consume_current_message( ssl );
   \                     ??mbedtls_ssl_read_record_1: (+1)
   \       0x24   0x4628             MOV      R0,R5
   \       0x26   0x....'....        BL       ssl_consume_current_message
   4312                      if( ret != 0 )
   \       0x2A   0x2800             CMP      R0,#+0
   \       0x2C   0xD172             BNE.N    ??mbedtls_ssl_read_record_2
   4313                          return( ret );
   4314          
   4315                      if( ssl_record_is_in_progress( ssl ) == 0 )
   \       0x2E   0x4628             MOV      R0,R5
   \       0x30   0x....'....        BL       ssl_record_is_in_progress
   \       0x34   0x2800             CMP      R0,#+0
   \       0x36   0xD12A             BNE.N    ??mbedtls_ssl_read_record_3
   4316                      {
   4317          #if defined(MBEDTLS_SSL_PROTO_DTLS)
   4318                          int have_buffered = 0;
   \       0x38   0x2400             MOVS     R4,#+0
   4319          
   4320                          /* We only check for buffered messages if the
   4321                           * current datagram is fully consumed. */
   4322                          if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM &&
   4323                              ssl_next_record_is_in_datagram( ssl ) == 0 )
   \       0x3A   0x6828             LDR      R0,[R5, #+0]
   \       0x3C   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \       0x40   0xF3C0 0x0040      UBFX     R0,R0,#+1,#+1
   \       0x44   0x2800             CMP      R0,#+0
   \       0x46   0xD00A             BEQ.N    ??mbedtls_ssl_read_record_4
   \       0x48   0x4628             MOV      R0,R5
   \       0x4A   0x....'....        BL       ssl_next_record_is_in_datagram
   \       0x4E   0x2800             CMP      R0,#+0
   \       0x50   0xD105             BNE.N    ??mbedtls_ssl_read_record_4
   4324                          {
   4325                              if( ssl_load_buffered_message( ssl ) == 0 )
   \       0x52   0x4628             MOV      R0,R5
   \       0x54   0x....'....        BL       ssl_load_buffered_message
   \       0x58   0x2800             CMP      R0,#+0
   \       0x5A   0xD100             BNE.N    ??mbedtls_ssl_read_record_4
   4326                                  have_buffered = 1;
   \       0x5C   0x2401             MOVS     R4,#+1
   4327                          }
   4328          
   4329                          if( have_buffered == 0 )
   \                     ??mbedtls_ssl_read_record_4: (+1)
   \       0x5E   0x2C00             CMP      R4,#+0
   \       0x60   0xD115             BNE.N    ??mbedtls_ssl_read_record_3
   4330          #endif /* MBEDTLS_SSL_PROTO_DTLS */
   4331                          {
   4332                              ret = ssl_get_next_record( ssl );
   \       0x62   0x4628             MOV      R0,R5
   \       0x64   0x....'....        BL       ssl_get_next_record
   \       0x68   0x4604             MOV      R4,R0
   4333                              if( ret == MBEDTLS_ERR_SSL_CONTINUE_PROCESSING )
   \       0x6A   0xF514 0x4FCB      CMN      R4,#+25984
   \       0x6E   0xD01B             BEQ.N    ??mbedtls_ssl_read_record_5
   4334                                  continue;
   4335          
   4336                              if( ret != 0 )
   \       0x70   0x2C00             CMP      R4,#+0
   \       0x72   0xD00C             BEQ.N    ??mbedtls_ssl_read_record_3
   4337                              {
   4338                                  MBEDTLS_SSL_DEBUG_RET( 1, ( "ssl_get_next_record" ), ret );
   \       0x74   0x9401             STR      R4,[SP, #+4]
   \       0x76   0x....'....        LDR.W    R0,??DataTable38_2
   \       0x7A   0x9000             STR      R0,[SP, #+0]
   \       0x7C   0xF241 0x03F2      MOVW     R3,#+4338
   \       0x80   0x463A             MOV      R2,R7
   \       0x82   0x2101             MOVS     R1,#+1
   \       0x84   0x4628             MOV      R0,R5
   \       0x86   0x....'....        BL       mbedtls_debug_print_ret
   4339                                  return( ret );
   \       0x8A   0x4620             MOV      R0,R4
   \       0x8C   0xBDFE             POP      {R1-R7,PC}
   4340                              }
   4341                          }
   4342                      }
   4343          
   4344                      ret = mbedtls_ssl_handle_message_type( ssl );
   \                     ??mbedtls_ssl_read_record_3: (+1)
   \       0x8E   0x4628             MOV      R0,R5
   \       0x90   0x....'....        BL       mbedtls_ssl_handle_message_type
   \       0x94   0x4604             MOV      R4,R0
   4345          
   4346          #if defined(MBEDTLS_SSL_PROTO_DTLS)
   4347                      if( ret == MBEDTLS_ERR_SSL_EARLY_MESSAGE )
   \       0x96   0xF514 0x4FC9      CMN      R4,#+25728
   \       0x9A   0xD105             BNE.N    ??mbedtls_ssl_read_record_5
   4348                      {
   4349                          /* Buffer future message */
   4350                          ret = ssl_buffer_message( ssl );
   \       0x9C   0x4628             MOV      R0,R5
   \       0x9E   0x....'....        BL       ssl_buffer_message
   4351                          if( ret != 0 )
   \       0xA2   0x2800             CMP      R0,#+0
   \       0xA4   0xD136             BNE.N    ??mbedtls_ssl_read_record_2
   4352                              return( ret );
   4353          
   4354                          ret = MBEDTLS_ERR_SSL_CONTINUE_PROCESSING;
   \       0xA6   0x....             LDR.N    R4,??DataTable33_5  ;; 0xffff9a80
   4355                      }
   4356          #endif /* MBEDTLS_SSL_PROTO_DTLS */
   4357          
   4358                  } while( MBEDTLS_ERR_SSL_NON_FATAL           == ret  ||
   4359                           MBEDTLS_ERR_SSL_CONTINUE_PROCESSING == ret );
   \                     ??mbedtls_ssl_read_record_5: (+1)
   \       0xA8   0xF514 0x4FCD      CMN      R4,#+26240
   \       0xAC   0xD0BA             BEQ.N    ??mbedtls_ssl_read_record_1
   \       0xAE   0xF514 0x4FCB      CMN      R4,#+25984
   \       0xB2   0xD0B7             BEQ.N    ??mbedtls_ssl_read_record_1
   4360          
   4361                  if( 0 != ret )
   \       0xB4   0x2C00             CMP      R4,#+0
   \       0xB6   0xD00C             BEQ.N    ??mbedtls_ssl_read_record_6
   4362                  {
   4363                      MBEDTLS_SSL_DEBUG_RET( 1, ( "mbedtls_ssl_handle_message_type" ), ret );
   \       0xB8   0x9401             STR      R4,[SP, #+4]
   \       0xBA   0x....'....        LDR.W    R0,??DataTable38_3
   \       0xBE   0x9000             STR      R0,[SP, #+0]
   \       0xC0   0xF241 0x130B      MOVW     R3,#+4363
   \       0xC4   0x463A             MOV      R2,R7
   \       0xC6   0x2101             MOVS     R1,#+1
   \       0xC8   0x4628             MOV      R0,R5
   \       0xCA   0x....'....        BL       mbedtls_debug_print_ret
   4364                      return( ret );
   \       0xCE   0x4620             MOV      R0,R4
   \       0xD0   0xBDFE             POP      {R1-R7,PC}
   4365                  }
   4366          
   4367                  if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE &&
   4368                      update_hs_digest == 1 )
   \                     ??mbedtls_ssl_read_record_6: (+1)
   \       0xD2   0x6FA8             LDR      R0,[R5, #+120]
   \       0xD4   0x2816             CMP      R0,#+22
   \       0xD6   0xD112             BNE.N    ??mbedtls_ssl_read_record_7
   \       0xD8   0x2E01             CMP      R6,#+1
   \       0xDA   0xD110             BNE.N    ??mbedtls_ssl_read_record_7
   4369                  {
   4370                      mbedtls_ssl_update_handshake_status( ssl );
   \       0xDC   0x4628             MOV      R0,R5
   \       0xDE   0x....'....        BL       mbedtls_ssl_update_handshake_status
   \       0xE2   0xE00C             B.N      ??mbedtls_ssl_read_record_7
   4371                  }
   4372              }
   4373              else
   4374              {
   4375                  MBEDTLS_SSL_DEBUG_MSG( 2, ( "reuse previously read message" ) );
   \                     ??mbedtls_ssl_read_record_0: (+1)
   \       0xE4   0x....'....        LDR.W    R0,??DataTable38_4
   \       0xE8   0x9000             STR      R0,[SP, #+0]
   \       0xEA   0xF241 0x1317      MOVW     R3,#+4375
   \       0xEE   0x463A             MOV      R2,R7
   \       0xF0   0x2102             MOVS     R1,#+2
   \       0xF2   0x4628             MOV      R0,R5
   \       0xF4   0x....'....        BL       mbedtls_debug_print_msg
   4376                  ssl->keep_current_message = 0;
   \       0xF8   0x2000             MOVS     R0,#+0
   \       0xFA   0xF8C5 0x00A8      STR      R0,[R5, #+168]
   4377              }
   4378          
   4379              MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= read record" ) );
   \                     ??mbedtls_ssl_read_record_7: (+1)
   \       0xFE   0x....'....        LDR.W    R0,??DataTable39
   \      0x102   0x9000             STR      R0,[SP, #+0]
   \      0x104   0xF241 0x131B      MOVW     R3,#+4379
   \      0x108   0x463A             MOV      R2,R7
   \      0x10A   0x2102             MOVS     R1,#+2
   \      0x10C   0x4628             MOV      R0,R5
   \      0x10E   0x....'....        BL       mbedtls_debug_print_msg
   4380          
   4381              return( 0 );
   \      0x112   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_ssl_read_record_2: (+1)
   \      0x114   0xBDFE             POP      {R1-R7,PC}       ;; return
   4382          }
   4383          
   4384          #if defined(MBEDTLS_SSL_PROTO_DTLS)

   \                                 In section .text, align 2, keep-with-next
   4385          static int ssl_next_record_is_in_datagram( mbedtls_ssl_context *ssl )
   4386          {
   4387              if( ssl->in_left > ssl->next_record_offset )
   \                     ssl_next_record_is_in_datagram: (+1)
   \        0x0   0xF8D0 0x1088      LDR      R1,[R0, #+136]
   \        0x4   0xF8D0 0x0080      LDR      R0,[R0, #+128]
   \        0x8   0x4281             CMP      R1,R0
   \        0xA   0x4180             SBCS     R0,R0,R0
   \        0xC   0x0FC0             LSRS     R0,R0,#+31
   4388                  return( 1 );
   \        0xE   0x4770             BX       LR               ;; return
   4389          
   4390              return( 0 );
   4391          }
   4392          

   \                                 In section .text, align 2, keep-with-next
   4393          static int ssl_load_buffered_message( mbedtls_ssl_context *ssl )
   4394          {
   \                     ssl_load_buffered_message: (+1)
   \        0x0   0xE92D 0x41FF      PUSH     {R0-R8,LR}
   \        0x4   0x4607             MOV      R7,R0
   4395              mbedtls_ssl_handshake_params * const hs = ssl->handshake;
   \        0x6   0x6BFC             LDR      R4,[R7, #+60]
   4396              mbedtls_ssl_hs_buffer * hs_buf;
   4397              int ret = 0;
   \        0x8   0x2600             MOVS     R6,#+0
   4398          
   4399              if( hs == NULL )
   \        0xA   0x2C00             CMP      R4,#+0
   \        0xC   0xD102             BNE.N    ??ssl_load_buffered_message_0
   4400                  return( -1 );
   \        0xE   0xF04F 0x30FF      MOV      R0,#-1
   \       0x12   0xE0A6             B.N      ??ssl_load_buffered_message_1
   4401          
   4402              MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> ssl_load_buffered_messsage" ) );
   \                     ??ssl_load_buffered_message_0: (+1)
   \       0x14   0x....             LDR.N    R5,??DataTable32_1
   \       0x16   0x....'....        LDR.W    R0,??DataTable38_5
   \       0x1A   0x9000             STR      R0,[SP, #+0]
   \       0x1C   0xF241 0x1332      MOVW     R3,#+4402
   \       0x20   0x462A             MOV      R2,R5
   \       0x22   0x2102             MOVS     R1,#+2
   \       0x24   0x4638             MOV      R0,R7
   \       0x26   0x....'....        BL       mbedtls_debug_print_msg
   4403          
   4404              if( ssl->state == MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC ||
   4405                  ssl->state == MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC )
   \       0x2A   0x6878             LDR      R0,[R7, #+4]
   \       0x2C   0x280A             CMP      R0,#+10
   \       0x2E   0xD001             BEQ.N    ??ssl_load_buffered_message_2
   \       0x30   0x280C             CMP      R0,#+12
   \       0x32   0xD128             BNE.N    ??ssl_load_buffered_message_3
   4406              {
   4407                  /* Check if we have seen a ChangeCipherSpec before.
   4408                   * If yes, synthesize a CCS record. */
   4409                  if( !hs->buffering.seen_ccs )
   \                     ??ssl_load_buffered_message_2: (+1)
   \       0x34   0xF894 0x020C      LDRB     R0,[R4, #+524]
   \       0x38   0x2800             CMP      R0,#+0
   \       0x3A   0xD10C             BNE.N    ??ssl_load_buffered_message_4
   4410                  {
   4411                      MBEDTLS_SSL_DEBUG_MSG( 2, ( "CCS not seen in the current flight" ) );
   \       0x3C   0x....'....        LDR.W    R0,??DataTable38_6
   \       0x40   0x9000             STR      R0,[SP, #+0]
   \       0x42   0xF241 0x133B      MOVW     R3,#+4411
   \       0x46   0x462A             MOV      R2,R5
   \       0x48   0x2102             MOVS     R1,#+2
   \       0x4A   0x4638             MOV      R0,R7
   \       0x4C   0x....'....        BL       mbedtls_debug_print_msg
   4412                      ret = -1;
   \       0x50   0xF04F 0x36FF      MOV      R6,#-1
   4413                      goto exit;
   \       0x54   0xE07A             B.N      ??ssl_load_buffered_message_5
   4414                  }
   4415          
   4416                  MBEDTLS_SSL_DEBUG_MSG( 2, ( "Injecting buffered CCS message" ) );
   \                     ??ssl_load_buffered_message_4: (+1)
   \       0x56   0x....'....        LDR.W    R0,??DataTable39_1
   \       0x5A   0x9000             STR      R0,[SP, #+0]
   \       0x5C   0xF44F 0x538A      MOV      R3,#+4416
   \       0x60   0x462A             MOV      R2,R5
   \       0x62   0x2102             MOVS     R1,#+2
   \       0x64   0x4638             MOV      R0,R7
   \       0x66   0x....'....        BL       mbedtls_debug_print_msg
   4417                  ssl->in_msgtype = MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC;
   \       0x6A   0x2014             MOVS     R0,#+20
   \       0x6C   0x67B8             STR      R0,[R7, #+120]
   4418                  ssl->in_msglen = 1;
   \       0x6E   0x2001             MOVS     R0,#+1
   \       0x70   0x67F8             STR      R0,[R7, #+124]
   4419                  ssl->in_msg[0] = 1;
   \       0x72   0x6F39             LDR      R1,[R7, #+112]
   \       0x74   0x7008             STRB     R0,[R1, #+0]
   4420          
   4421                  /* As long as they are equal, the exact value doesn't matter. */
   4422                  ssl->in_left            = 0;
   \       0x76   0x4630             MOV      R0,R6
   \       0x78   0xF8C7 0x0080      STR      R0,[R7, #+128]
   4423                  ssl->next_record_offset = 0;
   \       0x7C   0xF8C7 0x0088      STR      R0,[R7, #+136]
   4424          
   4425                  hs->buffering.seen_ccs = 0;
   \       0x80   0xF884 0x020C      STRB     R0,[R4, #+524]
   4426                  goto exit;
   \       0x84   0xE062             B.N      ??ssl_load_buffered_message_5
   4427              }
   4428          
   4429          #if defined(MBEDTLS_DEBUG_C)
   4430              /* Debug only */
   4431              {
   4432                  unsigned offset;
   4433                  for( offset = 1; offset < MBEDTLS_SSL_MAX_BUFFERED_HS; offset++ )
   \                     ??ssl_load_buffered_message_3: (+1)
   \       0x86   0xF04F 0x0801      MOV      R8,#+1
   \                     ??ssl_load_buffered_message_6: (+1)
   \       0x8A   0xF1B8 0x0F04      CMP      R8,#+4
   \       0x8E   0xD26B             BCS.N    ??ssl_load_buffered_message_7
   4434                  {
   4435                      hs_buf = &hs->buffering.hs[offset];
   \       0x90   0xEB08 0x0048      ADD      R0,R8,R8, LSL #+1
   \       0x94   0xEB04 0x0080      ADD      R0,R4,R0, LSL #+2
   \       0x98   0xF500 0x7004      ADD      R0,R0,#+528
   4436                      if( hs_buf->is_valid == 1 )
   \       0x9C   0x7801             LDRB     R1,[R0, #+0]
   \       0x9E   0x07C9             LSLS     R1,R1,#+31
   \       0xA0   0xD518             BPL.N    ??ssl_load_buffered_message_8
   4437                      {
   4438                          MBEDTLS_SSL_DEBUG_MSG( 2, ( "Future message with sequence number %u %s buffered.",
   4439                                      hs->in_msg_seq + offset,
   4440                                      hs_buf->is_complete ? "fully" : "partially" ) );
   \       0xA2   0x6800             LDR      R0,[R0, #+0]
   \       0xA4   0xF3C0 0x0080      UBFX     R0,R0,#+2,#+1
   \       0xA8   0x2800             CMP      R0,#+0
   \       0xAA   0xD102             BNE.N    ??ssl_load_buffered_message_9
   \       0xAC   0x....'....        LDR.W    R0,??DataTable39_2
   \       0xB0   0xE001             B.N      ??ssl_load_buffered_message_10
   \                     ??ssl_load_buffered_message_9: (+1)
   \       0xB2   0x....'....        LDR.W    R0,??DataTable39_3
   \                     ??ssl_load_buffered_message_10: (+1)
   \       0xB6   0x9002             STR      R0,[SP, #+8]
   \       0xB8   0xF8D4 0x01D8      LDR      R0,[R4, #+472]
   \       0xBC   0x4440             ADD      R0,R8,R0
   \       0xBE   0x9001             STR      R0,[SP, #+4]
   \       0xC0   0x....'....        LDR.W    R0,??DataTable39_4
   \       0xC4   0x9000             STR      R0,[SP, #+0]
   \       0xC6   0xF241 0x1358      MOVW     R3,#+4440
   \       0xCA   0x462A             MOV      R2,R5
   \       0xCC   0x2102             MOVS     R1,#+2
   \       0xCE   0x4638             MOV      R0,R7
   \       0xD0   0x....'....        BL       mbedtls_debug_print_msg
   4441                      }
   4442                  }
   \                     ??ssl_load_buffered_message_8: (+1)
   \       0xD4   0xF108 0x0801      ADD      R8,R8,#+1
   \       0xD8   0xE7D7             B.N      ??ssl_load_buffered_message_6
   4443              }
   4444          #endif /* MBEDTLS_DEBUG_C */
   4445          
   4446              /* Check if we have buffered and/or fully reassembled the
   4447               * next handshake message. */
   4448              hs_buf = &hs->buffering.hs[0];
   4449              if( ( hs_buf->is_valid == 1 ) && ( hs_buf->is_complete == 1 ) )
   4450              {
   4451                  /* Synthesize a record containing the buffered HS message. */
   4452                  size_t msg_len = ( hs_buf->data[1] << 16 ) |
   4453                                   ( hs_buf->data[2] << 8  ) |
   4454                                     hs_buf->data[3];
   4455          
   4456                  /* Double-check that we haven't accidentally buffered
   4457                   * a message that doesn't fit into the input buffer. */
   4458                  if( msg_len + 12 > MBEDTLS_SSL_IN_CONTENT_LEN )
   4459                  {
   4460                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
   4461                      return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   4462                  }
   4463          
   4464                  MBEDTLS_SSL_DEBUG_MSG( 2, ( "Next handshake message has been buffered - load" ) );
   \                     ??ssl_load_buffered_message_11: (+1)
   \       0xDA   0x....'....        LDR.W    R0,??DataTable39_5
   \       0xDE   0x9000             STR      R0,[SP, #+0]
   \       0xE0   0xF241 0x1370      MOVW     R3,#+4464
   \       0xE4   0x462A             MOV      R2,R5
   \       0xE6   0x2102             MOVS     R1,#+2
   \       0xE8   0x4638             MOV      R0,R7
   \       0xEA   0x....'....        BL       mbedtls_debug_print_msg
   4465                  MBEDTLS_SSL_DEBUG_BUF( 3, "Buffered handshake message (incl. header)",
   4466                                         hs_buf->data, msg_len + 12 );
   \       0xEE   0xF104 0x000C      ADD      R0,R4,#+12
   \       0xF2   0x9002             STR      R0,[SP, #+8]
   \       0xF4   0xF8D8 0x0004      LDR      R0,[R8, #+4]
   \       0xF8   0x9001             STR      R0,[SP, #+4]
   \       0xFA   0x....'....        LDR.W    R0,??DataTable39_6
   \       0xFE   0x9000             STR      R0,[SP, #+0]
   \      0x100   0xF241 0x1372      MOVW     R3,#+4466
   \      0x104   0x462A             MOV      R2,R5
   \      0x106   0x2103             MOVS     R1,#+3
   \      0x108   0x4638             MOV      R0,R7
   \      0x10A   0x....'....        BL       mbedtls_debug_print_buf
   4467          
   4468                  ssl->in_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
   \      0x10E   0x2016             MOVS     R0,#+22
   \      0x110   0x67B8             STR      R0,[R7, #+120]
   4469                  ssl->in_hslen   = msg_len + 12;
   \      0x112   0xF104 0x000C      ADD      R0,R4,#+12
   \      0x116   0xF8C7 0x00A0      STR      R0,[R7, #+160]
   4470                  ssl->in_msglen  = msg_len + 12;
   \      0x11A   0x340C             ADDS     R4,R4,#+12
   \      0x11C   0x67FC             STR      R4,[R7, #+124]
   4471                  memcpy( ssl->in_msg, hs_buf->data, ssl->in_hslen );
   \      0x11E   0xF8D7 0x20A0      LDR      R2,[R7, #+160]
   \      0x122   0xF8D8 0x1004      LDR      R1,[R8, #+4]
   \      0x126   0x6F38             LDR      R0,[R7, #+112]
   \      0x128   0x....'....        BL       __aeabi_memcpy
   4472          
   4473                  ret = 0;
   4474                  goto exit;
   \      0x12C   0xE00E             B.N      ??ssl_load_buffered_message_5
   4475              }
   4476              else
   4477              {
   4478                  MBEDTLS_SSL_DEBUG_MSG( 2, ( "Next handshake message %u not or only partially bufffered",
   4479                                              hs->in_msg_seq ) );
   \                     ??ssl_load_buffered_message_12: (+1)
   \      0x12E   0xF8D4 0x01D8      LDR      R0,[R4, #+472]
   \      0x132   0x9001             STR      R0,[SP, #+4]
   \      0x134   0x....'....        LDR.W    R0,??DataTable40
   \      0x138   0x9000             STR      R0,[SP, #+0]
   \      0x13A   0xF241 0x137F      MOVW     R3,#+4479
   \      0x13E   0x462A             MOV      R2,R5
   \      0x140   0x2102             MOVS     R1,#+2
   \      0x142   0x4638             MOV      R0,R7
   \      0x144   0x....'....        BL       mbedtls_debug_print_msg
   4480              }
   4481          
   4482              ret = -1;
   \      0x148   0xF04F 0x36FF      MOV      R6,#-1
   4483          
   4484          exit:
   4485          
   4486              MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= ssl_load_buffered_message" ) );
   \                     ??ssl_load_buffered_message_5: (+1)
   \      0x14C   0x....'....        LDR.W    R0,??DataTable40_1
   \      0x150   0x9000             STR      R0,[SP, #+0]
   \      0x152   0xF241 0x1386      MOVW     R3,#+4486
   \      0x156   0x462A             MOV      R2,R5
   \      0x158   0x2102             MOVS     R1,#+2
   \      0x15A   0x4638             MOV      R0,R7
   \      0x15C   0x....'....        BL       mbedtls_debug_print_msg
   4487              return( ret );
   \      0x160   0x4630             MOV      R0,R6
   \                     ??ssl_load_buffered_message_1: (+1)
   \      0x162   0xB004             ADD      SP,SP,#+16
   \      0x164   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   \                     ??ssl_load_buffered_message_7: (+1)
   \      0x168   0xF504 0x7804      ADD      R8,R4,#+528
   \      0x16C   0xF898 0x0000      LDRB     R0,[R8, #+0]
   \      0x170   0xF000 0x0005      AND      R0,R0,#0x5
   \      0x174   0x2805             CMP      R0,#+5
   \      0x176   0xD1DA             BNE.N    ??ssl_load_buffered_message_12
   \      0x178   0xF8D8 0x0004      LDR      R0,[R8, #+4]
   \      0x17C   0x7840             LDRB     R0,[R0, #+1]
   \      0x17E   0xF8D8 0x1004      LDR      R1,[R8, #+4]
   \      0x182   0x788C             LDRB     R4,[R1, #+2]
   \      0x184   0x0224             LSLS     R4,R4,#+8
   \      0x186   0xEA44 0x4400      ORR      R4,R4,R0, LSL #+16
   \      0x18A   0x4608             MOV      R0,R1
   \      0x18C   0x78C0             LDRB     R0,[R0, #+3]
   \      0x18E   0x4304             ORRS     R4,R0,R4
   \      0x190   0xF104 0x000C      ADD      R0,R4,#+12
   \      0x194   0xF642 0x0101      MOVW     R1,#+10241
   \      0x198   0x4288             CMP      R0,R1
   \      0x19A   0xD39E             BCC.N    ??ssl_load_buffered_message_11
   \      0x19C   0x....'....        LDR.W    R0,??DataTable40_2
   \      0x1A0   0x9000             STR      R0,[SP, #+0]
   \      0x1A2   0xF241 0x136C      MOVW     R3,#+4460
   \      0x1A6   0x462A             MOV      R2,R5
   \      0x1A8   0x2101             MOVS     R1,#+1
   \      0x1AA   0x4638             MOV      R0,R7
   \      0x1AC   0x....'....        BL       mbedtls_debug_print_msg
   \      0x1B0   0x....'....        LDR.W    R0,??DataTable35_1  ;; 0xffff9400
   \      0x1B4   0xE7D5             B.N      ??ssl_load_buffered_message_1
   4488          }
   4489          

   \                                 In section .text, align 2, keep-with-next
   4490          static int ssl_buffer_make_space( mbedtls_ssl_context *ssl,
   4491                                            size_t desired )
   4492          {
   \                     ssl_buffer_make_space: (+1)
   \        0x0   0xE92D 0x41FC      PUSH     {R2-R8,LR}
   \        0x4   0x4605             MOV      R5,R0
   \        0x6   0x460E             MOV      R6,R1
   4493              int offset;
   4494              mbedtls_ssl_handshake_params * const hs = ssl->handshake;
   \        0x8   0x6BEF             LDR      R7,[R5, #+60]
   4495              MBEDTLS_SSL_DEBUG_MSG( 2, ( "Attempt to free buffered messages to have %u bytes available",
   4496                                          (unsigned) desired ) );
   \        0xA   0x....'....        LDR.W    R4,??DataTable41
   \        0xE   0x9601             STR      R6,[SP, #+4]
   \       0x10   0x....'....        LDR.W    R0,??DataTable40_3
   \       0x14   0x9000             STR      R0,[SP, #+0]
   \       0x16   0xF241 0x1390      MOVW     R3,#+4496
   \       0x1A   0x4622             MOV      R2,R4
   \       0x1C   0x2102             MOVS     R1,#+2
   \       0x1E   0x4628             MOV      R0,R5
   \       0x20   0x....'....        BL       mbedtls_debug_print_msg
   4497          
   4498              /* Get rid of future records epoch first, if such exist. */
   4499              ssl_free_buffered_record( ssl );
   \       0x24   0x4628             MOV      R0,R5
   \       0x26   0x....'....        BL       ssl_free_buffered_record
   4500          
   4501              /* Check if we have enough space available now. */
   4502              if( desired <= ( MBEDTLS_SSL_DTLS_MAX_BUFFERING -
   4503                               hs->buffering.total_bytes_buffered ) )
   \       0x2A   0xF8D7 0x0208      LDR      R0,[R7, #+520]
   \       0x2E   0xF5C0 0x4000      RSB      R0,R0,#+32768
   \       0x32   0x42B0             CMP      R0,R6
   \       0x34   0xD30B             BCC.N    ??ssl_buffer_make_space_0
   4504              {
   4505                  MBEDTLS_SSL_DEBUG_MSG( 2, ( "Enough space available after freeing future epoch record" ) );
   \       0x36   0x....'....        LDR.W    R0,??DataTable40_4
   \       0x3A   0x9000             STR      R0,[SP, #+0]
   \       0x3C   0xF241 0x1399      MOVW     R3,#+4505
   \       0x40   0x4622             MOV      R2,R4
   \       0x42   0x2102             MOVS     R1,#+2
   \       0x44   0x4628             MOV      R0,R5
   \       0x46   0x....'....        BL       mbedtls_debug_print_msg
   4506                  return( 0 );
   \       0x4A   0x2000             MOVS     R0,#+0
   \       0x4C   0xE02D             B.N      ??ssl_buffer_make_space_1
   4507              }
   4508          
   4509              /* We don't have enough space to buffer the next expected handshake
   4510               * message. Remove buffers used for future messages to gain space,
   4511               * starting with the most distant one. */
   4512              for( offset = MBEDTLS_SSL_MAX_BUFFERED_HS - 1;
   \                     ??ssl_buffer_make_space_0: (+1)
   \       0x4E   0xF04F 0x0803      MOV      R8,#+3
   \       0x52   0xE001             B.N      ??ssl_buffer_make_space_2
   4513                   offset >= 0; offset-- )
   \                     ??ssl_buffer_make_space_3: (+1)
   \       0x54   0xF1A8 0x0801      SUB      R8,R8,#+1
   \                     ??ssl_buffer_make_space_2: (+1)
   \       0x58   0xF1B8 0x0F00      CMP      R8,#+0
   \       0x5C   0xD423             BMI.N    ??ssl_buffer_make_space_4
   4514              {
   4515                  MBEDTLS_SSL_DEBUG_MSG( 2, ( "Free buffering slot %d to make space for reassembly of next handshake message",
   4516                                              offset ) );
   \       0x5E   0xF8CD 0x8004      STR      R8,[SP, #+4]
   \       0x62   0x....'....        LDR.W    R0,??DataTable40_5
   \       0x66   0x9000             STR      R0,[SP, #+0]
   \       0x68   0xF241 0x13A4      MOVW     R3,#+4516
   \       0x6C   0x4622             MOV      R2,R4
   \       0x6E   0x2102             MOVS     R1,#+2
   \       0x70   0x4628             MOV      R0,R5
   \       0x72   0x....'....        BL       mbedtls_debug_print_msg
   4517          
   4518                  ssl_buffering_free_slot( ssl, (uint8_t) offset );
   \       0x76   0x4640             MOV      R0,R8
   \       0x78   0x4601             MOV      R1,R0
   \       0x7A   0xB2C9             UXTB     R1,R1
   \       0x7C   0x4628             MOV      R0,R5
   \       0x7E   0x....'....        BL       ssl_buffering_free_slot
   4519          
   4520                  /* Check if we have enough space available now. */
   4521                  if( desired <= ( MBEDTLS_SSL_DTLS_MAX_BUFFERING -
   4522                                   hs->buffering.total_bytes_buffered ) )
   \       0x82   0xF8D7 0x0208      LDR      R0,[R7, #+520]
   \       0x86   0xF5C0 0x4000      RSB      R0,R0,#+32768
   \       0x8A   0x42B0             CMP      R0,R6
   \       0x8C   0xD3E2             BCC.N    ??ssl_buffer_make_space_3
   4523                  {
   4524                      MBEDTLS_SSL_DEBUG_MSG( 2, ( "Enough space available after freeing buffered HS messages" ) );
   \       0x8E   0x....'....        LDR.W    R0,??DataTable41_1
   \       0x92   0x9000             STR      R0,[SP, #+0]
   \       0x94   0xF241 0x13AC      MOVW     R3,#+4524
   \       0x98   0x4622             MOV      R2,R4
   \       0x9A   0x2102             MOVS     R1,#+2
   \       0x9C   0x4628             MOV      R0,R5
   \       0x9E   0x....'....        BL       mbedtls_debug_print_msg
   4525                      return( 0 );
   \       0xA2   0x2000             MOVS     R0,#+0
   \       0xA4   0xE001             B.N      ??ssl_buffer_make_space_1
   4526                  }
   4527              }
   4528          
   4529              return( -1 );
   \                     ??ssl_buffer_make_space_4: (+1)
   \       0xA6   0xF04F 0x30FF      MOV      R0,#-1
   \                     ??ssl_buffer_make_space_1: (+1)
   \       0xAA   0xE8BD 0x81F6      POP      {R1,R2,R4-R8,PC}  ;; return
   4530          }
   4531          

   \                                 In section .text, align 2, keep-with-next
   4532          static int ssl_buffer_message( mbedtls_ssl_context *ssl )
   4533          {
   \                     ssl_buffer_message: (+1)
   \        0x0   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \        0x4   0xB085             SUB      SP,SP,#+20
   \        0x6   0x4606             MOV      R6,R0
   4534              int ret = 0;
   \        0x8   0xF04F 0x0800      MOV      R8,#+0
   4535              mbedtls_ssl_handshake_params * const hs = ssl->handshake;
   \        0xC   0x6BF4             LDR      R4,[R6, #+60]
   4536          
   4537              if( hs == NULL )
   \        0xE   0x2C00             CMP      R4,#+0
   \       0x10   0xD101             BNE.N    ??ssl_buffer_message_0
   4538                  return( 0 );
   \       0x12   0x4640             MOV      R0,R8
   \       0x14   0xE18C             B.N      ??ssl_buffer_message_1
   4539          
   4540              MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> ssl_buffer_message" ) );
   \                     ??ssl_buffer_message_0: (+1)
   \       0x16   0x....'....        LDR.W    R7,??DataTable41
   \       0x1A   0x....'....        LDR.W    R0,??DataTable40_6
   \       0x1E   0x9000             STR      R0,[SP, #+0]
   \       0x20   0xF241 0x13BC      MOVW     R3,#+4540
   \       0x24   0x463A             MOV      R2,R7
   \       0x26   0x2102             MOVS     R1,#+2
   \       0x28   0x4630             MOV      R0,R6
   \       0x2A   0x....'....        BL       mbedtls_debug_print_msg
   4541          
   4542              switch( ssl->in_msgtype )
   \       0x2E   0x6FB0             LDR      R0,[R6, #+120]
   \       0x30   0x2814             CMP      R0,#+20
   \       0x32   0xD002             BEQ.N    ??ssl_buffer_message_2
   \       0x34   0x2816             CMP      R0,#+22
   \       0x36   0xD00E             BEQ.N    ??ssl_buffer_message_3
   \       0x38   0xE16F             B.N      ??ssl_buffer_message_4
   4543              {
   4544                  case MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC:
   4545                      MBEDTLS_SSL_DEBUG_MSG( 2, ( "Remember CCS message" ) );
   \                     ??ssl_buffer_message_2: (+1)
   \       0x3A   0x....'....        LDR.W    R0,??DataTable40_7
   \       0x3E   0x9000             STR      R0,[SP, #+0]
   \       0x40   0xF241 0x13C1      MOVW     R3,#+4545
   \       0x44   0x463A             MOV      R2,R7
   \       0x46   0x2102             MOVS     R1,#+2
   \       0x48   0x4630             MOV      R0,R6
   \       0x4A   0x....'....        BL       mbedtls_debug_print_msg
   4546          
   4547                      hs->buffering.seen_ccs = 1;
   \       0x4E   0x2001             MOVS     R0,#+1
   \       0x50   0xF884 0x020C      STRB     R0,[R4, #+524]
   4548                      break;
   \       0x54   0xE161             B.N      ??ssl_buffer_message_4
   4549          
   4550                  case MBEDTLS_SSL_MSG_HANDSHAKE:
   4551                  {
   4552                      unsigned recv_msg_seq_offset;
   4553                      unsigned recv_msg_seq = ( ssl->in_msg[4] << 8 ) | ssl->in_msg[5];
   \                     ??ssl_buffer_message_3: (+1)
   \       0x56   0x6F30             LDR      R0,[R6, #+112]
   \       0x58   0x7901             LDRB     R1,[R0, #+4]
   \       0x5A   0x7940             LDRB     R0,[R0, #+5]
   \       0x5C   0xEA40 0x2001      ORR      R0,R0,R1, LSL #+8
   4554                      mbedtls_ssl_hs_buffer *hs_buf;
   4555                      size_t msg_len = ssl->in_hslen - 12;
   \       0x60   0xF8D6 0x90A0      LDR      R9,[R6, #+160]
   \       0x64   0xF1A9 0x090C      SUB      R9,R9,#+12
   4556          
   4557                      /* We should never receive an old handshake
   4558                       * message - double-check nonetheless. */
   4559                      if( recv_msg_seq < ssl->handshake->in_msg_seq )
   \       0x68   0x6BF1             LDR      R1,[R6, #+60]
   \       0x6A   0xF8D1 0x11D8      LDR      R1,[R1, #+472]
   \       0x6E   0x4288             CMP      R0,R1
   \       0x70   0xD20B             BCS.N    ??ssl_buffer_message_5
   4560                      {
   4561                          MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
   \       0x72   0x....'....        LDR.W    R0,??DataTable40_2
   \       0x76   0x9000             STR      R0,[SP, #+0]
   \       0x78   0xF241 0x13D1      MOVW     R3,#+4561
   \       0x7C   0x463A             MOV      R2,R7
   \       0x7E   0x2101             MOVS     R1,#+1
   \       0x80   0x4630             MOV      R0,R6
   \       0x82   0x....'....        BL       mbedtls_debug_print_msg
   4562                          return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   \       0x86   0x....             LDR.N    R0,??DataTable35_1  ;; 0xffff9400
   \       0x88   0xE152             B.N      ??ssl_buffer_message_1
   4563                      }
   4564          
   4565                      recv_msg_seq_offset = recv_msg_seq - ssl->handshake->in_msg_seq;
   \                     ??ssl_buffer_message_5: (+1)
   \       0x8A   0x6BF1             LDR      R1,[R6, #+60]
   \       0x8C   0xF8D1 0x51D8      LDR      R5,[R1, #+472]
   \       0x90   0x1B45             SUBS     R5,R0,R5
   4566                      if( recv_msg_seq_offset >= MBEDTLS_SSL_MAX_BUFFERED_HS )
   \       0x92   0x2D04             CMP      R5,#+4
   \       0x94   0xD313             BCC.N    ??ssl_buffer_message_6
   4567                      {
   4568                          /* Silently ignore -- message too far in the future */
   4569                          MBEDTLS_SSL_DEBUG_MSG( 2,
   4570                           ( "Ignore future HS message with sequence number %u, "
   4571                             "buffering window %u - %u",
   4572                             recv_msg_seq, ssl->handshake->in_msg_seq,
   4573                             ssl->handshake->in_msg_seq + MBEDTLS_SSL_MAX_BUFFERED_HS - 1 ) );
   \       0x96   0xF8D1 0x11D8      LDR      R1,[R1, #+472]
   \       0x9A   0x1CC9             ADDS     R1,R1,#+3
   \       0x9C   0x9103             STR      R1,[SP, #+12]
   \       0x9E   0x6BF1             LDR      R1,[R6, #+60]
   \       0xA0   0xF8D1 0x11D8      LDR      R1,[R1, #+472]
   \       0xA4   0x9102             STR      R1,[SP, #+8]
   \       0xA6   0x9001             STR      R0,[SP, #+4]
   \       0xA8   0x....'....        LDR.W    R0,??DataTable41_2
   \       0xAC   0x9000             STR      R0,[SP, #+0]
   \       0xAE   0xF241 0x13DD      MOVW     R3,#+4573
   \       0xB2   0x463A             MOV      R2,R7
   \       0xB4   0x2102             MOVS     R1,#+2
   \       0xB6   0x4630             MOV      R0,R6
   \       0xB8   0x....'....        BL       mbedtls_debug_print_msg
   4574          
   4575                          goto exit;
   \       0xBC   0xE12D             B.N      ??ssl_buffer_message_4
   4576                      }
   4577          
   4578                      MBEDTLS_SSL_DEBUG_MSG( 2, ( "Buffering HS message with sequence number %u, offset %u ",
   4579                                                  recv_msg_seq, recv_msg_seq_offset ) );
   \                     ??ssl_buffer_message_6: (+1)
   \       0xBE   0x9502             STR      R5,[SP, #+8]
   \       0xC0   0x9001             STR      R0,[SP, #+4]
   \       0xC2   0x....'....        LDR.W    R0,??DataTable41_3
   \       0xC6   0x9000             STR      R0,[SP, #+0]
   \       0xC8   0xF241 0x13E3      MOVW     R3,#+4579
   \       0xCC   0x463A             MOV      R2,R7
   \       0xCE   0x2102             MOVS     R1,#+2
   \       0xD0   0x4630             MOV      R0,R6
   \       0xD2   0x....'....        BL       mbedtls_debug_print_msg
   4580          
   4581                      hs_buf = &hs->buffering.hs[ recv_msg_seq_offset ];
   \       0xD6   0xEB05 0x0045      ADD      R0,R5,R5, LSL #+1
   \       0xDA   0xEB04 0x0080      ADD      R0,R4,R0, LSL #+2
   \       0xDE   0xF500 0x7A04      ADD      R10,R0,#+528
   4582          
   4583                      /* Check if the buffering for this seq nr has already commenced. */
   4584                      if( !hs_buf->is_valid )
   \       0xE2   0xF89A 0x0000      LDRB     R0,[R10, #+0]
   \       0xE6   0x07C0             LSLS     R0,R0,#+31
   \       0xE8   0xF100 0x80E9      BMI.W    ??ssl_buffer_message_7
   4585                      {
   4586                          size_t reassembly_buf_sz;
   4587          
   4588                          hs_buf->is_fragmented =
   4589                              ( ssl_hs_is_proper_fragment( ssl ) == 1 );
   \       0xEC   0x4630             MOV      R0,R6
   \       0xEE   0x....'....        BL       ssl_hs_is_proper_fragment
   \       0xF2   0x2801             CMP      R0,#+1
   \       0xF4   0xD101             BNE.N    ??ssl_buffer_message_8
   \       0xF6   0x2001             MOVS     R0,#+1
   \       0xF8   0xE000             B.N      ??ssl_buffer_message_9
   \                     ??ssl_buffer_message_8: (+1)
   \       0xFA   0x4640             MOV      R0,R8
   \                     ??ssl_buffer_message_9: (+1)
   \       0xFC   0xF8DA 0x1000      LDR      R1,[R10, #+0]
   \      0x100   0xF360 0x0141      BFI      R1,R0,#+1,#+1
   \      0x104   0xF8CA 0x1000      STR      R1,[R10, #+0]
   4590          
   4591                          /* We copy the message back into the input buffer
   4592                           * after reassembly, so check that it's not too large.
   4593                           * This is an implementation-specific limitation
   4594                           * and not one from the standard, hence it is not
   4595                           * checked in ssl_check_hs_header(). */
   4596                          if( msg_len + 12 > MBEDTLS_SSL_IN_CONTENT_LEN )
   \      0x108   0xF109 0x000C      ADD      R0,R9,#+12
   \      0x10C   0xF642 0x0101      MOVW     R1,#+10241
   \      0x110   0x4288             CMP      R0,R1
   \      0x112   0xF080 0x8102      BCS.W    ??ssl_buffer_message_4
   4597                          {
   4598                              /* Ignore message */
   4599                              goto exit;
   4600                          }
   4601          
   4602                          /* Check if we have enough space to buffer the message. */
   4603                          if( hs->buffering.total_bytes_buffered >
   4604                              MBEDTLS_SSL_DTLS_MAX_BUFFERING )
   \      0x116   0xF8D4 0x0208      LDR      R0,[R4, #+520]
   \      0x11A   0xF248 0x0101      MOVW     R1,#+32769
   \      0x11E   0x4288             CMP      R0,R1
   \      0x120   0xD30B             BCC.N    ??ssl_buffer_message_10
   4605                          {
   4606                              MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
   \      0x122   0x....'....        LDR.W    R0,??DataTable40_2
   \      0x126   0x9000             STR      R0,[SP, #+0]
   \      0x128   0xF241 0x13FE      MOVW     R3,#+4606
   \      0x12C   0x463A             MOV      R2,R7
   \      0x12E   0x2101             MOVS     R1,#+1
   \      0x130   0x4630             MOV      R0,R6
   \      0x132   0x....'....        BL       mbedtls_debug_print_msg
   4607                              return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   \      0x136   0x....             LDR.N    R0,??DataTable35_1  ;; 0xffff9400
   \      0x138   0xE0FA             B.N      ??ssl_buffer_message_1
   4608                          }
   4609          
   4610                          reassembly_buf_sz = ssl_get_reassembly_buffer_size( msg_len,
   4611                                                                 hs_buf->is_fragmented );
   \                     ??ssl_buffer_message_10: (+1)
   \      0x13A   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \      0x13E   0xF3C0 0x0140      UBFX     R1,R0,#+1,#+1
   \      0x142   0x4648             MOV      R0,R9
   \      0x144   0x....'....        BL       ssl_get_reassembly_buffer_size
   \      0x148   0x4683             MOV      R11,R0
   4612          
   4613                          if( reassembly_buf_sz > ( MBEDTLS_SSL_DTLS_MAX_BUFFERING -
   4614                                                    hs->buffering.total_bytes_buffered ) )
   \      0x14A   0xF8D4 0x0208      LDR      R0,[R4, #+520]
   \      0x14E   0xF5C0 0x4000      RSB      R0,R0,#+32768
   \      0x152   0x4558             CMP      R0,R11
   \      0x154   0xD23B             BCS.N    ??ssl_buffer_message_11
   4615                          {
   4616                              if( recv_msg_seq_offset > 0 )
   \      0x156   0x2D00             CMP      R5,#+0
   \      0x158   0xF8D4 0x0208      LDR      R0,[R4, #+520]
   \      0x15C   0x9003             STR      R0,[SP, #+12]
   \      0x15E   0xF44F 0x4000      MOV      R0,#+32768
   \      0x162   0x9002             STR      R0,[SP, #+8]
   \      0x164   0xF8CD 0x9004      STR      R9,[SP, #+4]
   \      0x168   0xD00A             BEQ.N    ??ssl_buffer_message_12
   4617                              {
   4618                                  /* If we can't buffer a future message because
   4619                                   * of space limitations -- ignore. */
   4620                                  MBEDTLS_SSL_DEBUG_MSG( 2, ( "Buffering of future message of size %u would exceed the compile-time limit %u (already %u bytes buffered) -- ignore\n",
   4621                                       (unsigned) msg_len, MBEDTLS_SSL_DTLS_MAX_BUFFERING,
   4622                                       (unsigned) hs->buffering.total_bytes_buffered ) );
   \      0x16A   0x....'....        LDR.W    R0,??DataTable41_4
   \      0x16E   0x9000             STR      R0,[SP, #+0]
   \      0x170   0xF241 0x230E      MOVW     R3,#+4622
   \      0x174   0x463A             MOV      R2,R7
   \      0x176   0x2102             MOVS     R1,#+2
   \      0x178   0x4630             MOV      R0,R6
   \      0x17A   0x....'....        BL       mbedtls_debug_print_msg
   4623                                  goto exit;
   \      0x17E   0xE0CC             B.N      ??ssl_buffer_message_4
   4624                              }
   4625                              else
   4626                              {
   4627                                  MBEDTLS_SSL_DEBUG_MSG( 2, ( "Buffering of future message of size %u would exceed the compile-time limit %u (already %u bytes buffered) -- attempt to make space by freeing buffered future messages\n",
   4628                                       (unsigned) msg_len, MBEDTLS_SSL_DTLS_MAX_BUFFERING,
   4629                                       (unsigned) hs->buffering.total_bytes_buffered ) );
   \                     ??ssl_buffer_message_12: (+1)
   \      0x180   0x....'....        LDR.W    R0,??DataTable41_5
   \      0x184   0x9000             STR      R0,[SP, #+0]
   \      0x186   0xF241 0x2315      MOVW     R3,#+4629
   \      0x18A   0x463A             MOV      R2,R7
   \      0x18C   0x2102             MOVS     R1,#+2
   \      0x18E   0x4630             MOV      R0,R6
   \      0x190   0x....'....        BL       mbedtls_debug_print_msg
   4630                              }
   4631          
   4632                              if( ssl_buffer_make_space( ssl, reassembly_buf_sz ) != 0 )
   \      0x194   0x4659             MOV      R1,R11
   \      0x196   0x4630             MOV      R0,R6
   \      0x198   0x....'....        BL       ssl_buffer_make_space
   \      0x19C   0x2800             CMP      R0,#+0
   \      0x19E   0xD016             BEQ.N    ??ssl_buffer_message_11
   4633                              {
   4634                                  MBEDTLS_SSL_DEBUG_MSG( 2, ( "Reassembly of next message of size %u (%u with bitmap) would exceed the compile-time limit %u (already %u bytes buffered) -- fail\n",
   4635                                       (unsigned) msg_len,
   4636                                       (unsigned) reassembly_buf_sz,
   4637                                       MBEDTLS_SSL_DTLS_MAX_BUFFERING,
   4638                                       (unsigned) hs->buffering.total_bytes_buffered ) );
   \      0x1A0   0xF8D4 0x0208      LDR      R0,[R4, #+520]
   \      0x1A4   0x9004             STR      R0,[SP, #+16]
   \      0x1A6   0xF44F 0x4000      MOV      R0,#+32768
   \      0x1AA   0x9003             STR      R0,[SP, #+12]
   \      0x1AC   0xF8CD 0xB008      STR      R11,[SP, #+8]
   \      0x1B0   0xF8CD 0x9004      STR      R9,[SP, #+4]
   \      0x1B4   0x....'....        LDR.W    R0,??DataTable41_6
   \      0x1B8   0x9000             STR      R0,[SP, #+0]
   \      0x1BA   0xF241 0x231E      MOVW     R3,#+4638
   \      0x1BE   0x463A             MOV      R2,R7
   \      0x1C0   0x2102             MOVS     R1,#+2
   \      0x1C2   0x4630             MOV      R0,R6
   \      0x1C4   0x....'....        BL       mbedtls_debug_print_msg
   4639                                  ret = MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL;
   \      0x1C8   0x....'....        LDR.W    R8,??DataTable35  ;; 0xffff9600
   4640                                  goto exit;
   \      0x1CC   0xE0A5             B.N      ??ssl_buffer_message_4
   4641                              }
   4642                          }
   4643          
   4644                          MBEDTLS_SSL_DEBUG_MSG( 2, ( "initialize reassembly, total length = %d",
   4645                                                      msg_len ) );
   \                     ??ssl_buffer_message_11: (+1)
   \      0x1CE   0xF8CD 0x9004      STR      R9,[SP, #+4]
   \      0x1D2   0x....'....        LDR.W    R0,??DataTable41_7
   \      0x1D6   0x9000             STR      R0,[SP, #+0]
   \      0x1D8   0xF241 0x2325      MOVW     R3,#+4645
   \      0x1DC   0x463A             MOV      R2,R7
   \      0x1DE   0x2102             MOVS     R1,#+2
   \      0x1E0   0x4630             MOV      R0,R6
   \      0x1E2   0x....'....        BL       mbedtls_debug_print_msg
   4646          
   4647                          hs_buf->data = mbedtls_calloc( 1, reassembly_buf_sz );
   \      0x1E6   0x4659             MOV      R1,R11
   \      0x1E8   0x2001             MOVS     R0,#+1
   \      0x1EA   0x....'....        BL       mbedtls_calloc
   \      0x1EE   0xF8CA 0x0004      STR      R0,[R10, #+4]
   4648                          if( hs_buf->data == NULL )
   \      0x1F2   0x2800             CMP      R0,#+0
   \      0x1F4   0xD102             BNE.N    ??ssl_buffer_message_13
   4649                          {
   4650                              ret = MBEDTLS_ERR_SSL_ALLOC_FAILED;
   \      0x1F6   0x....'....        LDR.W    R8,??DataTable41_8  ;; 0xffff8100
   4651                              goto exit;
   \      0x1FA   0xE08E             B.N      ??ssl_buffer_message_4
   4652                          }
   4653                          hs_buf->data_len = reassembly_buf_sz;
   \                     ??ssl_buffer_message_13: (+1)
   \      0x1FC   0xF8CA 0xB008      STR      R11,[R10, #+8]
   4654          
   4655                          /* Prepare final header: copy msg_type, length and message_seq,
   4656                           * then add standardised fragment_offset and fragment_length */
   4657                          memcpy( hs_buf->data, ssl->in_msg, 6 );
   \      0x200   0x2206             MOVS     R2,#+6
   \      0x202   0x6F31             LDR      R1,[R6, #+112]
   \      0x204   0xF8DA 0x0004      LDR      R0,[R10, #+4]
   \      0x208   0x....'....        BL       __aeabi_memcpy
   4658                          memset( hs_buf->data + 6, 0, 3 );
   \      0x20C   0x4642             MOV      R2,R8
   \      0x20E   0x2103             MOVS     R1,#+3
   \      0x210   0xF8DA 0x0004      LDR      R0,[R10, #+4]
   \      0x214   0x1D80             ADDS     R0,R0,#+6
   \      0x216   0x....'....        BL       __aeabi_memset
   4659                          memcpy( hs_buf->data + 9, hs_buf->data + 1, 3 );
   \      0x21A   0x2203             MOVS     R2,#+3
   \      0x21C   0xF8DA 0x0004      LDR      R0,[R10, #+4]
   \      0x220   0x1C41             ADDS     R1,R0,#+1
   \      0x222   0x3009             ADDS     R0,R0,#+9
   \      0x224   0x....'....        BL       __aeabi_memcpy
   4660          
   4661                          hs_buf->is_valid = 1;
   \      0x228   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \      0x22C   0xF040 0x0001      ORR      R0,R0,#0x1
   \      0x230   0xF8CA 0x0000      STR      R0,[R10, #+0]
   4662          
   4663                          hs->buffering.total_bytes_buffered += reassembly_buf_sz;
   \      0x234   0xF8D4 0x0208      LDR      R0,[R4, #+520]
   \      0x238   0x4483             ADD      R11,R11,R0
   \      0x23A   0xF8C4 0xB208      STR      R11,[R4, #+520]
   4664                      }
   4665                      else
   4666                      {
   4667                          /* Make sure msg_type and length are consistent */
   4668                          if( memcmp( hs_buf->data, ssl->in_msg, 4 ) != 0 )
   4669                          {
   4670                              MBEDTLS_SSL_DEBUG_MSG( 1, ( "Fragment header mismatch - ignore" ) );
   4671                              /* Ignore */
   4672                              goto exit;
   4673                          }
   4674                      }
   4675          
   4676                      if( !hs_buf->is_complete )
   \                     ??ssl_buffer_message_14: (+1)
   \      0x23E   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \      0x242   0xF3C0 0x0080      UBFX     R0,R0,#+2,#+1
   \      0x246   0x2800             CMP      R0,#+0
   \      0x248   0xD167             BNE.N    ??ssl_buffer_message_4
   4677                      {
   4678                          size_t frag_len, frag_off;
   4679                          unsigned char * const msg = hs_buf->data + 12;
   \      0x24A   0xF8DA 0x0004      LDR      R0,[R10, #+4]
   \      0x24E   0xF100 0x040C      ADD      R4,R0,#+12
   4680          
   4681                          /*
   4682                           * Check and copy current fragment
   4683                           */
   4684          
   4685                          /* Validation of header fields already done in
   4686                           * mbedtls_ssl_prepare_handshake_record(). */
   4687                          frag_off = ssl_get_hs_frag_off( ssl );
   \      0x252   0x4630             MOV      R0,R6
   \      0x254   0x....'....        BL       ssl_get_hs_frag_off
   \      0x258   0x4605             MOV      R5,R0
   4688                          frag_len = ssl_get_hs_frag_len( ssl );
   \      0x25A   0x4630             MOV      R0,R6
   \      0x25C   0x....'....        BL       ssl_get_hs_frag_len
   \      0x260   0x4683             MOV      R11,R0
   4689          
   4690                          MBEDTLS_SSL_DEBUG_MSG( 2, ( "adding fragment, offset = %d, length = %d",
   4691                                                      frag_off, frag_len ) );
   \      0x262   0xF8CD 0xB008      STR      R11,[SP, #+8]
   \      0x266   0x9501             STR      R5,[SP, #+4]
   \      0x268   0x....'....        LDR.W    R0,??DataTable41_9
   \      0x26C   0x9000             STR      R0,[SP, #+0]
   \      0x26E   0xF241 0x2353      MOVW     R3,#+4691
   \      0x272   0x463A             MOV      R2,R7
   \      0x274   0x2102             MOVS     R1,#+2
   \      0x276   0x4630             MOV      R0,R6
   \      0x278   0x....'....        BL       mbedtls_debug_print_msg
   4692                          memcpy( msg + frag_off, ssl->in_msg + 12, frag_len );
   \      0x27C   0x465A             MOV      R2,R11
   \      0x27E   0x6F30             LDR      R0,[R6, #+112]
   \      0x280   0xF100 0x010C      ADD      R1,R0,#+12
   \      0x284   0x1960             ADDS     R0,R4,R5
   \      0x286   0x....'....        BL       __aeabi_memcpy
   4693          
   4694                          if( hs_buf->is_fragmented )
   \      0x28A   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \      0x28E   0xF3C0 0x0040      UBFX     R0,R0,#+1,#+1
   \      0x292   0x2800             CMP      R0,#+0
   \      0x294   0xD026             BEQ.N    ??ssl_buffer_message_15
   4695                          {
   4696                              unsigned char * const bitmask = msg + msg_len;
   \      0x296   0x444C             ADD      R4,R4,R9
   4697                              ssl_bitmask_set( bitmask, frag_off, frag_len );
   \      0x298   0x465A             MOV      R2,R11
   \      0x29A   0x4629             MOV      R1,R5
   \      0x29C   0x4620             MOV      R0,R4
   \      0x29E   0x....'....        BL       ssl_bitmask_set
   4698                              hs_buf->is_complete = ( ssl_bitmask_check( bitmask,
   4699                                                                         msg_len ) == 0 );
   \      0x2A2   0x4649             MOV      R1,R9
   \      0x2A4   0x4620             MOV      R0,R4
   \      0x2A6   0x....'....        BL       ssl_bitmask_check
   \      0x2AA   0x1E40             SUBS     R0,R0,#+1
   \      0x2AC   0x4180             SBCS     R0,R0,R0
   \      0x2AE   0x0FC0             LSRS     R0,R0,#+31
   \      0x2B0   0xF8DA 0x1000      LDR      R1,[R10, #+0]
   \      0x2B4   0xF360 0x0182      BFI      R1,R0,#+2,#+1
   \      0x2B8   0xF8CA 0x1000      STR      R1,[R10, #+0]
   \      0x2BC   0xE018             B.N      ??ssl_buffer_message_16
   4700                          }
   \                     ??ssl_buffer_message_7: (+1)
   \      0x2BE   0x2204             MOVS     R2,#+4
   \      0x2C0   0x6F31             LDR      R1,[R6, #+112]
   \      0x2C2   0xF8DA 0x0004      LDR      R0,[R10, #+4]
   \      0x2C6   0x....'....        BL       memcmp
   \      0x2CA   0x2800             CMP      R0,#+0
   \      0x2CC   0xD0B7             BEQ.N    ??ssl_buffer_message_14
   \      0x2CE   0x....'....        LDR.W    R0,??DataTable41_10
   \      0x2D2   0x9000             STR      R0,[SP, #+0]
   \      0x2D4   0xF241 0x233E      MOVW     R3,#+4670
   \      0x2D8   0x463A             MOV      R2,R7
   \      0x2DA   0x2101             MOVS     R1,#+1
   \      0x2DC   0x4630             MOV      R0,R6
   \      0x2DE   0x....'....        BL       mbedtls_debug_print_msg
   \      0x2E2   0xE01A             B.N      ??ssl_buffer_message_4
   4701                          else
   4702                          {
   4703                              hs_buf->is_complete = 1;
   \                     ??ssl_buffer_message_15: (+1)
   \      0x2E4   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \      0x2E8   0xF040 0x0004      ORR      R0,R0,#0x4
   \      0x2EC   0xF8CA 0x0000      STR      R0,[R10, #+0]
   4704                          }
   4705          
   4706                          MBEDTLS_SSL_DEBUG_MSG( 2, ( "message %scomplete",
   4707                                             hs_buf->is_complete ? "" : "not yet " ) );
   \                     ??ssl_buffer_message_16: (+1)
   \      0x2F0   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \      0x2F4   0xF3C0 0x0080      UBFX     R0,R0,#+2,#+1
   \      0x2F8   0x2800             CMP      R0,#+0
   \      0x2FA   0xD001             BEQ.N    ??ssl_buffer_message_17
   \      0x2FC   0x....             ADR.N    R0,??DataTable37  ;; ""
   \      0x2FE   0xE001             B.N      ??ssl_buffer_message_18
   \                     ??ssl_buffer_message_17: (+1)
   \      0x300   0x....'....        LDR.W    R0,??DataTable41_11
   \                     ??ssl_buffer_message_18: (+1)
   \      0x304   0x9001             STR      R0,[SP, #+4]
   \      0x306   0x....'....        LDR.W    R0,??DataTable41_12
   \      0x30A   0x9000             STR      R0,[SP, #+0]
   \      0x30C   0xF241 0x2363      MOVW     R3,#+4707
   \      0x310   0x463A             MOV      R2,R7
   \      0x312   0x2102             MOVS     R1,#+2
   \      0x314   0x4630             MOV      R0,R6
   \      0x316   0x....'....        BL       mbedtls_debug_print_msg
   4708                      }
   4709          
   4710                      break;
   4711                  }
   4712          
   4713                  default:
   4714                      /* We don't buffer other types of messages. */
   4715                      break;
   4716              }
   4717          
   4718          exit:
   4719          
   4720              MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= ssl_buffer_message" ) );
   \                     ??ssl_buffer_message_4: (+1)
   \      0x31A   0x....'....        LDR.W    R0,??DataTable41_13
   \      0x31E   0x9000             STR      R0,[SP, #+0]
   \      0x320   0xF241 0x2370      MOVW     R3,#+4720
   \      0x324   0x463A             MOV      R2,R7
   \      0x326   0x2102             MOVS     R1,#+2
   \      0x328   0x4630             MOV      R0,R6
   \      0x32A   0x....'....        BL       mbedtls_debug_print_msg
   4721              return( ret );
   \      0x32E   0x4640             MOV      R0,R8
   \                     ??ssl_buffer_message_1: (+1)
   \      0x330   0xB005             ADD      SP,SP,#+20
   \      0x332   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   4722          }
   4723          #endif /* MBEDTLS_SSL_PROTO_DTLS */
   4724          

   \                                 In section .text, align 2, keep-with-next
   4725          static int ssl_consume_current_message( mbedtls_ssl_context *ssl )
   4726          {
   \                     ssl_consume_current_message: (+1)
   \        0x0   0xB51F             PUSH     {R0-R4,LR}
   \        0x2   0x4604             MOV      R4,R0
   4727              /*
   4728               * Consume last content-layer message and potentially
   4729               * update in_msglen which keeps track of the contents'
   4730               * consumption state.
   4731               *
   4732               * (1) Handshake messages:
   4733               *     Remove last handshake message, move content
   4734               *     and adapt in_msglen.
   4735               *
   4736               * (2) Alert messages:
   4737               *     Consume whole record content, in_msglen = 0.
   4738               *
   4739               * (3) Change cipher spec:
   4740               *     Consume whole record content, in_msglen = 0.
   4741               *
   4742               * (4) Application data:
   4743               *     Don't do anything - the record layer provides
   4744               *     the application data as a stream transport
   4745               *     and consumes through mbedtls_ssl_read only.
   4746               *
   4747               */
   4748          
   4749              /* Case (1): Handshake messages */
   4750              if( ssl->in_hslen != 0 )
   \        0x4   0xF8D4 0x00A0      LDR      R0,[R4, #+160]
   \        0x8   0x2800             CMP      R0,#+0
   \        0xA   0x6F60             LDR      R0,[R4, #+116]
   \        0xC   0xD032             BEQ.N    ??ssl_consume_current_message_0
   4751              {
   4752                  /* Hard assertion to be sure that no application data
   4753                   * is in flight, as corrupting ssl->in_msglen during
   4754                   * ssl->in_offt != NULL is fatal. */
   4755                  if( ssl->in_offt != NULL )
   \        0xE   0x2800             CMP      R0,#+0
   \       0x10   0xD00C             BEQ.N    ??ssl_consume_current_message_1
   4756                  {
   4757                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
   \       0x12   0x....'....        LDR.W    R0,??DataTable40_2
   \       0x16   0x9000             STR      R0,[SP, #+0]
   \       0x18   0xF241 0x2395      MOVW     R3,#+4757
   \       0x1C   0x....'....        LDR.W    R2,??DataTable41
   \       0x20   0x2101             MOVS     R1,#+1
   \       0x22   0x4620             MOV      R0,R4
   \       0x24   0x....'....        BL       mbedtls_debug_print_msg
   4758                      return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   \       0x28   0x....             LDR.N    R0,??DataTable35_1  ;; 0xffff9400
   \       0x2A   0xE028             B.N      ??ssl_consume_current_message_2
   4759                  }
   4760          
   4761                  /*
   4762                   * Get next Handshake message in the current record
   4763                   */
   4764          
   4765                  /* Notes:
   4766                   * (1) in_hslen is not necessarily the size of the
   4767                   *     current handshake content: If DTLS handshake
   4768                   *     fragmentation is used, that's the fragment
   4769                   *     size instead. Using the total handshake message
   4770                   *     size here is faulty and should be changed at
   4771                   *     some point.
   4772                   * (2) While it doesn't seem to cause problems, one
   4773                   *     has to be very careful not to assume that in_hslen
   4774                   *     is always <= in_msglen in a sensible communication.
   4775                   *     Again, it's wrong for DTLS handshake fragmentation.
   4776                   *     The following check is therefore mandatory, and
   4777                   *     should not be treated as a silently corrected assertion.
   4778                   *     Additionally, ssl->in_hslen might be arbitrarily out of
   4779                   *     bounds after handling a DTLS message with an unexpected
   4780                   *     sequence number, see mbedtls_ssl_prepare_handshake_record.
   4781                   */
   4782                  if( ssl->in_hslen < ssl->in_msglen )
   \                     ??ssl_consume_current_message_1: (+1)
   \       0x2C   0xF8D4 0x00A0      LDR      R0,[R4, #+160]
   \       0x30   0x6FE1             LDR      R1,[R4, #+124]
   \       0x32   0x4288             CMP      R0,R1
   \       0x34   0xD218             BCS.N    ??ssl_consume_current_message_3
   4783                  {
   4784                      ssl->in_msglen -= ssl->in_hslen;
   \       0x36   0x1A09             SUBS     R1,R1,R0
   \       0x38   0x67E1             STR      R1,[R4, #+124]
   4785                      memmove( ssl->in_msg, ssl->in_msg + ssl->in_hslen,
   4786                               ssl->in_msglen );
   \       0x3A   0x460A             MOV      R2,R1
   \       0x3C   0x6F20             LDR      R0,[R4, #+112]
   \       0x3E   0xF8D4 0x10A0      LDR      R1,[R4, #+160]
   \       0x42   0x4401             ADD      R1,R0,R1
   \       0x44   0x....'....        BL       __aeabi_memmove
   4787          
   4788                      MBEDTLS_SSL_DEBUG_BUF( 4, "remaining content in record",
   4789                                             ssl->in_msg, ssl->in_msglen );
   \       0x48   0x6FE0             LDR      R0,[R4, #+124]
   \       0x4A   0x9002             STR      R0,[SP, #+8]
   \       0x4C   0x6F20             LDR      R0,[R4, #+112]
   \       0x4E   0x9001             STR      R0,[SP, #+4]
   \       0x50   0x....'....        LDR.W    R0,??DataTable41_14
   \       0x54   0x9000             STR      R0,[SP, #+0]
   \       0x56   0xF241 0x23B5      MOVW     R3,#+4789
   \       0x5A   0x....'....        LDR.W    R2,??DataTable41
   \       0x5E   0x2104             MOVS     R1,#+4
   \       0x60   0x4620             MOV      R0,R4
   \       0x62   0x....'....        BL       mbedtls_debug_print_buf
   \       0x66   0xE001             B.N      ??ssl_consume_current_message_4
   4790                  }
   4791                  else
   4792                  {
   4793                      ssl->in_msglen = 0;
   \                     ??ssl_consume_current_message_3: (+1)
   \       0x68   0x2000             MOVS     R0,#+0
   \       0x6A   0x67E0             STR      R0,[R4, #+124]
   4794                  }
   4795          
   4796                  ssl->in_hslen   = 0;
   \                     ??ssl_consume_current_message_4: (+1)
   \       0x6C   0x2000             MOVS     R0,#+0
   \       0x6E   0xF8C4 0x00A0      STR      R0,[R4, #+160]
   \       0x72   0xE003             B.N      ??ssl_consume_current_message_5
   4797              }
   4798              /* Case (4): Application data */
   4799              else if( ssl->in_offt != NULL )
   \                     ??ssl_consume_current_message_0: (+1)
   \       0x74   0x2800             CMP      R0,#+0
   \       0x76   0xD101             BNE.N    ??ssl_consume_current_message_5
   4800              {
   4801                  return( 0 );
   4802              }
   4803              /* Everything else (CCS & Alerts) */
   4804              else
   4805              {
   4806                  ssl->in_msglen = 0;
   \       0x78   0x2000             MOVS     R0,#+0
   \       0x7A   0x67E0             STR      R0,[R4, #+124]
   4807              }
   4808          
   4809              return( 0 );
   \                     ??ssl_consume_current_message_5: (+1)
   \       0x7C   0x2000             MOVS     R0,#+0
   \                     ??ssl_consume_current_message_2: (+1)
   \       0x7E   0xB004             ADD      SP,SP,#+16
   \       0x80   0xBD10             POP      {R4,PC}          ;; return
   4810          }
   4811          

   \                                 In section .text, align 2, keep-with-next
   4812          static int ssl_record_is_in_progress( mbedtls_ssl_context *ssl )
   4813          {
   4814              if( ssl->in_msglen > 0 )
   \                     ssl_record_is_in_progress: (+1)
   \        0x0   0x6FC0             LDR      R0,[R0, #+124]
   \        0x2   0x1E40             SUBS     R0,R0,#+1
   \        0x4   0x4180             SBCS     R0,R0,R0
   \        0x6   0x43C0             MVNS     R0,R0
   \        0x8   0x0FC0             LSRS     R0,R0,#+31
   4815                  return( 1 );
   4816          
   4817              return( 0 );
   \        0xA   0x4770             BX       LR               ;; return
   4818          }
   4819          
   4820          #if defined(MBEDTLS_SSL_PROTO_DTLS)
   4821          

   \                                 In section .text, align 2, keep-with-next
   4822          static void ssl_free_buffered_record( mbedtls_ssl_context *ssl )
   4823          {
   \                     ssl_free_buffered_record: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   4824              mbedtls_ssl_handshake_params * const hs = ssl->handshake;
   \        0x2   0x6BC4             LDR      R4,[R0, #+60]
   4825              if( hs == NULL )
   \        0x4   0x2C00             CMP      R4,#+0
   \        0x6   0xD011             BEQ.N    ??ssl_free_buffered_record_0
   4826                  return;
   4827          
   4828              if( hs->buffering.future_record.data != NULL )
   \        0x8   0xF8D4 0x0240      LDR      R0,[R4, #+576]
   \        0xC   0x2800             CMP      R0,#+0
   \        0xE   0xD00D             BEQ.N    ??ssl_free_buffered_record_0
   4829              {
   4830                  hs->buffering.total_bytes_buffered -=
   4831                      hs->buffering.future_record.len;
   \       0x10   0xF8D4 0x1208      LDR      R1,[R4, #+520]
   \       0x14   0xF8D4 0x0244      LDR      R0,[R4, #+580]
   \       0x18   0x1A09             SUBS     R1,R1,R0
   \       0x1A   0xF8C4 0x1208      STR      R1,[R4, #+520]
   4832          
   4833                  mbedtls_free( hs->buffering.future_record.data );
   \       0x1E   0xF8D4 0x0240      LDR      R0,[R4, #+576]
   \       0x22   0x....'....        BL       mbedtls_free
   4834                  hs->buffering.future_record.data = NULL;
   \       0x26   0x2000             MOVS     R0,#+0
   \       0x28   0xF8C4 0x0240      STR      R0,[R4, #+576]
   4835              }
   4836          }
   \                     ??ssl_free_buffered_record_0: (+1)
   \       0x2C   0xBD10             POP      {R4,PC}          ;; return
   4837          

   \                                 In section .text, align 2, keep-with-next
   4838          static int ssl_load_buffered_record( mbedtls_ssl_context *ssl )
   4839          {
   \                     ssl_load_buffered_record: (+1)
   \        0x0   0xE92D 0x41FC      PUSH     {R2-R8,LR}
   \        0x4   0x4605             MOV      R5,R0
   4840              mbedtls_ssl_handshake_params * const hs = ssl->handshake;
   \        0x6   0x6BE8             LDR      R0,[R5, #+60]
   4841              unsigned char * rec;
   4842              size_t rec_len;
   4843              unsigned rec_epoch;
   4844          
   4845              if( ssl->conf->transport != MBEDTLS_SSL_TRANSPORT_DATAGRAM )
   \        0x8   0x6829             LDR      R1,[R5, #+0]
   \        0xA   0xF8D1 0x10CC      LDR      R1,[R1, #+204]
   \        0xE   0xF3C1 0x0140      UBFX     R1,R1,#+1,#+1
   \       0x12   0x2900             CMP      R1,#+0
   \       0x14   0xD00E             BEQ.N    ??ssl_load_buffered_record_0
   4846                  return( 0 );
   4847          
   4848              if( hs == NULL )
   \       0x16   0x2800             CMP      R0,#+0
   \       0x18   0xD00C             BEQ.N    ??ssl_load_buffered_record_0
   4849                  return( 0 );
   4850          
   4851              rec       = hs->buffering.future_record.data;
   \       0x1A   0xF8D0 0x4240      LDR      R4,[R0, #+576]
   4852              rec_len   = hs->buffering.future_record.len;
   \       0x1E   0xF8D0 0x6244      LDR      R6,[R0, #+580]
   4853              rec_epoch = hs->buffering.future_record.epoch;
   \       0x22   0xF8D0 0x8248      LDR      R8,[R0, #+584]
   4854          
   4855              if( rec == NULL )
   \       0x26   0x2C00             CMP      R4,#+0
   \       0x28   0xD004             BEQ.N    ??ssl_load_buffered_record_0
   4856                  return( 0 );
   4857          
   4858              /* Only consider loading future records if the
   4859               * input buffer is empty. */
   4860              if( ssl_next_record_is_in_datagram( ssl ) == 1 )
   \       0x2A   0x4628             MOV      R0,R5
   \       0x2C   0x....'....        BL       ssl_next_record_is_in_datagram
   \       0x30   0x2801             CMP      R0,#+1
   \       0x32   0xD101             BNE.N    ??ssl_load_buffered_record_1
   4861                  return( 0 );
   \                     ??ssl_load_buffered_record_0: (+1)
   \       0x34   0x2000             MOVS     R0,#+0
   \       0x36   0xE051             B.N      ??ssl_load_buffered_record_2
   4862          
   4863              MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> ssl_load_buffered_record" ) );
   \                     ??ssl_load_buffered_record_1: (+1)
   \       0x38   0x....'....        LDR.W    R7,??DataTable41
   \       0x3C   0x....'....        LDR.W    R0,??DataTable41_15
   \       0x40   0x9000             STR      R0,[SP, #+0]
   \       0x42   0xF241 0x23FF      MOVW     R3,#+4863
   \       0x46   0x463A             MOV      R2,R7
   \       0x48   0x2102             MOVS     R1,#+2
   \       0x4A   0x4628             MOV      R0,R5
   \       0x4C   0x....'....        BL       mbedtls_debug_print_msg
   4864          
   4865              if( rec_epoch != ssl->in_epoch )
   \       0x50   0xF8B5 0x0084      LDRH     R0,[R5, #+132]
   \       0x54   0x4580             CMP      R8,R0
   \       0x56   0xD00A             BEQ.N    ??ssl_load_buffered_record_3
   4866              {
   4867                  MBEDTLS_SSL_DEBUG_MSG( 2, ( "Buffered record not from current epoch." ) );
   \       0x58   0x....'....        LDR.W    R0,??DataTable41_16
   \       0x5C   0x9000             STR      R0,[SP, #+0]
   \       0x5E   0xF241 0x3303      MOVW     R3,#+4867
   \       0x62   0x463A             MOV      R2,R7
   \       0x64   0x2102             MOVS     R1,#+2
   \       0x66   0x4628             MOV      R0,R5
   \       0x68   0x....'....        BL       mbedtls_debug_print_msg
   4868                  goto exit;
   \       0x6C   0xE02B             B.N      ??ssl_load_buffered_record_4
   4869              }
   4870          
   4871              MBEDTLS_SSL_DEBUG_MSG( 2, ( "Found buffered record from current epoch - load" ) );
   \                     ??ssl_load_buffered_record_3: (+1)
   \       0x6E   0x....'....        LDR.W    R0,??DataTable41_17
   \       0x72   0x9000             STR      R0,[SP, #+0]
   \       0x74   0xF241 0x3307      MOVW     R3,#+4871
   \       0x78   0x463A             MOV      R2,R7
   \       0x7A   0x2102             MOVS     R1,#+2
   \       0x7C   0x4628             MOV      R0,R5
   \       0x7E   0x....'....        BL       mbedtls_debug_print_msg
   4872          
   4873              /* Double-check that the record is not too large */
   4874              if( rec_len > MBEDTLS_SSL_IN_BUFFER_LEN -
   4875                  (size_t)( ssl->in_hdr - ssl->in_buf ) )
   \       0x82   0xF642 0x114D      MOVW     R1,#+10573
   \       0x86   0x6E68             LDR      R0,[R5, #+100]
   \       0x88   0x1A09             SUBS     R1,R1,R0
   \       0x8A   0x6DE8             LDR      R0,[R5, #+92]
   \       0x8C   0x1841             ADDS     R1,R0,R1
   \       0x8E   0x42B1             CMP      R1,R6
   \       0x90   0xD20C             BCS.N    ??ssl_load_buffered_record_5
   4876              {
   4877                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
   \       0x92   0x....'....        LDR.W    R0,??DataTable40_2
   \       0x96   0x9000             STR      R0,[SP, #+0]
   \       0x98   0xF241 0x330D      MOVW     R3,#+4877
   \       0x9C   0x463A             MOV      R2,R7
   \       0x9E   0x2101             MOVS     R1,#+1
   \       0xA0   0x4628             MOV      R0,R5
   \       0xA2   0x....'....        BL       mbedtls_debug_print_msg
   4878                  return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   \       0xA6   0x....'....        LDR.W    R0,??DataTable41_18  ;; 0xffff9400
   \       0xAA   0xE017             B.N      ??ssl_load_buffered_record_2
   4879              }
   4880          
   4881              memcpy( ssl->in_hdr, rec, rec_len );
   \                     ??ssl_load_buffered_record_5: (+1)
   \       0xAC   0x4632             MOV      R2,R6
   \       0xAE   0x4621             MOV      R1,R4
   \       0xB0   0x6E68             LDR      R0,[R5, #+100]
   \       0xB2   0x....'....        BL       __aeabi_memcpy
   4882              ssl->in_left = rec_len;
   \       0xB6   0xF8C5 0x6080      STR      R6,[R5, #+128]
   4883              ssl->next_record_offset = 0;
   \       0xBA   0x2000             MOVS     R0,#+0
   \       0xBC   0xF8C5 0x0088      STR      R0,[R5, #+136]
   4884          
   4885              ssl_free_buffered_record( ssl );
   \       0xC0   0x4628             MOV      R0,R5
   \       0xC2   0x....'....        BL       ssl_free_buffered_record
   4886          
   4887          exit:
   4888              MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= ssl_load_buffered_record" ) );
   \                     ??ssl_load_buffered_record_4: (+1)
   \       0xC6   0x....'....        LDR.W    R0,??DataTable41_19
   \       0xCA   0x9000             STR      R0,[SP, #+0]
   \       0xCC   0xF241 0x3318      MOVW     R3,#+4888
   \       0xD0   0x463A             MOV      R2,R7
   \       0xD2   0x2102             MOVS     R1,#+2
   \       0xD4   0x4628             MOV      R0,R5
   \       0xD6   0x....'....        BL       mbedtls_debug_print_msg
   4889              return( 0 );
   \       0xDA   0x2000             MOVS     R0,#+0
   \                     ??ssl_load_buffered_record_2: (+1)
   \       0xDC   0xE8BD 0x81F6      POP      {R1,R2,R4-R8,PC}  ;; return
   4890          }
   4891          

   \                                 In section .text, align 2, keep-with-next
   4892          static int ssl_buffer_future_record( mbedtls_ssl_context *ssl )
   4893          {
   \                     ssl_buffer_future_record: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0xB084             SUB      SP,SP,#+16
   \        0x4   0x4605             MOV      R5,R0
   4894              mbedtls_ssl_handshake_params * const hs = ssl->handshake;
   \        0x6   0x6BEC             LDR      R4,[R5, #+60]
   4895              size_t const rec_hdr_len = 13;
   4896              size_t const total_buf_sz = rec_hdr_len + ssl->in_msglen;
   \        0x8   0x6FEE             LDR      R6,[R5, #+124]
   \        0xA   0x360D             ADDS     R6,R6,#+13
   4897          
   4898              /* Don't buffer future records outside handshakes. */
   4899              if( hs == NULL )
   \        0xC   0x2C00             CMP      R4,#+0
   \        0xE   0xD101             BNE.N    ??ssl_buffer_future_record_0
   4900                  return( 0 );
   \       0x10   0x2000             MOVS     R0,#+0
   \       0x12   0xE05E             B.N      ??ssl_buffer_future_record_1
   4901          
   4902              /* Only buffer handshake records (we are only interested
   4903               * in Finished messages). */
   4904              if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
   \                     ??ssl_buffer_future_record_0: (+1)
   \       0x14   0x6FA8             LDR      R0,[R5, #+120]
   \       0x16   0x2816             CMP      R0,#+22
   \       0x18   0xD001             BEQ.N    ??ssl_buffer_future_record_2
   4905                  return( 0 );
   \       0x1A   0x2000             MOVS     R0,#+0
   \       0x1C   0xE059             B.N      ??ssl_buffer_future_record_1
   4906          
   4907              /* Don't buffer more than one future epoch record. */
   4908              if( hs->buffering.future_record.data != NULL )
   \                     ??ssl_buffer_future_record_2: (+1)
   \       0x1E   0xF8D4 0x0240      LDR      R0,[R4, #+576]
   \       0x22   0x2800             CMP      R0,#+0
   \       0x24   0xD001             BEQ.N    ??ssl_buffer_future_record_3
   4909                  return( 0 );
   \       0x26   0x2000             MOVS     R0,#+0
   \       0x28   0xE053             B.N      ??ssl_buffer_future_record_1
   4910          
   4911              /* Don't buffer record if there's not enough buffering space remaining. */
   4912              if( total_buf_sz > ( MBEDTLS_SSL_DTLS_MAX_BUFFERING -
   4913                                   hs->buffering.total_bytes_buffered ) )
   \                     ??ssl_buffer_future_record_3: (+1)
   \       0x2A   0xF8D4 0x0208      LDR      R0,[R4, #+520]
   \       0x2E   0xF5C0 0x4000      RSB      R0,R0,#+32768
   \       0x32   0x42B0             CMP      R0,R6
   \       0x34   0xD213             BCS.N    ??ssl_buffer_future_record_4
   4914              {
   4915                  MBEDTLS_SSL_DEBUG_MSG( 2, ( "Buffering of future epoch record of size %u would exceed the compile-time limit %u (already %u bytes buffered) -- ignore\n",
   4916                                  (unsigned) total_buf_sz, MBEDTLS_SSL_DTLS_MAX_BUFFERING,
   4917                                  (unsigned) hs->buffering.total_bytes_buffered ) );
   \       0x36   0xF8D4 0x0208      LDR      R0,[R4, #+520]
   \       0x3A   0x9003             STR      R0,[SP, #+12]
   \       0x3C   0xF44F 0x4000      MOV      R0,#+32768
   \       0x40   0x9002             STR      R0,[SP, #+8]
   \       0x42   0x9601             STR      R6,[SP, #+4]
   \       0x44   0x....'....        LDR.W    R0,??DataTable41_20
   \       0x48   0x9000             STR      R0,[SP, #+0]
   \       0x4A   0xF241 0x3335      MOVW     R3,#+4917
   \       0x4E   0x....'....        LDR.W    R2,??DataTable41
   \       0x52   0x2102             MOVS     R1,#+2
   \       0x54   0x4628             MOV      R0,R5
   \       0x56   0x....'....        BL       mbedtls_debug_print_msg
   4918                  return( 0 );
   \       0x5A   0x2000             MOVS     R0,#+0
   \       0x5C   0xE039             B.N      ??ssl_buffer_future_record_1
   4919              }
   4920          
   4921              /* Buffer record */
   4922              MBEDTLS_SSL_DEBUG_MSG( 2, ( "Buffer record from epoch %u",
   4923                                          ssl->in_epoch + 1 ) );
   \                     ??ssl_buffer_future_record_4: (+1)
   \       0x5E   0x....'....        LDR.W    R7,??DataTable41
   \       0x62   0xF8B5 0x0084      LDRH     R0,[R5, #+132]
   \       0x66   0x1C40             ADDS     R0,R0,#+1
   \       0x68   0x9001             STR      R0,[SP, #+4]
   \       0x6A   0x....'....        LDR.W    R0,??DataTable41_21
   \       0x6E   0x9000             STR      R0,[SP, #+0]
   \       0x70   0xF241 0x333B      MOVW     R3,#+4923
   \       0x74   0x463A             MOV      R2,R7
   \       0x76   0x2102             MOVS     R1,#+2
   \       0x78   0x4628             MOV      R0,R5
   \       0x7A   0x....'....        BL       mbedtls_debug_print_msg
   4924              MBEDTLS_SSL_DEBUG_BUF( 3, "Buffered record", ssl->in_hdr,
   4925                                     rec_hdr_len + ssl->in_msglen );
   \       0x7E   0x6FE8             LDR      R0,[R5, #+124]
   \       0x80   0x300D             ADDS     R0,R0,#+13
   \       0x82   0x9002             STR      R0,[SP, #+8]
   \       0x84   0x6E68             LDR      R0,[R5, #+100]
   \       0x86   0x9001             STR      R0,[SP, #+4]
   \       0x88   0x....'....        LDR.W    R0,??DataTable41_22
   \       0x8C   0x9000             STR      R0,[SP, #+0]
   \       0x8E   0xF241 0x333D      MOVW     R3,#+4925
   \       0x92   0x463A             MOV      R2,R7
   \       0x94   0x2103             MOVS     R1,#+3
   \       0x96   0x4628             MOV      R0,R5
   \       0x98   0x....'....        BL       mbedtls_debug_print_buf
   4926          
   4927              /* ssl_parse_record_header() only considers records
   4928               * of the next epoch as candidates for buffering. */
   4929              hs->buffering.future_record.epoch = ssl->in_epoch + 1;
   \       0x9C   0xF8B5 0x0084      LDRH     R0,[R5, #+132]
   \       0xA0   0x1C40             ADDS     R0,R0,#+1
   \       0xA2   0xF8C4 0x0248      STR      R0,[R4, #+584]
   4930              hs->buffering.future_record.len   = total_buf_sz;
   \       0xA6   0xF8C4 0x6244      STR      R6,[R4, #+580]
   4931          
   4932              hs->buffering.future_record.data =
   4933                  mbedtls_calloc( 1, hs->buffering.future_record.len );
   \       0xAA   0x4631             MOV      R1,R6
   \       0xAC   0x2001             MOVS     R0,#+1
   \       0xAE   0x....'....        BL       mbedtls_calloc
   \       0xB2   0xF8C4 0x0240      STR      R0,[R4, #+576]
   4934              if( hs->buffering.future_record.data == NULL )
   \       0xB6   0x2800             CMP      R0,#+0
   \       0xB8   0xD101             BNE.N    ??ssl_buffer_future_record_5
   4935              {
   4936                  /* If we run out of RAM trying to buffer a
   4937                   * record from the next epoch, just ignore. */
   4938                  return( 0 );
   \       0xBA   0x2000             MOVS     R0,#+0
   \       0xBC   0xE009             B.N      ??ssl_buffer_future_record_1
   4939              }
   4940          
   4941              memcpy( hs->buffering.future_record.data, ssl->in_hdr, total_buf_sz );
   \                     ??ssl_buffer_future_record_5: (+1)
   \       0xBE   0x4632             MOV      R2,R6
   \       0xC0   0x6E69             LDR      R1,[R5, #+100]
   \       0xC2   0x....'....        BL       __aeabi_memcpy
   4942          
   4943              hs->buffering.total_bytes_buffered += total_buf_sz;
   \       0xC6   0xF8D4 0x0208      LDR      R0,[R4, #+520]
   \       0xCA   0x1836             ADDS     R6,R6,R0
   \       0xCC   0xF8C4 0x6208      STR      R6,[R4, #+520]
   4944              return( 0 );
   \       0xD0   0x2000             MOVS     R0,#+0
   \                     ??ssl_buffer_future_record_1: (+1)
   \       0xD2   0xB005             ADD      SP,SP,#+20
   \       0xD4   0xBDF0             POP      {R4-R7,PC}       ;; return
   4945          }
   4946          
   4947          #endif /* MBEDTLS_SSL_PROTO_DTLS */
   4948          

   \                                 In section .text, align 2, keep-with-next
   4949          static int ssl_get_next_record( mbedtls_ssl_context *ssl )
   4950          {
   \                     ssl_get_next_record: (+1)
   \        0x0   0xB53E             PUSH     {R1-R5,LR}
   \        0x2   0x4605             MOV      R5,R0
   4951              int ret;
   4952          
   4953          #if defined(MBEDTLS_SSL_PROTO_DTLS)
   4954              /* We might have buffered a future record; if so,
   4955               * and if the epoch matches now, load it.
   4956               * On success, this call will set ssl->in_left to
   4957               * the length of the buffered record, so that
   4958               * the calls to ssl_fetch_input() below will
   4959               * essentially be no-ops. */
   4960              ret = ssl_load_buffered_record( ssl );
   \        0x4   0x....'....        BL       ssl_load_buffered_record
   \        0x8   0x0004             MOVS     R4,R0
   4961              if( ret != 0 )
   \        0xA   0xF040 0x80EC      BNE.W    ??ssl_get_next_record_0
   4962                  return( ret );
   4963          #endif /* MBEDTLS_SSL_PROTO_DTLS */
   4964          
   4965              if( ( ret = mbedtls_ssl_fetch_input( ssl, mbedtls_ssl_hdr_len( ssl ) ) ) != 0 )
   \        0xE   0x4628             MOV      R0,R5
   \       0x10   0x....'....        BL       mbedtls_ssl_hdr_len
   \       0x14   0x4601             MOV      R1,R0
   \       0x16   0x4628             MOV      R0,R5
   \       0x18   0x....'....        BL       mbedtls_ssl_fetch_input
   \       0x1C   0x0004             MOVS     R4,R0
   \       0x1E   0xD00D             BEQ.N    ??ssl_get_next_record_1
   4966              {
   4967                  MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_fetch_input", ret );
   \       0x20   0x9401             STR      R4,[SP, #+4]
   \       0x22   0x....'....        LDR.W    R0,??DataTable41_23
   \       0x26   0x9000             STR      R0,[SP, #+0]
   \       0x28   0xF241 0x3367      MOVW     R3,#+4967
   \       0x2C   0x....'....        LDR.W    R2,??DataTable41
   \       0x30   0x2101             MOVS     R1,#+1
   \       0x32   0x4628             MOV      R0,R5
   \       0x34   0x....'....        BL       mbedtls_debug_print_ret
   4968                  return( ret );
   \       0x38   0x4620             MOV      R0,R4
   \       0x3A   0xBD3E             POP      {R1-R5,PC}
   4969              }
   4970          
   4971              if( ( ret = ssl_parse_record_header( ssl ) ) != 0 )
   \                     ??ssl_get_next_record_1: (+1)
   \       0x3C   0x4628             MOV      R0,R5
   \       0x3E   0x....'....        BL       ssl_parse_record_header
   \       0x42   0x0004             MOVS     R4,R0
   \       0x44   0xD03F             BEQ.N    ??ssl_get_next_record_2
   4972              {
   4973          #if defined(MBEDTLS_SSL_PROTO_DTLS)
   4974                  if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM &&
   4975                      ret != MBEDTLS_ERR_SSL_CLIENT_RECONNECT )
   \       0x46   0x6828             LDR      R0,[R5, #+0]
   \       0x48   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \       0x4C   0xF3C0 0x0040      UBFX     R0,R0,#+1,#+1
   \       0x50   0x2800             CMP      R0,#+0
   \       0x52   0xF000 0x80C8      BEQ.W    ??ssl_get_next_record_0
   \       0x56   0xF514 0x4FCF      CMN      R4,#+26496
   \       0x5A   0xF000 0x80C4      BEQ.W    ??ssl_get_next_record_0
   4976                  {
   4977                      if( ret == MBEDTLS_ERR_SSL_EARLY_MESSAGE )
   \       0x5E   0xF514 0x4FC9      CMN      R4,#+25728
   \       0x62   0xD107             BNE.N    ??ssl_get_next_record_3
   4978                      {
   4979                          ret = ssl_buffer_future_record( ssl );
   \       0x64   0x4628             MOV      R0,R5
   \       0x66   0x....'....        BL       ssl_buffer_future_record
   \       0x6A   0x0004             MOVS     R4,R0
   4980                          if( ret != 0 )
   \       0x6C   0xF040 0x80BB      BNE.W    ??ssl_get_next_record_0
   4981                              return( ret );
   4982          
   4983                          /* Fall through to handling of unexpected records */
   4984                          ret = MBEDTLS_ERR_SSL_UNEXPECTED_RECORD;
   \       0x70   0x....'....        LDR.W    R4,??DataTable41_24  ;; 0xffff9900
   4985                      }
   4986          
   4987                      if( ret == MBEDTLS_ERR_SSL_UNEXPECTED_RECORD )
   \                     ??ssl_get_next_record_3: (+1)
   \       0x74   0xF514 0x4FCE      CMN      R4,#+26368
   \       0x78   0xD112             BNE.N    ??ssl_get_next_record_4
   4988                      {
   4989                          /* Skip unexpected record (but not whole datagram) */
   4990                          ssl->next_record_offset = ssl->in_msglen
   4991                                                  + mbedtls_ssl_hdr_len( ssl );
   \       0x7A   0x4628             MOV      R0,R5
   \       0x7C   0x....'....        BL       mbedtls_ssl_hdr_len
   \       0x80   0x6FE9             LDR      R1,[R5, #+124]
   \       0x82   0x1840             ADDS     R0,R0,R1
   \       0x84   0xF8C5 0x0088      STR      R0,[R5, #+136]
   4992          
   4993                          MBEDTLS_SSL_DEBUG_MSG( 1, ( "discarding unexpected record "
   4994                                                      "(header)" ) );
   \       0x88   0x....'....        LDR.W    R0,??DataTable41_25
   \       0x8C   0x9000             STR      R0,[SP, #+0]
   \       0x8E   0xF241 0x3382      MOVW     R3,#+4994
   \       0x92   0x....'....        LDR.W    R2,??DataTable41
   \       0x96   0x2101             MOVS     R1,#+1
   \       0x98   0x4628             MOV      R0,R5
   \       0x9A   0x....'....        BL       mbedtls_debug_print_msg
   \       0x9E   0xE00F             B.N      ??ssl_get_next_record_5
   4995                      }
   4996                      else
   4997                      {
   4998                          /* Skip invalid record and the rest of the datagram */
   4999                          ssl->next_record_offset = 0;
   \                     ??ssl_get_next_record_4: (+1)
   \       0xA0   0x2000             MOVS     R0,#+0
   \       0xA2   0xF8C5 0x0088      STR      R0,[R5, #+136]
   5000                          ssl->in_left = 0;
   \       0xA6   0xF8C5 0x0080      STR      R0,[R5, #+128]
   5001          
   5002                          MBEDTLS_SSL_DEBUG_MSG( 1, ( "discarding invalid record "
   5003                                                      "(header)" ) );
   \       0xAA   0x....'....        LDR.W    R0,??DataTable41_26
   \       0xAE   0x9000             STR      R0,[SP, #+0]
   \       0xB0   0xF241 0x338B      MOVW     R3,#+5003
   \       0xB4   0x....'....        LDR.W    R2,??DataTable41
   \       0xB8   0x2101             MOVS     R1,#+1
   \       0xBA   0x4628             MOV      R0,R5
   \       0xBC   0x....'....        BL       mbedtls_debug_print_msg
   5004                      }
   5005          
   5006                      /* Get next record */
   5007                      return( MBEDTLS_ERR_SSL_CONTINUE_PROCESSING );
   \                     ??ssl_get_next_record_5: (+1)
   \       0xC0   0x....'....        LDR.W    R0,??DataTable42  ;; 0xffff9a80
   \       0xC4   0xBD3E             POP      {R1-R5,PC}
   5008                  }
   5009          #endif
   5010                  return( ret );
   5011              }
   5012          
   5013              /*
   5014               * Read and optionally decrypt the message contents
   5015               */
   5016              if( ( ret = mbedtls_ssl_fetch_input( ssl,
   5017                                           mbedtls_ssl_hdr_len( ssl ) + ssl->in_msglen ) ) != 0 )
   \                     ??ssl_get_next_record_2: (+1)
   \       0xC6   0x4628             MOV      R0,R5
   \       0xC8   0x....'....        BL       mbedtls_ssl_hdr_len
   \       0xCC   0x6FE9             LDR      R1,[R5, #+124]
   \       0xCE   0x1808             ADDS     R0,R1,R0
   \       0xD0   0x4601             MOV      R1,R0
   \       0xD2   0x4628             MOV      R0,R5
   \       0xD4   0x....'....        BL       mbedtls_ssl_fetch_input
   \       0xD8   0x0004             MOVS     R4,R0
   \       0xDA   0xD00D             BEQ.N    ??ssl_get_next_record_6
   5018              {
   5019                  MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_fetch_input", ret );
   \       0xDC   0x9401             STR      R4,[SP, #+4]
   \       0xDE   0x....'....        LDR.W    R0,??DataTable41_23
   \       0xE2   0x9000             STR      R0,[SP, #+0]
   \       0xE4   0xF241 0x339B      MOVW     R3,#+5019
   \       0xE8   0x....'....        LDR.W    R2,??DataTable41
   \       0xEC   0x2101             MOVS     R1,#+1
   \       0xEE   0x4628             MOV      R0,R5
   \       0xF0   0x....'....        BL       mbedtls_debug_print_ret
   5020                  return( ret );
   \       0xF4   0x4620             MOV      R0,R4
   \       0xF6   0xBD3E             POP      {R1-R5,PC}
   5021              }
   5022          
   5023              /* Done reading this record, get ready for the next one */
   5024          #if defined(MBEDTLS_SSL_PROTO_DTLS)
   5025              if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
   \                     ??ssl_get_next_record_6: (+1)
   \       0xF8   0x6828             LDR      R0,[R5, #+0]
   \       0xFA   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \       0xFE   0xF3C0 0x0040      UBFX     R0,R0,#+1,#+1
   \      0x102   0x2800             CMP      R0,#+0
   \      0x104   0xD016             BEQ.N    ??ssl_get_next_record_7
   5026              {
   5027                  ssl->next_record_offset = ssl->in_msglen + mbedtls_ssl_hdr_len( ssl );
   \      0x106   0x4628             MOV      R0,R5
   \      0x108   0x....'....        BL       mbedtls_ssl_hdr_len
   \      0x10C   0x6FE9             LDR      R1,[R5, #+124]
   \      0x10E   0x1840             ADDS     R0,R0,R1
   \      0x110   0xF8C5 0x0088      STR      R0,[R5, #+136]
   5028                  if( ssl->next_record_offset < ssl->in_left )
   \      0x114   0xF8D5 0x1080      LDR      R1,[R5, #+128]
   \      0x118   0x4288             CMP      R0,R1
   \      0x11A   0xD20E             BCS.N    ??ssl_get_next_record_8
   5029                  {
   5030                      MBEDTLS_SSL_DEBUG_MSG( 3, ( "more than one record within datagram" ) );
   \      0x11C   0x....'....        LDR.W    R0,??DataTable41_27
   \      0x120   0x9000             STR      R0,[SP, #+0]
   \      0x122   0xF241 0x33A6      MOVW     R3,#+5030
   \      0x126   0x....'....        LDR.W    R2,??DataTable41
   \      0x12A   0x2103             MOVS     R1,#+3
   \      0x12C   0x4628             MOV      R0,R5
   \      0x12E   0x....'....        BL       mbedtls_debug_print_msg
   \      0x132   0xE002             B.N      ??ssl_get_next_record_8
   5031                  }
   5032              }
   5033              else
   5034          #endif
   5035                  ssl->in_left = 0;
   \                     ??ssl_get_next_record_7: (+1)
   \      0x134   0x2000             MOVS     R0,#+0
   \      0x136   0xF8C5 0x0080      STR      R0,[R5, #+128]
   5036          
   5037              if( ( ret = ssl_prepare_record_content( ssl ) ) != 0 )
   \                     ??ssl_get_next_record_8: (+1)
   \      0x13A   0x4628             MOV      R0,R5
   \      0x13C   0x....'....        BL       ssl_prepare_record_content
   \      0x140   0x0004             MOVS     R4,R0
   \      0x142   0xD052             BEQ.N    ??ssl_get_next_record_9
   5038              {
   5039          #if defined(MBEDTLS_SSL_PROTO_DTLS)
   5040                  if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
   \      0x144   0x6828             LDR      R0,[R5, #+0]
   \      0x146   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \      0x14A   0xF3C0 0x0040      UBFX     R0,R0,#+1,#+1
   \      0x14E   0x2800             CMP      R0,#+0
   \      0x150   0xD041             BEQ.N    ??ssl_get_next_record_10
   5041                  {
   5042                      /* Silently discard invalid records */
   5043                      if( ret == MBEDTLS_ERR_SSL_INVALID_RECORD ||
   5044                          ret == MBEDTLS_ERR_SSL_INVALID_MAC )
   \      0x152   0xF514 0x4FE4      CMN      R4,#+29184
   \      0x156   0xD002             BEQ.N    ??ssl_get_next_record_11
   \      0x158   0xF514 0x4FE3      CMN      R4,#+29056
   \      0x15C   0xD143             BNE.N    ??ssl_get_next_record_0
   5045                      {
   5046                          /* Except when waiting for Finished as a bad mac here
   5047                           * probably means something went wrong in the handshake
   5048                           * (eg wrong psk used, mitm downgrade attempt, etc.) */
   5049                          if( ssl->state == MBEDTLS_SSL_CLIENT_FINISHED ||
   5050                              ssl->state == MBEDTLS_SSL_SERVER_FINISHED )
   \                     ??ssl_get_next_record_11: (+1)
   \      0x15E   0x6868             LDR      R0,[R5, #+4]
   \      0x160   0x280B             CMP      R0,#+11
   \      0x162   0xD001             BEQ.N    ??ssl_get_next_record_12
   \      0x164   0x280D             CMP      R0,#+13
   \      0x166   0xD108             BNE.N    ??ssl_get_next_record_13
   5051                          {
   5052          #if defined(MBEDTLS_SSL_ALL_ALERT_MESSAGES)
   5053                              if( ret == MBEDTLS_ERR_SSL_INVALID_MAC )
   \                     ??ssl_get_next_record_12: (+1)
   \      0x168   0xF514 0x4FE3      CMN      R4,#+29056
   \      0x16C   0xD13B             BNE.N    ??ssl_get_next_record_0
   5054                              {
   5055                                  mbedtls_ssl_send_alert_message( ssl,
   5056                                          MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   5057                                          MBEDTLS_SSL_ALERT_MSG_BAD_RECORD_MAC );
   \      0x16E   0x2214             MOVS     R2,#+20
   \      0x170   0x2102             MOVS     R1,#+2
   \      0x172   0x4628             MOV      R0,R5
   \      0x174   0x....'....        BL       mbedtls_ssl_send_alert_message
   \      0x178   0xE035             B.N      ??ssl_get_next_record_0
   5058                              }
   5059          #endif
   5060                              return( ret );
   5061                          }
   5062          
   5063          #if defined(MBEDTLS_SSL_DTLS_BADMAC_LIMIT)
   5064                          if( ssl->conf->badmac_limit != 0 &&
   5065                              ++ssl->badmac_seen >= ssl->conf->badmac_limit )
   \                     ??ssl_get_next_record_13: (+1)
   \      0x17A   0x6828             LDR      R0,[R5, #+0]
   \      0x17C   0xF8D0 0x00C0      LDR      R0,[R0, #+192]
   \      0x180   0x2800             CMP      R0,#+0
   \      0x182   0xD015             BEQ.N    ??ssl_get_next_record_14
   \      0x184   0x69A8             LDR      R0,[R5, #+24]
   \      0x186   0x1C40             ADDS     R0,R0,#+1
   \      0x188   0x61A8             STR      R0,[R5, #+24]
   \      0x18A   0x6829             LDR      R1,[R5, #+0]
   \      0x18C   0xF8D1 0x10C0      LDR      R1,[R1, #+192]
   \      0x190   0x4288             CMP      R0,R1
   \      0x192   0xD30D             BCC.N    ??ssl_get_next_record_14
   5066                          {
   5067                              MBEDTLS_SSL_DEBUG_MSG( 1, ( "too many records with bad MAC" ) );
   \      0x194   0x....'....        LDR.W    R0,??DataTable42_1
   \      0x198   0x9000             STR      R0,[SP, #+0]
   \      0x19A   0xF241 0x33CB      MOVW     R3,#+5067
   \      0x19E   0x....'....        LDR.W    R2,??DataTable41
   \      0x1A2   0x2101             MOVS     R1,#+1
   \      0x1A4   0x4628             MOV      R0,R5
   \      0x1A6   0x....'....        BL       mbedtls_debug_print_msg
   5068                              return( MBEDTLS_ERR_SSL_INVALID_MAC );
   \      0x1AA   0x....'....        LDR.W    R0,??DataTable42_2  ;; 0xffff8e80
   \      0x1AE   0xBD3E             POP      {R1-R5,PC}
   5069                          }
   5070          #endif
   5071          
   5072                          /* As above, invalid records cause
   5073                           * dismissal of the whole datagram. */
   5074          
   5075                          ssl->next_record_offset = 0;
   \                     ??ssl_get_next_record_14: (+1)
   \      0x1B0   0x2000             MOVS     R0,#+0
   \      0x1B2   0xF8C5 0x0088      STR      R0,[R5, #+136]
   5076                          ssl->in_left = 0;
   \      0x1B6   0xF8C5 0x0080      STR      R0,[R5, #+128]
   5077          
   5078                          MBEDTLS_SSL_DEBUG_MSG( 1, ( "discarding invalid record (mac)" ) );
   \      0x1BA   0x....'....        LDR.W    R0,??DataTable42_3
   \      0x1BE   0x9000             STR      R0,[SP, #+0]
   \      0x1C0   0xF241 0x33D6      MOVW     R3,#+5078
   \      0x1C4   0x....'....        LDR.W    R2,??DataTable41
   \      0x1C8   0x2101             MOVS     R1,#+1
   \      0x1CA   0x4628             MOV      R0,R5
   \      0x1CC   0x....'....        BL       mbedtls_debug_print_msg
   5079                          return( MBEDTLS_ERR_SSL_CONTINUE_PROCESSING );
   \      0x1D0   0x....'....        LDR.W    R0,??DataTable42  ;; 0xffff9a80
   \      0x1D4   0xBD3E             POP      {R1-R5,PC}
   5080                      }
   5081          
   5082                      return( ret );
   5083                  }
   5084                  else
   5085          #endif
   5086                  {
   5087                      /* Error out (and send alert) on invalid records */
   5088          #if defined(MBEDTLS_SSL_ALL_ALERT_MESSAGES)
   5089                      if( ret == MBEDTLS_ERR_SSL_INVALID_MAC )
   \                     ??ssl_get_next_record_10: (+1)
   \      0x1D6   0xF514 0x4FE3      CMN      R4,#+29056
   \      0x1DA   0xD104             BNE.N    ??ssl_get_next_record_0
   5090                      {
   5091                          mbedtls_ssl_send_alert_message( ssl,
   5092                                  MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   5093                                  MBEDTLS_SSL_ALERT_MSG_BAD_RECORD_MAC );
   \      0x1DC   0x2214             MOVS     R2,#+20
   \      0x1DE   0x2102             MOVS     R1,#+2
   \      0x1E0   0x4628             MOV      R0,R5
   \      0x1E2   0x....'....        BL       mbedtls_ssl_send_alert_message
   5094                      }
   5095          #endif
   5096                      return( ret );
   \                     ??ssl_get_next_record_0: (+1)
   \      0x1E6   0x4620             MOV      R0,R4
   \      0x1E8   0xBD3E             POP      {R1-R5,PC}
   5097                  }
   5098              }
   5099          
   5100              return( 0 );
   \                     ??ssl_get_next_record_9: (+1)
   \      0x1EA   0x2000             MOVS     R0,#+0
   \      0x1EC   0xBD3E             POP      {R1-R5,PC}       ;; return
   5101          }
   5102          

   \                                 In section .text, align 2, keep-with-next
   5103          int mbedtls_ssl_handle_message_type( mbedtls_ssl_context *ssl )
   5104          {
   \                     mbedtls_ssl_handle_message_type: (+1)
   \        0x0   0xB53E             PUSH     {R1-R5,LR}
   \        0x2   0x4604             MOV      R4,R0
   5105              int ret;
   5106          
   5107              /*
   5108               * Handle particular types of records
   5109               */
   5110              if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
   \        0x4   0x6FA0             LDR      R0,[R4, #+120]
   \        0x6   0x2816             CMP      R0,#+22
   \        0x8   0xD105             BNE.N    ??mbedtls_ssl_handle_message_type_0
   5111              {
   5112                  if( ( ret = mbedtls_ssl_prepare_handshake_record( ssl ) ) != 0 )
   \        0xA   0x4620             MOV      R0,R4
   \        0xC   0x....'....        BL       mbedtls_ssl_prepare_handshake_record
   \       0x10   0x2800             CMP      R0,#+0
   \       0x12   0xF040 0x80CB      BNE.W    ??mbedtls_ssl_handle_message_type_1
   5113                  {
   5114                      return( ret );
   5115                  }
   5116              }
   5117          
   5118              if( ssl->in_msgtype == MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC )
   \                     ??mbedtls_ssl_handle_message_type_0: (+1)
   \       0x16   0x6FA0             LDR      R0,[R4, #+120]
   \       0x18   0x2814             CMP      R0,#+20
   \       0x1A   0xD151             BNE.N    ??mbedtls_ssl_handle_message_type_2
   5119              {
   5120                  if( ssl->in_msglen != 1 )
   \       0x1C   0x6FE0             LDR      R0,[R4, #+124]
   \       0x1E   0x2801             CMP      R0,#+1
   \       0x20   0xD00E             BEQ.N    ??mbedtls_ssl_handle_message_type_3
   5121                  {
   5122                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid CCS message, len: %d",
   5123                                     ssl->in_msglen ) );
   \       0x22   0x9001             STR      R0,[SP, #+4]
   \       0x24   0x....'....        LDR.W    R0,??DataTable43
   \       0x28   0x9000             STR      R0,[SP, #+0]
   \       0x2A   0xF241 0x4303      MOVW     R3,#+5123
   \       0x2E   0x....'....        LDR.W    R2,??DataTable41
   \       0x32   0x2101             MOVS     R1,#+1
   \       0x34   0x4620             MOV      R0,R4
   \       0x36   0x....'....        BL       mbedtls_debug_print_msg
   5124                      return( MBEDTLS_ERR_SSL_INVALID_RECORD );
   \       0x3A   0x....'....        LDR.W    R0,??DataTable43_1  ;; 0xffff8e00
   \       0x3E   0xBD3E             POP      {R1-R5,PC}
   5125                  }
   5126          
   5127                  if( ssl->in_msg[0] != 1 )
   \                     ??mbedtls_ssl_handle_message_type_3: (+1)
   \       0x40   0x6F20             LDR      R0,[R4, #+112]
   \       0x42   0x7800             LDRB     R0,[R0, #+0]
   \       0x44   0x2801             CMP      R0,#+1
   \       0x46   0xD010             BEQ.N    ??mbedtls_ssl_handle_message_type_4
   5128                  {
   5129                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid CCS message, content: %02x",
   5130                                                  ssl->in_msg[0] ) );
   \       0x48   0x6F20             LDR      R0,[R4, #+112]
   \       0x4A   0x7800             LDRB     R0,[R0, #+0]
   \       0x4C   0x9001             STR      R0,[SP, #+4]
   \       0x4E   0x....'....        LDR.W    R0,??DataTable43_2
   \       0x52   0x9000             STR      R0,[SP, #+0]
   \       0x54   0xF241 0x430A      MOVW     R3,#+5130
   \       0x58   0x....'....        LDR.W    R2,??DataTable41
   \       0x5C   0x2101             MOVS     R1,#+1
   \       0x5E   0x4620             MOV      R0,R4
   \       0x60   0x....'....        BL       mbedtls_debug_print_msg
   5131                      return( MBEDTLS_ERR_SSL_INVALID_RECORD );
   \       0x64   0x....'....        LDR.W    R0,??DataTable43_1  ;; 0xffff8e00
   \       0x68   0xBD3E             POP      {R1-R5,PC}
   5132                  }
   5133          
   5134          #if defined(MBEDTLS_SSL_PROTO_DTLS)
   5135                  if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM &&
   5136                      ssl->state != MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC    &&
   5137                      ssl->state != MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC )
   \                     ??mbedtls_ssl_handle_message_type_4: (+1)
   \       0x6A   0x6820             LDR      R0,[R4, #+0]
   \       0x6C   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \       0x70   0xF3C0 0x0040      UBFX     R0,R0,#+1,#+1
   \       0x74   0x2800             CMP      R0,#+0
   \       0x76   0xD023             BEQ.N    ??mbedtls_ssl_handle_message_type_2
   \       0x78   0x6860             LDR      R0,[R4, #+4]
   \       0x7A   0x280A             CMP      R0,#+10
   \       0x7C   0xD020             BEQ.N    ??mbedtls_ssl_handle_message_type_2
   \       0x7E   0x280C             CMP      R0,#+12
   \       0x80   0xD01E             BEQ.N    ??mbedtls_ssl_handle_message_type_2
   5138                  {
   5139                      if( ssl->handshake == NULL )
   \       0x82   0x6BE0             LDR      R0,[R4, #+60]
   \       0x84   0x2800             CMP      R0,#+0
   \       0x86   0xD10D             BNE.N    ??mbedtls_ssl_handle_message_type_5
   5140                      {
   5141                          MBEDTLS_SSL_DEBUG_MSG( 1, ( "dropping ChangeCipherSpec outside handshake" ) );
   \       0x88   0x....'....        LDR.W    R0,??DataTable43_3
   \       0x8C   0x9000             STR      R0,[SP, #+0]
   \       0x8E   0xF241 0x4315      MOVW     R3,#+5141
   \       0x92   0x....'....        LDR.W    R2,??DataTable41
   \       0x96   0x2101             MOVS     R1,#+1
   \       0x98   0x4620             MOV      R0,R4
   \       0x9A   0x....'....        BL       mbedtls_debug_print_msg
   5142                          return( MBEDTLS_ERR_SSL_UNEXPECTED_RECORD );
   \       0x9E   0x....'....        LDR.W    R0,??DataTable41_24  ;; 0xffff9900
   \       0xA2   0xBD3E             POP      {R1-R5,PC}
   5143                      }
   5144          
   5145                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "received out-of-order ChangeCipherSpec - remember" ) );
   \                     ??mbedtls_ssl_handle_message_type_5: (+1)
   \       0xA4   0x....'....        LDR.W    R0,??DataTable43_4
   \       0xA8   0x9000             STR      R0,[SP, #+0]
   \       0xAA   0xF241 0x4319      MOVW     R3,#+5145
   \       0xAE   0x....'....        LDR.W    R2,??DataTable41
   \       0xB2   0x2101             MOVS     R1,#+1
   \       0xB4   0x4620             MOV      R0,R4
   \       0xB6   0x....'....        BL       mbedtls_debug_print_msg
   5146                      return( MBEDTLS_ERR_SSL_EARLY_MESSAGE );
   \       0xBA   0x....'....        LDR.W    R0,??DataTable43_5  ;; 0xffff9b80
   \       0xBE   0xBD3E             POP      {R1-R5,PC}
   5147                  }
   5148          #endif
   5149              }
   5150          
   5151              if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
   \                     ??mbedtls_ssl_handle_message_type_2: (+1)
   \       0xC0   0x6FA0             LDR      R0,[R4, #+120]
   \       0xC2   0x2815             CMP      R0,#+21
   \       0xC4   0xD161             BNE.N    ??mbedtls_ssl_handle_message_type_6
   5152              {
   5153                  if( ssl->in_msglen != 2 )
   \       0xC6   0x6FE0             LDR      R0,[R4, #+124]
   \       0xC8   0x2802             CMP      R0,#+2
   \       0xCA   0xD00E             BEQ.N    ??mbedtls_ssl_handle_message_type_7
   5154                  {
   5155                      /* Note: Standard allows for more than one 2 byte alert
   5156                         to be packed in a single message, but Mbed TLS doesn't
   5157                         currently support this. */
   5158                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid alert message, len: %d",
   5159                                     ssl->in_msglen ) );
   \       0xCC   0x9001             STR      R0,[SP, #+4]
   \       0xCE   0x....'....        LDR.W    R0,??DataTable43_6
   \       0xD2   0x9000             STR      R0,[SP, #+0]
   \       0xD4   0xF241 0x4327      MOVW     R3,#+5159
   \       0xD8   0x....'....        LDR.W    R2,??DataTable41
   \       0xDC   0x2101             MOVS     R1,#+1
   \       0xDE   0x4620             MOV      R0,R4
   \       0xE0   0x....'....        BL       mbedtls_debug_print_msg
   5160                      return( MBEDTLS_ERR_SSL_INVALID_RECORD );
   \       0xE4   0x....'....        LDR.W    R0,??DataTable43_1  ;; 0xffff8e00
   \       0xE8   0xBD3E             POP      {R1-R5,PC}
   5161                  }
   5162          
   5163                  MBEDTLS_SSL_DEBUG_MSG( 2, ( "got an alert message, type: [%d:%d]",
   5164                                 ssl->in_msg[0], ssl->in_msg[1] ) );
   \                     ??mbedtls_ssl_handle_message_type_7: (+1)
   \       0xEA   0x....             LDR.N    R5,??DataTable41
   \       0xEC   0x6F20             LDR      R0,[R4, #+112]
   \       0xEE   0x7840             LDRB     R0,[R0, #+1]
   \       0xF0   0x9002             STR      R0,[SP, #+8]
   \       0xF2   0x6F20             LDR      R0,[R4, #+112]
   \       0xF4   0x7800             LDRB     R0,[R0, #+0]
   \       0xF6   0x9001             STR      R0,[SP, #+4]
   \       0xF8   0x....'....        LDR.W    R0,??DataTable44
   \       0xFC   0x9000             STR      R0,[SP, #+0]
   \       0xFE   0xF241 0x432C      MOVW     R3,#+5164
   \      0x102   0x462A             MOV      R2,R5
   \      0x104   0x2102             MOVS     R1,#+2
   \      0x106   0x4620             MOV      R0,R4
   \      0x108   0x....'....        BL       mbedtls_debug_print_msg
   5165          
   5166                  /*
   5167                   * Ignore non-fatal alerts, except close_notify and no_renegotiation
   5168                   */
   5169                  if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_FATAL )
   \      0x10C   0x6F20             LDR      R0,[R4, #+112]
   \      0x10E   0x7800             LDRB     R0,[R0, #+0]
   \      0x110   0x2802             CMP      R0,#+2
   \      0x112   0x6F20             LDR      R0,[R4, #+112]
   \      0x114   0xD10E             BNE.N    ??mbedtls_ssl_handle_message_type_8
   5170                  {
   5171                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "is a fatal alert message (msg %d)",
   5172                                     ssl->in_msg[1] ) );
   \      0x116   0x7840             LDRB     R0,[R0, #+1]
   \      0x118   0x9001             STR      R0,[SP, #+4]
   \      0x11A   0x....'....        LDR.W    R0,??DataTable44_1
   \      0x11E   0x9000             STR      R0,[SP, #+0]
   \      0x120   0xF241 0x4334      MOVW     R3,#+5172
   \      0x124   0x462A             MOV      R2,R5
   \      0x126   0x2101             MOVS     R1,#+1
   \      0x128   0x4620             MOV      R0,R4
   \      0x12A   0x....'....        BL       mbedtls_debug_print_msg
   5173                      return( MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE );
   \      0x12E   0x....'....        LDR.W    R0,??DataTable44_2  ;; 0xffff8880
   \      0x132   0xBD3E             POP      {R1-R5,PC}
   5174                  }
   5175          
   5176                  if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
   5177                      ssl->in_msg[1] == MBEDTLS_SSL_ALERT_MSG_CLOSE_NOTIFY )
   \                     ??mbedtls_ssl_handle_message_type_8: (+1)
   \      0x134   0x7800             LDRB     R0,[R0, #+0]
   \      0x136   0x2801             CMP      R0,#+1
   \      0x138   0xD110             BNE.N    ??mbedtls_ssl_handle_message_type_9
   \      0x13A   0x6F20             LDR      R0,[R4, #+112]
   \      0x13C   0x7840             LDRB     R0,[R0, #+1]
   \      0x13E   0x2800             CMP      R0,#+0
   \      0x140   0xD10C             BNE.N    ??mbedtls_ssl_handle_message_type_9
   5178                  {
   5179                      MBEDTLS_SSL_DEBUG_MSG( 2, ( "is a close notify message" ) );
   \      0x142   0x....'....        LDR.W    R0,??DataTable44_3
   \      0x146   0x9000             STR      R0,[SP, #+0]
   \      0x148   0xF241 0x433B      MOVW     R3,#+5179
   \      0x14C   0x462A             MOV      R2,R5
   \      0x14E   0x2102             MOVS     R1,#+2
   \      0x150   0x4620             MOV      R0,R4
   \      0x152   0x....'....        BL       mbedtls_debug_print_msg
   5180                      return( MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY );
   \      0x156   0x....'....        LDR.W    R0,??DataTable44_4  ;; 0xffff8780
   \      0x15A   0xBD3E             POP      {R1-R5,PC}
   5181                  }
   5182          
   5183          #if defined(MBEDTLS_SSL_RENEGOTIATION_ENABLED)
   5184                  if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
   5185                      ssl->in_msg[1] == MBEDTLS_SSL_ALERT_MSG_NO_RENEGOTIATION )
   \                     ??mbedtls_ssl_handle_message_type_9: (+1)
   \      0x15C   0x6F20             LDR      R0,[R4, #+112]
   \      0x15E   0x7800             LDRB     R0,[R0, #+0]
   \      0x160   0x2801             CMP      R0,#+1
   \      0x162   0xD10F             BNE.N    ??mbedtls_ssl_handle_message_type_10
   \      0x164   0x6F20             LDR      R0,[R4, #+112]
   \      0x166   0x7840             LDRB     R0,[R0, #+1]
   \      0x168   0x2864             CMP      R0,#+100
   \      0x16A   0xD10B             BNE.N    ??mbedtls_ssl_handle_message_type_10
   5186                  {
   5187                      MBEDTLS_SSL_DEBUG_MSG( 2, ( "is a SSLv3 no renegotiation alert" ) );
   \      0x16C   0x....'....        LDR.W    R0,??DataTable44_5
   \      0x170   0x9000             STR      R0,[SP, #+0]
   \      0x172   0xF241 0x4343      MOVW     R3,#+5187
   \      0x176   0x462A             MOV      R2,R5
   \      0x178   0x2102             MOVS     R1,#+2
   \      0x17A   0x4620             MOV      R0,R4
   \      0x17C   0x....'....        BL       mbedtls_debug_print_msg
   5188                      /* Will be handled when trying to parse ServerHello */
   5189                      return( 0 );
   \      0x180   0x2000             MOVS     R0,#+0
   \      0x182   0xBD3E             POP      {R1-R5,PC}
   5190                  }
   5191          #endif
   5192          
   5193          #if defined(MBEDTLS_SSL_PROTO_SSL3) && defined(MBEDTLS_SSL_SRV_C)
   5194                  if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 &&
   5195                      ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER &&
   5196                      ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
   5197                      ssl->in_msg[1] == MBEDTLS_SSL_ALERT_MSG_NO_CERT )
   5198                  {
   5199                      MBEDTLS_SSL_DEBUG_MSG( 2, ( "is a SSLv3 no_cert" ) );
   5200                      /* Will be handled in mbedtls_ssl_parse_certificate() */
   5201                      return( 0 );
   5202                  }
   5203          #endif /* MBEDTLS_SSL_PROTO_SSL3 && MBEDTLS_SSL_SRV_C */
   5204          
   5205                  /* Silently ignore: fetch new message */
   5206                  return MBEDTLS_ERR_SSL_NON_FATAL;
   \                     ??mbedtls_ssl_handle_message_type_10: (+1)
   \      0x184   0x....'....        LDR.W    R0,??DataTable44_6  ;; 0xffff9980
   \      0x188   0xBD3E             POP      {R1-R5,PC}
   5207              }
   5208          
   5209          #if defined(MBEDTLS_SSL_PROTO_DTLS)
   5210              if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM &&
   5211                  ssl->handshake != NULL &&
   5212                  ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER  )
   \                     ??mbedtls_ssl_handle_message_type_6: (+1)
   \      0x18A   0x6820             LDR      R0,[R4, #+0]
   \      0x18C   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \      0x190   0xF3C0 0x0040      UBFX     R0,R0,#+1,#+1
   \      0x194   0x2800             CMP      R0,#+0
   \      0x196   0xD008             BEQ.N    ??mbedtls_ssl_handle_message_type_11
   \      0x198   0x6BE0             LDR      R0,[R4, #+60]
   \      0x19A   0x2800             CMP      R0,#+0
   \      0x19C   0xD005             BEQ.N    ??mbedtls_ssl_handle_message_type_11
   \      0x19E   0x6860             LDR      R0,[R4, #+4]
   \      0x1A0   0x2810             CMP      R0,#+16
   \      0x1A2   0xD102             BNE.N    ??mbedtls_ssl_handle_message_type_11
   5213              {
   5214                  ssl_handshake_wrapup_free_hs_transform( ssl );
   \      0x1A4   0x4620             MOV      R0,R4
   \      0x1A6   0x....'....        BL       ssl_handshake_wrapup_free_hs_transform
   5215              }
   5216          #endif
   5217          
   5218              return( 0 );
   \                     ??mbedtls_ssl_handle_message_type_11: (+1)
   \      0x1AA   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_ssl_handle_message_type_1: (+1)
   \      0x1AC   0xBD3E             POP      {R1-R5,PC}       ;; return
   5219          }
   5220          

   \                                 In section .text, align 2, keep-with-next
   5221          int mbedtls_ssl_send_fatal_handshake_failure( mbedtls_ssl_context *ssl )
   5222          {
   \                     mbedtls_ssl_send_fatal_handshake_failure: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   5223              int ret;
   5224          
   5225              if( ( ret = mbedtls_ssl_send_alert_message( ssl,
   5226                              MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   5227                              MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE ) ) != 0 )
   \        0x2   0x2228             MOVS     R2,#+40
   \        0x4   0x2102             MOVS     R1,#+2
   \        0x6   0x....'....        BL       mbedtls_ssl_send_alert_message
   \        0xA   0x2800             CMP      R0,#+0
   \        0xC   0xD100             BNE.N    ??mbedtls_ssl_send_fatal_handshake_failure_0
   5228              {
   5229                  return( ret );
   5230              }
   5231          
   5232              return( 0 );
   \        0xE   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_ssl_send_fatal_handshake_failure_0: (+1)
   \       0x10   0xBD02             POP      {R1,PC}          ;; return
   5233          }
   5234          

   \                                 In section .text, align 2, keep-with-next
   5235          int mbedtls_ssl_send_alert_message( mbedtls_ssl_context *ssl,
   5236                                      unsigned char level,
   5237                                      unsigned char message )
   5238          {
   \                     mbedtls_ssl_send_alert_message: (+1)
   \        0x0   0xB5FE             PUSH     {R1-R7,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
   \        0x6   0x4617             MOV      R7,R2
   5239              int ret;
   5240          
   5241              if( ssl == NULL || ssl->conf == NULL )
   \        0x8   0x2C00             CMP      R4,#+0
   \        0xA   0xD002             BEQ.N    ??mbedtls_ssl_send_alert_message_0
   \        0xC   0x6820             LDR      R0,[R4, #+0]
   \        0xE   0x2800             CMP      R0,#+0
   \       0x10   0xD102             BNE.N    ??mbedtls_ssl_send_alert_message_1
   5242                  return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   \                     ??mbedtls_ssl_send_alert_message_0: (+1)
   \       0x12   0x....'....        LDR.W    R0,??DataTable44_7  ;; 0xffff8f00
   \       0x16   0xBDFE             POP      {R1-R7,PC}
   5243          
   5244              MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> send alert message" ) );
   \                     ??mbedtls_ssl_send_alert_message_1: (+1)
   \       0x18   0x....             LDR.N    R6,??DataTable41
   \       0x1A   0x....'....        LDR.W    R0,??DataTable44_8
   \       0x1E   0x9000             STR      R0,[SP, #+0]
   \       0x20   0xF241 0x437C      MOVW     R3,#+5244
   \       0x24   0x4632             MOV      R2,R6
   \       0x26   0x2102             MOVS     R1,#+2
   \       0x28   0x4620             MOV      R0,R4
   \       0x2A   0x....'....        BL       mbedtls_debug_print_msg
   5245              MBEDTLS_SSL_DEBUG_MSG( 3, ( "send alert level=%u message=%u", level, message ));
   \       0x2E   0x4638             MOV      R0,R7
   \       0x30   0x9002             STR      R0,[SP, #+8]
   \       0x32   0x4628             MOV      R0,R5
   \       0x34   0x9001             STR      R0,[SP, #+4]
   \       0x36   0x....'....        LDR.W    R0,??DataTable44_9
   \       0x3A   0x9000             STR      R0,[SP, #+0]
   \       0x3C   0xF241 0x437D      MOVW     R3,#+5245
   \       0x40   0x4632             MOV      R2,R6
   \       0x42   0x2103             MOVS     R1,#+3
   \       0x44   0x4620             MOV      R0,R4
   \       0x46   0x....'....        BL       mbedtls_debug_print_msg
   5246          
   5247              ssl->out_msgtype = MBEDTLS_SSL_MSG_ALERT;
   \       0x4A   0x2015             MOVS     R0,#+21
   \       0x4C   0xF8C4 0x00C8      STR      R0,[R4, #+200]
   5248              ssl->out_msglen = 2;
   \       0x50   0x2002             MOVS     R0,#+2
   \       0x52   0xF8C4 0x00CC      STR      R0,[R4, #+204]
   5249              ssl->out_msg[0] = level;
   \       0x56   0xF8D4 0x00C4      LDR      R0,[R4, #+196]
   \       0x5A   0x7005             STRB     R5,[R0, #+0]
   5250              ssl->out_msg[1] = message;
   \       0x5C   0xF8D4 0x00C4      LDR      R0,[R4, #+196]
   \       0x60   0x7047             STRB     R7,[R0, #+1]
   5251          
   5252              if( ( ret = mbedtls_ssl_write_record( ssl, SSL_FORCE_FLUSH ) ) != 0 )
   \       0x62   0x2101             MOVS     R1,#+1
   \       0x64   0x4620             MOV      R0,R4
   \       0x66   0x....'....        BL       mbedtls_ssl_write_record
   \       0x6A   0x0005             MOVS     R5,R0
   \       0x6C   0xD00C             BEQ.N    ??mbedtls_ssl_send_alert_message_2
   5253              {
   5254                  MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
   \       0x6E   0x9501             STR      R5,[SP, #+4]
   \       0x70   0x....'....        LDR.W    R0,??DataTable44_10
   \       0x74   0x9000             STR      R0,[SP, #+0]
   \       0x76   0xF241 0x4386      MOVW     R3,#+5254
   \       0x7A   0x4632             MOV      R2,R6
   \       0x7C   0x2101             MOVS     R1,#+1
   \       0x7E   0x4620             MOV      R0,R4
   \       0x80   0x....'....        BL       mbedtls_debug_print_ret
   5255                  return( ret );
   \       0x84   0x4628             MOV      R0,R5
   \       0x86   0xBDFE             POP      {R1-R7,PC}
   5256              }
   5257              MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= send alert message" ) );
   \                     ??mbedtls_ssl_send_alert_message_2: (+1)
   \       0x88   0x....'....        LDR.W    R0,??DataTable46
   \       0x8C   0x9000             STR      R0,[SP, #+0]
   \       0x8E   0xF241 0x4389      MOVW     R3,#+5257
   \       0x92   0x4632             MOV      R2,R6
   \       0x94   0x2102             MOVS     R1,#+2
   \       0x96   0x4620             MOV      R0,R4
   \       0x98   0x....'....        BL       mbedtls_debug_print_msg
   5258          
   5259              return( 0 );
   \       0x9C   0x2000             MOVS     R0,#+0
   \       0x9E   0xBDFE             POP      {R1-R7,PC}       ;; return
   5260          }
   5261          
   5262          /*
   5263           * Handshake functions
   5264           */
   5265          #if !defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)         && \
   5266              !defined(MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED)     && \
   5267              !defined(MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED)     && \
   5268              !defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED)   && \
   5269              !defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED) && \
   5270              !defined(MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED)    && \
   5271              !defined(MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED)
   5272          /* No certificate support -> dummy functions */
   5273          int mbedtls_ssl_write_certificate( mbedtls_ssl_context *ssl )
   5274          {
   5275              const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
   5276          
   5277              MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate" ) );
   5278          
   5279              if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
   5280                  ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
   5281                  ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
   5282                  ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )
   5283              {
   5284                  MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate" ) );
   5285                  ssl->state++;
   5286                  return( 0 );
   5287              }
   5288          
   5289              MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
   5290              return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   5291          }
   5292          
   5293          int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
   5294          {
   5295              const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
   5296          
   5297              MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate" ) );
   5298          
   5299              if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
   5300                  ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
   5301                  ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
   5302                  ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )
   5303              {
   5304                  MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse certificate" ) );
   5305                  ssl->state++;
   5306                  return( 0 );
   5307              }
   5308          
   5309              MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
   5310              return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   5311          }
   5312          
   5313          #else
   5314          /* Some certificate support -> implement write and parse */
   5315          

   \                                 In section .text, align 2, keep-with-next
   5316          int mbedtls_ssl_write_certificate( mbedtls_ssl_context *ssl )
   5317          {
   \                     mbedtls_ssl_write_certificate: (+1)
   \        0x0   0xE92D 0x41FF      PUSH     {R0-R8,LR}
   \        0x4   0x4606             MOV      R6,R0
   5318              int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
   5319              size_t i, n;
   5320              const mbedtls_x509_crt *crt;
   5321              const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
   \        0x6   0x6CF0             LDR      R0,[R6, #+76]
   \        0x8   0x6804             LDR      R4,[R0, #+0]
   5322          
   5323              MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate" ) );
   \        0xA   0x....             LDR.N    R7,??DataTable41
   \        0xC   0x....'....        LDR.W    R0,??DataTable45
   \       0x10   0x9000             STR      R0,[SP, #+0]
   \       0x12   0xF241 0x43CB      MOVW     R3,#+5323
   \       0x16   0x463A             MOV      R2,R7
   \       0x18   0x2102             MOVS     R1,#+2
   \       0x1A   0x4630             MOV      R0,R6
   \       0x1C   0x....'....        BL       mbedtls_debug_print_msg
   5324          
   5325              if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
   5326                  ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
   5327                  ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
   5328                  ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )
   \       0x20   0x7AA0             LDRB     R0,[R4, #+10]
   \       0x22   0x2805             CMP      R0,#+5
   \       0x24   0xD005             BEQ.N    ??mbedtls_ssl_write_certificate_0
   \       0x26   0x2806             CMP      R0,#+6
   \       0x28   0xD003             BEQ.N    ??mbedtls_ssl_write_certificate_0
   \       0x2A   0x2808             CMP      R0,#+8
   \       0x2C   0xD001             BEQ.N    ??mbedtls_ssl_write_certificate_0
   \       0x2E   0x280B             CMP      R0,#+11
   \       0x30   0xD10E             BNE.N    ??mbedtls_ssl_write_certificate_1
   5329              {
   5330                  MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate" ) );
   \                     ??mbedtls_ssl_write_certificate_0: (+1)
   \       0x32   0x....'....        LDR.W    R0,??DataTable45_1
   \       0x36   0x9000             STR      R0,[SP, #+0]
   \       0x38   0xF241 0x43D2      MOVW     R3,#+5330
   \       0x3C   0x463A             MOV      R2,R7
   \       0x3E   0x2102             MOVS     R1,#+2
   \       0x40   0x4630             MOV      R0,R6
   \       0x42   0x....'....        BL       mbedtls_debug_print_msg
   5331                  ssl->state++;
   \       0x46   0x6870             LDR      R0,[R6, #+4]
   \       0x48   0x1C40             ADDS     R0,R0,#+1
   \       0x4A   0x6070             STR      R0,[R6, #+4]
   5332                  return( 0 );
   \       0x4C   0x2000             MOVS     R0,#+0
   \       0x4E   0xE088             B.N      ??mbedtls_ssl_write_certificate_2
   5333              }
   5334          
   5335          #if defined(MBEDTLS_SSL_CLI_C)
   5336              if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
   \                     ??mbedtls_ssl_write_certificate_1: (+1)
   \       0x50   0x6830             LDR      R0,[R6, #+0]
   \       0x52   0xF890 0x00CC      LDRB     R0,[R0, #+204]
   \       0x56   0x07C0             LSLS     R0,R0,#+31
   \       0x58   0xD412             BMI.N    ??mbedtls_ssl_write_certificate_3
   5337              {
   5338                  if( ssl->client_auth == 0 )
   \       0x5A   0xF8D6 0x00E0      LDR      R0,[R6, #+224]
   \       0x5E   0x2800             CMP      R0,#+0
   \       0x60   0xD10E             BNE.N    ??mbedtls_ssl_write_certificate_3
   5339                  {
   5340                      MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate" ) );
   \       0x62   0x....'....        LDR.W    R0,??DataTable45_1
   \       0x66   0x9000             STR      R0,[SP, #+0]
   \       0x68   0xF241 0x43DC      MOVW     R3,#+5340
   \       0x6C   0x463A             MOV      R2,R7
   \       0x6E   0x2102             MOVS     R1,#+2
   \       0x70   0x4630             MOV      R0,R6
   \       0x72   0x....'....        BL       mbedtls_debug_print_msg
   5341                      ssl->state++;
   \       0x76   0x6870             LDR      R0,[R6, #+4]
   \       0x78   0x1C40             ADDS     R0,R0,#+1
   \       0x7A   0x6070             STR      R0,[R6, #+4]
   5342                      return( 0 );
   \       0x7C   0x2000             MOVS     R0,#+0
   \       0x7E   0xE070             B.N      ??mbedtls_ssl_write_certificate_2
   5343                  }
   5344          
   5345          #if defined(MBEDTLS_SSL_PROTO_SSL3)
   5346                  /*
   5347                   * If using SSLv3 and got no cert, send an Alert message
   5348                   * (otherwise an empty Certificate message will be sent).
   5349                   */
   5350                  if( mbedtls_ssl_own_cert( ssl )  == NULL &&
   5351                      ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 )
   5352                  {
   5353                      ssl->out_msglen  = 2;
   5354                      ssl->out_msgtype = MBEDTLS_SSL_MSG_ALERT;
   5355                      ssl->out_msg[0]  = MBEDTLS_SSL_ALERT_LEVEL_WARNING;
   5356                      ssl->out_msg[1]  = MBEDTLS_SSL_ALERT_MSG_NO_CERT;
   5357          
   5358                      MBEDTLS_SSL_DEBUG_MSG( 2, ( "got no certificate to send" ) );
   5359                      goto write_msg;
   5360                  }
   5361          #endif /* MBEDTLS_SSL_PROTO_SSL3 */
   5362              }
   5363          #endif /* MBEDTLS_SSL_CLI_C */
   5364          #if defined(MBEDTLS_SSL_SRV_C)
   5365              if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
   \                     ??mbedtls_ssl_write_certificate_3: (+1)
   \       0x80   0x6830             LDR      R0,[R6, #+0]
   \       0x82   0xF890 0x00CC      LDRB     R0,[R0, #+204]
   \       0x86   0x07C0             LSLS     R0,R0,#+31
   \       0x88   0xD511             BPL.N    ??mbedtls_ssl_write_certificate_4
   5366              {
   5367                  if( mbedtls_ssl_own_cert( ssl ) == NULL )
   \       0x8A   0x4630             MOV      R0,R6
   \       0x8C   0x....'....        BL       mbedtls_ssl_own_cert
   \       0x90   0x2800             CMP      R0,#+0
   \       0x92   0xD10C             BNE.N    ??mbedtls_ssl_write_certificate_4
   5368                  {
   5369                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no certificate to send" ) );
   \       0x94   0x....'....        LDR.W    R0,??DataTable45_2
   \       0x98   0x9000             STR      R0,[SP, #+0]
   \       0x9A   0xF241 0x43F9      MOVW     R3,#+5369
   \       0x9E   0x463A             MOV      R2,R7
   \       0xA0   0x2101             MOVS     R1,#+1
   \       0xA2   0x4630             MOV      R0,R6
   \       0xA4   0x....'....        BL       mbedtls_debug_print_msg
   5370                      return( MBEDTLS_ERR_SSL_CERTIFICATE_REQUIRED );
   \       0xA8   0x....'....        LDR.W    R0,??DataTable45_3  ;; 0xffff8a80
   \       0xAC   0xE059             B.N      ??mbedtls_ssl_write_certificate_2
   5371                  }
   5372              }
   5373          #endif
   5374          
   5375              MBEDTLS_SSL_DEBUG_CRT( 3, "own certificate", mbedtls_ssl_own_cert( ssl ) );
   \                     ??mbedtls_ssl_write_certificate_4: (+1)
   \       0xAE   0x4630             MOV      R0,R6
   \       0xB0   0x....'....        BL       mbedtls_ssl_own_cert
   \       0xB4   0x9001             STR      R0,[SP, #+4]
   \       0xB6   0x....'....        LDR.W    R0,??DataTable45_4
   \       0xBA   0x9000             STR      R0,[SP, #+0]
   \       0xBC   0xF241 0x43FF      MOVW     R3,#+5375
   \       0xC0   0x463A             MOV      R2,R7
   \       0xC2   0x2103             MOVS     R1,#+3
   \       0xC4   0x4630             MOV      R0,R6
   \       0xC6   0x....'....        BL       mbedtls_debug_print_crt
   5376          
   5377              /*
   5378               *     0  .  0    handshake type
   5379               *     1  .  3    handshake length
   5380               *     4  .  6    length of all certs
   5381               *     7  .  9    length of cert. 1
   5382               *    10  . n-1   peer certificate
   5383               *     n  . n+2   length of cert. 2
   5384               *    n+3 . ...   upper level cert, etc.
   5385               */
   5386              i = 7;
   \       0xCA   0xF04F 0x0807      MOV      R8,#+7
   5387              crt = mbedtls_ssl_own_cert( ssl );
   \       0xCE   0x4630             MOV      R0,R6
   \       0xD0   0x....'....        BL       mbedtls_ssl_own_cert
   \       0xD4   0x4605             MOV      R5,R0
   \       0xD6   0xE01B             B.N      ??mbedtls_ssl_write_certificate_5
   5388          
   5389              while( crt != NULL )
   5390              {
   5391                  n = crt->raw.len;
   5392                  if( n > MBEDTLS_SSL_OUT_CONTENT_LEN - 3 - i )
   5393                  {
   5394                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate too large, %d > %d",
   5395                                     i + 3 + n, MBEDTLS_SSL_OUT_CONTENT_LEN ) );
   5396                      return( MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE );
   5397                  }
   5398          
   5399                  ssl->out_msg[i    ] = (unsigned char)( n >> 16 );
   \                     ??mbedtls_ssl_write_certificate_6: (+1)
   \       0xD8   0x4620             MOV      R0,R4
   \       0xDA   0x0C00             LSRS     R0,R0,#+16
   \       0xDC   0xF8D6 0x10C4      LDR      R1,[R6, #+196]
   \       0xE0   0xF801 0x0008      STRB     R0,[R1, R8]
   5400                  ssl->out_msg[i + 1] = (unsigned char)( n >>  8 );
   \       0xE4   0x4620             MOV      R0,R4
   \       0xE6   0x0A00             LSRS     R0,R0,#+8
   \       0xE8   0xF8D6 0x10C4      LDR      R1,[R6, #+196]
   \       0xEC   0x4441             ADD      R1,R1,R8
   \       0xEE   0x7048             STRB     R0,[R1, #+1]
   5401                  ssl->out_msg[i + 2] = (unsigned char)( n       );
   \       0xF0   0xF8D6 0x00C4      LDR      R0,[R6, #+196]
   \       0xF4   0x4440             ADD      R0,R0,R8
   \       0xF6   0x7084             STRB     R4,[R0, #+2]
   5402          
   5403                  i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );
   \       0xF8   0xF108 0x0803      ADD      R8,R8,#+3
   \       0xFC   0x4622             MOV      R2,R4
   \       0xFE   0x68A9             LDR      R1,[R5, #+8]
   \      0x100   0xF8D6 0x00C4      LDR      R0,[R6, #+196]
   \      0x104   0x4440             ADD      R0,R0,R8
   \      0x106   0x....'....        BL       __aeabi_memcpy
   5404                  i += n; crt = crt->next;
   \      0x10A   0x44A0             ADD      R8,R4,R8
   \      0x10C   0xF8D5 0x5130      LDR      R5,[R5, #+304]
   \                     ??mbedtls_ssl_write_certificate_5: (+1)
   \      0x110   0x2D00             CMP      R5,#+0
   \      0x112   0xD029             BEQ.N    ??mbedtls_ssl_write_certificate_7
   \      0x114   0x686C             LDR      R4,[R5, #+4]
   \      0x116   0xF242 0x70FD      MOVW     R0,#+10237
   \      0x11A   0xEBA0 0x0008      SUB      R0,R0,R8
   \      0x11E   0x42A0             CMP      R0,R4
   \      0x120   0xD2DA             BCS.N    ??mbedtls_ssl_write_certificate_6
   \      0x122   0xF44F 0x5020      MOV      R0,#+10240
   \      0x126   0x9002             STR      R0,[SP, #+8]
   \      0x128   0x44A0             ADD      R8,R4,R8
   \      0x12A   0xF108 0x0803      ADD      R8,R8,#+3
   \      0x12E   0xF8CD 0x8004      STR      R8,[SP, #+4]
   \      0x132   0x....'....        LDR.W    R0,??DataTable46_1
   \      0x136   0x9000             STR      R0,[SP, #+0]
   \      0x138   0xF241 0x5313      MOVW     R3,#+5395
   \      0x13C   0x463A             MOV      R2,R7
   \      0x13E   0x2101             MOVS     R1,#+1
   \      0x140   0x4630             MOV      R0,R6
   \      0x142   0x....'....        BL       mbedtls_debug_print_msg
   \      0x146   0x....'....        LDR.W    R0,??DataTable46_2  ;; 0xffff8b00
   \      0x14A   0xE00A             B.N      ??mbedtls_ssl_write_certificate_2
   5405              }
   5406          
   5407              ssl->out_msg[4]  = (unsigned char)( ( i - 7 ) >> 16 );
   5408              ssl->out_msg[5]  = (unsigned char)( ( i - 7 ) >>  8 );
   5409              ssl->out_msg[6]  = (unsigned char)( ( i - 7 )       );
   5410          
   5411              ssl->out_msglen  = i;
   5412              ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
   5413              ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE;
   5414          
   5415          #if defined(MBEDTLS_SSL_PROTO_SSL3) && defined(MBEDTLS_SSL_CLI_C)
   5416          write_msg:
   5417          #endif
   5418          
   5419              ssl->state++;
   5420          
   5421              if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
   5422              {
   5423                  MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_handshake_msg", ret );
   5424                  return( ret );
   5425              }
   5426          
   5427              MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write certificate" ) );
   \                     ??mbedtls_ssl_write_certificate_8: (+1)
   \      0x14C   0x....'....        LDR.W    R0,??DataTable46_3
   \      0x150   0x9000             STR      R0,[SP, #+0]
   \      0x152   0xF241 0x5333      MOVW     R3,#+5427
   \      0x156   0x463A             MOV      R2,R7
   \      0x158   0x2102             MOVS     R1,#+2
   \      0x15A   0x4630             MOV      R0,R6
   \      0x15C   0x....'....        BL       mbedtls_debug_print_msg
   5428          
   5429              return( ret );
   \      0x160   0x4620             MOV      R0,R4
   \                     ??mbedtls_ssl_write_certificate_2: (+1)
   \      0x162   0xB004             ADD      SP,SP,#+16
   \      0x164   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   \                     ??mbedtls_ssl_write_certificate_7: (+1)
   \      0x168   0xF1A8 0x0007      SUB      R0,R8,#+7
   \      0x16C   0x0C00             LSRS     R0,R0,#+16
   \      0x16E   0xF8D6 0x10C4      LDR      R1,[R6, #+196]
   \      0x172   0x7108             STRB     R0,[R1, #+4]
   \      0x174   0xF1A8 0x0007      SUB      R0,R8,#+7
   \      0x178   0x0A00             LSRS     R0,R0,#+8
   \      0x17A   0xF8D6 0x10C4      LDR      R1,[R6, #+196]
   \      0x17E   0x7148             STRB     R0,[R1, #+5]
   \      0x180   0x4640             MOV      R0,R8
   \      0x182   0x1FC0             SUBS     R0,R0,#+7
   \      0x184   0xF8D6 0x10C4      LDR      R1,[R6, #+196]
   \      0x188   0x7188             STRB     R0,[R1, #+6]
   \      0x18A   0xF8C6 0x80CC      STR      R8,[R6, #+204]
   \      0x18E   0x2016             MOVS     R0,#+22
   \      0x190   0xF8C6 0x00C8      STR      R0,[R6, #+200]
   \      0x194   0x200B             MOVS     R0,#+11
   \      0x196   0xF8D6 0x10C4      LDR      R1,[R6, #+196]
   \      0x19A   0x7008             STRB     R0,[R1, #+0]
   \      0x19C   0x6870             LDR      R0,[R6, #+4]
   \      0x19E   0x1C40             ADDS     R0,R0,#+1
   \      0x1A0   0x6070             STR      R0,[R6, #+4]
   \      0x1A2   0x4630             MOV      R0,R6
   \      0x1A4   0x....'....        BL       mbedtls_ssl_write_handshake_msg
   \      0x1A8   0x0004             MOVS     R4,R0
   \      0x1AA   0xD0CF             BEQ.N    ??mbedtls_ssl_write_certificate_8
   \      0x1AC   0x9401             STR      R4,[SP, #+4]
   \      0x1AE   0x....'....        LDR.W    R0,??DataTable48
   \      0x1B2   0x9000             STR      R0,[SP, #+0]
   \      0x1B4   0xF241 0x532F      MOVW     R3,#+5423
   \      0x1B8   0x463A             MOV      R2,R7
   \      0x1BA   0x2101             MOVS     R1,#+1
   \      0x1BC   0x4630             MOV      R0,R6
   \      0x1BE   0x....'....        BL       mbedtls_debug_print_ret
   \      0x1C2   0x4620             MOV      R0,R4
   \      0x1C4   0xE7CD             B.N      ??mbedtls_ssl_write_certificate_2
   5430          }
   5431          

   \                                 In section .text, align 4, keep-with-next
   5432          int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
   5433          {
   \                     mbedtls_ssl_parse_certificate: (+1)
   \        0x0   0xE92D 0x47FF      PUSH     {R0-R10,LR}
   \        0x4   0x4681             MOV      R9,R0
   5434              int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
   5435              size_t i, n;
   5436              const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
   \        0x6   0xF8D9 0x004C      LDR      R0,[R9, #+76]
   \        0xA   0x6806             LDR      R6,[R0, #+0]
   5437              int authmode = ssl->conf->authmode;
   \        0xC   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \       0x10   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \       0x14   0xF3C0 0x0581      UBFX     R5,R0,#+2,#+2
   5438              uint8_t alert;
   5439          
   5440              MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate" ) );
   \       0x18   0x....'....        LDR.W    R7,??DataTable49
   \       0x1C   0x....'....        LDR.W    R0,??DataTable48_1
   \       0x20   0x9000             STR      R0,[SP, #+0]
   \       0x22   0xF44F 0x53AA      MOV      R3,#+5440
   \       0x26   0x463A             MOV      R2,R7
   \       0x28   0x2102             MOVS     R1,#+2
   \       0x2A   0x4648             MOV      R0,R9
   \       0x2C   0x....'....        BL       mbedtls_debug_print_msg
   5441          
   5442              if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
   5443                  ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
   5444                  ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
   5445                  ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )
   \       0x30   0x7AB0             LDRB     R0,[R6, #+10]
   \       0x32   0x2805             CMP      R0,#+5
   \       0x34   0xD005             BEQ.N    ??mbedtls_ssl_parse_certificate_1
   \       0x36   0x2806             CMP      R0,#+6
   \       0x38   0xD003             BEQ.N    ??mbedtls_ssl_parse_certificate_1
   \       0x3A   0x2808             CMP      R0,#+8
   \       0x3C   0xD001             BEQ.N    ??mbedtls_ssl_parse_certificate_1
   \       0x3E   0x280B             CMP      R0,#+11
   \       0x40   0xD110             BNE.N    ??mbedtls_ssl_parse_certificate_2
   5446              {
   5447                  MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse certificate" ) );
   \                     ??mbedtls_ssl_parse_certificate_1: (+1)
   \       0x42   0x....'....        LDR.W    R0,??DataTable48_2
   \       0x46   0x9000             STR      R0,[SP, #+0]
   \       0x48   0xF241 0x5347      MOVW     R3,#+5447
   \       0x4C   0x463A             MOV      R2,R7
   \       0x4E   0x2102             MOVS     R1,#+2
   \       0x50   0x4648             MOV      R0,R9
   \       0x52   0x....'....        BL       mbedtls_debug_print_msg
   5448                  ssl->state++;
   \       0x56   0xF8D9 0x0004      LDR      R0,[R9, #+4]
   \       0x5A   0x1C40             ADDS     R0,R0,#+1
   \       0x5C   0xF8C9 0x0004      STR      R0,[R9, #+4]
   5449                  return( 0 );
   \       0x60   0x2000             MOVS     R0,#+0
   \       0x62   0xE2C7             B.N      ??mbedtls_ssl_parse_certificate_3
   5450              }
   5451          
   5452          #if defined(MBEDTLS_SSL_SRV_C)
   5453              if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER &&
   5454                  ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK )
   \                     ??mbedtls_ssl_parse_certificate_2: (+1)
   \       0x64   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \       0x68   0xF890 0x00CC      LDRB     R0,[R0, #+204]
   \       0x6C   0x07C0             LSLS     R0,R0,#+31
   \       0x6E   0xD513             BPL.N    ??mbedtls_ssl_parse_certificate_4
   \       0x70   0x7AB0             LDRB     R0,[R6, #+10]
   \       0x72   0x2807             CMP      R0,#+7
   \       0x74   0xD110             BNE.N    ??mbedtls_ssl_parse_certificate_4
   5455              {
   5456                  MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse certificate" ) );
   \       0x76   0x....'....        LDR.W    R0,??DataTable48_2
   \       0x7A   0x9000             STR      R0,[SP, #+0]
   \       0x7C   0xF241 0x5350      MOVW     R3,#+5456
   \       0x80   0x463A             MOV      R2,R7
   \       0x82   0x2102             MOVS     R1,#+2
   \       0x84   0x4648             MOV      R0,R9
   \       0x86   0x....'....        BL       mbedtls_debug_print_msg
   5457                  ssl->state++;
   \       0x8A   0xF8D9 0x0004      LDR      R0,[R9, #+4]
   \       0x8E   0x1C40             ADDS     R0,R0,#+1
   \       0x90   0xF8C9 0x0004      STR      R0,[R9, #+4]
   5458                  return( 0 );
   \       0x94   0x2000             MOVS     R0,#+0
   \       0x96   0xE2AD             B.N      ??mbedtls_ssl_parse_certificate_3
   5459              }
   5460          
   5461          #if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
   5462              if( ssl->handshake->sni_authmode != MBEDTLS_SSL_VERIFY_UNSET )
   \                     ??mbedtls_ssl_parse_certificate_4: (+1)
   \       0x98   0xF8D9 0x003C      LDR      R0,[R9, #+60]
   \       0x9C   0xF8D0 0x01C4      LDR      R0,[R0, #+452]
   \       0xA0   0x2803             CMP      R0,#+3
   \       0xA2   0xD003             BEQ.N    ??mbedtls_ssl_parse_certificate_5
   5463                  authmode = ssl->handshake->sni_authmode;
   \       0xA4   0xF8D9 0x003C      LDR      R0,[R9, #+60]
   \       0xA8   0xF8D0 0x51C4      LDR      R5,[R0, #+452]
   5464          #endif
   5465          
   5466              if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER &&
   5467                  authmode == MBEDTLS_SSL_VERIFY_NONE )
   \                     ??mbedtls_ssl_parse_certificate_5: (+1)
   \       0xAC   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \       0xB0   0xF890 0x00CC      LDRB     R0,[R0, #+204]
   \       0xB4   0x07C0             LSLS     R0,R0,#+31
   \       0xB6   0xD516             BPL.N    ??mbedtls_ssl_parse_certificate_6
   \       0xB8   0x2D00             CMP      R5,#+0
   \       0xBA   0xD114             BNE.N    ??mbedtls_ssl_parse_certificate_6
   5468              {
   5469                  ssl->session_negotiate->verify_result = MBEDTLS_X509_BADCERT_SKIP_VERIFY;
   \       0xBC   0x2080             MOVS     R0,#+128
   \       0xBE   0xF8D9 0x1038      LDR      R1,[R9, #+56]
   \       0xC2   0x6608             STR      R0,[R1, #+96]
   5470                  MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse certificate" ) );
   \       0xC4   0x....'....        LDR.W    R0,??DataTable48_2
   \       0xC8   0x9000             STR      R0,[SP, #+0]
   \       0xCA   0xF241 0x535E      MOVW     R3,#+5470
   \       0xCE   0x463A             MOV      R2,R7
   \       0xD0   0x2102             MOVS     R1,#+2
   \       0xD2   0x4648             MOV      R0,R9
   \       0xD4   0x....'....        BL       mbedtls_debug_print_msg
   5471                  ssl->state++;
   \       0xD8   0xF8D9 0x0004      LDR      R0,[R9, #+4]
   \       0xDC   0x1C40             ADDS     R0,R0,#+1
   \       0xDE   0xF8C9 0x0004      STR      R0,[R9, #+4]
   5472                  return( 0 );
   \       0xE2   0x2000             MOVS     R0,#+0
   \       0xE4   0xE286             B.N      ??mbedtls_ssl_parse_certificate_3
   5473              }
   5474          #endif
   5475          
   5476              if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   \                     ??mbedtls_ssl_parse_certificate_6: (+1)
   \       0xE6   0x2101             MOVS     R1,#+1
   \       0xE8   0x4648             MOV      R0,R9
   \       0xEA   0x....'....        BL       mbedtls_ssl_read_record
   \       0xEE   0x0004             MOVS     R4,R0
   \       0xF0   0xD00C             BEQ.N    ??mbedtls_ssl_parse_certificate_7
   5477              {
   5478                  /* mbedtls_ssl_read_record may have sent an alert already. We
   5479                     let it decide whether to alert. */
   5480                  MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
   \       0xF2   0x9401             STR      R4,[SP, #+4]
   \       0xF4   0x....'....        LDR.W    R0,??DataTable48_3
   \       0xF8   0x9000             STR      R0,[SP, #+0]
   \       0xFA   0xF241 0x5368      MOVW     R3,#+5480
   \       0xFE   0x463A             MOV      R2,R7
   \      0x100   0x2101             MOVS     R1,#+1
   \      0x102   0x4648             MOV      R0,R9
   \      0x104   0x....'....        BL       mbedtls_debug_print_ret
   5481                  return( ret );
   \      0x108   0x4620             MOV      R0,R4
   \      0x10A   0xE273             B.N      ??mbedtls_ssl_parse_certificate_3
   5482              }
   5483          
   5484              ssl->state++;
   \                     ??mbedtls_ssl_parse_certificate_7: (+1)
   \      0x10C   0xF8D9 0x0004      LDR      R0,[R9, #+4]
   \      0x110   0x1C40             ADDS     R0,R0,#+1
   \      0x112   0xF8C9 0x0004      STR      R0,[R9, #+4]
   5485          
   5486          #if defined(MBEDTLS_SSL_SRV_C)
   5487          #if defined(MBEDTLS_SSL_PROTO_SSL3)
   5488              /*
   5489               * Check if the client sent an empty certificate
   5490               */
   5491              if( ssl->conf->endpoint  == MBEDTLS_SSL_IS_SERVER &&
   5492                  ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 )
   5493              {
   5494                  if( ssl->in_msglen  == 2                        &&
   5495                      ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT            &&
   5496                      ssl->in_msg[0]  == MBEDTLS_SSL_ALERT_LEVEL_WARNING  &&
   5497                      ssl->in_msg[1]  == MBEDTLS_SSL_ALERT_MSG_NO_CERT )
   5498                  {
   5499                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "SSLv3 client has no certificate" ) );
   5500          
   5501                      /* The client was asked for a certificate but didn't send
   5502                         one. The client should know what's going on, so we
   5503                         don't send an alert. */
   5504                      ssl->session_negotiate->verify_result = MBEDTLS_X509_BADCERT_MISSING;
   5505                      if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL )
   5506                          return( 0 );
   5507                      else
   5508                          return( MBEDTLS_ERR_SSL_NO_CLIENT_CERTIFICATE );
   5509                  }
   5510              }
   5511          #endif /* MBEDTLS_SSL_PROTO_SSL3 */
   5512          
   5513          #if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
   5514              defined(MBEDTLS_SSL_PROTO_TLS1_2)
   5515              if( ssl->conf->endpoint  == MBEDTLS_SSL_IS_SERVER &&
   5516                  ssl->minor_ver != MBEDTLS_SSL_MINOR_VERSION_0 )
   \      0x116   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \      0x11A   0xF890 0x00CC      LDRB     R0,[R0, #+204]
   \      0x11E   0x07C0             LSLS     R0,R0,#+31
   \      0x120   0xD535             BPL.N    ??mbedtls_ssl_parse_certificate_8
   \      0x122   0xF8D9 0x0014      LDR      R0,[R9, #+20]
   \      0x126   0x2800             CMP      R0,#+0
   \      0x128   0xD031             BEQ.N    ??mbedtls_ssl_parse_certificate_8
   5517              {
   5518                  if( ssl->in_hslen   == 3 + mbedtls_ssl_hs_hdr_len( ssl ) &&
   5519                      ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE    &&
   5520                      ssl->in_msg[0]  == MBEDTLS_SSL_HS_CERTIFICATE   &&
   5521                      memcmp( ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl ), "\0\0\0", 3 ) == 0 )
   \      0x12A   0x4648             MOV      R0,R9
   \      0x12C   0x....'....        BL       mbedtls_ssl_hs_hdr_len
   \      0x130   0xF8D9 0x10A0      LDR      R1,[R9, #+160]
   \      0x134   0x1CC0             ADDS     R0,R0,#+3
   \      0x136   0x4281             CMP      R1,R0
   \      0x138   0xD129             BNE.N    ??mbedtls_ssl_parse_certificate_8
   \      0x13A   0xF8D9 0x0078      LDR      R0,[R9, #+120]
   \      0x13E   0x2816             CMP      R0,#+22
   \      0x140   0xD125             BNE.N    ??mbedtls_ssl_parse_certificate_8
   \      0x142   0xF8D9 0x0070      LDR      R0,[R9, #+112]
   \      0x146   0x7800             LDRB     R0,[R0, #+0]
   \      0x148   0x280B             CMP      R0,#+11
   \      0x14A   0xD120             BNE.N    ??mbedtls_ssl_parse_certificate_8
   \      0x14C   0x4648             MOV      R0,R9
   \      0x14E   0x....'....        BL       mbedtls_ssl_hs_hdr_len
   \      0x152   0x2203             MOVS     R2,#+3
   \      0x154   0xA178             ADR.N    R1,??mbedtls_ssl_parse_certificate_0  ;; 0x00, 0x00, 0x00, 0x00
   \      0x156   0xF8D9 0x3070      LDR      R3,[R9, #+112]
   \      0x15A   0x4418             ADD      R0,R3,R0
   \      0x15C   0x....'....        BL       memcmp
   \      0x160   0x2800             CMP      R0,#+0
   \      0x162   0xD114             BNE.N    ??mbedtls_ssl_parse_certificate_8
   5522                  {
   5523                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "TLSv1 client has no certificate" ) );
   \      0x164   0x....'....        LDR.W    R0,??DataTable49_1
   \      0x168   0x9000             STR      R0,[SP, #+0]
   \      0x16A   0xF241 0x5393      MOVW     R3,#+5523
   \      0x16E   0x463A             MOV      R2,R7
   \      0x170   0x2101             MOVS     R1,#+1
   \      0x172   0x4648             MOV      R0,R9
   \      0x174   0x....'....        BL       mbedtls_debug_print_msg
   5524          
   5525                      /* The client was asked for a certificate but didn't send
   5526                         one. The client should know what's going on, so we
   5527                         don't send an alert. */
   5528                      ssl->session_negotiate->verify_result = MBEDTLS_X509_BADCERT_MISSING;
   \      0x178   0x2040             MOVS     R0,#+64
   \      0x17A   0xF8D9 0x1038      LDR      R1,[R9, #+56]
   \      0x17E   0x6608             STR      R0,[R1, #+96]
   5529                      if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL )
   \      0x180   0x2D01             CMP      R5,#+1
   \      0x182   0xD101             BNE.N    ??mbedtls_ssl_parse_certificate_9
   5530                          return( 0 );
   \      0x184   0x2000             MOVS     R0,#+0
   \      0x186   0xE235             B.N      ??mbedtls_ssl_parse_certificate_3
   5531                      else
   5532                          return( MBEDTLS_ERR_SSL_NO_CLIENT_CERTIFICATE );
   \                     ??mbedtls_ssl_parse_certificate_9: (+1)
   \      0x188   0x....'....        LDR.W    R0,??DataTable49_2  ;; 0xffff8b80
   \      0x18C   0xE232             B.N      ??mbedtls_ssl_parse_certificate_3
   5533                  }
   5534              }
   5535          #endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 || \
   5536                    MBEDTLS_SSL_PROTO_TLS1_2 */
   5537          #endif /* MBEDTLS_SSL_SRV_C */
   5538          
   5539              if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
   \                     ??mbedtls_ssl_parse_certificate_8: (+1)
   \      0x18E   0xF8D9 0x0078      LDR      R0,[R9, #+120]
   \      0x192   0x2816             CMP      R0,#+22
   \      0x194   0xD011             BEQ.N    ??mbedtls_ssl_parse_certificate_10
   5540              {
   5541                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
   \      0x196   0x....'....        LDR.W    R0,??DataTable49_3
   \      0x19A   0x9000             STR      R0,[SP, #+0]
   \      0x19C   0xF241 0x53A5      MOVW     R3,#+5541
   \      0x1A0   0x463A             MOV      R2,R7
   \      0x1A2   0x2101             MOVS     R1,#+1
   \      0x1A4   0x4648             MOV      R0,R9
   \      0x1A6   0x....'....        BL       mbedtls_debug_print_msg
   5542                  mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   5543                                                  MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
   \      0x1AA   0x220A             MOVS     R2,#+10
   \      0x1AC   0x2102             MOVS     R1,#+2
   \      0x1AE   0x4648             MOV      R0,R9
   \      0x1B0   0x....'....        BL       mbedtls_ssl_send_alert_message
   5544                  return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
   \      0x1B4   0x....'....        LDR.W    R0,??DataTable49_4  ;; 0xffff8900
   \      0x1B8   0xE21C             B.N      ??mbedtls_ssl_parse_certificate_3
   5545              }
   5546          
   5547              if( ssl->in_msg[0] != MBEDTLS_SSL_HS_CERTIFICATE ||
   5548                  ssl->in_hslen < mbedtls_ssl_hs_hdr_len( ssl ) + 3 + 3 )
   \                     ??mbedtls_ssl_parse_certificate_10: (+1)
   \      0x1BA   0xF8D9 0x0070      LDR      R0,[R9, #+112]
   \      0x1BE   0x7800             LDRB     R0,[R0, #+0]
   \      0x1C0   0x280B             CMP      R0,#+11
   \      0x1C2   0xD107             BNE.N    ??mbedtls_ssl_parse_certificate_11
   \      0x1C4   0x4648             MOV      R0,R9
   \      0x1C6   0x....'....        BL       mbedtls_ssl_hs_hdr_len
   \      0x1CA   0xF8D9 0x10A0      LDR      R1,[R9, #+160]
   \      0x1CE   0x1D80             ADDS     R0,R0,#+6
   \      0x1D0   0x4281             CMP      R1,R0
   \      0x1D2   0xD211             BCS.N    ??mbedtls_ssl_parse_certificate_12
   5549              {
   5550                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
   \                     ??mbedtls_ssl_parse_certificate_11: (+1)
   \      0x1D4   0x....'....        LDR.W    R0,??DataTable49_3
   \      0x1D8   0x9000             STR      R0,[SP, #+0]
   \      0x1DA   0xF241 0x53AE      MOVW     R3,#+5550
   \      0x1DE   0x463A             MOV      R2,R7
   \      0x1E0   0x2101             MOVS     R1,#+1
   \      0x1E2   0x4648             MOV      R0,R9
   \      0x1E4   0x....'....        BL       mbedtls_debug_print_msg
   5551                  mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   5552                                                  MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
   \      0x1E8   0x2232             MOVS     R2,#+50
   \      0x1EA   0x2102             MOVS     R1,#+2
   \      0x1EC   0x4648             MOV      R0,R9
   \      0x1EE   0x....'....        BL       mbedtls_ssl_send_alert_message
   5553                  return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
   \      0x1F2   0x....'....        LDR.W    R0,??DataTable49_5  ;; 0xffff8600
   \      0x1F6   0xE1FD             B.N      ??mbedtls_ssl_parse_certificate_3
   5554              }
   5555          
   5556              i = mbedtls_ssl_hs_hdr_len( ssl );
   \                     ??mbedtls_ssl_parse_certificate_12: (+1)
   \      0x1F8   0x4648             MOV      R0,R9
   \      0x1FA   0x....'....        BL       mbedtls_ssl_hs_hdr_len
   \      0x1FE   0x4682             MOV      R10,R0
   5557          
   5558              /*
   5559               * Same message structure as in mbedtls_ssl_write_certificate()
   5560               */
   5561              n = ( ssl->in_msg[i+1] << 8 ) | ssl->in_msg[i+2];
   \      0x200   0xF8D9 0x0070      LDR      R0,[R9, #+112]
   \      0x204   0x4450             ADD      R0,R0,R10
   \      0x206   0x7840             LDRB     R0,[R0, #+1]
   \      0x208   0xF8D9 0x1070      LDR      R1,[R9, #+112]
   \      0x20C   0x4451             ADD      R1,R1,R10
   \      0x20E   0xF891 0x8002      LDRB     R8,[R1, #+2]
   \      0x212   0xEA48 0x2800      ORR      R8,R8,R0, LSL #+8
   5562          
   5563              if( ssl->in_msg[i] != 0 ||
   5564                  ssl->in_hslen != n + 3 + mbedtls_ssl_hs_hdr_len( ssl ) )
   \      0x216   0xF8D9 0x0070      LDR      R0,[R9, #+112]
   \      0x21A   0xF810 0x000A      LDRB     R0,[R0, R10]
   \      0x21E   0x2800             CMP      R0,#+0
   \      0x220   0xD109             BNE.N    ??mbedtls_ssl_parse_certificate_13
   \      0x222   0x4648             MOV      R0,R9
   \      0x224   0x....'....        BL       mbedtls_ssl_hs_hdr_len
   \      0x228   0xF8D9 0x10A0      LDR      R1,[R9, #+160]
   \      0x22C   0x4480             ADD      R8,R0,R8
   \      0x22E   0xF108 0x0803      ADD      R8,R8,#+3
   \      0x232   0x4541             CMP      R1,R8
   \      0x234   0xD011             BEQ.N    ??mbedtls_ssl_parse_certificate_14
   5565              {
   5566                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
   \                     ??mbedtls_ssl_parse_certificate_13: (+1)
   \      0x236   0x....'....        LDR.W    R0,??DataTable49_3
   \      0x23A   0x9000             STR      R0,[SP, #+0]
   \      0x23C   0xF241 0x53BE      MOVW     R3,#+5566
   \      0x240   0x463A             MOV      R2,R7
   \      0x242   0x2101             MOVS     R1,#+1
   \      0x244   0x4648             MOV      R0,R9
   \      0x246   0x....'....        BL       mbedtls_debug_print_msg
   5567                  mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   5568                                                  MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
   \      0x24A   0x2232             MOVS     R2,#+50
   \      0x24C   0x2102             MOVS     R1,#+2
   \      0x24E   0x4648             MOV      R0,R9
   \      0x250   0x....'....        BL       mbedtls_ssl_send_alert_message
   5569                  return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
   \      0x254   0x....'....        LDR.W    R0,??DataTable49_5  ;; 0xffff8600
   \      0x258   0xE1CC             B.N      ??mbedtls_ssl_parse_certificate_3
   5570              }
   5571          
   5572              /* In case we tried to reuse a session but it failed */
   5573              if( ssl->session_negotiate->peer_cert != NULL )
   \                     ??mbedtls_ssl_parse_certificate_14: (+1)
   \      0x25A   0xF8D9 0x0038      LDR      R0,[R9, #+56]
   \      0x25E   0x6DC0             LDR      R0,[R0, #+92]
   \      0x260   0x2800             CMP      R0,#+0
   \      0x262   0xD009             BEQ.N    ??mbedtls_ssl_parse_certificate_15
   5574              {
   5575                  mbedtls_x509_crt_free( ssl->session_negotiate->peer_cert );
   \      0x264   0xF8D9 0x0038      LDR      R0,[R9, #+56]
   \      0x268   0x6DC0             LDR      R0,[R0, #+92]
   \      0x26A   0x....'....        BL       mbedtls_x509_crt_free
   5576                  mbedtls_free( ssl->session_negotiate->peer_cert );
   \      0x26E   0xF8D9 0x0038      LDR      R0,[R9, #+56]
   \      0x272   0x6DC0             LDR      R0,[R0, #+92]
   \      0x274   0x....'....        BL       mbedtls_free
   5577              }
   5578          
   5579              if( ( ssl->session_negotiate->peer_cert = mbedtls_calloc( 1,
   5580                              sizeof( mbedtls_x509_crt ) ) ) == NULL )
   \                     ??mbedtls_ssl_parse_certificate_15: (+1)
   \      0x278   0xF44F 0x719A      MOV      R1,#+308
   \      0x27C   0x2001             MOVS     R0,#+1
   \      0x27E   0x....'....        BL       mbedtls_calloc
   \      0x282   0xF8D9 0x1038      LDR      R1,[R9, #+56]
   \      0x286   0x65C8             STR      R0,[R1, #+92]
   \      0x288   0xF8D9 0x0038      LDR      R0,[R9, #+56]
   \      0x28C   0x6DC0             LDR      R0,[R0, #+92]
   \      0x28E   0x2800             CMP      R0,#+0
   \      0x290   0xD114             BNE.N    ??mbedtls_ssl_parse_certificate_16
   5581              {
   5582                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed",
   5583                                 sizeof( mbedtls_x509_crt ) ) );
   \      0x292   0xF44F 0x709A      MOV      R0,#+308
   \      0x296   0x9001             STR      R0,[SP, #+4]
   \      0x298   0x....'....        LDR.W    R0,??DataTable49_6
   \      0x29C   0x9000             STR      R0,[SP, #+0]
   \      0x29E   0xF241 0x53CF      MOVW     R3,#+5583
   \      0x2A2   0x463A             MOV      R2,R7
   \      0x2A4   0x2101             MOVS     R1,#+1
   \      0x2A6   0x4648             MOV      R0,R9
   \      0x2A8   0x....'....        BL       mbedtls_debug_print_msg
   5584                  mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   5585                                                  MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
   \      0x2AC   0x2250             MOVS     R2,#+80
   \      0x2AE   0x2102             MOVS     R1,#+2
   \      0x2B0   0x4648             MOV      R0,R9
   \      0x2B2   0x....'....        BL       mbedtls_ssl_send_alert_message
   5586                  return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
   \      0x2B6   0x....'....        LDR.W    R0,??DataTable49_7  ;; 0xffff8100
   \      0x2BA   0xE19B             B.N      ??mbedtls_ssl_parse_certificate_3
   5587              }
   5588          
   5589              mbedtls_x509_crt_init( ssl->session_negotiate->peer_cert );
   \                     ??mbedtls_ssl_parse_certificate_16: (+1)
   \      0x2BC   0xF8D9 0x0038      LDR      R0,[R9, #+56]
   \      0x2C0   0x6DC0             LDR      R0,[R0, #+92]
   \      0x2C2   0x....'....        BL       mbedtls_x509_crt_init
   5590          
   5591              i += 3;
   \      0x2C6   0xF10A 0x0A03      ADD      R10,R10,#+3
   \      0x2CA   0xE038             B.N      ??mbedtls_ssl_parse_certificate_17
   5592          
   5593              while( i < ssl->in_hslen )
   5594              {
   5595                  if ( i + 3 > ssl->in_hslen ) {
   5596                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
   5597                      mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   5598                                                     MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
   5599                      return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
   5600                  }
   5601                  if( ssl->in_msg[i] != 0 )
   \                     ??mbedtls_ssl_parse_certificate_18: (+1)
   \      0x2CC   0xF8D9 0x0070      LDR      R0,[R9, #+112]
   \      0x2D0   0xF810 0x000A      LDRB     R0,[R0, R10]
   \      0x2D4   0x2800             CMP      R0,#+0
   \      0x2D6   0xD14D             BNE.N    ??mbedtls_ssl_parse_certificate_19
   5602                  {
   5603                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
   5604                      mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   5605                                                      MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
   5606                      return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
   5607                  }
   5608          
   5609                  n = ( (unsigned int) ssl->in_msg[i + 1] << 8 )
   5610                      | (unsigned int) ssl->in_msg[i + 2];
   \      0x2D8   0xF8D9 0x0070      LDR      R0,[R9, #+112]
   \      0x2DC   0x4450             ADD      R0,R0,R10
   \      0x2DE   0x7840             LDRB     R0,[R0, #+1]
   \      0x2E0   0xF8D9 0x1070      LDR      R1,[R9, #+112]
   \      0x2E4   0x4451             ADD      R1,R1,R10
   \      0x2E6   0xF891 0x8002      LDRB     R8,[R1, #+2]
   \      0x2EA   0xEA48 0x2800      ORR      R8,R8,R0, LSL #+8
   5611                  i += 3;
   \      0x2EE   0xF10A 0x0A03      ADD      R10,R10,#+3
   5612          
   5613                  if( n < 128 || i + n > ssl->in_hslen )
   \      0x2F2   0xF1B8 0x0F80      CMP      R8,#+128
   \      0x2F6   0xF0C0 0x81B2      BCC.W    ??mbedtls_ssl_parse_certificate_20
   \      0x2FA   0xF8D9 0x00A0      LDR      R0,[R9, #+160]
   \      0x2FE   0xEB08 0x010A      ADD      R1,R8,R10
   \      0x302   0x4288             CMP      R0,R1
   \      0x304   0xF0C0 0x81AB      BCC.W    ??mbedtls_ssl_parse_certificate_20
   5614                  {
   5615                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
   5616                      mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   5617                                                      MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
   5618                      return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
   5619                  }
   5620          
   5621                  ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
   5622                                            ssl->in_msg + i, n );
   \      0x308   0x4642             MOV      R2,R8
   \      0x30A   0xF8D9 0x0070      LDR      R0,[R9, #+112]
   \      0x30E   0xEB00 0x010A      ADD      R1,R0,R10
   \      0x312   0xF8D9 0x0038      LDR      R0,[R9, #+56]
   \      0x316   0x6DC0             LDR      R0,[R0, #+92]
   \      0x318   0x....'....        BL       mbedtls_x509_crt_parse_der
   \      0x31C   0x0004             MOVS     R4,R0
   5623                  switch( ret )
   \      0x31E   0xD00D             BEQ.N    ??mbedtls_ssl_parse_certificate_21
   \      0x320   0x....'....        LDR.W    R1,??DataTable50  ;; 0xffffd780
   \      0x324   0x1A40             SUBS     R0,R0,R1
   \      0x326   0xD037             BEQ.N    ??mbedtls_ssl_parse_certificate_22
   \      0x328   0xF240 0x2152      MOVW     R1,#+594
   \      0x32C   0x1A40             SUBS     R0,R0,R1
   \      0x32E   0xD005             BEQ.N    ??mbedtls_ssl_parse_certificate_21
   \      0x330   0x38AE             SUBS     R0,R0,#+174
   \      0x332   0xF000 0x81A6      BEQ.W    ??mbedtls_ssl_parse_certificate_23
   \      0x336   0xE1A6             B.N      ??mbedtls_ssl_parse_certificate_24
   \                     ??mbedtls_ssl_parse_certificate_0:
   \      0x338   0x00 0x00          DC8      0x00, 0x00, 0x00, 0x00
   \              0x00 0x00    
   5624                  {
   5625                  case 0: /*ok*/
   5626                  case MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG + MBEDTLS_ERR_OID_NOT_FOUND:
   5627                      /* Ignore certificate with an unknown algorithm: maybe a
   5628                         prior certificate was already trusted. */
   5629                      break;
   5630          
   5631                  case MBEDTLS_ERR_X509_ALLOC_FAILED:
   5632                      alert = MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR;
   5633                      goto crt_parse_der_failed;
   5634          
   5635                  case MBEDTLS_ERR_X509_UNKNOWN_VERSION:
   5636                      alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
   5637                      goto crt_parse_der_failed;
   5638          
   5639                  default:
   5640                      alert = MBEDTLS_SSL_ALERT_MSG_BAD_CERT;
   5641                  crt_parse_der_failed:
   5642                      mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL, alert );
   5643                      MBEDTLS_SSL_DEBUG_RET( 1, " mbedtls_x509_crt_parse_der", ret );
   5644                      return( ret );
   5645                  }
   5646          
   5647                  i += n;
   \                     ??mbedtls_ssl_parse_certificate_21: (+1)
   \      0x33C   0x44C2             ADD      R10,R8,R10
   \                     ??mbedtls_ssl_parse_certificate_17: (+1)
   \      0x33E   0xF8D9 0x00A0      LDR      R0,[R9, #+160]
   \      0x342   0x4582             CMP      R10,R0
   \      0x344   0xF080 0x8159      BCS.W    ??mbedtls_ssl_parse_certificate_25
   \      0x348   0xF10A 0x0103      ADD      R1,R10,#+3
   \      0x34C   0x4288             CMP      R0,R1
   \      0x34E   0xD2BD             BCS.N    ??mbedtls_ssl_parse_certificate_18
   \      0x350   0x....'....        LDR.W    R0,??DataTable49_3
   \      0x354   0x9000             STR      R0,[SP, #+0]
   \      0x356   0xF241 0x53DC      MOVW     R3,#+5596
   \      0x35A   0x463A             MOV      R2,R7
   \      0x35C   0x2101             MOVS     R1,#+1
   \      0x35E   0x4648             MOV      R0,R9
   \      0x360   0x....'....        BL       mbedtls_debug_print_msg
   \      0x364   0x2232             MOVS     R2,#+50
   \      0x366   0x2102             MOVS     R1,#+2
   \      0x368   0x4648             MOV      R0,R9
   \      0x36A   0x....'....        BL       mbedtls_ssl_send_alert_message
   \      0x36E   0x....'....        LDR.W    R0,??DataTable49_5  ;; 0xffff8600
   \      0x372   0xE13F             B.N      ??mbedtls_ssl_parse_certificate_3
   \                     ??mbedtls_ssl_parse_certificate_19: (+1)
   \      0x374   0x....'....        LDR.W    R0,??DataTable49_3
   \      0x378   0x9000             STR      R0,[SP, #+0]
   \      0x37A   0xF241 0x53E3      MOVW     R3,#+5603
   \      0x37E   0x463A             MOV      R2,R7
   \      0x380   0x2101             MOVS     R1,#+1
   \      0x382   0x4648             MOV      R0,R9
   \      0x384   0x....'....        BL       mbedtls_debug_print_msg
   \      0x388   0x2232             MOVS     R2,#+50
   \      0x38A   0x2102             MOVS     R1,#+2
   \      0x38C   0x4648             MOV      R0,R9
   \      0x38E   0x....'....        BL       mbedtls_ssl_send_alert_message
   \      0x392   0x....'....        LDR.W    R0,??DataTable49_5  ;; 0xffff8600
   \      0x396   0xE12D             B.N      ??mbedtls_ssl_parse_certificate_3
   \                     ??mbedtls_ssl_parse_certificate_22: (+1)
   \      0x398   0x2250             MOVS     R2,#+80
   \      0x39A   0xE175             B.N      ??mbedtls_ssl_parse_certificate_26
   5648              }
   5649          
   5650              MBEDTLS_SSL_DEBUG_CRT( 3, "peer certificate", ssl->session_negotiate->peer_cert );
   5651          
   5652              /*
   5653               * On client, make sure the server cert doesn't change during renego to
   5654               * avoid "triple handshake" attack: https://secure-resumption.com/
   5655               */
   5656          #if defined(MBEDTLS_SSL_RENEGOTIATION) && defined(MBEDTLS_SSL_CLI_C)
   5657              if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT &&
   5658                  ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS )
   5659              {
   5660                  if( ssl->session->peer_cert == NULL )
   5661                  {
   5662                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "new server cert during renegotiation" ) );
   5663                      mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   5664                                                      MBEDTLS_SSL_ALERT_MSG_ACCESS_DENIED );
   5665                      return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
   5666                  }
   5667          
   5668                  if( ssl->session->peer_cert->raw.len !=
   5669                      ssl->session_negotiate->peer_cert->raw.len ||
   5670                      memcmp( ssl->session->peer_cert->raw.p,
   5671                              ssl->session_negotiate->peer_cert->raw.p,
   5672                              ssl->session->peer_cert->raw.len ) != 0 )
   \                     ??mbedtls_ssl_parse_certificate_27: (+1)
   \      0x39C   0xF8D9 0x0034      LDR      R0,[R9, #+52]
   \      0x3A0   0x6DC0             LDR      R0,[R0, #+92]
   \      0x3A2   0x6840             LDR      R0,[R0, #+4]
   \      0x3A4   0xF8D9 0x1038      LDR      R1,[R9, #+56]
   \      0x3A8   0x6DC9             LDR      R1,[R1, #+92]
   \      0x3AA   0x6849             LDR      R1,[R1, #+4]
   \      0x3AC   0x4288             CMP      R0,R1
   \      0x3AE   0xD10F             BNE.N    ??mbedtls_ssl_parse_certificate_28
   \      0x3B0   0xF8D9 0x0034      LDR      R0,[R9, #+52]
   \      0x3B4   0x6DC0             LDR      R0,[R0, #+92]
   \      0x3B6   0x6842             LDR      R2,[R0, #+4]
   \      0x3B8   0xF8D9 0x0038      LDR      R0,[R9, #+56]
   \      0x3BC   0x6DC0             LDR      R0,[R0, #+92]
   \      0x3BE   0x6881             LDR      R1,[R0, #+8]
   \      0x3C0   0xF8D9 0x0034      LDR      R0,[R9, #+52]
   \      0x3C4   0x6DC0             LDR      R0,[R0, #+92]
   \      0x3C6   0x6880             LDR      R0,[R0, #+8]
   \      0x3C8   0x....'....        BL       memcmp
   \      0x3CC   0x2800             CMP      R0,#+0
   \      0x3CE   0xD011             BEQ.N    ??mbedtls_ssl_parse_certificate_29
   5673                  {
   5674                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "server cert changed during renegotiation" ) );
   \                     ??mbedtls_ssl_parse_certificate_28: (+1)
   \      0x3D0   0x....'....        LDR.W    R0,??DataTable50_1
   \      0x3D4   0x9000             STR      R0,[SP, #+0]
   \      0x3D6   0xF241 0x632A      MOVW     R3,#+5674
   \      0x3DA   0x463A             MOV      R2,R7
   \      0x3DC   0x2101             MOVS     R1,#+1
   \      0x3DE   0x4648             MOV      R0,R9
   \      0x3E0   0x....'....        BL       mbedtls_debug_print_msg
   5675                      mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   5676                                                      MBEDTLS_SSL_ALERT_MSG_ACCESS_DENIED );
   \      0x3E4   0x2231             MOVS     R2,#+49
   \      0x3E6   0x2102             MOVS     R1,#+2
   \      0x3E8   0x4648             MOV      R0,R9
   \      0x3EA   0x....'....        BL       mbedtls_ssl_send_alert_message
   5677                      return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
   \      0x3EE   0x....'....        LDR.W    R0,??DataTable49_5  ;; 0xffff8600
   \      0x3F2   0xE0FF             B.N      ??mbedtls_ssl_parse_certificate_3
   5678                  }
   5679              }
   5680          #endif /* MBEDTLS_SSL_RENEGOTIATION && MBEDTLS_SSL_CLI_C */
   5681          
   5682              if( authmode != MBEDTLS_SSL_VERIFY_NONE )
   \                     ??mbedtls_ssl_parse_certificate_29: (+1)
   \      0x3F4   0x2D00             CMP      R5,#+0
   \      0x3F6   0xF000 0x80F2      BEQ.W    ??mbedtls_ssl_parse_certificate_30
   5683              {
   5684                  mbedtls_x509_crt *ca_chain;
   5685                  mbedtls_x509_crl *ca_crl;
   5686          
   5687          #if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
   5688                  if( ssl->handshake->sni_ca_chain != NULL )
   \      0x3FA   0xF8D9 0x003C      LDR      R0,[R9, #+60]
   \      0x3FE   0xF8D0 0x01CC      LDR      R0,[R0, #+460]
   \      0x402   0x2800             CMP      R0,#+0
   \      0x404   0xD006             BEQ.N    ??mbedtls_ssl_parse_certificate_31
   5689                  {
   5690                      ca_chain = ssl->handshake->sni_ca_chain;
   \      0x406   0xF8D9 0x003C      LDR      R0,[R9, #+60]
   \      0x40A   0xF8D0 0x81CC      LDR      R8,[R0, #+460]
   5691                      ca_crl   = ssl->handshake->sni_ca_crl;
   \      0x40E   0xF8D0 0x21D0      LDR      R2,[R0, #+464]
   \      0x412   0xE004             B.N      ??mbedtls_ssl_parse_certificate_32
   5692                  }
   5693                  else
   5694          #endif
   5695                  {
   5696                      ca_chain = ssl->conf->ca_chain;
   \                     ??mbedtls_ssl_parse_certificate_31: (+1)
   \      0x414   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \      0x418   0xF8D0 0x806C      LDR      R8,[R0, #+108]
   5697                      ca_crl   = ssl->conf->ca_crl;
   \      0x41C   0x6F02             LDR      R2,[R0, #+112]
   5698                  }
   5699          
   5700                  /*
   5701                   * Main check: verify certificate
   5702                   */
   5703                  ret = mbedtls_x509_crt_verify_with_profile(
   5704                                          ssl->session_negotiate->peer_cert,
   5705                                          ca_chain, ca_crl,
   5706                                          ssl->conf->cert_profile,
   5707                                          ssl->hostname,
   5708                                         &ssl->session_negotiate->verify_result,
   5709                                          ssl->conf->f_vrfy, ssl->conf->p_vrfy );
   \                     ??mbedtls_ssl_parse_certificate_32: (+1)
   \      0x41E   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \      0x422   0x6B80             LDR      R0,[R0, #+56]
   \      0x424   0x9003             STR      R0,[SP, #+12]
   \      0x426   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \      0x42A   0x6B40             LDR      R0,[R0, #+52]
   \      0x42C   0x9002             STR      R0,[SP, #+8]
   \      0x42E   0xF8D9 0x0038      LDR      R0,[R9, #+56]
   \      0x432   0x3060             ADDS     R0,R0,#+96
   \      0x434   0x9001             STR      R0,[SP, #+4]
   \      0x436   0xF8D9 0x00E4      LDR      R0,[R9, #+228]
   \      0x43A   0x9000             STR      R0,[SP, #+0]
   \      0x43C   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \      0x440   0x6E43             LDR      R3,[R0, #+100]
   \      0x442   0x4641             MOV      R1,R8
   \      0x444   0xF8D9 0x0038      LDR      R0,[R9, #+56]
   \      0x448   0x6DC0             LDR      R0,[R0, #+92]
   \      0x44A   0x....'....        BL       mbedtls_x509_crt_verify_with_profile
   \      0x44E   0x0004             MOVS     R4,R0
   5710          
   5711                  if( ret != 0 )
   \      0x450   0xD00A             BEQ.N    ??mbedtls_ssl_parse_certificate_33
   5712                  {
   5713                      MBEDTLS_SSL_DEBUG_RET( 1, "x509_verify_cert", ret );
   \      0x452   0x9401             STR      R4,[SP, #+4]
   \      0x454   0x....'....        LDR.W    R0,??DataTable50_2
   \      0x458   0x9000             STR      R0,[SP, #+0]
   \      0x45A   0xF241 0x6351      MOVW     R3,#+5713
   \      0x45E   0x463A             MOV      R2,R7
   \      0x460   0x2101             MOVS     R1,#+1
   \      0x462   0x4648             MOV      R0,R9
   \      0x464   0x....'....        BL       mbedtls_debug_print_ret
   5714                  }
   5715          
   5716                  /*
   5717                   * Secondary checks: always done, but change 'ret' only if it was 0
   5718                   */
   5719          
   5720          #if defined(MBEDTLS_ECP_C)
   5721                  {
   5722                      const mbedtls_pk_context *pk = &ssl->session_negotiate->peer_cert->pk;
   \                     ??mbedtls_ssl_parse_certificate_33: (+1)
   \      0x468   0xF8D9 0x0038      LDR      R0,[R9, #+56]
   \      0x46C   0x6DC0             LDR      R0,[R0, #+92]
   \      0x46E   0xF100 0x0ABC      ADD      R10,R0,#+188
   5723          
   5724                      /* If certificate uses an EC key, make sure the curve is OK */
   5725                      if( mbedtls_pk_can_do( pk, MBEDTLS_PK_ECKEY ) &&
   5726                          mbedtls_ssl_check_curve( ssl, mbedtls_pk_ec( *pk )->grp.id ) != 0 )
   \      0x472   0x2102             MOVS     R1,#+2
   \      0x474   0x4650             MOV      R0,R10
   \      0x476   0x....'....        BL       mbedtls_pk_can_do
   \      0x47A   0x2800             CMP      R0,#+0
   \      0x47C   0xD01F             BEQ.N    ??mbedtls_ssl_parse_certificate_34
   \      0x47E   0xE9DA 0x0100      LDRD     R0,R1,[R10, #+0]
   \      0x482   0x....'....        BL       mbedtls_pk_ec
   \      0x486   0x7801             LDRB     R1,[R0, #+0]
   \      0x488   0x4648             MOV      R0,R9
   \      0x48A   0x....'....        BL       mbedtls_ssl_check_curve
   \      0x48E   0x2800             CMP      R0,#+0
   \      0x490   0xD015             BEQ.N    ??mbedtls_ssl_parse_certificate_34
   5727                      {
   5728                          ssl->session_negotiate->verify_result |= MBEDTLS_X509_BADCERT_BAD_KEY;
   \      0x492   0xF8D9 0x0038      LDR      R0,[R9, #+56]
   \      0x496   0x6E00             LDR      R0,[R0, #+96]
   \      0x498   0xF440 0x3080      ORR      R0,R0,#0x10000
   \      0x49C   0xF8D9 0x1038      LDR      R1,[R9, #+56]
   \      0x4A0   0x6608             STR      R0,[R1, #+96]
   5729          
   5730                          MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate (EC key curve)" ) );
   \      0x4A2   0x....'....        LDR.W    R0,??DataTable51
   \      0x4A6   0x9000             STR      R0,[SP, #+0]
   \      0x4A8   0xF241 0x6362      MOVW     R3,#+5730
   \      0x4AC   0x463A             MOV      R2,R7
   \      0x4AE   0x2101             MOVS     R1,#+1
   \      0x4B0   0x4648             MOV      R0,R9
   \      0x4B2   0x....'....        BL       mbedtls_debug_print_msg
   5731                          if( ret == 0 )
   \      0x4B6   0x2C00             CMP      R4,#+0
   \      0x4B8   0xD101             BNE.N    ??mbedtls_ssl_parse_certificate_34
   5732                              ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
   \      0x4BA   0x....'....        LDR.W    R4,??DataTable49_5  ;; 0xffff8600
   5733                      }
   5734                  }
   5735          #endif /* MBEDTLS_ECP_C */
   5736          
   5737                  if( mbedtls_ssl_check_cert_usage( ssl->session_negotiate->peer_cert,
   5738                                           ciphersuite_info,
   5739                                           ! ssl->conf->endpoint,
   5740                                           &ssl->session_negotiate->verify_result ) != 0 )
   \                     ??mbedtls_ssl_parse_certificate_34: (+1)
   \      0x4BE   0xF8D9 0x0038      LDR      R0,[R9, #+56]
   \      0x4C2   0xF100 0x0360      ADD      R3,R0,#+96
   \      0x4C6   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \      0x4CA   0xF8D0 0x20CC      LDR      R2,[R0, #+204]
   \      0x4CE   0xF082 0x0201      EOR      R2,R2,#0x1
   \      0x4D2   0xF002 0x0201      AND      R2,R2,#0x1
   \      0x4D6   0x4631             MOV      R1,R6
   \      0x4D8   0xF8D9 0x0038      LDR      R0,[R9, #+56]
   \      0x4DC   0x6DC0             LDR      R0,[R0, #+92]
   \      0x4DE   0x....'....        BL       mbedtls_ssl_check_cert_usage
   \      0x4E2   0x2800             CMP      R0,#+0
   \      0x4E4   0xD00D             BEQ.N    ??mbedtls_ssl_parse_certificate_35
   5741                  {
   5742                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate (usage extensions)" ) );
   \      0x4E6   0x....'....        LDR.W    R0,??DataTable52
   \      0x4EA   0x9000             STR      R0,[SP, #+0]
   \      0x4EC   0xF241 0x636E      MOVW     R3,#+5742
   \      0x4F0   0x463A             MOV      R2,R7
   \      0x4F2   0x2101             MOVS     R1,#+1
   \      0x4F4   0x4648             MOV      R0,R9
   \      0x4F6   0x....'....        BL       mbedtls_debug_print_msg
   5743                      if( ret == 0 )
   \      0x4FA   0x2C00             CMP      R4,#+0
   \      0x4FC   0xD101             BNE.N    ??mbedtls_ssl_parse_certificate_35
   5744                          ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
   \      0x4FE   0x....'....        LDR.W    R4,??DataTable49_5  ;; 0xffff8600
   5745                  }
   5746          
   5747                  /* mbedtls_x509_crt_verify_with_profile is supposed to report a
   5748                   * verification failure through MBEDTLS_ERR_X509_CERT_VERIFY_FAILED,
   5749                   * with details encoded in the verification flags. All other kinds
   5750                   * of error codes, including those from the user provided f_vrfy
   5751                   * functions, are treated as fatal and lead to a failure of
   5752                   * ssl_parse_certificate even if verification was optional. */
   5753                  if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL &&
   5754                      ( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED ||
   5755                        ret == MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE ) )
   \                     ??mbedtls_ssl_parse_certificate_35: (+1)
   \      0x502   0x2D01             CMP      R5,#+1
   \      0x504   0xD106             BNE.N    ??mbedtls_ssl_parse_certificate_36
   \      0x506   0xF514 0x5F1C      CMN      R4,#+9984
   \      0x50A   0xD002             BEQ.N    ??mbedtls_ssl_parse_certificate_37
   \      0x50C   0xF514 0x4FF4      CMN      R4,#+31232
   \      0x510   0xD100             BNE.N    ??mbedtls_ssl_parse_certificate_36
   5756                  {
   5757                      ret = 0;
   \                     ??mbedtls_ssl_parse_certificate_37: (+1)
   \      0x512   0x2400             MOVS     R4,#+0
   5758                  }
   5759          
   5760                  if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
   \                     ??mbedtls_ssl_parse_certificate_36: (+1)
   \      0x514   0xF1B8 0x0F00      CMP      R8,#+0
   \      0x518   0xD10D             BNE.N    ??mbedtls_ssl_parse_certificate_38
   \      0x51A   0x2D02             CMP      R5,#+2
   \      0x51C   0xD10B             BNE.N    ??mbedtls_ssl_parse_certificate_38
   5761                  {
   5762                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no CA chain" ) );
   \      0x51E   0x....'....        LDR.W    R0,??DataTable52_1
   \      0x522   0x9000             STR      R0,[SP, #+0]
   \      0x524   0xF241 0x6382      MOVW     R3,#+5762
   \      0x528   0x463A             MOV      R2,R7
   \      0x52A   0x2101             MOVS     R1,#+1
   \      0x52C   0x4648             MOV      R0,R9
   \      0x52E   0x....'....        BL       mbedtls_debug_print_msg
   5763                      ret = MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED;
   \      0x532   0x....'....        LDR.W    R4,??DataTable52_2  ;; 0xffff8980
   5764                  }
   5765          
   5766                  if( ret != 0 )
   \                     ??mbedtls_ssl_parse_certificate_38: (+1)
   \      0x536   0x2C00             CMP      R4,#+0
   \      0x538   0xD033             BEQ.N    ??mbedtls_ssl_parse_certificate_39
   5767                  {
   5768                      /* The certificate may have been rejected for several reasons.
   5769                         Pick one and send the corresponding alert. Which alert to send
   5770                         may be a subject of debate in some cases. */
   5771                      if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_OTHER )
   \      0x53A   0xF8D9 0x0038      LDR      R0,[R9, #+56]
   \      0x53E   0x6E00             LDR      R0,[R0, #+96]
   \      0x540   0x05C0             LSLS     R0,R0,#+23
   \      0x542   0xD501             BPL.N    ??mbedtls_ssl_parse_certificate_40
   5772                          alert = MBEDTLS_SSL_ALERT_MSG_ACCESS_DENIED;
   \      0x544   0x2231             MOVS     R2,#+49
   \      0x546   0xE028             B.N      ??mbedtls_ssl_parse_certificate_41
   5773                      else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_CN_MISMATCH )
   \                     ??mbedtls_ssl_parse_certificate_40: (+1)
   \      0x548   0xF8D9 0x0038      LDR      R0,[R9, #+56]
   \      0x54C   0xF890 0x0060      LDRB     R0,[R0, #+96]
   \      0x550   0x0740             LSLS     R0,R0,#+29
   \      0x552   0xD501             BPL.N    ??mbedtls_ssl_parse_certificate_42
   5774                          alert = MBEDTLS_SSL_ALERT_MSG_BAD_CERT;
   \      0x554   0x222A             MOVS     R2,#+42
   \      0x556   0xE020             B.N      ??mbedtls_ssl_parse_certificate_41
   5775                      else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_KEY_USAGE )
   \                     ??mbedtls_ssl_parse_certificate_42: (+1)
   \      0x558   0xF8D9 0x0038      LDR      R0,[R9, #+56]
   \      0x55C   0x6E00             LDR      R0,[R0, #+96]
   \      0x55E   0xF410 0x3FDC      TST      R0,#0x1B800
   \      0x562   0xD001             BEQ.N    ??mbedtls_ssl_parse_certificate_43
   5776                          alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
   5777                      else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_EXT_KEY_USAGE )
   5778                          alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
   5779                      else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_NS_CERT_TYPE )
   5780                          alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
   5781                      else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_PK )
   5782                          alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
   5783                      else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_KEY )
   5784                          alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
   \      0x564   0x222B             MOVS     R2,#+43
   \      0x566   0xE018             B.N      ??mbedtls_ssl_parse_certificate_41
   5785                      else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_EXPIRED )
   \                     ??mbedtls_ssl_parse_certificate_43: (+1)
   \      0x568   0xF8D9 0x0038      LDR      R0,[R9, #+56]
   \      0x56C   0xF890 0x0060      LDRB     R0,[R0, #+96]
   \      0x570   0x07C0             LSLS     R0,R0,#+31
   \      0x572   0xD501             BPL.N    ??mbedtls_ssl_parse_certificate_44
   5786                          alert = MBEDTLS_SSL_ALERT_MSG_CERT_EXPIRED;
   \      0x574   0x222D             MOVS     R2,#+45
   \      0x576   0xE010             B.N      ??mbedtls_ssl_parse_certificate_41
   5787                      else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_REVOKED )
   \                     ??mbedtls_ssl_parse_certificate_44: (+1)
   \      0x578   0xF8D9 0x0038      LDR      R0,[R9, #+56]
   \      0x57C   0xF890 0x0060      LDRB     R0,[R0, #+96]
   \      0x580   0x0780             LSLS     R0,R0,#+30
   \      0x582   0xD501             BPL.N    ??mbedtls_ssl_parse_certificate_45
   5788                          alert = MBEDTLS_SSL_ALERT_MSG_CERT_REVOKED;
   \      0x584   0x222C             MOVS     R2,#+44
   \      0x586   0xE008             B.N      ??mbedtls_ssl_parse_certificate_41
   5789                      else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_NOT_TRUSTED )
   \                     ??mbedtls_ssl_parse_certificate_45: (+1)
   \      0x588   0xF8D9 0x0038      LDR      R0,[R9, #+56]
   \      0x58C   0xF890 0x0060      LDRB     R0,[R0, #+96]
   \      0x590   0x0700             LSLS     R0,R0,#+28
   \      0x592   0xD501             BPL.N    ??mbedtls_ssl_parse_certificate_46
   5790                          alert = MBEDTLS_SSL_ALERT_MSG_UNKNOWN_CA;
   \      0x594   0x2230             MOVS     R2,#+48
   \      0x596   0xE000             B.N      ??mbedtls_ssl_parse_certificate_41
   5791                      else
   5792                          alert = MBEDTLS_SSL_ALERT_MSG_CERT_UNKNOWN;
   \                     ??mbedtls_ssl_parse_certificate_46: (+1)
   \      0x598   0x222E             MOVS     R2,#+46
   5793                      mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   5794                                                      alert );
   \                     ??mbedtls_ssl_parse_certificate_41: (+1)
   \      0x59A   0x2102             MOVS     R1,#+2
   \      0x59C   0x4648             MOV      R0,R9
   \      0x59E   0x....'....        BL       mbedtls_ssl_send_alert_message
   5795                  }
   5796          
   5797          #if defined(MBEDTLS_DEBUG_C)
   5798                  if( ssl->session_negotiate->verify_result != 0 )
   \                     ??mbedtls_ssl_parse_certificate_39: (+1)
   \      0x5A2   0xF8D9 0x0038      LDR      R0,[R9, #+56]
   \      0x5A6   0x6E00             LDR      R0,[R0, #+96]
   \      0x5A8   0x2800             CMP      R0,#+0
   \      0x5AA   0xD00E             BEQ.N    ??mbedtls_ssl_parse_certificate_47
   5799                  {
   5800                      MBEDTLS_SSL_DEBUG_MSG( 3, ( "! Certificate verification flags %x",
   5801                                                  ssl->session_negotiate->verify_result ) );
   \      0x5AC   0xF8D9 0x0038      LDR      R0,[R9, #+56]
   \      0x5B0   0x6E00             LDR      R0,[R0, #+96]
   \      0x5B2   0x9001             STR      R0,[SP, #+4]
   \      0x5B4   0x....'....        LDR.W    R0,??DataTable52_3
   \      0x5B8   0x9000             STR      R0,[SP, #+0]
   \      0x5BA   0xF241 0x63A9      MOVW     R3,#+5801
   \      0x5BE   0x463A             MOV      R2,R7
   \      0x5C0   0x2103             MOVS     R1,#+3
   \      0x5C2   0x4648             MOV      R0,R9
   \      0x5C4   0x....'....        BL       mbedtls_debug_print_msg
   \      0x5C8   0xE009             B.N      ??mbedtls_ssl_parse_certificate_30
   5802                  }
   5803                  else
   5804                  {
   5805                      MBEDTLS_SSL_DEBUG_MSG( 3, ( "Certificate verification flags clear" ) );
   \                     ??mbedtls_ssl_parse_certificate_47: (+1)
   \      0x5CA   0x....'....        LDR.W    R0,??DataTable52_4
   \      0x5CE   0x9000             STR      R0,[SP, #+0]
   \      0x5D0   0xF241 0x63AD      MOVW     R3,#+5805
   \      0x5D4   0x463A             MOV      R2,R7
   \      0x5D6   0x2103             MOVS     R1,#+3
   \      0x5D8   0x4648             MOV      R0,R9
   \      0x5DA   0x....'....        BL       mbedtls_debug_print_msg
   5806                  }
   5807          #endif /* MBEDTLS_DEBUG_C */
   5808              }
   5809          
   5810              MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse certificate" ) );
   \                     ??mbedtls_ssl_parse_certificate_30: (+1)
   \      0x5DE   0x....'....        LDR.W    R0,??DataTable53
   \      0x5E2   0x9000             STR      R0,[SP, #+0]
   \      0x5E4   0xF241 0x63B2      MOVW     R3,#+5810
   \      0x5E8   0x463A             MOV      R2,R7
   \      0x5EA   0x2102             MOVS     R1,#+2
   \      0x5EC   0x4648             MOV      R0,R9
   \      0x5EE   0x....'....        BL       mbedtls_debug_print_msg
   5811          
   5812              return( ret );
   \      0x5F2   0x4620             MOV      R0,R4
   \                     ??mbedtls_ssl_parse_certificate_3: (+1)
   \      0x5F4   0xB004             ADD      SP,SP,#+16
   \      0x5F6   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
   \                     ??mbedtls_ssl_parse_certificate_25: (+1)
   \      0x5FA   0xF8D9 0x0038      LDR      R0,[R9, #+56]
   \      0x5FE   0x6DC0             LDR      R0,[R0, #+92]
   \      0x600   0x9001             STR      R0,[SP, #+4]
   \      0x602   0x....'....        LDR.W    R0,??DataTable55
   \      0x606   0x9000             STR      R0,[SP, #+0]
   \      0x608   0xF241 0x6312      MOVW     R3,#+5650
   \      0x60C   0x463A             MOV      R2,R7
   \      0x60E   0x2103             MOVS     R1,#+3
   \      0x610   0x4648             MOV      R0,R9
   \      0x612   0x....'....        BL       mbedtls_debug_print_crt
   \      0x616   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \      0x61A   0xF890 0x00CC      LDRB     R0,[R0, #+204]
   \      0x61E   0x07C0             LSLS     R0,R0,#+31
   \      0x620   0xF53F 0xAEE8      BMI.W    ??mbedtls_ssl_parse_certificate_29
   \      0x624   0xF8D9 0x0008      LDR      R0,[R9, #+8]
   \      0x628   0x2801             CMP      R0,#+1
   \      0x62A   0xF47F 0xAEE3      BNE.W    ??mbedtls_ssl_parse_certificate_29
   \      0x62E   0xF8D9 0x0034      LDR      R0,[R9, #+52]
   \      0x632   0x6DC0             LDR      R0,[R0, #+92]
   \      0x634   0x2800             CMP      R0,#+0
   \      0x636   0xF47F 0xAEB1      BNE.W    ??mbedtls_ssl_parse_certificate_27
   \      0x63A   0x....'....        LDR.W    R0,??DataTable55_1
   \      0x63E   0x9000             STR      R0,[SP, #+0]
   \      0x640   0xF241 0x631E      MOVW     R3,#+5662
   \      0x644   0x463A             MOV      R2,R7
   \      0x646   0x2101             MOVS     R1,#+1
   \      0x648   0x4648             MOV      R0,R9
   \      0x64A   0x....'....        BL       mbedtls_debug_print_msg
   \      0x64E   0x2231             MOVS     R2,#+49
   \      0x650   0x2102             MOVS     R1,#+2
   \      0x652   0x4648             MOV      R0,R9
   \      0x654   0x....'....        BL       mbedtls_ssl_send_alert_message
   \      0x658   0x....'....        LDR.W    R0,??DataTable49_5  ;; 0xffff8600
   \      0x65C   0xE7CA             B.N      ??mbedtls_ssl_parse_certificate_3
   \                     ??mbedtls_ssl_parse_certificate_20: (+1)
   \      0x65E   0x....'....        LDR.W    R0,??DataTable49_3
   \      0x662   0x9000             STR      R0,[SP, #+0]
   \      0x664   0xF241 0x53EF      MOVW     R3,#+5615
   \      0x668   0x463A             MOV      R2,R7
   \      0x66A   0x2101             MOVS     R1,#+1
   \      0x66C   0x4648             MOV      R0,R9
   \      0x66E   0x....'....        BL       mbedtls_debug_print_msg
   \      0x672   0x2232             MOVS     R2,#+50
   \      0x674   0x2102             MOVS     R1,#+2
   \      0x676   0x4648             MOV      R0,R9
   \      0x678   0x....'....        BL       mbedtls_ssl_send_alert_message
   \      0x67C   0x....'....        LDR.W    R0,??DataTable49_5  ;; 0xffff8600
   \      0x680   0xE7B8             B.N      ??mbedtls_ssl_parse_certificate_3
   \                     ??mbedtls_ssl_parse_certificate_23: (+1)
   \      0x682   0x222B             MOVS     R2,#+43
   \      0x684   0xE000             B.N      ??mbedtls_ssl_parse_certificate_26
   \                     ??mbedtls_ssl_parse_certificate_24: (+1)
   \      0x686   0x222A             MOVS     R2,#+42
   \                     ??mbedtls_ssl_parse_certificate_26: (+1)
   \      0x688   0x2102             MOVS     R1,#+2
   \      0x68A   0x4648             MOV      R0,R9
   \      0x68C   0x....'....        BL       mbedtls_ssl_send_alert_message
   \      0x690   0x9401             STR      R4,[SP, #+4]
   \      0x692   0x....'....        LDR.W    R0,??DataTable56
   \      0x696   0x9000             STR      R0,[SP, #+0]
   \      0x698   0xF241 0x630B      MOVW     R3,#+5643
   \      0x69C   0x463A             MOV      R2,R7
   \      0x69E   0x2101             MOVS     R1,#+1
   \      0x6A0   0x4648             MOV      R0,R9
   \      0x6A2   0x....'....        BL       mbedtls_debug_print_ret
   \      0x6A6   0x4620             MOV      R0,R4
   \      0x6A8   0xE7A4             B.N      ??mbedtls_ssl_parse_certificate_3
   5813          }
   5814          #endif /* !MBEDTLS_KEY_EXCHANGE_RSA_ENABLED
   5815                    !MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED
   5816                    !MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED
   5817                    !MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED
   5818                    !MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED
   5819                    !MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED
   5820                    !MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED */
   5821          

   \                                 In section .text, align 2, keep-with-next
   5822          int mbedtls_ssl_write_change_cipher_spec( mbedtls_ssl_context *ssl )
   5823          {
   \                     mbedtls_ssl_write_change_cipher_spec: (+1)
   \        0x0   0xB57C             PUSH     {R2-R6,LR}
   \        0x2   0x4605             MOV      R5,R0
   5824              int ret;
   5825          
   5826              MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write change cipher spec" ) );
   \        0x4   0x....'....        LDR.W    R6,??DataTable49
   \        0x8   0x....'....        LDR.W    R0,??DataTable55_2
   \        0xC   0x9000             STR      R0,[SP, #+0]
   \        0xE   0xF241 0x63C2      MOVW     R3,#+5826
   \       0x12   0x4632             MOV      R2,R6
   \       0x14   0x2102             MOVS     R1,#+2
   \       0x16   0x4628             MOV      R0,R5
   \       0x18   0x....'....        BL       mbedtls_debug_print_msg
   5827          
   5828              ssl->out_msgtype = MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC;
   \       0x1C   0x2014             MOVS     R0,#+20
   \       0x1E   0xF8C5 0x00C8      STR      R0,[R5, #+200]
   5829              ssl->out_msglen  = 1;
   \       0x22   0x2001             MOVS     R0,#+1
   \       0x24   0xF8C5 0x00CC      STR      R0,[R5, #+204]
   5830              ssl->out_msg[0]  = 1;
   \       0x28   0xF8D5 0x10C4      LDR      R1,[R5, #+196]
   \       0x2C   0x7008             STRB     R0,[R1, #+0]
   5831          
   5832              ssl->state++;
   \       0x2E   0x6868             LDR      R0,[R5, #+4]
   \       0x30   0x1C40             ADDS     R0,R0,#+1
   \       0x32   0x6068             STR      R0,[R5, #+4]
   5833          
   5834              if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
   \       0x34   0x4628             MOV      R0,R5
   \       0x36   0x....'....        BL       mbedtls_ssl_write_handshake_msg
   \       0x3A   0x0004             MOVS     R4,R0
   \       0x3C   0xD00C             BEQ.N    ??mbedtls_ssl_write_change_cipher_spec_0
   5835              {
   5836                  MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_handshake_msg", ret );
   \       0x3E   0x9401             STR      R4,[SP, #+4]
   \       0x40   0x....'....        LDR.W    R0,??DataTable48
   \       0x44   0x9000             STR      R0,[SP, #+0]
   \       0x46   0xF241 0x63CC      MOVW     R3,#+5836
   \       0x4A   0x4632             MOV      R2,R6
   \       0x4C   0x2101             MOVS     R1,#+1
   \       0x4E   0x4628             MOV      R0,R5
   \       0x50   0x....'....        BL       mbedtls_debug_print_ret
   5837                  return( ret );
   \       0x54   0x4620             MOV      R0,R4
   \       0x56   0xBD76             POP      {R1,R2,R4-R6,PC}
   5838              }
   5839          
   5840              MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write change cipher spec" ) );
   \                     ??mbedtls_ssl_write_change_cipher_spec_0: (+1)
   \       0x58   0x....'....        LDR.W    R0,??DataTable56_1
   \       0x5C   0x9000             STR      R0,[SP, #+0]
   \       0x5E   0xF241 0x63D0      MOVW     R3,#+5840
   \       0x62   0x4632             MOV      R2,R6
   \       0x64   0x2102             MOVS     R1,#+2
   \       0x66   0x4628             MOV      R0,R5
   \       0x68   0x....'....        BL       mbedtls_debug_print_msg
   5841          
   5842              return( 0 );
   \       0x6C   0x2000             MOVS     R0,#+0
   \       0x6E   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
   5843          }
   5844          

   \                                 In section .text, align 2, keep-with-next
   5845          int mbedtls_ssl_parse_change_cipher_spec( mbedtls_ssl_context *ssl )
   5846          {
   \                     mbedtls_ssl_parse_change_cipher_spec: (+1)
   \        0x0   0xB57C             PUSH     {R2-R6,LR}
   \        0x2   0x4605             MOV      R5,R0
   5847              int ret;
   5848          
   5849              MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse change cipher spec" ) );
   \        0x4   0x....'....        LDR.W    R6,??DataTable49
   \        0x8   0x....'....        LDR.W    R0,??DataTable55_3
   \        0xC   0x9000             STR      R0,[SP, #+0]
   \        0xE   0xF241 0x63D9      MOVW     R3,#+5849
   \       0x12   0x4632             MOV      R2,R6
   \       0x14   0x2102             MOVS     R1,#+2
   \       0x16   0x4628             MOV      R0,R5
   \       0x18   0x....'....        BL       mbedtls_debug_print_msg
   5850          
   5851              if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   \       0x1C   0x2101             MOVS     R1,#+1
   \       0x1E   0x4628             MOV      R0,R5
   \       0x20   0x....'....        BL       mbedtls_ssl_read_record
   \       0x24   0x0004             MOVS     R4,R0
   \       0x26   0xD00C             BEQ.N    ??mbedtls_ssl_parse_change_cipher_spec_0
   5852              {
   5853                  MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
   \       0x28   0x9401             STR      R4,[SP, #+4]
   \       0x2A   0x....'....        LDR.W    R0,??DataTable48_3
   \       0x2E   0x9000             STR      R0,[SP, #+0]
   \       0x30   0xF241 0x63DD      MOVW     R3,#+5853
   \       0x34   0x4632             MOV      R2,R6
   \       0x36   0x2101             MOVS     R1,#+1
   \       0x38   0x4628             MOV      R0,R5
   \       0x3A   0x....'....        BL       mbedtls_debug_print_ret
   5854                  return( ret );
   \       0x3E   0x4620             MOV      R0,R4
   \       0x40   0xBD76             POP      {R1,R2,R4-R6,PC}
   5855              }
   5856          
   5857              if( ssl->in_msgtype != MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC )
   \                     ??mbedtls_ssl_parse_change_cipher_spec_0: (+1)
   \       0x42   0x6FA8             LDR      R0,[R5, #+120]
   \       0x44   0x2814             CMP      R0,#+20
   \       0x46   0xD011             BEQ.N    ??mbedtls_ssl_parse_change_cipher_spec_1
   5858              {
   5859                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad change cipher spec message" ) );
   \       0x48   0x....'....        LDR.W    R0,??DataTable55_4
   \       0x4C   0x9000             STR      R0,[SP, #+0]
   \       0x4E   0xF241 0x63E3      MOVW     R3,#+5859
   \       0x52   0x4632             MOV      R2,R6
   \       0x54   0x2101             MOVS     R1,#+1
   \       0x56   0x4628             MOV      R0,R5
   \       0x58   0x....'....        BL       mbedtls_debug_print_msg
   5860                  mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   5861                                                  MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
   \       0x5C   0x220A             MOVS     R2,#+10
   \       0x5E   0x2102             MOVS     R1,#+2
   \       0x60   0x4628             MOV      R0,R5
   \       0x62   0x....'....        BL       mbedtls_ssl_send_alert_message
   5862                  return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
   \       0x66   0x....'....        LDR.W    R0,??DataTable49_4  ;; 0xffff8900
   \       0x6A   0xBD76             POP      {R1,R2,R4-R6,PC}
   5863              }
   5864          
   5865              /* CCS records are only accepted if they have length 1 and content '1',
   5866               * so we don't need to check this here. */
   5867          
   5868              /*
   5869               * Switch to our negotiated transform and session parameters for inbound
   5870               * data.
   5871               */
   5872              MBEDTLS_SSL_DEBUG_MSG( 3, ( "switching to new transform spec for inbound data" ) );
   \                     ??mbedtls_ssl_parse_change_cipher_spec_1: (+1)
   \       0x6C   0x....'....        LDR.W    R0,??DataTable56_2
   \       0x70   0x9000             STR      R0,[SP, #+0]
   \       0x72   0xF241 0x63F0      MOVW     R3,#+5872
   \       0x76   0x4632             MOV      R2,R6
   \       0x78   0x2103             MOVS     R1,#+3
   \       0x7A   0x4628             MOV      R0,R5
   \       0x7C   0x....'....        BL       mbedtls_debug_print_msg
   5873              ssl->transform_in = ssl->transform_negotiate;
   \       0x80   0x6CE8             LDR      R0,[R5, #+76]
   \       0x82   0x6428             STR      R0,[R5, #+64]
   5874              ssl->session_in = ssl->session_negotiate;
   \       0x84   0x6BA8             LDR      R0,[R5, #+56]
   \       0x86   0x62E8             STR      R0,[R5, #+44]
   5875          
   5876          #if defined(MBEDTLS_SSL_PROTO_DTLS)
   5877              if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
   \       0x88   0x6828             LDR      R0,[R5, #+0]
   \       0x8A   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \       0x8E   0xF3C0 0x0040      UBFX     R0,R0,#+1,#+1
   \       0x92   0x2800             CMP      R0,#+0
   \       0x94   0xD018             BEQ.N    ??mbedtls_ssl_parse_change_cipher_spec_2
   5878              {
   5879          #if defined(MBEDTLS_SSL_DTLS_ANTI_REPLAY)
   5880                  ssl_dtls_replay_reset( ssl );
   \       0x96   0x4628             MOV      R0,R5
   \       0x98   0x....'....        BL       ssl_dtls_replay_reset
   5881          #endif
   5882          
   5883                  /* Increment epoch */
   5884                  if( ++ssl->in_epoch == 0 )
   \       0x9C   0xF8B5 0x0084      LDRH     R0,[R5, #+132]
   \       0xA0   0x1C40             ADDS     R0,R0,#+1
   \       0xA2   0xF8A5 0x0084      STRH     R0,[R5, #+132]
   \       0xA6   0xF8B5 0x0084      LDRH     R0,[R5, #+132]
   \       0xAA   0x2800             CMP      R0,#+0
   \       0xAC   0xD111             BNE.N    ??mbedtls_ssl_parse_change_cipher_spec_3
   5885                  {
   5886                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "DTLS epoch would wrap" ) );
   \       0xAE   0x....'....        LDR.W    R0,??DataTable56_3
   \       0xB2   0x9000             STR      R0,[SP, #+0]
   \       0xB4   0xF241 0x63FE      MOVW     R3,#+5886
   \       0xB8   0x4632             MOV      R2,R6
   \       0xBA   0x2101             MOVS     R1,#+1
   \       0xBC   0x4628             MOV      R0,R5
   \       0xBE   0x....'....        BL       mbedtls_debug_print_msg
   5887                      /* This is highly unlikely to happen for legitimate reasons, so
   5888                         treat it as an attack and don't send an alert. */
   5889                      return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
   \       0xC2   0x....'....        LDR.W    R0,??DataTable56_4  ;; 0xffff9480
   \       0xC6   0xBD76             POP      {R1,R2,R4-R6,PC}
   5890                  }
   5891              }
   5892              else
   5893          #endif /* MBEDTLS_SSL_PROTO_DTLS */
   5894              memset( ssl->in_ctr, 0, 8 );
   \                     ??mbedtls_ssl_parse_change_cipher_spec_2: (+1)
   \       0xC8   0x2200             MOVS     R2,#+0
   \       0xCA   0x2108             MOVS     R1,#+8
   \       0xCC   0x6E28             LDR      R0,[R5, #+96]
   \       0xCE   0x....'....        BL       __aeabi_memset
   5895          
   5896              ssl_update_in_pointers( ssl, ssl->transform_negotiate );
   \                     ??mbedtls_ssl_parse_change_cipher_spec_3: (+1)
   \       0xD2   0x6CE9             LDR      R1,[R5, #+76]
   \       0xD4   0x4628             MOV      R0,R5
   \       0xD6   0x....'....        BL       ssl_update_in_pointers
   5897          
   5898          #if defined(MBEDTLS_SSL_HW_RECORD_ACCEL)
   5899              if( mbedtls_ssl_hw_record_activate != NULL )
   5900              {
   5901                  if( ( ret = mbedtls_ssl_hw_record_activate( ssl, MBEDTLS_SSL_CHANNEL_INBOUND ) ) != 0 )
   5902                  {
   5903                      MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_hw_record_activate", ret );
   5904                      mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   5905                                                      MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
   5906                      return( MBEDTLS_ERR_SSL_HW_ACCEL_FAILED );
   5907                  }
   5908              }
   5909          #endif
   5910          
   5911              ssl->state++;
   \       0xDA   0x6868             LDR      R0,[R5, #+4]
   \       0xDC   0x1C40             ADDS     R0,R0,#+1
   \       0xDE   0x6068             STR      R0,[R5, #+4]
   5912          
   5913              MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse change cipher spec" ) );
   \       0xE0   0x....'....        LDR.W    R0,??DataTable56_5
   \       0xE4   0x9000             STR      R0,[SP, #+0]
   \       0xE6   0xF241 0x7319      MOVW     R3,#+5913
   \       0xEA   0x4632             MOV      R2,R6
   \       0xEC   0x2102             MOVS     R1,#+2
   \       0xEE   0x4628             MOV      R0,R5
   \       0xF0   0x....'....        BL       mbedtls_debug_print_msg
   5914          
   5915              return( 0 );
   \       0xF4   0x2000             MOVS     R0,#+0
   \       0xF6   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
   5916          }
   5917          

   \                                 In section .text, align 2, keep-with-next
   5918          void mbedtls_ssl_optimize_checksum( mbedtls_ssl_context *ssl,
   5919                                      const mbedtls_ssl_ciphersuite_t *ciphersuite_info )
   5920          {
   5921              ((void) ciphersuite_info);
   5922          
   5923          #if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1) || \
   5924              defined(MBEDTLS_SSL_PROTO_TLS1_1)
   5925              if( ssl->minor_ver < MBEDTLS_SSL_MINOR_VERSION_3 )
   \                     mbedtls_ssl_optimize_checksum: (+1)
   \        0x0   0x6942             LDR      R2,[R0, #+20]
   \        0x2   0x2A03             CMP      R2,#+3
   \        0x4   0xDA05             BGE.N    ??mbedtls_ssl_optimize_checksum_0
   5926                  ssl->handshake->update_checksum = ssl_update_checksum_md5sha1;
   \        0x6   0x....'....        ADR.W    R1,ssl_update_checksum_md5sha1
   \        0xA   0x6BC0             LDR      R0,[R0, #+60]
   \        0xC   0xF8C0 0x1448      STR      R1,[R0, #+1096]
   \       0x10   0x4770             BX       LR
   5927              else
   5928          #endif
   5929          #if defined(MBEDTLS_SSL_PROTO_TLS1_2)
   5930          #if defined(MBEDTLS_SHA512_C)
   5931              if( ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
   \                     ??mbedtls_ssl_optimize_checksum_0: (+1)
   \       0x12   0x7A49             LDRB     R1,[R1, #+9]
   \       0x14   0x2907             CMP      R1,#+7
   \       0x16   0xD105             BNE.N    ??mbedtls_ssl_optimize_checksum_1
   5932                  ssl->handshake->update_checksum = ssl_update_checksum_sha384;
   \       0x18   0x....'....        ADR.W    R1,ssl_update_checksum_sha384
   \       0x1C   0x6BC0             LDR      R0,[R0, #+60]
   \       0x1E   0xF8C0 0x1448      STR      R1,[R0, #+1096]
   \       0x22   0x4770             BX       LR
   5933              else
   5934          #endif
   5935          #if defined(MBEDTLS_SHA256_C)
   5936              if( ciphersuite_info->mac != MBEDTLS_MD_SHA384 )
   5937                  ssl->handshake->update_checksum = ssl_update_checksum_sha256;
   \                     ??mbedtls_ssl_optimize_checksum_1: (+1)
   \       0x24   0x....'....        ADR.W    R1,ssl_update_checksum_sha256
   \       0x28   0x6BC0             LDR      R0,[R0, #+60]
   \       0x2A   0xF8C0 0x1448      STR      R1,[R0, #+1096]
   5938              else
   5939          #endif
   5940          #endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
   5941              {
   5942                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
   5943                  return;
   5944              }
   5945          }
   \       0x2E   0x4770             BX       LR               ;; return
   5946          

   \                                 In section .text, align 2, keep-with-next
   5947          void mbedtls_ssl_reset_checksum( mbedtls_ssl_context *ssl )
   5948          {
   \                     mbedtls_ssl_reset_checksum: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x4604             MOV      R4,R0
   5949          #if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1) || \
   5950              defined(MBEDTLS_SSL_PROTO_TLS1_1)
   5951               mbedtls_md5_starts_ret( &ssl->handshake->fin_md5  );
   \        0x4   0x6BE0             LDR      R0,[R4, #+60]
   \        0x6   0xF500 0x7014      ADD      R0,R0,#+592
   \        0xA   0x....'....        BL       mbedtls_md5_starts_ret
   5952              mbedtls_sha1_starts_ret( &ssl->handshake->fin_sha1 );
   \        0xE   0x6BE0             LDR      R0,[R4, #+60]
   \       0x10   0xF500 0x702A      ADD      R0,R0,#+680
   \       0x14   0x....'....        BL       mbedtls_sha1_starts_ret
   5953          #endif
   5954          #if defined(MBEDTLS_SSL_PROTO_TLS1_2)
   5955          #if defined(MBEDTLS_SHA256_C)
   5956              mbedtls_sha256_starts_ret( &ssl->handshake->fin_sha256, 0 );
   \       0x18   0x2100             MOVS     R1,#+0
   \       0x1A   0x6BE0             LDR      R0,[R4, #+60]
   \       0x1C   0xF500 0x7041      ADD      R0,R0,#+772
   \       0x20   0x....'....        BL       mbedtls_sha256_starts_ret
   5957          #endif
   5958          #if defined(MBEDTLS_SHA512_C)
   5959              mbedtls_sha512_starts_ret( &ssl->handshake->fin_sha512, 1 );
   \       0x24   0x2101             MOVS     R1,#+1
   \       0x26   0x6BE0             LDR      R0,[R4, #+60]
   \       0x28   0xF500 0x705C      ADD      R0,R0,#+880
   \       0x2C   0xE8BD 0x4010      POP      {R4,LR}
   \       0x30   0x....'....        B.W      mbedtls_sha512_starts_ret
   5960          #endif
   5961          #endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
   5962          }
   5963          

   \                                 In section .text, align 2, keep-with-next
   5964          static void ssl_update_checksum_start( mbedtls_ssl_context *ssl,
   5965                                                 const unsigned char *buf, size_t len )
   5966          {
   \                     ssl_update_checksum_start: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
   \        0x6   0x4616             MOV      R6,R2
   5967          #if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1) || \
   5968              defined(MBEDTLS_SSL_PROTO_TLS1_1)
   5969               mbedtls_md5_update_ret( &ssl->handshake->fin_md5 , buf, len );
   \        0x8   0x6BE0             LDR      R0,[R4, #+60]
   \        0xA   0xF500 0x7014      ADD      R0,R0,#+592
   \        0xE   0x....'....        BL       mbedtls_md5_update_ret
   5970              mbedtls_sha1_update_ret( &ssl->handshake->fin_sha1, buf, len );
   \       0x12   0x4632             MOV      R2,R6
   \       0x14   0x4629             MOV      R1,R5
   \       0x16   0x6BE0             LDR      R0,[R4, #+60]
   \       0x18   0xF500 0x702A      ADD      R0,R0,#+680
   \       0x1C   0x....'....        BL       mbedtls_sha1_update_ret
   5971          #endif
   5972          #if defined(MBEDTLS_SSL_PROTO_TLS1_2)
   5973          #if defined(MBEDTLS_SHA256_C)
   5974              mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );
   \       0x20   0x4632             MOV      R2,R6
   \       0x22   0x4629             MOV      R1,R5
   \       0x24   0x6BE0             LDR      R0,[R4, #+60]
   \       0x26   0xF500 0x7041      ADD      R0,R0,#+772
   \       0x2A   0x....'....        BL       mbedtls_sha256_update_ret
   5975          #endif
   5976          #if defined(MBEDTLS_SHA512_C)
   5977              mbedtls_sha512_update_ret( &ssl->handshake->fin_sha512, buf, len );
   \       0x2E   0x4632             MOV      R2,R6
   \       0x30   0x4629             MOV      R1,R5
   \       0x32   0x6BE0             LDR      R0,[R4, #+60]
   \       0x34   0xF500 0x705C      ADD      R0,R0,#+880
   \       0x38   0xE8BD 0x4070      POP      {R4-R6,LR}
   \       0x3C   0x....'....        B.W      mbedtls_sha512_update_ret
   5978          #endif
   5979          #endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
   5980          }
   5981          
   5982          #if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1) || \
   5983              defined(MBEDTLS_SSL_PROTO_TLS1_1)

   \                                 In section .text, align 4, keep-with-next
   5984          static void ssl_update_checksum_md5sha1( mbedtls_ssl_context *ssl,
   5985                                                   const unsigned char *buf, size_t len )
   5986          {
   \                     ssl_update_checksum_md5sha1: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
   \        0x6   0x4616             MOV      R6,R2
   5987               mbedtls_md5_update_ret( &ssl->handshake->fin_md5 , buf, len );
   \        0x8   0x6BE0             LDR      R0,[R4, #+60]
   \        0xA   0xF500 0x7014      ADD      R0,R0,#+592
   \        0xE   0x....'....        BL       mbedtls_md5_update_ret
   5988              mbedtls_sha1_update_ret( &ssl->handshake->fin_sha1, buf, len );
   \       0x12   0x4632             MOV      R2,R6
   \       0x14   0x4629             MOV      R1,R5
   \       0x16   0x6BE0             LDR      R0,[R4, #+60]
   \       0x18   0xF500 0x702A      ADD      R0,R0,#+680
   \       0x1C   0xE8BD 0x4070      POP      {R4-R6,LR}
   \       0x20   0x....'....        B.W      mbedtls_sha1_update_ret
   5989          }
   5990          #endif
   5991          
   5992          #if defined(MBEDTLS_SSL_PROTO_TLS1_2)
   5993          #if defined(MBEDTLS_SHA256_C)

   \                                 In section .text, align 4, keep-with-next
   5994          static void ssl_update_checksum_sha256( mbedtls_ssl_context *ssl,
   5995                                                  const unsigned char *buf, size_t len )
   5996          {
   5997              mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );
   \                     ssl_update_checksum_sha256: (+1)
   \        0x0   0x6BC0             LDR      R0,[R0, #+60]
   \        0x2   0xF500 0x7041      ADD      R0,R0,#+772
   \        0x6   0x....'....        B.W      mbedtls_sha256_update_ret
   5998          }
   5999          #endif
   6000          
   6001          #if defined(MBEDTLS_SHA512_C)

   \                                 In section .text, align 4, keep-with-next
   6002          static void ssl_update_checksum_sha384( mbedtls_ssl_context *ssl,
   6003                                                  const unsigned char *buf, size_t len )
   6004          {
   6005              mbedtls_sha512_update_ret( &ssl->handshake->fin_sha512, buf, len );
   \                     ssl_update_checksum_sha384: (+1)
   \        0x0   0x6BC0             LDR      R0,[R0, #+60]
   \        0x2   0xF500 0x705C      ADD      R0,R0,#+880
   \        0x6   0x....'....        B.W      mbedtls_sha512_update_ret
   6006          }
   6007          #endif
   6008          #endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
   6009          
   6010          #if defined(MBEDTLS_SSL_PROTO_SSL3)
   6011          static void ssl_calc_finished_ssl(
   6012                          mbedtls_ssl_context *ssl, unsigned char *buf, int from )
   6013          {
   6014              const char *sender;
   6015              mbedtls_md5_context  md5;
   6016              mbedtls_sha1_context sha1;
   6017          
   6018              unsigned char padbuf[48];
   6019              unsigned char md5sum[16];
   6020              unsigned char sha1sum[20];
   6021          
   6022              mbedtls_ssl_session *session = ssl->session_negotiate;
   6023              if( !session )
   6024                  session = ssl->session;
   6025          
   6026              MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc  finished ssl" ) );
   6027          
   6028              mbedtls_md5_init( &md5 );
   6029              mbedtls_sha1_init( &sha1 );
   6030          
   6031              mbedtls_md5_clone( &md5, &ssl->handshake->fin_md5 );
   6032              mbedtls_sha1_clone( &sha1, &ssl->handshake->fin_sha1 );
   6033          
   6034              /*
   6035               * SSLv3:
   6036               *   hash =
   6037               *      MD5( master + pad2 +
   6038               *          MD5( handshake + sender + master + pad1 ) )
   6039               *   + SHA1( master + pad2 +
   6040               *         SHA1( handshake + sender + master + pad1 ) )
   6041               */
   6042          
   6043          #if !defined(MBEDTLS_MD5_ALT)
   6044              MBEDTLS_SSL_DEBUG_BUF( 4, "finished  md5 state", (unsigned char *)
   6045                              md5.state, sizeof(  md5.state ) );
   6046          #endif
   6047          
   6048          #if !defined(MBEDTLS_SHA1_ALT)
   6049              MBEDTLS_SSL_DEBUG_BUF( 4, "finished sha1 state", (unsigned char *)
   6050                             sha1.state, sizeof( sha1.state ) );
   6051          #endif
   6052          
   6053              sender = ( from == MBEDTLS_SSL_IS_CLIENT ) ? "CLNT"
   6054                                                 : "SRVR";
   6055          
   6056              memset( padbuf, 0x36, 48 );
   6057          
   6058              mbedtls_md5_update_ret( &md5, (const unsigned char *) sender, 4 );
   6059              mbedtls_md5_update_ret( &md5, session->master, 48 );
   6060              mbedtls_md5_update_ret( &md5, padbuf, 48 );
   6061              mbedtls_md5_finish_ret( &md5, md5sum );
   6062          
   6063              mbedtls_sha1_update_ret( &sha1, (const unsigned char *) sender, 4 );
   6064              mbedtls_sha1_update_ret( &sha1, session->master, 48 );
   6065              mbedtls_sha1_update_ret( &sha1, padbuf, 40 );
   6066              mbedtls_sha1_finish_ret( &sha1, sha1sum );
   6067          
   6068              memset( padbuf, 0x5C, 48 );
   6069          
   6070              mbedtls_md5_starts_ret( &md5 );
   6071              mbedtls_md5_update_ret( &md5, session->master, 48 );
   6072              mbedtls_md5_update_ret( &md5, padbuf, 48 );
   6073              mbedtls_md5_update_ret( &md5, md5sum, 16 );
   6074              mbedtls_md5_finish_ret( &md5, buf );
   6075          
   6076              mbedtls_sha1_starts_ret( &sha1 );
   6077              mbedtls_sha1_update_ret( &sha1, session->master, 48 );
   6078              mbedtls_sha1_update_ret( &sha1, padbuf , 40 );
   6079              mbedtls_sha1_update_ret( &sha1, sha1sum, 20 );
   6080              mbedtls_sha1_finish_ret( &sha1, buf + 16 );
   6081          
   6082              MBEDTLS_SSL_DEBUG_BUF( 3, "calc finished result", buf, 36 );
   6083          
   6084              mbedtls_md5_free(  &md5  );
   6085              mbedtls_sha1_free( &sha1 );
   6086          
   6087              mbedtls_platform_zeroize(  padbuf, sizeof(  padbuf ) );
   6088              mbedtls_platform_zeroize(  md5sum, sizeof(  md5sum ) );
   6089              mbedtls_platform_zeroize( sha1sum, sizeof( sha1sum ) );
   6090          
   6091              MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc  finished" ) );
   6092          }
   6093          #endif /* MBEDTLS_SSL_PROTO_SSL3 */
   6094          
   6095          #if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1)

   \                                 In section .text, align 2, keep-with-next
   6096          static void ssl_calc_finished_tls(
   6097                          mbedtls_ssl_context *ssl, unsigned char *buf, int from )
   6098          {
   \                     ssl_calc_finished_tls: (+1)
   \        0x0   0xE92D 0x41F8      PUSH     {R3-R8,LR}
   \        0x4   0xB0B9             SUB      SP,SP,#+228
   \        0x6   0x4606             MOV      R6,R0
   \        0x8   0x460F             MOV      R7,R1
   \        0xA   0x4615             MOV      R5,R2
   6099              int len = 12;
   6100              const char *sender;
   6101              mbedtls_md5_context  md5;
   6102              mbedtls_sha1_context sha1;
   6103              unsigned char padbuf[36];
   6104          
   6105              mbedtls_ssl_session *session = ssl->session_negotiate;
   \        0xC   0x6BB4             LDR      R4,[R6, #+56]
   6106              if( !session )
   \        0xE   0x2C00             CMP      R4,#+0
   \       0x10   0xD100             BNE.N    ??ssl_calc_finished_tls_0
   6107                  session = ssl->session;
   \       0x12   0x6B74             LDR      R4,[R6, #+52]
   6108          
   6109              MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc  finished tls" ) );
   \                     ??ssl_calc_finished_tls_0: (+1)
   \       0x14   0x....'....        LDR.W    R8,??DataTable49
   \       0x18   0x....'....        LDR.W    R0,??DataTable56_6
   \       0x1C   0x9000             STR      R0,[SP, #+0]
   \       0x1E   0xF241 0x73DD      MOVW     R3,#+6109
   \       0x22   0x4642             MOV      R2,R8
   \       0x24   0x2102             MOVS     R1,#+2
   \       0x26   0x4630             MOV      R0,R6
   \       0x28   0x....'....        BL       mbedtls_debug_print_msg
   6110          
   6111              mbedtls_md5_init( &md5 );
   \       0x2C   0xA823             ADD      R0,SP,#+140
   \       0x2E   0x....'....        BL       mbedtls_md5_init
   6112              mbedtls_sha1_init( &sha1 );
   \       0x32   0xA80C             ADD      R0,SP,#+48
   \       0x34   0x....'....        BL       mbedtls_sha1_init
   6113          
   6114              mbedtls_md5_clone( &md5, &ssl->handshake->fin_md5 );
   \       0x38   0x6BF0             LDR      R0,[R6, #+60]
   \       0x3A   0xF500 0x7114      ADD      R1,R0,#+592
   \       0x3E   0xA823             ADD      R0,SP,#+140
   \       0x40   0x....'....        BL       mbedtls_md5_clone
   6115              mbedtls_sha1_clone( &sha1, &ssl->handshake->fin_sha1 );
   \       0x44   0x6BF0             LDR      R0,[R6, #+60]
   \       0x46   0xF500 0x712A      ADD      R1,R0,#+680
   \       0x4A   0xA80C             ADD      R0,SP,#+48
   \       0x4C   0x....'....        BL       mbedtls_sha1_clone
   6116          
   6117              /*
   6118               * TLSv1:
   6119               *   hash = PRF( master, finished_label,
   6120               *               MD5( handshake ) + SHA1( handshake ) )[0..11]
   6121               */
   6122          
   6123          #if !defined(MBEDTLS_MD5_ALT)
   6124              MBEDTLS_SSL_DEBUG_BUF( 4, "finished  md5 state", (unsigned char *)
   6125                              md5.state, sizeof(  md5.state ) );
   \       0x50   0x2010             MOVS     R0,#+16
   \       0x52   0x9002             STR      R0,[SP, #+8]
   \       0x54   0xA825             ADD      R0,SP,#+148
   \       0x56   0x9001             STR      R0,[SP, #+4]
   \       0x58   0x....'....        LDR.W    R0,??DataTable57
   \       0x5C   0x9000             STR      R0,[SP, #+0]
   \       0x5E   0xF241 0x73ED      MOVW     R3,#+6125
   \       0x62   0x4642             MOV      R2,R8
   \       0x64   0x2104             MOVS     R1,#+4
   \       0x66   0x4630             MOV      R0,R6
   \       0x68   0x....'....        BL       mbedtls_debug_print_buf
   6126          #endif
   6127          
   6128          #if !defined(MBEDTLS_SHA1_ALT)
   6129              MBEDTLS_SSL_DEBUG_BUF( 4, "finished sha1 state", (unsigned char *)
   6130                             sha1.state, sizeof( sha1.state ) );
   \       0x6C   0x2014             MOVS     R0,#+20
   \       0x6E   0x9002             STR      R0,[SP, #+8]
   \       0x70   0xA80E             ADD      R0,SP,#+56
   \       0x72   0x9001             STR      R0,[SP, #+4]
   \       0x74   0x....'....        LDR.W    R0,??DataTable57_1
   \       0x78   0x9000             STR      R0,[SP, #+0]
   \       0x7A   0xF241 0x73F2      MOVW     R3,#+6130
   \       0x7E   0x4642             MOV      R2,R8
   \       0x80   0x2104             MOVS     R1,#+4
   \       0x82   0x4630             MOV      R0,R6
   \       0x84   0x....'....        BL       mbedtls_debug_print_buf
   6131          #endif
   6132          
   6133              sender = ( from == MBEDTLS_SSL_IS_CLIENT )
   6134                       ? "client finished"
   6135                       : "server finished";
   \       0x88   0x2D00             CMP      R5,#+0
   \       0x8A   0xD102             BNE.N    ??ssl_calc_finished_tls_1
   \       0x8C   0x....'....        LDR.W    R5,??DataTable57_2
   \       0x90   0xE001             B.N      ??ssl_calc_finished_tls_2
   \                     ??ssl_calc_finished_tls_1: (+1)
   \       0x92   0x....'....        LDR.W    R5,??DataTable57_3
   6136          
   6137              mbedtls_md5_finish_ret(  &md5, padbuf );
   \                     ??ssl_calc_finished_tls_2: (+1)
   \       0x96   0xA903             ADD      R1,SP,#+12
   \       0x98   0xA823             ADD      R0,SP,#+140
   \       0x9A   0x....'....        BL       mbedtls_md5_finish_ret
   6138              mbedtls_sha1_finish_ret( &sha1, padbuf + 16 );
   \       0x9E   0xA907             ADD      R1,SP,#+28
   \       0xA0   0xA80C             ADD      R0,SP,#+48
   \       0xA2   0x....'....        BL       mbedtls_sha1_finish_ret
   6139          
   6140              ssl->handshake->tls_prf( session->master, 48, sender,
   6141                                       padbuf, 36, buf, len );
   \       0xA6   0x200C             MOVS     R0,#+12
   \       0xA8   0x9002             STR      R0,[SP, #+8]
   \       0xAA   0x9701             STR      R7,[SP, #+4]
   \       0xAC   0x2024             MOVS     R0,#+36
   \       0xAE   0x9000             STR      R0,[SP, #+0]
   \       0xB0   0xAB03             ADD      R3,SP,#+12
   \       0xB2   0x462A             MOV      R2,R5
   \       0xB4   0x2130             MOVS     R1,#+48
   \       0xB6   0xF104 0x002C      ADD      R0,R4,#+44
   \       0xBA   0x6BF4             LDR      R4,[R6, #+60]
   \       0xBC   0xF8D4 0x4454      LDR      R4,[R4, #+1108]
   \       0xC0   0x47A0             BLX      R4
   6142          
   6143              MBEDTLS_SSL_DEBUG_BUF( 3, "calc finished result", buf, len );
   \       0xC2   0x200C             MOVS     R0,#+12
   \       0xC4   0x9002             STR      R0,[SP, #+8]
   \       0xC6   0x9701             STR      R7,[SP, #+4]
   \       0xC8   0x....'....        LDR.W    R0,??DataTable58
   \       0xCC   0x9000             STR      R0,[SP, #+0]
   \       0xCE   0xF241 0x73FF      MOVW     R3,#+6143
   \       0xD2   0x4642             MOV      R2,R8
   \       0xD4   0x2103             MOVS     R1,#+3
   \       0xD6   0x4630             MOV      R0,R6
   \       0xD8   0x....'....        BL       mbedtls_debug_print_buf
   6144          
   6145              mbedtls_md5_free(  &md5  );
   \       0xDC   0xA823             ADD      R0,SP,#+140
   \       0xDE   0x....'....        BL       mbedtls_md5_free
   6146              mbedtls_sha1_free( &sha1 );
   \       0xE2   0xA80C             ADD      R0,SP,#+48
   \       0xE4   0x....'....        BL       mbedtls_sha1_free
   6147          
   6148              mbedtls_platform_zeroize(  padbuf, sizeof(  padbuf ) );
   \       0xE8   0x2124             MOVS     R1,#+36
   \       0xEA   0xA803             ADD      R0,SP,#+12
   \       0xEC   0x....'....        BL       mbedtls_platform_zeroize
   6149          
   6150              MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc  finished" ) );
   \       0xF0   0x....'....        LDR.W    R0,??DataTable59
   \       0xF4   0x9000             STR      R0,[SP, #+0]
   \       0xF6   0xF641 0x0306      MOVW     R3,#+6150
   \       0xFA   0x4642             MOV      R2,R8
   \       0xFC   0x2102             MOVS     R1,#+2
   \       0xFE   0x4630             MOV      R0,R6
   \      0x100   0x....'....        BL       mbedtls_debug_print_msg
   6151          }
   \      0x104   0xB03A             ADD      SP,SP,#+232
   \      0x106   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   6152          #endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 */
   6153          
   6154          #if defined(MBEDTLS_SSL_PROTO_TLS1_2)
   6155          #if defined(MBEDTLS_SHA256_C)

   \                                 In section .text, align 2, keep-with-next
   6156          static void ssl_calc_finished_tls_sha256(
   6157                          mbedtls_ssl_context *ssl, unsigned char *buf, int from )
   6158          {
   \                     ssl_calc_finished_tls_sha256: (+1)
   \        0x0   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \        0x4   0xB0A6             SUB      SP,SP,#+152
   \        0x6   0x4606             MOV      R6,R0
   \        0x8   0x460F             MOV      R7,R1
   \        0xA   0x4615             MOV      R5,R2
   6159              int len = 12;
   6160              const char *sender;
   6161              mbedtls_sha256_context sha256;
   6162              unsigned char padbuf[32];
   6163          
   6164              mbedtls_ssl_session *session = ssl->session_negotiate;
   \        0xC   0x6BB4             LDR      R4,[R6, #+56]
   6165              if( !session )
   \        0xE   0x2C00             CMP      R4,#+0
   \       0x10   0xD100             BNE.N    ??ssl_calc_finished_tls_sha256_0
   6166                  session = ssl->session;
   \       0x12   0x6B74             LDR      R4,[R6, #+52]
   6167          
   6168              mbedtls_sha256_init( &sha256 );
   \                     ??ssl_calc_finished_tls_sha256_0: (+1)
   \       0x14   0xA80B             ADD      R0,SP,#+44
   \       0x16   0x....'....        BL       mbedtls_sha256_init
   6169          
   6170              MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc  finished tls sha256" ) );
   \       0x1A   0x....'....        LDR.W    R8,??DataTable49
   \       0x1E   0x....'....        LDR.W    R0,??DataTable58_1
   \       0x22   0x9000             STR      R0,[SP, #+0]
   \       0x24   0xF641 0x031A      MOVW     R3,#+6170
   \       0x28   0x4642             MOV      R2,R8
   \       0x2A   0x2102             MOVS     R1,#+2
   \       0x2C   0x4630             MOV      R0,R6
   \       0x2E   0x....'....        BL       mbedtls_debug_print_msg
   6171          
   6172              mbedtls_sha256_clone( &sha256, &ssl->handshake->fin_sha256 );
   \       0x32   0x6BF0             LDR      R0,[R6, #+60]
   \       0x34   0xF500 0x7141      ADD      R1,R0,#+772
   \       0x38   0xA80B             ADD      R0,SP,#+44
   \       0x3A   0x....'....        BL       mbedtls_sha256_clone
   6173          
   6174              /*
   6175               * TLSv1.2:
   6176               *   hash = PRF( master, finished_label,
   6177               *               Hash( handshake ) )[0.11]
   6178               */
   6179          
   6180          #if !defined(MBEDTLS_SHA256_ALT)
   6181              MBEDTLS_SSL_DEBUG_BUF( 4, "finished sha2 state", (unsigned char *)
   6182                             sha256.state, sizeof( sha256.state ) );
   \       0x3E   0x2020             MOVS     R0,#+32
   \       0x40   0x9002             STR      R0,[SP, #+8]
   \       0x42   0xA80D             ADD      R0,SP,#+52
   \       0x44   0x9001             STR      R0,[SP, #+4]
   \       0x46   0x....'....        LDR.W    R0,??DataTable58_2
   \       0x4A   0x9000             STR      R0,[SP, #+0]
   \       0x4C   0xF641 0x0326      MOVW     R3,#+6182
   \       0x50   0x4642             MOV      R2,R8
   \       0x52   0x2104             MOVS     R1,#+4
   \       0x54   0x4630             MOV      R0,R6
   \       0x56   0x....'....        BL       mbedtls_debug_print_buf
   6183          #endif
   6184          
   6185              sender = ( from == MBEDTLS_SSL_IS_CLIENT )
   6186                       ? "client finished"
   6187                       : "server finished";
   \       0x5A   0x2D00             CMP      R5,#+0
   \       0x5C   0xD102             BNE.N    ??ssl_calc_finished_tls_sha256_1
   \       0x5E   0x....'....        LDR.W    R5,??DataTable57_2
   \       0x62   0xE001             B.N      ??ssl_calc_finished_tls_sha256_2
   \                     ??ssl_calc_finished_tls_sha256_1: (+1)
   \       0x64   0x....'....        LDR.W    R5,??DataTable57_3
   6188          
   6189              mbedtls_sha256_finish_ret( &sha256, padbuf );
   \                     ??ssl_calc_finished_tls_sha256_2: (+1)
   \       0x68   0xA903             ADD      R1,SP,#+12
   \       0x6A   0xA80B             ADD      R0,SP,#+44
   \       0x6C   0x....'....        BL       mbedtls_sha256_finish_ret
   6190          
   6191              ssl->handshake->tls_prf( session->master, 48, sender,
   6192                                       padbuf, 32, buf, len );
   \       0x70   0x200C             MOVS     R0,#+12
   \       0x72   0x9002             STR      R0,[SP, #+8]
   \       0x74   0x9701             STR      R7,[SP, #+4]
   \       0x76   0x2020             MOVS     R0,#+32
   \       0x78   0x9000             STR      R0,[SP, #+0]
   \       0x7A   0xAB03             ADD      R3,SP,#+12
   \       0x7C   0x462A             MOV      R2,R5
   \       0x7E   0x2130             MOVS     R1,#+48
   \       0x80   0xF104 0x002C      ADD      R0,R4,#+44
   \       0x84   0x6BF4             LDR      R4,[R6, #+60]
   \       0x86   0xF8D4 0x4454      LDR      R4,[R4, #+1108]
   \       0x8A   0x47A0             BLX      R4
   6193          
   6194              MBEDTLS_SSL_DEBUG_BUF( 3, "calc finished result", buf, len );
   \       0x8C   0x200C             MOVS     R0,#+12
   \       0x8E   0x9002             STR      R0,[SP, #+8]
   \       0x90   0x9701             STR      R7,[SP, #+4]
   \       0x92   0x....'....        LDR.W    R0,??DataTable58
   \       0x96   0x9000             STR      R0,[SP, #+0]
   \       0x98   0xF641 0x0332      MOVW     R3,#+6194
   \       0x9C   0x4642             MOV      R2,R8
   \       0x9E   0x2103             MOVS     R1,#+3
   \       0xA0   0x4630             MOV      R0,R6
   \       0xA2   0x....'....        BL       mbedtls_debug_print_buf
   6195          
   6196              mbedtls_sha256_free( &sha256 );
   \       0xA6   0xA80B             ADD      R0,SP,#+44
   \       0xA8   0x....'....        BL       mbedtls_sha256_free
   6197          
   6198              mbedtls_platform_zeroize(  padbuf, sizeof(  padbuf ) );
   \       0xAC   0x2120             MOVS     R1,#+32
   \       0xAE   0xA803             ADD      R0,SP,#+12
   \       0xB0   0x....'....        BL       mbedtls_platform_zeroize
   6199          
   6200              MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc  finished" ) );
   \       0xB4   0x....'....        LDR.W    R0,??DataTable59
   \       0xB8   0x9000             STR      R0,[SP, #+0]
   \       0xBA   0xF641 0x0338      MOVW     R3,#+6200
   \       0xBE   0x4642             MOV      R2,R8
   \       0xC0   0x2102             MOVS     R1,#+2
   \       0xC2   0x4630             MOV      R0,R6
   \       0xC4   0x....'....        BL       mbedtls_debug_print_msg
   6201          }
   \       0xC8   0xB026             ADD      SP,SP,#+152
   \       0xCA   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   6202          #endif /* MBEDTLS_SHA256_C */
   6203          
   6204          #if defined(MBEDTLS_SHA512_C)

   \                                 In section .text, align 2, keep-with-next
   6205          static void ssl_calc_finished_tls_sha384(
   6206                          mbedtls_ssl_context *ssl, unsigned char *buf, int from )
   6207          {
   \                     ssl_calc_finished_tls_sha384: (+1)
   \        0x0   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \        0x4   0xB0C6             SUB      SP,SP,#+280
   \        0x6   0x4606             MOV      R6,R0
   \        0x8   0x460F             MOV      R7,R1
   \        0xA   0x4615             MOV      R5,R2
   6208              int len = 12;
   6209              const char *sender;
   6210              mbedtls_sha512_context sha512;
   6211              unsigned char padbuf[48];
   6212          
   6213              mbedtls_ssl_session *session = ssl->session_negotiate;
   \        0xC   0x6BB4             LDR      R4,[R6, #+56]
   6214              if( !session )
   \        0xE   0x2C00             CMP      R4,#+0
   \       0x10   0xD100             BNE.N    ??ssl_calc_finished_tls_sha384_0
   6215                  session = ssl->session;
   \       0x12   0x6B74             LDR      R4,[R6, #+52]
   6216          
   6217              mbedtls_sha512_init( &sha512 );
   \                     ??ssl_calc_finished_tls_sha384_0: (+1)
   \       0x14   0xA810             ADD      R0,SP,#+64
   \       0x16   0x....'....        BL       mbedtls_sha512_init
   6218          
   6219              MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc  finished tls sha384" ) );
   \       0x1A   0x....'....        LDR.W    R8,??DataTable49
   \       0x1E   0x....'....        LDR.W    R0,??DataTable59_1
   \       0x22   0x9000             STR      R0,[SP, #+0]
   \       0x24   0xF641 0x034B      MOVW     R3,#+6219
   \       0x28   0x4642             MOV      R2,R8
   \       0x2A   0x2102             MOVS     R1,#+2
   \       0x2C   0x4630             MOV      R0,R6
   \       0x2E   0x....'....        BL       mbedtls_debug_print_msg
   6220          
   6221              mbedtls_sha512_clone( &sha512, &ssl->handshake->fin_sha512 );
   \       0x32   0x6BF0             LDR      R0,[R6, #+60]
   \       0x34   0xF500 0x715C      ADD      R1,R0,#+880
   \       0x38   0xA810             ADD      R0,SP,#+64
   \       0x3A   0x....'....        BL       mbedtls_sha512_clone
   6222          
   6223              /*
   6224               * TLSv1.2:
   6225               *   hash = PRF( master, finished_label,
   6226               *               Hash( handshake ) )[0.11]
   6227               */
   6228          
   6229          #if !defined(MBEDTLS_SHA512_ALT)
   6230              MBEDTLS_SSL_DEBUG_BUF( 4, "finished sha512 state", (unsigned char *)
   6231                             sha512.state, sizeof( sha512.state ) );
   \       0x3E   0x2040             MOVS     R0,#+64
   \       0x40   0x9002             STR      R0,[SP, #+8]
   \       0x42   0xA814             ADD      R0,SP,#+80
   \       0x44   0x9001             STR      R0,[SP, #+4]
   \       0x46   0x....'....        LDR.W    R0,??DataTable60
   \       0x4A   0x9000             STR      R0,[SP, #+0]
   \       0x4C   0xF641 0x0357      MOVW     R3,#+6231
   \       0x50   0x4642             MOV      R2,R8
   \       0x52   0x2104             MOVS     R1,#+4
   \       0x54   0x4630             MOV      R0,R6
   \       0x56   0x....'....        BL       mbedtls_debug_print_buf
   6232          #endif
   6233          
   6234              sender = ( from == MBEDTLS_SSL_IS_CLIENT )
   6235                       ? "client finished"
   6236                       : "server finished";
   \       0x5A   0x2D00             CMP      R5,#+0
   \       0x5C   0xD102             BNE.N    ??ssl_calc_finished_tls_sha384_1
   \       0x5E   0x....'....        LDR.W    R5,??DataTable57_2
   \       0x62   0xE001             B.N      ??ssl_calc_finished_tls_sha384_2
   \                     ??ssl_calc_finished_tls_sha384_1: (+1)
   \       0x64   0x....'....        LDR.W    R5,??DataTable57_3
   6237          
   6238              mbedtls_sha512_finish_ret( &sha512, padbuf );
   \                     ??ssl_calc_finished_tls_sha384_2: (+1)
   \       0x68   0xA903             ADD      R1,SP,#+12
   \       0x6A   0xA810             ADD      R0,SP,#+64
   \       0x6C   0x....'....        BL       mbedtls_sha512_finish_ret
   6239          
   6240              ssl->handshake->tls_prf( session->master, 48, sender,
   6241                                       padbuf, 48, buf, len );
   \       0x70   0x200C             MOVS     R0,#+12
   \       0x72   0x9002             STR      R0,[SP, #+8]
   \       0x74   0x9701             STR      R7,[SP, #+4]
   \       0x76   0x2030             MOVS     R0,#+48
   \       0x78   0x9000             STR      R0,[SP, #+0]
   \       0x7A   0xAB03             ADD      R3,SP,#+12
   \       0x7C   0x462A             MOV      R2,R5
   \       0x7E   0x4601             MOV      R1,R0
   \       0x80   0xF104 0x002C      ADD      R0,R4,#+44
   \       0x84   0x6BF4             LDR      R4,[R6, #+60]
   \       0x86   0xF8D4 0x4454      LDR      R4,[R4, #+1108]
   \       0x8A   0x47A0             BLX      R4
   6242          
   6243              MBEDTLS_SSL_DEBUG_BUF( 3, "calc finished result", buf, len );
   \       0x8C   0x200C             MOVS     R0,#+12
   \       0x8E   0x9002             STR      R0,[SP, #+8]
   \       0x90   0x9701             STR      R7,[SP, #+4]
   \       0x92   0x....'....        LDR.W    R0,??DataTable58
   \       0x96   0x9000             STR      R0,[SP, #+0]
   \       0x98   0xF641 0x0363      MOVW     R3,#+6243
   \       0x9C   0x4642             MOV      R2,R8
   \       0x9E   0x2103             MOVS     R1,#+3
   \       0xA0   0x4630             MOV      R0,R6
   \       0xA2   0x....'....        BL       mbedtls_debug_print_buf
   6244          
   6245              mbedtls_sha512_free( &sha512 );
   \       0xA6   0xA810             ADD      R0,SP,#+64
   \       0xA8   0x....'....        BL       mbedtls_sha512_free
   6246          
   6247              mbedtls_platform_zeroize(  padbuf, sizeof( padbuf ) );
   \       0xAC   0x2130             MOVS     R1,#+48
   \       0xAE   0xA803             ADD      R0,SP,#+12
   \       0xB0   0x....'....        BL       mbedtls_platform_zeroize
   6248          
   6249              MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc  finished" ) );
   \       0xB4   0x....'....        LDR.W    R0,??DataTable59
   \       0xB8   0x9000             STR      R0,[SP, #+0]
   \       0xBA   0xF641 0x0369      MOVW     R3,#+6249
   \       0xBE   0x4642             MOV      R2,R8
   \       0xC0   0x2102             MOVS     R1,#+2
   \       0xC2   0x4630             MOV      R0,R6
   \       0xC4   0x....'....        BL       mbedtls_debug_print_msg
   6250          }
   \       0xC8   0xB046             ADD      SP,SP,#+280
   \       0xCA   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   6251          #endif /* MBEDTLS_SHA512_C */
   6252          #endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
   6253          

   \                                 In section .text, align 2, keep-with-next
   6254          static void ssl_handshake_wrapup_free_hs_transform( mbedtls_ssl_context *ssl )
   6255          {
   \                     ssl_handshake_wrapup_free_hs_transform: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4604             MOV      R4,R0
   6256              MBEDTLS_SSL_DEBUG_MSG( 3, ( "=> handshake wrapup: final free" ) );
   \        0x4   0x....             LDR.N    R5,??DataTable49
   \        0x6   0x....'....        LDR.W    R0,??DataTable60_1
   \        0xA   0x9000             STR      R0,[SP, #+0]
   \        0xC   0xF641 0x0370      MOVW     R3,#+6256
   \       0x10   0x462A             MOV      R2,R5
   \       0x12   0x2103             MOVS     R1,#+3
   \       0x14   0x4620             MOV      R0,R4
   \       0x16   0x....'....        BL       mbedtls_debug_print_msg
   6257          
   6258              /*
   6259               * Free our handshake params
   6260               */
   6261              mbedtls_ssl_handshake_free( ssl );
   \       0x1A   0x4620             MOV      R0,R4
   \       0x1C   0x....'....        BL       mbedtls_ssl_handshake_free
   6262              mbedtls_free( ssl->handshake );
   \       0x20   0x6BE0             LDR      R0,[R4, #+60]
   \       0x22   0x....'....        BL       mbedtls_free
   6263              ssl->handshake = NULL;
   \       0x26   0x2000             MOVS     R0,#+0
   \       0x28   0x63E0             STR      R0,[R4, #+60]
   6264          
   6265              /*
   6266               * Free the previous transform and swith in the current one
   6267               */
   6268              if( ssl->transform )
   \       0x2A   0x6CA0             LDR      R0,[R4, #+72]
   \       0x2C   0x2800             CMP      R0,#+0
   \       0x2E   0xD004             BEQ.N    ??ssl_handshake_wrapup_free_hs_transform_0
   6269              {
   6270                  mbedtls_ssl_transform_free( ssl->transform );
   \       0x30   0x....'....        BL       mbedtls_ssl_transform_free
   6271                  mbedtls_free( ssl->transform );
   \       0x34   0x6CA0             LDR      R0,[R4, #+72]
   \       0x36   0x....'....        BL       mbedtls_free
   6272              }
   6273              ssl->transform = ssl->transform_negotiate;
   \                     ??ssl_handshake_wrapup_free_hs_transform_0: (+1)
   \       0x3A   0x6CE0             LDR      R0,[R4, #+76]
   \       0x3C   0x64A0             STR      R0,[R4, #+72]
   6274              ssl->transform_negotiate = NULL;
   \       0x3E   0x2000             MOVS     R0,#+0
   \       0x40   0x64E0             STR      R0,[R4, #+76]
   6275          
   6276              MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup: final free" ) );
   \       0x42   0x....'....        LDR.W    R0,??DataTable61
   \       0x46   0x9000             STR      R0,[SP, #+0]
   \       0x48   0xF641 0x0384      MOVW     R3,#+6276
   \       0x4C   0x462A             MOV      R2,R5
   \       0x4E   0x2103             MOVS     R1,#+3
   \       0x50   0x4620             MOV      R0,R4
   \       0x52   0x....'....        BL       mbedtls_debug_print_msg
   6277          }
   \       0x56   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   6278          

   \                                 In section .text, align 2, keep-with-next
   6279          void mbedtls_ssl_handshake_wrapup( mbedtls_ssl_context *ssl )
   6280          {
   \                     mbedtls_ssl_handshake_wrapup: (+1)
   \        0x0   0xB57C             PUSH     {R2-R6,LR}
   \        0x2   0x4605             MOV      R5,R0
   6281              int resume = ssl->handshake->resume;
   \        0x4   0x6BE8             LDR      R0,[R5, #+60]
   \        0x6   0xF8D0 0x46C0      LDR      R4,[R0, #+1728]
   6282          
   6283              MBEDTLS_SSL_DEBUG_MSG( 3, ( "=> handshake wrapup" ) );
   \        0xA   0x....'....        LDR.W    R6,??DataTable55_5
   \        0xE   0x....'....        LDR.W    R0,??DataTable60_2
   \       0x12   0x9000             STR      R0,[SP, #+0]
   \       0x14   0xF641 0x038B      MOVW     R3,#+6283
   \       0x18   0x4632             MOV      R2,R6
   \       0x1A   0x2103             MOVS     R1,#+3
   \       0x1C   0x4628             MOV      R0,R5
   \       0x1E   0x....'....        BL       mbedtls_debug_print_msg
   6284          
   6285          #if defined(MBEDTLS_SSL_RENEGOTIATION)
   6286              if( ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS )
   \       0x22   0x68A8             LDR      R0,[R5, #+8]
   \       0x24   0x2801             CMP      R0,#+1
   \       0x26   0xD103             BNE.N    ??mbedtls_ssl_handshake_wrapup_0
   6287              {
   6288                  ssl->renego_status =  MBEDTLS_SSL_RENEGOTIATION_DONE;
   \       0x28   0x2002             MOVS     R0,#+2
   \       0x2A   0x60A8             STR      R0,[R5, #+8]
   6289                  ssl->renego_records_seen = 0;
   \       0x2C   0x2000             MOVS     R0,#+0
   \       0x2E   0x60E8             STR      R0,[R5, #+12]
   6290              }
   6291          #endif
   6292          
   6293              /*
   6294               * Free the previous session and switch in the current one
   6295               */
   6296              if( ssl->session )
   \                     ??mbedtls_ssl_handshake_wrapup_0: (+1)
   \       0x30   0x6B68             LDR      R0,[R5, #+52]
   \       0x32   0x2800             CMP      R0,#+0
   \       0x34   0xD008             BEQ.N    ??mbedtls_ssl_handshake_wrapup_1
   6297              {
   6298          #if defined(MBEDTLS_SSL_ENCRYPT_THEN_MAC)
   6299                  /* RFC 7366 3.1: keep the EtM state */
   6300                  ssl->session_negotiate->encrypt_then_mac =
   6301                            ssl->session->encrypt_then_mac;
   \       0x36   0x6F80             LDR      R0,[R0, #+120]
   \       0x38   0x6BA9             LDR      R1,[R5, #+56]
   \       0x3A   0x6788             STR      R0,[R1, #+120]
   6302          #endif
   6303          
   6304                  mbedtls_ssl_session_free( ssl->session );
   \       0x3C   0x6B68             LDR      R0,[R5, #+52]
   \       0x3E   0x....'....        BL       mbedtls_ssl_session_free
   6305                  mbedtls_free( ssl->session );
   \       0x42   0x6B68             LDR      R0,[R5, #+52]
   \       0x44   0x....'....        BL       mbedtls_free
   6306              }
   6307              ssl->session = ssl->session_negotiate;
   \                     ??mbedtls_ssl_handshake_wrapup_1: (+1)
   \       0x48   0x6BA8             LDR      R0,[R5, #+56]
   \       0x4A   0x6368             STR      R0,[R5, #+52]
   6308              ssl->session_negotiate = NULL;
   \       0x4C   0x2000             MOVS     R0,#+0
   \       0x4E   0x63A8             STR      R0,[R5, #+56]
   6309          
   6310              /*
   6311               * Add cache entry
   6312               */
   6313              if( ssl->conf->f_set_cache != NULL &&
   6314                  ssl->session->id_len != 0 &&
   6315                  resume == 0 )
   \       0x50   0x6828             LDR      R0,[R5, #+0]
   \       0x52   0x6A40             LDR      R0,[R0, #+36]
   \       0x54   0x2800             CMP      R0,#+0
   \       0x56   0xD017             BEQ.N    ??mbedtls_ssl_handshake_wrapup_2
   \       0x58   0x6B68             LDR      R0,[R5, #+52]
   \       0x5A   0x6880             LDR      R0,[R0, #+8]
   \       0x5C   0x2800             CMP      R0,#+0
   \       0x5E   0xD013             BEQ.N    ??mbedtls_ssl_handshake_wrapup_2
   \       0x60   0x2C00             CMP      R4,#+0
   \       0x62   0xD111             BNE.N    ??mbedtls_ssl_handshake_wrapup_2
   6316              {
   6317                  if( ssl->conf->f_set_cache( ssl->conf->p_cache, ssl->session ) != 0 )
   \       0x64   0x6B69             LDR      R1,[R5, #+52]
   \       0x66   0x6828             LDR      R0,[R5, #+0]
   \       0x68   0x6A80             LDR      R0,[R0, #+40]
   \       0x6A   0x682A             LDR      R2,[R5, #+0]
   \       0x6C   0x6A52             LDR      R2,[R2, #+36]
   \       0x6E   0x4790             BLX      R2
   \       0x70   0x2800             CMP      R0,#+0
   \       0x72   0xD009             BEQ.N    ??mbedtls_ssl_handshake_wrapup_2
   6318                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "cache did not store session" ) );
   \       0x74   0x....'....        LDR.W    R0,??DataTable62
   \       0x78   0x9000             STR      R0,[SP, #+0]
   \       0x7A   0xF641 0x03AE      MOVW     R3,#+6318
   \       0x7E   0x4632             MOV      R2,R6
   \       0x80   0x2101             MOVS     R1,#+1
   \       0x82   0x4628             MOV      R0,R5
   \       0x84   0x....'....        BL       mbedtls_debug_print_msg
   6319              }
   6320          
   6321          #if defined(MBEDTLS_SSL_PROTO_DTLS)
   6322              if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM &&
   6323                  ssl->handshake->flight != NULL )
   \                     ??mbedtls_ssl_handshake_wrapup_2: (+1)
   \       0x88   0x6828             LDR      R0,[R5, #+0]
   \       0x8A   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \       0x8E   0xF3C0 0x0040      UBFX     R0,R0,#+1,#+1
   \       0x92   0x2800             CMP      R0,#+0
   \       0x94   0xD013             BEQ.N    ??mbedtls_ssl_handshake_wrapup_3
   \       0x96   0x6BE8             LDR      R0,[R5, #+60]
   \       0x98   0xF8D0 0x01EC      LDR      R0,[R0, #+492]
   \       0x9C   0x2800             CMP      R0,#+0
   \       0x9E   0xD00E             BEQ.N    ??mbedtls_ssl_handshake_wrapup_3
   6324              {
   6325                  /* Cancel handshake timer */
   6326                  ssl_set_timer( ssl, 0 );
   \       0xA0   0x2100             MOVS     R1,#+0
   \       0xA2   0x4628             MOV      R0,R5
   \       0xA4   0x....'....        BL       ssl_set_timer
   6327          
   6328                  /* Keep last flight around in case we need to resend it:
   6329                   * we need the handshake and transform structures for that */
   6330                  MBEDTLS_SSL_DEBUG_MSG( 3, ( "skip freeing handshake and transform" ) );
   \       0xA8   0x....'....        LDR.W    R0,??DataTable62_1
   \       0xAC   0x9000             STR      R0,[SP, #+0]
   \       0xAE   0xF641 0x03BA      MOVW     R3,#+6330
   \       0xB2   0x4632             MOV      R2,R6
   \       0xB4   0x2103             MOVS     R1,#+3
   \       0xB6   0x4628             MOV      R0,R5
   \       0xB8   0x....'....        BL       mbedtls_debug_print_msg
   \       0xBC   0xE002             B.N      ??mbedtls_ssl_handshake_wrapup_4
   6331              }
   6332              else
   6333          #endif
   6334                  ssl_handshake_wrapup_free_hs_transform( ssl );
   \                     ??mbedtls_ssl_handshake_wrapup_3: (+1)
   \       0xBE   0x4628             MOV      R0,R5
   \       0xC0   0x....'....        BL       ssl_handshake_wrapup_free_hs_transform
   6335          
   6336              ssl->state++;
   \                     ??mbedtls_ssl_handshake_wrapup_4: (+1)
   \       0xC4   0x6868             LDR      R0,[R5, #+4]
   \       0xC6   0x1C40             ADDS     R0,R0,#+1
   \       0xC8   0x6068             STR      R0,[R5, #+4]
   6337          
   6338              MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup" ) );
   \       0xCA   0x....'....        LDR.W    R0,??DataTable63
   \       0xCE   0x9000             STR      R0,[SP, #+0]
   \       0xD0   0xF641 0x03C2      MOVW     R3,#+6338
   \       0xD4   0x4632             MOV      R2,R6
   \       0xD6   0x2103             MOVS     R1,#+3
   \       0xD8   0x4628             MOV      R0,R5
   \       0xDA   0x....'....        BL       mbedtls_debug_print_msg
   6339          }
   \       0xDE   0xBD73             POP      {R0,R1,R4-R6,PC}  ;; return
   6340          

   \                                 In section .text, align 2, keep-with-next
   6341          int mbedtls_ssl_write_finished( mbedtls_ssl_context *ssl )
   6342          {
   \                     mbedtls_ssl_write_finished: (+1)
   \        0x0   0xB57C             PUSH     {R2-R6,LR}
   \        0x2   0x4604             MOV      R4,R0
   6343              int ret, hash_len;
   6344          
   6345              MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write finished" ) );
   \        0x4   0x....'....        LDR.W    R6,??DataTable55_5
   \        0x8   0x....'....        LDR.W    R0,??DataTable63_1
   \        0xC   0x9000             STR      R0,[SP, #+0]
   \        0xE   0xF641 0x03C9      MOVW     R3,#+6345
   \       0x12   0x4632             MOV      R2,R6
   \       0x14   0x2102             MOVS     R1,#+2
   \       0x16   0x4620             MOV      R0,R4
   \       0x18   0x....'....        BL       mbedtls_debug_print_msg
   6346          
   6347              ssl_update_out_pointers( ssl, ssl->transform_negotiate );
   \       0x1C   0x6CE1             LDR      R1,[R4, #+76]
   \       0x1E   0x4620             MOV      R0,R4
   \       0x20   0x....'....        BL       ssl_update_out_pointers
   6348          
   6349              ssl->handshake->calc_finished( ssl, ssl->out_msg + 4, ssl->conf->endpoint );
   \       0x24   0x6820             LDR      R0,[R4, #+0]
   \       0x26   0xF890 0x20CC      LDRB     R2,[R0, #+204]
   \       0x2A   0xF002 0x0201      AND      R2,R2,#0x1
   \       0x2E   0xF8D4 0x00C4      LDR      R0,[R4, #+196]
   \       0x32   0x1D01             ADDS     R1,R0,#+4
   \       0x34   0x4620             MOV      R0,R4
   \       0x36   0x6BE3             LDR      R3,[R4, #+60]
   \       0x38   0xF8D3 0x3450      LDR      R3,[R3, #+1104]
   \       0x3C   0x4798             BLX      R3
   6350          
   6351              /*
   6352               * RFC 5246 7.4.9 (Page 63) says 12 is the default length and ciphersuites
   6353               * may define some other value. Currently (early 2016), no defined
   6354               * ciphersuite does this (and this is unlikely to change as activity has
   6355               * moved to TLS 1.3 now) so we can keep the hardcoded 12 here.
   6356               */
   6357              hash_len = ( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ) ? 36 : 12;
   \       0x3E   0x6960             LDR      R0,[R4, #+20]
   \       0x40   0x2800             CMP      R0,#+0
   \       0x42   0xD101             BNE.N    ??mbedtls_ssl_write_finished_0
   \       0x44   0x2524             MOVS     R5,#+36
   \       0x46   0xE000             B.N      ??mbedtls_ssl_write_finished_1
   \                     ??mbedtls_ssl_write_finished_0: (+1)
   \       0x48   0x250C             MOVS     R5,#+12
   6358          
   6359          #if defined(MBEDTLS_SSL_RENEGOTIATION)
   6360              ssl->verify_data_len = hash_len;
   \                     ??mbedtls_ssl_write_finished_1: (+1)
   \       0x4A   0xF8C4 0x50F8      STR      R5,[R4, #+248]
   6361              memcpy( ssl->own_verify_data, ssl->out_msg + 4, hash_len );
   \       0x4E   0x462A             MOV      R2,R5
   \       0x50   0xF8D4 0x00C4      LDR      R0,[R4, #+196]
   \       0x54   0x1D01             ADDS     R1,R0,#+4
   \       0x56   0xF104 0x00FC      ADD      R0,R4,#+252
   \       0x5A   0x....'....        BL       __aeabi_memcpy
   6362          #endif
   6363          
   6364              ssl->out_msglen  = 4 + hash_len;
   \       0x5E   0x1D2D             ADDS     R5,R5,#+4
   \       0x60   0xF8C4 0x50CC      STR      R5,[R4, #+204]
   6365              ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
   \       0x64   0x2016             MOVS     R0,#+22
   \       0x66   0xF8C4 0x00C8      STR      R0,[R4, #+200]
   6366              ssl->out_msg[0]  = MBEDTLS_SSL_HS_FINISHED;
   \       0x6A   0x2014             MOVS     R0,#+20
   \       0x6C   0xF8D4 0x10C4      LDR      R1,[R4, #+196]
   \       0x70   0x7008             STRB     R0,[R1, #+0]
   6367          
   6368              /*
   6369               * In case of session resuming, invert the client and server
   6370               * ChangeCipherSpec messages order.
   6371               */
   6372              if( ssl->handshake->resume != 0 )
   \       0x72   0x6BE0             LDR      R0,[R4, #+60]
   \       0x74   0xF8D0 0x06C0      LDR      R0,[R0, #+1728]
   \       0x78   0x2800             CMP      R0,#+0
   \       0x7A   0xD00E             BEQ.N    ??mbedtls_ssl_write_finished_2
   6373              {
   6374          #if defined(MBEDTLS_SSL_CLI_C)
   6375                  if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
   \       0x7C   0x6820             LDR      R0,[R4, #+0]
   \       0x7E   0xF890 0x00CC      LDRB     R0,[R0, #+204]
   \       0x82   0x07C0             LSLS     R0,R0,#+31
   \       0x84   0xD401             BMI.N    ??mbedtls_ssl_write_finished_3
   6376                      ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
   \       0x86   0x200F             MOVS     R0,#+15
   \       0x88   0x6060             STR      R0,[R4, #+4]
   6377          #endif
   6378          #if defined(MBEDTLS_SSL_SRV_C)
   6379                  if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
   \                     ??mbedtls_ssl_write_finished_3: (+1)
   \       0x8A   0x6820             LDR      R0,[R4, #+0]
   \       0x8C   0xF890 0x00CC      LDRB     R0,[R0, #+204]
   \       0x90   0x07C0             LSLS     R0,R0,#+31
   \       0x92   0xD505             BPL.N    ??mbedtls_ssl_write_finished_4
   6380                      ssl->state = MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC;
   \       0x94   0x200A             MOVS     R0,#+10
   \       0x96   0x6060             STR      R0,[R4, #+4]
   \       0x98   0xE002             B.N      ??mbedtls_ssl_write_finished_4
   6381          #endif
   6382              }
   6383              else
   6384                  ssl->state++;
   \                     ??mbedtls_ssl_write_finished_2: (+1)
   \       0x9A   0x6860             LDR      R0,[R4, #+4]
   \       0x9C   0x1C40             ADDS     R0,R0,#+1
   \       0x9E   0x6060             STR      R0,[R4, #+4]
   6385          
   6386              /*
   6387               * Switch to our negotiated transform and session parameters for outbound
   6388               * data.
   6389               */
   6390              MBEDTLS_SSL_DEBUG_MSG( 3, ( "switching to new transform spec for outbound data" ) );
   \                     ??mbedtls_ssl_write_finished_4: (+1)
   \       0xA0   0x....'....        LDR.W    R0,??DataTable63_2
   \       0xA4   0x9000             STR      R0,[SP, #+0]
   \       0xA6   0xF641 0x03F6      MOVW     R3,#+6390
   \       0xAA   0x4632             MOV      R2,R6
   \       0xAC   0x2103             MOVS     R1,#+3
   \       0xAE   0x4620             MOV      R0,R4
   \       0xB0   0x....'....        BL       mbedtls_debug_print_msg
   6391          
   6392          #if defined(MBEDTLS_SSL_PROTO_DTLS)
   6393              if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
   \       0xB4   0x6820             LDR      R0,[R4, #+0]
   \       0xB6   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \       0xBA   0xF3C0 0x0040      UBFX     R0,R0,#+1,#+1
   \       0xBE   0x2800             CMP      R0,#+0
   \       0xC0   0xD023             BEQ.N    ??mbedtls_ssl_write_finished_5
   6394              {
   6395                  unsigned char i;
   6396          
   6397                  /* Remember current epoch settings for resending */
   6398                  ssl->handshake->alt_transform_out = ssl->transform_out;
   \       0xC2   0x6C60             LDR      R0,[R4, #+68]
   \       0xC4   0x6BE1             LDR      R1,[R4, #+60]
   \       0xC6   0xF8C1 0x01FC      STR      R0,[R1, #+508]
   6399                  memcpy( ssl->handshake->alt_out_ctr, ssl->cur_out_ctr, 8 );
   \       0xCA   0x2208             MOVS     R2,#+8
   \       0xCC   0xF104 0x01D4      ADD      R1,R4,#+212
   \       0xD0   0x6BE0             LDR      R0,[R4, #+60]
   \       0xD2   0xF500 0x7000      ADD      R0,R0,#+512
   \       0xD6   0x....'....        BL       __aeabi_memcpy4
   6400          
   6401                  /* Set sequence_number to zero */
   6402                  memset( ssl->cur_out_ctr + 2, 0, 6 );
   \       0xDA   0x2200             MOVS     R2,#+0
   \       0xDC   0x2106             MOVS     R1,#+6
   \       0xDE   0xF104 0x00D6      ADD      R0,R4,#+214
   \       0xE2   0x....'....        BL       __aeabi_memset
   6403          
   6404                  /* Increment epoch */
   6405                  for( i = 2; i > 0; i-- )
   \       0xE6   0x2102             MOVS     R1,#+2
   \                     ??mbedtls_ssl_write_finished_6: (+1)
   \       0xE8   0x2900             CMP      R1,#+0
   \       0xEA   0xD059             BEQ.N    ??mbedtls_ssl_write_finished_7
   6406                      if( ++ssl->cur_out_ctr[i - 1] != 0 )
   \       0xEC   0x1860             ADDS     R0,R4,R1
   \       0xEE   0xF890 0x00D3      LDRB     R0,[R0, #+211]
   \       0xF2   0x1C40             ADDS     R0,R0,#+1
   \       0xF4   0x1862             ADDS     R2,R4,R1
   \       0xF6   0xF882 0x00D3      STRB     R0,[R2, #+211]
   \       0xFA   0x1860             ADDS     R0,R4,R1
   \       0xFC   0xF890 0x00D3      LDRB     R0,[R0, #+211]
   \      0x100   0x2800             CMP      R0,#+0
   \      0x102   0xD14D             BNE.N    ??mbedtls_ssl_write_finished_7
   \      0x104   0x1E49             SUBS     R1,R1,#+1
   \      0x106   0xB2C9             UXTB     R1,R1
   \      0x108   0xE7EE             B.N      ??mbedtls_ssl_write_finished_6
   6407                          break;
   6408          
   6409                  /* The loop goes to its end iff the counter is wrapping */
   6410                  if( i == 0 )
   6411                  {
   6412                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "DTLS epoch would wrap" ) );
   6413                      return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
   6414                  }
   6415              }
   6416              else
   6417          #endif /* MBEDTLS_SSL_PROTO_DTLS */
   6418              memset( ssl->cur_out_ctr, 0, 8 );
   \                     ??mbedtls_ssl_write_finished_5: (+1)
   \      0x10A   0x2200             MOVS     R2,#+0
   \      0x10C   0x2108             MOVS     R1,#+8
   \      0x10E   0xF104 0x00D4      ADD      R0,R4,#+212
   \      0x112   0x....'....        BL       __aeabi_memset4
   6419          
   6420              ssl->transform_out = ssl->transform_negotiate;
   \                     ??mbedtls_ssl_write_finished_8: (+1)
   \      0x116   0x6CE0             LDR      R0,[R4, #+76]
   \      0x118   0x6460             STR      R0,[R4, #+68]
   6421              ssl->session_out = ssl->session_negotiate;
   \      0x11A   0x6BA0             LDR      R0,[R4, #+56]
   \      0x11C   0x6320             STR      R0,[R4, #+48]
   6422          
   6423          #if defined(MBEDTLS_SSL_HW_RECORD_ACCEL)
   6424              if( mbedtls_ssl_hw_record_activate != NULL )
   6425              {
   6426                  if( ( ret = mbedtls_ssl_hw_record_activate( ssl, MBEDTLS_SSL_CHANNEL_OUTBOUND ) ) != 0 )
   6427                  {
   6428                      MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_hw_record_activate", ret );
   6429                      return( MBEDTLS_ERR_SSL_HW_ACCEL_FAILED );
   6430                  }
   6431              }
   6432          #endif
   6433          
   6434          #if defined(MBEDTLS_SSL_PROTO_DTLS)
   6435              if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
   \      0x11E   0x6820             LDR      R0,[R4, #+0]
   \      0x120   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \      0x124   0xF3C0 0x0040      UBFX     R0,R0,#+1,#+1
   \      0x128   0x2800             CMP      R0,#+0
   \      0x12A   0xD002             BEQ.N    ??mbedtls_ssl_write_finished_9
   6436                  mbedtls_ssl_send_flight_completed( ssl );
   \      0x12C   0x4620             MOV      R0,R4
   \      0x12E   0x....'....        BL       mbedtls_ssl_send_flight_completed
   6437          #endif
   6438          
   6439              if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
   \                     ??mbedtls_ssl_write_finished_9: (+1)
   \      0x132   0x4620             MOV      R0,R4
   \      0x134   0x....'....        BL       mbedtls_ssl_write_handshake_msg
   \      0x138   0x0005             MOVS     R5,R0
   \      0x13A   0xD00C             BEQ.N    ??mbedtls_ssl_write_finished_10
   6440              {
   6441                  MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_handshake_msg", ret );
   \      0x13C   0x9501             STR      R5,[SP, #+4]
   \      0x13E   0x....'....        LDR.W    R0,??DataTable55_6
   \      0x142   0x9000             STR      R0,[SP, #+0]
   \      0x144   0xF641 0x1329      MOVW     R3,#+6441
   \      0x148   0x4632             MOV      R2,R6
   \      0x14A   0x2101             MOVS     R1,#+1
   \      0x14C   0x4620             MOV      R0,R4
   \      0x14E   0x....'....        BL       mbedtls_debug_print_ret
   6442                  return( ret );
   \      0x152   0x4628             MOV      R0,R5
   \      0x154   0xBD76             POP      {R1,R2,R4-R6,PC}
   6443              }
   6444          
   6445          #if defined(MBEDTLS_SSL_PROTO_DTLS)
   6446              if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM &&
   6447                  ( ret = mbedtls_ssl_flight_transmit( ssl ) ) != 0 )
   \                     ??mbedtls_ssl_write_finished_10: (+1)
   \      0x156   0x6820             LDR      R0,[R4, #+0]
   \      0x158   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \      0x15C   0xF3C0 0x0040      UBFX     R0,R0,#+1,#+1
   \      0x160   0x2800             CMP      R0,#+0
   \      0x162   0xD011             BEQ.N    ??mbedtls_ssl_write_finished_11
   \      0x164   0x4620             MOV      R0,R4
   \      0x166   0x....'....        BL       mbedtls_ssl_flight_transmit
   \      0x16A   0x0005             MOVS     R5,R0
   \      0x16C   0xD00C             BEQ.N    ??mbedtls_ssl_write_finished_11
   6448              {
   6449                  MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_flight_transmit", ret );
   \      0x16E   0x9501             STR      R5,[SP, #+4]
   \      0x170   0x....'....        LDR.W    R0,??DataTable64
   \      0x174   0x9000             STR      R0,[SP, #+0]
   \      0x176   0xF641 0x1331      MOVW     R3,#+6449
   \      0x17A   0x4632             MOV      R2,R6
   \      0x17C   0x2101             MOVS     R1,#+1
   \      0x17E   0x4620             MOV      R0,R4
   \      0x180   0x....'....        BL       mbedtls_debug_print_ret
   6450                  return( ret );
   \      0x184   0x4628             MOV      R0,R5
   \      0x186   0xBD76             POP      {R1,R2,R4-R6,PC}
   6451              }
   6452          #endif
   6453          
   6454              MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write finished" ) );
   \                     ??mbedtls_ssl_write_finished_11: (+1)
   \      0x188   0x....'....        LDR.W    R0,??DataTable64_1
   \      0x18C   0x9000             STR      R0,[SP, #+0]
   \      0x18E   0xF641 0x1336      MOVW     R3,#+6454
   \      0x192   0x4632             MOV      R2,R6
   \      0x194   0x2102             MOVS     R1,#+2
   \      0x196   0x4620             MOV      R0,R4
   \      0x198   0x....'....        BL       mbedtls_debug_print_msg
   6455          
   6456              return( 0 );
   \      0x19C   0x2000             MOVS     R0,#+0
   \      0x19E   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
   \                     ??mbedtls_ssl_write_finished_7: (+1)
   \      0x1A0   0x2900             CMP      R1,#+0
   \      0x1A2   0xD1B8             BNE.N    ??mbedtls_ssl_write_finished_8
   \      0x1A4   0x....'....        LDR.W    R0,??DataTable56_3
   \      0x1A8   0x9000             STR      R0,[SP, #+0]
   \      0x1AA   0xF641 0x130C      MOVW     R3,#+6412
   \      0x1AE   0x4632             MOV      R2,R6
   \      0x1B0   0x2101             MOVS     R1,#+1
   \      0x1B2   0x4620             MOV      R0,R4
   \      0x1B4   0x....'....        BL       mbedtls_debug_print_msg
   \      0x1B8   0x....'....        LDR.W    R0,??DataTable56_4  ;; 0xffff9480
   \      0x1BC   0xBD76             POP      {R1,R2,R4-R6,PC}
   6457          }
   6458          
   6459          #if defined(MBEDTLS_SSL_PROTO_SSL3)
   6460          #define SSL_MAX_HASH_LEN 36
   6461          #else
   6462          #define SSL_MAX_HASH_LEN 12
   6463          #endif
   6464          

   \                                 In section .text, align 2, keep-with-next
   6465          int mbedtls_ssl_parse_finished( mbedtls_ssl_context *ssl )
   6466          {
   \                     mbedtls_ssl_parse_finished: (+1)
   \        0x0   0xB578             PUSH     {R3-R6,LR}
   \        0x2   0xB085             SUB      SP,SP,#+20
   \        0x4   0x4605             MOV      R5,R0
   6467              int ret;
   6468              unsigned int hash_len;
   6469              unsigned char buf[SSL_MAX_HASH_LEN];
   6470          
   6471              MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse finished" ) );
   \        0x6   0x....             LDR.N    R6,??DataTable55_5
   \        0x8   0x....'....        LDR.W    R0,??DataTable64_2
   \        0xC   0x9000             STR      R0,[SP, #+0]
   \        0xE   0xF641 0x1347      MOVW     R3,#+6471
   \       0x12   0x4632             MOV      R2,R6
   \       0x14   0x2102             MOVS     R1,#+2
   \       0x16   0x4628             MOV      R0,R5
   \       0x18   0x....'....        BL       mbedtls_debug_print_msg
   6472          
   6473              ssl->handshake->calc_finished( ssl, buf, ssl->conf->endpoint ^ 1 );
   \       0x1C   0x6828             LDR      R0,[R5, #+0]
   \       0x1E   0xF890 0x20CC      LDRB     R2,[R0, #+204]
   \       0x22   0xF002 0x0201      AND      R2,R2,#0x1
   \       0x26   0xF082 0x0201      EOR      R2,R2,#0x1
   \       0x2A   0xA902             ADD      R1,SP,#+8
   \       0x2C   0x4628             MOV      R0,R5
   \       0x2E   0x6BEB             LDR      R3,[R5, #+60]
   \       0x30   0xF8D3 0x3450      LDR      R3,[R3, #+1104]
   \       0x34   0x4798             BLX      R3
   6474          
   6475              if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   \       0x36   0x2101             MOVS     R1,#+1
   \       0x38   0x4628             MOV      R0,R5
   \       0x3A   0x....'....        BL       mbedtls_ssl_read_record
   \       0x3E   0x0004             MOVS     R4,R0
   \       0x40   0xD00C             BEQ.N    ??mbedtls_ssl_parse_finished_0
   6476              {
   6477                  MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
   \       0x42   0x9401             STR      R4,[SP, #+4]
   \       0x44   0x....'....        LDR.W    R0,??DataTable65
   \       0x48   0x9000             STR      R0,[SP, #+0]
   \       0x4A   0xF641 0x134D      MOVW     R3,#+6477
   \       0x4E   0x4632             MOV      R2,R6
   \       0x50   0x2101             MOVS     R1,#+1
   \       0x52   0x4628             MOV      R0,R5
   \       0x54   0x....'....        BL       mbedtls_debug_print_ret
   6478                  return( ret );
   \       0x58   0x4620             MOV      R0,R4
   \       0x5A   0xE084             B.N      ??mbedtls_ssl_parse_finished_1
   6479              }
   6480          
   6481              if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
   \                     ??mbedtls_ssl_parse_finished_0: (+1)
   \       0x5C   0x6FA8             LDR      R0,[R5, #+120]
   \       0x5E   0x2816             CMP      R0,#+22
   \       0x60   0xD011             BEQ.N    ??mbedtls_ssl_parse_finished_2
   6482              {
   6483                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
   \       0x62   0x....'....        LDR.W    R0,??DataTable65_1
   \       0x66   0x9000             STR      R0,[SP, #+0]
   \       0x68   0xF641 0x1353      MOVW     R3,#+6483
   \       0x6C   0x4632             MOV      R2,R6
   \       0x6E   0x2101             MOVS     R1,#+1
   \       0x70   0x4628             MOV      R0,R5
   \       0x72   0x....'....        BL       mbedtls_debug_print_msg
   6484                  mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   6485                                                  MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
   \       0x76   0x220A             MOVS     R2,#+10
   \       0x78   0x2102             MOVS     R1,#+2
   \       0x7A   0x4628             MOV      R0,R5
   \       0x7C   0x....'....        BL       mbedtls_ssl_send_alert_message
   6486                  return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
   \       0x80   0x....'....        LDR.W    R0,??DataTable65_2  ;; 0xffff8900
   \       0x84   0xE06F             B.N      ??mbedtls_ssl_parse_finished_1
   6487              }
   6488          
   6489              /* There is currently no ciphersuite using another length with TLS 1.2 */
   6490          #if defined(MBEDTLS_SSL_PROTO_SSL3)
   6491              if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 )
   6492                  hash_len = 36;
   6493              else
   6494          #endif
   6495                  hash_len = 12;
   6496          
   6497              if( ssl->in_msg[0] != MBEDTLS_SSL_HS_FINISHED ||
   6498                  ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) + hash_len )
   \                     ??mbedtls_ssl_parse_finished_2: (+1)
   \       0x86   0x6F28             LDR      R0,[R5, #+112]
   \       0x88   0x7800             LDRB     R0,[R0, #+0]
   \       0x8A   0x2814             CMP      R0,#+20
   \       0x8C   0xD107             BNE.N    ??mbedtls_ssl_parse_finished_3
   \       0x8E   0x4628             MOV      R0,R5
   \       0x90   0x....'....        BL       mbedtls_ssl_hs_hdr_len
   \       0x94   0xF8D5 0x10A0      LDR      R1,[R5, #+160]
   \       0x98   0x300C             ADDS     R0,R0,#+12
   \       0x9A   0x4281             CMP      R1,R0
   \       0x9C   0xD011             BEQ.N    ??mbedtls_ssl_parse_finished_4
   6499              {
   6500                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
   \                     ??mbedtls_ssl_parse_finished_3: (+1)
   \       0x9E   0x....'....        LDR.W    R0,??DataTable65_1
   \       0xA2   0x9000             STR      R0,[SP, #+0]
   \       0xA4   0xF641 0x1364      MOVW     R3,#+6500
   \       0xA8   0x4632             MOV      R2,R6
   \       0xAA   0x2101             MOVS     R1,#+1
   \       0xAC   0x4628             MOV      R0,R5
   \       0xAE   0x....'....        BL       mbedtls_debug_print_msg
   6501                  mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   6502                                                  MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
   \       0xB2   0x2232             MOVS     R2,#+50
   \       0xB4   0x2102             MOVS     R1,#+2
   \       0xB6   0x4628             MOV      R0,R5
   \       0xB8   0x....'....        BL       mbedtls_ssl_send_alert_message
   6503                  return( MBEDTLS_ERR_SSL_BAD_HS_FINISHED );
   \       0xBC   0x....'....        LDR.W    R0,??DataTable66  ;; 0xffff8180
   \       0xC0   0xE051             B.N      ??mbedtls_ssl_parse_finished_1
   6504              }
   6505          
   6506              if( mbedtls_ssl_safer_memcmp( ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl ),
   6507                                buf, hash_len ) != 0 )
   \                     ??mbedtls_ssl_parse_finished_4: (+1)
   \       0xC2   0x4628             MOV      R0,R5
   \       0xC4   0x....'....        BL       mbedtls_ssl_hs_hdr_len
   \       0xC8   0x220C             MOVS     R2,#+12
   \       0xCA   0xA902             ADD      R1,SP,#+8
   \       0xCC   0x6F2B             LDR      R3,[R5, #+112]
   \       0xCE   0x4418             ADD      R0,R3,R0
   \       0xD0   0x....'....        BL       mbedtls_ssl_safer_memcmp
   \       0xD4   0x2800             CMP      R0,#+0
   \       0xD6   0xD011             BEQ.N    ??mbedtls_ssl_parse_finished_5
   6508              {
   6509                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
   \       0xD8   0x....'....        LDR.W    R0,??DataTable65_1
   \       0xDC   0x9000             STR      R0,[SP, #+0]
   \       0xDE   0xF641 0x136D      MOVW     R3,#+6509
   \       0xE2   0x4632             MOV      R2,R6
   \       0xE4   0x2101             MOVS     R1,#+1
   \       0xE6   0x4628             MOV      R0,R5
   \       0xE8   0x....'....        BL       mbedtls_debug_print_msg
   6510                  mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   6511                                                  MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
   \       0xEC   0x2232             MOVS     R2,#+50
   \       0xEE   0x2102             MOVS     R1,#+2
   \       0xF0   0x4628             MOV      R0,R5
   \       0xF2   0x....'....        BL       mbedtls_ssl_send_alert_message
   6512                  return( MBEDTLS_ERR_SSL_BAD_HS_FINISHED );
   \       0xF6   0x....'....        LDR.W    R0,??DataTable66  ;; 0xffff8180
   \       0xFA   0xE034             B.N      ??mbedtls_ssl_parse_finished_1
   6513              }
   6514          
   6515          #if defined(MBEDTLS_SSL_RENEGOTIATION)
   6516              ssl->verify_data_len = hash_len;
   \                     ??mbedtls_ssl_parse_finished_5: (+1)
   \       0xFC   0x200C             MOVS     R0,#+12
   \       0xFE   0xF8C5 0x00F8      STR      R0,[R5, #+248]
   6517              memcpy( ssl->peer_verify_data, buf, hash_len );
   \      0x102   0x4602             MOV      R2,R0
   \      0x104   0xA902             ADD      R1,SP,#+8
   \      0x106   0xF505 0x7084      ADD      R0,R5,#+264
   \      0x10A   0x....'....        BL       __aeabi_memcpy4
   6518          #endif
   6519          
   6520              if( ssl->handshake->resume != 0 )
   \      0x10E   0x6BE8             LDR      R0,[R5, #+60]
   \      0x110   0xF8D0 0x06C0      LDR      R0,[R0, #+1728]
   \      0x114   0x2800             CMP      R0,#+0
   \      0x116   0xD00E             BEQ.N    ??mbedtls_ssl_parse_finished_6
   6521              {
   6522          #if defined(MBEDTLS_SSL_CLI_C)
   6523                  if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
   \      0x118   0x6828             LDR      R0,[R5, #+0]
   \      0x11A   0xF890 0x00CC      LDRB     R0,[R0, #+204]
   \      0x11E   0x07C0             LSLS     R0,R0,#+31
   \      0x120   0xD401             BMI.N    ??mbedtls_ssl_parse_finished_7
   6524                      ssl->state = MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC;
   \      0x122   0x200A             MOVS     R0,#+10
   \      0x124   0x6068             STR      R0,[R5, #+4]
   6525          #endif
   6526          #if defined(MBEDTLS_SSL_SRV_C)
   6527                  if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
   \                     ??mbedtls_ssl_parse_finished_7: (+1)
   \      0x126   0x6828             LDR      R0,[R5, #+0]
   \      0x128   0xF890 0x00CC      LDRB     R0,[R0, #+204]
   \      0x12C   0x07C0             LSLS     R0,R0,#+31
   \      0x12E   0xD505             BPL.N    ??mbedtls_ssl_parse_finished_8
   6528                      ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
   \      0x130   0x200F             MOVS     R0,#+15
   \      0x132   0x6068             STR      R0,[R5, #+4]
   \      0x134   0xE002             B.N      ??mbedtls_ssl_parse_finished_8
   6529          #endif
   6530              }
   6531              else
   6532                  ssl->state++;
   \                     ??mbedtls_ssl_parse_finished_6: (+1)
   \      0x136   0x6868             LDR      R0,[R5, #+4]
   \      0x138   0x1C40             ADDS     R0,R0,#+1
   \      0x13A   0x6068             STR      R0,[R5, #+4]
   6533          
   6534          #if defined(MBEDTLS_SSL_PROTO_DTLS)
   6535              if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
   \                     ??mbedtls_ssl_parse_finished_8: (+1)
   \      0x13C   0x6828             LDR      R0,[R5, #+0]
   \      0x13E   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \      0x142   0xF3C0 0x0040      UBFX     R0,R0,#+1,#+1
   \      0x146   0x2800             CMP      R0,#+0
   \      0x148   0xD002             BEQ.N    ??mbedtls_ssl_parse_finished_9
   6536                  mbedtls_ssl_recv_flight_completed( ssl );
   \      0x14A   0x4628             MOV      R0,R5
   \      0x14C   0x....'....        BL       mbedtls_ssl_recv_flight_completed
   6537          #endif
   6538          
   6539              MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse finished" ) );
   \                     ??mbedtls_ssl_parse_finished_9: (+1)
   \      0x150   0x....'....        LDR.W    R0,??DataTable67
   \      0x154   0x9000             STR      R0,[SP, #+0]
   \      0x156   0xF641 0x138B      MOVW     R3,#+6539
   \      0x15A   0x4632             MOV      R2,R6
   \      0x15C   0x2102             MOVS     R1,#+2
   \      0x15E   0x4628             MOV      R0,R5
   \      0x160   0x....'....        BL       mbedtls_debug_print_msg
   6540          
   6541              return( 0 );
   \      0x164   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_ssl_parse_finished_1: (+1)
   \      0x166   0xB006             ADD      SP,SP,#+24
   \      0x168   0xBD70             POP      {R4-R6,PC}       ;; return
   6542          }
   6543          

   \                                 In section .text, align 2, keep-with-next
   6544          static void ssl_handshake_params_init( mbedtls_ssl_handshake_params *handshake )
   6545          {
   \                     ssl_handshake_params_init: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x4604             MOV      R4,R0
   6546              memset( handshake, 0, sizeof( mbedtls_ssl_handshake_params ) );
   \        0x4   0x2200             MOVS     R2,#+0
   \        0x6   0xF44F 0x61DB      MOV      R1,#+1752
   \        0xA   0x....'....        BL       __aeabi_memset4
   6547          
   6548          #if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1) || \
   6549              defined(MBEDTLS_SSL_PROTO_TLS1_1)
   6550               mbedtls_md5_init(   &handshake->fin_md5  );
   \        0xE   0xF504 0x7014      ADD      R0,R4,#+592
   \       0x12   0x....'....        BL       mbedtls_md5_init
   6551              mbedtls_sha1_init(   &handshake->fin_sha1 );
   \       0x16   0xF504 0x702A      ADD      R0,R4,#+680
   \       0x1A   0x....'....        BL       mbedtls_sha1_init
   6552               mbedtls_md5_starts_ret( &handshake->fin_md5  );
   \       0x1E   0xF504 0x7014      ADD      R0,R4,#+592
   \       0x22   0x....'....        BL       mbedtls_md5_starts_ret
   6553              mbedtls_sha1_starts_ret( &handshake->fin_sha1 );
   \       0x26   0xF504 0x702A      ADD      R0,R4,#+680
   \       0x2A   0x....'....        BL       mbedtls_sha1_starts_ret
   6554          #endif
   6555          #if defined(MBEDTLS_SSL_PROTO_TLS1_2)
   6556          #if defined(MBEDTLS_SHA256_C)
   6557              mbedtls_sha256_init(   &handshake->fin_sha256    );
   \       0x2E   0xF504 0x7041      ADD      R0,R4,#+772
   \       0x32   0x....'....        BL       mbedtls_sha256_init
   6558              mbedtls_sha256_starts_ret( &handshake->fin_sha256, 0 );
   \       0x36   0x2100             MOVS     R1,#+0
   \       0x38   0xF504 0x7041      ADD      R0,R4,#+772
   \       0x3C   0x....'....        BL       mbedtls_sha256_starts_ret
   6559          #endif
   6560          #if defined(MBEDTLS_SHA512_C)
   6561              mbedtls_sha512_init(   &handshake->fin_sha512    );
   \       0x40   0xF504 0x705C      ADD      R0,R4,#+880
   \       0x44   0x....'....        BL       mbedtls_sha512_init
   6562              mbedtls_sha512_starts_ret( &handshake->fin_sha512, 1 );
   \       0x48   0x2101             MOVS     R1,#+1
   \       0x4A   0xF504 0x705C      ADD      R0,R4,#+880
   \       0x4E   0x....'....        BL       mbedtls_sha512_starts_ret
   6563          #endif
   6564          #endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
   6565          
   6566              handshake->update_checksum = ssl_update_checksum_start;
   \       0x52   0x....'....        LDR.W    R0,??DataTable68
   \       0x56   0xF8C4 0x0448      STR      R0,[R4, #+1096]
   6567          
   6568          #if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \
   6569              defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
   6570              mbedtls_ssl_sig_hash_set_init( &handshake->hash_algs );
   \       0x5A   0x4620             MOV      R0,R4
   \       0x5C   0x....'....        BL       mbedtls_ssl_sig_hash_set_init
   6571          #endif
   6572          
   6573          #if defined(MBEDTLS_DHM_C)
   6574              mbedtls_dhm_init( &handshake->dhm_ctx );
   \       0x60   0x1D20             ADDS     R0,R4,#+4
   \       0x62   0x....'....        BL       mbedtls_dhm_init
   6575          #endif
   6576          #if defined(MBEDTLS_ECDH_C)
   6577              mbedtls_ecdh_init( &handshake->ecdh_ctx );
   \       0x66   0xF104 0x0080      ADD      R0,R4,#+128
   \       0x6A   0x....'....        BL       mbedtls_ecdh_init
   6578          #endif
   6579          #if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
   6580              mbedtls_ecjpake_init( &handshake->ecjpake_ctx );
   6581          #if defined(MBEDTLS_SSL_CLI_C)
   6582              handshake->ecjpake_cache = NULL;
   6583              handshake->ecjpake_cache_len = 0;
   6584          #endif
   6585          #endif
   6586          
   6587          #if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
   6588              handshake->sni_authmode = MBEDTLS_SSL_VERIFY_UNSET;
   \       0x6E   0x2003             MOVS     R0,#+3
   \       0x70   0xF8C4 0x01C4      STR      R0,[R4, #+452]
   6589          #endif
   6590          }
   \       0x74   0xBD10             POP      {R4,PC}          ;; return
   6591          

   \                                 In section .text, align 2, keep-with-next
   6592          static void ssl_transform_init( mbedtls_ssl_transform *transform )
   6593          {
   \                     ssl_transform_init: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x4604             MOV      R4,R0
   6594              memset( transform, 0, sizeof(mbedtls_ssl_transform) );
   \        0x4   0x2200             MOVS     R2,#+0
   \        0x6   0x21D0             MOVS     R1,#+208
   \        0x8   0x....'....        BL       __aeabi_memset4
   6595          
   6596              mbedtls_cipher_init( &transform->cipher_ctx_enc );
   \        0xC   0xF104 0x0050      ADD      R0,R4,#+80
   \       0x10   0x....'....        BL       mbedtls_cipher_init
   6597              mbedtls_cipher_init( &transform->cipher_ctx_dec );
   \       0x14   0xF104 0x0090      ADD      R0,R4,#+144
   \       0x18   0x....'....        BL       mbedtls_cipher_init
   6598          
   6599              mbedtls_md_init( &transform->md_ctx_enc );
   \       0x1C   0xF104 0x0038      ADD      R0,R4,#+56
   \       0x20   0x....'....        BL       mbedtls_md_init
   6600              mbedtls_md_init( &transform->md_ctx_dec );
   \       0x24   0xF104 0x0044      ADD      R0,R4,#+68
   \       0x28   0xE8BD 0x4010      POP      {R4,LR}
   \       0x2C   0x....'....        B.W      mbedtls_md_init
   6601          }
   6602          

   \                                 In section .text, align 2, keep-with-next
   6603          void mbedtls_ssl_session_init( mbedtls_ssl_session *session )
   6604          {
   6605              memset( session, 0, sizeof(mbedtls_ssl_session) );
   \                     mbedtls_ssl_session_init: (+1)
   \        0x0   0x2200             MOVS     R2,#+0
   \        0x2   0x217C             MOVS     R1,#+124
   \        0x4   0x....'....        B.W      __aeabi_memset4
   6606          }
   6607          

   \                                 In section .text, align 2, keep-with-next
   6608          static int ssl_handshake_init( mbedtls_ssl_context *ssl )
   6609          {
   \                     ssl_handshake_init: (+1)
   \        0x0   0xB51C             PUSH     {R2-R4,LR}
   \        0x2   0x4604             MOV      R4,R0
   6610              /* Clear old handshake information if present */
   6611              if( ssl->transform_negotiate )
   \        0x4   0x6CE0             LDR      R0,[R4, #+76]
   \        0x6   0x2800             CMP      R0,#+0
   \        0x8   0xD001             BEQ.N    ??ssl_handshake_init_0
   6612                  mbedtls_ssl_transform_free( ssl->transform_negotiate );
   \        0xA   0x....'....        BL       mbedtls_ssl_transform_free
   6613              if( ssl->session_negotiate )
   \                     ??ssl_handshake_init_0: (+1)
   \        0xE   0x6BA0             LDR      R0,[R4, #+56]
   \       0x10   0x2800             CMP      R0,#+0
   \       0x12   0xD001             BEQ.N    ??ssl_handshake_init_1
   6614                  mbedtls_ssl_session_free( ssl->session_negotiate );
   \       0x14   0x....'....        BL       mbedtls_ssl_session_free
   6615              if( ssl->handshake )
   \                     ??ssl_handshake_init_1: (+1)
   \       0x18   0x6BE0             LDR      R0,[R4, #+60]
   \       0x1A   0x2800             CMP      R0,#+0
   \       0x1C   0xD002             BEQ.N    ??ssl_handshake_init_2
   6616                  mbedtls_ssl_handshake_free( ssl );
   \       0x1E   0x4620             MOV      R0,R4
   \       0x20   0x....'....        BL       mbedtls_ssl_handshake_free
   6617          
   6618              /*
   6619               * Either the pointers are now NULL or cleared properly and can be freed.
   6620               * Now allocate missing structures.
   6621               */
   6622              if( ssl->transform_negotiate == NULL )
   \                     ??ssl_handshake_init_2: (+1)
   \       0x24   0x6CE0             LDR      R0,[R4, #+76]
   \       0x26   0x2800             CMP      R0,#+0
   \       0x28   0xD104             BNE.N    ??ssl_handshake_init_3
   6623              {
   6624                  ssl->transform_negotiate = mbedtls_calloc( 1, sizeof(mbedtls_ssl_transform) );
   \       0x2A   0x21D0             MOVS     R1,#+208
   \       0x2C   0x2001             MOVS     R0,#+1
   \       0x2E   0x....'....        BL       mbedtls_calloc
   \       0x32   0x64E0             STR      R0,[R4, #+76]
   6625              }
   6626          
   6627              if( ssl->session_negotiate == NULL )
   \                     ??ssl_handshake_init_3: (+1)
   \       0x34   0x6BA0             LDR      R0,[R4, #+56]
   \       0x36   0x2800             CMP      R0,#+0
   \       0x38   0xD104             BNE.N    ??ssl_handshake_init_4
   6628              {
   6629                  ssl->session_negotiate = mbedtls_calloc( 1, sizeof(mbedtls_ssl_session) );
   \       0x3A   0x217C             MOVS     R1,#+124
   \       0x3C   0x2001             MOVS     R0,#+1
   \       0x3E   0x....'....        BL       mbedtls_calloc
   \       0x42   0x63A0             STR      R0,[R4, #+56]
   6630              }
   6631          
   6632              if( ssl->handshake == NULL )
   \                     ??ssl_handshake_init_4: (+1)
   \       0x44   0x6BE0             LDR      R0,[R4, #+60]
   \       0x46   0x2800             CMP      R0,#+0
   \       0x48   0xD105             BNE.N    ??ssl_handshake_init_5
   6633              {
   6634                  ssl->handshake = mbedtls_calloc( 1, sizeof(mbedtls_ssl_handshake_params) );
   \       0x4A   0xF44F 0x61DB      MOV      R1,#+1752
   \       0x4E   0x2001             MOVS     R0,#+1
   \       0x50   0x....'....        BL       mbedtls_calloc
   \       0x54   0x63E0             STR      R0,[R4, #+60]
   6635              }
   6636          
   6637              /* All pointers should exist and can be directly freed without issue */
   6638              if( ssl->handshake == NULL ||
   6639                  ssl->transform_negotiate == NULL ||
   6640                  ssl->session_negotiate == NULL )
   \                     ??ssl_handshake_init_5: (+1)
   \       0x56   0x6BE0             LDR      R0,[R4, #+60]
   \       0x58   0x2800             CMP      R0,#+0
   \       0x5A   0xD005             BEQ.N    ??ssl_handshake_init_6
   \       0x5C   0x6CE0             LDR      R0,[R4, #+76]
   \       0x5E   0x2800             CMP      R0,#+0
   \       0x60   0xD002             BEQ.N    ??ssl_handshake_init_6
   \       0x62   0x6BA0             LDR      R0,[R4, #+56]
   \       0x64   0x2800             CMP      R0,#+0
   \       0x66   0xD119             BNE.N    ??ssl_handshake_init_7
   6641              {
   6642                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc() of ssl sub-contexts failed" ) );
   \                     ??ssl_handshake_init_6: (+1)
   \       0x68   0x....'....        LDR.W    R0,??DataTable69
   \       0x6C   0x9000             STR      R0,[SP, #+0]
   \       0x6E   0xF641 0x13F2      MOVW     R3,#+6642
   \       0x72   0x....             LDR.N    R2,??DataTable55_5
   \       0x74   0x2101             MOVS     R1,#+1
   \       0x76   0x4620             MOV      R0,R4
   \       0x78   0x....'....        BL       mbedtls_debug_print_msg
   6643          
   6644                  mbedtls_free( ssl->handshake );
   \       0x7C   0x6BE0             LDR      R0,[R4, #+60]
   \       0x7E   0x....'....        BL       mbedtls_free
   6645                  mbedtls_free( ssl->transform_negotiate );
   \       0x82   0x6CE0             LDR      R0,[R4, #+76]
   \       0x84   0x....'....        BL       mbedtls_free
   6646                  mbedtls_free( ssl->session_negotiate );
   \       0x88   0x6BA0             LDR      R0,[R4, #+56]
   \       0x8A   0x....'....        BL       mbedtls_free
   6647          
   6648                  ssl->handshake = NULL;
   \       0x8E   0x2000             MOVS     R0,#+0
   \       0x90   0x63E0             STR      R0,[R4, #+60]
   6649                  ssl->transform_negotiate = NULL;
   \       0x92   0x64E0             STR      R0,[R4, #+76]
   6650                  ssl->session_negotiate = NULL;
   \       0x94   0x63A0             STR      R0,[R4, #+56]
   6651          
   6652                  return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
   \       0x96   0x....'....        LDR.W    R0,??DataTable71  ;; 0xffff8100
   \       0x9A   0xBD16             POP      {R1,R2,R4,PC}
   6653              }
   6654          
   6655              /* Initialize structures */
   6656              mbedtls_ssl_session_init( ssl->session_negotiate );
   \                     ??ssl_handshake_init_7: (+1)
   \       0x9C   0x....'....        BL       mbedtls_ssl_session_init
   6657              ssl_transform_init( ssl->transform_negotiate );
   \       0xA0   0x6CE0             LDR      R0,[R4, #+76]
   \       0xA2   0x....'....        BL       ssl_transform_init
   6658              ssl_handshake_params_init( ssl->handshake );
   \       0xA6   0x6BE0             LDR      R0,[R4, #+60]
   \       0xA8   0x....'....        BL       ssl_handshake_params_init
   6659          
   6660          #if defined(MBEDTLS_SSL_PROTO_DTLS)
   6661              if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
   \       0xAC   0x6820             LDR      R0,[R4, #+0]
   \       0xAE   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \       0xB2   0xF3C0 0x0040      UBFX     R0,R0,#+1,#+1
   \       0xB6   0x2800             CMP      R0,#+0
   \       0xB8   0xD015             BEQ.N    ??ssl_handshake_init_8
   6662              {
   6663                  ssl->handshake->alt_transform_out = ssl->transform_out;
   \       0xBA   0x6C60             LDR      R0,[R4, #+68]
   \       0xBC   0x6BE1             LDR      R1,[R4, #+60]
   \       0xBE   0xF8C1 0x01FC      STR      R0,[R1, #+508]
   6664          
   6665                  if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
   \       0xC2   0x6820             LDR      R0,[R4, #+0]
   \       0xC4   0xF890 0x00CC      LDRB     R0,[R0, #+204]
   \       0xC8   0x07C0             LSLS     R0,R0,#+31
   \       0xCA   0xD404             BMI.N    ??ssl_handshake_init_9
   6666                      ssl->handshake->retransmit_state = MBEDTLS_SSL_RETRANS_PREPARING;
   \       0xCC   0x2000             MOVS     R0,#+0
   \       0xCE   0x6BE1             LDR      R1,[R4, #+60]
   \       0xD0   0xF881 0x01E8      STRB     R0,[R1, #+488]
   \       0xD4   0xE003             B.N      ??ssl_handshake_init_10
   6667                  else
   6668                      ssl->handshake->retransmit_state = MBEDTLS_SSL_RETRANS_WAITING;
   \                     ??ssl_handshake_init_9: (+1)
   \       0xD6   0x2002             MOVS     R0,#+2
   \       0xD8   0x6BE1             LDR      R1,[R4, #+60]
   \       0xDA   0xF881 0x01E8      STRB     R0,[R1, #+488]
   6669          
   6670                  ssl_set_timer( ssl, 0 );
   \                     ??ssl_handshake_init_10: (+1)
   \       0xDE   0x2100             MOVS     R1,#+0
   \       0xE0   0x4620             MOV      R0,R4
   \       0xE2   0x....'....        BL       ssl_set_timer
   6671              }
   6672          #endif
   6673          
   6674              return( 0 );
   \                     ??ssl_handshake_init_8: (+1)
   \       0xE6   0x2000             MOVS     R0,#+0
   \       0xE8   0xBD16             POP      {R1,R2,R4,PC}    ;; return
   6675          }
   6676          
   6677          #if defined(MBEDTLS_SSL_DTLS_HELLO_VERIFY) && defined(MBEDTLS_SSL_SRV_C)
   6678          /* Dummy cookie callbacks for defaults */

   \                                 In section .text, align 2, keep-with-next
   6679          static int ssl_cookie_write_dummy( void *ctx,
   6680                                unsigned char **p, unsigned char *end,
   6681                                const unsigned char *cli_id, size_t cli_id_len )
   6682          {
   6683              ((void) ctx);
   6684              ((void) p);
   6685              ((void) end);
   6686              ((void) cli_id);
   6687              ((void) cli_id_len);
   6688          
   6689              return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
   \                     ssl_cookie_write_dummy: (+1)
   \        0x0   0x....'....        LDR.W    R0,??DataTable71_1  ;; 0xffff8f80
   \        0x4   0x4770             BX       LR               ;; return
   6690          }
   6691          

   \                                 In section .text, align 2, keep-with-next
   6692          static int ssl_cookie_check_dummy( void *ctx,
   6693                                const unsigned char *cookie, size_t cookie_len,
   6694                                const unsigned char *cli_id, size_t cli_id_len )
   6695          {
   6696              ((void) ctx);
   6697              ((void) cookie);
   6698              ((void) cookie_len);
   6699              ((void) cli_id);
   6700              ((void) cli_id_len);
   6701          
   6702              return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
   \                     ssl_cookie_check_dummy: (+1)
   \        0x0   0x....'....        LDR.W    R0,??DataTable71_1  ;; 0xffff8f80
   \        0x4   0x4770             BX       LR               ;; return
   6703          }
   6704          #endif /* MBEDTLS_SSL_DTLS_HELLO_VERIFY && MBEDTLS_SSL_SRV_C */
   6705          
   6706          /* Once ssl->out_hdr as the address of the beginning of the
   6707           * next outgoing record is set, deduce the other pointers.
   6708           *
   6709           * Note: For TLS, we save the implicit record sequence number
   6710           *       (entering MAC computation) in the 8 bytes before ssl->out_hdr,
   6711           *       and the caller has to make sure there's space for this.
   6712           */
   6713          

   \                                 In section .text, align 2, keep-with-next
   6714          static void ssl_update_out_pointers( mbedtls_ssl_context *ssl,
   6715                                               mbedtls_ssl_transform *transform )
   6716          {
   6717          #if defined(MBEDTLS_SSL_PROTO_DTLS)
   6718              if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
   \                     ssl_update_out_pointers: (+1)
   \        0x0   0x6802             LDR      R2,[R0, #+0]
   \        0x2   0xF8D2 0x20CC      LDR      R2,[R2, #+204]
   \        0x6   0xF3C2 0x0240      UBFX     R2,R2,#+1,#+1
   \        0xA   0x2A00             CMP      R2,#+0
   \        0xC   0xF8D0 0x20B8      LDR      R2,[R0, #+184]
   \       0x10   0xD00D             BEQ.N    ??ssl_update_out_pointers_0
   6719              {
   6720                  ssl->out_ctr = ssl->out_hdr +  3;
   \       0x12   0x1CD2             ADDS     R2,R2,#+3
   \       0x14   0xF8C0 0x20B4      STR      R2,[R0, #+180]
   6721                  ssl->out_len = ssl->out_hdr + 11;
   \       0x18   0xF8D0 0x20B8      LDR      R2,[R0, #+184]
   \       0x1C   0x320B             ADDS     R2,R2,#+11
   \       0x1E   0xF8C0 0x20BC      STR      R2,[R0, #+188]
   6722                  ssl->out_iv  = ssl->out_hdr + 13;
   \       0x22   0xF8D0 0x20B8      LDR      R2,[R0, #+184]
   \       0x26   0x320D             ADDS     R2,R2,#+13
   \       0x28   0xF8C0 0x20C0      STR      R2,[R0, #+192]
   \       0x2C   0xE00C             B.N      ??ssl_update_out_pointers_1
   6723              }
   6724              else
   6725          #endif
   6726              {
   6727                  ssl->out_ctr = ssl->out_hdr - 8;
   \                     ??ssl_update_out_pointers_0: (+1)
   \       0x2E   0x3A08             SUBS     R2,R2,#+8
   \       0x30   0xF8C0 0x20B4      STR      R2,[R0, #+180]
   6728                  ssl->out_len = ssl->out_hdr + 3;
   \       0x34   0xF8D0 0x20B8      LDR      R2,[R0, #+184]
   \       0x38   0x1CD2             ADDS     R2,R2,#+3
   \       0x3A   0xF8C0 0x20BC      STR      R2,[R0, #+188]
   6729                  ssl->out_iv  = ssl->out_hdr + 5;
   \       0x3E   0xF8D0 0x20B8      LDR      R2,[R0, #+184]
   \       0x42   0x1D52             ADDS     R2,R2,#+5
   \       0x44   0xF8C0 0x20C0      STR      R2,[R0, #+192]
   6730              }
   6731          
   6732              /* Adjust out_msg to make space for explicit IV, if used. */
   6733              if( transform != NULL &&
   6734                  ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
   \                     ??ssl_update_out_pointers_1: (+1)
   \       0x48   0x2900             CMP      R1,#+0
   \       0x4A   0xD00C             BEQ.N    ??ssl_update_out_pointers_2
   \       0x4C   0x6942             LDR      R2,[R0, #+20]
   \       0x4E   0x2A02             CMP      R2,#+2
   \       0x50   0xDB09             BLT.N    ??ssl_update_out_pointers_2
   6735              {
   6736                  ssl->out_msg = ssl->out_iv + transform->ivlen - transform->fixed_ivlen;
   \       0x52   0xF8D0 0x20C0      LDR      R2,[R0, #+192]
   \       0x56   0x68CB             LDR      R3,[R1, #+12]
   \       0x58   0x441A             ADD      R2,R2,R3
   \       0x5A   0x6909             LDR      R1,[R1, #+16]
   \       0x5C   0x4249             RSBS     R1,R1,#+0
   \       0x5E   0x4411             ADD      R1,R2,R1
   \       0x60   0xF8C0 0x10C4      STR      R1,[R0, #+196]
   \       0x64   0x4770             BX       LR
   6737              }
   6738              else
   6739                  ssl->out_msg = ssl->out_iv;
   \                     ??ssl_update_out_pointers_2: (+1)
   \       0x66   0xF8D0 0x10C0      LDR      R1,[R0, #+192]
   \       0x6A   0xF8C0 0x10C4      STR      R1,[R0, #+196]
   6740          }
   \       0x6E   0x4770             BX       LR               ;; return
   6741          
   6742          /* Once ssl->in_hdr as the address of the beginning of the
   6743           * next incoming record is set, deduce the other pointers.
   6744           *
   6745           * Note: For TLS, we save the implicit record sequence number
   6746           *       (entering MAC computation) in the 8 bytes before ssl->in_hdr,
   6747           *       and the caller has to make sure there's space for this.
   6748           */
   6749          

   \                                 In section .text, align 2, keep-with-next
   6750          static void ssl_update_in_pointers( mbedtls_ssl_context *ssl,
   6751                                              mbedtls_ssl_transform *transform )
   6752          {
   6753          #if defined(MBEDTLS_SSL_PROTO_DTLS)
   6754              if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
   \                     ssl_update_in_pointers: (+1)
   \        0x0   0x6802             LDR      R2,[R0, #+0]
   \        0x2   0xF8D2 0x20CC      LDR      R2,[R2, #+204]
   \        0x6   0xF3C2 0x0240      UBFX     R2,R2,#+1,#+1
   \        0xA   0x2A00             CMP      R2,#+0
   \        0xC   0x6E42             LDR      R2,[R0, #+100]
   \        0xE   0xD008             BEQ.N    ??ssl_update_in_pointers_0
   6755              {
   6756                  ssl->in_ctr = ssl->in_hdr +  3;
   \       0x10   0x1CD2             ADDS     R2,R2,#+3
   \       0x12   0x6602             STR      R2,[R0, #+96]
   6757                  ssl->in_len = ssl->in_hdr + 11;
   \       0x14   0x6E42             LDR      R2,[R0, #+100]
   \       0x16   0x320B             ADDS     R2,R2,#+11
   \       0x18   0x6682             STR      R2,[R0, #+104]
   6758                  ssl->in_iv  = ssl->in_hdr + 13;
   \       0x1A   0x6E42             LDR      R2,[R0, #+100]
   \       0x1C   0x320D             ADDS     R2,R2,#+13
   \       0x1E   0x66C2             STR      R2,[R0, #+108]
   \       0x20   0xE007             B.N      ??ssl_update_in_pointers_1
   6759              }
   6760              else
   6761          #endif
   6762              {
   6763                  ssl->in_ctr = ssl->in_hdr - 8;
   \                     ??ssl_update_in_pointers_0: (+1)
   \       0x22   0x3A08             SUBS     R2,R2,#+8
   \       0x24   0x6602             STR      R2,[R0, #+96]
   6764                  ssl->in_len = ssl->in_hdr + 3;
   \       0x26   0x6E42             LDR      R2,[R0, #+100]
   \       0x28   0x1CD2             ADDS     R2,R2,#+3
   \       0x2A   0x6682             STR      R2,[R0, #+104]
   6765                  ssl->in_iv  = ssl->in_hdr + 5;
   \       0x2C   0x6E42             LDR      R2,[R0, #+100]
   \       0x2E   0x1D52             ADDS     R2,R2,#+5
   \       0x30   0x66C2             STR      R2,[R0, #+108]
   6766              }
   6767          
   6768              /* Offset in_msg from in_iv to allow space for explicit IV, if used. */
   6769              if( transform != NULL &&
   6770                  ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
   \                     ??ssl_update_in_pointers_1: (+1)
   \       0x32   0x2900             CMP      R1,#+0
   \       0x34   0xD00A             BEQ.N    ??ssl_update_in_pointers_2
   \       0x36   0x6942             LDR      R2,[R0, #+20]
   \       0x38   0x2A02             CMP      R2,#+2
   \       0x3A   0xDB07             BLT.N    ??ssl_update_in_pointers_2
   6771              {
   6772                  ssl->in_msg = ssl->in_iv + transform->ivlen - transform->fixed_ivlen;
   \       0x3C   0x6EC2             LDR      R2,[R0, #+108]
   \       0x3E   0x68CB             LDR      R3,[R1, #+12]
   \       0x40   0x441A             ADD      R2,R2,R3
   \       0x42   0x6909             LDR      R1,[R1, #+16]
   \       0x44   0x4249             RSBS     R1,R1,#+0
   \       0x46   0x4411             ADD      R1,R2,R1
   \       0x48   0x6701             STR      R1,[R0, #+112]
   \       0x4A   0x4770             BX       LR
   6773              }
   6774              else
   6775                  ssl->in_msg = ssl->in_iv;
   \                     ??ssl_update_in_pointers_2: (+1)
   \       0x4C   0x6EC1             LDR      R1,[R0, #+108]
   \       0x4E   0x6701             STR      R1,[R0, #+112]
   6776          }
   \       0x50   0x4770             BX       LR               ;; return
   6777          
   6778          /*
   6779           * Initialize an SSL context
   6780           */

   \                                 In section .text, align 2, keep-with-next
   6781          void mbedtls_ssl_init( mbedtls_ssl_context *ssl )
   6782          {
   6783              memset( ssl, 0, sizeof( mbedtls_ssl_context ) );
   \                     mbedtls_ssl_init: (+1)
   \        0x0   0x2200             MOVS     R2,#+0
   \        0x2   0xF44F 0x718C      MOV      R1,#+280
   \        0x6   0x....'....        B.W      __aeabi_memset4
   6784          }
   6785          
   6786          /*
   6787           * Setup an SSL context
   6788           */
   6789          

   \                                 In section .text, align 2, keep-with-next
   6790          static void ssl_reset_in_out_pointers( mbedtls_ssl_context *ssl )
   6791          {
   \                     ssl_reset_in_out_pointers: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x4604             MOV      R4,R0
   6792              /* Set the incoming and outgoing record pointers. */
   6793          #if defined(MBEDTLS_SSL_PROTO_DTLS)
   6794              if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
   \        0x4   0x6820             LDR      R0,[R4, #+0]
   \        0x6   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \        0xA   0xF3C0 0x0040      UBFX     R0,R0,#+1,#+1
   \        0xE   0x2800             CMP      R0,#+0
   \       0x10   0xF8D4 0x00B0      LDR      R0,[R4, #+176]
   \       0x14   0xD004             BEQ.N    ??ssl_reset_in_out_pointers_0
   6795              {
   6796                  ssl->out_hdr = ssl->out_buf;
   \       0x16   0xF8C4 0x00B8      STR      R0,[R4, #+184]
   6797                  ssl->in_hdr  = ssl->in_buf;
   \       0x1A   0x6DE0             LDR      R0,[R4, #+92]
   \       0x1C   0x6660             STR      R0,[R4, #+100]
   \       0x1E   0xE005             B.N      ??ssl_reset_in_out_pointers_1
   6798              }
   6799              else
   6800          #endif /* MBEDTLS_SSL_PROTO_DTLS */
   6801              {
   6802                  ssl->out_hdr = ssl->out_buf + 8;
   \                     ??ssl_reset_in_out_pointers_0: (+1)
   \       0x20   0x3008             ADDS     R0,R0,#+8
   \       0x22   0xF8C4 0x00B8      STR      R0,[R4, #+184]
   6803                  ssl->in_hdr  = ssl->in_buf  + 8;
   \       0x26   0x6DE0             LDR      R0,[R4, #+92]
   \       0x28   0x3008             ADDS     R0,R0,#+8
   \       0x2A   0x6660             STR      R0,[R4, #+100]
   6804              }
   6805          
   6806              /* Derive other internal pointers. */
   6807              ssl_update_out_pointers( ssl, NULL /* no transform enabled */ );
   \                     ??ssl_reset_in_out_pointers_1: (+1)
   \       0x2C   0x2100             MOVS     R1,#+0
   \       0x2E   0x4620             MOV      R0,R4
   \       0x30   0x....'....        BL       ssl_update_out_pointers
   6808              ssl_update_in_pointers ( ssl, NULL /* no transform enabled */ );
   \       0x34   0x2100             MOVS     R1,#+0
   \       0x36   0x4620             MOV      R0,R4
   \       0x38   0xE8BD 0x4010      POP      {R4,LR}
   \       0x3C   0x....             B.N      ssl_update_in_pointers
   6809          }
   6810          

   \                                 In section .text, align 2, keep-with-next
   6811          int mbedtls_ssl_setup( mbedtls_ssl_context *ssl,
   6812                                 const mbedtls_ssl_config *conf )
   6813          {
   \                     mbedtls_ssl_setup: (+1)
   \        0x0   0xB53E             PUSH     {R1-R5,LR}
   \        0x2   0x4605             MOV      R5,R0
   6814              int ret;
   6815          
   6816              ssl->conf = conf;
   \        0x4   0x6029             STR      R1,[R5, #+0]
   6817          
   6818              /*
   6819               * Prepare base structures
   6820               */
   6821          
   6822              /* Set to NULL in case of an error condition */
   6823              ssl->out_buf = NULL;
   \        0x6   0x2000             MOVS     R0,#+0
   \        0x8   0xF8C5 0x00B0      STR      R0,[R5, #+176]
   6824          
   6825              ssl->in_buf = mbedtls_calloc( 1, MBEDTLS_SSL_IN_BUFFER_LEN );
   \        0xC   0xF642 0x144D      MOVW     R4,#+10573
   \       0x10   0x4621             MOV      R1,R4
   \       0x12   0x2001             MOVS     R0,#+1
   \       0x14   0x....'....        BL       mbedtls_calloc
   \       0x18   0x65E8             STR      R0,[R5, #+92]
   6826              if( ssl->in_buf == NULL )
   \       0x1A   0x2800             CMP      R0,#+0
   \       0x1C   0xD12A             BNE.N    ??mbedtls_ssl_setup_0
   6827              {
   6828                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed", MBEDTLS_SSL_IN_BUFFER_LEN) );
   \       0x1E   0x9401             STR      R4,[SP, #+4]
   \       0x20   0x....'....        LDR.W    R0,??DataTable72
   \       0x24   0x9000             STR      R0,[SP, #+0]
   \       0x26   0xF641 0x23AC      MOVW     R3,#+6828
   \       0x2A   0x....'....        LDR.W    R2,??DataTable72_1
   \       0x2E   0x2101             MOVS     R1,#+1
   \       0x30   0x4628             MOV      R0,R5
   \       0x32   0x....'....        BL       mbedtls_debug_print_msg
   6829                  ret = MBEDTLS_ERR_SSL_ALLOC_FAILED;
   \       0x36   0x....'....        LDR.W    R4,??DataTable71  ;; 0xffff8100
   6830                  goto error;
   6831              }
   6832          
   6833              ssl->out_buf = mbedtls_calloc( 1, MBEDTLS_SSL_OUT_BUFFER_LEN );
   6834              if( ssl->out_buf == NULL )
   6835              {
   6836                  MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed", MBEDTLS_SSL_OUT_BUFFER_LEN) );
   6837                  ret = MBEDTLS_ERR_SSL_ALLOC_FAILED;
   6838                  goto error;
   6839              }
   6840          
   6841              ssl_reset_in_out_pointers( ssl );
   6842          
   6843              if( ( ret = ssl_handshake_init( ssl ) ) != 0 )
   6844                  goto error;
   6845          
   6846              return( 0 );
   6847          
   6848          error:
   6849              mbedtls_free( ssl->in_buf );
   \                     ??mbedtls_ssl_setup_1: (+1)
   \       0x3A   0x6DE8             LDR      R0,[R5, #+92]
   \       0x3C   0x....'....        BL       mbedtls_free
   6850              mbedtls_free( ssl->out_buf );
   \       0x40   0xF8D5 0x00B0      LDR      R0,[R5, #+176]
   \       0x44   0x....'....        BL       mbedtls_free
   6851          
   6852              ssl->conf = NULL;
   \       0x48   0x2000             MOVS     R0,#+0
   \       0x4A   0x6028             STR      R0,[R5, #+0]
   6853          
   6854              ssl->in_buf = NULL;
   \       0x4C   0x65E8             STR      R0,[R5, #+92]
   6855              ssl->out_buf = NULL;
   \       0x4E   0xF8C5 0x00B0      STR      R0,[R5, #+176]
   6856          
   6857              ssl->in_hdr = NULL;
   \       0x52   0x6668             STR      R0,[R5, #+100]
   6858              ssl->in_ctr = NULL;
   \       0x54   0x6628             STR      R0,[R5, #+96]
   6859              ssl->in_len = NULL;
   \       0x56   0x66A8             STR      R0,[R5, #+104]
   6860              ssl->in_iv = NULL;
   \       0x58   0x66E8             STR      R0,[R5, #+108]
   6861              ssl->in_msg = NULL;
   \       0x5A   0x6728             STR      R0,[R5, #+112]
   6862          
   6863              ssl->out_hdr = NULL;
   \       0x5C   0xF8C5 0x00B8      STR      R0,[R5, #+184]
   6864              ssl->out_ctr = NULL;
   \       0x60   0xF8C5 0x00B4      STR      R0,[R5, #+180]
   6865              ssl->out_len = NULL;
   \       0x64   0xF8C5 0x00BC      STR      R0,[R5, #+188]
   6866              ssl->out_iv = NULL;
   \       0x68   0xF8C5 0x00C0      STR      R0,[R5, #+192]
   6867              ssl->out_msg = NULL;
   \       0x6C   0xF8C5 0x00C4      STR      R0,[R5, #+196]
   6868          
   6869              return( ret );
   \       0x70   0x4620             MOV      R0,R4
   \       0x72   0xBD3E             POP      {R1-R5,PC}       ;; return
   \                     ??mbedtls_ssl_setup_0: (+1)
   \       0x74   0x4621             MOV      R1,R4
   \       0x76   0x2001             MOVS     R0,#+1
   \       0x78   0x....'....        BL       mbedtls_calloc
   \       0x7C   0xF8C5 0x00B0      STR      R0,[R5, #+176]
   \       0x80   0x2800             CMP      R0,#+0
   \       0x82   0xD10E             BNE.N    ??mbedtls_ssl_setup_2
   \       0x84   0x9401             STR      R4,[SP, #+4]
   \       0x86   0x....'....        LDR.W    R0,??DataTable72
   \       0x8A   0x9000             STR      R0,[SP, #+0]
   \       0x8C   0xF641 0x23B4      MOVW     R3,#+6836
   \       0x90   0x....'....        LDR.W    R2,??DataTable72_1
   \       0x94   0x2101             MOVS     R1,#+1
   \       0x96   0x4628             MOV      R0,R5
   \       0x98   0x....'....        BL       mbedtls_debug_print_msg
   \       0x9C   0x....'....        LDR.W    R4,??DataTable71  ;; 0xffff8100
   \       0xA0   0xE7CB             B.N      ??mbedtls_ssl_setup_1
   \                     ??mbedtls_ssl_setup_2: (+1)
   \       0xA2   0x4628             MOV      R0,R5
   \       0xA4   0x....'....        BL       ssl_reset_in_out_pointers
   \       0xA8   0x4628             MOV      R0,R5
   \       0xAA   0x....'....        BL       ssl_handshake_init
   \       0xAE   0x0004             MOVS     R4,R0
   \       0xB0   0xD1C3             BNE.N    ??mbedtls_ssl_setup_1
   \       0xB2   0x2000             MOVS     R0,#+0
   \       0xB4   0xBD3E             POP      {R1-R5,PC}
   6870          }
   6871          
   6872          /*
   6873           * Reset an initialized and used SSL context for re-use while retaining
   6874           * all application-set variables, function pointers and data.
   6875           *
   6876           * If partial is non-zero, keep data in the input buffer and client ID.
   6877           * (Use when a DTLS client reconnects from the same port.)
   6878           */

   \                                 In section .text, align 2, keep-with-next
   6879          static int ssl_session_reset_int( mbedtls_ssl_context *ssl, int partial )
   6880          {
   \                     ssl_session_reset_int: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4605             MOV      R5,R0
   \        0x4   0x460C             MOV      R4,R1
   6881              int ret;
   6882          
   6883          #if !defined(MBEDTLS_SSL_DTLS_CLIENT_PORT_REUSE) ||     \
   6884              !defined(MBEDTLS_SSL_SRV_C)
   6885              ((void) partial);
   6886          #endif
   6887          
   6888              ssl->state = MBEDTLS_SSL_HELLO_REQUEST;
   \        0x6   0x2000             MOVS     R0,#+0
   \        0x8   0x6068             STR      R0,[R5, #+4]
   6889          
   6890              /* Cancel any possibly running timer */
   6891              ssl_set_timer( ssl, 0 );
   \        0xA   0x4601             MOV      R1,R0
   \        0xC   0x4628             MOV      R0,R5
   \        0xE   0x....'....        BL       ssl_set_timer
   6892          
   6893          #if defined(MBEDTLS_SSL_RENEGOTIATION)
   6894              ssl->renego_status = MBEDTLS_SSL_INITIAL_HANDSHAKE;
   \       0x12   0x2000             MOVS     R0,#+0
   \       0x14   0x60A8             STR      R0,[R5, #+8]
   6895              ssl->renego_records_seen = 0;
   \       0x16   0x60E8             STR      R0,[R5, #+12]
   6896          
   6897              ssl->verify_data_len = 0;
   \       0x18   0xF8C5 0x00F8      STR      R0,[R5, #+248]
   6898              memset( ssl->own_verify_data, 0, MBEDTLS_SSL_VERIFY_DATA_MAX_LEN );
   \       0x1C   0x4602             MOV      R2,R0
   \       0x1E   0x210C             MOVS     R1,#+12
   \       0x20   0xF105 0x00FC      ADD      R0,R5,#+252
   \       0x24   0x....'....        BL       __aeabi_memset4
   6899              memset( ssl->peer_verify_data, 0, MBEDTLS_SSL_VERIFY_DATA_MAX_LEN );
   \       0x28   0x2200             MOVS     R2,#+0
   \       0x2A   0x210C             MOVS     R1,#+12
   \       0x2C   0xF505 0x7084      ADD      R0,R5,#+264
   \       0x30   0x....'....        BL       __aeabi_memset4
   6900          #endif
   6901              ssl->secure_renegotiation = MBEDTLS_SSL_LEGACY_RENEGOTIATION;
   \       0x34   0x2000             MOVS     R0,#+0
   \       0x36   0xF8C5 0x00F4      STR      R0,[R5, #+244]
   6902          
   6903              ssl->in_offt = NULL;
   \       0x3A   0x6768             STR      R0,[R5, #+116]
   6904              ssl_reset_in_out_pointers( ssl );
   \       0x3C   0x4628             MOV      R0,R5
   \       0x3E   0x....'....        BL       ssl_reset_in_out_pointers
   6905          
   6906              ssl->in_msgtype = 0;
   \       0x42   0x2000             MOVS     R0,#+0
   \       0x44   0x67A8             STR      R0,[R5, #+120]
   6907              ssl->in_msglen = 0;
   \       0x46   0x67E8             STR      R0,[R5, #+124]
   6908          #if defined(MBEDTLS_SSL_PROTO_DTLS)
   6909              ssl->next_record_offset = 0;
   \       0x48   0xF8C5 0x0088      STR      R0,[R5, #+136]
   6910              ssl->in_epoch = 0;
   \       0x4C   0xF8A5 0x0084      STRH     R0,[R5, #+132]
   6911          #endif
   6912          #if defined(MBEDTLS_SSL_DTLS_ANTI_REPLAY)
   6913              ssl_dtls_replay_reset( ssl );
   \       0x50   0x4628             MOV      R0,R5
   \       0x52   0x....'....        BL       ssl_dtls_replay_reset
   6914          #endif
   6915          
   6916              ssl->in_hslen = 0;
   \       0x56   0x2000             MOVS     R0,#+0
   \       0x58   0xF8C5 0x00A0      STR      R0,[R5, #+160]
   6917              ssl->nb_zero = 0;
   \       0x5C   0xF8C5 0x00A4      STR      R0,[R5, #+164]
   6918          
   6919              ssl->keep_current_message = 0;
   \       0x60   0xF8C5 0x00A8      STR      R0,[R5, #+168]
   6920          
   6921              ssl->out_msgtype = 0;
   \       0x64   0xF8C5 0x00C8      STR      R0,[R5, #+200]
   6922              ssl->out_msglen = 0;
   \       0x68   0xF8C5 0x00CC      STR      R0,[R5, #+204]
   6923              ssl->out_left = 0;
   \       0x6C   0xF8C5 0x00D0      STR      R0,[R5, #+208]
   6924          #if defined(MBEDTLS_SSL_CBC_RECORD_SPLITTING)
   6925              if( ssl->split_done != MBEDTLS_SSL_CBC_RECORD_SPLITTING_DISABLED )
   \       0x70   0xF995 0x00DE      LDRSB    R0,[R5, #+222]
   \       0x74   0x2800             CMP      R0,#+0
   \       0x76   0xD002             BEQ.N    ??ssl_session_reset_int_0
   6926                  ssl->split_done = 0;
   \       0x78   0x2000             MOVS     R0,#+0
   \       0x7A   0xF885 0x00DE      STRB     R0,[R5, #+222]
   6927          #endif
   6928          
   6929              memset( ssl->cur_out_ctr, 0, sizeof( ssl->cur_out_ctr ) );
   \                     ??ssl_session_reset_int_0: (+1)
   \       0x7E   0x2200             MOVS     R2,#+0
   \       0x80   0x2108             MOVS     R1,#+8
   \       0x82   0xF105 0x00D4      ADD      R0,R5,#+212
   \       0x86   0x....'....        BL       __aeabi_memset4
   6930          
   6931              ssl->transform_in = NULL;
   \       0x8A   0x2000             MOVS     R0,#+0
   \       0x8C   0x6428             STR      R0,[R5, #+64]
   6932              ssl->transform_out = NULL;
   \       0x8E   0x6468             STR      R0,[R5, #+68]
   6933          
   6934              ssl->session_in = NULL;
   \       0x90   0x62E8             STR      R0,[R5, #+44]
   6935              ssl->session_out = NULL;
   \       0x92   0x6328             STR      R0,[R5, #+48]
   6936          
   6937              memset( ssl->out_buf, 0, MBEDTLS_SSL_OUT_BUFFER_LEN );
   \       0x94   0xF642 0x164D      MOVW     R6,#+10573
   \       0x98   0x4602             MOV      R2,R0
   \       0x9A   0x4631             MOV      R1,R6
   \       0x9C   0xF8D5 0x00B0      LDR      R0,[R5, #+176]
   \       0xA0   0x....'....        BL       __aeabi_memset
   6938          
   6939          #if defined(MBEDTLS_SSL_DTLS_CLIENT_PORT_REUSE) && defined(MBEDTLS_SSL_SRV_C)
   6940              if( partial == 0 )
   \       0xA4   0x2C00             CMP      R4,#+0
   \       0xA6   0xD107             BNE.N    ??ssl_session_reset_int_1
   6941          #endif /* MBEDTLS_SSL_DTLS_CLIENT_PORT_REUSE && MBEDTLS_SSL_SRV_C */
   6942              {
   6943                  ssl->in_left = 0;
   \       0xA8   0x2000             MOVS     R0,#+0
   \       0xAA   0xF8C5 0x0080      STR      R0,[R5, #+128]
   6944                  memset( ssl->in_buf, 0, MBEDTLS_SSL_IN_BUFFER_LEN );
   \       0xAE   0x4602             MOV      R2,R0
   \       0xB0   0x4631             MOV      R1,R6
   \       0xB2   0x6DE8             LDR      R0,[R5, #+92]
   \       0xB4   0x....'....        BL       __aeabi_memset
   6945              }
   6946          
   6947          #if defined(MBEDTLS_SSL_HW_RECORD_ACCEL)
   6948              if( mbedtls_ssl_hw_record_reset != NULL )
   6949              {
   6950                  MBEDTLS_SSL_DEBUG_MSG( 2, ( "going for mbedtls_ssl_hw_record_reset()" ) );
   6951                  if( ( ret = mbedtls_ssl_hw_record_reset( ssl ) ) != 0 )
   6952                  {
   6953                      MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_hw_record_reset", ret );
   6954                      return( MBEDTLS_ERR_SSL_HW_ACCEL_FAILED );
   6955                  }
   6956              }
   6957          #endif
   6958          
   6959              if( ssl->transform )
   \                     ??ssl_session_reset_int_1: (+1)
   \       0xB8   0x6CA8             LDR      R0,[R5, #+72]
   \       0xBA   0x2800             CMP      R0,#+0
   \       0xBC   0xD006             BEQ.N    ??ssl_session_reset_int_2
   6960              {
   6961                  mbedtls_ssl_transform_free( ssl->transform );
   \       0xBE   0x....'....        BL       mbedtls_ssl_transform_free
   6962                  mbedtls_free( ssl->transform );
   \       0xC2   0x6CA8             LDR      R0,[R5, #+72]
   \       0xC4   0x....'....        BL       mbedtls_free
   6963                  ssl->transform = NULL;
   \       0xC8   0x2000             MOVS     R0,#+0
   \       0xCA   0x64A8             STR      R0,[R5, #+72]
   6964              }
   6965          
   6966              if( ssl->session )
   \                     ??ssl_session_reset_int_2: (+1)
   \       0xCC   0x6B68             LDR      R0,[R5, #+52]
   \       0xCE   0x2800             CMP      R0,#+0
   \       0xD0   0xD006             BEQ.N    ??ssl_session_reset_int_3
   6967              {
   6968                  mbedtls_ssl_session_free( ssl->session );
   \       0xD2   0x....'....        BL       mbedtls_ssl_session_free
   6969                  mbedtls_free( ssl->session );
   \       0xD6   0x6B68             LDR      R0,[R5, #+52]
   \       0xD8   0x....'....        BL       mbedtls_free
   6970                  ssl->session = NULL;
   \       0xDC   0x2000             MOVS     R0,#+0
   \       0xDE   0x6368             STR      R0,[R5, #+52]
   6971              }
   6972          
   6973          #if defined(MBEDTLS_SSL_ALPN)
   6974              ssl->alpn_chosen = NULL;
   \                     ??ssl_session_reset_int_3: (+1)
   \       0xE0   0x2000             MOVS     R0,#+0
   \       0xE2   0xF8C5 0x00E8      STR      R0,[R5, #+232]
   6975          #endif
   6976          
   6977          #if defined(MBEDTLS_SSL_DTLS_HELLO_VERIFY) && defined(MBEDTLS_SSL_SRV_C)
   6978          #if defined(MBEDTLS_SSL_DTLS_CLIENT_PORT_REUSE)
   6979              if( partial == 0 )
   \       0xE6   0x2C00             CMP      R4,#+0
   \       0xE8   0xD108             BNE.N    ??ssl_session_reset_int_4
   6980          #endif
   6981              {
   6982                  mbedtls_free( ssl->cli_id );
   \       0xEA   0xF8D5 0x00EC      LDR      R0,[R5, #+236]
   \       0xEE   0x....'....        BL       mbedtls_free
   6983                  ssl->cli_id = NULL;
   \       0xF2   0x2000             MOVS     R0,#+0
   \       0xF4   0xF8C5 0x00EC      STR      R0,[R5, #+236]
   6984                  ssl->cli_id_len = 0;
   \       0xF8   0xF8C5 0x00F0      STR      R0,[R5, #+240]
   6985              }
   6986          #endif
   6987          
   6988              if( ( ret = ssl_handshake_init( ssl ) ) != 0 )
   \                     ??ssl_session_reset_int_4: (+1)
   \       0xFC   0x4628             MOV      R0,R5
   \       0xFE   0x....'....        BL       ssl_handshake_init
   \      0x102   0x2800             CMP      R0,#+0
   \      0x104   0xD100             BNE.N    ??ssl_session_reset_int_5
   6989                  return( ret );
   6990          
   6991              return( 0 );
   \      0x106   0x2000             MOVS     R0,#+0
   \                     ??ssl_session_reset_int_5: (+1)
   \      0x108   0xBD70             POP      {R4-R6,PC}       ;; return
   6992          }
   6993          
   6994          /*
   6995           * Reset an initialized and used SSL context for re-use while retaining
   6996           * all application-set variables, function pointers and data.
   6997           */

   \                                 In section .text, align 2, keep-with-next
   6998          int mbedtls_ssl_session_reset( mbedtls_ssl_context *ssl )
   6999          {
   7000              return( ssl_session_reset_int( ssl, 0 ) );
   \                     mbedtls_ssl_session_reset: (+1)
   \        0x0   0x2100             MOVS     R1,#+0
   \        0x2   0x....             B.N      ssl_session_reset_int
   7001          }
   7002          
   7003          /*
   7004           * SSL set accessors
   7005           */

   \                                 In section .text, align 2, keep-with-next
   7006          void mbedtls_ssl_conf_endpoint( mbedtls_ssl_config *conf, int endpoint )
   7007          {
   7008              conf->endpoint   = endpoint;
   \                     mbedtls_ssl_conf_endpoint: (+1)
   \        0x0   0xF8D0 0x20CC      LDR      R2,[R0, #+204]
   \        0x4   0xF361 0x0200      BFI      R2,R1,#+0,#+1
   \        0x8   0xF8C0 0x20CC      STR      R2,[R0, #+204]
   7009          }
   \        0xC   0x4770             BX       LR               ;; return
   7010          

   \                                 In section .text, align 2, keep-with-next
   7011          void mbedtls_ssl_conf_transport( mbedtls_ssl_config *conf, int transport )
   7012          {
   7013              conf->transport = transport;
   \                     mbedtls_ssl_conf_transport: (+1)
   \        0x0   0xF8D0 0x20CC      LDR      R2,[R0, #+204]
   \        0x4   0xF361 0x0241      BFI      R2,R1,#+1,#+1
   \        0x8   0xF8C0 0x20CC      STR      R2,[R0, #+204]
   7014          }
   \        0xC   0x4770             BX       LR               ;; return
   7015          
   7016          #if defined(MBEDTLS_SSL_DTLS_ANTI_REPLAY)

   \                                 In section .text, align 2, keep-with-next
   7017          void mbedtls_ssl_conf_dtls_anti_replay( mbedtls_ssl_config *conf, char mode )
   7018          {
   7019              conf->anti_replay = mode;
   \                     mbedtls_ssl_conf_dtls_anti_replay: (+1)
   \        0x0   0xF8D0 0x20CC      LDR      R2,[R0, #+204]
   \        0x4   0xF361 0x22CB      BFI      R2,R1,#+11,#+1
   \        0x8   0xF8C0 0x20CC      STR      R2,[R0, #+204]
   7020          }
   \        0xC   0x4770             BX       LR               ;; return
   7021          #endif
   7022          
   7023          #if defined(MBEDTLS_SSL_DTLS_BADMAC_LIMIT)

   \                                 In section .text, align 2, keep-with-next
   7024          void mbedtls_ssl_conf_dtls_badmac_limit( mbedtls_ssl_config *conf, unsigned limit )
   7025          {
   7026              conf->badmac_limit = limit;
   \                     mbedtls_ssl_conf_dtls_badmac_limit: (+1)
   \        0x0   0xF8C0 0x10C0      STR      R1,[R0, #+192]
   7027          }
   \        0x4   0x4770             BX       LR               ;; return
   7028          #endif
   7029          
   7030          #if defined(MBEDTLS_SSL_PROTO_DTLS)
   7031          

   \                                 In section .text, align 2, keep-with-next
   7032          void mbedtls_ssl_set_datagram_packing( mbedtls_ssl_context *ssl,
   7033                                                 unsigned allow_packing )
   7034          {
   7035              ssl->disable_datagram_packing = !allow_packing;
   \                     mbedtls_ssl_set_datagram_packing: (+1)
   \        0x0   0x1E49             SUBS     R1,R1,#+1
   \        0x2   0x4189             SBCS     R1,R1,R1
   \        0x4   0x0FC9             LSRS     R1,R1,#+31
   \        0x6   0xF880 0x10AC      STRB     R1,[R0, #+172]
   7036          }
   \        0xA   0x4770             BX       LR               ;; return
   7037          

   \                                 In section .text, align 2, keep-with-next
   7038          void mbedtls_ssl_conf_handshake_timeout( mbedtls_ssl_config *conf,
   7039                                                   uint32_t min, uint32_t max )
   7040          {
   7041              conf->hs_timeout_min = min;
   \                     mbedtls_ssl_conf_handshake_timeout: (+1)
   \        0x0   0xF8C0 0x10AC      STR      R1,[R0, #+172]
   7042              conf->hs_timeout_max = max;
   \        0x4   0xF8C0 0x20B0      STR      R2,[R0, #+176]
   7043          }
   \        0x8   0x4770             BX       LR               ;; return
   7044          #endif
   7045          

   \                                 In section .text, align 2, keep-with-next
   7046          void mbedtls_ssl_conf_authmode( mbedtls_ssl_config *conf, int authmode )
   7047          {
   7048              conf->authmode   = authmode;
   \                     mbedtls_ssl_conf_authmode: (+1)
   \        0x0   0xF8D0 0x20CC      LDR      R2,[R0, #+204]
   \        0x4   0xF361 0x0283      BFI      R2,R1,#+2,#+2
   \        0x8   0xF8C0 0x20CC      STR      R2,[R0, #+204]
   7049          }
   \        0xC   0x4770             BX       LR               ;; return
   7050          
   7051          #if defined(MBEDTLS_X509_CRT_PARSE_C)

   \                                 In section .text, align 2, keep-with-next
   7052          void mbedtls_ssl_conf_verify( mbedtls_ssl_config *conf,
   7053                               int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
   7054                               void *p_vrfy )
   7055          {
   7056              conf->f_vrfy      = f_vrfy;
   \                     mbedtls_ssl_conf_verify: (+1)
   \        0x0   0x6341             STR      R1,[R0, #+52]
   7057              conf->p_vrfy      = p_vrfy;
   \        0x2   0x6382             STR      R2,[R0, #+56]
   7058          }
   \        0x4   0x4770             BX       LR               ;; return
   7059          #endif /* MBEDTLS_X509_CRT_PARSE_C */
   7060          

   \                                 In section .text, align 2, keep-with-next
   7061          void mbedtls_ssl_conf_rng( mbedtls_ssl_config *conf,
   7062                            int (*f_rng)(void *, unsigned char *, size_t),
   7063                            void *p_rng )
   7064          {
   7065              conf->f_rng      = f_rng;
   \                     mbedtls_ssl_conf_rng: (+1)
   \        0x0   0x6181             STR      R1,[R0, #+24]
   7066              conf->p_rng      = p_rng;
   \        0x2   0x61C2             STR      R2,[R0, #+28]
   7067          }
   \        0x4   0x4770             BX       LR               ;; return
   7068          

   \                                 In section .text, align 2, keep-with-next
   7069          void mbedtls_ssl_conf_dbg( mbedtls_ssl_config *conf,
   7070                            void (*f_dbg)(void *, int, const char *, int, const char *),
   7071                            void  *p_dbg )
   7072          {
   7073              conf->f_dbg      = f_dbg;
   \                     mbedtls_ssl_conf_dbg: (+1)
   \        0x0   0x6101             STR      R1,[R0, #+16]
   7074              conf->p_dbg      = p_dbg;
   \        0x2   0x6142             STR      R2,[R0, #+20]
   7075          }
   \        0x4   0x4770             BX       LR               ;; return
   7076          

   \                                 In section .text, align 2, keep-with-next
   7077          void mbedtls_ssl_set_bio( mbedtls_ssl_context *ssl,
   7078                  void *p_bio,
   7079                  mbedtls_ssl_send_t *f_send,
   7080                  mbedtls_ssl_recv_t *f_recv,
   7081                  mbedtls_ssl_recv_timeout_t *f_recv_timeout )
   7082          {
   \                     mbedtls_ssl_set_bio: (+1)
   \        0x0   0xB410             PUSH     {R4}
   \        0x2   0x9C01             LDR      R4,[SP, #+4]
   7083              ssl->p_bio          = p_bio;
   \        0x4   0x6281             STR      R1,[R0, #+40]
   7084              ssl->f_send         = f_send;
   \        0x6   0x61C2             STR      R2,[R0, #+28]
   7085              ssl->f_recv         = f_recv;
   \        0x8   0x6203             STR      R3,[R0, #+32]
   7086              ssl->f_recv_timeout = f_recv_timeout;
   \        0xA   0x6244             STR      R4,[R0, #+36]
   7087          }
   \        0xC   0xBC10             POP      {R4}
   \        0xE   0x4770             BX       LR               ;; return
   7088          
   7089          #if defined(MBEDTLS_SSL_PROTO_DTLS)

   \                                 In section .text, align 2, keep-with-next
   7090          void mbedtls_ssl_set_mtu( mbedtls_ssl_context *ssl, uint16_t mtu )
   7091          {
   7092              ssl->mtu = mtu;
   \                     mbedtls_ssl_set_mtu: (+1)
   \        0x0   0xF8A0 0x10DC      STRH     R1,[R0, #+220]
   7093          }
   \        0x4   0x4770             BX       LR               ;; return
   7094          #endif
   7095          

   \                                 In section .text, align 2, keep-with-next
   7096          void mbedtls_ssl_conf_read_timeout( mbedtls_ssl_config *conf, uint32_t timeout )
   7097          {
   7098              conf->read_timeout   = timeout;
   \                     mbedtls_ssl_conf_read_timeout: (+1)
   \        0x0   0xF8C0 0x10A8      STR      R1,[R0, #+168]
   7099          }
   \        0x4   0x4770             BX       LR               ;; return
   7100          

   \                                 In section .text, align 2, keep-with-next
   7101          void mbedtls_ssl_set_timer_cb( mbedtls_ssl_context *ssl,
   7102                                         void *p_timer,
   7103                                         mbedtls_ssl_set_timer_t *f_set_timer,
   7104                                         mbedtls_ssl_get_timer_t *f_get_timer )
   7105          {
   7106              ssl->p_timer        = p_timer;
   \                     mbedtls_ssl_set_timer_cb: (+1)
   \        0x0   0x6501             STR      R1,[R0, #+80]
   7107              ssl->f_set_timer    = f_set_timer;
   \        0x2   0x6542             STR      R2,[R0, #+84]
   7108              ssl->f_get_timer    = f_get_timer;
   \        0x4   0x6583             STR      R3,[R0, #+88]
   7109          
   7110              /* Make sure we start with no timer running */
   7111              ssl_set_timer( ssl, 0 );
   \        0x6   0x2100             MOVS     R1,#+0
   \        0x8   0x....'....        B.W      ssl_set_timer
   7112          }
   7113          
   7114          #if defined(MBEDTLS_SSL_SRV_C)

   \                                 In section .text, align 2, keep-with-next
   7115          void mbedtls_ssl_conf_session_cache( mbedtls_ssl_config *conf,
   7116                  void *p_cache,
   7117                  int (*f_get_cache)(void *, mbedtls_ssl_session *),
   7118                  int (*f_set_cache)(void *, const mbedtls_ssl_session *) )
   7119          {
   7120              conf->p_cache = p_cache;
   \                     mbedtls_ssl_conf_session_cache: (+1)
   \        0x0   0x6281             STR      R1,[R0, #+40]
   7121              conf->f_get_cache = f_get_cache;
   \        0x2   0x6202             STR      R2,[R0, #+32]
   7122              conf->f_set_cache = f_set_cache;
   \        0x4   0x6243             STR      R3,[R0, #+36]
   7123          }
   \        0x6   0x4770             BX       LR               ;; return
   7124          #endif /* MBEDTLS_SSL_SRV_C */
   7125          
   7126          #if defined(MBEDTLS_SSL_CLI_C)

   \                                 In section .text, align 2, keep-with-next
   7127          int mbedtls_ssl_set_session( mbedtls_ssl_context *ssl, const mbedtls_ssl_session *session )
   7128          {
   \                     mbedtls_ssl_set_session: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
   7129              int ret;
   7130          
   7131              if( ssl == NULL ||
   7132                  session == NULL ||
   7133                  ssl->session_negotiate == NULL ||
   7134                  ssl->conf->endpoint != MBEDTLS_SSL_IS_CLIENT )
   \        0x4   0xD009             BEQ.N    ??mbedtls_ssl_set_session_0
   \        0x6   0x2900             CMP      R1,#+0
   \        0x8   0xD007             BEQ.N    ??mbedtls_ssl_set_session_0
   \        0xA   0x6BA0             LDR      R0,[R4, #+56]
   \        0xC   0x2800             CMP      R0,#+0
   \        0xE   0xD004             BEQ.N    ??mbedtls_ssl_set_session_0
   \       0x10   0x6820             LDR      R0,[R4, #+0]
   \       0x12   0xF890 0x00CC      LDRB     R0,[R0, #+204]
   \       0x16   0x07C0             LSLS     R0,R0,#+31
   \       0x18   0xD502             BPL.N    ??mbedtls_ssl_set_session_1
   7135              {
   7136                  return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   \                     ??mbedtls_ssl_set_session_0: (+1)
   \       0x1A   0x....'....        LDR.W    R0,??DataTable74  ;; 0xffff8f00
   \       0x1E   0xBD10             POP      {R4,PC}
   7137              }
   7138          
   7139              if( ( ret = ssl_session_copy( ssl->session_negotiate, session ) ) != 0 )
   \                     ??mbedtls_ssl_set_session_1: (+1)
   \       0x20   0x6BA0             LDR      R0,[R4, #+56]
   \       0x22   0x....'....        BL       ssl_session_copy
   \       0x26   0x2800             CMP      R0,#+0
   \       0x28   0xD104             BNE.N    ??mbedtls_ssl_set_session_2
   7140                  return( ret );
   7141          
   7142              ssl->handshake->resume = 1;
   \       0x2A   0x2001             MOVS     R0,#+1
   \       0x2C   0x6BE1             LDR      R1,[R4, #+60]
   \       0x2E   0xF8C1 0x06C0      STR      R0,[R1, #+1728]
   7143          
   7144              return( 0 );
   \       0x32   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_ssl_set_session_2: (+1)
   \       0x34   0xBD10             POP      {R4,PC}          ;; return
   7145          }
   7146          #endif /* MBEDTLS_SSL_CLI_C */
   7147          

   \                                 In section .text, align 2, keep-with-next
   7148          void mbedtls_ssl_conf_ciphersuites( mbedtls_ssl_config *conf,
   7149                                             const int *ciphersuites )
   7150          {
   7151              conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] = ciphersuites;
   \                     mbedtls_ssl_conf_ciphersuites: (+1)
   \        0x0   0x6001             STR      R1,[R0, #+0]
   7152              conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] = ciphersuites;
   \        0x2   0x6041             STR      R1,[R0, #+4]
   7153              conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] = ciphersuites;
   \        0x4   0x6081             STR      R1,[R0, #+8]
   7154              conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] = ciphersuites;
   \        0x6   0x60C1             STR      R1,[R0, #+12]
   7155          }
   \        0x8   0x4770             BX       LR               ;; return
   7156          

   \                                 In section .text, align 2, keep-with-next
   7157          void mbedtls_ssl_conf_ciphersuites_for_version( mbedtls_ssl_config *conf,
   7158                                                 const int *ciphersuites,
   7159                                                 int major, int minor )
   7160          {
   7161              if( major != MBEDTLS_SSL_MAJOR_VERSION_3 )
   \                     mbedtls_ssl_conf_ciphersuites_for_version: (+1)
   \        0x0   0x2A03             CMP      R2,#+3
   \        0x2   0xD103             BNE.N    ??mbedtls_ssl_conf_ciphersuites_for_version_0
   7162                  return;
   7163          
   7164              if( minor < MBEDTLS_SSL_MINOR_VERSION_0 || minor > MBEDTLS_SSL_MINOR_VERSION_3 )
   \        0x4   0x2B04             CMP      R3,#+4
   \        0x6   0xD201             BCS.N    ??mbedtls_ssl_conf_ciphersuites_for_version_0
   7165                  return;
   7166          
   7167              conf->ciphersuite_list[minor] = ciphersuites;
   \        0x8   0xF840 0x1023      STR      R1,[R0, R3, LSL #+2]
   7168          }
   \                     ??mbedtls_ssl_conf_ciphersuites_for_version_0: (+1)
   \        0xC   0x4770             BX       LR               ;; return
   7169          
   7170          #if defined(MBEDTLS_X509_CRT_PARSE_C)

   \                                 In section .text, align 2, keep-with-next
   7171          void mbedtls_ssl_conf_cert_profile( mbedtls_ssl_config *conf,
   7172                                              const mbedtls_x509_crt_profile *profile )
   7173          {
   7174              conf->cert_profile = profile;
   \                     mbedtls_ssl_conf_cert_profile: (+1)
   \        0x0   0x6641             STR      R1,[R0, #+100]
   7175          }
   \        0x2   0x4770             BX       LR               ;; return
   7176          
   7177          /* Append a new keycert entry to a (possibly empty) list */

   \                                 In section .text, align 2, keep-with-next
   7178          static int ssl_append_key_cert( mbedtls_ssl_key_cert **head,
   7179                                          mbedtls_x509_crt *cert,
   7180                                          mbedtls_pk_context *key )
   7181          {
   \                     ssl_append_key_cert: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
   \        0x6   0x4616             MOV      R6,R2
   7182              mbedtls_ssl_key_cert *new_cert;
   7183          
   7184              new_cert = mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
   \        0x8   0x210C             MOVS     R1,#+12
   \        0xA   0x2001             MOVS     R0,#+1
   \        0xC   0x....'....        BL       mbedtls_calloc
   7185              if( new_cert == NULL )
   \       0x10   0x2800             CMP      R0,#+0
   \       0x12   0xD102             BNE.N    ??ssl_append_key_cert_0
   7186                  return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
   \       0x14   0x....'....        LDR.W    R0,??DataTable71  ;; 0xffff8100
   \       0x18   0xBD70             POP      {R4-R6,PC}
   7187          
   7188              new_cert->cert = cert;
   \                     ??ssl_append_key_cert_0: (+1)
   \       0x1A   0x6005             STR      R5,[R0, #+0]
   7189              new_cert->key  = key;
   \       0x1C   0x6046             STR      R6,[R0, #+4]
   7190              new_cert->next = NULL;
   \       0x1E   0x2100             MOVS     R1,#+0
   \       0x20   0x6081             STR      R1,[R0, #+8]
   7191          
   7192              /* Update head is the list was null, else add to the end */
   7193              if( *head == NULL )
   \       0x22   0x6821             LDR      R1,[R4, #+0]
   \       0x24   0x2900             CMP      R1,#+0
   \       0x26   0xD101             BNE.N    ??ssl_append_key_cert_1
   7194              {
   7195                  *head = new_cert;
   \       0x28   0x6020             STR      R0,[R4, #+0]
   \       0x2A   0xE006             B.N      ??ssl_append_key_cert_2
   7196              }
   7197              else
   7198              {
   7199                  mbedtls_ssl_key_cert *cur = *head;
   \                     ??ssl_append_key_cert_1: (+1)
   \       0x2C   0x460A             MOV      R2,R1
   \       0x2E   0xE000             B.N      ??ssl_append_key_cert_3
   7200                  while( cur->next != NULL )
   7201                      cur = cur->next;
   \                     ??ssl_append_key_cert_4: (+1)
   \       0x30   0x460A             MOV      R2,R1
   \                     ??ssl_append_key_cert_3: (+1)
   \       0x32   0x6891             LDR      R1,[R2, #+8]
   \       0x34   0x2900             CMP      R1,#+0
   \       0x36   0xD1FB             BNE.N    ??ssl_append_key_cert_4
   7202                  cur->next = new_cert;
   \       0x38   0x6090             STR      R0,[R2, #+8]
   7203              }
   7204          
   7205              return( 0 );
   \                     ??ssl_append_key_cert_2: (+1)
   \       0x3A   0x2000             MOVS     R0,#+0
   \       0x3C   0xBD70             POP      {R4-R6,PC}       ;; return
   7206          }
   7207          

   \                                 In section .text, align 2, keep-with-next
   7208          int mbedtls_ssl_conf_own_cert( mbedtls_ssl_config *conf,
   7209                                        mbedtls_x509_crt *own_cert,
   7210                                        mbedtls_pk_context *pk_key )
   7211          {
   7212              return( ssl_append_key_cert( &conf->key_cert, own_cert, pk_key ) );
   \                     mbedtls_ssl_conf_own_cert: (+1)
   \        0x0   0x3068             ADDS     R0,R0,#+104
   \        0x2   0x....             B.N      ssl_append_key_cert
   7213          }
   7214          

   \                                 In section .text, align 2, keep-with-next
   7215          void mbedtls_ssl_conf_ca_chain( mbedtls_ssl_config *conf,
   7216                                         mbedtls_x509_crt *ca_chain,
   7217                                         mbedtls_x509_crl *ca_crl )
   7218          {
   7219              conf->ca_chain   = ca_chain;
   \                     mbedtls_ssl_conf_ca_chain: (+1)
   \        0x0   0x66C1             STR      R1,[R0, #+108]
   7220              conf->ca_crl     = ca_crl;
   \        0x2   0x6702             STR      R2,[R0, #+112]
   7221          }
   \        0x4   0x4770             BX       LR               ;; return
   7222          #endif /* MBEDTLS_X509_CRT_PARSE_C */
   7223          
   7224          #if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)

   \                                 In section .text, align 2, keep-with-next
   7225          int mbedtls_ssl_set_hs_own_cert( mbedtls_ssl_context *ssl,
   7226                                           mbedtls_x509_crt *own_cert,
   7227                                           mbedtls_pk_context *pk_key )
   7228          {
   7229              return( ssl_append_key_cert( &ssl->handshake->sni_key_cert,
   7230                                           own_cert, pk_key ) );
   \                     mbedtls_ssl_set_hs_own_cert: (+1)
   \        0x0   0x6BC0             LDR      R0,[R0, #+60]
   \        0x2   0xF500 0x70E4      ADD      R0,R0,#+456
   \        0x6   0x....             B.N      ssl_append_key_cert
   7231          }
   7232          

   \                                 In section .text, align 2, keep-with-next
   7233          void mbedtls_ssl_set_hs_ca_chain( mbedtls_ssl_context *ssl,
   7234                                            mbedtls_x509_crt *ca_chain,
   7235                                            mbedtls_x509_crl *ca_crl )
   7236          {
   7237              ssl->handshake->sni_ca_chain   = ca_chain;
   \                     mbedtls_ssl_set_hs_ca_chain: (+1)
   \        0x0   0x6BC3             LDR      R3,[R0, #+60]
   \        0x2   0xF8C3 0x11CC      STR      R1,[R3, #+460]
   7238              ssl->handshake->sni_ca_crl     = ca_crl;
   \        0x6   0x6BC0             LDR      R0,[R0, #+60]
   \        0x8   0xF8C0 0x21D0      STR      R2,[R0, #+464]
   7239          }
   \        0xC   0x4770             BX       LR               ;; return
   7240          

   \                                 In section .text, align 2, keep-with-next
   7241          void mbedtls_ssl_set_hs_authmode( mbedtls_ssl_context *ssl,
   7242                                            int authmode )
   7243          {
   7244              ssl->handshake->sni_authmode = authmode;
   \                     mbedtls_ssl_set_hs_authmode: (+1)
   \        0x0   0x6BC0             LDR      R0,[R0, #+60]
   \        0x2   0xF8C0 0x11C4      STR      R1,[R0, #+452]
   7245          }
   \        0x6   0x4770             BX       LR               ;; return
   7246          #endif /* MBEDTLS_SSL_SERVER_NAME_INDICATION */
   7247          
   7248          #if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
   7249          /*
   7250           * Set EC J-PAKE password for current handshake
   7251           */
   7252          int mbedtls_ssl_set_hs_ecjpake_password( mbedtls_ssl_context *ssl,
   7253                                                   const unsigned char *pw,
   7254                                                   size_t pw_len )
   7255          {
   7256              mbedtls_ecjpake_role role;
   7257          
   7258              if( ssl->handshake == NULL || ssl->conf == NULL )
   7259                  return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   7260          
   7261              if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
   7262                  role = MBEDTLS_ECJPAKE_SERVER;
   7263              else
   7264                  role = MBEDTLS_ECJPAKE_CLIENT;
   7265          
   7266              return( mbedtls_ecjpake_setup( &ssl->handshake->ecjpake_ctx,
   7267                                             role,
   7268                                             MBEDTLS_MD_SHA256,
   7269                                             MBEDTLS_ECP_DP_SECP256R1,
   7270                                             pw, pw_len ) );
   7271          }
   7272          #endif /* MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */
   7273          
   7274          #if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)

   \                                 In section .text, align 2, keep-with-next
   7275          int mbedtls_ssl_conf_psk( mbedtls_ssl_config *conf,
   7276                          const unsigned char *psk, size_t psk_len,
   7277                          const unsigned char *psk_identity, size_t psk_identity_len )
   7278          {
   \                     mbedtls_ssl_conf_psk: (+1)
   \        0x0   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \        0x4   0x4607             MOV      R7,R0
   \        0x6   0x460C             MOV      R4,R1
   \        0x8   0x4690             MOV      R8,R2
   \        0xA   0x461D             MOV      R5,R3
   7279              if( psk == NULL || psk_identity == NULL )
   \        0xC   0x2C00             CMP      R4,#+0
   \        0xE   0xD00C             BEQ.N    ??mbedtls_ssl_conf_psk_0
   \       0x10   0x2D00             CMP      R5,#+0
   \       0x12   0xD00A             BEQ.N    ??mbedtls_ssl_conf_psk_0
   7280                  return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   7281          
   7282              if( psk_len > MBEDTLS_PSK_MAX_LEN )
   \       0x14   0xF1B8 0x0F21      CMP      R8,#+33
   \       0x18   0xD207             BCS.N    ??mbedtls_ssl_conf_psk_0
   \       0x1A   0x9E06             LDR      R6,[SP, #+24]
   7283                  return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   7284          
   7285              /* Identity len will be encoded on two bytes */
   7286              if( ( psk_identity_len >> 16 ) != 0 ||
   7287                  psk_identity_len > MBEDTLS_SSL_OUT_CONTENT_LEN )
   \       0x1C   0x4630             MOV      R0,R6
   \       0x1E   0x0C00             LSRS     R0,R0,#+16
   \       0x20   0xD103             BNE.N    ??mbedtls_ssl_conf_psk_0
   \       0x22   0xF642 0x0001      MOVW     R0,#+10241
   \       0x26   0x4286             CMP      R6,R0
   \       0x28   0xD302             BCC.N    ??mbedtls_ssl_conf_psk_1
   7288              {
   7289                  return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   \                     ??mbedtls_ssl_conf_psk_0: (+1)
   \       0x2A   0x....'....        LDR.W    R0,??DataTable74  ;; 0xffff8f00
   \       0x2E   0xE04E             B.N      ??mbedtls_ssl_conf_psk_2
   7290              }
   7291          
   7292              if( conf->psk != NULL )
   \                     ??mbedtls_ssl_conf_psk_1: (+1)
   \       0x30   0xF8D7 0x0094      LDR      R0,[R7, #+148]
   \       0x34   0x2800             CMP      R0,#+0
   \       0x36   0xD00C             BEQ.N    ??mbedtls_ssl_conf_psk_3
   7293              {
   7294                  mbedtls_platform_zeroize( conf->psk, conf->psk_len );
   \       0x38   0xF8D7 0x1098      LDR      R1,[R7, #+152]
   \       0x3C   0x....'....        BL       mbedtls_platform_zeroize
   7295          
   7296                  mbedtls_free( conf->psk );
   \       0x40   0xF8D7 0x0094      LDR      R0,[R7, #+148]
   \       0x44   0x....'....        BL       mbedtls_free
   7297                  conf->psk = NULL;
   \       0x48   0x2000             MOVS     R0,#+0
   \       0x4A   0xF8C7 0x0094      STR      R0,[R7, #+148]
   7298                  conf->psk_len = 0;
   \       0x4E   0xF8C7 0x0098      STR      R0,[R7, #+152]
   7299              }
   7300              if( conf->psk_identity != NULL )
   \                     ??mbedtls_ssl_conf_psk_3: (+1)
   \       0x52   0xF8D7 0x009C      LDR      R0,[R7, #+156]
   \       0x56   0x2800             CMP      R0,#+0
   \       0x58   0xD006             BEQ.N    ??mbedtls_ssl_conf_psk_4
   7301              {
   7302                  mbedtls_free( conf->psk_identity );
   \       0x5A   0x....'....        BL       mbedtls_free
   7303                  conf->psk_identity = NULL;
   \       0x5E   0x2000             MOVS     R0,#+0
   \       0x60   0xF8C7 0x009C      STR      R0,[R7, #+156]
   7304                  conf->psk_identity_len = 0;
   \       0x64   0xF8C7 0x00A0      STR      R0,[R7, #+160]
   7305              }
   7306          
   7307              if( ( conf->psk = mbedtls_calloc( 1, psk_len ) ) == NULL ||
   7308                  ( conf->psk_identity = mbedtls_calloc( 1, psk_identity_len ) ) == NULL )
   \                     ??mbedtls_ssl_conf_psk_4: (+1)
   \       0x68   0x4641             MOV      R1,R8
   \       0x6A   0x2001             MOVS     R0,#+1
   \       0x6C   0x....'....        BL       mbedtls_calloc
   \       0x70   0xF8C7 0x0094      STR      R0,[R7, #+148]
   \       0x74   0x2800             CMP      R0,#+0
   \       0x76   0xD007             BEQ.N    ??mbedtls_ssl_conf_psk_5
   \       0x78   0x4631             MOV      R1,R6
   \       0x7A   0x2001             MOVS     R0,#+1
   \       0x7C   0x....'....        BL       mbedtls_calloc
   \       0x80   0xF8C7 0x009C      STR      R0,[R7, #+156]
   \       0x84   0x2800             CMP      R0,#+0
   \       0x86   0xD10F             BNE.N    ??mbedtls_ssl_conf_psk_6
   7309              {
   7310                  mbedtls_free( conf->psk );
   \                     ??mbedtls_ssl_conf_psk_5: (+1)
   \       0x88   0xF8D7 0x0094      LDR      R0,[R7, #+148]
   \       0x8C   0x....'....        BL       mbedtls_free
   7311                  mbedtls_free( conf->psk_identity );
   \       0x90   0xF8D7 0x009C      LDR      R0,[R7, #+156]
   \       0x94   0x....'....        BL       mbedtls_free
   7312                  conf->psk = NULL;
   \       0x98   0x2000             MOVS     R0,#+0
   \       0x9A   0xF8C7 0x0094      STR      R0,[R7, #+148]
   7313                  conf->psk_identity = NULL;
   \       0x9E   0xF8C7 0x009C      STR      R0,[R7, #+156]
   7314                  return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
   \       0xA2   0x....'....        LDR.W    R0,??DataTable71  ;; 0xffff8100
   \       0xA6   0xE012             B.N      ??mbedtls_ssl_conf_psk_2
   7315              }
   7316          
   7317              conf->psk_len = psk_len;
   \                     ??mbedtls_ssl_conf_psk_6: (+1)
   \       0xA8   0xF8C7 0x8098      STR      R8,[R7, #+152]
   7318              conf->psk_identity_len = psk_identity_len;
   \       0xAC   0xF8C7 0x60A0      STR      R6,[R7, #+160]
   7319          
   7320              memcpy( conf->psk, psk, conf->psk_len );
   \       0xB0   0xF8D7 0x2098      LDR      R2,[R7, #+152]
   \       0xB4   0x4621             MOV      R1,R4
   \       0xB6   0xF8D7 0x0094      LDR      R0,[R7, #+148]
   \       0xBA   0x....'....        BL       __aeabi_memcpy
   7321              memcpy( conf->psk_identity, psk_identity, conf->psk_identity_len );
   \       0xBE   0xF8D7 0x20A0      LDR      R2,[R7, #+160]
   \       0xC2   0x4629             MOV      R1,R5
   \       0xC4   0xF8D7 0x009C      LDR      R0,[R7, #+156]
   \       0xC8   0x....'....        BL       __aeabi_memcpy
   7322          
   7323              return( 0 );
   \       0xCC   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_ssl_conf_psk_2: (+1)
   \       0xCE   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   7324          }
   7325          

   \                                 In section .text, align 2, keep-with-next
   7326          int mbedtls_ssl_set_hs_psk( mbedtls_ssl_context *ssl,
   7327                                      const unsigned char *psk, size_t psk_len )
   7328          {
   \                     mbedtls_ssl_set_hs_psk: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4605             MOV      R5,R0
   \        0x4   0x460C             MOV      R4,R1
   \        0x6   0x4616             MOV      R6,R2
   7329              if( psk == NULL || ssl->handshake == NULL )
   \        0x8   0x2C00             CMP      R4,#+0
   \        0xA   0xD004             BEQ.N    ??mbedtls_ssl_set_hs_psk_0
   \        0xC   0x6BE8             LDR      R0,[R5, #+60]
   \        0xE   0x2800             CMP      R0,#+0
   \       0x10   0xD001             BEQ.N    ??mbedtls_ssl_set_hs_psk_0
   7330                  return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   7331          
   7332              if( psk_len > MBEDTLS_PSK_MAX_LEN )
   \       0x12   0x2E21             CMP      R6,#+33
   \       0x14   0xD302             BCC.N    ??mbedtls_ssl_set_hs_psk_1
   7333                  return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   \                     ??mbedtls_ssl_set_hs_psk_0: (+1)
   \       0x16   0x....'....        LDR.W    R0,??DataTable74  ;; 0xffff8f00
   \       0x1A   0xBD70             POP      {R4-R6,PC}
   7334          
   7335              if( ssl->handshake->psk != NULL )
   \                     ??mbedtls_ssl_set_hs_psk_1: (+1)
   \       0x1C   0xF8D0 0x01B8      LDR      R0,[R0, #+440]
   \       0x20   0x2800             CMP      R0,#+0
   \       0x22   0xD00F             BEQ.N    ??mbedtls_ssl_set_hs_psk_2
   7336              {
   7337                  mbedtls_platform_zeroize( ssl->handshake->psk,
   7338                                            ssl->handshake->psk_len );
   \       0x24   0x6BE8             LDR      R0,[R5, #+60]
   \       0x26   0xF8D0 0x11BC      LDR      R1,[R0, #+444]
   \       0x2A   0xF8D0 0x01B8      LDR      R0,[R0, #+440]
   \       0x2E   0x....'....        BL       mbedtls_platform_zeroize
   7339                  mbedtls_free( ssl->handshake->psk );
   \       0x32   0x6BE8             LDR      R0,[R5, #+60]
   \       0x34   0xF8D0 0x01B8      LDR      R0,[R0, #+440]
   \       0x38   0x....'....        BL       mbedtls_free
   7340                  ssl->handshake->psk_len = 0;
   \       0x3C   0x2000             MOVS     R0,#+0
   \       0x3E   0x6BE9             LDR      R1,[R5, #+60]
   \       0x40   0xF8C1 0x01BC      STR      R0,[R1, #+444]
   7341              }
   7342          
   7343              if( ( ssl->handshake->psk = mbedtls_calloc( 1, psk_len ) ) == NULL )
   \                     ??mbedtls_ssl_set_hs_psk_2: (+1)
   \       0x44   0x4631             MOV      R1,R6
   \       0x46   0x2001             MOVS     R0,#+1
   \       0x48   0x....'....        BL       mbedtls_calloc
   \       0x4C   0x6BE9             LDR      R1,[R5, #+60]
   \       0x4E   0xF8C1 0x01B8      STR      R0,[R1, #+440]
   \       0x52   0x6BE8             LDR      R0,[R5, #+60]
   \       0x54   0xF8D0 0x01B8      LDR      R0,[R0, #+440]
   \       0x58   0x2800             CMP      R0,#+0
   \       0x5A   0xD102             BNE.N    ??mbedtls_ssl_set_hs_psk_3
   7344                  return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
   \       0x5C   0x....'....        LDR.W    R0,??DataTable71  ;; 0xffff8100
   \       0x60   0xBD70             POP      {R4-R6,PC}
   7345          
   7346              ssl->handshake->psk_len = psk_len;
   \                     ??mbedtls_ssl_set_hs_psk_3: (+1)
   \       0x62   0x6BE8             LDR      R0,[R5, #+60]
   \       0x64   0xF8C0 0x61BC      STR      R6,[R0, #+444]
   7347              memcpy( ssl->handshake->psk, psk, ssl->handshake->psk_len );
   \       0x68   0x6BE8             LDR      R0,[R5, #+60]
   \       0x6A   0xF8D0 0x21BC      LDR      R2,[R0, #+444]
   \       0x6E   0x4621             MOV      R1,R4
   \       0x70   0xF8D0 0x01B8      LDR      R0,[R0, #+440]
   \       0x74   0x....'....        BL       __aeabi_memcpy
   7348          
   7349              return( 0 );
   \       0x78   0x2000             MOVS     R0,#+0
   \       0x7A   0xBD70             POP      {R4-R6,PC}       ;; return
   7350          }
   7351          

   \                                 In section .text, align 2, keep-with-next
   7352          void mbedtls_ssl_conf_psk_cb( mbedtls_ssl_config *conf,
   7353                               int (*f_psk)(void *, mbedtls_ssl_context *, const unsigned char *,
   7354                               size_t),
   7355                               void *p_psk )
   7356          {
   7357              conf->f_psk = f_psk;
   \                     mbedtls_ssl_conf_psk_cb: (+1)
   \        0x0   0x63C1             STR      R1,[R0, #+60]
   7358              conf->p_psk = p_psk;
   \        0x2   0x6402             STR      R2,[R0, #+64]
   7359          }
   \        0x4   0x4770             BX       LR               ;; return
   7360          #endif /* MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED */
   7361          
   7362          #if defined(MBEDTLS_DHM_C) && defined(MBEDTLS_SSL_SRV_C)
   7363          
   7364          #if !defined(MBEDTLS_DEPRECATED_REMOVED)

   \                                 In section .text, align 2, keep-with-next
   7365          int mbedtls_ssl_conf_dh_param( mbedtls_ssl_config *conf, const char *dhm_P, const char *dhm_G )
   7366          {
   \                     mbedtls_ssl_conf_dh_param: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4605             MOV      R5,R0
   \        0x4   0x4616             MOV      R6,R2
   7367              int ret;
   7368          
   7369              if( ( ret = mbedtls_mpi_read_string( &conf->dhm_P, 16, dhm_P ) ) != 0 ||
   7370                  ( ret = mbedtls_mpi_read_string( &conf->dhm_G, 16, dhm_G ) ) != 0 )
   \        0x6   0x460A             MOV      R2,R1
   \        0x8   0x2110             MOVS     R1,#+16
   \        0xA   0xF105 0x007C      ADD      R0,R5,#+124
   \        0xE   0x....'....        BL       mbedtls_mpi_read_string
   \       0x12   0x0004             MOVS     R4,R0
   \       0x14   0xD107             BNE.N    ??mbedtls_ssl_conf_dh_param_0
   \       0x16   0x4632             MOV      R2,R6
   \       0x18   0x2110             MOVS     R1,#+16
   \       0x1A   0xF105 0x0088      ADD      R0,R5,#+136
   \       0x1E   0x....'....        BL       mbedtls_mpi_read_string
   \       0x22   0x0004             MOVS     R4,R0
   \       0x24   0xD009             BEQ.N    ??mbedtls_ssl_conf_dh_param_1
   7371              {
   7372                  mbedtls_mpi_free( &conf->dhm_P );
   \                     ??mbedtls_ssl_conf_dh_param_0: (+1)
   \       0x26   0xF105 0x007C      ADD      R0,R5,#+124
   \       0x2A   0x....'....        BL       mbedtls_mpi_free
   7373                  mbedtls_mpi_free( &conf->dhm_G );
   \       0x2E   0xF105 0x0088      ADD      R0,R5,#+136
   \       0x32   0x....'....        BL       mbedtls_mpi_free
   7374                  return( ret );
   \       0x36   0x4620             MOV      R0,R4
   \       0x38   0xBD70             POP      {R4-R6,PC}
   7375              }
   7376          
   7377              return( 0 );
   \                     ??mbedtls_ssl_conf_dh_param_1: (+1)
   \       0x3A   0x2000             MOVS     R0,#+0
   \       0x3C   0xBD70             POP      {R4-R6,PC}       ;; return
   7378          }
   7379          #endif /* MBEDTLS_DEPRECATED_REMOVED */
   7380          

   \                                 In section .text, align 2, keep-with-next
   7381          int mbedtls_ssl_conf_dh_param_bin( mbedtls_ssl_config *conf,
   7382                                             const unsigned char *dhm_P, size_t P_len,
   7383                                             const unsigned char *dhm_G, size_t G_len )
   7384          {
   \                     mbedtls_ssl_conf_dh_param_bin: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4605             MOV      R5,R0
   \        0x4   0x461E             MOV      R6,R3
   7385              int ret;
   7386          
   7387              if( ( ret = mbedtls_mpi_read_binary( &conf->dhm_P, dhm_P, P_len ) ) != 0 ||
   7388                  ( ret = mbedtls_mpi_read_binary( &conf->dhm_G, dhm_G, G_len ) ) != 0 )
   \        0x6   0xF105 0x007C      ADD      R0,R5,#+124
   \        0xA   0x....'....        BL       mbedtls_mpi_read_binary
   \        0xE   0x0004             MOVS     R4,R0
   \       0x10   0xD107             BNE.N    ??mbedtls_ssl_conf_dh_param_bin_0
   \       0x12   0x9A04             LDR      R2,[SP, #+16]
   \       0x14   0x4631             MOV      R1,R6
   \       0x16   0xF105 0x0088      ADD      R0,R5,#+136
   \       0x1A   0x....'....        BL       mbedtls_mpi_read_binary
   \       0x1E   0x0004             MOVS     R4,R0
   \       0x20   0xD009             BEQ.N    ??mbedtls_ssl_conf_dh_param_bin_1
   7389              {
   7390                  mbedtls_mpi_free( &conf->dhm_P );
   \                     ??mbedtls_ssl_conf_dh_param_bin_0: (+1)
   \       0x22   0xF105 0x007C      ADD      R0,R5,#+124
   \       0x26   0x....'....        BL       mbedtls_mpi_free
   7391                  mbedtls_mpi_free( &conf->dhm_G );
   \       0x2A   0xF105 0x0088      ADD      R0,R5,#+136
   \       0x2E   0x....'....        BL       mbedtls_mpi_free
   7392                  return( ret );
   \       0x32   0x4620             MOV      R0,R4
   \       0x34   0xBD70             POP      {R4-R6,PC}
   7393              }
   7394          
   7395              return( 0 );
   \                     ??mbedtls_ssl_conf_dh_param_bin_1: (+1)
   \       0x36   0x2000             MOVS     R0,#+0
   \       0x38   0xBD70             POP      {R4-R6,PC}       ;; return
   7396          }
   7397          

   \                                 In section .text, align 2, keep-with-next
   7398          int mbedtls_ssl_conf_dh_param_ctx( mbedtls_ssl_config *conf, mbedtls_dhm_context *dhm_ctx )
   7399          {
   \                     mbedtls_ssl_conf_dh_param_ctx: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4605             MOV      R5,R0
   \        0x4   0x460E             MOV      R6,R1
   7400              int ret;
   7401          
   7402              if( ( ret = mbedtls_mpi_copy( &conf->dhm_P, &dhm_ctx->P ) ) != 0 ||
   7403                  ( ret = mbedtls_mpi_copy( &conf->dhm_G, &dhm_ctx->G ) ) != 0 )
   \        0x6   0x1D31             ADDS     R1,R6,#+4
   \        0x8   0xF105 0x007C      ADD      R0,R5,#+124
   \        0xC   0x....'....        BL       mbedtls_mpi_copy
   \       0x10   0x0004             MOVS     R4,R0
   \       0x12   0xD107             BNE.N    ??mbedtls_ssl_conf_dh_param_ctx_0
   \       0x14   0xF106 0x0110      ADD      R1,R6,#+16
   \       0x18   0xF105 0x0088      ADD      R0,R5,#+136
   \       0x1C   0x....'....        BL       mbedtls_mpi_copy
   \       0x20   0x0004             MOVS     R4,R0
   \       0x22   0xD009             BEQ.N    ??mbedtls_ssl_conf_dh_param_ctx_1
   7404              {
   7405                  mbedtls_mpi_free( &conf->dhm_P );
   \                     ??mbedtls_ssl_conf_dh_param_ctx_0: (+1)
   \       0x24   0xF105 0x007C      ADD      R0,R5,#+124
   \       0x28   0x....'....        BL       mbedtls_mpi_free
   7406                  mbedtls_mpi_free( &conf->dhm_G );
   \       0x2C   0xF105 0x0088      ADD      R0,R5,#+136
   \       0x30   0x....'....        BL       mbedtls_mpi_free
   7407                  return( ret );
   \       0x34   0x4620             MOV      R0,R4
   \       0x36   0xBD70             POP      {R4-R6,PC}
   7408              }
   7409          
   7410              return( 0 );
   \                     ??mbedtls_ssl_conf_dh_param_ctx_1: (+1)
   \       0x38   0x2000             MOVS     R0,#+0
   \       0x3A   0xBD70             POP      {R4-R6,PC}       ;; return
   7411          }
   7412          #endif /* MBEDTLS_DHM_C && MBEDTLS_SSL_SRV_C */
   7413          
   7414          #if defined(MBEDTLS_DHM_C) && defined(MBEDTLS_SSL_CLI_C)
   7415          /*
   7416           * Set the minimum length for Diffie-Hellman parameters
   7417           */

   \                                 In section .text, align 2, keep-with-next
   7418          void mbedtls_ssl_conf_dhm_min_bitlen( mbedtls_ssl_config *conf,
   7419                                                unsigned int bitlen )
   7420          {
   7421              conf->dhm_min_bitlen = bitlen;
   \                     mbedtls_ssl_conf_dhm_min_bitlen: (+1)
   \        0x0   0xF8C0 0x10C4      STR      R1,[R0, #+196]
   7422          }
   \        0x4   0x4770             BX       LR               ;; return
   7423          #endif /* MBEDTLS_DHM_C && MBEDTLS_SSL_CLI_C */
   7424          
   7425          #if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
   7426          /*
   7427           * Set allowed/preferred hashes for handshake signatures
   7428           */

   \                                 In section .text, align 2, keep-with-next
   7429          void mbedtls_ssl_conf_sig_hashes( mbedtls_ssl_config *conf,
   7430                                            const int *hashes )
   7431          {
   7432              conf->sig_hashes = hashes;
   \                     mbedtls_ssl_conf_sig_hashes: (+1)
   \        0x0   0x6741             STR      R1,[R0, #+116]
   7433          }
   \        0x2   0x4770             BX       LR               ;; return
   7434          #endif /* MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED */
   7435          
   7436          #if defined(MBEDTLS_ECP_C)
   7437          /*
   7438           * Set the allowed elliptic curves
   7439           */

   \                                 In section .text, align 2, keep-with-next
   7440          void mbedtls_ssl_conf_curves( mbedtls_ssl_config *conf,
   7441                                       const mbedtls_ecp_group_id *curve_list )
   7442          {
   7443              conf->curve_list = curve_list;
   \                     mbedtls_ssl_conf_curves: (+1)
   \        0x0   0x6781             STR      R1,[R0, #+120]
   7444          }
   \        0x2   0x4770             BX       LR               ;; return
   7445          #endif /* MBEDTLS_ECP_C */
   7446          
   7447          #if defined(MBEDTLS_X509_CRT_PARSE_C)

   \                                 In section .text, align 2, keep-with-next
   7448          int mbedtls_ssl_set_hostname( mbedtls_ssl_context *ssl, const char *hostname )
   7449          {
   \                     mbedtls_ssl_set_hostname: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4605             MOV      R5,R0
   \        0x4   0x460C             MOV      R4,R1
   7450              /* Initialize to suppress unnecessary compiler warning */
   7451              size_t hostname_len = 0;
   \        0x6   0x2600             MOVS     R6,#+0
   7452          
   7453              /* Check if new hostname is valid before
   7454               * making any change to current one */
   7455              if( hostname != NULL )
   \        0x8   0x2C00             CMP      R4,#+0
   \        0xA   0xD009             BEQ.N    ??mbedtls_ssl_set_hostname_0
   7456              {
   7457                  hostname_len = strlen( hostname );
   \        0xC   0x4620             MOV      R0,R4
   \        0xE   0x....'....        BL       strlen
   \       0x12   0x4606             MOV      R6,R0
   7458          
   7459                  if( hostname_len > MBEDTLS_SSL_MAX_HOST_NAME_LEN )
   \       0x14   0xF5B6 0x7F80      CMP      R6,#+256
   \       0x18   0xD302             BCC.N    ??mbedtls_ssl_set_hostname_0
   7460                      return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   \       0x1A   0x....'....        LDR.W    R0,??DataTable74  ;; 0xffff8f00
   \       0x1E   0xBD70             POP      {R4-R6,PC}
   7461              }
   7462          
   7463              /* Now it's clear that we will overwrite the old hostname,
   7464               * so we can free it safely */
   7465          
   7466              if( ssl->hostname != NULL )
   \                     ??mbedtls_ssl_set_hostname_0: (+1)
   \       0x20   0xF8D5 0x00E4      LDR      R0,[R5, #+228]
   \       0x24   0x2800             CMP      R0,#+0
   \       0x26   0xD00A             BEQ.N    ??mbedtls_ssl_set_hostname_1
   7467              {
   7468                  mbedtls_platform_zeroize( ssl->hostname, strlen( ssl->hostname ) );
   \       0x28   0x....'....        BL       strlen
   \       0x2C   0x4601             MOV      R1,R0
   \       0x2E   0xF8D5 0x00E4      LDR      R0,[R5, #+228]
   \       0x32   0x....'....        BL       mbedtls_platform_zeroize
   7469                  mbedtls_free( ssl->hostname );
   \       0x36   0xF8D5 0x00E4      LDR      R0,[R5, #+228]
   \       0x3A   0x....'....        BL       mbedtls_free
   7470              }
   7471          
   7472              /* Passing NULL as hostname shall clear the old one */
   7473          
   7474              if( hostname == NULL )
   \                     ??mbedtls_ssl_set_hostname_1: (+1)
   \       0x3E   0x2C00             CMP      R4,#+0
   \       0x40   0xD103             BNE.N    ??mbedtls_ssl_set_hostname_2
   7475              {
   7476                  ssl->hostname = NULL;
   \       0x42   0x2000             MOVS     R0,#+0
   \       0x44   0xF8C5 0x00E4      STR      R0,[R5, #+228]
   \       0x48   0xBD70             POP      {R4-R6,PC}
   7477              }
   7478              else
   7479              {
   7480                  ssl->hostname = mbedtls_calloc( 1, hostname_len + 1 );
   \                     ??mbedtls_ssl_set_hostname_2: (+1)
   \       0x4A   0x1C71             ADDS     R1,R6,#+1
   \       0x4C   0x2001             MOVS     R0,#+1
   \       0x4E   0x....'....        BL       mbedtls_calloc
   \       0x52   0xF8C5 0x00E4      STR      R0,[R5, #+228]
   7481                  if( ssl->hostname == NULL )
   \       0x56   0x2800             CMP      R0,#+0
   \       0x58   0xD102             BNE.N    ??mbedtls_ssl_set_hostname_3
   7482                      return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
   \       0x5A   0x....'....        LDR.W    R0,??DataTable71  ;; 0xffff8100
   \       0x5E   0xBD70             POP      {R4-R6,PC}
   7483          
   7484                  memcpy( ssl->hostname, hostname, hostname_len );
   \                     ??mbedtls_ssl_set_hostname_3: (+1)
   \       0x60   0x4632             MOV      R2,R6
   \       0x62   0x4621             MOV      R1,R4
   \       0x64   0x....'....        BL       __aeabi_memcpy
   7485          
   7486                  ssl->hostname[hostname_len] = '\0';
   \       0x68   0x2000             MOVS     R0,#+0
   \       0x6A   0xF8D5 0x10E4      LDR      R1,[R5, #+228]
   \       0x6E   0x5588             STRB     R0,[R1, R6]
   7487              }
   7488          
   7489              return( 0 );
   \       0x70   0xBD70             POP      {R4-R6,PC}       ;; return
   7490          }
   7491          #endif /* MBEDTLS_X509_CRT_PARSE_C */
   7492          
   7493          #if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)

   \                                 In section .text, align 2, keep-with-next
   7494          void mbedtls_ssl_conf_sni( mbedtls_ssl_config *conf,
   7495                            int (*f_sni)(void *, mbedtls_ssl_context *,
   7496                                          const unsigned char *, size_t),
   7497                            void *p_sni )
   7498          {
   7499              conf->f_sni = f_sni;
   \                     mbedtls_ssl_conf_sni: (+1)
   \        0x0   0x62C1             STR      R1,[R0, #+44]
   7500              conf->p_sni = p_sni;
   \        0x2   0x6302             STR      R2,[R0, #+48]
   7501          }
   \        0x4   0x4770             BX       LR               ;; return
   7502          #endif /* MBEDTLS_SSL_SERVER_NAME_INDICATION */
   7503          
   7504          #if defined(MBEDTLS_SSL_ALPN)

   \                                 In section .text, align 2, keep-with-next
   7505          int mbedtls_ssl_conf_alpn_protocols( mbedtls_ssl_config *conf, const char **protos )
   7506          {
   \                     mbedtls_ssl_conf_alpn_protocols: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
   7507              size_t cur_len, tot_len;
   7508              const char **p;
   7509          
   7510              /*
   7511               * RFC 7301 3.1: "Empty strings MUST NOT be included and byte strings
   7512               * MUST NOT be truncated."
   7513               * We check lengths now rather than later.
   7514               */
   7515              tot_len = 0;
   \        0x6   0x2600             MOVS     R6,#+0
   7516              for( p = protos; *p != NULL; p++ )
   \        0x8   0x462F             MOV      R7,R5
   \                     ??mbedtls_ssl_conf_alpn_protocols_0: (+1)
   \        0xA   0x6838             LDR      R0,[R7, #+0]
   \        0xC   0x2800             CMP      R0,#+0
   \        0xE   0xD00C             BEQ.N    ??mbedtls_ssl_conf_alpn_protocols_1
   7517              {
   7518                  cur_len = strlen( *p );
   \       0x10   0x....'....        BL       strlen
   7519                  tot_len += cur_len;
   \       0x14   0x1986             ADDS     R6,R0,R6
   7520          
   7521                  if( cur_len == 0 || cur_len > 255 || tot_len > 65535 )
   \       0x16   0x2800             CMP      R0,#+0
   \       0x18   0xD00B             BEQ.N    ??mbedtls_ssl_conf_alpn_protocols_2
   \       0x1A   0xF5B0 0x7F80      CMP      R0,#+256
   \       0x1E   0xD208             BCS.N    ??mbedtls_ssl_conf_alpn_protocols_2
   \       0x20   0xF5B6 0x3F80      CMP      R6,#+65536
   \       0x24   0xD205             BCS.N    ??mbedtls_ssl_conf_alpn_protocols_2
   \       0x26   0x1D3F             ADDS     R7,R7,#+4
   \       0x28   0xE7EF             B.N      ??mbedtls_ssl_conf_alpn_protocols_0
   7522                      return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   7523              }
   7524          
   7525              conf->alpn_list = protos;
   \                     ??mbedtls_ssl_conf_alpn_protocols_1: (+1)
   \       0x2A   0xF8C4 0x50A4      STR      R5,[R4, #+164]
   7526          
   7527              return( 0 );
   \       0x2E   0x2000             MOVS     R0,#+0
   \       0x30   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
   \                     ??mbedtls_ssl_conf_alpn_protocols_2: (+1)
   \       0x32   0x....'....        LDR.W    R0,??DataTable74  ;; 0xffff8f00
   \       0x36   0xBDF2             POP      {R1,R4-R7,PC}
   7528          }
   7529          

   \                                 In section .text, align 2, keep-with-next
   7530          const char *mbedtls_ssl_get_alpn_protocol( const mbedtls_ssl_context *ssl )
   7531          {
   7532              return( ssl->alpn_chosen );
   \                     mbedtls_ssl_get_alpn_protocol: (+1)
   \        0x0   0xF8D0 0x00E8      LDR      R0,[R0, #+232]
   \        0x4   0x4770             BX       LR               ;; return
   7533          }
   7534          #endif /* MBEDTLS_SSL_ALPN */
   7535          

   \                                 In section .text, align 2, keep-with-next
   7536          void mbedtls_ssl_conf_max_version( mbedtls_ssl_config *conf, int major, int minor )
   7537          {
   7538              conf->max_major_ver = major;
   \                     mbedtls_ssl_conf_max_version: (+1)
   \        0x0   0xF880 0x10C8      STRB     R1,[R0, #+200]
   7539              conf->max_minor_ver = minor;
   \        0x4   0xF880 0x20C9      STRB     R2,[R0, #+201]
   7540          }
   \        0x8   0x4770             BX       LR               ;; return
   7541          

   \                                 In section .text, align 2, keep-with-next
   7542          void mbedtls_ssl_conf_min_version( mbedtls_ssl_config *conf, int major, int minor )
   7543          {
   7544              conf->min_major_ver = major;
   \                     mbedtls_ssl_conf_min_version: (+1)
   \        0x0   0xF880 0x10CA      STRB     R1,[R0, #+202]
   7545              conf->min_minor_ver = minor;
   \        0x4   0xF880 0x20CB      STRB     R2,[R0, #+203]
   7546          }
   \        0x8   0x4770             BX       LR               ;; return
   7547          
   7548          #if defined(MBEDTLS_SSL_FALLBACK_SCSV) && defined(MBEDTLS_SSL_CLI_C)

   \                                 In section .text, align 2, keep-with-next
   7549          void mbedtls_ssl_conf_fallback( mbedtls_ssl_config *conf, char fallback )
   7550          {
   7551              conf->fallback = fallback;
   \                     mbedtls_ssl_conf_fallback: (+1)
   \        0x0   0xF8D0 0x20CC      LDR      R2,[R0, #+204]
   \        0x4   0xF361 0x4210      BFI      R2,R1,#+16,#+1
   \        0x8   0xF8C0 0x20CC      STR      R2,[R0, #+204]
   7552          }
   \        0xC   0x4770             BX       LR               ;; return
   7553          #endif
   7554          
   7555          #if defined(MBEDTLS_SSL_SRV_C)

   \                                 In section .text, align 2, keep-with-next
   7556          void mbedtls_ssl_conf_cert_req_ca_list( mbedtls_ssl_config *conf,
   7557                                                    char cert_req_ca_list )
   7558          {
   7559              conf->cert_req_ca_list = cert_req_ca_list;
   \                     mbedtls_ssl_conf_cert_req_ca_list: (+1)
   \        0x0   0xF8D0 0x20CC      LDR      R2,[R0, #+204]
   \        0x4   0xF361 0x4251      BFI      R2,R1,#+17,#+1
   \        0x8   0xF8C0 0x20CC      STR      R2,[R0, #+204]
   7560          }
   \        0xC   0x4770             BX       LR               ;; return
   7561          #endif
   7562          
   7563          #if defined(MBEDTLS_SSL_ENCRYPT_THEN_MAC)

   \                                 In section .text, align 2, keep-with-next
   7564          void mbedtls_ssl_conf_encrypt_then_mac( mbedtls_ssl_config *conf, char etm )
   7565          {
   7566              conf->encrypt_then_mac = etm;
   \                     mbedtls_ssl_conf_encrypt_then_mac: (+1)
   \        0x0   0xF8D0 0x20CC      LDR      R2,[R0, #+204]
   \        0x4   0xF361 0x2249      BFI      R2,R1,#+9,#+1
   \        0x8   0xF8C0 0x20CC      STR      R2,[R0, #+204]
   7567          }
   \        0xC   0x4770             BX       LR               ;; return
   7568          #endif
   7569          
   7570          #if defined(MBEDTLS_SSL_EXTENDED_MASTER_SECRET)

   \                                 In section .text, align 2, keep-with-next
   7571          void mbedtls_ssl_conf_extended_master_secret( mbedtls_ssl_config *conf, char ems )
   7572          {
   7573              conf->extended_ms = ems;
   \                     mbedtls_ssl_conf_extended_master_secret: (+1)
   \        0x0   0xF8D0 0x20CC      LDR      R2,[R0, #+204]
   \        0x4   0xF361 0x228A      BFI      R2,R1,#+10,#+1
   \        0x8   0xF8C0 0x20CC      STR      R2,[R0, #+204]
   7574          }
   \        0xC   0x4770             BX       LR               ;; return
   7575          #endif
   7576          
   7577          #if defined(MBEDTLS_ARC4_C)
   7578          void mbedtls_ssl_conf_arc4_support( mbedtls_ssl_config *conf, char arc4 )
   7579          {
   7580              conf->arc4_disabled = arc4;
   7581          }
   7582          #endif
   7583          
   7584          #if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)

   \                                 In section .text, align 2, keep-with-next
   7585          int mbedtls_ssl_conf_max_frag_len( mbedtls_ssl_config *conf, unsigned char mfl_code )
   7586          {
   \                     mbedtls_ssl_conf_max_frag_len: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
   7587              if( mfl_code >= MBEDTLS_SSL_MAX_FRAG_LEN_INVALID ||
   7588                  ssl_mfl_code_to_length( mfl_code ) > MBEDTLS_TLS_EXT_ADV_CONTENT_LEN )
   \        0x6   0x4628             MOV      R0,R5
   \        0x8   0x2805             CMP      R0,#+5
   \        0xA   0xDA05             BGE.N    ??mbedtls_ssl_conf_max_frag_len_0
   \        0xC   0x....'....        BL       ssl_mfl_code_to_length
   \       0x10   0xF642 0x0101      MOVW     R1,#+10241
   \       0x14   0x4288             CMP      R0,R1
   \       0x16   0xD302             BCC.N    ??mbedtls_ssl_conf_max_frag_len_1
   7589              {
   7590                  return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   \                     ??mbedtls_ssl_conf_max_frag_len_0: (+1)
   \       0x18   0x....'....        LDR.W    R0,??DataTable74  ;; 0xffff8f00
   \       0x1C   0xBD32             POP      {R1,R4,R5,PC}
   7591              }
   7592          
   7593              conf->mfl_code = mfl_code;
   \                     ??mbedtls_ssl_conf_max_frag_len_1: (+1)
   \       0x1E   0xF8D4 0x00CC      LDR      R0,[R4, #+204]
   \       0x22   0xF365 0x1088      BFI      R0,R5,#+6,#+3
   \       0x26   0xF8C4 0x00CC      STR      R0,[R4, #+204]
   7594          
   7595              return( 0 );
   \       0x2A   0x2000             MOVS     R0,#+0
   \       0x2C   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   7596          }
   7597          #endif /* MBEDTLS_SSL_MAX_FRAGMENT_LENGTH */
   7598          
   7599          #if defined(MBEDTLS_SSL_TRUNCATED_HMAC)

   \                                 In section .text, align 2, keep-with-next
   7600          void mbedtls_ssl_conf_truncated_hmac( mbedtls_ssl_config *conf, int truncate )
   7601          {
   7602              conf->trunc_hmac = truncate;
   \                     mbedtls_ssl_conf_truncated_hmac: (+1)
   \        0x0   0xF8D0 0x20CC      LDR      R2,[R0, #+204]
   \        0x4   0xF361 0x328E      BFI      R2,R1,#+14,#+1
   \        0x8   0xF8C0 0x20CC      STR      R2,[R0, #+204]
   7603          }
   \        0xC   0x4770             BX       LR               ;; return
   7604          #endif /* MBEDTLS_SSL_TRUNCATED_HMAC */
   7605          
   7606          #if defined(MBEDTLS_SSL_CBC_RECORD_SPLITTING)

   \                                 In section .text, align 2, keep-with-next
   7607          void mbedtls_ssl_conf_cbc_record_splitting( mbedtls_ssl_config *conf, char split )
   7608          {
   7609              conf->cbc_record_splitting = split;
   \                     mbedtls_ssl_conf_cbc_record_splitting: (+1)
   \        0x0   0xF8D0 0x20CC      LDR      R2,[R0, #+204]
   \        0x4   0xF361 0x320C      BFI      R2,R1,#+12,#+1
   \        0x8   0xF8C0 0x20CC      STR      R2,[R0, #+204]
   7610          }
   \        0xC   0x4770             BX       LR               ;; return
   7611          #endif
   7612          

   \                                 In section .text, align 2, keep-with-next
   7613          void mbedtls_ssl_conf_legacy_renegotiation( mbedtls_ssl_config *conf, int allow_legacy )
   7614          {
   7615              conf->allow_legacy_renegotiation = allow_legacy;
   \                     mbedtls_ssl_conf_legacy_renegotiation: (+1)
   \        0x0   0xF8D0 0x20CC      LDR      R2,[R0, #+204]
   \        0x4   0xF361 0x1205      BFI      R2,R1,#+4,#+2
   \        0x8   0xF8C0 0x20CC      STR      R2,[R0, #+204]
   7616          }
   \        0xC   0x4770             BX       LR               ;; return
   7617          
   7618          #if defined(MBEDTLS_SSL_RENEGOTIATION)

   \                                 In section .text, align 2, keep-with-next
   7619          void mbedtls_ssl_conf_renegotiation( mbedtls_ssl_config *conf, int renegotiation )
   7620          {
   7621              conf->disable_renegotiation = renegotiation;
   \                     mbedtls_ssl_conf_renegotiation: (+1)
   \        0x0   0xF8D0 0x20CC      LDR      R2,[R0, #+204]
   \        0x4   0xF361 0x324D      BFI      R2,R1,#+13,#+1
   \        0x8   0xF8C0 0x20CC      STR      R2,[R0, #+204]
   7622          }
   \        0xC   0x4770             BX       LR               ;; return
   7623          

   \                                 In section .text, align 2, keep-with-next
   7624          void mbedtls_ssl_conf_renegotiation_enforced( mbedtls_ssl_config *conf, int max_records )
   7625          {
   7626              conf->renego_max_records = max_records;
   \                     mbedtls_ssl_conf_renegotiation_enforced: (+1)
   \        0x0   0xF8C0 0x10B4      STR      R1,[R0, #+180]
   7627          }
   \        0x4   0x4770             BX       LR               ;; return
   7628          

   \                                 In section .text, align 2, keep-with-next
   7629          void mbedtls_ssl_conf_renegotiation_period( mbedtls_ssl_config *conf,
   7630                                             const unsigned char period[8] )
   7631          {
   7632              memcpy( conf->renego_period, period, 8 );
   \                     mbedtls_ssl_conf_renegotiation_period: (+1)
   \        0x0   0x2208             MOVS     R2,#+8
   \        0x2   0x30B8             ADDS     R0,R0,#+184
   \        0x4   0x....'....        B.W      __aeabi_memcpy
   7633          }
   7634          #endif /* MBEDTLS_SSL_RENEGOTIATION */
   7635          
   7636          #if defined(MBEDTLS_SSL_SESSION_TICKETS)
   7637          #if defined(MBEDTLS_SSL_CLI_C)

   \                                 In section .text, align 2, keep-with-next
   7638          void mbedtls_ssl_conf_session_tickets( mbedtls_ssl_config *conf, int use_tickets )
   7639          {
   7640              conf->session_tickets = use_tickets;
   \                     mbedtls_ssl_conf_session_tickets: (+1)
   \        0x0   0xF8D0 0x20CC      LDR      R2,[R0, #+204]
   \        0x4   0xF361 0x32CF      BFI      R2,R1,#+15,#+1
   \        0x8   0xF8C0 0x20CC      STR      R2,[R0, #+204]
   7641          }
   \        0xC   0x4770             BX       LR               ;; return
   7642          #endif
   7643          
   7644          #if defined(MBEDTLS_SSL_SRV_C)

   \                                 In section .text, align 2, keep-with-next
   7645          void mbedtls_ssl_conf_session_tickets_cb( mbedtls_ssl_config *conf,
   7646                  mbedtls_ssl_ticket_write_t *f_ticket_write,
   7647                  mbedtls_ssl_ticket_parse_t *f_ticket_parse,
   7648                  void *p_ticket )
   7649          {
   7650              conf->f_ticket_write = f_ticket_write;
   \                     mbedtls_ssl_conf_session_tickets_cb: (+1)
   \        0x0   0x6501             STR      R1,[R0, #+80]
   7651              conf->f_ticket_parse = f_ticket_parse;
   \        0x2   0x6542             STR      R2,[R0, #+84]
   7652              conf->p_ticket       = p_ticket;
   \        0x4   0x6583             STR      R3,[R0, #+88]
   7653          }
   \        0x6   0x4770             BX       LR               ;; return
   7654          #endif
   7655          #endif /* MBEDTLS_SSL_SESSION_TICKETS */
   7656          
   7657          #if defined(MBEDTLS_SSL_EXPORT_KEYS)

   \                                 In section .text, align 2, keep-with-next
   7658          void mbedtls_ssl_conf_export_keys_cb( mbedtls_ssl_config *conf,
   7659                  mbedtls_ssl_export_keys_t *f_export_keys,
   7660                  void *p_export_keys )
   7661          {
   7662              conf->f_export_keys = f_export_keys;
   \                     mbedtls_ssl_conf_export_keys_cb: (+1)
   \        0x0   0x65C1             STR      R1,[R0, #+92]
   7663              conf->p_export_keys = p_export_keys;
   \        0x2   0x6602             STR      R2,[R0, #+96]
   7664          }
   \        0x4   0x4770             BX       LR               ;; return
   7665          #endif
   7666          
   7667          #if defined(MBEDTLS_SSL_ASYNC_PRIVATE)
   7668          void mbedtls_ssl_conf_async_private_cb(
   7669              mbedtls_ssl_config *conf,
   7670              mbedtls_ssl_async_sign_t *f_async_sign,
   7671              mbedtls_ssl_async_decrypt_t *f_async_decrypt,
   7672              mbedtls_ssl_async_resume_t *f_async_resume,
   7673              mbedtls_ssl_async_cancel_t *f_async_cancel,
   7674              void *async_config_data )
   7675          {
   7676              conf->f_async_sign_start = f_async_sign;
   7677              conf->f_async_decrypt_start = f_async_decrypt;
   7678              conf->f_async_resume = f_async_resume;
   7679              conf->f_async_cancel = f_async_cancel;
   7680              conf->p_async_config_data = async_config_data;
   7681          }
   7682          
   7683          void *mbedtls_ssl_conf_get_async_config_data( const mbedtls_ssl_config *conf )
   7684          {
   7685              return( conf->p_async_config_data );
   7686          }
   7687          
   7688          void *mbedtls_ssl_get_async_operation_data( const mbedtls_ssl_context *ssl )
   7689          {
   7690              if( ssl->handshake == NULL )
   7691                  return( NULL );
   7692              else
   7693                  return( ssl->handshake->user_async_ctx );
   7694          }
   7695          
   7696          void mbedtls_ssl_set_async_operation_data( mbedtls_ssl_context *ssl,
   7697                                           void *ctx )
   7698          {
   7699              if( ssl->handshake != NULL )
   7700                  ssl->handshake->user_async_ctx = ctx;
   7701          }
   7702          #endif /* MBEDTLS_SSL_ASYNC_PRIVATE */
   7703          
   7704          /*
   7705           * SSL get accessors
   7706           */

   \                                 In section .text, align 2, keep-with-next
   7707          size_t mbedtls_ssl_get_bytes_avail( const mbedtls_ssl_context *ssl )
   7708          {
   7709              return( ssl->in_offt == NULL ? 0 : ssl->in_msglen );
   \                     mbedtls_ssl_get_bytes_avail: (+1)
   \        0x0   0x6F41             LDR      R1,[R0, #+116]
   \        0x2   0x2900             CMP      R1,#+0
   \        0x4   0xD101             BNE.N    ??mbedtls_ssl_get_bytes_avail_0
   \        0x6   0x2000             MOVS     R0,#+0
   \        0x8   0x4770             BX       LR
   \                     ??mbedtls_ssl_get_bytes_avail_0: (+1)
   \        0xA   0x6FC0             LDR      R0,[R0, #+124]
   \        0xC   0x4770             BX       LR               ;; return
   7710          }
   7711          

   \                                 In section .text, align 2, keep-with-next
   7712          int mbedtls_ssl_check_pending( const mbedtls_ssl_context *ssl )
   7713          {
   \                     mbedtls_ssl_check_pending: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   7714              /*
   7715               * Case A: We're currently holding back
   7716               * a message for further processing.
   7717               */
   7718          
   7719              if( ssl->keep_current_message == 1 )
   \        0x2   0xF8D0 0x10A8      LDR      R1,[R0, #+168]
   \        0x6   0x2901             CMP      R1,#+1
   \        0x8   0xD10B             BNE.N    ??mbedtls_ssl_check_pending_0
   7720              {
   7721                  MBEDTLS_SSL_DEBUG_MSG( 3, ( "ssl_check_pending: record held back for processing" ) );
   \        0xA   0x....'....        LDR.W    R1,??DataTable77
   \        0xE   0x9100             STR      R1,[SP, #+0]
   \       0x10   0xF641 0x6329      MOVW     R3,#+7721
   \       0x14   0x....'....        LDR.W    R2,??DataTable72_1
   \       0x18   0x2103             MOVS     R1,#+3
   \       0x1A   0x....'....        BL       mbedtls_debug_print_msg
   7722                  return( 1 );
   \       0x1E   0x2001             MOVS     R0,#+1
   \       0x20   0xBD02             POP      {R1,PC}
   7723              }
   7724          
   7725              /*
   7726               * Case B: Further records are pending in the current datagram.
   7727               */
   7728          
   7729          #if defined(MBEDTLS_SSL_PROTO_DTLS)
   7730              if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM &&
   7731                  ssl->in_left > ssl->next_record_offset )
   \                     ??mbedtls_ssl_check_pending_0: (+1)
   \       0x22   0x6801             LDR      R1,[R0, #+0]
   \       0x24   0xF8D1 0x10CC      LDR      R1,[R1, #+204]
   \       0x28   0xF3C1 0x0140      UBFX     R1,R1,#+1,#+1
   \       0x2C   0x2900             CMP      R1,#+0
   \       0x2E   0xD011             BEQ.N    ??mbedtls_ssl_check_pending_1
   \       0x30   0xF8D0 0x1088      LDR      R1,[R0, #+136]
   \       0x34   0xF8D0 0x2080      LDR      R2,[R0, #+128]
   \       0x38   0x4291             CMP      R1,R2
   \       0x3A   0xD20B             BCS.N    ??mbedtls_ssl_check_pending_1
   7732              {
   7733                  MBEDTLS_SSL_DEBUG_MSG( 3, ( "ssl_check_pending: more records within current datagram" ) );
   \       0x3C   0x....'....        LDR.W    R1,??DataTable77_1
   \       0x40   0x9100             STR      R1,[SP, #+0]
   \       0x42   0xF641 0x6335      MOVW     R3,#+7733
   \       0x46   0x....'....        LDR.W    R2,??DataTable72_1
   \       0x4A   0x2103             MOVS     R1,#+3
   \       0x4C   0x....'....        BL       mbedtls_debug_print_msg
   7734                  return( 1 );
   \       0x50   0x2001             MOVS     R0,#+1
   \       0x52   0xBD02             POP      {R1,PC}
   7735              }
   7736          #endif /* MBEDTLS_SSL_PROTO_DTLS */
   7737          
   7738              /*
   7739               * Case C: A handshake message is being processed.
   7740               */
   7741          
   7742              if( ssl->in_hslen > 0 && ssl->in_hslen < ssl->in_msglen )
   \                     ??mbedtls_ssl_check_pending_1: (+1)
   \       0x54   0xF8D0 0x10A0      LDR      R1,[R0, #+160]
   \       0x58   0x2900             CMP      R1,#+0
   \       0x5A   0xD00E             BEQ.N    ??mbedtls_ssl_check_pending_2
   \       0x5C   0x6FC2             LDR      R2,[R0, #+124]
   \       0x5E   0x4291             CMP      R1,R2
   \       0x60   0xD20B             BCS.N    ??mbedtls_ssl_check_pending_2
   7743              {
   7744                  MBEDTLS_SSL_DEBUG_MSG( 3, ( "ssl_check_pending: more handshake messages within current record" ) );
   \       0x62   0x....'....        LDR.W    R1,??DataTable77_2
   \       0x66   0x9100             STR      R1,[SP, #+0]
   \       0x68   0xF44F 0x53F2      MOV      R3,#+7744
   \       0x6C   0x....'....        LDR.W    R2,??DataTable72_1
   \       0x70   0x2103             MOVS     R1,#+3
   \       0x72   0x....'....        BL       mbedtls_debug_print_msg
   7745                  return( 1 );
   \       0x76   0x2001             MOVS     R0,#+1
   \       0x78   0xBD02             POP      {R1,PC}
   7746              }
   7747          
   7748              /*
   7749               * Case D: An application data message is being processed
   7750               */
   7751              if( ssl->in_offt != NULL )
   \                     ??mbedtls_ssl_check_pending_2: (+1)
   \       0x7A   0x6F41             LDR      R1,[R0, #+116]
   \       0x7C   0x2900             CMP      R1,#+0
   \       0x7E   0xD00B             BEQ.N    ??mbedtls_ssl_check_pending_3
   7752              {
   7753                  MBEDTLS_SSL_DEBUG_MSG( 3, ( "ssl_check_pending: application data record is being processed" ) );
   \       0x80   0x....'....        LDR.W    R1,??DataTable77_3
   \       0x84   0x9100             STR      R1,[SP, #+0]
   \       0x86   0xF641 0x6349      MOVW     R3,#+7753
   \       0x8A   0x....'....        LDR.W    R2,??DataTable72_1
   \       0x8E   0x2103             MOVS     R1,#+3
   \       0x90   0x....'....        BL       mbedtls_debug_print_msg
   7754                  return( 1 );
   \       0x94   0x2001             MOVS     R0,#+1
   \       0x96   0xBD02             POP      {R1,PC}
   7755              }
   7756          
   7757              /*
   7758               * In all other cases, the rest of the message can be dropped.
   7759               * As in ssl_get_next_record, this needs to be adapted if
   7760               * we implement support for multiple alerts in single records.
   7761               */
   7762          
   7763              MBEDTLS_SSL_DEBUG_MSG( 3, ( "ssl_check_pending: nothing pending" ) );
   \                     ??mbedtls_ssl_check_pending_3: (+1)
   \       0x98   0x....'....        LDR.W    R1,??DataTable78
   \       0x9C   0x9100             STR      R1,[SP, #+0]
   \       0x9E   0xF641 0x6353      MOVW     R3,#+7763
   \       0xA2   0x....'....        LDR.W    R2,??DataTable72_1
   \       0xA6   0x2103             MOVS     R1,#+3
   \       0xA8   0x....'....        BL       mbedtls_debug_print_msg
   7764              return( 0 );
   \       0xAC   0x2000             MOVS     R0,#+0
   \       0xAE   0xBD02             POP      {R1,PC}          ;; return
   7765          }
   7766          

   \                                 In section .text, align 2, keep-with-next
   7767          uint32_t mbedtls_ssl_get_verify_result( const mbedtls_ssl_context *ssl )
   7768          {
   7769              if( ssl->session != NULL )
   \                     mbedtls_ssl_get_verify_result: (+1)
   \        0x0   0x6B41             LDR      R1,[R0, #+52]
   \        0x2   0x2900             CMP      R1,#+0
   \        0x4   0xD002             BEQ.N    ??mbedtls_ssl_get_verify_result_0
   7770                  return( ssl->session->verify_result );
   \        0x6   0x4608             MOV      R0,R1
   \        0x8   0x6E00             LDR      R0,[R0, #+96]
   \        0xA   0x4770             BX       LR
   7771          
   7772              if( ssl->session_negotiate != NULL )
   \                     ??mbedtls_ssl_get_verify_result_0: (+1)
   \        0xC   0x6B81             LDR      R1,[R0, #+56]
   \        0xE   0x2900             CMP      R1,#+0
   \       0x10   0xD002             BEQ.N    ??mbedtls_ssl_get_verify_result_1
   7773                  return( ssl->session_negotiate->verify_result );
   \       0x12   0x4608             MOV      R0,R1
   \       0x14   0x6E00             LDR      R0,[R0, #+96]
   \       0x16   0x4770             BX       LR
   7774          
   7775              return( 0xFFFFFFFF );
   \                     ??mbedtls_ssl_get_verify_result_1: (+1)
   \       0x18   0xF04F 0x30FF      MOV      R0,#-1
   \       0x1C   0x4770             BX       LR               ;; return
   7776          }
   7777          

   \                                 In section .text, align 2, keep-with-next
   7778          const char *mbedtls_ssl_get_ciphersuite( const mbedtls_ssl_context *ssl )
   7779          {
   7780              if( ssl == NULL || ssl->session == NULL )
   \                     mbedtls_ssl_get_ciphersuite: (+1)
   \        0x0   0x2800             CMP      R0,#+0
   \        0x2   0xD002             BEQ.N    ??mbedtls_ssl_get_ciphersuite_0
   \        0x4   0x6B41             LDR      R1,[R0, #+52]
   \        0x6   0x2900             CMP      R1,#+0
   \        0x8   0xD101             BNE.N    ??mbedtls_ssl_get_ciphersuite_1
   7781                  return( NULL );
   \                     ??mbedtls_ssl_get_ciphersuite_0: (+1)
   \        0xA   0x2000             MOVS     R0,#+0
   \        0xC   0x4770             BX       LR
   7782          
   7783              return mbedtls_ssl_get_ciphersuite_name( ssl->session->ciphersuite );
   \                     ??mbedtls_ssl_get_ciphersuite_1: (+1)
   \        0xE   0x4608             MOV      R0,R1
   \       0x10   0x6800             LDR      R0,[R0, #+0]
   \       0x12   0x....'....        B.W      mbedtls_ssl_get_ciphersuite_name
   7784          }
   7785          

   \                                 In section .text, align 4, keep-with-next
   7786          const char *mbedtls_ssl_get_version( const mbedtls_ssl_context *ssl )
   7787          {
   7788          #if defined(MBEDTLS_SSL_PROTO_DTLS)
   7789              if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
   \                     mbedtls_ssl_get_version: (+1)
   \        0x0   0x6801             LDR      R1,[R0, #+0]
   \        0x2   0xF8D1 0x10CC      LDR      R1,[R1, #+204]
   \        0x6   0xF3C1 0x0140      UBFX     R1,R1,#+1,#+1
   \        0xA   0x2900             CMP      R1,#+0
   \        0xC   0x6940             LDR      R0,[R0, #+20]
   \        0xE   0xD00D             BEQ.N    ??mbedtls_ssl_get_version_1
   7790              {
   7791                  switch( ssl->minor_ver )
   \       0x10   0x2802             CMP      R0,#+2
   \       0x12   0xD002             BEQ.N    ??mbedtls_ssl_get_version_2
   \       0x14   0x2803             CMP      R0,#+3
   \       0x16   0xD003             BEQ.N    ??mbedtls_ssl_get_version_3
   \       0x18   0xE005             B.N      ??mbedtls_ssl_get_version_4
   7792                  {
   7793                      case MBEDTLS_SSL_MINOR_VERSION_2:
   7794                          return( "DTLSv1.0" );
   \                     ??mbedtls_ssl_get_version_2: (+1)
   \       0x1A   0x....'....        LDR.W    R0,??DataTable78_1
   \       0x1E   0x4770             BX       LR
   7795          
   7796                      case MBEDTLS_SSL_MINOR_VERSION_3:
   7797                          return( "DTLSv1.2" );
   \                     ??mbedtls_ssl_get_version_3: (+1)
   \       0x20   0x....'....        LDR.W    R0,??DataTable78_2
   \       0x24   0x4770             BX       LR
   7798          
   7799                      default:
   7800                          return( "unknown (DTLS)" );
   \                     ??mbedtls_ssl_get_version_4: (+1)
   \       0x26   0x....'....        LDR.W    R0,??DataTable78_3
   \       0x2A   0x4770             BX       LR
   7801                  }
   7802              }
   7803          #endif
   7804          
   7805              switch( ssl->minor_ver )
   \                     ??mbedtls_ssl_get_version_1: (+1)
   \       0x2C   0x2803             CMP      R0,#+3
   \       0x2E   0xD80F             BHI.N    ??mbedtls_ssl_get_version_5
   \       0x30   0xE8DF 0xF000      TBB      [PC, R0]
   \                     ??mbedtls_ssl_get_version_0:
   \       0x34   0x02 0x05          DC8      0x2,0x5,0x8,0xB
   \              0x08 0x0B    
   7806              {
   7807                  case MBEDTLS_SSL_MINOR_VERSION_0:
   7808                      return( "SSLv3.0" );
   \                     ??mbedtls_ssl_get_version_6: (+1)
   \       0x38   0x....'....        LDR.W    R0,??DataTable78_4
   \       0x3C   0x4770             BX       LR
   7809          
   7810                  case MBEDTLS_SSL_MINOR_VERSION_1:
   7811                      return( "TLSv1.0" );
   \                     ??mbedtls_ssl_get_version_7: (+1)
   \       0x3E   0x....'....        LDR.W    R0,??DataTable78_5
   \       0x42   0x4770             BX       LR
   7812          
   7813                  case MBEDTLS_SSL_MINOR_VERSION_2:
   7814                      return( "TLSv1.1" );
   \                     ??mbedtls_ssl_get_version_8: (+1)
   \       0x44   0x....'....        LDR.W    R0,??DataTable78_6
   \       0x48   0x4770             BX       LR
   7815          
   7816                  case MBEDTLS_SSL_MINOR_VERSION_3:
   7817                      return( "TLSv1.2" );
   \                     ??mbedtls_ssl_get_version_9: (+1)
   \       0x4A   0x....'....        LDR.W    R0,??DataTable78_7
   \       0x4E   0x4770             BX       LR
   7818          
   7819                  default:
   7820                      return( "unknown" );
   \                     ??mbedtls_ssl_get_version_5: (+1)
   \       0x50   0x....'....        LDR.W    R0,??DataTable78_8
   \       0x54   0x4770             BX       LR               ;; return
   7821              }
   7822          }
   7823          

   \                                 In section .text, align 2, keep-with-next
   7824          int mbedtls_ssl_get_record_expansion( const mbedtls_ssl_context *ssl )
   7825          {
   \                     mbedtls_ssl_get_record_expansion: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4605             MOV      R5,R0
   7826              size_t transform_expansion = 0;
   7827              const mbedtls_ssl_transform *transform = ssl->transform_out;
   \        0x4   0x6C6C             LDR      R4,[R5, #+68]
   7828              unsigned block_size;
   7829          
   7830              if( transform == NULL )
   \        0x6   0x2C00             CMP      R4,#+0
   \        0x8   0xD103             BNE.N    ??mbedtls_ssl_get_record_expansion_0
   7831                  return( (int) mbedtls_ssl_hdr_len( ssl ) );
   \        0xA   0xE8BD 0x4032      POP      {R1,R4,R5,LR}
   \        0xE   0x....'....        B.W      mbedtls_ssl_hdr_len
   7832          
   7833          #if defined(MBEDTLS_ZLIB_SUPPORT)
   7834              if( ssl->session_out->compression != MBEDTLS_SSL_COMPRESS_NULL )
   7835                  return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
   7836          #endif
   7837          
   7838              switch( mbedtls_cipher_get_cipher_mode( &transform->cipher_ctx_enc ) )
   \                     ??mbedtls_ssl_get_record_expansion_0: (+1)
   \       0x12   0xF104 0x0050      ADD      R0,R4,#+80
   \       0x16   0x....'....        BL       mbedtls_cipher_get_cipher_mode
   \       0x1A   0x1E80             SUBS     R0,R0,#+2
   \       0x1C   0xD00B             BEQ.N    ??mbedtls_ssl_get_record_expansion_1
   \       0x1E   0x1F00             SUBS     R0,R0,#+4
   \       0x20   0x2802             CMP      R0,#+2
   \       0x22   0xD901             BLS.N    ??mbedtls_ssl_get_record_expansion_2
   \       0x24   0x1F00             SUBS     R0,R0,#+4
   \       0x26   0xD111             BNE.N    ??mbedtls_ssl_get_record_expansion_3
   7839              {
   7840                  case MBEDTLS_MODE_GCM:
   7841                  case MBEDTLS_MODE_CCM:
   7842                  case MBEDTLS_MODE_CHACHAPOLY:
   7843                  case MBEDTLS_MODE_STREAM:
   7844                      transform_expansion = transform->minlen;
   \                     ??mbedtls_ssl_get_record_expansion_2: (+1)
   \       0x28   0x68A4             LDR      R4,[R4, #+8]
   7845                      break;
   7846          
   7847                  case MBEDTLS_MODE_CBC:
   7848          
   7849                      block_size = mbedtls_cipher_get_block_size(
   7850                          &transform->cipher_ctx_enc );
   7851          
   7852                      /* Expansion due to the addition of the MAC. */
   7853                      transform_expansion += transform->maclen;
   7854          
   7855                      /* Expansion due to the addition of CBC padding;
   7856                       * Theoretically up to 256 bytes, but we never use
   7857                       * more than the block size of the underlying cipher. */
   7858                      transform_expansion += block_size;
   7859          
   7860                      /* For TLS 1.1 or higher, an explicit IV is added
   7861                       * after the record header. */
   7862          #if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
   7863                      if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
   7864                          transform_expansion += block_size;
   7865          #endif /* MBEDTLS_SSL_PROTO_TLS1_1 || MBEDTLS_SSL_PROTO_TLS1_2 */
   7866          
   7867                      break;
   7868          
   7869                  default:
   7870                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
   7871                      return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   7872              }
   7873          
   7874              return( (int)( mbedtls_ssl_hdr_len( ssl ) + transform_expansion ) );
   \                     ??mbedtls_ssl_get_record_expansion_4: (+1)
   \       0x2A   0x4628             MOV      R0,R5
   \       0x2C   0x....'....        BL       mbedtls_ssl_hdr_len
   \       0x30   0x1824             ADDS     R4,R4,R0
   \       0x32   0x4620             MOV      R0,R4
   \       0x34   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   \                     ??mbedtls_ssl_get_record_expansion_1: (+1)
   \       0x36   0xF104 0x0050      ADD      R0,R4,#+80
   \       0x3A   0x....'....        BL       mbedtls_cipher_get_block_size
   \       0x3E   0x6964             LDR      R4,[R4, #+20]
   \       0x40   0x1904             ADDS     R4,R0,R4
   \       0x42   0x6969             LDR      R1,[R5, #+20]
   \       0x44   0x2902             CMP      R1,#+2
   \       0x46   0xDBF0             BLT.N    ??mbedtls_ssl_get_record_expansion_4
   \       0x48   0x1904             ADDS     R4,R0,R4
   \       0x4A   0xE7EE             B.N      ??mbedtls_ssl_get_record_expansion_4
   \                     ??mbedtls_ssl_get_record_expansion_3: (+1)
   \       0x4C   0x....'....        LDR.W    R0,??DataTable78_9
   \       0x50   0x9000             STR      R0,[SP, #+0]
   \       0x52   0xF641 0x63BE      MOVW     R3,#+7870
   \       0x56   0x....             LDR.N    R2,??DataTable72_1
   \       0x58   0x2101             MOVS     R1,#+1
   \       0x5A   0x4628             MOV      R0,R5
   \       0x5C   0x....'....        BL       mbedtls_debug_print_msg
   \       0x60   0x....'....        LDR.W    R0,??DataTable79  ;; 0xffff9400
   \       0x64   0xBD32             POP      {R1,R4,R5,PC}
   7875          }
   7876          
   7877          #if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)

   \                                 In section .text, align 2, keep-with-next
   7878          size_t mbedtls_ssl_get_max_frag_len( const mbedtls_ssl_context *ssl )
   7879          {
   \                     mbedtls_ssl_get_max_frag_len: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4604             MOV      R4,R0
   7880              size_t max_len;
   7881          
   7882              /*
   7883               * Assume mfl_code is correct since it was checked when set
   7884               */
   7885              max_len = ssl_mfl_code_to_length( ssl->conf->mfl_code );
   \        0x4   0x6820             LDR      R0,[R4, #+0]
   \        0x6   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \        0xA   0xF3C0 0x1082      UBFX     R0,R0,#+6,#+3
   \        0xE   0x....'....        BL       ssl_mfl_code_to_length
   \       0x12   0x4605             MOV      R5,R0
   7886          
   7887              /* Check if a smaller max length was negotiated */
   7888              if( ssl->session_out != NULL &&
   7889                  ssl_mfl_code_to_length( ssl->session_out->mfl_code ) < max_len )
   \       0x14   0x6B20             LDR      R0,[R4, #+48]
   \       0x16   0x2800             CMP      R0,#+0
   \       0x18   0xD00B             BEQ.N    ??mbedtls_ssl_get_max_frag_len_0
   \       0x1A   0xF890 0x0070      LDRB     R0,[R0, #+112]
   \       0x1E   0x....'....        BL       ssl_mfl_code_to_length
   \       0x22   0x42A8             CMP      R0,R5
   \       0x24   0xD205             BCS.N    ??mbedtls_ssl_get_max_frag_len_0
   7890              {
   7891                  max_len = ssl_mfl_code_to_length( ssl->session_out->mfl_code );
   \       0x26   0x6B20             LDR      R0,[R4, #+48]
   \       0x28   0xF890 0x0070      LDRB     R0,[R0, #+112]
   \       0x2C   0x....'....        BL       ssl_mfl_code_to_length
   \       0x30   0x4605             MOV      R5,R0
   7892              }
   7893          
   7894              /* During a handshake, use the value being negotiated */
   7895              if( ssl->session_negotiate != NULL &&
   7896                  ssl_mfl_code_to_length( ssl->session_negotiate->mfl_code ) < max_len )
   \                     ??mbedtls_ssl_get_max_frag_len_0: (+1)
   \       0x32   0x6BA0             LDR      R0,[R4, #+56]
   \       0x34   0x2800             CMP      R0,#+0
   \       0x36   0xD00B             BEQ.N    ??mbedtls_ssl_get_max_frag_len_1
   \       0x38   0xF890 0x0070      LDRB     R0,[R0, #+112]
   \       0x3C   0x....'....        BL       ssl_mfl_code_to_length
   \       0x40   0x42A8             CMP      R0,R5
   \       0x42   0xD205             BCS.N    ??mbedtls_ssl_get_max_frag_len_1
   7897              {
   7898                  max_len = ssl_mfl_code_to_length( ssl->session_negotiate->mfl_code );
   \       0x44   0x6BA0             LDR      R0,[R4, #+56]
   \       0x46   0xF890 0x0070      LDRB     R0,[R0, #+112]
   \       0x4A   0x....'....        BL       ssl_mfl_code_to_length
   \       0x4E   0x4605             MOV      R5,R0
   7899              }
   7900          
   7901              return( max_len );
   \                     ??mbedtls_ssl_get_max_frag_len_1: (+1)
   \       0x50   0x4628             MOV      R0,R5
   \       0x52   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   7902          }
   7903          #endif /* MBEDTLS_SSL_MAX_FRAGMENT_LENGTH */
   7904          
   7905          #if defined(MBEDTLS_SSL_PROTO_DTLS)

   \                                 In section .text, align 2, keep-with-next
   7906          static size_t ssl_get_current_mtu( const mbedtls_ssl_context *ssl )
   7907          {
   7908              if( ssl->handshake == NULL || ssl->handshake->mtu == 0 )
   \                     ssl_get_current_mtu: (+1)
   \        0x0   0x6BC1             LDR      R1,[R0, #+60]
   \        0x2   0x2900             CMP      R1,#+0
   \        0x4   0xD003             BEQ.N    ??ssl_get_current_mtu_0
   \        0x6   0xF8B1 0x124C      LDRH     R1,[R1, #+588]
   \        0xA   0x2900             CMP      R1,#+0
   \        0xC   0xD102             BNE.N    ??ssl_get_current_mtu_1
   7909                  return( ssl->mtu );
   \                     ??ssl_get_current_mtu_0: (+1)
   \        0xE   0xF8B0 0x00DC      LDRH     R0,[R0, #+220]
   \       0x12   0x4770             BX       LR
   7910          
   7911              if( ssl->mtu == 0 )
   \                     ??ssl_get_current_mtu_1: (+1)
   \       0x14   0xF8B0 0x10DC      LDRH     R1,[R0, #+220]
   \       0x18   0x2900             CMP      R1,#+0
   \       0x1A   0xD103             BNE.N    ??ssl_get_current_mtu_2
   7912                  return( ssl->handshake->mtu );
   \       0x1C   0x6BC0             LDR      R0,[R0, #+60]
   \       0x1E   0xF8B0 0x024C      LDRH     R0,[R0, #+588]
   \       0x22   0x4770             BX       LR
   7913          
   7914              return( ssl->mtu < ssl->handshake->mtu ?
   7915                      ssl->mtu : ssl->handshake->mtu );
   \                     ??ssl_get_current_mtu_2: (+1)
   \       0x24   0x6BC2             LDR      R2,[R0, #+60]
   \       0x26   0xF8B2 0x224C      LDRH     R2,[R2, #+588]
   \       0x2A   0x4291             CMP      R1,R2
   \       0x2C   0xD201             BCS.N    ??ssl_get_current_mtu_3
   \       0x2E   0x4608             MOV      R0,R1
   \       0x30   0x4770             BX       LR
   \                     ??ssl_get_current_mtu_3: (+1)
   \       0x32   0x4610             MOV      R0,R2
   \       0x34   0x4770             BX       LR               ;; return
   7916          }
   7917          #endif /* MBEDTLS_SSL_PROTO_DTLS */
   7918          

   \                                 In section .text, align 2, keep-with-next
   7919          int mbedtls_ssl_get_max_out_record_payload( const mbedtls_ssl_context *ssl )
   7920          {
   \                     mbedtls_ssl_get_max_out_record_payload: (+1)
   \        0x0   0xB57C             PUSH     {R2-R6,LR}
   \        0x2   0x4604             MOV      R4,R0
   7921              size_t max_len = MBEDTLS_SSL_OUT_CONTENT_LEN;
   \        0x4   0xF44F 0x5520      MOV      R5,#+10240
   7922          
   7923          #if !defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH) && \
   7924              !defined(MBEDTLS_SSL_PROTO_DTLS)
   7925              (void) ssl;
   7926          #endif
   7927          
   7928          #if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)
   7929              const size_t mfl = mbedtls_ssl_get_max_frag_len( ssl );
   \        0x8   0x....'....        BL       mbedtls_ssl_get_max_frag_len
   7930          
   7931              if( max_len > mfl )
   \        0xC   0xF5B0 0x5F20      CMP      R0,#+10240
   \       0x10   0xD200             BCS.N    ??mbedtls_ssl_get_max_out_record_payload_0
   7932                  max_len = mfl;
   \       0x12   0x4605             MOV      R5,R0
   7933          #endif
   7934          
   7935          #if defined(MBEDTLS_SSL_PROTO_DTLS)
   7936              if( ssl_get_current_mtu( ssl ) != 0 )
   \                     ??mbedtls_ssl_get_max_out_record_payload_0: (+1)
   \       0x14   0x4620             MOV      R0,R4
   \       0x16   0x....'....        BL       ssl_get_current_mtu
   \       0x1A   0x2800             CMP      R0,#+0
   \       0x1C   0xD01C             BEQ.N    ??mbedtls_ssl_get_max_out_record_payload_1
   7937              {
   7938                  const size_t mtu = ssl_get_current_mtu( ssl );
   \       0x1E   0x4620             MOV      R0,R4
   \       0x20   0x....'....        BL       ssl_get_current_mtu
   \       0x24   0x4606             MOV      R6,R0
   7939                  const int ret = mbedtls_ssl_get_record_expansion( ssl );
   \       0x26   0x4620             MOV      R0,R4
   \       0x28   0x....'....        BL       mbedtls_ssl_get_record_expansion
   7940                  const size_t overhead = (size_t) ret;
   7941          
   7942                  if( ret < 0 )
   \       0x2C   0x2800             CMP      R0,#+0
   \       0x2E   0xD414             BMI.N    ??mbedtls_ssl_get_max_out_record_payload_2
   7943                      return( ret );
   7944          
   7945                  if( mtu <= overhead )
   \       0x30   0x42B0             CMP      R0,R6
   \       0x32   0xD30C             BCC.N    ??mbedtls_ssl_get_max_out_record_payload_3
   7946                  {
   7947                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "MTU too low for record expansion" ) );
   \       0x34   0x....'....        LDR.W    R0,??DataTable78_10
   \       0x38   0x9000             STR      R0,[SP, #+0]
   \       0x3A   0xF641 0x730B      MOVW     R3,#+7947
   \       0x3E   0x....             LDR.N    R2,??DataTable72_1
   \       0x40   0x2101             MOVS     R1,#+1
   \       0x42   0x4620             MOV      R0,R4
   \       0x44   0x....'....        BL       mbedtls_debug_print_msg
   7948                      return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
   \       0x48   0x....'....        LDR.W    R0,??DataTable79_1  ;; 0xffff8f80
   \       0x4C   0xBD76             POP      {R1,R2,R4-R6,PC}
   7949                  }
   7950          
   7951                  if( max_len > mtu - overhead )
   \                     ??mbedtls_ssl_get_max_out_record_payload_3: (+1)
   \       0x4E   0x1A31             SUBS     R1,R6,R0
   \       0x50   0x42A9             CMP      R1,R5
   \       0x52   0xD201             BCS.N    ??mbedtls_ssl_get_max_out_record_payload_1
   7952                      max_len = mtu - overhead;
   \       0x54   0x4605             MOV      R5,R0
   \       0x56   0x1B75             SUBS     R5,R6,R5
   7953              }
   7954          #endif /* MBEDTLS_SSL_PROTO_DTLS */
   7955          
   7956          #if !defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH) &&        \
   7957              !defined(MBEDTLS_SSL_PROTO_DTLS)
   7958              ((void) ssl);
   7959          #endif
   7960          
   7961              return( (int) max_len );
   \                     ??mbedtls_ssl_get_max_out_record_payload_1: (+1)
   \       0x58   0x4628             MOV      R0,R5
   \                     ??mbedtls_ssl_get_max_out_record_payload_2: (+1)
   \       0x5A   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
   7962          }
   7963          
   7964          #if defined(MBEDTLS_X509_CRT_PARSE_C)

   \                                 In section .text, align 2, keep-with-next
   7965          const mbedtls_x509_crt *mbedtls_ssl_get_peer_cert( const mbedtls_ssl_context *ssl )
   7966          {
   7967              if( ssl == NULL || ssl->session == NULL )
   \                     mbedtls_ssl_get_peer_cert: (+1)
   \        0x0   0x2800             CMP      R0,#+0
   \        0x2   0xD002             BEQ.N    ??mbedtls_ssl_get_peer_cert_0
   \        0x4   0x6B41             LDR      R1,[R0, #+52]
   \        0x6   0x2900             CMP      R1,#+0
   \        0x8   0xD101             BNE.N    ??mbedtls_ssl_get_peer_cert_1
   7968                  return( NULL );
   \                     ??mbedtls_ssl_get_peer_cert_0: (+1)
   \        0xA   0x2000             MOVS     R0,#+0
   \        0xC   0x4770             BX       LR
   7969          
   7970              return( ssl->session->peer_cert );
   \                     ??mbedtls_ssl_get_peer_cert_1: (+1)
   \        0xE   0x4608             MOV      R0,R1
   \       0x10   0x6DC0             LDR      R0,[R0, #+92]
   \       0x12   0x4770             BX       LR               ;; return
   7971          }
   7972          #endif /* MBEDTLS_X509_CRT_PARSE_C */
   7973          
   7974          #if defined(MBEDTLS_SSL_CLI_C)

   \                                 In section .text, align 2, keep-with-next
   7975          int mbedtls_ssl_get_session( const mbedtls_ssl_context *ssl, mbedtls_ssl_session *dst )
   7976          {
   \                     mbedtls_ssl_get_session: (+1)
   \        0x0   0x460A             MOV      R2,R1
   7977              if( ssl == NULL ||
   7978                  dst == NULL ||
   7979                  ssl->session == NULL ||
   7980                  ssl->conf->endpoint != MBEDTLS_SSL_IS_CLIENT )
   \        0x2   0x2800             CMP      R0,#+0
   \        0x4   0xD009             BEQ.N    ??mbedtls_ssl_get_session_0
   \        0x6   0x2A00             CMP      R2,#+0
   \        0x8   0xD007             BEQ.N    ??mbedtls_ssl_get_session_0
   \        0xA   0x6B41             LDR      R1,[R0, #+52]
   \        0xC   0x2900             CMP      R1,#+0
   \        0xE   0xD004             BEQ.N    ??mbedtls_ssl_get_session_0
   \       0x10   0x6801             LDR      R1,[R0, #+0]
   \       0x12   0xF891 0x10CC      LDRB     R1,[R1, #+204]
   \       0x16   0x07C9             LSLS     R1,R1,#+31
   \       0x18   0xD502             BPL.N    ??mbedtls_ssl_get_session_1
   7981              {
   7982                  return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   \                     ??mbedtls_ssl_get_session_0: (+1)
   \       0x1A   0x....'....        LDR.W    R0,??DataTable80  ;; 0xffff8f00
   \       0x1E   0x4770             BX       LR
   7983              }
   7984          
   7985              return( ssl_session_copy( dst, ssl->session ) );
   \                     ??mbedtls_ssl_get_session_1: (+1)
   \       0x20   0x6B41             LDR      R1,[R0, #+52]
   \       0x22   0x4610             MOV      R0,R2
   \       0x24   0x....'....        B.W      ssl_session_copy
   7986          }
   7987          #endif /* MBEDTLS_SSL_CLI_C */
   7988          
   7989          /*
   7990           * Perform a single step of the SSL handshake
   7991           */

   \                                 In section .text, align 2, keep-with-next
   7992          int mbedtls_ssl_handshake_step( mbedtls_ssl_context *ssl )
   7993          {
   \                     mbedtls_ssl_handshake_step: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x4604             MOV      R4,R0
   7994              int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
   \        0x4   0x....             LDR.N    R0,??DataTable71_1  ;; 0xffff8f80
   7995          
   7996              if( ssl == NULL || ssl->conf == NULL )
   \        0x6   0x2C00             CMP      R4,#+0
   \        0x8   0xD002             BEQ.N    ??mbedtls_ssl_handshake_step_0
   \        0xA   0x6821             LDR      R1,[R4, #+0]
   \        0xC   0x2900             CMP      R1,#+0
   \        0xE   0xD102             BNE.N    ??mbedtls_ssl_handshake_step_1
   7997                  return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   \                     ??mbedtls_ssl_handshake_step_0: (+1)
   \       0x10   0x....'....        LDR.W    R0,??DataTable80  ;; 0xffff8f00
   \       0x14   0xBD10             POP      {R4,PC}
   7998          
   7999          #if defined(MBEDTLS_SSL_CLI_C)
   8000              if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
   \                     ??mbedtls_ssl_handshake_step_1: (+1)
   \       0x16   0xF891 0x10CC      LDRB     R1,[R1, #+204]
   \       0x1A   0x07C9             LSLS     R1,R1,#+31
   \       0x1C   0xD402             BMI.N    ??mbedtls_ssl_handshake_step_2
   8001                  ret = mbedtls_ssl_handshake_client_step( ssl );
   \       0x1E   0x4620             MOV      R0,R4
   \       0x20   0x....'....        BL       mbedtls_ssl_handshake_client_step
   8002          #endif
   8003          #if defined(MBEDTLS_SSL_SRV_C)
   8004              if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
   \                     ??mbedtls_ssl_handshake_step_2: (+1)
   \       0x24   0x6821             LDR      R1,[R4, #+0]
   \       0x26   0xF891 0x10CC      LDRB     R1,[R1, #+204]
   \       0x2A   0x07C9             LSLS     R1,R1,#+31
   \       0x2C   0xD504             BPL.N    ??mbedtls_ssl_handshake_step_3
   8005                  ret = mbedtls_ssl_handshake_server_step( ssl );
   \       0x2E   0x4620             MOV      R0,R4
   \       0x30   0xE8BD 0x4010      POP      {R4,LR}
   \       0x34   0x....'....        B.W      mbedtls_ssl_handshake_server_step
   8006          #endif
   8007          
   8008              return( ret );
   \                     ??mbedtls_ssl_handshake_step_3: (+1)
   \       0x38   0xBD10             POP      {R4,PC}          ;; return
   8009          }
   8010          
   8011          /*
   8012           * Perform the SSL handshake
   8013           */

   \                                 In section .text, align 2, keep-with-next
   8014          int mbedtls_ssl_handshake( mbedtls_ssl_context *ssl )
   8015          {
   \                     mbedtls_ssl_handshake: (+1)
   \        0x0   0xB57C             PUSH     {R2-R6,LR}
   \        0x2   0x4605             MOV      R5,R0
   8016              int ret = 0;
   \        0x4   0x2400             MOVS     R4,#+0
   8017          
   8018              if( ssl == NULL || ssl->conf == NULL )
   \        0x6   0x2D00             CMP      R5,#+0
   \        0x8   0xD002             BEQ.N    ??mbedtls_ssl_handshake_0
   \        0xA   0x6828             LDR      R0,[R5, #+0]
   \        0xC   0x2800             CMP      R0,#+0
   \        0xE   0xD101             BNE.N    ??mbedtls_ssl_handshake_1
   8019                  return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   \                     ??mbedtls_ssl_handshake_0: (+1)
   \       0x10   0x....             LDR.N    R0,??DataTable74  ;; 0xffff8f00
   \       0x12   0xBD76             POP      {R1,R2,R4-R6,PC}
   8020          
   8021              MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> handshake" ) );
   \                     ??mbedtls_ssl_handshake_1: (+1)
   \       0x14   0x....             LDR.N    R6,??DataTable72_1
   \       0x16   0x....'....        LDR.W    R0,??DataTable79_2
   \       0x1A   0x9000             STR      R0,[SP, #+0]
   \       0x1C   0xF641 0x7355      MOVW     R3,#+8021
   \       0x20   0x4632             MOV      R2,R6
   \       0x22   0x2102             MOVS     R1,#+2
   \       0x24   0x4628             MOV      R0,R5
   \       0x26   0x....'....        BL       mbedtls_debug_print_msg
   8022          
   8023              while( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
   \                     ??mbedtls_ssl_handshake_2: (+1)
   \       0x2A   0x6868             LDR      R0,[R5, #+4]
   \       0x2C   0x2810             CMP      R0,#+16
   \       0x2E   0xD004             BEQ.N    ??mbedtls_ssl_handshake_3
   8024              {
   8025                  ret = mbedtls_ssl_handshake_step( ssl );
   \       0x30   0x4628             MOV      R0,R5
   \       0x32   0x....'....        BL       mbedtls_ssl_handshake_step
   \       0x36   0x0004             MOVS     R4,R0
   8026          
   8027                  if( ret != 0 )
   \       0x38   0xD0F7             BEQ.N    ??mbedtls_ssl_handshake_2
   8028                      break;
   8029              }
   8030          
   8031              MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= handshake" ) );
   \                     ??mbedtls_ssl_handshake_3: (+1)
   \       0x3A   0x....'....        LDR.W    R0,??DataTable80_1
   \       0x3E   0x9000             STR      R0,[SP, #+0]
   \       0x40   0xF641 0x735F      MOVW     R3,#+8031
   \       0x44   0x4632             MOV      R2,R6
   \       0x46   0x2102             MOVS     R1,#+2
   \       0x48   0x4628             MOV      R0,R5
   \       0x4A   0x....'....        BL       mbedtls_debug_print_msg
   8032          
   8033              return( ret );
   \       0x4E   0x4620             MOV      R0,R4
   \       0x50   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
   8034          }
   8035          
   8036          #if defined(MBEDTLS_SSL_RENEGOTIATION)
   8037          #if defined(MBEDTLS_SSL_SRV_C)
   8038          /*
   8039           * Write HelloRequest to request renegotiation on server
   8040           */

   \                                 In section .text, align 2, keep-with-next
   8041          static int ssl_write_hello_request( mbedtls_ssl_context *ssl )
   8042          {
   \                     ssl_write_hello_request: (+1)
   \        0x0   0xB57C             PUSH     {R2-R6,LR}
   \        0x2   0x4605             MOV      R5,R0
   8043              int ret;
   8044          
   8045              MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write hello request" ) );
   \        0x4   0x....             LDR.N    R6,??DataTable72_1
   \        0x6   0x....'....        LDR.W    R0,??DataTable79_3
   \        0xA   0x9000             STR      R0,[SP, #+0]
   \        0xC   0xF641 0x736D      MOVW     R3,#+8045
   \       0x10   0x4632             MOV      R2,R6
   \       0x12   0x2102             MOVS     R1,#+2
   \       0x14   0x4628             MOV      R0,R5
   \       0x16   0x....'....        BL       mbedtls_debug_print_msg
   8046          
   8047              ssl->out_msglen  = 4;
   \       0x1A   0x2004             MOVS     R0,#+4
   \       0x1C   0xF8C5 0x00CC      STR      R0,[R5, #+204]
   8048              ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
   \       0x20   0x2016             MOVS     R0,#+22
   \       0x22   0xF8C5 0x00C8      STR      R0,[R5, #+200]
   8049              ssl->out_msg[0]  = MBEDTLS_SSL_HS_HELLO_REQUEST;
   \       0x26   0x2000             MOVS     R0,#+0
   \       0x28   0xF8D5 0x10C4      LDR      R1,[R5, #+196]
   \       0x2C   0x7008             STRB     R0,[R1, #+0]
   8050          
   8051              if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
   \       0x2E   0x4628             MOV      R0,R5
   \       0x30   0x....'....        BL       mbedtls_ssl_write_handshake_msg
   \       0x34   0x0004             MOVS     R4,R0
   \       0x36   0xD00C             BEQ.N    ??ssl_write_hello_request_0
   8052              {
   8053                  MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_handshake_msg", ret );
   \       0x38   0x9401             STR      R4,[SP, #+4]
   \       0x3A   0x....'....        LDR.W    R0,??DataTable79_4
   \       0x3E   0x9000             STR      R0,[SP, #+0]
   \       0x40   0xF641 0x7375      MOVW     R3,#+8053
   \       0x44   0x4632             MOV      R2,R6
   \       0x46   0x2101             MOVS     R1,#+1
   \       0x48   0x4628             MOV      R0,R5
   \       0x4A   0x....'....        BL       mbedtls_debug_print_ret
   8054                  return( ret );
   \       0x4E   0x4620             MOV      R0,R4
   \       0x50   0xBD76             POP      {R1,R2,R4-R6,PC}
   8055              }
   8056          
   8057              MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write hello request" ) );
   \                     ??ssl_write_hello_request_0: (+1)
   \       0x52   0x....'....        LDR.W    R0,??DataTable80_2
   \       0x56   0x9000             STR      R0,[SP, #+0]
   \       0x58   0xF641 0x7379      MOVW     R3,#+8057
   \       0x5C   0x4632             MOV      R2,R6
   \       0x5E   0x2102             MOVS     R1,#+2
   \       0x60   0x4628             MOV      R0,R5
   \       0x62   0x....'....        BL       mbedtls_debug_print_msg
   8058          
   8059              return( 0 );
   \       0x66   0x2000             MOVS     R0,#+0
   \       0x68   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
   8060          }
   8061          #endif /* MBEDTLS_SSL_SRV_C */
   8062          
   8063          /*
   8064           * Actually renegotiate current connection, triggered by either:
   8065           * - any side: calling mbedtls_ssl_renegotiate(),
   8066           * - client: receiving a HelloRequest during mbedtls_ssl_read(),
   8067           * - server: receiving any handshake message on server during mbedtls_ssl_read() after
   8068           *   the initial handshake is completed.
   8069           * If the handshake doesn't complete due to waiting for I/O, it will continue
   8070           * during the next calls to mbedtls_ssl_renegotiate() or mbedtls_ssl_read() respectively.
   8071           */

   \                                 In section .text, align 2, keep-with-next
   8072          static int ssl_start_renegotiation( mbedtls_ssl_context *ssl )
   8073          {
   \                     ssl_start_renegotiation: (+1)
   \        0x0   0xB57C             PUSH     {R2-R6,LR}
   \        0x2   0x4605             MOV      R5,R0
   8074              int ret;
   8075          
   8076              MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> renegotiate" ) );
   \        0x4   0x....             LDR.N    R6,??DataTable72_1
   \        0x6   0x....'....        LDR.W    R0,??DataTable80_3
   \        0xA   0x9000             STR      R0,[SP, #+0]
   \        0xC   0xF641 0x738C      MOVW     R3,#+8076
   \       0x10   0x4632             MOV      R2,R6
   \       0x12   0x2102             MOVS     R1,#+2
   \       0x14   0x4628             MOV      R0,R5
   \       0x16   0x....'....        BL       mbedtls_debug_print_msg
   8077          
   8078              if( ( ret = ssl_handshake_init( ssl ) ) != 0 )
   \       0x1A   0x4628             MOV      R0,R5
   \       0x1C   0x....'....        BL       ssl_handshake_init
   \       0x20   0x2800             CMP      R0,#+0
   \       0x22   0xD138             BNE.N    ??ssl_start_renegotiation_0
   8079                  return( ret );
   8080          
   8081              /* RFC 6347 4.2.2: "[...] the HelloRequest will have message_seq = 0 and
   8082               * the ServerHello will have message_seq = 1" */
   8083          #if defined(MBEDTLS_SSL_PROTO_DTLS)
   8084              if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM &&
   8085                  ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_PENDING )
   \       0x24   0x6828             LDR      R0,[R5, #+0]
   \       0x26   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \       0x2A   0xF3C0 0x0040      UBFX     R0,R0,#+1,#+1
   \       0x2E   0x2800             CMP      R0,#+0
   \       0x30   0xD010             BEQ.N    ??ssl_start_renegotiation_1
   \       0x32   0x68A8             LDR      R0,[R5, #+8]
   \       0x34   0x2803             CMP      R0,#+3
   \       0x36   0xD10D             BNE.N    ??ssl_start_renegotiation_1
   8086              {
   8087                  if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
   \       0x38   0x6828             LDR      R0,[R5, #+0]
   \       0x3A   0xF890 0x00CC      LDRB     R0,[R0, #+204]
   \       0x3E   0x07C0             LSLS     R0,R0,#+31
   \       0x40   0xD504             BPL.N    ??ssl_start_renegotiation_2
   8088                      ssl->handshake->out_msg_seq = 1;
   \       0x42   0x2001             MOVS     R0,#+1
   \       0x44   0x6BE9             LDR      R1,[R5, #+60]
   \       0x46   0xF8C1 0x01D4      STR      R0,[R1, #+468]
   \       0x4A   0xE003             B.N      ??ssl_start_renegotiation_1
   8089                  else
   8090                      ssl->handshake->in_msg_seq = 1;
   \                     ??ssl_start_renegotiation_2: (+1)
   \       0x4C   0x2001             MOVS     R0,#+1
   \       0x4E   0x6BE9             LDR      R1,[R5, #+60]
   \       0x50   0xF8C1 0x01D8      STR      R0,[R1, #+472]
   8091              }
   8092          #endif
   8093          
   8094              ssl->state = MBEDTLS_SSL_HELLO_REQUEST;
   \                     ??ssl_start_renegotiation_1: (+1)
   \       0x54   0x2000             MOVS     R0,#+0
   \       0x56   0x6068             STR      R0,[R5, #+4]
   8095              ssl->renego_status = MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS;
   \       0x58   0x2001             MOVS     R0,#+1
   \       0x5A   0x60A8             STR      R0,[R5, #+8]
   8096          
   8097              if( ( ret = mbedtls_ssl_handshake( ssl ) ) != 0 )
   \       0x5C   0x4628             MOV      R0,R5
   \       0x5E   0x....'....        BL       mbedtls_ssl_handshake
   \       0x62   0x0004             MOVS     R4,R0
   \       0x64   0xD00C             BEQ.N    ??ssl_start_renegotiation_3
   8098              {
   8099                  MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_handshake", ret );
   \       0x66   0x9401             STR      R4,[SP, #+4]
   \       0x68   0x....'....        LDR.W    R0,??DataTable80_4
   \       0x6C   0x9000             STR      R0,[SP, #+0]
   \       0x6E   0xF641 0x73A3      MOVW     R3,#+8099
   \       0x72   0x4632             MOV      R2,R6
   \       0x74   0x2101             MOVS     R1,#+1
   \       0x76   0x4628             MOV      R0,R5
   \       0x78   0x....'....        BL       mbedtls_debug_print_ret
   8100                  return( ret );
   \       0x7C   0x4620             MOV      R0,R4
   \       0x7E   0xBD76             POP      {R1,R2,R4-R6,PC}
   8101              }
   8102          
   8103              MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= renegotiate" ) );
   \                     ??ssl_start_renegotiation_3: (+1)
   \       0x80   0x....'....        LDR.W    R0,??DataTable80_5
   \       0x84   0x9000             STR      R0,[SP, #+0]
   \       0x86   0xF641 0x73A7      MOVW     R3,#+8103
   \       0x8A   0x4632             MOV      R2,R6
   \       0x8C   0x2102             MOVS     R1,#+2
   \       0x8E   0x4628             MOV      R0,R5
   \       0x90   0x....'....        BL       mbedtls_debug_print_msg
   8104          
   8105              return( 0 );
   \       0x94   0x2000             MOVS     R0,#+0
   \                     ??ssl_start_renegotiation_0: (+1)
   \       0x96   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
   8106          }
   8107          
   8108          /*
   8109           * Renegotiate current connection on client,
   8110           * or request renegotiation on server
   8111           */

   \                                 In section .text, align 2, keep-with-next
   8112          int mbedtls_ssl_renegotiate( mbedtls_ssl_context *ssl )
   8113          {
   \                     mbedtls_ssl_renegotiate: (+1)
   \        0x0   0xB53E             PUSH     {R1-R5,LR}
   \        0x2   0x0005             MOVS     R5,R0
   8114              int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
   8115          
   8116              if( ssl == NULL || ssl->conf == NULL )
   \        0x4   0xD01D             BEQ.N    ??mbedtls_ssl_renegotiate_0
   \        0x6   0x6828             LDR      R0,[R5, #+0]
   \        0x8   0x2800             CMP      R0,#+0
   \        0xA   0xD01A             BEQ.N    ??mbedtls_ssl_renegotiate_0
   8117                  return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   8118          
   8119          #if defined(MBEDTLS_SSL_SRV_C)
   8120              /* On server, just send the request */
   8121              if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
   \        0xC   0xF890 0x00CC      LDRB     R0,[R0, #+204]
   \       0x10   0x07C0             LSLS     R0,R0,#+31
   \       0x12   0xD510             BPL.N    ??mbedtls_ssl_renegotiate_1
   8122              {
   8123                  if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
   \       0x14   0x6868             LDR      R0,[R5, #+4]
   \       0x16   0x2810             CMP      R0,#+16
   \       0x18   0xD113             BNE.N    ??mbedtls_ssl_renegotiate_0
   8124                      return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   8125          
   8126                  ssl->renego_status = MBEDTLS_SSL_RENEGOTIATION_PENDING;
   \       0x1A   0x2003             MOVS     R0,#+3
   \       0x1C   0x60A8             STR      R0,[R5, #+8]
   8127          
   8128                  /* Did we already try/start sending HelloRequest? */
   8129                  if( ssl->out_left != 0 )
   \       0x1E   0xF8D5 0x00D0      LDR      R0,[R5, #+208]
   \       0x22   0x2800             CMP      R0,#+0
   \       0x24   0x4628             MOV      R0,R5
   \       0x26   0xD003             BEQ.N    ??mbedtls_ssl_renegotiate_2
   8130                      return( mbedtls_ssl_flush_output( ssl ) );
   \       0x28   0xE8BD 0x403E      POP      {R1-R5,LR}
   \       0x2C   0x....'....        B.W      mbedtls_ssl_flush_output
   8131          
   8132                  return( ssl_write_hello_request( ssl ) );
   \                     ??mbedtls_ssl_renegotiate_2: (+1)
   \       0x30   0xE8BD 0x403E      POP      {R1-R5,LR}
   \       0x34   0x....             B.N      ssl_write_hello_request
   8133              }
   8134          #endif /* MBEDTLS_SSL_SRV_C */
   8135          
   8136          #if defined(MBEDTLS_SSL_CLI_C)
   8137              /*
   8138               * On client, either start the renegotiation process or,
   8139               * if already in progress, continue the handshake
   8140               */
   8141              if( ssl->renego_status != MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS )
   \                     ??mbedtls_ssl_renegotiate_1: (+1)
   \       0x36   0x68A8             LDR      R0,[R5, #+8]
   \       0x38   0x2801             CMP      R0,#+1
   \       0x3A   0xD017             BEQ.N    ??mbedtls_ssl_renegotiate_3
   8142              {
   8143                  if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
   \       0x3C   0x6868             LDR      R0,[R5, #+4]
   \       0x3E   0x2810             CMP      R0,#+16
   \       0x40   0xD001             BEQ.N    ??mbedtls_ssl_renegotiate_4
   8144                      return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   \                     ??mbedtls_ssl_renegotiate_0: (+1)
   \       0x42   0x....             LDR.N    R0,??DataTable74  ;; 0xffff8f00
   \       0x44   0xBD3E             POP      {R1-R5,PC}
   8145          
   8146                  if( ( ret = ssl_start_renegotiation( ssl ) ) != 0 )
   \                     ??mbedtls_ssl_renegotiate_4: (+1)
   \       0x46   0x4628             MOV      R0,R5
   \       0x48   0x....'....        BL       ssl_start_renegotiation
   \       0x4C   0x0004             MOVS     R4,R0
   \       0x4E   0xD020             BEQ.N    ??mbedtls_ssl_renegotiate_5
   8147                  {
   8148                      MBEDTLS_SSL_DEBUG_RET( 1, "ssl_start_renegotiation", ret );
   \       0x50   0x9401             STR      R4,[SP, #+4]
   \       0x52   0x....'....        LDR.W    R0,??DataTable80_6
   \       0x56   0x9000             STR      R0,[SP, #+0]
   \       0x58   0xF641 0x73D4      MOVW     R3,#+8148
   \       0x5C   0x....'....        LDR.W    R2,??DataTable80_7
   \       0x60   0x2101             MOVS     R1,#+1
   \       0x62   0x4628             MOV      R0,R5
   \       0x64   0x....'....        BL       mbedtls_debug_print_ret
   8149                      return( ret );
   \       0x68   0x4620             MOV      R0,R4
   \       0x6A   0xBD3E             POP      {R1-R5,PC}
   8150                  }
   8151              }
   8152              else
   8153              {
   8154                  if( ( ret = mbedtls_ssl_handshake( ssl ) ) != 0 )
   \                     ??mbedtls_ssl_renegotiate_3: (+1)
   \       0x6C   0x4628             MOV      R0,R5
   \       0x6E   0x....'....        BL       mbedtls_ssl_handshake
   \       0x72   0x0004             MOVS     R4,R0
   \       0x74   0xD00D             BEQ.N    ??mbedtls_ssl_renegotiate_5
   8155                  {
   8156                      MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_handshake", ret );
   \       0x76   0x9401             STR      R4,[SP, #+4]
   \       0x78   0x....'....        LDR.W    R0,??DataTable80_4
   \       0x7C   0x9000             STR      R0,[SP, #+0]
   \       0x7E   0xF641 0x73DC      MOVW     R3,#+8156
   \       0x82   0x....'....        LDR.W    R2,??DataTable80_7
   \       0x86   0x2101             MOVS     R1,#+1
   \       0x88   0x4628             MOV      R0,R5
   \       0x8A   0x....'....        BL       mbedtls_debug_print_ret
   8157                      return( ret );
   \       0x8E   0x4620             MOV      R0,R4
   \       0x90   0xBD3E             POP      {R1-R5,PC}
   8158                  }
   8159              }
   8160          #endif /* MBEDTLS_SSL_CLI_C */
   8161          
   8162              return( ret );
   \                     ??mbedtls_ssl_renegotiate_5: (+1)
   \       0x92   0x4620             MOV      R0,R4
   \       0x94   0xBD3E             POP      {R1-R5,PC}       ;; return
   8163          }
   8164          
   8165          /*
   8166           * Check record counters and renegotiate if they're above the limit.
   8167           */

   \                                 In section .text, align 2, keep-with-next
   8168          static int ssl_check_ctr_renegotiate( mbedtls_ssl_context *ssl )
   8169          {
   \                     ssl_check_ctr_renegotiate: (+1)
   \        0x0   0xB57C             PUSH     {R2-R6,LR}
   \        0x2   0x4604             MOV      R4,R0
   8170              size_t ep_len = ssl_ep_len( ssl );
   \        0x4   0x....'....        BL       ssl_ep_len
   \        0x8   0x4605             MOV      R5,R0
   8171              int in_ctr_cmp;
   8172              int out_ctr_cmp;
   8173          
   8174              if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER ||
   8175                  ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_PENDING ||
   8176                  ssl->conf->disable_renegotiation == MBEDTLS_SSL_RENEGOTIATION_DISABLED )
   \        0xA   0x6860             LDR      R0,[R4, #+4]
   \        0xC   0x2810             CMP      R0,#+16
   \        0xE   0xD122             BNE.N    ??ssl_check_ctr_renegotiate_0
   \       0x10   0x68A0             LDR      R0,[R4, #+8]
   \       0x12   0x2803             CMP      R0,#+3
   \       0x14   0xD01F             BEQ.N    ??ssl_check_ctr_renegotiate_0
   \       0x16   0x6820             LDR      R0,[R4, #+0]
   \       0x18   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \       0x1C   0xF3C0 0x3040      UBFX     R0,R0,#+13,#+1
   \       0x20   0x2800             CMP      R0,#+0
   \       0x22   0xD018             BEQ.N    ??ssl_check_ctr_renegotiate_0
   8177              {
   8178                  return( 0 );
   8179              }
   8180          
   8181              in_ctr_cmp = memcmp( ssl->in_ctr + ep_len,
   8182                                  ssl->conf->renego_period + ep_len, 8 - ep_len );
   \       0x24   0xF1C5 0x0208      RSB      R2,R5,#+8
   \       0x28   0x6820             LDR      R0,[R4, #+0]
   \       0x2A   0x4428             ADD      R0,R0,R5
   \       0x2C   0xF100 0x01B8      ADD      R1,R0,#+184
   \       0x30   0x6E20             LDR      R0,[R4, #+96]
   \       0x32   0x4428             ADD      R0,R0,R5
   \       0x34   0x....'....        BL       memcmp
   \       0x38   0x4606             MOV      R6,R0
   8183              out_ctr_cmp = memcmp( ssl->cur_out_ctr + ep_len,
   8184                                    ssl->conf->renego_period + ep_len, 8 - ep_len );
   \       0x3A   0xF1C5 0x0208      RSB      R2,R5,#+8
   \       0x3E   0x6820             LDR      R0,[R4, #+0]
   \       0x40   0x4428             ADD      R0,R0,R5
   \       0x42   0xF100 0x01B8      ADD      R1,R0,#+184
   \       0x46   0x1960             ADDS     R0,R4,R5
   \       0x48   0x30D4             ADDS     R0,R0,#+212
   \       0x4A   0x....'....        BL       memcmp
   8185          
   8186              if( in_ctr_cmp <= 0 && out_ctr_cmp <= 0 )
   \       0x4E   0x2E01             CMP      R6,#+1
   \       0x50   0xDA03             BGE.N    ??ssl_check_ctr_renegotiate_1
   \       0x52   0x2801             CMP      R0,#+1
   \       0x54   0xDA01             BGE.N    ??ssl_check_ctr_renegotiate_1
   8187              {
   8188                  return( 0 );
   \                     ??ssl_check_ctr_renegotiate_0: (+1)
   \       0x56   0x2000             MOVS     R0,#+0
   \       0x58   0xBD76             POP      {R1,R2,R4-R6,PC}
   8189              }
   8190          
   8191              MBEDTLS_SSL_DEBUG_MSG( 1, ( "record counter limit reached: renegotiate" ) );
   \                     ??ssl_check_ctr_renegotiate_1: (+1)
   \       0x5A   0x....'....        LDR.W    R0,??DataTable80_8
   \       0x5E   0x9000             STR      R0,[SP, #+0]
   \       0x60   0xF641 0x73FF      MOVW     R3,#+8191
   \       0x64   0x....'....        LDR.W    R2,??DataTable80_7
   \       0x68   0x2101             MOVS     R1,#+1
   \       0x6A   0x4620             MOV      R0,R4
   \       0x6C   0x....'....        BL       mbedtls_debug_print_msg
   8192              return( mbedtls_ssl_renegotiate( ssl ) );
   \       0x70   0x4620             MOV      R0,R4
   \       0x72   0xE8BD 0x4076      POP      {R1,R2,R4-R6,LR}
   \       0x76   0x....             B.N      mbedtls_ssl_renegotiate
   8193          }
   8194          #endif /* MBEDTLS_SSL_RENEGOTIATION */
   8195          
   8196          /*
   8197           * Receive application data decrypted from the SSL layer
   8198           */

   \                                 In section .text, align 2, keep-with-next
   8199          int mbedtls_ssl_read( mbedtls_ssl_context *ssl, unsigned char *buf, size_t len )
   8200          {
   \                     mbedtls_ssl_read: (+1)
   \        0x0   0xE92D 0x43FE      PUSH     {R1-R9,LR}
   \        0x4   0x4605             MOV      R5,R0
   \        0x6   0x460F             MOV      R7,R1
   \        0x8   0x4616             MOV      R6,R2
   8201              int ret;
   8202              size_t n;
   8203          
   8204              if( ssl == NULL || ssl->conf == NULL )
   \        0xA   0x2D00             CMP      R5,#+0
   \        0xC   0xD002             BEQ.N    ??mbedtls_ssl_read_0
   \        0xE   0x6828             LDR      R0,[R5, #+0]
   \       0x10   0x2800             CMP      R0,#+0
   \       0x12   0xD102             BNE.N    ??mbedtls_ssl_read_1
   8205                  return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   \                     ??mbedtls_ssl_read_0: (+1)
   \       0x14   0x....'....        LDR.W    R0,??DataTable80  ;; 0xffff8f00
   \       0x18   0xE1A1             B.N      ??mbedtls_ssl_read_2
   8206          
   8207              MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> read" ) );
   \                     ??mbedtls_ssl_read_1: (+1)
   \       0x1A   0x....'....        LDR.W    R8,??DataTable80_7
   \       0x1E   0x....'....        LDR.W    R0,??DataTable80_9
   \       0x22   0x9000             STR      R0,[SP, #+0]
   \       0x24   0xF242 0x030F      MOVW     R3,#+8207
   \       0x28   0x4642             MOV      R2,R8
   \       0x2A   0x2102             MOVS     R1,#+2
   \       0x2C   0x4628             MOV      R0,R5
   \       0x2E   0x....'....        BL       mbedtls_debug_print_msg
   8208          
   8209          #if defined(MBEDTLS_SSL_PROTO_DTLS)
   8210              if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
   \       0x32   0x6828             LDR      R0,[R5, #+0]
   \       0x34   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \       0x38   0xF3C0 0x0040      UBFX     R0,R0,#+1,#+1
   \       0x3C   0x2800             CMP      R0,#+0
   \       0x3E   0xD012             BEQ.N    ??mbedtls_ssl_read_3
   8211              {
   8212                  if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
   \       0x40   0x4628             MOV      R0,R5
   \       0x42   0x....'....        BL       mbedtls_ssl_flush_output
   \       0x46   0x2800             CMP      R0,#+0
   \       0x48   0xF040 0x8189      BNE.W    ??mbedtls_ssl_read_2
   8213                      return( ret );
   8214          
   8215                  if( ssl->handshake != NULL &&
   8216                      ssl->handshake->retransmit_state == MBEDTLS_SSL_RETRANS_SENDING )
   \       0x4C   0x6BE8             LDR      R0,[R5, #+60]
   \       0x4E   0x2800             CMP      R0,#+0
   \       0x50   0xD009             BEQ.N    ??mbedtls_ssl_read_3
   \       0x52   0xF890 0x01E8      LDRB     R0,[R0, #+488]
   \       0x56   0x2801             CMP      R0,#+1
   \       0x58   0xD105             BNE.N    ??mbedtls_ssl_read_3
   8217                  {
   8218                      if( ( ret = mbedtls_ssl_flight_transmit( ssl ) ) != 0 )
   \       0x5A   0x4628             MOV      R0,R5
   \       0x5C   0x....'....        BL       mbedtls_ssl_flight_transmit
   \       0x60   0x2800             CMP      R0,#+0
   \       0x62   0xF040 0x817C      BNE.W    ??mbedtls_ssl_read_2
   8219                          return( ret );
   8220                  }
   8221              }
   8222          #endif
   8223          
   8224              /*
   8225               * Check if renegotiation is necessary and/or handshake is
   8226               * in process. If yes, perform/continue, and fall through
   8227               * if an unexpected packet is received while the client
   8228               * is waiting for the ServerHello.
   8229               *
   8230               * (There is no equivalent to the last condition on
   8231               *  the server-side as it is not treated as within
   8232               *  a handshake while waiting for the ClientHello
   8233               *  after a renegotiation request.)
   8234               */
   8235          
   8236          #if defined(MBEDTLS_SSL_RENEGOTIATION)
   8237              ret = ssl_check_ctr_renegotiate( ssl );
   \                     ??mbedtls_ssl_read_3: (+1)
   \       0x66   0x4628             MOV      R0,R5
   \       0x68   0x....'....        BL       ssl_check_ctr_renegotiate
   \       0x6C   0x4604             MOV      R4,R0
   8238              if( ret != MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO &&
   8239                  ret != 0 )
   \       0x6E   0x....'....        LDR.W    R9,??DataTable81  ;; 0xffff9500
   \       0x72   0x454C             CMP      R4,R9
   \       0x74   0xD00E             BEQ.N    ??mbedtls_ssl_read_4
   \       0x76   0x2C00             CMP      R4,#+0
   \       0x78   0xD00C             BEQ.N    ??mbedtls_ssl_read_4
   8240              {
   8241                  MBEDTLS_SSL_DEBUG_RET( 1, "ssl_check_ctr_renegotiate", ret );
   \       0x7A   0x9401             STR      R4,[SP, #+4]
   \       0x7C   0x....'....        LDR.W    R0,??DataTable81_1
   \       0x80   0x9000             STR      R0,[SP, #+0]
   \       0x82   0xF242 0x0331      MOVW     R3,#+8241
   \       0x86   0x4642             MOV      R2,R8
   \       0x88   0x2101             MOVS     R1,#+1
   \       0x8A   0x4628             MOV      R0,R5
   \       0x8C   0x....'....        BL       mbedtls_debug_print_ret
   8242                  return( ret );
   \       0x90   0x4620             MOV      R0,R4
   \       0x92   0xE164             B.N      ??mbedtls_ssl_read_2
   8243              }
   8244          #endif
   8245          
   8246              if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
   \                     ??mbedtls_ssl_read_4: (+1)
   \       0x94   0x6868             LDR      R0,[R5, #+4]
   \       0x96   0x2810             CMP      R0,#+16
   \       0x98   0xD06D             BEQ.N    ??mbedtls_ssl_read_5
   8247              {
   8248                  ret = mbedtls_ssl_handshake( ssl );
   \       0x9A   0x4628             MOV      R0,R5
   \       0x9C   0x....'....        BL       mbedtls_ssl_handshake
   \       0xA0   0x4604             MOV      R4,R0
   8249                  if( ret != MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO &&
   8250                      ret != 0 )
   \       0xA2   0x454C             CMP      R4,R9
   \       0xA4   0xD067             BEQ.N    ??mbedtls_ssl_read_5
   \       0xA6   0x2C00             CMP      R4,#+0
   \       0xA8   0xD065             BEQ.N    ??mbedtls_ssl_read_5
   8251                  {
   8252                      MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_handshake", ret );
   \       0xAA   0x9401             STR      R4,[SP, #+4]
   \       0xAC   0x....'....        LDR.W    R0,??DataTable80_4
   \       0xB0   0x9000             STR      R0,[SP, #+0]
   \       0xB2   0xF242 0x033C      MOVW     R3,#+8252
   \       0xB6   0x4642             MOV      R2,R8
   \       0xB8   0x2101             MOVS     R1,#+1
   \       0xBA   0x4628             MOV      R0,R5
   \       0xBC   0x....'....        BL       mbedtls_debug_print_ret
   8253                      return( ret );
   \       0xC0   0x4620             MOV      R0,R4
   \       0xC2   0xE14C             B.N      ??mbedtls_ssl_read_2
   8254                  }
   8255              }
   8256          
   8257              /* Loop as long as no application data record is available */
   8258              while( ssl->in_offt == NULL )
   8259              {
   8260                  /* Start timer if not already running */
   8261                  if( ssl->f_get_timer != NULL &&
   8262                      ssl->f_get_timer( ssl->p_timer ) == -1 )
   8263                  {
   8264                      ssl_set_timer( ssl, ssl->conf->read_timeout );
   8265                  }
   8266          
   8267                  if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   8268                  {
   8269                      if( ret == MBEDTLS_ERR_SSL_CONN_EOF )
   8270                          return( 0 );
   8271          
   8272                      MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
   \                     ??mbedtls_ssl_read_6: (+1)
   \       0xC4   0x9401             STR      R4,[SP, #+4]
   \       0xC6   0x....'....        LDR.W    R1,??DataTable81_2
   \       0xCA   0x9100             STR      R1,[SP, #+0]
   \       0xCC   0xF242 0x0350      MOVW     R3,#+8272
   \       0xD0   0x4642             MOV      R2,R8
   \       0xD2   0x2101             MOVS     R1,#+1
   \       0xD4   0x....'....        BL       mbedtls_debug_print_ret
   8273                      return( ret );
   \       0xD8   0x4620             MOV      R0,R4
   \       0xDA   0xE140             B.N      ??mbedtls_ssl_read_2
   8274                  }
   8275          
   8276                  if( ssl->in_msglen  == 0 &&
   8277                      ssl->in_msgtype == MBEDTLS_SSL_MSG_APPLICATION_DATA )
   \                     ??mbedtls_ssl_read_7: (+1)
   \       0xDC   0x6FE8             LDR      R0,[R5, #+124]
   \       0xDE   0x2800             CMP      R0,#+0
   \       0xE0   0xD11A             BNE.N    ??mbedtls_ssl_read_8
   \       0xE2   0x6FA8             LDR      R0,[R5, #+120]
   \       0xE4   0x2817             CMP      R0,#+23
   \       0xE6   0xD117             BNE.N    ??mbedtls_ssl_read_8
   8278                  {
   8279                      /*
   8280                       * OpenSSL sends empty messages to randomize the IV
   8281                       */
   8282                      if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
   \       0xE8   0x2101             MOVS     R1,#+1
   \       0xEA   0x4628             MOV      R0,R5
   \       0xEC   0x....'....        BL       mbedtls_ssl_read_record
   \       0xF0   0x0004             MOVS     R4,R0
   \       0xF2   0xD011             BEQ.N    ??mbedtls_ssl_read_8
   8283                      {
   8284                          if( ret == MBEDTLS_ERR_SSL_CONN_EOF )
   \       0xF4   0xF514 0x4FE5      CMN      R4,#+29312
   \       0xF8   0xD101             BNE.N    ??mbedtls_ssl_read_9
   8285                              return( 0 );
   \       0xFA   0x2000             MOVS     R0,#+0
   \       0xFC   0xE12F             B.N      ??mbedtls_ssl_read_2
   8286          
   8287                          MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
   \                     ??mbedtls_ssl_read_9: (+1)
   \       0xFE   0x9401             STR      R4,[SP, #+4]
   \      0x100   0x....'....        LDR.W    R0,??DataTable81_2
   \      0x104   0x9000             STR      R0,[SP, #+0]
   \      0x106   0xF242 0x035F      MOVW     R3,#+8287
   \      0x10A   0x4642             MOV      R2,R8
   \      0x10C   0x2101             MOVS     R1,#+1
   \      0x10E   0x4628             MOV      R0,R5
   \      0x110   0x....'....        BL       mbedtls_debug_print_ret
   8288                          return( ret );
   \      0x114   0x4620             MOV      R0,R4
   \      0x116   0xE122             B.N      ??mbedtls_ssl_read_2
   8289                      }
   8290                  }
   8291          
   8292                  if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
   \                     ??mbedtls_ssl_read_8: (+1)
   \      0x118   0x6FA8             LDR      R0,[R5, #+120]
   \      0x11A   0x2816             CMP      R0,#+22
   \      0x11C   0xF040 0x80AE      BNE.W    ??mbedtls_ssl_read_10
   8293                  {
   8294                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "received handshake message" ) );
   \      0x120   0x....'....        LDR.W    R0,??DataTable82
   \      0x124   0x9000             STR      R0,[SP, #+0]
   \      0x126   0xF242 0x0366      MOVW     R3,#+8294
   \      0x12A   0x4642             MOV      R2,R8
   \      0x12C   0x2101             MOVS     R1,#+1
   \      0x12E   0x4628             MOV      R0,R5
   \      0x130   0x....'....        BL       mbedtls_debug_print_msg
   8295          
   8296                      /*
   8297                       * - For client-side, expect SERVER_HELLO_REQUEST.
   8298                       * - For server-side, expect CLIENT_HELLO.
   8299                       * - Fail (TLS) or silently drop record (DTLS) in other cases.
   8300                       */
   8301          
   8302          #if defined(MBEDTLS_SSL_CLI_C)
   8303                      if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT &&
   8304                          ( ssl->in_msg[0] != MBEDTLS_SSL_HS_HELLO_REQUEST ||
   8305                            ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ) )
   \      0x134   0x6828             LDR      R0,[R5, #+0]
   \      0x136   0xF890 0x00CC      LDRB     R0,[R0, #+204]
   \      0x13A   0x07C0             LSLS     R0,R0,#+31
   \      0x13C   0xD43A             BMI.N    ??mbedtls_ssl_read_11
   \      0x13E   0x6F28             LDR      R0,[R5, #+112]
   \      0x140   0x7800             LDRB     R0,[R0, #+0]
   \      0x142   0x2800             CMP      R0,#+0
   \      0x144   0xD106             BNE.N    ??mbedtls_ssl_read_12
   \      0x146   0x4628             MOV      R0,R5
   \      0x148   0x....'....        BL       mbedtls_ssl_hs_hdr_len
   \      0x14C   0xF8D5 0x10A0      LDR      R1,[R5, #+160]
   \      0x150   0x4281             CMP      R1,R0
   \      0x152   0xD02F             BEQ.N    ??mbedtls_ssl_read_11
   8306                      {
   8307                          MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake received (not HelloRequest)" ) );
   \                     ??mbedtls_ssl_read_12: (+1)
   \      0x154   0x....'....        LDR.W    R0,??DataTable82_1
   \      0x158   0x9000             STR      R0,[SP, #+0]
   \      0x15A   0xF242 0x0373      MOVW     R3,#+8307
   \      0x15E   0x4642             MOV      R2,R8
   \      0x160   0x2101             MOVS     R1,#+1
   \      0x162   0x4628             MOV      R0,R5
   \      0x164   0x....'....        BL       mbedtls_debug_print_msg
   8308          
   8309                          /* With DTLS, drop the packet (probably from last handshake) */
   8310          #if defined(MBEDTLS_SSL_PROTO_DTLS)
   8311                          if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
   \      0x168   0x6828             LDR      R0,[R5, #+0]
   \      0x16A   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \      0x16E   0xF3C0 0x0040      UBFX     R0,R0,#+1,#+1
   \      0x172   0x2800             CMP      R0,#+0
   \      0x174   0xD038             BEQ.N    ??mbedtls_ssl_read_13
   8312                          {
   8313                              continue;
   8314                          }
   8315          #endif
   8316                          return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
   8317                      }
   \                     ??mbedtls_ssl_read_5: (+1)
   \      0x176   0x6F68             LDR      R0,[R5, #+116]
   \      0x178   0x2800             CMP      R0,#+0
   \      0x17A   0xF040 0x80F2      BNE.W    ??mbedtls_ssl_read_14
   \      0x17E   0x6DA8             LDR      R0,[R5, #+88]
   \      0x180   0x2800             CMP      R0,#+0
   \      0x182   0xD00B             BEQ.N    ??mbedtls_ssl_read_15
   \      0x184   0x6D28             LDR      R0,[R5, #+80]
   \      0x186   0x6DA9             LDR      R1,[R5, #+88]
   \      0x188   0x4788             BLX      R1
   \      0x18A   0xF110 0x0F01      CMN      R0,#+1
   \      0x18E   0xD105             BNE.N    ??mbedtls_ssl_read_15
   \      0x190   0x6828             LDR      R0,[R5, #+0]
   \      0x192   0xF8D0 0x10A8      LDR      R1,[R0, #+168]
   \      0x196   0x4628             MOV      R0,R5
   \      0x198   0x....'....        BL       ssl_set_timer
   \                     ??mbedtls_ssl_read_15: (+1)
   \      0x19C   0x2101             MOVS     R1,#+1
   \      0x19E   0x4628             MOV      R0,R5
   \      0x1A0   0x....'....        BL       mbedtls_ssl_read_record
   \      0x1A4   0x0004             MOVS     R4,R0
   \      0x1A6   0xD099             BEQ.N    ??mbedtls_ssl_read_7
   \      0x1A8   0x4628             MOV      R0,R5
   \      0x1AA   0xF514 0x4FE5      CMN      R4,#+29312
   \      0x1AE   0xD189             BNE.N    ??mbedtls_ssl_read_6
   \      0x1B0   0x2000             MOVS     R0,#+0
   \      0x1B2   0xE0D4             B.N      ??mbedtls_ssl_read_2
   8318          #endif /* MBEDTLS_SSL_CLI_C */
   8319          
   8320          #if defined(MBEDTLS_SSL_SRV_C)
   8321                      if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER &&
   8322                          ssl->in_msg[0] != MBEDTLS_SSL_HS_CLIENT_HELLO )
   \                     ??mbedtls_ssl_read_11: (+1)
   \      0x1B4   0x6828             LDR      R0,[R5, #+0]
   \      0x1B6   0xF890 0x00CC      LDRB     R0,[R0, #+204]
   \      0x1BA   0x07C0             LSLS     R0,R0,#+31
   \      0x1BC   0xD517             BPL.N    ??mbedtls_ssl_read_16
   \      0x1BE   0x6F28             LDR      R0,[R5, #+112]
   \      0x1C0   0x7800             LDRB     R0,[R0, #+0]
   \      0x1C2   0x2801             CMP      R0,#+1
   \      0x1C4   0xD013             BEQ.N    ??mbedtls_ssl_read_16
   8323                      {
   8324                          MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake received (not ClientHello)" ) );
   \      0x1C6   0x....'....        LDR.W    R0,??DataTable82_2
   \      0x1CA   0x9000             STR      R0,[SP, #+0]
   \      0x1CC   0xF242 0x0384      MOVW     R3,#+8324
   \      0x1D0   0x4642             MOV      R2,R8
   \      0x1D2   0x2101             MOVS     R1,#+1
   \      0x1D4   0x4628             MOV      R0,R5
   \      0x1D6   0x....'....        BL       mbedtls_debug_print_msg
   8325          
   8326                          /* With DTLS, drop the packet (probably from last handshake) */
   8327          #if defined(MBEDTLS_SSL_PROTO_DTLS)
   8328                          if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
   \      0x1DA   0x6828             LDR      R0,[R5, #+0]
   \      0x1DC   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \      0x1E0   0xF3C0 0x0040      UBFX     R0,R0,#+1,#+1
   \      0x1E4   0x2800             CMP      R0,#+0
   \      0x1E6   0xD1C6             BNE.N    ??mbedtls_ssl_read_5
   8329                          {
   8330                              continue;
   8331                          }
   8332          #endif
   8333                          return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
   \                     ??mbedtls_ssl_read_13: (+1)
   \      0x1E8   0x....'....        LDR.W    R0,??DataTable82_3  ;; 0xffff8900
   \      0x1EC   0xE0B7             B.N      ??mbedtls_ssl_read_2
   8334                      }
   8335          #endif /* MBEDTLS_SSL_SRV_C */
   8336          
   8337          #if defined(MBEDTLS_SSL_RENEGOTIATION)
   8338                      /* Determine whether renegotiation attempt should be accepted */
   8339                      if( ! ( ssl->conf->disable_renegotiation == MBEDTLS_SSL_RENEGOTIATION_DISABLED ||
   8340                              ( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
   8341                                ssl->conf->allow_legacy_renegotiation ==
   8342                                                             MBEDTLS_SSL_LEGACY_NO_RENEGOTIATION ) ) )
   \                     ??mbedtls_ssl_read_16: (+1)
   \      0x1EE   0x6828             LDR      R0,[R5, #+0]
   \      0x1F0   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \      0x1F4   0xF3C0 0x3040      UBFX     R0,R0,#+13,#+1
   \      0x1F8   0x2800             CMP      R0,#+0
   \      0x1FA   0xD028             BEQ.N    ??mbedtls_ssl_read_17
   \      0x1FC   0xF8D5 0x00F4      LDR      R0,[R5, #+244]
   \      0x200   0x2800             CMP      R0,#+0
   \      0x202   0xD106             BNE.N    ??mbedtls_ssl_read_18
   \      0x204   0x6828             LDR      R0,[R5, #+0]
   \      0x206   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \      0x20A   0xF3C0 0x1001      UBFX     R0,R0,#+4,#+2
   \      0x20E   0x2800             CMP      R0,#+0
   \      0x210   0xD01D             BEQ.N    ??mbedtls_ssl_read_17
   8343                      {
   8344                          /*
   8345                           * Accept renegotiation request
   8346                           */
   8347          
   8348                          /* DTLS clients need to know renego is server-initiated */
   8349          #if defined(MBEDTLS_SSL_PROTO_DTLS)
   8350                          if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM &&
   8351                              ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
   \                     ??mbedtls_ssl_read_18: (+1)
   \      0x212   0x6828             LDR      R0,[R5, #+0]
   \      0x214   0xF890 0x00CC      LDRB     R0,[R0, #+204]
   \      0x218   0xF000 0x0003      AND      R0,R0,#0x3
   \      0x21C   0x2802             CMP      R0,#+2
   \      0x21E   0xD101             BNE.N    ??mbedtls_ssl_read_19
   8352                          {
   8353                              ssl->renego_status = MBEDTLS_SSL_RENEGOTIATION_PENDING;
   \      0x220   0x2003             MOVS     R0,#+3
   \      0x222   0x60A8             STR      R0,[R5, #+8]
   8354                          }
   8355          #endif
   8356                          ret = ssl_start_renegotiation( ssl );
   \                     ??mbedtls_ssl_read_19: (+1)
   \      0x224   0x4628             MOV      R0,R5
   \      0x226   0x....'....        BL       ssl_start_renegotiation
   \      0x22A   0x4604             MOV      R4,R0
   8357                          if( ret != MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO &&
   8358                              ret != 0 )
   \      0x22C   0x454C             CMP      R4,R9
   \      0x22E   0xD0A2             BEQ.N    ??mbedtls_ssl_read_5
   \      0x230   0x2C00             CMP      R4,#+0
   \      0x232   0xD0A0             BEQ.N    ??mbedtls_ssl_read_5
   8359                          {
   8360                              MBEDTLS_SSL_DEBUG_RET( 1, "ssl_start_renegotiation", ret );
   \      0x234   0x9401             STR      R4,[SP, #+4]
   \      0x236   0x....'....        LDR.W    R0,??DataTable80_6
   \      0x23A   0x9000             STR      R0,[SP, #+0]
   \      0x23C   0xF242 0x03A8      MOVW     R3,#+8360
   \      0x240   0x4642             MOV      R2,R8
   \      0x242   0x2101             MOVS     R1,#+1
   \      0x244   0x4628             MOV      R0,R5
   \      0x246   0x....'....        BL       mbedtls_debug_print_ret
   8361                              return( ret );
   \      0x24A   0x4620             MOV      R0,R4
   \      0x24C   0xE087             B.N      ??mbedtls_ssl_read_2
   8362                          }
   8363                      }
   8364                      else
   8365          #endif /* MBEDTLS_SSL_RENEGOTIATION */
   8366                      {
   8367                          /*
   8368                           * Refuse renegotiation
   8369                           */
   8370          
   8371                          MBEDTLS_SSL_DEBUG_MSG( 3, ( "refusing renegotiation, sending alert" ) );
   \                     ??mbedtls_ssl_read_17: (+1)
   \      0x24E   0x....'....        LDR.W    R0,??DataTable83
   \      0x252   0x9000             STR      R0,[SP, #+0]
   \      0x254   0xF242 0x03B3      MOVW     R3,#+8371
   \      0x258   0x4642             MOV      R2,R8
   \      0x25A   0x2103             MOVS     R1,#+3
   \      0x25C   0x4628             MOV      R0,R5
   \      0x25E   0x....'....        BL       mbedtls_debug_print_msg
   8372          
   8373          #if defined(MBEDTLS_SSL_PROTO_SSL3)
   8374                          if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 )
   8375                          {
   8376                              /* SSLv3 does not have a "no_renegotiation" warning, so
   8377                                 we send a fatal alert and abort the connection. */
   8378                              mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   8379                                                              MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
   8380                              return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
   8381                          }
   8382                          else
   8383          #endif /* MBEDTLS_SSL_PROTO_SSL3 */
   8384          #if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
   8385              defined(MBEDTLS_SSL_PROTO_TLS1_2)
   8386                          if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
   \      0x262   0x6968             LDR      R0,[R5, #+20]
   \      0x264   0x2801             CMP      R0,#+1
   \      0x266   0xF2C0 0x808F      BLT.W    ??mbedtls_ssl_read_20
   8387                          {
   8388                              if( ( ret = mbedtls_ssl_send_alert_message( ssl,
   8389                                              MBEDTLS_SSL_ALERT_LEVEL_WARNING,
   8390                                              MBEDTLS_SSL_ALERT_MSG_NO_RENEGOTIATION ) ) != 0 )
   \      0x26A   0x2264             MOVS     R2,#+100
   \      0x26C   0x2101             MOVS     R1,#+1
   \      0x26E   0x4628             MOV      R0,R5
   \      0x270   0x....'....        BL       mbedtls_ssl_send_alert_message
   \      0x274   0x2800             CMP      R0,#+0
   \      0x276   0xF43F 0xAF7E      BEQ.W    ??mbedtls_ssl_read_5
   8391                              {
   8392                                  return( ret );
   \      0x27A   0xE070             B.N      ??mbedtls_ssl_read_2
   8393                              }
   8394                          }
   8395                          else
   8396          #endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 ||
   8397                    MBEDTLS_SSL_PROTO_TLS1_2 */
   8398                          {
   8399                              MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
   8400                              return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
   8401                          }
   8402                      }
   8403          
   8404                      /* At this point, we don't know whether the renegotiation has been
   8405                       * completed or not. The cases to consider are the following:
   8406                       * 1) The renegotiation is complete. In this case, no new record
   8407                       *    has been read yet.
   8408                       * 2) The renegotiation is incomplete because the client received
   8409                       *    an application data record while awaiting the ServerHello.
   8410                       * 3) The renegotiation is incomplete because the client received
   8411                       *    a non-handshake, non-application data message while awaiting
   8412                       *    the ServerHello.
   8413                       * In each of these case, looping will be the proper action:
   8414                       * - For 1), the next iteration will read a new record and check
   8415                       *   if it's application data.
   8416                       * - For 2), the loop condition isn't satisfied as application data
   8417                       *   is present, hence continue is the same as break
   8418                       * - For 3), the loop condition is satisfied and read_record
   8419                       *   will re-deliver the message that was held back by the client
   8420                       *   when expecting the ServerHello.
   8421                       */
   8422                      continue;
   8423                  }
   8424          #if defined(MBEDTLS_SSL_RENEGOTIATION)
   8425                  else if( ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_PENDING )
   \                     ??mbedtls_ssl_read_10: (+1)
   \      0x27C   0x68A8             LDR      R0,[R5, #+8]
   \      0x27E   0x2803             CMP      R0,#+3
   \      0x280   0xD10D             BNE.N    ??mbedtls_ssl_read_21
   8426                  {
   8427                      if( ssl->conf->renego_max_records >= 0 )
   \      0x282   0x6828             LDR      R0,[R5, #+0]
   \      0x284   0xF8D0 0x00B4      LDR      R0,[R0, #+180]
   \      0x288   0x2800             CMP      R0,#+0
   \      0x28A   0xD408             BMI.N    ??mbedtls_ssl_read_21
   8428                      {
   8429                          if( ++ssl->renego_records_seen > ssl->conf->renego_max_records )
   \      0x28C   0x68E8             LDR      R0,[R5, #+12]
   \      0x28E   0x1C40             ADDS     R0,R0,#+1
   \      0x290   0x60E8             STR      R0,[R5, #+12]
   \      0x292   0x6828             LDR      R0,[R5, #+0]
   \      0x294   0xF8D0 0x00B4      LDR      R0,[R0, #+180]
   \      0x298   0x68E9             LDR      R1,[R5, #+12]
   \      0x29A   0x4288             CMP      R0,R1
   \      0x29C   0xDB2A             BLT.N    ??mbedtls_ssl_read_22
   8430                          {
   8431                              MBEDTLS_SSL_DEBUG_MSG( 1, ( "renegotiation requested, "
   8432                                                  "but not honored by client" ) );
   8433                              return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
   8434                          }
   8435                      }
   8436                  }
   8437          #endif /* MBEDTLS_SSL_RENEGOTIATION */
   8438          
   8439                  /* Fatal and closure alerts handled by mbedtls_ssl_read_record() */
   8440                  if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
   \                     ??mbedtls_ssl_read_21: (+1)
   \      0x29E   0x6FA8             LDR      R0,[R5, #+120]
   \      0x2A0   0x2815             CMP      R0,#+21
   \      0x2A2   0xD034             BEQ.N    ??mbedtls_ssl_read_23
   8441                  {
   8442                      MBEDTLS_SSL_DEBUG_MSG( 2, ( "ignoring non-fatal non-closure alert" ) );
   8443                      return( MBEDTLS_ERR_SSL_WANT_READ );
   8444                  }
   8445          
   8446                  if( ssl->in_msgtype != MBEDTLS_SSL_MSG_APPLICATION_DATA )
   \      0x2A4   0x2817             CMP      R0,#+23
   \      0x2A6   0xD13F             BNE.N    ??mbedtls_ssl_read_24
   8447                  {
   8448                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad application data message" ) );
   8449                      return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
   8450                  }
   8451          
   8452                  ssl->in_offt = ssl->in_msg;
   \      0x2A8   0x6F28             LDR      R0,[R5, #+112]
   \      0x2AA   0x6768             STR      R0,[R5, #+116]
   8453          
   8454                  /* We're going to return something now, cancel timer,
   8455                   * except if handshake (renegotiation) is in progress */
   8456                  if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER )
   \      0x2AC   0x6868             LDR      R0,[R5, #+4]
   \      0x2AE   0x2810             CMP      R0,#+16
   \      0x2B0   0xD103             BNE.N    ??mbedtls_ssl_read_25
   8457                      ssl_set_timer( ssl, 0 );
   \      0x2B2   0x2100             MOVS     R1,#+0
   \      0x2B4   0x4628             MOV      R0,R5
   \      0x2B6   0x....'....        BL       ssl_set_timer
   8458          
   8459          #if defined(MBEDTLS_SSL_PROTO_DTLS)
   8460                  /* If we requested renego but received AppData, resend HelloRequest.
   8461                   * Do it now, after setting in_offt, to avoid taking this branch
   8462                   * again if ssl_write_hello_request() returns WANT_WRITE */
   8463          #if defined(MBEDTLS_SSL_SRV_C) && defined(MBEDTLS_SSL_RENEGOTIATION)
   8464                  if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER &&
   8465                      ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_PENDING )
   \                     ??mbedtls_ssl_read_25: (+1)
   \      0x2BA   0x6828             LDR      R0,[R5, #+0]
   \      0x2BC   0xF890 0x00CC      LDRB     R0,[R0, #+204]
   \      0x2C0   0x07C0             LSLS     R0,R0,#+31
   \      0x2C2   0xF57F 0xAF58      BPL.W    ??mbedtls_ssl_read_5
   \      0x2C6   0x68A8             LDR      R0,[R5, #+8]
   \      0x2C8   0x2803             CMP      R0,#+3
   \      0x2CA   0xF47F 0xAF54      BNE.W    ??mbedtls_ssl_read_5
   8466                  {
   8467                      if( ( ret = ssl_resend_hello_request( ssl ) ) != 0 )
   \      0x2CE   0x4628             MOV      R0,R5
   \      0x2D0   0x....'....        BL       ssl_resend_hello_request
   \      0x2D4   0x0004             MOVS     R4,R0
   \      0x2D6   0xF43F 0xAF4E      BEQ.W    ??mbedtls_ssl_read_5
   8468                      {
   8469                          MBEDTLS_SSL_DEBUG_RET( 1, "ssl_resend_hello_request", ret );
   \      0x2DA   0x9401             STR      R4,[SP, #+4]
   \      0x2DC   0x....'....        LDR.W    R0,??DataTable83_1
   \      0x2E0   0x9000             STR      R0,[SP, #+0]
   \      0x2E2   0xF242 0x1315      MOVW     R3,#+8469
   \      0x2E6   0x4642             MOV      R2,R8
   \      0x2E8   0x2101             MOVS     R1,#+1
   \      0x2EA   0x4628             MOV      R0,R5
   \      0x2EC   0x....'....        BL       mbedtls_debug_print_ret
   8470                          return( ret );
   \      0x2F0   0x4620             MOV      R0,R4
   \      0x2F2   0xE034             B.N      ??mbedtls_ssl_read_2
   8471                      }
   8472                  }
   \                     ??mbedtls_ssl_read_22: (+1)
   \      0x2F4   0x....'....        LDR.W    R0,??DataTable83_2
   \      0x2F8   0x9000             STR      R0,[SP, #+0]
   \      0x2FA   0xF242 0x03F0      MOVW     R3,#+8432
   \      0x2FE   0x4642             MOV      R2,R8
   \      0x300   0x2101             MOVS     R1,#+1
   \      0x302   0x4628             MOV      R0,R5
   \      0x304   0x....'....        BL       mbedtls_debug_print_msg
   \      0x308   0x....'....        LDR.W    R0,??DataTable82_3  ;; 0xffff8900
   \      0x30C   0xE027             B.N      ??mbedtls_ssl_read_2
   \                     ??mbedtls_ssl_read_23: (+1)
   \      0x30E   0x....'....        LDR.W    R0,??DataTable83_3
   \      0x312   0x9000             STR      R0,[SP, #+0]
   \      0x314   0xF242 0x03FA      MOVW     R3,#+8442
   \      0x318   0x4642             MOV      R2,R8
   \      0x31A   0x2102             MOVS     R1,#+2
   \      0x31C   0x4628             MOV      R0,R5
   \      0x31E   0x....'....        BL       mbedtls_debug_print_msg
   \      0x322   0x....'....        LDR.W    R0,??DataTable83_4  ;; 0xffff9700
   \      0x326   0xE01A             B.N      ??mbedtls_ssl_read_2
   \                     ??mbedtls_ssl_read_24: (+1)
   \      0x328   0x....'....        LDR.W    R0,??DataTable83_5
   \      0x32C   0x9000             STR      R0,[SP, #+0]
   \      0x32E   0xF44F 0x5304      MOV      R3,#+8448
   \      0x332   0x4642             MOV      R2,R8
   \      0x334   0x2101             MOVS     R1,#+1
   \      0x336   0x4628             MOV      R0,R5
   \      0x338   0x....'....        BL       mbedtls_debug_print_msg
   \      0x33C   0x....'....        LDR.W    R0,??DataTable82_3  ;; 0xffff8900
   \      0x340   0xE00D             B.N      ??mbedtls_ssl_read_2
   8473          #endif /* MBEDTLS_SSL_SRV_C && MBEDTLS_SSL_RENEGOTIATION */
   8474          #endif /* MBEDTLS_SSL_PROTO_DTLS */
   8475              }
   8476          
   8477              n = ( len < ssl->in_msglen )
   8478                  ? len : ssl->in_msglen;
   8479          
   8480              memcpy( buf, ssl->in_offt, n );
   8481              ssl->in_msglen -= n;
   8482          
   8483              if( ssl->in_msglen == 0 )
   8484              {
   8485                  /* all bytes consumed */
   8486                  ssl->in_offt = NULL;
   8487                  ssl->keep_current_message = 0;
   8488              }
   8489              else
   8490              {
   8491                  /* more data available */
   8492                  ssl->in_offt += n;
   \                     ??mbedtls_ssl_read_26: (+1)
   \      0x342   0x6F68             LDR      R0,[R5, #+116]
   \      0x344   0x4420             ADD      R0,R0,R4
   \      0x346   0x6768             STR      R0,[R5, #+116]
   8493              }
   8494          
   8495              MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= read" ) );
   \                     ??mbedtls_ssl_read_27: (+1)
   \      0x348   0x....'....        LDR.W    R0,??DataTable84
   \      0x34C   0x9000             STR      R0,[SP, #+0]
   \      0x34E   0xF242 0x132F      MOVW     R3,#+8495
   \      0x352   0x4642             MOV      R2,R8
   \      0x354   0x2102             MOVS     R1,#+2
   \      0x356   0x4628             MOV      R0,R5
   \      0x358   0x....'....        BL       mbedtls_debug_print_msg
   8496          
   8497              return( (int) n );
   \      0x35C   0x4620             MOV      R0,R4
   \                     ??mbedtls_ssl_read_2: (+1)
   \      0x35E   0xE8BD 0x83FE      POP      {R1-R9,PC}       ;; return
   \                     ??mbedtls_ssl_read_14: (+1)
   \      0x362   0x4634             MOV      R4,R6
   \      0x364   0x4638             MOV      R0,R7
   \      0x366   0x6FE9             LDR      R1,[R5, #+124]
   \      0x368   0x428C             CMP      R4,R1
   \      0x36A   0xD900             BLS.N    ??mbedtls_ssl_read_28
   \      0x36C   0x460C             MOV      R4,R1
   \                     ??mbedtls_ssl_read_28: (+1)
   \      0x36E   0x4622             MOV      R2,R4
   \      0x370   0x6F69             LDR      R1,[R5, #+116]
   \      0x372   0x....'....        BL       __aeabi_memcpy
   \      0x376   0x6FE8             LDR      R0,[R5, #+124]
   \      0x378   0x1B00             SUBS     R0,R0,R4
   \      0x37A   0x67E8             STR      R0,[R5, #+124]
   \      0x37C   0xD1E1             BNE.N    ??mbedtls_ssl_read_26
   \      0x37E   0x2000             MOVS     R0,#+0
   \      0x380   0x6768             STR      R0,[R5, #+116]
   \      0x382   0xF8C5 0x00A8      STR      R0,[R5, #+168]
   \      0x386   0xE7DF             B.N      ??mbedtls_ssl_read_27
   \                     ??mbedtls_ssl_read_20: (+1)
   \      0x388   0x....             LDR.N    R0,??DataTable78_9
   \      0x38A   0x9000             STR      R0,[SP, #+0]
   \      0x38C   0xF242 0x03CF      MOVW     R3,#+8399
   \      0x390   0x4642             MOV      R2,R8
   \      0x392   0x2101             MOVS     R1,#+1
   \      0x394   0x4628             MOV      R0,R5
   \      0x396   0x....'....        BL       mbedtls_debug_print_msg
   \      0x39A   0x....'....        LDR.W    R0,??DataTable79  ;; 0xffff9400
   \      0x39E   0xE7DE             B.N      ??mbedtls_ssl_read_2
   8498          }
   8499          
   8500          /*
   8501           * Send application data to be encrypted by the SSL layer, taking care of max
   8502           * fragment length and buffer size.
   8503           *
   8504           * According to RFC 5246 Section 6.2.1:
   8505           *
   8506           *      Zero-length fragments of Application data MAY be sent as they are
   8507           *      potentially useful as a traffic analysis countermeasure.
   8508           *
   8509           * Therefore, it is possible that the input message length is 0 and the
   8510           * corresponding return code is 0 on success.
   8511           */

   \                                 In section .text, align 2, keep-with-next
   8512          static int ssl_write_real( mbedtls_ssl_context *ssl,
   8513                                     const unsigned char *buf, size_t len )
   8514          {
   \                     ssl_write_real: (+1)
   \        0x0   0xB5FE             PUSH     {R1-R7,LR}
   \        0x2   0x4605             MOV      R5,R0
   \        0x4   0x460C             MOV      R4,R1
   \        0x6   0x4616             MOV      R6,R2
   8515              int ret = mbedtls_ssl_get_max_out_record_payload( ssl );
   \        0x8   0x....'....        BL       mbedtls_ssl_get_max_out_record_payload
   \        0xC   0x0007             MOVS     R7,R0
   8516              const size_t max_len = (size_t) ret;
   8517          
   8518              if( ret < 0 )
   \        0xE   0xD50D             BPL.N    ??ssl_write_real_0
   8519              {
   8520                  MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_get_max_out_record_payload", ret );
   \       0x10   0x9701             STR      R7,[SP, #+4]
   \       0x12   0x....'....        LDR.W    R0,??DataTable84_1
   \       0x16   0x9000             STR      R0,[SP, #+0]
   \       0x18   0xF242 0x1348      MOVW     R3,#+8520
   \       0x1C   0x....'....        LDR.W    R2,??DataTable80_7
   \       0x20   0x2101             MOVS     R1,#+1
   \       0x22   0x4628             MOV      R0,R5
   \       0x24   0x....'....        BL       mbedtls_debug_print_ret
   8521                  return( ret );
   \       0x28   0x4638             MOV      R0,R7
   \       0x2A   0xBDFE             POP      {R1-R7,PC}
   8522              }
   8523          
   8524              if( len > max_len )
   \                     ??ssl_write_real_0: (+1)
   \       0x2C   0x42B7             CMP      R7,R6
   \       0x2E   0xD217             BCS.N    ??ssl_write_real_1
   8525              {
   8526          #if defined(MBEDTLS_SSL_PROTO_DTLS)
   8527                  if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
   \       0x30   0x6828             LDR      R0,[R5, #+0]
   \       0x32   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \       0x36   0xF3C0 0x0040      UBFX     R0,R0,#+1,#+1
   \       0x3A   0x2800             CMP      R0,#+0
   \       0x3C   0xD00F             BEQ.N    ??ssl_write_real_2
   8528                  {
   8529                      MBEDTLS_SSL_DEBUG_MSG( 1, ( "fragment larger than the (negotiated) "
   8530                                          "maximum fragment length: %d > %d",
   8531                                          len, max_len ) );
   \       0x3E   0x9702             STR      R7,[SP, #+8]
   \       0x40   0x9601             STR      R6,[SP, #+4]
   \       0x42   0x....'....        LDR.W    R0,??DataTable84_2
   \       0x46   0x9000             STR      R0,[SP, #+0]
   \       0x48   0xF242 0x1353      MOVW     R3,#+8531
   \       0x4C   0x....'....        LDR.W    R2,??DataTable80_7
   \       0x50   0x2101             MOVS     R1,#+1
   \       0x52   0x4628             MOV      R0,R5
   \       0x54   0x....'....        BL       mbedtls_debug_print_msg
   8532                      return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   \       0x58   0x....'....        LDR.W    R0,??DataTable80  ;; 0xffff8f00
   \       0x5C   0xBDFE             POP      {R1-R7,PC}
   8533                  }
   8534                  else
   8535          #endif
   8536                      len = max_len;
   \                     ??ssl_write_real_2: (+1)
   \       0x5E   0x463E             MOV      R6,R7
   8537              }
   8538          
   8539              if( ssl->out_left != 0 )
   \                     ??ssl_write_real_1: (+1)
   \       0x60   0xF8D5 0x00D0      LDR      R0,[R5, #+208]
   \       0x64   0x2800             CMP      R0,#+0
   \       0x66   0xD012             BEQ.N    ??ssl_write_real_3
   8540              {
   8541                  /*
   8542                   * The user has previously tried to send the data and
   8543                   * MBEDTLS_ERR_SSL_WANT_WRITE or the message was only partially
   8544                   * written. In this case, we expect the high-level write function
   8545                   * (e.g. mbedtls_ssl_write()) to be called with the same parameters
   8546                   */
   8547                  if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
   \       0x68   0x4628             MOV      R0,R5
   \       0x6A   0x....'....        BL       mbedtls_ssl_flush_output
   \       0x6E   0x0004             MOVS     R4,R0
   \       0x70   0xD02C             BEQ.N    ??ssl_write_real_4
   8548                  {
   8549                      MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_flush_output", ret );
   \       0x72   0x9401             STR      R4,[SP, #+4]
   \       0x74   0x....'....        LDR.W    R0,??DataTable84_3
   \       0x78   0x9000             STR      R0,[SP, #+0]
   \       0x7A   0xF242 0x1365      MOVW     R3,#+8549
   \       0x7E   0x....'....        LDR.W    R2,??DataTable80_7
   \       0x82   0x2101             MOVS     R1,#+1
   \       0x84   0x4628             MOV      R0,R5
   \       0x86   0x....'....        BL       mbedtls_debug_print_ret
   8550                      return( ret );
   \       0x8A   0x4620             MOV      R0,R4
   \       0x8C   0xBDFE             POP      {R1-R7,PC}
   8551                  }
   8552              }
   8553              else
   8554              {
   8555                  /*
   8556                   * The user is trying to send a message the first time, so we need to
   8557                   * copy the data into the internal buffers and setup the data structure
   8558                   * to keep track of partial writes
   8559                   */
   8560                  ssl->out_msglen  = len;
   \                     ??ssl_write_real_3: (+1)
   \       0x8E   0xF8C5 0x60CC      STR      R6,[R5, #+204]
   8561                  ssl->out_msgtype = MBEDTLS_SSL_MSG_APPLICATION_DATA;
   \       0x92   0x2017             MOVS     R0,#+23
   \       0x94   0xF8C5 0x00C8      STR      R0,[R5, #+200]
   8562                  memcpy( ssl->out_msg, buf, len );
   \       0x98   0x4632             MOV      R2,R6
   \       0x9A   0x4621             MOV      R1,R4
   \       0x9C   0xF8D5 0x00C4      LDR      R0,[R5, #+196]
   \       0xA0   0x....'....        BL       __aeabi_memcpy
   8563          
   8564                  if( ( ret = mbedtls_ssl_write_record( ssl, SSL_FORCE_FLUSH ) ) != 0 )
   \       0xA4   0x2101             MOVS     R1,#+1
   \       0xA6   0x4628             MOV      R0,R5
   \       0xA8   0x....'....        BL       mbedtls_ssl_write_record
   \       0xAC   0x0004             MOVS     R4,R0
   \       0xAE   0xD00D             BEQ.N    ??ssl_write_real_4
   8565                  {
   8566                      MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
   \       0xB0   0x9401             STR      R4,[SP, #+4]
   \       0xB2   0x....'....        LDR.W    R0,??DataTable84_4
   \       0xB6   0x9000             STR      R0,[SP, #+0]
   \       0xB8   0xF242 0x1376      MOVW     R3,#+8566
   \       0xBC   0x....'....        LDR.W    R2,??DataTable80_7
   \       0xC0   0x2101             MOVS     R1,#+1
   \       0xC2   0x4628             MOV      R0,R5
   \       0xC4   0x....'....        BL       mbedtls_debug_print_ret
   8567                      return( ret );
   \       0xC8   0x4620             MOV      R0,R4
   \       0xCA   0xBDFE             POP      {R1-R7,PC}
   8568                  }
   8569              }
   8570          
   8571              return( (int) len );
   \                     ??ssl_write_real_4: (+1)
   \       0xCC   0x4630             MOV      R0,R6
   \       0xCE   0xBDFE             POP      {R1-R7,PC}       ;; return
   8572          }
   8573          
   8574          /*
   8575           * Write application data, doing 1/n-1 splitting if necessary.
   8576           *
   8577           * With non-blocking I/O, ssl_write_real() may return WANT_WRITE,
   8578           * then the caller will call us again with the same arguments, so
   8579           * remember whether we already did the split or not.
   8580           */
   8581          #if defined(MBEDTLS_SSL_CBC_RECORD_SPLITTING)

   \                                 In section .text, align 2, keep-with-next
   8582          static int ssl_write_split( mbedtls_ssl_context *ssl,
   8583                                      const unsigned char *buf, size_t len )
   8584          {
   \                     ssl_write_split: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
   \        0x6   0x4616             MOV      R6,R2
   8585              int ret;
   8586          
   8587              if( ssl->conf->cbc_record_splitting ==
   8588                      MBEDTLS_SSL_CBC_RECORD_SPLITTING_DISABLED ||
   8589                  len <= 1 ||
   8590                  ssl->minor_ver > MBEDTLS_SSL_MINOR_VERSION_1 ||
   8591                  mbedtls_cipher_get_cipher_mode( &ssl->transform_out->cipher_ctx_enc )
   8592                                          != MBEDTLS_MODE_CBC )
   \        0x8   0x6820             LDR      R0,[R4, #+0]
   \        0xA   0xF8D0 0x00CC      LDR      R0,[R0, #+204]
   \        0xE   0xF3C0 0x3000      UBFX     R0,R0,#+12,#+1
   \       0x12   0x2800             CMP      R0,#+0
   \       0x14   0xD00A             BEQ.N    ??ssl_write_split_0
   \       0x16   0x2E02             CMP      R6,#+2
   \       0x18   0xD308             BCC.N    ??ssl_write_split_0
   \       0x1A   0x6960             LDR      R0,[R4, #+20]
   \       0x1C   0x2802             CMP      R0,#+2
   \       0x1E   0xDA05             BGE.N    ??ssl_write_split_0
   \       0x20   0x6C60             LDR      R0,[R4, #+68]
   \       0x22   0x3050             ADDS     R0,R0,#+80
   \       0x24   0x....'....        BL       mbedtls_cipher_get_cipher_mode
   \       0x28   0x2802             CMP      R0,#+2
   \       0x2A   0xD005             BEQ.N    ??ssl_write_split_1
   8593              {
   8594                  return( ssl_write_real( ssl, buf, len ) );
   \                     ??ssl_write_split_0: (+1)
   \       0x2C   0x4632             MOV      R2,R6
   \       0x2E   0x4629             MOV      R1,R5
   \       0x30   0x4620             MOV      R0,R4
   \       0x32   0xE8BD 0x4070      POP      {R4-R6,LR}
   \       0x36   0x....             B.N      ssl_write_real
   8595              }
   8596          
   8597              if( ssl->split_done == 0 )
   \                     ??ssl_write_split_1: (+1)
   \       0x38   0xF994 0x00DE      LDRSB    R0,[R4, #+222]
   \       0x3C   0x2800             CMP      R0,#+0
   \       0x3E   0xD109             BNE.N    ??ssl_write_split_2
   8598              {
   8599                  if( ( ret = ssl_write_real( ssl, buf, 1 ) ) <= 0 )
   \       0x40   0x2201             MOVS     R2,#+1
   \       0x42   0x4629             MOV      R1,R5
   \       0x44   0x4620             MOV      R0,R4
   \       0x46   0x....'....        BL       ssl_write_real
   \       0x4A   0x2801             CMP      R0,#+1
   \       0x4C   0xDB0E             BLT.N    ??ssl_write_split_3
   8600                      return( ret );
   8601                  ssl->split_done = 1;
   \       0x4E   0x2001             MOVS     R0,#+1
   \       0x50   0xF884 0x00DE      STRB     R0,[R4, #+222]
   8602              }
   8603          
   8604              if( ( ret = ssl_write_real( ssl, buf + 1, len - 1 ) ) <= 0 )
   \                     ??ssl_write_split_2: (+1)
   \       0x54   0x1E76             SUBS     R6,R6,#+1
   \       0x56   0x4632             MOV      R2,R6
   \       0x58   0x1C69             ADDS     R1,R5,#+1
   \       0x5A   0x4620             MOV      R0,R4
   \       0x5C   0x....'....        BL       ssl_write_real
   \       0x60   0x2801             CMP      R0,#+1
   \       0x62   0xDB03             BLT.N    ??ssl_write_split_3
   8605                  return( ret );
   8606              ssl->split_done = 0;
   \       0x64   0x2100             MOVS     R1,#+0
   \       0x66   0xF884 0x10DE      STRB     R1,[R4, #+222]
   8607          
   8608              return( ret + 1 );
   \       0x6A   0x1C40             ADDS     R0,R0,#+1
   \                     ??ssl_write_split_3: (+1)
   \       0x6C   0xBD70             POP      {R4-R6,PC}       ;; return
   8609          }
   8610          #endif /* MBEDTLS_SSL_CBC_RECORD_SPLITTING */
   8611          
   8612          /*
   8613           * Write application data (public-facing wrapper)
   8614           */

   \                                 In section .text, align 2, keep-with-next
   8615          int mbedtls_ssl_write( mbedtls_ssl_context *ssl, const unsigned char *buf, size_t len )
   8616          {
   \                     mbedtls_ssl_write: (+1)
   \        0x0   0xE92D 0x41FC      PUSH     {R2-R8,LR}
   \        0x4   0x4604             MOV      R4,R0
   \        0x6   0x460F             MOV      R7,R1
   \        0x8   0x4690             MOV      R8,R2
   8617              int ret;
   8618          
   8619              MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write" ) );
   \        0xA   0x....'....        LDR.W    R6,??DataTable80_7
   \        0xE   0x....'....        LDR.W    R0,??DataTable84_5
   \       0x12   0x9000             STR      R0,[SP, #+0]
   \       0x14   0xF242 0x13AB      MOVW     R3,#+8619
   \       0x18   0x4632             MOV      R2,R6
   \       0x1A   0x2102             MOVS     R1,#+2
   \       0x1C   0x4620             MOV      R0,R4
   \       0x1E   0x....'....        BL       mbedtls_debug_print_msg
   8620          
   8621              if( ssl == NULL || ssl->conf == NULL )
   \       0x22   0x2C00             CMP      R4,#+0
   \       0x24   0xD002             BEQ.N    ??mbedtls_ssl_write_0
   \       0x26   0x6820             LDR      R0,[R4, #+0]
   \       0x28   0x2800             CMP      R0,#+0
   \       0x2A   0xD102             BNE.N    ??mbedtls_ssl_write_1
   8622                  return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   \                     ??mbedtls_ssl_write_0: (+1)
   \       0x2C   0x....'....        LDR.W    R0,??DataTable80  ;; 0xffff8f00
   \       0x30   0xE037             B.N      ??mbedtls_ssl_write_2
   8623          
   8624          #if defined(MBEDTLS_SSL_RENEGOTIATION)
   8625              if( ( ret = ssl_check_ctr_renegotiate( ssl ) ) != 0 )
   \                     ??mbedtls_ssl_write_1: (+1)
   \       0x32   0x4620             MOV      R0,R4
   \       0x34   0x....'....        BL       ssl_check_ctr_renegotiate
   \       0x38   0x0005             MOVS     R5,R0
   \       0x3A   0xD00C             BEQ.N    ??mbedtls_ssl_write_3
   8626              {
   8627                  MBEDTLS_SSL_DEBUG_RET( 1, "ssl_check_ctr_renegotiate", ret );
   \       0x3C   0x9501             STR      R5,[SP, #+4]
   \       0x3E   0x....'....        LDR.W    R0,??DataTable81_1
   \       0x42   0x9000             STR      R0,[SP, #+0]
   \       0x44   0xF242 0x13B3      MOVW     R3,#+8627
   \       0x48   0x4632             MOV      R2,R6
   \       0x4A   0x2101             MOVS     R1,#+1
   \       0x4C   0x4620             MOV      R0,R4
   \       0x4E   0x....'....        BL       mbedtls_debug_print_ret
   8628                  return( ret );
   \       0x52   0x4628             MOV      R0,R5
   \       0x54   0xE025             B.N      ??mbedtls_ssl_write_2
   8629              }
   8630          #endif
   8631          
   8632              if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
   \                     ??mbedtls_ssl_write_3: (+1)
   \       0x56   0x6860             LDR      R0,[R4, #+4]
   \       0x58   0x2810             CMP      R0,#+16
   \       0x5A   0xD011             BEQ.N    ??mbedtls_ssl_write_4
   8633              {
   8634                  if( ( ret = mbedtls_ssl_handshake( ssl ) ) != 0 )
   \       0x5C   0x4620             MOV      R0,R4
   \       0x5E   0x....'....        BL       mbedtls_ssl_handshake
   \       0x62   0x0005             MOVS     R5,R0
   \       0x64   0xD00C             BEQ.N    ??mbedtls_ssl_write_4
   8635                  {
   8636                      MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_handshake", ret );
   \       0x66   0x9501             STR      R5,[SP, #+4]
   \       0x68   0x....'....        LDR.W    R0,??DataTable80_4
   \       0x6C   0x9000             STR      R0,[SP, #+0]
   \       0x6E   0xF242 0x13BC      MOVW     R3,#+8636
   \       0x72   0x4632             MOV      R2,R6
   \       0x74   0x2101             MOVS     R1,#+1
   \       0x76   0x4620             MOV      R0,R4
   \       0x78   0x....'....        BL       mbedtls_debug_print_ret
   8637                      return( ret );
   \       0x7C   0x4628             MOV      R0,R5
   \       0x7E   0xE010             B.N      ??mbedtls_ssl_write_2
   8638                  }
   8639              }
   8640          
   8641          #if defined(MBEDTLS_SSL_CBC_RECORD_SPLITTING)
   8642              ret = ssl_write_split( ssl, buf, len );
   \                     ??mbedtls_ssl_write_4: (+1)
   \       0x80   0x4642             MOV      R2,R8
   \       0x82   0x4639             MOV      R1,R7
   \       0x84   0x4620             MOV      R0,R4
   \       0x86   0x....'....        BL       ssl_write_split
   \       0x8A   0x4605             MOV      R5,R0
   8643          #else
   8644              ret = ssl_write_real( ssl, buf, len );
   8645          #endif
   8646          
   8647              MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write" ) );
   \       0x8C   0x....'....        LDR.W    R0,??DataTable84_6
   \       0x90   0x9000             STR      R0,[SP, #+0]
   \       0x92   0xF242 0x13C7      MOVW     R3,#+8647
   \       0x96   0x4632             MOV      R2,R6
   \       0x98   0x2102             MOVS     R1,#+2
   \       0x9A   0x4620             MOV      R0,R4
   \       0x9C   0x....'....        BL       mbedtls_debug_print_msg
   8648          
   8649              return( ret );
   \       0xA0   0x4628             MOV      R0,R5
   \                     ??mbedtls_ssl_write_2: (+1)
   \       0xA2   0xE8BD 0x81F6      POP      {R1,R2,R4-R8,PC}  ;; return
   8650          }
   8651          
   8652          /*
   8653           * Notify the peer that the connection is being closed
   8654           */

   \                                 In section .text, align 2, keep-with-next
   8655          int mbedtls_ssl_close_notify( mbedtls_ssl_context *ssl )
   8656          {
   \                     mbedtls_ssl_close_notify: (+1)
   \        0x0   0xB57C             PUSH     {R2-R6,LR}
   \        0x2   0x0004             MOVS     R4,R0
   8657              int ret;
   8658          
   8659              if( ssl == NULL || ssl->conf == NULL )
   \        0x4   0xD002             BEQ.N    ??mbedtls_ssl_close_notify_0
   \        0x6   0x6820             LDR      R0,[R4, #+0]
   \        0x8   0x2800             CMP      R0,#+0
   \        0xA   0xD102             BNE.N    ??mbedtls_ssl_close_notify_1
   8660                  return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   \                     ??mbedtls_ssl_close_notify_0: (+1)
   \        0xC   0x....'....        LDR.W    R0,??DataTable80  ;; 0xffff8f00
   \       0x10   0xBD76             POP      {R1,R2,R4-R6,PC}
   8661          
   8662              MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write close notify" ) );
   \                     ??mbedtls_ssl_close_notify_1: (+1)
   \       0x12   0x....'....        LDR.W    R6,??DataTable80_7
   \       0x16   0x....'....        LDR.W    R0,??DataTable84_7
   \       0x1A   0x9000             STR      R0,[SP, #+0]
   \       0x1C   0xF242 0x13D6      MOVW     R3,#+8662
   \       0x20   0x4632             MOV      R2,R6
   \       0x22   0x2102             MOVS     R1,#+2
   \       0x24   0x4620             MOV      R0,R4
   \       0x26   0x....'....        BL       mbedtls_debug_print_msg
   8663          
   8664              if( ssl->out_left != 0 )
   \       0x2A   0xF8D4 0x00D0      LDR      R0,[R4, #+208]
   \       0x2E   0x2800             CMP      R0,#+0
   \       0x30   0xD004             BEQ.N    ??mbedtls_ssl_close_notify_2
   8665                  return( mbedtls_ssl_flush_output( ssl ) );
   \       0x32   0x4620             MOV      R0,R4
   \       0x34   0xE8BD 0x4076      POP      {R1,R2,R4-R6,LR}
   \       0x38   0x....'....        B.W      mbedtls_ssl_flush_output
   8666          
   8667              if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER )
   \                     ??mbedtls_ssl_close_notify_2: (+1)
   \       0x3C   0x6860             LDR      R0,[R4, #+4]
   \       0x3E   0x2810             CMP      R0,#+16
   \       0x40   0xD113             BNE.N    ??mbedtls_ssl_close_notify_3
   8668              {
   8669                  if( ( ret = mbedtls_ssl_send_alert_message( ssl,
   8670                                  MBEDTLS_SSL_ALERT_LEVEL_WARNING,
   8671                                  MBEDTLS_SSL_ALERT_MSG_CLOSE_NOTIFY ) ) != 0 )
   \       0x42   0x2200             MOVS     R2,#+0
   \       0x44   0x2101             MOVS     R1,#+1
   \       0x46   0x4620             MOV      R0,R4
   \       0x48   0x....'....        BL       mbedtls_ssl_send_alert_message
   \       0x4C   0x0005             MOVS     R5,R0
   \       0x4E   0xD00C             BEQ.N    ??mbedtls_ssl_close_notify_3
   8672                  {
   8673                      MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_send_alert_message", ret );
   \       0x50   0x9501             STR      R5,[SP, #+4]
   \       0x52   0x....'....        LDR.W    R0,??DataTable84_8
   \       0x56   0x9000             STR      R0,[SP, #+0]
   \       0x58   0xF242 0x13E1      MOVW     R3,#+8673
   \       0x5C   0x4632             MOV      R2,R6
   \       0x5E   0x2101             MOVS     R1,#+1
   \       0x60   0x4620             MOV      R0,R4
   \       0x62   0x....'....        BL       mbedtls_debug_print_ret
   8674                      return( ret );
   \       0x66   0x4628             MOV      R0,R5
   \       0x68   0xBD76             POP      {R1,R2,R4-R6,PC}
   8675                  }
   8676              }
   8677          
   8678              MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write close notify" ) );
   \                     ??mbedtls_ssl_close_notify_3: (+1)
   \       0x6A   0x....'....        LDR.W    R0,??DataTable84_9
   \       0x6E   0x9000             STR      R0,[SP, #+0]
   \       0x70   0xF242 0x13E6      MOVW     R3,#+8678
   \       0x74   0x4632             MOV      R2,R6
   \       0x76   0x2102             MOVS     R1,#+2
   \       0x78   0x4620             MOV      R0,R4
   \       0x7A   0x....'....        BL       mbedtls_debug_print_msg
   8679          
   8680              return( 0 );
   \       0x7E   0x2000             MOVS     R0,#+0
   \       0x80   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
   8681          }
   8682          

   \                                 In section .text, align 2, keep-with-next
   8683          void mbedtls_ssl_transform_free( mbedtls_ssl_transform *transform )
   8684          {
   \                     mbedtls_ssl_transform_free: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
   8685              if( transform == NULL )
   \        0x4   0xD015             BEQ.N    ??mbedtls_ssl_transform_free_0
   8686                  return;
   8687          
   8688          #if defined(MBEDTLS_ZLIB_SUPPORT)
   8689              deflateEnd( &transform->ctx_deflate );
   8690              inflateEnd( &transform->ctx_inflate );
   8691          #endif
   8692          
   8693              mbedtls_cipher_free( &transform->cipher_ctx_enc );
   \        0x6   0xF104 0x0050      ADD      R0,R4,#+80
   \        0xA   0x....'....        BL       mbedtls_cipher_free
   8694              mbedtls_cipher_free( &transform->cipher_ctx_dec );
   \        0xE   0xF104 0x0090      ADD      R0,R4,#+144
   \       0x12   0x....'....        BL       mbedtls_cipher_free
   8695          
   8696              mbedtls_md_free( &transform->md_ctx_enc );
   \       0x16   0xF104 0x0038      ADD      R0,R4,#+56
   \       0x1A   0x....'....        BL       mbedtls_md_free
   8697              mbedtls_md_free( &transform->md_ctx_dec );
   \       0x1E   0xF104 0x0044      ADD      R0,R4,#+68
   \       0x22   0x....'....        BL       mbedtls_md_free
   8698          
   8699              mbedtls_platform_zeroize( transform, sizeof( mbedtls_ssl_transform ) );
   \       0x26   0x21D0             MOVS     R1,#+208
   \       0x28   0x4620             MOV      R0,R4
   \       0x2A   0xE8BD 0x4010      POP      {R4,LR}
   \       0x2E   0x....'....        B.W      mbedtls_platform_zeroize
   \                     ??mbedtls_ssl_transform_free_0: (+1)
   \       0x32   0xBD10             POP      {R4,PC}          ;; return
   8700          }
   8701          
   8702          #if defined(MBEDTLS_X509_CRT_PARSE_C)

   \                                 In section .text, align 2, keep-with-next
   8703          static void ssl_key_cert_free( mbedtls_ssl_key_cert *key_cert )
   8704          {
   \                     ssl_key_cert_free: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   8705              mbedtls_ssl_key_cert *cur = key_cert, *next;
   \        0x2   0x2800             CMP      R0,#+0
   \        0x4   0xE003             B.N      ??ssl_key_cert_free_0
   8706          
   8707              while( cur != NULL )
   8708              {
   8709                  next = cur->next;
   \                     ??ssl_key_cert_free_1: (+1)
   \        0x6   0x6884             LDR      R4,[R0, #+8]
   8710                  mbedtls_free( cur );
   \        0x8   0x....'....        BL       mbedtls_free
   8711                  cur = next;
   \        0xC   0x0020             MOVS     R0,R4
   8712              }
   \                     ??ssl_key_cert_free_0: (+1)
   \        0xE   0xD1FA             BNE.N    ??ssl_key_cert_free_1
   8713          }
   \       0x10   0xBD10             POP      {R4,PC}          ;; return
   8714          #endif /* MBEDTLS_X509_CRT_PARSE_C */
   8715          
   8716          #if defined(MBEDTLS_SSL_PROTO_DTLS)
   8717          

   \                                 In section .text, align 2, keep-with-next
   8718          static void ssl_buffering_free( mbedtls_ssl_context *ssl )
   8719          {
   \                     ssl_buffering_free: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4604             MOV      R4,R0
   8720              unsigned offset;
   8721              mbedtls_ssl_handshake_params * const hs = ssl->handshake;
   8722          
   8723              if( hs == NULL )
   \        0x4   0x6BE0             LDR      R0,[R4, #+60]
   \        0x6   0x2800             CMP      R0,#+0
   \        0x8   0xD00C             BEQ.N    ??ssl_buffering_free_0
   8724                  return;
   8725          
   8726              ssl_free_buffered_record( ssl );
   \        0xA   0x4620             MOV      R0,R4
   \        0xC   0x....'....        BL       ssl_free_buffered_record
   8727          
   8728              for( offset = 0; offset < MBEDTLS_SSL_MAX_BUFFERED_HS; offset++ )
   \       0x10   0x2500             MOVS     R5,#+0
   \       0x12   0xE005             B.N      ??ssl_buffering_free_1
   8729                  ssl_buffering_free_slot( ssl, offset );
   \                     ??ssl_buffering_free_2: (+1)
   \       0x14   0x4629             MOV      R1,R5
   \       0x16   0xB2C9             UXTB     R1,R1
   \       0x18   0x4620             MOV      R0,R4
   \       0x1A   0x....'....        BL       ssl_buffering_free_slot
   \       0x1E   0x1C6D             ADDS     R5,R5,#+1
   \                     ??ssl_buffering_free_1: (+1)
   \       0x20   0x2D04             CMP      R5,#+4
   \       0x22   0xD3F7             BCC.N    ??ssl_buffering_free_2
   8730          }
   \                     ??ssl_buffering_free_0: (+1)
   \       0x24   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   8731          

   \                                 In section .text, align 2, keep-with-next
   8732          static void ssl_buffering_free_slot( mbedtls_ssl_context *ssl,
   8733                                               uint8_t slot )
   8734          {
   \                     ssl_buffering_free_slot: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   8735              mbedtls_ssl_handshake_params * const hs = ssl->handshake;
   \        0x2   0x6BC2             LDR      R2,[R0, #+60]
   8736              mbedtls_ssl_hs_buffer * const hs_buf = &hs->buffering.hs[slot];
   \        0x4   0x4608             MOV      R0,R1
   \        0x6   0xEB00 0x0340      ADD      R3,R0,R0, LSL #+1
   \        0xA   0xEB02 0x0083      ADD      R0,R2,R3, LSL #+2
   \        0xE   0xF500 0x7404      ADD      R4,R0,#+528
   8737          
   8738              if( slot >= MBEDTLS_SSL_MAX_BUFFERED_HS )
   \       0x12   0x2904             CMP      R1,#+4
   \       0x14   0xDA12             BGE.N    ??ssl_buffering_free_slot_0
   8739                  return;
   8740          
   8741              if( hs_buf->is_valid == 1 )
   \       0x16   0x7820             LDRB     R0,[R4, #+0]
   \       0x18   0x07C0             LSLS     R0,R0,#+31
   \       0x1A   0xD50F             BPL.N    ??ssl_buffering_free_slot_0
   8742              {
   8743                  hs->buffering.total_bytes_buffered -= hs_buf->data_len;
   \       0x1C   0xF8D2 0x1208      LDR      R1,[R2, #+520]
   \       0x20   0x68A0             LDR      R0,[R4, #+8]
   \       0x22   0x1A09             SUBS     R1,R1,R0
   \       0x24   0xF8C2 0x1208      STR      R1,[R2, #+520]
   8744                  mbedtls_free( hs_buf->data );
   \       0x28   0x6860             LDR      R0,[R4, #+4]
   \       0x2A   0x....'....        BL       mbedtls_free
   8745                  memset( hs_buf, 0, sizeof( mbedtls_ssl_hs_buffer ) );
   \       0x2E   0x2200             MOVS     R2,#+0
   \       0x30   0x210C             MOVS     R1,#+12
   \       0x32   0x4620             MOV      R0,R4
   \       0x34   0xE8BD 0x4010      POP      {R4,LR}
   \       0x38   0x....'....        B.W      __aeabi_memset4
   8746              }
   8747          }
   \                     ??ssl_buffering_free_slot_0: (+1)
   \       0x3C   0xBD10             POP      {R4,PC}          ;; return
   8748          
   8749          #endif /* MBEDTLS_SSL_PROTO_DTLS */
   8750          

   \                                 In section .text, align 2, keep-with-next
   8751          void mbedtls_ssl_handshake_free( mbedtls_ssl_context *ssl )
   8752          {
   \                     mbedtls_ssl_handshake_free: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4605             MOV      R5,R0
   8753              mbedtls_ssl_handshake_params *handshake = ssl->handshake;
   \        0x4   0x6BEC             LDR      R4,[R5, #+60]
   8754          
   8755              if( handshake == NULL )
   \        0x6   0x2C00             CMP      R4,#+0
   \        0x8   0xD042             BEQ.N    ??mbedtls_ssl_handshake_free_0
   8756                  return;
   8757          
   8758          #if defined(MBEDTLS_SSL_ASYNC_PRIVATE)
   8759              if( ssl->conf->f_async_cancel != NULL && handshake->async_in_progress != 0 )
   8760              {
   8761                  ssl->conf->f_async_cancel( ssl );
   8762                  handshake->async_in_progress = 0;
   8763              }
   8764          #endif /* MBEDTLS_SSL_ASYNC_PRIVATE */
   8765          
   8766          #if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1) || \
   8767              defined(MBEDTLS_SSL_PROTO_TLS1_1)
   8768              mbedtls_md5_free(    &handshake->fin_md5  );
   \        0xA   0xF504 0x7014      ADD      R0,R4,#+592
   \        0xE   0x....'....        BL       mbedtls_md5_free
   8769              mbedtls_sha1_free(   &handshake->fin_sha1 );
   \       0x12   0xF504 0x702A      ADD      R0,R4,#+680
   \       0x16   0x....'....        BL       mbedtls_sha1_free
   8770          #endif
   8771          #if defined(MBEDTLS_SSL_PROTO_TLS1_2)
   8772          #if defined(MBEDTLS_SHA256_C)
   8773              mbedtls_sha256_free(   &handshake->fin_sha256    );
   \       0x1A   0xF504 0x7041      ADD      R0,R4,#+772
   \       0x1E   0x....'....        BL       mbedtls_sha256_free
   8774          #endif
   8775          #if defined(MBEDTLS_SHA512_C)
   8776              mbedtls_sha512_free(   &handshake->fin_sha512    );
   \       0x22   0xF504 0x705C      ADD      R0,R4,#+880
   \       0x26   0x....'....        BL       mbedtls_sha512_free
   8777          #endif
   8778          #endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
   8779          
   8780          #if defined(MBEDTLS_DHM_C)
   8781              mbedtls_dhm_free( &handshake->dhm_ctx );
   \       0x2A   0x1D20             ADDS     R0,R4,#+4
   \       0x2C   0x....'....        BL       mbedtls_dhm_free
   8782          #endif
   8783          #if defined(MBEDTLS_ECDH_C)
   8784              mbedtls_ecdh_free( &handshake->ecdh_ctx );
   \       0x30   0xF104 0x0080      ADD      R0,R4,#+128
   \       0x34   0x....'....        BL       mbedtls_ecdh_free
   8785          #endif
   8786          #if defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
   8787              mbedtls_ecjpake_free( &handshake->ecjpake_ctx );
   8788          #if defined(MBEDTLS_SSL_CLI_C)
   8789              mbedtls_free( handshake->ecjpake_cache );
   8790              handshake->ecjpake_cache = NULL;
   8791              handshake->ecjpake_cache_len = 0;
   8792          #endif
   8793          #endif
   8794          
   8795          #if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) || \
   8796              defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
   8797              /* explicit void pointer cast for buggy MS compiler */
   8798              mbedtls_free( (void *) handshake->curves );
   \       0x38   0xF8D4 0x01B4      LDR      R0,[R4, #+436]
   \       0x3C   0x....'....        BL       mbedtls_free
   8799          #endif
   8800          
   8801          #if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)
   8802              if( handshake->psk != NULL )
   \       0x40   0xF8D4 0x01B8      LDR      R0,[R4, #+440]
   \       0x44   0x2800             CMP      R0,#+0
   \       0x46   0xD007             BEQ.N    ??mbedtls_ssl_handshake_free_1
   8803              {
   8804                  mbedtls_platform_zeroize( handshake->psk, handshake->psk_len );
   \       0x48   0xF8D4 0x11BC      LDR      R1,[R4, #+444]
   \       0x4C   0x....'....        BL       mbedtls_platform_zeroize
   8805                  mbedtls_free( handshake->psk );
   \       0x50   0xF8D4 0x01B8      LDR      R0,[R4, #+440]
   \       0x54   0x....'....        BL       mbedtls_free
   8806              }
   8807          #endif
   8808          
   8809          #if defined(MBEDTLS_X509_CRT_PARSE_C) && \
   8810              defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
   8811              /*
   8812               * Free only the linked list wrapper, not the keys themselves
   8813               * since the belong to the SNI callback
   8814               */
   8815              if( handshake->sni_key_cert != NULL )
   \                     ??mbedtls_ssl_handshake_free_1: (+1)
   \       0x58   0xF8D4 0x01C8      LDR      R0,[R4, #+456]
   \       0x5C   0x2800             CMP      R0,#+0
   \       0x5E   0xD005             BEQ.N    ??mbedtls_ssl_handshake_free_2
   8816              {
   8817                  mbedtls_ssl_key_cert *cur = handshake->sni_key_cert, *next;
   \       0x60   0xE003             B.N      ??mbedtls_ssl_handshake_free_3
   8818          
   8819                  while( cur != NULL )
   8820                  {
   8821                      next = cur->next;
   \                     ??mbedtls_ssl_handshake_free_4: (+1)
   \       0x62   0x6886             LDR      R6,[R0, #+8]
   8822                      mbedtls_free( cur );
   \       0x64   0x....'....        BL       mbedtls_free
   8823                      cur = next;
   \       0x68   0x0030             MOVS     R0,R6
   8824                  }
   \                     ??mbedtls_ssl_handshake_free_3: (+1)
   \       0x6A   0xD1FA             BNE.N    ??mbedtls_ssl_handshake_free_4
   8825              }
   8826          #endif /* MBEDTLS_X509_CRT_PARSE_C && MBEDTLS_SSL_SERVER_NAME_INDICATION */
   8827          
   8828          #if defined(MBEDTLS_SSL_PROTO_DTLS)
   8829              mbedtls_free( handshake->verify_cookie );
   \                     ??mbedtls_ssl_handshake_free_2: (+1)
   \       0x6C   0xF8D4 0x01DC      LDR      R0,[R4, #+476]
   \       0x70   0x....'....        BL       mbedtls_free
   8830              ssl_flight_free( handshake->flight );
   \       0x74   0xF8D4 0x01EC      LDR      R0,[R4, #+492]
   \       0x78   0x....'....        BL       ssl_flight_free
   8831              ssl_buffering_free( ssl );
   \       0x7C   0x4628             MOV      R0,R5
   \       0x7E   0x....'....        BL       ssl_buffering_free
   8832          #endif
   8833          
   8834              mbedtls_platform_zeroize( handshake,
   8835                                        sizeof( mbedtls_ssl_handshake_params ) );
   \       0x82   0xF44F 0x61DB      MOV      R1,#+1752
   \       0x86   0x4620             MOV      R0,R4
   \       0x88   0xE8BD 0x4070      POP      {R4-R6,LR}
   \       0x8C   0x....'....        B.W      mbedtls_platform_zeroize
   \                     ??mbedtls_ssl_handshake_free_0: (+1)
   \       0x90   0xBD70             POP      {R4-R6,PC}       ;; return
   8836          }
   8837          

   \                                 In section .text, align 2, keep-with-next
   8838          void mbedtls_ssl_session_free( mbedtls_ssl_session *session )
   8839          {
   \                     mbedtls_ssl_session_free: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
   8840              if( session == NULL )
   \        0x4   0xD010             BEQ.N    ??mbedtls_ssl_session_free_0
   8841                  return;
   8842          
   8843          #if defined(MBEDTLS_X509_CRT_PARSE_C)
   8844              if( session->peer_cert != NULL )
   \        0x6   0x6DE0             LDR      R0,[R4, #+92]
   \        0x8   0x2800             CMP      R0,#+0
   \        0xA   0xD004             BEQ.N    ??mbedtls_ssl_session_free_1
   8845              {
   8846                  mbedtls_x509_crt_free( session->peer_cert );
   \        0xC   0x....'....        BL       mbedtls_x509_crt_free
   8847                  mbedtls_free( session->peer_cert );
   \       0x10   0x6DE0             LDR      R0,[R4, #+92]
   \       0x12   0x....'....        BL       mbedtls_free
   8848              }
   8849          #endif
   8850          
   8851          #if defined(MBEDTLS_SSL_SESSION_TICKETS) && defined(MBEDTLS_SSL_CLI_C)
   8852              mbedtls_free( session->ticket );
   \                     ??mbedtls_ssl_session_free_1: (+1)
   \       0x16   0x6E60             LDR      R0,[R4, #+100]
   \       0x18   0x....'....        BL       mbedtls_free
   8853          #endif
   8854          
   8855              mbedtls_platform_zeroize( session, sizeof( mbedtls_ssl_session ) );
   \       0x1C   0x217C             MOVS     R1,#+124
   \       0x1E   0x4620             MOV      R0,R4
   \       0x20   0xE8BD 0x4010      POP      {R4,LR}
   \       0x24   0x....'....        B.W      mbedtls_platform_zeroize
   \                     ??mbedtls_ssl_session_free_0: (+1)
   \       0x28   0xBD10             POP      {R4,PC}          ;; return
   8856          }
   8857          
   8858          /*
   8859           * Free an SSL context
   8860           */

   \                                 In section .text, align 2, keep-with-next
   8861          void mbedtls_ssl_free( mbedtls_ssl_context *ssl )
   8862          {
   \                     mbedtls_ssl_free: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
   8863              if( ssl == NULL )
   \        0x4   0xD069             BEQ.N    ??mbedtls_ssl_free_0
   8864                  return;
   8865          
   8866              MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> free" ) );
   \        0x6   0x....             LDR.N    R5,??DataTable80_7
   \        0x8   0x....'....        LDR.W    R0,??DataTable84_10
   \        0xC   0x9000             STR      R0,[SP, #+0]
   \        0xE   0xF242 0x23A2      MOVW     R3,#+8866
   \       0x12   0x462A             MOV      R2,R5
   \       0x14   0x2102             MOVS     R1,#+2
   \       0x16   0x4620             MOV      R0,R4
   \       0x18   0x....'....        BL       mbedtls_debug_print_msg
   8867          
   8868              if( ssl->out_buf != NULL )
   \       0x1C   0xF8D4 0x00B0      LDR      R0,[R4, #+176]
   \       0x20   0x2800             CMP      R0,#+0
   \       0x22   0xD007             BEQ.N    ??mbedtls_ssl_free_1
   8869              {
   8870                  mbedtls_platform_zeroize( ssl->out_buf, MBEDTLS_SSL_OUT_BUFFER_LEN );
   \       0x24   0xF642 0x114D      MOVW     R1,#+10573
   \       0x28   0x....'....        BL       mbedtls_platform_zeroize
   8871                  mbedtls_free( ssl->out_buf );
   \       0x2C   0xF8D4 0x00B0      LDR      R0,[R4, #+176]
   \       0x30   0x....'....        BL       mbedtls_free
   8872              }
   8873          
   8874              if( ssl->in_buf != NULL )
   \                     ??mbedtls_ssl_free_1: (+1)
   \       0x34   0x6DE0             LDR      R0,[R4, #+92]
   \       0x36   0x2800             CMP      R0,#+0
   \       0x38   0xD006             BEQ.N    ??mbedtls_ssl_free_2
   8875              {
   8876                  mbedtls_platform_zeroize( ssl->in_buf, MBEDTLS_SSL_IN_BUFFER_LEN );
   \       0x3A   0xF642 0x114D      MOVW     R1,#+10573
   \       0x3E   0x....'....        BL       mbedtls_platform_zeroize
   8877                  mbedtls_free( ssl->in_buf );
   \       0x42   0x6DE0             LDR      R0,[R4, #+92]
   \       0x44   0x....'....        BL       mbedtls_free
   8878              }
   8879          
   8880          #if defined(MBEDTLS_ZLIB_SUPPORT)
   8881              if( ssl->compress_buf != NULL )
   8882              {
   8883                  mbedtls_platform_zeroize( ssl->compress_buf, MBEDTLS_SSL_COMPRESS_BUFFER_LEN );
   8884                  mbedtls_free( ssl->compress_buf );
   8885              }
   8886          #endif
   8887          
   8888              if( ssl->transform )
   \                     ??mbedtls_ssl_free_2: (+1)
   \       0x48   0x6CA0             LDR      R0,[R4, #+72]
   \       0x4A   0x2800             CMP      R0,#+0
   \       0x4C   0xD004             BEQ.N    ??mbedtls_ssl_free_3
   8889              {
   8890                  mbedtls_ssl_transform_free( ssl->transform );
   \       0x4E   0x....'....        BL       mbedtls_ssl_transform_free
   8891                  mbedtls_free( ssl->transform );
   \       0x52   0x6CA0             LDR      R0,[R4, #+72]
   \       0x54   0x....'....        BL       mbedtls_free
   8892              }
   8893          
   8894              if( ssl->handshake )
   \                     ??mbedtls_ssl_free_3: (+1)
   \       0x58   0x6BE0             LDR      R0,[R4, #+60]
   \       0x5A   0x2800             CMP      R0,#+0
   \       0x5C   0xD011             BEQ.N    ??mbedtls_ssl_free_4
   8895              {
   8896                  mbedtls_ssl_handshake_free( ssl );
   \       0x5E   0x4620             MOV      R0,R4
   \       0x60   0x....'....        BL       mbedtls_ssl_handshake_free
   8897                  mbedtls_ssl_transform_free( ssl->transform_negotiate );
   \       0x64   0x6CE0             LDR      R0,[R4, #+76]
   \       0x66   0x....'....        BL       mbedtls_ssl_transform_free
   8898                  mbedtls_ssl_session_free( ssl->session_negotiate );
   \       0x6A   0x6BA0             LDR      R0,[R4, #+56]
   \       0x6C   0x....'....        BL       mbedtls_ssl_session_free
   8899          
   8900                  mbedtls_free( ssl->handshake );
   \       0x70   0x6BE0             LDR      R0,[R4, #+60]
   \       0x72   0x....'....        BL       mbedtls_free
   8901                  mbedtls_free( ssl->transform_negotiate );
   \       0x76   0x6CE0             LDR      R0,[R4, #+76]
   \       0x78   0x....'....        BL       mbedtls_free
   8902                  mbedtls_free( ssl->session_negotiate );
   \       0x7C   0x6BA0             LDR      R0,[R4, #+56]
   \       0x7E   0x....'....        BL       mbedtls_free
   8903              }
   8904          
   8905              if( ssl->session )
   \                     ??mbedtls_ssl_free_4: (+1)
   \       0x82   0x6B60             LDR      R0,[R4, #+52]
   \       0x84   0x2800             CMP      R0,#+0
   \       0x86   0xD004             BEQ.N    ??mbedtls_ssl_free_5
   8906              {
   8907                  mbedtls_ssl_session_free( ssl->session );
   \       0x88   0x....'....        BL       mbedtls_ssl_session_free
   8908                  mbedtls_free( ssl->session );
   \       0x8C   0x6B60             LDR      R0,[R4, #+52]
   \       0x8E   0x....'....        BL       mbedtls_free
   8909              }
   8910          
   8911          #if defined(MBEDTLS_X509_CRT_PARSE_C)
   8912              if( ssl->hostname != NULL )
   \                     ??mbedtls_ssl_free_5: (+1)
   \       0x92   0xF8D4 0x00E4      LDR      R0,[R4, #+228]
   \       0x96   0x2800             CMP      R0,#+0
   \       0x98   0xD00A             BEQ.N    ??mbedtls_ssl_free_6
   8913              {
   8914                  mbedtls_platform_zeroize( ssl->hostname, strlen( ssl->hostname ) );
   \       0x9A   0x....'....        BL       strlen
   \       0x9E   0x4601             MOV      R1,R0
   \       0xA0   0xF8D4 0x00E4      LDR      R0,[R4, #+228]
   \       0xA4   0x....'....        BL       mbedtls_platform_zeroize
   8915                  mbedtls_free( ssl->hostname );
   \       0xA8   0xF8D4 0x00E4      LDR      R0,[R4, #+228]
   \       0xAC   0x....'....        BL       mbedtls_free
   8916              }
   8917          #endif
   8918          
   8919          #if defined(MBEDTLS_SSL_HW_RECORD_ACCEL)
   8920              if( mbedtls_ssl_hw_record_finish != NULL )
   8921              {
   8922                  MBEDTLS_SSL_DEBUG_MSG( 2, ( "going for mbedtls_ssl_hw_record_finish()" ) );
   8923                  mbedtls_ssl_hw_record_finish( ssl );
   8924              }
   8925          #endif
   8926          
   8927          #if defined(MBEDTLS_SSL_DTLS_HELLO_VERIFY) && defined(MBEDTLS_SSL_SRV_C)
   8928              mbedtls_free( ssl->cli_id );
   \                     ??mbedtls_ssl_free_6: (+1)
   \       0xB0   0xF8D4 0x00EC      LDR      R0,[R4, #+236]
   \       0xB4   0x....'....        BL       mbedtls_free
   8929          #endif
   8930          
   8931              MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= free" ) );
   \       0xB8   0x....'....        LDR.W    R0,??DataTable84_11
   \       0xBC   0x9000             STR      R0,[SP, #+0]
   \       0xBE   0xF242 0x23E3      MOVW     R3,#+8931
   \       0xC2   0x462A             MOV      R2,R5
   \       0xC4   0x2102             MOVS     R1,#+2
   \       0xC6   0x4620             MOV      R0,R4
   \       0xC8   0x....'....        BL       mbedtls_debug_print_msg
   8932          
   8933              /* Actually clear after last debug message */
   8934              mbedtls_platform_zeroize( ssl, sizeof( mbedtls_ssl_context ) );
   \       0xCC   0xF44F 0x718C      MOV      R1,#+280
   \       0xD0   0x4620             MOV      R0,R4
   \       0xD2   0xE8BD 0x4034      POP      {R2,R4,R5,LR}
   \       0xD6   0x....'....        B.W      mbedtls_platform_zeroize
   \                     ??mbedtls_ssl_free_0: (+1)
   \       0xDA   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   8935          }
   8936          
   8937          /*
   8938           * Initialze mbedtls_ssl_config
   8939           */

   \                                 In section .text, align 2, keep-with-next
   8940          void mbedtls_ssl_config_init( mbedtls_ssl_config *conf )
   8941          {
   8942              memset( conf, 0, sizeof( mbedtls_ssl_config ) );
   \                     mbedtls_ssl_config_init: (+1)
   \        0x0   0x2200             MOVS     R2,#+0
   \        0x2   0x21D0             MOVS     R1,#+208
   \        0x4   0x....'....        B.W      __aeabi_memset4
   8943          }
   8944          
   8945          #if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)

   \                                 In section .data, align 4
   8946          static int ssl_preset_default_hashes[] = {
   \                     ssl_preset_default_hashes:
   \        0x0   0x0000'0008        DC32 8, 7, 6, 5, 4, 0
   \              0x0000'0007  
   \              0x0000'0006  
   \              0x0000'0005  
   \              0x0000'0004  
   \              0x0000'0000  
   8947          #if defined(MBEDTLS_SHA512_C)
   8948              MBEDTLS_MD_SHA512,
   8949              MBEDTLS_MD_SHA384,
   8950          #endif
   8951          #if defined(MBEDTLS_SHA256_C)
   8952              MBEDTLS_MD_SHA256,
   8953              MBEDTLS_MD_SHA224,
   8954          #endif
   8955          #if defined(MBEDTLS_SHA1_C) && defined(MBEDTLS_TLS_DEFAULT_ALLOW_SHA1_IN_KEY_EXCHANGE)
   8956              MBEDTLS_MD_SHA1,
   8957          #endif
   8958              MBEDTLS_MD_NONE
   8959          };
   8960          #endif
   8961          

   \                                 In section .data, align 4
   8962          static int ssl_preset_suiteb_ciphersuites[] = {
   \                     ssl_preset_suiteb_ciphersuites:
   \        0x0   0x0000'C02B        DC32 49195, 49196, 0
   \              0x0000'C02C  
   \              0x0000'0000  
   8963              MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,
   8964              MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,
   8965              0
   8966          };
   8967          
   8968          #if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)

   \                                 In section .data, align 4
   8969          static int ssl_preset_suiteb_hashes[] = {
   \                     ssl_preset_suiteb_hashes:
   \        0x0   0x0000'0006        DC32 6, 7, 0
   \              0x0000'0007  
   \              0x0000'0000  
   8970              MBEDTLS_MD_SHA256,
   8971              MBEDTLS_MD_SHA384,
   8972              MBEDTLS_MD_NONE
   8973          };
   8974          #endif
   8975          
   8976          #if defined(MBEDTLS_ECP_C)

   \                                 In section .data, align 4
   8977          static mbedtls_ecp_group_id ssl_preset_suiteb_curves[] = {
   \                     ssl_preset_suiteb_curves:
   \        0x0   0x03 0x04          DC8 3, 4, 0, 0
   \              0x00 0x00    
   8978              MBEDTLS_ECP_DP_SECP256R1,
   8979              MBEDTLS_ECP_DP_SECP384R1,
   8980              MBEDTLS_ECP_DP_NONE
   8981          };
   8982          #endif
   8983          
   8984          /*
   8985           * Load default in mbedtls_ssl_config
   8986           */

   \                                 In section .text, align 2, keep-with-next
   8987          int mbedtls_ssl_config_defaults( mbedtls_ssl_config *conf,
   8988                                           int endpoint, int transport, int preset )
   8989          {
   \                     mbedtls_ssl_config_defaults: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x4605             MOV      R5,R0
   \        0x4   0x460C             MOV      R4,R1
   \        0x6   0x4616             MOV      R6,R2
   \        0x8   0x461F             MOV      R7,R3
   8990          #if defined(MBEDTLS_DHM_C) && defined(MBEDTLS_SSL_SRV_C)
   8991              int ret;
   8992          #endif
   8993          
   8994              /* Use the functions here so that they are covered in tests,
   8995               * but otherwise access member directly for efficiency */
   8996              mbedtls_ssl_conf_endpoint( conf, endpoint );
   \        0xA   0x....'....        BL       mbedtls_ssl_conf_endpoint
   8997              mbedtls_ssl_conf_transport( conf, transport );
   \        0xE   0x4631             MOV      R1,R6
   \       0x10   0x4628             MOV      R0,R5
   \       0x12   0x....'....        BL       mbedtls_ssl_conf_transport
   8998          
   8999              /*
   9000               * Things that are common to all presets
   9001               */
   9002          #if defined(MBEDTLS_SSL_CLI_C)
   9003              if( endpoint == MBEDTLS_SSL_IS_CLIENT )
   \       0x16   0x2C00             CMP      R4,#+0
   \       0x18   0xD10B             BNE.N    ??mbedtls_ssl_config_defaults_0
   9004              {
   9005                  conf->authmode = MBEDTLS_SSL_VERIFY_REQUIRED;
   \       0x1A   0x2002             MOVS     R0,#+2
   \       0x1C   0xF8D5 0x10CC      LDR      R1,[R5, #+204]
   \       0x20   0xF360 0x0183      BFI      R1,R0,#+2,#+2
   \       0x24   0xF8C5 0x10CC      STR      R1,[R5, #+204]
   9006          #if defined(MBEDTLS_SSL_SESSION_TICKETS)
   9007                  conf->session_tickets = MBEDTLS_SSL_SESSION_TICKETS_ENABLED;
   \       0x28   0x4608             MOV      R0,R1
   \       0x2A   0xF440 0x4000      ORR      R0,R0,#0x8000
   \       0x2E   0xF8C5 0x00CC      STR      R0,[R5, #+204]
   9008          #endif
   9009              }
   9010          #endif
   9011          
   9012          #if defined(MBEDTLS_ARC4_C)
   9013              conf->arc4_disabled = MBEDTLS_SSL_ARC4_DISABLED;
   9014          #endif
   9015          
   9016          #if defined(MBEDTLS_SSL_ENCRYPT_THEN_MAC)
   9017              conf->encrypt_then_mac = MBEDTLS_SSL_ETM_ENABLED;
   \                     ??mbedtls_ssl_config_defaults_0: (+1)
   \       0x32   0xF8D5 0x00CC      LDR      R0,[R5, #+204]
   \       0x36   0xF440 0x7000      ORR      R0,R0,#0x200
   \       0x3A   0xF8C5 0x00CC      STR      R0,[R5, #+204]
   9018          #endif
   9019          
   9020          #if defined(MBEDTLS_SSL_EXTENDED_MASTER_SECRET)
   9021              conf->extended_ms = MBEDTLS_SSL_EXTENDED_MS_ENABLED;
   \       0x3E   0xF8D5 0x00CC      LDR      R0,[R5, #+204]
   \       0x42   0xF440 0x6080      ORR      R0,R0,#0x400
   \       0x46   0xF8C5 0x00CC      STR      R0,[R5, #+204]
   9022          #endif
   9023          
   9024          #if defined(MBEDTLS_SSL_CBC_RECORD_SPLITTING)
   9025              conf->cbc_record_splitting = MBEDTLS_SSL_CBC_RECORD_SPLITTING_ENABLED;
   \       0x4A   0xF440 0x5080      ORR      R0,R0,#0x1000
   \       0x4E   0xF8C5 0x00CC      STR      R0,[R5, #+204]
   9026          #endif
   9027          
   9028          #if defined(MBEDTLS_SSL_DTLS_HELLO_VERIFY) && defined(MBEDTLS_SSL_SRV_C)
   9029              conf->f_cookie_write = ssl_cookie_write_dummy;
   \       0x52   0x....'....        LDR.W    R0,??DataTable84_12
   \       0x56   0x6468             STR      R0,[R5, #+68]
   9030              conf->f_cookie_check = ssl_cookie_check_dummy;
   \       0x58   0x....'....        LDR.W    R0,??DataTable84_13
   \       0x5C   0x64A8             STR      R0,[R5, #+72]
   9031          #endif
   9032          
   9033          #if defined(MBEDTLS_SSL_DTLS_ANTI_REPLAY)
   9034              conf->anti_replay = MBEDTLS_SSL_ANTI_REPLAY_ENABLED;
   \       0x5E   0xF8D5 0x00CC      LDR      R0,[R5, #+204]
   \       0x62   0xF440 0x6000      ORR      R0,R0,#0x800
   \       0x66   0xF8C5 0x00CC      STR      R0,[R5, #+204]
   9035          #endif
   9036          
   9037          #if defined(MBEDTLS_SSL_SRV_C)
   9038              conf->cert_req_ca_list = MBEDTLS_SSL_CERT_REQ_CA_LIST_ENABLED;
   \       0x6A   0xF8D5 0x00CC      LDR      R0,[R5, #+204]
   \       0x6E   0xF440 0x3000      ORR      R0,R0,#0x20000
   \       0x72   0xF8C5 0x00CC      STR      R0,[R5, #+204]
   9039          #endif
   9040          
   9041          #if defined(MBEDTLS_SSL_PROTO_DTLS)
   9042              conf->hs_timeout_min = MBEDTLS_SSL_DTLS_TIMEOUT_DFL_MIN;
   \       0x76   0xF44F 0x707A      MOV      R0,#+1000
   \       0x7A   0xF8C5 0x00AC      STR      R0,[R5, #+172]
   9043              conf->hs_timeout_max = MBEDTLS_SSL_DTLS_TIMEOUT_DFL_MAX;
   \       0x7E   0xF64E 0x2060      MOVW     R0,#+60000
   \       0x82   0xF8C5 0x00B0      STR      R0,[R5, #+176]
   9044          #endif
   9045          
   9046          #if defined(MBEDTLS_SSL_RENEGOTIATION)
   9047              conf->renego_max_records = MBEDTLS_SSL_RENEGO_MAX_RECORDS_DEFAULT;
   \       0x86   0x2010             MOVS     R0,#+16
   \       0x88   0xF8C5 0x00B4      STR      R0,[R5, #+180]
   9048              memset( conf->renego_period,     0x00, 2 );
   \       0x8C   0x2200             MOVS     R2,#+0
   \       0x8E   0x2102             MOVS     R1,#+2
   \       0x90   0xF105 0x00B8      ADD      R0,R5,#+184
   \       0x94   0x....'....        BL       __aeabi_memset4
   9049              memset( conf->renego_period + 2, 0xFF, 6 );
   \       0x98   0x22FF             MOVS     R2,#+255
   \       0x9A   0x2106             MOVS     R1,#+6
   \       0x9C   0xF105 0x00BA      ADD      R0,R5,#+186
   \       0xA0   0x....'....        BL       __aeabi_memset
   9050          #endif
   9051          
   9052          #if defined(MBEDTLS_DHM_C) && defined(MBEDTLS_SSL_SRV_C)
   9053                      if( endpoint == MBEDTLS_SSL_IS_SERVER )
   \       0xA4   0x2C01             CMP      R4,#+1
   \       0xA6   0xD10C             BNE.N    ??mbedtls_ssl_config_defaults_1
   9054                      {
   9055                          const unsigned char dhm_p[] =
   9056                              MBEDTLS_DHM_RFC3526_MODP_2048_P_BIN;
   9057                          const unsigned char dhm_g[] =
   9058                              MBEDTLS_DHM_RFC3526_MODP_2048_G_BIN;
   9059          
   9060                          if ( ( ret = mbedtls_ssl_conf_dh_param_bin( conf,
   9061                                                         dhm_p, sizeof( dhm_p ),
   9062                                                         dhm_g, sizeof( dhm_g ) ) ) != 0 )
   \       0xA8   0x2001             MOVS     R0,#+1
   \       0xAA   0x9000             STR      R0,[SP, #+0]
   \       0xAC   0x....'....        LDR.W    R3,??DataTable84_14
   \       0xB0   0xF44F 0x7280      MOV      R2,#+256
   \       0xB4   0x....'....        LDR.W    R1,??DataTable84_15
   \       0xB8   0x4628             MOV      R0,R5
   \       0xBA   0x....'....        BL       mbedtls_ssl_conf_dh_param_bin
   \       0xBE   0x2800             CMP      R0,#+0
   \       0xC0   0xD13E             BNE.N    ??mbedtls_ssl_config_defaults_2
   9063                          {
   9064                              return( ret );
   9065                          }
   9066                      }
   9067          #endif
   9068          
   9069              /*
   9070               * Preset-specific defaults
   9071               */
   9072              switch( preset )
   \                     ??mbedtls_ssl_config_defaults_1: (+1)
   \       0xC2   0x2F02             CMP      R7,#+2
   \       0xC4   0xD118             BNE.N    ??mbedtls_ssl_config_defaults_3
   9073              {
   9074                  /*
   9075                   * NSA Suite B
   9076                   */
   9077                  case MBEDTLS_SSL_PRESET_SUITEB:
   9078                      conf->min_major_ver = MBEDTLS_SSL_MAJOR_VERSION_3;
   \       0xC6   0x2003             MOVS     R0,#+3
   \       0xC8   0xF885 0x00CA      STRB     R0,[R5, #+202]
   9079                      conf->min_minor_ver = MBEDTLS_SSL_MINOR_VERSION_3; /* TLS 1.2 */
   \       0xCC   0xF885 0x00CB      STRB     R0,[R5, #+203]
   9080                      conf->max_major_ver = MBEDTLS_SSL_MAX_MAJOR_VERSION;
   \       0xD0   0xF885 0x00C8      STRB     R0,[R5, #+200]
   9081                      conf->max_minor_ver = MBEDTLS_SSL_MAX_MINOR_VERSION;
   \       0xD4   0xF885 0x00C9      STRB     R0,[R5, #+201]
   9082          
   9083                      conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
   9084                      conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
   9085                      conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
   9086                      conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
   9087                                             ssl_preset_suiteb_ciphersuites;
   \       0xD8   0x....'....        LDR.W    R0,??DataTable84_16
   \       0xDC   0x60E8             STR      R0,[R5, #+12]
   \       0xDE   0x60A8             STR      R0,[R5, #+8]
   \       0xE0   0x6068             STR      R0,[R5, #+4]
   \       0xE2   0x6028             STR      R0,[R5, #+0]
   9088          
   9089          #if defined(MBEDTLS_X509_CRT_PARSE_C)
   9090                      conf->cert_profile = &mbedtls_x509_crt_profile_suiteb;
   \       0xE4   0x....'....        LDR.W    R0,??DataTable84_17
   \       0xE8   0x6668             STR      R0,[R5, #+100]
   9091          #endif
   9092          
   9093          #if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
   9094                      conf->sig_hashes = ssl_preset_suiteb_hashes;
   \       0xEA   0x....'....        LDR.W    R0,??DataTable84_18
   \       0xEE   0x6768             STR      R0,[R5, #+116]
   9095          #endif
   9096          
   9097          #if defined(MBEDTLS_ECP_C)
   9098                      conf->curve_list = ssl_preset_suiteb_curves;
   \       0xF0   0x....'....        LDR.W    R0,??DataTable84_19
   \       0xF4   0x67A8             STR      R0,[R5, #+120]
   9099          #endif
   9100                      break;
   \       0xF6   0xE022             B.N      ??mbedtls_ssl_config_defaults_4
   9101          
   9102                  /*
   9103                   * Default
   9104                   */
   9105                  default:
   9106                      conf->min_major_ver = ( MBEDTLS_SSL_MIN_MAJOR_VERSION >
   9107                                              MBEDTLS_SSL_MIN_VALID_MAJOR_VERSION ) ?
   9108                                              MBEDTLS_SSL_MIN_MAJOR_VERSION :
   9109                                              MBEDTLS_SSL_MIN_VALID_MAJOR_VERSION;
   \                     ??mbedtls_ssl_config_defaults_3: (+1)
   \       0xF8   0x2003             MOVS     R0,#+3
   \       0xFA   0xF885 0x00CA      STRB     R0,[R5, #+202]
   9110                      conf->min_minor_ver = ( MBEDTLS_SSL_MIN_MINOR_VERSION >
   9111                                              MBEDTLS_SSL_MIN_VALID_MINOR_VERSION ) ?
   9112                                              MBEDTLS_SSL_MIN_MINOR_VERSION :
   9113                                              MBEDTLS_SSL_MIN_VALID_MINOR_VERSION;
   \       0xFE   0x2001             MOVS     R0,#+1
   \      0x100   0xF885 0x00CB      STRB     R0,[R5, #+203]
   9114                      conf->max_major_ver = MBEDTLS_SSL_MAX_MAJOR_VERSION;
   \      0x104   0x2003             MOVS     R0,#+3
   \      0x106   0xF885 0x00C8      STRB     R0,[R5, #+200]
   9115                      conf->max_minor_ver = MBEDTLS_SSL_MAX_MINOR_VERSION;
   \      0x10A   0xF885 0x00C9      STRB     R0,[R5, #+201]
   9116          
   9117          #if defined(MBEDTLS_SSL_PROTO_DTLS)
   9118                      if( transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
   \      0x10E   0x2E01             CMP      R6,#+1
   \      0x110   0xD102             BNE.N    ??mbedtls_ssl_config_defaults_5
   9119                          conf->min_minor_ver = MBEDTLS_SSL_MINOR_VERSION_2;
   \      0x112   0x2002             MOVS     R0,#+2
   \      0x114   0xF885 0x00CB      STRB     R0,[R5, #+203]
   9120          #endif
   9121          
   9122                      conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
   9123                      conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
   9124                      conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
   9125                      conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
   9126                                             mbedtls_ssl_list_ciphersuites();
   \                     ??mbedtls_ssl_config_defaults_5: (+1)
   \      0x118   0x....'....        BL       mbedtls_ssl_list_ciphersuites
   \      0x11C   0x60E8             STR      R0,[R5, #+12]
   \      0x11E   0x60A8             STR      R0,[R5, #+8]
   \      0x120   0x6068             STR      R0,[R5, #+4]
   \      0x122   0x6028             STR      R0,[R5, #+0]
   9127          
   9128          #if defined(MBEDTLS_X509_CRT_PARSE_C)
   9129                      conf->cert_profile = &mbedtls_x509_crt_profile_default;
   \      0x124   0x....'....        LDR.W    R0,??DataTable84_20
   \      0x128   0x6668             STR      R0,[R5, #+100]
   9130          #endif
   9131          
   9132          #if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
   9133                      conf->sig_hashes = ssl_preset_default_hashes;
   \      0x12A   0x....'....        LDR.W    R0,??DataTable84_21
   \      0x12E   0x6768             STR      R0,[R5, #+116]
   9134          #endif
   9135          
   9136          #if defined(MBEDTLS_ECP_C)
   9137                      conf->curve_list = mbedtls_ecp_grp_id_list();
   \      0x130   0x....'....        BL       mbedtls_ecp_grp_id_list
   \      0x134   0x67A8             STR      R0,[R5, #+120]
   9138          #endif
   9139          
   9140          #if defined(MBEDTLS_DHM_C) && defined(MBEDTLS_SSL_CLI_C)
   9141                      conf->dhm_min_bitlen = 1024;
   \      0x136   0xF44F 0x6080      MOV      R0,#+1024
   \      0x13A   0xF8C5 0x00C4      STR      R0,[R5, #+196]
   9142          #endif
   9143              }
   9144          
   9145              return( 0 );
   \                     ??mbedtls_ssl_config_defaults_4: (+1)
   \      0x13E   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_ssl_config_defaults_2: (+1)
   \      0x140   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
   9146          }

   \                                 In section .rodata, align 4
   \                     `mbedtls_ssl_config_defaults{2}{3}::dhm_p`:
   \        0x0   0xFF 0xFF          DC8 255, 255, 255, 255, 255, 255, 255, 255, 201, 15, 218, 162, 33, 104
   \              0xFF 0xFF    
   \              0xFF 0xFF    
   \              0xFF 0xFF    
   \              0xC9 0x0F    
   \              0xDA 0xA2    
   \              0x21 0x68    
   \        0xE   0xC2 0x34          DC8 194, 52, 196, 198, 98, 139, 128, 220, 28, 209, 41, 2, 78, 8, 138
   \              0xC4 0xC6    
   \              0x62 0x8B    
   \              0x80 0xDC    
   \              0x1C 0xD1    
   \              0x29 0x02    
   \              0x4E 0x08    
   \              0x8A         
   \       0x1D   0x67 0xCC          DC8 103, 204, 116, 2, 11, 190, 166, 59, 19, 155, 34, 81, 74, 8, 121
   \              0x74 0x02    
   \              0x0B 0xBE    
   \              0xA6 0x3B    
   \              0x13 0x9B    
   \              0x22 0x51    
   \              0x4A 0x08    
   \              0x79         
   \       0x2C   0x8E 0x34          DC8 142, 52, 4, 221, 239, 149, 25, 179, 205, 58, 67, 27, 48, 43, 10
   \              0x04 0xDD    
   \              0xEF 0x95    
   \              0x19 0xB3    
   \              0xCD 0x3A    
   \              0x43 0x1B    
   \              0x30 0x2B    
   \              0x0A         
   \       0x3B   0x6D 0xF2          DC8 109, 242, 95, 20, 55, 79, 225, 53, 109, 109, 81, 194, 69, 228, 133
   \              0x5F 0x14    
   \              0x37 0x4F    
   \              0xE1 0x35    
   \              0x6D 0x6D    
   \              0x51 0xC2    
   \              0x45 0xE4    
   \              0x85         
   \       0x4A   0xB5 0x76          DC8 181, 118, 98, 94, 126, 198, 244, 76, 66, 233, 166, 55, 237, 107, 11
   \              0x62 0x5E    
   \              0x7E 0xC6    
   \              0xF4 0x4C    
   \              0x42 0xE9    
   \              0xA6 0x37    
   \              0xED 0x6B    
   \              0x0B         
   \       0x59   0xFF 0x5C          DC8 255, 92, 182, 244, 6, 183, 237, 238, 56, 107, 251, 90, 137, 159
   \              0xB6 0xF4    
   \              0x06 0xB7    
   \              0xED 0xEE    
   \              0x38 0x6B    
   \              0xFB 0x5A    
   \              0x89 0x9F    
   \       0x67   0xA5 0xAE          DC8 165, 174, 159, 36, 17, 124, 75, 31, 230, 73, 40, 102, 81, 236, 228
   \              0x9F 0x24    
   \              0x11 0x7C    
   \              0x4B 0x1F    
   \              0xE6 0x49    
   \              0x28 0x66    
   \              0x51 0xEC    
   \              0xE4         
   \       0x76   0x5B 0x3D          DC8 91, 61, 194, 0, 124, 184, 161, 99, 191, 5, 152, 218, 72, 54, 28, 85
   \              0xC2 0x00    
   \              0x7C 0xB8    
   \              0xA1 0x63    
   \              0xBF 0x05    
   \              0x98 0xDA    
   \              0x48 0x36    
   \              0x1C 0x55    
   \       0x86   0xD3 0x9A          DC8 211, 154, 105, 22, 63, 168, 253, 36, 207, 95, 131, 101, 93, 35, 220
   \              0x69 0x16    
   \              0x3F 0xA8    
   \              0xFD 0x24    
   \              0xCF 0x5F    
   \              0x83 0x65    
   \              0x5D 0x23    
   \              0xDC         
   \       0x95   0xA3 0xAD          DC8 163, 173, 150, 28, 98, 243, 86, 32, 133, 82, 187, 158, 213, 41, 7
   \              0x96 0x1C    
   \              0x62 0xF3    
   \              0x56 0x20    
   \              0x85 0x52    
   \              0xBB 0x9E    
   \              0xD5 0x29    
   \              0x07         
   \       0xA4   0x70 0x96          DC8 112, 150, 150, 109, 103, 12, 53, 78, 74, 188, 152, 4, 241, 116, 108
   \              0x96 0x6D    
   \              0x67 0x0C    
   \              0x35 0x4E    
   \              0x4A 0xBC    
   \              0x98 0x04    
   \              0xF1 0x74    
   \              0x6C         
   \       0xB3   0x08 0xCA          DC8 8, 202, 24, 33, 124, 50, 144, 94, 70, 46, 54, 206, 59, 227, 158
   \              0x18 0x21    
   \              0x7C 0x32    
   \              0x90 0x5E    
   \              0x46 0x2E    
   \              0x36 0xCE    
   \              0x3B 0xE3    
   \              0x9E         
   \       0xC2   0x77 0x2C          DC8 119, 44, 24, 14, 134, 3, 155, 39, 131, 162, 236, 7, 162, 143, 181
   \              0x18 0x0E    
   \              0x86 0x03    
   \              0x9B 0x27    
   \              0x83 0xA2    
   \              0xEC 0x07    
   \              0xA2 0x8F    
   \              0xB5         
   \       0xD1   0xC5 0x5D          DC8 197, 93, 240, 111, 76, 82, 201, 222, 43, 203, 246, 149, 88, 23, 24
   \              0xF0 0x6F    
   \              0x4C 0x52    
   \              0xC9 0xDE    
   \              0x2B 0xCB    
   \              0xF6 0x95    
   \              0x58 0x17    
   \              0x18         
   \       0xE0   0x39 0x95          DC8 57, 149, 73, 124, 234, 149, 106, 229, 21, 210, 38, 24, 152, 250, 5
   \              0x49 0x7C    
   \              0xEA 0x95    
   \              0x6A 0xE5    
   \              0x15 0xD2    
   \              0x26 0x18    
   \              0x98 0xFA    
   \              0x05         
   \       0xEF   0x10 0x15          DC8 16, 21, 114, 142, 90, 138, 172, 170, 104, 255, 255, 255, 255, 255
   \              0x72 0x8E    
   \              0x5A 0x8A    
   \              0xAC 0xAA    
   \              0x68 0xFF    
   \              0xFF 0xFF    
   \              0xFF 0xFF    
   \       0xFD   0xFF 0xFF          DC8 255, 255, 255
   \              0xFF         

   \                                 In section .rodata, align 1
   \                     `mbedtls_ssl_config_defaults{2}{3}::dhm_g`:
   \        0x0   0x02               DC8 2
   9147          
   9148          /*
   9149           * Free mbedtls_ssl_config
   9150           */

   \                                 In section .text, align 2, keep-with-next
   9151          void mbedtls_ssl_config_free( mbedtls_ssl_config *conf )
   9152          {
   \                     mbedtls_ssl_config_free: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x4604             MOV      R4,R0
   9153          #if defined(MBEDTLS_DHM_C)
   9154              mbedtls_mpi_free( &conf->dhm_P );
   \        0x4   0xF104 0x007C      ADD      R0,R4,#+124
   \        0x8   0x....'....        BL       mbedtls_mpi_free
   9155              mbedtls_mpi_free( &conf->dhm_G );
   \        0xC   0xF104 0x0088      ADD      R0,R4,#+136
   \       0x10   0x....'....        BL       mbedtls_mpi_free
   9156          #endif
   9157          
   9158          #if defined(MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED)
   9159              if( conf->psk != NULL )
   \       0x14   0xF8D4 0x0094      LDR      R0,[R4, #+148]
   \       0x18   0x2800             CMP      R0,#+0
   \       0x1A   0xD00C             BEQ.N    ??mbedtls_ssl_config_free_0
   9160              {
   9161                  mbedtls_platform_zeroize( conf->psk, conf->psk_len );
   \       0x1C   0xF8D4 0x1098      LDR      R1,[R4, #+152]
   \       0x20   0x....'....        BL       mbedtls_platform_zeroize
   9162                  mbedtls_free( conf->psk );
   \       0x24   0xF8D4 0x0094      LDR      R0,[R4, #+148]
   \       0x28   0x....'....        BL       mbedtls_free
   9163                  conf->psk = NULL;
   \       0x2C   0x2000             MOVS     R0,#+0
   \       0x2E   0xF8C4 0x0094      STR      R0,[R4, #+148]
   9164                  conf->psk_len = 0;
   \       0x32   0xF8C4 0x0098      STR      R0,[R4, #+152]
   9165              }
   9166          
   9167              if( conf->psk_identity != NULL )
   \                     ??mbedtls_ssl_config_free_0: (+1)
   \       0x36   0xF8D4 0x009C      LDR      R0,[R4, #+156]
   \       0x3A   0x2800             CMP      R0,#+0
   \       0x3C   0xD00C             BEQ.N    ??mbedtls_ssl_config_free_1
   9168              {
   9169                  mbedtls_platform_zeroize( conf->psk_identity, conf->psk_identity_len );
   \       0x3E   0xF8D4 0x10A0      LDR      R1,[R4, #+160]
   \       0x42   0x....'....        BL       mbedtls_platform_zeroize
   9170                  mbedtls_free( conf->psk_identity );
   \       0x46   0xF8D4 0x009C      LDR      R0,[R4, #+156]
   \       0x4A   0x....'....        BL       mbedtls_free
   9171                  conf->psk_identity = NULL;
   \       0x4E   0x2000             MOVS     R0,#+0
   \       0x50   0xF8C4 0x009C      STR      R0,[R4, #+156]
   9172                  conf->psk_identity_len = 0;
   \       0x54   0xF8C4 0x00A0      STR      R0,[R4, #+160]
   9173              }
   9174          #endif
   9175          
   9176          #if defined(MBEDTLS_X509_CRT_PARSE_C)
   9177              ssl_key_cert_free( conf->key_cert );
   \                     ??mbedtls_ssl_config_free_1: (+1)
   \       0x58   0x6EA0             LDR      R0,[R4, #+104]
   \       0x5A   0x....'....        BL       ssl_key_cert_free
   9178          #endif
   9179          
   9180              mbedtls_platform_zeroize( conf, sizeof( mbedtls_ssl_config ) );
   \       0x5E   0x21D0             MOVS     R1,#+208
   \       0x60   0x4620             MOV      R0,R4
   \       0x62   0xE8BD 0x4010      POP      {R4,LR}
   \       0x66   0x....'....        B.W      mbedtls_platform_zeroize
   9181          }
   9182          
   9183          #if defined(MBEDTLS_PK_C) && \
   9184              ( defined(MBEDTLS_RSA_C) || defined(MBEDTLS_ECDSA_C) )
   9185          /*
   9186           * Convert between MBEDTLS_PK_XXX and SSL_SIG_XXX
   9187           */

   \                                 In section .text, align 2, keep-with-next
   9188          unsigned char mbedtls_ssl_sig_from_pk( mbedtls_pk_context *pk )
   9189          {
   \                     mbedtls_ssl_sig_from_pk: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x4604             MOV      R4,R0
   9190          #if defined(MBEDTLS_RSA_C)
   9191              if( mbedtls_pk_can_do( pk, MBEDTLS_PK_RSA ) )
   \        0x4   0x2101             MOVS     R1,#+1
   \        0x6   0x....'....        BL       mbedtls_pk_can_do
   \        0xA   0x2800             CMP      R0,#+0
   \        0xC   0xD001             BEQ.N    ??mbedtls_ssl_sig_from_pk_0
   9192                  return( MBEDTLS_SSL_SIG_RSA );
   \        0xE   0x2001             MOVS     R0,#+1
   \       0x10   0xBD10             POP      {R4,PC}
   9193          #endif
   9194          #if defined(MBEDTLS_ECDSA_C)
   9195              if( mbedtls_pk_can_do( pk, MBEDTLS_PK_ECDSA ) )
   \                     ??mbedtls_ssl_sig_from_pk_0: (+1)
   \       0x12   0x2104             MOVS     R1,#+4
   \       0x14   0x4620             MOV      R0,R4
   \       0x16   0x....'....        BL       mbedtls_pk_can_do
   \       0x1A   0x2800             CMP      R0,#+0
   \       0x1C   0xD001             BEQ.N    ??mbedtls_ssl_sig_from_pk_1
   9196                  return( MBEDTLS_SSL_SIG_ECDSA );
   \       0x1E   0x2003             MOVS     R0,#+3
   \       0x20   0xBD10             POP      {R4,PC}
   9197          #endif
   9198              return( MBEDTLS_SSL_SIG_ANON );
   \                     ??mbedtls_ssl_sig_from_pk_1: (+1)
   \       0x22   0x2000             MOVS     R0,#+0
   \       0x24   0xBD10             POP      {R4,PC}          ;; return
   9199          }
   9200          

   \                                 In section .text, align 2, keep-with-next
   9201          unsigned char mbedtls_ssl_sig_from_pk_alg( mbedtls_pk_type_t type )
   9202          {
   9203              switch( type ) {
   \                     mbedtls_ssl_sig_from_pk_alg: (+1)
   \        0x0   0x2801             CMP      R0,#+1
   \        0x2   0xD004             BEQ.N    ??mbedtls_ssl_sig_from_pk_alg_0
   \        0x4   0x2802             CMP      R0,#+2
   \        0x6   0xD004             BEQ.N    ??mbedtls_ssl_sig_from_pk_alg_1
   \        0x8   0x2804             CMP      R0,#+4
   \        0xA   0xD002             BEQ.N    ??mbedtls_ssl_sig_from_pk_alg_1
   \        0xC   0xE003             B.N      ??mbedtls_ssl_sig_from_pk_alg_2
   9204                  case MBEDTLS_PK_RSA:
   9205                      return( MBEDTLS_SSL_SIG_RSA );
   \                     ??mbedtls_ssl_sig_from_pk_alg_0: (+1)
   \        0xE   0x2001             MOVS     R0,#+1
   \       0x10   0x4770             BX       LR
   9206                  case MBEDTLS_PK_ECDSA:
   9207                  case MBEDTLS_PK_ECKEY:
   9208                      return( MBEDTLS_SSL_SIG_ECDSA );
   \                     ??mbedtls_ssl_sig_from_pk_alg_1: (+1)
   \       0x12   0x2003             MOVS     R0,#+3
   \       0x14   0x4770             BX       LR
   9209                  default:
   9210                      return( MBEDTLS_SSL_SIG_ANON );
   \                     ??mbedtls_ssl_sig_from_pk_alg_2: (+1)
   \       0x16   0x2000             MOVS     R0,#+0
   \       0x18   0x4770             BX       LR               ;; return
   9211              }
   9212          }
   9213          

   \                                 In section .text, align 2, keep-with-next
   9214          mbedtls_pk_type_t mbedtls_ssl_pk_alg_from_sig( unsigned char sig )
   9215          {
   9216              switch( sig )
   \                     mbedtls_ssl_pk_alg_from_sig: (+1)
   \        0x0   0x2801             CMP      R0,#+1
   \        0x2   0xD002             BEQ.N    ??mbedtls_ssl_pk_alg_from_sig_0
   \        0x4   0x2803             CMP      R0,#+3
   \        0x6   0xD002             BEQ.N    ??mbedtls_ssl_pk_alg_from_sig_1
   \        0x8   0xE003             B.N      ??mbedtls_ssl_pk_alg_from_sig_2
   9217              {
   9218          #if defined(MBEDTLS_RSA_C)
   9219                  case MBEDTLS_SSL_SIG_RSA:
   9220                      return( MBEDTLS_PK_RSA );
   \                     ??mbedtls_ssl_pk_alg_from_sig_0: (+1)
   \        0xA   0x2001             MOVS     R0,#+1
   \        0xC   0x4770             BX       LR
   9221          #endif
   9222          #if defined(MBEDTLS_ECDSA_C)
   9223                  case MBEDTLS_SSL_SIG_ECDSA:
   9224                      return( MBEDTLS_PK_ECDSA );
   \                     ??mbedtls_ssl_pk_alg_from_sig_1: (+1)
   \        0xE   0x2004             MOVS     R0,#+4
   \       0x10   0x4770             BX       LR
   9225          #endif
   9226                  default:
   9227                      return( MBEDTLS_PK_NONE );
   \                     ??mbedtls_ssl_pk_alg_from_sig_2: (+1)
   \       0x12   0x2000             MOVS     R0,#+0
   \       0x14   0x4770             BX       LR               ;; return
   9228              }
   9229          }
   9230          #endif /* MBEDTLS_PK_C && ( MBEDTLS_RSA_C || MBEDTLS_ECDSA_C ) */
   9231          
   9232          #if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \
   9233              defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
   9234          
   9235          /* Find an entry in a signature-hash set matching a given hash algorithm. */

   \                                 In section .text, align 2, keep-with-next
   9236          mbedtls_md_type_t mbedtls_ssl_sig_hash_set_find( mbedtls_ssl_sig_hash_set_t *set,
   9237                                                           mbedtls_pk_type_t sig_alg )
   9238          {
   9239              switch( sig_alg )
   \                     mbedtls_ssl_sig_hash_set_find: (+1)
   \        0x0   0x2901             CMP      R1,#+1
   \        0x2   0xD002             BEQ.N    ??mbedtls_ssl_sig_hash_set_find_0
   \        0x4   0x2904             CMP      R1,#+4
   \        0x6   0xD002             BEQ.N    ??mbedtls_ssl_sig_hash_set_find_1
   \        0x8   0xE003             B.N      ??mbedtls_ssl_sig_hash_set_find_2
   9240              {
   9241                  case MBEDTLS_PK_RSA:
   9242                      return( set->rsa );
   \                     ??mbedtls_ssl_sig_hash_set_find_0: (+1)
   \        0xA   0x7800             LDRB     R0,[R0, #+0]
   \        0xC   0x4770             BX       LR
   9243                  case MBEDTLS_PK_ECDSA:
   9244                      return( set->ecdsa );
   \                     ??mbedtls_ssl_sig_hash_set_find_1: (+1)
   \        0xE   0x7840             LDRB     R0,[R0, #+1]
   \       0x10   0x4770             BX       LR
   9245                  default:
   9246                      return( MBEDTLS_MD_NONE );
   \                     ??mbedtls_ssl_sig_hash_set_find_2: (+1)
   \       0x12   0x2000             MOVS     R0,#+0
   \       0x14   0x4770             BX       LR               ;; return
   9247              }
   9248          }
   9249          
   9250          /* Add a signature-hash-pair to a signature-hash set */

   \                                 In section .text, align 2, keep-with-next
   9251          void mbedtls_ssl_sig_hash_set_add( mbedtls_ssl_sig_hash_set_t *set,
   9252                                             mbedtls_pk_type_t sig_alg,
   9253                                             mbedtls_md_type_t md_alg )
   9254          {
   9255              switch( sig_alg )
   \                     mbedtls_ssl_sig_hash_set_add: (+1)
   \        0x0   0x2901             CMP      R1,#+1
   \        0x2   0xD002             BEQ.N    ??mbedtls_ssl_sig_hash_set_add_0
   \        0x4   0x2904             CMP      R1,#+4
   \        0x6   0xD005             BEQ.N    ??mbedtls_ssl_sig_hash_set_add_1
   \        0x8   0x4770             BX       LR
   9256              {
   9257                  case MBEDTLS_PK_RSA:
   9258                      if( set->rsa == MBEDTLS_MD_NONE )
   \                     ??mbedtls_ssl_sig_hash_set_add_0: (+1)
   \        0xA   0x7801             LDRB     R1,[R0, #+0]
   \        0xC   0x2900             CMP      R1,#+0
   \        0xE   0xD105             BNE.N    ??mbedtls_ssl_sig_hash_set_add_2
   9259                          set->rsa = md_alg;
   \       0x10   0x7002             STRB     R2,[R0, #+0]
   \       0x12   0x4770             BX       LR
   9260                      break;
   9261          
   9262                  case MBEDTLS_PK_ECDSA:
   9263                      if( set->ecdsa == MBEDTLS_MD_NONE )
   \                     ??mbedtls_ssl_sig_hash_set_add_1: (+1)
   \       0x14   0x7841             LDRB     R1,[R0, #+1]
   \       0x16   0x2900             CMP      R1,#+0
   \       0x18   0xD100             BNE.N    ??mbedtls_ssl_sig_hash_set_add_2
   9264                          set->ecdsa = md_alg;
   \       0x1A   0x7042             STRB     R2,[R0, #+1]
   9265                      break;
   9266          
   9267                  default:
   9268                      break;
   9269              }
   9270          }
   \                     ??mbedtls_ssl_sig_hash_set_add_2: (+1)
   \       0x1C   0x4770             BX       LR               ;; return
   9271          
   9272          /* Allow exactly one hash algorithm for each signature. */

   \                                 In section .text, align 2, keep-with-next
   9273          void mbedtls_ssl_sig_hash_set_const_hash( mbedtls_ssl_sig_hash_set_t *set,
   9274                                                    mbedtls_md_type_t md_alg )
   9275          {
   9276              set->rsa   = md_alg;
   \                     mbedtls_ssl_sig_hash_set_const_hash: (+1)
   \        0x0   0x7001             STRB     R1,[R0, #+0]
   9277              set->ecdsa = md_alg;
   \        0x2   0x7041             STRB     R1,[R0, #+1]
   9278          }
   \        0x4   0x4770             BX       LR               ;; return
   9279          
   9280          #endif /* MBEDTLS_SSL_PROTO_TLS1_2) &&
   9281                    MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED */
   9282          
   9283          /*
   9284           * Convert from MBEDTLS_SSL_HASH_XXX to MBEDTLS_MD_XXX
   9285           */

   \                                 In section .text, align 4, keep-with-next
   9286          mbedtls_md_type_t mbedtls_ssl_md_alg_from_hash( unsigned char hash )
   9287          {
   9288              switch( hash )
   \                     mbedtls_ssl_md_alg_from_hash: (+1)
   \        0x0   0x1E40             SUBS     R0,R0,#+1
   \        0x2   0x2805             CMP      R0,#+5
   \        0x4   0xD810             BHI.N    ??mbedtls_ssl_md_alg_from_hash_1
   \        0x6   0xE8DF 0xF000      TBB      [PC, R0]
   \                     ??mbedtls_ssl_md_alg_from_hash_0:
   \        0xA   0x03 0x05          DC8      0x3,0x5,0x7,0x9
   \              0x07 0x09    
   \        0xE   0x0B 0x0D          DC8      0xB,0xD
   9289              {
   9290          #if defined(MBEDTLS_MD5_C)
   9291                  case MBEDTLS_SSL_HASH_MD5:
   9292                      return( MBEDTLS_MD_MD5 );
   \                     ??mbedtls_ssl_md_alg_from_hash_2: (+1)
   \       0x10   0x2003             MOVS     R0,#+3
   \       0x12   0x4770             BX       LR
   9293          #endif
   9294          #if defined(MBEDTLS_SHA1_C)
   9295                  case MBEDTLS_SSL_HASH_SHA1:
   9296                      return( MBEDTLS_MD_SHA1 );
   \                     ??mbedtls_ssl_md_alg_from_hash_3: (+1)
   \       0x14   0x2004             MOVS     R0,#+4
   \       0x16   0x4770             BX       LR
   9297          #endif
   9298          #if defined(MBEDTLS_SHA256_C)
   9299                  case MBEDTLS_SSL_HASH_SHA224:
   9300                      return( MBEDTLS_MD_SHA224 );
   \                     ??mbedtls_ssl_md_alg_from_hash_4: (+1)
   \       0x18   0x2005             MOVS     R0,#+5
   \       0x1A   0x4770             BX       LR
   9301                  case MBEDTLS_SSL_HASH_SHA256:
   9302                      return( MBEDTLS_MD_SHA256 );
   \                     ??mbedtls_ssl_md_alg_from_hash_5: (+1)
   \       0x1C   0x2006             MOVS     R0,#+6
   \       0x1E   0x4770             BX       LR
   9303          #endif
   9304          #if defined(MBEDTLS_SHA512_C)
   9305                  case MBEDTLS_SSL_HASH_SHA384:
   9306                      return( MBEDTLS_MD_SHA384 );
   \                     ??mbedtls_ssl_md_alg_from_hash_6: (+1)
   \       0x20   0x2007             MOVS     R0,#+7
   \       0x22   0x4770             BX       LR
   9307                  case MBEDTLS_SSL_HASH_SHA512:
   9308                      return( MBEDTLS_MD_SHA512 );
   \                     ??mbedtls_ssl_md_alg_from_hash_7: (+1)
   \       0x24   0x2008             MOVS     R0,#+8
   \       0x26   0x4770             BX       LR
   9309          #endif
   9310                  default:
   9311                      return( MBEDTLS_MD_NONE );
   \                     ??mbedtls_ssl_md_alg_from_hash_1: (+1)
   \       0x28   0x2000             MOVS     R0,#+0
   \       0x2A   0x4770             BX       LR               ;; return
   9312              }
   9313          }
   9314          
   9315          /*
   9316           * Convert from MBEDTLS_MD_XXX to MBEDTLS_SSL_HASH_XXX
   9317           */

   \                                 In section .text, align 4, keep-with-next
   9318          unsigned char mbedtls_ssl_hash_from_md_alg( int md )
   9319          {
   9320              switch( md )
   \                     mbedtls_ssl_hash_from_md_alg: (+1)
   \        0x0   0x1EC0             SUBS     R0,R0,#+3
   \        0x2   0x2805             CMP      R0,#+5
   \        0x4   0xD810             BHI.N    ??mbedtls_ssl_hash_from_md_alg_1
   \        0x6   0xE8DF 0xF000      TBB      [PC, R0]
   \                     ??mbedtls_ssl_hash_from_md_alg_0:
   \        0xA   0x03 0x05          DC8      0x3,0x5,0x7,0x9
   \              0x07 0x09    
   \        0xE   0x0B 0x0D          DC8      0xB,0xD
   9321              {
   9322          #if defined(MBEDTLS_MD5_C)
   9323                  case MBEDTLS_MD_MD5:
   9324                      return( MBEDTLS_SSL_HASH_MD5 );
   \                     ??mbedtls_ssl_hash_from_md_alg_2: (+1)
   \       0x10   0x2001             MOVS     R0,#+1
   \       0x12   0x4770             BX       LR
   9325          #endif
   9326          #if defined(MBEDTLS_SHA1_C)
   9327                  case MBEDTLS_MD_SHA1:
   9328                      return( MBEDTLS_SSL_HASH_SHA1 );
   \                     ??mbedtls_ssl_hash_from_md_alg_3: (+1)
   \       0x14   0x2002             MOVS     R0,#+2
   \       0x16   0x4770             BX       LR
   9329          #endif
   9330          #if defined(MBEDTLS_SHA256_C)
   9331                  case MBEDTLS_MD_SHA224:
   9332                      return( MBEDTLS_SSL_HASH_SHA224 );
   \                     ??mbedtls_ssl_hash_from_md_alg_4: (+1)
   \       0x18   0x2003             MOVS     R0,#+3
   \       0x1A   0x4770             BX       LR
   9333                  case MBEDTLS_MD_SHA256:
   9334                      return( MBEDTLS_SSL_HASH_SHA256 );
   \                     ??mbedtls_ssl_hash_from_md_alg_5: (+1)
   \       0x1C   0x2004             MOVS     R0,#+4
   \       0x1E   0x4770             BX       LR
   9335          #endif
   9336          #if defined(MBEDTLS_SHA512_C)
   9337                  case MBEDTLS_MD_SHA384:
   9338                      return( MBEDTLS_SSL_HASH_SHA384 );
   \                     ??mbedtls_ssl_hash_from_md_alg_6: (+1)
   \       0x20   0x2005             MOVS     R0,#+5
   \       0x22   0x4770             BX       LR
   9339                  case MBEDTLS_MD_SHA512:
   9340                      return( MBEDTLS_SSL_HASH_SHA512 );
   \                     ??mbedtls_ssl_hash_from_md_alg_7: (+1)
   \       0x24   0x2006             MOVS     R0,#+6
   \       0x26   0x4770             BX       LR
   9341          #endif
   9342                  default:
   9343                      return( MBEDTLS_SSL_HASH_NONE );
   \                     ??mbedtls_ssl_hash_from_md_alg_1: (+1)
   \       0x28   0x2000             MOVS     R0,#+0
   \       0x2A   0x4770             BX       LR               ;; return
   9344              }
   9345          }
   9346          
   9347          #if defined(MBEDTLS_ECP_C)
   9348          /*
   9349           * Check if a curve proposed by the peer is in our list.
   9350           * Return 0 if we're willing to use it, -1 otherwise.
   9351           */

   \                                 In section .text, align 2, keep-with-next
   9352          int mbedtls_ssl_check_curve( const mbedtls_ssl_context *ssl, mbedtls_ecp_group_id grp_id )
   9353          {
   9354              const mbedtls_ecp_group_id *gid;
   9355          
   9356              if( ssl->conf->curve_list == NULL )
   \                     mbedtls_ssl_check_curve: (+1)
   \        0x0   0x6802             LDR      R2,[R0, #+0]
   \        0x2   0x6F92             LDR      R2,[R2, #+120]
   \        0x4   0x2A00             CMP      R2,#+0
   \        0x6   0xD009             BEQ.N    ??mbedtls_ssl_check_curve_0
   9357                  return( -1 );
   9358          
   9359              for( gid = ssl->conf->curve_list; *gid != MBEDTLS_ECP_DP_NONE; gid++ )
   \        0x8   0x460B             MOV      R3,R1
   \        0xA   0xE000             B.N      ??mbedtls_ssl_check_curve_1
   \                     ??mbedtls_ssl_check_curve_2: (+1)
   \        0xC   0x1C52             ADDS     R2,R2,#+1
   \                     ??mbedtls_ssl_check_curve_1: (+1)
   \        0xE   0x7810             LDRB     R0,[R2, #+0]
   \       0x10   0x2800             CMP      R0,#+0
   \       0x12   0xD003             BEQ.N    ??mbedtls_ssl_check_curve_0
   9360                  if( *gid == grp_id )
   \       0x14   0x4298             CMP      R0,R3
   \       0x16   0xD1F9             BNE.N    ??mbedtls_ssl_check_curve_2
   9361                      return( 0 );
   \       0x18   0x2000             MOVS     R0,#+0
   \       0x1A   0x4770             BX       LR
   9362          
   9363              return( -1 );
   \                     ??mbedtls_ssl_check_curve_0: (+1)
   \       0x1C   0xF04F 0x30FF      MOV      R0,#-1
   \       0x20   0x4770             BX       LR               ;; return
   9364          }
   9365          #endif /* MBEDTLS_ECP_C */
   9366          
   9367          #if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
   9368          /*
   9369           * Check if a hash proposed by the peer is in our list.
   9370           * Return 0 if we're willing to use it, -1 otherwise.
   9371           */

   \                                 In section .text, align 2, keep-with-next
   9372          int mbedtls_ssl_check_sig_hash( const mbedtls_ssl_context *ssl,
   9373                                          mbedtls_md_type_t md )
   9374          {
   9375              const int *cur;
   9376          
   9377              if( ssl->conf->sig_hashes == NULL )
   \                     mbedtls_ssl_check_sig_hash: (+1)
   \        0x0   0x6802             LDR      R2,[R0, #+0]
   \        0x2   0x6F52             LDR      R2,[R2, #+116]
   \        0x4   0x2A00             CMP      R2,#+0
   \        0x6   0xD009             BEQ.N    ??mbedtls_ssl_check_sig_hash_0
   9378                  return( -1 );
   9379          
   9380              for( cur = ssl->conf->sig_hashes; *cur != MBEDTLS_MD_NONE; cur++ )
   \        0x8   0x460B             MOV      R3,R1
   \        0xA   0xE000             B.N      ??mbedtls_ssl_check_sig_hash_1
   \                     ??mbedtls_ssl_check_sig_hash_2: (+1)
   \        0xC   0x1D12             ADDS     R2,R2,#+4
   \                     ??mbedtls_ssl_check_sig_hash_1: (+1)
   \        0xE   0x6810             LDR      R0,[R2, #+0]
   \       0x10   0x2800             CMP      R0,#+0
   \       0x12   0xD003             BEQ.N    ??mbedtls_ssl_check_sig_hash_0
   9381                  if( *cur == (int) md )
   \       0x14   0x4298             CMP      R0,R3
   \       0x16   0xD1F9             BNE.N    ??mbedtls_ssl_check_sig_hash_2
   9382                      return( 0 );
   \       0x18   0x2000             MOVS     R0,#+0
   \       0x1A   0x4770             BX       LR
   9383          
   9384              return( -1 );
   \                     ??mbedtls_ssl_check_sig_hash_0: (+1)
   \       0x1C   0xF04F 0x30FF      MOV      R0,#-1
   \       0x20   0x4770             BX       LR               ;; return
   9385          }
   9386          #endif /* MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED */
   9387          
   9388          #if defined(MBEDTLS_X509_CRT_PARSE_C)

   \                                 In section .text, align 2, keep-with-next
   9389          int mbedtls_ssl_check_cert_usage( const mbedtls_x509_crt *cert,
   9390                                    const mbedtls_ssl_ciphersuite_t *ciphersuite,
   9391                                    int cert_endpoint,
   9392                                    uint32_t *flags )
   9393          {
   \                     mbedtls_ssl_check_cert_usage: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x4617             MOV      R7,R2
   \        0x6   0x461D             MOV      R5,R3
   9394              int ret = 0;
   \        0x8   0x2600             MOVS     R6,#+0
   9395          #if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
   9396              int usage = 0;
   \        0xA   0x4630             MOV      R0,R6
   9397          #endif
   9398          #if defined(MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE)
   9399              const char *ext_oid;
   9400              size_t ext_len;
   9401          #endif
   9402          
   9403          #if !defined(MBEDTLS_X509_CHECK_KEY_USAGE) &&          \
   9404              !defined(MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE)
   9405              ((void) cert);
   9406              ((void) cert_endpoint);
   9407              ((void) flags);
   9408          #endif
   9409          
   9410          #if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
   9411              if( cert_endpoint == MBEDTLS_SSL_IS_SERVER )
   \        0xC   0x2F01             CMP      R7,#+1
   \        0xE   0xD10F             BNE.N    ??mbedtls_ssl_check_cert_usage_0
   9412              {
   9413                  /* Server part of the key exchange */
   9414                  switch( ciphersuite->key_exchange )
   \       0x10   0x7A89             LDRB     R1,[R1, #+10]
   \       0x12   0x1E49             SUBS     R1,R1,#+1
   \       0x14   0xD008             BEQ.N    ??mbedtls_ssl_check_cert_usage_1
   \       0x16   0x1E49             SUBS     R1,R1,#+1
   \       0x18   0x2902             CMP      R1,#+2
   \       0x1A   0xD909             BLS.N    ??mbedtls_ssl_check_cert_usage_0
   \       0x1C   0x1F49             SUBS     R1,R1,#+5
   \       0x1E   0xD003             BEQ.N    ??mbedtls_ssl_check_cert_usage_1
   \       0x20   0x1E89             SUBS     R1,R1,#+2
   \       0x22   0x2901             CMP      R1,#+1
   \       0x24   0xD902             BLS.N    ??mbedtls_ssl_check_cert_usage_2
   \       0x26   0xE004             B.N      ??mbedtls_ssl_check_cert_usage_3
   9415                  {
   9416                      case MBEDTLS_KEY_EXCHANGE_RSA:
   9417                      case MBEDTLS_KEY_EXCHANGE_RSA_PSK:
   9418                          usage = MBEDTLS_X509_KU_KEY_ENCIPHERMENT;
   \                     ??mbedtls_ssl_check_cert_usage_1: (+1)
   \       0x28   0x2020             MOVS     R0,#+32
   9419                          break;
   \       0x2A   0xE002             B.N      ??mbedtls_ssl_check_cert_usage_3
   9420          
   9421                      case MBEDTLS_KEY_EXCHANGE_DHE_RSA:
   9422                      case MBEDTLS_KEY_EXCHANGE_ECDHE_RSA:
   9423                      case MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA:
   9424                          usage = MBEDTLS_X509_KU_DIGITAL_SIGNATURE;
   9425                          break;
   9426          
   9427                      case MBEDTLS_KEY_EXCHANGE_ECDH_RSA:
   9428                      case MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA:
   9429                          usage = MBEDTLS_X509_KU_KEY_AGREEMENT;
   \                     ??mbedtls_ssl_check_cert_usage_2: (+1)
   \       0x2C   0x2008             MOVS     R0,#+8
   9430                          break;
   \       0x2E   0xE000             B.N      ??mbedtls_ssl_check_cert_usage_3
   9431          
   9432                      /* Don't use default: we want warnings when adding new values */
   9433                      case MBEDTLS_KEY_EXCHANGE_NONE:
   9434                      case MBEDTLS_KEY_EXCHANGE_PSK:
   9435                      case MBEDTLS_KEY_EXCHANGE_DHE_PSK:
   9436                      case MBEDTLS_KEY_EXCHANGE_ECDHE_PSK:
   9437                      case MBEDTLS_KEY_EXCHANGE_ECJPAKE:
   9438                          usage = 0;
   9439                  }
   9440              }
   9441              else
   9442              {
   9443                  /* Client auth: we only implement rsa_sign and mbedtls_ecdsa_sign for now */
   9444                  usage = MBEDTLS_X509_KU_DIGITAL_SIGNATURE;
   \                     ??mbedtls_ssl_check_cert_usage_0: (+1)
   \       0x30   0x2080             MOVS     R0,#+128
   9445              }
   9446          
   9447              if( mbedtls_x509_crt_check_key_usage( cert, usage ) != 0 )
   \                     ??mbedtls_ssl_check_cert_usage_3: (+1)
   \       0x32   0x4601             MOV      R1,R0
   \       0x34   0x4620             MOV      R0,R4
   \       0x36   0x....'....        BL       mbedtls_x509_crt_check_key_usage
   \       0x3A   0x2800             CMP      R0,#+0
   \       0x3C   0xD005             BEQ.N    ??mbedtls_ssl_check_cert_usage_4
   9448              {
   9449                  *flags |= MBEDTLS_X509_BADCERT_KEY_USAGE;
   \       0x3E   0x6828             LDR      R0,[R5, #+0]
   \       0x40   0xF440 0x6000      ORR      R0,R0,#0x800
   \       0x44   0x6028             STR      R0,[R5, #+0]
   9450                  ret = -1;
   \       0x46   0xF04F 0x36FF      MOV      R6,#-1
   9451              }
   9452          #else
   9453              ((void) ciphersuite);
   9454          #endif /* MBEDTLS_X509_CHECK_KEY_USAGE */
   9455          
   9456          #if defined(MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE)
   9457              if( cert_endpoint == MBEDTLS_SSL_IS_SERVER )
   \                     ??mbedtls_ssl_check_cert_usage_4: (+1)
   \       0x4A   0x2F01             CMP      R7,#+1
   \       0x4C   0xD102             BNE.N    ??mbedtls_ssl_check_cert_usage_5
   9458              {
   9459                  ext_oid = MBEDTLS_OID_SERVER_AUTH;
   \       0x4E   0x....'....        LDR.W    R1,??DataTable84_22
   9460                  ext_len = MBEDTLS_OID_SIZE( MBEDTLS_OID_SERVER_AUTH );
   \       0x52   0xE001             B.N      ??mbedtls_ssl_check_cert_usage_6
   9461              }
   9462              else
   9463              {
   9464                  ext_oid = MBEDTLS_OID_CLIENT_AUTH;
   \                     ??mbedtls_ssl_check_cert_usage_5: (+1)
   \       0x54   0x....'....        LDR.W    R1,??DataTable84_23
   9465                  ext_len = MBEDTLS_OID_SIZE( MBEDTLS_OID_CLIENT_AUTH );
   9466              }
   9467          
   9468              if( mbedtls_x509_crt_check_extended_key_usage( cert, ext_oid, ext_len ) != 0 )
   \                     ??mbedtls_ssl_check_cert_usage_6: (+1)
   \       0x58   0x2208             MOVS     R2,#+8
   \       0x5A   0x4620             MOV      R0,R4
   \       0x5C   0x....'....        BL       mbedtls_x509_crt_check_extended_key_usage
   \       0x60   0x2800             CMP      R0,#+0
   \       0x62   0xD005             BEQ.N    ??mbedtls_ssl_check_cert_usage_7
   9469              {
   9470                  *flags |= MBEDTLS_X509_BADCERT_EXT_KEY_USAGE;
   \       0x64   0x6828             LDR      R0,[R5, #+0]
   \       0x66   0xF440 0x5080      ORR      R0,R0,#0x1000
   \       0x6A   0x6028             STR      R0,[R5, #+0]
   9471                  ret = -1;
   \       0x6C   0xF04F 0x36FF      MOV      R6,#-1
   9472              }
   9473          #endif /* MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE */
   9474          
   9475              return( ret );
   \                     ??mbedtls_ssl_check_cert_usage_7: (+1)
   \       0x70   0x4630             MOV      R0,R6
   \       0x72   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
   9476          }
   9477          #endif /* MBEDTLS_X509_CRT_PARSE_C */
   9478          
   9479          /*
   9480           * Convert version numbers to/from wire format
   9481           * and, for DTLS, to/from TLS equivalent.
   9482           *
   9483           * For TLS this is the identity.
   9484           * For DTLS, use 1's complement (v -> 255 - v, and then map as follows:
   9485           * 1.0 <-> 3.2      (DTLS 1.0 is based on TLS 1.1)
   9486           * 1.x <-> 3.x+1    for x != 0 (DTLS 1.2 based on TLS 1.2)
   9487           */

   \                                 In section .text, align 2, keep-with-next
   9488          void mbedtls_ssl_write_version( int major, int minor, int transport,
   9489                                  unsigned char ver[2] )
   9490          {
   9491          #if defined(MBEDTLS_SSL_PROTO_DTLS)
   9492              if( transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
   \                     mbedtls_ssl_write_version: (+1)
   \        0x0   0x2A01             CMP      R2,#+1
   \        0x2   0xD108             BNE.N    ??mbedtls_ssl_write_version_0
   9493              {
   9494                  if( minor == MBEDTLS_SSL_MINOR_VERSION_2 )
   \        0x4   0x2902             CMP      R1,#+2
   \        0x6   0xD100             BNE.N    ??mbedtls_ssl_write_version_1
   9495                      --minor; /* DTLS 1.0 stored as TLS 1.1 internally */
   \        0x8   0x2101             MOVS     R1,#+1
   9496          
   9497                  ver[0] = (unsigned char)( 255 - ( major - 2 ) );
   \                     ??mbedtls_ssl_write_version_1: (+1)
   \        0xA   0xF1C0 0x0001      RSB      R0,R0,#+1
   \        0xE   0x7018             STRB     R0,[R3, #+0]
   9498                  ver[1] = (unsigned char)( 255 - ( minor - 1 ) );
   \       0x10   0x4249             RSBS     R1,R1,#+0
   \       0x12   0x7059             STRB     R1,[R3, #+1]
   \       0x14   0x4770             BX       LR
   9499              }
   9500              else
   9501          #else
   9502              ((void) transport);
   9503          #endif
   9504              {
   9505                  ver[0] = (unsigned char) major;
   \                     ??mbedtls_ssl_write_version_0: (+1)
   \       0x16   0x7018             STRB     R0,[R3, #+0]
   9506                  ver[1] = (unsigned char) minor;
   \       0x18   0x7059             STRB     R1,[R3, #+1]
   9507              }
   9508          }
   \       0x1A   0x4770             BX       LR               ;; return
   9509          

   \                                 In section .text, align 2, keep-with-next
   9510          void mbedtls_ssl_read_version( int *major, int *minor, int transport,
   9511                                 const unsigned char ver[2] )
   9512          {
   \                     mbedtls_ssl_read_version: (+1)
   \        0x0   0xB410             PUSH     {R4}
   9513          #if defined(MBEDTLS_SSL_PROTO_DTLS)
   9514              if( transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
   \        0x2   0x2A01             CMP      R2,#+1
   \        0x4   0xD10D             BNE.N    ??mbedtls_ssl_read_version_0
   9515              {
   9516                  *major = 255 - ver[0] + 2;
   \        0x6   0xF240 0x1401      MOVW     R4,#+257
   \        0xA   0x781A             LDRB     R2,[R3, #+0]
   \        0xC   0x1AA4             SUBS     R4,R4,R2
   \        0xE   0x6004             STR      R4,[R0, #+0]
   9517                  *minor = 255 - ver[1] + 1;
   \       0x10   0x7858             LDRB     R0,[R3, #+1]
   \       0x12   0xF5C0 0x7080      RSB      R0,R0,#+256
   \       0x16   0x6008             STR      R0,[R1, #+0]
   9518          
   9519                  if( *minor == MBEDTLS_SSL_MINOR_VERSION_1 )
   \       0x18   0x2801             CMP      R0,#+1
   \       0x1A   0xD106             BNE.N    ??mbedtls_ssl_read_version_1
   9520                      ++*minor; /* DTLS 1.0 stored as TLS 1.1 internally */
   \       0x1C   0x1C40             ADDS     R0,R0,#+1
   \       0x1E   0x6008             STR      R0,[R1, #+0]
   \       0x20   0xE003             B.N      ??mbedtls_ssl_read_version_1
   9521              }
   9522              else
   9523          #else
   9524              ((void) transport);
   9525          #endif
   9526              {
   9527                  *major = ver[0];
   \                     ??mbedtls_ssl_read_version_0: (+1)
   \       0x22   0x781A             LDRB     R2,[R3, #+0]
   \       0x24   0x6002             STR      R2,[R0, #+0]
   9528                  *minor = ver[1];
   \       0x26   0x7858             LDRB     R0,[R3, #+1]
   \       0x28   0x6008             STR      R0,[R1, #+0]
   9529              }
   9530          }
   \                     ??mbedtls_ssl_read_version_1: (+1)
   \       0x2A   0xBC10             POP      {R4}
   \       0x2C   0x4770             BX       LR               ;; return
   9531          

   \                                 In section .text, align 2, keep-with-next
   9532          int mbedtls_ssl_set_calc_verify_md( mbedtls_ssl_context *ssl, int md )
   9533          {
   9534          #if defined(MBEDTLS_SSL_PROTO_TLS1_2)
   9535              if( ssl->minor_ver != MBEDTLS_SSL_MINOR_VERSION_3 )
   \                     mbedtls_ssl_set_calc_verify_md: (+1)
   \        0x0   0x6942             LDR      R2,[R0, #+20]
   \        0x2   0x2A03             CMP      R2,#+3
   \        0x4   0xD116             BNE.N    ??mbedtls_ssl_set_calc_verify_md_0
   9536                  return MBEDTLS_ERR_SSL_INVALID_VERIFY_HASH;
   9537          
   9538              switch( md )
   \        0x6   0x2902             CMP      R1,#+2
   \        0x8   0xD004             BEQ.N    ??mbedtls_ssl_set_calc_verify_md_1
   \        0xA   0x2904             CMP      R1,#+4
   \        0xC   0xD00D             BEQ.N    ??mbedtls_ssl_set_calc_verify_md_2
   \        0xE   0x2905             CMP      R1,#+5
   \       0x10   0xD006             BEQ.N    ??mbedtls_ssl_set_calc_verify_md_3
   \       0x12   0xE00F             B.N      ??mbedtls_ssl_set_calc_verify_md_0
   9539              {
   9540          #if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1)
   9541          #if defined(MBEDTLS_MD5_C)
   9542                  case MBEDTLS_SSL_HASH_MD5:
   9543                      return MBEDTLS_ERR_SSL_INVALID_VERIFY_HASH;
   9544          #endif
   9545          #if defined(MBEDTLS_SHA1_C)
   9546                  case MBEDTLS_SSL_HASH_SHA1:
   9547                      ssl->handshake->calc_verify = ssl_calc_verify_tls;
   \                     ??mbedtls_ssl_set_calc_verify_md_1: (+1)
   \       0x14   0x....             LDR.N    R1,??DataTable84_24
   \       0x16   0x6BC0             LDR      R0,[R0, #+60]
   \       0x18   0xF8C0 0x144C      STR      R1,[R0, #+1100]
   9548                      break;
   9549          #endif
   9550          #endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 */
   9551          #if defined(MBEDTLS_SHA512_C)
   9552                  case MBEDTLS_SSL_HASH_SHA384:
   9553                      ssl->handshake->calc_verify = ssl_calc_verify_tls_sha384;
   9554                      break;
   9555          #endif
   9556          #if defined(MBEDTLS_SHA256_C)
   9557                  case MBEDTLS_SSL_HASH_SHA256:
   9558                      ssl->handshake->calc_verify = ssl_calc_verify_tls_sha256;
   9559                      break;
   9560          #endif
   9561                  default:
   9562                      return MBEDTLS_ERR_SSL_INVALID_VERIFY_HASH;
   9563              }
   9564          
   9565              return 0;
   \                     ??mbedtls_ssl_set_calc_verify_md_4: (+1)
   \       0x1C   0x2000             MOVS     R0,#+0
   \       0x1E   0x4770             BX       LR               ;; return
   \                     ??mbedtls_ssl_set_calc_verify_md_3: (+1)
   \       0x20   0x....             LDR.N    R1,??DataTable84_25
   \       0x22   0x6BC0             LDR      R0,[R0, #+60]
   \       0x24   0xF8C0 0x144C      STR      R1,[R0, #+1100]
   \       0x28   0xE7F8             B.N      ??mbedtls_ssl_set_calc_verify_md_4
   \                     ??mbedtls_ssl_set_calc_verify_md_2: (+1)
   \       0x2A   0x....             LDR.N    R1,??DataTable84_26
   \       0x2C   0x6BC0             LDR      R0,[R0, #+60]
   \       0x2E   0xF8C0 0x144C      STR      R1,[R0, #+1100]
   \       0x32   0xE7F3             B.N      ??mbedtls_ssl_set_calc_verify_md_4
   \                     ??mbedtls_ssl_set_calc_verify_md_0: (+1)
   \       0x34   0x....             LDR.N    R0,??DataTable84_27  ;; 0xffff9a00
   \       0x36   0x4770             BX       LR
   9566          #else /* !MBEDTLS_SSL_PROTO_TLS1_2 */
   9567              (void) ssl;
   9568              (void) md;
   9569          
   9570              return MBEDTLS_ERR_SSL_INVALID_VERIFY_HASH;
   9571          #endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
   9572          }
   9573          
   9574          #if defined(MBEDTLS_SSL_PROTO_SSL3) || defined(MBEDTLS_SSL_PROTO_TLS1) || \
   9575              defined(MBEDTLS_SSL_PROTO_TLS1_1)

   \                                 In section .text, align 2, keep-with-next
   9576          int mbedtls_ssl_get_key_exchange_md_ssl_tls( mbedtls_ssl_context *ssl,
   9577                                                  unsigned char *output,
   9578                                                  unsigned char *data, size_t data_len )
   9579          {
   \                     mbedtls_ssl_get_key_exchange_md_ssl_tls: (+1)
   \        0x0   0xE92D 0x41F8      PUSH     {R3-R8,LR}
   \        0x4   0xB0AF             SUB      SP,SP,#+188
   \        0x6   0x4605             MOV      R5,R0
   \        0x8   0x460E             MOV      R6,R1
   \        0xA   0x4617             MOV      R7,R2
   \        0xC   0x4698             MOV      R8,R3
   9580              int ret = 0;
   9581              mbedtls_md5_context mbedtls_md5;
   9582              mbedtls_sha1_context mbedtls_sha1;
   9583          
   9584              mbedtls_md5_init( &mbedtls_md5 );
   \        0xE   0xA819             ADD      R0,SP,#+100
   \       0x10   0x....'....        BL       mbedtls_md5_init
   9585              mbedtls_sha1_init( &mbedtls_sha1 );
   \       0x14   0xA802             ADD      R0,SP,#+8
   \       0x16   0x....'....        BL       mbedtls_sha1_init
   9586          
   9587              /*
   9588               * digitally-signed struct {
   9589               *     opaque md5_hash[16];
   9590               *     opaque sha_hash[20];
   9591               * };
   9592               *
   9593               * md5_hash
   9594               *     MD5(ClientHello.random + ServerHello.random
   9595               *                            + ServerParams);
   9596               * sha_hash
   9597               *     SHA(ClientHello.random + ServerHello.random
   9598               *                            + ServerParams);
   9599               */
   9600              if( ( ret = mbedtls_md5_starts_ret( &mbedtls_md5 ) ) != 0 )
   \       0x1A   0xA819             ADD      R0,SP,#+100
   \       0x1C   0x....'....        BL       mbedtls_md5_starts_ret
   \       0x20   0x0004             MOVS     R4,R0
   \       0x22   0xD00A             BEQ.N    ??mbedtls_ssl_get_key_exchange_md_ssl_tls_0
   9601              {
   9602                  MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md5_starts_ret", ret );
   \       0x24   0x9401             STR      R4,[SP, #+4]
   \       0x26   0x....             LDR.N    R0,??DataTable84_28
   \       0x28   0x9000             STR      R0,[SP, #+0]
   \       0x2A   0xF242 0x5382      MOVW     R3,#+9602
   \       0x2E   0x....             LDR.N    R2,??DataTable84_29
   \       0x30   0x2101             MOVS     R1,#+1
   \       0x32   0x4628             MOV      R0,R5
   \       0x34   0x....'....        BL       mbedtls_debug_print_ret
   9603                  goto exit;
   \       0x38   0xE07D             B.N      ??mbedtls_ssl_get_key_exchange_md_ssl_tls_1
   9604              }
   9605              if( ( ret = mbedtls_md5_update_ret( &mbedtls_md5,
   9606                                                  ssl->handshake->randbytes, 64 ) ) != 0 )
   \                     ??mbedtls_ssl_get_key_exchange_md_ssl_tls_0: (+1)
   \       0x3A   0x2240             MOVS     R2,#+64
   \       0x3C   0x6BE8             LDR      R0,[R5, #+60]
   \       0x3E   0xF200 0x415C      ADDW     R1,R0,#+1116
   \       0x42   0xA819             ADD      R0,SP,#+100
   \       0x44   0x....'....        BL       mbedtls_md5_update_ret
   \       0x48   0x0004             MOVS     R4,R0
   \       0x4A   0xD00A             BEQ.N    ??mbedtls_ssl_get_key_exchange_md_ssl_tls_2
   9607              {
   9608                  MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md5_update_ret", ret );
   \       0x4C   0x9401             STR      R4,[SP, #+4]
   \       0x4E   0x....             LDR.N    R0,??DataTable84_30
   \       0x50   0x9000             STR      R0,[SP, #+0]
   \       0x52   0xF242 0x5388      MOVW     R3,#+9608
   \       0x56   0x....             LDR.N    R2,??DataTable84_29
   \       0x58   0x2101             MOVS     R1,#+1
   \       0x5A   0x4628             MOV      R0,R5
   \       0x5C   0x....'....        BL       mbedtls_debug_print_ret
   9609                  goto exit;
   \       0x60   0xE069             B.N      ??mbedtls_ssl_get_key_exchange_md_ssl_tls_1
   9610              }
   9611              if( ( ret = mbedtls_md5_update_ret( &mbedtls_md5, data, data_len ) ) != 0 )
   \                     ??mbedtls_ssl_get_key_exchange_md_ssl_tls_2: (+1)
   \       0x62   0x4642             MOV      R2,R8
   \       0x64   0x4639             MOV      R1,R7
   \       0x66   0xA819             ADD      R0,SP,#+100
   \       0x68   0x....'....        BL       mbedtls_md5_update_ret
   \       0x6C   0x0004             MOVS     R4,R0
   \       0x6E   0xD00A             BEQ.N    ??mbedtls_ssl_get_key_exchange_md_ssl_tls_3
   9612              {
   9613                  MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md5_update_ret", ret );
   \       0x70   0x9401             STR      R4,[SP, #+4]
   \       0x72   0x....             LDR.N    R0,??DataTable84_30
   \       0x74   0x9000             STR      R0,[SP, #+0]
   \       0x76   0xF242 0x538D      MOVW     R3,#+9613
   \       0x7A   0x....             LDR.N    R2,??DataTable84_29
   \       0x7C   0x2101             MOVS     R1,#+1
   \       0x7E   0x4628             MOV      R0,R5
   \       0x80   0x....'....        BL       mbedtls_debug_print_ret
   9614                  goto exit;
   \       0x84   0xE057             B.N      ??mbedtls_ssl_get_key_exchange_md_ssl_tls_1
   9615              }
   9616              if( ( ret = mbedtls_md5_finish_ret( &mbedtls_md5, output ) ) != 0 )
   \                     ??mbedtls_ssl_get_key_exchange_md_ssl_tls_3: (+1)
   \       0x86   0x4631             MOV      R1,R6
   \       0x88   0xA819             ADD      R0,SP,#+100
   \       0x8A   0x....'....        BL       mbedtls_md5_finish_ret
   \       0x8E   0x0004             MOVS     R4,R0
   \       0x90   0xD00A             BEQ.N    ??mbedtls_ssl_get_key_exchange_md_ssl_tls_4
   9617              {
   9618                  MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md5_finish_ret", ret );
   \       0x92   0x9401             STR      R4,[SP, #+4]
   \       0x94   0x....             LDR.N    R0,??DataTable84_31
   \       0x96   0x9000             STR      R0,[SP, #+0]
   \       0x98   0xF242 0x5392      MOVW     R3,#+9618
   \       0x9C   0x....             LDR.N    R2,??DataTable84_29
   \       0x9E   0x2101             MOVS     R1,#+1
   \       0xA0   0x4628             MOV      R0,R5
   \       0xA2   0x....'....        BL       mbedtls_debug_print_ret
   9619                  goto exit;
   \       0xA6   0xE046             B.N      ??mbedtls_ssl_get_key_exchange_md_ssl_tls_1
   9620              }
   9621          
   9622              if( ( ret = mbedtls_sha1_starts_ret( &mbedtls_sha1 ) ) != 0 )
   \                     ??mbedtls_ssl_get_key_exchange_md_ssl_tls_4: (+1)
   \       0xA8   0xA802             ADD      R0,SP,#+8
   \       0xAA   0x....'....        BL       mbedtls_sha1_starts_ret
   \       0xAE   0x0004             MOVS     R4,R0
   \       0xB0   0xD00A             BEQ.N    ??mbedtls_ssl_get_key_exchange_md_ssl_tls_5
   9623              {
   9624                  MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_sha1_starts_ret", ret );
   \       0xB2   0x9401             STR      R4,[SP, #+4]
   \       0xB4   0x....             LDR.N    R0,??DataTable84_32
   \       0xB6   0x9000             STR      R0,[SP, #+0]
   \       0xB8   0xF242 0x5398      MOVW     R3,#+9624
   \       0xBC   0x....             LDR.N    R2,??DataTable84_29
   \       0xBE   0x2101             MOVS     R1,#+1
   \       0xC0   0x4628             MOV      R0,R5
   \       0xC2   0x....'....        BL       mbedtls_debug_print_ret
   9625                  goto exit;
   \       0xC6   0xE036             B.N      ??mbedtls_ssl_get_key_exchange_md_ssl_tls_1
   9626              }
   9627              if( ( ret = mbedtls_sha1_update_ret( &mbedtls_sha1,
   9628                                                   ssl->handshake->randbytes, 64 ) ) != 0 )
   \                     ??mbedtls_ssl_get_key_exchange_md_ssl_tls_5: (+1)
   \       0xC8   0x2240             MOVS     R2,#+64
   \       0xCA   0x6BE8             LDR      R0,[R5, #+60]
   \       0xCC   0xF200 0x415C      ADDW     R1,R0,#+1116
   \       0xD0   0xA802             ADD      R0,SP,#+8
   \       0xD2   0x....'....        BL       mbedtls_sha1_update_ret
   \       0xD6   0x0004             MOVS     R4,R0
   \       0xD8   0xD00A             BEQ.N    ??mbedtls_ssl_get_key_exchange_md_ssl_tls_6
   9629              {
   9630                  MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_sha1_update_ret", ret );
   \       0xDA   0x9401             STR      R4,[SP, #+4]
   \       0xDC   0x....             LDR.N    R0,??DataTable84_33
   \       0xDE   0x9000             STR      R0,[SP, #+0]
   \       0xE0   0xF242 0x539E      MOVW     R3,#+9630
   \       0xE4   0x....             LDR.N    R2,??DataTable84_29
   \       0xE6   0x2101             MOVS     R1,#+1
   \       0xE8   0x4628             MOV      R0,R5
   \       0xEA   0x....'....        BL       mbedtls_debug_print_ret
   9631                  goto exit;
   \       0xEE   0xE022             B.N      ??mbedtls_ssl_get_key_exchange_md_ssl_tls_1
   9632              }
   9633              if( ( ret = mbedtls_sha1_update_ret( &mbedtls_sha1, data,
   9634                                                   data_len ) ) != 0 )
   \                     ??mbedtls_ssl_get_key_exchange_md_ssl_tls_6: (+1)
   \       0xF0   0x4642             MOV      R2,R8
   \       0xF2   0x4639             MOV      R1,R7
   \       0xF4   0xA802             ADD      R0,SP,#+8
   \       0xF6   0x....'....        BL       mbedtls_sha1_update_ret
   \       0xFA   0x0004             MOVS     R4,R0
   \       0xFC   0xD00A             BEQ.N    ??mbedtls_ssl_get_key_exchange_md_ssl_tls_7
   9635              {
   9636                  MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_sha1_update_ret", ret );
   \       0xFE   0x9401             STR      R4,[SP, #+4]
   \      0x100   0x....             LDR.N    R0,??DataTable84_33
   \      0x102   0x9000             STR      R0,[SP, #+0]
   \      0x104   0xF242 0x53A4      MOVW     R3,#+9636
   \      0x108   0x....             LDR.N    R2,??DataTable84_29
   \      0x10A   0x2101             MOVS     R1,#+1
   \      0x10C   0x4628             MOV      R0,R5
   \      0x10E   0x....'....        BL       mbedtls_debug_print_ret
   9637                  goto exit;
   \      0x112   0xE010             B.N      ??mbedtls_ssl_get_key_exchange_md_ssl_tls_1
   9638              }
   9639              if( ( ret = mbedtls_sha1_finish_ret( &mbedtls_sha1,
   9640                                                   output + 16 ) ) != 0 )
   \                     ??mbedtls_ssl_get_key_exchange_md_ssl_tls_7: (+1)
   \      0x114   0xF106 0x0110      ADD      R1,R6,#+16
   \      0x118   0xA802             ADD      R0,SP,#+8
   \      0x11A   0x....'....        BL       mbedtls_sha1_finish_ret
   \      0x11E   0x0004             MOVS     R4,R0
   \      0x120   0xD009             BEQ.N    ??mbedtls_ssl_get_key_exchange_md_ssl_tls_1
   9641              {
   9642                  MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_sha1_finish_ret", ret );
   \      0x122   0x9401             STR      R4,[SP, #+4]
   \      0x124   0x....             LDR.N    R0,??DataTable84_34
   \      0x126   0x9000             STR      R0,[SP, #+0]
   \      0x128   0xF242 0x53AA      MOVW     R3,#+9642
   \      0x12C   0x....             LDR.N    R2,??DataTable84_29
   \      0x12E   0x2101             MOVS     R1,#+1
   \      0x130   0x4628             MOV      R0,R5
   \      0x132   0x....'....        BL       mbedtls_debug_print_ret
   9643                  goto exit;
   9644              }
   9645          
   9646          exit:
   9647              mbedtls_md5_free( &mbedtls_md5 );
   \                     ??mbedtls_ssl_get_key_exchange_md_ssl_tls_1: (+1)
   \      0x136   0xA819             ADD      R0,SP,#+100
   \      0x138   0x....'....        BL       mbedtls_md5_free
   9648              mbedtls_sha1_free( &mbedtls_sha1 );
   \      0x13C   0xA802             ADD      R0,SP,#+8
   \      0x13E   0x....'....        BL       mbedtls_sha1_free
   9649          
   9650              if( ret != 0 )
   \      0x142   0x2C00             CMP      R4,#+0
   \      0x144   0xD004             BEQ.N    ??mbedtls_ssl_get_key_exchange_md_ssl_tls_8
   9651                  mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   9652                                                  MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
   \      0x146   0x2250             MOVS     R2,#+80
   \      0x148   0x2102             MOVS     R1,#+2
   \      0x14A   0x4628             MOV      R0,R5
   \      0x14C   0x....'....        BL       mbedtls_ssl_send_alert_message
   9653          
   9654              return( ret );
   \                     ??mbedtls_ssl_get_key_exchange_md_ssl_tls_8: (+1)
   \      0x150   0x4620             MOV      R0,R4
   \      0x152   0xB030             ADD      SP,SP,#+192
   \      0x154   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   9655          
   9656          }
   9657          #endif /* MBEDTLS_SSL_PROTO_SSL3 || MBEDTLS_SSL_PROTO_TLS1 || \
   9658                    MBEDTLS_SSL_PROTO_TLS1_1 */
   9659          
   9660          #if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
   9661              defined(MBEDTLS_SSL_PROTO_TLS1_2)

   \                                 In section .text, align 2, keep-with-next
   9662          int mbedtls_ssl_get_key_exchange_md_tls1_2( mbedtls_ssl_context *ssl,
   9663                                                      unsigned char *hash, size_t *hashlen,
   9664                                                      unsigned char *data, size_t data_len,
   9665                                                      mbedtls_md_type_t md_alg )
   9666          {
   \                     mbedtls_ssl_get_key_exchange_md_tls1_2: (+1)
   \        0x0   0xE92D 0x41F8      PUSH     {R3-R8,LR}
   \        0x4   0xB085             SUB      SP,SP,#+20
   \        0x6   0x4605             MOV      R5,R0
   \        0x8   0x460E             MOV      R6,R1
   \        0xA   0x4614             MOV      R4,R2
   \        0xC   0x461F             MOV      R7,R3
   \        0xE   0x980D             LDR      R0,[SP, #+52]
   9667              int ret = 0;
   9668              mbedtls_md_context_t ctx;
   9669              const mbedtls_md_info_t *md_info = mbedtls_md_info_from_type( md_alg );
   \       0x10   0x....'....        BL       mbedtls_md_info_from_type
   \       0x14   0x4680             MOV      R8,R0
   9670              *hashlen = mbedtls_md_get_size( md_info );
   \       0x16   0x....'....        BL       mbedtls_md_get_size
   \       0x1A   0x6020             STR      R0,[R4, #+0]
   9671          
   9672              mbedtls_md_init( &ctx );
   \       0x1C   0xA802             ADD      R0,SP,#+8
   \       0x1E   0x....'....        BL       mbedtls_md_init
   9673          
   9674              /*
   9675               * digitally-signed struct {
   9676               *     opaque client_random[32];
   9677               *     opaque server_random[32];
   9678               *     ServerDHParams params;
   9679               * };
   9680               */
   9681              if( ( ret = mbedtls_md_setup( &ctx, md_info, 0 ) ) != 0 )
   \       0x22   0x2200             MOVS     R2,#+0
   \       0x24   0x4641             MOV      R1,R8
   \       0x26   0xA802             ADD      R0,SP,#+8
   \       0x28   0x....'....        BL       mbedtls_md_setup
   \       0x2C   0x0004             MOVS     R4,R0
   \       0x2E   0xD00A             BEQ.N    ??mbedtls_ssl_get_key_exchange_md_tls1_2_0
   9682              {
   9683                  MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_setup", ret );
   \       0x30   0x9401             STR      R4,[SP, #+4]
   \       0x32   0x....             LDR.N    R0,??DataTable84_35
   \       0x34   0x9000             STR      R0,[SP, #+0]
   \       0x36   0xF242 0x53D3      MOVW     R3,#+9683
   \       0x3A   0x....             LDR.N    R2,??DataTable84_29
   \       0x3C   0x2101             MOVS     R1,#+1
   \       0x3E   0x4628             MOV      R0,R5
   \       0x40   0x....'....        BL       mbedtls_debug_print_ret
   9684                  goto exit;
   \       0x44   0xE045             B.N      ??mbedtls_ssl_get_key_exchange_md_tls1_2_1
   9685              }
   9686              if( ( ret = mbedtls_md_starts( &ctx ) ) != 0 )
   \                     ??mbedtls_ssl_get_key_exchange_md_tls1_2_0: (+1)
   \       0x46   0xA802             ADD      R0,SP,#+8
   \       0x48   0x....'....        BL       mbedtls_md_starts
   \       0x4C   0x0004             MOVS     R4,R0
   \       0x4E   0xD00A             BEQ.N    ??mbedtls_ssl_get_key_exchange_md_tls1_2_2
   9687              {
   9688                  MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_starts", ret );
   \       0x50   0x9401             STR      R4,[SP, #+4]
   \       0x52   0x....             LDR.N    R0,??DataTable84_36
   \       0x54   0x9000             STR      R0,[SP, #+0]
   \       0x56   0xF242 0x53D8      MOVW     R3,#+9688
   \       0x5A   0x....             LDR.N    R2,??DataTable84_29
   \       0x5C   0x2101             MOVS     R1,#+1
   \       0x5E   0x4628             MOV      R0,R5
   \       0x60   0x....'....        BL       mbedtls_debug_print_ret
   9689                  goto exit;
   \       0x64   0xE035             B.N      ??mbedtls_ssl_get_key_exchange_md_tls1_2_1
   9690              }
   9691              if( ( ret = mbedtls_md_update( &ctx, ssl->handshake->randbytes, 64 ) ) != 0 )
   \                     ??mbedtls_ssl_get_key_exchange_md_tls1_2_2: (+1)
   \       0x66   0x2240             MOVS     R2,#+64
   \       0x68   0x6BE8             LDR      R0,[R5, #+60]
   \       0x6A   0xF200 0x415C      ADDW     R1,R0,#+1116
   \       0x6E   0xA802             ADD      R0,SP,#+8
   \       0x70   0x....'....        BL       mbedtls_md_update
   \       0x74   0x0004             MOVS     R4,R0
   \       0x76   0xD00A             BEQ.N    ??mbedtls_ssl_get_key_exchange_md_tls1_2_3
   9692              {
   9693                  MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_update", ret );
   \       0x78   0x9401             STR      R4,[SP, #+4]
   \       0x7A   0x....             LDR.N    R0,??DataTable84_37
   \       0x7C   0x9000             STR      R0,[SP, #+0]
   \       0x7E   0xF242 0x53DD      MOVW     R3,#+9693
   \       0x82   0x....             LDR.N    R2,??DataTable84_29
   \       0x84   0x2101             MOVS     R1,#+1
   \       0x86   0x4628             MOV      R0,R5
   \       0x88   0x....'....        BL       mbedtls_debug_print_ret
   9694                  goto exit;
   \       0x8C   0xE021             B.N      ??mbedtls_ssl_get_key_exchange_md_tls1_2_1
   9695              }
   \                     ??mbedtls_ssl_get_key_exchange_md_tls1_2_3: (+1)
   \       0x8E   0x9A0C             LDR      R2,[SP, #+48]
   9696              if( ( ret = mbedtls_md_update( &ctx, data, data_len ) ) != 0 )
   \       0x90   0x4639             MOV      R1,R7
   \       0x92   0xA802             ADD      R0,SP,#+8
   \       0x94   0x....'....        BL       mbedtls_md_update
   \       0x98   0x0004             MOVS     R4,R0
   \       0x9A   0xD00A             BEQ.N    ??mbedtls_ssl_get_key_exchange_md_tls1_2_4
   9697              {
   9698                  MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_update", ret );
   \       0x9C   0x9401             STR      R4,[SP, #+4]
   \       0x9E   0x....             LDR.N    R0,??DataTable84_37
   \       0xA0   0x9000             STR      R0,[SP, #+0]
   \       0xA2   0xF242 0x53E2      MOVW     R3,#+9698
   \       0xA6   0x....             LDR.N    R2,??DataTable84_29
   \       0xA8   0x2101             MOVS     R1,#+1
   \       0xAA   0x4628             MOV      R0,R5
   \       0xAC   0x....'....        BL       mbedtls_debug_print_ret
   9699                  goto exit;
   \       0xB0   0xE00F             B.N      ??mbedtls_ssl_get_key_exchange_md_tls1_2_1
   9700              }
   9701              if( ( ret = mbedtls_md_finish( &ctx, hash ) ) != 0 )
   \                     ??mbedtls_ssl_get_key_exchange_md_tls1_2_4: (+1)
   \       0xB2   0x4631             MOV      R1,R6
   \       0xB4   0xA802             ADD      R0,SP,#+8
   \       0xB6   0x....'....        BL       mbedtls_md_finish
   \       0xBA   0x0004             MOVS     R4,R0
   \       0xBC   0xD009             BEQ.N    ??mbedtls_ssl_get_key_exchange_md_tls1_2_1
   9702              {
   9703                  MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_finish", ret );
   \       0xBE   0x9401             STR      R4,[SP, #+4]
   \       0xC0   0x....             LDR.N    R0,??DataTable84_38
   \       0xC2   0x9000             STR      R0,[SP, #+0]
   \       0xC4   0xF242 0x53E7      MOVW     R3,#+9703
   \       0xC8   0x....             LDR.N    R2,??DataTable84_29
   \       0xCA   0x2101             MOVS     R1,#+1
   \       0xCC   0x4628             MOV      R0,R5
   \       0xCE   0x....'....        BL       mbedtls_debug_print_ret
   9704                  goto exit;
   9705              }
   9706          
   9707          exit:
   9708              mbedtls_md_free( &ctx );
   \                     ??mbedtls_ssl_get_key_exchange_md_tls1_2_1: (+1)
   \       0xD2   0xA802             ADD      R0,SP,#+8
   \       0xD4   0x....'....        BL       mbedtls_md_free
   9709          
   9710              if( ret != 0 )
   \       0xD8   0x2C00             CMP      R4,#+0
   \       0xDA   0xD004             BEQ.N    ??mbedtls_ssl_get_key_exchange_md_tls1_2_5
   9711                  mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
   9712                                                  MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
   \       0xDC   0x2250             MOVS     R2,#+80
   \       0xDE   0x2102             MOVS     R1,#+2
   \       0xE0   0x4628             MOV      R0,R5
   \       0xE2   0x....'....        BL       mbedtls_ssl_send_alert_message
   9713          
   9714              return( ret );
   \                     ??mbedtls_ssl_get_key_exchange_md_tls1_2_5: (+1)
   \       0xE6   0x4620             MOV      R0,R4
   \       0xE8   0xB006             ADD      SP,SP,#+24
   \       0xEA   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   9715          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \        0x0   0x....'....        DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_1:
   \        0x0   0x....'....        DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_1:
   \        0x0   0xFFFF'9400        DC32     0xffff9400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_2:
   \        0x0   0x....'....        DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_3:
   \        0x0   0xFFFF'8F00        DC32     0xffff8f00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13:
   \        0x0   0xFFFF'8100        DC32     0xffff8100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_1:
   \        0x0   0xFFFF'9400        DC32     0xffff9400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_2:
   \        0x0   0x....'....        DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_3:
   \        0x0   0x....'....        DC32     ?_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_4:
   \        0x0   0x....'....        DC32     ?_6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_5:
   \        0x0   0x....'....        DC32     tls1_prf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_6:
   \        0x0   0x....'....        DC32     ssl_calc_verify_tls

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_7:
   \        0x0   0x....'....        DC32     ssl_calc_finished_tls

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_8:
   \        0x0   0x....'....        DC32     ?_8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_9:
   \        0x0   0x....'....        DC32     ?_9

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_10:
   \        0x0   0x....'....        DC32     tls_prf_sha384

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_11:
   \        0x0   0x....'....        DC32     ssl_calc_verify_tls_sha384

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_12:
   \        0x0   0x....'....        DC32     ssl_calc_finished_tls_sha384

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_13:
   \        0x0   0x....'....        DC32     tls_prf_sha256

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_14:
   \        0x0   0x....'....        DC32     ssl_calc_verify_tls_sha256

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_15:
   \        0x0   0x....'....        DC32     ssl_calc_finished_tls_sha256

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_16:
   \        0x0   0x....'....        DC32     ?_7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_17:
   \        0x0   0x....'....        DC32     ?_10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_18:
   \        0x0   0x....'....        DC32     ?_11

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_19:
   \        0x0   0x....'....        DC32     ?_13

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_20:
   \        0x0   0x....'....        DC32     ?_14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_21:
   \        0x0   0x....'....        DC32     ?_15

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_22:
   \        0x0   0x....'....        DC32     ?_16

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_23:
   \        0x0   0x....'....        DC32     ?_17

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_24:
   \        0x0   0x....'....        DC32     ?_18

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_25:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14:
   \        0x0   0x....'....        DC32     ?_20

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_1:
   \        0x0   0x....'....        DC32     ?_19

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_2:
   \        0x0   0x....'....        DC32     ?_21

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_3:
   \        0x0   0x....'....        DC32     ?_22

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_4:
   \        0x0   0x....'....        DC32     ?_23

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_5:
   \        0x0   0x....'....        DC32     ?_24

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_6:
   \        0x0   0x....'....        DC32     ?_25

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_7:
   \        0x0   0x....'....        DC32     ?_26

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_8:
   \        0x0   0x....'....        DC32     ?_27

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_9:
   \        0x0   0x....'....        DC32     ?_28

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_10:
   \        0x0   0x....'....        DC32     ?_29

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_11:
   \        0x0   0xFFFF'8F00        DC32     0xffff8f00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_12:
   \        0x0   0x....'....        DC32     ?_30

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_13:
   \        0x0   0x....'....        DC32     ?_31

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_14:
   \        0x0   0x....'....        DC32     ?_32

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_15:
   \        0x0   0x....'....        DC32     ?_33

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_16:
   \        0x0   0xFFFF'9400        DC32     0xffff9400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_17:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_18:
   \        0x0   0x....'....        DC32     ?_34

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_19:
   \        0x0   0x....'....        DC32     ?_7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_20:
   \        0x0   0x....'....        DC32     ?_35

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15:
   \        0x0   0x....'....        DC32     ?_36

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16:
   \        0x0   0x....'....        DC32     ?_37

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_1:
   \        0x0   0x....'....        DC32     ?_38

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_2:
   \        0x0   0x....'....        DC32     ?_39

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_3:
   \        0x0   0x....'....        DC32     ?_40

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_4:
   \        0x0   0x....'....        DC32     ?_41

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_5:
   \        0x0   0x....'....        DC32     ?_42

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_6:
   \        0x0   0x....'....        DC32     ?_43

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_7:
   \        0x0   0x....'....        DC32     ?_44

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_8:
   \        0x0   0x....'....        DC32     ?_45

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_9:
   \        0x0   0x....'....        DC32     ?_46

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17:
   \        0x0   0x....'....        DC32     ?_47

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_1:
   \        0x0   0x....'....        DC32     ?_48

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_2:
   \        0x0   0x....'....        DC32     ?_7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_3:
   \        0x0   0x....'....        DC32     ?_49

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_4:
   \        0x0   0xFFFF'8E80        DC32     0xffff8e80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_5:
   \        0x0   0x....'....        DC32     ?_50

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_1:
   \        0x0   0xFFFF'9400        DC32     0xffff9400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_2:
   \        0x0   0x....'....        DC32     ?_51

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_3:
   \        0x0   0x....'....        DC32     ?_52

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_4:
   \        0x0   0x....'....        DC32     ?_53

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20:
   \        0x0   0x....'....        DC32     ?_54

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21:
   \        0x0   0x....'....        DC32     ?_55

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_1:
   \        0x0   0x....'....        DC32     ?_56

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_2:
   \        0x0   0x....'....        DC32     ?_57

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_3:
   \        0x0   0x....'....        DC32     ?_58

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22:
   \        0x0   0x....'....        DC32     ?_59

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_1:
   \        0x0   0xFFFF'8E00        DC32     0xffff8e00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_2:
   \        0x0   0x....'....        DC32     ?_60

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_3:
   \        0x0   0x....'....        DC32     ?_62

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_4:
   \        0x0   0x....'....        DC32     ?_61

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_5:
   \        0x0   0x....'....        DC32     ?_63

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_6:
   \        0x0   0x....'....        DC32     ?_64

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23:
   \        0x0   0xFFFF'9480        DC32     0xffff9480

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_1:
   \        0x0   0x....'....        DC32     ?_65

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_2:
   \        0x0   0xFFFF'8F00        DC32     0xffff8f00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_3:
   \        0x0   0x....'....        DC32     ?_66

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_4:
   \        0x0   0x....'....        DC32     ?_67

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_5:
   \        0x0   0x....'....        DC32     ?_68

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_6:
   \        0x0   0x....'....        DC32     ?_69

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_7:
   \        0x0   0x....'....        DC32     ?_70

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_8:
   \        0x0   0x....'....        DC32     ?_71

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_9:
   \        0x0   0xFFFF'9800        DC32     0xffff9800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_10:
   \        0x0   0x....'....        DC32     ?_72

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_11:
   \        0x0   0x....'....        DC32     ?_73

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_12:
   \        0x0   0x....'....        DC32     ?_74

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_13:
   \        0x0   0x....'....        DC32     ?_75

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_14:
   \        0x0   0x....'....        DC32     ?_76

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_15:
   \        0x0   0xFFFF'9700        DC32     0xffff9700

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24:
   \        0x0   0x....'....        DC32     ?_77

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25:
   \        0x0   0xFFFF'8D80        DC32     0xffff8d80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_1:
   \        0x0   0x....'....        DC32     ?_78

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_2:
   \        0x0   0x....'....        DC32     ?_79

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_3:
   \        0x0   0x....'....        DC32     ?_80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_4:
   \        0x0   0x....'....        DC32     ?_81

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_5:
   \        0x0   0x....'....        DC32     ?_82

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_6:
   \        0x0   0x....'....        DC32     ?_83

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_7:
   \        0x0   0x00 0x00          DC8      0x00, 0x00, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_8:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_9:
   \        0x0   0x....'....        DC32     ?_84

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_10:
   \        0x0   0x....'....        DC32     ?_85

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_11:
   \        0x0   0x....'....        DC32     ?_86

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_12:
   \        0x0   0xFFFF'8100        DC32     0xffff8100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_13:
   \        0x0   0xFFFF'9400        DC32     0xffff9400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26:
   \        0x0   0x....'....        DC32     ?_87

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_1:
   \        0x0   0x....'....        DC32     ?_88

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_2:
   \        0x0   0x....'....        DC32     ?_89

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_3:
   \        0x0   0x....'....        DC32     ?_90

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_4:
   \        0x0   0x....'....        DC32     ?_91

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_5:
   \        0x0   0x....'....        DC32     ?_92

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_6:
   \        0x0   0x....'....        DC32     ?_93

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_7:
   \        0x0   0x....'....        DC32     ?_94

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_8:
   \        0x0   0x....'....        DC32     ?_95

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_9:
   \        0x0   0x....'....        DC32     ?_96

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27:
   \        0x0   0x....'....        DC32     ?_97

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable28:
   \        0x0   0x....'....        DC32     ?_98

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable28_1:
   \        0x0   0x....'....        DC32     ?_99

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable28_2:
   \        0x0   0x....'....        DC32     ?_7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable28_3:
   \        0x0   0x....'....        DC32     ?_100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable28_4:
   \        0x0   0x....'....        DC32     ?_101

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable28_5:
   \        0x0   0x....'....        DC32     ?_102

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable28_6:
   \        0x0   0x....'....        DC32     ?_103

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable29:
   \        0x0   0x....'....        DC32     ?_105

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable29_1:
   \        0x0   0x....'....        DC32     ?_106

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable30:
   \        0x0   0x....'....        DC32     ?_104

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable30_1:
   \        0x0   0x....'....        DC32     ?_107

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable30_2:
   \        0x0   0x....'....        DC32     ?_108

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable30_3:
   \        0x0   0x....'....        DC32     ?_110

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable30_4:
   \        0x0   0x....'....        DC32     ?_111

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable30_5:
   \        0x0   0x....'....        DC32     ?_112

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable30_6:
   \        0x0   0x....'....        DC32     ?_113

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31:
   \        0x0   0x....'....        DC32     ?_109

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_1:
   \        0x0   0xFFFF'9480        DC32     0xffff9480

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable32:
   \        0x0   0x....'....        DC32     ?_115

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable32_1:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable32_2:
   \        0x0   0xFFFF'8E00        DC32     0xffff8e00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable32_3:
   \        0x0   0x....'....        DC32     ?_116

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable32_4:
   \        0x0   0x....'....        DC32     ?_117

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable33:
   \        0x0   0x....'....        DC32     ?_118

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable33_1:
   \        0x0   0xFFFF'9B80        DC32     0xffff9b80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable33_2:
   \        0x0   0x....'....        DC32     ?_119

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable33_3:
   \        0x0   0x....'....        DC32     ?_76

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable33_4:
   \        0x0   0x....'....        DC32     ?_120

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable33_5:
   \        0x0   0xFFFF'9A80        DC32     0xffff9a80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable33_6:
   \        0x0   0x....'....        DC32     ?_121

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable33_7:
   \        0x0   0x....'....        DC32     ?_122

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable33_8:
   \        0x0   0xFFFF'8F80        DC32     0xffff8f80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable33_9:
   \        0x0   0xFFFF'8F00        DC32     0xffff8f00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34:
   \        0x0   0xFFFF'8700        DC32     0xffff8700

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35:
   \        0x0   0xFFFF'9600        DC32     0xffff9600

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_1:
   \        0x0   0xFFFF'9400        DC32     0xffff9400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_2:
   \        0x0   0xFFFF'9580        DC32     0xffff9580

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_3:
   \        0x0   0x....'....        DC32     ?_123

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_4:
   \        0x0   0x....'....        DC32     ?_124

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_5:
   \        0x0   0x....'....        DC32     ?_125

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable36:
   \        0x0   0xFFFF'9880        DC32     0xffff9880

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable36_1:
   \        0x0   0x....'....        DC32     ?_126

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable36_2:
   \        0x0   0x....'....        DC32     ?_127

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable36_3:
   \        0x0   0x....'....        DC32     ?_128

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable36_4:
   \        0x0   0x....'....        DC32     ?_129

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable37:
   \        0x0   0x00 0x00          DC8      "",0x0,0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable37_1:
   \        0x0   0x....'....        DC32     ?_130

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable37_2:
   \        0x0   0x....'....        DC32     ?_131

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable37_3:
   \        0x0   0x....'....        DC32     ?_132

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable37_4:
   \        0x0   0x....'....        DC32     ?_133

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable37_5:
   \        0x0   0xFFFF'9900        DC32     0xffff9900

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable37_6:
   \        0x0   0x....'....        DC32     ?_134

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable37_7:
   \        0x0   0x....'....        DC32     ?_135

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable37_8:
   \        0x0   0x....'....        DC32     ?_136

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable37_9:
   \        0x0   0x....'....        DC32     ?_137

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable38:
   \        0x0   0x....'....        DC32     ?_138

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable38_1:
   \        0x0   0x....'....        DC32     ?_139

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable38_2:
   \        0x0   0x....'....        DC32     ?_140

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable38_3:
   \        0x0   0x....'....        DC32     ?_141

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable38_4:
   \        0x0   0x....'....        DC32     ?_142

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable38_5:
   \        0x0   0x....'....        DC32     ?_144

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable38_6:
   \        0x0   0x....'....        DC32     ?_145

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable39:
   \        0x0   0x....'....        DC32     ?_143

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable39_1:
   \        0x0   0x....'....        DC32     ?_146

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable39_2:
   \        0x0   0x....'....        DC32     ?_149

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable39_3:
   \        0x0   0x....'....        DC32     ?_148

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable39_4:
   \        0x0   0x....'....        DC32     ?_147

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable39_5:
   \        0x0   0x....'....        DC32     ?_150

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable39_6:
   \        0x0   0x....'....        DC32     ?_151

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable40:
   \        0x0   0x....'....        DC32     ?_152

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable40_1:
   \        0x0   0x....'....        DC32     ?_153

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable40_2:
   \        0x0   0x....'....        DC32     ?_7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable40_3:
   \        0x0   0x....'....        DC32     ?_154

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable40_4:
   \        0x0   0x....'....        DC32     ?_155

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable40_5:
   \        0x0   0x....'....        DC32     ?_156

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable40_6:
   \        0x0   0x....'....        DC32     ?_158

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable40_7:
   \        0x0   0x....'....        DC32     ?_159

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable41:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable41_1:
   \        0x0   0x....'....        DC32     ?_157

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable41_2:
   \        0x0   0x....'....        DC32     ?_160

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable41_3:
   \        0x0   0x....'....        DC32     ?_161

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable41_4:
   \        0x0   0x....'....        DC32     ?_162

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable41_5:
   \        0x0   0x....'....        DC32     ?_163

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable41_6:
   \        0x0   0x....'....        DC32     ?_164

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable41_7:
   \        0x0   0x....'....        DC32     ?_165

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable41_8:
   \        0x0   0xFFFF'8100        DC32     0xffff8100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable41_9:
   \        0x0   0x....'....        DC32     ?_167

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable41_10:
   \        0x0   0x....'....        DC32     ?_166

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable41_11:
   \        0x0   0x....'....        DC32     ?_170

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable41_12:
   \        0x0   0x....'....        DC32     ?_168

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable41_13:
   \        0x0   0x....'....        DC32     ?_171

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable41_14:
   \        0x0   0x....'....        DC32     ?_172

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable41_15:
   \        0x0   0x....'....        DC32     ?_173

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable41_16:
   \        0x0   0x....'....        DC32     ?_174

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable41_17:
   \        0x0   0x....'....        DC32     ?_175

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable41_18:
   \        0x0   0xFFFF'9400        DC32     0xffff9400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable41_19:
   \        0x0   0x....'....        DC32     ?_176

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable41_20:
   \        0x0   0x....'....        DC32     ?_177

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable41_21:
   \        0x0   0x....'....        DC32     ?_178

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable41_22:
   \        0x0   0x....'....        DC32     ?_179

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable41_23:
   \        0x0   0x....'....        DC32     ?_180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable41_24:
   \        0x0   0xFFFF'9900        DC32     0xffff9900

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable41_25:
   \        0x0   0x....'....        DC32     ?_181

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable41_26:
   \        0x0   0x....'....        DC32     ?_182

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable41_27:
   \        0x0   0x....'....        DC32     ?_183

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable42:
   \        0x0   0xFFFF'9A80        DC32     0xffff9a80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable42_1:
   \        0x0   0x....'....        DC32     ?_184

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable42_2:
   \        0x0   0xFFFF'8E80        DC32     0xffff8e80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable42_3:
   \        0x0   0x....'....        DC32     ?_185

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable43:
   \        0x0   0x....'....        DC32     ?_186

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable43_1:
   \        0x0   0xFFFF'8E00        DC32     0xffff8e00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable43_2:
   \        0x0   0x....'....        DC32     ?_187

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable43_3:
   \        0x0   0x....'....        DC32     ?_188

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable43_4:
   \        0x0   0x....'....        DC32     ?_189

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable43_5:
   \        0x0   0xFFFF'9B80        DC32     0xffff9b80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable43_6:
   \        0x0   0x....'....        DC32     ?_190

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable44:
   \        0x0   0x....'....        DC32     ?_191

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable44_1:
   \        0x0   0x....'....        DC32     ?_192

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable44_2:
   \        0x0   0xFFFF'8880        DC32     0xffff8880

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable44_3:
   \        0x0   0x....'....        DC32     ?_193

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable44_4:
   \        0x0   0xFFFF'8780        DC32     0xffff8780

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable44_5:
   \        0x0   0x....'....        DC32     ?_194

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable44_6:
   \        0x0   0xFFFF'9980        DC32     0xffff9980

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable44_7:
   \        0x0   0xFFFF'8F00        DC32     0xffff8f00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable44_8:
   \        0x0   0x....'....        DC32     ?_195

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable44_9:
   \        0x0   0x....'....        DC32     ?_196

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable44_10:
   \        0x0   0x....'....        DC32     ?_97

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable45:
   \        0x0   0x....'....        DC32     ?_198

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable45_1:
   \        0x0   0x....'....        DC32     ?_199

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable45_2:
   \        0x0   0x....'....        DC32     ?_200

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable45_3:
   \        0x0   0xFFFF'8A80        DC32     0xffff8a80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable45_4:
   \        0x0   0x....'....        DC32     ?_201

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46:
   \        0x0   0x....'....        DC32     ?_197

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46_1:
   \        0x0   0x....'....        DC32     ?_202

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46_2:
   \        0x0   0xFFFF'8B00        DC32     0xffff8b00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46_3:
   \        0x0   0x....'....        DC32     ?_204

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable48:
   \        0x0   0x....'....        DC32     ?_203

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable48_1:
   \        0x0   0x....'....        DC32     ?_205

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable48_2:
   \        0x0   0x....'....        DC32     ?_206

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable48_3:
   \        0x0   0x....'....        DC32     ?_207

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable49:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable49_1:
   \        0x0   0x....'....        DC32     ?_208

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable49_2:
   \        0x0   0xFFFF'8B80        DC32     0xffff8b80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable49_3:
   \        0x0   0x....'....        DC32     ?_209

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable49_4:
   \        0x0   0xFFFF'8900        DC32     0xffff8900

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable49_5:
   \        0x0   0xFFFF'8600        DC32     0xffff8600

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable49_6:
   \        0x0   0x....'....        DC32     ?_210

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable49_7:
   \        0x0   0xFFFF'8100        DC32     0xffff8100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable50:
   \        0x0   0xFFFF'D780        DC32     0xffffd780

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable50_1:
   \        0x0   0x....'....        DC32     ?_214

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable50_2:
   \        0x0   0x....'....        DC32     ?_215

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable51:
   \        0x0   0x....'....        DC32     ?_216

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable52:
   \        0x0   0x....'....        DC32     ?_217

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable52_1:
   \        0x0   0x....'....        DC32     ?_218

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable52_2:
   \        0x0   0xFFFF'8980        DC32     0xffff8980

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable52_3:
   \        0x0   0x....'....        DC32     ?_219

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable52_4:
   \        0x0   0x....'....        DC32     ?_220

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable53:
   \        0x0   0x....'....        DC32     ?_221

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55:
   \        0x0   0x....'....        DC32     ?_212

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_1:
   \        0x0   0x....'....        DC32     ?_213

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_2:
   \        0x0   0x....'....        DC32     ?_222

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_3:
   \        0x0   0x....'....        DC32     ?_224

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_4:
   \        0x0   0x....'....        DC32     ?_225

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_5:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_6:
   \        0x0   0x....'....        DC32     ?_203

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable56:
   \        0x0   0x....'....        DC32     ?_211

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable56_1:
   \        0x0   0x....'....        DC32     ?_223

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable56_2:
   \        0x0   0x....'....        DC32     ?_226

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable56_3:
   \        0x0   0x....'....        DC32     ?_227

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable56_4:
   \        0x0   0xFFFF'9480        DC32     0xffff9480

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable56_5:
   \        0x0   0x....'....        DC32     ?_228

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable56_6:
   \        0x0   0x....'....        DC32     ?_229

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable57:
   \        0x0   0x....'....        DC32     ?_230

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable57_1:
   \        0x0   0x....'....        DC32     ?_231

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable57_2:
   \        0x0   0x....'....        DC32     ?_232

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable57_3:
   \        0x0   0x....'....        DC32     ?_233

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable58:
   \        0x0   0x....'....        DC32     ?_234

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable58_1:
   \        0x0   0x....'....        DC32     ?_236

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable58_2:
   \        0x0   0x....'....        DC32     ?_237

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable59:
   \        0x0   0x....'....        DC32     ?_235

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable59_1:
   \        0x0   0x....'....        DC32     ?_238

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable60:
   \        0x0   0x....'....        DC32     ?_239

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable60_1:
   \        0x0   0x....'....        DC32     ?_240

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable60_2:
   \        0x0   0x....'....        DC32     ?_242

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable61:
   \        0x0   0x....'....        DC32     ?_241

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable62:
   \        0x0   0x....'....        DC32     ?_243

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable62_1:
   \        0x0   0x....'....        DC32     ?_244

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable63:
   \        0x0   0x....'....        DC32     ?_245

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable63_1:
   \        0x0   0x....'....        DC32     ?_246

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable63_2:
   \        0x0   0x....'....        DC32     ?_247

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable64:
   \        0x0   0x....'....        DC32     ?_248

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable64_1:
   \        0x0   0x....'....        DC32     ?_249

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable64_2:
   \        0x0   0x....'....        DC32     ?_250

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable65:
   \        0x0   0x....'....        DC32     ?_207

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable65_1:
   \        0x0   0x....'....        DC32     ?_251

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable65_2:
   \        0x0   0xFFFF'8900        DC32     0xffff8900

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable66:
   \        0x0   0xFFFF'8180        DC32     0xffff8180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable67:
   \        0x0   0x....'....        DC32     ?_252

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable68:
   \        0x0   0x....'....        DC32     ssl_update_checksum_start

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable69:
   \        0x0   0x....'....        DC32     ?_253

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable71:
   \        0x0   0xFFFF'8100        DC32     0xffff8100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable71_1:
   \        0x0   0xFFFF'8F80        DC32     0xffff8f80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable72:
   \        0x0   0x....'....        DC32     ?_210

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable72_1:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable74:
   \        0x0   0xFFFF'8F00        DC32     0xffff8f00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable77:
   \        0x0   0x....'....        DC32     ?_254

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable77_1:
   \        0x0   0x....'....        DC32     ?_255

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable77_2:
   \        0x0   0x....'....        DC32     ?_256

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable77_3:
   \        0x0   0x....'....        DC32     ?_257

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable78:
   \        0x0   0x....'....        DC32     ?_258

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable78_1:
   \        0x0   0x....'....        DC32     ?_259

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable78_2:
   \        0x0   0x....'....        DC32     ?_260

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable78_3:
   \        0x0   0x....'....        DC32     ?_261

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable78_4:
   \        0x0   0x....'....        DC32     ?_262

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable78_5:
   \        0x0   0x....'....        DC32     ?_263

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable78_6:
   \        0x0   0x....'....        DC32     ?_264

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable78_7:
   \        0x0   0x....'....        DC32     ?_265

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable78_8:
   \        0x0   0x....'....        DC32     ?_266

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable78_9:
   \        0x0   0x....'....        DC32     ?_7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable78_10:
   \        0x0   0x....'....        DC32     ?_267

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79:
   \        0x0   0xFFFF'9400        DC32     0xffff9400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_1:
   \        0x0   0xFFFF'8F80        DC32     0xffff8f80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_2:
   \        0x0   0x....'....        DC32     ?_268

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_3:
   \        0x0   0x....'....        DC32     ?_270

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_4:
   \        0x0   0x....'....        DC32     ?_203

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable80:
   \        0x0   0xFFFF'8F00        DC32     0xffff8f00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable80_1:
   \        0x0   0x....'....        DC32     ?_269

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable80_2:
   \        0x0   0x....'....        DC32     ?_271

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable80_3:
   \        0x0   0x....'....        DC32     ?_272

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable80_4:
   \        0x0   0x....'....        DC32     ?_273

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable80_5:
   \        0x0   0x....'....        DC32     ?_274

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable80_6:
   \        0x0   0x....'....        DC32     ?_275

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable80_7:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable80_8:
   \        0x0   0x....'....        DC32     ?_276

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable80_9:
   \        0x0   0x....'....        DC32     ?_277

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable81:
   \        0x0   0xFFFF'9500        DC32     0xffff9500

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable81_1:
   \        0x0   0x....'....        DC32     ?_278

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable81_2:
   \        0x0   0x....'....        DC32     ?_207

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable82:
   \        0x0   0x....'....        DC32     ?_279

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable82_1:
   \        0x0   0x....'....        DC32     ?_280

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable82_2:
   \        0x0   0x....'....        DC32     ?_281

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable82_3:
   \        0x0   0xFFFF'8900        DC32     0xffff8900

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable83:
   \        0x0   0x....'....        DC32     ?_282

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable83_1:
   \        0x0   0x....'....        DC32     ?_77

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable83_2:
   \        0x0   0x....'....        DC32     ?_283

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable83_3:
   \        0x0   0x....'....        DC32     ?_284

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable83_4:
   \        0x0   0xFFFF'9700        DC32     0xffff9700

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable83_5:
   \        0x0   0x....'....        DC32     ?_285

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable84:
   \        0x0   0x....'....        DC32     ?_286

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable84_1:
   \        0x0   0x....'....        DC32     ?_287

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable84_2:
   \        0x0   0x....'....        DC32     ?_288

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable84_3:
   \        0x0   0x....'....        DC32     ?_112

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable84_4:
   \        0x0   0x....'....        DC32     ?_97

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable84_5:
   \        0x0   0x....'....        DC32     ?_289

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable84_6:
   \        0x0   0x....'....        DC32     ?_290

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable84_7:
   \        0x0   0x....'....        DC32     ?_291

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable84_8:
   \        0x0   0x....'....        DC32     ?_292

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable84_9:
   \        0x0   0x....'....        DC32     ?_293

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable84_10:
   \        0x0   0x....'....        DC32     ?_294

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable84_11:
   \        0x0   0x....'....        DC32     ?_295

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable84_12:
   \        0x0   0x....'....        DC32     ssl_cookie_write_dummy

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable84_13:
   \        0x0   0x....'....        DC32     ssl_cookie_check_dummy

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable84_14:
   \        0x0   0x....'....        DC32     `mbedtls_ssl_config_defaults{2}{3}::dhm_g`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable84_15:
   \        0x0   0x....'....        DC32     `mbedtls_ssl_config_defaults{2}{3}::dhm_p`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable84_16:
   \        0x0   0x....'....        DC32     ssl_preset_suiteb_ciphersuites

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable84_17:
   \        0x0   0x....'....        DC32     mbedtls_x509_crt_profile_suiteb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable84_18:
   \        0x0   0x....'....        DC32     ssl_preset_suiteb_hashes

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable84_19:
   \        0x0   0x....'....        DC32     ssl_preset_suiteb_curves

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable84_20:
   \        0x0   0x....'....        DC32     mbedtls_x509_crt_profile_default

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable84_21:
   \        0x0   0x....'....        DC32     ssl_preset_default_hashes

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable84_22:
   \        0x0   0x....'....        DC32     ?_296

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable84_23:
   \        0x0   0x....'....        DC32     ?_297

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable84_24:
   \        0x0   0x....'....        DC32     ssl_calc_verify_tls

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable84_25:
   \        0x0   0x....'....        DC32     ssl_calc_verify_tls_sha384

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable84_26:
   \        0x0   0x....'....        DC32     ssl_calc_verify_tls_sha256

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable84_27:
   \        0x0   0xFFFF'9A00        DC32     0xffff9a00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable84_28:
   \        0x0   0x....'....        DC32     ?_298

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable84_29:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable84_30:
   \        0x0   0x....'....        DC32     ?_299

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable84_31:
   \        0x0   0x....'....        DC32     ?_300

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable84_32:
   \        0x0   0x....'....        DC32     ?_301

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable84_33:
   \        0x0   0x....'....        DC32     ?_302

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable84_34:
   \        0x0   0x....'....        DC32     ?_303

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable84_35:
   \        0x0   0x....'....        DC32     ?_19

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable84_36:
   \        0x0   0x....'....        DC32     ?_304

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable84_37:
   \        0x0   0x....'....        DC32     ?_305

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable84_38:
   \        0x0   0x....'....        DC32     ?_306

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x43 0x3A          DC8 43H, 3AH, 5CH, 44H, 65H, 76H, 65H, 6CH
   \              0x5C 0x44    
   \              0x65 0x76    
   \              0x65 0x6C    
   \        0x8   0x6F 0x70          DC8 6FH, 70H, 6DH, 65H, 6EH, 74H, 5CH, 73H
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x5C 0x73    
   \       0x10   0x6D 0x61          DC8 6DH, 61H, 72H, 74H, 5FH, 77H, 61H, 73H
   \              0x72 0x74    
   \              0x5F 0x77    
   \              0x61 0x73    
   \       0x18   0x68 0x69          DC8 68H, 69H, 6EH, 67H, 5FH, 6DH, 61H, 63H
   \              0x6E 0x67    
   \              0x5F 0x6D    
   \              0x61 0x63    
   \       0x20   0x68 0x69          DC8 68H, 69H, 6EH, 65H, 5FH, 33H, 30H, 38H
   \              0x6E 0x65    
   \              0x5F 0x33    
   \              0x30 0x38    
   \       0x28   0x30 0x5C          DC8 30H, 5CH, 6DH, 62H, 65H, 64H, 74H, 6CH
   \              0x6D 0x62    
   \              0x65 0x64    
   \              0x74 0x6C    
   \       0x30   0x73 0x5C          DC8 73H, 5CH, 6CH, 69H, 62H, 72H, 61H, 72H
   \              0x6C 0x69    
   \              0x62 0x72    
   \              0x61 0x72    
   \       0x38   0x79 0x5C          DC8 79H, 5CH, 73H, 73H, 6CH, 5FH, 74H, 6CH
   \              0x73 0x73    
   \              0x6C 0x5F    
   \              0x74 0x6C    
   \       0x40   0x73 0x2E          DC8 73H, 2EH, 63H, 0
   \              0x63 0x00    

   \                                 In section .rodata, align 4
   \                     ?_1:
   \        0x0   0x73 0x65          DC8 "set_timer to %d ms"
   \              0x74 0x5F    
   \              0x74 0x69    
   \              0x6D 0x65    
   \              0x72 0x20    
   \              0x74 0x6F    
   \              0x20 0x25    
   \              0x64 0x20    
   \              0x6D 0x73    
   \              0x00         
   \       0x13   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_2:
   \        0x0   0x74 0x69          DC8 "timer expired"
   \              0x6D 0x65    
   \              0x72 0x20    
   \              0x65 0x78    
   \              0x70 0x69    
   \              0x72 0x65    
   \              0x64 0x00    
   \        0xE   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_3:
   \        0x0   0x75 0x70          DC8 "update timeout value to %d millisecs"
   \              0x64 0x61    
   \              0x74 0x65    
   \              0x20 0x74    
   \              0x69 0x6D    
   \              0x65 0x6F    
   \              0x75 0x74    
   \              0x20 0x76    
   \              0x61 0x6C    
   \              0x75 0x65    
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x25 0x64    
   \              0x20 0x6D    
   \              0x69 0x6C    
   \              0x6C 0x69    
   \              0x73 0x65    
   \              0x63 0x73    
   \              0x00         
   \       0x25   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_4:
   \        0x0   0x3D 0x3E          DC8 "=> derive keys"
   \              0x20 0x64    
   \              0x65 0x72    
   \              0x69 0x76    
   \              0x65 0x20    
   \              0x6B 0x65    
   \              0x79 0x73    
   \              0x00         
   \        0xF   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_5:
   \        0x0   0x63 0x69          DC8 "cipher info for %d not found"
   \              0x70 0x68    
   \              0x65 0x72    
   \              0x20 0x69    
   \              0x6E 0x66    
   \              0x6F 0x20    
   \              0x66 0x6F    
   \              0x72 0x20    
   \              0x25 0x64    
   \              0x20 0x6E    
   \              0x6F 0x74    
   \              0x20 0x66    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x00         
   \       0x1D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_6:
   \        0x0   0x6D 0x62          DC8 "mbedtls_md info for %d not found"
   \              0x65 0x64    
   \              0x74 0x6C    
   \              0x73 0x5F    
   \              0x6D 0x64    
   \              0x20 0x69    
   \              0x6E 0x66    
   \              0x6F 0x20    
   \              0x66 0x6F    
   \              0x72 0x20    
   \              0x25 0x64    
   \              0x20 0x6E    
   \              0x6F 0x74    
   \              0x20 0x66    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x00         
   \       0x21   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_7:
   \        0x0   0x73 0x68          DC8 "should never happen"
   \              0x6F 0x75    
   \              0x6C 0x64    
   \              0x20 0x6E    
   \              0x65 0x76    
   \              0x65 0x72    
   \              0x20 0x68    
   \              0x61 0x70    
   \              0x70 0x65    
   \              0x6E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_8:
   \        0x0   0x70 0x72          DC8 "premaster secret"
   \              0x65 0x6D    
   \              0x61 0x73    
   \              0x74 0x65    
   \              0x72 0x20    
   \              0x73 0x65    
   \              0x63 0x72    
   \              0x65 0x74    
   \              0x00         
   \       0x11   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_9:
   \        0x0   0x75 0x73          DC8 "using extended master secret"
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x65 0x78    
   \              0x74 0x65    
   \              0x6E 0x64    
   \              0x65 0x64    
   \              0x20 0x6D    
   \              0x61 0x73    
   \              0x74 0x65    
   \              0x72 0x20    
   \              0x73 0x65    
   \              0x63 0x72    
   \              0x65 0x74    
   \              0x00         
   \       0x1D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_10:
   \        0x0   0x73 0x65          DC8 "session hash"
   \              0x73 0x73    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x68 0x61    
   \              0x73 0x68    
   \              0x00         
   \        0xD   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_11:
   \        0x0   0x65 0x78          DC8 "extended master secret"
   \              0x74 0x65    
   \              0x6E 0x64    
   \              0x65 0x64    
   \              0x20 0x6D    
   \              0x61 0x73    
   \              0x74 0x65    
   \              0x72 0x20    
   \              0x73 0x65    
   \              0x63 0x72    
   \              0x65 0x74    
   \              0x00         
   \       0x17   0x00               DC8 0

   \                                 In section .rodata, align 4
   \        0x0   0x70 0x72          DC8 "prf"
   \              0x66 0x00    

   \                                 In section .rodata, align 4
   \                     ?_13:
   \        0x0   0x6D 0x61          DC8 "master secret"
   \              0x73 0x74    
   \              0x65 0x72    
   \              0x20 0x73    
   \              0x65 0x63    
   \              0x72 0x65    
   \              0x74 0x00    
   \        0xE   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_14:
   \        0x0   0x6E 0x6F          DC8 "no premaster (session resumed)"
   \              0x20 0x70    
   \              0x72 0x65    
   \              0x6D 0x61    
   \              0x73 0x74    
   \              0x65 0x72    
   \              0x20 0x28    
   \              0x73 0x65    
   \              0x73 0x73    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x72 0x65    
   \              0x73 0x75    
   \              0x6D 0x65    
   \              0x64 0x29    
   \              0x00         
   \       0x1F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_15:
   \        0x0   0x6B 0x65          DC8 "key expansion"
   \              0x79 0x20    
   \              0x65 0x78    
   \              0x70 0x61    
   \              0x6E 0x73    
   \              0x69 0x6F    
   \              0x6E 0x00    
   \        0xE   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_16:
   \        0x0   0x63 0x69          DC8 "ciphersuite = %s"
   \              0x70 0x68    
   \              0x65 0x72    
   \              0x73 0x75    
   \              0x69 0x74    
   \              0x65 0x20    
   \              0x3D 0x20    
   \              0x25 0x73    
   \              0x00         
   \       0x11   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_17:
   \        0x0   0x72 0x61          DC8 "random bytes"
   \              0x6E 0x64    
   \              0x6F 0x6D    
   \              0x20 0x62    
   \              0x79 0x74    
   \              0x65 0x73    
   \              0x00         
   \        0xD   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_18:
   \        0x0   0x6B 0x65          DC8 "key block"
   \              0x79 0x20    
   \              0x62 0x6C    
   \              0x6F 0x63    
   \              0x6B 0x00    
   \        0xA   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_19:
   \        0x0   0x6D 0x62          DC8 "mbedtls_md_setup"
   \              0x65 0x64    
   \              0x74 0x6C    
   \              0x73 0x5F    
   \              0x6D 0x64    
   \              0x5F 0x73    
   \              0x65 0x74    
   \              0x75 0x70    
   \              0x00         
   \       0x11   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_20:
   \        0x0   0x6B 0x65          DC8 "keylen: %d, minlen: %d, ivlen: %d, maclen: %d"
   \              0x79 0x6C    
   \              0x65 0x6E    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x2C 0x20    
   \              0x6D 0x69    
   \              0x6E 0x6C    
   \              0x65 0x6E    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x2C 0x20    
   \              0x69 0x76    
   \              0x6C 0x65    
   \              0x6E 0x3A    
   \              0x20 0x25    
   \              0x64 0x2C    
   \              0x20 0x6D    
   \              0x61 0x63    
   \              0x6C 0x65    
   \              0x6E 0x3A    
   \              0x20 0x25    
   \              0x64 0x00    
   \       0x2E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_21:
   \        0x0   0x6D 0x62          DC8 "mbedtls_cipher_setup"
   \              0x65 0x64    
   \              0x74 0x6C    
   \              0x73 0x5F    
   \              0x63 0x69    
   \              0x70 0x68    
   \              0x65 0x72    
   \              0x5F 0x73    
   \              0x65 0x74    
   \              0x75 0x70    
   \              0x00         
   \       0x15   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_22:
   \        0x0   0x6D 0x62          DC8 "mbedtls_cipher_setkey"
   \              0x65 0x64    
   \              0x74 0x6C    
   \              0x73 0x5F    
   \              0x63 0x69    
   \              0x70 0x68    
   \              0x65 0x72    
   \              0x5F 0x73    
   \              0x65 0x74    
   \              0x6B 0x65    
   \              0x79 0x00    
   \       0x16   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_23:
   \        0x0   0x6D 0x62          DC8 "mbedtls_cipher_set_padding_mode"
   \              0x65 0x64    
   \              0x74 0x6C    
   \              0x73 0x5F    
   \              0x63 0x69    
   \              0x70 0x68    
   \              0x65 0x72    
   \              0x5F 0x73    
   \              0x65 0x74    
   \              0x5F 0x70    
   \              0x61 0x64    
   \              0x64 0x69    
   \              0x6E 0x67    
   \              0x5F 0x6D    
   \              0x6F 0x64    
   \              0x65 0x00    

   \                                 In section .rodata, align 4
   \                     ?_24:
   \        0x0   0x3C 0x3D          DC8 "<= derive keys"
   \              0x20 0x64    
   \              0x65 0x72    
   \              0x69 0x76    
   \              0x65 0x20    
   \              0x6B 0x65    
   \              0x79 0x73    
   \              0x00         
   \        0xF   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_25:
   \        0x0   0x3D 0x3E          DC8 "=> calc verify tls"
   \              0x20 0x63    
   \              0x61 0x6C    
   \              0x63 0x20    
   \              0x76 0x65    
   \              0x72 0x69    
   \              0x66 0x79    
   \              0x20 0x74    
   \              0x6C 0x73    
   \              0x00         
   \       0x13   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_26:
   \        0x0   0x63 0x61          DC8 "calculated verify result"
   \              0x6C 0x63    
   \              0x75 0x6C    
   \              0x61 0x74    
   \              0x65 0x64    
   \              0x20 0x76    
   \              0x65 0x72    
   \              0x69 0x66    
   \              0x79 0x20    
   \              0x72 0x65    
   \              0x73 0x75    
   \              0x6C 0x74    
   \              0x00         
   \       0x19   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_27:
   \        0x0   0x3C 0x3D          DC8 "<= calc verify"
   \              0x20 0x63    
   \              0x61 0x6C    
   \              0x63 0x20    
   \              0x76 0x65    
   \              0x72 0x69    
   \              0x66 0x79    
   \              0x00         
   \        0xF   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_28:
   \        0x0   0x3D 0x3E          DC8 "=> calc verify sha256"
   \              0x20 0x63    
   \              0x61 0x6C    
   \              0x63 0x20    
   \              0x76 0x65    
   \              0x72 0x69    
   \              0x66 0x79    
   \              0x20 0x73    
   \              0x68 0x61    
   \              0x32 0x35    
   \              0x36 0x00    
   \       0x16   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_29:
   \        0x0   0x3D 0x3E          DC8 "=> calc verify sha384"
   \              0x20 0x63    
   \              0x61 0x6C    
   \              0x63 0x20    
   \              0x76 0x65    
   \              0x72 0x69    
   \              0x66 0x79    
   \              0x20 0x73    
   \              0x68 0x61    
   \              0x33 0x38    
   \              0x34 0x00    
   \       0x16   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_30:
   \        0x0   0x6D 0x62          DC8 "mbedtls_dhm_calc_secret"
   \              0x65 0x64    
   \              0x74 0x6C    
   \              0x73 0x5F    
   \              0x64 0x68    
   \              0x6D 0x5F    
   \              0x63 0x61    
   \              0x6C 0x63    
   \              0x5F 0x73    
   \              0x65 0x63    
   \              0x72 0x65    
   \              0x74 0x00    

   \                                 In section .rodata, align 4
   \                     ?_31:
   \        0x0   0x44 0x48          DC8 "DHM: K "
   \              0x4D 0x3A    
   \              0x20 0x4B    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_32:
   \        0x0   0x6D 0x62          DC8 "mbedtls_ecdh_calc_secret"
   \              0x65 0x64    
   \              0x74 0x6C    
   \              0x73 0x5F    
   \              0x65 0x63    
   \              0x64 0x68    
   \              0x5F 0x63    
   \              0x61 0x6C    
   \              0x63 0x5F    
   \              0x73 0x65    
   \              0x63 0x72    
   \              0x65 0x74    
   \              0x00         
   \       0x19   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_33:
   \        0x0   0x45 0x43          DC8 "ECDH: z"
   \              0x44 0x48    
   \              0x3A 0x20    
   \              0x7A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_34:
   \        0x0   0x3D 0x3E          DC8 "=> encrypt buf"
   \              0x20 0x65    
   \              0x6E 0x63    
   \              0x72 0x79    
   \              0x70 0x74    
   \              0x20 0x62    
   \              0x75 0x66    
   \              0x00         
   \        0xF   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_35:
   \        0x0   0x62 0x65          DC8 "before encrypt: output payload"
   \              0x66 0x6F    
   \              0x72 0x65    
   \              0x20 0x65    
   \              0x6E 0x63    
   \              0x72 0x79    
   \              0x70 0x74    
   \              0x3A 0x20    
   \              0x6F 0x75    
   \              0x74 0x70    
   \              0x75 0x74    
   \              0x20 0x70    
   \              0x61 0x79    
   \              0x6C 0x6F    
   \              0x61 0x64    
   \              0x00         
   \       0x1F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_36:
   \        0x0   0x63 0x6F          DC8 "computed mac"
   \              0x6D 0x70    
   \              0x75 0x74    
   \              0x65 0x64    
   \              0x20 0x6D    
   \              0x61 0x63    
   \              0x00         
   \        0xD   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_37:
   \        0x0   0x61 0x64          DC8 "additional data for AEAD"
   \              0x64 0x69    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x61 0x6C    
   \              0x20 0x64    
   \              0x61 0x74    
   \              0x61 0x20    
   \              0x66 0x6F    
   \              0x72 0x20    
   \              0x41 0x45    
   \              0x41 0x44    
   \              0x00         
   \       0x19   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_38:
   \        0x0   0x49 0x56          DC8 "IV used (internal)"
   \              0x20 0x75    
   \              0x73 0x65    
   \              0x64 0x20    
   \              0x28 0x69    
   \              0x6E 0x74    
   \              0x65 0x72    
   \              0x6E 0x61    
   \              0x6C 0x29    
   \              0x00         
   \       0x13   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_39:
   \        0x0   0x49 0x56          DC8 "IV used (transmitted)"
   \              0x20 0x75    
   \              0x73 0x65    
   \              0x64 0x20    
   \              0x28 0x74    
   \              0x72 0x61    
   \              0x6E 0x73    
   \              0x6D 0x69    
   \              0x74 0x74    
   \              0x65 0x64    
   \              0x29 0x00    
   \       0x16   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_40:
   \        0x0   0x62 0x65          DC8 62H, 65H, 66H, 6FH, 72H, 65H, 20H, 65H
   \              0x66 0x6F    
   \              0x72 0x65    
   \              0x20 0x65    
   \        0x8   0x6E 0x63          DC8 6EH, 63H, 72H, 79H, 70H, 74H, 3AH, 20H
   \              0x72 0x79    
   \              0x70 0x74    
   \              0x3A 0x20    
   \       0x10   0x6D 0x73          DC8 6DH, 73H, 67H, 6CH, 65H, 6EH, 20H, 3DH
   \              0x67 0x6C    
   \              0x65 0x6E    
   \              0x20 0x3D    
   \       0x18   0x20 0x25          DC8 20H, 25H, 64H, 2CH, 20H, 69H, 6EH, 63H
   \              0x64 0x2C    
   \              0x20 0x69    
   \              0x6E 0x63    
   \       0x20   0x6C 0x75          DC8 6CH, 75H, 64H, 69H, 6EH, 67H, 20H, 30H
   \              0x64 0x69    
   \              0x6E 0x67    
   \              0x20 0x30    
   \       0x28   0x20 0x62          DC8 20H, 62H, 79H, 74H, 65H, 73H, 20H, 6FH
   \              0x79 0x74    
   \              0x65 0x73    
   \              0x20 0x6F    
   \       0x30   0x66 0x20          DC8 66H, 20H, 70H, 61H, 64H, 64H, 69H, 6EH
   \              0x70 0x61    
   \              0x64 0x64    
   \              0x69 0x6E    
   \       0x38   0x67 0x00          DC8 67H, 0
   \       0x3A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_41:
   \        0x0   0x6D 0x62          DC8 "mbedtls_cipher_auth_encrypt"
   \              0x65 0x64    
   \              0x74 0x6C    
   \              0x73 0x5F    
   \              0x63 0x69    
   \              0x70 0x68    
   \              0x65 0x72    
   \              0x5F 0x61    
   \              0x75 0x74    
   \              0x68 0x5F    
   \              0x65 0x6E    
   \              0x63 0x72    
   \              0x79 0x70    
   \              0x74 0x00    

   \                                 In section .rodata, align 4
   \                     ?_42:
   \        0x0   0x61 0x66          DC8 "after encrypt: tag"
   \              0x74 0x65    
   \              0x72 0x20    
   \              0x65 0x6E    
   \              0x63 0x72    
   \              0x79 0x70    
   \              0x74 0x3A    
   \              0x20 0x74    
   \              0x61 0x67    
   \              0x00         
   \       0x13   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_43:
   \        0x0   0x62 0x65          DC8 62H, 65H, 66H, 6FH, 72H, 65H, 20H, 65H
   \              0x66 0x6F    
   \              0x72 0x65    
   \              0x20 0x65    
   \        0x8   0x6E 0x63          DC8 6EH, 63H, 72H, 79H, 70H, 74H, 3AH, 20H
   \              0x72 0x79    
   \              0x70 0x74    
   \              0x3A 0x20    
   \       0x10   0x6D 0x73          DC8 6DH, 73H, 67H, 6CH, 65H, 6EH, 20H, 3DH
   \              0x67 0x6C    
   \              0x65 0x6E    
   \              0x20 0x3D    
   \       0x18   0x20 0x25          DC8 20H, 25H, 64H, 2CH, 20H, 69H, 6EH, 63H
   \              0x64 0x2C    
   \              0x20 0x69    
   \              0x6E 0x63    
   \       0x20   0x6C 0x75          DC8 6CH, 75H, 64H, 69H, 6EH, 67H, 20H, 25H
   \              0x64 0x69    
   \              0x6E 0x67    
   \              0x20 0x25    
   \       0x28   0x64 0x20          DC8 64H, 20H, 62H, 79H, 74H, 65H, 73H, 20H
   \              0x62 0x79    
   \              0x74 0x65    
   \              0x73 0x20    
   \       0x30   0x6F 0x66          DC8 6FH, 66H, 20H, 49H, 56H, 20H, 61H, 6EH
   \              0x20 0x49    
   \              0x56 0x20    
   \              0x61 0x6E    
   \       0x38   0x64 0x20          DC8 64H, 20H, 25H, 64H, 20H, 62H, 79H, 74H
   \              0x25 0x64    
   \              0x20 0x62    
   \              0x79 0x74    
   \       0x40   0x65 0x73          DC8 65H, 73H, 20H, 6FH, 66H, 20H, 70H, 61H
   \              0x20 0x6F    
   \              0x66 0x20    
   \              0x70 0x61    
   \       0x48   0x64 0x64          DC8 64H, 64H, 69H, 6EH, 67H, 0
   \              0x69 0x6E    
   \              0x67 0x00    
   \       0x4E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_44:
   \        0x0   0x6D 0x62          DC8 "mbedtls_cipher_crypt"
   \              0x65 0x64    
   \              0x74 0x6C    
   \              0x73 0x5F    
   \              0x63 0x69    
   \              0x70 0x68    
   \              0x65 0x72    
   \              0x5F 0x63    
   \              0x72 0x79    
   \              0x70 0x74    
   \              0x00         
   \       0x15   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_45:
   \        0x0   0x75 0x73          DC8 "using encrypt then mac"
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x65 0x6E    
   \              0x63 0x72    
   \              0x79 0x70    
   \              0x74 0x20    
   \              0x74 0x68    
   \              0x65 0x6E    
   \              0x20 0x6D    
   \              0x61 0x63    
   \              0x00         
   \       0x17   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_46:
   \        0x0   0x4D 0x41          DC8 "MAC'd meta-data"
   \              0x43 0x27    
   \              0x64 0x20    
   \              0x6D 0x65    
   \              0x74 0x61    
   \              0x2D 0x64    
   \              0x61 0x74    
   \              0x61 0x00    

   \                                 In section .rodata, align 4
   \                     ?_47:
   \        0x0   0x3C 0x3D          DC8 "<= encrypt buf"
   \              0x20 0x65    
   \              0x6E 0x63    
   \              0x72 0x79    
   \              0x70 0x74    
   \              0x20 0x62    
   \              0x75 0x66    
   \              0x00         
   \        0xF   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_48:
   \        0x0   0x3D 0x3E          DC8 "=> decrypt buf"
   \              0x20 0x64    
   \              0x65 0x63    
   \              0x72 0x79    
   \              0x70 0x74    
   \              0x20 0x62    
   \              0x75 0x66    
   \              0x00         
   \        0xF   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_49:
   \        0x0   0x69 0x6E          DC8 "in_msglen (%d) < minlen (%d)"
   \              0x5F 0x6D    
   \              0x73 0x67    
   \              0x6C 0x65    
   \              0x6E 0x20    
   \              0x28 0x25    
   \              0x64 0x29    
   \              0x20 0x3C    
   \              0x20 0x6D    
   \              0x69 0x6E    
   \              0x6C 0x65    
   \              0x6E 0x20    
   \              0x28 0x25    
   \              0x64 0x29    
   \              0x00         
   \       0x1D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_50:
   \        0x0   0x6D 0x73          DC8 "msglen (%d) < explicit_iv_len (%d) + taglen (%d)"
   \              0x67 0x6C    
   \              0x65 0x6E    
   \              0x20 0x28    
   \              0x25 0x64    
   \              0x29 0x20    
   \              0x3C 0x20    
   \              0x65 0x78    
   \              0x70 0x6C    
   \              0x69 0x63    
   \              0x69 0x74    
   \              0x5F 0x69    
   \              0x76 0x5F    
   \              0x6C 0x65    
   \              0x6E 0x20    
   \              0x28 0x25    
   \              0x64 0x29    
   \              0x20 0x2B    
   \              0x20 0x74    
   \              0x61 0x67    
   \              0x6C 0x65    
   \              0x6E 0x20    
   \              0x28 0x25    
   \              0x64 0x29    
   \              0x00         
   \       0x31   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_51:
   \        0x0   0x49 0x56          DC8 "IV used"
   \              0x20 0x75    
   \              0x73 0x65    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     ?_52:
   \        0x0   0x54 0x41          DC8 "TAG used"
   \              0x47 0x20    
   \              0x75 0x73    
   \              0x65 0x64    
   \              0x00         
   \        0x9   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_53:
   \        0x0   0x6D 0x62          DC8 "mbedtls_cipher_auth_decrypt"
   \              0x65 0x64    
   \              0x74 0x6C    
   \              0x73 0x5F    
   \              0x63 0x69    
   \              0x70 0x68    
   \              0x65 0x72    
   \              0x5F 0x61    
   \              0x75 0x74    
   \              0x68 0x5F    
   \              0x64 0x65    
   \              0x63 0x72    
   \              0x79 0x70    
   \              0x74 0x00    

   \                                 In section .rodata, align 4
   \                     ?_54:
   \        0x0   0x6D 0x73          DC8 6DH, 73H, 67H, 6CH, 65H, 6EH, 20H, 28H
   \              0x67 0x6C    
   \              0x65 0x6E    
   \              0x20 0x28    
   \        0x8   0x25 0x64          DC8 25H, 64H, 29H, 20H, 3CH, 20H, 6DH, 61H
   \              0x29 0x20    
   \              0x3C 0x20    
   \              0x6D 0x61    
   \       0x10   0x78 0x28          DC8 78H, 28H, 20H, 69H, 76H, 6CH, 65H, 6EH
   \              0x20 0x69    
   \              0x76 0x6C    
   \              0x65 0x6E    
   \       0x18   0x28 0x25          DC8 28H, 25H, 64H, 29H, 2CH, 20H, 6DH, 61H
   \              0x64 0x29    
   \              0x2C 0x20    
   \              0x6D 0x61    
   \       0x20   0x63 0x6C          DC8 63H, 6CH, 65H, 6EH, 20H, 28H, 25H, 64H
   \              0x65 0x6E    
   \              0x20 0x28    
   \              0x25 0x64    
   \       0x28   0x29 0x20          DC8 29H, 20H, 2BH, 20H, 31H, 20H, 29H, 20H
   \              0x2B 0x20    
   \              0x31 0x20    
   \              0x29 0x20    
   \       0x30   0x28 0x20          DC8 28H, 20H, 2BH, 20H, 65H, 78H, 70H, 6CH
   \              0x2B 0x20    
   \              0x65 0x78    
   \              0x70 0x6C    
   \       0x38   0x20 0x49          DC8 20H, 49H, 56H, 20H, 29H, 0
   \              0x56 0x20    
   \              0x29 0x00    
   \       0x3E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_55:
   \        0x0   0x6D 0x65          DC8 "message  mac"
   \              0x73 0x73    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x20 0x6D    
   \              0x61 0x63    
   \              0x00         
   \        0xD   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_56:
   \        0x0   0x65 0x78          DC8 "expected mac"
   \              0x70 0x65    
   \              0x63 0x74    
   \              0x65 0x64    
   \              0x20 0x6D    
   \              0x61 0x63    
   \              0x00         
   \        0xD   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_57:
   \        0x0   0x6D 0x65          DC8 "message mac does not match"
   \              0x73 0x73    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x6D 0x61    
   \              0x63 0x20    
   \              0x64 0x6F    
   \              0x65 0x73    
   \              0x20 0x6E    
   \              0x6F 0x74    
   \              0x20 0x6D    
   \              0x61 0x74    
   \              0x63 0x68    
   \              0x00         
   \       0x1B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_58:
   \        0x0   0x6D 0x73          DC8 "msglen (%d) %% ivlen (%d) != 0"
   \              0x67 0x6C    
   \              0x65 0x6E    
   \              0x20 0x28    
   \              0x25 0x64    
   \              0x29 0x20    
   \              0x25 0x25    
   \              0x20 0x69    
   \              0x76 0x6C    
   \              0x65 0x6E    
   \              0x20 0x28    
   \              0x25 0x64    
   \              0x29 0x20    
   \              0x21 0x3D    
   \              0x20 0x30    
   \              0x00         
   \       0x1F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_59:
   \        0x0   0x69 0x6E          DC8 "invalid zero-length message type: %d"
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x7A 0x65    
   \              0x72 0x6F    
   \              0x2D 0x6C    
   \              0x65 0x6E    
   \              0x67 0x74    
   \              0x68 0x20    
   \              0x6D 0x65    
   \              0x73 0x73    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x74 0x79    
   \              0x70 0x65    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x00         
   \       0x25   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_60:
   \        0x0   0x72 0x65          DC8 72H, 65H, 63H, 65H, 69H, 76H, 65H, 64H
   \              0x63 0x65    
   \              0x69 0x76    
   \              0x65 0x64    
   \        0x8   0x20 0x66          DC8 20H, 66H, 6FH, 75H, 72H, 20H, 63H, 6FH
   \              0x6F 0x75    
   \              0x72 0x20    
   \              0x63 0x6F    
   \       0x10   0x6E 0x73          DC8 6EH, 73H, 65H, 63H, 75H, 74H, 69H, 76H
   \              0x65 0x63    
   \              0x75 0x74    
   \              0x69 0x76    
   \       0x18   0x65 0x20          DC8 65H, 20H, 65H, 6DH, 70H, 74H, 79H, 20H
   \              0x65 0x6D    
   \              0x70 0x74    
   \              0x79 0x20    
   \       0x20   0x6D 0x65          DC8 6DH, 65H, 73H, 73H, 61H, 67H, 65H, 73H
   \              0x73 0x73    
   \              0x61 0x67    
   \              0x65 0x73    
   \       0x28   0x2C 0x20          DC8 2CH, 20H, 70H, 6FH, 73H, 73H, 69H, 62H
   \              0x70 0x6F    
   \              0x73 0x73    
   \              0x69 0x62    
   \       0x30   0x6C 0x65          DC8 6CH, 65H, 20H, 44H, 6FH, 53H, 20H, 61H
   \              0x20 0x44    
   \              0x6F 0x53    
   \              0x20 0x61    
   \       0x38   0x74 0x74          DC8 74H, 74H, 61H, 63H, 6BH, 0
   \              0x61 0x63    
   \              0x6B 0x00    
   \       0x3E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_61:
   \        0x0   0x69 0x6E          DC8 "incoming message counter would wrap"
   \              0x63 0x6F    
   \              0x6D 0x69    
   \              0x6E 0x67    
   \              0x20 0x6D    
   \              0x65 0x73    
   \              0x73 0x61    
   \              0x67 0x65    
   \              0x20 0x63    
   \              0x6F 0x75    
   \              0x6E 0x74    
   \              0x65 0x72    
   \              0x20 0x77    
   \              0x6F 0x75    
   \              0x6C 0x64    
   \              0x20 0x77    
   \              0x72 0x61    
   \              0x70 0x00    

   \                                 In section .rodata, align 4
   \                     ?_62:
   \        0x0   0x3C 0x3D          DC8 "<= decrypt buf"
   \              0x20 0x64    
   \              0x65 0x63    
   \              0x72 0x79    
   \              0x70 0x74    
   \              0x20 0x62    
   \              0x75 0x66    
   \              0x00         
   \        0xF   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_63:
   \        0x0   0x6E 0x6F          DC8 "no longer retransmitting hello request"
   \              0x20 0x6C    
   \              0x6F 0x6E    
   \              0x67 0x65    
   \              0x72 0x20    
   \              0x72 0x65    
   \              0x74 0x72    
   \              0x61 0x6E    
   \              0x73 0x6D    
   \              0x69 0x74    
   \              0x74 0x69    
   \              0x6E 0x67    
   \              0x20 0x68    
   \              0x65 0x6C    
   \              0x6C 0x6F    
   \              0x20 0x72    
   \              0x65 0x71    
   \              0x75 0x65    
   \              0x73 0x74    
   \              0x00         
   \       0x27   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_64:
   \        0x0   0x3D 0x3E          DC8 "=> fetch input"
   \              0x20 0x66    
   \              0x65 0x74    
   \              0x63 0x68    
   \              0x20 0x69    
   \              0x6E 0x70    
   \              0x75 0x74    
   \              0x00         
   \        0xF   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_65:
   \        0x0   0x42 0x61          DC8 42H, 61H, 64H, 20H, 75H, 73H, 61H, 67H
   \              0x64 0x20    
   \              0x75 0x73    
   \              0x61 0x67    
   \        0x8   0x65 0x20          DC8 65H, 20H, 6FH, 66H, 20H, 6DH, 62H, 65H
   \              0x6F 0x66    
   \              0x20 0x6D    
   \              0x62 0x65    
   \       0x10   0x64 0x74          DC8 64H, 74H, 6CH, 73H, 5FH, 73H, 73H, 6CH
   \              0x6C 0x73    
   \              0x5F 0x73    
   \              0x73 0x6C    
   \       0x18   0x5F 0x73          DC8 5FH, 73H, 65H, 74H, 5FH, 62H, 69H, 6FH
   \              0x65 0x74    
   \              0x5F 0x62    
   \              0x69 0x6F    
   \       0x20   0x28 0x29          DC8 28H, 29H, 20H, 6FH, 72H, 20H, 6DH, 62H
   \              0x20 0x6F    
   \              0x72 0x20    
   \              0x6D 0x62    
   \       0x28   0x65 0x64          DC8 65H, 64H, 74H, 6CH, 73H, 5FH, 73H, 73H
   \              0x74 0x6C    
   \              0x73 0x5F    
   \              0x73 0x73    
   \       0x30   0x6C 0x5F          DC8 6CH, 5FH, 73H, 65H, 74H, 5FH, 62H, 69H
   \              0x73 0x65    
   \              0x74 0x5F    
   \              0x62 0x69    
   \       0x38   0x6F 0x28          DC8 6FH, 28H, 29H, 0
   \              0x29 0x00    

   \                                 In section .rodata, align 4
   \                     ?_66:
   \        0x0   0x72 0x65          DC8 "requesting more data than fits"
   \              0x71 0x75    
   \              0x65 0x73    
   \              0x74 0x69    
   \              0x6E 0x67    
   \              0x20 0x6D    
   \              0x6F 0x72    
   \              0x65 0x20    
   \              0x64 0x61    
   \              0x74 0x61    
   \              0x20 0x74    
   \              0x68 0x61    
   \              0x6E 0x20    
   \              0x66 0x69    
   \              0x74 0x73    
   \              0x00         
   \       0x1F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_67:
   \        0x0   0x59 0x6F          DC8 "You must use mbedtls_ssl_set_timer_cb() for DTLS"
   \              0x75 0x20    
   \              0x6D 0x75    
   \              0x73 0x74    
   \              0x20 0x75    
   \              0x73 0x65    
   \              0x20 0x6D    
   \              0x62 0x65    
   \              0x64 0x74    
   \              0x6C 0x73    
   \              0x5F 0x73    
   \              0x73 0x6C    
   \              0x5F 0x73    
   \              0x65 0x74    
   \              0x5F 0x74    
   \              0x69 0x6D    
   \              0x65 0x72    
   \              0x5F 0x63    
   \              0x62 0x28    
   \              0x29 0x20    
   \              0x66 0x6F    
   \              0x72 0x20    
   \              0x44 0x54    
   \              0x4C 0x53    
   \              0x00         
   \       0x31   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_68:
   \        0x0   0x6E 0x65          DC8 "next record in same datagram, offset: %d"
   \              0x78 0x74    
   \              0x20 0x72    
   \              0x65 0x63    
   \              0x6F 0x72    
   \              0x64 0x20    
   \              0x69 0x6E    
   \              0x20 0x73    
   \              0x61 0x6D    
   \              0x65 0x20    
   \              0x64 0x61    
   \              0x74 0x61    
   \              0x67 0x72    
   \              0x61 0x6D    
   \              0x2C 0x20    
   \              0x6F 0x66    
   \              0x66 0x73    
   \              0x65 0x74    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x00         
   \       0x29   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_69:
   \        0x0   0x69 0x6E          DC8 "in_left: %d, nb_want: %d"
   \              0x5F 0x6C    
   \              0x65 0x66    
   \              0x74 0x3A    
   \              0x20 0x25    
   \              0x64 0x2C    
   \              0x20 0x6E    
   \              0x62 0x5F    
   \              0x77 0x61    
   \              0x6E 0x74    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x00         
   \       0x19   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_70:
   \        0x0   0x3C 0x3D          DC8 "<= fetch input"
   \              0x20 0x66    
   \              0x65 0x74    
   \              0x63 0x68    
   \              0x20 0x69    
   \              0x6E 0x70    
   \              0x75 0x74    
   \              0x00         
   \        0xF   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_71:
   \        0x0   0x74 0x69          DC8 "timer has expired"
   \              0x6D 0x65    
   \              0x72 0x20    
   \              0x68 0x61    
   \              0x73 0x20    
   \              0x65 0x78    
   \              0x70 0x69    
   \              0x72 0x65    
   \              0x64 0x00    
   \       0x12   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_72:
   \        0x0   0x66 0x5F          DC8 "f_recv_timeout: %u ms"
   \              0x72 0x65    
   \              0x63 0x76    
   \              0x5F 0x74    
   \              0x69 0x6D    
   \              0x65 0x6F    
   \              0x75 0x74    
   \              0x3A 0x20    
   \              0x25 0x75    
   \              0x20 0x6D    
   \              0x73 0x00    
   \       0x16   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_73:
   \        0x0   0x73 0x73          DC8 "ssl->f_recv(_timeout)"
   \              0x6C 0x2D    
   \              0x3E 0x66    
   \              0x5F 0x72    
   \              0x65 0x63    
   \              0x76 0x28    
   \              0x5F 0x74    
   \              0x69 0x6D    
   \              0x65 0x6F    
   \              0x75 0x74    
   \              0x29 0x00    
   \       0x16   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_74:
   \        0x0   0x74 0x69          DC8 "timeout"
   \              0x6D 0x65    
   \              0x6F 0x75    
   \              0x74 0x00    

   \                                 In section .rodata, align 4
   \                     ?_75:
   \        0x0   0x68 0x61          DC8 "handshake timeout"
   \              0x6E 0x64    
   \              0x73 0x68    
   \              0x61 0x6B    
   \              0x65 0x20    
   \              0x74 0x69    
   \              0x6D 0x65    
   \              0x6F 0x75    
   \              0x74 0x00    
   \       0x12   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_76:
   \        0x0   0x6D 0x62          DC8 "mbedtls_ssl_resend"
   \              0x65 0x64    
   \              0x74 0x6C    
   \              0x73 0x5F    
   \              0x73 0x73    
   \              0x6C 0x5F    
   \              0x72 0x65    
   \              0x73 0x65    
   \              0x6E 0x64    
   \              0x00         
   \       0x13   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_77:
   \        0x0   0x73 0x73          DC8 "ssl_resend_hello_request"
   \              0x6C 0x5F    
   \              0x72 0x65    
   \              0x73 0x65    
   \              0x6E 0x64    
   \              0x5F 0x68    
   \              0x65 0x6C    
   \              0x6C 0x6F    
   \              0x5F 0x72    
   \              0x65 0x71    
   \              0x75 0x65    
   \              0x73 0x74    
   \              0x00         
   \       0x19   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_78:
   \        0x0   0x66 0x5F          DC8 66H, 5FH, 72H, 65H, 63H, 76H, 20H, 72H
   \              0x72 0x65    
   \              0x63 0x76    
   \              0x20 0x72    
   \        0x8   0x65 0x74          DC8 65H, 74H, 75H, 72H, 6EH, 65H, 64H, 20H
   \              0x75 0x72    
   \              0x6E 0x65    
   \              0x64 0x20    
   \       0x10   0x25 0x64          DC8 25H, 64H, 20H, 62H, 79H, 74H, 65H, 73H
   \              0x20 0x62    
   \              0x79 0x74    
   \              0x65 0x73    
   \       0x18   0x20 0x62          DC8 20H, 62H, 75H, 74H, 20H, 6FH, 6EH, 6CH
   \              0x75 0x74    
   \              0x20 0x6F    
   \              0x6E 0x6C    
   \       0x20   0x79 0x20          DC8 79H, 20H, 25H, 6CH, 75H, 20H, 77H, 65H
   \              0x25 0x6C    
   \              0x75 0x20    
   \              0x77 0x65    
   \       0x28   0x72 0x65          DC8 72H, 65H, 20H, 72H, 65H, 71H, 75H, 65H
   \              0x20 0x72    
   \              0x65 0x71    
   \              0x75 0x65    
   \       0x30   0x73 0x74          DC8 73H, 74H, 65H, 64H, 0
   \              0x65 0x64    
   \              0x00         
   \       0x35   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_79:
   \        0x0   0x3D 0x3E          DC8 "=> flush output"
   \              0x20 0x66    
   \              0x6C 0x75    
   \              0x73 0x68    
   \              0x20 0x6F    
   \              0x75 0x74    
   \              0x70 0x75    
   \              0x74 0x00    

   \                                 In section .rodata, align 4
   \                     ?_80:
   \        0x0   0x3C 0x3D          DC8 "<= flush output"
   \              0x20 0x66    
   \              0x6C 0x75    
   \              0x73 0x68    
   \              0x20 0x6F    
   \              0x75 0x74    
   \              0x70 0x75    
   \              0x74 0x00    

   \                                 In section .rodata, align 4
   \                     ?_81:
   \        0x0   0x6D 0x65          DC8 "message length: %d, out_left: %d"
   \              0x73 0x73    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x6C 0x65    
   \              0x6E 0x67    
   \              0x74 0x68    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x2C 0x20    
   \              0x6F 0x75    
   \              0x74 0x5F    
   \              0x6C 0x65    
   \              0x66 0x74    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x00         
   \       0x21   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_82:
   \        0x0   0x73 0x73          DC8 "ssl->f_send"
   \              0x6C 0x2D    
   \              0x3E 0x66    
   \              0x5F 0x73    
   \              0x65 0x6E    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     ?_83:
   \        0x0   0x66 0x5F          DC8 66H, 5FH, 73H, 65H, 6EH, 64H, 20H, 72H
   \              0x73 0x65    
   \              0x6E 0x64    
   \              0x20 0x72    
   \        0x8   0x65 0x74          DC8 65H, 74H, 75H, 72H, 6EH, 65H, 64H, 20H
   \              0x75 0x72    
   \              0x6E 0x65    
   \              0x64 0x20    
   \       0x10   0x25 0x64          DC8 25H, 64H, 20H, 62H, 79H, 74H, 65H, 73H
   \              0x20 0x62    
   \              0x79 0x74    
   \              0x65 0x73    
   \       0x18   0x20 0x62          DC8 20H, 62H, 75H, 74H, 20H, 6FH, 6EH, 6CH
   \              0x75 0x74    
   \              0x20 0x6F    
   \              0x6E 0x6C    
   \       0x20   0x79 0x20          DC8 79H, 20H, 25H, 6CH, 75H, 20H, 62H, 79H
   \              0x25 0x6C    
   \              0x75 0x20    
   \              0x62 0x79    
   \       0x28   0x74 0x65          DC8 74H, 65H, 73H, 20H, 77H, 65H, 72H, 65H
   \              0x73 0x20    
   \              0x77 0x65    
   \              0x72 0x65    
   \       0x30   0x20 0x73          DC8 20H, 73H, 65H, 6EH, 74H, 0
   \              0x65 0x6E    
   \              0x74 0x00    
   \       0x36   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_84:
   \        0x0   0x3D 0x3E          DC8 "=> ssl_flight_append"
   \              0x20 0x73    
   \              0x73 0x6C    
   \              0x5F 0x66    
   \              0x6C 0x69    
   \              0x67 0x68    
   \              0x74 0x5F    
   \              0x61 0x70    
   \              0x70 0x65    
   \              0x6E 0x64    
   \              0x00         
   \       0x15   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_85:
   \        0x0   0x6D 0x65          DC8 "message appended to flight"
   \              0x73 0x73    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x61 0x70    
   \              0x70 0x65    
   \              0x6E 0x64    
   \              0x65 0x64    
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x66 0x6C    
   \              0x69 0x67    
   \              0x68 0x74    
   \              0x00         
   \       0x1B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_86:
   \        0x0   0x61 0x6C          DC8 "alloc %d bytes failed"
   \              0x6C 0x6F    
   \              0x63 0x20    
   \              0x25 0x64    
   \              0x20 0x62    
   \              0x79 0x74    
   \              0x65 0x73    
   \              0x20 0x66    
   \              0x61 0x69    
   \              0x6C 0x65    
   \              0x64 0x00    
   \       0x16   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_87:
   \        0x0   0x3C 0x3D          DC8 "<= ssl_flight_append"
   \              0x20 0x73    
   \              0x73 0x6C    
   \              0x5F 0x66    
   \              0x6C 0x69    
   \              0x67 0x68    
   \              0x74 0x5F    
   \              0x61 0x70    
   \              0x70 0x65    
   \              0x6E 0x64    
   \              0x00         
   \       0x15   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_88:
   \        0x0   0x73 0x6B          DC8 "skip swap epochs"
   \              0x69 0x70    
   \              0x20 0x73    
   \              0x77 0x61    
   \              0x70 0x20    
   \              0x65 0x70    
   \              0x6F 0x63    
   \              0x68 0x73    
   \              0x00         
   \       0x11   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_89:
   \        0x0   0x73 0x77          DC8 "swap epochs"
   \              0x61 0x70    
   \              0x20 0x65    
   \              0x70 0x6F    
   \              0x63 0x68    
   \              0x73 0x00    

   \                                 In section .rodata, align 4
   \                     ?_90:
   \        0x0   0x3D 0x3E          DC8 "=> mbedtls_ssl_resend"
   \              0x20 0x6D    
   \              0x62 0x65    
   \              0x64 0x74    
   \              0x6C 0x73    
   \              0x5F 0x73    
   \              0x73 0x6C    
   \              0x5F 0x72    
   \              0x65 0x73    
   \              0x65 0x6E    
   \              0x64 0x00    
   \       0x16   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_91:
   \        0x0   0x3C 0x3D          DC8 "<= mbedtls_ssl_resend"
   \              0x20 0x6D    
   \              0x62 0x65    
   \              0x64 0x74    
   \              0x6C 0x73    
   \              0x5F 0x73    
   \              0x73 0x6C    
   \              0x5F 0x72    
   \              0x65 0x73    
   \              0x65 0x6E    
   \              0x64 0x00    
   \       0x16   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_92:
   \        0x0   0x3D 0x3E          DC8 "=> mbedtls_ssl_flight_transmit"
   \              0x20 0x6D    
   \              0x62 0x65    
   \              0x64 0x74    
   \              0x6C 0x73    
   \              0x5F 0x73    
   \              0x73 0x6C    
   \              0x5F 0x66    
   \              0x6C 0x69    
   \              0x67 0x68    
   \              0x74 0x5F    
   \              0x74 0x72    
   \              0x61 0x6E    
   \              0x73 0x6D    
   \              0x69 0x74    
   \              0x00         
   \       0x1F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_93:
   \        0x0   0x69 0x6E          DC8 "initialise flight transmission"
   \              0x69 0x74    
   \              0x69 0x61    
   \              0x6C 0x69    
   \              0x73 0x65    
   \              0x20 0x66    
   \              0x6C 0x69    
   \              0x67 0x68    
   \              0x74 0x20    
   \              0x74 0x72    
   \              0x61 0x6E    
   \              0x73 0x6D    
   \              0x69 0x73    
   \              0x73 0x69    
   \              0x6F 0x6E    
   \              0x00         
   \       0x1F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_94:
   \        0x0   0x73 0x77          DC8 "swap epochs to send finished message"
   \              0x61 0x70    
   \              0x20 0x65    
   \              0x70 0x6F    
   \              0x63 0x68    
   \              0x73 0x20    
   \              0x74 0x6F    
   \              0x20 0x73    
   \              0x65 0x6E    
   \              0x64 0x20    
   \              0x66 0x69    
   \              0x6E 0x69    
   \              0x73 0x68    
   \              0x65 0x64    
   \              0x20 0x6D    
   \              0x65 0x73    
   \              0x73 0x61    
   \              0x67 0x65    
   \              0x00         
   \       0x25   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_95:
   \        0x0   0x66 0x72          DC8 "fragmenting handshake message (%u > %u)"
   \              0x61 0x67    
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x68 0x61    
   \              0x6E 0x64    
   \              0x73 0x68    
   \              0x61 0x6B    
   \              0x65 0x20    
   \              0x6D 0x65    
   \              0x73 0x73    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x28 0x25    
   \              0x75 0x20    
   \              0x3E 0x20    
   \              0x25 0x75    
   \              0x29 0x00    

   \                                 In section .rodata, align 4
   \                     ?_96:
   \        0x0   0x68 0x61          DC8 "handshake header"
   \              0x6E 0x64    
   \              0x73 0x68    
   \              0x61 0x6B    
   \              0x65 0x20    
   \              0x68 0x65    
   \              0x61 0x64    
   \              0x65 0x72    
   \              0x00         
   \       0x11   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_97:
   \        0x0   0x6D 0x62          DC8 "mbedtls_ssl_write_record"
   \              0x65 0x64    
   \              0x74 0x6C    
   \              0x73 0x5F    
   \              0x73 0x73    
   \              0x6C 0x5F    
   \              0x77 0x72    
   \              0x69 0x74    
   \              0x65 0x5F    
   \              0x72 0x65    
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x00         
   \       0x19   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_98:
   \        0x0   0x3C 0x3D          DC8 "<= mbedtls_ssl_flight_transmit"
   \              0x20 0x6D    
   \              0x62 0x65    
   \              0x64 0x74    
   \              0x6C 0x73    
   \              0x5F 0x73    
   \              0x73 0x6C    
   \              0x5F 0x66    
   \              0x6C 0x69    
   \              0x67 0x68    
   \              0x74 0x5F    
   \              0x74 0x72    
   \              0x61 0x6E    
   \              0x73 0x6D    
   \              0x69 0x74    
   \              0x00         
   \       0x1F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_99:
   \        0x0   0x3D 0x3E          DC8 "=> write handshake message"
   \              0x20 0x77    
   \              0x72 0x69    
   \              0x74 0x65    
   \              0x20 0x68    
   \              0x61 0x6E    
   \              0x64 0x73    
   \              0x68 0x61    
   \              0x6B 0x65    
   \              0x20 0x6D    
   \              0x65 0x73    
   \              0x73 0x61    
   \              0x67 0x65    
   \              0x00         
   \       0x1B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_100:
   \        0x0   0x52 0x65          DC8 "Record too large: size %u, maximum %u"
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x20 0x74    
   \              0x6F 0x6F    
   \              0x20 0x6C    
   \              0x61 0x72    
   \              0x67 0x65    
   \              0x3A 0x20    
   \              0x73 0x69    
   \              0x7A 0x65    
   \              0x20 0x25    
   \              0x75 0x2C    
   \              0x20 0x6D    
   \              0x61 0x78    
   \              0x69 0x6D    
   \              0x75 0x6D    
   \              0x20 0x25    
   \              0x75 0x00    
   \       0x26   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_101:
   \        0x0   0x44 0x54          DC8 44H, 54H, 4CH, 53H, 20H, 68H, 61H, 6EH
   \              0x4C 0x53    
   \              0x20 0x68    
   \              0x61 0x6E    
   \        0x8   0x64 0x73          DC8 64H, 73H, 68H, 61H, 6BH, 65H, 20H, 6DH
   \              0x68 0x61    
   \              0x6B 0x65    
   \              0x20 0x6D    
   \       0x10   0x65 0x73          DC8 65H, 73H, 73H, 61H, 67H, 65H, 20H, 74H
   \              0x73 0x61    
   \              0x67 0x65    
   \              0x20 0x74    
   \       0x18   0x6F 0x6F          DC8 6FH, 6FH, 20H, 6CH, 61H, 72H, 67H, 65H
   \              0x20 0x6C    
   \              0x61 0x72    
   \              0x67 0x65    
   \       0x20   0x3A 0x20          DC8 3AH, 20H, 73H, 69H, 7AH, 65H, 20H, 25H
   \              0x73 0x69    
   \              0x7A 0x65    
   \              0x20 0x25    
   \       0x28   0x75 0x2C          DC8 75H, 2CH, 20H, 6DH, 61H, 78H, 69H, 6DH
   \              0x20 0x6D    
   \              0x61 0x78    
   \              0x69 0x6D    
   \       0x30   0x75 0x6D          DC8 75H, 6DH, 20H, 25H, 75H, 0
   \              0x20 0x25    
   \              0x75 0x00    
   \       0x36   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_102:
   \        0x0   0x73 0x73          DC8 "ssl_flight_append"
   \              0x6C 0x5F    
   \              0x66 0x6C    
   \              0x69 0x67    
   \              0x68 0x74    
   \              0x5F 0x61    
   \              0x70 0x70    
   \              0x65 0x6E    
   \              0x64 0x00    
   \       0x12   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_103:
   \        0x0   0x73 0x73          DC8 "ssl_write_record"
   \              0x6C 0x5F    
   \              0x77 0x72    
   \              0x69 0x74    
   \              0x65 0x5F    
   \              0x72 0x65    
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x00         
   \       0x11   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_104:
   \        0x0   0x3C 0x3D          DC8 "<= write handshake message"
   \              0x20 0x77    
   \              0x72 0x69    
   \              0x74 0x65    
   \              0x20 0x68    
   \              0x61 0x6E    
   \              0x64 0x73    
   \              0x68 0x61    
   \              0x6B 0x65    
   \              0x20 0x6D    
   \              0x65 0x73    
   \              0x73 0x61    
   \              0x67 0x65    
   \              0x00         
   \       0x1B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_105:
   \        0x0   0x3D 0x3E          DC8 "=> write record"
   \              0x20 0x77    
   \              0x72 0x69    
   \              0x74 0x65    
   \              0x20 0x72    
   \              0x65 0x63    
   \              0x6F 0x72    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     ?_106:
   \        0x0   0x73 0x73          DC8 "ssl_encrypt_buf"
   \              0x6C 0x5F    
   \              0x65 0x6E    
   \              0x63 0x72    
   \              0x79 0x70    
   \              0x74 0x5F    
   \              0x62 0x75    
   \              0x66 0x00    

   \                                 In section .rodata, align 4
   \                     ?_107:
   \        0x0   0x6F 0x75          DC8 6FH, 75H, 74H, 70H, 75H, 74H, 20H, 72H
   \              0x74 0x70    
   \              0x75 0x74    
   \              0x20 0x72    
   \        0x8   0x65 0x63          DC8 65H, 63H, 6FH, 72H, 64H, 3AH, 20H, 6DH
   \              0x6F 0x72    
   \              0x64 0x3A    
   \              0x20 0x6D    
   \       0x10   0x73 0x67          DC8 73H, 67H, 74H, 79H, 70H, 65H, 20H, 3DH
   \              0x74 0x79    
   \              0x70 0x65    
   \              0x20 0x3D    
   \       0x18   0x20 0x25          DC8 20H, 25H, 64H, 2CH, 20H, 76H, 65H, 72H
   \              0x64 0x2C    
   \              0x20 0x76    
   \              0x65 0x72    
   \       0x20   0x73 0x69          DC8 73H, 69H, 6FH, 6EH, 20H, 3DH, 20H, 5BH
   \              0x6F 0x6E    
   \              0x20 0x3D    
   \              0x20 0x5B    
   \       0x28   0x25 0x64          DC8 25H, 64H, 3AH, 25H, 64H, 5DH, 2CH, 20H
   \              0x3A 0x25    
   \              0x64 0x5D    
   \              0x2C 0x20    
   \       0x30   0x6D 0x73          DC8 6DH, 73H, 67H, 6CH, 65H, 6EH, 20H, 3DH
   \              0x67 0x6C    
   \              0x65 0x6E    
   \              0x20 0x3D    
   \       0x38   0x20 0x25          DC8 20H, 25H, 64H, 0
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     ?_108:
   \        0x0   0x6F 0x75          DC8 "output record sent to network"
   \              0x74 0x70    
   \              0x75 0x74    
   \              0x20 0x72    
   \              0x65 0x63    
   \              0x6F 0x72    
   \              0x64 0x20    
   \              0x73 0x65    
   \              0x6E 0x74    
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x6E 0x65    
   \              0x74 0x77    
   \              0x6F 0x72    
   \              0x6B 0x00    
   \       0x1E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_109:
   \        0x0   0x6F 0x75          DC8 "outgoing message counter would wrap"
   \              0x74 0x67    
   \              0x6F 0x69    
   \              0x6E 0x67    
   \              0x20 0x6D    
   \              0x65 0x73    
   \              0x73 0x61    
   \              0x67 0x65    
   \              0x20 0x63    
   \              0x6F 0x75    
   \              0x6E 0x74    
   \              0x65 0x72    
   \              0x20 0x77    
   \              0x6F 0x75    
   \              0x6C 0x64    
   \              0x20 0x77    
   \              0x72 0x61    
   \              0x70 0x00    

   \                                 In section .rodata, align 4
   \                     ?_110:
   \        0x0   0x73 0x73          DC8 "ssl_get_remaining_payload_in_datagram"
   \              0x6C 0x5F    
   \              0x67 0x65    
   \              0x74 0x5F    
   \              0x72 0x65    
   \              0x6D 0x61    
   \              0x69 0x6E    
   \              0x69 0x6E    
   \              0x67 0x5F    
   \              0x70 0x61    
   \              0x79 0x6C    
   \              0x6F 0x61    
   \              0x64 0x5F    
   \              0x69 0x6E    
   \              0x5F 0x64    
   \              0x61 0x74    
   \              0x61 0x67    
   \              0x72 0x61    
   \              0x6D 0x00    
   \       0x26   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_111:
   \        0x0   0x53 0x74          DC8 "Still %u bytes available in current datagram"
   \              0x69 0x6C    
   \              0x6C 0x20    
   \              0x25 0x75    
   \              0x20 0x62    
   \              0x79 0x74    
   \              0x65 0x73    
   \              0x20 0x61    
   \              0x76 0x61    
   \              0x69 0x6C    
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x20 0x69    
   \              0x6E 0x20    
   \              0x63 0x75    
   \              0x72 0x72    
   \              0x65 0x6E    
   \              0x74 0x20    
   \              0x64 0x61    
   \              0x74 0x61    
   \              0x67 0x72    
   \              0x61 0x6D    
   \              0x00         
   \       0x2D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_112:
   \        0x0   0x6D 0x62          DC8 "mbedtls_ssl_flush_output"
   \              0x65 0x64    
   \              0x74 0x6C    
   \              0x73 0x5F    
   \              0x73 0x73    
   \              0x6C 0x5F    
   \              0x66 0x6C    
   \              0x75 0x73    
   \              0x68 0x5F    
   \              0x6F 0x75    
   \              0x74 0x70    
   \              0x75 0x74    
   \              0x00         
   \       0x19   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_113:
   \        0x0   0x3C 0x3D          DC8 "<= write record"
   \              0x20 0x77    
   \              0x72 0x69    
   \              0x74 0x65    
   \              0x20 0x72    
   \              0x65 0x63    
   \              0x6F 0x72    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \        0x0   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \                     ?_115:
   \        0x0   0x68 0x61          DC8 "handshake message too short: %d"
   \              0x6E 0x64    
   \              0x73 0x68    
   \              0x61 0x6B    
   \              0x65 0x20    
   \              0x6D 0x65    
   \              0x73 0x73    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x74 0x6F    
   \              0x6F 0x20    
   \              0x73 0x68    
   \              0x6F 0x72    
   \              0x74 0x3A    
   \              0x20 0x25    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     ?_116:
   \        0x0   0x68 0x61          DC8 68H, 61H, 6EH, 64H, 73H, 68H, 61H, 6BH
   \              0x6E 0x64    
   \              0x73 0x68    
   \              0x61 0x6B    
   \        0x8   0x65 0x20          DC8 65H, 20H, 6DH, 65H, 73H, 73H, 61H, 67H
   \              0x6D 0x65    
   \              0x73 0x73    
   \              0x61 0x67    
   \       0x10   0x65 0x3A          DC8 65H, 3AH, 20H, 6DH, 73H, 67H, 6CH, 65H
   \              0x20 0x6D    
   \              0x73 0x67    
   \              0x6C 0x65    
   \       0x18   0x6E 0x20          DC8 6EH, 20H, 3DH, 20H, 25H, 64H, 2CH, 20H
   \              0x3D 0x20    
   \              0x25 0x64    
   \              0x2C 0x20    
   \       0x20   0x74 0x79          DC8 74H, 79H, 70H, 65H, 20H, 3DH, 20H, 25H
   \              0x70 0x65    
   \              0x20 0x3D    
   \              0x20 0x25    
   \       0x28   0x64 0x2C          DC8 64H, 2CH, 20H, 68H, 73H, 6CH, 65H, 6EH
   \              0x20 0x68    
   \              0x73 0x6C    
   \              0x65 0x6E    
   \       0x30   0x20 0x3D          DC8 20H, 3DH, 20H, 25H, 64H, 0
   \              0x20 0x25    
   \              0x64 0x00    
   \       0x36   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_117:
   \        0x0   0x69 0x6E          DC8 "invalid handshake header"
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x68 0x61    
   \              0x6E 0x64    
   \              0x73 0x68    
   \              0x61 0x6B    
   \              0x65 0x20    
   \              0x68 0x65    
   \              0x61 0x64    
   \              0x65 0x72    
   \              0x00         
   \       0x19   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_118:
   \        0x0   0x72 0x65          DC8 72H, 65H, 63H, 65H, 69H, 76H, 65H, 64H
   \              0x63 0x65    
   \              0x69 0x76    
   \              0x65 0x64    
   \        0x8   0x20 0x66          DC8 20H, 66H, 75H, 74H, 75H, 72H, 65H, 20H
   \              0x75 0x74    
   \              0x75 0x72    
   \              0x65 0x20    
   \       0x10   0x68 0x61          DC8 68H, 61H, 6EH, 64H, 73H, 68H, 61H, 6BH
   \              0x6E 0x64    
   \              0x73 0x68    
   \              0x61 0x6B    
   \       0x18   0x65 0x20          DC8 65H, 20H, 6DH, 65H, 73H, 73H, 61H, 67H
   \              0x6D 0x65    
   \              0x73 0x73    
   \              0x61 0x67    
   \       0x20   0x65 0x20          DC8 65H, 20H, 6FH, 66H, 20H, 73H, 65H, 71H
   \              0x6F 0x66    
   \              0x20 0x73    
   \              0x65 0x71    
   \       0x28   0x75 0x65          DC8 75H, 65H, 6EH, 63H, 65H, 20H, 6EH, 75H
   \              0x6E 0x63    
   \              0x65 0x20    
   \              0x6E 0x75    
   \       0x30   0x6D 0x62          DC8 6DH, 62H, 65H, 72H, 20H, 25H, 75H, 20H
   \              0x65 0x72    
   \              0x20 0x25    
   \              0x75 0x20    
   \       0x38   0x28 0x6E          DC8 28H, 6EH, 65H, 78H, 74H, 20H, 25H, 75H
   \              0x65 0x78    
   \              0x74 0x20    
   \              0x25 0x75    
   \       0x40   0x29 0x00          DC8 29H, 0
   \       0x42   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_119:
   \        0x0   0x72 0x65          DC8 72H, 65H, 63H, 65H, 69H, 76H, 65H, 64H
   \              0x63 0x65    
   \              0x69 0x76    
   \              0x65 0x64    
   \        0x8   0x20 0x6D          DC8 20H, 6DH, 65H, 73H, 73H, 61H, 67H, 65H
   \              0x65 0x73    
   \              0x73 0x61    
   \              0x67 0x65    
   \       0x10   0x20 0x66          DC8 20H, 66H, 72H, 6FH, 6DH, 20H, 6CH, 61H
   \              0x72 0x6F    
   \              0x6D 0x20    
   \              0x6C 0x61    
   \       0x18   0x73 0x74          DC8 73H, 74H, 20H, 66H, 6CH, 69H, 67H, 68H
   \              0x20 0x66    
   \              0x6C 0x69    
   \              0x67 0x68    
   \       0x20   0x74 0x2C          DC8 74H, 2CH, 20H, 6DH, 65H, 73H, 73H, 61H
   \              0x20 0x6D    
   \              0x65 0x73    
   \              0x73 0x61    
   \       0x28   0x67 0x65          DC8 67H, 65H, 5FH, 73H, 65H, 71H, 20H, 3DH
   \              0x5F 0x73    
   \              0x65 0x71    
   \              0x20 0x3D    
   \       0x30   0x20 0x25          DC8 20H, 25H, 64H, 2CH, 20H, 73H, 74H, 61H
   \              0x64 0x2C    
   \              0x20 0x73    
   \              0x74 0x61    
   \       0x38   0x72 0x74          DC8 72H, 74H, 5FH, 6FH, 66H, 5FH, 66H, 6CH
   \              0x5F 0x6F    
   \              0x66 0x5F    
   \              0x66 0x6C    
   \       0x40   0x69 0x67          DC8 69H, 67H, 68H, 74H, 20H, 3DH, 20H, 25H
   \              0x68 0x74    
   \              0x20 0x3D    
   \              0x20 0x25    
   \       0x48   0x64 0x00          DC8 64H, 0
   \       0x4A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_120:
   \        0x0   0x64 0x72          DC8 64H, 72H, 6FH, 70H, 70H, 69H, 6EH, 67H
   \              0x6F 0x70    
   \              0x70 0x69    
   \              0x6E 0x67    
   \        0x8   0x20 0x6F          DC8 20H, 6FH, 75H, 74H, 2DH, 6FH, 66H, 2DH
   \              0x75 0x74    
   \              0x2D 0x6F    
   \              0x66 0x2D    
   \       0x10   0x73 0x65          DC8 73H, 65H, 71H, 75H, 65H, 6EH, 63H, 65H
   \              0x71 0x75    
   \              0x65 0x6E    
   \              0x63 0x65    
   \       0x18   0x20 0x6D          DC8 20H, 6DH, 65H, 73H, 73H, 61H, 67H, 65H
   \              0x65 0x73    
   \              0x73 0x61    
   \              0x67 0x65    
   \       0x20   0x3A 0x20          DC8 3AH, 20H, 6DH, 65H, 73H, 73H, 61H, 67H
   \              0x6D 0x65    
   \              0x73 0x73    
   \              0x61 0x67    
   \       0x28   0x65 0x5F          DC8 65H, 5FH, 73H, 65H, 71H, 20H, 3DH, 20H
   \              0x73 0x65    
   \              0x71 0x20    
   \              0x3D 0x20    
   \       0x30   0x25 0x64          DC8 25H, 64H, 2CH, 20H, 65H, 78H, 70H, 65H
   \              0x2C 0x20    
   \              0x65 0x78    
   \              0x70 0x65    
   \       0x38   0x63 0x74          DC8 63H, 74H, 65H, 64H, 20H, 3DH, 20H, 25H
   \              0x65 0x64    
   \              0x20 0x3D    
   \              0x20 0x25    
   \       0x40   0x64 0x00          DC8 64H, 0
   \       0x42   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_121:
   \        0x0   0x66 0x6F          DC8 "found fragmented DTLS handshake message"
   \              0x75 0x6E    
   \              0x64 0x20    
   \              0x66 0x72    
   \              0x61 0x67    
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x65 0x64    
   \              0x20 0x44    
   \              0x54 0x4C    
   \              0x53 0x20    
   \              0x68 0x61    
   \              0x6E 0x64    
   \              0x73 0x68    
   \              0x61 0x6B    
   \              0x65 0x20    
   \              0x6D 0x65    
   \              0x73 0x73    
   \              0x61 0x67    
   \              0x65 0x00    

   \                                 In section .rodata, align 4
   \                     ?_122:
   \        0x0   0x54 0x4C          DC8 "TLS handshake fragmentation not supported"
   \              0x53 0x20    
   \              0x68 0x61    
   \              0x6E 0x64    
   \              0x73 0x68    
   \              0x61 0x6B    
   \              0x65 0x20    
   \              0x66 0x72    
   \              0x61 0x67    
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x73 0x75    
   \              0x70 0x70    
   \              0x6F 0x72    
   \              0x74 0x65    
   \              0x64 0x00    
   \       0x2A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_123:
   \        0x0   0x73 0x73          DC8 "ssl_check_dtls_clihlo_cookie"
   \              0x6C 0x5F    
   \              0x63 0x68    
   \              0x65 0x63    
   \              0x6B 0x5F    
   \              0x64 0x74    
   \              0x6C 0x73    
   \              0x5F 0x63    
   \              0x6C 0x69    
   \              0x68 0x6C    
   \              0x6F 0x5F    
   \              0x63 0x6F    
   \              0x6F 0x6B    
   \              0x69 0x65    
   \              0x00         
   \       0x1D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_124:
   \        0x0   0x72 0x65          DC8 "reset"
   \              0x73 0x65    
   \              0x74 0x00    
   \        0x6   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_125:
   \        0x0   0x69 0x6E          DC8 "input record header"
   \              0x70 0x75    
   \              0x74 0x20    
   \              0x72 0x65    
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x20 0x68    
   \              0x65 0x61    
   \              0x64 0x65    
   \              0x72 0x00    

   \                                 In section .rodata, align 4
   \                     ?_126:
   \        0x0   0x69 0x6E          DC8 69H, 6EH, 70H, 75H, 74H, 20H, 72H, 65H
   \              0x70 0x75    
   \              0x74 0x20    
   \              0x72 0x65    
   \        0x8   0x63 0x6F          DC8 63H, 6FH, 72H, 64H, 3AH, 20H, 6DH, 73H
   \              0x72 0x64    
   \              0x3A 0x20    
   \              0x6D 0x73    
   \       0x10   0x67 0x74          DC8 67H, 74H, 79H, 70H, 65H, 20H, 3DH, 20H
   \              0x79 0x70    
   \              0x65 0x20    
   \              0x3D 0x20    
   \       0x18   0x25 0x64          DC8 25H, 64H, 2CH, 20H, 76H, 65H, 72H, 73H
   \              0x2C 0x20    
   \              0x76 0x65    
   \              0x72 0x73    
   \       0x20   0x69 0x6F          DC8 69H, 6FH, 6EH, 20H, 3DH, 20H, 5BH, 25H
   \              0x6E 0x20    
   \              0x3D 0x20    
   \              0x5B 0x25    
   \       0x28   0x64 0x3A          DC8 64H, 3AH, 25H, 64H, 5DH, 2CH, 20H, 6DH
   \              0x25 0x64    
   \              0x5D 0x2C    
   \              0x20 0x6D    
   \       0x30   0x73 0x67          DC8 73H, 67H, 6CH, 65H, 6EH, 20H, 3DH, 20H
   \              0x6C 0x65    
   \              0x6E 0x20    
   \              0x3D 0x20    
   \       0x38   0x25 0x64          DC8 25H, 64H, 0
   \              0x00         
   \       0x3B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_127:
   \        0x0   0x75 0x6E          DC8 "unknown record type"
   \              0x6B 0x6E    
   \              0x6F 0x77    
   \              0x6E 0x20    
   \              0x72 0x65    
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x20 0x74    
   \              0x79 0x70    
   \              0x65 0x00    

   \                                 In section .rodata, align 4
   \                     ?_128:
   \        0x0   0x6D 0x61          DC8 "major version mismatch"
   \              0x6A 0x6F    
   \              0x72 0x20    
   \              0x76 0x65    
   \              0x72 0x73    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x6D 0x69    
   \              0x73 0x6D    
   \              0x61 0x74    
   \              0x63 0x68    
   \              0x00         
   \       0x17   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_129:
   \        0x0   0x6D 0x69          DC8 "minor version mismatch"
   \              0x6E 0x6F    
   \              0x72 0x20    
   \              0x76 0x65    
   \              0x72 0x73    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x6D 0x69    
   \              0x73 0x6D    
   \              0x61 0x74    
   \              0x63 0x68    
   \              0x00         
   \       0x17   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_130:
   \        0x0   0x62 0x61          DC8 "bad message length"
   \              0x64 0x20    
   \              0x6D 0x65    
   \              0x73 0x73    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x6C 0x65    
   \              0x6E 0x67    
   \              0x74 0x68    
   \              0x00         
   \       0x13   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_131:
   \        0x0   0x72 0x65          DC8 72H, 65H, 63H, 6FH, 72H, 64H, 20H, 66H
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x20 0x66    
   \        0x8   0x72 0x6F          DC8 72H, 6FH, 6DH, 20H, 61H, 6EH, 6FH, 74H
   \              0x6D 0x20    
   \              0x61 0x6E    
   \              0x6F 0x74    
   \       0x10   0x68 0x65          DC8 68H, 65H, 72H, 20H, 65H, 70H, 6FH, 63H
   \              0x72 0x20    
   \              0x65 0x70    
   \              0x6F 0x63    
   \       0x18   0x68 0x3A          DC8 68H, 3AH, 20H, 65H, 78H, 70H, 65H, 63H
   \              0x20 0x65    
   \              0x78 0x70    
   \              0x65 0x63    
   \       0x20   0x74 0x65          DC8 74H, 65H, 64H, 20H, 25H, 64H, 2CH, 20H
   \              0x64 0x20    
   \              0x25 0x64    
   \              0x2C 0x20    
   \       0x28   0x72 0x65          DC8 72H, 65H, 63H, 65H, 69H, 76H, 65H, 64H
   \              0x63 0x65    
   \              0x69 0x76    
   \              0x65 0x64    
   \       0x30   0x20 0x25          DC8 20H, 25H, 64H, 0
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     ?_132:
   \        0x0   0x70 0x6F          DC8 "possible client reconnect from the same port"
   \              0x73 0x73    
   \              0x69 0x62    
   \              0x6C 0x65    
   \              0x20 0x63    
   \              0x6C 0x69    
   \              0x65 0x6E    
   \              0x74 0x20    
   \              0x72 0x65    
   \              0x63 0x6F    
   \              0x6E 0x6E    
   \              0x65 0x63    
   \              0x74 0x20    
   \              0x66 0x72    
   \              0x6F 0x6D    
   \              0x20 0x74    
   \              0x68 0x65    
   \              0x20 0x73    
   \              0x61 0x6D    
   \              0x65 0x20    
   \              0x70 0x6F    
   \              0x72 0x74    
   \              0x00         
   \       0x2D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_133:
   \        0x0   0x43 0x6F          DC8 "Consider record for buffering"
   \              0x6E 0x73    
   \              0x69 0x64    
   \              0x65 0x72    
   \              0x20 0x72    
   \              0x65 0x63    
   \              0x6F 0x72    
   \              0x64 0x20    
   \              0x66 0x6F    
   \              0x72 0x20    
   \              0x62 0x75    
   \              0x66 0x66    
   \              0x65 0x72    
   \              0x69 0x6E    
   \              0x67 0x00    
   \       0x1E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_134:
   \        0x0   0x72 0x65          DC8 "replayed record"
   \              0x70 0x6C    
   \              0x61 0x79    
   \              0x65 0x64    
   \              0x20 0x72    
   \              0x65 0x63    
   \              0x6F 0x72    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     ?_135:
   \        0x0   0x64 0x72          DC8 "dropping unexpected ApplicationData"
   \              0x6F 0x70    
   \              0x70 0x69    
   \              0x6E 0x67    
   \              0x20 0x75    
   \              0x6E 0x65    
   \              0x78 0x70    
   \              0x65 0x63    
   \              0x74 0x65    
   \              0x64 0x20    
   \              0x41 0x70    
   \              0x70 0x6C    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x44    
   \              0x61 0x74    
   \              0x61 0x00    

   \                                 In section .rodata, align 4
   \                     ?_136:
   \        0x0   0x69 0x6E          DC8 "input record from network"
   \              0x70 0x75    
   \              0x74 0x20    
   \              0x72 0x65    
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x20 0x66    
   \              0x72 0x6F    
   \              0x6D 0x20    
   \              0x6E 0x65    
   \              0x74 0x77    
   \              0x6F 0x72    
   \              0x6B 0x00    
   \       0x1A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_137:
   \        0x0   0x73 0x73          DC8 "ssl_decrypt_buf"
   \              0x6C 0x5F    
   \              0x64 0x65    
   \              0x63 0x72    
   \              0x79 0x70    
   \              0x74 0x5F    
   \              0x62 0x75    
   \              0x66 0x00    

   \                                 In section .rodata, align 4
   \                     ?_138:
   \        0x0   0x69 0x6E          DC8 "input payload after decrypt"
   \              0x70 0x75    
   \              0x74 0x20    
   \              0x70 0x61    
   \              0x79 0x6C    
   \              0x6F 0x61    
   \              0x64 0x20    
   \              0x61 0x66    
   \              0x74 0x65    
   \              0x72 0x20    
   \              0x64 0x65    
   \              0x63 0x72    
   \              0x79 0x70    
   \              0x74 0x00    

   \                                 In section .rodata, align 4
   \                     ?_139:
   \        0x0   0x3D 0x3E          DC8 "=> read record"
   \              0x20 0x72    
   \              0x65 0x61    
   \              0x64 0x20    
   \              0x72 0x65    
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x00         
   \        0xF   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_140:
   \        0x0   0x73 0x73          DC8 "ssl_get_next_record"
   \              0x6C 0x5F    
   \              0x67 0x65    
   \              0x74 0x5F    
   \              0x6E 0x65    
   \              0x78 0x74    
   \              0x5F 0x72    
   \              0x65 0x63    
   \              0x6F 0x72    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     ?_141:
   \        0x0   0x6D 0x62          DC8 "mbedtls_ssl_handle_message_type"
   \              0x65 0x64    
   \              0x74 0x6C    
   \              0x73 0x5F    
   \              0x73 0x73    
   \              0x6C 0x5F    
   \              0x68 0x61    
   \              0x6E 0x64    
   \              0x6C 0x65    
   \              0x5F 0x6D    
   \              0x65 0x73    
   \              0x73 0x61    
   \              0x67 0x65    
   \              0x5F 0x74    
   \              0x79 0x70    
   \              0x65 0x00    

   \                                 In section .rodata, align 4
   \                     ?_142:
   \        0x0   0x72 0x65          DC8 "reuse previously read message"
   \              0x75 0x73    
   \              0x65 0x20    
   \              0x70 0x72    
   \              0x65 0x76    
   \              0x69 0x6F    
   \              0x75 0x73    
   \              0x6C 0x79    
   \              0x20 0x72    
   \              0x65 0x61    
   \              0x64 0x20    
   \              0x6D 0x65    
   \              0x73 0x73    
   \              0x61 0x67    
   \              0x65 0x00    
   \       0x1E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_143:
   \        0x0   0x3C 0x3D          DC8 "<= read record"
   \              0x20 0x72    
   \              0x65 0x61    
   \              0x64 0x20    
   \              0x72 0x65    
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x00         
   \        0xF   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_144:
   \        0x0   0x3D 0x3E          DC8 "=> ssl_load_buffered_messsage"
   \              0x20 0x73    
   \              0x73 0x6C    
   \              0x5F 0x6C    
   \              0x6F 0x61    
   \              0x64 0x5F    
   \              0x62 0x75    
   \              0x66 0x66    
   \              0x65 0x72    
   \              0x65 0x64    
   \              0x5F 0x6D    
   \              0x65 0x73    
   \              0x73 0x73    
   \              0x61 0x67    
   \              0x65 0x00    
   \       0x1E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_145:
   \        0x0   0x43 0x43          DC8 "CCS not seen in the current flight"
   \              0x53 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x73 0x65    
   \              0x65 0x6E    
   \              0x20 0x69    
   \              0x6E 0x20    
   \              0x74 0x68    
   \              0x65 0x20    
   \              0x63 0x75    
   \              0x72 0x72    
   \              0x65 0x6E    
   \              0x74 0x20    
   \              0x66 0x6C    
   \              0x69 0x67    
   \              0x68 0x74    
   \              0x00         
   \       0x23   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_146:
   \        0x0   0x49 0x6E          DC8 "Injecting buffered CCS message"
   \              0x6A 0x65    
   \              0x63 0x74    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x62 0x75    
   \              0x66 0x66    
   \              0x65 0x72    
   \              0x65 0x64    
   \              0x20 0x43    
   \              0x43 0x53    
   \              0x20 0x6D    
   \              0x65 0x73    
   \              0x73 0x61    
   \              0x67 0x65    
   \              0x00         
   \       0x1F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_147:
   \        0x0   0x46 0x75          DC8 46H, 75H, 74H, 75H, 72H, 65H, 20H, 6DH
   \              0x74 0x75    
   \              0x72 0x65    
   \              0x20 0x6D    
   \        0x8   0x65 0x73          DC8 65H, 73H, 73H, 61H, 67H, 65H, 20H, 77H
   \              0x73 0x61    
   \              0x67 0x65    
   \              0x20 0x77    
   \       0x10   0x69 0x74          DC8 69H, 74H, 68H, 20H, 73H, 65H, 71H, 75H
   \              0x68 0x20    
   \              0x73 0x65    
   \              0x71 0x75    
   \       0x18   0x65 0x6E          DC8 65H, 6EH, 63H, 65H, 20H, 6EH, 75H, 6DH
   \              0x63 0x65    
   \              0x20 0x6E    
   \              0x75 0x6D    
   \       0x20   0x62 0x65          DC8 62H, 65H, 72H, 20H, 25H, 75H, 20H, 25H
   \              0x72 0x20    
   \              0x25 0x75    
   \              0x20 0x25    
   \       0x28   0x73 0x20          DC8 73H, 20H, 62H, 75H, 66H, 66H, 65H, 72H
   \              0x62 0x75    
   \              0x66 0x66    
   \              0x65 0x72    
   \       0x30   0x65 0x64          DC8 65H, 64H, 2EH, 0
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_148:
   \        0x0   0x66 0x75          DC8 "fully"
   \              0x6C 0x6C    
   \              0x79 0x00    
   \        0x6   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_149:
   \        0x0   0x70 0x61          DC8 "partially"
   \              0x72 0x74    
   \              0x69 0x61    
   \              0x6C 0x6C    
   \              0x79 0x00    
   \        0xA   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_150:
   \        0x0   0x4E 0x65          DC8 "Next handshake message has been buffered - load"
   \              0x78 0x74    
   \              0x20 0x68    
   \              0x61 0x6E    
   \              0x64 0x73    
   \              0x68 0x61    
   \              0x6B 0x65    
   \              0x20 0x6D    
   \              0x65 0x73    
   \              0x73 0x61    
   \              0x67 0x65    
   \              0x20 0x68    
   \              0x61 0x73    
   \              0x20 0x62    
   \              0x65 0x65    
   \              0x6E 0x20    
   \              0x62 0x75    
   \              0x66 0x66    
   \              0x65 0x72    
   \              0x65 0x64    
   \              0x20 0x2D    
   \              0x20 0x6C    
   \              0x6F 0x61    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     ?_151:
   \        0x0   0x42 0x75          DC8 "Buffered handshake message (incl. header)"
   \              0x66 0x66    
   \              0x65 0x72    
   \              0x65 0x64    
   \              0x20 0x68    
   \              0x61 0x6E    
   \              0x64 0x73    
   \              0x68 0x61    
   \              0x6B 0x65    
   \              0x20 0x6D    
   \              0x65 0x73    
   \              0x73 0x61    
   \              0x67 0x65    
   \              0x20 0x28    
   \              0x69 0x6E    
   \              0x63 0x6C    
   \              0x2E 0x20    
   \              0x68 0x65    
   \              0x61 0x64    
   \              0x65 0x72    
   \              0x29 0x00    
   \       0x2A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_152:
   \        0x0   0x4E 0x65          DC8 4EH, 65H, 78H, 74H, 20H, 68H, 61H, 6EH
   \              0x78 0x74    
   \              0x20 0x68    
   \              0x61 0x6E    
   \        0x8   0x64 0x73          DC8 64H, 73H, 68H, 61H, 6BH, 65H, 20H, 6DH
   \              0x68 0x61    
   \              0x6B 0x65    
   \              0x20 0x6D    
   \       0x10   0x65 0x73          DC8 65H, 73H, 73H, 61H, 67H, 65H, 20H, 25H
   \              0x73 0x61    
   \              0x67 0x65    
   \              0x20 0x25    
   \       0x18   0x75 0x20          DC8 75H, 20H, 6EH, 6FH, 74H, 20H, 6FH, 72H
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x6F 0x72    
   \       0x20   0x20 0x6F          DC8 20H, 6FH, 6EH, 6CH, 79H, 20H, 70H, 61H
   \              0x6E 0x6C    
   \              0x79 0x20    
   \              0x70 0x61    
   \       0x28   0x72 0x74          DC8 72H, 74H, 69H, 61H, 6CH, 6CH, 79H, 20H
   \              0x69 0x61    
   \              0x6C 0x6C    
   \              0x79 0x20    
   \       0x30   0x62 0x75          DC8 62H, 75H, 66H, 66H, 66H, 65H, 72H, 65H
   \              0x66 0x66    
   \              0x66 0x65    
   \              0x72 0x65    
   \       0x38   0x64 0x00          DC8 64H, 0
   \       0x3A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_153:
   \        0x0   0x3C 0x3D          DC8 "<= ssl_load_buffered_message"
   \              0x20 0x73    
   \              0x73 0x6C    
   \              0x5F 0x6C    
   \              0x6F 0x61    
   \              0x64 0x5F    
   \              0x62 0x75    
   \              0x66 0x66    
   \              0x65 0x72    
   \              0x65 0x64    
   \              0x5F 0x6D    
   \              0x65 0x73    
   \              0x73 0x61    
   \              0x67 0x65    
   \              0x00         
   \       0x1D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_154:
   \        0x0   0x41 0x74          DC8 41H, 74H, 74H, 65H, 6DH, 70H, 74H, 20H
   \              0x74 0x65    
   \              0x6D 0x70    
   \              0x74 0x20    
   \        0x8   0x74 0x6F          DC8 74H, 6FH, 20H, 66H, 72H, 65H, 65H, 20H
   \              0x20 0x66    
   \              0x72 0x65    
   \              0x65 0x20    
   \       0x10   0x62 0x75          DC8 62H, 75H, 66H, 66H, 65H, 72H, 65H, 64H
   \              0x66 0x66    
   \              0x65 0x72    
   \              0x65 0x64    
   \       0x18   0x20 0x6D          DC8 20H, 6DH, 65H, 73H, 73H, 61H, 67H, 65H
   \              0x65 0x73    
   \              0x73 0x61    
   \              0x67 0x65    
   \       0x20   0x73 0x20          DC8 73H, 20H, 74H, 6FH, 20H, 68H, 61H, 76H
   \              0x74 0x6F    
   \              0x20 0x68    
   \              0x61 0x76    
   \       0x28   0x65 0x20          DC8 65H, 20H, 25H, 75H, 20H, 62H, 79H, 74H
   \              0x25 0x75    
   \              0x20 0x62    
   \              0x79 0x74    
   \       0x30   0x65 0x73          DC8 65H, 73H, 20H, 61H, 76H, 61H, 69H, 6CH
   \              0x20 0x61    
   \              0x76 0x61    
   \              0x69 0x6C    
   \       0x38   0x61 0x62          DC8 61H, 62H, 6CH, 65H, 0
   \              0x6C 0x65    
   \              0x00         
   \       0x3D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_155:
   \        0x0   0x45 0x6E          DC8 45H, 6EH, 6FH, 75H, 67H, 68H, 20H, 73H
   \              0x6F 0x75    
   \              0x67 0x68    
   \              0x20 0x73    
   \        0x8   0x70 0x61          DC8 70H, 61H, 63H, 65H, 20H, 61H, 76H, 61H
   \              0x63 0x65    
   \              0x20 0x61    
   \              0x76 0x61    
   \       0x10   0x69 0x6C          DC8 69H, 6CH, 61H, 62H, 6CH, 65H, 20H, 61H
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x20 0x61    
   \       0x18   0x66 0x74          DC8 66H, 74H, 65H, 72H, 20H, 66H, 72H, 65H
   \              0x65 0x72    
   \              0x20 0x66    
   \              0x72 0x65    
   \       0x20   0x65 0x69          DC8 65H, 69H, 6EH, 67H, 20H, 66H, 75H, 74H
   \              0x6E 0x67    
   \              0x20 0x66    
   \              0x75 0x74    
   \       0x28   0x75 0x72          DC8 75H, 72H, 65H, 20H, 65H, 70H, 6FH, 63H
   \              0x65 0x20    
   \              0x65 0x70    
   \              0x6F 0x63    
   \       0x30   0x68 0x20          DC8 68H, 20H, 72H, 65H, 63H, 6FH, 72H, 64H
   \              0x72 0x65    
   \              0x63 0x6F    
   \              0x72 0x64    
   \       0x38   0x00               DC8 0
   \       0x39   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_156:
   \        0x0   0x46 0x72          DC8 46H, 72H, 65H, 65H, 20H, 62H, 75H, 66H
   \              0x65 0x65    
   \              0x20 0x62    
   \              0x75 0x66    
   \        0x8   0x66 0x65          DC8 66H, 65H, 72H, 69H, 6EH, 67H, 20H, 73H
   \              0x72 0x69    
   \              0x6E 0x67    
   \              0x20 0x73    
   \       0x10   0x6C 0x6F          DC8 6CH, 6FH, 74H, 20H, 25H, 64H, 20H, 74H
   \              0x74 0x20    
   \              0x25 0x64    
   \              0x20 0x74    
   \       0x18   0x6F 0x20          DC8 6FH, 20H, 6DH, 61H, 6BH, 65H, 20H, 73H
   \              0x6D 0x61    
   \              0x6B 0x65    
   \              0x20 0x73    
   \       0x20   0x70 0x61          DC8 70H, 61H, 63H, 65H, 20H, 66H, 6FH, 72H
   \              0x63 0x65    
   \              0x20 0x66    
   \              0x6F 0x72    
   \       0x28   0x20 0x72          DC8 20H, 72H, 65H, 61H, 73H, 73H, 65H, 6DH
   \              0x65 0x61    
   \              0x73 0x73    
   \              0x65 0x6D    
   \       0x30   0x62 0x6C          DC8 62H, 6CH, 79H, 20H, 6FH, 66H, 20H, 6EH
   \              0x79 0x20    
   \              0x6F 0x66    
   \              0x20 0x6E    
   \       0x38   0x65 0x78          DC8 65H, 78H, 74H, 20H, 68H, 61H, 6EH, 64H
   \              0x74 0x20    
   \              0x68 0x61    
   \              0x6E 0x64    
   \       0x40   0x73 0x68          DC8 73H, 68H, 61H, 6BH, 65H, 20H, 6DH, 65H
   \              0x61 0x6B    
   \              0x65 0x20    
   \              0x6D 0x65    
   \       0x48   0x73 0x73          DC8 73H, 73H, 61H, 67H, 65H, 0
   \              0x61 0x67    
   \              0x65 0x00    
   \       0x4E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_157:
   \        0x0   0x45 0x6E          DC8 45H, 6EH, 6FH, 75H, 67H, 68H, 20H, 73H
   \              0x6F 0x75    
   \              0x67 0x68    
   \              0x20 0x73    
   \        0x8   0x70 0x61          DC8 70H, 61H, 63H, 65H, 20H, 61H, 76H, 61H
   \              0x63 0x65    
   \              0x20 0x61    
   \              0x76 0x61    
   \       0x10   0x69 0x6C          DC8 69H, 6CH, 61H, 62H, 6CH, 65H, 20H, 61H
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x20 0x61    
   \       0x18   0x66 0x74          DC8 66H, 74H, 65H, 72H, 20H, 66H, 72H, 65H
   \              0x65 0x72    
   \              0x20 0x66    
   \              0x72 0x65    
   \       0x20   0x65 0x69          DC8 65H, 69H, 6EH, 67H, 20H, 62H, 75H, 66H
   \              0x6E 0x67    
   \              0x20 0x62    
   \              0x75 0x66    
   \       0x28   0x66 0x65          DC8 66H, 65H, 72H, 65H, 64H, 20H, 48H, 53H
   \              0x72 0x65    
   \              0x64 0x20    
   \              0x48 0x53    
   \       0x30   0x20 0x6D          DC8 20H, 6DH, 65H, 73H, 73H, 61H, 67H, 65H
   \              0x65 0x73    
   \              0x73 0x61    
   \              0x67 0x65    
   \       0x38   0x73 0x00          DC8 73H, 0
   \       0x3A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_158:
   \        0x0   0x3D 0x3E          DC8 "=> ssl_buffer_message"
   \              0x20 0x73    
   \              0x73 0x6C    
   \              0x5F 0x62    
   \              0x75 0x66    
   \              0x66 0x65    
   \              0x72 0x5F    
   \              0x6D 0x65    
   \              0x73 0x73    
   \              0x61 0x67    
   \              0x65 0x00    
   \       0x16   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_159:
   \        0x0   0x52 0x65          DC8 "Remember CCS message"
   \              0x6D 0x65    
   \              0x6D 0x62    
   \              0x65 0x72    
   \              0x20 0x43    
   \              0x43 0x53    
   \              0x20 0x6D    
   \              0x65 0x73    
   \              0x73 0x61    
   \              0x67 0x65    
   \              0x00         
   \       0x15   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_160:
   \        0x0   0x49 0x67          DC8 49H, 67H, 6EH, 6FH, 72H, 65H, 20H, 66H
   \              0x6E 0x6F    
   \              0x72 0x65    
   \              0x20 0x66    
   \        0x8   0x75 0x74          DC8 75H, 74H, 75H, 72H, 65H, 20H, 48H, 53H
   \              0x75 0x72    
   \              0x65 0x20    
   \              0x48 0x53    
   \       0x10   0x20 0x6D          DC8 20H, 6DH, 65H, 73H, 73H, 61H, 67H, 65H
   \              0x65 0x73    
   \              0x73 0x61    
   \              0x67 0x65    
   \       0x18   0x20 0x77          DC8 20H, 77H, 69H, 74H, 68H, 20H, 73H, 65H
   \              0x69 0x74    
   \              0x68 0x20    
   \              0x73 0x65    
   \       0x20   0x71 0x75          DC8 71H, 75H, 65H, 6EH, 63H, 65H, 20H, 6EH
   \              0x65 0x6E    
   \              0x63 0x65    
   \              0x20 0x6E    
   \       0x28   0x75 0x6D          DC8 75H, 6DH, 62H, 65H, 72H, 20H, 25H, 75H
   \              0x62 0x65    
   \              0x72 0x20    
   \              0x25 0x75    
   \       0x30   0x2C 0x20          DC8 2CH, 20H, 62H, 75H, 66H, 66H, 65H, 72H
   \              0x62 0x75    
   \              0x66 0x66    
   \              0x65 0x72    
   \       0x38   0x69 0x6E          DC8 69H, 6EH, 67H, 20H, 77H, 69H, 6EH, 64H
   \              0x67 0x20    
   \              0x77 0x69    
   \              0x6E 0x64    
   \       0x40   0x6F 0x77          DC8 6FH, 77H, 20H, 25H, 75H, 20H, 2DH, 20H
   \              0x20 0x25    
   \              0x75 0x20    
   \              0x2D 0x20    
   \       0x48   0x25 0x75          DC8 25H, 75H, 0
   \              0x00         
   \       0x4B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_161:
   \        0x0   0x42 0x75          DC8 42H, 75H, 66H, 66H, 65H, 72H, 69H, 6EH
   \              0x66 0x66    
   \              0x65 0x72    
   \              0x69 0x6E    
   \        0x8   0x67 0x20          DC8 67H, 20H, 48H, 53H, 20H, 6DH, 65H, 73H
   \              0x48 0x53    
   \              0x20 0x6D    
   \              0x65 0x73    
   \       0x10   0x73 0x61          DC8 73H, 61H, 67H, 65H, 20H, 77H, 69H, 74H
   \              0x67 0x65    
   \              0x20 0x77    
   \              0x69 0x74    
   \       0x18   0x68 0x20          DC8 68H, 20H, 73H, 65H, 71H, 75H, 65H, 6EH
   \              0x73 0x65    
   \              0x71 0x75    
   \              0x65 0x6E    
   \       0x20   0x63 0x65          DC8 63H, 65H, 20H, 6EH, 75H, 6DH, 62H, 65H
   \              0x20 0x6E    
   \              0x75 0x6D    
   \              0x62 0x65    
   \       0x28   0x72 0x20          DC8 72H, 20H, 25H, 75H, 2CH, 20H, 6FH, 66H
   \              0x25 0x75    
   \              0x2C 0x20    
   \              0x6F 0x66    
   \       0x30   0x66 0x73          DC8 66H, 73H, 65H, 74H, 20H, 25H, 75H, 20H
   \              0x65 0x74    
   \              0x20 0x25    
   \              0x75 0x20    
   \       0x38   0x00               DC8 0
   \       0x39   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_162:
   \        0x0   0x42 0x75          DC8 42H, 75H, 66H, 66H, 65H, 72H, 69H, 6EH
   \              0x66 0x66    
   \              0x65 0x72    
   \              0x69 0x6E    
   \        0x8   0x67 0x20          DC8 67H, 20H, 6FH, 66H, 20H, 66H, 75H, 74H
   \              0x6F 0x66    
   \              0x20 0x66    
   \              0x75 0x74    
   \       0x10   0x75 0x72          DC8 75H, 72H, 65H, 20H, 6DH, 65H, 73H, 73H
   \              0x65 0x20    
   \              0x6D 0x65    
   \              0x73 0x73    
   \       0x18   0x61 0x67          DC8 61H, 67H, 65H, 20H, 6FH, 66H, 20H, 73H
   \              0x65 0x20    
   \              0x6F 0x66    
   \              0x20 0x73    
   \       0x20   0x69 0x7A          DC8 69H, 7AH, 65H, 20H, 25H, 75H, 20H, 77H
   \              0x65 0x20    
   \              0x25 0x75    
   \              0x20 0x77    
   \       0x28   0x6F 0x75          DC8 6FH, 75H, 6CH, 64H, 20H, 65H, 78H, 63H
   \              0x6C 0x64    
   \              0x20 0x65    
   \              0x78 0x63    
   \       0x30   0x65 0x65          DC8 65H, 65H, 64H, 20H, 74H, 68H, 65H, 20H
   \              0x64 0x20    
   \              0x74 0x68    
   \              0x65 0x20    
   \       0x38   0x63 0x6F          DC8 63H, 6FH, 6DH, 70H, 69H, 6CH, 65H, 2DH
   \              0x6D 0x70    
   \              0x69 0x6C    
   \              0x65 0x2D    
   \       0x40   0x74 0x69          DC8 74H, 69H, 6DH, 65H, 20H, 6CH, 69H, 6DH
   \              0x6D 0x65    
   \              0x20 0x6C    
   \              0x69 0x6D    
   \       0x48   0x69 0x74          DC8 69H, 74H, 20H, 25H, 75H, 20H, 28H, 61H
   \              0x20 0x25    
   \              0x75 0x20    
   \              0x28 0x61    
   \       0x50   0x6C 0x72          DC8 6CH, 72H, 65H, 61H, 64H, 79H, 20H, 25H
   \              0x65 0x61    
   \              0x64 0x79    
   \              0x20 0x25    
   \       0x58   0x75 0x20          DC8 75H, 20H, 62H, 79H, 74H, 65H, 73H, 20H
   \              0x62 0x79    
   \              0x74 0x65    
   \              0x73 0x20    
   \       0x60   0x62 0x75          DC8 62H, 75H, 66H, 66H, 65H, 72H, 65H, 64H
   \              0x66 0x66    
   \              0x65 0x72    
   \              0x65 0x64    
   \       0x68   0x29 0x20          DC8 29H, 20H, 2DH, 2DH, 20H, 69H, 67H, 6EH
   \              0x2D 0x2D    
   \              0x20 0x69    
   \              0x67 0x6E    
   \       0x70   0x6F 0x72          DC8 6FH, 72H, 65H, 0AH, 0
   \              0x65 0x0A    
   \              0x00         
   \       0x75   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_163:
   \        0x0   0x42 0x75          DC8 42H, 75H, 66H, 66H, 65H, 72H, 69H, 6EH
   \              0x66 0x66    
   \              0x65 0x72    
   \              0x69 0x6E    
   \        0x8   0x67 0x20          DC8 67H, 20H, 6FH, 66H, 20H, 66H, 75H, 74H
   \              0x6F 0x66    
   \              0x20 0x66    
   \              0x75 0x74    
   \       0x10   0x75 0x72          DC8 75H, 72H, 65H, 20H, 6DH, 65H, 73H, 73H
   \              0x65 0x20    
   \              0x6D 0x65    
   \              0x73 0x73    
   \       0x18   0x61 0x67          DC8 61H, 67H, 65H, 20H, 6FH, 66H, 20H, 73H
   \              0x65 0x20    
   \              0x6F 0x66    
   \              0x20 0x73    
   \       0x20   0x69 0x7A          DC8 69H, 7AH, 65H, 20H, 25H, 75H, 20H, 77H
   \              0x65 0x20    
   \              0x25 0x75    
   \              0x20 0x77    
   \       0x28   0x6F 0x75          DC8 6FH, 75H, 6CH, 64H, 20H, 65H, 78H, 63H
   \              0x6C 0x64    
   \              0x20 0x65    
   \              0x78 0x63    
   \       0x30   0x65 0x65          DC8 65H, 65H, 64H, 20H, 74H, 68H, 65H, 20H
   \              0x64 0x20    
   \              0x74 0x68    
   \              0x65 0x20    
   \       0x38   0x63 0x6F          DC8 63H, 6FH, 6DH, 70H, 69H, 6CH, 65H, 2DH
   \              0x6D 0x70    
   \              0x69 0x6C    
   \              0x65 0x2D    
   \       0x40   0x74 0x69          DC8 74H, 69H, 6DH, 65H, 20H, 6CH, 69H, 6DH
   \              0x6D 0x65    
   \              0x20 0x6C    
   \              0x69 0x6D    
   \       0x48   0x69 0x74          DC8 69H, 74H, 20H, 25H, 75H, 20H, 28H, 61H
   \              0x20 0x25    
   \              0x75 0x20    
   \              0x28 0x61    
   \       0x50   0x6C 0x72          DC8 6CH, 72H, 65H, 61H, 64H, 79H, 20H, 25H
   \              0x65 0x61    
   \              0x64 0x79    
   \              0x20 0x25    
   \       0x58   0x75 0x20          DC8 75H, 20H, 62H, 79H, 74H, 65H, 73H, 20H
   \              0x62 0x79    
   \              0x74 0x65    
   \              0x73 0x20    
   \       0x60   0x62 0x75          DC8 62H, 75H, 66H, 66H, 65H, 72H, 65H, 64H
   \              0x66 0x66    
   \              0x65 0x72    
   \              0x65 0x64    
   \       0x68   0x29 0x20          DC8 29H, 20H, 2DH, 2DH, 20H, 61H, 74H, 74H
   \              0x2D 0x2D    
   \              0x20 0x61    
   \              0x74 0x74    
   \       0x70   0x65 0x6D          DC8 65H, 6DH, 70H, 74H, 20H, 74H, 6FH, 20H
   \              0x70 0x74    
   \              0x20 0x74    
   \              0x6F 0x20    
   \       0x78   0x6D 0x61          DC8 6DH, 61H, 6BH, 65H, 20H, 73H, 70H, 61H
   \              0x6B 0x65    
   \              0x20 0x73    
   \              0x70 0x61    
   \       0x80   0x63 0x65          DC8 63H, 65H, 20H, 62H, 79H, 20H, 66H, 72H
   \              0x20 0x62    
   \              0x79 0x20    
   \              0x66 0x72    
   \       0x88   0x65 0x65          DC8 65H, 65H, 69H, 6EH, 67H, 20H, 62H, 75H
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x62 0x75    
   \       0x90   0x66 0x66          DC8 66H, 66H, 65H, 72H, 65H, 64H, 20H, 66H
   \              0x65 0x72    
   \              0x65 0x64    
   \              0x20 0x66    
   \       0x98   0x75 0x74          DC8 75H, 74H, 75H, 72H, 65H, 20H, 6DH, 65H
   \              0x75 0x72    
   \              0x65 0x20    
   \              0x6D 0x65    
   \       0xA0   0x73 0x73          DC8 73H, 73H, 61H, 67H, 65H, 73H, 0AH, 0
   \              0x61 0x67    
   \              0x65 0x73    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_164:
   \        0x0   0x52 0x65          DC8 52H, 65H, 61H, 73H, 73H, 65H, 6DH, 62H
   \              0x61 0x73    
   \              0x73 0x65    
   \              0x6D 0x62    
   \        0x8   0x6C 0x79          DC8 6CH, 79H, 20H, 6FH, 66H, 20H, 6EH, 65H
   \              0x20 0x6F    
   \              0x66 0x20    
   \              0x6E 0x65    
   \       0x10   0x78 0x74          DC8 78H, 74H, 20H, 6DH, 65H, 73H, 73H, 61H
   \              0x20 0x6D    
   \              0x65 0x73    
   \              0x73 0x61    
   \       0x18   0x67 0x65          DC8 67H, 65H, 20H, 6FH, 66H, 20H, 73H, 69H
   \              0x20 0x6F    
   \              0x66 0x20    
   \              0x73 0x69    
   \       0x20   0x7A 0x65          DC8 7AH, 65H, 20H, 25H, 75H, 20H, 28H, 25H
   \              0x20 0x25    
   \              0x75 0x20    
   \              0x28 0x25    
   \       0x28   0x75 0x20          DC8 75H, 20H, 77H, 69H, 74H, 68H, 20H, 62H
   \              0x77 0x69    
   \              0x74 0x68    
   \              0x20 0x62    
   \       0x30   0x69 0x74          DC8 69H, 74H, 6DH, 61H, 70H, 29H, 20H, 77H
   \              0x6D 0x61    
   \              0x70 0x29    
   \              0x20 0x77    
   \       0x38   0x6F 0x75          DC8 6FH, 75H, 6CH, 64H, 20H, 65H, 78H, 63H
   \              0x6C 0x64    
   \              0x20 0x65    
   \              0x78 0x63    
   \       0x40   0x65 0x65          DC8 65H, 65H, 64H, 20H, 74H, 68H, 65H, 20H
   \              0x64 0x20    
   \              0x74 0x68    
   \              0x65 0x20    
   \       0x48   0x63 0x6F          DC8 63H, 6FH, 6DH, 70H, 69H, 6CH, 65H, 2DH
   \              0x6D 0x70    
   \              0x69 0x6C    
   \              0x65 0x2D    
   \       0x50   0x74 0x69          DC8 74H, 69H, 6DH, 65H, 20H, 6CH, 69H, 6DH
   \              0x6D 0x65    
   \              0x20 0x6C    
   \              0x69 0x6D    
   \       0x58   0x69 0x74          DC8 69H, 74H, 20H, 25H, 75H, 20H, 28H, 61H
   \              0x20 0x25    
   \              0x75 0x20    
   \              0x28 0x61    
   \       0x60   0x6C 0x72          DC8 6CH, 72H, 65H, 61H, 64H, 79H, 20H, 25H
   \              0x65 0x61    
   \              0x64 0x79    
   \              0x20 0x25    
   \       0x68   0x75 0x20          DC8 75H, 20H, 62H, 79H, 74H, 65H, 73H, 20H
   \              0x62 0x79    
   \              0x74 0x65    
   \              0x73 0x20    
   \       0x70   0x62 0x75          DC8 62H, 75H, 66H, 66H, 65H, 72H, 65H, 64H
   \              0x66 0x66    
   \              0x65 0x72    
   \              0x65 0x64    
   \       0x78   0x29 0x20          DC8 29H, 20H, 2DH, 2DH, 20H, 66H, 61H, 69H
   \              0x2D 0x2D    
   \              0x20 0x66    
   \              0x61 0x69    
   \       0x80   0x6C 0x0A          DC8 6CH, 0AH, 0
   \              0x00         
   \       0x83   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_165:
   \        0x0   0x69 0x6E          DC8 "initialize reassembly, total length = %d"
   \              0x69 0x74    
   \              0x69 0x61    
   \              0x6C 0x69    
   \              0x7A 0x65    
   \              0x20 0x72    
   \              0x65 0x61    
   \              0x73 0x73    
   \              0x65 0x6D    
   \              0x62 0x6C    
   \              0x79 0x2C    
   \              0x20 0x74    
   \              0x6F 0x74    
   \              0x61 0x6C    
   \              0x20 0x6C    
   \              0x65 0x6E    
   \              0x67 0x74    
   \              0x68 0x20    
   \              0x3D 0x20    
   \              0x25 0x64    
   \              0x00         
   \       0x29   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_166:
   \        0x0   0x46 0x72          DC8 "Fragment header mismatch - ignore"
   \              0x61 0x67    
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x20 0x68    
   \              0x65 0x61    
   \              0x64 0x65    
   \              0x72 0x20    
   \              0x6D 0x69    
   \              0x73 0x6D    
   \              0x61 0x74    
   \              0x63 0x68    
   \              0x20 0x2D    
   \              0x20 0x69    
   \              0x67 0x6E    
   \              0x6F 0x72    
   \              0x65 0x00    
   \       0x22   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_167:
   \        0x0   0x61 0x64          DC8 "adding fragment, offset = %d, length = %d"
   \              0x64 0x69    
   \              0x6E 0x67    
   \              0x20 0x66    
   \              0x72 0x61    
   \              0x67 0x6D    
   \              0x65 0x6E    
   \              0x74 0x2C    
   \              0x20 0x6F    
   \              0x66 0x66    
   \              0x73 0x65    
   \              0x74 0x20    
   \              0x3D 0x20    
   \              0x25 0x64    
   \              0x2C 0x20    
   \              0x6C 0x65    
   \              0x6E 0x67    
   \              0x74 0x68    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x64 0x00    
   \       0x2A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_168:
   \        0x0   0x6D 0x65          DC8 "message %scomplete"
   \              0x73 0x73    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x25 0x73    
   \              0x63 0x6F    
   \              0x6D 0x70    
   \              0x6C 0x65    
   \              0x74 0x65    
   \              0x00         
   \       0x13   0x00               DC8 0

   \                                 In section .rodata, align 1
   \        0x0   0x00               DC8 ""

   \                                 In section .rodata, align 4
   \                     ?_170:
   \        0x0   0x6E 0x6F          DC8 "not yet "
   \              0x74 0x20    
   \              0x79 0x65    
   \              0x74 0x20    
   \              0x00         
   \        0x9   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_171:
   \        0x0   0x3C 0x3D          DC8 "<= ssl_buffer_message"
   \              0x20 0x73    
   \              0x73 0x6C    
   \              0x5F 0x62    
   \              0x75 0x66    
   \              0x66 0x65    
   \              0x72 0x5F    
   \              0x6D 0x65    
   \              0x73 0x73    
   \              0x61 0x67    
   \              0x65 0x00    
   \       0x16   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_172:
   \        0x0   0x72 0x65          DC8 "remaining content in record"
   \              0x6D 0x61    
   \              0x69 0x6E    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x63 0x6F    
   \              0x6E 0x74    
   \              0x65 0x6E    
   \              0x74 0x20    
   \              0x69 0x6E    
   \              0x20 0x72    
   \              0x65 0x63    
   \              0x6F 0x72    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     ?_173:
   \        0x0   0x3D 0x3E          DC8 "=> ssl_load_buffered_record"
   \              0x20 0x73    
   \              0x73 0x6C    
   \              0x5F 0x6C    
   \              0x6F 0x61    
   \              0x64 0x5F    
   \              0x62 0x75    
   \              0x66 0x66    
   \              0x65 0x72    
   \              0x65 0x64    
   \              0x5F 0x72    
   \              0x65 0x63    
   \              0x6F 0x72    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     ?_174:
   \        0x0   0x42 0x75          DC8 "Buffered record not from current epoch."
   \              0x66 0x66    
   \              0x65 0x72    
   \              0x65 0x64    
   \              0x20 0x72    
   \              0x65 0x63    
   \              0x6F 0x72    
   \              0x64 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x66 0x72    
   \              0x6F 0x6D    
   \              0x20 0x63    
   \              0x75 0x72    
   \              0x72 0x65    
   \              0x6E 0x74    
   \              0x20 0x65    
   \              0x70 0x6F    
   \              0x63 0x68    
   \              0x2E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_175:
   \        0x0   0x46 0x6F          DC8 "Found buffered record from current epoch - load"
   \              0x75 0x6E    
   \              0x64 0x20    
   \              0x62 0x75    
   \              0x66 0x66    
   \              0x65 0x72    
   \              0x65 0x64    
   \              0x20 0x72    
   \              0x65 0x63    
   \              0x6F 0x72    
   \              0x64 0x20    
   \              0x66 0x72    
   \              0x6F 0x6D    
   \              0x20 0x63    
   \              0x75 0x72    
   \              0x72 0x65    
   \              0x6E 0x74    
   \              0x20 0x65    
   \              0x70 0x6F    
   \              0x63 0x68    
   \              0x20 0x2D    
   \              0x20 0x6C    
   \              0x6F 0x61    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     ?_176:
   \        0x0   0x3C 0x3D          DC8 "<= ssl_load_buffered_record"
   \              0x20 0x73    
   \              0x73 0x6C    
   \              0x5F 0x6C    
   \              0x6F 0x61    
   \              0x64 0x5F    
   \              0x62 0x75    
   \              0x66 0x66    
   \              0x65 0x72    
   \              0x65 0x64    
   \              0x5F 0x72    
   \              0x65 0x63    
   \              0x6F 0x72    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     ?_177:
   \        0x0   0x42 0x75          DC8 42H, 75H, 66H, 66H, 65H, 72H, 69H, 6EH
   \              0x66 0x66    
   \              0x65 0x72    
   \              0x69 0x6E    
   \        0x8   0x67 0x20          DC8 67H, 20H, 6FH, 66H, 20H, 66H, 75H, 74H
   \              0x6F 0x66    
   \              0x20 0x66    
   \              0x75 0x74    
   \       0x10   0x75 0x72          DC8 75H, 72H, 65H, 20H, 65H, 70H, 6FH, 63H
   \              0x65 0x20    
   \              0x65 0x70    
   \              0x6F 0x63    
   \       0x18   0x68 0x20          DC8 68H, 20H, 72H, 65H, 63H, 6FH, 72H, 64H
   \              0x72 0x65    
   \              0x63 0x6F    
   \              0x72 0x64    
   \       0x20   0x20 0x6F          DC8 20H, 6FH, 66H, 20H, 73H, 69H, 7AH, 65H
   \              0x66 0x20    
   \              0x73 0x69    
   \              0x7A 0x65    
   \       0x28   0x20 0x25          DC8 20H, 25H, 75H, 20H, 77H, 6FH, 75H, 6CH
   \              0x75 0x20    
   \              0x77 0x6F    
   \              0x75 0x6C    
   \       0x30   0x64 0x20          DC8 64H, 20H, 65H, 78H, 63H, 65H, 65H, 64H
   \              0x65 0x78    
   \              0x63 0x65    
   \              0x65 0x64    
   \       0x38   0x20 0x74          DC8 20H, 74H, 68H, 65H, 20H, 63H, 6FH, 6DH
   \              0x68 0x65    
   \              0x20 0x63    
   \              0x6F 0x6D    
   \       0x40   0x70 0x69          DC8 70H, 69H, 6CH, 65H, 2DH, 74H, 69H, 6DH
   \              0x6C 0x65    
   \              0x2D 0x74    
   \              0x69 0x6D    
   \       0x48   0x65 0x20          DC8 65H, 20H, 6CH, 69H, 6DH, 69H, 74H, 20H
   \              0x6C 0x69    
   \              0x6D 0x69    
   \              0x74 0x20    
   \       0x50   0x25 0x75          DC8 25H, 75H, 20H, 28H, 61H, 6CH, 72H, 65H
   \              0x20 0x28    
   \              0x61 0x6C    
   \              0x72 0x65    
   \       0x58   0x61 0x64          DC8 61H, 64H, 79H, 20H, 25H, 75H, 20H, 62H
   \              0x79 0x20    
   \              0x25 0x75    
   \              0x20 0x62    
   \       0x60   0x79 0x74          DC8 79H, 74H, 65H, 73H, 20H, 62H, 75H, 66H
   \              0x65 0x73    
   \              0x20 0x62    
   \              0x75 0x66    
   \       0x68   0x66 0x65          DC8 66H, 65H, 72H, 65H, 64H, 29H, 20H, 2DH
   \              0x72 0x65    
   \              0x64 0x29    
   \              0x20 0x2D    
   \       0x70   0x2D 0x20          DC8 2DH, 20H, 69H, 67H, 6EH, 6FH, 72H, 65H
   \              0x69 0x67    
   \              0x6E 0x6F    
   \              0x72 0x65    
   \       0x78   0x0A 0x00          DC8 0AH, 0
   \       0x7A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_178:
   \        0x0   0x42 0x75          DC8 "Buffer record from epoch %u"
   \              0x66 0x66    
   \              0x65 0x72    
   \              0x20 0x72    
   \              0x65 0x63    
   \              0x6F 0x72    
   \              0x64 0x20    
   \              0x66 0x72    
   \              0x6F 0x6D    
   \              0x20 0x65    
   \              0x70 0x6F    
   \              0x63 0x68    
   \              0x20 0x25    
   \              0x75 0x00    

   \                                 In section .rodata, align 4
   \                     ?_179:
   \        0x0   0x42 0x75          DC8 "Buffered record"
   \              0x66 0x66    
   \              0x65 0x72    
   \              0x65 0x64    
   \              0x20 0x72    
   \              0x65 0x63    
   \              0x6F 0x72    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     ?_180:
   \        0x0   0x6D 0x62          DC8 "mbedtls_ssl_fetch_input"
   \              0x65 0x64    
   \              0x74 0x6C    
   \              0x73 0x5F    
   \              0x73 0x73    
   \              0x6C 0x5F    
   \              0x66 0x65    
   \              0x74 0x63    
   \              0x68 0x5F    
   \              0x69 0x6E    
   \              0x70 0x75    
   \              0x74 0x00    

   \                                 In section .rodata, align 4
   \                     ?_181:
   \        0x0   0x64 0x69          DC8 "discarding unexpected record (header)"
   \              0x73 0x63    
   \              0x61 0x72    
   \              0x64 0x69    
   \              0x6E 0x67    
   \              0x20 0x75    
   \              0x6E 0x65    
   \              0x78 0x70    
   \              0x65 0x63    
   \              0x74 0x65    
   \              0x64 0x20    
   \              0x72 0x65    
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x20 0x28    
   \              0x68 0x65    
   \              0x61 0x64    
   \              0x65 0x72    
   \              0x29 0x00    
   \       0x26   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_182:
   \        0x0   0x64 0x69          DC8 "discarding invalid record (header)"
   \              0x73 0x63    
   \              0x61 0x72    
   \              0x64 0x69    
   \              0x6E 0x67    
   \              0x20 0x69    
   \              0x6E 0x76    
   \              0x61 0x6C    
   \              0x69 0x64    
   \              0x20 0x72    
   \              0x65 0x63    
   \              0x6F 0x72    
   \              0x64 0x20    
   \              0x28 0x68    
   \              0x65 0x61    
   \              0x64 0x65    
   \              0x72 0x29    
   \              0x00         
   \       0x23   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_183:
   \        0x0   0x6D 0x6F          DC8 "more than one record within datagram"
   \              0x72 0x65    
   \              0x20 0x74    
   \              0x68 0x61    
   \              0x6E 0x20    
   \              0x6F 0x6E    
   \              0x65 0x20    
   \              0x72 0x65    
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x20 0x77    
   \              0x69 0x74    
   \              0x68 0x69    
   \              0x6E 0x20    
   \              0x64 0x61    
   \              0x74 0x61    
   \              0x67 0x72    
   \              0x61 0x6D    
   \              0x00         
   \       0x25   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_184:
   \        0x0   0x74 0x6F          DC8 "too many records with bad MAC"
   \              0x6F 0x20    
   \              0x6D 0x61    
   \              0x6E 0x79    
   \              0x20 0x72    
   \              0x65 0x63    
   \              0x6F 0x72    
   \              0x64 0x73    
   \              0x20 0x77    
   \              0x69 0x74    
   \              0x68 0x20    
   \              0x62 0x61    
   \              0x64 0x20    
   \              0x4D 0x41    
   \              0x43 0x00    
   \       0x1E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_185:
   \        0x0   0x64 0x69          DC8 "discarding invalid record (mac)"
   \              0x73 0x63    
   \              0x61 0x72    
   \              0x64 0x69    
   \              0x6E 0x67    
   \              0x20 0x69    
   \              0x6E 0x76    
   \              0x61 0x6C    
   \              0x69 0x64    
   \              0x20 0x72    
   \              0x65 0x63    
   \              0x6F 0x72    
   \              0x64 0x20    
   \              0x28 0x6D    
   \              0x61 0x63    
   \              0x29 0x00    

   \                                 In section .rodata, align 4
   \                     ?_186:
   \        0x0   0x69 0x6E          DC8 "invalid CCS message, len: %d"
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x43 0x43    
   \              0x53 0x20    
   \              0x6D 0x65    
   \              0x73 0x73    
   \              0x61 0x67    
   \              0x65 0x2C    
   \              0x20 0x6C    
   \              0x65 0x6E    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x00         
   \       0x1D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_187:
   \        0x0   0x69 0x6E          DC8 "invalid CCS message, content: %02x"
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x43 0x43    
   \              0x53 0x20    
   \              0x6D 0x65    
   \              0x73 0x73    
   \              0x61 0x67    
   \              0x65 0x2C    
   \              0x20 0x63    
   \              0x6F 0x6E    
   \              0x74 0x65    
   \              0x6E 0x74    
   \              0x3A 0x20    
   \              0x25 0x30    
   \              0x32 0x78    
   \              0x00         
   \       0x23   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_188:
   \        0x0   0x64 0x72          DC8 "dropping ChangeCipherSpec outside handshake"
   \              0x6F 0x70    
   \              0x70 0x69    
   \              0x6E 0x67    
   \              0x20 0x43    
   \              0x68 0x61    
   \              0x6E 0x67    
   \              0x65 0x43    
   \              0x69 0x70    
   \              0x68 0x65    
   \              0x72 0x53    
   \              0x70 0x65    
   \              0x63 0x20    
   \              0x6F 0x75    
   \              0x74 0x73    
   \              0x69 0x64    
   \              0x65 0x20    
   \              0x68 0x61    
   \              0x6E 0x64    
   \              0x73 0x68    
   \              0x61 0x6B    
   \              0x65 0x00    

   \                                 In section .rodata, align 4
   \                     ?_189:
   \        0x0   0x72 0x65          DC8 "received out-of-order ChangeCipherSpec - remember"
   \              0x63 0x65    
   \              0x69 0x76    
   \              0x65 0x64    
   \              0x20 0x6F    
   \              0x75 0x74    
   \              0x2D 0x6F    
   \              0x66 0x2D    
   \              0x6F 0x72    
   \              0x64 0x65    
   \              0x72 0x20    
   \              0x43 0x68    
   \              0x61 0x6E    
   \              0x67 0x65    
   \              0x43 0x69    
   \              0x70 0x68    
   \              0x65 0x72    
   \              0x53 0x70    
   \              0x65 0x63    
   \              0x20 0x2D    
   \              0x20 0x72    
   \              0x65 0x6D    
   \              0x65 0x6D    
   \              0x62 0x65    
   \              0x72 0x00    
   \       0x32   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_190:
   \        0x0   0x69 0x6E          DC8 "invalid alert message, len: %d"
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x61 0x6C    
   \              0x65 0x72    
   \              0x74 0x20    
   \              0x6D 0x65    
   \              0x73 0x73    
   \              0x61 0x67    
   \              0x65 0x2C    
   \              0x20 0x6C    
   \              0x65 0x6E    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x00         
   \       0x1F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_191:
   \        0x0   0x67 0x6F          DC8 "got an alert message, type: [%d:%d]"
   \              0x74 0x20    
   \              0x61 0x6E    
   \              0x20 0x61    
   \              0x6C 0x65    
   \              0x72 0x74    
   \              0x20 0x6D    
   \              0x65 0x73    
   \              0x73 0x61    
   \              0x67 0x65    
   \              0x2C 0x20    
   \              0x74 0x79    
   \              0x70 0x65    
   \              0x3A 0x20    
   \              0x5B 0x25    
   \              0x64 0x3A    
   \              0x25 0x64    
   \              0x5D 0x00    

   \                                 In section .rodata, align 4
   \                     ?_192:
   \        0x0   0x69 0x73          DC8 "is a fatal alert message (msg %d)"
   \              0x20 0x61    
   \              0x20 0x66    
   \              0x61 0x74    
   \              0x61 0x6C    
   \              0x20 0x61    
   \              0x6C 0x65    
   \              0x72 0x74    
   \              0x20 0x6D    
   \              0x65 0x73    
   \              0x73 0x61    
   \              0x67 0x65    
   \              0x20 0x28    
   \              0x6D 0x73    
   \              0x67 0x20    
   \              0x25 0x64    
   \              0x29 0x00    
   \       0x22   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_193:
   \        0x0   0x69 0x73          DC8 "is a close notify message"
   \              0x20 0x61    
   \              0x20 0x63    
   \              0x6C 0x6F    
   \              0x73 0x65    
   \              0x20 0x6E    
   \              0x6F 0x74    
   \              0x69 0x66    
   \              0x79 0x20    
   \              0x6D 0x65    
   \              0x73 0x73    
   \              0x61 0x67    
   \              0x65 0x00    
   \       0x1A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_194:
   \        0x0   0x69 0x73          DC8 "is a SSLv3 no renegotiation alert"
   \              0x20 0x61    
   \              0x20 0x53    
   \              0x53 0x4C    
   \              0x76 0x33    
   \              0x20 0x6E    
   \              0x6F 0x20    
   \              0x72 0x65    
   \              0x6E 0x65    
   \              0x67 0x6F    
   \              0x74 0x69    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x61 0x6C    
   \              0x65 0x72    
   \              0x74 0x00    
   \       0x22   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_195:
   \        0x0   0x3D 0x3E          DC8 "=> send alert message"
   \              0x20 0x73    
   \              0x65 0x6E    
   \              0x64 0x20    
   \              0x61 0x6C    
   \              0x65 0x72    
   \              0x74 0x20    
   \              0x6D 0x65    
   \              0x73 0x73    
   \              0x61 0x67    
   \              0x65 0x00    
   \       0x16   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_196:
   \        0x0   0x73 0x65          DC8 "send alert level=%u message=%u"
   \              0x6E 0x64    
   \              0x20 0x61    
   \              0x6C 0x65    
   \              0x72 0x74    
   \              0x20 0x6C    
   \              0x65 0x76    
   \              0x65 0x6C    
   \              0x3D 0x25    
   \              0x75 0x20    
   \              0x6D 0x65    
   \              0x73 0x73    
   \              0x61 0x67    
   \              0x65 0x3D    
   \              0x25 0x75    
   \              0x00         
   \       0x1F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_197:
   \        0x0   0x3C 0x3D          DC8 "<= send alert message"
   \              0x20 0x73    
   \              0x65 0x6E    
   \              0x64 0x20    
   \              0x61 0x6C    
   \              0x65 0x72    
   \              0x74 0x20    
   \              0x6D 0x65    
   \              0x73 0x73    
   \              0x61 0x67    
   \              0x65 0x00    
   \       0x16   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_198:
   \        0x0   0x3D 0x3E          DC8 "=> write certificate"
   \              0x20 0x77    
   \              0x72 0x69    
   \              0x74 0x65    
   \              0x20 0x63    
   \              0x65 0x72    
   \              0x74 0x69    
   \              0x66 0x69    
   \              0x63 0x61    
   \              0x74 0x65    
   \              0x00         
   \       0x15   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_199:
   \        0x0   0x3C 0x3D          DC8 "<= skip write certificate"
   \              0x20 0x73    
   \              0x6B 0x69    
   \              0x70 0x20    
   \              0x77 0x72    
   \              0x69 0x74    
   \              0x65 0x20    
   \              0x63 0x65    
   \              0x72 0x74    
   \              0x69 0x66    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x65 0x00    
   \       0x1A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_200:
   \        0x0   0x67 0x6F          DC8 "got no certificate to send"
   \              0x74 0x20    
   \              0x6E 0x6F    
   \              0x20 0x63    
   \              0x65 0x72    
   \              0x74 0x69    
   \              0x66 0x69    
   \              0x63 0x61    
   \              0x74 0x65    
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x73 0x65    
   \              0x6E 0x64    
   \              0x00         
   \       0x1B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_201:
   \        0x0   0x6F 0x77          DC8 "own certificate"
   \              0x6E 0x20    
   \              0x63 0x65    
   \              0x72 0x74    
   \              0x69 0x66    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x65 0x00    

   \                                 In section .rodata, align 4
   \                     ?_202:
   \        0x0   0x63 0x65          DC8 "certificate too large, %d > %d"
   \              0x72 0x74    
   \              0x69 0x66    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x74 0x6F    
   \              0x6F 0x20    
   \              0x6C 0x61    
   \              0x72 0x67    
   \              0x65 0x2C    
   \              0x20 0x25    
   \              0x64 0x20    
   \              0x3E 0x20    
   \              0x25 0x64    
   \              0x00         
   \       0x1F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_203:
   \        0x0   0x6D 0x62          DC8 "mbedtls_ssl_write_handshake_msg"
   \              0x65 0x64    
   \              0x74 0x6C    
   \              0x73 0x5F    
   \              0x73 0x73    
   \              0x6C 0x5F    
   \              0x77 0x72    
   \              0x69 0x74    
   \              0x65 0x5F    
   \              0x68 0x61    
   \              0x6E 0x64    
   \              0x73 0x68    
   \              0x61 0x6B    
   \              0x65 0x5F    
   \              0x6D 0x73    
   \              0x67 0x00    

   \                                 In section .rodata, align 4
   \                     ?_204:
   \        0x0   0x3C 0x3D          DC8 "<= write certificate"
   \              0x20 0x77    
   \              0x72 0x69    
   \              0x74 0x65    
   \              0x20 0x63    
   \              0x65 0x72    
   \              0x74 0x69    
   \              0x66 0x69    
   \              0x63 0x61    
   \              0x74 0x65    
   \              0x00         
   \       0x15   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_205:
   \        0x0   0x3D 0x3E          DC8 "=> parse certificate"
   \              0x20 0x70    
   \              0x61 0x72    
   \              0x73 0x65    
   \              0x20 0x63    
   \              0x65 0x72    
   \              0x74 0x69    
   \              0x66 0x69    
   \              0x63 0x61    
   \              0x74 0x65    
   \              0x00         
   \       0x15   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_206:
   \        0x0   0x3C 0x3D          DC8 "<= skip parse certificate"
   \              0x20 0x73    
   \              0x6B 0x69    
   \              0x70 0x20    
   \              0x70 0x61    
   \              0x72 0x73    
   \              0x65 0x20    
   \              0x63 0x65    
   \              0x72 0x74    
   \              0x69 0x66    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x65 0x00    
   \       0x1A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_207:
   \        0x0   0x6D 0x62          DC8 "mbedtls_ssl_read_record"
   \              0x65 0x64    
   \              0x74 0x6C    
   \              0x73 0x5F    
   \              0x73 0x73    
   \              0x6C 0x5F    
   \              0x72 0x65    
   \              0x61 0x64    
   \              0x5F 0x72    
   \              0x65 0x63    
   \              0x6F 0x72    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     ?_208:
   \        0x0   0x54 0x4C          DC8 "TLSv1 client has no certificate"
   \              0x53 0x76    
   \              0x31 0x20    
   \              0x63 0x6C    
   \              0x69 0x65    
   \              0x6E 0x74    
   \              0x20 0x68    
   \              0x61 0x73    
   \              0x20 0x6E    
   \              0x6F 0x20    
   \              0x63 0x65    
   \              0x72 0x74    
   \              0x69 0x66    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x65 0x00    

   \                                 In section .rodata, align 4
   \                     ?_209:
   \        0x0   0x62 0x61          DC8 "bad certificate message"
   \              0x64 0x20    
   \              0x63 0x65    
   \              0x72 0x74    
   \              0x69 0x66    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x6D 0x65    
   \              0x73 0x73    
   \              0x61 0x67    
   \              0x65 0x00    

   \                                 In section .rodata, align 4
   \                     ?_210:
   \        0x0   0x61 0x6C          DC8 "alloc(%d bytes) failed"
   \              0x6C 0x6F    
   \              0x63 0x28    
   \              0x25 0x64    
   \              0x20 0x62    
   \              0x79 0x74    
   \              0x65 0x73    
   \              0x29 0x20    
   \              0x66 0x61    
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x00         
   \       0x17   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_211:
   \        0x0   0x20 0x6D          DC8 " mbedtls_x509_crt_parse_der"
   \              0x62 0x65    
   \              0x64 0x74    
   \              0x6C 0x73    
   \              0x5F 0x78    
   \              0x35 0x30    
   \              0x39 0x5F    
   \              0x63 0x72    
   \              0x74 0x5F    
   \              0x70 0x61    
   \              0x72 0x73    
   \              0x65 0x5F    
   \              0x64 0x65    
   \              0x72 0x00    

   \                                 In section .rodata, align 4
   \                     ?_212:
   \        0x0   0x70 0x65          DC8 "peer certificate"
   \              0x65 0x72    
   \              0x20 0x63    
   \              0x65 0x72    
   \              0x74 0x69    
   \              0x66 0x69    
   \              0x63 0x61    
   \              0x74 0x65    
   \              0x00         
   \       0x11   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_213:
   \        0x0   0x6E 0x65          DC8 "new server cert during renegotiation"
   \              0x77 0x20    
   \              0x73 0x65    
   \              0x72 0x76    
   \              0x65 0x72    
   \              0x20 0x63    
   \              0x65 0x72    
   \              0x74 0x20    
   \              0x64 0x75    
   \              0x72 0x69    
   \              0x6E 0x67    
   \              0x20 0x72    
   \              0x65 0x6E    
   \              0x65 0x67    
   \              0x6F 0x74    
   \              0x69 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x00         
   \       0x25   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_214:
   \        0x0   0x73 0x65          DC8 "server cert changed during renegotiation"
   \              0x72 0x76    
   \              0x65 0x72    
   \              0x20 0x63    
   \              0x65 0x72    
   \              0x74 0x20    
   \              0x63 0x68    
   \              0x61 0x6E    
   \              0x67 0x65    
   \              0x64 0x20    
   \              0x64 0x75    
   \              0x72 0x69    
   \              0x6E 0x67    
   \              0x20 0x72    
   \              0x65 0x6E    
   \              0x65 0x67    
   \              0x6F 0x74    
   \              0x69 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x00         
   \       0x29   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_215:
   \        0x0   0x78 0x35          DC8 "x509_verify_cert"
   \              0x30 0x39    
   \              0x5F 0x76    
   \              0x65 0x72    
   \              0x69 0x66    
   \              0x79 0x5F    
   \              0x63 0x65    
   \              0x72 0x74    
   \              0x00         
   \       0x11   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_216:
   \        0x0   0x62 0x61          DC8 "bad certificate (EC key curve)"
   \              0x64 0x20    
   \              0x63 0x65    
   \              0x72 0x74    
   \              0x69 0x66    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x28 0x45    
   \              0x43 0x20    
   \              0x6B 0x65    
   \              0x79 0x20    
   \              0x63 0x75    
   \              0x72 0x76    
   \              0x65 0x29    
   \              0x00         
   \       0x1F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_217:
   \        0x0   0x62 0x61          DC8 "bad certificate (usage extensions)"
   \              0x64 0x20    
   \              0x63 0x65    
   \              0x72 0x74    
   \              0x69 0x66    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x28 0x75    
   \              0x73 0x61    
   \              0x67 0x65    
   \              0x20 0x65    
   \              0x78 0x74    
   \              0x65 0x6E    
   \              0x73 0x69    
   \              0x6F 0x6E    
   \              0x73 0x29    
   \              0x00         
   \       0x23   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_218:
   \        0x0   0x67 0x6F          DC8 "got no CA chain"
   \              0x74 0x20    
   \              0x6E 0x6F    
   \              0x20 0x43    
   \              0x41 0x20    
   \              0x63 0x68    
   \              0x61 0x69    
   \              0x6E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_219:
   \        0x0   0x21 0x20          DC8 "! Certificate verification flags %x"
   \              0x43 0x65    
   \              0x72 0x74    
   \              0x69 0x66    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x76 0x65    
   \              0x72 0x69    
   \              0x66 0x69    
   \              0x63 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x66    
   \              0x6C 0x61    
   \              0x67 0x73    
   \              0x20 0x25    
   \              0x78 0x00    

   \                                 In section .rodata, align 4
   \                     ?_220:
   \        0x0   0x43 0x65          DC8 "Certificate verification flags clear"
   \              0x72 0x74    
   \              0x69 0x66    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x76 0x65    
   \              0x72 0x69    
   \              0x66 0x69    
   \              0x63 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x66    
   \              0x6C 0x61    
   \              0x67 0x73    
   \              0x20 0x63    
   \              0x6C 0x65    
   \              0x61 0x72    
   \              0x00         
   \       0x25   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_221:
   \        0x0   0x3C 0x3D          DC8 "<= parse certificate"
   \              0x20 0x70    
   \              0x61 0x72    
   \              0x73 0x65    
   \              0x20 0x63    
   \              0x65 0x72    
   \              0x74 0x69    
   \              0x66 0x69    
   \              0x63 0x61    
   \              0x74 0x65    
   \              0x00         
   \       0x15   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_222:
   \        0x0   0x3D 0x3E          DC8 "=> write change cipher spec"
   \              0x20 0x77    
   \              0x72 0x69    
   \              0x74 0x65    
   \              0x20 0x63    
   \              0x68 0x61    
   \              0x6E 0x67    
   \              0x65 0x20    
   \              0x63 0x69    
   \              0x70 0x68    
   \              0x65 0x72    
   \              0x20 0x73    
   \              0x70 0x65    
   \              0x63 0x00    

   \                                 In section .rodata, align 4
   \                     ?_223:
   \        0x0   0x3C 0x3D          DC8 "<= write change cipher spec"
   \              0x20 0x77    
   \              0x72 0x69    
   \              0x74 0x65    
   \              0x20 0x63    
   \              0x68 0x61    
   \              0x6E 0x67    
   \              0x65 0x20    
   \              0x63 0x69    
   \              0x70 0x68    
   \              0x65 0x72    
   \              0x20 0x73    
   \              0x70 0x65    
   \              0x63 0x00    

   \                                 In section .rodata, align 4
   \                     ?_224:
   \        0x0   0x3D 0x3E          DC8 "=> parse change cipher spec"
   \              0x20 0x70    
   \              0x61 0x72    
   \              0x73 0x65    
   \              0x20 0x63    
   \              0x68 0x61    
   \              0x6E 0x67    
   \              0x65 0x20    
   \              0x63 0x69    
   \              0x70 0x68    
   \              0x65 0x72    
   \              0x20 0x73    
   \              0x70 0x65    
   \              0x63 0x00    

   \                                 In section .rodata, align 4
   \                     ?_225:
   \        0x0   0x62 0x61          DC8 "bad change cipher spec message"
   \              0x64 0x20    
   \              0x63 0x68    
   \              0x61 0x6E    
   \              0x67 0x65    
   \              0x20 0x63    
   \              0x69 0x70    
   \              0x68 0x65    
   \              0x72 0x20    
   \              0x73 0x70    
   \              0x65 0x63    
   \              0x20 0x6D    
   \              0x65 0x73    
   \              0x73 0x61    
   \              0x67 0x65    
   \              0x00         
   \       0x1F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_226:
   \        0x0   0x73 0x77          DC8 "switching to new transform spec for inbound data"
   \              0x69 0x74    
   \              0x63 0x68    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x74 0x6F    
   \              0x20 0x6E    
   \              0x65 0x77    
   \              0x20 0x74    
   \              0x72 0x61    
   \              0x6E 0x73    
   \              0x66 0x6F    
   \              0x72 0x6D    
   \              0x20 0x73    
   \              0x70 0x65    
   \              0x63 0x20    
   \              0x66 0x6F    
   \              0x72 0x20    
   \              0x69 0x6E    
   \              0x62 0x6F    
   \              0x75 0x6E    
   \              0x64 0x20    
   \              0x64 0x61    
   \              0x74 0x61    
   \              0x00         
   \       0x31   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_227:
   \        0x0   0x44 0x54          DC8 "DTLS epoch would wrap"
   \              0x4C 0x53    
   \              0x20 0x65    
   \              0x70 0x6F    
   \              0x63 0x68    
   \              0x20 0x77    
   \              0x6F 0x75    
   \              0x6C 0x64    
   \              0x20 0x77    
   \              0x72 0x61    
   \              0x70 0x00    
   \       0x16   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_228:
   \        0x0   0x3C 0x3D          DC8 "<= parse change cipher spec"
   \              0x20 0x70    
   \              0x61 0x72    
   \              0x73 0x65    
   \              0x20 0x63    
   \              0x68 0x61    
   \              0x6E 0x67    
   \              0x65 0x20    
   \              0x63 0x69    
   \              0x70 0x68    
   \              0x65 0x72    
   \              0x20 0x73    
   \              0x70 0x65    
   \              0x63 0x00    

   \                                 In section .rodata, align 4
   \                     ?_229:
   \        0x0   0x3D 0x3E          DC8 "=> calc  finished tls"
   \              0x20 0x63    
   \              0x61 0x6C    
   \              0x63 0x20    
   \              0x20 0x66    
   \              0x69 0x6E    
   \              0x69 0x73    
   \              0x68 0x65    
   \              0x64 0x20    
   \              0x74 0x6C    
   \              0x73 0x00    
   \       0x16   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_230:
   \        0x0   0x66 0x69          DC8 "finished  md5 state"
   \              0x6E 0x69    
   \              0x73 0x68    
   \              0x65 0x64    
   \              0x20 0x20    
   \              0x6D 0x64    
   \              0x35 0x20    
   \              0x73 0x74    
   \              0x61 0x74    
   \              0x65 0x00    

   \                                 In section .rodata, align 4
   \                     ?_231:
   \        0x0   0x66 0x69          DC8 "finished sha1 state"
   \              0x6E 0x69    
   \              0x73 0x68    
   \              0x65 0x64    
   \              0x20 0x73    
   \              0x68 0x61    
   \              0x31 0x20    
   \              0x73 0x74    
   \              0x61 0x74    
   \              0x65 0x00    

   \                                 In section .rodata, align 4
   \                     ?_232:
   \        0x0   0x63 0x6C          DC8 "client finished"
   \              0x69 0x65    
   \              0x6E 0x74    
   \              0x20 0x66    
   \              0x69 0x6E    
   \              0x69 0x73    
   \              0x68 0x65    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     ?_233:
   \        0x0   0x73 0x65          DC8 "server finished"
   \              0x72 0x76    
   \              0x65 0x72    
   \              0x20 0x66    
   \              0x69 0x6E    
   \              0x69 0x73    
   \              0x68 0x65    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     ?_234:
   \        0x0   0x63 0x61          DC8 "calc finished result"
   \              0x6C 0x63    
   \              0x20 0x66    
   \              0x69 0x6E    
   \              0x69 0x73    
   \              0x68 0x65    
   \              0x64 0x20    
   \              0x72 0x65    
   \              0x73 0x75    
   \              0x6C 0x74    
   \              0x00         
   \       0x15   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_235:
   \        0x0   0x3C 0x3D          DC8 "<= calc  finished"
   \              0x20 0x63    
   \              0x61 0x6C    
   \              0x63 0x20    
   \              0x20 0x66    
   \              0x69 0x6E    
   \              0x69 0x73    
   \              0x68 0x65    
   \              0x64 0x00    
   \       0x12   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_236:
   \        0x0   0x3D 0x3E          DC8 "=> calc  finished tls sha256"
   \              0x20 0x63    
   \              0x61 0x6C    
   \              0x63 0x20    
   \              0x20 0x66    
   \              0x69 0x6E    
   \              0x69 0x73    
   \              0x68 0x65    
   \              0x64 0x20    
   \              0x74 0x6C    
   \              0x73 0x20    
   \              0x73 0x68    
   \              0x61 0x32    
   \              0x35 0x36    
   \              0x00         
   \       0x1D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_237:
   \        0x0   0x66 0x69          DC8 "finished sha2 state"
   \              0x6E 0x69    
   \              0x73 0x68    
   \              0x65 0x64    
   \              0x20 0x73    
   \              0x68 0x61    
   \              0x32 0x20    
   \              0x73 0x74    
   \              0x61 0x74    
   \              0x65 0x00    

   \                                 In section .rodata, align 4
   \                     ?_238:
   \        0x0   0x3D 0x3E          DC8 "=> calc  finished tls sha384"
   \              0x20 0x63    
   \              0x61 0x6C    
   \              0x63 0x20    
   \              0x20 0x66    
   \              0x69 0x6E    
   \              0x69 0x73    
   \              0x68 0x65    
   \              0x64 0x20    
   \              0x74 0x6C    
   \              0x73 0x20    
   \              0x73 0x68    
   \              0x61 0x33    
   \              0x38 0x34    
   \              0x00         
   \       0x1D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_239:
   \        0x0   0x66 0x69          DC8 "finished sha512 state"
   \              0x6E 0x69    
   \              0x73 0x68    
   \              0x65 0x64    
   \              0x20 0x73    
   \              0x68 0x61    
   \              0x35 0x31    
   \              0x32 0x20    
   \              0x73 0x74    
   \              0x61 0x74    
   \              0x65 0x00    
   \       0x16   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_240:
   \        0x0   0x3D 0x3E          DC8 "=> handshake wrapup: final free"
   \              0x20 0x68    
   \              0x61 0x6E    
   \              0x64 0x73    
   \              0x68 0x61    
   \              0x6B 0x65    
   \              0x20 0x77    
   \              0x72 0x61    
   \              0x70 0x75    
   \              0x70 0x3A    
   \              0x20 0x66    
   \              0x69 0x6E    
   \              0x61 0x6C    
   \              0x20 0x66    
   \              0x72 0x65    
   \              0x65 0x00    

   \                                 In section .rodata, align 4
   \                     ?_241:
   \        0x0   0x3C 0x3D          DC8 "<= handshake wrapup: final free"
   \              0x20 0x68    
   \              0x61 0x6E    
   \              0x64 0x73    
   \              0x68 0x61    
   \              0x6B 0x65    
   \              0x20 0x77    
   \              0x72 0x61    
   \              0x70 0x75    
   \              0x70 0x3A    
   \              0x20 0x66    
   \              0x69 0x6E    
   \              0x61 0x6C    
   \              0x20 0x66    
   \              0x72 0x65    
   \              0x65 0x00    

   \                                 In section .rodata, align 4
   \                     ?_242:
   \        0x0   0x3D 0x3E          DC8 "=> handshake wrapup"
   \              0x20 0x68    
   \              0x61 0x6E    
   \              0x64 0x73    
   \              0x68 0x61    
   \              0x6B 0x65    
   \              0x20 0x77    
   \              0x72 0x61    
   \              0x70 0x75    
   \              0x70 0x00    

   \                                 In section .rodata, align 4
   \                     ?_243:
   \        0x0   0x63 0x61          DC8 "cache did not store session"
   \              0x63 0x68    
   \              0x65 0x20    
   \              0x64 0x69    
   \              0x64 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x73 0x74    
   \              0x6F 0x72    
   \              0x65 0x20    
   \              0x73 0x65    
   \              0x73 0x73    
   \              0x69 0x6F    
   \              0x6E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_244:
   \        0x0   0x73 0x6B          DC8 "skip freeing handshake and transform"
   \              0x69 0x70    
   \              0x20 0x66    
   \              0x72 0x65    
   \              0x65 0x69    
   \              0x6E 0x67    
   \              0x20 0x68    
   \              0x61 0x6E    
   \              0x64 0x73    
   \              0x68 0x61    
   \              0x6B 0x65    
   \              0x20 0x61    
   \              0x6E 0x64    
   \              0x20 0x74    
   \              0x72 0x61    
   \              0x6E 0x73    
   \              0x66 0x6F    
   \              0x72 0x6D    
   \              0x00         
   \       0x25   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_245:
   \        0x0   0x3C 0x3D          DC8 "<= handshake wrapup"
   \              0x20 0x68    
   \              0x61 0x6E    
   \              0x64 0x73    
   \              0x68 0x61    
   \              0x6B 0x65    
   \              0x20 0x77    
   \              0x72 0x61    
   \              0x70 0x75    
   \              0x70 0x00    

   \                                 In section .rodata, align 4
   \                     ?_246:
   \        0x0   0x3D 0x3E          DC8 "=> write finished"
   \              0x20 0x77    
   \              0x72 0x69    
   \              0x74 0x65    
   \              0x20 0x66    
   \              0x69 0x6E    
   \              0x69 0x73    
   \              0x68 0x65    
   \              0x64 0x00    
   \       0x12   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_247:
   \        0x0   0x73 0x77          DC8 "switching to new transform spec for outbound data"
   \              0x69 0x74    
   \              0x63 0x68    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x74 0x6F    
   \              0x20 0x6E    
   \              0x65 0x77    
   \              0x20 0x74    
   \              0x72 0x61    
   \              0x6E 0x73    
   \              0x66 0x6F    
   \              0x72 0x6D    
   \              0x20 0x73    
   \              0x70 0x65    
   \              0x63 0x20    
   \              0x66 0x6F    
   \              0x72 0x20    
   \              0x6F 0x75    
   \              0x74 0x62    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x20 0x64    
   \              0x61 0x74    
   \              0x61 0x00    
   \       0x32   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_248:
   \        0x0   0x6D 0x62          DC8 "mbedtls_ssl_flight_transmit"
   \              0x65 0x64    
   \              0x74 0x6C    
   \              0x73 0x5F    
   \              0x73 0x73    
   \              0x6C 0x5F    
   \              0x66 0x6C    
   \              0x69 0x67    
   \              0x68 0x74    
   \              0x5F 0x74    
   \              0x72 0x61    
   \              0x6E 0x73    
   \              0x6D 0x69    
   \              0x74 0x00    

   \                                 In section .rodata, align 4
   \                     ?_249:
   \        0x0   0x3C 0x3D          DC8 "<= write finished"
   \              0x20 0x77    
   \              0x72 0x69    
   \              0x74 0x65    
   \              0x20 0x66    
   \              0x69 0x6E    
   \              0x69 0x73    
   \              0x68 0x65    
   \              0x64 0x00    
   \       0x12   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_250:
   \        0x0   0x3D 0x3E          DC8 "=> parse finished"
   \              0x20 0x70    
   \              0x61 0x72    
   \              0x73 0x65    
   \              0x20 0x66    
   \              0x69 0x6E    
   \              0x69 0x73    
   \              0x68 0x65    
   \              0x64 0x00    
   \       0x12   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_251:
   \        0x0   0x62 0x61          DC8 "bad finished message"
   \              0x64 0x20    
   \              0x66 0x69    
   \              0x6E 0x69    
   \              0x73 0x68    
   \              0x65 0x64    
   \              0x20 0x6D    
   \              0x65 0x73    
   \              0x73 0x61    
   \              0x67 0x65    
   \              0x00         
   \       0x15   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_252:
   \        0x0   0x3C 0x3D          DC8 "<= parse finished"
   \              0x20 0x70    
   \              0x61 0x72    
   \              0x73 0x65    
   \              0x20 0x66    
   \              0x69 0x6E    
   \              0x69 0x73    
   \              0x68 0x65    
   \              0x64 0x00    
   \       0x12   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_253:
   \        0x0   0x61 0x6C          DC8 "alloc() of ssl sub-contexts failed"
   \              0x6C 0x6F    
   \              0x63 0x28    
   \              0x29 0x20    
   \              0x6F 0x66    
   \              0x20 0x73    
   \              0x73 0x6C    
   \              0x20 0x73    
   \              0x75 0x62    
   \              0x2D 0x63    
   \              0x6F 0x6E    
   \              0x74 0x65    
   \              0x78 0x74    
   \              0x73 0x20    
   \              0x66 0x61    
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x00         
   \       0x23   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_254:
   \        0x0   0x73 0x73          DC8 73H, 73H, 6CH, 5FH, 63H, 68H, 65H, 63H
   \              0x6C 0x5F    
   \              0x63 0x68    
   \              0x65 0x63    
   \        0x8   0x6B 0x5F          DC8 6BH, 5FH, 70H, 65H, 6EH, 64H, 69H, 6EH
   \              0x70 0x65    
   \              0x6E 0x64    
   \              0x69 0x6E    
   \       0x10   0x67 0x3A          DC8 67H, 3AH, 20H, 72H, 65H, 63H, 6FH, 72H
   \              0x20 0x72    
   \              0x65 0x63    
   \              0x6F 0x72    
   \       0x18   0x64 0x20          DC8 64H, 20H, 68H, 65H, 6CH, 64H, 20H, 62H
   \              0x68 0x65    
   \              0x6C 0x64    
   \              0x20 0x62    
   \       0x20   0x61 0x63          DC8 61H, 63H, 6BH, 20H, 66H, 6FH, 72H, 20H
   \              0x6B 0x20    
   \              0x66 0x6F    
   \              0x72 0x20    
   \       0x28   0x70 0x72          DC8 70H, 72H, 6FH, 63H, 65H, 73H, 73H, 69H
   \              0x6F 0x63    
   \              0x65 0x73    
   \              0x73 0x69    
   \       0x30   0x6E 0x67          DC8 6EH, 67H, 0
   \              0x00         
   \       0x33   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_255:
   \        0x0   0x73 0x73          DC8 73H, 73H, 6CH, 5FH, 63H, 68H, 65H, 63H
   \              0x6C 0x5F    
   \              0x63 0x68    
   \              0x65 0x63    
   \        0x8   0x6B 0x5F          DC8 6BH, 5FH, 70H, 65H, 6EH, 64H, 69H, 6EH
   \              0x70 0x65    
   \              0x6E 0x64    
   \              0x69 0x6E    
   \       0x10   0x67 0x3A          DC8 67H, 3AH, 20H, 6DH, 6FH, 72H, 65H, 20H
   \              0x20 0x6D    
   \              0x6F 0x72    
   \              0x65 0x20    
   \       0x18   0x72 0x65          DC8 72H, 65H, 63H, 6FH, 72H, 64H, 73H, 20H
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x73 0x20    
   \       0x20   0x77 0x69          DC8 77H, 69H, 74H, 68H, 69H, 6EH, 20H, 63H
   \              0x74 0x68    
   \              0x69 0x6E    
   \              0x20 0x63    
   \       0x28   0x75 0x72          DC8 75H, 72H, 72H, 65H, 6EH, 74H, 20H, 64H
   \              0x72 0x65    
   \              0x6E 0x74    
   \              0x20 0x64    
   \       0x30   0x61 0x74          DC8 61H, 74H, 61H, 67H, 72H, 61H, 6DH, 0
   \              0x61 0x67    
   \              0x72 0x61    
   \              0x6D 0x00    

   \                                 In section .rodata, align 4
   \                     ?_256:
   \        0x0   0x73 0x73          DC8 73H, 73H, 6CH, 5FH, 63H, 68H, 65H, 63H
   \              0x6C 0x5F    
   \              0x63 0x68    
   \              0x65 0x63    
   \        0x8   0x6B 0x5F          DC8 6BH, 5FH, 70H, 65H, 6EH, 64H, 69H, 6EH
   \              0x70 0x65    
   \              0x6E 0x64    
   \              0x69 0x6E    
   \       0x10   0x67 0x3A          DC8 67H, 3AH, 20H, 6DH, 6FH, 72H, 65H, 20H
   \              0x20 0x6D    
   \              0x6F 0x72    
   \              0x65 0x20    
   \       0x18   0x68 0x61          DC8 68H, 61H, 6EH, 64H, 73H, 68H, 61H, 6BH
   \              0x6E 0x64    
   \              0x73 0x68    
   \              0x61 0x6B    
   \       0x20   0x65 0x20          DC8 65H, 20H, 6DH, 65H, 73H, 73H, 61H, 67H
   \              0x6D 0x65    
   \              0x73 0x73    
   \              0x61 0x67    
   \       0x28   0x65 0x73          DC8 65H, 73H, 20H, 77H, 69H, 74H, 68H, 69H
   \              0x20 0x77    
   \              0x69 0x74    
   \              0x68 0x69    
   \       0x30   0x6E 0x20          DC8 6EH, 20H, 63H, 75H, 72H, 72H, 65H, 6EH
   \              0x63 0x75    
   \              0x72 0x72    
   \              0x65 0x6E    
   \       0x38   0x74 0x20          DC8 74H, 20H, 72H, 65H, 63H, 6FH, 72H, 64H
   \              0x72 0x65    
   \              0x63 0x6F    
   \              0x72 0x64    
   \       0x40   0x00               DC8 0
   \       0x41   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_257:
   \        0x0   0x73 0x73          DC8 73H, 73H, 6CH, 5FH, 63H, 68H, 65H, 63H
   \              0x6C 0x5F    
   \              0x63 0x68    
   \              0x65 0x63    
   \        0x8   0x6B 0x5F          DC8 6BH, 5FH, 70H, 65H, 6EH, 64H, 69H, 6EH
   \              0x70 0x65    
   \              0x6E 0x64    
   \              0x69 0x6E    
   \       0x10   0x67 0x3A          DC8 67H, 3AH, 20H, 61H, 70H, 70H, 6CH, 69H
   \              0x20 0x61    
   \              0x70 0x70    
   \              0x6C 0x69    
   \       0x18   0x63 0x61          DC8 63H, 61H, 74H, 69H, 6FH, 6EH, 20H, 64H
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x64    
   \       0x20   0x61 0x74          DC8 61H, 74H, 61H, 20H, 72H, 65H, 63H, 6FH
   \              0x61 0x20    
   \              0x72 0x65    
   \              0x63 0x6F    
   \       0x28   0x72 0x64          DC8 72H, 64H, 20H, 69H, 73H, 20H, 62H, 65H
   \              0x20 0x69    
   \              0x73 0x20    
   \              0x62 0x65    
   \       0x30   0x69 0x6E          DC8 69H, 6EH, 67H, 20H, 70H, 72H, 6FH, 63H
   \              0x67 0x20    
   \              0x70 0x72    
   \              0x6F 0x63    
   \       0x38   0x65 0x73          DC8 65H, 73H, 73H, 65H, 64H, 0
   \              0x73 0x65    
   \              0x64 0x00    
   \       0x3E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_258:
   \        0x0   0x73 0x73          DC8 "ssl_check_pending: nothing pending"
   \              0x6C 0x5F    
   \              0x63 0x68    
   \              0x65 0x63    
   \              0x6B 0x5F    
   \              0x70 0x65    
   \              0x6E 0x64    
   \              0x69 0x6E    
   \              0x67 0x3A    
   \              0x20 0x6E    
   \              0x6F 0x74    
   \              0x68 0x69    
   \              0x6E 0x67    
   \              0x20 0x70    
   \              0x65 0x6E    
   \              0x64 0x69    
   \              0x6E 0x67    
   \              0x00         
   \       0x23   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_259:
   \        0x0   0x44 0x54          DC8 "DTLSv1.0"
   \              0x4C 0x53    
   \              0x76 0x31    
   \              0x2E 0x30    
   \              0x00         
   \        0x9   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_260:
   \        0x0   0x44 0x54          DC8 "DTLSv1.2"
   \              0x4C 0x53    
   \              0x76 0x31    
   \              0x2E 0x32    
   \              0x00         
   \        0x9   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_261:
   \        0x0   0x75 0x6E          DC8 "unknown (DTLS)"
   \              0x6B 0x6E    
   \              0x6F 0x77    
   \              0x6E 0x20    
   \              0x28 0x44    
   \              0x54 0x4C    
   \              0x53 0x29    
   \              0x00         
   \        0xF   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_262:
   \        0x0   0x53 0x53          DC8 "SSLv3.0"
   \              0x4C 0x76    
   \              0x33 0x2E    
   \              0x30 0x00    

   \                                 In section .rodata, align 4
   \                     ?_263:
   \        0x0   0x54 0x4C          DC8 "TLSv1.0"
   \              0x53 0x76    
   \              0x31 0x2E    
   \              0x30 0x00    

   \                                 In section .rodata, align 4
   \                     ?_264:
   \        0x0   0x54 0x4C          DC8 "TLSv1.1"
   \              0x53 0x76    
   \              0x31 0x2E    
   \              0x31 0x00    

   \                                 In section .rodata, align 4
   \                     ?_265:
   \        0x0   0x54 0x4C          DC8 "TLSv1.2"
   \              0x53 0x76    
   \              0x31 0x2E    
   \              0x32 0x00    

   \                                 In section .rodata, align 4
   \                     ?_266:
   \        0x0   0x75 0x6E          DC8 "unknown"
   \              0x6B 0x6E    
   \              0x6F 0x77    
   \              0x6E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_267:
   \        0x0   0x4D 0x54          DC8 "MTU too low for record expansion"
   \              0x55 0x20    
   \              0x74 0x6F    
   \              0x6F 0x20    
   \              0x6C 0x6F    
   \              0x77 0x20    
   \              0x66 0x6F    
   \              0x72 0x20    
   \              0x72 0x65    
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x20 0x65    
   \              0x78 0x70    
   \              0x61 0x6E    
   \              0x73 0x69    
   \              0x6F 0x6E    
   \              0x00         
   \       0x21   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_268:
   \        0x0   0x3D 0x3E          DC8 "=> handshake"
   \              0x20 0x68    
   \              0x61 0x6E    
   \              0x64 0x73    
   \              0x68 0x61    
   \              0x6B 0x65    
   \              0x00         
   \        0xD   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_269:
   \        0x0   0x3C 0x3D          DC8 "<= handshake"
   \              0x20 0x68    
   \              0x61 0x6E    
   \              0x64 0x73    
   \              0x68 0x61    
   \              0x6B 0x65    
   \              0x00         
   \        0xD   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_270:
   \        0x0   0x3D 0x3E          DC8 "=> write hello request"
   \              0x20 0x77    
   \              0x72 0x69    
   \              0x74 0x65    
   \              0x20 0x68    
   \              0x65 0x6C    
   \              0x6C 0x6F    
   \              0x20 0x72    
   \              0x65 0x71    
   \              0x75 0x65    
   \              0x73 0x74    
   \              0x00         
   \       0x17   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_271:
   \        0x0   0x3C 0x3D          DC8 "<= write hello request"
   \              0x20 0x77    
   \              0x72 0x69    
   \              0x74 0x65    
   \              0x20 0x68    
   \              0x65 0x6C    
   \              0x6C 0x6F    
   \              0x20 0x72    
   \              0x65 0x71    
   \              0x75 0x65    
   \              0x73 0x74    
   \              0x00         
   \       0x17   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_272:
   \        0x0   0x3D 0x3E          DC8 "=> renegotiate"
   \              0x20 0x72    
   \              0x65 0x6E    
   \              0x65 0x67    
   \              0x6F 0x74    
   \              0x69 0x61    
   \              0x74 0x65    
   \              0x00         
   \        0xF   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_273:
   \        0x0   0x6D 0x62          DC8 "mbedtls_ssl_handshake"
   \              0x65 0x64    
   \              0x74 0x6C    
   \              0x73 0x5F    
   \              0x73 0x73    
   \              0x6C 0x5F    
   \              0x68 0x61    
   \              0x6E 0x64    
   \              0x73 0x68    
   \              0x61 0x6B    
   \              0x65 0x00    
   \       0x16   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_274:
   \        0x0   0x3C 0x3D          DC8 "<= renegotiate"
   \              0x20 0x72    
   \              0x65 0x6E    
   \              0x65 0x67    
   \              0x6F 0x74    
   \              0x69 0x61    
   \              0x74 0x65    
   \              0x00         
   \        0xF   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_275:
   \        0x0   0x73 0x73          DC8 "ssl_start_renegotiation"
   \              0x6C 0x5F    
   \              0x73 0x74    
   \              0x61 0x72    
   \              0x74 0x5F    
   \              0x72 0x65    
   \              0x6E 0x65    
   \              0x67 0x6F    
   \              0x74 0x69    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_276:
   \        0x0   0x72 0x65          DC8 "record counter limit reached: renegotiate"
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x20 0x63    
   \              0x6F 0x75    
   \              0x6E 0x74    
   \              0x65 0x72    
   \              0x20 0x6C    
   \              0x69 0x6D    
   \              0x69 0x74    
   \              0x20 0x72    
   \              0x65 0x61    
   \              0x63 0x68    
   \              0x65 0x64    
   \              0x3A 0x20    
   \              0x72 0x65    
   \              0x6E 0x65    
   \              0x67 0x6F    
   \              0x74 0x69    
   \              0x61 0x74    
   \              0x65 0x00    
   \       0x2A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_277:
   \        0x0   0x3D 0x3E          DC8 "=> read"
   \              0x20 0x72    
   \              0x65 0x61    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     ?_278:
   \        0x0   0x73 0x73          DC8 "ssl_check_ctr_renegotiate"
   \              0x6C 0x5F    
   \              0x63 0x68    
   \              0x65 0x63    
   \              0x6B 0x5F    
   \              0x63 0x74    
   \              0x72 0x5F    
   \              0x72 0x65    
   \              0x6E 0x65    
   \              0x67 0x6F    
   \              0x74 0x69    
   \              0x61 0x74    
   \              0x65 0x00    
   \       0x1A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_279:
   \        0x0   0x72 0x65          DC8 "received handshake message"
   \              0x63 0x65    
   \              0x69 0x76    
   \              0x65 0x64    
   \              0x20 0x68    
   \              0x61 0x6E    
   \              0x64 0x73    
   \              0x68 0x61    
   \              0x6B 0x65    
   \              0x20 0x6D    
   \              0x65 0x73    
   \              0x73 0x61    
   \              0x67 0x65    
   \              0x00         
   \       0x1B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_280:
   \        0x0   0x68 0x61          DC8 "handshake received (not HelloRequest)"
   \              0x6E 0x64    
   \              0x73 0x68    
   \              0x61 0x6B    
   \              0x65 0x20    
   \              0x72 0x65    
   \              0x63 0x65    
   \              0x69 0x76    
   \              0x65 0x64    
   \              0x20 0x28    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x48 0x65    
   \              0x6C 0x6C    
   \              0x6F 0x52    
   \              0x65 0x71    
   \              0x75 0x65    
   \              0x73 0x74    
   \              0x29 0x00    
   \       0x26   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_281:
   \        0x0   0x68 0x61          DC8 "handshake received (not ClientHello)"
   \              0x6E 0x64    
   \              0x73 0x68    
   \              0x61 0x6B    
   \              0x65 0x20    
   \              0x72 0x65    
   \              0x63 0x65    
   \              0x69 0x76    
   \              0x65 0x64    
   \              0x20 0x28    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x43 0x6C    
   \              0x69 0x65    
   \              0x6E 0x74    
   \              0x48 0x65    
   \              0x6C 0x6C    
   \              0x6F 0x29    
   \              0x00         
   \       0x25   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_282:
   \        0x0   0x72 0x65          DC8 "refusing renegotiation, sending alert"
   \              0x66 0x75    
   \              0x73 0x69    
   \              0x6E 0x67    
   \              0x20 0x72    
   \              0x65 0x6E    
   \              0x65 0x67    
   \              0x6F 0x74    
   \              0x69 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x2C 0x20    
   \              0x73 0x65    
   \              0x6E 0x64    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x61 0x6C    
   \              0x65 0x72    
   \              0x74 0x00    
   \       0x26   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_283:
   \        0x0   0x72 0x65          DC8 72H, 65H, 6EH, 65H, 67H, 6FH, 74H, 69H
   \              0x6E 0x65    
   \              0x67 0x6F    
   \              0x74 0x69    
   \        0x8   0x61 0x74          DC8 61H, 74H, 69H, 6FH, 6EH, 20H, 72H, 65H
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x72 0x65    
   \       0x10   0x71 0x75          DC8 71H, 75H, 65H, 73H, 74H, 65H, 64H, 2CH
   \              0x65 0x73    
   \              0x74 0x65    
   \              0x64 0x2C    
   \       0x18   0x20 0x62          DC8 20H, 62H, 75H, 74H, 20H, 6EH, 6FH, 74H
   \              0x75 0x74    
   \              0x20 0x6E    
   \              0x6F 0x74    
   \       0x20   0x20 0x68          DC8 20H, 68H, 6FH, 6EH, 6FH, 72H, 65H, 64H
   \              0x6F 0x6E    
   \              0x6F 0x72    
   \              0x65 0x64    
   \       0x28   0x20 0x62          DC8 20H, 62H, 79H, 20H, 63H, 6CH, 69H, 65H
   \              0x79 0x20    
   \              0x63 0x6C    
   \              0x69 0x65    
   \       0x30   0x6E 0x74          DC8 6EH, 74H, 0
   \              0x00         
   \       0x33   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_284:
   \        0x0   0x69 0x67          DC8 "ignoring non-fatal non-closure alert"
   \              0x6E 0x6F    
   \              0x72 0x69    
   \              0x6E 0x67    
   \              0x20 0x6E    
   \              0x6F 0x6E    
   \              0x2D 0x66    
   \              0x61 0x74    
   \              0x61 0x6C    
   \              0x20 0x6E    
   \              0x6F 0x6E    
   \              0x2D 0x63    
   \              0x6C 0x6F    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x20 0x61    
   \              0x6C 0x65    
   \              0x72 0x74    
   \              0x00         
   \       0x25   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_285:
   \        0x0   0x62 0x61          DC8 "bad application data message"
   \              0x64 0x20    
   \              0x61 0x70    
   \              0x70 0x6C    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x64 0x61    
   \              0x74 0x61    
   \              0x20 0x6D    
   \              0x65 0x73    
   \              0x73 0x61    
   \              0x67 0x65    
   \              0x00         
   \       0x1D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_286:
   \        0x0   0x3C 0x3D          DC8 "<= read"
   \              0x20 0x72    
   \              0x65 0x61    
   \              0x64 0x00    

   \                                 In section .rodata, align 4
   \                     ?_287:
   \        0x0   0x6D 0x62          DC8 "mbedtls_ssl_get_max_out_record_payload"
   \              0x65 0x64    
   \              0x74 0x6C    
   \              0x73 0x5F    
   \              0x73 0x73    
   \              0x6C 0x5F    
   \              0x67 0x65    
   \              0x74 0x5F    
   \              0x6D 0x61    
   \              0x78 0x5F    
   \              0x6F 0x75    
   \              0x74 0x5F    
   \              0x72 0x65    
   \              0x63 0x6F    
   \              0x72 0x64    
   \              0x5F 0x70    
   \              0x61 0x79    
   \              0x6C 0x6F    
   \              0x61 0x64    
   \              0x00         
   \       0x27   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_288:
   \        0x0   0x66 0x72          DC8 66H, 72H, 61H, 67H, 6DH, 65H, 6EH, 74H
   \              0x61 0x67    
   \              0x6D 0x65    
   \              0x6E 0x74    
   \        0x8   0x20 0x6C          DC8 20H, 6CH, 61H, 72H, 67H, 65H, 72H, 20H
   \              0x61 0x72    
   \              0x67 0x65    
   \              0x72 0x20    
   \       0x10   0x74 0x68          DC8 74H, 68H, 61H, 6EH, 20H, 74H, 68H, 65H
   \              0x61 0x6E    
   \              0x20 0x74    
   \              0x68 0x65    
   \       0x18   0x20 0x28          DC8 20H, 28H, 6EH, 65H, 67H, 6FH, 74H, 69H
   \              0x6E 0x65    
   \              0x67 0x6F    
   \              0x74 0x69    
   \       0x20   0x61 0x74          DC8 61H, 74H, 65H, 64H, 29H, 20H, 6DH, 61H
   \              0x65 0x64    
   \              0x29 0x20    
   \              0x6D 0x61    
   \       0x28   0x78 0x69          DC8 78H, 69H, 6DH, 75H, 6DH, 20H, 66H, 72H
   \              0x6D 0x75    
   \              0x6D 0x20    
   \              0x66 0x72    
   \       0x30   0x61 0x67          DC8 61H, 67H, 6DH, 65H, 6EH, 74H, 20H, 6CH
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x20 0x6C    
   \       0x38   0x65 0x6E          DC8 65H, 6EH, 67H, 74H, 68H, 3AH, 20H, 25H
   \              0x67 0x74    
   \              0x68 0x3A    
   \              0x20 0x25    
   \       0x40   0x64 0x20          DC8 64H, 20H, 3EH, 20H, 25H, 64H, 0
   \              0x3E 0x20    
   \              0x25 0x64    
   \              0x00         
   \       0x47   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_289:
   \        0x0   0x3D 0x3E          DC8 "=> write"
   \              0x20 0x77    
   \              0x72 0x69    
   \              0x74 0x65    
   \              0x00         
   \        0x9   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_290:
   \        0x0   0x3C 0x3D          DC8 "<= write"
   \              0x20 0x77    
   \              0x72 0x69    
   \              0x74 0x65    
   \              0x00         
   \        0x9   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_291:
   \        0x0   0x3D 0x3E          DC8 "=> write close notify"
   \              0x20 0x77    
   \              0x72 0x69    
   \              0x74 0x65    
   \              0x20 0x63    
   \              0x6C 0x6F    
   \              0x73 0x65    
   \              0x20 0x6E    
   \              0x6F 0x74    
   \              0x69 0x66    
   \              0x79 0x00    
   \       0x16   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_292:
   \        0x0   0x6D 0x62          DC8 "mbedtls_ssl_send_alert_message"
   \              0x65 0x64    
   \              0x74 0x6C    
   \              0x73 0x5F    
   \              0x73 0x73    
   \              0x6C 0x5F    
   \              0x73 0x65    
   \              0x6E 0x64    
   \              0x5F 0x61    
   \              0x6C 0x65    
   \              0x72 0x74    
   \              0x5F 0x6D    
   \              0x65 0x73    
   \              0x73 0x61    
   \              0x67 0x65    
   \              0x00         
   \       0x1F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_293:
   \        0x0   0x3C 0x3D          DC8 "<= write close notify"
   \              0x20 0x77    
   \              0x72 0x69    
   \              0x74 0x65    
   \              0x20 0x63    
   \              0x6C 0x6F    
   \              0x73 0x65    
   \              0x20 0x6E    
   \              0x6F 0x74    
   \              0x69 0x66    
   \              0x79 0x00    
   \       0x16   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_294:
   \        0x0   0x3D 0x3E          DC8 "=> free"
   \              0x20 0x66    
   \              0x72 0x65    
   \              0x65 0x00    

   \                                 In section .rodata, align 4
   \                     ?_295:
   \        0x0   0x3C 0x3D          DC8 "<= free"
   \              0x20 0x66    
   \              0x72 0x65    
   \              0x65 0x00    

   \                                 In section .rodata, align 4
   \                     ?_296:
   \        0x0   0x2B 0x06          DC8 "+\006\001\005\005\007\003\001"
   \              0x01 0x05    
   \              0x05 0x07    
   \              0x03 0x01    
   \              0x00         
   \        0x9   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_297:
   \        0x0   0x2B 0x06          DC8 "+\006\001\005\005\007\003\002"
   \              0x01 0x05    
   \              0x05 0x07    
   \              0x03 0x02    
   \              0x00         
   \        0x9   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_298:
   \        0x0   0x6D 0x62          DC8 "mbedtls_md5_starts_ret"
   \              0x65 0x64    
   \              0x74 0x6C    
   \              0x73 0x5F    
   \              0x6D 0x64    
   \              0x35 0x5F    
   \              0x73 0x74    
   \              0x61 0x72    
   \              0x74 0x73    
   \              0x5F 0x72    
   \              0x65 0x74    
   \              0x00         
   \       0x17   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_299:
   \        0x0   0x6D 0x62          DC8 "mbedtls_md5_update_ret"
   \              0x65 0x64    
   \              0x74 0x6C    
   \              0x73 0x5F    
   \              0x6D 0x64    
   \              0x35 0x5F    
   \              0x75 0x70    
   \              0x64 0x61    
   \              0x74 0x65    
   \              0x5F 0x72    
   \              0x65 0x74    
   \              0x00         
   \       0x17   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_300:
   \        0x0   0x6D 0x62          DC8 "mbedtls_md5_finish_ret"
   \              0x65 0x64    
   \              0x74 0x6C    
   \              0x73 0x5F    
   \              0x6D 0x64    
   \              0x35 0x5F    
   \              0x66 0x69    
   \              0x6E 0x69    
   \              0x73 0x68    
   \              0x5F 0x72    
   \              0x65 0x74    
   \              0x00         
   \       0x17   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_301:
   \        0x0   0x6D 0x62          DC8 "mbedtls_sha1_starts_ret"
   \              0x65 0x64    
   \              0x74 0x6C    
   \              0x73 0x5F    
   \              0x73 0x68    
   \              0x61 0x31    
   \              0x5F 0x73    
   \              0x74 0x61    
   \              0x72 0x74    
   \              0x73 0x5F    
   \              0x72 0x65    
   \              0x74 0x00    

   \                                 In section .rodata, align 4
   \                     ?_302:
   \        0x0   0x6D 0x62          DC8 "mbedtls_sha1_update_ret"
   \              0x65 0x64    
   \              0x74 0x6C    
   \              0x73 0x5F    
   \              0x73 0x68    
   \              0x61 0x31    
   \              0x5F 0x75    
   \              0x70 0x64    
   \              0x61 0x74    
   \              0x65 0x5F    
   \              0x72 0x65    
   \              0x74 0x00    

   \                                 In section .rodata, align 4
   \                     ?_303:
   \        0x0   0x6D 0x62          DC8 "mbedtls_sha1_finish_ret"
   \              0x65 0x64    
   \              0x74 0x6C    
   \              0x73 0x5F    
   \              0x73 0x68    
   \              0x61 0x31    
   \              0x5F 0x66    
   \              0x69 0x6E    
   \              0x69 0x73    
   \              0x68 0x5F    
   \              0x72 0x65    
   \              0x74 0x00    

   \                                 In section .rodata, align 4
   \                     ?_304:
   \        0x0   0x6D 0x62          DC8 "mbedtls_md_starts"
   \              0x65 0x64    
   \              0x74 0x6C    
   \              0x73 0x5F    
   \              0x6D 0x64    
   \              0x5F 0x73    
   \              0x74 0x61    
   \              0x72 0x74    
   \              0x73 0x00    
   \       0x12   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_305:
   \        0x0   0x6D 0x62          DC8 "mbedtls_md_update"
   \              0x65 0x64    
   \              0x74 0x6C    
   \              0x73 0x5F    
   \              0x6D 0x64    
   \              0x5F 0x75    
   \              0x70 0x64    
   \              0x61 0x74    
   \              0x65 0x00    
   \       0x12   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_306:
   \        0x0   0x6D 0x62          DC8 "mbedtls_md_finish"
   \              0x65 0x64    
   \              0x74 0x6C    
   \              0x73 0x5F    
   \              0x6D 0x64    
   \              0x5F 0x66    
   \              0x69 0x6E    
   \              0x69 0x73    
   \              0x68 0x00    
   \       0x12   0x00 0x00          DC8 0, 0
   9716          #endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 || \
   9717                    MBEDTLS_SSL_PROTO_TLS1_2 */
   9718          
   9719          #endif /* MBEDTLS_SSL_TLS_C */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   mbedtls_cipher_get_block_size
       0   mbedtls_cipher_get_cipher_mode
       0   mbedtls_pk_ec
      24   mbedtls_ssl_check_cert_usage
        24   -> mbedtls_x509_crt_check_extended_key_usage
        24   -> mbedtls_x509_crt_check_key_usage
       0   mbedtls_ssl_check_curve
       8   mbedtls_ssl_check_pending
         8   -> mbedtls_debug_print_msg
       0   mbedtls_ssl_check_sig_hash
      24   mbedtls_ssl_close_notify
        24   -> mbedtls_debug_print_msg
        24   -> mbedtls_debug_print_ret
         0   -> mbedtls_ssl_flush_output
        24   -> mbedtls_ssl_send_alert_message
      24   mbedtls_ssl_conf_alpn_protocols
        24   -> strlen
       0   mbedtls_ssl_conf_authmode
       0   mbedtls_ssl_conf_ca_chain
       0   mbedtls_ssl_conf_cbc_record_splitting
       0   mbedtls_ssl_conf_cert_profile
       0   mbedtls_ssl_conf_cert_req_ca_list
       0   mbedtls_ssl_conf_ciphersuites
       0   mbedtls_ssl_conf_ciphersuites_for_version
       0   mbedtls_ssl_conf_curves
       0   mbedtls_ssl_conf_dbg
      16   mbedtls_ssl_conf_dh_param
        16   -> mbedtls_mpi_free
        16   -> mbedtls_mpi_read_string
      16   mbedtls_ssl_conf_dh_param_bin
        16   -> mbedtls_mpi_free
        16   -> mbedtls_mpi_read_binary
      16   mbedtls_ssl_conf_dh_param_ctx
        16   -> mbedtls_mpi_copy
        16   -> mbedtls_mpi_free
       0   mbedtls_ssl_conf_dhm_min_bitlen
       0   mbedtls_ssl_conf_dtls_anti_replay
       0   mbedtls_ssl_conf_dtls_badmac_limit
       0   mbedtls_ssl_conf_encrypt_then_mac
       0   mbedtls_ssl_conf_endpoint
       0   mbedtls_ssl_conf_export_keys_cb
       0   mbedtls_ssl_conf_extended_master_secret
       0   mbedtls_ssl_conf_fallback
       0   mbedtls_ssl_conf_handshake_timeout
       0   mbedtls_ssl_conf_legacy_renegotiation
      16   mbedtls_ssl_conf_max_frag_len
        16   -> ssl_mfl_code_to_length
       0   mbedtls_ssl_conf_max_version
       0   mbedtls_ssl_conf_min_version
       0   mbedtls_ssl_conf_own_cert
         0   -> ssl_append_key_cert
      24   mbedtls_ssl_conf_psk
        24   -> __aeabi_memcpy
        24   -> mbedtls_calloc
        24   -> mbedtls_free
        24   -> mbedtls_platform_zeroize
       0   mbedtls_ssl_conf_psk_cb
       0   mbedtls_ssl_conf_read_timeout
       0   mbedtls_ssl_conf_renegotiation
       0   mbedtls_ssl_conf_renegotiation_enforced
       0   mbedtls_ssl_conf_renegotiation_period
         0   -> __aeabi_memcpy
       0   mbedtls_ssl_conf_rng
       0   mbedtls_ssl_conf_session_cache
       0   mbedtls_ssl_conf_session_tickets
       0   mbedtls_ssl_conf_session_tickets_cb
       0   mbedtls_ssl_conf_sig_hashes
       0   mbedtls_ssl_conf_sni
       0   mbedtls_ssl_conf_transport
       0   mbedtls_ssl_conf_truncated_hmac
       0   mbedtls_ssl_conf_verify
      24   mbedtls_ssl_config_defaults
        24   -> __aeabi_memset
        24   -> __aeabi_memset4
        24   -> mbedtls_ecp_grp_id_list
        24   -> mbedtls_ssl_conf_dh_param_bin
        24   -> mbedtls_ssl_conf_endpoint
        24   -> mbedtls_ssl_conf_transport
        24   -> mbedtls_ssl_list_ciphersuites
       8   mbedtls_ssl_config_free
         8   -> mbedtls_free
         8   -> mbedtls_mpi_free
         0   -> mbedtls_platform_zeroize
         8   -> mbedtls_platform_zeroize
         8   -> ssl_key_cert_free
       0   mbedtls_ssl_config_init
         0   -> __aeabi_memset4
     416   mbedtls_ssl_derive_keys
       416   -- Indirect call
       416   -> __aeabi_memcpy
       416   -> __aeabi_memcpy4
       416   -> mbedtls_cipher_info_from_type
       416   -> mbedtls_cipher_set_padding_mode
       416   -> mbedtls_cipher_setkey
       416   -> mbedtls_cipher_setup
       416   -> mbedtls_debug_print_buf
       416   -> mbedtls_debug_print_msg
       416   -> mbedtls_debug_print_ret
       416   -> mbedtls_md_get_size
       416   -> mbedtls_md_hmac_starts
       416   -> mbedtls_md_info_from_type
       416   -> mbedtls_md_setup
       416   -> mbedtls_platform_zeroize
       416   -> mbedtls_ssl_get_ciphersuite_name
       8   mbedtls_ssl_dtls_replay_check
         8   -> ssl_load_six_bytes
         8 __aeabi_llsr
      16   mbedtls_ssl_dtls_replay_update
        16   -> ssl_load_six_bytes
        16 __aeabi_llsl
      40   mbedtls_ssl_fetch_input
        40   -- Indirect call
        40   -> __aeabi_memmove
        40   -> mbedtls_debug_print_msg
        40   -> mbedtls_debug_print_ret
        40   -> mbedtls_ssl_resend
        40   -> ssl_check_timer
        40   -> ssl_double_retransmit_timeout
        40   -> ssl_resend_hello_request
        40   -> ssl_set_timer
      48   mbedtls_ssl_flight_transmit
        48   -> __aeabi_memcpy
        48   -> mbedtls_debug_print_buf
        48   -> mbedtls_debug_print_msg
        48   -> mbedtls_debug_print_ret
        48   -> mbedtls_ssl_flush_output
        48   -> mbedtls_ssl_write_record
        48   -> ssl_get_remaining_payload_in_datagram
        48   -> ssl_set_timer
        48   -> ssl_swap_epochs
      32   mbedtls_ssl_flush_output
        32   -- Indirect call
        32   -> mbedtls_debug_print_msg
        32   -> mbedtls_debug_print_ret
        32   -> mbedtls_ssl_hdr_len
        32   -> ssl_update_out_pointers
      16   mbedtls_ssl_free
        16   -> mbedtls_debug_print_msg
        16   -> mbedtls_free
         0   -> mbedtls_platform_zeroize
        16   -> mbedtls_platform_zeroize
        16   -> mbedtls_ssl_handshake_free
        16   -> mbedtls_ssl_session_free
        16   -> mbedtls_ssl_transform_free
        16   -> strlen
       0   mbedtls_ssl_get_alpn_protocol
       0   mbedtls_ssl_get_bytes_avail
       0   mbedtls_ssl_get_ciphersuite
         0   -> mbedtls_ssl_get_ciphersuite_name
     216   mbedtls_ssl_get_key_exchange_md_ssl_tls
       216   -> mbedtls_debug_print_ret
       216   -> mbedtls_md5_finish_ret
       216   -> mbedtls_md5_free
       216   -> mbedtls_md5_init
       216   -> mbedtls_md5_starts_ret
       216   -> mbedtls_md5_update_ret
       216   -> mbedtls_sha1_finish_ret
       216   -> mbedtls_sha1_free
       216   -> mbedtls_sha1_init
       216   -> mbedtls_sha1_starts_ret
       216   -> mbedtls_sha1_update_ret
       216   -> mbedtls_ssl_send_alert_message
      48   mbedtls_ssl_get_key_exchange_md_tls1_2
        48   -> mbedtls_debug_print_ret
        48   -> mbedtls_md_finish
        48   -> mbedtls_md_free
        48   -> mbedtls_md_get_size
        48   -> mbedtls_md_info_from_type
        48   -> mbedtls_md_init
        48   -> mbedtls_md_setup
        48   -> mbedtls_md_starts
        48   -> mbedtls_md_update
        48   -> mbedtls_ssl_send_alert_message
      16   mbedtls_ssl_get_max_frag_len
        16   -> ssl_mfl_code_to_length
      24   mbedtls_ssl_get_max_out_record_payload
        24   -> mbedtls_debug_print_msg
        24   -> mbedtls_ssl_get_max_frag_len
        24   -> mbedtls_ssl_get_record_expansion
        24   -> ssl_get_current_mtu
       0   mbedtls_ssl_get_peer_cert
      16   mbedtls_ssl_get_record_expansion
        16   -> mbedtls_cipher_get_block_size
        16   -> mbedtls_cipher_get_cipher_mode
        16   -> mbedtls_debug_print_msg
         0   -> mbedtls_ssl_hdr_len
        16   -> mbedtls_ssl_hdr_len
       0   mbedtls_ssl_get_session
         0   -> ssl_session_copy
       0   mbedtls_ssl_get_verify_result
       0   mbedtls_ssl_get_version
      24   mbedtls_ssl_handle_message_type
        24   -> mbedtls_debug_print_msg
        24   -> mbedtls_ssl_prepare_handshake_record
        24   -> ssl_handshake_wrapup_free_hs_transform
      24   mbedtls_ssl_handshake
        24   -> mbedtls_debug_print_msg
        24   -> mbedtls_ssl_handshake_step
      16   mbedtls_ssl_handshake_free
        16   -> mbedtls_dhm_free
        16   -> mbedtls_ecdh_free
        16   -> mbedtls_free
        16   -> mbedtls_md5_free
         0   -> mbedtls_platform_zeroize
        16   -> mbedtls_platform_zeroize
        16   -> mbedtls_sha1_free
        16   -> mbedtls_sha256_free
        16   -> mbedtls_sha512_free
        16   -> ssl_buffering_free
        16   -> ssl_flight_free
       8   mbedtls_ssl_handshake_step
         8   -> mbedtls_ssl_handshake_client_step
         0   -> mbedtls_ssl_handshake_server_step
      24   mbedtls_ssl_handshake_wrapup
        24   -- Indirect call
        24   -> mbedtls_debug_print_msg
        24   -> mbedtls_free
        24   -> mbedtls_ssl_session_free
        24   -> ssl_handshake_wrapup_free_hs_transform
        24   -> ssl_set_timer
       0   mbedtls_ssl_hash_from_md_alg
       0   mbedtls_ssl_hdr_len
       0   mbedtls_ssl_hs_hdr_len
       0   mbedtls_ssl_init
         0   -> __aeabi_memset4
       0   mbedtls_ssl_md_alg_from_hash
       0   mbedtls_ssl_optimize_checksum
       0   mbedtls_ssl_own_cert
      48   mbedtls_ssl_parse_certificate
        48   -> mbedtls_calloc
        48   -> mbedtls_debug_print_crt
        48   -> mbedtls_debug_print_msg
        48   -> mbedtls_debug_print_ret
        48   -> mbedtls_free
        48   -> mbedtls_pk_can_do
        48   -> mbedtls_pk_ec
        48   -> mbedtls_ssl_check_cert_usage
        48   -> mbedtls_ssl_check_curve
        48   -> mbedtls_ssl_hs_hdr_len
        48   -> mbedtls_ssl_read_record
        48   -> mbedtls_ssl_send_alert_message
        48   -> mbedtls_x509_crt_free
        48   -> mbedtls_x509_crt_init
        48   -> mbedtls_x509_crt_parse_der
        48   -> mbedtls_x509_crt_verify_with_profile
        48   -> memcmp
      24   mbedtls_ssl_parse_change_cipher_spec
        24   -> __aeabi_memset
        24   -> mbedtls_debug_print_msg
        24   -> mbedtls_debug_print_ret
        24   -> mbedtls_ssl_read_record
        24   -> mbedtls_ssl_send_alert_message
        24   -> ssl_dtls_replay_reset
        24   -> ssl_update_in_pointers
      40   mbedtls_ssl_parse_finished
        40   -- Indirect call
        40   -> __aeabi_memcpy4
        40   -> mbedtls_debug_print_msg
        40   -> mbedtls_debug_print_ret
        40   -> mbedtls_ssl_hs_hdr_len
        40   -> mbedtls_ssl_read_record
        40   -> mbedtls_ssl_recv_flight_completed
        40   -> mbedtls_ssl_safer_memcmp
        40   -> mbedtls_ssl_send_alert_message
       0   mbedtls_ssl_pk_alg_from_sig
      32   mbedtls_ssl_prepare_handshake_record
        32   -> mbedtls_debug_print_msg
        32   -> mbedtls_debug_print_ret
        32   -> mbedtls_ssl_hs_hdr_len
        32   -> mbedtls_ssl_resend
        32   -> ssl_check_hs_header
        32   -> ssl_get_hs_total_len
        32   -> ssl_hs_is_proper_fragment
      40   mbedtls_ssl_psk_derive_premaster
        40   -> __aeabi_memcpy
        40   -> __aeabi_memset
        40   -> mbedtls_debug_print_mpi
        40   -> mbedtls_debug_print_msg
        40   -> mbedtls_debug_print_ret
        40   -> mbedtls_dhm_calc_secret
        40   -> mbedtls_ecdh_calc_secret
      40   mbedtls_ssl_read
        40   -- Indirect call
        40   -> __aeabi_memcpy
        40   -> mbedtls_debug_print_msg
        40   -> mbedtls_debug_print_ret
        40   -> mbedtls_ssl_flight_transmit
        40   -> mbedtls_ssl_flush_output
        40   -> mbedtls_ssl_handshake
        40   -> mbedtls_ssl_hs_hdr_len
        40   -> mbedtls_ssl_read_record
        40   -> mbedtls_ssl_send_alert_message
        40   -> ssl_check_ctr_renegotiate
        40   -> ssl_resend_hello_request
        40   -> ssl_set_timer
        40   -> ssl_start_renegotiation
      32   mbedtls_ssl_read_record
        32   -> mbedtls_debug_print_msg
        32   -> mbedtls_debug_print_ret
        32   -> mbedtls_ssl_handle_message_type
        32   -> mbedtls_ssl_update_handshake_status
        32   -> ssl_buffer_message
        32   -> ssl_consume_current_message
        32   -> ssl_get_next_record
        32   -> ssl_load_buffered_message
        32   -> ssl_next_record_is_in_datagram
        32   -> ssl_record_is_in_progress
       4   mbedtls_ssl_read_version
       8   mbedtls_ssl_recv_flight_completed
         8   -> ssl_buffering_free
         8   -> ssl_flight_free
         8   -> ssl_set_timer
      24   mbedtls_ssl_renegotiate
        24   -> mbedtls_debug_print_ret
         0   -> mbedtls_ssl_flush_output
        24   -> mbedtls_ssl_handshake
        24   -> ssl_start_renegotiation
         0   -> ssl_write_hello_request
      24   mbedtls_ssl_resend
        24   -> mbedtls_debug_print_msg
        24   -> mbedtls_ssl_flight_transmit
       8   mbedtls_ssl_reset_checksum
         8   -> mbedtls_md5_starts_ret
         8   -> mbedtls_sha1_starts_ret
         8   -> mbedtls_sha256_starts_ret
         0   -> mbedtls_sha512_starts_ret
      16   mbedtls_ssl_safer_memcmp
      32   mbedtls_ssl_send_alert_message
        32   -> mbedtls_debug_print_msg
        32   -> mbedtls_debug_print_ret
        32   -> mbedtls_ssl_write_record
       8   mbedtls_ssl_send_fatal_handshake_failure
         8   -> mbedtls_ssl_send_alert_message
       8   mbedtls_ssl_send_flight_completed
         8   -> ssl_reset_retransmit_timeout
         8   -> ssl_set_timer
       8   mbedtls_ssl_session_free
         8   -> mbedtls_free
         0   -> mbedtls_platform_zeroize
         8   -> mbedtls_x509_crt_free
       0   mbedtls_ssl_session_init
         0   -> __aeabi_memset4
       0   mbedtls_ssl_session_reset
         0   -> ssl_session_reset_int
       4   mbedtls_ssl_set_bio
       0   mbedtls_ssl_set_calc_verify_md
       0   mbedtls_ssl_set_datagram_packing
      16   mbedtls_ssl_set_hostname
        16   -> __aeabi_memcpy
        16   -> mbedtls_calloc
        16   -> mbedtls_free
        16   -> mbedtls_platform_zeroize
        16   -> strlen
       0   mbedtls_ssl_set_hs_authmode
       0   mbedtls_ssl_set_hs_ca_chain
       0   mbedtls_ssl_set_hs_own_cert
         0   -> ssl_append_key_cert
      16   mbedtls_ssl_set_hs_psk
        16   -> __aeabi_memcpy
        16   -> mbedtls_calloc
        16   -> mbedtls_free
        16   -> mbedtls_platform_zeroize
       0   mbedtls_ssl_set_mtu
       8   mbedtls_ssl_set_session
         8   -> ssl_session_copy
       0   mbedtls_ssl_set_timer_cb
         0   -> ssl_set_timer
      24   mbedtls_ssl_setup
        24   -> mbedtls_calloc
        24   -> mbedtls_debug_print_msg
        24   -> mbedtls_free
        24   -> ssl_handshake_init
        24   -> ssl_reset_in_out_pointers
       8   mbedtls_ssl_sig_from_pk
         8   -> mbedtls_pk_can_do
       0   mbedtls_ssl_sig_from_pk_alg
       0   mbedtls_ssl_sig_hash_set_add
       0   mbedtls_ssl_sig_hash_set_const_hash
       0   mbedtls_ssl_sig_hash_set_find
       0   mbedtls_ssl_sig_hash_set_init
         0   -> mbedtls_ssl_sig_hash_set_const_hash
       8   mbedtls_ssl_transform_free
         8   -> mbedtls_cipher_free
         8   -> mbedtls_md_free
         0   -> mbedtls_platform_zeroize
      16   mbedtls_ssl_update_handshake_status
        16   -- Indirect call
         0   -> __aeabi_memset4
        16   -> ssl_buffering_free_slot
      32   mbedtls_ssl_write
        32   -> mbedtls_debug_print_msg
        32   -> mbedtls_debug_print_ret
        32   -> mbedtls_ssl_handshake
        32   -> ssl_check_ctr_renegotiate
        32   -> ssl_write_split
      40   mbedtls_ssl_write_certificate
        40   -> __aeabi_memcpy
        40   -> mbedtls_debug_print_crt
        40   -> mbedtls_debug_print_msg
        40   -> mbedtls_debug_print_ret
        40   -> mbedtls_ssl_own_cert
        40   -> mbedtls_ssl_write_handshake_msg
      24   mbedtls_ssl_write_change_cipher_spec
        24   -> mbedtls_debug_print_msg
        24   -> mbedtls_debug_print_ret
        24   -> mbedtls_ssl_write_handshake_msg
      24   mbedtls_ssl_write_finished
        24   -- Indirect call
        24   -> __aeabi_memcpy
        24   -> __aeabi_memcpy4
        24   -> __aeabi_memset
        24   -> __aeabi_memset4
        24   -> mbedtls_debug_print_msg
        24   -> mbedtls_debug_print_ret
        24   -> mbedtls_ssl_flight_transmit
        24   -> mbedtls_ssl_send_flight_completed
        24   -> mbedtls_ssl_write_handshake_msg
        24   -> ssl_update_out_pointers
      32   mbedtls_ssl_write_handshake_msg
        32   -- Indirect call
        32   -> __aeabi_memcpy
        32   -> __aeabi_memmove
        32   -> __aeabi_memset
        32   -> mbedtls_debug_print_msg
        32   -> mbedtls_debug_print_ret
        32   -> mbedtls_ssl_write_record
        32   -> ssl_flight_append
      48   mbedtls_ssl_write_record
        48   -> __aeabi_memcpy
        48   -> mbedtls_debug_print_buf
        48   -> mbedtls_debug_print_msg
        48   -> mbedtls_debug_print_ret
        48   -> mbedtls_ssl_flush_output
        48   -> mbedtls_ssl_hdr_len
        48   -> mbedtls_ssl_write_version
        48   -> ssl_encrypt_buf
        48   -> ssl_ep_len
        48   -> ssl_get_remaining_payload_in_datagram
        48   -> ssl_get_remaining_space_in_datagram
        48   -> ssl_update_out_pointers
       0   mbedtls_ssl_write_version
      16   ssl_append_key_cert
        16   -> mbedtls_calloc
       8   ssl_bitmask_check
      16   ssl_bitmask_set
         0   -> __aeabi_memset
      40   ssl_buffer_future_record
        40   -> __aeabi_memcpy
        40   -> mbedtls_calloc
        40   -> mbedtls_debug_print_buf
        40   -> mbedtls_debug_print_msg
      32   ssl_buffer_make_space
        32   -> mbedtls_debug_print_msg
        32   -> ssl_buffering_free_slot
        32   -> ssl_free_buffered_record
      56   ssl_buffer_message
        56   -> __aeabi_memcpy
        56   -> __aeabi_memset
        56   -> mbedtls_calloc
        56   -> mbedtls_debug_print_msg
        56   -> memcmp
        56   -> ssl_bitmask_check
        56   -> ssl_bitmask_set
        56   -> ssl_buffer_make_space
        56   -> ssl_get_hs_frag_len
        56   -> ssl_get_hs_frag_off
        56   -> ssl_get_reassembly_buffer_size
        56   -> ssl_hs_is_proper_fragment
      16   ssl_buffering_free
        16   -> ssl_buffering_free_slot
        16   -> ssl_free_buffered_record
       8   ssl_buffering_free_slot
         0   -> __aeabi_memset4
         8   -> mbedtls_free
     256   ssl_calc_finished_tls
       256   -- Indirect call
       256   -> mbedtls_debug_print_buf
       256   -> mbedtls_debug_print_msg
       256   -> mbedtls_md5_clone
       256   -> mbedtls_md5_finish_ret
       256   -> mbedtls_md5_free
       256   -> mbedtls_md5_init
       256   -> mbedtls_platform_zeroize
       256   -> mbedtls_sha1_clone
       256   -> mbedtls_sha1_finish_ret
       256   -> mbedtls_sha1_free
       256   -> mbedtls_sha1_init
     176   ssl_calc_finished_tls_sha256
       176   -- Indirect call
       176   -> mbedtls_debug_print_buf
       176   -> mbedtls_debug_print_msg
       176   -> mbedtls_platform_zeroize
       176   -> mbedtls_sha256_clone
       176   -> mbedtls_sha256_finish_ret
       176   -> mbedtls_sha256_free
       176   -> mbedtls_sha256_init
     304   ssl_calc_finished_tls_sha384
       304   -- Indirect call
       304   -> mbedtls_debug_print_buf
       304   -> mbedtls_debug_print_msg
       304   -> mbedtls_platform_zeroize
       304   -> mbedtls_sha512_clone
       304   -> mbedtls_sha512_finish_ret
       304   -> mbedtls_sha512_free
       304   -> mbedtls_sha512_init
     208   ssl_calc_verify_tls
       208   -> mbedtls_debug_print_buf
       208   -> mbedtls_debug_print_msg
       208   -> mbedtls_md5_clone
       208   -> mbedtls_md5_finish_ret
       208   -> mbedtls_md5_free
       208   -> mbedtls_md5_init
       208   -> mbedtls_sha1_clone
       208   -> mbedtls_sha1_finish_ret
       208   -> mbedtls_sha1_free
       208   -> mbedtls_sha1_init
     136   ssl_calc_verify_tls_sha256
       136   -> mbedtls_debug_print_buf
       136   -> mbedtls_debug_print_msg
       136   -> mbedtls_sha256_clone
       136   -> mbedtls_sha256_finish_ret
       136   -> mbedtls_sha256_free
       136   -> mbedtls_sha256_init
     248   ssl_calc_verify_tls_sha384
       248   -> mbedtls_debug_print_buf
       248   -> mbedtls_debug_print_msg
       248   -> mbedtls_sha512_clone
       248   -> mbedtls_sha512_finish_ret
       248   -> mbedtls_sha512_free
       248   -> mbedtls_sha512_init
      24   ssl_check_ctr_renegotiate
        24   -> mbedtls_debug_print_msg
         0   -> mbedtls_ssl_renegotiate
        24   -> memcmp
        24   -> ssl_ep_len
      40   ssl_check_dtls_clihlo_cookie
        40   -- Indirect call
        40   -> __aeabi_memcpy
      16   ssl_check_hs_header
        16   -> ssl_get_hs_frag_len
        16   -> ssl_get_hs_frag_off
        16   -> ssl_get_hs_total_len
      16   ssl_check_timer
        16   -- Indirect call
        16   -> mbedtls_debug_print_msg
      24   ssl_consume_current_message
        24   -> __aeabi_memmove
        24   -> mbedtls_debug_print_buf
        24   -> mbedtls_debug_print_msg
       0   ssl_cookie_check_dummy
       0   ssl_cookie_write_dummy
     120   ssl_decrypt_buf
       120   -> __aeabi_memcpy
       120   -> __aeabi_memcpy4
       120   -> mbedtls_cipher_auth_decrypt
       120   -> mbedtls_cipher_crypt
       120   -> mbedtls_cipher_get_cipher_mode
       120   -> mbedtls_debug_print_buf
       120   -> mbedtls_debug_print_msg
       120   -> mbedtls_debug_print_ret
       120   -> mbedtls_md_hmac_finish
       120   -> mbedtls_md_hmac_reset
       120   -> mbedtls_md_hmac_update
       120   -> mbedtls_md_process
       120   -> mbedtls_ssl_safer_memcmp
       120   -> mbedtls_ssl_write_version
       120   -> ssl_ep_len
       120   -> ssl_read_memory
      16   ssl_double_retransmit_timeout
        16   -> mbedtls_debug_print_msg
       0   ssl_dtls_replay_reset
     120   ssl_encrypt_buf
       120   -- Indirect call
       120   -> __aeabi_memcpy
       120   -> __aeabi_memcpy4
       120   -> mbedtls_cipher_auth_encrypt
       120   -> mbedtls_cipher_crypt
       120   -> mbedtls_cipher_get_cipher_mode
       120   -> mbedtls_debug_print_buf
       120   -> mbedtls_debug_print_msg
       120   -> mbedtls_debug_print_ret
       120   -> mbedtls_md_hmac_finish
       120   -> mbedtls_md_hmac_reset
       120   -> mbedtls_md_hmac_update
       120   -> mbedtls_ssl_write_version
       0   ssl_ep_len
      32   ssl_flight_append
        32   -> __aeabi_memcpy
        32   -> mbedtls_calloc
        32   -> mbedtls_debug_print_buf
        32   -> mbedtls_debug_print_msg
        32   -> mbedtls_free
      16   ssl_flight_free
        16   -> mbedtls_free
       8   ssl_free_buffered_record
         8   -> mbedtls_free
       0   ssl_get_current_mtu
       0   ssl_get_hs_frag_len
       0   ssl_get_hs_frag_off
       0   ssl_get_hs_total_len
       8   ssl_get_maximum_datagram_size
         8   -> ssl_get_current_mtu
      24   ssl_get_next_record
        24   -> mbedtls_debug_print_msg
        24   -> mbedtls_debug_print_ret
        24   -> mbedtls_ssl_fetch_input
        24   -> mbedtls_ssl_hdr_len
        24   -> mbedtls_ssl_send_alert_message
        24   -> ssl_buffer_future_record
        24   -> ssl_load_buffered_record
        24   -> ssl_parse_record_header
        24   -> ssl_prepare_record_content
       0   ssl_get_reassembly_buffer_size
      16   ssl_get_remaining_payload_in_datagram
        16   -> mbedtls_ssl_get_max_frag_len
        16   -> mbedtls_ssl_get_record_expansion
        16   -> ssl_get_remaining_space_in_datagram
       8   ssl_get_remaining_space_in_datagram
         8   -> ssl_get_maximum_datagram_size
      48   ssl_handle_possible_reconnect
        48   -- Indirect call
        48   -> mbedtls_debug_print_ret
        48   -> ssl_check_dtls_clihlo_cookie
        48   -> ssl_session_reset_int
      16   ssl_handshake_init
        16   -> mbedtls_calloc
        16   -> mbedtls_debug_print_msg
        16   -> mbedtls_free
        16   -> mbedtls_ssl_handshake_free
        16   -> mbedtls_ssl_session_free
        16   -> mbedtls_ssl_session_init
        16   -> mbedtls_ssl_transform_free
        16   -> ssl_handshake_params_init
        16   -> ssl_set_timer
        16   -> ssl_transform_init
       8   ssl_handshake_params_init
         8   -> __aeabi_memset4
         8   -> mbedtls_dhm_init
         8   -> mbedtls_ecdh_init
         8   -> mbedtls_md5_init
         8   -> mbedtls_md5_starts_ret
         8   -> mbedtls_sha1_init
         8   -> mbedtls_sha1_starts_ret
         8   -> mbedtls_sha256_init
         8   -> mbedtls_sha256_starts_ret
         8   -> mbedtls_sha512_init
         8   -> mbedtls_sha512_starts_ret
         8   -> mbedtls_ssl_sig_hash_set_init
      16   ssl_handshake_wrapup_free_hs_transform
        16   -> mbedtls_debug_print_msg
        16   -> mbedtls_free
        16   -> mbedtls_ssl_handshake_free
        16   -> mbedtls_ssl_transform_free
       8   ssl_hs_is_proper_fragment
         8   -> memcmp
       8   ssl_key_cert_free
         8   -> mbedtls_free
      40   ssl_load_buffered_message
        40   -> __aeabi_memcpy
        40   -> mbedtls_debug_print_buf
        40   -> mbedtls_debug_print_msg
      32   ssl_load_buffered_record
        32   -> __aeabi_memcpy
        32   -> mbedtls_debug_print_msg
        32   -> ssl_free_buffered_record
        32   -> ssl_next_record_is_in_datagram
       8   ssl_load_six_bytes
       0   ssl_mfl_code_to_length
       0   ssl_next_record_is_in_datagram
      48   ssl_parse_record_header
        48   -> mbedtls_debug_print_buf
        48   -> mbedtls_debug_print_msg
        48   -> mbedtls_ssl_dtls_replay_check
        48   -> mbedtls_ssl_hdr_len
        48   -> mbedtls_ssl_read_version
        48   -> mbedtls_ssl_send_alert_message
        48   -> ssl_handle_possible_reconnect
      32   ssl_prepare_record_content
        32   -> mbedtls_debug_print_buf
        32   -> mbedtls_debug_print_msg
        32   -> mbedtls_debug_print_ret
        32   -> mbedtls_ssl_dtls_replay_update
        32   -> mbedtls_ssl_hdr_len
        32   -> ssl_decrypt_buf
       4   ssl_read_memory
       0   ssl_record_is_in_progress
       8   ssl_resend_hello_request
         8   -> mbedtls_debug_print_msg
         0   -> ssl_write_hello_request
       8   ssl_reset_in_out_pointers
         0   -> ssl_update_in_pointers
         8   -> ssl_update_out_pointers
      16   ssl_reset_retransmit_timeout
        16   -> mbedtls_debug_print_msg
      16   ssl_session_copy
        16   -> __aeabi_memcpy
        16   -> __aeabi_memcpy4
        16   -> mbedtls_calloc
        16   -> mbedtls_free
        16   -> mbedtls_ssl_session_free
        16   -> mbedtls_x509_crt_init
        16   -> mbedtls_x509_crt_parse_der
      16   ssl_session_reset_int
        16   -> __aeabi_memset
        16   -> __aeabi_memset4
        16   -> mbedtls_free
        16   -> mbedtls_ssl_session_free
        16   -> mbedtls_ssl_transform_free
        16   -> ssl_dtls_replay_reset
        16   -> ssl_handshake_init
        16   -> ssl_reset_in_out_pointers
        16   -> ssl_set_timer
      24   ssl_set_timer
         0   -- Indirect call
        24   -> mbedtls_debug_print_msg
      24   ssl_start_renegotiation
        24   -> mbedtls_debug_print_msg
        24   -> mbedtls_debug_print_ret
        24   -> mbedtls_ssl_handshake
        24   -> ssl_handshake_init
      24   ssl_swap_epochs
        24   -> __aeabi_memcpy4
        24   -> mbedtls_debug_print_msg
        24   -> ssl_update_out_pointers
       8   ssl_transform_init
         8   -> __aeabi_memset4
         8   -> mbedtls_cipher_init
         0   -> mbedtls_md_init
         8   -> mbedtls_md_init
      16   ssl_update_checksum_md5sha1
        16   -> mbedtls_md5_update_ret
         0   -> mbedtls_sha1_update_ret
       0   ssl_update_checksum_sha256
         0   -> mbedtls_sha256_update_ret
       0   ssl_update_checksum_sha384
         0   -> mbedtls_sha512_update_ret
      16   ssl_update_checksum_start
        16   -> mbedtls_md5_update_ret
        16   -> mbedtls_sha1_update_ret
        16   -> mbedtls_sha256_update_ret
         0   -> mbedtls_sha512_update_ret
       0   ssl_update_in_pointers
       0   ssl_update_out_pointers
      24   ssl_write_hello_request
        24   -> mbedtls_debug_print_msg
        24   -> mbedtls_debug_print_ret
        24   -> mbedtls_ssl_write_handshake_msg
      32   ssl_write_real
        32   -> __aeabi_memcpy
        32   -> mbedtls_debug_print_msg
        32   -> mbedtls_debug_print_ret
        32   -> mbedtls_ssl_flush_output
        32   -> mbedtls_ssl_get_max_out_record_payload
        32   -> mbedtls_ssl_write_record
      16   ssl_write_split
        16   -> mbedtls_cipher_get_cipher_mode
         0   -> ssl_write_real
        16   -> ssl_write_real
     192   tls1_prf
       192   -> __aeabi_memcpy
       192   -> mbedtls_md_free
       192   -> mbedtls_md_hmac_finish
       192   -> mbedtls_md_hmac_reset
       192   -> mbedtls_md_hmac_starts
       192   -> mbedtls_md_hmac_update
       192   -> mbedtls_md_info_from_type
       192   -> mbedtls_md_init
       192   -> mbedtls_md_setup
       192   -> mbedtls_platform_zeroize
       192   -> strlen
     240   tls_prf_generic
       240   -> __aeabi_memcpy
       240   -> mbedtls_md_free
       240   -> mbedtls_md_get_size
       240   -> mbedtls_md_hmac_finish
       240   -> mbedtls_md_hmac_reset
       240   -> mbedtls_md_hmac_starts
       240   -> mbedtls_md_hmac_update
       240   -> mbedtls_md_info_from_type
       240   -> mbedtls_md_init
       240   -> mbedtls_md_setup
       240   -> mbedtls_platform_zeroize
       240   -> strlen
      32   tls_prf_sha256
        32   -> tls_prf_generic
      32   tls_prf_sha384
        32   -> tls_prf_generic


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable10
       4  ??DataTable10_1
       4  ??DataTable12
       4  ??DataTable12_1
       4  ??DataTable12_2
       4  ??DataTable12_3
       4  ??DataTable13
       4  ??DataTable13_1
       4  ??DataTable13_10
       4  ??DataTable13_11
       4  ??DataTable13_12
       4  ??DataTable13_13
       4  ??DataTable13_14
       4  ??DataTable13_15
       4  ??DataTable13_16
       4  ??DataTable13_17
       4  ??DataTable13_18
       4  ??DataTable13_19
       4  ??DataTable13_2
       4  ??DataTable13_20
       4  ??DataTable13_21
       4  ??DataTable13_22
       4  ??DataTable13_23
       4  ??DataTable13_24
       4  ??DataTable13_25
       4  ??DataTable13_3
       4  ??DataTable13_4
       4  ??DataTable13_5
       4  ??DataTable13_6
       4  ??DataTable13_7
       4  ??DataTable13_8
       4  ??DataTable13_9
       4  ??DataTable14
       4  ??DataTable14_1
       4  ??DataTable14_10
       4  ??DataTable14_11
       4  ??DataTable14_12
       4  ??DataTable14_13
       4  ??DataTable14_14
       4  ??DataTable14_15
       4  ??DataTable14_16
       4  ??DataTable14_17
       4  ??DataTable14_18
       4  ??DataTable14_19
       4  ??DataTable14_2
       4  ??DataTable14_20
       4  ??DataTable14_3
       4  ??DataTable14_4
       4  ??DataTable14_5
       4  ??DataTable14_6
       4  ??DataTable14_7
       4  ??DataTable14_8
       4  ??DataTable14_9
       4  ??DataTable15
       4  ??DataTable16
       4  ??DataTable16_1
       4  ??DataTable16_2
       4  ??DataTable16_3
       4  ??DataTable16_4
       4  ??DataTable16_5
       4  ??DataTable16_6
       4  ??DataTable16_7
       4  ??DataTable16_8
       4  ??DataTable16_9
       4  ??DataTable17
       4  ??DataTable17_1
       4  ??DataTable17_2
       4  ??DataTable17_3
       4  ??DataTable17_4
       4  ??DataTable17_5
       4  ??DataTable18
       4  ??DataTable18_1
       4  ??DataTable18_2
       4  ??DataTable18_3
       4  ??DataTable18_4
       4  ??DataTable20
       4  ??DataTable21
       4  ??DataTable21_1
       4  ??DataTable21_2
       4  ??DataTable21_3
       4  ??DataTable22
       4  ??DataTable22_1
       4  ??DataTable22_2
       4  ??DataTable22_3
       4  ??DataTable22_4
       4  ??DataTable22_5
       4  ??DataTable22_6
       4  ??DataTable23
       4  ??DataTable23_1
       4  ??DataTable23_10
       4  ??DataTable23_11
       4  ??DataTable23_12
       4  ??DataTable23_13
       4  ??DataTable23_14
       4  ??DataTable23_15
       4  ??DataTable23_2
       4  ??DataTable23_3
       4  ??DataTable23_4
       4  ??DataTable23_5
       4  ??DataTable23_6
       4  ??DataTable23_7
       4  ??DataTable23_8
       4  ??DataTable23_9
       4  ??DataTable24
       4  ??DataTable25
       4  ??DataTable25_1
       4  ??DataTable25_10
       4  ??DataTable25_11
       4  ??DataTable25_12
       4  ??DataTable25_13
       4  ??DataTable25_2
       4  ??DataTable25_3
       4  ??DataTable25_4
       4  ??DataTable25_5
       4  ??DataTable25_6
       4  ??DataTable25_7
       4  ??DataTable25_8
       4  ??DataTable25_9
       4  ??DataTable26
       4  ??DataTable26_1
       4  ??DataTable26_2
       4  ??DataTable26_3
       4  ??DataTable26_4
       4  ??DataTable26_5
       4  ??DataTable26_6
       4  ??DataTable26_7
       4  ??DataTable26_8
       4  ??DataTable26_9
       4  ??DataTable27
       4  ??DataTable28
       4  ??DataTable28_1
       4  ??DataTable28_2
       4  ??DataTable28_3
       4  ??DataTable28_4
       4  ??DataTable28_5
       4  ??DataTable28_6
       4  ??DataTable29
       4  ??DataTable29_1
       4  ??DataTable30
       4  ??DataTable30_1
       4  ??DataTable30_2
       4  ??DataTable30_3
       4  ??DataTable30_4
       4  ??DataTable30_5
       4  ??DataTable30_6
       4  ??DataTable31
       4  ??DataTable31_1
       4  ??DataTable32
       4  ??DataTable32_1
       4  ??DataTable32_2
       4  ??DataTable32_3
       4  ??DataTable32_4
       4  ??DataTable33
       4  ??DataTable33_1
       4  ??DataTable33_2
       4  ??DataTable33_3
       4  ??DataTable33_4
       4  ??DataTable33_5
       4  ??DataTable33_6
       4  ??DataTable33_7
       4  ??DataTable33_8
       4  ??DataTable33_9
       4  ??DataTable34
       4  ??DataTable35
       4  ??DataTable35_1
       4  ??DataTable35_2
       4  ??DataTable35_3
       4  ??DataTable35_4
       4  ??DataTable35_5
       4  ??DataTable36
       4  ??DataTable36_1
       4  ??DataTable36_2
       4  ??DataTable36_3
       4  ??DataTable36_4
       4  ??DataTable37
       4  ??DataTable37_1
       4  ??DataTable37_2
       4  ??DataTable37_3
       4  ??DataTable37_4
       4  ??DataTable37_5
       4  ??DataTable37_6
       4  ??DataTable37_7
       4  ??DataTable37_8
       4  ??DataTable37_9
       4  ??DataTable38
       4  ??DataTable38_1
       4  ??DataTable38_2
       4  ??DataTable38_3
       4  ??DataTable38_4
       4  ??DataTable38_5
       4  ??DataTable38_6
       4  ??DataTable39
       4  ??DataTable39_1
       4  ??DataTable39_2
       4  ??DataTable39_3
       4  ??DataTable39_4
       4  ??DataTable39_5
       4  ??DataTable39_6
       4  ??DataTable40
       4  ??DataTable40_1
       4  ??DataTable40_2
       4  ??DataTable40_3
       4  ??DataTable40_4
       4  ??DataTable40_5
       4  ??DataTable40_6
       4  ??DataTable40_7
       4  ??DataTable41
       4  ??DataTable41_1
       4  ??DataTable41_10
       4  ??DataTable41_11
       4  ??DataTable41_12
       4  ??DataTable41_13
       4  ??DataTable41_14
       4  ??DataTable41_15
       4  ??DataTable41_16
       4  ??DataTable41_17
       4  ??DataTable41_18
       4  ??DataTable41_19
       4  ??DataTable41_2
       4  ??DataTable41_20
       4  ??DataTable41_21
       4  ??DataTable41_22
       4  ??DataTable41_23
       4  ??DataTable41_24
       4  ??DataTable41_25
       4  ??DataTable41_26
       4  ??DataTable41_27
       4  ??DataTable41_3
       4  ??DataTable41_4
       4  ??DataTable41_5
       4  ??DataTable41_6
       4  ??DataTable41_7
       4  ??DataTable41_8
       4  ??DataTable41_9
       4  ??DataTable42
       4  ??DataTable42_1
       4  ??DataTable42_2
       4  ??DataTable42_3
       4  ??DataTable43
       4  ??DataTable43_1
       4  ??DataTable43_2
       4  ??DataTable43_3
       4  ??DataTable43_4
       4  ??DataTable43_5
       4  ??DataTable43_6
       4  ??DataTable44
       4  ??DataTable44_1
       4  ??DataTable44_10
       4  ??DataTable44_2
       4  ??DataTable44_3
       4  ??DataTable44_4
       4  ??DataTable44_5
       4  ??DataTable44_6
       4  ??DataTable44_7
       4  ??DataTable44_8
       4  ??DataTable44_9
       4  ??DataTable45
       4  ??DataTable45_1
       4  ??DataTable45_2
       4  ??DataTable45_3
       4  ??DataTable45_4
       4  ??DataTable46
       4  ??DataTable46_1
       4  ??DataTable46_2
       4  ??DataTable46_3
       4  ??DataTable48
       4  ??DataTable48_1
       4  ??DataTable48_2
       4  ??DataTable48_3
       4  ??DataTable49
       4  ??DataTable49_1
       4  ??DataTable49_2
       4  ??DataTable49_3
       4  ??DataTable49_4
       4  ??DataTable49_5
       4  ??DataTable49_6
       4  ??DataTable49_7
       4  ??DataTable50
       4  ??DataTable50_1
       4  ??DataTable50_2
       4  ??DataTable51
       4  ??DataTable52
       4  ??DataTable52_1
       4  ??DataTable52_2
       4  ??DataTable52_3
       4  ??DataTable52_4
       4  ??DataTable53
       4  ??DataTable55
       4  ??DataTable55_1
       4  ??DataTable55_2
       4  ??DataTable55_3
       4  ??DataTable55_4
       4  ??DataTable55_5
       4  ??DataTable55_6
       4  ??DataTable56
       4  ??DataTable56_1
       4  ??DataTable56_2
       4  ??DataTable56_3
       4  ??DataTable56_4
       4  ??DataTable56_5
       4  ??DataTable56_6
       4  ??DataTable57
       4  ??DataTable57_1
       4  ??DataTable57_2
       4  ??DataTable57_3
       4  ??DataTable58
       4  ??DataTable58_1
       4  ??DataTable58_2
       4  ??DataTable59
       4  ??DataTable59_1
       4  ??DataTable60
       4  ??DataTable60_1
       4  ??DataTable60_2
       4  ??DataTable61
       4  ??DataTable62
       4  ??DataTable62_1
       4  ??DataTable63
       4  ??DataTable63_1
       4  ??DataTable63_2
       4  ??DataTable64
       4  ??DataTable64_1
       4  ??DataTable64_2
       4  ??DataTable65
       4  ??DataTable65_1
       4  ??DataTable65_2
       4  ??DataTable66
       4  ??DataTable67
       4  ??DataTable68
       4  ??DataTable69
       4  ??DataTable71
       4  ??DataTable71_1
       4  ??DataTable72
       4  ??DataTable72_1
       4  ??DataTable74
       4  ??DataTable77
       4  ??DataTable77_1
       4  ??DataTable77_2
       4  ??DataTable77_3
       4  ??DataTable78
       4  ??DataTable78_1
       4  ??DataTable78_10
       4  ??DataTable78_2
       4  ??DataTable78_3
       4  ??DataTable78_4
       4  ??DataTable78_5
       4  ??DataTable78_6
       4  ??DataTable78_7
       4  ??DataTable78_8
       4  ??DataTable78_9
       4  ??DataTable79
       4  ??DataTable79_1
       4  ??DataTable79_2
       4  ??DataTable79_3
       4  ??DataTable79_4
       4  ??DataTable80
       4  ??DataTable80_1
       4  ??DataTable80_2
       4  ??DataTable80_3
       4  ??DataTable80_4
       4  ??DataTable80_5
       4  ??DataTable80_6
       4  ??DataTable80_7
       4  ??DataTable80_8
       4  ??DataTable80_9
       4  ??DataTable81
       4  ??DataTable81_1
       4  ??DataTable81_2
       4  ??DataTable82
       4  ??DataTable82_1
       4  ??DataTable82_2
       4  ??DataTable82_3
       4  ??DataTable83
       4  ??DataTable83_1
       4  ??DataTable83_2
       4  ??DataTable83_3
       4  ??DataTable83_4
       4  ??DataTable83_5
       4  ??DataTable84
       4  ??DataTable84_1
       4  ??DataTable84_10
       4  ??DataTable84_11
       4  ??DataTable84_12
       4  ??DataTable84_13
       4  ??DataTable84_14
       4  ??DataTable84_15
       4  ??DataTable84_16
       4  ??DataTable84_17
       4  ??DataTable84_18
       4  ??DataTable84_19
       4  ??DataTable84_2
       4  ??DataTable84_20
       4  ??DataTable84_21
       4  ??DataTable84_22
       4  ??DataTable84_23
       4  ??DataTable84_24
       4  ??DataTable84_25
       4  ??DataTable84_26
       4  ??DataTable84_27
       4  ??DataTable84_28
       4  ??DataTable84_29
       4  ??DataTable84_3
       4  ??DataTable84_30
       4  ??DataTable84_31
       4  ??DataTable84_32
       4  ??DataTable84_33
       4  ??DataTable84_34
       4  ??DataTable84_35
       4  ??DataTable84_36
       4  ??DataTable84_37
       4  ??DataTable84_38
       4  ??DataTable84_4
       4  ??DataTable84_5
       4  ??DataTable84_6
       4  ??DataTable84_7
       4  ??DataTable84_8
       4  ??DataTable84_9
      68  ?_0
      20  ?_1
      16  ?_10
      40  ?_100
      56  ?_101
      20  ?_102
      20  ?_103
      28  ?_104
      16  ?_105
      16  ?_106
      60  ?_107
      32  ?_108
      36  ?_109
      24  ?_11
      40  ?_110
      48  ?_111
      28  ?_112
      16  ?_113
       4  ?_114
      32  ?_115
      56  ?_116
      28  ?_117
      68  ?_118
      76  ?_119
       4  ?_12
      68  ?_120
      40  ?_121
      44  ?_122
      32  ?_123
       8  ?_124
      20  ?_125
      60  ?_126
      20  ?_127
      24  ?_128
      24  ?_129
      16  ?_13
      20  ?_130
      52  ?_131
      48  ?_132
      32  ?_133
      16  ?_134
      36  ?_135
      28  ?_136
      16  ?_137
      28  ?_138
      16  ?_139
      32  ?_14
      20  ?_140
      32  ?_141
      32  ?_142
      16  ?_143
      32  ?_144
      36  ?_145
      32  ?_146
      52  ?_147
       8  ?_148
      12  ?_149
      16  ?_15
      48  ?_150
      44  ?_151
      60  ?_152
      32  ?_153
      64  ?_154
      60  ?_155
      80  ?_156
      60  ?_157
      24  ?_158
      24  ?_159
      20  ?_16
      76  ?_160
      60  ?_161
     120  ?_162
     168  ?_163
     132  ?_164
      44  ?_165
      36  ?_166
      44  ?_167
      20  ?_168
       1  ?_169
      16  ?_17
      12  ?_170
      24  ?_171
      28  ?_172
      28  ?_173
      40  ?_174
      48  ?_175
      28  ?_176
     124  ?_177
      28  ?_178
      16  ?_179
      12  ?_18
      24  ?_180
      40  ?_181
      36  ?_182
      40  ?_183
      32  ?_184
      32  ?_185
      32  ?_186
      36  ?_187
      44  ?_188
      52  ?_189
      20  ?_19
      32  ?_190
      36  ?_191
      36  ?_192
      28  ?_193
      36  ?_194
      24  ?_195
      32  ?_196
      24  ?_197
      24  ?_198
      28  ?_199
      16  ?_2
      48  ?_20
      28  ?_200
      16  ?_201
      32  ?_202
      32  ?_203
      24  ?_204
      24  ?_205
      28  ?_206
      24  ?_207
      32  ?_208
      24  ?_209
      24  ?_21
      24  ?_210
      28  ?_211
      20  ?_212
      40  ?_213
      44  ?_214
      20  ?_215
      32  ?_216
      36  ?_217
      16  ?_218
      36  ?_219
      24  ?_22
      40  ?_220
      24  ?_221
      28  ?_222
      28  ?_223
      28  ?_224
      32  ?_225
      52  ?_226
      24  ?_227
      28  ?_228
      24  ?_229
      32  ?_23
      20  ?_230
      20  ?_231
      16  ?_232
      16  ?_233
      24  ?_234
      20  ?_235
      32  ?_236
      20  ?_237
      32  ?_238
      24  ?_239
      16  ?_24
      32  ?_240
      32  ?_241
      20  ?_242
      28  ?_243
      40  ?_244
      20  ?_245
      20  ?_246
      52  ?_247
      28  ?_248
      20  ?_249
      20  ?_25
      20  ?_250
      24  ?_251
      20  ?_252
      36  ?_253
      52  ?_254
      56  ?_255
      68  ?_256
      64  ?_257
      36  ?_258
      12  ?_259
      28  ?_26
      12  ?_260
      16  ?_261
       8  ?_262
       8  ?_263
       8  ?_264
       8  ?_265
       8  ?_266
      36  ?_267
      16  ?_268
      16  ?_269
      16  ?_27
      24  ?_270
      24  ?_271
      16  ?_272
      24  ?_273
      16  ?_274
      24  ?_275
      44  ?_276
       8  ?_277
      28  ?_278
      28  ?_279
      24  ?_28
      40  ?_280
      40  ?_281
      40  ?_282
      52  ?_283
      40  ?_284
      32  ?_285
       8  ?_286
      40  ?_287
      72  ?_288
      12  ?_289
      24  ?_29
      12  ?_290
      24  ?_291
      32  ?_292
      24  ?_293
       8  ?_294
       8  ?_295
      12  ?_296
      12  ?_297
      24  ?_298
      24  ?_299
      40  ?_3
      24  ?_30
      24  ?_300
      24  ?_301
      24  ?_302
      24  ?_303
      20  ?_304
      20  ?_305
      20  ?_306
       8  ?_31
      28  ?_32
       8  ?_33
      16  ?_34
      32  ?_35
      16  ?_36
      28  ?_37
      20  ?_38
      24  ?_39
      16  ?_4
      60  ?_40
      28  ?_41
      20  ?_42
      80  ?_43
      24  ?_44
      24  ?_45
      16  ?_46
      16  ?_47
      16  ?_48
      32  ?_49
      32  ?_5
      52  ?_50
       8  ?_51
      12  ?_52
      28  ?_53
      64  ?_54
      16  ?_55
      16  ?_56
      28  ?_57
      32  ?_58
      40  ?_59
      36  ?_6
      64  ?_60
      36  ?_61
      16  ?_62
      40  ?_63
      16  ?_64
      60  ?_65
      32  ?_66
      52  ?_67
      44  ?_68
      28  ?_69
      20  ?_7
      16  ?_70
      20  ?_71
      24  ?_72
      24  ?_73
       8  ?_74
      20  ?_75
      20  ?_76
      28  ?_77
      56  ?_78
      16  ?_79
      20  ?_8
      16  ?_80
      36  ?_81
      12  ?_82
      56  ?_83
      24  ?_84
      28  ?_85
      24  ?_86
      24  ?_87
      20  ?_88
      12  ?_89
      32  ?_9
      24  ?_90
      24  ?_91
      32  ?_92
      32  ?_93
      40  ?_94
      40  ?_95
      20  ?_96
      28  ?_97
      32  ?_98
      28  ?_99
       1  dhm_g
     256  dhm_p
      20  mbedtls_cipher_get_block_size
      20  mbedtls_cipher_get_cipher_mode
       4  mbedtls_pk_ec
     116  mbedtls_ssl_check_cert_usage
      34  mbedtls_ssl_check_curve
     176  mbedtls_ssl_check_pending
      34  mbedtls_ssl_check_sig_hash
     130  mbedtls_ssl_close_notify
      56  mbedtls_ssl_conf_alpn_protocols
      14  mbedtls_ssl_conf_authmode
       6  mbedtls_ssl_conf_ca_chain
      14  mbedtls_ssl_conf_cbc_record_splitting
       4  mbedtls_ssl_conf_cert_profile
      14  mbedtls_ssl_conf_cert_req_ca_list
      10  mbedtls_ssl_conf_ciphersuites
      14  mbedtls_ssl_conf_ciphersuites_for_version
       4  mbedtls_ssl_conf_curves
       6  mbedtls_ssl_conf_dbg
      62  mbedtls_ssl_conf_dh_param
      58  mbedtls_ssl_conf_dh_param_bin
      60  mbedtls_ssl_conf_dh_param_ctx
       6  mbedtls_ssl_conf_dhm_min_bitlen
      14  mbedtls_ssl_conf_dtls_anti_replay
       6  mbedtls_ssl_conf_dtls_badmac_limit
      14  mbedtls_ssl_conf_encrypt_then_mac
      14  mbedtls_ssl_conf_endpoint
       6  mbedtls_ssl_conf_export_keys_cb
      14  mbedtls_ssl_conf_extended_master_secret
      14  mbedtls_ssl_conf_fallback
      10  mbedtls_ssl_conf_handshake_timeout
      14  mbedtls_ssl_conf_legacy_renegotiation
      46  mbedtls_ssl_conf_max_frag_len
      10  mbedtls_ssl_conf_max_version
      10  mbedtls_ssl_conf_min_version
       4  mbedtls_ssl_conf_own_cert
     210  mbedtls_ssl_conf_psk
       6  mbedtls_ssl_conf_psk_cb
       6  mbedtls_ssl_conf_read_timeout
      14  mbedtls_ssl_conf_renegotiation
       6  mbedtls_ssl_conf_renegotiation_enforced
       8  mbedtls_ssl_conf_renegotiation_period
       6  mbedtls_ssl_conf_rng
       8  mbedtls_ssl_conf_session_cache
      14  mbedtls_ssl_conf_session_tickets
       8  mbedtls_ssl_conf_session_tickets_cb
       4  mbedtls_ssl_conf_sig_hashes
       6  mbedtls_ssl_conf_sni
      14  mbedtls_ssl_conf_transport
      14  mbedtls_ssl_conf_truncated_hmac
       6  mbedtls_ssl_conf_verify
     322  mbedtls_ssl_config_defaults
     106  mbedtls_ssl_config_free
       8  mbedtls_ssl_config_init
    1698  mbedtls_ssl_derive_keys
      90  mbedtls_ssl_dtls_replay_check
     134  mbedtls_ssl_dtls_replay_update
     942  mbedtls_ssl_fetch_input
     720  mbedtls_ssl_flight_transmit
     296  mbedtls_ssl_flush_output
     220  mbedtls_ssl_free
       6  mbedtls_ssl_get_alpn_protocol
      14  mbedtls_ssl_get_bytes_avail
      22  mbedtls_ssl_get_ciphersuite
     344  mbedtls_ssl_get_key_exchange_md_ssl_tls
     238  mbedtls_ssl_get_key_exchange_md_tls1_2
      84  mbedtls_ssl_get_max_frag_len
      92  mbedtls_ssl_get_max_out_record_payload
      20  mbedtls_ssl_get_peer_cert
     102  mbedtls_ssl_get_record_expansion
      40  mbedtls_ssl_get_session
      30  mbedtls_ssl_get_verify_result
      86  mbedtls_ssl_get_version
     430  mbedtls_ssl_handle_message_type
      82  mbedtls_ssl_handshake
     146  mbedtls_ssl_handshake_free
      58  mbedtls_ssl_handshake_step
     224  mbedtls_ssl_handshake_wrapup
      44  mbedtls_ssl_hash_from_md_alg
      22  mbedtls_ssl_hdr_len
      22  mbedtls_ssl_hs_hdr_len
      10  mbedtls_ssl_init
      44  mbedtls_ssl_md_alg_from_hash
      48  mbedtls_ssl_optimize_checksum
      34  mbedtls_ssl_own_cert
    1706  mbedtls_ssl_parse_certificate
     248  mbedtls_ssl_parse_change_cipher_spec
     362  mbedtls_ssl_parse_finished
      22  mbedtls_ssl_pk_alg_from_sig
     448  mbedtls_ssl_prepare_handshake_record
     424  mbedtls_ssl_psk_derive_premaster
     928  mbedtls_ssl_read
     278  mbedtls_ssl_read_record
      46  mbedtls_ssl_read_version
      96  mbedtls_ssl_recv_flight_completed
     150  mbedtls_ssl_renegotiate
      60  mbedtls_ssl_resend
      52  mbedtls_ssl_reset_checksum
      40  mbedtls_ssl_safer_memcmp
     160  mbedtls_ssl_send_alert_message
      18  mbedtls_ssl_send_fatal_handshake_failure
      54  mbedtls_ssl_send_flight_completed
      42  mbedtls_ssl_session_free
       8  mbedtls_ssl_session_init
       4  mbedtls_ssl_session_reset
      16  mbedtls_ssl_set_bio
      56  mbedtls_ssl_set_calc_verify_md
      12  mbedtls_ssl_set_datagram_packing
     114  mbedtls_ssl_set_hostname
       8  mbedtls_ssl_set_hs_authmode
      14  mbedtls_ssl_set_hs_ca_chain
       8  mbedtls_ssl_set_hs_own_cert
     124  mbedtls_ssl_set_hs_psk
       6  mbedtls_ssl_set_mtu
      54  mbedtls_ssl_set_session
      12  mbedtls_ssl_set_timer_cb
     182  mbedtls_ssl_setup
      38  mbedtls_ssl_sig_from_pk
      26  mbedtls_ssl_sig_from_pk_alg
      30  mbedtls_ssl_sig_hash_set_add
       6  mbedtls_ssl_sig_hash_set_const_hash
      22  mbedtls_ssl_sig_hash_set_find
       6  mbedtls_ssl_sig_hash_set_init
      52  mbedtls_ssl_transform_free
     114  mbedtls_ssl_update_handshake_status
     166  mbedtls_ssl_write
     454  mbedtls_ssl_write_certificate
     112  mbedtls_ssl_write_change_cipher_spec
     446  mbedtls_ssl_write_finished
     572  mbedtls_ssl_write_handshake_msg
     536  mbedtls_ssl_write_record
      28  mbedtls_ssl_write_version
      62  ssl_append_key_cert
      64  ssl_bitmask_check
     126  ssl_bitmask_set
     214  ssl_buffer_future_record
     174  ssl_buffer_make_space
     822  ssl_buffer_message
      38  ssl_buffering_free
      62  ssl_buffering_free_slot
     266  ssl_calc_finished_tls
     206  ssl_calc_finished_tls_sha256
     206  ssl_calc_finished_tls_sha384
     146  ssl_calc_verify_tls
     112  ssl_calc_verify_tls_sha256
     112  ssl_calc_verify_tls_sha384
     120  ssl_check_ctr_renegotiate
     272  ssl_check_dtls_clihlo_cookie
      64  ssl_check_hs_header
      54  ssl_check_timer
     130  ssl_consume_current_message
       6  ssl_cookie_check_dummy
       6  ssl_cookie_write_dummy
    2014  ssl_decrypt_buf
     120  ssl_double_retransmit_timeout
      14  ssl_dtls_replay_reset
    1362  ssl_encrypt_buf
      22  ssl_ep_len
     244  ssl_flight_append
      26  ssl_flight_free
      46  ssl_free_buffered_record
      54  ssl_get_current_mtu
      22  ssl_get_hs_frag_len
      22  ssl_get_hs_frag_off
      22  ssl_get_hs_total_len
      24  ssl_get_maximum_datagram_size
     494  ssl_get_next_record
      30  ssl_get_reassembly_buffer_size
      72  ssl_get_remaining_payload_in_datagram
      26  ssl_get_remaining_space_in_datagram
     160  ssl_handle_possible_reconnect
     234  ssl_handshake_init
     118  ssl_handshake_params_init
      88  ssl_handshake_wrapup_free_hs_transform
      54  ssl_hs_is_proper_fragment
      18  ssl_key_cert_free
     438  ssl_load_buffered_message
     224  ssl_load_buffered_record
      48  ssl_load_six_bytes
      44  ssl_mfl_code_to_length
      16  ssl_next_record_is_in_datagram
     694  ssl_parse_record_header
     172  ssl_prepare_record_content
      24  ssl_preset_default_hashes
      12  ssl_preset_suiteb_ciphersuites
       4  ssl_preset_suiteb_curves
      12  ssl_preset_suiteb_hashes
      30  ssl_read_memory
      12  ssl_record_is_in_progress
      86  ssl_resend_hello_request
      62  ssl_reset_in_out_pointers
      42  ssl_reset_retransmit_timeout
     114  ssl_session_copy
     266  ssl_session_reset_int
      54  ssl_set_timer
     152  ssl_start_renegotiation
     130  ssl_swap_epochs
      48  ssl_transform_init
      36  ssl_update_checksum_md5sha1
      10  ssl_update_checksum_sha256
      10  ssl_update_checksum_sha384
      64  ssl_update_checksum_start
      82  ssl_update_in_pointers
     112  ssl_update_out_pointers
     106  ssl_write_hello_request
     208  ssl_write_real
     110  ssl_write_split
     446  tls1_prf
     278  tls_prf_generic
      32  tls_prf_sha256
      32  tls_prf_sha384

 
     52 bytes in section .data
  9 698 bytes in section .rodata
 30 876 bytes in section .text
 
 30 876 bytes of CODE  memory
  9 698 bytes of CONST memory
     52 bytes of DATA  memory

Errors: none
Warnings: none
