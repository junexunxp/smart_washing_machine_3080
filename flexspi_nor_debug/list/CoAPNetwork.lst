###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.3.193/W32 for ARM         10/Jun/2019  13:48:08
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\server\CoAPNetwork.c
#    Command line =  
#        -f C:\Users\nxf42695\AppData\Local\Temp\1\EWAF87.tmp
#        (C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\server\CoAPNetwork.c
#        -D DEBUG -D USE_RTOS -D XIP_EXTERNAL_FLASH=1 -D
#        XIP_BOOT_HEADER_ENABLE=1 -D CPU_MIMXRT1052DVL6B -D FSL_RTOS_FREE_RTOS
#        -D PRINTF_ADVANCED_ENABLE -D
#        "MBEDTLS_CONFIG_FILE=\"ksdk_mbedtls_config.h\"" -lC
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list -lA
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list
#        --diag_suppress Pa082,Pa050 -o
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_d16 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" --preinclude
#        C:\Development\smart_washing_machine_3080/source\app_preinclude.h -I
#        C:\Development\smart_washing_machine_3080/board\ -I
#        C:\Development\smart_washing_machine_3080/source\ -I
#        C:\Development\smart_washing_machine_3080/CMSIS\ -I
#        C:\Development\smart_washing_machine_3080/amazon-freertos/freertos/portable\
#        -I C:\Development\smart_washing_machine_3080/amazon-freertos/include\
#        -I C:\Development\smart_washing_machine_3080/component/lists\ -I
#        C:\Development\smart_washing_machine_3080/component/serial_manager\ -I
#        C:\Development\smart_washing_machine_3080/component/uart\ -I
#        C:\Development\smart_washing_machine_3080/component/kv\ -I
#        C:\Development\smart_washing_machine_3080/component/kv/include\ -I
#        C:\Development\smart_washing_machine_3080/device\ -I
#        C:\Development\smart_washing_machine_3080/doc\ -I
#        C:\Development\smart_washing_machine_3080/drivers\ -I
#        C:\Development\smart_washing_machine_3080/src\ -I
#        C:\Development\smart_washing_machine_3080/startup\ -I
#        C:\Development\smart_washing_machine_3080/utilities\ -I
#        C:\Development\smart_washing_machine_3080/xip\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\atm\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_model\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_sign\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\infra\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\mqtt\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\external_libs\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\coap_cloud\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\CoAPPacket\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\server\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\os\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\awss_reset\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\mbedtls\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\ -I
#        C:\Development\smart_washing_machine_3080\mbedtls\port\ksdk\ -Om)
#    Locale       =  C
#    List file    =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list\CoAPNetwork.lst
#    Object file  =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj\CoAPNetwork.o
#
###############################################################################

C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\server\CoAPNetwork.c
      1          /*
      2           * Copyright (C) 2015-2018 Alibaba Group Holding Limited
      3           */
      4          
      5          
      6          
      7          
      8          #include <stdint.h>
      9          #include <stdio.h>
     10          #include <string.h>
     11          #include <errno.h>
     12          
     13          #include "iotx_coap_internal.h"
     14          #include "CoAPExport.h"
     15          #include "CoAPPlatform.h"
     16          #include "CoAPNetwork.h"
     17          

   \                                 In section .text, align 2, keep-with-next
     18          int CoAPNetwork_read(NetworkContext         *p_context,
     19                               NetworkAddr     *p_remote,
     20                               unsigned char   *p_data,
     21                               unsigned int     datalen,
     22                               unsigned int     timeout_ms)
     23          
     24          {
   \                     CoAPNetwork_read: (+1)
   \        0x0   0xB51C             PUSH     {R2-R4,LR}
     25              int          len      = 0;
     26              NetworkConf  *network = NULL;
     27          
     28              if (NULL == p_context || NULL == p_remote || NULL == p_data) {
   \        0x2   0x2800             CMP      R0,#+0
   \        0x4   0xD003             BEQ.N    ??CoAPNetwork_read_0
   \        0x6   0x2900             CMP      R1,#+0
   \        0x8   0xD001             BEQ.N    ??CoAPNetwork_read_0
   \        0xA   0x2A00             CMP      R2,#+0
   \        0xC   0xD102             BNE.N    ??CoAPNetwork_read_1
     29                  return -1; /* TODO */
   \                     ??CoAPNetwork_read_0: (+1)
   \        0xE   0xF04F 0x30FF      MOV      R0,#-1
   \       0x12   0xBD16             POP      {R1,R2,R4,PC}
     30              }
   \                     ??CoAPNetwork_read_1: (+1)
   \       0x14   0x9C04             LDR      R4,[SP, #+16]
     31          
     32              network = (NetworkConf *)p_context;
     33          #ifdef COAP_DTLS_SUPPORT
     34              if (COAP_NETWORK_DTLS == network->type) {
     35              } else {
     36          #endif
     37                  len =  HAL_UDP_recvfrom(network->fd, p_remote, p_data,
     38                                          datalen, timeout_ms);
     39                  /* COAP_DEBUG("[CoAP-NWK]: Network read return %d", len); */
     40          #ifdef COAP_DTLS_SUPPORT
     41              }
     42          #endif
     43              return len;
   \       0x16   0x9400             STR      R4,[SP, #+0]
   \       0x18   0x6840             LDR      R0,[R0, #+4]
   \       0x1A   0x....'....        BL       HAL_UDP_recvfrom
   \       0x1E   0xBD16             POP      {R1,R2,R4,PC}    ;; return
     44          }
     45          

   \                                 In section .text, align 2, keep-with-next
     46          int CoAPNetwork_write(NetworkContext          *p_context,
     47                                NetworkAddr   *p_remote,
     48                                const unsigned char  *p_data,
     49                                unsigned int          datalen,
     50                                unsigned int          timeout_ms)
     51          
     52          {
   \                     CoAPNetwork_write: (+1)
   \        0x0   0xB51C             PUSH     {R2-R4,LR}
     53          
     54              int          len      = 0;
     55              NetworkConf  *network = NULL;
     56          
     57              if (NULL == p_context || NULL == p_remote || NULL == p_data) {
   \        0x2   0x2800             CMP      R0,#+0
   \        0x4   0xD003             BEQ.N    ??CoAPNetwork_write_0
   \        0x6   0x2900             CMP      R1,#+0
   \        0x8   0xD001             BEQ.N    ??CoAPNetwork_write_0
   \        0xA   0x2A00             CMP      R2,#+0
   \        0xC   0xD102             BNE.N    ??CoAPNetwork_write_1
     58                  return -1; /* TODO */
   \                     ??CoAPNetwork_write_0: (+1)
   \        0xE   0xF04F 0x30FF      MOV      R0,#-1
   \       0x12   0xBD16             POP      {R1,R2,R4,PC}
     59              }
   \                     ??CoAPNetwork_write_1: (+1)
   \       0x14   0x9C04             LDR      R4,[SP, #+16]
     60          
     61              network = (NetworkConf *)p_context;
     62          #ifdef COAP_DTLS_SUPPORT
     63              /* TODO: */
     64              if (COAP_NETWORK_DTLS == network->type) {
     65          
     66              } else {
     67          #endif
     68                  len = HAL_UDP_sendto(network->fd, p_remote,
     69                                       p_data, datalen, timeout_ms);
     70          #ifdef COAP_DTLS_SUPPORT
     71              }
     72          #endif
     73              return len;
   \       0x16   0x9400             STR      R4,[SP, #+0]
   \       0x18   0x6840             LDR      R0,[R0, #+4]
   \       0x1A   0x....'....        BL       HAL_UDP_sendto
   \       0x1E   0xBD16             POP      {R1,R2,R4,PC}    ;; return
     74          }
     75          
     76          

   \                                 In section .text, align 2, keep-with-next
     77          NetworkContext *CoAPNetwork_init(const NetworkInit   *p_param)
     78          {
   \                     CoAPNetwork_init: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0005             MOVS     R5,R0
     79              NetworkConf     *network = NULL;
     80          
     81              if (NULL == p_param) {
   \        0x4   0xD101             BNE.N    ??CoAPNetwork_init_0
     82                  return NULL;
   \        0x6   0x2000             MOVS     R0,#+0
   \        0x8   0xBD32             POP      {R1,R4,R5,PC}
     83              }
     84          
     85              network = coap_malloc(sizeof(NetworkConf));
   \                     ??CoAPNetwork_init_0: (+1)
   \        0xA   0x2008             MOVS     R0,#+8
   \        0xC   0x....'....        BL       HAL_Malloc
   \       0x10   0x0004             MOVS     R4,R0
     86              if (NULL == network) {
   \       0x12   0xD101             BNE.N    ??CoAPNetwork_init_1
     87                  return NULL;
   \       0x14   0x2000             MOVS     R0,#+0
   \       0x16   0xBD32             POP      {R1,R4,R5,PC}
     88              }
     89          
     90              memset(network, 0x00, sizeof(NetworkConf));
   \                     ??CoAPNetwork_init_1: (+1)
   \       0x18   0x2200             MOVS     R2,#+0
   \       0x1A   0x2108             MOVS     R1,#+8
   \       0x1C   0x....'....        BL       __aeabi_memset4
     91              network->type = p_param->type;
   \       0x20   0x7828             LDRB     R0,[R5, #+0]
   \       0x22   0x7020             STRB     R0,[R4, #+0]
     92          
     93          #ifdef COAP_DTLS_SUPPORT
     94              if (COAP_NETWORK_DTLS == network->type) {
     95                  /* TODO: */
     96                  coap_free(network);
     97                  return NULL;
     98              } else {
     99          #endif
    100                  /*Create udp socket*/
    101                  network->port = p_param->port;
   \       0x24   0x8928             LDRH     R0,[R5, #+8]
   \       0x26   0x8060             STRH     R0,[R4, #+2]
    102                  network->fd = (intptr_t)HAL_UDP_create_without_connect(NULL, network->port);
   \       0x28   0x4601             MOV      R1,R0
   \       0x2A   0x2000             MOVS     R0,#+0
   \       0x2C   0x....'....        BL       HAL_UDP_create_without_connect
   \       0x30   0x6060             STR      R0,[R4, #+4]
    103                  if ((intptr_t) - 1 == network->fd) {
   \       0x32   0xF110 0x0F01      CMN      R0,#+1
   \       0x36   0xD104             BNE.N    ??CoAPNetwork_init_2
    104                      coap_free(network);
   \       0x38   0x4620             MOV      R0,R4
   \       0x3A   0x....'....        BL       HAL_Free
    105                      return NULL;
   \       0x3E   0x2000             MOVS     R0,#+0
   \       0x40   0xBD32             POP      {R1,R4,R5,PC}
    106                  }
    107          
    108                  HAL_UDP_joinmulticast(network->fd, p_param->group);
   \                     ??CoAPNetwork_init_2: (+1)
   \       0x42   0x6869             LDR      R1,[R5, #+4]
   \       0x44   0x....'....        BL       HAL_UDP_joinmulticast
    109          #ifdef COAP_DTLS_SUPPORT
    110              }
    111          #endif
    112              return (NetworkContext *)network;
   \       0x48   0x4620             MOV      R0,R4
   \       0x4A   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    113          }
    114          
    115          

   \                                 In section .text, align 2, keep-with-next
    116          void CoAPNetwork_deinit(NetworkContext *p_context)
    117          {
   \                     CoAPNetwork_deinit: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
    118              NetworkConf     *network = NULL;
    119              if (NULL == p_context) {
   \        0x4   0xD007             BEQ.N    ??CoAPNetwork_deinit_0
    120                  return;
    121              }
    122          
    123              network = (NetworkConf *)p_context;
    124          #ifdef COAP_DTLS_SUPPORT
    125              if (COAP_NETWORK_DTLS == network->type) {
    126                  /* TODO: */
    127              } else {
    128          #endif
    129                  HAL_UDP_close_without_connect(network->fd);
   \        0x6   0x6860             LDR      R0,[R4, #+4]
   \        0x8   0x....'....        BL       HAL_UDP_close_without_connect
    130                  coap_free(p_context);
   \        0xC   0x4620             MOV      R0,R4
   \        0xE   0xE8BD 0x4010      POP      {R4,LR}
   \       0x12   0x....'....        B.W      HAL_Free
   \                     ??CoAPNetwork_deinit_0: (+1)
   \       0x16   0xBD10             POP      {R4,PC}          ;; return
    131                  p_context = NULL;
    132          #ifdef COAP_DTLS_SUPPORT
    133              }
    134          #endif
    135              return;
    136          }
    137          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   CoAPNetwork_deinit
         0   -> HAL_Free
         8   -> HAL_UDP_close_without_connect
      16   CoAPNetwork_init
        16   -> HAL_Free
        16   -> HAL_Malloc
        16   -> HAL_UDP_create_without_connect
        16   -> HAL_UDP_joinmulticast
        16   -> __aeabi_memset4
      16   CoAPNetwork_read
        16   -> HAL_UDP_recvfrom
      16   CoAPNetwork_write
        16   -> HAL_UDP_sendto


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      24  CoAPNetwork_deinit
      76  CoAPNetwork_init
      32  CoAPNetwork_read
      32  CoAPNetwork_write

 
 164 bytes in section .text
 
 164 bytes of CODE memory

Errors: none
Warnings: none
