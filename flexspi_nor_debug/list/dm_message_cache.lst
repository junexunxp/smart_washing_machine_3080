###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.3.193/W32 for ARM         10/Jun/2019  13:48:13
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_model\dm_message_cache.c
#    Command line =  
#        -f C:\Users\nxf42695\AppData\Local\Temp\1\EWC4FA.tmp
#        (C:\Development\smart_washing_machine_3080\csdk\eng\dev_model\dm_message_cache.c
#        -D DEBUG -D USE_RTOS -D XIP_EXTERNAL_FLASH=1 -D
#        XIP_BOOT_HEADER_ENABLE=1 -D CPU_MIMXRT1052DVL6B -D FSL_RTOS_FREE_RTOS
#        -D PRINTF_ADVANCED_ENABLE -D
#        "MBEDTLS_CONFIG_FILE=\"ksdk_mbedtls_config.h\"" -lC
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list -lA
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list
#        --diag_suppress Pa082,Pa050 -o
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_d16 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" --preinclude
#        C:\Development\smart_washing_machine_3080/source\app_preinclude.h -I
#        C:\Development\smart_washing_machine_3080/board\ -I
#        C:\Development\smart_washing_machine_3080/source\ -I
#        C:\Development\smart_washing_machine_3080/CMSIS\ -I
#        C:\Development\smart_washing_machine_3080/amazon-freertos/freertos/portable\
#        -I C:\Development\smart_washing_machine_3080/amazon-freertos/include\
#        -I C:\Development\smart_washing_machine_3080/component/lists\ -I
#        C:\Development\smart_washing_machine_3080/component/serial_manager\ -I
#        C:\Development\smart_washing_machine_3080/component/uart\ -I
#        C:\Development\smart_washing_machine_3080/component/kv\ -I
#        C:\Development\smart_washing_machine_3080/component/kv/include\ -I
#        C:\Development\smart_washing_machine_3080/device\ -I
#        C:\Development\smart_washing_machine_3080/doc\ -I
#        C:\Development\smart_washing_machine_3080/drivers\ -I
#        C:\Development\smart_washing_machine_3080/src\ -I
#        C:\Development\smart_washing_machine_3080/startup\ -I
#        C:\Development\smart_washing_machine_3080/utilities\ -I
#        C:\Development\smart_washing_machine_3080/xip\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\atm\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_model\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_sign\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\infra\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\mqtt\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\external_libs\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\coap_cloud\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\CoAPPacket\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\server\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\os\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\awss_reset\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\mbedtls\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\ -I
#        C:\Development\smart_washing_machine_3080\mbedtls\port\ksdk\ -Om)
#    Locale       =  C
#    List file    =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list\dm_message_cache.lst
#    Object file  =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj\dm_message_cache.o
#
###############################################################################

C:\Development\smart_washing_machine_3080\csdk\eng\dev_model\dm_message_cache.c
      1          /*
      2           * Copyright (C) 2015-2018 Alibaba Group Holding Limited
      3           */
      4          #include "iotx_dm_internal.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void __dlist_add(dlist_t *, dlist_t *, dlist_t *)
   \                     __dlist_add: (+1)
   \        0x0   0x6042             STR      R2,[R0, #+4]
   \        0x2   0x6001             STR      R1,[R0, #+0]
   \        0x4   0x6048             STR      R0,[R1, #+4]
   \        0x6   0x6010             STR      R0,[R2, #+0]
   \        0x8   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void dlist_add_tail(dlist_t *, dlist_t *)
   \                     dlist_add_tail: (+1)
   \        0x0   0x460A             MOV      R2,R1
   \        0x2   0x6811             LDR      R1,[R2, #+0]
   \        0x4   0x....             B.N      __dlist_add

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void dlist_del(dlist_t *)
   \                     dlist_del: (+1)
   \        0x0   0x6801             LDR      R1,[R0, #+0]
   \        0x2   0x6840             LDR      R0,[R0, #+4]
   \        0x4   0x6048             STR      R0,[R1, #+4]
   \        0x6   0x6001             STR      R1,[R0, #+0]
   \        0x8   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void INIT_AOS_DLIST_HEAD(dlist_t *)
   \                     INIT_AOS_DLIST_HEAD: (+1)
   \        0x0   0x6040             STR      R0,[R0, #+4]
   \        0x2   0x6000             STR      R0,[R0, #+0]
   \        0x4   0x4770             BX       LR               ;; return
      5          
      6          #if !defined(DM_MESSAGE_CACHE_DISABLED)
      7          

   \                                 In section .bss, align 4
      8          dm_msg_cache_ctx_t g_dm_msg_cache_ctx;
   \                     g_dm_msg_cache_ctx:
   \        0x0                      DS8 16
      9          

   \                                 In section .text, align 2, keep-with-next
     10          dm_msg_cache_ctx_t *_dm_msg_cache_get_ctx(void)
     11          {
     12              return &g_dm_msg_cache_ctx;
   \                     _dm_msg_cache_get_ctx: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable1
   \        0x2   0x4770             BX       LR               ;; return
     13          }
     14          

   \                                 In section .text, align 2, keep-with-next
     15          static void _dm_msg_cache_mutex_lock(void)
     16          {
   \                     _dm_msg_cache_mutex_lock: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     17              dm_msg_cache_ctx_t *ctx = _dm_msg_cache_get_ctx();
   \        0x2   0x....'....        BL       _dm_msg_cache_get_ctx
     18              if (ctx->mutex) {
   \        0x6   0x6801             LDR      R1,[R0, #+0]
   \        0x8   0x2900             CMP      R1,#+0
   \        0xA   0xD004             BEQ.N    ??_dm_msg_cache_mutex_lock_0
     19                  HAL_MutexLock(ctx->mutex);
   \        0xC   0x4608             MOV      R0,R1
   \        0xE   0xE8BD 0x4002      POP      {R1,LR}
   \       0x12   0x....'....        B.W      HAL_MutexLock
     20              }
     21          }
   \                     ??_dm_msg_cache_mutex_lock_0: (+1)
   \       0x16   0xBD01             POP      {R0,PC}          ;; return
     22          

   \                                 In section .text, align 2, keep-with-next
     23          static void _dm_msg_cache_mutex_unlock(void)
     24          {
   \                     _dm_msg_cache_mutex_unlock: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     25              dm_msg_cache_ctx_t *ctx = _dm_msg_cache_get_ctx();
   \        0x2   0x....'....        BL       _dm_msg_cache_get_ctx
     26              if (ctx->mutex) {
   \        0x6   0x6801             LDR      R1,[R0, #+0]
   \        0x8   0x2900             CMP      R1,#+0
   \        0xA   0xD004             BEQ.N    ??_dm_msg_cache_mutex_unlock_0
     27                  HAL_MutexUnlock(ctx->mutex);
   \        0xC   0x4608             MOV      R0,R1
   \        0xE   0xE8BD 0x4002      POP      {R1,LR}
   \       0x12   0x....'....        B.W      HAL_MutexUnlock
     28              }
     29          }
   \                     ??_dm_msg_cache_mutex_unlock_0: (+1)
   \       0x16   0xBD01             POP      {R0,PC}          ;; return
     30          

   \                                 In section .text, align 2, keep-with-next
     31          int dm_msg_cache_init(void)
     32          {
   \                     dm_msg_cache_init: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
     33              dm_msg_cache_ctx_t *ctx = _dm_msg_cache_get_ctx();
   \        0x2   0x....'....        BL       _dm_msg_cache_get_ctx
   \        0x6   0x4604             MOV      R4,R0
     34          
     35              memset(ctx, 0, sizeof(dm_msg_cache_ctx_t));
   \        0x8   0x2200             MOVS     R2,#+0
   \        0xA   0x2110             MOVS     R1,#+16
   \        0xC   0x....'....        BL       __aeabi_memset4
     36          
     37              /* Create Mutex */
     38              ctx->mutex = HAL_MutexCreate();
   \       0x10   0x....'....        BL       HAL_MutexCreate
   \       0x14   0x6020             STR      R0,[R4, #+0]
     39              if (ctx->mutex == NULL) {
   \       0x16   0x2800             CMP      R0,#+0
   \       0x18   0xD102             BNE.N    ??dm_msg_cache_init_0
     40                  return DM_MEMORY_NOT_ENOUGH;
   \       0x1A   0xF06F 0x0002      MVN      R0,#+2
   \       0x1E   0xBD10             POP      {R4,PC}
     41              }
     42          
     43              /* Init Message Cache List */
     44              INIT_LIST_HEAD(&ctx->dmc_list);
   \                     ??dm_msg_cache_init_0: (+1)
   \       0x20   0xF104 0x0008      ADD      R0,R4,#+8
   \       0x24   0x....'....        BL       INIT_AOS_DLIST_HEAD
     45          
     46              return SUCCESS_RETURN;
   \       0x28   0x2000             MOVS     R0,#+0
   \       0x2A   0xBD10             POP      {R4,PC}          ;; return
     47          }
     48          

   \                                 In section .text, align 2, keep-with-next
     49          int dm_msg_cache_deinit(void)
     50          {
   \                     dm_msg_cache_deinit: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
     51              dm_msg_cache_ctx_t *ctx = _dm_msg_cache_get_ctx();
   \        0x2   0x....'....        BL       _dm_msg_cache_get_ctx
   \        0x6   0x4604             MOV      R4,R0
     52              dm_msg_cache_node_t *node = NULL;
     53              dm_msg_cache_node_t *next = NULL;
     54          
     55              _dm_msg_cache_mutex_lock();
   \        0x8   0x....'....        BL       _dm_msg_cache_mutex_lock
     56              list_for_each_entry_safe(node, next, &ctx->dmc_list, linked_list, dm_msg_cache_node_t) {
   \        0xC   0x68E0             LDR      R0,[R4, #+12]
   \        0xE   0xF1A0 0x0518      SUB      R5,R0,#+24
   \       0x12   0x69E8             LDR      R0,[R5, #+28]
   \       0x14   0xF1A0 0x0618      SUB      R6,R0,#+24
   \       0x18   0xE011             B.N      ??dm_msg_cache_deinit_0
     57                  list_del(&node->linked_list);
   \                     ??dm_msg_cache_deinit_1: (+1)
   \       0x1A   0x....'....        BL       dlist_del
     58                  if (node->data) {
   \       0x1E   0x68E8             LDR      R0,[R5, #+12]
   \       0x20   0x2800             CMP      R0,#+0
   \       0x22   0xD003             BEQ.N    ??dm_msg_cache_deinit_2
     59                      DM_free(node->data);
   \       0x24   0x....'....        BL       HAL_Free
   \       0x28   0x2000             MOVS     R0,#+0
   \       0x2A   0x60E8             STR      R0,[R5, #+12]
     60                  }
     61                  DM_free(node);
   \                     ??dm_msg_cache_deinit_2: (+1)
   \       0x2C   0x4628             MOV      R0,R5
   \       0x2E   0x....'....        BL       HAL_Free
     62                  _dm_msg_cache_mutex_unlock();
   \       0x32   0x....'....        BL       _dm_msg_cache_mutex_unlock
     63              }
   \       0x36   0x4635             MOV      R5,R6
   \       0x38   0x69F0             LDR      R0,[R6, #+28]
   \       0x3A   0xF1A0 0x0618      SUB      R6,R0,#+24
   \                     ??dm_msg_cache_deinit_0: (+1)
   \       0x3E   0xF105 0x0018      ADD      R0,R5,#+24
   \       0x42   0xF104 0x0108      ADD      R1,R4,#+8
   \       0x46   0x4288             CMP      R0,R1
   \       0x48   0xD1E7             BNE.N    ??dm_msg_cache_deinit_1
     64              _dm_msg_cache_mutex_unlock();
   \       0x4A   0x....'....        BL       _dm_msg_cache_mutex_unlock
     65          
     66              if (ctx->mutex) {
   \       0x4E   0x6820             LDR      R0,[R4, #+0]
   \       0x50   0x2800             CMP      R0,#+0
   \       0x52   0xD001             BEQ.N    ??dm_msg_cache_deinit_3
     67                  HAL_MutexDestroy(ctx->mutex);
   \       0x54   0x....'....        BL       HAL_MutexDestroy
     68              }
     69          
     70              return SUCCESS_RETURN;
   \                     ??dm_msg_cache_deinit_3: (+1)
   \       0x58   0x2000             MOVS     R0,#+0
   \       0x5A   0xBD70             POP      {R4-R6,PC}       ;; return
     71          }
     72          

   \                                 In section .text, align 2, keep-with-next
     73          int dm_msg_cache_insert(int msgid, int devid, iotx_dm_event_types_t type, char *data)
     74          {
   \                     dm_msg_cache_insert: (+1)
   \        0x0   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \        0x4   0x4680             MOV      R8,R0
   \        0x6   0x4689             MOV      R9,R1
   \        0x8   0x4616             MOV      R6,R2
   \        0xA   0x461D             MOV      R5,R3
     75              dm_msg_cache_ctx_t *ctx = _dm_msg_cache_get_ctx();
   \        0xC   0x....'....        BL       _dm_msg_cache_get_ctx
   \       0x10   0x4607             MOV      R7,R0
     76              dm_msg_cache_node_t *node = NULL;
     77          
     78              dm_log_debug("dmc list size: %d", ctx->dmc_list_size);
     79              if (ctx->dmc_list_size >= CONFIG_MSGCACHE_QUEUE_MAXLEN) {
   \       0x12   0x6878             LDR      R0,[R7, #+4]
   \       0x14   0x2832             CMP      R0,#+50
   \       0x16   0xDB02             BLT.N    ??dm_msg_cache_insert_0
     80                  return FAIL_RETURN;
   \       0x18   0xF04F 0x30FF      MOV      R0,#-1
   \       0x1C   0xE027             B.N      ??dm_msg_cache_insert_1
     81              }
     82          
     83              node = DM_malloc(sizeof(dm_msg_cache_node_t));
   \                     ??dm_msg_cache_insert_0: (+1)
   \       0x1E   0x2020             MOVS     R0,#+32
   \       0x20   0x....'....        BL       HAL_Malloc
   \       0x24   0x0004             MOVS     R4,R0
     84              if (node == NULL) {
   \       0x26   0xD102             BNE.N    ??dm_msg_cache_insert_2
     85                  return DM_MEMORY_NOT_ENOUGH;
   \       0x28   0xF06F 0x0002      MVN      R0,#+2
   \       0x2C   0xE01F             B.N      ??dm_msg_cache_insert_1
     86              }
     87              memset(node, 0, sizeof(dm_msg_cache_node_t));
   \                     ??dm_msg_cache_insert_2: (+1)
   \       0x2E   0x2200             MOVS     R2,#+0
   \       0x30   0x2120             MOVS     R1,#+32
   \       0x32   0x....'....        BL       __aeabi_memset4
     88          
     89              node->msgid = msgid;
   \       0x36   0xF8C4 0x8000      STR      R8,[R4, #+0]
     90              node->devid = devid;
   \       0x3A   0xF8C4 0x9004      STR      R9,[R4, #+4]
     91              node->response_type = type;
   \       0x3E   0x7226             STRB     R6,[R4, #+8]
     92              node->data = data;
   \       0x40   0x60E5             STR      R5,[R4, #+12]
     93              node->ctime = HAL_UptimeMs();
   \       0x42   0x....'....        BL       HAL_UptimeMs
   \       0x46   0xE9C4 0x0104      STRD     R0,R1,[R4, #+16]
     94              INIT_LIST_HEAD(&node->linked_list);
   \       0x4A   0xF104 0x0018      ADD      R0,R4,#+24
   \       0x4E   0x....'....        BL       INIT_AOS_DLIST_HEAD
     95          
     96              _dm_msg_cache_mutex_lock();
   \       0x52   0x....'....        BL       _dm_msg_cache_mutex_lock
     97              list_add_tail(&node->linked_list, &ctx->dmc_list);
   \       0x56   0xF107 0x0108      ADD      R1,R7,#+8
   \       0x5A   0xF104 0x0018      ADD      R0,R4,#+24
   \       0x5E   0x....'....        BL       dlist_add_tail
     98              ctx->dmc_list_size++;
   \       0x62   0x6878             LDR      R0,[R7, #+4]
   \       0x64   0x1C40             ADDS     R0,R0,#+1
   \       0x66   0x6078             STR      R0,[R7, #+4]
     99              _dm_msg_cache_mutex_unlock();
   \       0x68   0x....'....        BL       _dm_msg_cache_mutex_unlock
    100          
    101              return SUCCESS_RETURN;
   \       0x6C   0x2000             MOVS     R0,#+0
   \                     ??dm_msg_cache_insert_1: (+1)
   \       0x6E   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
    102          }
    103          

   \                                 In section .text, align 2, keep-with-next
    104          int dm_msg_cache_search(_IN_ int msgid, _OU_ dm_msg_cache_node_t **node)
    105          {
   \                     dm_msg_cache_search: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4605             MOV      R5,R0
   \        0x4   0x460C             MOV      R4,R1
    106              dm_msg_cache_ctx_t *ctx = _dm_msg_cache_get_ctx();
   \        0x6   0x....'....        BL       _dm_msg_cache_get_ctx
   \        0xA   0x4606             MOV      R6,R0
    107              dm_msg_cache_node_t *search_node = NULL;
    108          
    109              if (msgid <= 0 || node == NULL || *node != NULL) {
   \        0xC   0x2D01             CMP      R5,#+1
   \        0xE   0xDB04             BLT.N    ??dm_msg_cache_search_0
   \       0x10   0x2C00             CMP      R4,#+0
   \       0x12   0xD002             BEQ.N    ??dm_msg_cache_search_0
   \       0x14   0x6820             LDR      R0,[R4, #+0]
   \       0x16   0x2800             CMP      R0,#+0
   \       0x18   0xD002             BEQ.N    ??dm_msg_cache_search_1
    110                  return DM_INVALID_PARAMETER;
   \                     ??dm_msg_cache_search_0: (+1)
   \       0x1A   0xF06F 0x0001      MVN      R0,#+1
   \       0x1E   0xBD70             POP      {R4-R6,PC}
    111              }
    112          
    113              _dm_msg_cache_mutex_lock();
   \                     ??dm_msg_cache_search_1: (+1)
   \       0x20   0x....'....        BL       _dm_msg_cache_mutex_lock
    114              list_for_each_entry(search_node, &ctx->dmc_list, linked_list, dm_msg_cache_node_t) {
   \       0x24   0x68F0             LDR      R0,[R6, #+12]
   \       0x26   0x3818             SUBS     R0,R0,#+24
   \       0x28   0xF106 0x0208      ADD      R2,R6,#+8
   \       0x2C   0xE001             B.N      ??dm_msg_cache_search_2
   \                     ??dm_msg_cache_search_3: (+1)
   \       0x2E   0x69C0             LDR      R0,[R0, #+28]
   \       0x30   0x3818             SUBS     R0,R0,#+24
   \                     ??dm_msg_cache_search_2: (+1)
   \       0x32   0xF100 0x0118      ADD      R1,R0,#+24
   \       0x36   0x4291             CMP      R1,R2
   \       0x38   0xD007             BEQ.N    ??dm_msg_cache_search_4
    115                  if (search_node->msgid == msgid) {
   \       0x3A   0x6801             LDR      R1,[R0, #+0]
   \       0x3C   0x42A9             CMP      R1,R5
   \       0x3E   0xD1F6             BNE.N    ??dm_msg_cache_search_3
    116                      *node = search_node;
   \       0x40   0x6020             STR      R0,[R4, #+0]
    117                      _dm_msg_cache_mutex_unlock();
   \       0x42   0x....'....        BL       _dm_msg_cache_mutex_unlock
    118                      return SUCCESS_RETURN;
   \       0x46   0x2000             MOVS     R0,#+0
   \       0x48   0xBD70             POP      {R4-R6,PC}
    119                  }
    120              }
    121          
    122              _dm_msg_cache_mutex_unlock();
   \                     ??dm_msg_cache_search_4: (+1)
   \       0x4A   0x....'....        BL       _dm_msg_cache_mutex_unlock
    123              return FAIL_RETURN;
   \       0x4E   0xF04F 0x30FF      MOV      R0,#-1
   \       0x52   0xBD70             POP      {R4-R6,PC}       ;; return
    124          }
    125          

   \                                 In section .text, align 2, keep-with-next
    126          int dm_msg_cache_remove(int msgid)
    127          {
   \                     dm_msg_cache_remove: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4605             MOV      R5,R0
    128              dm_msg_cache_ctx_t *ctx = _dm_msg_cache_get_ctx();
   \        0x4   0x....'....        BL       _dm_msg_cache_get_ctx
   \        0x8   0x4604             MOV      R4,R0
    129              dm_msg_cache_node_t *node = NULL;
    130              dm_msg_cache_node_t *next = NULL;
    131          
    132              _dm_msg_cache_mutex_lock();
   \        0xA   0x....'....        BL       _dm_msg_cache_mutex_lock
    133              list_for_each_entry_safe(node, next, &ctx->dmc_list, linked_list, dm_msg_cache_node_t) {
   \        0xE   0x68E0             LDR      R0,[R4, #+12]
   \       0x10   0xF1A0 0x0618      SUB      R6,R0,#+24
   \       0x14   0x69F0             LDR      R0,[R6, #+28]
   \       0x16   0x3818             SUBS     R0,R0,#+24
   \       0x18   0xF104 0x0208      ADD      R2,R4,#+8
   \       0x1C   0xE002             B.N      ??dm_msg_cache_remove_0
   \                     ??dm_msg_cache_remove_1: (+1)
   \       0x1E   0x4606             MOV      R6,R0
   \       0x20   0x69C0             LDR      R0,[R0, #+28]
   \       0x22   0x3818             SUBS     R0,R0,#+24
   \                     ??dm_msg_cache_remove_0: (+1)
   \       0x24   0xF106 0x0118      ADD      R1,R6,#+24
   \       0x28   0x4291             CMP      R1,R2
   \       0x2A   0xD017             BEQ.N    ??dm_msg_cache_remove_2
    134                  if (node->msgid == msgid) {
   \       0x2C   0x6831             LDR      R1,[R6, #+0]
   \       0x2E   0x42A9             CMP      R1,R5
   \       0x30   0xD1F5             BNE.N    ??dm_msg_cache_remove_1
    135                      list_del(&node->linked_list);
   \       0x32   0xF106 0x0018      ADD      R0,R6,#+24
   \       0x36   0x....'....        BL       dlist_del
    136                      if (node->data) {
   \       0x3A   0x68F0             LDR      R0,[R6, #+12]
   \       0x3C   0x2800             CMP      R0,#+0
   \       0x3E   0xD003             BEQ.N    ??dm_msg_cache_remove_3
    137                          DM_free(node->data);
   \       0x40   0x....'....        BL       HAL_Free
   \       0x44   0x2000             MOVS     R0,#+0
   \       0x46   0x60F0             STR      R0,[R6, #+12]
    138                      }
    139                      ctx->dmc_list_size--;
   \                     ??dm_msg_cache_remove_3: (+1)
   \       0x48   0x6860             LDR      R0,[R4, #+4]
   \       0x4A   0x1E40             SUBS     R0,R0,#+1
   \       0x4C   0x6060             STR      R0,[R4, #+4]
    140                      DM_free(node);
   \       0x4E   0x4630             MOV      R0,R6
   \       0x50   0x....'....        BL       HAL_Free
    141                      dm_log_debug("Remove Message ID: %d", msgid);
    142                      _dm_msg_cache_mutex_unlock();
   \       0x54   0x....'....        BL       _dm_msg_cache_mutex_unlock
    143                      return SUCCESS_RETURN;
   \       0x58   0x2000             MOVS     R0,#+0
   \       0x5A   0xBD70             POP      {R4-R6,PC}
    144                  }
    145              }
    146          
    147              _dm_msg_cache_mutex_unlock();
   \                     ??dm_msg_cache_remove_2: (+1)
   \       0x5C   0x....'....        BL       _dm_msg_cache_mutex_unlock
    148              return FAIL_RETURN;
   \       0x60   0xF04F 0x30FF      MOV      R0,#-1
   \       0x64   0xBD70             POP      {R4-R6,PC}       ;; return
    149          }
    150          

   \                                 In section .text, align 2, keep-with-next
    151          void dm_msg_cache_tick(void)
    152          {
   \                     dm_msg_cache_tick: (+1)
   \        0x0   0xE92D 0x41F0      PUSH     {R4-R8,LR}
    153              dm_msg_cache_ctx_t *ctx = _dm_msg_cache_get_ctx();
   \        0x4   0x....'....        BL       _dm_msg_cache_get_ctx
   \        0x8   0x4680             MOV      R8,R0
    154              dm_msg_cache_node_t *node = NULL;
    155              dm_msg_cache_node_t *next = NULL;
    156              uint64_t current_time = HAL_UptimeMs();
   \        0xA   0x....'....        BL       HAL_UptimeMs
   \        0xE   0x4604             MOV      R4,R0
   \       0x10   0x460D             MOV      R5,R1
    157          
    158              _dm_msg_cache_mutex_lock();
   \       0x12   0x....'....        BL       _dm_msg_cache_mutex_lock
    159              list_for_each_entry_safe(node, next, &ctx->dmc_list, linked_list, dm_msg_cache_node_t) {
   \       0x16   0xF8D8 0x000C      LDR      R0,[R8, #+12]
   \       0x1A   0xF1A0 0x0618      SUB      R6,R0,#+24
   \       0x1E   0x69F0             LDR      R0,[R6, #+28]
   \       0x20   0xF1A0 0x0718      SUB      R7,R0,#+24
   \       0x24   0xE031             B.N      ??dm_msg_cache_tick_0
    160                  if (current_time < node->ctime) {
   \                     ??dm_msg_cache_tick_1: (+1)
   \       0x26   0xE9D6 0x0104      LDRD     R0,R1,[R6, #+16]
   \       0x2A   0x428D             CMP      R5,R1
   \       0x2C   0xD804             BHI.N    ??dm_msg_cache_tick_2
   \       0x2E   0xD301             BCC.N    ??dm_msg_cache_tick_3
   \       0x30   0x4284             CMP      R4,R0
   \       0x32   0xD201             BCS.N    ??dm_msg_cache_tick_2
    161                      node->ctime = current_time;
   \                     ??dm_msg_cache_tick_3: (+1)
   \       0x34   0xE9C6 0x4504      STRD     R4,R5,[R6, #+16]
    162                  }
    163                  if (current_time - node->ctime >= DM_MSG_CACHE_TIMEOUT_MS_DEFAULT) {
   \                     ??dm_msg_cache_tick_2: (+1)
   \       0x38   0xE9D6 0x0104      LDRD     R0,R1,[R6, #+16]
   \       0x3C   0x1A20             SUBS     R0,R4,R0
   \       0x3E   0xEB65 0x0101      SBC      R1,R5,R1
   \       0x42   0xF242 0x7210      MOVW     R2,#+10000
   \       0x46   0x2300             MOVS     R3,#+0
   \       0x48   0x4299             CMP      R1,R3
   \       0x4A   0xD31A             BCC.N    ??dm_msg_cache_tick_4
   \       0x4C   0xD801             BHI.N    ??dm_msg_cache_tick_5
   \       0x4E   0x4290             CMP      R0,R2
   \       0x50   0xD317             BCC.N    ??dm_msg_cache_tick_4
    164                      dm_log_debug("Message ID Timeout: %d", node->msgid);
    165                      /* Send Timeout Message To User */
    166                      dm_msg_send_msg_timeout_to_user(node->msgid, node->devid, node->response_type);
   \                     ??dm_msg_cache_tick_5: (+1)
   \       0x52   0x7A32             LDRB     R2,[R6, #+8]
   \       0x54   0x6871             LDR      R1,[R6, #+4]
   \       0x56   0x6830             LDR      R0,[R6, #+0]
   \       0x58   0x....'....        BL       dm_msg_send_msg_timeout_to_user
    167                      list_del(&node->linked_list);
   \       0x5C   0xF106 0x0018      ADD      R0,R6,#+24
   \       0x60   0x....'....        BL       dlist_del
    168                      if (node->data) {
   \       0x64   0x68F0             LDR      R0,[R6, #+12]
   \       0x66   0x2800             CMP      R0,#+0
   \       0x68   0xD003             BEQ.N    ??dm_msg_cache_tick_6
    169                          DM_free(node->data);
   \       0x6A   0x....'....        BL       HAL_Free
   \       0x6E   0x2000             MOVS     R0,#+0
   \       0x70   0x60F0             STR      R0,[R6, #+12]
    170                      }
    171                      DM_free(node);
   \                     ??dm_msg_cache_tick_6: (+1)
   \       0x72   0x4630             MOV      R0,R6
   \       0x74   0x....'....        BL       HAL_Free
    172                      ctx->dmc_list_size--;
   \       0x78   0xF8D8 0x0004      LDR      R0,[R8, #+4]
   \       0x7C   0x1E40             SUBS     R0,R0,#+1
   \       0x7E   0xF8C8 0x0004      STR      R0,[R8, #+4]
    173                  }
    174              }
   \                     ??dm_msg_cache_tick_4: (+1)
   \       0x82   0x463E             MOV      R6,R7
   \       0x84   0x69F8             LDR      R0,[R7, #+28]
   \       0x86   0xF1A0 0x0718      SUB      R7,R0,#+24
   \                     ??dm_msg_cache_tick_0: (+1)
   \       0x8A   0xF106 0x0018      ADD      R0,R6,#+24
   \       0x8E   0xF108 0x0108      ADD      R1,R8,#+8
   \       0x92   0x4288             CMP      R0,R1
   \       0x94   0xD1C7             BNE.N    ??dm_msg_cache_tick_1
    175              _dm_msg_cache_mutex_unlock();
   \       0x96   0xE8BD 0x41F0      POP      {R4-R8,LR}
   \       0x9A   0x....             B.N      _dm_msg_cache_mutex_unlock
    176          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \        0x0   0x....'....        DC32     g_dm_msg_cache_ctx
    177          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   INIT_AOS_DLIST_HEAD
       0   __dlist_add
       0   _dm_msg_cache_get_ctx
       8   _dm_msg_cache_mutex_lock
         0   -> HAL_MutexLock
         8   -> _dm_msg_cache_get_ctx
       8   _dm_msg_cache_mutex_unlock
         0   -> HAL_MutexUnlock
         8   -> _dm_msg_cache_get_ctx
       0   dlist_add_tail
         0   -> __dlist_add
       0   dlist_del
      16   dm_msg_cache_deinit
        16   -> HAL_Free
        16   -> HAL_MutexDestroy
        16   -> _dm_msg_cache_get_ctx
        16   -> _dm_msg_cache_mutex_lock
        16   -> _dm_msg_cache_mutex_unlock
        16   -> dlist_del
       8   dm_msg_cache_init
         8   -> HAL_MutexCreate
         8   -> INIT_AOS_DLIST_HEAD
         8   -> __aeabi_memset4
         8   -> _dm_msg_cache_get_ctx
      32   dm_msg_cache_insert
        32   -> HAL_Malloc
        32   -> HAL_UptimeMs
        32   -> INIT_AOS_DLIST_HEAD
        32   -> __aeabi_memset4
        32   -> _dm_msg_cache_get_ctx
        32   -> _dm_msg_cache_mutex_lock
        32   -> _dm_msg_cache_mutex_unlock
        32   -> dlist_add_tail
      16   dm_msg_cache_remove
        16   -> HAL_Free
        16   -> _dm_msg_cache_get_ctx
        16   -> _dm_msg_cache_mutex_lock
        16   -> _dm_msg_cache_mutex_unlock
        16   -> dlist_del
      16   dm_msg_cache_search
        16   -> _dm_msg_cache_get_ctx
        16   -> _dm_msg_cache_mutex_lock
        16   -> _dm_msg_cache_mutex_unlock
      24   dm_msg_cache_tick
        24   -> HAL_Free
        24   -> HAL_UptimeMs
        24   -> _dm_msg_cache_get_ctx
        24   -> _dm_msg_cache_mutex_lock
         0   -> _dm_msg_cache_mutex_unlock
        24   -> dlist_del
        24   -> dm_msg_send_msg_timeout_to_user


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       6  INIT_AOS_DLIST_HEAD
      10  __dlist_add
       4  _dm_msg_cache_get_ctx
      24  _dm_msg_cache_mutex_lock
      24  _dm_msg_cache_mutex_unlock
       6  dlist_add_tail
      10  dlist_del
      92  dm_msg_cache_deinit
      44  dm_msg_cache_init
     114  dm_msg_cache_insert
     102  dm_msg_cache_remove
      84  dm_msg_cache_search
     156  dm_msg_cache_tick
      16  g_dm_msg_cache_ctx

 
  16 bytes in section .bss
 680 bytes in section .text
 
 680 bytes of CODE memory
  16 bytes of DATA memory

Errors: none
Warnings: none
