###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.3.193/W32 for ARM         10/Jun/2019  13:48:15
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\Development\smart_washing_machine_3080\mbedtls\library\ecdsa.c
#    Command line =  
#        -f C:\Users\nxf42695\AppData\Local\Temp\1\EWCAF0.tmp
#        (C:\Development\smart_washing_machine_3080\mbedtls\library\ecdsa.c -D
#        DEBUG -D USE_RTOS -D XIP_EXTERNAL_FLASH=1 -D XIP_BOOT_HEADER_ENABLE=1
#        -D CPU_MIMXRT1052DVL6B -D FSL_RTOS_FREE_RTOS -D PRINTF_ADVANCED_ENABLE
#        -D "MBEDTLS_CONFIG_FILE=\"ksdk_mbedtls_config.h\"" -lC
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list -lA
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list
#        --diag_suppress Pa082,Pa050 -o
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_d16 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" --preinclude
#        C:\Development\smart_washing_machine_3080/source\app_preinclude.h -I
#        C:\Development\smart_washing_machine_3080/board\ -I
#        C:\Development\smart_washing_machine_3080/source\ -I
#        C:\Development\smart_washing_machine_3080/CMSIS\ -I
#        C:\Development\smart_washing_machine_3080/amazon-freertos/freertos/portable\
#        -I C:\Development\smart_washing_machine_3080/amazon-freertos/include\
#        -I C:\Development\smart_washing_machine_3080/component/lists\ -I
#        C:\Development\smart_washing_machine_3080/component/serial_manager\ -I
#        C:\Development\smart_washing_machine_3080/component/uart\ -I
#        C:\Development\smart_washing_machine_3080/component/kv\ -I
#        C:\Development\smart_washing_machine_3080/component/kv/include\ -I
#        C:\Development\smart_washing_machine_3080/device\ -I
#        C:\Development\smart_washing_machine_3080/doc\ -I
#        C:\Development\smart_washing_machine_3080/drivers\ -I
#        C:\Development\smart_washing_machine_3080/src\ -I
#        C:\Development\smart_washing_machine_3080/startup\ -I
#        C:\Development\smart_washing_machine_3080/utilities\ -I
#        C:\Development\smart_washing_machine_3080/xip\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\atm\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_model\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_sign\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\infra\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\mqtt\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\external_libs\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\coap_cloud\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\CoAPPacket\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\server\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\os\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\awss_reset\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\mbedtls\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\ -I
#        C:\Development\smart_washing_machine_3080\mbedtls\port\ksdk\ -Om)
#    Locale       =  C
#    List file    =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list\ecdsa.lst
#    Object file  =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj\ecdsa.o
#
###############################################################################

C:\Development\smart_washing_machine_3080\mbedtls\library\ecdsa.c
      1          /*
      2           *  Elliptic curve DSA
      3           *
      4           *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
      5           *  SPDX-License-Identifier: Apache-2.0
      6           *
      7           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
      8           *  not use this file except in compliance with the License.
      9           *  You may obtain a copy of the License at
     10           *
     11           *  http://www.apache.org/licenses/LICENSE-2.0
     12           *
     13           *  Unless required by applicable law or agreed to in writing, software
     14           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     15           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     16           *  See the License for the specific language governing permissions and
     17           *  limitations under the License.
     18           *
     19           *  This file is part of mbed TLS (https://tls.mbed.org)
     20           */
     21          
     22          /*
     23           * References:
     24           *
     25           * SEC1 http://www.secg.org/index.php?action=secg,docs_secg
     26           */
     27          
     28          #if !defined(MBEDTLS_CONFIG_FILE)
     29          #include "mbedtls/config.h"
     30          #else
     31          #include MBEDTLS_CONFIG_FILE
     32          #endif
     33          
     34          #if defined(MBEDTLS_ECDSA_C)
     35          
     36          #include "mbedtls/ecdsa.h"
     37          #include "mbedtls/asn1write.h"
     38          
     39          #include <string.h>
     40          
     41          #if defined(MBEDTLS_ECDSA_DETERMINISTIC)
     42          #include "mbedtls/hmac_drbg.h"
     43          #endif
     44          
     45          /*
     46           * Derive a suitable integer for group grp from a buffer of length len
     47           * SEC1 4.1.3 step 5 aka SEC1 4.1.4 step 3
     48           */

   \                                 In section .text, align 2, keep-with-next
     49          static int derive_mpi( const mbedtls_ecp_group *grp, mbedtls_mpi *x,
     50                                 const unsigned char *buf, size_t blen )
     51          {
   \                     derive_mpi: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x4605             MOV      R5,R0
   \        0x4   0x460E             MOV      R6,R1
   \        0x6   0x4611             MOV      R1,R2
     52              int ret;
     53              size_t n_size = ( grp->nbits + 7 ) / 8;
   \        0x8   0x6DEF             LDR      R7,[R5, #+92]
   \        0xA   0x1DFF             ADDS     R7,R7,#+7
   \        0xC   0x08FF             LSRS     R7,R7,#+3
     54              size_t use_size = blen > n_size ? n_size : blen;
   \        0xE   0x429F             CMP      R7,R3
   \       0x10   0xD900             BLS.N    ??derive_mpi_0
   \       0x12   0x461F             MOV      R7,R3
     55          
     56              MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( x, buf, use_size ) );
   \                     ??derive_mpi_0: (+1)
   \       0x14   0x463A             MOV      R2,R7
   \       0x16   0x4630             MOV      R0,R6
   \       0x18   0x....'....        BL       mbedtls_mpi_read_binary
   \       0x1C   0x0004             MOVS     R4,R0
   \       0x1E   0xD119             BNE.N    ??derive_mpi_1
     57              if( use_size * 8 > grp->nbits )
   \       0x20   0x6DE8             LDR      R0,[R5, #+92]
   \       0x22   0xEBB0 0x0FC7      CMP      R0,R7, LSL #+3
   \       0x26   0xD207             BCS.N    ??derive_mpi_2
     58                  MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( x, use_size * 8 - grp->nbits ) );
   \       0x28   0x4601             MOV      R1,R0
   \       0x2A   0xEBC1 0x01C7      RSB      R1,R1,R7, LSL #+3
   \       0x2E   0x4630             MOV      R0,R6
   \       0x30   0x....'....        BL       mbedtls_mpi_shift_r
   \       0x34   0x0004             MOVS     R4,R0
   \       0x36   0xD10D             BNE.N    ??derive_mpi_1
     59          
     60              /* While at it, reduce modulo N */
     61              if( mbedtls_mpi_cmp_mpi( x, &grp->N ) >= 0 )
   \                     ??derive_mpi_2: (+1)
   \       0x38   0xF105 0x014C      ADD      R1,R5,#+76
   \       0x3C   0x4630             MOV      R0,R6
   \       0x3E   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \       0x42   0x2800             CMP      R0,#+0
   \       0x44   0xD406             BMI.N    ??derive_mpi_1
     62                  MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( x, x, &grp->N ) );
   \       0x46   0xF105 0x024C      ADD      R2,R5,#+76
   \       0x4A   0x4631             MOV      R1,R6
   \       0x4C   0x4630             MOV      R0,R6
   \       0x4E   0x....'....        BL       mbedtls_mpi_sub_mpi
   \       0x52   0x4604             MOV      R4,R0
     63          
     64          cleanup:
     65              return( ret );
   \                     ??derive_mpi_1: (+1)
   \       0x54   0x4620             MOV      R0,R4
   \       0x56   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
     66          }
     67          
     68          #if !defined(MBEDTLS_ECDSA_SIGN_ALT)
     69          /*
     70           * Compute ECDSA signature of a hashed message (SEC1 4.1.3)
     71           * Obviously, compared to SEC1 4.1.3, we skip step 4 (hash message)
     72           */

   \                                 In section .text, align 2, keep-with-next
     73          int mbedtls_ecdsa_sign( mbedtls_ecp_group *grp, mbedtls_mpi *r, mbedtls_mpi *s,
     74                          const mbedtls_mpi *d, const unsigned char *buf, size_t blen,
     75                          int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
     76          {
   \                     mbedtls_ecdsa_sign: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \        0x4   0xB094             SUB      SP,SP,#+80
   \        0x6   0x4607             MOV      R7,R0
   \        0x8   0x460C             MOV      R4,R1
   \        0xA   0x4616             MOV      R6,R2
     77              int ret, key_tries, sign_tries, blind_tries;
     78              mbedtls_ecp_point R;
     79              mbedtls_mpi k, e, t;
     80          
     81              /* Fail cleanly on curves such as Curve25519 that can't be used for ECDSA */
     82              if( grp->N.p == NULL )
   \        0xC   0x6D78             LDR      R0,[R7, #+84]
   \        0xE   0x2800             CMP      R0,#+0
   \       0x10   0xD102             BNE.N    ??mbedtls_ecdsa_sign_0
     83                  return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   \       0x12   0x....'....        LDR.W    R0,??DataTable4  ;; 0xffffb080
   \       0x16   0xE0D6             B.N      ??mbedtls_ecdsa_sign_1
   \                     ??mbedtls_ecdsa_sign_0: (+1)
   \       0x18   0x930A             STR      R3,[SP, #+40]
     84          
     85              /* Make sure d is in range 1..n-1 */
     86              if( mbedtls_mpi_cmp_int( d, 1 ) < 0 || mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )
   \       0x1A   0x2101             MOVS     R1,#+1
   \       0x1C   0x4618             MOV      R0,R3
   \       0x1E   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x22   0x2800             CMP      R0,#+0
   \       0x24   0xD406             BMI.N    ??mbedtls_ecdsa_sign_2
   \       0x26   0xF107 0x014C      ADD      R1,R7,#+76
   \       0x2A   0x980A             LDR      R0,[SP, #+40]
   \       0x2C   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \       0x30   0x2800             CMP      R0,#+0
   \       0x32   0xD402             BMI.N    ??mbedtls_ecdsa_sign_3
     87                  return( MBEDTLS_ERR_ECP_INVALID_KEY );
   \                     ??mbedtls_ecdsa_sign_2: (+1)
   \       0x34   0x....'....        LDR.W    R0,??DataTable4_1  ;; 0xffffb380
   \       0x38   0xE0C5             B.N      ??mbedtls_ecdsa_sign_1
     88          
     89              mbedtls_ecp_point_init( &R );
   \                     ??mbedtls_ecdsa_sign_3: (+1)
   \       0x3A   0xA80B             ADD      R0,SP,#+44
   \       0x3C   0x....'....        BL       mbedtls_ecp_point_init
     90              mbedtls_mpi_init( &k ); mbedtls_mpi_init( &e ); mbedtls_mpi_init( &t );
   \       0x40   0xA807             ADD      R0,SP,#+28
   \       0x42   0x....'....        BL       mbedtls_mpi_init
   \       0x46   0xA804             ADD      R0,SP,#+16
   \       0x48   0x....'....        BL       mbedtls_mpi_init
   \       0x4C   0xA801             ADD      R0,SP,#+4
   \       0x4E   0x....'....        BL       mbedtls_mpi_init
     91          
     92              sign_tries = 0;
   \       0x52   0x2500             MOVS     R5,#+0
   \       0x54   0x9400             STR      R4,[SP, #+0]
   \       0x56   0xF8DD 0xB07C      LDR      R11,[SP, #+124]
   \       0x5A   0x9C20             LDR      R4,[SP, #+128]
   \       0x5C   0xF8DD 0x9084      LDR      R9,[SP, #+132]
     93              do
     94              {
     95                  /*
     96                   * Steps 1-3: generate a suitable ephemeral keypair
     97                   * and set r = xR mod n
     98                   */
     99                  key_tries = 0;
   \                     ??mbedtls_ecdsa_sign_4: (+1)
   \       0x60   0xF04F 0x0A00      MOV      R10,#+0
   \       0x64   0xF8DD 0x8000      LDR      R8,[SP, #+0]
    100                  do
    101                  {
    102                      MBEDTLS_MPI_CHK( mbedtls_ecp_gen_keypair( grp, &k, &R, f_rng, p_rng ) );
   \                     ??mbedtls_ecdsa_sign_5: (+1)
   \       0x68   0xF8CD 0x9000      STR      R9,[SP, #+0]
   \       0x6C   0x4623             MOV      R3,R4
   \       0x6E   0xAA0B             ADD      R2,SP,#+44
   \       0x70   0xA907             ADD      R1,SP,#+28
   \       0x72   0x4638             MOV      R0,R7
   \       0x74   0x....'....        BL       mbedtls_ecp_gen_keypair
   \       0x78   0x2800             CMP      R0,#+0
   \       0x7A   0xF040 0x8093      BNE.W    ??mbedtls_ecdsa_sign_6
    103                      MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( r, &R.X, &grp->N ) );
   \       0x7E   0xF107 0x024C      ADD      R2,R7,#+76
   \       0x82   0xA90B             ADD      R1,SP,#+44
   \       0x84   0x4640             MOV      R0,R8
   \       0x86   0x....'....        BL       mbedtls_mpi_mod_mpi
   \       0x8A   0x2800             CMP      R0,#+0
   \       0x8C   0xF040 0x808A      BNE.W    ??mbedtls_ecdsa_sign_6
    104          
    105                      if( key_tries++ > 10 )
   \       0x90   0x4650             MOV      R0,R10
   \       0x92   0xF100 0x0A01      ADD      R10,R0,#+1
   \       0x96   0x280B             CMP      R0,#+11
   \       0x98   0xF280 0x8086      BGE.W    ??mbedtls_ecdsa_sign_7
    106                      {
    107                          ret = MBEDTLS_ERR_ECP_RANDOM_FAILED;
    108                          goto cleanup;
    109                      }
    110                  }
    111                  while( mbedtls_mpi_cmp_int( r, 0 ) == 0 );
   \       0x9C   0x2100             MOVS     R1,#+0
   \       0x9E   0x4640             MOV      R0,R8
   \       0xA0   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0xA4   0x2800             CMP      R0,#+0
   \       0xA6   0xD0DF             BEQ.N    ??mbedtls_ecdsa_sign_5
   \       0xA8   0xF8CD 0x8000      STR      R8,[SP, #+0]
    112          
    113                  /*
    114                   * Step 5: derive MPI from hashed message
    115                   */
    116                  MBEDTLS_MPI_CHK( derive_mpi( grp, &e, buf, blen ) );
   \       0xAC   0x465B             MOV      R3,R11
   \       0xAE   0x9A1E             LDR      R2,[SP, #+120]
   \       0xB0   0xA904             ADD      R1,SP,#+16
   \       0xB2   0x4638             MOV      R0,R7
   \       0xB4   0x....'....        BL       derive_mpi
   \       0xB8   0x4680             MOV      R8,R0
   \       0xBA   0x2800             CMP      R0,#+0
   \       0xBC   0xD176             BNE.N    ??mbedtls_ecdsa_sign_8
    117          
    118                  /*
    119                   * Generate a random value to blind inv_mod in next step,
    120                   * avoiding a potential timing leak.
    121                   */
    122                  blind_tries = 0;
   \       0xBE   0xF04F 0x0800      MOV      R8,#+0
    123                  do
    124                  {
    125                      size_t n_size = ( grp->nbits + 7 ) / 8;
   \                     ??mbedtls_ecdsa_sign_9: (+1)
   \       0xC2   0xF8D7 0xA05C      LDR      R10,[R7, #+92]
   \       0xC6   0xF10A 0x0A07      ADD      R10,R10,#+7
   \       0xCA   0xEA4F 0x0ADA      LSR      R10,R10,#+3
    126                      MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &t, n_size, f_rng, p_rng ) );
   \       0xCE   0x464B             MOV      R3,R9
   \       0xD0   0x4622             MOV      R2,R4
   \       0xD2   0x4651             MOV      R1,R10
   \       0xD4   0xA801             ADD      R0,SP,#+4
   \       0xD6   0x....'....        BL       mbedtls_mpi_fill_random
   \       0xDA   0x2800             CMP      R0,#+0
   \       0xDC   0xD162             BNE.N    ??mbedtls_ecdsa_sign_6
    127                      MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &t, 8 * n_size - grp->nbits ) );
   \       0xDE   0x6DF9             LDR      R1,[R7, #+92]
   \       0xE0   0xEBC1 0x01CA      RSB      R1,R1,R10, LSL #+3
   \       0xE4   0xA801             ADD      R0,SP,#+4
   \       0xE6   0x....'....        BL       mbedtls_mpi_shift_r
   \       0xEA   0x2800             CMP      R0,#+0
   \       0xEC   0xD15A             BNE.N    ??mbedtls_ecdsa_sign_6
    128          
    129                      /* See mbedtls_ecp_gen_keypair() */
    130                      if( ++blind_tries > 30 )
   \       0xEE   0xF108 0x0801      ADD      R8,R8,#+1
   \       0xF2   0xF1B8 0x0F1F      CMP      R8,#+31
   \       0xF6   0xDB02             BLT.N    ??mbedtls_ecdsa_sign_10
    131                          return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
   \       0xF8   0x....'....        LDR.W    R0,??DataTable4_2  ;; 0xffffb300
   \       0xFC   0xE063             B.N      ??mbedtls_ecdsa_sign_1
    132                  }
    133                  while( mbedtls_mpi_cmp_int( &t, 1 ) < 0 ||
    134                         mbedtls_mpi_cmp_mpi( &t, &grp->N ) >= 0 );
   \                     ??mbedtls_ecdsa_sign_10: (+1)
   \       0xFE   0x2101             MOVS     R1,#+1
   \      0x100   0xA801             ADD      R0,SP,#+4
   \      0x102   0x....'....        BL       mbedtls_mpi_cmp_int
   \      0x106   0x2800             CMP      R0,#+0
   \      0x108   0xD4DB             BMI.N    ??mbedtls_ecdsa_sign_9
   \      0x10A   0xF107 0x014C      ADD      R1,R7,#+76
   \      0x10E   0xA801             ADD      R0,SP,#+4
   \      0x110   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \      0x114   0x2800             CMP      R0,#+0
   \      0x116   0xD5D4             BPL.N    ??mbedtls_ecdsa_sign_9
    135          
    136                  /*
    137                   * Step 6: compute s = (e + r * d) / k = t (e + rd) / (kt) mod n
    138                   */
    139                  MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( s, r, d ) );
   \      0x118   0x9A0A             LDR      R2,[SP, #+40]
   \      0x11A   0x9900             LDR      R1,[SP, #+0]
   \      0x11C   0x4630             MOV      R0,R6
   \      0x11E   0x....'....        BL       mbedtls_mpi_mul_mpi
   \      0x122   0x4680             MOV      R8,R0
   \      0x124   0x2800             CMP      R0,#+0
   \      0x126   0xD141             BNE.N    ??mbedtls_ecdsa_sign_8
    140                  MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &e, &e, s ) );
   \      0x128   0x4632             MOV      R2,R6
   \      0x12A   0xA904             ADD      R1,SP,#+16
   \      0x12C   0xA804             ADD      R0,SP,#+16
   \      0x12E   0x....'....        BL       mbedtls_mpi_add_mpi
   \      0x132   0x4680             MOV      R8,R0
   \      0x134   0x2800             CMP      R0,#+0
   \      0x136   0xD139             BNE.N    ??mbedtls_ecdsa_sign_8
    141                  MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &e, &e, &t ) );
   \      0x138   0xAA01             ADD      R2,SP,#+4
   \      0x13A   0xA904             ADD      R1,SP,#+16
   \      0x13C   0xA804             ADD      R0,SP,#+16
   \      0x13E   0x....'....        BL       mbedtls_mpi_mul_mpi
   \      0x142   0x4680             MOV      R8,R0
   \      0x144   0x2800             CMP      R0,#+0
   \      0x146   0xD131             BNE.N    ??mbedtls_ecdsa_sign_8
    142                  MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &k, &k, &t ) );
   \      0x148   0xAA01             ADD      R2,SP,#+4
   \      0x14A   0xA907             ADD      R1,SP,#+28
   \      0x14C   0xA807             ADD      R0,SP,#+28
   \      0x14E   0x....'....        BL       mbedtls_mpi_mul_mpi
   \      0x152   0x4680             MOV      R8,R0
   \      0x154   0x2800             CMP      R0,#+0
   \      0x156   0xD129             BNE.N    ??mbedtls_ecdsa_sign_8
    143                  MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( s, &k, &grp->N ) );
   \      0x158   0xF107 0x024C      ADD      R2,R7,#+76
   \      0x15C   0xA907             ADD      R1,SP,#+28
   \      0x15E   0x4630             MOV      R0,R6
   \      0x160   0x....'....        BL       mbedtls_mpi_inv_mod
   \      0x164   0x4680             MOV      R8,R0
   \      0x166   0x2800             CMP      R0,#+0
   \      0x168   0xD120             BNE.N    ??mbedtls_ecdsa_sign_8
    144                  MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( s, s, &e ) );
   \      0x16A   0xAA04             ADD      R2,SP,#+16
   \      0x16C   0x4631             MOV      R1,R6
   \      0x16E   0x4630             MOV      R0,R6
   \      0x170   0x....'....        BL       mbedtls_mpi_mul_mpi
   \      0x174   0x4680             MOV      R8,R0
   \      0x176   0x2800             CMP      R0,#+0
   \      0x178   0xD118             BNE.N    ??mbedtls_ecdsa_sign_8
    145                  MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( s, s, &grp->N ) );
   \      0x17A   0xF107 0x024C      ADD      R2,R7,#+76
   \      0x17E   0x4631             MOV      R1,R6
   \      0x180   0x4630             MOV      R0,R6
   \      0x182   0x....'....        BL       mbedtls_mpi_mod_mpi
   \      0x186   0x4680             MOV      R8,R0
   \      0x188   0x2800             CMP      R0,#+0
   \      0x18A   0xD10F             BNE.N    ??mbedtls_ecdsa_sign_8
    146          
    147                  if( sign_tries++ > 10 )
   \      0x18C   0x4628             MOV      R0,R5
   \      0x18E   0x1C45             ADDS     R5,R0,#+1
   \      0x190   0x280B             CMP      R0,#+11
   \      0x192   0xDA09             BGE.N    ??mbedtls_ecdsa_sign_7
    148                  {
    149                      ret = MBEDTLS_ERR_ECP_RANDOM_FAILED;
    150                      goto cleanup;
    151                  }
    152              }
    153              while( mbedtls_mpi_cmp_int( s, 0 ) == 0 );
   \      0x194   0x2100             MOVS     R1,#+0
   \      0x196   0x4630             MOV      R0,R6
   \      0x198   0x....'....        BL       mbedtls_mpi_cmp_int
   \      0x19C   0x2800             CMP      R0,#+0
   \      0x19E   0xF43F 0xAF5F      BEQ.W    ??mbedtls_ecdsa_sign_4
   \      0x1A2   0xE003             B.N      ??mbedtls_ecdsa_sign_8
   \                     ??mbedtls_ecdsa_sign_6: (+1)
   \      0x1A4   0x4680             MOV      R8,R0
   \      0x1A6   0xE001             B.N      ??mbedtls_ecdsa_sign_8
   \                     ??mbedtls_ecdsa_sign_7: (+1)
   \      0x1A8   0x....'....        LDR.W    R8,??DataTable4_2  ;; 0xffffb300
    154          
    155          cleanup:
    156              mbedtls_ecp_point_free( &R );
   \                     ??mbedtls_ecdsa_sign_8: (+1)
   \      0x1AC   0xA80B             ADD      R0,SP,#+44
   \      0x1AE   0x....'....        BL       mbedtls_ecp_point_free
    157              mbedtls_mpi_free( &k ); mbedtls_mpi_free( &e ); mbedtls_mpi_free( &t );
   \      0x1B2   0xA807             ADD      R0,SP,#+28
   \      0x1B4   0x....'....        BL       mbedtls_mpi_free
   \      0x1B8   0xA804             ADD      R0,SP,#+16
   \      0x1BA   0x....'....        BL       mbedtls_mpi_free
   \      0x1BE   0xA801             ADD      R0,SP,#+4
   \      0x1C0   0x....'....        BL       mbedtls_mpi_free
    158          
    159              return( ret );
   \      0x1C4   0x4640             MOV      R0,R8
   \                     ??mbedtls_ecdsa_sign_1: (+1)
   \      0x1C6   0xB015             ADD      SP,SP,#+84
   \      0x1C8   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    160          }
    161          #endif /* MBEDTLS_ECDSA_SIGN_ALT */
    162          
    163          #if defined(MBEDTLS_ECDSA_DETERMINISTIC)
    164          /*
    165           * Deterministic signature wrapper
    166           */

   \                                 In section .text, align 2, keep-with-next
    167          int mbedtls_ecdsa_sign_det( mbedtls_ecp_group *grp, mbedtls_mpi *r, mbedtls_mpi *s,
    168                              const mbedtls_mpi *d, const unsigned char *buf, size_t blen,
    169                              mbedtls_md_type_t md_alg )
    170          {
   \                     mbedtls_ecdsa_sign_det: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \        0x4   0xB0B8             SUB      SP,SP,#+224
   \        0x6   0x4605             MOV      R5,R0
   \        0x8   0x460E             MOV      R6,R1
   \        0xA   0x4617             MOV      R7,R2
   \        0xC   0x4699             MOV      R9,R3
   \        0xE   0x9844             LDR      R0,[SP, #+272]
    171              int ret;
    172              mbedtls_hmac_drbg_context rng_ctx;
    173              unsigned char data[2 * MBEDTLS_ECP_MAX_BYTES];
    174              size_t grp_len = ( grp->nbits + 7 ) / 8;
   \       0x10   0xF8D5 0x805C      LDR      R8,[R5, #+92]
   \       0x14   0xF108 0x0807      ADD      R8,R8,#+7
   \       0x18   0xEA4F 0x08D8      LSR      R8,R8,#+3
    175              const mbedtls_md_info_t *md_info;
    176              mbedtls_mpi h;
    177          
    178              if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
   \       0x1C   0x....'....        BL       mbedtls_md_info_from_type
   \       0x20   0x9000             STR      R0,[SP, #+0]
   \       0x22   0x2800             CMP      R0,#+0
   \       0x24   0xD101             BNE.N    ??mbedtls_ecdsa_sign_det_0
    179                  return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   \       0x26   0x....             LDR.N    R0,??DataTable4  ;; 0xffffb080
   \       0x28   0xE03F             B.N      ??mbedtls_ecdsa_sign_det_1
    180          
    181              mbedtls_mpi_init( &h );
   \                     ??mbedtls_ecdsa_sign_det_0: (+1)
   \       0x2A   0xA804             ADD      R0,SP,#+16
   \       0x2C   0x....'....        BL       mbedtls_mpi_init
    182              mbedtls_hmac_drbg_init( &rng_ctx );
   \       0x30   0xA81F             ADD      R0,SP,#+124
   \       0x32   0x....'....        BL       mbedtls_hmac_drbg_init
    183          
    184              /* Use private key and message hash (reduced) to initialize HMAC_DRBG */
    185              MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( d, data, grp_len ) );
   \       0x36   0x4642             MOV      R2,R8
   \       0x38   0xA907             ADD      R1,SP,#+28
   \       0x3A   0x4648             MOV      R0,R9
   \       0x3C   0x....'....        BL       mbedtls_mpi_write_binary
   \       0x40   0x0004             MOVS     R4,R0
   \       0x42   0xD12B             BNE.N    ??mbedtls_ecdsa_sign_det_2
   \       0x44   0xF8DD 0xA10C      LDR      R10,[SP, #+268]
   \       0x48   0xF8DD 0xB108      LDR      R11,[SP, #+264]
    186              MBEDTLS_MPI_CHK( derive_mpi( grp, &h, buf, blen ) );
   \       0x4C   0x4653             MOV      R3,R10
   \       0x4E   0x465A             MOV      R2,R11
   \       0x50   0xA904             ADD      R1,SP,#+16
   \       0x52   0x4628             MOV      R0,R5
   \       0x54   0x....'....        BL       derive_mpi
   \       0x58   0x0004             MOVS     R4,R0
   \       0x5A   0xD11F             BNE.N    ??mbedtls_ecdsa_sign_det_2
    187              MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &h, data + grp_len, grp_len ) );
   \       0x5C   0x4642             MOV      R2,R8
   \       0x5E   0xA807             ADD      R0,SP,#+28
   \       0x60   0xEB00 0x0108      ADD      R1,R0,R8
   \       0x64   0xA804             ADD      R0,SP,#+16
   \       0x66   0x....'....        BL       mbedtls_mpi_write_binary
   \       0x6A   0x0004             MOVS     R4,R0
   \       0x6C   0xD116             BNE.N    ??mbedtls_ecdsa_sign_det_2
    188              mbedtls_hmac_drbg_seed_buf( &rng_ctx, md_info, data, 2 * grp_len );
   \       0x6E   0xEA4F 0x0848      LSL      R8,R8,#+1
   \       0x72   0x4643             MOV      R3,R8
   \       0x74   0xAA07             ADD      R2,SP,#+28
   \       0x76   0x9900             LDR      R1,[SP, #+0]
   \       0x78   0xA81F             ADD      R0,SP,#+124
   \       0x7A   0x....'....        BL       mbedtls_hmac_drbg_seed_buf
    189          
    190              ret = mbedtls_ecdsa_sign( grp, r, s, d, buf, blen,
    191                                mbedtls_hmac_drbg_random, &rng_ctx );
   \       0x7E   0xA81F             ADD      R0,SP,#+124
   \       0x80   0x9003             STR      R0,[SP, #+12]
   \       0x82   0x....             LDR.N    R0,??DataTable4_3
   \       0x84   0x9002             STR      R0,[SP, #+8]
   \       0x86   0xF8CD 0xA004      STR      R10,[SP, #+4]
   \       0x8A   0xF8CD 0xB000      STR      R11,[SP, #+0]
   \       0x8E   0x464B             MOV      R3,R9
   \       0x90   0x463A             MOV      R2,R7
   \       0x92   0x4631             MOV      R1,R6
   \       0x94   0x4628             MOV      R0,R5
   \       0x96   0x....'....        BL       mbedtls_ecdsa_sign
   \       0x9A   0x4604             MOV      R4,R0
    192          
    193          cleanup:
    194              mbedtls_hmac_drbg_free( &rng_ctx );
   \                     ??mbedtls_ecdsa_sign_det_2: (+1)
   \       0x9C   0xA81F             ADD      R0,SP,#+124
   \       0x9E   0x....'....        BL       mbedtls_hmac_drbg_free
    195              mbedtls_mpi_free( &h );
   \       0xA2   0xA804             ADD      R0,SP,#+16
   \       0xA4   0x....'....        BL       mbedtls_mpi_free
    196          
    197              return( ret );
   \       0xA8   0x4620             MOV      R0,R4
   \                     ??mbedtls_ecdsa_sign_det_1: (+1)
   \       0xAA   0xB039             ADD      SP,SP,#+228
   \       0xAC   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    198          }
    199          #endif /* MBEDTLS_ECDSA_DETERMINISTIC */
    200          
    201          #if !defined(MBEDTLS_ECDSA_VERIFY_ALT)
    202          /*
    203           * Verify ECDSA signature of hashed message (SEC1 4.1.4)
    204           * Obviously, compared to SEC1 4.1.3, we skip step 2 (hash message)
    205           */

   \                                 In section .text, align 2, keep-with-next
    206          int mbedtls_ecdsa_verify( mbedtls_ecp_group *grp,
    207                            const unsigned char *buf, size_t blen,
    208                            const mbedtls_ecp_point *Q, const mbedtls_mpi *r, const mbedtls_mpi *s)
    209          {
   \                     mbedtls_ecdsa_verify: (+1)
   \        0x0   0xE92D 0x47F8      PUSH     {R3-R10,LR}
   \        0x4   0xB097             SUB      SP,SP,#+92
   \        0x6   0x4605             MOV      R5,R0
   \        0x8   0x460E             MOV      R6,R1
   \        0xA   0x4617             MOV      R7,R2
   \        0xC   0x4698             MOV      R8,R3
    210              int ret;
    211              mbedtls_mpi e, s_inv, u1, u2;
    212              mbedtls_ecp_point R;
    213          
    214              mbedtls_ecp_point_init( &R );
   \        0xE   0xA80E             ADD      R0,SP,#+56
   \       0x10   0x....'....        BL       mbedtls_ecp_point_init
    215              mbedtls_mpi_init( &e ); mbedtls_mpi_init( &s_inv ); mbedtls_mpi_init( &u1 ); mbedtls_mpi_init( &u2 );
   \       0x14   0xA80B             ADD      R0,SP,#+44
   \       0x16   0x....'....        BL       mbedtls_mpi_init
   \       0x1A   0xA808             ADD      R0,SP,#+32
   \       0x1C   0x....'....        BL       mbedtls_mpi_init
   \       0x20   0xA805             ADD      R0,SP,#+20
   \       0x22   0x....'....        BL       mbedtls_mpi_init
   \       0x26   0xA802             ADD      R0,SP,#+8
   \       0x28   0x....'....        BL       mbedtls_mpi_init
    216          
    217              /* Fail cleanly on curves such as Curve25519 that can't be used for ECDSA */
    218              if( grp->N.p == NULL )
   \       0x2C   0x6D68             LDR      R0,[R5, #+84]
   \       0x2E   0x2800             CMP      R0,#+0
   \       0x30   0xD101             BNE.N    ??mbedtls_ecdsa_verify_0
    219                  return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   \       0x32   0x....             LDR.N    R0,??DataTable4  ;; 0xffffb080
   \       0x34   0xE086             B.N      ??mbedtls_ecdsa_verify_1
   \                     ??mbedtls_ecdsa_verify_0: (+1)
   \       0x36   0xF8DD 0x9080      LDR      R9,[SP, #+128]
    220          
    221              /*
    222               * Step 1: make sure r and s are in range 1..n-1
    223               */
    224              if( mbedtls_mpi_cmp_int( r, 1 ) < 0 || mbedtls_mpi_cmp_mpi( r, &grp->N ) >= 0 ||
    225                  mbedtls_mpi_cmp_int( s, 1 ) < 0 || mbedtls_mpi_cmp_mpi( s, &grp->N ) >= 0 )
   \       0x3A   0x2101             MOVS     R1,#+1
   \       0x3C   0x4648             MOV      R0,R9
   \       0x3E   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x42   0x2800             CMP      R0,#+0
   \       0x44   0xD415             BMI.N    ??mbedtls_ecdsa_verify_2
   \       0x46   0xF105 0x014C      ADD      R1,R5,#+76
   \       0x4A   0x4648             MOV      R0,R9
   \       0x4C   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \       0x50   0x2800             CMP      R0,#+0
   \       0x52   0xD50E             BPL.N    ??mbedtls_ecdsa_verify_2
   \       0x54   0xF8DD 0xA084      LDR      R10,[SP, #+132]
   \       0x58   0x2101             MOVS     R1,#+1
   \       0x5A   0x4650             MOV      R0,R10
   \       0x5C   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x60   0x2800             CMP      R0,#+0
   \       0x62   0xD406             BMI.N    ??mbedtls_ecdsa_verify_2
   \       0x64   0xF105 0x014C      ADD      R1,R5,#+76
   \       0x68   0x4650             MOV      R0,R10
   \       0x6A   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \       0x6E   0x2800             CMP      R0,#+0
   \       0x70   0xD401             BMI.N    ??mbedtls_ecdsa_verify_3
    226              {
    227                  ret = MBEDTLS_ERR_ECP_VERIFY_FAILED;
   \                     ??mbedtls_ecdsa_verify_2: (+1)
   \       0x72   0x....             LDR.N    R4,??DataTable4_4  ;; 0xffffb200
    228                  goto cleanup;
   \       0x74   0xE056             B.N      ??mbedtls_ecdsa_verify_4
    229              }
    230          
    231              /*
    232               * Additional precaution: make sure Q is valid
    233               */
    234              MBEDTLS_MPI_CHK( mbedtls_ecp_check_pubkey( grp, Q ) );
   \                     ??mbedtls_ecdsa_verify_3: (+1)
   \       0x76   0x4641             MOV      R1,R8
   \       0x78   0x4628             MOV      R0,R5
   \       0x7A   0x....'....        BL       mbedtls_ecp_check_pubkey
   \       0x7E   0x0004             MOVS     R4,R0
   \       0x80   0xD150             BNE.N    ??mbedtls_ecdsa_verify_4
    235          
    236              /*
    237               * Step 3: derive MPI from hashed message
    238               */
    239              MBEDTLS_MPI_CHK( derive_mpi( grp, &e, buf, blen ) );
   \       0x82   0x463B             MOV      R3,R7
   \       0x84   0x4632             MOV      R2,R6
   \       0x86   0xA90B             ADD      R1,SP,#+44
   \       0x88   0x4628             MOV      R0,R5
   \       0x8A   0x....'....        BL       derive_mpi
   \       0x8E   0x0004             MOVS     R4,R0
   \       0x90   0xD148             BNE.N    ??mbedtls_ecdsa_verify_4
    240          
    241              /*
    242               * Step 4: u1 = e / s mod n, u2 = r / s mod n
    243               */
    244              MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &s_inv, s, &grp->N ) );
   \       0x92   0xF105 0x024C      ADD      R2,R5,#+76
   \       0x96   0x4651             MOV      R1,R10
   \       0x98   0xA808             ADD      R0,SP,#+32
   \       0x9A   0x....'....        BL       mbedtls_mpi_inv_mod
   \       0x9E   0x0004             MOVS     R4,R0
   \       0xA0   0xD140             BNE.N    ??mbedtls_ecdsa_verify_4
    245          
    246              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &u1, &e, &s_inv ) );
   \       0xA2   0xAA08             ADD      R2,SP,#+32
   \       0xA4   0xA90B             ADD      R1,SP,#+44
   \       0xA6   0xA805             ADD      R0,SP,#+20
   \       0xA8   0x....'....        BL       mbedtls_mpi_mul_mpi
   \       0xAC   0x0004             MOVS     R4,R0
   \       0xAE   0xD139             BNE.N    ??mbedtls_ecdsa_verify_4
    247              MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &u1, &u1, &grp->N ) );
   \       0xB0   0xF105 0x024C      ADD      R2,R5,#+76
   \       0xB4   0xA905             ADD      R1,SP,#+20
   \       0xB6   0xA805             ADD      R0,SP,#+20
   \       0xB8   0x....'....        BL       mbedtls_mpi_mod_mpi
   \       0xBC   0x0004             MOVS     R4,R0
   \       0xBE   0xD131             BNE.N    ??mbedtls_ecdsa_verify_4
    248          
    249              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &u2, r, &s_inv ) );
   \       0xC0   0xAA08             ADD      R2,SP,#+32
   \       0xC2   0x4649             MOV      R1,R9
   \       0xC4   0xA802             ADD      R0,SP,#+8
   \       0xC6   0x....'....        BL       mbedtls_mpi_mul_mpi
   \       0xCA   0x0004             MOVS     R4,R0
   \       0xCC   0xD12A             BNE.N    ??mbedtls_ecdsa_verify_4
    250              MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &u2, &u2, &grp->N ) );
   \       0xCE   0xF105 0x024C      ADD      R2,R5,#+76
   \       0xD2   0xA902             ADD      R1,SP,#+8
   \       0xD4   0xA802             ADD      R0,SP,#+8
   \       0xD6   0x....'....        BL       mbedtls_mpi_mod_mpi
   \       0xDA   0x0004             MOVS     R4,R0
   \       0xDC   0xD122             BNE.N    ??mbedtls_ecdsa_verify_4
    251          
    252              /*
    253               * Step 5: R = u1 G + u2 Q
    254               *
    255               * Since we're not using any secret data, no need to pass a RNG to
    256               * mbedtls_ecp_mul() for countermesures.
    257               */
    258              MBEDTLS_MPI_CHK( mbedtls_ecp_muladd( grp, &R, &u1, &grp->G, &u2, Q ) );
   \       0xDE   0xF8CD 0x8004      STR      R8,[SP, #+4]
   \       0xE2   0xA802             ADD      R0,SP,#+8
   \       0xE4   0x9000             STR      R0,[SP, #+0]
   \       0xE6   0xF105 0x0328      ADD      R3,R5,#+40
   \       0xEA   0xAA05             ADD      R2,SP,#+20
   \       0xEC   0xA90E             ADD      R1,SP,#+56
   \       0xEE   0x4628             MOV      R0,R5
   \       0xF0   0x....'....        BL       mbedtls_ecp_muladd
   \       0xF4   0x0004             MOVS     R4,R0
   \       0xF6   0xD115             BNE.N    ??mbedtls_ecdsa_verify_4
    259          
    260              if( mbedtls_ecp_is_zero( &R ) )
   \       0xF8   0xA80E             ADD      R0,SP,#+56
   \       0xFA   0x....'....        BL       mbedtls_ecp_is_zero
   \       0xFE   0x2800             CMP      R0,#+0
   \      0x100   0xD001             BEQ.N    ??mbedtls_ecdsa_verify_5
    261              {
    262                  ret = MBEDTLS_ERR_ECP_VERIFY_FAILED;
   \      0x102   0x....             LDR.N    R4,??DataTable4_4  ;; 0xffffb200
    263                  goto cleanup;
   \      0x104   0xE00E             B.N      ??mbedtls_ecdsa_verify_4
    264              }
    265          
    266              /*
    267               * Step 6: convert xR to an integer (no-op)
    268               * Step 7: reduce xR mod n (gives v)
    269               */
    270              MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &R.X, &R.X, &grp->N ) );
   \                     ??mbedtls_ecdsa_verify_5: (+1)
   \      0x106   0xF105 0x024C      ADD      R2,R5,#+76
   \      0x10A   0xA90E             ADD      R1,SP,#+56
   \      0x10C   0xA80E             ADD      R0,SP,#+56
   \      0x10E   0x....'....        BL       mbedtls_mpi_mod_mpi
   \      0x112   0x0004             MOVS     R4,R0
   \      0x114   0xD106             BNE.N    ??mbedtls_ecdsa_verify_4
    271          
    272              /*
    273               * Step 8: check if v (that is, R.X) is equal to r
    274               */
    275              if( mbedtls_mpi_cmp_mpi( &R.X, r ) != 0 )
   \      0x116   0x4649             MOV      R1,R9
   \      0x118   0xA80E             ADD      R0,SP,#+56
   \      0x11A   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \      0x11E   0x2800             CMP      R0,#+0
   \      0x120   0xD000             BEQ.N    ??mbedtls_ecdsa_verify_4
    276              {
    277                  ret = MBEDTLS_ERR_ECP_VERIFY_FAILED;
   \      0x122   0x....             LDR.N    R4,??DataTable4_4  ;; 0xffffb200
    278                  goto cleanup;
    279              }
    280          
    281          cleanup:
    282              mbedtls_ecp_point_free( &R );
   \                     ??mbedtls_ecdsa_verify_4: (+1)
   \      0x124   0xA80E             ADD      R0,SP,#+56
   \      0x126   0x....'....        BL       mbedtls_ecp_point_free
    283              mbedtls_mpi_free( &e ); mbedtls_mpi_free( &s_inv ); mbedtls_mpi_free( &u1 ); mbedtls_mpi_free( &u2 );
   \      0x12A   0xA80B             ADD      R0,SP,#+44
   \      0x12C   0x....'....        BL       mbedtls_mpi_free
   \      0x130   0xA808             ADD      R0,SP,#+32
   \      0x132   0x....'....        BL       mbedtls_mpi_free
   \      0x136   0xA805             ADD      R0,SP,#+20
   \      0x138   0x....'....        BL       mbedtls_mpi_free
   \      0x13C   0xA802             ADD      R0,SP,#+8
   \      0x13E   0x....'....        BL       mbedtls_mpi_free
    284          
    285              return( ret );
   \      0x142   0x4620             MOV      R0,R4
   \                     ??mbedtls_ecdsa_verify_1: (+1)
   \      0x144   0xB018             ADD      SP,SP,#+96
   \      0x146   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    286          }
    287          #endif /* MBEDTLS_ECDSA_VERIFY_ALT */
    288          
    289          /*
    290           * Convert a signature (given by context) to ASN.1
    291           */

   \                                 In section .text, align 2, keep-with-next
    292          static int ecdsa_signature_to_asn1( const mbedtls_mpi *r, const mbedtls_mpi *s,
    293                                              unsigned char *sig, size_t *slen )
    294          {
   \                     ecdsa_signature_to_asn1: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0xB09C             SUB      SP,SP,#+112
   \        0x4   0x4606             MOV      R6,R0
   \        0x6   0x4614             MOV      R4,R2
   \        0x8   0x461D             MOV      R5,R3
    295              int ret;
    296              unsigned char buf[MBEDTLS_ECDSA_MAX_LEN];
    297              unsigned char *p = buf + sizeof( buf );
   \        0xA   0xF10D 0x006D      ADD      R0,SP,#+109
   \        0xE   0x9000             STR      R0,[SP, #+0]
    298              size_t len = 0;
    299          
    300              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &p, buf, s ) );
   \       0x10   0x460A             MOV      R2,R1
   \       0x12   0xA901             ADD      R1,SP,#+4
   \       0x14   0x4668             MOV      R0,SP
   \       0x16   0x....'....        BL       mbedtls_asn1_write_mpi
   \       0x1A   0x0007             MOVS     R7,R0
   \       0x1C   0xD41E             BMI.N    ??ecdsa_signature_to_asn1_0
    301              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &p, buf, r ) );
   \       0x1E   0x4632             MOV      R2,R6
   \       0x20   0xA901             ADD      R1,SP,#+4
   \       0x22   0x4668             MOV      R0,SP
   \       0x24   0x....'....        BL       mbedtls_asn1_write_mpi
   \       0x28   0x2800             CMP      R0,#+0
   \       0x2A   0xD417             BMI.N    ??ecdsa_signature_to_asn1_0
   \       0x2C   0x19C7             ADDS     R7,R0,R7
    302          
    303              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &p, buf, len ) );
   \       0x2E   0x463A             MOV      R2,R7
   \       0x30   0xA901             ADD      R1,SP,#+4
   \       0x32   0x4668             MOV      R0,SP
   \       0x34   0x....'....        BL       mbedtls_asn1_write_len
   \       0x38   0x2800             CMP      R0,#+0
   \       0x3A   0xD40F             BMI.N    ??ecdsa_signature_to_asn1_0
   \       0x3C   0x19C7             ADDS     R7,R0,R7
    304              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &p, buf,
    305                                                 MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) );
   \       0x3E   0x2230             MOVS     R2,#+48
   \       0x40   0xA901             ADD      R1,SP,#+4
   \       0x42   0x4668             MOV      R0,SP
   \       0x44   0x....'....        BL       mbedtls_asn1_write_tag
   \       0x48   0x2800             CMP      R0,#+0
   \       0x4A   0xD407             BMI.N    ??ecdsa_signature_to_asn1_0
   \       0x4C   0x19C7             ADDS     R7,R0,R7
    306          
    307              memcpy( sig, p, len );
   \       0x4E   0x463A             MOV      R2,R7
   \       0x50   0x9900             LDR      R1,[SP, #+0]
   \       0x52   0x4620             MOV      R0,R4
   \       0x54   0x....'....        BL       __aeabi_memcpy
    308              *slen = len;
   \       0x58   0x602F             STR      R7,[R5, #+0]
    309          
    310              return( 0 );
   \       0x5A   0x2000             MOVS     R0,#+0
   \                     ??ecdsa_signature_to_asn1_0: (+1)
   \       0x5C   0xB01D             ADD      SP,SP,#+116
   \       0x5E   0xBDF0             POP      {R4-R7,PC}       ;; return
    311          }
    312          
    313          /*
    314           * Compute and write signature
    315           */

   \                                 In section .text, align 2, keep-with-next
    316          int mbedtls_ecdsa_write_signature( mbedtls_ecdsa_context *ctx, mbedtls_md_type_t md_alg,
    317                                     const unsigned char *hash, size_t hlen,
    318                                     unsigned char *sig, size_t *slen,
    319                                     int (*f_rng)(void *, unsigned char *, size_t),
    320                                     void *p_rng )
    321          {
   \                     mbedtls_ecdsa_write_signature: (+1)
   \        0x0   0xB5F0             PUSH     {R4-R7,LR}
   \        0x2   0xB089             SUB      SP,SP,#+36
   \        0x4   0x4604             MOV      R4,R0
   \        0x6   0x460D             MOV      R5,R1
   \        0x8   0x4616             MOV      R6,R2
   \        0xA   0x461F             MOV      R7,R3
    322              int ret;
    323              mbedtls_mpi r, s;
    324          
    325              mbedtls_mpi_init( &r );
   \        0xC   0xA806             ADD      R0,SP,#+24
   \        0xE   0x....'....        BL       mbedtls_mpi_init
    326              mbedtls_mpi_init( &s );
   \       0x12   0xA803             ADD      R0,SP,#+12
   \       0x14   0x....'....        BL       mbedtls_mpi_init
    327          
    328          #if defined(MBEDTLS_ECDSA_DETERMINISTIC)
    329              (void) f_rng;
    330              (void) p_rng;
    331          
    332              MBEDTLS_MPI_CHK( mbedtls_ecdsa_sign_det( &ctx->grp, &r, &s, &ctx->d,
    333                                       hash, hlen, md_alg ) );
   \       0x18   0x9502             STR      R5,[SP, #+8]
   \       0x1A   0x9701             STR      R7,[SP, #+4]
   \       0x1C   0x9600             STR      R6,[SP, #+0]
   \       0x1E   0xF104 0x037C      ADD      R3,R4,#+124
   \       0x22   0xAA03             ADD      R2,SP,#+12
   \       0x24   0xA906             ADD      R1,SP,#+24
   \       0x26   0x4620             MOV      R0,R4
   \       0x28   0x....'....        BL       mbedtls_ecdsa_sign_det
   \       0x2C   0x0004             MOVS     R4,R0
   \       0x2E   0xD106             BNE.N    ??mbedtls_ecdsa_write_signature_0
   \       0x30   0x9B0F             LDR      R3,[SP, #+60]
   \       0x32   0x9A0E             LDR      R2,[SP, #+56]
    334          #else
    335              (void) md_alg;
    336          
    337              MBEDTLS_MPI_CHK( mbedtls_ecdsa_sign( &ctx->grp, &r, &s, &ctx->d,
    338                                   hash, hlen, f_rng, p_rng ) );
    339          #endif
    340          
    341              MBEDTLS_MPI_CHK( ecdsa_signature_to_asn1( &r, &s, sig, slen ) );
   \       0x34   0xA903             ADD      R1,SP,#+12
   \       0x36   0xA806             ADD      R0,SP,#+24
   \       0x38   0x....'....        BL       ecdsa_signature_to_asn1
   \       0x3C   0x4604             MOV      R4,R0
    342          
    343          cleanup:
    344              mbedtls_mpi_free( &r );
   \                     ??mbedtls_ecdsa_write_signature_0: (+1)
   \       0x3E   0xA806             ADD      R0,SP,#+24
   \       0x40   0x....'....        BL       mbedtls_mpi_free
    345              mbedtls_mpi_free( &s );
   \       0x44   0xA803             ADD      R0,SP,#+12
   \       0x46   0x....'....        BL       mbedtls_mpi_free
    346          
    347              return( ret );
   \       0x4A   0x4620             MOV      R0,R4
   \       0x4C   0xB009             ADD      SP,SP,#+36
   \       0x4E   0xBDF0             POP      {R4-R7,PC}       ;; return
    348          }
    349          
    350          #if ! defined(MBEDTLS_DEPRECATED_REMOVED) && \
    351              defined(MBEDTLS_ECDSA_DETERMINISTIC)

   \                                 In section .text, align 2, keep-with-next
    352          int mbedtls_ecdsa_write_signature_det( mbedtls_ecdsa_context *ctx,
    353                                         const unsigned char *hash, size_t hlen,
    354                                         unsigned char *sig, size_t *slen,
    355                                         mbedtls_md_type_t md_alg )
    356          {
   \                     mbedtls_ecdsa_write_signature_det: (+1)
   \        0x0   0xB57F             PUSH     {R0-R6,LR}
   \        0x2   0x9D08             LDR      R5,[SP, #+32]
   \        0x4   0x9C09             LDR      R4,[SP, #+36]
    357              return( mbedtls_ecdsa_write_signature( ctx, md_alg, hash, hlen, sig, slen,
    358                                             NULL, NULL ) );
   \        0x6   0x2600             MOVS     R6,#+0
   \        0x8   0x9603             STR      R6,[SP, #+12]
   \        0xA   0x9602             STR      R6,[SP, #+8]
   \        0xC   0x9501             STR      R5,[SP, #+4]
   \        0xE   0x9300             STR      R3,[SP, #+0]
   \       0x10   0x4613             MOV      R3,R2
   \       0x12   0x460A             MOV      R2,R1
   \       0x14   0x4621             MOV      R1,R4
   \       0x16   0x....'....        BL       mbedtls_ecdsa_write_signature
   \       0x1A   0xB004             ADD      SP,SP,#+16
   \       0x1C   0xBD70             POP      {R4-R6,PC}       ;; return
    359          }
    360          #endif
    361          
    362          /*
    363           * Read and check signature
    364           */

   \                                 In section .text, align 2, keep-with-next
    365          int mbedtls_ecdsa_read_signature( mbedtls_ecdsa_context *ctx,
    366                                    const unsigned char *hash, size_t hlen,
    367                                    const unsigned char *sig, size_t slen )
    368          {
   \                     mbedtls_ecdsa_read_signature: (+1)
   \        0x0   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \        0x4   0xB08A             SUB      SP,SP,#+40
   \        0x6   0x4605             MOV      R5,R0
   \        0x8   0x460E             MOV      R6,R1
   \        0xA   0x4617             MOV      R7,R2
   \        0xC   0x9810             LDR      R0,[SP, #+64]
    369              int ret;
    370              unsigned char *p = (unsigned char *) sig;
   \        0xE   0x9302             STR      R3,[SP, #+8]
    371              const unsigned char *end = sig + slen;
   \       0x10   0xEB03 0x0800      ADD      R8,R3,R0
    372              size_t len;
    373              mbedtls_mpi r, s;
    374          
    375              mbedtls_mpi_init( &r );
   \       0x14   0xA807             ADD      R0,SP,#+28
   \       0x16   0x....'....        BL       mbedtls_mpi_init
    376              mbedtls_mpi_init( &s );
   \       0x1A   0xA804             ADD      R0,SP,#+16
   \       0x1C   0x....'....        BL       mbedtls_mpi_init
    377          
    378              if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
    379                              MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
   \       0x20   0x2330             MOVS     R3,#+48
   \       0x22   0xAA03             ADD      R2,SP,#+12
   \       0x24   0x4641             MOV      R1,R8
   \       0x26   0xA802             ADD      R0,SP,#+8
   \       0x28   0x....'....        BL       mbedtls_asn1_get_tag
   \       0x2C   0x0004             MOVS     R4,R0
   \       0x2E   0xD114             BNE.N    ??mbedtls_ecdsa_read_signature_0
    380              {
    381                  ret += MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
    382                  goto cleanup;
    383              }
    384          
    385              if( p + len != end )
   \       0x30   0x9802             LDR      R0,[SP, #+8]
   \       0x32   0x9903             LDR      R1,[SP, #+12]
   \       0x34   0x4408             ADD      R0,R0,R1
   \       0x36   0x4540             CMP      R0,R8
   \       0x38   0xD001             BEQ.N    ??mbedtls_ecdsa_read_signature_1
    386              {
    387                  ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA +
    388                        MBEDTLS_ERR_ASN1_LENGTH_MISMATCH;
   \       0x3A   0x....             LDR.N    R4,??DataTable4_5  ;; 0xffffb01a
    389                  goto cleanup;
   \       0x3C   0xE021             B.N      ??mbedtls_ecdsa_read_signature_2
    390              }
    391          
    392              if( ( ret = mbedtls_asn1_get_mpi( &p, end, &r ) ) != 0 ||
    393                  ( ret = mbedtls_asn1_get_mpi( &p, end, &s ) ) != 0 )
   \                     ??mbedtls_ecdsa_read_signature_1: (+1)
   \       0x3E   0xAA07             ADD      R2,SP,#+28
   \       0x40   0x4641             MOV      R1,R8
   \       0x42   0xA802             ADD      R0,SP,#+8
   \       0x44   0x....'....        BL       mbedtls_asn1_get_mpi
   \       0x48   0x0004             MOVS     R4,R0
   \       0x4A   0xD106             BNE.N    ??mbedtls_ecdsa_read_signature_0
   \       0x4C   0xAA04             ADD      R2,SP,#+16
   \       0x4E   0x4641             MOV      R1,R8
   \       0x50   0xA802             ADD      R0,SP,#+8
   \       0x52   0x....'....        BL       mbedtls_asn1_get_mpi
   \       0x56   0x0004             MOVS     R4,R0
   \       0x58   0xD002             BEQ.N    ??mbedtls_ecdsa_read_signature_3
    394              {
    395                  ret += MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
   \                     ??mbedtls_ecdsa_read_signature_0: (+1)
   \       0x5A   0xF5A4 0x449F      SUB      R4,R4,#+20352
    396                  goto cleanup;
   \       0x5E   0xE010             B.N      ??mbedtls_ecdsa_read_signature_2
    397              }
    398          
    399              if( ( ret = mbedtls_ecdsa_verify( &ctx->grp, hash, hlen,
    400                                        &ctx->Q, &r, &s ) ) != 0 )
   \                     ??mbedtls_ecdsa_read_signature_3: (+1)
   \       0x60   0xA804             ADD      R0,SP,#+16
   \       0x62   0x9001             STR      R0,[SP, #+4]
   \       0x64   0xA807             ADD      R0,SP,#+28
   \       0x66   0x9000             STR      R0,[SP, #+0]
   \       0x68   0xF105 0x0388      ADD      R3,R5,#+136
   \       0x6C   0x463A             MOV      R2,R7
   \       0x6E   0x4631             MOV      R1,R6
   \       0x70   0x4628             MOV      R0,R5
   \       0x72   0x....'....        BL       mbedtls_ecdsa_verify
   \       0x76   0x0004             MOVS     R4,R0
   \       0x78   0xD103             BNE.N    ??mbedtls_ecdsa_read_signature_2
    401                  goto cleanup;
    402          
    403              /* At this point we know that the buffer starts with a valid signature.
    404               * Return 0 if the buffer just contains the signature, and a specific
    405               * error code if the valid signature is followed by more data. */
    406              if( p != end )
   \       0x7A   0x9802             LDR      R0,[SP, #+8]
   \       0x7C   0x4540             CMP      R0,R8
   \       0x7E   0xD000             BEQ.N    ??mbedtls_ecdsa_read_signature_2
    407                  ret = MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH;
   \       0x80   0x....             LDR.N    R4,??DataTable4_6  ;; 0xffffb400
    408          
    409          cleanup:
    410              mbedtls_mpi_free( &r );
   \                     ??mbedtls_ecdsa_read_signature_2: (+1)
   \       0x82   0xA807             ADD      R0,SP,#+28
   \       0x84   0x....'....        BL       mbedtls_mpi_free
    411              mbedtls_mpi_free( &s );
   \       0x88   0xA804             ADD      R0,SP,#+16
   \       0x8A   0x....'....        BL       mbedtls_mpi_free
    412          
    413              return( ret );
   \       0x8E   0x4620             MOV      R0,R4
   \       0x90   0xB00A             ADD      SP,SP,#+40
   \       0x92   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    414          }
    415          
    416          #if !defined(MBEDTLS_ECDSA_GENKEY_ALT)
    417          /*
    418           * Generate key pair
    419           */

   \                                 In section .text, align 2, keep-with-next
    420          int mbedtls_ecdsa_genkey( mbedtls_ecdsa_context *ctx, mbedtls_ecp_group_id gid,
    421                            int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
    422          {
   \                     mbedtls_ecdsa_genkey: (+1)
   \        0x0   0xB57C             PUSH     {R2-R6,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x4615             MOV      R5,R2
   \        0x6   0x461E             MOV      R6,R3
    423              return( mbedtls_ecp_group_load( &ctx->grp, gid ) ||
    424                      mbedtls_ecp_gen_keypair( &ctx->grp, &ctx->d, &ctx->Q, f_rng, p_rng ) );
   \        0x8   0x....'....        BL       mbedtls_ecp_group_load
   \        0xC   0x2800             CMP      R0,#+0
   \        0xE   0xD10D             BNE.N    ??mbedtls_ecdsa_genkey_0
   \       0x10   0x9600             STR      R6,[SP, #+0]
   \       0x12   0x462B             MOV      R3,R5
   \       0x14   0xF104 0x0288      ADD      R2,R4,#+136
   \       0x18   0xF104 0x017C      ADD      R1,R4,#+124
   \       0x1C   0x4620             MOV      R0,R4
   \       0x1E   0x....'....        BL       mbedtls_ecp_gen_keypair
   \       0x22   0x1E40             SUBS     R0,R0,#+1
   \       0x24   0x4180             SBCS     R0,R0,R0
   \       0x26   0x43C0             MVNS     R0,R0
   \       0x28   0x0FC0             LSRS     R0,R0,#+31
   \       0x2A   0xBD76             POP      {R1,R2,R4-R6,PC}
   \                     ??mbedtls_ecdsa_genkey_0: (+1)
   \       0x2C   0x2001             MOVS     R0,#+1
   \       0x2E   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
    425          }
    426          #endif /* MBEDTLS_ECDSA_GENKEY_ALT */
    427          
    428          /*
    429           * Set context from an mbedtls_ecp_keypair
    430           */

   \                                 In section .text, align 2, keep-with-next
    431          int mbedtls_ecdsa_from_keypair( mbedtls_ecdsa_context *ctx, const mbedtls_ecp_keypair *key )
    432          {
   \                     mbedtls_ecdsa_from_keypair: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4605             MOV      R5,R0
   \        0x4   0x460E             MOV      R6,R1
    433              int ret;
    434          
    435              if( ( ret = mbedtls_ecp_group_copy( &ctx->grp, &key->grp ) ) != 0 ||
    436                  ( ret = mbedtls_mpi_copy( &ctx->d, &key->d ) ) != 0 ||
    437                  ( ret = mbedtls_ecp_copy( &ctx->Q, &key->Q ) ) != 0 )
   \        0x6   0x....'....        BL       mbedtls_ecp_group_copy
   \        0xA   0x0004             MOVS     R4,R0
   \        0xC   0xD10F             BNE.N    ??mbedtls_ecdsa_from_keypair_0
   \        0xE   0xF106 0x017C      ADD      R1,R6,#+124
   \       0x12   0xF105 0x007C      ADD      R0,R5,#+124
   \       0x16   0x....'....        BL       mbedtls_mpi_copy
   \       0x1A   0x0004             MOVS     R4,R0
   \       0x1C   0xD107             BNE.N    ??mbedtls_ecdsa_from_keypair_0
   \       0x1E   0xF106 0x0188      ADD      R1,R6,#+136
   \       0x22   0xF105 0x0088      ADD      R0,R5,#+136
   \       0x26   0x....'....        BL       mbedtls_ecp_copy
   \       0x2A   0x0004             MOVS     R4,R0
   \       0x2C   0xD002             BEQ.N    ??mbedtls_ecdsa_from_keypair_1
    438              {
    439                  mbedtls_ecdsa_free( ctx );
   \                     ??mbedtls_ecdsa_from_keypair_0: (+1)
   \       0x2E   0x4628             MOV      R0,R5
   \       0x30   0x....'....        BL       mbedtls_ecdsa_free
    440              }
    441          
    442              return( ret );
   \                     ??mbedtls_ecdsa_from_keypair_1: (+1)
   \       0x34   0x4620             MOV      R0,R4
   \       0x36   0xBD70             POP      {R4-R6,PC}       ;; return
    443          }
    444          
    445          /*
    446           * Initialize context
    447           */

   \                                 In section .text, align 2, keep-with-next
    448          void mbedtls_ecdsa_init( mbedtls_ecdsa_context *ctx )
    449          {
    450              mbedtls_ecp_keypair_init( ctx );
   \                     mbedtls_ecdsa_init: (+1)
   \        0x0   0x....'....        B.W      mbedtls_ecp_keypair_init
    451          }
    452          
    453          /*
    454           * Free context
    455           */

   \                                 In section .text, align 2, keep-with-next
    456          void mbedtls_ecdsa_free( mbedtls_ecdsa_context *ctx )
    457          {
    458              mbedtls_ecp_keypair_free( ctx );
   \                     mbedtls_ecdsa_free: (+1)
   \        0x0   0x....'....        B.W      mbedtls_ecp_keypair_free
    459          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \        0x0   0xFFFF'B080        DC32     0xffffb080

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \        0x0   0xFFFF'B380        DC32     0xffffb380

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \        0x0   0xFFFF'B300        DC32     0xffffb300

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \        0x0   0x....'....        DC32     mbedtls_hmac_drbg_random

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \        0x0   0xFFFF'B200        DC32     0xffffb200

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \        0x0   0xFFFF'B01A        DC32     0xffffb01a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \        0x0   0xFFFF'B400        DC32     0xffffb400
    460          
    461          #endif /* MBEDTLS_ECDSA_C */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   derive_mpi
        24   -> mbedtls_mpi_cmp_mpi
        24   -> mbedtls_mpi_read_binary
        24   -> mbedtls_mpi_shift_r
        24   -> mbedtls_mpi_sub_mpi
     136   ecdsa_signature_to_asn1
       136   -> __aeabi_memcpy
       136   -> mbedtls_asn1_write_len
       136   -> mbedtls_asn1_write_mpi
       136   -> mbedtls_asn1_write_tag
       0   mbedtls_ecdsa_free
         0   -> mbedtls_ecp_keypair_free
      16   mbedtls_ecdsa_from_keypair
        16   -> mbedtls_ecdsa_free
        16   -> mbedtls_ecp_copy
        16   -> mbedtls_ecp_group_copy
        16   -> mbedtls_mpi_copy
      24   mbedtls_ecdsa_genkey
        24   -> mbedtls_ecp_gen_keypair
        24   -> mbedtls_ecp_group_load
       0   mbedtls_ecdsa_init
         0   -> mbedtls_ecp_keypair_init
      64   mbedtls_ecdsa_read_signature
        64   -> mbedtls_asn1_get_mpi
        64   -> mbedtls_asn1_get_tag
        64   -> mbedtls_ecdsa_verify
        64   -> mbedtls_mpi_free
        64   -> mbedtls_mpi_init
     120   mbedtls_ecdsa_sign
       120   -> derive_mpi
       120   -> mbedtls_ecp_gen_keypair
       120   -> mbedtls_ecp_point_free
       120   -> mbedtls_ecp_point_init
       120   -> mbedtls_mpi_add_mpi
       120   -> mbedtls_mpi_cmp_int
       120   -> mbedtls_mpi_cmp_mpi
       120   -> mbedtls_mpi_fill_random
       120   -> mbedtls_mpi_free
       120   -> mbedtls_mpi_init
       120   -> mbedtls_mpi_inv_mod
       120   -> mbedtls_mpi_mod_mpi
       120   -> mbedtls_mpi_mul_mpi
       120   -> mbedtls_mpi_shift_r
     264   mbedtls_ecdsa_sign_det
       264   -> derive_mpi
       264   -> mbedtls_ecdsa_sign
       264   -> mbedtls_hmac_drbg_free
       264   -> mbedtls_hmac_drbg_init
       264   -> mbedtls_hmac_drbg_seed_buf
       264   -> mbedtls_md_info_from_type
       264   -> mbedtls_mpi_free
       264   -> mbedtls_mpi_init
       264   -> mbedtls_mpi_write_binary
     128   mbedtls_ecdsa_verify
       128   -> derive_mpi
       128   -> mbedtls_ecp_check_pubkey
       128   -> mbedtls_ecp_is_zero
       128   -> mbedtls_ecp_muladd
       128   -> mbedtls_ecp_point_free
       128   -> mbedtls_ecp_point_init
       128   -> mbedtls_mpi_cmp_int
       128   -> mbedtls_mpi_cmp_mpi
       128   -> mbedtls_mpi_free
       128   -> mbedtls_mpi_init
       128   -> mbedtls_mpi_inv_mod
       128   -> mbedtls_mpi_mod_mpi
       128   -> mbedtls_mpi_mul_mpi
      56   mbedtls_ecdsa_write_signature
        56   -> ecdsa_signature_to_asn1
        56   -> mbedtls_ecdsa_sign_det
        56   -> mbedtls_mpi_free
        56   -> mbedtls_mpi_init
      32   mbedtls_ecdsa_write_signature_det
        32   -> mbedtls_ecdsa_write_signature


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
      88  derive_mpi
      96  ecdsa_signature_to_asn1
       4  mbedtls_ecdsa_free
      56  mbedtls_ecdsa_from_keypair
      48  mbedtls_ecdsa_genkey
       4  mbedtls_ecdsa_init
     150  mbedtls_ecdsa_read_signature
     460  mbedtls_ecdsa_sign
     176  mbedtls_ecdsa_sign_det
     330  mbedtls_ecdsa_verify
      80  mbedtls_ecdsa_write_signature
      30  mbedtls_ecdsa_write_signature_det

 
 1 550 bytes in section .text
 
 1 550 bytes of CODE memory

Errors: none
Warnings: none
