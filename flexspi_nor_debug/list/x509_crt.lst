###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.3.193/W32 for ARM         10/Jun/2019  13:48:59
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\Development\smart_washing_machine_3080\mbedtls\library\x509_crt.c
#    Command line =  
#        -f C:\Users\nxf42695\AppData\Local\Temp\1\EW7398.tmp
#        (C:\Development\smart_washing_machine_3080\mbedtls\library\x509_crt.c
#        -D DEBUG -D USE_RTOS -D XIP_EXTERNAL_FLASH=1 -D
#        XIP_BOOT_HEADER_ENABLE=1 -D CPU_MIMXRT1052DVL6B -D FSL_RTOS_FREE_RTOS
#        -D PRINTF_ADVANCED_ENABLE -D
#        "MBEDTLS_CONFIG_FILE=\"ksdk_mbedtls_config.h\"" -lC
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list -lA
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list
#        --diag_suppress Pa082,Pa050 -o
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_d16 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" --preinclude
#        C:\Development\smart_washing_machine_3080/source\app_preinclude.h -I
#        C:\Development\smart_washing_machine_3080/board\ -I
#        C:\Development\smart_washing_machine_3080/source\ -I
#        C:\Development\smart_washing_machine_3080/CMSIS\ -I
#        C:\Development\smart_washing_machine_3080/amazon-freertos/freertos/portable\
#        -I C:\Development\smart_washing_machine_3080/amazon-freertos/include\
#        -I C:\Development\smart_washing_machine_3080/component/lists\ -I
#        C:\Development\smart_washing_machine_3080/component/serial_manager\ -I
#        C:\Development\smart_washing_machine_3080/component/uart\ -I
#        C:\Development\smart_washing_machine_3080/component/kv\ -I
#        C:\Development\smart_washing_machine_3080/component/kv/include\ -I
#        C:\Development\smart_washing_machine_3080/device\ -I
#        C:\Development\smart_washing_machine_3080/doc\ -I
#        C:\Development\smart_washing_machine_3080/drivers\ -I
#        C:\Development\smart_washing_machine_3080/src\ -I
#        C:\Development\smart_washing_machine_3080/startup\ -I
#        C:\Development\smart_washing_machine_3080/utilities\ -I
#        C:\Development\smart_washing_machine_3080/xip\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\atm\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_model\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_sign\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\infra\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\mqtt\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\external_libs\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\coap_cloud\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\CoAPPacket\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\server\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\os\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\awss_reset\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\mbedtls\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\ -I
#        C:\Development\smart_washing_machine_3080\mbedtls\port\ksdk\ -Om)
#    Locale       =  C
#    List file    =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list\x509_crt.lst
#    Object file  =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj\x509_crt.o
#
###############################################################################

C:\Development\smart_washing_machine_3080\mbedtls\library\x509_crt.c
      1          /*
      2           *  X.509 certificate parsing and verification
      3           *
      4           *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
      5           *  SPDX-License-Identifier: Apache-2.0
      6           *
      7           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
      8           *  not use this file except in compliance with the License.
      9           *  You may obtain a copy of the License at
     10           *
     11           *  http://www.apache.org/licenses/LICENSE-2.0
     12           *
     13           *  Unless required by applicable law or agreed to in writing, software
     14           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     15           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     16           *  See the License for the specific language governing permissions and
     17           *  limitations under the License.
     18           *
     19           *  This file is part of mbed TLS (https://tls.mbed.org)
     20           */
     21          /*
     22           *  The ITU-T X.509 standard defines a certificate format for PKI.
     23           *
     24           *  http://www.ietf.org/rfc/rfc5280.txt (Certificates and CRLs)
     25           *  http://www.ietf.org/rfc/rfc3279.txt (Alg IDs for CRLs)
     26           *  http://www.ietf.org/rfc/rfc2986.txt (CSRs, aka PKCS#10)
     27           *
     28           *  http://www.itu.int/ITU-T/studygroups/com17/languages/X.680-0207.pdf
     29           *  http://www.itu.int/ITU-T/studygroups/com17/languages/X.690-0207.pdf
     30           *
     31           *  [SIRO] https://cabforum.org/wp-content/uploads/Chunghwatelecom201503cabforumV4.pdf
     32           */
     33          
     34          #if !defined(MBEDTLS_CONFIG_FILE)
     35          #include "mbedtls/config.h"
     36          #else
     37          #include MBEDTLS_CONFIG_FILE
     38          #endif
     39          
     40          #if defined(MBEDTLS_X509_CRT_PARSE_C)
     41          
     42          #include "mbedtls/x509_crt.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp mbedtls_ecp_keypair *mbedtls_pk_ec(mbedtls_pk_context const)
   \                     mbedtls_pk_ec: (+1)
   \        0x0   0x4608             MOV      R0,R1
   \        0x2   0x4770             BX       LR               ;; return
     43          #include "mbedtls/oid.h"
     44          #include "mbedtls/platform_util.h"
     45          
     46          #include <stdio.h>
     47          #include <string.h>
     48          
     49          #if defined(MBEDTLS_PEM_PARSE_C)
     50          #include "mbedtls/pem.h"
     51          #endif
     52          
     53          #if defined(MBEDTLS_PLATFORM_C)
     54          #include "mbedtls/platform.h"
     55          #else
     56          #include <stdlib.h>
     57          #define mbedtls_free       free
     58          #define mbedtls_calloc    calloc
     59          #define mbedtls_snprintf   snprintf
     60          #endif
     61          
     62          #if defined(MBEDTLS_THREADING_C)
     63          #include "mbedtls/threading.h"
     64          #endif
     65          
     66          #if defined(_WIN32) && !defined(EFIX64) && !defined(EFI32)
     67          #include <windows.h>
     68          #else
     69          #include <time.h>
     70          #endif
     71          
     72          #if defined(MBEDTLS_FS_IO)
     73          #include <stdio.h>
     74          #if !defined(_WIN32) || defined(EFIX64) || defined(EFI32)
     75          #include <sys/types.h>
     76          #include <sys/stat.h>
     77          #include <dirent.h>
     78          #endif /* !_WIN32 || EFIX64 || EFI32 */
     79          #endif
     80          
     81          /*
     82           * Item in a verification chain: cert and flags for it
     83           */
     84          typedef struct {
     85              mbedtls_x509_crt *crt;
     86              uint32_t flags;
     87          } x509_crt_verify_chain_item;
     88          
     89          /*
     90           * Max size of verification chain: end-entity + intermediates + trusted root
     91           */
     92          #define X509_MAX_VERIFY_CHAIN_SIZE    ( MBEDTLS_X509_MAX_INTERMEDIATE_CA + 2 )
     93          
     94          /*
     95           * Default profile
     96           */

   \                                 In section .rodata, align 4
     97          const mbedtls_x509_crt_profile mbedtls_x509_crt_profile_default =
   \                     mbedtls_x509_crt_profile_default:
   \        0x0   0x0000'00F0        DC32 240, 268435455, 268435455, 2048
   \              0x0FFF'FFFF  
   \              0x0FFF'FFFF  
   \              0x0000'0800  
     98          {
     99          #if defined(MBEDTLS_TLS_DEFAULT_ALLOW_SHA1_IN_CERTIFICATES)
    100              /* Allow SHA-1 (weak, but still safe in controlled environments) */
    101              MBEDTLS_X509_ID_FLAG( MBEDTLS_MD_SHA1 ) |
    102          #endif
    103              /* Only SHA-2 hashes */
    104              MBEDTLS_X509_ID_FLAG( MBEDTLS_MD_SHA224 ) |
    105              MBEDTLS_X509_ID_FLAG( MBEDTLS_MD_SHA256 ) |
    106              MBEDTLS_X509_ID_FLAG( MBEDTLS_MD_SHA384 ) |
    107              MBEDTLS_X509_ID_FLAG( MBEDTLS_MD_SHA512 ),
    108              0xFFFFFFF, /* Any PK alg    */
    109              0xFFFFFFF, /* Any curve     */
    110              2048,
    111          };
    112          
    113          /*
    114           * Next-default profile
    115           */

   \                                 In section .rodata, align 4
    116          const mbedtls_x509_crt_profile mbedtls_x509_crt_profile_next =
   \                     mbedtls_x509_crt_profile_next:
   \        0x0   0x0000'00E0        DC32 224, 268435455, 2300, 2048
   \              0x0FFF'FFFF  
   \              0x0000'08FC  
   \              0x0000'0800  
    117          {
    118              /* Hashes from SHA-256 and above */
    119              MBEDTLS_X509_ID_FLAG( MBEDTLS_MD_SHA256 ) |
    120              MBEDTLS_X509_ID_FLAG( MBEDTLS_MD_SHA384 ) |
    121              MBEDTLS_X509_ID_FLAG( MBEDTLS_MD_SHA512 ),
    122              0xFFFFFFF, /* Any PK alg    */
    123          #if defined(MBEDTLS_ECP_C)
    124              /* Curves at or above 128-bit security level */
    125              MBEDTLS_X509_ID_FLAG( MBEDTLS_ECP_DP_SECP256R1 ) |
    126              MBEDTLS_X509_ID_FLAG( MBEDTLS_ECP_DP_SECP384R1 ) |
    127              MBEDTLS_X509_ID_FLAG( MBEDTLS_ECP_DP_SECP521R1 ) |
    128              MBEDTLS_X509_ID_FLAG( MBEDTLS_ECP_DP_BP256R1 ) |
    129              MBEDTLS_X509_ID_FLAG( MBEDTLS_ECP_DP_BP384R1 ) |
    130              MBEDTLS_X509_ID_FLAG( MBEDTLS_ECP_DP_BP512R1 ) |
    131              MBEDTLS_X509_ID_FLAG( MBEDTLS_ECP_DP_SECP256K1 ),
    132          #else
    133              0,
    134          #endif
    135              2048,
    136          };
    137          
    138          /*
    139           * NSA Suite B Profile
    140           */

   \                                 In section .rodata, align 4
    141          const mbedtls_x509_crt_profile mbedtls_x509_crt_profile_suiteb =
   \                     mbedtls_x509_crt_profile_suiteb:
   \        0x0   0x0000'0060        DC32 96, 10, 12, 0
   \              0x0000'000A  
   \              0x0000'000C  
   \              0x0000'0000  
    142          {
    143              /* Only SHA-256 and 384 */
    144              MBEDTLS_X509_ID_FLAG( MBEDTLS_MD_SHA256 ) |
    145              MBEDTLS_X509_ID_FLAG( MBEDTLS_MD_SHA384 ),
    146              /* Only ECDSA */
    147              MBEDTLS_X509_ID_FLAG( MBEDTLS_PK_ECDSA ) |
    148              MBEDTLS_X509_ID_FLAG( MBEDTLS_PK_ECKEY ),
    149          #if defined(MBEDTLS_ECP_C)
    150              /* Only NIST P-256 and P-384 */
    151              MBEDTLS_X509_ID_FLAG( MBEDTLS_ECP_DP_SECP256R1 ) |
    152              MBEDTLS_X509_ID_FLAG( MBEDTLS_ECP_DP_SECP384R1 ),
    153          #else
    154              0,
    155          #endif
    156              0,
    157          };
    158          
    159          /*
    160           * Check md_alg against profile
    161           * Return 0 if md_alg is acceptable for this profile, -1 otherwise
    162           */

   \                                 In section .text, align 2, keep-with-next
    163          static int x509_profile_check_md_alg( const mbedtls_x509_crt_profile *profile,
    164                                                mbedtls_md_type_t md_alg )
    165          {
    166              if( md_alg == MBEDTLS_MD_NONE )
   \                     x509_profile_check_md_alg: (+1)
   \        0x0   0x000A             MOVS     R2,R1
   \        0x2   0xD102             BNE.N    ??x509_profile_check_md_alg_0
    167                  return( -1 );
   \        0x4   0xF04F 0x30FF      MOV      R0,#-1
   \        0x8   0x4770             BX       LR
    168          
    169              if( ( profile->allowed_mds & MBEDTLS_X509_ID_FLAG( md_alg ) ) != 0 )
   \                     ??x509_profile_check_md_alg_0: (+1)
   \        0xA   0x6800             LDR      R0,[R0, #+0]
   \        0xC   0x1E49             SUBS     R1,R1,#+1
   \        0xE   0x40C8             LSRS     R0,R0,R1
   \       0x10   0x07C0             LSLS     R0,R0,#+31
   \       0x12   0xD501             BPL.N    ??x509_profile_check_md_alg_1
    170                  return( 0 );
   \       0x14   0x2000             MOVS     R0,#+0
   \       0x16   0x4770             BX       LR
    171          
    172              return( -1 );
   \                     ??x509_profile_check_md_alg_1: (+1)
   \       0x18   0xF04F 0x30FF      MOV      R0,#-1
   \       0x1C   0x4770             BX       LR               ;; return
    173          }
    174          
    175          /*
    176           * Check pk_alg against profile
    177           * Return 0 if pk_alg is acceptable for this profile, -1 otherwise
    178           */

   \                                 In section .text, align 2, keep-with-next
    179          static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
    180                                                mbedtls_pk_type_t pk_alg )
    181          {
    182              if( pk_alg == MBEDTLS_PK_NONE )
   \                     x509_profile_check_pk_alg: (+1)
   \        0x0   0x000A             MOVS     R2,R1
   \        0x2   0xD102             BNE.N    ??x509_profile_check_pk_alg_0
    183                  return( -1 );
   \        0x4   0xF04F 0x30FF      MOV      R0,#-1
   \        0x8   0x4770             BX       LR
    184          
    185              if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
   \                     ??x509_profile_check_pk_alg_0: (+1)
   \        0xA   0x6840             LDR      R0,[R0, #+4]
   \        0xC   0x1E49             SUBS     R1,R1,#+1
   \        0xE   0x40C8             LSRS     R0,R0,R1
   \       0x10   0x07C0             LSLS     R0,R0,#+31
   \       0x12   0xD501             BPL.N    ??x509_profile_check_pk_alg_1
    186                  return( 0 );
   \       0x14   0x2000             MOVS     R0,#+0
   \       0x16   0x4770             BX       LR
    187          
    188              return( -1 );
   \                     ??x509_profile_check_pk_alg_1: (+1)
   \       0x18   0xF04F 0x30FF      MOV      R0,#-1
   \       0x1C   0x4770             BX       LR               ;; return
    189          }
    190          
    191          /*
    192           * Check key against profile
    193           * Return 0 if pk is acceptable for this profile, -1 otherwise
    194           */

   \                                 In section .text, align 2, keep-with-next
    195          static int x509_profile_check_key( const mbedtls_x509_crt_profile *profile,
    196                                             const mbedtls_pk_context *pk )
    197          {
   \                     x509_profile_check_key: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
    198              const mbedtls_pk_type_t pk_alg = mbedtls_pk_get_type( pk );
   \        0x6   0x4628             MOV      R0,R5
   \        0x8   0x....'....        BL       mbedtls_pk_get_type
    199          
    200          #if defined(MBEDTLS_RSA_C)
    201              if( pk_alg == MBEDTLS_PK_RSA || pk_alg == MBEDTLS_PK_RSASSA_PSS )
   \        0xC   0x2801             CMP      R0,#+1
   \        0xE   0xD001             BEQ.N    ??x509_profile_check_key_0
   \       0x10   0x2806             CMP      R0,#+6
   \       0x12   0xD10A             BNE.N    ??x509_profile_check_key_1
    202              {
    203                  if( mbedtls_pk_get_bitlen( pk ) >= profile->rsa_min_bitlen )
   \                     ??x509_profile_check_key_0: (+1)
   \       0x14   0x4628             MOV      R0,R5
   \       0x16   0x....'....        BL       mbedtls_pk_get_bitlen
   \       0x1A   0x68E1             LDR      R1,[R4, #+12]
   \       0x1C   0x4288             CMP      R0,R1
   \       0x1E   0xD301             BCC.N    ??x509_profile_check_key_2
    204                      return( 0 );
   \       0x20   0x2000             MOVS     R0,#+0
   \       0x22   0xBD32             POP      {R1,R4,R5,PC}
    205          
    206                  return( -1 );
   \                     ??x509_profile_check_key_2: (+1)
   \       0x24   0xF04F 0x30FF      MOV      R0,#-1
   \       0x28   0xBD32             POP      {R1,R4,R5,PC}
    207              }
    208          #endif
    209          
    210          #if defined(MBEDTLS_ECP_C)
    211              if( pk_alg == MBEDTLS_PK_ECDSA ||
    212                  pk_alg == MBEDTLS_PK_ECKEY ||
    213                  pk_alg == MBEDTLS_PK_ECKEY_DH )
   \                     ??x509_profile_check_key_1: (+1)
   \       0x2A   0x2804             CMP      R0,#+4
   \       0x2C   0xD003             BEQ.N    ??x509_profile_check_key_3
   \       0x2E   0x2802             CMP      R0,#+2
   \       0x30   0xD001             BEQ.N    ??x509_profile_check_key_3
   \       0x32   0x2803             CMP      R0,#+3
   \       0x34   0xD113             BNE.N    ??x509_profile_check_key_4
    214              {
    215                  const mbedtls_ecp_group_id gid = mbedtls_pk_ec( *pk )->grp.id;
   \                     ??x509_profile_check_key_3: (+1)
   \       0x36   0xE9D5 0x0100      LDRD     R0,R1,[R5, #+0]
   \       0x3A   0x....'....        BL       mbedtls_pk_ec
   \       0x3E   0x7800             LDRB     R0,[R0, #+0]
    216          
    217                  if( gid == MBEDTLS_ECP_DP_NONE )
   \       0x40   0x2800             CMP      R0,#+0
   \       0x42   0xD102             BNE.N    ??x509_profile_check_key_5
    218                      return( -1 );
   \       0x44   0xF04F 0x30FF      MOV      R0,#-1
   \       0x48   0xBD32             POP      {R1,R4,R5,PC}
    219          
    220                  if( ( profile->allowed_curves & MBEDTLS_X509_ID_FLAG( gid ) ) != 0 )
   \                     ??x509_profile_check_key_5: (+1)
   \       0x4A   0x68A1             LDR      R1,[R4, #+8]
   \       0x4C   0x1E40             SUBS     R0,R0,#+1
   \       0x4E   0x40C1             LSRS     R1,R1,R0
   \       0x50   0x07C8             LSLS     R0,R1,#+31
   \       0x52   0xD501             BPL.N    ??x509_profile_check_key_6
    221                      return( 0 );
   \       0x54   0x2000             MOVS     R0,#+0
   \       0x56   0xBD32             POP      {R1,R4,R5,PC}
    222          
    223                  return( -1 );
   \                     ??x509_profile_check_key_6: (+1)
   \       0x58   0xF04F 0x30FF      MOV      R0,#-1
   \       0x5C   0xBD32             POP      {R1,R4,R5,PC}
    224              }
    225          #endif
    226          
    227              return( -1 );
   \                     ??x509_profile_check_key_4: (+1)
   \       0x5E   0xF04F 0x30FF      MOV      R0,#-1
   \       0x62   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    228          }
    229          
    230          /*
    231           *  Version  ::=  INTEGER  {  v1(0), v2(1), v3(2)  }
    232           */

   \                                 In section .text, align 2, keep-with-next
    233          static int x509_get_version( unsigned char **p,
    234                                       const unsigned char *end,
    235                                       int *ver )
    236          {
   \                     x509_get_version: (+1)
   \        0x0   0xB57C             PUSH     {R2-R6,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x4616             MOV      R6,R2
    237              int ret;
    238              size_t len;
    239          
    240              if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
    241                      MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 0 ) ) != 0 )
   \        0x6   0x23A0             MOVS     R3,#+160
   \        0x8   0x466A             MOV      R2,SP
   \        0xA   0x....'....        BL       mbedtls_asn1_get_tag
   \        0xE   0x2800             CMP      R0,#+0
   \       0x10   0xD005             BEQ.N    ??x509_get_version_0
    242              {
    243                  if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   \       0x12   0xF110 0x0F62      CMN      R0,#+98
   \       0x16   0xD116             BNE.N    ??x509_get_version_1
    244                  {
    245                      *ver = 0;
   \       0x18   0x2000             MOVS     R0,#+0
   \       0x1A   0x6030             STR      R0,[R6, #+0]
    246                      return( 0 );
   \       0x1C   0xBD76             POP      {R1,R2,R4-R6,PC}
    247                  }
    248          
    249                  return( ret );
    250              }
    251          
    252              end = *p + len;
   \                     ??x509_get_version_0: (+1)
   \       0x1E   0x6820             LDR      R0,[R4, #+0]
   \       0x20   0x9900             LDR      R1,[SP, #+0]
   \       0x22   0x1845             ADDS     R5,R0,R1
    253          
    254              if( ( ret = mbedtls_asn1_get_int( p, end, ver ) ) != 0 )
   \       0x24   0x4632             MOV      R2,R6
   \       0x26   0x4629             MOV      R1,R5
   \       0x28   0x4620             MOV      R0,R4
   \       0x2A   0x....'....        BL       mbedtls_asn1_get_int
   \       0x2E   0x2800             CMP      R0,#+0
   \       0x30   0xD002             BEQ.N    ??x509_get_version_2
    255                  return( MBEDTLS_ERR_X509_INVALID_VERSION + ret );
   \       0x32   0xF5A0 0x5008      SUB      R0,R0,#+8704
   \       0x36   0xBD76             POP      {R1,R2,R4-R6,PC}
    256          
    257              if( *p != end )
   \                     ??x509_get_version_2: (+1)
   \       0x38   0x6820             LDR      R0,[R4, #+0]
   \       0x3A   0x42A8             CMP      R0,R5
   \       0x3C   0xD002             BEQ.N    ??x509_get_version_3
    258                  return( MBEDTLS_ERR_X509_INVALID_VERSION +
    259                          MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   \       0x3E   0x....'....        LDR.W    R0,??DataTable15  ;; 0xffffdd9a
   \       0x42   0xBD76             POP      {R1,R2,R4-R6,PC}
    260          
    261              return( 0 );
   \                     ??x509_get_version_3: (+1)
   \       0x44   0x2000             MOVS     R0,#+0
   \                     ??x509_get_version_1: (+1)
   \       0x46   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
    262          }
    263          
    264          /*
    265           *  Validity ::= SEQUENCE {
    266           *       notBefore      Time,
    267           *       notAfter       Time }
    268           */

   \                                 In section .text, align 2, keep-with-next
    269          static int x509_get_dates( unsigned char **p,
    270                                     const unsigned char *end,
    271                                     mbedtls_x509_time *from,
    272                                     mbedtls_x509_time *to )
    273          {
   \                     x509_get_dates: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x4617             MOV      R7,R2
   \        0x6   0x461D             MOV      R5,R3
    274              int ret;
    275              size_t len;
    276          
    277              if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
    278                      MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
   \        0x8   0x2330             MOVS     R3,#+48
   \        0xA   0x466A             MOV      R2,SP
   \        0xC   0x....'....        BL       mbedtls_asn1_get_tag
   \       0x10   0x2800             CMP      R0,#+0
   \       0x12   0xD002             BEQ.N    ??x509_get_dates_0
    279                  return( MBEDTLS_ERR_X509_INVALID_DATE + ret );
   \       0x14   0xF5A0 0x5010      SUB      R0,R0,#+9216
   \       0x18   0xBDF2             POP      {R1,R4-R7,PC}
    280          
    281              end = *p + len;
   \                     ??x509_get_dates_0: (+1)
   \       0x1A   0x6820             LDR      R0,[R4, #+0]
   \       0x1C   0x9900             LDR      R1,[SP, #+0]
   \       0x1E   0x1846             ADDS     R6,R0,R1
    282          
    283              if( ( ret = mbedtls_x509_get_time( p, end, from ) ) != 0 )
   \       0x20   0x463A             MOV      R2,R7
   \       0x22   0x4631             MOV      R1,R6
   \       0x24   0x4620             MOV      R0,R4
   \       0x26   0x....'....        BL       mbedtls_x509_get_time
   \       0x2A   0x2800             CMP      R0,#+0
   \       0x2C   0xD10D             BNE.N    ??x509_get_dates_1
    284                  return( ret );
    285          
    286              if( ( ret = mbedtls_x509_get_time( p, end, to ) ) != 0 )
   \       0x2E   0x462A             MOV      R2,R5
   \       0x30   0x4631             MOV      R1,R6
   \       0x32   0x4620             MOV      R0,R4
   \       0x34   0x....'....        BL       mbedtls_x509_get_time
   \       0x38   0x2800             CMP      R0,#+0
   \       0x3A   0xD106             BNE.N    ??x509_get_dates_1
    287                  return( ret );
    288          
    289              if( *p != end )
   \       0x3C   0x6820             LDR      R0,[R4, #+0]
   \       0x3E   0x42B0             CMP      R0,R6
   \       0x40   0xD002             BEQ.N    ??x509_get_dates_2
    290                  return( MBEDTLS_ERR_X509_INVALID_DATE +
    291                          MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   \       0x42   0x....'....        LDR.W    R0,??DataTable15_1  ;; 0xffffdb9a
   \       0x46   0xBDF2             POP      {R1,R4-R7,PC}
    292          
    293              return( 0 );
   \                     ??x509_get_dates_2: (+1)
   \       0x48   0x2000             MOVS     R0,#+0
   \                     ??x509_get_dates_1: (+1)
   \       0x4A   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    294          }
    295          
    296          /*
    297           * X.509 v2/v3 unique identifier (not parsed)
    298           */

   \                                 In section .text, align 2, keep-with-next
    299          static int x509_get_uid( unsigned char **p,
    300                                   const unsigned char *end,
    301                                   mbedtls_x509_buf *uid, int n )
    302          {
   \                     x509_get_uid: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x4615             MOV      R5,R2
    303              int ret;
    304          
    305              if( *p == end )
   \        0x6   0x6820             LDR      R0,[R4, #+0]
   \        0x8   0x4288             CMP      R0,R1
   \        0xA   0xD101             BNE.N    ??x509_get_uid_0
    306                  return( 0 );
   \        0xC   0x2000             MOVS     R0,#+0
   \        0xE   0xBD32             POP      {R1,R4,R5,PC}
    307          
    308              uid->tag = **p;
   \                     ??x509_get_uid_0: (+1)
   \       0x10   0x7800             LDRB     R0,[R0, #+0]
   \       0x12   0x6028             STR      R0,[R5, #+0]
    309          
    310              if( ( ret = mbedtls_asn1_get_tag( p, end, &uid->len,
    311                      MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | n ) ) != 0 )
   \       0x14   0xF043 0x03A0      ORR      R3,R3,#0xA0
   \       0x18   0x1D2A             ADDS     R2,R5,#+4
   \       0x1A   0x4620             MOV      R0,R4
   \       0x1C   0x....'....        BL       mbedtls_asn1_get_tag
   \       0x20   0x2800             CMP      R0,#+0
   \       0x22   0xD004             BEQ.N    ??x509_get_uid_1
    312              {
    313                  if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   \       0x24   0xF110 0x0F62      CMN      R0,#+98
   \       0x28   0xD108             BNE.N    ??x509_get_uid_2
    314                      return( 0 );
   \       0x2A   0x2000             MOVS     R0,#+0
   \       0x2C   0xBD32             POP      {R1,R4,R5,PC}
    315          
    316                  return( ret );
    317              }
    318          
    319              uid->p = *p;
   \                     ??x509_get_uid_1: (+1)
   \       0x2E   0x6820             LDR      R0,[R4, #+0]
   \       0x30   0x60A8             STR      R0,[R5, #+8]
    320              *p += uid->len;
   \       0x32   0x6820             LDR      R0,[R4, #+0]
   \       0x34   0x6869             LDR      R1,[R5, #+4]
   \       0x36   0x4408             ADD      R0,R0,R1
   \       0x38   0x6020             STR      R0,[R4, #+0]
    321          
    322              return( 0 );
   \       0x3A   0x2000             MOVS     R0,#+0
   \                     ??x509_get_uid_2: (+1)
   \       0x3C   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    323          }
    324          

   \                                 In section .text, align 2, keep-with-next
    325          static int x509_get_basic_constraints( unsigned char **p,
    326                                                 const unsigned char *end,
    327                                                 int *ca_istrue,
    328                                                 int *max_pathlen )
    329          {
   \                     x509_get_basic_constraints: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
   \        0x6   0x4616             MOV      R6,R2
   \        0x8   0x461F             MOV      R7,R3
    330              int ret;
    331              size_t len;
    332          
    333              /*
    334               * BasicConstraints ::= SEQUENCE {
    335               *      cA                      BOOLEAN DEFAULT FALSE,
    336               *      pathLenConstraint       INTEGER (0..MAX) OPTIONAL }
    337               */
    338              *ca_istrue = 0; /* DEFAULT FALSE */
   \        0xA   0x2000             MOVS     R0,#+0
   \        0xC   0x6030             STR      R0,[R6, #+0]
    339              *max_pathlen = 0; /* endless */
   \        0xE   0x6038             STR      R0,[R7, #+0]
    340          
    341              if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
    342                      MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
   \       0x10   0x2330             MOVS     R3,#+48
   \       0x12   0x466A             MOV      R2,SP
   \       0x14   0x4620             MOV      R0,R4
   \       0x16   0x....'....        BL       mbedtls_asn1_get_tag
   \       0x1A   0x2800             CMP      R0,#+0
   \       0x1C   0xD126             BNE.N    ??x509_get_basic_constraints_0
    343                  return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
    344          
    345              if( *p == end )
   \       0x1E   0x6820             LDR      R0,[R4, #+0]
   \       0x20   0x42A8             CMP      R0,R5
   \       0x22   0xD101             BNE.N    ??x509_get_basic_constraints_1
    346                  return( 0 );
   \       0x24   0x2000             MOVS     R0,#+0
   \       0x26   0xBDF2             POP      {R1,R4-R7,PC}
    347          
    348              if( ( ret = mbedtls_asn1_get_bool( p, end, ca_istrue ) ) != 0 )
   \                     ??x509_get_basic_constraints_1: (+1)
   \       0x28   0x4632             MOV      R2,R6
   \       0x2A   0x4629             MOV      R1,R5
   \       0x2C   0x4620             MOV      R0,R4
   \       0x2E   0x....'....        BL       mbedtls_asn1_get_bool
   \       0x32   0x2800             CMP      R0,#+0
   \       0x34   0xD00E             BEQ.N    ??x509_get_basic_constraints_2
    349              {
    350                  if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   \       0x36   0xF110 0x0F62      CMN      R0,#+98
   \       0x3A   0xD104             BNE.N    ??x509_get_basic_constraints_3
    351                      ret = mbedtls_asn1_get_int( p, end, ca_istrue );
   \       0x3C   0x4632             MOV      R2,R6
   \       0x3E   0x4629             MOV      R1,R5
   \       0x40   0x4620             MOV      R0,R4
   \       0x42   0x....'....        BL       mbedtls_asn1_get_int
    352          
    353                  if( ret != 0 )
   \                     ??x509_get_basic_constraints_3: (+1)
   \       0x46   0x2800             CMP      R0,#+0
   \       0x48   0xD110             BNE.N    ??x509_get_basic_constraints_0
    354                      return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
    355          
    356                  if( *ca_istrue != 0 )
   \       0x4A   0x6830             LDR      R0,[R6, #+0]
   \       0x4C   0x2800             CMP      R0,#+0
   \       0x4E   0xD001             BEQ.N    ??x509_get_basic_constraints_2
    357                      *ca_istrue = 1;
   \       0x50   0x2001             MOVS     R0,#+1
   \       0x52   0x6030             STR      R0,[R6, #+0]
    358              }
    359          
    360              if( *p == end )
   \                     ??x509_get_basic_constraints_2: (+1)
   \       0x54   0x6820             LDR      R0,[R4, #+0]
   \       0x56   0x42A8             CMP      R0,R5
   \       0x58   0xD101             BNE.N    ??x509_get_basic_constraints_4
    361                  return( 0 );
   \       0x5A   0x2000             MOVS     R0,#+0
   \       0x5C   0xBDF2             POP      {R1,R4-R7,PC}
    362          
    363              if( ( ret = mbedtls_asn1_get_int( p, end, max_pathlen ) ) != 0 )
   \                     ??x509_get_basic_constraints_4: (+1)
   \       0x5E   0x463A             MOV      R2,R7
   \       0x60   0x4629             MOV      R1,R5
   \       0x62   0x4620             MOV      R0,R4
   \       0x64   0x....'....        BL       mbedtls_asn1_get_int
   \       0x68   0x2800             CMP      R0,#+0
   \       0x6A   0xD002             BEQ.N    ??x509_get_basic_constraints_5
    364                  return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
   \                     ??x509_get_basic_constraints_0: (+1)
   \       0x6C   0xF5A0 0x5014      SUB      R0,R0,#+9472
   \       0x70   0xBDF2             POP      {R1,R4-R7,PC}
    365          
    366              if( *p != end )
   \                     ??x509_get_basic_constraints_5: (+1)
   \       0x72   0x6820             LDR      R0,[R4, #+0]
   \       0x74   0x42A8             CMP      R0,R5
   \       0x76   0xD002             BEQ.N    ??x509_get_basic_constraints_6
    367                  return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
    368                          MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   \       0x78   0x....'....        LDR.W    R0,??DataTable15_4  ;; 0xffffda9a
   \       0x7C   0xBDF2             POP      {R1,R4-R7,PC}
    369          
    370              (*max_pathlen)++;
   \                     ??x509_get_basic_constraints_6: (+1)
   \       0x7E   0x6838             LDR      R0,[R7, #+0]
   \       0x80   0x1C40             ADDS     R0,R0,#+1
   \       0x82   0x6038             STR      R0,[R7, #+0]
    371          
    372              return( 0 );
   \       0x84   0x2000             MOVS     R0,#+0
   \       0x86   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    373          }
    374          

   \                                 In section .text, align 2, keep-with-next
    375          static int x509_get_ns_cert_type( unsigned char **p,
    376                                                 const unsigned char *end,
    377                                                 unsigned char *ns_cert_type)
    378          {
   \                     x509_get_ns_cert_type: (+1)
   \        0x0   0xB57F             PUSH     {R0-R6,LR}
   \        0x2   0x4614             MOV      R4,R2
    379              int ret;
    380              mbedtls_x509_bitstring bs = { 0, 0, NULL };
   \        0x4   0x466A             MOV      R2,SP
   \        0x6   0x2300             MOVS     R3,#+0
   \        0x8   0x461D             MOV      R5,R3
   \        0xA   0x461E             MOV      R6,R3
   \        0xC   0xE882 0x0068      STM      R2,{R3,R5,R6}
    381          
    382              if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
   \       0x10   0x....'....        BL       mbedtls_asn1_get_bitstring
   \       0x14   0x2800             CMP      R0,#+0
   \       0x16   0xD002             BEQ.N    ??x509_get_ns_cert_type_0
    383                  return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
   \       0x18   0xF5A0 0x5014      SUB      R0,R0,#+9472
   \       0x1C   0xE009             B.N      ??x509_get_ns_cert_type_1
    384          
    385              if( bs.len != 1 )
   \                     ??x509_get_ns_cert_type_0: (+1)
   \       0x1E   0x9800             LDR      R0,[SP, #+0]
   \       0x20   0x2801             CMP      R0,#+1
   \       0x22   0xD002             BEQ.N    ??x509_get_ns_cert_type_2
    386                  return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
    387                          MBEDTLS_ERR_ASN1_INVALID_LENGTH );
   \       0x24   0x....'....        LDR.W    R0,??DataTable15_5  ;; 0xffffda9c
   \       0x28   0xE003             B.N      ??x509_get_ns_cert_type_1
    388          
    389              /* Get actual bitstring */
    390              *ns_cert_type = *bs.p;
   \                     ??x509_get_ns_cert_type_2: (+1)
   \       0x2A   0x9802             LDR      R0,[SP, #+8]
   \       0x2C   0x7800             LDRB     R0,[R0, #+0]
   \       0x2E   0x7020             STRB     R0,[R4, #+0]
    391              return( 0 );
   \       0x30   0x4628             MOV      R0,R5
   \                     ??x509_get_ns_cert_type_1: (+1)
   \       0x32   0xB004             ADD      SP,SP,#+16
   \       0x34   0xBD70             POP      {R4-R6,PC}       ;; return
    392          }

   \                                 In section .rodata, align 4
   \        0x0   0x0000'0000        DC32 0
   \        0x4   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \        0x8   0x0000'0000        DC32 0H
    393          

   \                                 In section .text, align 2, keep-with-next
    394          static int x509_get_key_usage( unsigned char **p,
    395                                         const unsigned char *end,
    396                                         unsigned int *key_usage)
    397          {
   \                     x509_get_key_usage: (+1)
   \        0x0   0xB57F             PUSH     {R0-R6,LR}
   \        0x2   0x4614             MOV      R4,R2
    398              int ret;
    399              size_t i;
    400              mbedtls_x509_bitstring bs = { 0, 0, NULL };
   \        0x4   0x466A             MOV      R2,SP
   \        0x6   0x2300             MOVS     R3,#+0
   \        0x8   0x461D             MOV      R5,R3
   \        0xA   0x461E             MOV      R6,R3
   \        0xC   0xE882 0x0068      STM      R2,{R3,R5,R6}
    401          
    402              if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
   \       0x10   0x....'....        BL       mbedtls_asn1_get_bitstring
   \       0x14   0x2800             CMP      R0,#+0
   \       0x16   0xD002             BEQ.N    ??x509_get_key_usage_0
    403                  return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
   \       0x18   0xF5A0 0x5014      SUB      R0,R0,#+9472
   \       0x1C   0xE016             B.N      ??x509_get_key_usage_1
    404          
    405              if( bs.len < 1 )
   \                     ??x509_get_key_usage_0: (+1)
   \       0x1E   0x9800             LDR      R0,[SP, #+0]
   \       0x20   0x2800             CMP      R0,#+0
   \       0x22   0xD102             BNE.N    ??x509_get_key_usage_2
    406                  return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
    407                          MBEDTLS_ERR_ASN1_INVALID_LENGTH );
   \       0x24   0x....'....        LDR.W    R0,??DataTable15_5  ;; 0xffffda9c
   \       0x28   0xE010             B.N      ??x509_get_key_usage_1
    408          
    409              /* Get actual bitstring */
    410              *key_usage = 0;
   \                     ??x509_get_key_usage_2: (+1)
   \       0x2A   0x4628             MOV      R0,R5
   \       0x2C   0x6020             STR      R0,[R4, #+0]
    411              for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
   \                     ??x509_get_key_usage_3: (+1)
   \       0x2E   0x9900             LDR      R1,[SP, #+0]
   \       0x30   0x4288             CMP      R0,R1
   \       0x32   0xD20A             BCS.N    ??x509_get_key_usage_4
   \       0x34   0x2804             CMP      R0,#+4
   \       0x36   0xD208             BCS.N    ??x509_get_key_usage_4
    412              {
    413                  *key_usage |= (unsigned int) bs.p[i] << (8*i);
   \       0x38   0x6821             LDR      R1,[R4, #+0]
   \       0x3A   0x9A02             LDR      R2,[SP, #+8]
   \       0x3C   0x5C12             LDRB     R2,[R2, R0]
   \       0x3E   0x00C3             LSLS     R3,R0,#+3
   \       0x40   0x409A             LSLS     R2,R2,R3
   \       0x42   0x4311             ORRS     R1,R2,R1
   \       0x44   0x6021             STR      R1,[R4, #+0]
    414              }
   \       0x46   0x1C40             ADDS     R0,R0,#+1
   \       0x48   0xE7F1             B.N      ??x509_get_key_usage_3
    415          
    416              return( 0 );
   \                     ??x509_get_key_usage_4: (+1)
   \       0x4A   0x4628             MOV      R0,R5
   \                     ??x509_get_key_usage_1: (+1)
   \       0x4C   0xB004             ADD      SP,SP,#+16
   \       0x4E   0xBD70             POP      {R4-R6,PC}       ;; return
    417          }

   \                                 In section .rodata, align 4
   \        0x0   0x0000'0000        DC32 0
   \        0x4   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \        0x8   0x0000'0000        DC32 0H
    418          
    419          /*
    420           * ExtKeyUsageSyntax ::= SEQUENCE SIZE (1..MAX) OF KeyPurposeId
    421           *
    422           * KeyPurposeId ::= OBJECT IDENTIFIER
    423           */

   \                                 In section .text, align 2, keep-with-next
    424          static int x509_get_ext_key_usage( unsigned char **p,
    425                                         const unsigned char *end,
    426                                         mbedtls_x509_sequence *ext_key_usage)
    427          {
   \                     x509_get_ext_key_usage: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x4614             MOV      R4,R2
    428              int ret;
    429          
    430              if( ( ret = mbedtls_asn1_get_sequence_of( p, end, ext_key_usage, MBEDTLS_ASN1_OID ) ) != 0 )
   \        0x4   0x2306             MOVS     R3,#+6
   \        0x6   0x....'....        BL       mbedtls_asn1_get_sequence_of
   \        0xA   0x2800             CMP      R0,#+0
   \        0xC   0xD002             BEQ.N    ??x509_get_ext_key_usage_0
    431                  return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
   \        0xE   0xF5A0 0x5014      SUB      R0,R0,#+9472
   \       0x12   0xBD10             POP      {R4,PC}
    432          
    433              /* Sequence length must be >= 1 */
    434              if( ext_key_usage->buf.p == NULL )
   \                     ??x509_get_ext_key_usage_0: (+1)
   \       0x14   0x68A0             LDR      R0,[R4, #+8]
   \       0x16   0x2800             CMP      R0,#+0
   \       0x18   0xD102             BNE.N    ??x509_get_ext_key_usage_1
    435                  return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
    436                          MBEDTLS_ERR_ASN1_INVALID_LENGTH );
   \       0x1A   0x....'....        LDR.W    R0,??DataTable15_5  ;; 0xffffda9c
   \       0x1E   0xBD10             POP      {R4,PC}
    437          
    438              return( 0 );
   \                     ??x509_get_ext_key_usage_1: (+1)
   \       0x20   0x2000             MOVS     R0,#+0
   \       0x22   0xBD10             POP      {R4,PC}          ;; return
    439          }
    440          
    441          /*
    442           * SubjectAltName ::= GeneralNames
    443           *
    444           * GeneralNames ::= SEQUENCE SIZE (1..MAX) OF GeneralName
    445           *
    446           * GeneralName ::= CHOICE {
    447           *      otherName                       [0]     OtherName,
    448           *      rfc822Name                      [1]     IA5String,
    449           *      dNSName                         [2]     IA5String,
    450           *      x400Address                     [3]     ORAddress,
    451           *      directoryName                   [4]     Name,
    452           *      ediPartyName                    [5]     EDIPartyName,
    453           *      uniformResourceIdentifier       [6]     IA5String,
    454           *      iPAddress                       [7]     OCTET STRING,
    455           *      registeredID                    [8]     OBJECT IDENTIFIER }
    456           *
    457           * OtherName ::= SEQUENCE {
    458           *      type-id    OBJECT IDENTIFIER,
    459           *      value      [0] EXPLICIT ANY DEFINED BY type-id }
    460           *
    461           * EDIPartyName ::= SEQUENCE {
    462           *      nameAssigner            [0]     DirectoryString OPTIONAL,
    463           *      partyName               [1]     DirectoryString }
    464           *
    465           * NOTE: we only parse and use dNSName at this point.
    466           */

   \                                 In section .text, align 2, keep-with-next
    467          static int x509_get_subject_alt_name( unsigned char **p,
    468                                                const unsigned char *end,
    469                                                mbedtls_x509_sequence *subject_alt_name )
    470          {
   \                     x509_get_subject_alt_name: (+1)
   \        0x0   0xB5FE             PUSH     {R1-R7,LR}
   \        0x2   0x4605             MOV      R5,R0
   \        0x4   0x460E             MOV      R6,R1
   \        0x6   0x4617             MOV      R7,R2
    471              int ret;
    472              size_t len, tag_len;
    473              mbedtls_asn1_buf *buf;
    474              unsigned char tag;
    475              mbedtls_asn1_sequence *cur = subject_alt_name;
    476          
    477              /* Get main sequence tag */
    478              if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
    479                      MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
   \        0x8   0x2330             MOVS     R3,#+48
   \        0xA   0xAA01             ADD      R2,SP,#+4
   \        0xC   0x....'....        BL       mbedtls_asn1_get_tag
   \       0x10   0x2800             CMP      R0,#+0
   \       0x12   0xD11F             BNE.N    ??x509_get_subject_alt_name_0
    480                  return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
    481          
    482              if( *p + len != end )
   \       0x14   0x6828             LDR      R0,[R5, #+0]
   \       0x16   0x9901             LDR      R1,[SP, #+4]
   \       0x18   0x4408             ADD      R0,R0,R1
   \       0x1A   0x42B0             CMP      R0,R6
   \       0x1C   0xD006             BEQ.N    ??x509_get_subject_alt_name_1
    483                  return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
    484                          MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   \       0x1E   0x....'....        LDR.W    R0,??DataTable15_4  ;; 0xffffda9a
   \       0x22   0xBDFE             POP      {R1-R7,PC}
    485          
    486              while( *p < end )
    487              {
    488                  if( ( end - *p ) < 1 )
    489                      return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
    490                              MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    491          
    492                  tag = **p;
    493                  (*p)++;
    494                  if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
    495                      return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
    496          
    497                  if( ( tag & MBEDTLS_ASN1_TAG_CLASS_MASK ) !=
    498                          MBEDTLS_ASN1_CONTEXT_SPECIFIC )
    499                  {
    500                      return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
    501                              MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
    502                  }
    503          
    504                  /* Skip everything but DNS name */
    505                  if( tag != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | 2 ) )
    506                  {
    507                      *p += tag_len;
   \                     ??x509_get_subject_alt_name_2: (+1)
   \       0x24   0x6828             LDR      R0,[R5, #+0]
   \       0x26   0x9900             LDR      R1,[SP, #+0]
   \       0x28   0x4408             ADD      R0,R0,R1
   \       0x2A   0x6028             STR      R0,[R5, #+0]
    508                      continue;
    509                  }
   \                     ??x509_get_subject_alt_name_1: (+1)
   \       0x2C   0x6828             LDR      R0,[R5, #+0]
   \       0x2E   0x42B0             CMP      R0,R6
   \       0x30   0xD23C             BCS.N    ??x509_get_subject_alt_name_3
   \       0x32   0x1A30             SUBS     R0,R6,R0
   \       0x34   0x2801             CMP      R0,#+1
   \       0x36   0xDA02             BGE.N    ??x509_get_subject_alt_name_4
   \       0x38   0x....'....        LDR.W    R0,??DataTable15_7  ;; 0xffffdaa0
   \       0x3C   0xBDFE             POP      {R1-R7,PC}
   \                     ??x509_get_subject_alt_name_4: (+1)
   \       0x3E   0x6828             LDR      R0,[R5, #+0]
   \       0x40   0x7804             LDRB     R4,[R0, #+0]
   \       0x42   0x1C40             ADDS     R0,R0,#+1
   \       0x44   0x6028             STR      R0,[R5, #+0]
   \       0x46   0x466A             MOV      R2,SP
   \       0x48   0x4631             MOV      R1,R6
   \       0x4A   0x4628             MOV      R0,R5
   \       0x4C   0x....'....        BL       mbedtls_asn1_get_len
   \       0x50   0x2800             CMP      R0,#+0
   \       0x52   0xD002             BEQ.N    ??x509_get_subject_alt_name_5
   \                     ??x509_get_subject_alt_name_0: (+1)
   \       0x54   0xF5A0 0x5014      SUB      R0,R0,#+9472
   \       0x58   0xBDFE             POP      {R1-R7,PC}
   \                     ??x509_get_subject_alt_name_5: (+1)
   \       0x5A   0xF004 0x00C0      AND      R0,R4,#0xC0
   \       0x5E   0x2880             CMP      R0,#+128
   \       0x60   0xD002             BEQ.N    ??x509_get_subject_alt_name_6
   \       0x62   0x....'....        LDR.W    R0,??DataTable15_8  ;; 0xffffda9e
   \       0x66   0xBDFE             POP      {R1-R7,PC}
   \                     ??x509_get_subject_alt_name_6: (+1)
   \       0x68   0x2C82             CMP      R4,#+130
   \       0x6A   0xD1DB             BNE.N    ??x509_get_subject_alt_name_2
    510          
    511                  /* Allocate and assign next pointer */
    512                  if( cur->buf.p != NULL )
   \       0x6C   0x68B8             LDR      R0,[R7, #+8]
   \       0x6E   0x2800             CMP      R0,#+0
   \       0x70   0xD00A             BEQ.N    ??x509_get_subject_alt_name_7
    513                  {
    514                      if( cur->next != NULL )
   \       0x72   0x68F8             LDR      R0,[R7, #+12]
   \       0x74   0x2800             CMP      R0,#+0
   \       0x76   0xD111             BNE.N    ??x509_get_subject_alt_name_8
    515                          return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );
    516          
    517                      cur->next = mbedtls_calloc( 1, sizeof( mbedtls_asn1_sequence ) );
   \       0x78   0x2110             MOVS     R1,#+16
   \       0x7A   0x2001             MOVS     R0,#+1
   \       0x7C   0x....'....        BL       mbedtls_calloc
   \       0x80   0x60F8             STR      R0,[R7, #+12]
    518          
    519                      if( cur->next == NULL )
   \       0x82   0x2800             CMP      R0,#+0
   \       0x84   0xD00D             BEQ.N    ??x509_get_subject_alt_name_9
    520                          return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
    521                                  MBEDTLS_ERR_ASN1_ALLOC_FAILED );
    522          
    523                      cur = cur->next;
   \       0x86   0x4607             MOV      R7,R0
    524                  }
    525          
    526                  buf = &(cur->buf);
    527                  buf->tag = tag;
   \                     ??x509_get_subject_alt_name_7: (+1)
   \       0x88   0x603C             STR      R4,[R7, #+0]
    528                  buf->p = *p;
   \       0x8A   0x6828             LDR      R0,[R5, #+0]
   \       0x8C   0x60B8             STR      R0,[R7, #+8]
    529                  buf->len = tag_len;
   \       0x8E   0x9800             LDR      R0,[SP, #+0]
   \       0x90   0x6078             STR      R0,[R7, #+4]
    530                  *p += buf->len;
   \       0x92   0x6828             LDR      R0,[R5, #+0]
   \       0x94   0x6879             LDR      R1,[R7, #+4]
   \       0x96   0x4408             ADD      R0,R0,R1
   \       0x98   0x6028             STR      R0,[R5, #+0]
   \       0x9A   0xE7C7             B.N      ??x509_get_subject_alt_name_1
   \                     ??x509_get_subject_alt_name_8: (+1)
   \       0x9C   0x....'....        LDR.W    R0,??DataTable15_9  ;; 0xffffdb00
   \       0xA0   0xBDFE             POP      {R1-R7,PC}
   \                     ??x509_get_subject_alt_name_9: (+1)
   \       0xA2   0x....'....        LDR.W    R0,??DataTable15_10  ;; 0xffffda96
   \       0xA6   0xBDFE             POP      {R1-R7,PC}
    531              }
    532          
    533              /* Set final sequence entry's next pointer to NULL */
    534              cur->next = NULL;
    535          
    536              if( *p != end )
    537                  return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
    538                          MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    539          
    540              return( 0 );
   \                     ??x509_get_subject_alt_name_10: (+1)
   \       0xA8   0x2000             MOVS     R0,#+0
   \       0xAA   0xBDFE             POP      {R1-R7,PC}       ;; return
   \                     ??x509_get_subject_alt_name_3: (+1)
   \       0xAC   0x2000             MOVS     R0,#+0
   \       0xAE   0x60F8             STR      R0,[R7, #+12]
   \       0xB0   0x6828             LDR      R0,[R5, #+0]
   \       0xB2   0x42B0             CMP      R0,R6
   \       0xB4   0xD0F8             BEQ.N    ??x509_get_subject_alt_name_10
   \       0xB6   0x....'....        LDR.W    R0,??DataTable15_4  ;; 0xffffda9a
   \       0xBA   0xBDFE             POP      {R1-R7,PC}
    541          }
    542          
    543          /*
    544           * X.509 v3 extensions
    545           *
    546           */

   \                                 In section .text, align 2, keep-with-next
    547          static int x509_get_crt_ext( unsigned char **p,
    548                                       const unsigned char *end,
    549                                       mbedtls_x509_crt *crt )
    550          {
   \                     x509_get_crt_ext: (+1)
   \        0x0   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \        0x4   0xB086             SUB      SP,SP,#+24
   \        0x6   0x4604             MOV      R4,R0
   \        0x8   0x460D             MOV      R5,R1
   \        0xA   0x4616             MOV      R6,R2
    551              int ret;
    552              size_t len;
    553              unsigned char *end_ext_data, *end_ext_octet;
    554          
    555              if( ( ret = mbedtls_x509_get_ext( p, end, &crt->v3_ext, 3 ) ) != 0 )
   \        0xC   0x2303             MOVS     R3,#+3
   \        0xE   0xF106 0x02DC      ADD      R2,R6,#+220
   \       0x12   0x....'....        BL       mbedtls_x509_get_ext
   \       0x16   0x2800             CMP      R0,#+0
   \       0x18   0xF000 0x80A3      BEQ.W    ??x509_get_crt_ext_0
    556              {
    557                  if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   \       0x1C   0xF110 0x0F62      CMN      R0,#+98
   \       0x20   0xF040 0x809C      BNE.W    ??x509_get_crt_ext_1
    558                      return( 0 );
   \       0x24   0x2000             MOVS     R0,#+0
   \       0x26   0xE099             B.N      ??x509_get_crt_ext_1
    559          
    560                  return( ret );
    561              }
    562          
    563              while( *p < end )
    564              {
    565                  /*
    566                   * Extension  ::=  SEQUENCE  {
    567                   *      extnID      OBJECT IDENTIFIER,
    568                   *      critical    BOOLEAN DEFAULT FALSE,
    569                   *      extnValue   OCTET STRING  }
    570                   */
    571                  mbedtls_x509_buf extn_oid = {0, 0, NULL};
   \                     ??x509_get_crt_ext_2: (+1)
   \       0x28   0xA803             ADD      R0,SP,#+12
   \       0x2A   0x2100             MOVS     R1,#+0
   \       0x2C   0x460A             MOV      R2,R1
   \       0x2E   0x460B             MOV      R3,R1
   \       0x30   0xE880 0x000E      STM      R0,{R1-R3}
    572                  int is_critical = 0; /* DEFAULT FALSE */
   \       0x34   0x4608             MOV      R0,R1
   \       0x36   0x9002             STR      R0,[SP, #+8]
    573                  int ext_type = 0;
   \       0x38   0x9001             STR      R0,[SP, #+4]
    574          
    575                  if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
    576                          MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
   \       0x3A   0x2330             MOVS     R3,#+48
   \       0x3C   0x466A             MOV      R2,SP
   \       0x3E   0x4629             MOV      R1,R5
   \       0x40   0x4620             MOV      R0,R4
   \       0x42   0x....'....        BL       mbedtls_asn1_get_tag
   \       0x46   0x2800             CMP      R0,#+0
   \       0x48   0xD124             BNE.N    ??x509_get_crt_ext_3
    577                      return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
    578          
    579                  end_ext_data = *p + len;
   \       0x4A   0x6820             LDR      R0,[R4, #+0]
   \       0x4C   0x9900             LDR      R1,[SP, #+0]
   \       0x4E   0x1847             ADDS     R7,R0,R1
    580          
    581                  /* Get extension ID */
    582                  if( ( ret = mbedtls_asn1_get_tag( p, end_ext_data, &extn_oid.len,
    583                                                    MBEDTLS_ASN1_OID ) ) != 0 )
   \       0x50   0x2306             MOVS     R3,#+6
   \       0x52   0xAA04             ADD      R2,SP,#+16
   \       0x54   0x4639             MOV      R1,R7
   \       0x56   0x4620             MOV      R0,R4
   \       0x58   0x....'....        BL       mbedtls_asn1_get_tag
   \       0x5C   0x2800             CMP      R0,#+0
   \       0x5E   0xD119             BNE.N    ??x509_get_crt_ext_3
    584                      return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
    585          
    586                  extn_oid.tag = MBEDTLS_ASN1_OID;
   \       0x60   0x2006             MOVS     R0,#+6
   \       0x62   0x9003             STR      R0,[SP, #+12]
    587                  extn_oid.p = *p;
   \       0x64   0x6820             LDR      R0,[R4, #+0]
   \       0x66   0x9005             STR      R0,[SP, #+20]
    588                  *p += extn_oid.len;
   \       0x68   0x6820             LDR      R0,[R4, #+0]
   \       0x6A   0x9904             LDR      R1,[SP, #+16]
   \       0x6C   0x4408             ADD      R0,R0,R1
   \       0x6E   0x6020             STR      R0,[R4, #+0]
    589          
    590                  /* Get optional critical */
    591                  if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
    592                      ( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG ) )
   \       0x70   0xAA02             ADD      R2,SP,#+8
   \       0x72   0x4639             MOV      R1,R7
   \       0x74   0x4620             MOV      R0,R4
   \       0x76   0x....'....        BL       mbedtls_asn1_get_bool
   \       0x7A   0x2800             CMP      R0,#+0
   \       0x7C   0xD002             BEQ.N    ??x509_get_crt_ext_4
   \       0x7E   0xF110 0x0F62      CMN      R0,#+98
   \       0x82   0xD107             BNE.N    ??x509_get_crt_ext_3
    593                      return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
    594          
    595                  /* Data should be octet string type */
    596                  if( ( ret = mbedtls_asn1_get_tag( p, end_ext_data, &len,
    597                          MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
   \                     ??x509_get_crt_ext_4: (+1)
   \       0x84   0x2304             MOVS     R3,#+4
   \       0x86   0x466A             MOV      R2,SP
   \       0x88   0x4639             MOV      R1,R7
   \       0x8A   0x4620             MOV      R0,R4
   \       0x8C   0x....'....        BL       mbedtls_asn1_get_tag
   \       0x90   0x2800             CMP      R0,#+0
   \       0x92   0xD002             BEQ.N    ??x509_get_crt_ext_5
    598                      return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
   \                     ??x509_get_crt_ext_3: (+1)
   \       0x94   0xF5A0 0x5014      SUB      R0,R0,#+9472
   \       0x98   0xE060             B.N      ??x509_get_crt_ext_1
    599          
    600                  end_ext_octet = *p + len;
   \                     ??x509_get_crt_ext_5: (+1)
   \       0x9A   0x6820             LDR      R0,[R4, #+0]
   \       0x9C   0x9900             LDR      R1,[SP, #+0]
   \       0x9E   0xEB00 0x0801      ADD      R8,R0,R1
    601          
    602                  if( end_ext_octet != end_ext_data )
   \       0xA2   0x45B8             CMP      R8,R7
   \       0xA4   0xD002             BEQ.N    ??x509_get_crt_ext_6
    603                      return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
    604                              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   \       0xA6   0x....'....        LDR.W    R0,??DataTable15_4  ;; 0xffffda9a
   \       0xAA   0xE057             B.N      ??x509_get_crt_ext_1
    605          
    606                  /*
    607                   * Detect supported extensions
    608                   */
    609                  ret = mbedtls_oid_get_x509_ext_type( &extn_oid, &ext_type );
    610          
    611                  if( ret != 0 )
   \                     ??x509_get_crt_ext_6: (+1)
   \       0xAC   0xA901             ADD      R1,SP,#+4
   \       0xAE   0xA803             ADD      R0,SP,#+12
   \       0xB0   0x....'....        BL       mbedtls_oid_get_x509_ext_type
   \       0xB4   0x2800             CMP      R0,#+0
   \       0xB6   0xD007             BEQ.N    ??x509_get_crt_ext_7
    612                  {
    613                      /* No parser found, skip extension */
    614                      *p = end_ext_octet;
   \       0xB8   0xF8C4 0x8000      STR      R8,[R4, #+0]
    615          
    616          #if !defined(MBEDTLS_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION)
    617                      if( is_critical )
   \       0xBC   0x9802             LDR      R0,[SP, #+8]
   \       0xBE   0x2800             CMP      R0,#+0
   \       0xC0   0xD04F             BEQ.N    ??x509_get_crt_ext_0
    618                      {
    619                          /* Data is marked as critical: fail */
    620                          return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
    621                                  MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
   \       0xC2   0x....'....        LDR.W    R0,??DataTable15_8  ;; 0xffffda9e
   \       0xC6   0xE049             B.N      ??x509_get_crt_ext_1
    622                      }
    623          #endif
    624                      continue;
    625                  }
    626          
    627                  /* Forbid repeated extensions */
    628                  if( ( crt->ext_types & ext_type ) != 0 )
   \                     ??x509_get_crt_ext_7: (+1)
   \       0xC8   0xF8D6 0x00F8      LDR      R0,[R6, #+248]
   \       0xCC   0x9901             LDR      R1,[SP, #+4]
   \       0xCE   0x4208             TST      R0,R1
   \       0xD0   0xD11C             BNE.N    ??x509_get_crt_ext_8
    629                      return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );
    630          
    631                  crt->ext_types |= ext_type;
   \       0xD2   0x4308             ORRS     R0,R1,R0
   \       0xD4   0xF8C6 0x00F8      STR      R0,[R6, #+248]
    632          
    633                  switch( ext_type )
   \       0xD8   0x9801             LDR      R0,[SP, #+4]
   \       0xDA   0x2804             CMP      R0,#+4
   \       0xDC   0xD019             BEQ.N    ??x509_get_crt_ext_9
   \       0xDE   0x2820             CMP      R0,#+32
   \       0xE0   0xD029             BEQ.N    ??x509_get_crt_ext_10
   \       0xE2   0xF5B0 0x7F80      CMP      R0,#+256
   \       0xE6   0xD006             BEQ.N    ??x509_get_crt_ext_11
   \       0xE8   0xF5B0 0x6F00      CMP      R0,#+2048
   \       0xEC   0xD01A             BEQ.N    ??x509_get_crt_ext_12
   \       0xEE   0xF5B0 0x3F80      CMP      R0,#+65536
   \       0xF2   0xD029             BEQ.N    ??x509_get_crt_ext_13
   \       0xF4   0xE03D             B.N      ??x509_get_crt_ext_14
    634                  {
    635                  case MBEDTLS_X509_EXT_BASIC_CONSTRAINTS:
    636                      /* Parse basic constraints */
    637                      if( ( ret = x509_get_basic_constraints( p, end_ext_octet,
    638                              &crt->ca_istrue, &crt->max_pathlen ) ) != 0 )
   \                     ??x509_get_crt_ext_11: (+1)
   \       0xF6   0xF506 0x7380      ADD      R3,R6,#+256
   \       0xFA   0xF106 0x02FC      ADD      R2,R6,#+252
   \       0xFE   0x4641             MOV      R1,R8
   \      0x100   0x4620             MOV      R0,R4
   \      0x102   0x....'....        BL       x509_get_basic_constraints
   \      0x106   0x2800             CMP      R0,#+0
   \      0x108   0xD02B             BEQ.N    ??x509_get_crt_ext_0
    639                          return( ret );
   \      0x10A   0xE027             B.N      ??x509_get_crt_ext_1
   \                     ??x509_get_crt_ext_8: (+1)
   \      0x10C   0x....'....        LDR.W    R0,??DataTable15_9  ;; 0xffffdb00
   \      0x110   0xE024             B.N      ??x509_get_crt_ext_1
    640                      break;
    641          
    642                  case MBEDTLS_X509_EXT_KEY_USAGE:
    643                      /* Parse key usage */
    644                      if( ( ret = x509_get_key_usage( p, end_ext_octet,
    645                              &crt->key_usage ) ) != 0 )
   \                     ??x509_get_crt_ext_9: (+1)
   \      0x112   0xF506 0x7282      ADD      R2,R6,#+260
   \      0x116   0x4641             MOV      R1,R8
   \      0x118   0x4620             MOV      R0,R4
   \      0x11A   0x....'....        BL       x509_get_key_usage
   \      0x11E   0x2800             CMP      R0,#+0
   \      0x120   0xD01F             BEQ.N    ??x509_get_crt_ext_0
    646                          return( ret );
   \      0x122   0xE01B             B.N      ??x509_get_crt_ext_1
    647                      break;
    648          
    649                  case MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE:
    650                      /* Parse extended key usage */
    651                      if( ( ret = x509_get_ext_key_usage( p, end_ext_octet,
    652                              &crt->ext_key_usage ) ) != 0 )
   \                     ??x509_get_crt_ext_12: (+1)
   \      0x124   0xF506 0x7284      ADD      R2,R6,#+264
   \      0x128   0x4641             MOV      R1,R8
   \      0x12A   0x4620             MOV      R0,R4
   \      0x12C   0x....'....        BL       x509_get_ext_key_usage
   \      0x130   0x2800             CMP      R0,#+0
   \      0x132   0xD016             BEQ.N    ??x509_get_crt_ext_0
    653                          return( ret );
   \      0x134   0xE012             B.N      ??x509_get_crt_ext_1
    654                      break;
    655          
    656                  case MBEDTLS_X509_EXT_SUBJECT_ALT_NAME:
    657                      /* Parse subject alt name */
    658                      if( ( ret = x509_get_subject_alt_name( p, end_ext_octet,
    659                              &crt->subject_alt_names ) ) != 0 )
   \                     ??x509_get_crt_ext_10: (+1)
   \      0x136   0xF106 0x02E8      ADD      R2,R6,#+232
   \      0x13A   0x4641             MOV      R1,R8
   \      0x13C   0x4620             MOV      R0,R4
   \      0x13E   0x....'....        BL       x509_get_subject_alt_name
   \      0x142   0x2800             CMP      R0,#+0
   \      0x144   0xD00D             BEQ.N    ??x509_get_crt_ext_0
    660                          return( ret );
   \      0x146   0xE009             B.N      ??x509_get_crt_ext_1
    661                      break;
    662          
    663                  case MBEDTLS_X509_EXT_NS_CERT_TYPE:
    664                      /* Parse netscape certificate type */
    665                      if( ( ret = x509_get_ns_cert_type( p, end_ext_octet,
    666                              &crt->ns_cert_type ) ) != 0 )
   \                     ??x509_get_crt_ext_13: (+1)
   \      0x148   0xF506 0x728C      ADD      R2,R6,#+280
   \      0x14C   0x4641             MOV      R1,R8
   \      0x14E   0x4620             MOV      R0,R4
   \      0x150   0x....'....        BL       x509_get_ns_cert_type
   \      0x154   0x2800             CMP      R0,#+0
   \      0x156   0xD004             BEQ.N    ??x509_get_crt_ext_0
    667                          return( ret );
   \      0x158   0xE000             B.N      ??x509_get_crt_ext_1
    668                      break;
    669          
    670                  default:
    671                      return( MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE );
    672                  }
    673              }
    674          
    675              if( *p != end )
    676                  return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
    677                          MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    678          
    679              return( 0 );
   \                     ??x509_get_crt_ext_15: (+1)
   \      0x15A   0x2000             MOVS     R0,#+0
   \                     ??x509_get_crt_ext_1: (+1)
   \      0x15C   0xB006             ADD      SP,SP,#+24
   \      0x15E   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   \                     ??x509_get_crt_ext_0: (+1)
   \      0x162   0x6820             LDR      R0,[R4, #+0]
   \      0x164   0x42A8             CMP      R0,R5
   \      0x166   0xF4FF 0xAF5F      BCC.W    ??x509_get_crt_ext_2
   \      0x16A   0xD0F6             BEQ.N    ??x509_get_crt_ext_15
   \      0x16C   0x....'....        LDR.W    R0,??DataTable15_4  ;; 0xffffda9a
   \      0x170   0xE7F4             B.N      ??x509_get_crt_ext_1
   \                     ??x509_get_crt_ext_14: (+1)
   \      0x172   0x....'....        LDR.W    R0,??DataTable18  ;; 0xffffdf80
   \      0x176   0xE7F1             B.N      ??x509_get_crt_ext_1
    680          }

   \                                 In section .rodata, align 4
   \        0x0   0x0000'0000        DC32 0, 0, 0H
   \              0x0000'0000  
   \              0x0000'0000  
    681          
    682          /*
    683           * Parse and fill a single X.509 certificate in DER format
    684           */

   \                                 In section .text, align 2, keep-with-next
    685          static int x509_crt_parse_der_core( mbedtls_x509_crt *crt, const unsigned char *buf,
    686                                              size_t buflen )
    687          {
   \                     x509_crt_parse_der_core: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0xB08C             SUB      SP,SP,#+48
   \        0x4   0x4605             MOV      R5,R0
   \        0x6   0x460C             MOV      R4,R1
   \        0x8   0x4616             MOV      R6,R2
    688              int ret;
    689              size_t len;
    690              unsigned char *p, *end, *crt_end;
    691              mbedtls_x509_buf sig_params1, sig_params2, sig_oid2;
    692          
    693              memset( &sig_params1, 0, sizeof( mbedtls_x509_buf ) );
   \        0xA   0x2200             MOVS     R2,#+0
   \        0xC   0x210C             MOVS     R1,#+12
   \        0xE   0xA803             ADD      R0,SP,#+12
   \       0x10   0x....'....        BL       __aeabi_memset4
    694              memset( &sig_params2, 0, sizeof( mbedtls_x509_buf ) );
   \       0x14   0x2200             MOVS     R2,#+0
   \       0x16   0x210C             MOVS     R1,#+12
   \       0x18   0xA809             ADD      R0,SP,#+36
   \       0x1A   0x....'....        BL       __aeabi_memset4
    695              memset( &sig_oid2, 0, sizeof( mbedtls_x509_buf ) );
   \       0x1E   0x2200             MOVS     R2,#+0
   \       0x20   0x210C             MOVS     R1,#+12
   \       0x22   0xA806             ADD      R0,SP,#+24
   \       0x24   0x....'....        BL       __aeabi_memset4
    696          
    697              /*
    698               * Check for valid input
    699               */
    700              if( crt == NULL || buf == NULL )
   \       0x28   0x2D00             CMP      R5,#+0
   \       0x2A   0xD001             BEQ.N    ??x509_crt_parse_der_core_0
   \       0x2C   0x2C00             CMP      R4,#+0
   \       0x2E   0xD102             BNE.N    ??x509_crt_parse_der_core_1
    701                  return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   \                     ??x509_crt_parse_der_core_0: (+1)
   \       0x30   0x....'....        LDR.W    R0,??DataTable16  ;; 0xffffd800
   \       0x34   0xE12E             B.N      ??x509_crt_parse_der_core_2
    702          
    703              // Use the original buffer until we figure out actual length
    704              p = (unsigned char*) buf;
   \                     ??x509_crt_parse_der_core_1: (+1)
   \       0x36   0x9401             STR      R4,[SP, #+4]
    705              len = buflen;
   \       0x38   0x9602             STR      R6,[SP, #+8]
    706              end = p + len;
   \       0x3A   0x9801             LDR      R0,[SP, #+4]
   \       0x3C   0x4631             MOV      R1,R6
   \       0x3E   0x1846             ADDS     R6,R0,R1
    707          
    708              /*
    709               * Certificate  ::=  SEQUENCE  {
    710               *      tbsCertificate       TBSCertificate,
    711               *      signatureAlgorithm   AlgorithmIdentifier,
    712               *      signatureValue       BIT STRING  }
    713               */
    714              if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
    715                      MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
   \       0x40   0x2330             MOVS     R3,#+48
   \       0x42   0xAA02             ADD      R2,SP,#+8
   \       0x44   0x4631             MOV      R1,R6
   \       0x46   0xA801             ADD      R0,SP,#+4
   \       0x48   0x....'....        BL       mbedtls_asn1_get_tag
   \       0x4C   0x2800             CMP      R0,#+0
   \       0x4E   0xD005             BEQ.N    ??x509_crt_parse_der_core_3
    716              {
    717                  mbedtls_x509_crt_free( crt );
   \       0x50   0x4628             MOV      R0,R5
   \       0x52   0x....'....        BL       mbedtls_x509_crt_free
    718                  return( MBEDTLS_ERR_X509_INVALID_FORMAT );
   \       0x56   0x....'....        LDR.W    R0,??DataTable16_1  ;; 0xffffde80
   \       0x5A   0xE11B             B.N      ??x509_crt_parse_der_core_2
    719              }
    720          
    721              if( len > (size_t) ( end - p ) )
   \                     ??x509_crt_parse_der_core_3: (+1)
   \       0x5C   0x9801             LDR      R0,[SP, #+4]
   \       0x5E   0x1A36             SUBS     R6,R6,R0
   \       0x60   0x9802             LDR      R0,[SP, #+8]
   \       0x62   0x4286             CMP      R6,R0
   \       0x64   0xF0C0 0x810F      BCC.W    ??x509_crt_parse_der_core_4
    722              {
    723                  mbedtls_x509_crt_free( crt );
    724                  return( MBEDTLS_ERR_X509_INVALID_FORMAT +
    725                          MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    726              }
    727              crt_end = p + len;
    728          
    729              // Create and populate a new buffer for the raw field
    730              crt->raw.len = crt_end - buf;
   \       0x68   0x9801             LDR      R0,[SP, #+4]
   \       0x6A   0x9902             LDR      R1,[SP, #+8]
   \       0x6C   0x4408             ADD      R0,R0,R1
   \       0x6E   0x1B00             SUBS     R0,R0,R4
   \       0x70   0x6068             STR      R0,[R5, #+4]
    731              crt->raw.p = p = mbedtls_calloc( 1, crt->raw.len );
   \       0x72   0x4601             MOV      R1,R0
   \       0x74   0x2001             MOVS     R0,#+1
   \       0x76   0x....'....        BL       mbedtls_calloc
   \       0x7A   0x9001             STR      R0,[SP, #+4]
   \       0x7C   0x60A8             STR      R0,[R5, #+8]
    732              if( p == NULL )
   \       0x7E   0x9801             LDR      R0,[SP, #+4]
   \       0x80   0x2800             CMP      R0,#+0
   \       0x82   0xD102             BNE.N    ??x509_crt_parse_der_core_5
    733                  return( MBEDTLS_ERR_X509_ALLOC_FAILED );
   \       0x84   0x....'....        LDR.W    R0,??DataTable19  ;; 0xffffd780
   \       0x88   0xE104             B.N      ??x509_crt_parse_der_core_2
    734          
    735              memcpy( p, buf, crt->raw.len );
   \                     ??x509_crt_parse_der_core_5: (+1)
   \       0x8A   0x686A             LDR      R2,[R5, #+4]
   \       0x8C   0x4621             MOV      R1,R4
   \       0x8E   0x....'....        BL       __aeabi_memcpy
    736          
    737              // Direct pointers to the new buffer
    738              p += crt->raw.len - len;
   \       0x92   0x9901             LDR      R1,[SP, #+4]
   \       0x94   0x686A             LDR      R2,[R5, #+4]
   \       0x96   0x9802             LDR      R0,[SP, #+8]
   \       0x98   0x1A12             SUBS     R2,R2,R0
   \       0x9A   0x1888             ADDS     R0,R1,R2
   \       0x9C   0x9001             STR      R0,[SP, #+4]
    739              end = crt_end = p + len;
   \       0x9E   0x9902             LDR      R1,[SP, #+8]
   \       0xA0   0x1846             ADDS     R6,R0,R1
    740          
    741              /*
    742               * TBSCertificate  ::=  SEQUENCE  {
    743               */
    744              crt->tbs.p = p;
   \       0xA2   0x6168             STR      R0,[R5, #+20]
    745          
    746              if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
    747                      MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
   \       0xA4   0x2330             MOVS     R3,#+48
   \       0xA6   0xAA02             ADD      R2,SP,#+8
   \       0xA8   0x4631             MOV      R1,R6
   \       0xAA   0xA801             ADD      R0,SP,#+4
   \       0xAC   0x....'....        BL       mbedtls_asn1_get_tag
   \       0xB0   0x0004             MOVS     R4,R0
   \       0xB2   0xD169             BNE.N    ??x509_crt_parse_der_core_6
    748              {
    749                  mbedtls_x509_crt_free( crt );
    750                  return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    751              }
    752          
    753              end = p + len;
   \       0xB4   0x9801             LDR      R0,[SP, #+4]
   \       0xB6   0x9902             LDR      R1,[SP, #+8]
   \       0xB8   0x1847             ADDS     R7,R0,R1
    754              crt->tbs.len = end - crt->tbs.p;
   \       0xBA   0x6968             LDR      R0,[R5, #+20]
   \       0xBC   0x1A38             SUBS     R0,R7,R0
   \       0xBE   0x6128             STR      R0,[R5, #+16]
    755          
    756              /*
    757               * Version  ::=  INTEGER  {  v1(0), v2(1), v3(2)  }
    758               *
    759               * CertificateSerialNumber  ::=  INTEGER
    760               *
    761               * signature            AlgorithmIdentifier
    762               */
    763              if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
    764                  ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
    765                  ( ret = mbedtls_x509_get_alg(      &p, end, &crt->sig_oid,
    766                                                      &sig_params1 ) ) != 0 )
   \       0xC0   0xF105 0x0218      ADD      R2,R5,#+24
   \       0xC4   0x4639             MOV      R1,R7
   \       0xC6   0xA801             ADD      R0,SP,#+4
   \       0xC8   0x....'....        BL       x509_get_version
   \       0xCC   0x0004             MOVS     R4,R0
   \       0xCE   0xF040 0x80D2      BNE.W    ??x509_crt_parse_der_core_7
   \       0xD2   0xF105 0x021C      ADD      R2,R5,#+28
   \       0xD6   0x4639             MOV      R1,R7
   \       0xD8   0xA801             ADD      R0,SP,#+4
   \       0xDA   0x....'....        BL       mbedtls_x509_get_serial
   \       0xDE   0x0004             MOVS     R4,R0
   \       0xE0   0xF040 0x80C9      BNE.W    ??x509_crt_parse_der_core_7
   \       0xE4   0xAB03             ADD      R3,SP,#+12
   \       0xE6   0xF105 0x0228      ADD      R2,R5,#+40
   \       0xEA   0x4639             MOV      R1,R7
   \       0xEC   0xA801             ADD      R0,SP,#+4
   \       0xEE   0x....'....        BL       mbedtls_x509_get_alg
   \       0xF2   0x0004             MOVS     R4,R0
   \       0xF4   0xF040 0x80BF      BNE.W    ??x509_crt_parse_der_core_7
    767              {
    768                  mbedtls_x509_crt_free( crt );
    769                  return( ret );
    770              }
    771          
    772              if( crt->version < 0 || crt->version > 2 )
   \       0xF8   0x69A8             LDR      R0,[R5, #+24]
   \       0xFA   0x2803             CMP      R0,#+3
   \       0xFC   0xD305             BCC.N    ??x509_crt_parse_der_core_8
    773              {
    774                  mbedtls_x509_crt_free( crt );
   \       0xFE   0x4628             MOV      R0,R5
   \      0x100   0x....'....        BL       mbedtls_x509_crt_free
    775                  return( MBEDTLS_ERR_X509_UNKNOWN_VERSION );
   \      0x104   0x....'....        LDR.W    R0,??DataTable17  ;; 0xffffda80
   \      0x108   0xE0C4             B.N      ??x509_crt_parse_der_core_2
    776              }
    777          
    778              crt->version++;
   \                     ??x509_crt_parse_der_core_8: (+1)
   \      0x10A   0x1C40             ADDS     R0,R0,#+1
   \      0x10C   0x61A8             STR      R0,[R5, #+24]
    779          
    780              if( ( ret = mbedtls_x509_get_sig_alg( &crt->sig_oid, &sig_params1,
    781                                            &crt->sig_md, &crt->sig_pk,
    782                                            &crt->sig_opts ) ) != 0 )
   \      0x10E   0xF505 0x7096      ADD      R0,R5,#+300
   \      0x112   0x9000             STR      R0,[SP, #+0]
   \      0x114   0xF205 0x1329      ADDW     R3,R5,#+297
   \      0x118   0xF505 0x7294      ADD      R2,R5,#+296
   \      0x11C   0xA903             ADD      R1,SP,#+12
   \      0x11E   0xF105 0x0028      ADD      R0,R5,#+40
   \      0x122   0x....'....        BL       mbedtls_x509_get_sig_alg
   \      0x126   0x0004             MOVS     R4,R0
   \      0x128   0xF040 0x80A5      BNE.W    ??x509_crt_parse_der_core_7
    783              {
    784                  mbedtls_x509_crt_free( crt );
    785                  return( ret );
    786              }
    787          
    788              /*
    789               * issuer               Name
    790               */
    791              crt->issuer_raw.p = p;
   \      0x12C   0x9801             LDR      R0,[SP, #+4]
   \      0x12E   0x63E8             STR      R0,[R5, #+60]
    792          
    793              if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
    794                      MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
   \      0x130   0x2330             MOVS     R3,#+48
   \      0x132   0xAA02             ADD      R2,SP,#+8
   \      0x134   0x4639             MOV      R1,R7
   \      0x136   0xA801             ADD      R0,SP,#+4
   \      0x138   0x....'....        BL       mbedtls_asn1_get_tag
   \      0x13C   0x0004             MOVS     R4,R0
   \      0x13E   0xD123             BNE.N    ??x509_crt_parse_der_core_6
    795              {
    796                  mbedtls_x509_crt_free( crt );
    797                  return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    798              }
    799          
    800              if( ( ret = mbedtls_x509_get_name( &p, p + len, &crt->issuer ) ) != 0 )
   \      0x140   0xF105 0x024C      ADD      R2,R5,#+76
   \      0x144   0x9801             LDR      R0,[SP, #+4]
   \      0x146   0x9902             LDR      R1,[SP, #+8]
   \      0x148   0x4401             ADD      R1,R0,R1
   \      0x14A   0xA801             ADD      R0,SP,#+4
   \      0x14C   0x....'....        BL       mbedtls_x509_get_name
   \      0x150   0x0004             MOVS     R4,R0
   \      0x152   0xF040 0x8090      BNE.W    ??x509_crt_parse_der_core_7
    801              {
    802                  mbedtls_x509_crt_free( crt );
    803                  return( ret );
    804              }
    805          
    806              crt->issuer_raw.len = p - crt->issuer_raw.p;
   \      0x156   0x9901             LDR      R1,[SP, #+4]
   \      0x158   0x6BE8             LDR      R0,[R5, #+60]
   \      0x15A   0x1A09             SUBS     R1,R1,R0
   \      0x15C   0x63A9             STR      R1,[R5, #+56]
    807          
    808              /*
    809               * Validity ::= SEQUENCE {
    810               *      notBefore      Time,
    811               *      notAfter       Time }
    812               *
    813               */
    814              if( ( ret = x509_get_dates( &p, end, &crt->valid_from,
    815                                                   &crt->valid_to ) ) != 0 )
   \      0x15E   0xF105 0x03A4      ADD      R3,R5,#+164
   \      0x162   0xF105 0x028C      ADD      R2,R5,#+140
   \      0x166   0x4639             MOV      R1,R7
   \      0x168   0xA801             ADD      R0,SP,#+4
   \      0x16A   0x....'....        BL       x509_get_dates
   \      0x16E   0x0004             MOVS     R4,R0
   \      0x170   0xF040 0x8081      BNE.W    ??x509_crt_parse_der_core_7
    816              {
    817                  mbedtls_x509_crt_free( crt );
    818                  return( ret );
    819              }
    820          
    821              /*
    822               * subject              Name
    823               */
    824              crt->subject_raw.p = p;
   \      0x174   0x9801             LDR      R0,[SP, #+4]
   \      0x176   0x64A8             STR      R0,[R5, #+72]
    825          
    826              if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
    827                      MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
   \      0x178   0x2330             MOVS     R3,#+48
   \      0x17A   0xAA02             ADD      R2,SP,#+8
   \      0x17C   0x4639             MOV      R1,R7
   \      0x17E   0xA801             ADD      R0,SP,#+4
   \      0x180   0x....'....        BL       mbedtls_asn1_get_tag
   \      0x184   0x0004             MOVS     R4,R0
   \      0x186   0xD006             BEQ.N    ??x509_crt_parse_der_core_9
    828              {
    829                  mbedtls_x509_crt_free( crt );
   \                     ??x509_crt_parse_der_core_6: (+1)
   \      0x188   0x4628             MOV      R0,R5
   \      0x18A   0x....'....        BL       mbedtls_x509_crt_free
    830                  return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
   \      0x18E   0xF5A4 0x5406      SUB      R4,R4,#+8576
   \      0x192   0x4620             MOV      R0,R4
   \      0x194   0xE07E             B.N      ??x509_crt_parse_der_core_2
    831              }
    832          
    833              if( len && ( ret = mbedtls_x509_get_name( &p, p + len, &crt->subject ) ) != 0 )
   \                     ??x509_crt_parse_der_core_9: (+1)
   \      0x196   0x9802             LDR      R0,[SP, #+8]
   \      0x198   0x2800             CMP      R0,#+0
   \      0x19A   0xD009             BEQ.N    ??x509_crt_parse_der_core_10
   \      0x19C   0xF105 0x026C      ADD      R2,R5,#+108
   \      0x1A0   0x9801             LDR      R0,[SP, #+4]
   \      0x1A2   0x9902             LDR      R1,[SP, #+8]
   \      0x1A4   0x4401             ADD      R1,R0,R1
   \      0x1A6   0xA801             ADD      R0,SP,#+4
   \      0x1A8   0x....'....        BL       mbedtls_x509_get_name
   \      0x1AC   0x0004             MOVS     R4,R0
   \      0x1AE   0xD162             BNE.N    ??x509_crt_parse_der_core_7
    834              {
    835                  mbedtls_x509_crt_free( crt );
    836                  return( ret );
    837              }
    838          
    839              crt->subject_raw.len = p - crt->subject_raw.p;
   \                     ??x509_crt_parse_der_core_10: (+1)
   \      0x1B0   0x9901             LDR      R1,[SP, #+4]
   \      0x1B2   0x6CA8             LDR      R0,[R5, #+72]
   \      0x1B4   0x1A09             SUBS     R1,R1,R0
   \      0x1B6   0x6469             STR      R1,[R5, #+68]
    840          
    841              /*
    842               * SubjectPublicKeyInfo
    843               */
    844              if( ( ret = mbedtls_pk_parse_subpubkey( &p, end, &crt->pk ) ) != 0 )
   \      0x1B8   0xF105 0x02BC      ADD      R2,R5,#+188
   \      0x1BC   0x4639             MOV      R1,R7
   \      0x1BE   0xA801             ADD      R0,SP,#+4
   \      0x1C0   0x....'....        BL       mbedtls_pk_parse_subpubkey
   \      0x1C4   0x0004             MOVS     R4,R0
   \      0x1C6   0xD156             BNE.N    ??x509_crt_parse_der_core_7
    845              {
    846                  mbedtls_x509_crt_free( crt );
    847                  return( ret );
    848              }
    849          
    850              /*
    851               *  issuerUniqueID  [1]  IMPLICIT UniqueIdentifier OPTIONAL,
    852               *                       -- If present, version shall be v2 or v3
    853               *  subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL,
    854               *                       -- If present, version shall be v2 or v3
    855               *  extensions      [3]  EXPLICIT Extensions OPTIONAL
    856               *                       -- If present, version shall be v3
    857               */
    858              if( crt->version == 2 || crt->version == 3 )
   \      0x1C8   0x69A8             LDR      R0,[R5, #+24]
   \      0x1CA   0x2802             CMP      R0,#+2
   \      0x1CC   0xD001             BEQ.N    ??x509_crt_parse_der_core_11
   \      0x1CE   0x2803             CMP      R0,#+3
   \      0x1D0   0xD108             BNE.N    ??x509_crt_parse_der_core_12
    859              {
    860                  ret = x509_get_uid( &p, end, &crt->issuer_id,  1 );
   \                     ??x509_crt_parse_der_core_11: (+1)
   \      0x1D2   0x2301             MOVS     R3,#+1
   \      0x1D4   0xF105 0x02C4      ADD      R2,R5,#+196
   \      0x1D8   0x4639             MOV      R1,R7
   \      0x1DA   0xA801             ADD      R0,SP,#+4
   \      0x1DC   0x....'....        BL       x509_get_uid
   \      0x1E0   0x0004             MOVS     R4,R0
    861                  if( ret != 0 )
   \      0x1E2   0xD148             BNE.N    ??x509_crt_parse_der_core_7
    862                  {
    863                      mbedtls_x509_crt_free( crt );
    864                      return( ret );
    865                  }
    866              }
    867          
    868              if( crt->version == 2 || crt->version == 3 )
   \                     ??x509_crt_parse_der_core_12: (+1)
   \      0x1E4   0x69A8             LDR      R0,[R5, #+24]
   \      0x1E6   0x2802             CMP      R0,#+2
   \      0x1E8   0xD001             BEQ.N    ??x509_crt_parse_der_core_13
   \      0x1EA   0x2803             CMP      R0,#+3
   \      0x1EC   0xD108             BNE.N    ??x509_crt_parse_der_core_14
    869              {
    870                  ret = x509_get_uid( &p, end, &crt->subject_id,  2 );
   \                     ??x509_crt_parse_der_core_13: (+1)
   \      0x1EE   0x2302             MOVS     R3,#+2
   \      0x1F0   0xF105 0x02D0      ADD      R2,R5,#+208
   \      0x1F4   0x4639             MOV      R1,R7
   \      0x1F6   0xA801             ADD      R0,SP,#+4
   \      0x1F8   0x....'....        BL       x509_get_uid
   \      0x1FC   0x0004             MOVS     R4,R0
    871                  if( ret != 0 )
   \      0x1FE   0xD13A             BNE.N    ??x509_crt_parse_der_core_7
    872                  {
    873                      mbedtls_x509_crt_free( crt );
    874                      return( ret );
    875                  }
    876              }
    877          
    878          #if !defined(MBEDTLS_X509_ALLOW_EXTENSIONS_NON_V3)
    879              if( crt->version == 3 )
   \                     ??x509_crt_parse_der_core_14: (+1)
   \      0x200   0x69A8             LDR      R0,[R5, #+24]
   \      0x202   0x2803             CMP      R0,#+3
   \      0x204   0xD106             BNE.N    ??x509_crt_parse_der_core_15
    880          #endif
    881              {
    882                  ret = x509_get_crt_ext( &p, end, crt );
   \      0x206   0x462A             MOV      R2,R5
   \      0x208   0x4639             MOV      R1,R7
   \      0x20A   0xA801             ADD      R0,SP,#+4
   \      0x20C   0x....'....        BL       x509_get_crt_ext
   \      0x210   0x0004             MOVS     R4,R0
    883                  if( ret != 0 )
   \      0x212   0xD130             BNE.N    ??x509_crt_parse_der_core_7
    884                  {
    885                      mbedtls_x509_crt_free( crt );
    886                      return( ret );
    887                  }
    888              }
    889          
    890              if( p != end )
   \                     ??x509_crt_parse_der_core_15: (+1)
   \      0x214   0x9801             LDR      R0,[SP, #+4]
   \      0x216   0x42B8             CMP      R0,R7
   \      0x218   0xD135             BNE.N    ??x509_crt_parse_der_core_4
    891              {
    892                  mbedtls_x509_crt_free( crt );
    893                  return( MBEDTLS_ERR_X509_INVALID_FORMAT +
    894                          MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    895              }
    896          
    897              end = crt_end;
    898          
    899              /*
    900               *  }
    901               *  -- end of TBSCertificate
    902               *
    903               *  signatureAlgorithm   AlgorithmIdentifier,
    904               *  signatureValue       BIT STRING
    905               */
    906              if( ( ret = mbedtls_x509_get_alg( &p, end, &sig_oid2, &sig_params2 ) ) != 0 )
   \      0x21A   0xAB09             ADD      R3,SP,#+36
   \      0x21C   0xAA06             ADD      R2,SP,#+24
   \      0x21E   0x4631             MOV      R1,R6
   \      0x220   0xA801             ADD      R0,SP,#+4
   \      0x222   0x....'....        BL       mbedtls_x509_get_alg
   \      0x226   0x0004             MOVS     R4,R0
   \      0x228   0xD125             BNE.N    ??x509_crt_parse_der_core_7
    907              {
    908                  mbedtls_x509_crt_free( crt );
    909                  return( ret );
    910              }
    911          
    912              if( crt->sig_oid.len != sig_oid2.len ||
    913                  memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
    914                  sig_params1.len != sig_params2.len ||
    915                  ( sig_params1.len != 0 &&
    916                    memcmp( sig_params1.p, sig_params2.p, sig_params1.len ) != 0 ) )
   \      0x22A   0x6AE8             LDR      R0,[R5, #+44]
   \      0x22C   0x9907             LDR      R1,[SP, #+28]
   \      0x22E   0x4288             CMP      R0,R1
   \      0x230   0xD113             BNE.N    ??x509_crt_parse_der_core_16
   \      0x232   0x4602             MOV      R2,R0
   \      0x234   0x9908             LDR      R1,[SP, #+32]
   \      0x236   0x6B28             LDR      R0,[R5, #+48]
   \      0x238   0x....'....        BL       memcmp
   \      0x23C   0x2800             CMP      R0,#+0
   \      0x23E   0xD10C             BNE.N    ??x509_crt_parse_der_core_16
   \      0x240   0x9804             LDR      R0,[SP, #+16]
   \      0x242   0x990A             LDR      R1,[SP, #+40]
   \      0x244   0x4288             CMP      R0,R1
   \      0x246   0xD108             BNE.N    ??x509_crt_parse_der_core_16
   \      0x248   0x2800             CMP      R0,#+0
   \      0x24A   0xD00C             BEQ.N    ??x509_crt_parse_der_core_17
   \      0x24C   0x4602             MOV      R2,R0
   \      0x24E   0x990B             LDR      R1,[SP, #+44]
   \      0x250   0x9805             LDR      R0,[SP, #+20]
   \      0x252   0x....'....        BL       memcmp
   \      0x256   0x2800             CMP      R0,#+0
   \      0x258   0xD005             BEQ.N    ??x509_crt_parse_der_core_17
    917              {
    918                  mbedtls_x509_crt_free( crt );
   \                     ??x509_crt_parse_der_core_16: (+1)
   \      0x25A   0x4628             MOV      R0,R5
   \      0x25C   0x....'....        BL       mbedtls_x509_crt_free
    919                  return( MBEDTLS_ERR_X509_SIG_MISMATCH );
   \      0x260   0x....'....        LDR.W    R0,??DataTable19_2  ;; 0xffffd980
   \      0x264   0xE016             B.N      ??x509_crt_parse_der_core_2
    920              }
    921          
    922              if( ( ret = mbedtls_x509_get_sig( &p, end, &crt->sig ) ) != 0 )
   \                     ??x509_crt_parse_der_core_17: (+1)
   \      0x266   0xF505 0x728E      ADD      R2,R5,#+284
   \      0x26A   0x4631             MOV      R1,R6
   \      0x26C   0xA801             ADD      R0,SP,#+4
   \      0x26E   0x....'....        BL       mbedtls_x509_get_sig
   \      0x272   0x0004             MOVS     R4,R0
   \      0x274   0xD004             BEQ.N    ??x509_crt_parse_der_core_18
    923              {
    924                  mbedtls_x509_crt_free( crt );
   \                     ??x509_crt_parse_der_core_7: (+1)
   \      0x276   0x4628             MOV      R0,R5
   \      0x278   0x....'....        BL       mbedtls_x509_crt_free
    925                  return( ret );
   \      0x27C   0x4620             MOV      R0,R4
   \      0x27E   0xE009             B.N      ??x509_crt_parse_der_core_2
    926              }
    927          
    928              if( p != end )
   \                     ??x509_crt_parse_der_core_18: (+1)
   \      0x280   0x9801             LDR      R0,[SP, #+4]
   \      0x282   0x42B0             CMP      R0,R6
   \      0x284   0xD005             BEQ.N    ??x509_crt_parse_der_core_19
    929              {
    930                  mbedtls_x509_crt_free( crt );
   \                     ??x509_crt_parse_der_core_4: (+1)
   \      0x286   0x4628             MOV      R0,R5
   \      0x288   0x....'....        BL       mbedtls_x509_crt_free
    931                  return( MBEDTLS_ERR_X509_INVALID_FORMAT +
    932                          MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   \      0x28C   0x....'....        LDR.W    R0,??DataTable19_3  ;; 0xffffde1a
   \      0x290   0xE000             B.N      ??x509_crt_parse_der_core_2
    933              }
    934          
    935              return( 0 );
   \                     ??x509_crt_parse_der_core_19: (+1)
   \      0x292   0x2000             MOVS     R0,#+0
   \                     ??x509_crt_parse_der_core_2: (+1)
   \      0x294   0xB00D             ADD      SP,SP,#+52
   \      0x296   0xBDF0             POP      {R4-R7,PC}       ;; return
    936          }
    937          
    938          /*
    939           * Parse one X.509 certificate in DER format from a buffer and add them to a
    940           * chained list
    941           */

   \                                 In section .text, align 2, keep-with-next
    942          int mbedtls_x509_crt_parse_der( mbedtls_x509_crt *chain, const unsigned char *buf,
    943                                  size_t buflen )
    944          {
   \                     mbedtls_x509_crt_parse_der: (+1)
   \        0x0   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \        0x4   0x4607             MOV      R7,R0
   \        0x6   0x460E             MOV      R6,R1
   \        0x8   0x4690             MOV      R8,R2
    945              int ret;
    946              mbedtls_x509_crt *crt = chain, *prev = NULL;
   \        0xA   0x463C             MOV      R4,R7
   \        0xC   0x2500             MOVS     R5,#+0
    947          
    948              /*
    949               * Check for valid input
    950               */
    951              if( crt == NULL || buf == NULL )
   \        0xE   0x2C00             CMP      R4,#+0
   \       0x10   0xD001             BEQ.N    ??mbedtls_x509_crt_parse_der_0
   \       0x12   0x2E00             CMP      R6,#+0
   \       0x14   0xD124             BNE.N    ??mbedtls_x509_crt_parse_der_1
    952                  return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   \                     ??mbedtls_x509_crt_parse_der_0: (+1)
   \       0x16   0x....'....        LDR.W    R0,??DataTable16  ;; 0xffffd800
   \       0x1A   0xE01F             B.N      ??mbedtls_x509_crt_parse_der_2
    953          
    954              while( crt->version != 0 && crt->next != NULL )
   \                     ??mbedtls_x509_crt_parse_der_3: (+1)
   \       0x1C   0xF8D4 0x0130      LDR      R0,[R4, #+304]
   \       0x20   0x2800             CMP      R0,#+0
   \       0x22   0xD020             BEQ.N    ??mbedtls_x509_crt_parse_der_4
    955              {
    956                  prev = crt;
   \       0x24   0x4625             MOV      R5,R4
    957                  crt = crt->next;
   \       0x26   0x4604             MOV      R4,R0
   \       0x28   0xE01A             B.N      ??mbedtls_x509_crt_parse_der_1
    958              }
    959          
    960              /*
    961               * Add new certificate on the end of the chain if needed.
    962               */
    963              if( crt->version != 0 && crt->next == NULL )
    964              {
    965                  crt->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_crt ) );
    966          
    967                  if( crt->next == NULL )
    968                      return( MBEDTLS_ERR_X509_ALLOC_FAILED );
    969          
    970                  prev = crt;
   \                     ??mbedtls_x509_crt_parse_der_5: (+1)
   \       0x2A   0x4625             MOV      R5,R4
    971                  mbedtls_x509_crt_init( crt->next );
   \       0x2C   0x....'....        BL       mbedtls_x509_crt_init
    972                  crt = crt->next;
   \       0x30   0xF8D4 0x4130      LDR      R4,[R4, #+304]
    973              }
    974          
    975              if( ( ret = x509_crt_parse_der_core( crt, buf, buflen ) ) != 0 )
   \                     ??mbedtls_x509_crt_parse_der_6: (+1)
   \       0x34   0x4642             MOV      R2,R8
   \       0x36   0x4631             MOV      R1,R6
   \       0x38   0x4620             MOV      R0,R4
   \       0x3A   0x....'....        BL       x509_crt_parse_der_core
   \       0x3E   0x0006             MOVS     R6,R0
   \       0x40   0xD00B             BEQ.N    ??mbedtls_x509_crt_parse_der_7
    976              {
    977                  if( prev )
   \       0x42   0x2D00             CMP      R5,#+0
   \       0x44   0xD002             BEQ.N    ??mbedtls_x509_crt_parse_der_8
    978                      prev->next = NULL;
   \       0x46   0x2000             MOVS     R0,#+0
   \       0x48   0xF8C5 0x0130      STR      R0,[R5, #+304]
    979          
    980                  if( crt != chain )
   \                     ??mbedtls_x509_crt_parse_der_8: (+1)
   \       0x4C   0x42BC             CMP      R4,R7
   \       0x4E   0xD002             BEQ.N    ??mbedtls_x509_crt_parse_der_9
    981                      mbedtls_free( crt );
   \       0x50   0x4620             MOV      R0,R4
   \       0x52   0x....'....        BL       mbedtls_free
    982          
    983                  return( ret );
   \                     ??mbedtls_x509_crt_parse_der_9: (+1)
   \       0x56   0x4630             MOV      R0,R6
   \       0x58   0xE000             B.N      ??mbedtls_x509_crt_parse_der_2
    984              }
    985          
    986              return( 0 );
   \                     ??mbedtls_x509_crt_parse_der_7: (+1)
   \       0x5A   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_x509_crt_parse_der_2: (+1)
   \       0x5C   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   \                     ??mbedtls_x509_crt_parse_der_1: (+1)
   \       0x60   0x69A0             LDR      R0,[R4, #+24]
   \       0x62   0x2800             CMP      R0,#+0
   \       0x64   0xD1DA             BNE.N    ??mbedtls_x509_crt_parse_der_3
   \                     ??mbedtls_x509_crt_parse_der_4: (+1)
   \       0x66   0x69A0             LDR      R0,[R4, #+24]
   \       0x68   0x2800             CMP      R0,#+0
   \       0x6A   0xD0E3             BEQ.N    ??mbedtls_x509_crt_parse_der_6
   \       0x6C   0xF8D4 0x0130      LDR      R0,[R4, #+304]
   \       0x70   0x2800             CMP      R0,#+0
   \       0x72   0xD1DF             BNE.N    ??mbedtls_x509_crt_parse_der_6
   \       0x74   0xF44F 0x719A      MOV      R1,#+308
   \       0x78   0x2001             MOVS     R0,#+1
   \       0x7A   0x....'....        BL       mbedtls_calloc
   \       0x7E   0xF8C4 0x0130      STR      R0,[R4, #+304]
   \       0x82   0x2800             CMP      R0,#+0
   \       0x84   0xD1D1             BNE.N    ??mbedtls_x509_crt_parse_der_5
   \       0x86   0x....'....        LDR.W    R0,??DataTable19  ;; 0xffffd780
   \       0x8A   0xE7E7             B.N      ??mbedtls_x509_crt_parse_der_2
    987          }
    988          
    989          /*
    990           * Parse one or more PEM certificates from a buffer and add them to the chained
    991           * list
    992           */

   \                                 In section .text, align 2, keep-with-next
    993          int mbedtls_x509_crt_parse( mbedtls_x509_crt *chain, const unsigned char *buf, size_t buflen )
    994          {
   \                     mbedtls_x509_crt_parse: (+1)
   \        0x0   0xE92D 0x47F8      PUSH     {R3-R10,LR}
   \        0x4   0xB087             SUB      SP,SP,#+28
   \        0x6   0x4606             MOV      R6,R0
   \        0x8   0x460F             MOV      R7,R1
    995          #if defined(MBEDTLS_PEM_PARSE_C)
    996              int success = 0, first_error = 0, total_failed = 0;
   \        0xA   0xF04F 0x0A00      MOV      R10,#+0
   \        0xE   0x4654             MOV      R4,R10
   \       0x10   0x46A1             MOV      R9,R4
    997              int buf_format = MBEDTLS_X509_FORMAT_DER;
   \       0x12   0xF04F 0x0801      MOV      R8,#+1
    998          #endif
    999          
   1000              /*
   1001               * Check for valid input
   1002               */
   1003              if( chain == NULL || buf == NULL )
   \       0x16   0x2E00             CMP      R6,#+0
   \       0x18   0xD001             BEQ.N    ??mbedtls_x509_crt_parse_0
   \       0x1A   0x2F00             CMP      R7,#+0
   \       0x1C   0xD102             BNE.N    ??mbedtls_x509_crt_parse_1
   1004                  return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   \                     ??mbedtls_x509_crt_parse_0: (+1)
   \       0x1E   0x....'....        LDR.W    R0,??DataTable16  ;; 0xffffd800
   \       0x22   0xE065             B.N      ??mbedtls_x509_crt_parse_2
   \                     ??mbedtls_x509_crt_parse_1: (+1)
   \       0x24   0x0015             MOVS     R5,R2
   1005          
   1006              /*
   1007               * Determine buffer content. Buffer contains either one DER certificate or
   1008               * one or more PEM certificates.
   1009               */
   1010          #if defined(MBEDTLS_PEM_PARSE_C)
   1011              if( buflen != 0 && buf[buflen - 1] == '\0' &&
   1012                  strstr( (const char *) buf, "-----BEGIN CERTIFICATE-----" ) != NULL )
   \       0x26   0xD00D             BEQ.N    ??mbedtls_x509_crt_parse_3
   \       0x28   0x1978             ADDS     R0,R7,R5
   \       0x2A   0xF810 0x0C01      LDRB     R0,[R0, #-1]
   \       0x2E   0x2800             CMP      R0,#+0
   \       0x30   0xD108             BNE.N    ??mbedtls_x509_crt_parse_3
   \       0x32   0x....'....        LDR.W    R1,??DataTable19_4
   \       0x36   0x4638             MOV      R0,R7
   \       0x38   0x....'....        BL       strstr
   \       0x3C   0x2800             CMP      R0,#+0
   \       0x3E   0xD001             BEQ.N    ??mbedtls_x509_crt_parse_3
   1013              {
   1014                  buf_format = MBEDTLS_X509_FORMAT_PEM;
   \       0x40   0xF04F 0x0802      MOV      R8,#+2
   1015              }
   1016          
   1017              if( buf_format == MBEDTLS_X509_FORMAT_DER )
   \                     ??mbedtls_x509_crt_parse_3: (+1)
   \       0x44   0xF1B8 0x0F01      CMP      R8,#+1
   \       0x48   0xD105             BNE.N    ??mbedtls_x509_crt_parse_4
   1018                  return mbedtls_x509_crt_parse_der( chain, buf, buflen );
   \       0x4A   0x462A             MOV      R2,R5
   \       0x4C   0x4639             MOV      R1,R7
   \       0x4E   0x4630             MOV      R0,R6
   \       0x50   0x....'....        BL       mbedtls_x509_crt_parse_der
   \       0x54   0xE04C             B.N      ??mbedtls_x509_crt_parse_2
   1019          #else
   1020              return mbedtls_x509_crt_parse_der( chain, buf, buflen );
   1021          #endif
   1022          
   1023          #if defined(MBEDTLS_PEM_PARSE_C)
   1024              if( buf_format == MBEDTLS_X509_FORMAT_PEM )
   \                     ??mbedtls_x509_crt_parse_4: (+1)
   \       0x56   0xF1B8 0x0F02      CMP      R8,#+2
   \       0x5A   0xD14C             BNE.N    ??mbedtls_x509_crt_parse_5
   \       0x5C   0x46A8             MOV      R8,R5
   \       0x5E   0xE004             B.N      ??mbedtls_x509_crt_parse_6
   1025              {
   1026                  int ret;
   1027                  mbedtls_pem_context pem;
   1028          
   1029                  /* 1 rather than 0 since the terminating NULL byte is counted in */
   1030                  while( buflen > 1 )
   1031                  {
   1032                      size_t use_len;
   1033                      mbedtls_pem_init( &pem );
   1034          
   1035                      /* If we get there, we know the string is null-terminated */
   1036                      ret = mbedtls_pem_read_buffer( &pem,
   1037                                     "-----BEGIN CERTIFICATE-----",
   1038                                     "-----END CERTIFICATE-----",
   1039                                     buf, NULL, 0, &use_len );
   1040          
   1041                      if( ret == 0 )
   1042                      {
   1043                          /*
   1044                           * Was PEM encoded
   1045                           */
   1046                          buflen -= use_len;
   1047                          buf += use_len;
   1048                      }
   1049                      else if( ret == MBEDTLS_ERR_PEM_BAD_INPUT_DATA )
   1050                      {
   1051                          return( ret );
   1052                      }
   1053                      else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
   1054                      {
   1055                          mbedtls_pem_free( &pem );
   1056          
   1057                          /*
   1058                           * PEM header and footer were found
   1059                           */
   1060                          buflen -= use_len;
   1061                          buf += use_len;
   1062          
   1063                          if( first_error == 0 )
   1064                              first_error = ret;
   1065          
   1066                          total_failed++;
   1067                          continue;
   1068                      }
   1069                      else
   1070                          break;
   1071          
   1072                      ret = mbedtls_x509_crt_parse_der( chain, pem.buf, pem.buflen );
   1073          
   1074                      mbedtls_pem_free( &pem );
   1075          
   1076                      if( ret != 0 )
   1077                      {
   1078                          /*
   1079                           * Quit parsing on a memory error
   1080                           */
   1081                          if( ret == MBEDTLS_ERR_X509_ALLOC_FAILED )
   1082                              return( ret );
   1083          
   1084                          if( first_error == 0 )
   \                     ??mbedtls_x509_crt_parse_7: (+1)
   \       0x60   0x2C00             CMP      R4,#+0
   \       0x62   0xD100             BNE.N    ??mbedtls_x509_crt_parse_8
   1085                              first_error = ret;
   \       0x64   0x462C             MOV      R4,R5
   1086          
   1087                          total_failed++;
   \                     ??mbedtls_x509_crt_parse_8: (+1)
   \       0x66   0xF109 0x0901      ADD      R9,R9,#+1
   1088                          continue;
   \                     ??mbedtls_x509_crt_parse_6: (+1)
   \       0x6A   0xF1B8 0x0F02      CMP      R8,#+2
   \       0x6E   0xD342             BCC.N    ??mbedtls_x509_crt_parse_5
   \       0x70   0xA804             ADD      R0,SP,#+16
   \       0x72   0x....'....        BL       mbedtls_pem_init
   \       0x76   0xA803             ADD      R0,SP,#+12
   \       0x78   0x9002             STR      R0,[SP, #+8]
   \       0x7A   0x2000             MOVS     R0,#+0
   \       0x7C   0x9001             STR      R0,[SP, #+4]
   \       0x7E   0x9000             STR      R0,[SP, #+0]
   \       0x80   0x463B             MOV      R3,R7
   \       0x82   0x....'....        LDR.W    R2,??DataTable19_5
   \       0x86   0x....'....        LDR.W    R1,??DataTable19_4
   \       0x8A   0xA804             ADD      R0,SP,#+16
   \       0x8C   0x....'....        BL       mbedtls_pem_read_buffer
   \       0x90   0x0005             MOVS     R5,R0
   \       0x92   0xD111             BNE.N    ??mbedtls_x509_crt_parse_9
   \       0x94   0x9803             LDR      R0,[SP, #+12]
   \       0x96   0xEBA8 0x0800      SUB      R8,R8,R0
   \       0x9A   0x4407             ADD      R7,R7,R0
   \       0x9C   0x9A05             LDR      R2,[SP, #+20]
   \       0x9E   0x9904             LDR      R1,[SP, #+16]
   \       0xA0   0x4630             MOV      R0,R6
   \       0xA2   0x....'....        BL       mbedtls_x509_crt_parse_der
   \       0xA6   0x4605             MOV      R5,R0
   \       0xA8   0xA804             ADD      R0,SP,#+16
   \       0xAA   0x....'....        BL       mbedtls_pem_free
   \       0xAE   0x2D00             CMP      R5,#+0
   \       0xB0   0xD113             BNE.N    ??mbedtls_x509_crt_parse_10
   1089                      }
   1090          
   1091                      success = 1;
   \       0xB2   0xF04F 0x0A01      MOV      R10,#+1
   \       0xB6   0xE7D8             B.N      ??mbedtls_x509_crt_parse_6
   \                     ??mbedtls_x509_crt_parse_9: (+1)
   \       0xB8   0xF515 0x5FA4      CMN      R5,#+5248
   \       0xBC   0xD010             BEQ.N    ??mbedtls_x509_crt_parse_11
   \       0xBE   0xF515 0x5F84      CMN      R5,#+4224
   \       0xC2   0xD018             BEQ.N    ??mbedtls_x509_crt_parse_5
   \       0xC4   0xA804             ADD      R0,SP,#+16
   \       0xC6   0x....'....        BL       mbedtls_pem_free
   \       0xCA   0x9803             LDR      R0,[SP, #+12]
   \       0xCC   0xEBA8 0x0800      SUB      R8,R8,R0
   \       0xD0   0x4407             ADD      R7,R7,R0
   \       0xD2   0x2C00             CMP      R4,#+0
   \       0xD4   0xD1C7             BNE.N    ??mbedtls_x509_crt_parse_8
   \       0xD6   0x462C             MOV      R4,R5
   \       0xD8   0xE7C5             B.N      ??mbedtls_x509_crt_parse_8
   \                     ??mbedtls_x509_crt_parse_10: (+1)
   \       0xDA   0xF515 0x5F22      CMN      R5,#+10368
   \       0xDE   0xD1BF             BNE.N    ??mbedtls_x509_crt_parse_7
   \                     ??mbedtls_x509_crt_parse_11: (+1)
   \       0xE0   0x4628             MOV      R0,R5
   \       0xE2   0xE005             B.N      ??mbedtls_x509_crt_parse_2
   1092                  }
   1093              }
   1094          
   1095              if( success )
   1096                  return( total_failed );
   1097              else if( first_error )
   \                     ??mbedtls_x509_crt_parse_12: (+1)
   \       0xE4   0x2C00             CMP      R4,#+0
   \       0xE6   0xD001             BEQ.N    ??mbedtls_x509_crt_parse_13
   1098                  return( first_error );
   \       0xE8   0x4620             MOV      R0,R4
   \       0xEA   0xE001             B.N      ??mbedtls_x509_crt_parse_2
   1099              else
   1100                  return( MBEDTLS_ERR_X509_CERT_UNKNOWN_FORMAT );
   \                     ??mbedtls_x509_crt_parse_13: (+1)
   \       0xEC   0x....'....        LDR.W    R0,??DataTable19_6  ;; 0xffffd880
   \                     ??mbedtls_x509_crt_parse_2: (+1)
   \       0xF0   0xB008             ADD      SP,SP,#+32
   \       0xF2   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
   \                     ??mbedtls_x509_crt_parse_5: (+1)
   \       0xF6   0xF1BA 0x0F00      CMP      R10,#+0
   \       0xFA   0xD0F3             BEQ.N    ??mbedtls_x509_crt_parse_12
   \       0xFC   0x4648             MOV      R0,R9
   \       0xFE   0xE7F7             B.N      ??mbedtls_x509_crt_parse_2
   1101          #endif /* MBEDTLS_PEM_PARSE_C */
   1102          }
   1103          
   1104          #if defined(MBEDTLS_FS_IO)
   1105          /*
   1106           * Load one or more certificates and add them to the chained list
   1107           */
   1108          int mbedtls_x509_crt_parse_file( mbedtls_x509_crt *chain, const char *path )
   1109          {
   1110              int ret;
   1111              size_t n;
   1112              unsigned char *buf;
   1113          
   1114              if( ( ret = mbedtls_pk_load_file( path, &buf, &n ) ) != 0 )
   1115                  return( ret );
   1116          
   1117              ret = mbedtls_x509_crt_parse( chain, buf, n );
   1118          
   1119              mbedtls_platform_zeroize( buf, n );
   1120              mbedtls_free( buf );
   1121          
   1122              return( ret );
   1123          }
   1124          
   1125          int mbedtls_x509_crt_parse_path( mbedtls_x509_crt *chain, const char *path )
   1126          {
   1127              int ret = 0;
   1128          #if defined(_WIN32) && !defined(EFIX64) && !defined(EFI32)
   1129              int w_ret;
   1130              WCHAR szDir[MAX_PATH];
   1131              char filename[MAX_PATH];
   1132              char *p;
   1133              size_t len = strlen( path );
   1134          
   1135              WIN32_FIND_DATAW file_data;
   1136              HANDLE hFind;
   1137          
   1138              if( len > MAX_PATH - 3 )
   1139                  return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   1140          
   1141              memset( szDir, 0, sizeof(szDir) );
   1142              memset( filename, 0, MAX_PATH );
   1143              memcpy( filename, path, len );
   1144              filename[len++] = '\\';
   1145              p = filename + len;
   1146              filename[len++] = '*';
   1147          
   1148              w_ret = MultiByteToWideChar( CP_ACP, 0, filename, (int)len, szDir,
   1149                                           MAX_PATH - 3 );
   1150              if( w_ret == 0 )
   1151                  return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   1152          
   1153              hFind = FindFirstFileW( szDir, &file_data );
   1154              if( hFind == INVALID_HANDLE_VALUE )
   1155                  return( MBEDTLS_ERR_X509_FILE_IO_ERROR );
   1156          
   1157              len = MAX_PATH - len;
   1158              do
   1159              {
   1160                  memset( p, 0, len );
   1161          
   1162                  if( file_data.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY )
   1163                      continue;
   1164          
   1165                  w_ret = WideCharToMultiByte( CP_ACP, 0, file_data.cFileName,
   1166                                               lstrlenW( file_data.cFileName ),
   1167                                               p, (int) len - 1,
   1168                                               NULL, NULL );
   1169                  if( w_ret == 0 )
   1170                  {
   1171                      ret = MBEDTLS_ERR_X509_FILE_IO_ERROR;
   1172                      goto cleanup;
   1173                  }
   1174          
   1175                  w_ret = mbedtls_x509_crt_parse_file( chain, filename );
   1176                  if( w_ret < 0 )
   1177                      ret++;
   1178                  else
   1179                      ret += w_ret;
   1180              }
   1181              while( FindNextFileW( hFind, &file_data ) != 0 );
   1182          
   1183              if( GetLastError() != ERROR_NO_MORE_FILES )
   1184                  ret = MBEDTLS_ERR_X509_FILE_IO_ERROR;
   1185          
   1186          cleanup:
   1187              FindClose( hFind );
   1188          #else /* _WIN32 */
   1189              int t_ret;
   1190              int snp_ret;
   1191              struct stat sb;
   1192              struct dirent *entry;
   1193              char entry_name[MBEDTLS_X509_MAX_FILE_PATH_LEN];
   1194              DIR *dir = opendir( path );
   1195          
   1196              if( dir == NULL )
   1197                  return( MBEDTLS_ERR_X509_FILE_IO_ERROR );
   1198          
   1199          #if defined(MBEDTLS_THREADING_C)
   1200              if( ( ret = mbedtls_mutex_lock( &mbedtls_threading_readdir_mutex ) ) != 0 )
   1201              {
   1202                  closedir( dir );
   1203                  return( ret );
   1204              }
   1205          #endif /* MBEDTLS_THREADING_C */
   1206          
   1207              while( ( entry = readdir( dir ) ) != NULL )
   1208              {
   1209                  snp_ret = mbedtls_snprintf( entry_name, sizeof entry_name,
   1210                                              "%s/%s", path, entry->d_name );
   1211          
   1212                  if( snp_ret < 0 || (size_t)snp_ret >= sizeof entry_name )
   1213                  {
   1214                      ret = MBEDTLS_ERR_X509_BUFFER_TOO_SMALL;
   1215                      goto cleanup;
   1216                  }
   1217                  else if( stat( entry_name, &sb ) == -1 )
   1218                  {
   1219                      ret = MBEDTLS_ERR_X509_FILE_IO_ERROR;
   1220                      goto cleanup;
   1221                  }
   1222          
   1223                  if( !S_ISREG( sb.st_mode ) )
   1224                      continue;
   1225          
   1226                  // Ignore parse errors
   1227                  //
   1228                  t_ret = mbedtls_x509_crt_parse_file( chain, entry_name );
   1229                  if( t_ret < 0 )
   1230                      ret++;
   1231                  else
   1232                      ret += t_ret;
   1233              }
   1234          
   1235          cleanup:
   1236              closedir( dir );
   1237          
   1238          #if defined(MBEDTLS_THREADING_C)
   1239              if( mbedtls_mutex_unlock( &mbedtls_threading_readdir_mutex ) != 0 )
   1240                  ret = MBEDTLS_ERR_THREADING_MUTEX_ERROR;
   1241          #endif /* MBEDTLS_THREADING_C */
   1242          
   1243          #endif /* _WIN32 */
   1244          
   1245              return( ret );
   1246          }
   1247          #endif /* MBEDTLS_FS_IO */
   1248          

   \                                 In section .text, align 2, keep-with-next
   1249          static int x509_info_subject_alt_name( char **buf, size_t *size,
   1250                                                 const mbedtls_x509_sequence *subject_alt_name )
   1251          {
   \                     x509_info_subject_alt_name: (+1)
   \        0x0   0xB4F0             PUSH     {R4-R7}
   1252              size_t i;
   1253              size_t n = *size;
   \        0x2   0x680D             LDR      R5,[R1, #+0]
   1254              char *p = *buf;
   \        0x4   0x6804             LDR      R4,[R0, #+0]
   1255              const mbedtls_x509_sequence *cur = subject_alt_name;
   1256              const char *sep = "";
   \        0x6   0x....             ADR.N    R6,??DataTable13  ;; ""
   1257              size_t sep_len = 0;
   \        0x8   0x2700             MOVS     R7,#+0
   \        0xA   0xE00A             B.N      ??x509_info_subject_alt_name_0
   1258          
   1259              while( cur != NULL )
   1260              {
   1261                  if( cur->buf.len + sep_len >= n )
   1262                  {
   1263                      *p = '\0';
   1264                      return( MBEDTLS_ERR_X509_BUFFER_TOO_SMALL );
   1265                  }
   1266          
   1267                  n -= cur->buf.len + sep_len;
   1268                  for( i = 0; i < sep_len; i++ )
   1269                      *p++ = sep[i];
   1270                  for( i = 0; i < cur->buf.len; i++ )
   1271                      *p++ = cur->buf.p[i];
   \                     ??x509_info_subject_alt_name_1: (+1)
   \        0xC   0x6896             LDR      R6,[R2, #+8]
   \        0xE   0x5CF6             LDRB     R6,[R6, R3]
   \       0x10   0xF804 0x6B01      STRB     R6,[R4], #+1
   \       0x14   0x1C5B             ADDS     R3,R3,#+1
   \                     ??x509_info_subject_alt_name_2: (+1)
   \       0x16   0x6856             LDR      R6,[R2, #+4]
   \       0x18   0x42B3             CMP      R3,R6
   \       0x1A   0xD3F7             BCC.N    ??x509_info_subject_alt_name_1
   1272          
   1273                  sep = ", ";
   \       0x1C   0x....             ADR.N    R6,??DataTable13_1  ;; 0x2C, 0x20, 0x00, 0x00
   1274                  sep_len = 2;
   \       0x1E   0x2702             MOVS     R7,#+2
   1275          
   1276                  cur = cur->next;
   \       0x20   0x68D2             LDR      R2,[R2, #+12]
   \                     ??x509_info_subject_alt_name_0: (+1)
   \       0x22   0x2A00             CMP      R2,#+0
   \       0x24   0xD016             BEQ.N    ??x509_info_subject_alt_name_3
   \       0x26   0x6853             LDR      R3,[R2, #+4]
   \       0x28   0x18FB             ADDS     R3,R7,R3
   \       0x2A   0x42AB             CMP      R3,R5
   \       0x2C   0xD204             BCS.N    ??x509_info_subject_alt_name_4
   \       0x2E   0x6853             LDR      R3,[R2, #+4]
   \       0x30   0x1AED             SUBS     R5,R5,R3
   \       0x32   0x1BED             SUBS     R5,R5,R7
   \       0x34   0x2300             MOVS     R3,#+0
   \       0x36   0xE009             B.N      ??x509_info_subject_alt_name_5
   \                     ??x509_info_subject_alt_name_4: (+1)
   \       0x38   0x2000             MOVS     R0,#+0
   \       0x3A   0x7020             STRB     R0,[R4, #+0]
   \       0x3C   0x....'....        LDR.W    R0,??DataTable19_7  ;; 0xffffd680
   \       0x40   0xE00D             B.N      ??x509_info_subject_alt_name_6
   \                     ??x509_info_subject_alt_name_7: (+1)
   \       0x42   0xF816 0xC003      LDRB     R12,[R6, R3]
   \       0x46   0xF804 0xCB01      STRB     R12,[R4], #+1
   \       0x4A   0x1C5B             ADDS     R3,R3,#+1
   \                     ??x509_info_subject_alt_name_5: (+1)
   \       0x4C   0x42BB             CMP      R3,R7
   \       0x4E   0xD3F8             BCC.N    ??x509_info_subject_alt_name_7
   \       0x50   0x2300             MOVS     R3,#+0
   \       0x52   0xE7E0             B.N      ??x509_info_subject_alt_name_2
   1277              }
   1278          
   1279              *p = '\0';
   \                     ??x509_info_subject_alt_name_3: (+1)
   \       0x54   0x2200             MOVS     R2,#+0
   \       0x56   0x7022             STRB     R2,[R4, #+0]
   1280          
   1281              *size = n;
   \       0x58   0x600D             STR      R5,[R1, #+0]
   1282              *buf = p;
   \       0x5A   0x6004             STR      R4,[R0, #+0]
   1283          
   1284              return( 0 );
   \       0x5C   0x4610             MOV      R0,R2
   \                     ??x509_info_subject_alt_name_6: (+1)
   \       0x5E   0xBCF0             POP      {R4-R7}
   \       0x60   0x4770             BX       LR               ;; return
   1285          }
   1286          
   1287          #define PRINT_ITEM(i)                           \
   1288              {                                           \
   1289                  ret = mbedtls_snprintf( p, n, "%s" i, sep );    \
   1290                  MBEDTLS_X509_SAFE_SNPRINTF;                        \
   1291                  sep = ", ";                             \
   1292              }
   1293          
   1294          #define CERT_TYPE(type,name)                    \
   1295              if( ns_cert_type & type )                   \
   1296                  PRINT_ITEM( name );
   1297          

   \                                 In section .text, align 2, keep-with-next
   1298          static int x509_info_cert_type( char **buf, size_t *size,
   1299                                          unsigned char ns_cert_type )
   1300          {
   \                     x509_info_cert_type: (+1)
   \        0x0   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \        0x4   0x4604             MOV      R4,R0
   \        0x6   0x460D             MOV      R5,R1
   \        0x8   0x4616             MOV      R6,R2
   1301              int ret;
   1302              size_t n = *size;
   \        0xA   0x682F             LDR      R7,[R5, #+0]
   1303              char *p = *buf;
   \        0xC   0xF8D4 0x8000      LDR      R8,[R4, #+0]
   1304              const char *sep = "";
   \       0x10   0x....             ADR.N    R3,??DataTable13  ;; ""
   1305          
   1306              CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT,         "SSL Client" );
   \       0x12   0x0630             LSLS     R0,R6,#+24
   \       0x14   0xD50C             BPL.N    ??x509_info_cert_type_0
   \       0x16   0x....'....        LDR.W    R2,??DataTable19_8
   \       0x1A   0x4639             MOV      R1,R7
   \       0x1C   0x4640             MOV      R0,R8
   \       0x1E   0x....'....        BL       snprintf
   \       0x22   0x2800             CMP      R0,#+0
   \       0x24   0xD46A             BMI.N    ??x509_info_cert_type_1
   \       0x26   0x42B8             CMP      R0,R7
   \       0x28   0xD268             BCS.N    ??x509_info_cert_type_1
   \       0x2A   0x1A3F             SUBS     R7,R7,R0
   \       0x2C   0x4480             ADD      R8,R8,R0
   \       0x2E   0x....             ADR.N    R3,??DataTable13_1  ;; 0x2C, 0x20, 0x00, 0x00
   1307              CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_SERVER,         "SSL Server" );
   \                     ??x509_info_cert_type_0: (+1)
   \       0x30   0x0670             LSLS     R0,R6,#+25
   \       0x32   0xD50C             BPL.N    ??x509_info_cert_type_2
   \       0x34   0x....'....        LDR.W    R2,??DataTable19_9
   \       0x38   0x4639             MOV      R1,R7
   \       0x3A   0x4640             MOV      R0,R8
   \       0x3C   0x....'....        BL       snprintf
   \       0x40   0x2800             CMP      R0,#+0
   \       0x42   0xD45B             BMI.N    ??x509_info_cert_type_1
   \       0x44   0x42B8             CMP      R0,R7
   \       0x46   0xD259             BCS.N    ??x509_info_cert_type_1
   \       0x48   0x1A3F             SUBS     R7,R7,R0
   \       0x4A   0x4480             ADD      R8,R8,R0
   \       0x4C   0x....             ADR.N    R3,??DataTable13_1  ;; 0x2C, 0x20, 0x00, 0x00
   1308              CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_EMAIL,              "Email" );
   \                     ??x509_info_cert_type_2: (+1)
   \       0x4E   0x06B0             LSLS     R0,R6,#+26
   \       0x50   0xD50C             BPL.N    ??x509_info_cert_type_3
   \       0x52   0x....'....        LDR.W    R2,??DataTable19_10
   \       0x56   0x4639             MOV      R1,R7
   \       0x58   0x4640             MOV      R0,R8
   \       0x5A   0x....'....        BL       snprintf
   \       0x5E   0x2800             CMP      R0,#+0
   \       0x60   0xD44C             BMI.N    ??x509_info_cert_type_1
   \       0x62   0x42B8             CMP      R0,R7
   \       0x64   0xD24A             BCS.N    ??x509_info_cert_type_1
   \       0x66   0x1A3F             SUBS     R7,R7,R0
   \       0x68   0x4480             ADD      R8,R8,R0
   \       0x6A   0x....             ADR.N    R3,??DataTable13_1  ;; 0x2C, 0x20, 0x00, 0x00
   1309              CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING,     "Object Signing" );
   \                     ??x509_info_cert_type_3: (+1)
   \       0x6C   0x06F0             LSLS     R0,R6,#+27
   \       0x6E   0xD50C             BPL.N    ??x509_info_cert_type_4
   \       0x70   0x....'....        LDR.W    R2,??DataTable19_11
   \       0x74   0x4639             MOV      R1,R7
   \       0x76   0x4640             MOV      R0,R8
   \       0x78   0x....'....        BL       snprintf
   \       0x7C   0x2800             CMP      R0,#+0
   \       0x7E   0xD43D             BMI.N    ??x509_info_cert_type_1
   \       0x80   0x42B8             CMP      R0,R7
   \       0x82   0xD23B             BCS.N    ??x509_info_cert_type_1
   \       0x84   0x1A3F             SUBS     R7,R7,R0
   \       0x86   0x4480             ADD      R8,R8,R0
   \       0x88   0x....             ADR.N    R3,??DataTable13_1  ;; 0x2C, 0x20, 0x00, 0x00
   1310              CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_RESERVED,           "Reserved" );
   \                     ??x509_info_cert_type_4: (+1)
   \       0x8A   0x0730             LSLS     R0,R6,#+28
   \       0x8C   0xD50C             BPL.N    ??x509_info_cert_type_5
   \       0x8E   0x....'....        LDR.W    R2,??DataTable19_12
   \       0x92   0x4639             MOV      R1,R7
   \       0x94   0x4640             MOV      R0,R8
   \       0x96   0x....'....        BL       snprintf
   \       0x9A   0x2800             CMP      R0,#+0
   \       0x9C   0xD42E             BMI.N    ??x509_info_cert_type_1
   \       0x9E   0x42B8             CMP      R0,R7
   \       0xA0   0xD22C             BCS.N    ??x509_info_cert_type_1
   \       0xA2   0x1A3F             SUBS     R7,R7,R0
   \       0xA4   0x4480             ADD      R8,R8,R0
   \       0xA6   0x....             ADR.N    R3,??DataTable13_1  ;; 0x2C, 0x20, 0x00, 0x00
   1311              CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CA,             "SSL CA" );
   \                     ??x509_info_cert_type_5: (+1)
   \       0xA8   0x0770             LSLS     R0,R6,#+29
   \       0xAA   0xD50C             BPL.N    ??x509_info_cert_type_6
   \       0xAC   0x....'....        LDR.W    R2,??DataTable19_13
   \       0xB0   0x4639             MOV      R1,R7
   \       0xB2   0x4640             MOV      R0,R8
   \       0xB4   0x....'....        BL       snprintf
   \       0xB8   0x2800             CMP      R0,#+0
   \       0xBA   0xD41F             BMI.N    ??x509_info_cert_type_1
   \       0xBC   0x42B8             CMP      R0,R7
   \       0xBE   0xD21D             BCS.N    ??x509_info_cert_type_1
   \       0xC0   0x1A3F             SUBS     R7,R7,R0
   \       0xC2   0x4480             ADD      R8,R8,R0
   \       0xC4   0x....             ADR.N    R3,??DataTable13_1  ;; 0x2C, 0x20, 0x00, 0x00
   1312              CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_EMAIL_CA,           "Email CA" );
   \                     ??x509_info_cert_type_6: (+1)
   \       0xC6   0x07B0             LSLS     R0,R6,#+30
   \       0xC8   0xD50C             BPL.N    ??x509_info_cert_type_7
   \       0xCA   0x....'....        LDR.W    R2,??DataTable19_14
   \       0xCE   0x4639             MOV      R1,R7
   \       0xD0   0x4640             MOV      R0,R8
   \       0xD2   0x....'....        BL       snprintf
   \       0xD6   0x2800             CMP      R0,#+0
   \       0xD8   0xD410             BMI.N    ??x509_info_cert_type_1
   \       0xDA   0x42B8             CMP      R0,R7
   \       0xDC   0xD20E             BCS.N    ??x509_info_cert_type_1
   \       0xDE   0x1A3F             SUBS     R7,R7,R0
   \       0xE0   0x4480             ADD      R8,R8,R0
   \       0xE2   0x....             ADR.N    R3,??DataTable13_1  ;; 0x2C, 0x20, 0x00, 0x00
   1313              CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING_CA,  "Object Signing CA" );
   \                     ??x509_info_cert_type_7: (+1)
   \       0xE4   0x07F0             LSLS     R0,R6,#+31
   \       0xE6   0xD50E             BPL.N    ??x509_info_cert_type_8
   \       0xE8   0x....'....        LDR.W    R2,??DataTable19_15
   \       0xEC   0x4639             MOV      R1,R7
   \       0xEE   0x4640             MOV      R0,R8
   \       0xF0   0x....'....        BL       snprintf
   \       0xF4   0x2800             CMP      R0,#+0
   \       0xF6   0xD401             BMI.N    ??x509_info_cert_type_1
   \       0xF8   0x42B8             CMP      R0,R7
   \       0xFA   0xD302             BCC.N    ??x509_info_cert_type_9
   \                     ??x509_info_cert_type_1: (+1)
   \       0xFC   0x....'....        LDR.W    R0,??DataTable19_7  ;; 0xffffd680
   \      0x100   0xE005             B.N      ??x509_info_cert_type_10
   \                     ??x509_info_cert_type_9: (+1)
   \      0x102   0x1A3F             SUBS     R7,R7,R0
   \      0x104   0x4480             ADD      R8,R8,R0
   1314          
   1315              *size = n;
   \                     ??x509_info_cert_type_8: (+1)
   \      0x106   0x602F             STR      R7,[R5, #+0]
   1316              *buf = p;
   \      0x108   0xF8C4 0x8000      STR      R8,[R4, #+0]
   1317          
   1318              return( 0 );
   \      0x10C   0x2000             MOVS     R0,#+0
   \                     ??x509_info_cert_type_10: (+1)
   \      0x10E   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   1319          }
   1320          
   1321          #define KEY_USAGE(code,name)    \
   1322              if( key_usage & code )      \
   1323                  PRINT_ITEM( name );
   1324          

   \                                 In section .text, align 2, keep-with-next
   1325          static int x509_info_key_usage( char **buf, size_t *size,
   1326                                          unsigned int key_usage )
   1327          {
   \                     x509_info_key_usage: (+1)
   \        0x0   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \        0x4   0x4604             MOV      R4,R0
   \        0x6   0x460D             MOV      R5,R1
   \        0x8   0x4616             MOV      R6,R2
   1328              int ret;
   1329              size_t n = *size;
   \        0xA   0x682F             LDR      R7,[R5, #+0]
   1330              char *p = *buf;
   \        0xC   0xF8D4 0x8000      LDR      R8,[R4, #+0]
   1331              const char *sep = "";
   \       0x10   0x....             ADR.N    R3,??DataTable15_2  ;; ""
   1332          
   1333              KEY_USAGE( MBEDTLS_X509_KU_DIGITAL_SIGNATURE,    "Digital Signature" );
   \       0x12   0x0630             LSLS     R0,R6,#+24
   \       0x14   0xD50C             BPL.N    ??x509_info_key_usage_0
   \       0x16   0x....'....        LDR.W    R2,??DataTable19_16
   \       0x1A   0x4639             MOV      R1,R7
   \       0x1C   0x4640             MOV      R0,R8
   \       0x1E   0x....'....        BL       snprintf
   \       0x22   0x2800             CMP      R0,#+0
   \       0x24   0xD479             BMI.N    ??x509_info_key_usage_1
   \       0x26   0x42B8             CMP      R0,R7
   \       0x28   0xD277             BCS.N    ??x509_info_key_usage_1
   \       0x2A   0x1A3F             SUBS     R7,R7,R0
   \       0x2C   0x4480             ADD      R8,R8,R0
   \       0x2E   0x....             ADR.N    R3,??DataTable15_3  ;; 0x2C, 0x20, 0x00, 0x00
   1334              KEY_USAGE( MBEDTLS_X509_KU_NON_REPUDIATION,      "Non Repudiation" );
   \                     ??x509_info_key_usage_0: (+1)
   \       0x30   0x0670             LSLS     R0,R6,#+25
   \       0x32   0xD50C             BPL.N    ??x509_info_key_usage_2
   \       0x34   0x....'....        LDR.W    R2,??DataTable19_17
   \       0x38   0x4639             MOV      R1,R7
   \       0x3A   0x4640             MOV      R0,R8
   \       0x3C   0x....'....        BL       snprintf
   \       0x40   0x2800             CMP      R0,#+0
   \       0x42   0xD46A             BMI.N    ??x509_info_key_usage_1
   \       0x44   0x42B8             CMP      R0,R7
   \       0x46   0xD268             BCS.N    ??x509_info_key_usage_1
   \       0x48   0x1A3F             SUBS     R7,R7,R0
   \       0x4A   0x4480             ADD      R8,R8,R0
   \       0x4C   0x....             ADR.N    R3,??DataTable15_3  ;; 0x2C, 0x20, 0x00, 0x00
   1335              KEY_USAGE( MBEDTLS_X509_KU_KEY_ENCIPHERMENT,     "Key Encipherment" );
   \                     ??x509_info_key_usage_2: (+1)
   \       0x4E   0x06B0             LSLS     R0,R6,#+26
   \       0x50   0xD50C             BPL.N    ??x509_info_key_usage_3
   \       0x52   0x....'....        LDR.W    R2,??DataTable19_18
   \       0x56   0x4639             MOV      R1,R7
   \       0x58   0x4640             MOV      R0,R8
   \       0x5A   0x....'....        BL       snprintf
   \       0x5E   0x2800             CMP      R0,#+0
   \       0x60   0xD45B             BMI.N    ??x509_info_key_usage_1
   \       0x62   0x42B8             CMP      R0,R7
   \       0x64   0xD259             BCS.N    ??x509_info_key_usage_1
   \       0x66   0x1A3F             SUBS     R7,R7,R0
   \       0x68   0x4480             ADD      R8,R8,R0
   \       0x6A   0x....             ADR.N    R3,??DataTable15_3  ;; 0x2C, 0x20, 0x00, 0x00
   1336              KEY_USAGE( MBEDTLS_X509_KU_DATA_ENCIPHERMENT,    "Data Encipherment" );
   \                     ??x509_info_key_usage_3: (+1)
   \       0x6C   0x06F0             LSLS     R0,R6,#+27
   \       0x6E   0xD50C             BPL.N    ??x509_info_key_usage_4
   \       0x70   0x....'....        LDR.W    R2,??DataTable19_19
   \       0x74   0x4639             MOV      R1,R7
   \       0x76   0x4640             MOV      R0,R8
   \       0x78   0x....'....        BL       snprintf
   \       0x7C   0x2800             CMP      R0,#+0
   \       0x7E   0xD44C             BMI.N    ??x509_info_key_usage_1
   \       0x80   0x42B8             CMP      R0,R7
   \       0x82   0xD24A             BCS.N    ??x509_info_key_usage_1
   \       0x84   0x1A3F             SUBS     R7,R7,R0
   \       0x86   0x4480             ADD      R8,R8,R0
   \       0x88   0x....             ADR.N    R3,??DataTable15_3  ;; 0x2C, 0x20, 0x00, 0x00
   1337              KEY_USAGE( MBEDTLS_X509_KU_KEY_AGREEMENT,        "Key Agreement" );
   \                     ??x509_info_key_usage_4: (+1)
   \       0x8A   0x0730             LSLS     R0,R6,#+28
   \       0x8C   0xD50C             BPL.N    ??x509_info_key_usage_5
   \       0x8E   0x....'....        LDR.W    R2,??DataTable19_20
   \       0x92   0x4639             MOV      R1,R7
   \       0x94   0x4640             MOV      R0,R8
   \       0x96   0x....'....        BL       snprintf
   \       0x9A   0x2800             CMP      R0,#+0
   \       0x9C   0xD43D             BMI.N    ??x509_info_key_usage_1
   \       0x9E   0x42B8             CMP      R0,R7
   \       0xA0   0xD23B             BCS.N    ??x509_info_key_usage_1
   \       0xA2   0x1A3F             SUBS     R7,R7,R0
   \       0xA4   0x4480             ADD      R8,R8,R0
   \       0xA6   0x....             ADR.N    R3,??DataTable15_3  ;; 0x2C, 0x20, 0x00, 0x00
   1338              KEY_USAGE( MBEDTLS_X509_KU_KEY_CERT_SIGN,        "Key Cert Sign" );
   \                     ??x509_info_key_usage_5: (+1)
   \       0xA8   0x0770             LSLS     R0,R6,#+29
   \       0xAA   0xD50C             BPL.N    ??x509_info_key_usage_6
   \       0xAC   0x....'....        LDR.W    R2,??DataTable19_21
   \       0xB0   0x4639             MOV      R1,R7
   \       0xB2   0x4640             MOV      R0,R8
   \       0xB4   0x....'....        BL       snprintf
   \       0xB8   0x2800             CMP      R0,#+0
   \       0xBA   0xD42E             BMI.N    ??x509_info_key_usage_1
   \       0xBC   0x42B8             CMP      R0,R7
   \       0xBE   0xD22C             BCS.N    ??x509_info_key_usage_1
   \       0xC0   0x1A3F             SUBS     R7,R7,R0
   \       0xC2   0x4480             ADD      R8,R8,R0
   \       0xC4   0x....             ADR.N    R3,??DataTable15_3  ;; 0x2C, 0x20, 0x00, 0x00
   1339              KEY_USAGE( MBEDTLS_X509_KU_CRL_SIGN,             "CRL Sign" );
   \                     ??x509_info_key_usage_6: (+1)
   \       0xC6   0x07B0             LSLS     R0,R6,#+30
   \       0xC8   0xD50C             BPL.N    ??x509_info_key_usage_7
   \       0xCA   0x....'....        LDR.W    R2,??DataTable20
   \       0xCE   0x4639             MOV      R1,R7
   \       0xD0   0x4640             MOV      R0,R8
   \       0xD2   0x....'....        BL       snprintf
   \       0xD6   0x2800             CMP      R0,#+0
   \       0xD8   0xD41F             BMI.N    ??x509_info_key_usage_1
   \       0xDA   0x42B8             CMP      R0,R7
   \       0xDC   0xD21D             BCS.N    ??x509_info_key_usage_1
   \       0xDE   0x1A3F             SUBS     R7,R7,R0
   \       0xE0   0x4480             ADD      R8,R8,R0
   \       0xE2   0x....             ADR.N    R3,??DataTable15_3  ;; 0x2C, 0x20, 0x00, 0x00
   1340              KEY_USAGE( MBEDTLS_X509_KU_ENCIPHER_ONLY,        "Encipher Only" );
   \                     ??x509_info_key_usage_7: (+1)
   \       0xE4   0x07F0             LSLS     R0,R6,#+31
   \       0xE6   0xD50C             BPL.N    ??x509_info_key_usage_8
   \       0xE8   0x....'....        LDR.W    R2,??DataTable20_1
   \       0xEC   0x4639             MOV      R1,R7
   \       0xEE   0x4640             MOV      R0,R8
   \       0xF0   0x....'....        BL       snprintf
   \       0xF4   0x2800             CMP      R0,#+0
   \       0xF6   0xD410             BMI.N    ??x509_info_key_usage_1
   \       0xF8   0x42B8             CMP      R0,R7
   \       0xFA   0xD20E             BCS.N    ??x509_info_key_usage_1
   \       0xFC   0x1A3F             SUBS     R7,R7,R0
   \       0xFE   0x4480             ADD      R8,R8,R0
   \      0x100   0x....             ADR.N    R3,??DataTable15_3  ;; 0x2C, 0x20, 0x00, 0x00
   1341              KEY_USAGE( MBEDTLS_X509_KU_DECIPHER_ONLY,        "Decipher Only" );
   \                     ??x509_info_key_usage_8: (+1)
   \      0x102   0x0430             LSLS     R0,R6,#+16
   \      0x104   0xD50E             BPL.N    ??x509_info_key_usage_9
   \      0x106   0x....'....        LDR.W    R2,??DataTable20_2
   \      0x10A   0x4639             MOV      R1,R7
   \      0x10C   0x4640             MOV      R0,R8
   \      0x10E   0x....'....        BL       snprintf
   \      0x112   0x2800             CMP      R0,#+0
   \      0x114   0xD401             BMI.N    ??x509_info_key_usage_1
   \      0x116   0x42B8             CMP      R0,R7
   \      0x118   0xD302             BCC.N    ??x509_info_key_usage_10
   \                     ??x509_info_key_usage_1: (+1)
   \      0x11A   0x....'....        LDR.W    R0,??DataTable19_7  ;; 0xffffd680
   \      0x11E   0xE005             B.N      ??x509_info_key_usage_11
   \                     ??x509_info_key_usage_10: (+1)
   \      0x120   0x1A3F             SUBS     R7,R7,R0
   \      0x122   0x4480             ADD      R8,R8,R0
   1342          
   1343              *size = n;
   \                     ??x509_info_key_usage_9: (+1)
   \      0x124   0x602F             STR      R7,[R5, #+0]
   1344              *buf = p;
   \      0x126   0xF8C4 0x8000      STR      R8,[R4, #+0]
   1345          
   1346              return( 0 );
   \      0x12A   0x2000             MOVS     R0,#+0
   \                     ??x509_info_key_usage_11: (+1)
   \      0x12C   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   1347          }
   1348          

   \                                 In section .text, align 2, keep-with-next
   1349          static int x509_info_ext_key_usage( char **buf, size_t *size,
   1350                                              const mbedtls_x509_sequence *extended_key_usage )
   1351          {
   \                     x509_info_ext_key_usage: (+1)
   \        0x0   0xE92D 0x43FE      PUSH     {R1-R9,LR}
   \        0x4   0x4605             MOV      R5,R0
   \        0x6   0x460E             MOV      R6,R1
   \        0x8   0x4614             MOV      R4,R2
   1352              int ret;
   1353              const char *desc;
   1354              size_t n = *size;
   \        0xA   0x6837             LDR      R7,[R6, #+0]
   1355              char *p = *buf;
   \        0xC   0xF8D5 0x8000      LDR      R8,[R5, #+0]
   1356              const mbedtls_x509_sequence *cur = extended_key_usage;
   1357              const char *sep = "";
   \       0x10   0x....'....        ADR.W    R9,??DataTable15_2  ;; ""
   1358          
   1359              while( cur != NULL )
   \                     ??x509_info_ext_key_usage_0: (+1)
   \       0x14   0x2C00             CMP      R4,#+0
   \       0x16   0xD01A             BEQ.N    ??x509_info_ext_key_usage_1
   1360              {
   1361                  if( mbedtls_oid_get_extended_key_usage( &cur->buf, &desc ) != 0 )
   \       0x18   0xA901             ADD      R1,SP,#+4
   \       0x1A   0x4620             MOV      R0,R4
   \       0x1C   0x....'....        BL       mbedtls_oid_get_extended_key_usage
   \       0x20   0x2800             CMP      R0,#+0
   \       0x22   0xD001             BEQ.N    ??x509_info_ext_key_usage_2
   1362                      desc = "???";
   \       0x24   0x....             ADR.N    R0,??DataTable15_6  ;; "???"
   \       0x26   0x9001             STR      R0,[SP, #+4]
   1363          
   1364                  ret = mbedtls_snprintf( p, n, "%s%s", sep, desc );
   \                     ??x509_info_ext_key_usage_2: (+1)
   \       0x28   0x9801             LDR      R0,[SP, #+4]
   \       0x2A   0x9000             STR      R0,[SP, #+0]
   \       0x2C   0x464B             MOV      R3,R9
   \       0x2E   0x....'....        LDR.W    R2,??DataTable21
   \       0x32   0x4639             MOV      R1,R7
   \       0x34   0x4640             MOV      R0,R8
   \       0x36   0x....'....        BL       snprintf
   1365                  MBEDTLS_X509_SAFE_SNPRINTF;
   \       0x3A   0x2800             CMP      R0,#+0
   \       0x3C   0xD40D             BMI.N    ??x509_info_ext_key_usage_3
   \       0x3E   0x42B8             CMP      R0,R7
   \       0x40   0xD20B             BCS.N    ??x509_info_ext_key_usage_3
   \       0x42   0x1A3F             SUBS     R7,R7,R0
   \       0x44   0x4480             ADD      R8,R8,R0
   1366          
   1367                  sep = ", ";
   \       0x46   0x....'....        ADR.W    R9,??DataTable15_3  ;; 0x2C, 0x20, 0x00, 0x00
   1368          
   1369                  cur = cur->next;
   \       0x4A   0x68E4             LDR      R4,[R4, #+12]
   \       0x4C   0xE7E2             B.N      ??x509_info_ext_key_usage_0
   1370              }
   1371          
   1372              *size = n;
   \                     ??x509_info_ext_key_usage_1: (+1)
   \       0x4E   0x6037             STR      R7,[R6, #+0]
   1373              *buf = p;
   \       0x50   0xF8C5 0x8000      STR      R8,[R5, #+0]
   1374          
   1375              return( 0 );
   \       0x54   0x2000             MOVS     R0,#+0
   \                     ??x509_info_ext_key_usage_4: (+1)
   \       0x56   0xE8BD 0x83FE      POP      {R1-R9,PC}       ;; return
   \                     ??x509_info_ext_key_usage_3: (+1)
   \       0x5A   0x....'....        LDR.W    R0,??DataTable19_7  ;; 0xffffd680
   \       0x5E   0xE7FA             B.N      ??x509_info_ext_key_usage_4
   1376          }
   1377          
   1378          /*
   1379           * Return an informational string about the certificate.
   1380           */
   1381          #define BEFORE_COLON    18
   1382          #define BC              "18"

   \                                 In section .text, align 2, keep-with-next
   1383          int mbedtls_x509_crt_info( char *buf, size_t size, const char *prefix,
   1384                             const mbedtls_x509_crt *crt )
   1385          {
   \                     mbedtls_x509_crt_info: (+1)
   \        0x0   0xB578             PUSH     {R3-R6,LR}
   \        0x2   0xB08D             SUB      SP,SP,#+52
   \        0x4   0x460D             MOV      R5,R1
   \        0x6   0x4616             MOV      R6,R2
   \        0x8   0x001C             MOVS     R4,R3
   1386              int ret;
   1387              size_t n;
   1388              char *p;
   1389              char key_size_str[BEFORE_COLON];
   1390          
   1391              p = buf;
   \        0xA   0x9007             STR      R0,[SP, #+28]
   1392              n = size;
   \        0xC   0x9506             STR      R5,[SP, #+24]
   1393          
   1394              if( NULL == crt )
   \        0xE   0xD108             BNE.N    ??mbedtls_x509_crt_info_0
   1395              {
   1396                  ret = mbedtls_snprintf( p, n, "\nCertificate is uninitialised!\n" );
   \       0x10   0x....'....        LDR.W    R2,??DataTable21_1
   \       0x14   0x9807             LDR      R0,[SP, #+28]
   \       0x16   0x....'....        BL       snprintf
   1397                  MBEDTLS_X509_SAFE_SNPRINTF;
   \       0x1A   0x2800             CMP      R0,#+0
   \       0x1C   0xF100 0x81D2      BMI.W    ??mbedtls_x509_crt_info_1
   \       0x20   0xE1CD             B.N      ??mbedtls_x509_crt_info_2
   1398          
   1399                  return( (int) ( size - n ) );
   1400              }
   1401          
   1402              ret = mbedtls_snprintf( p, n, "%scert. version     : %d\n",
   1403                                         prefix, crt->version );
   \                     ??mbedtls_x509_crt_info_0: (+1)
   \       0x22   0x69A0             LDR      R0,[R4, #+24]
   \       0x24   0x9000             STR      R0,[SP, #+0]
   \       0x26   0x4633             MOV      R3,R6
   \       0x28   0x....'....        LDR.W    R2,??DataTable22
   \       0x2C   0x9906             LDR      R1,[SP, #+24]
   \       0x2E   0x9807             LDR      R0,[SP, #+28]
   \       0x30   0x....'....        BL       snprintf
   1404              MBEDTLS_X509_SAFE_SNPRINTF;
   \       0x34   0x2800             CMP      R0,#+0
   \       0x36   0xF100 0x81C5      BMI.W    ??mbedtls_x509_crt_info_1
   \       0x3A   0x9906             LDR      R1,[SP, #+24]
   \       0x3C   0x4288             CMP      R0,R1
   \       0x3E   0xF080 0x81C1      BCS.W    ??mbedtls_x509_crt_info_1
   \       0x42   0x1A09             SUBS     R1,R1,R0
   \       0x44   0x9106             STR      R1,[SP, #+24]
   \       0x46   0x9907             LDR      R1,[SP, #+28]
   \       0x48   0x4408             ADD      R0,R1,R0
   \       0x4A   0x9007             STR      R0,[SP, #+28]
   1405              ret = mbedtls_snprintf( p, n, "%sserial number     : ",
   1406                                         prefix );
   \       0x4C   0x4633             MOV      R3,R6
   \       0x4E   0x....'....        LDR.W    R2,??DataTable22_1
   \       0x52   0x9906             LDR      R1,[SP, #+24]
   \       0x54   0x....'....        BL       snprintf
   1407              MBEDTLS_X509_SAFE_SNPRINTF;
   \       0x58   0x2800             CMP      R0,#+0
   \       0x5A   0xF100 0x81B3      BMI.W    ??mbedtls_x509_crt_info_1
   \       0x5E   0x9906             LDR      R1,[SP, #+24]
   \       0x60   0x4288             CMP      R0,R1
   \       0x62   0xF080 0x81AF      BCS.W    ??mbedtls_x509_crt_info_1
   \       0x66   0x1A09             SUBS     R1,R1,R0
   \       0x68   0x9106             STR      R1,[SP, #+24]
   \       0x6A   0x9907             LDR      R1,[SP, #+28]
   \       0x6C   0x4408             ADD      R0,R1,R0
   \       0x6E   0x9007             STR      R0,[SP, #+28]
   1408          
   1409              ret = mbedtls_x509_serial_gets( p, n, &crt->serial );
   \       0x70   0xF104 0x021C      ADD      R2,R4,#+28
   \       0x74   0x9906             LDR      R1,[SP, #+24]
   \       0x76   0x....'....        BL       mbedtls_x509_serial_gets
   1410              MBEDTLS_X509_SAFE_SNPRINTF;
   \       0x7A   0x2800             CMP      R0,#+0
   \       0x7C   0xF100 0x81A2      BMI.W    ??mbedtls_x509_crt_info_1
   \       0x80   0x9906             LDR      R1,[SP, #+24]
   \       0x82   0x4288             CMP      R0,R1
   \       0x84   0xF080 0x819E      BCS.W    ??mbedtls_x509_crt_info_1
   \       0x88   0x1A09             SUBS     R1,R1,R0
   \       0x8A   0x9106             STR      R1,[SP, #+24]
   \       0x8C   0x9907             LDR      R1,[SP, #+28]
   \       0x8E   0x4408             ADD      R0,R1,R0
   \       0x90   0x9007             STR      R0,[SP, #+28]
   1411          
   1412              ret = mbedtls_snprintf( p, n, "\n%sissuer name       : ", prefix );
   \       0x92   0x4633             MOV      R3,R6
   \       0x94   0x....'....        LDR.W    R2,??DataTable22_2
   \       0x98   0x9906             LDR      R1,[SP, #+24]
   \       0x9A   0x....'....        BL       snprintf
   1413              MBEDTLS_X509_SAFE_SNPRINTF;
   \       0x9E   0x2800             CMP      R0,#+0
   \       0xA0   0xF100 0x8190      BMI.W    ??mbedtls_x509_crt_info_1
   \       0xA4   0x9906             LDR      R1,[SP, #+24]
   \       0xA6   0x4288             CMP      R0,R1
   \       0xA8   0xF080 0x818C      BCS.W    ??mbedtls_x509_crt_info_1
   \       0xAC   0x1A09             SUBS     R1,R1,R0
   \       0xAE   0x9106             STR      R1,[SP, #+24]
   \       0xB0   0x9907             LDR      R1,[SP, #+28]
   \       0xB2   0x4408             ADD      R0,R1,R0
   \       0xB4   0x9007             STR      R0,[SP, #+28]
   1414              ret = mbedtls_x509_dn_gets( p, n, &crt->issuer  );
   \       0xB6   0xF104 0x024C      ADD      R2,R4,#+76
   \       0xBA   0x9906             LDR      R1,[SP, #+24]
   \       0xBC   0x....'....        BL       mbedtls_x509_dn_gets
   1415              MBEDTLS_X509_SAFE_SNPRINTF;
   \       0xC0   0x2800             CMP      R0,#+0
   \       0xC2   0xF100 0x817F      BMI.W    ??mbedtls_x509_crt_info_1
   \       0xC6   0x9906             LDR      R1,[SP, #+24]
   \       0xC8   0x4288             CMP      R0,R1
   \       0xCA   0xF080 0x817B      BCS.W    ??mbedtls_x509_crt_info_1
   \       0xCE   0x1A09             SUBS     R1,R1,R0
   \       0xD0   0x9106             STR      R1,[SP, #+24]
   \       0xD2   0x9907             LDR      R1,[SP, #+28]
   \       0xD4   0x4408             ADD      R0,R1,R0
   \       0xD6   0x9007             STR      R0,[SP, #+28]
   1416          
   1417              ret = mbedtls_snprintf( p, n, "\n%ssubject name      : ", prefix );
   \       0xD8   0x4633             MOV      R3,R6
   \       0xDA   0x....'....        LDR.W    R2,??DataTable22_3
   \       0xDE   0x9906             LDR      R1,[SP, #+24]
   \       0xE0   0x....'....        BL       snprintf
   1418              MBEDTLS_X509_SAFE_SNPRINTF;
   \       0xE4   0x2800             CMP      R0,#+0
   \       0xE6   0xF100 0x816D      BMI.W    ??mbedtls_x509_crt_info_1
   \       0xEA   0x9906             LDR      R1,[SP, #+24]
   \       0xEC   0x4288             CMP      R0,R1
   \       0xEE   0xF080 0x8169      BCS.W    ??mbedtls_x509_crt_info_1
   \       0xF2   0x1A09             SUBS     R1,R1,R0
   \       0xF4   0x9106             STR      R1,[SP, #+24]
   \       0xF6   0x9907             LDR      R1,[SP, #+28]
   \       0xF8   0x4408             ADD      R0,R1,R0
   \       0xFA   0x9007             STR      R0,[SP, #+28]
   1419              ret = mbedtls_x509_dn_gets( p, n, &crt->subject );
   \       0xFC   0xF104 0x026C      ADD      R2,R4,#+108
   \      0x100   0x9906             LDR      R1,[SP, #+24]
   \      0x102   0x....'....        BL       mbedtls_x509_dn_gets
   1420              MBEDTLS_X509_SAFE_SNPRINTF;
   \      0x106   0x2800             CMP      R0,#+0
   \      0x108   0xF100 0x815C      BMI.W    ??mbedtls_x509_crt_info_1
   \      0x10C   0x9906             LDR      R1,[SP, #+24]
   \      0x10E   0x4288             CMP      R0,R1
   \      0x110   0xF080 0x8158      BCS.W    ??mbedtls_x509_crt_info_1
   \      0x114   0x1A09             SUBS     R1,R1,R0
   \      0x116   0x9106             STR      R1,[SP, #+24]
   \      0x118   0x9907             LDR      R1,[SP, #+28]
   \      0x11A   0x4408             ADD      R0,R1,R0
   \      0x11C   0x9007             STR      R0,[SP, #+28]
   1421          
   1422              ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
   1423                             "%04d-%02d-%02d %02d:%02d:%02d", prefix,
   1424                             crt->valid_from.year, crt->valid_from.mon,
   1425                             crt->valid_from.day,  crt->valid_from.hour,
   1426                             crt->valid_from.min,  crt->valid_from.sec );
   \      0x11E   0xF8D4 0x00A0      LDR      R0,[R4, #+160]
   \      0x122   0x9005             STR      R0,[SP, #+20]
   \      0x124   0xF8D4 0x009C      LDR      R0,[R4, #+156]
   \      0x128   0x9004             STR      R0,[SP, #+16]
   \      0x12A   0xF8D4 0x0098      LDR      R0,[R4, #+152]
   \      0x12E   0x9003             STR      R0,[SP, #+12]
   \      0x130   0xF8D4 0x0094      LDR      R0,[R4, #+148]
   \      0x134   0x9002             STR      R0,[SP, #+8]
   \      0x136   0xF8D4 0x0090      LDR      R0,[R4, #+144]
   \      0x13A   0x9001             STR      R0,[SP, #+4]
   \      0x13C   0xF8D4 0x008C      LDR      R0,[R4, #+140]
   \      0x140   0x9000             STR      R0,[SP, #+0]
   \      0x142   0x4633             MOV      R3,R6
   \      0x144   0x....'....        LDR.W    R2,??DataTable23
   \      0x148   0x9906             LDR      R1,[SP, #+24]
   \      0x14A   0x9807             LDR      R0,[SP, #+28]
   \      0x14C   0x....'....        BL       snprintf
   1427              MBEDTLS_X509_SAFE_SNPRINTF;
   \      0x150   0x2800             CMP      R0,#+0
   \      0x152   0xF100 0x8137      BMI.W    ??mbedtls_x509_crt_info_1
   \      0x156   0x9906             LDR      R1,[SP, #+24]
   \      0x158   0x4288             CMP      R0,R1
   \      0x15A   0xF080 0x8133      BCS.W    ??mbedtls_x509_crt_info_1
   \      0x15E   0x1A09             SUBS     R1,R1,R0
   \      0x160   0x9106             STR      R1,[SP, #+24]
   \      0x162   0x9907             LDR      R1,[SP, #+28]
   \      0x164   0x4408             ADD      R0,R1,R0
   \      0x166   0x9007             STR      R0,[SP, #+28]
   1428          
   1429              ret = mbedtls_snprintf( p, n, "\n%sexpires on        : " \
   1430                             "%04d-%02d-%02d %02d:%02d:%02d", prefix,
   1431                             crt->valid_to.year, crt->valid_to.mon,
   1432                             crt->valid_to.day,  crt->valid_to.hour,
   1433                             crt->valid_to.min,  crt->valid_to.sec );
   \      0x168   0xF8D4 0x00B8      LDR      R0,[R4, #+184]
   \      0x16C   0x9005             STR      R0,[SP, #+20]
   \      0x16E   0xF8D4 0x00B4      LDR      R0,[R4, #+180]
   \      0x172   0x9004             STR      R0,[SP, #+16]
   \      0x174   0xF8D4 0x00B0      LDR      R0,[R4, #+176]
   \      0x178   0x9003             STR      R0,[SP, #+12]
   \      0x17A   0xF8D4 0x00AC      LDR      R0,[R4, #+172]
   \      0x17E   0x9002             STR      R0,[SP, #+8]
   \      0x180   0xF8D4 0x00A8      LDR      R0,[R4, #+168]
   \      0x184   0x9001             STR      R0,[SP, #+4]
   \      0x186   0xF8D4 0x00A4      LDR      R0,[R4, #+164]
   \      0x18A   0x9000             STR      R0,[SP, #+0]
   \      0x18C   0x4633             MOV      R3,R6
   \      0x18E   0x....'....        LDR.W    R2,??DataTable23_1
   \      0x192   0x9906             LDR      R1,[SP, #+24]
   \      0x194   0x9807             LDR      R0,[SP, #+28]
   \      0x196   0x....'....        BL       snprintf
   1434              MBEDTLS_X509_SAFE_SNPRINTF;
   \      0x19A   0x2800             CMP      R0,#+0
   \      0x19C   0xF100 0x8112      BMI.W    ??mbedtls_x509_crt_info_1
   \      0x1A0   0x9906             LDR      R1,[SP, #+24]
   \      0x1A2   0x4288             CMP      R0,R1
   \      0x1A4   0xF080 0x810E      BCS.W    ??mbedtls_x509_crt_info_1
   \      0x1A8   0x1A09             SUBS     R1,R1,R0
   \      0x1AA   0x9106             STR      R1,[SP, #+24]
   \      0x1AC   0x9907             LDR      R1,[SP, #+28]
   \      0x1AE   0x4408             ADD      R0,R1,R0
   \      0x1B0   0x9007             STR      R0,[SP, #+28]
   1435          
   1436              ret = mbedtls_snprintf( p, n, "\n%ssigned using      : ", prefix );
   \      0x1B2   0x4633             MOV      R3,R6
   \      0x1B4   0x....'....        LDR.W    R2,??DataTable23_2
   \      0x1B8   0x9906             LDR      R1,[SP, #+24]
   \      0x1BA   0x....'....        BL       snprintf
   1437              MBEDTLS_X509_SAFE_SNPRINTF;
   \      0x1BE   0x2800             CMP      R0,#+0
   \      0x1C0   0xF100 0x8100      BMI.W    ??mbedtls_x509_crt_info_1
   \      0x1C4   0x9906             LDR      R1,[SP, #+24]
   \      0x1C6   0x4288             CMP      R0,R1
   \      0x1C8   0xF080 0x80FC      BCS.W    ??mbedtls_x509_crt_info_1
   \      0x1CC   0x1A09             SUBS     R1,R1,R0
   \      0x1CE   0x9106             STR      R1,[SP, #+24]
   \      0x1D0   0x9907             LDR      R1,[SP, #+28]
   \      0x1D2   0x4408             ADD      R0,R1,R0
   \      0x1D4   0x9007             STR      R0,[SP, #+28]
   1438          
   1439              ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
   1440                                       crt->sig_md, crt->sig_opts );
   \      0x1D6   0xF8D4 0x012C      LDR      R0,[R4, #+300]
   \      0x1DA   0x9001             STR      R0,[SP, #+4]
   \      0x1DC   0xF894 0x0128      LDRB     R0,[R4, #+296]
   \      0x1E0   0x9000             STR      R0,[SP, #+0]
   \      0x1E2   0xF894 0x3129      LDRB     R3,[R4, #+297]
   \      0x1E6   0xF104 0x0228      ADD      R2,R4,#+40
   \      0x1EA   0x9906             LDR      R1,[SP, #+24]
   \      0x1EC   0x9807             LDR      R0,[SP, #+28]
   \      0x1EE   0x....'....        BL       mbedtls_x509_sig_alg_gets
   1441              MBEDTLS_X509_SAFE_SNPRINTF;
   \      0x1F2   0x2800             CMP      R0,#+0
   \      0x1F4   0xF100 0x80E6      BMI.W    ??mbedtls_x509_crt_info_1
   \      0x1F8   0x9906             LDR      R1,[SP, #+24]
   \      0x1FA   0x4288             CMP      R0,R1
   \      0x1FC   0xF080 0x80E2      BCS.W    ??mbedtls_x509_crt_info_1
   \      0x200   0x1A09             SUBS     R1,R1,R0
   \      0x202   0x9106             STR      R1,[SP, #+24]
   \      0x204   0x9907             LDR      R1,[SP, #+28]
   \      0x206   0x4408             ADD      R0,R1,R0
   \      0x208   0x9007             STR      R0,[SP, #+28]
   1442          
   1443              /* Key size */
   1444              if( ( ret = mbedtls_x509_key_size_helper( key_size_str, BEFORE_COLON,
   1445                                                mbedtls_pk_get_name( &crt->pk ) ) ) != 0 )
   \      0x20A   0xF104 0x00BC      ADD      R0,R4,#+188
   \      0x20E   0x....'....        BL       mbedtls_pk_get_name
   \      0x212   0x4602             MOV      R2,R0
   \      0x214   0x2112             MOVS     R1,#+18
   \      0x216   0xA808             ADD      R0,SP,#+32
   \      0x218   0x....'....        BL       mbedtls_x509_key_size_helper
   \      0x21C   0x2800             CMP      R0,#+0
   \      0x21E   0xF040 0x80D6      BNE.W    ??mbedtls_x509_crt_info_3
   1446              {
   1447                  return( ret );
   1448              }
   1449          
   1450              ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits", prefix, key_size_str,
   1451                                    (int) mbedtls_pk_get_bitlen( &crt->pk ) );
   \      0x222   0xF104 0x00BC      ADD      R0,R4,#+188
   \      0x226   0x....'....        BL       mbedtls_pk_get_bitlen
   \      0x22A   0x9001             STR      R0,[SP, #+4]
   \      0x22C   0xA808             ADD      R0,SP,#+32
   \      0x22E   0x9000             STR      R0,[SP, #+0]
   \      0x230   0x4633             MOV      R3,R6
   \      0x232   0x....'....        LDR.W    R2,??DataTable23_3
   \      0x236   0x9906             LDR      R1,[SP, #+24]
   \      0x238   0x9807             LDR      R0,[SP, #+28]
   \      0x23A   0x....'....        BL       snprintf
   1452              MBEDTLS_X509_SAFE_SNPRINTF;
   \      0x23E   0x2800             CMP      R0,#+0
   \      0x240   0xF100 0x80C0      BMI.W    ??mbedtls_x509_crt_info_1
   \      0x244   0x9906             LDR      R1,[SP, #+24]
   \      0x246   0x4288             CMP      R0,R1
   \      0x248   0xF080 0x80BC      BCS.W    ??mbedtls_x509_crt_info_1
   \      0x24C   0x1A09             SUBS     R1,R1,R0
   \      0x24E   0x9106             STR      R1,[SP, #+24]
   \      0x250   0x9907             LDR      R1,[SP, #+28]
   \      0x252   0x4408             ADD      R0,R1,R0
   \      0x254   0x9007             STR      R0,[SP, #+28]
   1453          
   1454              /*
   1455               * Optional extensions
   1456               */
   1457          
   1458              if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
   \      0x256   0xF8D4 0x00F8      LDR      R0,[R4, #+248]
   \      0x25A   0x05C0             LSLS     R0,R0,#+23
   \      0x25C   0xD534             BPL.N    ??mbedtls_x509_crt_info_4
   1459              {
   1460                  ret = mbedtls_snprintf( p, n, "\n%sbasic constraints : CA=%s", prefix,
   1461                                  crt->ca_istrue ? "true" : "false" );
   \      0x25E   0xF8D4 0x00FC      LDR      R0,[R4, #+252]
   \      0x262   0x2800             CMP      R0,#+0
   \      0x264   0xD002             BEQ.N    ??mbedtls_x509_crt_info_5
   \      0x266   0x....'....        LDR.W    R0,??DataTable23_5
   \      0x26A   0xE001             B.N      ??mbedtls_x509_crt_info_6
   \                     ??mbedtls_x509_crt_info_5: (+1)
   \      0x26C   0x....'....        LDR.W    R0,??DataTable23_6
   \                     ??mbedtls_x509_crt_info_6: (+1)
   \      0x270   0x9000             STR      R0,[SP, #+0]
   \      0x272   0x4633             MOV      R3,R6
   \      0x274   0x....'....        LDR.W    R2,??DataTable23_7
   \      0x278   0x9906             LDR      R1,[SP, #+24]
   \      0x27A   0x9807             LDR      R0,[SP, #+28]
   \      0x27C   0x....'....        BL       snprintf
   1462                  MBEDTLS_X509_SAFE_SNPRINTF;
   \      0x280   0x2800             CMP      R0,#+0
   \      0x282   0xF100 0x809F      BMI.W    ??mbedtls_x509_crt_info_1
   \      0x286   0x9906             LDR      R1,[SP, #+24]
   \      0x288   0x4288             CMP      R0,R1
   \      0x28A   0xF080 0x809B      BCS.W    ??mbedtls_x509_crt_info_1
   \      0x28E   0x1A09             SUBS     R1,R1,R0
   \      0x290   0x9106             STR      R1,[SP, #+24]
   \      0x292   0x9907             LDR      R1,[SP, #+28]
   \      0x294   0x4408             ADD      R0,R1,R0
   \      0x296   0x9007             STR      R0,[SP, #+28]
   1463          
   1464                  if( crt->max_pathlen > 0 )
   \      0x298   0xF8D4 0x0100      LDR      R0,[R4, #+256]
   \      0x29C   0x2801             CMP      R0,#+1
   \      0x29E   0xDB13             BLT.N    ??mbedtls_x509_crt_info_4
   1465                  {
   1466                      ret = mbedtls_snprintf( p, n, ", max_pathlen=%d", crt->max_pathlen - 1 );
   \      0x2A0   0x4603             MOV      R3,R0
   \      0x2A2   0x1E5B             SUBS     R3,R3,#+1
   \      0x2A4   0x....'....        LDR.W    R2,??DataTable23_8
   \      0x2A8   0x9906             LDR      R1,[SP, #+24]
   \      0x2AA   0x9807             LDR      R0,[SP, #+28]
   \      0x2AC   0x....'....        BL       snprintf
   1467                      MBEDTLS_X509_SAFE_SNPRINTF;
   \      0x2B0   0x2800             CMP      R0,#+0
   \      0x2B2   0xF100 0x8087      BMI.W    ??mbedtls_x509_crt_info_1
   \      0x2B6   0x9906             LDR      R1,[SP, #+24]
   \      0x2B8   0x4288             CMP      R0,R1
   \      0x2BA   0xF080 0x8083      BCS.W    ??mbedtls_x509_crt_info_1
   \      0x2BE   0x1A09             SUBS     R1,R1,R0
   \      0x2C0   0x9106             STR      R1,[SP, #+24]
   \      0x2C2   0x9907             LDR      R1,[SP, #+28]
   \      0x2C4   0x4408             ADD      R0,R1,R0
   \      0x2C6   0x9007             STR      R0,[SP, #+28]
   1468                  }
   1469              }
   1470          
   1471              if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
   \                     ??mbedtls_x509_crt_info_4: (+1)
   \      0x2C8   0xF894 0x00F8      LDRB     R0,[R4, #+248]
   \      0x2CC   0x0680             LSLS     R0,R0,#+26
   \      0x2CE   0xD518             BPL.N    ??mbedtls_x509_crt_info_7
   1472              {
   1473                  ret = mbedtls_snprintf( p, n, "\n%ssubject alt name  : ", prefix );
   \      0x2D0   0x4633             MOV      R3,R6
   \      0x2D2   0x....'....        LDR.W    R2,??DataTable23_9
   \      0x2D6   0x9906             LDR      R1,[SP, #+24]
   \      0x2D8   0x9807             LDR      R0,[SP, #+28]
   \      0x2DA   0x....'....        BL       snprintf
   1474                  MBEDTLS_X509_SAFE_SNPRINTF;
   \      0x2DE   0x2800             CMP      R0,#+0
   \      0x2E0   0xD470             BMI.N    ??mbedtls_x509_crt_info_1
   \      0x2E2   0x9906             LDR      R1,[SP, #+24]
   \      0x2E4   0x4288             CMP      R0,R1
   \      0x2E6   0xD26D             BCS.N    ??mbedtls_x509_crt_info_1
   \      0x2E8   0x1A09             SUBS     R1,R1,R0
   \      0x2EA   0x9106             STR      R1,[SP, #+24]
   \      0x2EC   0x9907             LDR      R1,[SP, #+28]
   \      0x2EE   0x4408             ADD      R0,R1,R0
   \      0x2F0   0x9007             STR      R0,[SP, #+28]
   1475          
   1476                  if( ( ret = x509_info_subject_alt_name( &p, &n,
   1477                                                      &crt->subject_alt_names ) ) != 0 )
   \      0x2F2   0xF104 0x02E8      ADD      R2,R4,#+232
   \      0x2F6   0xA906             ADD      R1,SP,#+24
   \      0x2F8   0xA807             ADD      R0,SP,#+28
   \      0x2FA   0x....'....        BL       x509_info_subject_alt_name
   \      0x2FE   0x2800             CMP      R0,#+0
   \      0x300   0xD165             BNE.N    ??mbedtls_x509_crt_info_3
   1478                      return( ret );
   1479              }
   1480          
   1481              if( crt->ext_types & MBEDTLS_X509_EXT_NS_CERT_TYPE )
   \                     ??mbedtls_x509_crt_info_7: (+1)
   \      0x302   0xF8D4 0x00F8      LDR      R0,[R4, #+248]
   \      0x306   0x03C0             LSLS     R0,R0,#+15
   \      0x308   0xD518             BPL.N    ??mbedtls_x509_crt_info_8
   1482              {
   1483                  ret = mbedtls_snprintf( p, n, "\n%scert. type        : ", prefix );
   \      0x30A   0x4633             MOV      R3,R6
   \      0x30C   0x....'....        LDR.W    R2,??DataTable23_10
   \      0x310   0x9906             LDR      R1,[SP, #+24]
   \      0x312   0x9807             LDR      R0,[SP, #+28]
   \      0x314   0x....'....        BL       snprintf
   1484                  MBEDTLS_X509_SAFE_SNPRINTF;
   \      0x318   0x2800             CMP      R0,#+0
   \      0x31A   0xD453             BMI.N    ??mbedtls_x509_crt_info_1
   \      0x31C   0x9906             LDR      R1,[SP, #+24]
   \      0x31E   0x4288             CMP      R0,R1
   \      0x320   0xD250             BCS.N    ??mbedtls_x509_crt_info_1
   \      0x322   0x1A09             SUBS     R1,R1,R0
   \      0x324   0x9106             STR      R1,[SP, #+24]
   \      0x326   0x9907             LDR      R1,[SP, #+28]
   \      0x328   0x4408             ADD      R0,R1,R0
   \      0x32A   0x9007             STR      R0,[SP, #+28]
   1485          
   1486                  if( ( ret = x509_info_cert_type( &p, &n, crt->ns_cert_type ) ) != 0 )
   \      0x32C   0xF894 0x2118      LDRB     R2,[R4, #+280]
   \      0x330   0xA906             ADD      R1,SP,#+24
   \      0x332   0xA807             ADD      R0,SP,#+28
   \      0x334   0x....'....        BL       x509_info_cert_type
   \      0x338   0x2800             CMP      R0,#+0
   \      0x33A   0xD148             BNE.N    ??mbedtls_x509_crt_info_3
   1487                      return( ret );
   1488              }
   1489          
   1490              if( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE )
   \                     ??mbedtls_x509_crt_info_8: (+1)
   \      0x33C   0xF894 0x00F8      LDRB     R0,[R4, #+248]
   \      0x340   0x0740             LSLS     R0,R0,#+29
   \      0x342   0xD518             BPL.N    ??mbedtls_x509_crt_info_9
   1491              {
   1492                  ret = mbedtls_snprintf( p, n, "\n%skey usage         : ", prefix );
   \      0x344   0x4633             MOV      R3,R6
   \      0x346   0x....'....        LDR.W    R2,??DataTable23_11
   \      0x34A   0x9906             LDR      R1,[SP, #+24]
   \      0x34C   0x9807             LDR      R0,[SP, #+28]
   \      0x34E   0x....'....        BL       snprintf
   1493                  MBEDTLS_X509_SAFE_SNPRINTF;
   \      0x352   0x2800             CMP      R0,#+0
   \      0x354   0xD436             BMI.N    ??mbedtls_x509_crt_info_1
   \      0x356   0x9906             LDR      R1,[SP, #+24]
   \      0x358   0x4288             CMP      R0,R1
   \      0x35A   0xD233             BCS.N    ??mbedtls_x509_crt_info_1
   \      0x35C   0x1A09             SUBS     R1,R1,R0
   \      0x35E   0x9106             STR      R1,[SP, #+24]
   \      0x360   0x9907             LDR      R1,[SP, #+28]
   \      0x362   0x4408             ADD      R0,R1,R0
   \      0x364   0x9007             STR      R0,[SP, #+28]
   1494          
   1495                  if( ( ret = x509_info_key_usage( &p, &n, crt->key_usage ) ) != 0 )
   \      0x366   0xF8D4 0x2104      LDR      R2,[R4, #+260]
   \      0x36A   0xA906             ADD      R1,SP,#+24
   \      0x36C   0xA807             ADD      R0,SP,#+28
   \      0x36E   0x....'....        BL       x509_info_key_usage
   \      0x372   0x2800             CMP      R0,#+0
   \      0x374   0xD12B             BNE.N    ??mbedtls_x509_crt_info_3
   1496                      return( ret );
   1497              }
   1498          
   1499              if( crt->ext_types & MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE )
   \                     ??mbedtls_x509_crt_info_9: (+1)
   \      0x376   0xF8D4 0x00F8      LDR      R0,[R4, #+248]
   \      0x37A   0x0500             LSLS     R0,R0,#+20
   \      0x37C   0xD518             BPL.N    ??mbedtls_x509_crt_info_10
   1500              {
   1501                  ret = mbedtls_snprintf( p, n, "\n%sext key usage     : ", prefix );
   \      0x37E   0x4633             MOV      R3,R6
   \      0x380   0x....'....        LDR.W    R2,??DataTable23_12
   \      0x384   0x9906             LDR      R1,[SP, #+24]
   \      0x386   0x9807             LDR      R0,[SP, #+28]
   \      0x388   0x....'....        BL       snprintf
   1502                  MBEDTLS_X509_SAFE_SNPRINTF;
   \      0x38C   0x2800             CMP      R0,#+0
   \      0x38E   0xD419             BMI.N    ??mbedtls_x509_crt_info_1
   \      0x390   0x9906             LDR      R1,[SP, #+24]
   \      0x392   0x4288             CMP      R0,R1
   \      0x394   0xD216             BCS.N    ??mbedtls_x509_crt_info_1
   \      0x396   0x1A09             SUBS     R1,R1,R0
   \      0x398   0x9106             STR      R1,[SP, #+24]
   \      0x39A   0x9907             LDR      R1,[SP, #+28]
   \      0x39C   0x4408             ADD      R0,R1,R0
   \      0x39E   0x9007             STR      R0,[SP, #+28]
   1503          
   1504                  if( ( ret = x509_info_ext_key_usage( &p, &n,
   1505                                                       &crt->ext_key_usage ) ) != 0 )
   \      0x3A0   0xF504 0x7284      ADD      R2,R4,#+264
   \      0x3A4   0xA906             ADD      R1,SP,#+24
   \      0x3A6   0xA807             ADD      R0,SP,#+28
   \      0x3A8   0x....'....        BL       x509_info_ext_key_usage
   \      0x3AC   0x2800             CMP      R0,#+0
   \      0x3AE   0xD10E             BNE.N    ??mbedtls_x509_crt_info_3
   1506                      return( ret );
   1507              }
   1508          
   1509              ret = mbedtls_snprintf( p, n, "\n" );
   \                     ??mbedtls_x509_crt_info_10: (+1)
   \      0x3B0   0x....             ADR.N    R2,??DataTable19_1  ;; "\n"
   \      0x3B2   0x9906             LDR      R1,[SP, #+24]
   \      0x3B4   0x9807             LDR      R0,[SP, #+28]
   \      0x3B6   0x....'....        BL       snprintf
   1510              MBEDTLS_X509_SAFE_SNPRINTF;
   \      0x3BA   0x2800             CMP      R0,#+0
   \      0x3BC   0xD402             BMI.N    ??mbedtls_x509_crt_info_1
   \                     ??mbedtls_x509_crt_info_2: (+1)
   \      0x3BE   0x9906             LDR      R1,[SP, #+24]
   \      0x3C0   0x4288             CMP      R0,R1
   \      0x3C2   0xD301             BCC.N    ??mbedtls_x509_crt_info_11
   \                     ??mbedtls_x509_crt_info_1: (+1)
   \      0x3C4   0x....             LDR.N    R0,??DataTable19_7  ;; 0xffffd680
   \      0x3C6   0xE002             B.N      ??mbedtls_x509_crt_info_3
   1511          
   1512              return( (int) ( size - n ) );
   \                     ??mbedtls_x509_crt_info_11: (+1)
   \      0x3C8   0x1A6D             SUBS     R5,R5,R1
   \      0x3CA   0x1945             ADDS     R5,R0,R5
   \      0x3CC   0x4628             MOV      R0,R5
   \                     ??mbedtls_x509_crt_info_3: (+1)
   \      0x3CE   0xB00E             ADD      SP,SP,#+56
   \      0x3D0   0xBD70             POP      {R4-R6,PC}       ;; return
   1513          }
   1514          
   1515          struct x509_crt_verify_string {
   1516              int code;
   1517              const char *string;
   1518          };
   1519          

   \                                 In section .rodata, align 4
   1520          static const struct x509_crt_verify_string x509_crt_verify_strings[] = {
   \                     x509_crt_verify_strings:
   \        0x0   0x0000'0001        DC32 1, ?_0, 2, ?_1, 4, ?_2, 8, ?_3, 16, ?_4, 32, ?_5, 64, ?_6, 128
   \              0x....'....  
   \              0x0000'0002  
   \              0x....'....  
   \              0x0000'0004  
   \              0x....'....  
   \              0x0000'0008  
   \              0x....'....  
   \              0x0000'0010  
   \              0x....'....  
   \              0x0000'0020  
   \              0x....'....  
   \              0x0000'0040  
   \              0x....'....  
   \              0x0000'0080  
   \       0x3C   0x....'....        DC32 ?_7, 256, ?_8, 512, ?_9, 1024, ?_10, 2048, ?_11, 4096, ?_12, 8192
   \              0x0000'0100  
   \              0x....'....  
   \              0x0000'0200  
   \              0x....'....  
   \              0x0000'0400  
   \              0x....'....  
   \              0x0000'0800  
   \              0x....'....  
   \              0x0000'1000  
   \              0x....'....  
   \              0x0000'2000  
   \       0x6C   0x....'....        DC32 ?_13, 16384, ?_14, 32768, ?_15, 65536, ?_16, 131072, ?_17, 262144
   \              0x0000'4000  
   \              0x....'....  
   \              0x0000'8000  
   \              0x....'....  
   \              0x0001'0000  
   \              0x....'....  
   \              0x0002'0000  
   \              0x....'....  
   \              0x0004'0000  
   \       0x94   0x....'....        DC32 ?_18, 524288, ?_19, 0, 0H
   \              0x0008'0000  
   \              0x....'....  
   \              0x0000'0000  
   \              0x0000'0000  
   1521              { MBEDTLS_X509_BADCERT_EXPIRED,       "The certificate validity has expired" },
   1522              { MBEDTLS_X509_BADCERT_REVOKED,       "The certificate has been revoked (is on a CRL)" },
   1523              { MBEDTLS_X509_BADCERT_CN_MISMATCH,   "The certificate Common Name (CN) does not match with the expected CN" },
   1524              { MBEDTLS_X509_BADCERT_NOT_TRUSTED,   "The certificate is not correctly signed by the trusted CA" },
   1525              { MBEDTLS_X509_BADCRL_NOT_TRUSTED,    "The CRL is not correctly signed by the trusted CA" },
   1526              { MBEDTLS_X509_BADCRL_EXPIRED,        "The CRL is expired" },
   1527              { MBEDTLS_X509_BADCERT_MISSING,       "Certificate was missing" },
   1528              { MBEDTLS_X509_BADCERT_SKIP_VERIFY,   "Certificate verification was skipped" },
   1529              { MBEDTLS_X509_BADCERT_OTHER,         "Other reason (can be used by verify callback)" },
   1530              { MBEDTLS_X509_BADCERT_FUTURE,        "The certificate validity starts in the future" },
   1531              { MBEDTLS_X509_BADCRL_FUTURE,         "The CRL is from the future" },
   1532              { MBEDTLS_X509_BADCERT_KEY_USAGE,     "Usage does not match the keyUsage extension" },
   1533              { MBEDTLS_X509_BADCERT_EXT_KEY_USAGE, "Usage does not match the extendedKeyUsage extension" },
   1534              { MBEDTLS_X509_BADCERT_NS_CERT_TYPE,  "Usage does not match the nsCertType extension" },
   1535              { MBEDTLS_X509_BADCERT_BAD_MD,        "The certificate is signed with an unacceptable hash." },
   1536              { MBEDTLS_X509_BADCERT_BAD_PK,        "The certificate is signed with an unacceptable PK alg (eg RSA vs ECDSA)." },
   1537              { MBEDTLS_X509_BADCERT_BAD_KEY,       "The certificate is signed with an unacceptable key (eg bad curve, RSA too short)." },
   1538              { MBEDTLS_X509_BADCRL_BAD_MD,         "The CRL is signed with an unacceptable hash." },
   1539              { MBEDTLS_X509_BADCRL_BAD_PK,         "The CRL is signed with an unacceptable PK alg (eg RSA vs ECDSA)." },
   1540              { MBEDTLS_X509_BADCRL_BAD_KEY,        "The CRL is signed with an unacceptable key (eg bad curve, RSA too short)." },
   1541              { 0, NULL }
   1542          };
   1543          

   \                                 In section .text, align 2, keep-with-next
   1544          int mbedtls_x509_crt_verify_info( char *buf, size_t size, const char *prefix,
   1545                                    uint32_t flags )
   1546          {
   \                     mbedtls_x509_crt_verify_info: (+1)
   \        0x0   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \        0x4   0x4607             MOV      R7,R0
   \        0x6   0x460D             MOV      R5,R1
   \        0x8   0x4690             MOV      R8,R2
   \        0xA   0x461C             MOV      R4,R3
   1547              int ret;
   1548              const struct x509_crt_verify_string *cur;
   1549              char *p = buf;
   1550              size_t n = size;
   \        0xC   0x462E             MOV      R6,R5
   1551          
   1552              for( cur = x509_crt_verify_strings; cur->string != NULL ; cur++ )
   \        0xE   0x....'....        LDR.W    R9,??DataTable23_13
   \       0x12   0xE018             B.N      ??mbedtls_x509_crt_verify_info_0
   1553              {
   1554                  if( ( flags & cur->code ) == 0 )
   \                     ??mbedtls_x509_crt_verify_info_1: (+1)
   \       0x14   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \       0x18   0x4204             TST      R4,R0
   \       0x1A   0xD012             BEQ.N    ??mbedtls_x509_crt_verify_info_2
   1555                      continue;
   1556          
   1557                  ret = mbedtls_snprintf( p, n, "%s%s\n", prefix, cur->string );
   \       0x1C   0xF8D9 0x0004      LDR      R0,[R9, #+4]
   \       0x20   0x9000             STR      R0,[SP, #+0]
   \       0x22   0x4643             MOV      R3,R8
   \       0x24   0x....'....        LDR.W    R2,??DataTable23_14
   \       0x28   0x4631             MOV      R1,R6
   \       0x2A   0x4638             MOV      R0,R7
   \       0x2C   0x....'....        BL       snprintf
   1558                  MBEDTLS_X509_SAFE_SNPRINTF;
   \       0x30   0x2800             CMP      R0,#+0
   \       0x32   0xD419             BMI.N    ??mbedtls_x509_crt_verify_info_3
   \       0x34   0x42B0             CMP      R0,R6
   \       0x36   0xD217             BCS.N    ??mbedtls_x509_crt_verify_info_3
   \       0x38   0x1A36             SUBS     R6,R6,R0
   \       0x3A   0x4407             ADD      R7,R7,R0
   1559                  flags ^= cur->code;
   \       0x3C   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \       0x40   0x4044             EORS     R4,R0,R4
   1560              }
   \                     ??mbedtls_x509_crt_verify_info_2: (+1)
   \       0x42   0xF109 0x0908      ADD      R9,R9,#+8
   \                     ??mbedtls_x509_crt_verify_info_0: (+1)
   \       0x46   0xF8D9 0x0004      LDR      R0,[R9, #+4]
   \       0x4A   0x2800             CMP      R0,#+0
   \       0x4C   0xD1E2             BNE.N    ??mbedtls_x509_crt_verify_info_1
   1561          
   1562              if( flags != 0 )
   \       0x4E   0x2C00             CMP      R4,#+0
   \       0x50   0xD00D             BEQ.N    ??mbedtls_x509_crt_verify_info_4
   1563              {
   1564                  ret = mbedtls_snprintf( p, n, "%sUnknown reason "
   1565                                                 "(this should not happen)\n", prefix );
   \       0x52   0x4643             MOV      R3,R8
   \       0x54   0x....'....        LDR.W    R2,??DataTable23_15
   \       0x58   0x4631             MOV      R1,R6
   \       0x5A   0x4638             MOV      R0,R7
   \       0x5C   0x....'....        BL       snprintf
   1566                  MBEDTLS_X509_SAFE_SNPRINTF;
   \       0x60   0x2800             CMP      R0,#+0
   \       0x62   0xD401             BMI.N    ??mbedtls_x509_crt_verify_info_3
   \       0x64   0x42B0             CMP      R0,R6
   \       0x66   0xD301             BCC.N    ??mbedtls_x509_crt_verify_info_5
   \                     ??mbedtls_x509_crt_verify_info_3: (+1)
   \       0x68   0x....             LDR.N    R0,??DataTable19_7  ;; 0xffffd680
   \       0x6A   0xE002             B.N      ??mbedtls_x509_crt_verify_info_6
   \                     ??mbedtls_x509_crt_verify_info_5: (+1)
   \       0x6C   0x1A36             SUBS     R6,R6,R0
   1567              }
   1568          
   1569              return( (int) ( size - n ) );
   \                     ??mbedtls_x509_crt_verify_info_4: (+1)
   \       0x6E   0x1BAD             SUBS     R5,R5,R6
   \       0x70   0x4628             MOV      R0,R5
   \                     ??mbedtls_x509_crt_verify_info_6: (+1)
   \       0x72   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
   1570          }
   1571          
   1572          #if defined(MBEDTLS_X509_CHECK_KEY_USAGE)

   \                                 In section .text, align 2, keep-with-next
   1573          int mbedtls_x509_crt_check_key_usage( const mbedtls_x509_crt *crt,
   1574                                                unsigned int usage )
   1575          {
   \                     mbedtls_x509_crt_check_key_usage: (+1)
   \        0x0   0xB410             PUSH     {R4}
   1576              unsigned int usage_must, usage_may;
   1577              unsigned int may_mask = MBEDTLS_X509_KU_ENCIPHER_ONLY
   1578                                    | MBEDTLS_X509_KU_DECIPHER_ONLY;
   1579          
   1580              if( ( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE ) == 0 )
   \        0x2   0xF890 0x20F8      LDRB     R2,[R0, #+248]
   \        0x6   0x0752             LSLS     R2,R2,#+29
   \        0x8   0xD401             BMI.N    ??mbedtls_x509_crt_check_key_usage_0
   1581                  return( 0 );
   \        0xA   0x2000             MOVS     R0,#+0
   \        0xC   0xE019             B.N      ??mbedtls_x509_crt_check_key_usage_1
   1582          
   1583              usage_must = usage & ~may_mask;
   \                     ??mbedtls_x509_crt_check_key_usage_0: (+1)
   \        0xE   0x....'....        LDR.W    R2,??DataTable23_16  ;; 0xffff7ffe
   \       0x12   0xEA02 0x0301      AND      R3,R2,R1
   1584          
   1585              if( ( ( crt->key_usage & ~may_mask ) & usage_must ) != usage_must )
   \       0x16   0xF8D0 0x4104      LDR      R4,[R0, #+260]
   \       0x1A   0x401C             ANDS     R4,R3,R4
   \       0x1C   0x4022             ANDS     R2,R2,R4
   \       0x1E   0x429A             CMP      R2,R3
   \       0x20   0xD002             BEQ.N    ??mbedtls_x509_crt_check_key_usage_2
   1586                  return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   \       0x22   0x....'....        LDR.W    R0,??DataTable23_17  ;; 0xffffd800
   \       0x26   0xE00C             B.N      ??mbedtls_x509_crt_check_key_usage_1
   1587          
   1588              usage_may = usage & may_mask;
   \                     ??mbedtls_x509_crt_check_key_usage_2: (+1)
   \       0x28   0xF248 0x0201      MOVW     R2,#+32769
   \       0x2C   0x4011             ANDS     R1,R2,R1
   1589          
   1590              if( ( ( crt->key_usage & may_mask ) | usage_may ) != usage_may )
   \       0x2E   0xF8D0 0x0104      LDR      R0,[R0, #+260]
   \       0x32   0x4002             ANDS     R2,R2,R0
   \       0x34   0x430A             ORRS     R2,R1,R2
   \       0x36   0x428A             CMP      R2,R1
   \       0x38   0xD002             BEQ.N    ??mbedtls_x509_crt_check_key_usage_3
   1591                  return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   \       0x3A   0x....'....        LDR.W    R0,??DataTable23_17  ;; 0xffffd800
   \       0x3E   0xE000             B.N      ??mbedtls_x509_crt_check_key_usage_1
   1592          
   1593              return( 0 );
   \                     ??mbedtls_x509_crt_check_key_usage_3: (+1)
   \       0x40   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_x509_crt_check_key_usage_1: (+1)
   \       0x42   0xBC10             POP      {R4}
   \       0x44   0x4770             BX       LR               ;; return
   1594          }
   1595          #endif
   1596          
   1597          #if defined(MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE)

   \                                 In section .text, align 2, keep-with-next
   1598          int mbedtls_x509_crt_check_extended_key_usage( const mbedtls_x509_crt *crt,
   1599                                                 const char *usage_oid,
   1600                                                 size_t usage_len )
   1601          {
   \                     mbedtls_x509_crt_check_extended_key_usage: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x460D             MOV      R5,R1
   \        0x4   0x4616             MOV      R6,R2
   1602              const mbedtls_x509_sequence *cur;
   1603          
   1604              /* Extension is not mandatory, absent means no restriction */
   1605              if( ( crt->ext_types & MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE ) == 0 )
   \        0x6   0xF8D0 0x10F8      LDR      R1,[R0, #+248]
   \        0xA   0x0509             LSLS     R1,R1,#+20
   \        0xC   0xD523             BPL.N    ??mbedtls_x509_crt_check_extended_key_usage_0
   1606                  return( 0 );
   1607          
   1608              /*
   1609               * Look for the requested usage (or wildcard ANY) in our list
   1610               */
   1611              for( cur = &crt->ext_key_usage; cur != NULL; cur = cur->next )
   \        0xE   0xF500 0x7484      ADD      R4,R0,#+264
   \       0x12   0xE003             B.N      ??mbedtls_x509_crt_check_extended_key_usage_1
   1612              {
   1613                  const mbedtls_x509_buf *cur_oid = &cur->buf;
   1614          
   1615                  if( cur_oid->len == usage_len &&
   1616                      memcmp( cur_oid->p, usage_oid, usage_len ) == 0 )
   1617                  {
   1618                      return( 0 );
   1619                  }
   1620          
   1621                  if( MBEDTLS_OID_CMP( MBEDTLS_OID_ANY_EXTENDED_KEY_USAGE, cur_oid ) == 0 )
   \                     ??mbedtls_x509_crt_check_extended_key_usage_2: (+1)
   \       0x14   0x2001             MOVS     R0,#+1
   \                     ??mbedtls_x509_crt_check_extended_key_usage_3: (+1)
   \       0x16   0x2800             CMP      R0,#+0
   \       0x18   0xD01D             BEQ.N    ??mbedtls_x509_crt_check_extended_key_usage_0
   \       0x1A   0x68E4             LDR      R4,[R4, #+12]
   \                     ??mbedtls_x509_crt_check_extended_key_usage_1: (+1)
   \       0x1C   0x2C00             CMP      R4,#+0
   \       0x1E   0xD017             BEQ.N    ??mbedtls_x509_crt_check_extended_key_usage_4
   \       0x20   0x6860             LDR      R0,[R4, #+4]
   \       0x22   0x42B0             CMP      R0,R6
   \       0x24   0xD106             BNE.N    ??mbedtls_x509_crt_check_extended_key_usage_5
   \       0x26   0x4632             MOV      R2,R6
   \       0x28   0x4629             MOV      R1,R5
   \       0x2A   0x68A0             LDR      R0,[R4, #+8]
   \       0x2C   0x....'....        BL       memcmp
   \       0x30   0x2800             CMP      R0,#+0
   \       0x32   0xD010             BEQ.N    ??mbedtls_x509_crt_check_extended_key_usage_0
   \                     ??mbedtls_x509_crt_check_extended_key_usage_5: (+1)
   \       0x34   0x6860             LDR      R0,[R4, #+4]
   \       0x36   0x2804             CMP      R0,#+4
   \       0x38   0xD1EC             BNE.N    ??mbedtls_x509_crt_check_extended_key_usage_2
   \       0x3A   0x4602             MOV      R2,R0
   \       0x3C   0x68A1             LDR      R1,[R4, #+8]
   \       0x3E   0x....'....        LDR.W    R0,??DataTable23_18
   \       0x42   0x....'....        BL       memcmp
   \       0x46   0x1E40             SUBS     R0,R0,#+1
   \       0x48   0x4180             SBCS     R0,R0,R0
   \       0x4A   0x43C0             MVNS     R0,R0
   \       0x4C   0x0FC0             LSRS     R0,R0,#+31
   \       0x4E   0xE7E2             B.N      ??mbedtls_x509_crt_check_extended_key_usage_3
   1622                      return( 0 );
   1623              }
   1624          
   1625              return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   \                     ??mbedtls_x509_crt_check_extended_key_usage_4: (+1)
   \       0x50   0x....'....        LDR.W    R0,??DataTable23_17  ;; 0xffffd800
   \       0x54   0xBD70             POP      {R4-R6,PC}       ;; return
   \                     ??mbedtls_x509_crt_check_extended_key_usage_0: (+1)
   \       0x56   0x2000             MOVS     R0,#+0
   \       0x58   0xBD70             POP      {R4-R6,PC}
   1626          }
   1627          #endif /* MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE */
   1628          
   1629          #if defined(MBEDTLS_X509_CRL_PARSE_C)
   1630          /*
   1631           * Return 1 if the certificate is revoked, or 0 otherwise.
   1632           */

   \                                 In section .text, align 2, keep-with-next
   1633          int mbedtls_x509_crt_is_revoked( const mbedtls_x509_crt *crt, const mbedtls_x509_crl *crl )
   1634          {
   \                     mbedtls_x509_crt_is_revoked: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4605             MOV      R5,R0
   1635              const mbedtls_x509_crl_entry *cur = &crl->entry;
   \        0x4   0xF101 0x0484      ADD      R4,R1,#+132
   \        0x8   0xE000             B.N      ??mbedtls_x509_crt_is_revoked_0
   1636          
   1637              while( cur != NULL && cur->serial.len != 0 )
   1638              {
   1639                  if( crt->serial.len == cur->serial.len &&
   1640                      memcmp( crt->serial.p, cur->serial.p, crt->serial.len ) == 0 )
   1641                  {
   1642                      if( mbedtls_x509_time_is_past( &cur->revocation_date ) )
   1643                          return( 1 );
   1644                  }
   1645          
   1646                  cur = cur->next;
   \                     ??mbedtls_x509_crt_is_revoked_1: (+1)
   \        0xA   0x6BE4             LDR      R4,[R4, #+60]
   \                     ??mbedtls_x509_crt_is_revoked_0: (+1)
   \        0xC   0x2C00             CMP      R4,#+0
   \        0xE   0xD015             BEQ.N    ??mbedtls_x509_crt_is_revoked_2
   \       0x10   0x6920             LDR      R0,[R4, #+16]
   \       0x12   0x2800             CMP      R0,#+0
   \       0x14   0xD012             BEQ.N    ??mbedtls_x509_crt_is_revoked_2
   \       0x16   0x6A28             LDR      R0,[R5, #+32]
   \       0x18   0x6921             LDR      R1,[R4, #+16]
   \       0x1A   0x4288             CMP      R0,R1
   \       0x1C   0xD1F5             BNE.N    ??mbedtls_x509_crt_is_revoked_1
   \       0x1E   0x4602             MOV      R2,R0
   \       0x20   0x6961             LDR      R1,[R4, #+20]
   \       0x22   0x6A68             LDR      R0,[R5, #+36]
   \       0x24   0x....'....        BL       memcmp
   \       0x28   0x2800             CMP      R0,#+0
   \       0x2A   0xD1EE             BNE.N    ??mbedtls_x509_crt_is_revoked_1
   \       0x2C   0xF104 0x0018      ADD      R0,R4,#+24
   \       0x30   0x....'....        BL       mbedtls_x509_time_is_past
   \       0x34   0x2800             CMP      R0,#+0
   \       0x36   0xD0E8             BEQ.N    ??mbedtls_x509_crt_is_revoked_1
   \       0x38   0x2001             MOVS     R0,#+1
   \       0x3A   0xBD32             POP      {R1,R4,R5,PC}
   1647              }
   1648          
   1649              return( 0 );
   \                     ??mbedtls_x509_crt_is_revoked_2: (+1)
   \       0x3C   0x2000             MOVS     R0,#+0
   \       0x3E   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   1650          }
   1651          
   1652          /*
   1653           * Check that the given certificate is not revoked according to the CRL.
   1654           * Skip validation if no CRL for the given CA is present.
   1655           */

   \                                 In section .text, align 2, keep-with-next
   1656          static int x509_crt_verifycrl( mbedtls_x509_crt *crt, mbedtls_x509_crt *ca,
   1657                                         mbedtls_x509_crl *crl_list,
   1658                                         const mbedtls_x509_crt_profile *profile )
   1659          {
   \                     x509_crt_verifycrl: (+1)
   \        0x0   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \        0x4   0xB094             SUB      SP,SP,#+80
   \        0x6   0x4606             MOV      R6,R0
   \        0x8   0x460D             MOV      R5,R1
   \        0xA   0x4614             MOV      R4,R2
   \        0xC   0x461F             MOV      R7,R3
   1660              int flags = 0;
   \        0xE   0xF04F 0x0800      MOV      R8,#+0
   1661              unsigned char hash[MBEDTLS_MD_MAX_SIZE];
   1662              const mbedtls_md_info_t *md_info;
   1663          
   1664              if( ca == NULL )
   \       0x12   0x2D00             CMP      R5,#+0
   \       0x14   0xD06F             BEQ.N    ??x509_crt_verifycrl_0
   1665                  return( flags );
   1666          
   1667              while( crl_list != NULL )
   \                     ??x509_crt_verifycrl_1: (+1)
   \       0x16   0x2C00             CMP      R4,#+0
   \       0x18   0xD06D             BEQ.N    ??x509_crt_verifycrl_0
   1668              {
   1669                  if( crl_list->version == 0 ||
   1670                      crl_list->issuer_raw.len != ca->subject_raw.len ||
   1671                      memcmp( crl_list->issuer_raw.p, ca->subject_raw.p,
   1672                              crl_list->issuer_raw.len ) != 0 )
   \       0x1A   0x69A0             LDR      R0,[R4, #+24]
   \       0x1C   0x2800             CMP      R0,#+0
   \       0x1E   0xD065             BEQ.N    ??x509_crt_verifycrl_2
   \       0x20   0x6AE0             LDR      R0,[R4, #+44]
   \       0x22   0x6C69             LDR      R1,[R5, #+68]
   \       0x24   0x4288             CMP      R0,R1
   \       0x26   0xD161             BNE.N    ??x509_crt_verifycrl_2
   \       0x28   0x4602             MOV      R2,R0
   \       0x2A   0x6CA9             LDR      R1,[R5, #+72]
   \       0x2C   0x6B20             LDR      R0,[R4, #+48]
   \       0x2E   0x....'....        BL       memcmp
   \       0x32   0x2800             CMP      R0,#+0
   \       0x34   0xD15A             BNE.N    ??x509_crt_verifycrl_2
   1673                  {
   1674                      crl_list = crl_list->next;
   1675                      continue;
   1676                  }
   1677          
   1678                  /*
   1679                   * Check if the CA is configured to sign CRLs
   1680                   */
   1681          #if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
   1682                  if( mbedtls_x509_crt_check_key_usage( ca, MBEDTLS_X509_KU_CRL_SIGN ) != 0 )
   \       0x36   0x2102             MOVS     R1,#+2
   \       0x38   0x4628             MOV      R0,R5
   \       0x3A   0x....'....        BL       mbedtls_x509_crt_check_key_usage
   \       0x3E   0x2800             CMP      R0,#+0
   \       0x40   0xD15D             BNE.N    ??x509_crt_verifycrl_3
   1683                  {
   1684                      flags |= MBEDTLS_X509_BADCRL_NOT_TRUSTED;
   1685                      break;
   1686                  }
   1687          #endif
   1688          
   1689                  /*
   1690                   * Check if CRL is correctly signed by the trusted CA
   1691                   */
   1692                  if( x509_profile_check_md_alg( profile, crl_list->sig_md ) != 0 )
   \       0x42   0xF894 0x10E8      LDRB     R1,[R4, #+232]
   \       0x46   0x4638             MOV      R0,R7
   \       0x48   0x....'....        BL       x509_profile_check_md_alg
   \       0x4C   0x2800             CMP      R0,#+0
   \       0x4E   0xD001             BEQ.N    ??x509_crt_verifycrl_4
   1693                      flags |= MBEDTLS_X509_BADCRL_BAD_MD;
   \       0x50   0xF448 0x3800      ORR      R8,R8,#0x20000
   1694          
   1695                  if( x509_profile_check_pk_alg( profile, crl_list->sig_pk ) != 0 )
   \                     ??x509_crt_verifycrl_4: (+1)
   \       0x54   0xF894 0x10E9      LDRB     R1,[R4, #+233]
   \       0x58   0x4638             MOV      R0,R7
   \       0x5A   0x....'....        BL       x509_profile_check_pk_alg
   \       0x5E   0x2800             CMP      R0,#+0
   \       0x60   0xD001             BEQ.N    ??x509_crt_verifycrl_5
   1696                      flags |= MBEDTLS_X509_BADCRL_BAD_PK;
   \       0x62   0xF448 0x2880      ORR      R8,R8,#0x40000
   1697          
   1698                  md_info = mbedtls_md_info_from_type( crl_list->sig_md );
   \                     ??x509_crt_verifycrl_5: (+1)
   \       0x66   0xF894 0x00E8      LDRB     R0,[R4, #+232]
   \       0x6A   0x....'....        BL       mbedtls_md_info_from_type
   \       0x6E   0x4681             MOV      R9,R0
   1699                  if( mbedtls_md( md_info, crl_list->tbs.p, crl_list->tbs.len, hash ) != 0 )
   \       0x70   0xAB04             ADD      R3,SP,#+16
   \       0x72   0x6922             LDR      R2,[R4, #+16]
   \       0x74   0x6961             LDR      R1,[R4, #+20]
   \       0x76   0x....'....        BL       mbedtls_md
   \       0x7A   0x2800             CMP      R0,#+0
   \       0x7C   0xD13F             BNE.N    ??x509_crt_verifycrl_3
   1700                  {
   1701                      /* Note: this can't happen except after an internal error */
   1702                      flags |= MBEDTLS_X509_BADCRL_NOT_TRUSTED;
   1703                      break;
   1704                  }
   1705          
   1706                  if( x509_profile_check_key( profile, &ca->pk ) != 0 )
   \       0x7E   0xF105 0x01BC      ADD      R1,R5,#+188
   \       0x82   0x4638             MOV      R0,R7
   \       0x84   0x....'....        BL       x509_profile_check_key
   \       0x88   0x2800             CMP      R0,#+0
   \       0x8A   0xD001             BEQ.N    ??x509_crt_verifycrl_6
   1707                      flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
   \       0x8C   0xF448 0x3880      ORR      R8,R8,#0x10000
   1708          
   1709                  if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
   1710                                     crl_list->sig_md, hash, mbedtls_md_get_size( md_info ),
   1711                                     crl_list->sig.p, crl_list->sig.len ) != 0 )
   \                     ??x509_crt_verifycrl_6: (+1)
   \       0x90   0x4648             MOV      R0,R9
   \       0x92   0x....'....        BL       mbedtls_md_get_size
   \       0x96   0xF8D4 0x10E0      LDR      R1,[R4, #+224]
   \       0x9A   0x9103             STR      R1,[SP, #+12]
   \       0x9C   0xF8D4 0x10E4      LDR      R1,[R4, #+228]
   \       0xA0   0x9102             STR      R1,[SP, #+8]
   \       0xA2   0x9001             STR      R0,[SP, #+4]
   \       0xA4   0xA804             ADD      R0,SP,#+16
   \       0xA6   0x9000             STR      R0,[SP, #+0]
   \       0xA8   0xF894 0x30E8      LDRB     R3,[R4, #+232]
   \       0xAC   0xF105 0x02BC      ADD      R2,R5,#+188
   \       0xB0   0xF8D4 0x10EC      LDR      R1,[R4, #+236]
   \       0xB4   0xF894 0x00E9      LDRB     R0,[R4, #+233]
   \       0xB8   0x....'....        BL       mbedtls_pk_verify_ext
   \       0xBC   0x2800             CMP      R0,#+0
   \       0xBE   0xD11E             BNE.N    ??x509_crt_verifycrl_3
   1712                  {
   1713                      flags |= MBEDTLS_X509_BADCRL_NOT_TRUSTED;
   1714                      break;
   1715                  }
   1716          
   1717                  /*
   1718                   * Check for validity of CRL (Do not drop out)
   1719                   */
   1720                  if( mbedtls_x509_time_is_past( &crl_list->next_update ) )
   \       0xC0   0xF104 0x006C      ADD      R0,R4,#+108
   \       0xC4   0x....'....        BL       mbedtls_x509_time_is_past
   \       0xC8   0x2800             CMP      R0,#+0
   \       0xCA   0xD001             BEQ.N    ??x509_crt_verifycrl_7
   1721                      flags |= MBEDTLS_X509_BADCRL_EXPIRED;
   \       0xCC   0xF048 0x0820      ORR      R8,R8,#0x20
   1722          
   1723                  if( mbedtls_x509_time_is_future( &crl_list->this_update ) )
   \                     ??x509_crt_verifycrl_7: (+1)
   \       0xD0   0xF104 0x0054      ADD      R0,R4,#+84
   \       0xD4   0x....'....        BL       mbedtls_x509_time_is_future
   \       0xD8   0x2800             CMP      R0,#+0
   \       0xDA   0xD001             BEQ.N    ??x509_crt_verifycrl_8
   1724                      flags |= MBEDTLS_X509_BADCRL_FUTURE;
   \       0xDC   0xF448 0x6880      ORR      R8,R8,#0x400
   1725          
   1726                  /*
   1727                   * Check if certificate is revoked
   1728                   */
   1729                  if( mbedtls_x509_crt_is_revoked( crt, crl_list ) )
   \                     ??x509_crt_verifycrl_8: (+1)
   \       0xE0   0x4621             MOV      R1,R4
   \       0xE2   0x4630             MOV      R0,R6
   \       0xE4   0x....'....        BL       mbedtls_x509_crt_is_revoked
   \       0xE8   0x2800             CMP      R0,#+0
   \       0xEA   0xD102             BNE.N    ??x509_crt_verifycrl_9
   1730                  {
   1731                      flags |= MBEDTLS_X509_BADCERT_REVOKED;
   1732                      break;
   1733                  }
   1734          
   1735                  crl_list = crl_list->next;
   \                     ??x509_crt_verifycrl_2: (+1)
   \       0xEC   0xF8D4 0x40F0      LDR      R4,[R4, #+240]
   \       0xF0   0xE791             B.N      ??x509_crt_verifycrl_1
   \                     ??x509_crt_verifycrl_9: (+1)
   \       0xF2   0xF048 0x0802      ORR      R8,R8,#0x2
   1736              }
   1737          
   1738              return( flags );
   \                     ??x509_crt_verifycrl_0: (+1)
   \       0xF6   0x4640             MOV      R0,R8
   \       0xF8   0xB015             ADD      SP,SP,#+84
   \       0xFA   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
   \                     ??x509_crt_verifycrl_3: (+1)
   \       0xFE   0xF048 0x0810      ORR      R8,R8,#0x10
   \      0x102   0xE7F8             B.N      ??x509_crt_verifycrl_0
   1739          }
   1740          #endif /* MBEDTLS_X509_CRL_PARSE_C */
   1741          
   1742          /*
   1743           * Like memcmp, but case-insensitive and always returns -1 if different
   1744           */

   \                                 In section .text, align 2, keep-with-next
   1745          static int x509_memcasecmp( const void *s1, const void *s2, size_t len )
   1746          {
   \                     x509_memcasecmp: (+1)
   \        0x0   0xB430             PUSH     {R4,R5}
   1747              size_t i;
   1748              unsigned char diff;
   1749              const unsigned char *n1 = s1, *n2 = s2;
   1750          
   1751              for( i = 0; i < len; i++ )
   \        0x2   0x2400             MOVS     R4,#+0
   \                     ??x509_memcasecmp_0: (+1)
   \        0x4   0x4294             CMP      R4,R2
   \        0x6   0xD20F             BCS.N    ??x509_memcasecmp_1
   1752              {
   1753                  diff = n1[i] ^ n2[i];
   \        0x8   0x5D03             LDRB     R3,[R0, R4]
   \        0xA   0x5D0D             LDRB     R5,[R1, R4]
   \        0xC   0x406B             EORS     R3,R5,R3
   1754          
   1755                  if( diff == 0 )
   \        0xE   0xD009             BEQ.N    ??x509_memcasecmp_2
   1756                      continue;
   1757          
   1758                  if( diff == 32 &&
   1759                      ( ( n1[i] >= 'a' && n1[i] <= 'z' ) ||
   1760                        ( n1[i] >= 'A' && n1[i] <= 'Z' ) ) )
   \       0x10   0x2B20             CMP      R3,#+32
   \       0x12   0xD10C             BNE.N    ??x509_memcasecmp_3
   \       0x14   0x5D03             LDRB     R3,[R0, R4]
   \       0x16   0x3B61             SUBS     R3,R3,#+97
   \       0x18   0x2B1A             CMP      R3,#+26
   \       0x1A   0xD303             BCC.N    ??x509_memcasecmp_2
   \       0x1C   0x5D03             LDRB     R3,[R0, R4]
   \       0x1E   0x3B41             SUBS     R3,R3,#+65
   \       0x20   0x2B1A             CMP      R3,#+26
   \       0x22   0xD204             BCS.N    ??x509_memcasecmp_3
   \                     ??x509_memcasecmp_2: (+1)
   \       0x24   0x1C64             ADDS     R4,R4,#+1
   \       0x26   0xE7ED             B.N      ??x509_memcasecmp_0
   1761                  {
   1762                      continue;
   1763                  }
   1764          
   1765                  return( -1 );
   1766              }
   1767          
   1768              return( 0 );
   \                     ??x509_memcasecmp_1: (+1)
   \       0x28   0x2000             MOVS     R0,#+0
   \                     ??x509_memcasecmp_4: (+1)
   \       0x2A   0xBC30             POP      {R4,R5}
   \       0x2C   0x4770             BX       LR               ;; return
   \                     ??x509_memcasecmp_3: (+1)
   \       0x2E   0xF04F 0x30FF      MOV      R0,#-1
   \       0x32   0xE7FA             B.N      ??x509_memcasecmp_4
   1769          }
   1770          
   1771          /*
   1772           * Return 0 if name matches wildcard, -1 otherwise
   1773           */

   \                                 In section .text, align 2, keep-with-next
   1774          static int x509_check_wildcard( const char *cn, const mbedtls_x509_buf *name )
   1775          {
   \                     x509_check_wildcard: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4605             MOV      R5,R0
   \        0x4   0x460E             MOV      R6,R1
   1776              size_t i;
   1777              size_t cn_idx = 0, cn_len = strlen( cn );
   \        0x6   0x2400             MOVS     R4,#+0
   \        0x8   0x....'....        BL       strlen
   1778          
   1779              /* We can't have a match if there is no wildcard to match */
   1780              if( name->len < 3 || name->p[0] != '*' || name->p[1] != '.' )
   \        0xC   0x6871             LDR      R1,[R6, #+4]
   \        0xE   0x2903             CMP      R1,#+3
   \       0x10   0xD322             BCC.N    ??x509_check_wildcard_0
   \       0x12   0x68B1             LDR      R1,[R6, #+8]
   \       0x14   0x7809             LDRB     R1,[R1, #+0]
   \       0x16   0x292A             CMP      R1,#+42
   \       0x18   0xD11E             BNE.N    ??x509_check_wildcard_0
   \       0x1A   0x68B1             LDR      R1,[R6, #+8]
   \       0x1C   0x7849             LDRB     R1,[R1, #+1]
   \       0x1E   0x292E             CMP      R1,#+46
   \       0x20   0xD11A             BNE.N    ??x509_check_wildcard_0
   1781                  return( -1 );
   1782          
   1783              for( i = 0; i < cn_len; ++i )
   \       0x22   0x4621             MOV      R1,R4
   \       0x24   0xE000             B.N      ??x509_check_wildcard_1
   \                     ??x509_check_wildcard_2: (+1)
   \       0x26   0x1C49             ADDS     R1,R1,#+1
   \                     ??x509_check_wildcard_1: (+1)
   \       0x28   0x4281             CMP      R1,R0
   \       0x2A   0xD203             BCS.N    ??x509_check_wildcard_3
   1784              {
   1785                  if( cn[i] == '.' )
   \       0x2C   0x5C6A             LDRB     R2,[R5, R1]
   \       0x2E   0x2A2E             CMP      R2,#+46
   \       0x30   0xD1F9             BNE.N    ??x509_check_wildcard_2
   1786                  {
   1787                      cn_idx = i;
   \       0x32   0x460C             MOV      R4,R1
   1788                      break;
   1789                  }
   1790              }
   1791          
   1792              if( cn_idx == 0 )
   \                     ??x509_check_wildcard_3: (+1)
   \       0x34   0x2C00             CMP      R4,#+0
   \       0x36   0xD00F             BEQ.N    ??x509_check_wildcard_0
   1793                  return( -1 );
   1794          
   1795              if( cn_len - cn_idx == name->len - 1 &&
   1796                  x509_memcasecmp( name->p + 1, cn + cn_idx, name->len - 1 ) == 0 )
   \       0x38   0x1B00             SUBS     R0,R0,R4
   \       0x3A   0x6871             LDR      R1,[R6, #+4]
   \       0x3C   0x1E49             SUBS     R1,R1,#+1
   \       0x3E   0x4288             CMP      R0,R1
   \       0x40   0xD10A             BNE.N    ??x509_check_wildcard_0
   \       0x42   0x6872             LDR      R2,[R6, #+4]
   \       0x44   0x1E52             SUBS     R2,R2,#+1
   \       0x46   0x1929             ADDS     R1,R5,R4
   \       0x48   0x68B0             LDR      R0,[R6, #+8]
   \       0x4A   0x1C40             ADDS     R0,R0,#+1
   \       0x4C   0x....'....        BL       x509_memcasecmp
   \       0x50   0x2800             CMP      R0,#+0
   \       0x52   0xD101             BNE.N    ??x509_check_wildcard_0
   1797              {
   1798                  return( 0 );
   \       0x54   0x2000             MOVS     R0,#+0
   \       0x56   0xBD70             POP      {R4-R6,PC}
   1799              }
   1800          
   1801              return( -1 );
   \                     ??x509_check_wildcard_0: (+1)
   \       0x58   0xF04F 0x30FF      MOV      R0,#-1
   \       0x5C   0xBD70             POP      {R4-R6,PC}       ;; return
   1802          }
   1803          
   1804          /*
   1805           * Compare two X.509 strings, case-insensitive, and allowing for some encoding
   1806           * variations (but not all).
   1807           *
   1808           * Return 0 if equal, -1 otherwise.
   1809           */

   \                                 In section .text, align 2, keep-with-next
   1810          static int x509_string_cmp( const mbedtls_x509_buf *a, const mbedtls_x509_buf *b )
   1811          {
   \                     x509_string_cmp: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
   1812              if( a->tag == b->tag &&
   1813                  a->len == b->len &&
   1814                  memcmp( a->p, b->p, b->len ) == 0 )
   \        0x6   0x6820             LDR      R0,[R4, #+0]
   \        0x8   0x6829             LDR      R1,[R5, #+0]
   \        0xA   0x4288             CMP      R0,R1
   \        0xC   0xD10A             BNE.N    ??x509_string_cmp_0
   \        0xE   0x6860             LDR      R0,[R4, #+4]
   \       0x10   0x6869             LDR      R1,[R5, #+4]
   \       0x12   0x4288             CMP      R0,R1
   \       0x14   0xD106             BNE.N    ??x509_string_cmp_0
   \       0x16   0x460A             MOV      R2,R1
   \       0x18   0x68A9             LDR      R1,[R5, #+8]
   \       0x1A   0x68A0             LDR      R0,[R4, #+8]
   \       0x1C   0x....'....        BL       memcmp
   \       0x20   0x2800             CMP      R0,#+0
   \       0x22   0xD014             BEQ.N    ??x509_string_cmp_1
   1815              {
   1816                  return( 0 );
   1817              }
   1818          
   1819              if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
   1820                  ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
   1821                  a->len == b->len &&
   1822                  x509_memcasecmp( a->p, b->p, b->len ) == 0 )
   \                     ??x509_string_cmp_0: (+1)
   \       0x24   0x6820             LDR      R0,[R4, #+0]
   \       0x26   0x280C             CMP      R0,#+12
   \       0x28   0xD001             BEQ.N    ??x509_string_cmp_2
   \       0x2A   0x2813             CMP      R0,#+19
   \       0x2C   0xD111             BNE.N    ??x509_string_cmp_3
   \                     ??x509_string_cmp_2: (+1)
   \       0x2E   0x6828             LDR      R0,[R5, #+0]
   \       0x30   0x280C             CMP      R0,#+12
   \       0x32   0xD001             BEQ.N    ??x509_string_cmp_4
   \       0x34   0x2813             CMP      R0,#+19
   \       0x36   0xD10C             BNE.N    ??x509_string_cmp_3
   \                     ??x509_string_cmp_4: (+1)
   \       0x38   0x6860             LDR      R0,[R4, #+4]
   \       0x3A   0x6869             LDR      R1,[R5, #+4]
   \       0x3C   0x4288             CMP      R0,R1
   \       0x3E   0xD108             BNE.N    ??x509_string_cmp_3
   \       0x40   0x460A             MOV      R2,R1
   \       0x42   0x68A9             LDR      R1,[R5, #+8]
   \       0x44   0x68A0             LDR      R0,[R4, #+8]
   \       0x46   0x....'....        BL       x509_memcasecmp
   \       0x4A   0x2800             CMP      R0,#+0
   \       0x4C   0xD101             BNE.N    ??x509_string_cmp_3
   1823              {
   1824                  return( 0 );
   \                     ??x509_string_cmp_1: (+1)
   \       0x4E   0x2000             MOVS     R0,#+0
   \       0x50   0xBD32             POP      {R1,R4,R5,PC}
   1825              }
   1826          
   1827              return( -1 );
   \                     ??x509_string_cmp_3: (+1)
   \       0x52   0xF04F 0x30FF      MOV      R0,#-1
   \       0x56   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   1828          }
   1829          
   1830          /*
   1831           * Compare two X.509 Names (aka rdnSequence).
   1832           *
   1833           * See RFC 5280 section 7.1, though we don't implement the whole algorithm:
   1834           * we sometimes return unequal when the full algorithm would return equal,
   1835           * but never the other way. (In particular, we don't do Unicode normalisation
   1836           * or space folding.)
   1837           *
   1838           * Return 0 if equal, -1 otherwise.
   1839           */

   \                                 In section .text, align 2, keep-with-next
   1840          static int x509_name_cmp( const mbedtls_x509_name *a, const mbedtls_x509_name *b )
   1841          {
   \                     x509_name_cmp: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4605             MOV      R5,R0
   \        0x4   0x460C             MOV      R4,R1
   1842              /* Avoid recursion, it might not be optimised by the compiler */
   1843              while( a != NULL || b != NULL )
   \                     ??x509_name_cmp_0: (+1)
   \        0x6   0x2D00             CMP      R5,#+0
   \        0x8   0xD101             BNE.N    ??x509_name_cmp_1
   \        0xA   0x2C00             CMP      R4,#+0
   \        0xC   0xD021             BEQ.N    ??x509_name_cmp_2
   1844              {
   1845                  if( a == NULL || b == NULL )
   \                     ??x509_name_cmp_1: (+1)
   \        0xE   0x2D00             CMP      R5,#+0
   \       0x10   0xD021             BEQ.N    ??x509_name_cmp_3
   \       0x12   0x2C00             CMP      R4,#+0
   \       0x14   0xD01F             BEQ.N    ??x509_name_cmp_3
   1846                      return( -1 );
   1847          
   1848                  /* type */
   1849                  if( a->oid.tag != b->oid.tag ||
   1850                      a->oid.len != b->oid.len ||
   1851                      memcmp( a->oid.p, b->oid.p, b->oid.len ) != 0 )
   \       0x16   0x6828             LDR      R0,[R5, #+0]
   \       0x18   0x6821             LDR      R1,[R4, #+0]
   \       0x1A   0x4288             CMP      R0,R1
   \       0x1C   0xD11B             BNE.N    ??x509_name_cmp_3
   \       0x1E   0x6868             LDR      R0,[R5, #+4]
   \       0x20   0x6861             LDR      R1,[R4, #+4]
   \       0x22   0x4288             CMP      R0,R1
   \       0x24   0xD117             BNE.N    ??x509_name_cmp_3
   \       0x26   0x460A             MOV      R2,R1
   \       0x28   0x68A1             LDR      R1,[R4, #+8]
   \       0x2A   0x68A8             LDR      R0,[R5, #+8]
   \       0x2C   0x....'....        BL       memcmp
   \       0x30   0x2800             CMP      R0,#+0
   \       0x32   0xD110             BNE.N    ??x509_name_cmp_3
   1852                  {
   1853                      return( -1 );
   1854                  }
   1855          
   1856                  /* value */
   1857                  if( x509_string_cmp( &a->val, &b->val ) != 0 )
   \       0x34   0xF104 0x010C      ADD      R1,R4,#+12
   \       0x38   0xF105 0x000C      ADD      R0,R5,#+12
   \       0x3C   0x....'....        BL       x509_string_cmp
   \       0x40   0x2800             CMP      R0,#+0
   \       0x42   0xD108             BNE.N    ??x509_name_cmp_3
   1858                      return( -1 );
   1859          
   1860                  /* structure of the list of sets */
   1861                  if( a->next_merged != b->next_merged )
   \       0x44   0x7F28             LDRB     R0,[R5, #+28]
   \       0x46   0x7F21             LDRB     R1,[R4, #+28]
   \       0x48   0x4288             CMP      R0,R1
   \       0x4A   0xD104             BNE.N    ??x509_name_cmp_3
   1862                      return( -1 );
   1863          
   1864                  a = a->next;
   \       0x4C   0x69AD             LDR      R5,[R5, #+24]
   1865                  b = b->next;
   \       0x4E   0x69A4             LDR      R4,[R4, #+24]
   \       0x50   0xE7D9             B.N      ??x509_name_cmp_0
   1866              }
   1867          
   1868              /* a == NULL == b */
   1869              return( 0 );
   \                     ??x509_name_cmp_2: (+1)
   \       0x52   0x2000             MOVS     R0,#+0
   \       0x54   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   \                     ??x509_name_cmp_3: (+1)
   \       0x56   0xF04F 0x30FF      MOV      R0,#-1
   \       0x5A   0xBD32             POP      {R1,R4,R5,PC}
   1870          }
   1871          
   1872          /*
   1873           * Check the signature of a certificate by its parent
   1874           */

   \                                 In section .text, align 2, keep-with-next
   1875          static int x509_crt_check_signature( const mbedtls_x509_crt *child,
   1876                                               mbedtls_x509_crt *parent )
   1877          {
   \                     x509_crt_check_signature: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0xB094             SUB      SP,SP,#+80
   \        0x4   0x4604             MOV      R4,R0
   \        0x6   0x460D             MOV      R5,R1
   1878              const mbedtls_md_info_t *md_info;
   1879              unsigned char hash[MBEDTLS_MD_MAX_SIZE];
   1880          
   1881              md_info = mbedtls_md_info_from_type( child->sig_md );
   \        0x8   0xF894 0x0128      LDRB     R0,[R4, #+296]
   \        0xC   0x....'....        BL       mbedtls_md_info_from_type
   \       0x10   0x4606             MOV      R6,R0
   1882              if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
   \       0x12   0xAB04             ADD      R3,SP,#+16
   \       0x14   0x6922             LDR      R2,[R4, #+16]
   \       0x16   0x6961             LDR      R1,[R4, #+20]
   \       0x18   0x....'....        BL       mbedtls_md
   \       0x1C   0x2800             CMP      R0,#+0
   \       0x1E   0xD002             BEQ.N    ??x509_crt_check_signature_0
   1883              {
   1884                  /* Note: this can't happen except after an internal error */
   1885                  return( -1 );
   \       0x20   0xF04F 0x30FF      MOV      R0,#-1
   \       0x24   0xE01B             B.N      ??x509_crt_check_signature_1
   1886              }
   1887          
   1888              if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
   1889                          child->sig_md, hash, mbedtls_md_get_size( md_info ),
   1890                          child->sig.p, child->sig.len ) != 0 )
   \                     ??x509_crt_check_signature_0: (+1)
   \       0x26   0x4630             MOV      R0,R6
   \       0x28   0x....'....        BL       mbedtls_md_get_size
   \       0x2C   0xF8D4 0x1120      LDR      R1,[R4, #+288]
   \       0x30   0x9103             STR      R1,[SP, #+12]
   \       0x32   0xF8D4 0x1124      LDR      R1,[R4, #+292]
   \       0x36   0x9102             STR      R1,[SP, #+8]
   \       0x38   0x9001             STR      R0,[SP, #+4]
   \       0x3A   0xA804             ADD      R0,SP,#+16
   \       0x3C   0x9000             STR      R0,[SP, #+0]
   \       0x3E   0xF894 0x3128      LDRB     R3,[R4, #+296]
   \       0x42   0xF105 0x02BC      ADD      R2,R5,#+188
   \       0x46   0xF8D4 0x112C      LDR      R1,[R4, #+300]
   \       0x4A   0xF894 0x0129      LDRB     R0,[R4, #+297]
   \       0x4E   0x....'....        BL       mbedtls_pk_verify_ext
   \       0x52   0x2800             CMP      R0,#+0
   \       0x54   0xD002             BEQ.N    ??x509_crt_check_signature_2
   1891              {
   1892                  return( -1 );
   \       0x56   0xF04F 0x30FF      MOV      R0,#-1
   \       0x5A   0xE000             B.N      ??x509_crt_check_signature_1
   1893              }
   1894          
   1895              return( 0 );
   \                     ??x509_crt_check_signature_2: (+1)
   \       0x5C   0x2000             MOVS     R0,#+0
   \                     ??x509_crt_check_signature_1: (+1)
   \       0x5E   0xB014             ADD      SP,SP,#+80
   \       0x60   0xBD70             POP      {R4-R6,PC}       ;; return
   1896          }
   1897          
   1898          /*
   1899           * Check if 'parent' is a suitable parent (signing CA) for 'child'.
   1900           * Return 0 if yes, -1 if not.
   1901           *
   1902           * top means parent is a locally-trusted certificate
   1903           */

   \                                 In section .text, align 2, keep-with-next
   1904          static int x509_crt_check_parent( const mbedtls_x509_crt *child,
   1905                                            const mbedtls_x509_crt *parent,
   1906                                            int top )
   1907          {
   \                     x509_crt_check_parent: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x460D             MOV      R5,R1
   \        0x4   0x4614             MOV      R4,R2
   1908              int need_ca_bit;
   1909          
   1910              /* Parent must be the issuer */
   1911              if( x509_name_cmp( &child->issuer, &parent->subject ) != 0 )
   \        0x6   0xF105 0x016C      ADD      R1,R5,#+108
   \        0xA   0x304C             ADDS     R0,R0,#+76
   \        0xC   0x....'....        BL       x509_name_cmp
   \       0x10   0x2800             CMP      R0,#+0
   \       0x12   0xD114             BNE.N    ??x509_crt_check_parent_0
   1912                  return( -1 );
   1913          
   1914              /* Parent must have the basicConstraints CA bit set as a general rule */
   1915              need_ca_bit = 1;
   \       0x14   0x2001             MOVS     R0,#+1
   1916          
   1917              /* Exception: v1/v2 certificates that are locally trusted. */
   1918              if( top && parent->version < 3 )
   \       0x16   0x2C00             CMP      R4,#+0
   \       0x18   0xD003             BEQ.N    ??x509_crt_check_parent_1
   \       0x1A   0x69A9             LDR      R1,[R5, #+24]
   \       0x1C   0x2903             CMP      R1,#+3
   \       0x1E   0xDA00             BGE.N    ??x509_crt_check_parent_1
   1919                  need_ca_bit = 0;
   \       0x20   0x2000             MOVS     R0,#+0
   1920          
   1921              if( need_ca_bit && ! parent->ca_istrue )
   \                     ??x509_crt_check_parent_1: (+1)
   \       0x22   0x2800             CMP      R0,#+0
   \       0x24   0xD003             BEQ.N    ??x509_crt_check_parent_2
   \       0x26   0xF8D5 0x10FC      LDR      R1,[R5, #+252]
   \       0x2A   0x2900             CMP      R1,#+0
   \       0x2C   0xD007             BEQ.N    ??x509_crt_check_parent_0
   1922                  return( -1 );
   1923          
   1924          #if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
   1925              if( need_ca_bit &&
   1926                  mbedtls_x509_crt_check_key_usage( parent, MBEDTLS_X509_KU_KEY_CERT_SIGN ) != 0 )
   \                     ??x509_crt_check_parent_2: (+1)
   \       0x2E   0x2800             CMP      R0,#+0
   \       0x30   0xD008             BEQ.N    ??x509_crt_check_parent_3
   \       0x32   0x2104             MOVS     R1,#+4
   \       0x34   0x4628             MOV      R0,R5
   \       0x36   0x....'....        BL       mbedtls_x509_crt_check_key_usage
   \       0x3A   0x2800             CMP      R0,#+0
   \       0x3C   0xD002             BEQ.N    ??x509_crt_check_parent_3
   1927              {
   1928                  return( -1 );
   \                     ??x509_crt_check_parent_0: (+1)
   \       0x3E   0xF04F 0x30FF      MOV      R0,#-1
   \       0x42   0xBD32             POP      {R1,R4,R5,PC}
   1929              }
   1930          #endif
   1931          
   1932              return( 0 );
   \                     ??x509_crt_check_parent_3: (+1)
   \       0x44   0x2000             MOVS     R0,#+0
   \       0x46   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   1933          }
   1934          
   1935          /*
   1936           * Find a suitable parent for child in candidates, or return NULL.
   1937           *
   1938           * Here suitable is defined as:
   1939           *  1. subject name matches child's issuer
   1940           *  2. if necessary, the CA bit is set and key usage allows signing certs
   1941           *  3. for trusted roots, the signature is correct
   1942           *  4. pathlen constraints are satisfied
   1943           *
   1944           * If there's a suitable candidate which is also time-valid, return the first
   1945           * such. Otherwise, return the first suitable candidate (or NULL if there is
   1946           * none).
   1947           *
   1948           * The rationale for this rule is that someone could have a list of trusted
   1949           * roots with two versions on the same root with different validity periods.
   1950           * (At least one user reported having such a list and wanted it to just work.)
   1951           * The reason we don't just require time-validity is that generally there is
   1952           * only one version, and if it's expired we want the flags to state that
   1953           * rather than NOT_TRUSTED, as would be the case if we required it here.
   1954           *
   1955           * The rationale for rule 3 (signature for trusted roots) is that users might
   1956           * have two versions of the same CA with different keys in their list, and the
   1957           * way we select the correct one is by checking the signature (as we don't
   1958           * rely on key identifier extensions). (This is one way users might choose to
   1959           * handle key rollover, another relies on self-issued certs, see [SIRO].)
   1960           *
   1961           * Arguments:
   1962           *  - [in] child: certificate for which we're looking for a parent
   1963           *  - [in] candidates: chained list of potential parents
   1964           *  - [in] top: 1 if candidates consists of trusted roots, ie we're at the top
   1965           *         of the chain, 0 otherwise
   1966           *  - [in] path_cnt: number of intermediates seen so far
   1967           *  - [in] self_cnt: number of self-signed intermediates seen so far
   1968           *         (will never be greater than path_cnt)
   1969           *
   1970           * Return value:
   1971           *  - the first suitable parent found (see above regarding time-validity)
   1972           *  - NULL if no suitable parent was found
   1973           */

   \                                 In section .text, align 2, keep-with-next
   1974          static mbedtls_x509_crt *x509_crt_find_parent_in( mbedtls_x509_crt *child,
   1975                                                            mbedtls_x509_crt *candidates,
   1976                                                            int top,
   1977                                                            size_t path_cnt,
   1978                                                            size_t self_cnt )
   1979          {
   \                     x509_crt_find_parent_in: (+1)
   \        0x0   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \        0x4   0x4681             MOV      R9,R0
   \        0x6   0x460C             MOV      R4,R1
   \        0x8   0x4615             MOV      R5,R2
   \        0xA   0x461F             MOV      R7,R3
   \        0xC   0xF8DD 0x8020      LDR      R8,[SP, #+32]
   1980              mbedtls_x509_crt *parent, *badtime_parent = NULL;
   \       0x10   0x2600             MOVS     R6,#+0
   1981          
   1982              for( parent = candidates; parent != NULL; parent = parent->next )
   \                     ??x509_crt_find_parent_in_0: (+1)
   \       0x12   0x2C00             CMP      R4,#+0
   \       0x14   0xD029             BEQ.N    ??x509_crt_find_parent_in_1
   1983              {
   1984                  /* basic parenting skills (name, CA bit, key usage) */
   1985                  if( x509_crt_check_parent( child, parent, top ) != 0 )
   \       0x16   0x462A             MOV      R2,R5
   \       0x18   0x4621             MOV      R1,R4
   \       0x1A   0x4648             MOV      R0,R9
   \       0x1C   0x....'....        BL       x509_crt_check_parent
   \       0x20   0x2800             CMP      R0,#+0
   \       0x22   0xD11F             BNE.N    ??x509_crt_find_parent_in_2
   1986                      continue;
   1987          
   1988                  /* +1 because stored max_pathlen is 1 higher that the actual value */
   1989                  if( parent->max_pathlen > 0 &&
   1990                      (size_t) parent->max_pathlen < 1 + path_cnt - self_cnt )
   \       0x24   0xF8D4 0x0100      LDR      R0,[R4, #+256]
   \       0x28   0x2801             CMP      R0,#+1
   \       0x2A   0xDB04             BLT.N    ??x509_crt_find_parent_in_3
   \       0x2C   0x1C79             ADDS     R1,R7,#+1
   \       0x2E   0xEBA1 0x0108      SUB      R1,R1,R8
   \       0x32   0x4288             CMP      R0,R1
   \       0x34   0xD316             BCC.N    ??x509_crt_find_parent_in_2
   1991                  {
   1992                      continue;
   1993                  }
   1994          
   1995                  /* Signature */
   1996                  if( top && x509_crt_check_signature( child, parent ) != 0 )
   \                     ??x509_crt_find_parent_in_3: (+1)
   \       0x36   0x2D00             CMP      R5,#+0
   \       0x38   0xD005             BEQ.N    ??x509_crt_find_parent_in_4
   \       0x3A   0x4621             MOV      R1,R4
   \       0x3C   0x4648             MOV      R0,R9
   \       0x3E   0x....'....        BL       x509_crt_check_signature
   \       0x42   0x2800             CMP      R0,#+0
   \       0x44   0xD10E             BNE.N    ??x509_crt_find_parent_in_2
   1997                  {
   1998                      continue;
   1999                  }
   2000          
   2001                  /* optional time check */
   2002                  if( mbedtls_x509_time_is_past( &parent->valid_to ) ||
   2003                      mbedtls_x509_time_is_future( &parent->valid_from ) )
   \                     ??x509_crt_find_parent_in_4: (+1)
   \       0x46   0xF104 0x00A4      ADD      R0,R4,#+164
   \       0x4A   0x....'....        BL       mbedtls_x509_time_is_past
   \       0x4E   0x2800             CMP      R0,#+0
   \       0x50   0xD105             BNE.N    ??x509_crt_find_parent_in_5
   \       0x52   0xF104 0x008C      ADD      R0,R4,#+140
   \       0x56   0x....'....        BL       mbedtls_x509_time_is_future
   \       0x5A   0x2800             CMP      R0,#+0
   \       0x5C   0xD005             BEQ.N    ??x509_crt_find_parent_in_1
   2004                  {
   2005                      if( badtime_parent == NULL )
   \                     ??x509_crt_find_parent_in_5: (+1)
   \       0x5E   0x2E00             CMP      R6,#+0
   \       0x60   0xD100             BNE.N    ??x509_crt_find_parent_in_2
   2006                          badtime_parent = parent;
   \       0x62   0x4626             MOV      R6,R4
   2007          
   2008                      continue;
   2009                  }
   2010          
   2011                  break;
   2012              }
   \                     ??x509_crt_find_parent_in_2: (+1)
   \       0x64   0xF8D4 0x4130      LDR      R4,[R4, #+304]
   \       0x68   0xE7D3             B.N      ??x509_crt_find_parent_in_0
   2013          
   2014              if( parent == NULL )
   \                     ??x509_crt_find_parent_in_1: (+1)
   \       0x6A   0x2C00             CMP      R4,#+0
   \       0x6C   0xD100             BNE.N    ??x509_crt_find_parent_in_6
   2015                  parent = badtime_parent;
   \       0x6E   0x4634             MOV      R4,R6
   2016          
   2017              return( parent );
   \                     ??x509_crt_find_parent_in_6: (+1)
   \       0x70   0x4620             MOV      R0,R4
   \       0x72   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
   2018          }
   2019          
   2020          /*
   2021           * Find a parent in trusted CAs or the provided chain, or return NULL.
   2022           *
   2023           * Searches in trusted CAs first, and return the first suitable parent found
   2024           * (see find_parent_in() for definition of suitable).
   2025           *
   2026           * Arguments:
   2027           *  - [in] child: certificate for which we're looking for a parent, followed
   2028           *         by a chain of possible intermediates
   2029           *  - [in] trust_ca: locally trusted CAs
   2030           *  - [out] 1 if parent was found in trust_ca, 0 if found in provided chain
   2031           *  - [in] path_cnt: number of intermediates seen so far
   2032           *  - [in] self_cnt: number of self-signed intermediates seen so far
   2033           *         (will always be no greater than path_cnt)
   2034           *
   2035           * Return value:
   2036           *  - the first suitable parent found (see find_parent_in() for "suitable")
   2037           *  - NULL if no suitable parent was found
   2038           */

   \                                 In section .text, align 2, keep-with-next
   2039          static mbedtls_x509_crt *x509_crt_find_parent( mbedtls_x509_crt *child,
   2040                                                         mbedtls_x509_crt *trust_ca,
   2041                                                         int *parent_is_trusted,
   2042                                                         size_t path_cnt,
   2043                                                         size_t self_cnt )
   2044          {
   \                     x509_crt_find_parent: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x4615             MOV      R5,R2
   \        0x6   0x461E             MOV      R6,R3
   \        0x8   0x9F06             LDR      R7,[SP, #+24]
   2045              mbedtls_x509_crt *parent;
   2046          
   2047              /* Look for a parent in trusted CAs */
   2048              *parent_is_trusted = 1;
   \        0xA   0x2001             MOVS     R0,#+1
   \        0xC   0x6028             STR      R0,[R5, #+0]
   2049              parent = x509_crt_find_parent_in( child, trust_ca, 1, path_cnt, self_cnt );
   \        0xE   0x9700             STR      R7,[SP, #+0]
   \       0x10   0x4602             MOV      R2,R0
   \       0x12   0x4620             MOV      R0,R4
   \       0x14   0x....'....        BL       x509_crt_find_parent_in
   2050          
   2051              if( parent != NULL )
   \       0x18   0x2800             CMP      R0,#+0
   \       0x1A   0xD109             BNE.N    ??x509_crt_find_parent_0
   2052                  return( parent );
   2053          
   2054              /* Look for a parent upwards the chain */
   2055              *parent_is_trusted = 0;
   \       0x1C   0x2000             MOVS     R0,#+0
   \       0x1E   0x6028             STR      R0,[R5, #+0]
   2056              return( x509_crt_find_parent_in( child, child->next, 0, path_cnt, self_cnt ) );
   \       0x20   0x9700             STR      R7,[SP, #+0]
   \       0x22   0x4633             MOV      R3,R6
   \       0x24   0x4602             MOV      R2,R0
   \       0x26   0xF8D4 0x1130      LDR      R1,[R4, #+304]
   \       0x2A   0x4620             MOV      R0,R4
   \       0x2C   0x....'....        BL       x509_crt_find_parent_in
   \                     ??x509_crt_find_parent_0: (+1)
   \       0x30   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
   2057          }
   2058          
   2059          /*
   2060           * Check if an end-entity certificate is locally trusted
   2061           *
   2062           * Currently we require such certificates to be self-signed (actually only
   2063           * check for self-issued as self-signatures are not checked)
   2064           */

   \                                 In section .text, align 2, keep-with-next
   2065          static int x509_crt_check_ee_locally_trusted(
   2066                              mbedtls_x509_crt *crt,
   2067                              mbedtls_x509_crt *trust_ca )
   2068          {
   \                     x509_crt_check_ee_locally_trusted: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4605             MOV      R5,R0
   \        0x4   0x460C             MOV      R4,R1
   2069              mbedtls_x509_crt *cur;
   2070          
   2071              /* must be self-issued */
   2072              if( x509_name_cmp( &crt->issuer, &crt->subject ) != 0 )
   \        0x6   0xF105 0x016C      ADD      R1,R5,#+108
   \        0xA   0xF105 0x004C      ADD      R0,R5,#+76
   \        0xE   0x....'....        BL       x509_name_cmp
   \       0x12   0x2800             CMP      R0,#+0
   \       0x14   0xD111             BNE.N    ??x509_crt_check_ee_locally_trusted_0
   2073                  return( -1 );
   2074          
   2075              /* look for an exact match with trusted cert */
   2076              for( cur = trust_ca; cur != NULL; cur = cur->next )
   \       0x16   0xE001             B.N      ??x509_crt_check_ee_locally_trusted_1
   \                     ??x509_crt_check_ee_locally_trusted_2: (+1)
   \       0x18   0xF8D4 0x4130      LDR      R4,[R4, #+304]
   \                     ??x509_crt_check_ee_locally_trusted_1: (+1)
   \       0x1C   0x2C00             CMP      R4,#+0
   \       0x1E   0xD00C             BEQ.N    ??x509_crt_check_ee_locally_trusted_0
   2077              {
   2078                  if( crt->raw.len == cur->raw.len &&
   2079                      memcmp( crt->raw.p, cur->raw.p, crt->raw.len ) == 0 )
   \       0x20   0x6868             LDR      R0,[R5, #+4]
   \       0x22   0x6861             LDR      R1,[R4, #+4]
   \       0x24   0x4288             CMP      R0,R1
   \       0x26   0xD1F7             BNE.N    ??x509_crt_check_ee_locally_trusted_2
   \       0x28   0x4602             MOV      R2,R0
   \       0x2A   0x68A1             LDR      R1,[R4, #+8]
   \       0x2C   0x68A8             LDR      R0,[R5, #+8]
   \       0x2E   0x....'....        BL       memcmp
   \       0x32   0x2800             CMP      R0,#+0
   \       0x34   0xD1F0             BNE.N    ??x509_crt_check_ee_locally_trusted_2
   2080                  {
   2081                      return( 0 );
   \       0x36   0x2000             MOVS     R0,#+0
   \       0x38   0xBD32             POP      {R1,R4,R5,PC}
   2082                  }
   2083              }
   2084          
   2085              /* too bad */
   2086              return( -1 );
   \                     ??x509_crt_check_ee_locally_trusted_0: (+1)
   \       0x3A   0xF04F 0x30FF      MOV      R0,#-1
   \       0x3E   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   2087          }
   2088          
   2089          /*
   2090           * Build and verify a certificate chain
   2091           *
   2092           * Given a peer-provided list of certificates EE, C1, ..., Cn and
   2093           * a list of trusted certs R1, ... Rp, try to build and verify a chain
   2094           *      EE, Ci1, ... Ciq [, Rj]
   2095           * such that every cert in the chain is a child of the next one,
   2096           * jumping to a trusted root as early as possible.
   2097           *
   2098           * Verify that chain and return it with flags for all issues found.
   2099           *
   2100           * Special cases:
   2101           * - EE == Rj -> return a one-element list containing it
   2102           * - EE, Ci1, ..., Ciq cannot be continued with a trusted root
   2103           *   -> return that chain with NOT_TRUSTED set on Ciq
   2104           *
   2105           * Arguments:
   2106           *  - [in] crt: the cert list EE, C1, ..., Cn
   2107           *  - [in] trust_ca: the trusted list R1, ..., Rp
   2108           *  - [in] ca_crl, profile: as in verify_with_profile()
   2109           *  - [out] ver_chain, chain_len: the built and verified chain
   2110           *
   2111           * Return value:
   2112           *  - non-zero if the chain could not be fully built and examined
   2113           *  - 0 is the chain was successfully built and examined,
   2114           *      even if it was found to be invalid
   2115           */

   \                                 In section .text, align 2, keep-with-next
   2116          static int x509_crt_verify_chain(
   2117                          mbedtls_x509_crt *crt,
   2118                          mbedtls_x509_crt *trust_ca,
   2119                          mbedtls_x509_crl *ca_crl,
   2120                          const mbedtls_x509_crt_profile *profile,
   2121                          x509_crt_verify_chain_item ver_chain[X509_MAX_VERIFY_CHAIN_SIZE],
   2122                          size_t *chain_len )
   2123          {
   \                     x509_crt_verify_chain: (+1)
   \        0x0   0xE92D 0x4FFE      PUSH     {R1-R11,LR}
   \        0x4   0x9F0C             LDR      R7,[SP, #+48]
   \        0x6   0xF8DD 0x8034      LDR      R8,[SP, #+52]
   2124              uint32_t *flags;
   2125              mbedtls_x509_crt *child;
   2126              mbedtls_x509_crt *parent;
   2127              int parent_is_trusted = 0;
   \        0xA   0x2400             MOVS     R4,#+0
   \        0xC   0x9401             STR      R4,[SP, #+4]
   2128              int child_is_trusted = 0;
   2129              size_t self_cnt = 0;
   \        0xE   0x46A1             MOV      R9,R4
   2130          
   2131              child = crt;
   \       0x10   0x4682             MOV      R10,R0
   2132              *chain_len = 0;
   \       0x12   0x4620             MOV      R0,R4
   \       0x14   0xF8C8 0x0000      STR      R0,[R8, #+0]
   \       0x18   0x460D             MOV      R5,R1
   \       0x1A   0x9202             STR      R2,[SP, #+8]
   \       0x1C   0x461E             MOV      R6,R3
   2133          
   2134              while( 1 ) {
   2135                  /* Add certificate to the verification chain */
   2136                  ver_chain[*chain_len].crt = child;
   \                     ??x509_crt_verify_chain_0: (+1)
   \       0x1E   0xF8D8 0x0000      LDR      R0,[R8, #+0]
   \       0x22   0xF847 0xA030      STR      R10,[R7, R0, LSL #+3]
   2137                  flags = &ver_chain[*chain_len].flags;
   \       0x26   0xF8D8 0x0000      LDR      R0,[R8, #+0]
   \       0x2A   0xEB07 0x00C0      ADD      R0,R7,R0, LSL #+3
   \       0x2E   0xF100 0x0B04      ADD      R11,R0,#+4
   2138                  ++*chain_len;
   \       0x32   0xF8D8 0x0000      LDR      R0,[R8, #+0]
   \       0x36   0x1C40             ADDS     R0,R0,#+1
   \       0x38   0xF8C8 0x0000      STR      R0,[R8, #+0]
   2139          
   2140                  /* Check time-validity (all certificates) */
   2141                  if( mbedtls_x509_time_is_past( &child->valid_to ) )
   \       0x3C   0xF10A 0x00A4      ADD      R0,R10,#+164
   \       0x40   0x....'....        BL       mbedtls_x509_time_is_past
   \       0x44   0x2800             CMP      R0,#+0
   \       0x46   0xD005             BEQ.N    ??x509_crt_verify_chain_1
   2142                      *flags |= MBEDTLS_X509_BADCERT_EXPIRED;
   \       0x48   0xF8DB 0x0000      LDR      R0,[R11, #+0]
   \       0x4C   0xF040 0x0001      ORR      R0,R0,#0x1
   \       0x50   0xF8CB 0x0000      STR      R0,[R11, #+0]
   2143          
   2144                  if( mbedtls_x509_time_is_future( &child->valid_from ) )
   \                     ??x509_crt_verify_chain_1: (+1)
   \       0x54   0xF10A 0x008C      ADD      R0,R10,#+140
   \       0x58   0x....'....        BL       mbedtls_x509_time_is_future
   \       0x5C   0x2800             CMP      R0,#+0
   \       0x5E   0xD005             BEQ.N    ??x509_crt_verify_chain_2
   2145                      *flags |= MBEDTLS_X509_BADCERT_FUTURE;
   \       0x60   0xF8DB 0x0000      LDR      R0,[R11, #+0]
   \       0x64   0xF440 0x7000      ORR      R0,R0,#0x200
   \       0x68   0xF8CB 0x0000      STR      R0,[R11, #+0]
   2146          
   2147                  /* Stop here for trusted roots (but not for trusted EE certs) */
   2148                  if( child_is_trusted )
   \                     ??x509_crt_verify_chain_2: (+1)
   \       0x6C   0x2C00             CMP      R4,#+0
   \       0x6E   0xD179             BNE.N    ??x509_crt_verify_chain_3
   2149                      return( 0 );
   2150          
   2151                  /* Check signature algorithm: MD & PK algs */
   2152                  if( x509_profile_check_md_alg( profile, child->sig_md ) != 0 )
   \       0x70   0xF89A 0x1128      LDRB     R1,[R10, #+296]
   \       0x74   0x4630             MOV      R0,R6
   \       0x76   0x....'....        BL       x509_profile_check_md_alg
   \       0x7A   0x2800             CMP      R0,#+0
   \       0x7C   0xD005             BEQ.N    ??x509_crt_verify_chain_4
   2153                      *flags |= MBEDTLS_X509_BADCERT_BAD_MD;
   \       0x7E   0xF8DB 0x0000      LDR      R0,[R11, #+0]
   \       0x82   0xF440 0x4080      ORR      R0,R0,#0x4000
   \       0x86   0xF8CB 0x0000      STR      R0,[R11, #+0]
   2154          
   2155                  if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
   \                     ??x509_crt_verify_chain_4: (+1)
   \       0x8A   0xF89A 0x1129      LDRB     R1,[R10, #+297]
   \       0x8E   0x4630             MOV      R0,R6
   \       0x90   0x....'....        BL       x509_profile_check_pk_alg
   \       0x94   0x2800             CMP      R0,#+0
   \       0x96   0xD005             BEQ.N    ??x509_crt_verify_chain_5
   2156                      *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
   \       0x98   0xF8DB 0x0000      LDR      R0,[R11, #+0]
   \       0x9C   0xF440 0x4000      ORR      R0,R0,#0x8000
   \       0xA0   0xF8CB 0x0000      STR      R0,[R11, #+0]
   2157          
   2158                  /* Special case: EE certs that are locally trusted */
   2159                  if( *chain_len == 1 &&
   2160                      x509_crt_check_ee_locally_trusted( child, trust_ca ) == 0 )
   \                     ??x509_crt_verify_chain_5: (+1)
   \       0xA4   0xF8D8 0x0000      LDR      R0,[R8, #+0]
   \       0xA8   0x2801             CMP      R0,#+1
   \       0xAA   0xD105             BNE.N    ??x509_crt_verify_chain_6
   \       0xAC   0x4629             MOV      R1,R5
   \       0xAE   0x4650             MOV      R0,R10
   \       0xB0   0x....'....        BL       x509_crt_check_ee_locally_trusted
   \       0xB4   0x2800             CMP      R0,#+0
   \       0xB6   0xD055             BEQ.N    ??x509_crt_verify_chain_3
   2161                  {
   2162                      return( 0 );
   2163                  }
   2164          
   2165                  /* Look for a parent in trusted CAs or up the chain */
   2166                  parent = x509_crt_find_parent( child, trust_ca, &parent_is_trusted,
   2167                                                 *chain_len - 1, self_cnt );
   \                     ??x509_crt_verify_chain_6: (+1)
   \       0xB8   0xF8CD 0x9000      STR      R9,[SP, #+0]
   \       0xBC   0xF8D8 0x3000      LDR      R3,[R8, #+0]
   \       0xC0   0x1E5B             SUBS     R3,R3,#+1
   \       0xC2   0xAA01             ADD      R2,SP,#+4
   \       0xC4   0x4629             MOV      R1,R5
   \       0xC6   0x4650             MOV      R0,R10
   \       0xC8   0x....'....        BL       x509_crt_find_parent
   \       0xCC   0x0004             MOVS     R4,R0
   2168          
   2169                  /* No parent? We're done here */
   2170                  if( parent == NULL )
   \       0xCE   0xD03E             BEQ.N    ??x509_crt_verify_chain_7
   2171                  {
   2172                      *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
   2173                      return( 0 );
   2174                  }
   2175          
   2176                  /* Count intermediate self-issued (not necessarily self-signed) certs.
   2177                   * These can occur with some strategies for key rollover, see [SIRO],
   2178                   * and should be excluded from max_pathlen checks. */
   2179                  if( *chain_len != 1 &&
   2180                      x509_name_cmp( &child->issuer, &child->subject ) == 0 )
   \       0xD0   0xF8D8 0x0000      LDR      R0,[R8, #+0]
   \       0xD4   0x2801             CMP      R0,#+1
   \       0xD6   0xD009             BEQ.N    ??x509_crt_verify_chain_8
   \       0xD8   0xF10A 0x016C      ADD      R1,R10,#+108
   \       0xDC   0xF10A 0x004C      ADD      R0,R10,#+76
   \       0xE0   0x....'....        BL       x509_name_cmp
   \       0xE4   0x2800             CMP      R0,#+0
   \       0xE6   0xD101             BNE.N    ??x509_crt_verify_chain_8
   2181                  {
   2182                      self_cnt++;
   \       0xE8   0xF109 0x0901      ADD      R9,R9,#+1
   2183                  }
   2184          
   2185                  /* path_cnt is 0 for the first intermediate CA,
   2186                   * and if parent is trusted it's not an intermediate CA */
   2187                  if( ! parent_is_trusted &&
   2188                      *chain_len > MBEDTLS_X509_MAX_INTERMEDIATE_CA )
   \                     ??x509_crt_verify_chain_8: (+1)
   \       0xEC   0x9801             LDR      R0,[SP, #+4]
   \       0xEE   0x2800             CMP      R0,#+0
   \       0xF0   0xD103             BNE.N    ??x509_crt_verify_chain_9
   \       0xF2   0xF8D8 0x0000      LDR      R0,[R8, #+0]
   \       0xF6   0x2809             CMP      R0,#+9
   \       0xF8   0xD231             BCS.N    ??x509_crt_verify_chain_10
   2189                  {
   2190                      /* return immediately to avoid overflow the chain array */
   2191                      return( MBEDTLS_ERR_X509_FATAL_ERROR );
   2192                  }
   2193          
   2194                  /* if parent is trusted, the signature was checked by find_parent() */
   2195                  if( ! parent_is_trusted && x509_crt_check_signature( child, parent ) != 0 )
   \                     ??x509_crt_verify_chain_9: (+1)
   \       0xFA   0x9801             LDR      R0,[SP, #+4]
   \       0xFC   0x2800             CMP      R0,#+0
   \       0xFE   0xD10B             BNE.N    ??x509_crt_verify_chain_11
   \      0x100   0x4621             MOV      R1,R4
   \      0x102   0x4650             MOV      R0,R10
   \      0x104   0x....'....        BL       x509_crt_check_signature
   \      0x108   0x2800             CMP      R0,#+0
   \      0x10A   0xD005             BEQ.N    ??x509_crt_verify_chain_11
   2196                      *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
   \      0x10C   0xF8DB 0x0000      LDR      R0,[R11, #+0]
   \      0x110   0xF040 0x0008      ORR      R0,R0,#0x8
   \      0x114   0xF8CB 0x0000      STR      R0,[R11, #+0]
   2197          
   2198                  /* check size of signing key */
   2199                  if( x509_profile_check_key( profile, &parent->pk ) != 0 )
   \                     ??x509_crt_verify_chain_11: (+1)
   \      0x118   0xF104 0x01BC      ADD      R1,R4,#+188
   \      0x11C   0x4630             MOV      R0,R6
   \      0x11E   0x....'....        BL       x509_profile_check_key
   \      0x122   0x2800             CMP      R0,#+0
   \      0x124   0xD005             BEQ.N    ??x509_crt_verify_chain_12
   2200                      *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
   \      0x126   0xF8DB 0x0000      LDR      R0,[R11, #+0]
   \      0x12A   0xF440 0x3080      ORR      R0,R0,#0x10000
   \      0x12E   0xF8CB 0x0000      STR      R0,[R11, #+0]
   2201          
   2202          #if defined(MBEDTLS_X509_CRL_PARSE_C)
   2203                  /* Check trusted CA's CRL for the given crt */
   2204                  *flags |= x509_crt_verifycrl( child, parent, ca_crl, profile );
   \                     ??x509_crt_verify_chain_12: (+1)
   \      0x132   0x4633             MOV      R3,R6
   \      0x134   0x9A02             LDR      R2,[SP, #+8]
   \      0x136   0x4621             MOV      R1,R4
   \      0x138   0x4650             MOV      R0,R10
   \      0x13A   0x....'....        BL       x509_crt_verifycrl
   \      0x13E   0xF8DB 0x1000      LDR      R1,[R11, #+0]
   \      0x142   0x4308             ORRS     R0,R0,R1
   \      0x144   0xF8CB 0x0000      STR      R0,[R11, #+0]
   2205          #else
   2206                  (void) ca_crl;
   2207          #endif
   2208          
   2209                  /* prepare for next iteration */
   2210                  child = parent;
   \      0x148   0x46A2             MOV      R10,R4
   2211                  parent = NULL;
   2212                  child_is_trusted = parent_is_trusted;
   \      0x14A   0x9C01             LDR      R4,[SP, #+4]
   \      0x14C   0xE767             B.N      ??x509_crt_verify_chain_0
   \                     ??x509_crt_verify_chain_7: (+1)
   \      0x14E   0xF8DB 0x0000      LDR      R0,[R11, #+0]
   \      0x152   0xF040 0x0008      ORR      R0,R0,#0x8
   \      0x156   0xF8CB 0x0000      STR      R0,[R11, #+0]
   \      0x15A   0x2000             MOVS     R0,#+0
   \      0x15C   0xE000             B.N      ??x509_crt_verify_chain_13
   \                     ??x509_crt_verify_chain_10: (+1)
   \      0x15E   0x....             LDR.N    R0,??DataTable23_19  ;; 0xffffd000
   \                     ??x509_crt_verify_chain_13: (+1)
   \      0x160   0xE8BD 0x8FFE      POP      {R1-R11,PC}      ;; return
   \                     ??x509_crt_verify_chain_3: (+1)
   \      0x164   0x2000             MOVS     R0,#+0
   \      0x166   0xE7FB             B.N      ??x509_crt_verify_chain_13
   2213              }
   2214          }
   2215          
   2216          /*
   2217           * Check for CN match
   2218           */

   \                                 In section .text, align 2, keep-with-next
   2219          static int x509_crt_check_cn( const mbedtls_x509_buf *name,
   2220                                        const char *cn, size_t cn_len )
   2221          {
   \                     x509_crt_check_cn: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
   2222              /* try exact match */
   2223              if( name->len == cn_len &&
   2224                  x509_memcasecmp( cn, name->p, cn_len ) == 0 )
   \        0x6   0x6860             LDR      R0,[R4, #+4]
   \        0x8   0x4290             CMP      R0,R2
   \        0xA   0xD107             BNE.N    ??x509_crt_check_cn_0
   \        0xC   0x68A1             LDR      R1,[R4, #+8]
   \        0xE   0x4628             MOV      R0,R5
   \       0x10   0x....'....        BL       x509_memcasecmp
   \       0x14   0x2800             CMP      R0,#+0
   \       0x16   0xD101             BNE.N    ??x509_crt_check_cn_0
   2225              {
   2226                  return( 0 );
   \       0x18   0x2000             MOVS     R0,#+0
   \       0x1A   0xBD32             POP      {R1,R4,R5,PC}
   2227              }
   2228          
   2229              /* try wildcard match */
   2230              if( x509_check_wildcard( cn, name ) == 0 )
   \                     ??x509_crt_check_cn_0: (+1)
   \       0x1C   0x4621             MOV      R1,R4
   \       0x1E   0x4628             MOV      R0,R5
   \       0x20   0x....'....        BL       x509_check_wildcard
   \       0x24   0x2800             CMP      R0,#+0
   \       0x26   0xD101             BNE.N    ??x509_crt_check_cn_1
   2231              {
   2232                  return( 0 );
   \       0x28   0x2000             MOVS     R0,#+0
   \       0x2A   0xBD32             POP      {R1,R4,R5,PC}
   2233              }
   2234          
   2235              return( -1 );
   \                     ??x509_crt_check_cn_1: (+1)
   \       0x2C   0xF04F 0x30FF      MOV      R0,#-1
   \       0x30   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   2236          }
   2237          
   2238          /*
   2239           * Verify the requested CN - only call this if cn is not NULL!
   2240           */

   \                                 In section .text, align 2, keep-with-next
   2241          static void x509_crt_verify_name( const mbedtls_x509_crt *crt,
   2242                                            const char *cn,
   2243                                            uint32_t *flags )
   2244          {
   \                     x509_crt_verify_name: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
   \        0x6   0x4616             MOV      R6,R2
   2245              const mbedtls_x509_name *name;
   2246              const mbedtls_x509_sequence *cur;
   2247              size_t cn_len = strlen( cn );
   \        0x8   0x4628             MOV      R0,R5
   \        0xA   0x....'....        BL       strlen
   \        0xE   0x4607             MOV      R7,R0
   2248          
   2249              if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
   \       0x10   0xF894 0x00F8      LDRB     R0,[R4, #+248]
   \       0x14   0x0680             LSLS     R0,R0,#+26
   \       0x16   0xD50B             BPL.N    ??x509_crt_verify_name_0
   2250              {
   2251                  for( cur = &crt->subject_alt_names; cur != NULL; cur = cur->next )
   \       0x18   0x34E8             ADDS     R4,R4,#+232
   \                     ??x509_crt_verify_name_1: (+1)
   \       0x1A   0x2C00             CMP      R4,#+0
   \       0x1C   0xD025             BEQ.N    ??x509_crt_verify_name_2
   2252                  {
   2253                      if( x509_crt_check_cn( &cur->buf, cn, cn_len ) == 0 )
   \       0x1E   0x463A             MOV      R2,R7
   \       0x20   0x4629             MOV      R1,R5
   \       0x22   0x4620             MOV      R0,R4
   \       0x24   0x....'....        BL       x509_crt_check_cn
   \       0x28   0x2800             CMP      R0,#+0
   \       0x2A   0xD01E             BEQ.N    ??x509_crt_verify_name_2
   2254                          break;
   2255                  }
   \       0x2C   0x68E4             LDR      R4,[R4, #+12]
   \       0x2E   0xE7F4             B.N      ??x509_crt_verify_name_1
   2256          
   2257                  if( cur == NULL )
   2258                      *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
   2259              }
   2260              else
   2261              {
   2262                  for( name = &crt->subject; name != NULL; name = name->next )
   \                     ??x509_crt_verify_name_0: (+1)
   \       0x30   0x346C             ADDS     R4,R4,#+108
   \       0x32   0xE00B             B.N      ??x509_crt_verify_name_3
   2263                  {
   2264                      if( MBEDTLS_OID_CMP( MBEDTLS_OID_AT_CN, &name->oid ) == 0 &&
   2265                          x509_crt_check_cn( &name->val, cn, cn_len ) == 0 )
   \                     ??x509_crt_verify_name_4: (+1)
   \       0x34   0x2001             MOVS     R0,#+1
   \                     ??x509_crt_verify_name_5: (+1)
   \       0x36   0x2800             CMP      R0,#+0
   \       0x38   0xD107             BNE.N    ??x509_crt_verify_name_6
   \       0x3A   0x463A             MOV      R2,R7
   \       0x3C   0x4629             MOV      R1,R5
   \       0x3E   0xF104 0x000C      ADD      R0,R4,#+12
   \       0x42   0x....'....        BL       x509_crt_check_cn
   \       0x46   0x2800             CMP      R0,#+0
   \       0x48   0xD016             BEQ.N    ??x509_crt_verify_name_7
   \                     ??x509_crt_verify_name_6: (+1)
   \       0x4A   0x69A4             LDR      R4,[R4, #+24]
   \                     ??x509_crt_verify_name_3: (+1)
   \       0x4C   0x2C00             CMP      R4,#+0
   \       0x4E   0xD013             BEQ.N    ??x509_crt_verify_name_7
   \       0x50   0x6860             LDR      R0,[R4, #+4]
   \       0x52   0x2803             CMP      R0,#+3
   \       0x54   0xD1EE             BNE.N    ??x509_crt_verify_name_4
   \       0x56   0x4602             MOV      R2,R0
   \       0x58   0x68A1             LDR      R1,[R4, #+8]
   \       0x5A   0x....             ADR.N    R0,??DataTable23_4  ;; "U\004\003"
   \       0x5C   0x....'....        BL       memcmp
   \       0x60   0x1E40             SUBS     R0,R0,#+1
   \       0x62   0x4180             SBCS     R0,R0,R0
   \       0x64   0x43C0             MVNS     R0,R0
   \       0x66   0x0FC0             LSRS     R0,R0,#+31
   \       0x68   0xE7E5             B.N      ??x509_crt_verify_name_5
   2266                      {
   2267                          break;
   2268                      }
   2269                  }
   \                     ??x509_crt_verify_name_2: (+1)
   \       0x6A   0x2C00             CMP      R4,#+0
   \       0x6C   0xD10A             BNE.N    ??x509_crt_verify_name_8
   \       0x6E   0x6830             LDR      R0,[R6, #+0]
   \       0x70   0xF040 0x0004      ORR      R0,R0,#0x4
   \       0x74   0x6030             STR      R0,[R6, #+0]
   \       0x76   0xBDF1             POP      {R0,R4-R7,PC}
   2270          
   2271                  if( name == NULL )
   \                     ??x509_crt_verify_name_7: (+1)
   \       0x78   0x2C00             CMP      R4,#+0
   \       0x7A   0xD103             BNE.N    ??x509_crt_verify_name_8
   2272                      *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
   \       0x7C   0x6830             LDR      R0,[R6, #+0]
   \       0x7E   0xF040 0x0004      ORR      R0,R0,#0x4
   \       0x82   0x6030             STR      R0,[R6, #+0]
   2273              }
   2274          }
   \                     ??x509_crt_verify_name_8: (+1)
   \       0x84   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
   2275          
   2276          /*
   2277           * Merge the flags for all certs in the chain, after calling callback
   2278           */

   \                                 In section .text, align 2, keep-with-next
   2279          static int x509_crt_merge_flags_with_cb(
   2280                     uint32_t *flags,
   2281                     x509_crt_verify_chain_item ver_chain[X509_MAX_VERIFY_CHAIN_SIZE],
   2282                     size_t chain_len,
   2283                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
   2284                     void *p_vrfy )
   2285          {
   \                     x509_crt_merge_flags_with_cb: (+1)
   \        0x0   0xE92D 0x41FC      PUSH     {R2-R8,LR}
   \        0x4   0x4605             MOV      R5,R0
   \        0x6   0x460E             MOV      R6,R1
   \        0x8   0x4614             MOV      R4,R2
   \        0xA   0x461F             MOV      R7,R3
   \        0xC   0xF8DD 0x8020      LDR      R8,[SP, #+32]
   2286              int ret;
   2287              size_t i;
   2288              uint32_t cur_flags;
   2289          
   2290              for( i = chain_len; i != 0; --i )
   \       0x10   0xE004             B.N      ??x509_crt_merge_flags_with_cb_0
   2291              {
   2292                  cur_flags = ver_chain[i-1].flags;
   2293          
   2294                  if( NULL != f_vrfy )
   2295                      if( ( ret = f_vrfy( p_vrfy, ver_chain[i-1].crt, (int) i-1, &cur_flags ) ) != 0 )
   2296                          return( ret );
   2297          
   2298                  *flags |= cur_flags;
   \                     ??x509_crt_merge_flags_with_cb_1: (+1)
   \       0x12   0x6828             LDR      R0,[R5, #+0]
   \       0x14   0x9900             LDR      R1,[SP, #+0]
   \       0x16   0x4308             ORRS     R0,R1,R0
   \       0x18   0x6028             STR      R0,[R5, #+0]
   \       0x1A   0x1E64             SUBS     R4,R4,#+1
   \                     ??x509_crt_merge_flags_with_cb_0: (+1)
   \       0x1C   0x2C00             CMP      R4,#+0
   \       0x1E   0xD011             BEQ.N    ??x509_crt_merge_flags_with_cb_2
   \       0x20   0xEB06 0x00C4      ADD      R0,R6,R4, LSL #+3
   \       0x24   0xF850 0x0C04      LDR      R0,[R0, #-4]
   \       0x28   0x9000             STR      R0,[SP, #+0]
   \       0x2A   0x0038             MOVS     R0,R7
   \       0x2C   0xD0F1             BEQ.N    ??x509_crt_merge_flags_with_cb_1
   \       0x2E   0x466B             MOV      R3,SP
   \       0x30   0x1E62             SUBS     R2,R4,#+1
   \       0x32   0xEB06 0x00C4      ADD      R0,R6,R4, LSL #+3
   \       0x36   0xF850 0x1C08      LDR      R1,[R0, #-8]
   \       0x3A   0x4640             MOV      R0,R8
   \       0x3C   0x47B8             BLX      R7
   \       0x3E   0x2800             CMP      R0,#+0
   \       0x40   0xD0E7             BEQ.N    ??x509_crt_merge_flags_with_cb_1
   \       0x42   0xE000             B.N      ??x509_crt_merge_flags_with_cb_3
   2299              }
   2300          
   2301              return( 0 );
   \                     ??x509_crt_merge_flags_with_cb_2: (+1)
   \       0x44   0x2000             MOVS     R0,#+0
   \                     ??x509_crt_merge_flags_with_cb_3: (+1)
   \       0x46   0xE8BD 0x81F6      POP      {R1,R2,R4-R8,PC}  ;; return
   2302          }
   2303          
   2304          /*
   2305           * Verify the certificate validity
   2306           */

   \                                 In section .text, align 2, keep-with-next
   2307          int mbedtls_x509_crt_verify( mbedtls_x509_crt *crt,
   2308                               mbedtls_x509_crt *trust_ca,
   2309                               mbedtls_x509_crl *ca_crl,
   2310                               const char *cn, uint32_t *flags,
   2311                               int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
   2312                               void *p_vrfy )
   2313          {
   \                     mbedtls_x509_crt_verify: (+1)
   \        0x0   0xB57F             PUSH     {R0-R6,LR}
   \        0x2   0x9C08             LDR      R4,[SP, #+32]
   \        0x4   0x9D09             LDR      R5,[SP, #+36]
   \        0x6   0x9E0A             LDR      R6,[SP, #+40]
   2314              return( mbedtls_x509_crt_verify_with_profile( crt, trust_ca, ca_crl,
   2315                          &mbedtls_x509_crt_profile_default, cn, flags, f_vrfy, p_vrfy ) );
   \        0x8   0x9603             STR      R6,[SP, #+12]
   \        0xA   0x9502             STR      R5,[SP, #+8]
   \        0xC   0x9401             STR      R4,[SP, #+4]
   \        0xE   0x9300             STR      R3,[SP, #+0]
   \       0x10   0x....             LDR.N    R3,??DataTable23_20
   \       0x12   0x....'....        BL       mbedtls_x509_crt_verify_with_profile
   \       0x16   0xB004             ADD      SP,SP,#+16
   \       0x18   0xBD70             POP      {R4-R6,PC}       ;; return
   2316          }
   2317          
   2318          /*
   2319           * Verify the certificate validity, with profile
   2320           *
   2321           * This function:
   2322           *  - checks the requested CN (if any)
   2323           *  - checks the type and size of the EE cert's key,
   2324           *    as that isn't done as part of chain building/verification currently
   2325           *  - builds and verifies the chain
   2326           *  - then calls the callback and merges the flags
   2327           */

   \                                 In section .text, align 2, keep-with-next
   2328          int mbedtls_x509_crt_verify_with_profile( mbedtls_x509_crt *crt,
   2329                               mbedtls_x509_crt *trust_ca,
   2330                               mbedtls_x509_crl *ca_crl,
   2331                               const mbedtls_x509_crt_profile *profile,
   2332                               const char *cn, uint32_t *flags,
   2333                               int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
   2334                               void *p_vrfy )
   2335          {
   \                     mbedtls_x509_crt_verify_with_profile: (+1)
   \        0x0   0xE92D 0x43F0      PUSH     {R4-R9,LR}
   \        0x4   0xB097             SUB      SP,SP,#+92
   \        0x6   0x4606             MOV      R6,R0
   \        0x8   0x460F             MOV      R7,R1
   \        0xA   0x4690             MOV      R8,R2
   \        0xC   0x461C             MOV      R4,R3
   \        0xE   0x9D1F             LDR      R5,[SP, #+124]
   2336              int ret;
   2337              mbedtls_pk_type_t pk_type;
   2338              x509_crt_verify_chain_item ver_chain[X509_MAX_VERIFY_CHAIN_SIZE];
   2339              size_t chain_len;
   2340              uint32_t *ee_flags = &ver_chain[0].flags;
   \       0x10   0xF10D 0x0910      ADD      R9,SP,#+16
   2341          
   2342              *flags = 0;
   \       0x14   0x2000             MOVS     R0,#+0
   \       0x16   0x6028             STR      R0,[R5, #+0]
   2343              memset( ver_chain, 0, sizeof( ver_chain ) );
   \       0x18   0x4602             MOV      R2,R0
   \       0x1A   0x2150             MOVS     R1,#+80
   \       0x1C   0xA803             ADD      R0,SP,#+12
   \       0x1E   0x....'....        BL       __aeabi_memset4
   2344              chain_len = 0;
   \       0x22   0x2000             MOVS     R0,#+0
   \       0x24   0x9002             STR      R0,[SP, #+8]
   2345          
   2346              if( profile == NULL )
   \       0x26   0x2C00             CMP      R4,#+0
   \       0x28   0xD101             BNE.N    ??mbedtls_x509_crt_verify_with_profile_0
   2347              {
   2348                  ret = MBEDTLS_ERR_X509_BAD_INPUT_DATA;
   \       0x2A   0x....             LDR.N    R0,??DataTable23_17  ;; 0xffffd800
   2349                  goto exit;
   \       0x2C   0xE037             B.N      ??mbedtls_x509_crt_verify_with_profile_1
   2350              }
   \                     ??mbedtls_x509_crt_verify_with_profile_0: (+1)
   \       0x2E   0x991E             LDR      R1,[SP, #+120]
   2351          
   2352              /* check name if requested */
   2353              if( cn != NULL )
   \       0x30   0x2900             CMP      R1,#+0
   \       0x32   0xD003             BEQ.N    ??mbedtls_x509_crt_verify_with_profile_2
   2354                  x509_crt_verify_name( crt, cn, ee_flags );
   \       0x34   0x464A             MOV      R2,R9
   \       0x36   0x4630             MOV      R0,R6
   \       0x38   0x....'....        BL       x509_crt_verify_name
   2355          
   2356              /* Check the type and size of the key */
   2357              pk_type = mbedtls_pk_get_type( &crt->pk );
   \                     ??mbedtls_x509_crt_verify_with_profile_2: (+1)
   \       0x3C   0xF106 0x00BC      ADD      R0,R6,#+188
   \       0x40   0x....'....        BL       mbedtls_pk_get_type
   2358          
   2359              if( x509_profile_check_pk_alg( profile, pk_type ) != 0 )
   \       0x44   0x4601             MOV      R1,R0
   \       0x46   0x4620             MOV      R0,R4
   \       0x48   0x....'....        BL       x509_profile_check_pk_alg
   \       0x4C   0x2800             CMP      R0,#+0
   \       0x4E   0xD005             BEQ.N    ??mbedtls_x509_crt_verify_with_profile_3
   2360                  *ee_flags |= MBEDTLS_X509_BADCERT_BAD_PK;
   \       0x50   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \       0x54   0xF440 0x4000      ORR      R0,R0,#0x8000
   \       0x58   0xF8C9 0x0000      STR      R0,[R9, #+0]
   2361          
   2362              if( x509_profile_check_key( profile, &crt->pk ) != 0 )
   \                     ??mbedtls_x509_crt_verify_with_profile_3: (+1)
   \       0x5C   0xF106 0x01BC      ADD      R1,R6,#+188
   \       0x60   0x4620             MOV      R0,R4
   \       0x62   0x....'....        BL       x509_profile_check_key
   \       0x66   0x2800             CMP      R0,#+0
   \       0x68   0xD005             BEQ.N    ??mbedtls_x509_crt_verify_with_profile_4
   2363                  *ee_flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
   \       0x6A   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \       0x6E   0xF440 0x3080      ORR      R0,R0,#0x10000
   \       0x72   0xF8C9 0x0000      STR      R0,[R9, #+0]
   2364          
   2365              /* Check the chain */
   2366              ret = x509_crt_verify_chain( crt, trust_ca, ca_crl, profile,
   2367                                           ver_chain, &chain_len );
   \                     ??mbedtls_x509_crt_verify_with_profile_4: (+1)
   \       0x76   0xA802             ADD      R0,SP,#+8
   \       0x78   0x9001             STR      R0,[SP, #+4]
   \       0x7A   0xA803             ADD      R0,SP,#+12
   \       0x7C   0x9000             STR      R0,[SP, #+0]
   \       0x7E   0x4623             MOV      R3,R4
   \       0x80   0x4642             MOV      R2,R8
   \       0x82   0x4639             MOV      R1,R7
   \       0x84   0x4630             MOV      R0,R6
   \       0x86   0x....'....        BL       x509_crt_verify_chain
   2368              if( ret != 0 )
   \       0x8A   0x2800             CMP      R0,#+0
   \       0x8C   0xD107             BNE.N    ??mbedtls_x509_crt_verify_with_profile_1
   \       0x8E   0x9821             LDR      R0,[SP, #+132]
   \       0x90   0x9B20             LDR      R3,[SP, #+128]
   2369                  goto exit;
   2370          
   2371              /* Build final flags, calling callback on the way if any */
   2372              ret = x509_crt_merge_flags_with_cb( flags,
   2373                                                  ver_chain, chain_len, f_vrfy, p_vrfy );
   \       0x92   0x9000             STR      R0,[SP, #+0]
   \       0x94   0x9A02             LDR      R2,[SP, #+8]
   \       0x96   0xA903             ADD      R1,SP,#+12
   \       0x98   0x4628             MOV      R0,R5
   \       0x9A   0x....'....        BL       x509_crt_merge_flags_with_cb
   2374          
   2375          exit:
   2376              /* prevent misuse of the vrfy callback - VERIFY_FAILED would be ignored by
   2377               * the SSL module for authmode optional, but non-zero return from the
   2378               * callback means a fatal error so it shouldn't be ignored */
   2379              if( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED )
   \                     ??mbedtls_x509_crt_verify_with_profile_1: (+1)
   \       0x9E   0x....             LDR.N    R1,??DataTable23_21  ;; 0xffffd900
   \       0xA0   0x4288             CMP      R0,R1
   \       0xA2   0xD100             BNE.N    ??mbedtls_x509_crt_verify_with_profile_5
   2380                  ret = MBEDTLS_ERR_X509_FATAL_ERROR;
   \       0xA4   0x....             LDR.N    R0,??DataTable23_19  ;; 0xffffd000
   2381          
   2382              if( ret != 0 )
   \                     ??mbedtls_x509_crt_verify_with_profile_5: (+1)
   \       0xA6   0x2800             CMP      R0,#+0
   \       0xA8   0xD003             BEQ.N    ??mbedtls_x509_crt_verify_with_profile_6
   2383              {
   2384                  *flags = (uint32_t) -1;
   \       0xAA   0xF04F 0x31FF      MOV      R1,#-1
   \       0xAE   0x6029             STR      R1,[R5, #+0]
   2385                  return( ret );
   \       0xB0   0xE005             B.N      ??mbedtls_x509_crt_verify_with_profile_7
   2386              }
   2387          
   2388              if( *flags != 0 )
   \                     ??mbedtls_x509_crt_verify_with_profile_6: (+1)
   \       0xB2   0x6828             LDR      R0,[R5, #+0]
   \       0xB4   0x2800             CMP      R0,#+0
   \       0xB6   0xD001             BEQ.N    ??mbedtls_x509_crt_verify_with_profile_8
   2389                  return( MBEDTLS_ERR_X509_CERT_VERIFY_FAILED );
   \       0xB8   0x4608             MOV      R0,R1
   \       0xBA   0xE000             B.N      ??mbedtls_x509_crt_verify_with_profile_7
   2390          
   2391              return( 0 );
   \                     ??mbedtls_x509_crt_verify_with_profile_8: (+1)
   \       0xBC   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_x509_crt_verify_with_profile_7: (+1)
   \       0xBE   0xB017             ADD      SP,SP,#+92
   \       0xC0   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
   2392          }
   2393          
   2394          /*
   2395           * Initialize a certificate chain
   2396           */

   \                                 In section .text, align 2, keep-with-next
   2397          void mbedtls_x509_crt_init( mbedtls_x509_crt *crt )
   2398          {
   2399              memset( crt, 0, sizeof(mbedtls_x509_crt) );
   \                     mbedtls_x509_crt_init: (+1)
   \        0x0   0x2200             MOVS     R2,#+0
   \        0x2   0xF44F 0x719A      MOV      R1,#+308
   \        0x6   0x....'....        B.W      __aeabi_memset4
   2400          }
   2401          
   2402          /*
   2403           * Unallocate all certificate data
   2404           */

   \                                 In section .text, align 2, keep-with-next
   2405          void mbedtls_x509_crt_free( mbedtls_x509_crt *crt )
   2406          {
   \                     mbedtls_x509_crt_free: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x4606             MOV      R6,R0
   2407              mbedtls_x509_crt *cert_cur = crt;
   \        0x4   0x0035             MOVS     R5,R6
   2408              mbedtls_x509_crt *cert_prv;
   2409              mbedtls_x509_name *name_cur;
   2410              mbedtls_x509_name *name_prv;
   2411              mbedtls_x509_sequence *seq_cur;
   2412              mbedtls_x509_sequence *seq_prv;
   2413          
   2414              if( crt == NULL )
   \        0x6   0xD05B             BEQ.N    ??mbedtls_x509_crt_free_0
   2415                  return;
   2416          
   2417              do
   2418              {
   2419                  mbedtls_pk_free( &cert_cur->pk );
   \                     ??mbedtls_x509_crt_free_1: (+1)
   \        0x8   0xF105 0x00BC      ADD      R0,R5,#+188
   \        0xC   0x....'....        BL       mbedtls_pk_free
   2420          
   2421          #if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
   2422                  mbedtls_free( cert_cur->sig_opts );
   \       0x10   0xF8D5 0x012C      LDR      R0,[R5, #+300]
   \       0x14   0x....'....        BL       mbedtls_free
   2423          #endif
   2424          
   2425                  name_cur = cert_cur->issuer.next;
   \       0x18   0x6E6C             LDR      R4,[R5, #+100]
   \       0x1A   0xE008             B.N      ??mbedtls_x509_crt_free_2
   2426                  while( name_cur != NULL )
   2427                  {
   2428                      name_prv = name_cur;
   \                     ??mbedtls_x509_crt_free_3: (+1)
   \       0x1C   0x4627             MOV      R7,R4
   2429                      name_cur = name_cur->next;
   \       0x1E   0x69A4             LDR      R4,[R4, #+24]
   2430                      mbedtls_platform_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
   \       0x20   0x2120             MOVS     R1,#+32
   \       0x22   0x4638             MOV      R0,R7
   \       0x24   0x....'....        BL       mbedtls_platform_zeroize
   2431                      mbedtls_free( name_prv );
   \       0x28   0x4638             MOV      R0,R7
   \       0x2A   0x....'....        BL       mbedtls_free
   2432                  }
   \                     ??mbedtls_x509_crt_free_2: (+1)
   \       0x2E   0x2C00             CMP      R4,#+0
   \       0x30   0xD1F4             BNE.N    ??mbedtls_x509_crt_free_3
   2433          
   2434                  name_cur = cert_cur->subject.next;
   \       0x32   0xF8D5 0x4084      LDR      R4,[R5, #+132]
   \       0x36   0xE008             B.N      ??mbedtls_x509_crt_free_4
   2435                  while( name_cur != NULL )
   2436                  {
   2437                      name_prv = name_cur;
   \                     ??mbedtls_x509_crt_free_5: (+1)
   \       0x38   0x4627             MOV      R7,R4
   2438                      name_cur = name_cur->next;
   \       0x3A   0x69A4             LDR      R4,[R4, #+24]
   2439                      mbedtls_platform_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
   \       0x3C   0x2120             MOVS     R1,#+32
   \       0x3E   0x4638             MOV      R0,R7
   \       0x40   0x....'....        BL       mbedtls_platform_zeroize
   2440                      mbedtls_free( name_prv );
   \       0x44   0x4638             MOV      R0,R7
   \       0x46   0x....'....        BL       mbedtls_free
   2441                  }
   \                     ??mbedtls_x509_crt_free_4: (+1)
   \       0x4A   0x2C00             CMP      R4,#+0
   \       0x4C   0xD1F4             BNE.N    ??mbedtls_x509_crt_free_5
   2442          
   2443                  seq_cur = cert_cur->ext_key_usage.next;
   \       0x4E   0xF8D5 0x4114      LDR      R4,[R5, #+276]
   \       0x52   0xE008             B.N      ??mbedtls_x509_crt_free_6
   2444                  while( seq_cur != NULL )
   2445                  {
   2446                      seq_prv = seq_cur;
   \                     ??mbedtls_x509_crt_free_7: (+1)
   \       0x54   0x4627             MOV      R7,R4
   2447                      seq_cur = seq_cur->next;
   \       0x56   0x68E4             LDR      R4,[R4, #+12]
   2448                      mbedtls_platform_zeroize( seq_prv,
   2449                                                sizeof( mbedtls_x509_sequence ) );
   \       0x58   0x2110             MOVS     R1,#+16
   \       0x5A   0x4638             MOV      R0,R7
   \       0x5C   0x....'....        BL       mbedtls_platform_zeroize
   2450                      mbedtls_free( seq_prv );
   \       0x60   0x4638             MOV      R0,R7
   \       0x62   0x....'....        BL       mbedtls_free
   2451                  }
   \                     ??mbedtls_x509_crt_free_6: (+1)
   \       0x66   0x2C00             CMP      R4,#+0
   \       0x68   0xD1F4             BNE.N    ??mbedtls_x509_crt_free_7
   2452          
   2453                  seq_cur = cert_cur->subject_alt_names.next;
   \       0x6A   0xF8D5 0x40F4      LDR      R4,[R5, #+244]
   \       0x6E   0xE008             B.N      ??mbedtls_x509_crt_free_8
   2454                  while( seq_cur != NULL )
   2455                  {
   2456                      seq_prv = seq_cur;
   \                     ??mbedtls_x509_crt_free_9: (+1)
   \       0x70   0x4627             MOV      R7,R4
   2457                      seq_cur = seq_cur->next;
   \       0x72   0x68E4             LDR      R4,[R4, #+12]
   2458                      mbedtls_platform_zeroize( seq_prv,
   2459                                                sizeof( mbedtls_x509_sequence ) );
   \       0x74   0x2110             MOVS     R1,#+16
   \       0x76   0x4638             MOV      R0,R7
   \       0x78   0x....'....        BL       mbedtls_platform_zeroize
   2460                      mbedtls_free( seq_prv );
   \       0x7C   0x4638             MOV      R0,R7
   \       0x7E   0x....'....        BL       mbedtls_free
   2461                  }
   \                     ??mbedtls_x509_crt_free_8: (+1)
   \       0x82   0x2C00             CMP      R4,#+0
   \       0x84   0xD1F4             BNE.N    ??mbedtls_x509_crt_free_9
   2462          
   2463                  if( cert_cur->raw.p != NULL )
   \       0x86   0x68A8             LDR      R0,[R5, #+8]
   \       0x88   0x2800             CMP      R0,#+0
   \       0x8A   0xD005             BEQ.N    ??mbedtls_x509_crt_free_10
   2464                  {
   2465                      mbedtls_platform_zeroize( cert_cur->raw.p, cert_cur->raw.len );
   \       0x8C   0x6869             LDR      R1,[R5, #+4]
   \       0x8E   0x....'....        BL       mbedtls_platform_zeroize
   2466                      mbedtls_free( cert_cur->raw.p );
   \       0x92   0x68A8             LDR      R0,[R5, #+8]
   \       0x94   0x....'....        BL       mbedtls_free
   2467                  }
   2468          
   2469                  cert_cur = cert_cur->next;
   \                     ??mbedtls_x509_crt_free_10: (+1)
   \       0x98   0xF8D5 0x5130      LDR      R5,[R5, #+304]
   2470              }
   2471              while( cert_cur != NULL );
   \       0x9C   0x2D00             CMP      R5,#+0
   \       0x9E   0xD1B3             BNE.N    ??mbedtls_x509_crt_free_1
   2472          
   2473              cert_cur = crt;
   \       0xA0   0x4634             MOV      R4,R6
   2474              do
   2475              {
   2476                  cert_prv = cert_cur;
   \                     ??mbedtls_x509_crt_free_11: (+1)
   \       0xA2   0x4625             MOV      R5,R4
   2477                  cert_cur = cert_cur->next;
   \       0xA4   0xF8D4 0x4130      LDR      R4,[R4, #+304]
   2478          
   2479                  mbedtls_platform_zeroize( cert_prv, sizeof( mbedtls_x509_crt ) );
   \       0xA8   0xF44F 0x719A      MOV      R1,#+308
   \       0xAC   0x4628             MOV      R0,R5
   \       0xAE   0x....'....        BL       mbedtls_platform_zeroize
   2480                  if( cert_prv != crt )
   \       0xB2   0x42B5             CMP      R5,R6
   \       0xB4   0xD002             BEQ.N    ??mbedtls_x509_crt_free_12
   2481                      mbedtls_free( cert_prv );
   \       0xB6   0x4628             MOV      R0,R5
   \       0xB8   0x....'....        BL       mbedtls_free
   2482              }
   2483              while( cert_cur != NULL );
   \                     ??mbedtls_x509_crt_free_12: (+1)
   \       0xBC   0x2C00             CMP      R4,#+0
   \       0xBE   0xD1F0             BNE.N    ??mbedtls_x509_crt_free_11
   2484          }
   \                     ??mbedtls_x509_crt_free_0: (+1)
   \       0xC0   0xBDF1             POP      {R0,R4-R7,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13:
   \        0x0   0x00 0x00          DC8      "",0x0,0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_1:
   \        0x0   0x2C 0x20          DC8      0x2C, 0x20, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15:
   \        0x0   0xFFFF'DD9A        DC32     0xffffdd9a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_1:
   \        0x0   0xFFFF'DB9A        DC32     0xffffdb9a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_2:
   \        0x0   0x00 0x00          DC8      "",0x0,0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_3:
   \        0x0   0x2C 0x20          DC8      0x2C, 0x20, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_4:
   \        0x0   0xFFFF'DA9A        DC32     0xffffda9a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_5:
   \        0x0   0xFFFF'DA9C        DC32     0xffffda9c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_6:
   \        0x0   0x3F 0x3F          DC8      "???"
   \              0x3F 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_7:
   \        0x0   0xFFFF'DAA0        DC32     0xffffdaa0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_8:
   \        0x0   0xFFFF'DA9E        DC32     0xffffda9e

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_9:
   \        0x0   0xFFFF'DB00        DC32     0xffffdb00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_10:
   \        0x0   0xFFFF'DA96        DC32     0xffffda96

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16:
   \        0x0   0xFFFF'D800        DC32     0xffffd800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_1:
   \        0x0   0xFFFF'DE80        DC32     0xffffde80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17:
   \        0x0   0xFFFF'DA80        DC32     0xffffda80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18:
   \        0x0   0xFFFF'DF80        DC32     0xffffdf80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19:
   \        0x0   0xFFFF'D780        DC32     0xffffd780

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_1:
   \        0x0   0x0A 0x00          DC8      "\n",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_2:
   \        0x0   0xFFFF'D980        DC32     0xffffd980

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_3:
   \        0x0   0xFFFF'DE1A        DC32     0xffffde1a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_4:
   \        0x0   0x....'....        DC32     ?_20

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_5:
   \        0x0   0x....'....        DC32     ?_21

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_6:
   \        0x0   0xFFFF'D880        DC32     0xffffd880

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_7:
   \        0x0   0xFFFF'D680        DC32     0xffffd680

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_8:
   \        0x0   0x....'....        DC32     ?_24

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_9:
   \        0x0   0x....'....        DC32     ?_25

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_10:
   \        0x0   0x....'....        DC32     ?_26

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_11:
   \        0x0   0x....'....        DC32     ?_27

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_12:
   \        0x0   0x....'....        DC32     ?_28

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_13:
   \        0x0   0x....'....        DC32     ?_29

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_14:
   \        0x0   0x....'....        DC32     ?_30

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_15:
   \        0x0   0x....'....        DC32     ?_31

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_16:
   \        0x0   0x....'....        DC32     ?_32

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_17:
   \        0x0   0x....'....        DC32     ?_33

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_18:
   \        0x0   0x....'....        DC32     ?_34

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_19:
   \        0x0   0x....'....        DC32     ?_35

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_20:
   \        0x0   0x....'....        DC32     ?_36

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_21:
   \        0x0   0x....'....        DC32     ?_37

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20:
   \        0x0   0x....'....        DC32     ?_38

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_1:
   \        0x0   0x....'....        DC32     ?_39

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_2:
   \        0x0   0x....'....        DC32     ?_40

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21:
   \        0x0   0x....'....        DC32     ?_42

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_1:
   \        0x0   0x....'....        DC32     ?_43

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22:
   \        0x0   0x....'....        DC32     ?_44

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_1:
   \        0x0   0x....'....        DC32     ?_45

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_2:
   \        0x0   0x....'....        DC32     ?_46

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_3:
   \        0x0   0x....'....        DC32     ?_47

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23:
   \        0x0   0x....'....        DC32     ?_48

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_1:
   \        0x0   0x....'....        DC32     ?_49

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_2:
   \        0x0   0x....'....        DC32     ?_50

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_3:
   \        0x0   0x....'....        DC32     ?_51

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_4:
   \        0x0   0x55 0x04          DC8      "U\004\003"
   \              0x03 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_5:
   \        0x0   0x....'....        DC32     ?_53

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_6:
   \        0x0   0x....'....        DC32     ?_54

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_7:
   \        0x0   0x....'....        DC32     ?_52

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_8:
   \        0x0   0x....'....        DC32     ?_55

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_9:
   \        0x0   0x....'....        DC32     ?_56

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_10:
   \        0x0   0x....'....        DC32     ?_57

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_11:
   \        0x0   0x....'....        DC32     ?_58

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_12:
   \        0x0   0x....'....        DC32     ?_59

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_13:
   \        0x0   0x....'....        DC32     x509_crt_verify_strings

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_14:
   \        0x0   0x....'....        DC32     ?_61

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_15:
   \        0x0   0x....'....        DC32     ?_62

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_16:
   \        0x0   0xFFFF'7FFE        DC32     0xffff7ffe

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_17:
   \        0x0   0xFFFF'D800        DC32     0xffffd800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_18:
   \        0x0   0x....'....        DC32     ?_63

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_19:
   \        0x0   0xFFFF'D000        DC32     0xffffd000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_20:
   \        0x0   0x....'....        DC32     mbedtls_x509_crt_profile_default

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_21:
   \        0x0   0xFFFF'D900        DC32     0xffffd900

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x54 0x68          DC8 "The certificate validity has expired"
   \              0x65 0x20    
   \              0x63 0x65    
   \              0x72 0x74    
   \              0x69 0x66    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x69    
   \              0x74 0x79    
   \              0x20 0x68    
   \              0x61 0x73    
   \              0x20 0x65    
   \              0x78 0x70    
   \              0x69 0x72    
   \              0x65 0x64    
   \              0x00         
   \       0x25   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_1:
   \        0x0   0x54 0x68          DC8 "The certificate has been revoked (is on a CRL)"
   \              0x65 0x20    
   \              0x63 0x65    
   \              0x72 0x74    
   \              0x69 0x66    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x68 0x61    
   \              0x73 0x20    
   \              0x62 0x65    
   \              0x65 0x6E    
   \              0x20 0x72    
   \              0x65 0x76    
   \              0x6F 0x6B    
   \              0x65 0x64    
   \              0x20 0x28    
   \              0x69 0x73    
   \              0x20 0x6F    
   \              0x6E 0x20    
   \              0x61 0x20    
   \              0x43 0x52    
   \              0x4C 0x29    
   \              0x00         
   \       0x2F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_2:
   \        0x0   0x54 0x68          DC8 54H, 68H, 65H, 20H, 63H, 65H, 72H, 74H
   \              0x65 0x20    
   \              0x63 0x65    
   \              0x72 0x74    
   \        0x8   0x69 0x66          DC8 69H, 66H, 69H, 63H, 61H, 74H, 65H, 20H
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x65 0x20    
   \       0x10   0x43 0x6F          DC8 43H, 6FH, 6DH, 6DH, 6FH, 6EH, 20H, 4EH
   \              0x6D 0x6D    
   \              0x6F 0x6E    
   \              0x20 0x4E    
   \       0x18   0x61 0x6D          DC8 61H, 6DH, 65H, 20H, 28H, 43H, 4EH, 29H
   \              0x65 0x20    
   \              0x28 0x43    
   \              0x4E 0x29    
   \       0x20   0x20 0x64          DC8 20H, 64H, 6FH, 65H, 73H, 20H, 6EH, 6FH
   \              0x6F 0x65    
   \              0x73 0x20    
   \              0x6E 0x6F    
   \       0x28   0x74 0x20          DC8 74H, 20H, 6DH, 61H, 74H, 63H, 68H, 20H
   \              0x6D 0x61    
   \              0x74 0x63    
   \              0x68 0x20    
   \       0x30   0x77 0x69          DC8 77H, 69H, 74H, 68H, 20H, 74H, 68H, 65H
   \              0x74 0x68    
   \              0x20 0x74    
   \              0x68 0x65    
   \       0x38   0x20 0x65          DC8 20H, 65H, 78H, 70H, 65H, 63H, 74H, 65H
   \              0x78 0x70    
   \              0x65 0x63    
   \              0x74 0x65    
   \       0x40   0x64 0x20          DC8 64H, 20H, 43H, 4EH, 0
   \              0x43 0x4E    
   \              0x00         
   \       0x45   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_3:
   \        0x0   0x54 0x68          DC8 54H, 68H, 65H, 20H, 63H, 65H, 72H, 74H
   \              0x65 0x20    
   \              0x63 0x65    
   \              0x72 0x74    
   \        0x8   0x69 0x66          DC8 69H, 66H, 69H, 63H, 61H, 74H, 65H, 20H
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x65 0x20    
   \       0x10   0x69 0x73          DC8 69H, 73H, 20H, 6EH, 6FH, 74H, 20H, 63H
   \              0x20 0x6E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \       0x18   0x6F 0x72          DC8 6FH, 72H, 72H, 65H, 63H, 74H, 6CH, 79H
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x6C 0x79    
   \       0x20   0x20 0x73          DC8 20H, 73H, 69H, 67H, 6EH, 65H, 64H, 20H
   \              0x69 0x67    
   \              0x6E 0x65    
   \              0x64 0x20    
   \       0x28   0x62 0x79          DC8 62H, 79H, 20H, 74H, 68H, 65H, 20H, 74H
   \              0x20 0x74    
   \              0x68 0x65    
   \              0x20 0x74    
   \       0x30   0x72 0x75          DC8 72H, 75H, 73H, 74H, 65H, 64H, 20H, 43H
   \              0x73 0x74    
   \              0x65 0x64    
   \              0x20 0x43    
   \       0x38   0x41 0x00          DC8 41H, 0
   \       0x3A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_4:
   \        0x0   0x54 0x68          DC8 "The CRL is not correctly signed by the trusted CA"
   \              0x65 0x20    
   \              0x43 0x52    
   \              0x4C 0x20    
   \              0x69 0x73    
   \              0x20 0x6E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x6C 0x79    
   \              0x20 0x73    
   \              0x69 0x67    
   \              0x6E 0x65    
   \              0x64 0x20    
   \              0x62 0x79    
   \              0x20 0x74    
   \              0x68 0x65    
   \              0x20 0x74    
   \              0x72 0x75    
   \              0x73 0x74    
   \              0x65 0x64    
   \              0x20 0x43    
   \              0x41 0x00    
   \       0x32   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_5:
   \        0x0   0x54 0x68          DC8 "The CRL is expired"
   \              0x65 0x20    
   \              0x43 0x52    
   \              0x4C 0x20    
   \              0x69 0x73    
   \              0x20 0x65    
   \              0x78 0x70    
   \              0x69 0x72    
   \              0x65 0x64    
   \              0x00         
   \       0x13   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_6:
   \        0x0   0x43 0x65          DC8 "Certificate was missing"
   \              0x72 0x74    
   \              0x69 0x66    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x77 0x61    
   \              0x73 0x20    
   \              0x6D 0x69    
   \              0x73 0x73    
   \              0x69 0x6E    
   \              0x67 0x00    

   \                                 In section .rodata, align 4
   \                     ?_7:
   \        0x0   0x43 0x65          DC8 "Certificate verification was skipped"
   \              0x72 0x74    
   \              0x69 0x66    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x76 0x65    
   \              0x72 0x69    
   \              0x66 0x69    
   \              0x63 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x77    
   \              0x61 0x73    
   \              0x20 0x73    
   \              0x6B 0x69    
   \              0x70 0x70    
   \              0x65 0x64    
   \              0x00         
   \       0x25   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_8:
   \        0x0   0x4F 0x74          DC8 "Other reason (can be used by verify callback)"
   \              0x68 0x65    
   \              0x72 0x20    
   \              0x72 0x65    
   \              0x61 0x73    
   \              0x6F 0x6E    
   \              0x20 0x28    
   \              0x63 0x61    
   \              0x6E 0x20    
   \              0x62 0x65    
   \              0x20 0x75    
   \              0x73 0x65    
   \              0x64 0x20    
   \              0x62 0x79    
   \              0x20 0x76    
   \              0x65 0x72    
   \              0x69 0x66    
   \              0x79 0x20    
   \              0x63 0x61    
   \              0x6C 0x6C    
   \              0x62 0x61    
   \              0x63 0x6B    
   \              0x29 0x00    
   \       0x2E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_9:
   \        0x0   0x54 0x68          DC8 "The certificate validity starts in the future"
   \              0x65 0x20    
   \              0x63 0x65    
   \              0x72 0x74    
   \              0x69 0x66    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x69    
   \              0x74 0x79    
   \              0x20 0x73    
   \              0x74 0x61    
   \              0x72 0x74    
   \              0x73 0x20    
   \              0x69 0x6E    
   \              0x20 0x74    
   \              0x68 0x65    
   \              0x20 0x66    
   \              0x75 0x74    
   \              0x75 0x72    
   \              0x65 0x00    
   \       0x2E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_10:
   \        0x0   0x54 0x68          DC8 "The CRL is from the future"
   \              0x65 0x20    
   \              0x43 0x52    
   \              0x4C 0x20    
   \              0x69 0x73    
   \              0x20 0x66    
   \              0x72 0x6F    
   \              0x6D 0x20    
   \              0x74 0x68    
   \              0x65 0x20    
   \              0x66 0x75    
   \              0x74 0x75    
   \              0x72 0x65    
   \              0x00         
   \       0x1B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_11:
   \        0x0   0x55 0x73          DC8 "Usage does not match the keyUsage extension"
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x64 0x6F    
   \              0x65 0x73    
   \              0x20 0x6E    
   \              0x6F 0x74    
   \              0x20 0x6D    
   \              0x61 0x74    
   \              0x63 0x68    
   \              0x20 0x74    
   \              0x68 0x65    
   \              0x20 0x6B    
   \              0x65 0x79    
   \              0x55 0x73    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x65 0x78    
   \              0x74 0x65    
   \              0x6E 0x73    
   \              0x69 0x6F    
   \              0x6E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_12:
   \        0x0   0x55 0x73          DC8 55H, 73H, 61H, 67H, 65H, 20H, 64H, 6FH
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x64 0x6F    
   \        0x8   0x65 0x73          DC8 65H, 73H, 20H, 6EH, 6FH, 74H, 20H, 6DH
   \              0x20 0x6E    
   \              0x6F 0x74    
   \              0x20 0x6D    
   \       0x10   0x61 0x74          DC8 61H, 74H, 63H, 68H, 20H, 74H, 68H, 65H
   \              0x63 0x68    
   \              0x20 0x74    
   \              0x68 0x65    
   \       0x18   0x20 0x65          DC8 20H, 65H, 78H, 74H, 65H, 6EH, 64H, 65H
   \              0x78 0x74    
   \              0x65 0x6E    
   \              0x64 0x65    
   \       0x20   0x64 0x4B          DC8 64H, 4BH, 65H, 79H, 55H, 73H, 61H, 67H
   \              0x65 0x79    
   \              0x55 0x73    
   \              0x61 0x67    
   \       0x28   0x65 0x20          DC8 65H, 20H, 65H, 78H, 74H, 65H, 6EH, 73H
   \              0x65 0x78    
   \              0x74 0x65    
   \              0x6E 0x73    
   \       0x30   0x69 0x6F          DC8 69H, 6FH, 6EH, 0
   \              0x6E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_13:
   \        0x0   0x55 0x73          DC8 "Usage does not match the nsCertType extension"
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x64 0x6F    
   \              0x65 0x73    
   \              0x20 0x6E    
   \              0x6F 0x74    
   \              0x20 0x6D    
   \              0x61 0x74    
   \              0x63 0x68    
   \              0x20 0x74    
   \              0x68 0x65    
   \              0x20 0x6E    
   \              0x73 0x43    
   \              0x65 0x72    
   \              0x74 0x54    
   \              0x79 0x70    
   \              0x65 0x20    
   \              0x65 0x78    
   \              0x74 0x65    
   \              0x6E 0x73    
   \              0x69 0x6F    
   \              0x6E 0x00    
   \       0x2E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_14:
   \        0x0   0x54 0x68          DC8 54H, 68H, 65H, 20H, 63H, 65H, 72H, 74H
   \              0x65 0x20    
   \              0x63 0x65    
   \              0x72 0x74    
   \        0x8   0x69 0x66          DC8 69H, 66H, 69H, 63H, 61H, 74H, 65H, 20H
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x65 0x20    
   \       0x10   0x69 0x73          DC8 69H, 73H, 20H, 73H, 69H, 67H, 6EH, 65H
   \              0x20 0x73    
   \              0x69 0x67    
   \              0x6E 0x65    
   \       0x18   0x64 0x20          DC8 64H, 20H, 77H, 69H, 74H, 68H, 20H, 61H
   \              0x77 0x69    
   \              0x74 0x68    
   \              0x20 0x61    
   \       0x20   0x6E 0x20          DC8 6EH, 20H, 75H, 6EH, 61H, 63H, 63H, 65H
   \              0x75 0x6E    
   \              0x61 0x63    
   \              0x63 0x65    
   \       0x28   0x70 0x74          DC8 70H, 74H, 61H, 62H, 6CH, 65H, 20H, 68H
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x20 0x68    
   \       0x30   0x61 0x73          DC8 61H, 73H, 68H, 2EH, 0
   \              0x68 0x2E    
   \              0x00         
   \       0x35   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_15:
   \        0x0   0x54 0x68          DC8 54H, 68H, 65H, 20H, 63H, 65H, 72H, 74H
   \              0x65 0x20    
   \              0x63 0x65    
   \              0x72 0x74    
   \        0x8   0x69 0x66          DC8 69H, 66H, 69H, 63H, 61H, 74H, 65H, 20H
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x65 0x20    
   \       0x10   0x69 0x73          DC8 69H, 73H, 20H, 73H, 69H, 67H, 6EH, 65H
   \              0x20 0x73    
   \              0x69 0x67    
   \              0x6E 0x65    
   \       0x18   0x64 0x20          DC8 64H, 20H, 77H, 69H, 74H, 68H, 20H, 61H
   \              0x77 0x69    
   \              0x74 0x68    
   \              0x20 0x61    
   \       0x20   0x6E 0x20          DC8 6EH, 20H, 75H, 6EH, 61H, 63H, 63H, 65H
   \              0x75 0x6E    
   \              0x61 0x63    
   \              0x63 0x65    
   \       0x28   0x70 0x74          DC8 70H, 74H, 61H, 62H, 6CH, 65H, 20H, 50H
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x20 0x50    
   \       0x30   0x4B 0x20          DC8 4BH, 20H, 61H, 6CH, 67H, 20H, 28H, 65H
   \              0x61 0x6C    
   \              0x67 0x20    
   \              0x28 0x65    
   \       0x38   0x67 0x20          DC8 67H, 20H, 52H, 53H, 41H, 20H, 76H, 73H
   \              0x52 0x53    
   \              0x41 0x20    
   \              0x76 0x73    
   \       0x40   0x20 0x45          DC8 20H, 45H, 43H, 44H, 53H, 41H, 29H, 2EH
   \              0x43 0x44    
   \              0x53 0x41    
   \              0x29 0x2E    
   \       0x48   0x00               DC8 0
   \       0x49   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_16:
   \        0x0   0x54 0x68          DC8 54H, 68H, 65H, 20H, 63H, 65H, 72H, 74H
   \              0x65 0x20    
   \              0x63 0x65    
   \              0x72 0x74    
   \        0x8   0x69 0x66          DC8 69H, 66H, 69H, 63H, 61H, 74H, 65H, 20H
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x65 0x20    
   \       0x10   0x69 0x73          DC8 69H, 73H, 20H, 73H, 69H, 67H, 6EH, 65H
   \              0x20 0x73    
   \              0x69 0x67    
   \              0x6E 0x65    
   \       0x18   0x64 0x20          DC8 64H, 20H, 77H, 69H, 74H, 68H, 20H, 61H
   \              0x77 0x69    
   \              0x74 0x68    
   \              0x20 0x61    
   \       0x20   0x6E 0x20          DC8 6EH, 20H, 75H, 6EH, 61H, 63H, 63H, 65H
   \              0x75 0x6E    
   \              0x61 0x63    
   \              0x63 0x65    
   \       0x28   0x70 0x74          DC8 70H, 74H, 61H, 62H, 6CH, 65H, 20H, 6BH
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x20 0x6B    
   \       0x30   0x65 0x79          DC8 65H, 79H, 20H, 28H, 65H, 67H, 20H, 62H
   \              0x20 0x28    
   \              0x65 0x67    
   \              0x20 0x62    
   \       0x38   0x61 0x64          DC8 61H, 64H, 20H, 63H, 75H, 72H, 76H, 65H
   \              0x20 0x63    
   \              0x75 0x72    
   \              0x76 0x65    
   \       0x40   0x2C 0x20          DC8 2CH, 20H, 52H, 53H, 41H, 20H, 74H, 6FH
   \              0x52 0x53    
   \              0x41 0x20    
   \              0x74 0x6F    
   \       0x48   0x6F 0x20          DC8 6FH, 20H, 73H, 68H, 6FH, 72H, 74H, 29H
   \              0x73 0x68    
   \              0x6F 0x72    
   \              0x74 0x29    
   \       0x50   0x2E 0x00          DC8 2EH, 0
   \       0x52   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_17:
   \        0x0   0x54 0x68          DC8 "The CRL is signed with an unacceptable hash."
   \              0x65 0x20    
   \              0x43 0x52    
   \              0x4C 0x20    
   \              0x69 0x73    
   \              0x20 0x73    
   \              0x69 0x67    
   \              0x6E 0x65    
   \              0x64 0x20    
   \              0x77 0x69    
   \              0x74 0x68    
   \              0x20 0x61    
   \              0x6E 0x20    
   \              0x75 0x6E    
   \              0x61 0x63    
   \              0x63 0x65    
   \              0x70 0x74    
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x20 0x68    
   \              0x61 0x73    
   \              0x68 0x2E    
   \              0x00         
   \       0x2D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_18:
   \        0x0   0x54 0x68          DC8 54H, 68H, 65H, 20H, 43H, 52H, 4CH, 20H
   \              0x65 0x20    
   \              0x43 0x52    
   \              0x4C 0x20    
   \        0x8   0x69 0x73          DC8 69H, 73H, 20H, 73H, 69H, 67H, 6EH, 65H
   \              0x20 0x73    
   \              0x69 0x67    
   \              0x6E 0x65    
   \       0x10   0x64 0x20          DC8 64H, 20H, 77H, 69H, 74H, 68H, 20H, 61H
   \              0x77 0x69    
   \              0x74 0x68    
   \              0x20 0x61    
   \       0x18   0x6E 0x20          DC8 6EH, 20H, 75H, 6EH, 61H, 63H, 63H, 65H
   \              0x75 0x6E    
   \              0x61 0x63    
   \              0x63 0x65    
   \       0x20   0x70 0x74          DC8 70H, 74H, 61H, 62H, 6CH, 65H, 20H, 50H
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x20 0x50    
   \       0x28   0x4B 0x20          DC8 4BH, 20H, 61H, 6CH, 67H, 20H, 28H, 65H
   \              0x61 0x6C    
   \              0x67 0x20    
   \              0x28 0x65    
   \       0x30   0x67 0x20          DC8 67H, 20H, 52H, 53H, 41H, 20H, 76H, 73H
   \              0x52 0x53    
   \              0x41 0x20    
   \              0x76 0x73    
   \       0x38   0x20 0x45          DC8 20H, 45H, 43H, 44H, 53H, 41H, 29H, 2EH
   \              0x43 0x44    
   \              0x53 0x41    
   \              0x29 0x2E    
   \       0x40   0x00               DC8 0
   \       0x41   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_19:
   \        0x0   0x54 0x68          DC8 54H, 68H, 65H, 20H, 43H, 52H, 4CH, 20H
   \              0x65 0x20    
   \              0x43 0x52    
   \              0x4C 0x20    
   \        0x8   0x69 0x73          DC8 69H, 73H, 20H, 73H, 69H, 67H, 6EH, 65H
   \              0x20 0x73    
   \              0x69 0x67    
   \              0x6E 0x65    
   \       0x10   0x64 0x20          DC8 64H, 20H, 77H, 69H, 74H, 68H, 20H, 61H
   \              0x77 0x69    
   \              0x74 0x68    
   \              0x20 0x61    
   \       0x18   0x6E 0x20          DC8 6EH, 20H, 75H, 6EH, 61H, 63H, 63H, 65H
   \              0x75 0x6E    
   \              0x61 0x63    
   \              0x63 0x65    
   \       0x20   0x70 0x74          DC8 70H, 74H, 61H, 62H, 6CH, 65H, 20H, 6BH
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x20 0x6B    
   \       0x28   0x65 0x79          DC8 65H, 79H, 20H, 28H, 65H, 67H, 20H, 62H
   \              0x20 0x28    
   \              0x65 0x67    
   \              0x20 0x62    
   \       0x30   0x61 0x64          DC8 61H, 64H, 20H, 63H, 75H, 72H, 76H, 65H
   \              0x20 0x63    
   \              0x75 0x72    
   \              0x76 0x65    
   \       0x38   0x2C 0x20          DC8 2CH, 20H, 52H, 53H, 41H, 20H, 74H, 6FH
   \              0x52 0x53    
   \              0x41 0x20    
   \              0x74 0x6F    
   \       0x40   0x6F 0x20          DC8 6FH, 20H, 73H, 68H, 6FH, 72H, 74H, 29H
   \              0x73 0x68    
   \              0x6F 0x72    
   \              0x74 0x29    
   \       0x48   0x2E 0x00          DC8 2EH, 0
   \       0x4A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_20:
   \        0x0   0x2D 0x2D          DC8 "-----BEGIN CERTIFICATE-----"
   \              0x2D 0x2D    
   \              0x2D 0x42    
   \              0x45 0x47    
   \              0x49 0x4E    
   \              0x20 0x43    
   \              0x45 0x52    
   \              0x54 0x49    
   \              0x46 0x49    
   \              0x43 0x41    
   \              0x54 0x45    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x00    

   \                                 In section .rodata, align 4
   \                     ?_21:
   \        0x0   0x2D 0x2D          DC8 "-----END CERTIFICATE-----"
   \              0x2D 0x2D    
   \              0x2D 0x45    
   \              0x4E 0x44    
   \              0x20 0x43    
   \              0x45 0x52    
   \              0x54 0x49    
   \              0x46 0x49    
   \              0x43 0x41    
   \              0x54 0x45    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x00    
   \       0x1A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 1
   \        0x0   0x00               DC8 ""

   \                                 In section .rodata, align 4
   \        0x0   0x2C 0x20          DC8 ", "
   \              0x00         
   \        0x3   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_24:
   \        0x0   0x25 0x73          DC8 "%sSSL Client"
   \              0x53 0x53    
   \              0x4C 0x20    
   \              0x43 0x6C    
   \              0x69 0x65    
   \              0x6E 0x74    
   \              0x00         
   \        0xD   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_25:
   \        0x0   0x25 0x73          DC8 "%sSSL Server"
   \              0x53 0x53    
   \              0x4C 0x20    
   \              0x53 0x65    
   \              0x72 0x76    
   \              0x65 0x72    
   \              0x00         
   \        0xD   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_26:
   \        0x0   0x25 0x73          DC8 "%sEmail"
   \              0x45 0x6D    
   \              0x61 0x69    
   \              0x6C 0x00    

   \                                 In section .rodata, align 4
   \                     ?_27:
   \        0x0   0x25 0x73          DC8 "%sObject Signing"
   \              0x4F 0x62    
   \              0x6A 0x65    
   \              0x63 0x74    
   \              0x20 0x53    
   \              0x69 0x67    
   \              0x6E 0x69    
   \              0x6E 0x67    
   \              0x00         
   \       0x11   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_28:
   \        0x0   0x25 0x73          DC8 "%sReserved"
   \              0x52 0x65    
   \              0x73 0x65    
   \              0x72 0x76    
   \              0x65 0x64    
   \              0x00         
   \        0xB   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_29:
   \        0x0   0x25 0x73          DC8 "%sSSL CA"
   \              0x53 0x53    
   \              0x4C 0x20    
   \              0x43 0x41    
   \              0x00         
   \        0x9   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_30:
   \        0x0   0x25 0x73          DC8 "%sEmail CA"
   \              0x45 0x6D    
   \              0x61 0x69    
   \              0x6C 0x20    
   \              0x43 0x41    
   \              0x00         
   \        0xB   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_31:
   \        0x0   0x25 0x73          DC8 "%sObject Signing CA"
   \              0x4F 0x62    
   \              0x6A 0x65    
   \              0x63 0x74    
   \              0x20 0x53    
   \              0x69 0x67    
   \              0x6E 0x69    
   \              0x6E 0x67    
   \              0x20 0x43    
   \              0x41 0x00    

   \                                 In section .rodata, align 4
   \                     ?_32:
   \        0x0   0x25 0x73          DC8 "%sDigital Signature"
   \              0x44 0x69    
   \              0x67 0x69    
   \              0x74 0x61    
   \              0x6C 0x20    
   \              0x53 0x69    
   \              0x67 0x6E    
   \              0x61 0x74    
   \              0x75 0x72    
   \              0x65 0x00    

   \                                 In section .rodata, align 4
   \                     ?_33:
   \        0x0   0x25 0x73          DC8 "%sNon Repudiation"
   \              0x4E 0x6F    
   \              0x6E 0x20    
   \              0x52 0x65    
   \              0x70 0x75    
   \              0x64 0x69    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x00    
   \       0x12   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_34:
   \        0x0   0x25 0x73          DC8 "%sKey Encipherment"
   \              0x4B 0x65    
   \              0x79 0x20    
   \              0x45 0x6E    
   \              0x63 0x69    
   \              0x70 0x68    
   \              0x65 0x72    
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x00         
   \       0x13   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_35:
   \        0x0   0x25 0x73          DC8 "%sData Encipherment"
   \              0x44 0x61    
   \              0x74 0x61    
   \              0x20 0x45    
   \              0x6E 0x63    
   \              0x69 0x70    
   \              0x68 0x65    
   \              0x72 0x6D    
   \              0x65 0x6E    
   \              0x74 0x00    

   \                                 In section .rodata, align 4
   \                     ?_36:
   \        0x0   0x25 0x73          DC8 "%sKey Agreement"
   \              0x4B 0x65    
   \              0x79 0x20    
   \              0x41 0x67    
   \              0x72 0x65    
   \              0x65 0x6D    
   \              0x65 0x6E    
   \              0x74 0x00    

   \                                 In section .rodata, align 4
   \                     ?_37:
   \        0x0   0x25 0x73          DC8 "%sKey Cert Sign"
   \              0x4B 0x65    
   \              0x79 0x20    
   \              0x43 0x65    
   \              0x72 0x74    
   \              0x20 0x53    
   \              0x69 0x67    
   \              0x6E 0x00    

   \                                 In section .rodata, align 4
   \                     ?_38:
   \        0x0   0x25 0x73          DC8 "%sCRL Sign"
   \              0x43 0x52    
   \              0x4C 0x20    
   \              0x53 0x69    
   \              0x67 0x6E    
   \              0x00         
   \        0xB   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_39:
   \        0x0   0x25 0x73          DC8 "%sEncipher Only"
   \              0x45 0x6E    
   \              0x63 0x69    
   \              0x70 0x68    
   \              0x65 0x72    
   \              0x20 0x4F    
   \              0x6E 0x6C    
   \              0x79 0x00    

   \                                 In section .rodata, align 4
   \                     ?_40:
   \        0x0   0x25 0x73          DC8 "%sDecipher Only"
   \              0x44 0x65    
   \              0x63 0x69    
   \              0x70 0x68    
   \              0x65 0x72    
   \              0x20 0x4F    
   \              0x6E 0x6C    
   \              0x79 0x00    

   \                                 In section .rodata, align 4
   \        0x0   0x3F 0x3F          DC8 "???"
   \              0x3F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_42:
   \        0x0   0x25 0x73          DC8 "%s%s"
   \              0x25 0x73    
   \              0x00         
   \        0x5   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_43:
   \        0x0   0x0A 0x43          DC8 "\012Certificate is uninitialised!\012"
   \              0x65 0x72    
   \              0x74 0x69    
   \              0x66 0x69    
   \              0x63 0x61    
   \              0x74 0x65    
   \              0x20 0x69    
   \              0x73 0x20    
   \              0x75 0x6E    
   \              0x69 0x6E    
   \              0x69 0x74    
   \              0x69 0x61    
   \              0x6C 0x69    
   \              0x73 0x65    
   \              0x64 0x21    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_44:
   \        0x0   0x25 0x73          DC8 "%scert. version     : %d\012"
   \              0x63 0x65    
   \              0x72 0x74    
   \              0x2E 0x20    
   \              0x76 0x65    
   \              0x72 0x73    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x0A 0x00    
   \       0x1A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_45:
   \        0x0   0x25 0x73          DC8 "%sserial number     : "
   \              0x73 0x65    
   \              0x72 0x69    
   \              0x61 0x6C    
   \              0x20 0x6E    
   \              0x75 0x6D    
   \              0x62 0x65    
   \              0x72 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x3A 0x20    
   \              0x00         
   \       0x17   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_46:
   \        0x0   0x0A 0x25          DC8 "\012%sissuer name       : "
   \              0x73 0x69    
   \              0x73 0x73    
   \              0x75 0x65    
   \              0x72 0x20    
   \              0x6E 0x61    
   \              0x6D 0x65    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_47:
   \        0x0   0x0A 0x25          DC8 "\012%ssubject name      : "
   \              0x73 0x73    
   \              0x75 0x62    
   \              0x6A 0x65    
   \              0x63 0x74    
   \              0x20 0x6E    
   \              0x61 0x6D    
   \              0x65 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_48:
   \        0x0   0x0A 0x25          DC8 0AH, 25H, 73H, 69H, 73H, 73H, 75H, 65H
   \              0x73 0x69    
   \              0x73 0x73    
   \              0x75 0x65    
   \        0x8   0x64 0x20          DC8 64H, 20H, 20H, 6FH, 6EH, 20H, 20H, 20H
   \              0x20 0x6F    
   \              0x6E 0x20    
   \              0x20 0x20    
   \       0x10   0x20 0x20          DC8 20H, 20H, 20H, 20H, 20H, 3AH, 20H, 25H
   \              0x20 0x20    
   \              0x20 0x3A    
   \              0x20 0x25    
   \       0x18   0x30 0x34          DC8 30H, 34H, 64H, 2DH, 25H, 30H, 32H, 64H
   \              0x64 0x2D    
   \              0x25 0x30    
   \              0x32 0x64    
   \       0x20   0x2D 0x25          DC8 2DH, 25H, 30H, 32H, 64H, 20H, 25H, 30H
   \              0x30 0x32    
   \              0x64 0x20    
   \              0x25 0x30    
   \       0x28   0x32 0x64          DC8 32H, 64H, 3AH, 25H, 30H, 32H, 64H, 3AH
   \              0x3A 0x25    
   \              0x30 0x32    
   \              0x64 0x3A    
   \       0x30   0x25 0x30          DC8 25H, 30H, 32H, 64H, 0
   \              0x32 0x64    
   \              0x00         
   \       0x35   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_49:
   \        0x0   0x0A 0x25          DC8 0AH, 25H, 73H, 65H, 78H, 70H, 69H, 72H
   \              0x73 0x65    
   \              0x78 0x70    
   \              0x69 0x72    
   \        0x8   0x65 0x73          DC8 65H, 73H, 20H, 6FH, 6EH, 20H, 20H, 20H
   \              0x20 0x6F    
   \              0x6E 0x20    
   \              0x20 0x20    
   \       0x10   0x20 0x20          DC8 20H, 20H, 20H, 20H, 20H, 3AH, 20H, 25H
   \              0x20 0x20    
   \              0x20 0x3A    
   \              0x20 0x25    
   \       0x18   0x30 0x34          DC8 30H, 34H, 64H, 2DH, 25H, 30H, 32H, 64H
   \              0x64 0x2D    
   \              0x25 0x30    
   \              0x32 0x64    
   \       0x20   0x2D 0x25          DC8 2DH, 25H, 30H, 32H, 64H, 20H, 25H, 30H
   \              0x30 0x32    
   \              0x64 0x20    
   \              0x25 0x30    
   \       0x28   0x32 0x64          DC8 32H, 64H, 3AH, 25H, 30H, 32H, 64H, 3AH
   \              0x3A 0x25    
   \              0x30 0x32    
   \              0x64 0x3A    
   \       0x30   0x25 0x30          DC8 25H, 30H, 32H, 64H, 0
   \              0x32 0x64    
   \              0x00         
   \       0x35   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_50:
   \        0x0   0x0A 0x25          DC8 "\012%ssigned using      : "
   \              0x73 0x73    
   \              0x69 0x67    
   \              0x6E 0x65    
   \              0x64 0x20    
   \              0x75 0x73    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_51:
   \        0x0   0x0A 0x25          DC8 "\012%s%-18s: %d bits"
   \              0x73 0x25    
   \              0x2D 0x31    
   \              0x38 0x73    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x20 0x62    
   \              0x69 0x74    
   \              0x73 0x00    
   \       0x12   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_52:
   \        0x0   0x0A 0x25          DC8 "\012%sbasic constraints : CA=%s"
   \              0x73 0x62    
   \              0x61 0x73    
   \              0x69 0x63    
   \              0x20 0x63    
   \              0x6F 0x6E    
   \              0x73 0x74    
   \              0x72 0x61    
   \              0x69 0x6E    
   \              0x74 0x73    
   \              0x20 0x3A    
   \              0x20 0x43    
   \              0x41 0x3D    
   \              0x25 0x73    
   \              0x00         
   \       0x1D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_53:
   \        0x0   0x74 0x72          DC8 "true"
   \              0x75 0x65    
   \              0x00         
   \        0x5   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_54:
   \        0x0   0x66 0x61          DC8 "false"
   \              0x6C 0x73    
   \              0x65 0x00    
   \        0x6   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_55:
   \        0x0   0x2C 0x20          DC8 ", max_pathlen=%d"
   \              0x6D 0x61    
   \              0x78 0x5F    
   \              0x70 0x61    
   \              0x74 0x68    
   \              0x6C 0x65    
   \              0x6E 0x3D    
   \              0x25 0x64    
   \              0x00         
   \       0x11   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_56:
   \        0x0   0x0A 0x25          DC8 "\012%ssubject alt name  : "
   \              0x73 0x73    
   \              0x75 0x62    
   \              0x6A 0x65    
   \              0x63 0x74    
   \              0x20 0x61    
   \              0x6C 0x74    
   \              0x20 0x6E    
   \              0x61 0x6D    
   \              0x65 0x20    
   \              0x20 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_57:
   \        0x0   0x0A 0x25          DC8 "\012%scert. type        : "
   \              0x73 0x63    
   \              0x65 0x72    
   \              0x74 0x2E    
   \              0x20 0x74    
   \              0x79 0x70    
   \              0x65 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_58:
   \        0x0   0x0A 0x25          DC8 "\012%skey usage         : "
   \              0x73 0x6B    
   \              0x65 0x79    
   \              0x20 0x75    
   \              0x73 0x61    
   \              0x67 0x65    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_59:
   \        0x0   0x0A 0x25          DC8 "\012%sext key usage     : "
   \              0x73 0x65    
   \              0x78 0x74    
   \              0x20 0x6B    
   \              0x65 0x79    
   \              0x20 0x75    
   \              0x73 0x61    
   \              0x67 0x65    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 2
   \        0x0   0x0A 0x00          DC8 "\012"

   \                                 In section .rodata, align 4
   \                     ?_61:
   \        0x0   0x25 0x73          DC8 "%s%s\012"
   \              0x25 0x73    
   \              0x0A 0x00    
   \        0x6   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_62:
   \        0x0   0x25 0x73          DC8 "%sUnknown reason (this should not happen)\012"
   \              0x55 0x6E    
   \              0x6B 0x6E    
   \              0x6F 0x77    
   \              0x6E 0x20    
   \              0x72 0x65    
   \              0x61 0x73    
   \              0x6F 0x6E    
   \              0x20 0x28    
   \              0x74 0x68    
   \              0x69 0x73    
   \              0x20 0x73    
   \              0x68 0x6F    
   \              0x75 0x6C    
   \              0x64 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x68 0x61    
   \              0x70 0x70    
   \              0x65 0x6E    
   \              0x29 0x0A    
   \              0x00         
   \       0x2B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_63:
   \        0x0   0x55 0x1D          DC8 55H, 1DH, 25H, 0, 0
   \              0x25 0x00    
   \              0x00         
   \        0x5   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \        0x0   0x55 0x04          DC8 "U\004\003"
   \              0x03 0x00    
   2485          
   2486          #endif /* MBEDTLS_X509_CRT_PARSE_C */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   mbedtls_pk_ec
      16   mbedtls_x509_crt_check_extended_key_usage
        16   -> memcmp
       4   mbedtls_x509_crt_check_key_usage
      24   mbedtls_x509_crt_free
        24   -> mbedtls_free
        24   -> mbedtls_pk_free
        24   -> mbedtls_platform_zeroize
      72   mbedtls_x509_crt_info
        72   -> mbedtls_pk_get_bitlen
        72   -> mbedtls_pk_get_name
        72   -> mbedtls_x509_dn_gets
        72   -> mbedtls_x509_key_size_helper
        72   -> mbedtls_x509_serial_gets
        72   -> mbedtls_x509_sig_alg_gets
        72   -> snprintf
        72   -> x509_info_cert_type
        72   -> x509_info_ext_key_usage
        72   -> x509_info_key_usage
        72   -> x509_info_subject_alt_name
       0   mbedtls_x509_crt_init
         0   -> __aeabi_memset4
      16   mbedtls_x509_crt_is_revoked
        16   -> mbedtls_x509_time_is_past
        16   -> memcmp
      64   mbedtls_x509_crt_parse
        64   -> mbedtls_pem_free
        64   -> mbedtls_pem_init
        64   -> mbedtls_pem_read_buffer
        64   -> mbedtls_x509_crt_parse_der
        64   -> strstr
      24   mbedtls_x509_crt_parse_der
        24   -> mbedtls_calloc
        24   -> mbedtls_free
        24   -> mbedtls_x509_crt_init
        24   -> x509_crt_parse_der_core
      32   mbedtls_x509_crt_verify
        32   -> mbedtls_x509_crt_verify_with_profile
      32   mbedtls_x509_crt_verify_info
        32   -> snprintf
     120   mbedtls_x509_crt_verify_with_profile
       120   -> __aeabi_memset4
       120   -> mbedtls_pk_get_type
       120   -> x509_crt_merge_flags_with_cb
       120   -> x509_crt_verify_chain
       120   -> x509_crt_verify_name
       120   -> x509_profile_check_key
       120   -> x509_profile_check_pk_alg
      16   x509_check_wildcard
        16   -> strlen
        16   -> x509_memcasecmp
      16   x509_crt_check_cn
        16   -> x509_check_wildcard
        16   -> x509_memcasecmp
      16   x509_crt_check_ee_locally_trusted
        16   -> memcmp
        16   -> x509_name_cmp
      16   x509_crt_check_parent
        16   -> mbedtls_x509_crt_check_key_usage
        16   -> x509_name_cmp
      96   x509_crt_check_signature
        96   -> mbedtls_md
        96   -> mbedtls_md_get_size
        96   -> mbedtls_md_info_from_type
        96   -> mbedtls_pk_verify_ext
      24   x509_crt_find_parent
        24   -> x509_crt_find_parent_in
      32   x509_crt_find_parent_in
        32   -> mbedtls_x509_time_is_future
        32   -> mbedtls_x509_time_is_past
        32   -> x509_crt_check_parent
        32   -> x509_crt_check_signature
      32   x509_crt_merge_flags_with_cb
        32   -- Indirect call
      72   x509_crt_parse_der_core
        72   -> __aeabi_memcpy
        72   -> __aeabi_memset4
        72   -> mbedtls_asn1_get_tag
        72   -> mbedtls_calloc
        72   -> mbedtls_pk_parse_subpubkey
        72   -> mbedtls_x509_crt_free
        72   -> mbedtls_x509_get_alg
        72   -> mbedtls_x509_get_name
        72   -> mbedtls_x509_get_serial
        72   -> mbedtls_x509_get_sig
        72   -> mbedtls_x509_get_sig_alg
        72   -> memcmp
        72   -> x509_get_crt_ext
        72   -> x509_get_dates
        72   -> x509_get_uid
        72   -> x509_get_version
      48   x509_crt_verify_chain
        48   -> mbedtls_x509_time_is_future
        48   -> mbedtls_x509_time_is_past
        48   -> x509_crt_check_ee_locally_trusted
        48   -> x509_crt_check_signature
        48   -> x509_crt_find_parent
        48   -> x509_crt_verifycrl
        48   -> x509_name_cmp
        48   -> x509_profile_check_key
        48   -> x509_profile_check_md_alg
        48   -> x509_profile_check_pk_alg
      24   x509_crt_verify_name
        24   -> memcmp
        24   -> strlen
        24   -> x509_crt_check_cn
     112   x509_crt_verifycrl
       112   -> mbedtls_md
       112   -> mbedtls_md_get_size
       112   -> mbedtls_md_info_from_type
       112   -> mbedtls_pk_verify_ext
       112   -> mbedtls_x509_crt_check_key_usage
       112   -> mbedtls_x509_crt_is_revoked
       112   -> mbedtls_x509_time_is_future
       112   -> mbedtls_x509_time_is_past
       112   -> memcmp
       112   -> x509_profile_check_key
       112   -> x509_profile_check_md_alg
       112   -> x509_profile_check_pk_alg
      24   x509_get_basic_constraints
        24   -> mbedtls_asn1_get_bool
        24   -> mbedtls_asn1_get_int
        24   -> mbedtls_asn1_get_tag
      48   x509_get_crt_ext
        48   -> mbedtls_asn1_get_bool
        48   -> mbedtls_asn1_get_tag
        48   -> mbedtls_oid_get_x509_ext_type
        48   -> mbedtls_x509_get_ext
        48   -> x509_get_basic_constraints
        48   -> x509_get_ext_key_usage
        48   -> x509_get_key_usage
        48   -> x509_get_ns_cert_type
        48   -> x509_get_subject_alt_name
      24   x509_get_dates
        24   -> mbedtls_asn1_get_tag
        24   -> mbedtls_x509_get_time
       8   x509_get_ext_key_usage
         8   -> mbedtls_asn1_get_sequence_of
      32   x509_get_key_usage
        32   -> mbedtls_asn1_get_bitstring
      32   x509_get_ns_cert_type
        32   -> mbedtls_asn1_get_bitstring
      32   x509_get_subject_alt_name
        32   -> mbedtls_asn1_get_len
        32   -> mbedtls_asn1_get_tag
        32   -> mbedtls_calloc
      16   x509_get_uid
        16   -> mbedtls_asn1_get_tag
      24   x509_get_version
        24   -> mbedtls_asn1_get_int
        24   -> mbedtls_asn1_get_tag
      24   x509_info_cert_type
        24   -> snprintf
      40   x509_info_ext_key_usage
        40   -> mbedtls_oid_get_extended_key_usage
        40   -> snprintf
      24   x509_info_key_usage
        24   -> snprintf
      16   x509_info_subject_alt_name
       8   x509_memcasecmp
      16   x509_name_cmp
        16   -> memcmp
        16   -> x509_string_cmp
      16   x509_profile_check_key
        16   -> mbedtls_pk_ec
        16   -> mbedtls_pk_get_bitlen
        16   -> mbedtls_pk_get_type
       0   x509_profile_check_md_alg
       0   x509_profile_check_pk_alg
      16   x509_string_cmp
        16   -> memcmp
        16   -> x509_memcasecmp


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable13
       4  ??DataTable13_1
       4  ??DataTable15
       4  ??DataTable15_1
       4  ??DataTable15_10
       4  ??DataTable15_2
       4  ??DataTable15_3
       4  ??DataTable15_4
       4  ??DataTable15_5
       4  ??DataTable15_6
       4  ??DataTable15_7
       4  ??DataTable15_8
       4  ??DataTable15_9
       4  ??DataTable16
       4  ??DataTable16_1
       4  ??DataTable17
       4  ??DataTable18
       4  ??DataTable19
       4  ??DataTable19_1
       4  ??DataTable19_10
       4  ??DataTable19_11
       4  ??DataTable19_12
       4  ??DataTable19_13
       4  ??DataTable19_14
       4  ??DataTable19_15
       4  ??DataTable19_16
       4  ??DataTable19_17
       4  ??DataTable19_18
       4  ??DataTable19_19
       4  ??DataTable19_2
       4  ??DataTable19_20
       4  ??DataTable19_21
       4  ??DataTable19_3
       4  ??DataTable19_4
       4  ??DataTable19_5
       4  ??DataTable19_6
       4  ??DataTable19_7
       4  ??DataTable19_8
       4  ??DataTable19_9
       4  ??DataTable20
       4  ??DataTable20_1
       4  ??DataTable20_2
       4  ??DataTable21
       4  ??DataTable21_1
       4  ??DataTable22
       4  ??DataTable22_1
       4  ??DataTable22_2
       4  ??DataTable22_3
       4  ??DataTable23
       4  ??DataTable23_1
       4  ??DataTable23_10
       4  ??DataTable23_11
       4  ??DataTable23_12
       4  ??DataTable23_13
       4  ??DataTable23_14
       4  ??DataTable23_15
       4  ??DataTable23_16
       4  ??DataTable23_17
       4  ??DataTable23_18
       4  ??DataTable23_19
       4  ??DataTable23_2
       4  ??DataTable23_20
       4  ??DataTable23_21
       4  ??DataTable23_3
       4  ??DataTable23_4
       4  ??DataTable23_5
       4  ??DataTable23_6
       4  ??DataTable23_7
       4  ??DataTable23_8
       4  ??DataTable23_9
      40  ?_0
      48  ?_1
      28  ?_10
      44  ?_11
      52  ?_12
      48  ?_13
      56  ?_14
      76  ?_15
      84  ?_16
      48  ?_17
      68  ?_18
      76  ?_19
      72  ?_2
      28  ?_20
      28  ?_21
       1  ?_22
       4  ?_23
      16  ?_24
      16  ?_25
       8  ?_26
      20  ?_27
      12  ?_28
      12  ?_29
      60  ?_3
      12  ?_30
      20  ?_31
      20  ?_32
      20  ?_33
      20  ?_34
      20  ?_35
      16  ?_36
      16  ?_37
      12  ?_38
      16  ?_39
      52  ?_4
      16  ?_40
       4  ?_41
       8  ?_42
      32  ?_43
      28  ?_44
      24  ?_45
      24  ?_46
      24  ?_47
      56  ?_48
      56  ?_49
      20  ?_5
      24  ?_50
      20  ?_51
      32  ?_52
       8  ?_53
       8  ?_54
      20  ?_55
      24  ?_56
      24  ?_57
      24  ?_58
      24  ?_59
      24  ?_6
       2  ?_60
       8  ?_61
      44  ?_62
       8  ?_63
       4  ?_64
      12  ?_65
      12  ?_66
      12  ?_67
      40  ?_7
      48  ?_8
      48  ?_9
       4  mbedtls_pk_ec
      90  mbedtls_x509_crt_check_extended_key_usage
      70  mbedtls_x509_crt_check_key_usage
     194  mbedtls_x509_crt_free
     978  mbedtls_x509_crt_info
      10  mbedtls_x509_crt_init
      64  mbedtls_x509_crt_is_revoked
     256  mbedtls_x509_crt_parse
     140  mbedtls_x509_crt_parse_der
      16  mbedtls_x509_crt_profile_default
      16  mbedtls_x509_crt_profile_next
      16  mbedtls_x509_crt_profile_suiteb
      26  mbedtls_x509_crt_verify
     118  mbedtls_x509_crt_verify_info
     196  mbedtls_x509_crt_verify_with_profile
      94  x509_check_wildcard
      50  x509_crt_check_cn
      64  x509_crt_check_ee_locally_trusted
      72  x509_crt_check_parent
      98  x509_crt_check_signature
      50  x509_crt_find_parent
     118  x509_crt_find_parent_in
      74  x509_crt_merge_flags_with_cb
     664  x509_crt_parse_der_core
     360  x509_crt_verify_chain
     134  x509_crt_verify_name
     168  x509_crt_verify_strings
     260  x509_crt_verifycrl
     136  x509_get_basic_constraints
     376  x509_get_crt_ext
      76  x509_get_dates
      36  x509_get_ext_key_usage
      80  x509_get_key_usage
      54  x509_get_ns_cert_type
     188  x509_get_subject_alt_name
      62  x509_get_uid
      72  x509_get_version
     274  x509_info_cert_type
      96  x509_info_ext_key_usage
     304  x509_info_key_usage
      98  x509_info_subject_alt_name
      52  x509_memcasecmp
      92  x509_name_cmp
     100  x509_profile_check_key
      30  x509_profile_check_md_alg
      30  x509_profile_check_pk_alg
      88  x509_string_cmp

 
 2 147 bytes in section .rodata
 6 708 bytes in section .text
 
 6 708 bytes of CODE  memory
 2 147 bytes of CONST memory

Errors: none
Warnings: none
