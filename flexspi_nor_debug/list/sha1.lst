###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.3.193/W32 for ARM         10/Jun/2019  13:48:47
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\Development\smart_washing_machine_3080\mbedtls\library\sha1.c
#    Command line =  
#        -f C:\Users\nxf42695\AppData\Local\Temp\1\EW4406.tmp
#        (C:\Development\smart_washing_machine_3080\mbedtls\library\sha1.c -D
#        DEBUG -D USE_RTOS -D XIP_EXTERNAL_FLASH=1 -D XIP_BOOT_HEADER_ENABLE=1
#        -D CPU_MIMXRT1052DVL6B -D FSL_RTOS_FREE_RTOS -D PRINTF_ADVANCED_ENABLE
#        -D "MBEDTLS_CONFIG_FILE=\"ksdk_mbedtls_config.h\"" -lC
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list -lA
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list
#        --diag_suppress Pa082,Pa050 -o
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_d16 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" --preinclude
#        C:\Development\smart_washing_machine_3080/source\app_preinclude.h -I
#        C:\Development\smart_washing_machine_3080/board\ -I
#        C:\Development\smart_washing_machine_3080/source\ -I
#        C:\Development\smart_washing_machine_3080/CMSIS\ -I
#        C:\Development\smart_washing_machine_3080/amazon-freertos/freertos/portable\
#        -I C:\Development\smart_washing_machine_3080/amazon-freertos/include\
#        -I C:\Development\smart_washing_machine_3080/component/lists\ -I
#        C:\Development\smart_washing_machine_3080/component/serial_manager\ -I
#        C:\Development\smart_washing_machine_3080/component/uart\ -I
#        C:\Development\smart_washing_machine_3080/component/kv\ -I
#        C:\Development\smart_washing_machine_3080/component/kv/include\ -I
#        C:\Development\smart_washing_machine_3080/device\ -I
#        C:\Development\smart_washing_machine_3080/doc\ -I
#        C:\Development\smart_washing_machine_3080/drivers\ -I
#        C:\Development\smart_washing_machine_3080/src\ -I
#        C:\Development\smart_washing_machine_3080/startup\ -I
#        C:\Development\smart_washing_machine_3080/utilities\ -I
#        C:\Development\smart_washing_machine_3080/xip\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\atm\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_model\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_sign\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\infra\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\mqtt\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\external_libs\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\coap_cloud\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\CoAPPacket\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\server\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\os\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\awss_reset\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\mbedtls\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\ -I
#        C:\Development\smart_washing_machine_3080\mbedtls\port\ksdk\ -Om)
#    Locale       =  C
#    List file    =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list\sha1.lst
#    Object file  =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj\sha1.o
#
###############################################################################

C:\Development\smart_washing_machine_3080\mbedtls\library\sha1.c
      1          /*
      2           *  FIPS-180-1 compliant SHA-1 implementation
      3           *
      4           *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
      5           *  SPDX-License-Identifier: Apache-2.0
      6           *
      7           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
      8           *  not use this file except in compliance with the License.
      9           *  You may obtain a copy of the License at
     10           *
     11           *  http://www.apache.org/licenses/LICENSE-2.0
     12           *
     13           *  Unless required by applicable law or agreed to in writing, software
     14           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     15           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     16           *  See the License for the specific language governing permissions and
     17           *  limitations under the License.
     18           *
     19           *  This file is part of mbed TLS (https://tls.mbed.org)
     20           */
     21          /*
     22           *  The SHA-1 standard was published by NIST in 1993.
     23           *
     24           *  http://www.itl.nist.gov/fipspubs/fip180-1.htm
     25           */
     26          
     27          #if !defined(MBEDTLS_CONFIG_FILE)
     28          #include "mbedtls/config.h"
     29          #else
     30          #include MBEDTLS_CONFIG_FILE
     31          #endif
     32          
     33          #if defined(MBEDTLS_SHA1_C)
     34          
     35          #include "mbedtls/sha1.h"
     36          #include "mbedtls/platform_util.h"
     37          
     38          #include <string.h>
     39          
     40          #if defined(MBEDTLS_SELF_TEST)
     41          #if defined(MBEDTLS_PLATFORM_C)
     42          #include "mbedtls/platform.h"
     43          #else
     44          #include <stdio.h>
     45          #define mbedtls_printf printf
     46          #endif /* MBEDTLS_PLATFORM_C */
     47          #endif /* MBEDTLS_SELF_TEST */
     48          
     49          #if !defined(MBEDTLS_SHA1_ALT)
     50          
     51          /*
     52           * 32-bit integer manipulation macros (big endian)
     53           */
     54          #ifndef GET_UINT32_BE
     55          #define GET_UINT32_BE(n,b,i)                            \
     56          {                                                       \
     57              (n) = ( (uint32_t) (b)[(i)    ] << 24 )             \
     58                  | ( (uint32_t) (b)[(i) + 1] << 16 )             \
     59                  | ( (uint32_t) (b)[(i) + 2] <<  8 )             \
     60                  | ( (uint32_t) (b)[(i) + 3]       );            \
     61          }
     62          #endif
     63          
     64          #ifndef PUT_UINT32_BE
     65          #define PUT_UINT32_BE(n,b,i)                            \
     66          {                                                       \
     67              (b)[(i)    ] = (unsigned char) ( (n) >> 24 );       \
     68              (b)[(i) + 1] = (unsigned char) ( (n) >> 16 );       \
     69              (b)[(i) + 2] = (unsigned char) ( (n) >>  8 );       \
     70              (b)[(i) + 3] = (unsigned char) ( (n)       );       \
     71          }
     72          #endif
     73          

   \                                 In section .text, align 2, keep-with-next
     74          void mbedtls_sha1_init( mbedtls_sha1_context *ctx )
     75          {
     76              memset( ctx, 0, sizeof( mbedtls_sha1_context ) );
   \                     mbedtls_sha1_init: (+1)
   \        0x0   0x2200             MOVS     R2,#+0
   \        0x2   0x215C             MOVS     R1,#+92
   \        0x4   0x....'....        B.W      __aeabi_memset4
     77          }
     78          

   \                                 In section .text, align 2, keep-with-next
     79          void mbedtls_sha1_free( mbedtls_sha1_context *ctx )
     80          {
     81              if( ctx == NULL )
   \                     mbedtls_sha1_free: (+1)
   \        0x0   0x2800             CMP      R0,#+0
   \        0x2   0xD002             BEQ.N    ??mbedtls_sha1_free_0
     82                  return;
     83          
     84              mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha1_context ) );
   \        0x4   0x215C             MOVS     R1,#+92
   \        0x6   0x....'....        B.W      mbedtls_platform_zeroize
   \                     ??mbedtls_sha1_free_0: (+1)
   \        0xA   0x4770             BX       LR               ;; return
     85          }
     86          

   \                                 In section .text, align 2, keep-with-next
     87          void mbedtls_sha1_clone( mbedtls_sha1_context *dst,
     88                                   const mbedtls_sha1_context *src )
     89          {
     90              *dst = *src;
   \                     mbedtls_sha1_clone: (+1)
   \        0x0   0x225C             MOVS     R2,#+92
   \        0x2   0x....'....        B.W      __aeabi_memcpy4
     91          }
     92          
     93          /*
     94           * SHA-1 context setup
     95           */

   \                                 In section .text, align 2, keep-with-next
     96          int mbedtls_sha1_starts_ret( mbedtls_sha1_context *ctx )
     97          {
     98              ctx->total[0] = 0;
   \                     mbedtls_sha1_starts_ret: (+1)
   \        0x0   0x2100             MOVS     R1,#+0
   \        0x2   0x6001             STR      R1,[R0, #+0]
     99              ctx->total[1] = 0;
   \        0x4   0x6041             STR      R1,[R0, #+4]
    100          
    101              ctx->state[0] = 0x67452301;
   \        0x6   0x....             LDR.N    R1,??DataTable1  ;; 0x67452301
   \        0x8   0x6081             STR      R1,[R0, #+8]
    102              ctx->state[1] = 0xEFCDAB89;
   \        0xA   0x....             LDR.N    R1,??DataTable1_1  ;; 0xefcdab89
   \        0xC   0x60C1             STR      R1,[R0, #+12]
    103              ctx->state[2] = 0x98BADCFE;
   \        0xE   0x....             LDR.N    R1,??DataTable1_2  ;; 0x98badcfe
   \       0x10   0x6101             STR      R1,[R0, #+16]
    104              ctx->state[3] = 0x10325476;
   \       0x12   0x....             LDR.N    R1,??DataTable1_3  ;; 0x10325476
   \       0x14   0x6141             STR      R1,[R0, #+20]
    105              ctx->state[4] = 0xC3D2E1F0;
   \       0x16   0x....             LDR.N    R1,??DataTable1_4  ;; 0xc3d2e1f0
   \       0x18   0x6181             STR      R1,[R0, #+24]
    106          
    107              return( 0 );
   \       0x1A   0x2000             MOVS     R0,#+0
   \       0x1C   0x4770             BX       LR               ;; return
    108          }
    109          
    110          #if !defined(MBEDTLS_DEPRECATED_REMOVED)

   \                                 In section .text, align 2, keep-with-next
    111          void mbedtls_sha1_starts( mbedtls_sha1_context *ctx )
    112          {
    113              mbedtls_sha1_starts_ret( ctx );
   \                     mbedtls_sha1_starts: (+1)
   \        0x0   0x....             B.N      mbedtls_sha1_starts_ret
    114          }
    115          #endif
    116          
    117          #if !defined(MBEDTLS_SHA1_PROCESS_ALT)

   \                                 In section .text, align 2, keep-with-next
    118          int mbedtls_internal_sha1_process( mbedtls_sha1_context *ctx,
    119                                             const unsigned char data[64] )
    120          {
   \                     mbedtls_internal_sha1_process: (+1)
   \        0x0   0xE92D 0x4FF1      PUSH     {R0,R4-R11,LR}
   \        0x4   0xB08F             SUB      SP,SP,#+60
   \        0x6   0x460F             MOV      R7,R1
    121              uint32_t temp, W[16], A, B, C, D, E;
    122          
    123              GET_UINT32_BE( W[ 0], data,  0 );
   \        0x8   0x7839             LDRB     R1,[R7, #+0]
   \        0xA   0x7878             LDRB     R0,[R7, #+1]
   \        0xC   0x0400             LSLS     R0,R0,#+16
   \        0xE   0xEA40 0x6001      ORR      R0,R0,R1, LSL #+24
   \       0x12   0x78B9             LDRB     R1,[R7, #+2]
   \       0x14   0xEA40 0x2001      ORR      R0,R0,R1, LSL #+8
   \       0x18   0x78F9             LDRB     R1,[R7, #+3]
   \       0x1A   0x4308             ORRS     R0,R1,R0
    124              GET_UINT32_BE( W[ 1], data,  4 );
   \       0x1C   0x7939             LDRB     R1,[R7, #+4]
   \       0x1E   0x797A             LDRB     R2,[R7, #+5]
   \       0x20   0x0412             LSLS     R2,R2,#+16
   \       0x22   0xEA42 0x6201      ORR      R2,R2,R1, LSL #+24
   \       0x26   0x79B9             LDRB     R1,[R7, #+6]
   \       0x28   0xEA42 0x2201      ORR      R2,R2,R1, LSL #+8
   \       0x2C   0x79F9             LDRB     R1,[R7, #+7]
   \       0x2E   0x430A             ORRS     R2,R1,R2
   \       0x30   0x9208             STR      R2,[SP, #+32]
    125              GET_UINT32_BE( W[ 2], data,  8 );
   \       0x32   0x7A3A             LDRB     R2,[R7, #+8]
   \       0x34   0x7A79             LDRB     R1,[R7, #+9]
   \       0x36   0x0409             LSLS     R1,R1,#+16
   \       0x38   0xEA41 0x6102      ORR      R1,R1,R2, LSL #+24
   \       0x3C   0x7ABA             LDRB     R2,[R7, #+10]
   \       0x3E   0xEA41 0x2102      ORR      R1,R1,R2, LSL #+8
   \       0x42   0x7AFA             LDRB     R2,[R7, #+11]
   \       0x44   0x4311             ORRS     R1,R2,R1
    126              GET_UINT32_BE( W[ 3], data, 12 );
   \       0x46   0x7B3B             LDRB     R3,[R7, #+12]
   \       0x48   0x7B7A             LDRB     R2,[R7, #+13]
   \       0x4A   0x0412             LSLS     R2,R2,#+16
   \       0x4C   0xEA42 0x6203      ORR      R2,R2,R3, LSL #+24
   \       0x50   0x7BBB             LDRB     R3,[R7, #+14]
   \       0x52   0xEA42 0x2203      ORR      R2,R2,R3, LSL #+8
   \       0x56   0x7BFB             LDRB     R3,[R7, #+15]
   \       0x58   0x431A             ORRS     R2,R3,R2
    127              GET_UINT32_BE( W[ 4], data, 16 );
   \       0x5A   0x7C3C             LDRB     R4,[R7, #+16]
   \       0x5C   0x7C7B             LDRB     R3,[R7, #+17]
   \       0x5E   0x041B             LSLS     R3,R3,#+16
   \       0x60   0xEA43 0x6304      ORR      R3,R3,R4, LSL #+24
   \       0x64   0x7CBC             LDRB     R4,[R7, #+18]
   \       0x66   0xEA43 0x2304      ORR      R3,R3,R4, LSL #+8
   \       0x6A   0x7CFC             LDRB     R4,[R7, #+19]
   \       0x6C   0x4323             ORRS     R3,R4,R3
    128              GET_UINT32_BE( W[ 5], data, 20 );
   \       0x6E   0x7D3C             LDRB     R4,[R7, #+20]
   \       0x70   0x7D7D             LDRB     R5,[R7, #+21]
   \       0x72   0x042D             LSLS     R5,R5,#+16
   \       0x74   0xEA45 0x6504      ORR      R5,R5,R4, LSL #+24
   \       0x78   0x7DBC             LDRB     R4,[R7, #+22]
   \       0x7A   0xEA45 0x2504      ORR      R5,R5,R4, LSL #+8
   \       0x7E   0x7DFC             LDRB     R4,[R7, #+23]
   \       0x80   0x4325             ORRS     R5,R4,R5
   \       0x82   0x950E             STR      R5,[SP, #+56]
    129              GET_UINT32_BE( W[ 6], data, 24 );
   \       0x84   0x7E3C             LDRB     R4,[R7, #+24]
   \       0x86   0x7E7D             LDRB     R5,[R7, #+25]
   \       0x88   0x042D             LSLS     R5,R5,#+16
   \       0x8A   0xEA45 0x6504      ORR      R5,R5,R4, LSL #+24
   \       0x8E   0x7EBC             LDRB     R4,[R7, #+26]
   \       0x90   0xEA45 0x2504      ORR      R5,R5,R4, LSL #+8
   \       0x94   0x7EFC             LDRB     R4,[R7, #+27]
   \       0x96   0x4325             ORRS     R5,R4,R5
   \       0x98   0x9506             STR      R5,[SP, #+24]
    130              GET_UINT32_BE( W[ 7], data, 28 );
   \       0x9A   0x7F3D             LDRB     R5,[R7, #+28]
   \       0x9C   0x7F7C             LDRB     R4,[R7, #+29]
   \       0x9E   0x0424             LSLS     R4,R4,#+16
   \       0xA0   0xEA44 0x6405      ORR      R4,R4,R5, LSL #+24
   \       0xA4   0x7FBD             LDRB     R5,[R7, #+30]
   \       0xA6   0xEA44 0x2405      ORR      R4,R4,R5, LSL #+8
   \       0xAA   0x7FFD             LDRB     R5,[R7, #+31]
   \       0xAC   0x432C             ORRS     R4,R5,R4
    131              GET_UINT32_BE( W[ 8], data, 32 );
   \       0xAE   0xF897 0x6020      LDRB     R6,[R7, #+32]
   \       0xB2   0xF897 0x5021      LDRB     R5,[R7, #+33]
   \       0xB6   0x042D             LSLS     R5,R5,#+16
   \       0xB8   0xEA45 0x6506      ORR      R5,R5,R6, LSL #+24
   \       0xBC   0xF897 0x6022      LDRB     R6,[R7, #+34]
   \       0xC0   0xEA45 0x2506      ORR      R5,R5,R6, LSL #+8
   \       0xC4   0xF897 0x6023      LDRB     R6,[R7, #+35]
   \       0xC8   0x4335             ORRS     R5,R6,R5
    132              GET_UINT32_BE( W[ 9], data, 36 );
   \       0xCA   0xF897 0xC024      LDRB     R12,[R7, #+36]
   \       0xCE   0xF897 0x6025      LDRB     R6,[R7, #+37]
   \       0xD2   0x0436             LSLS     R6,R6,#+16
   \       0xD4   0xEA46 0x660C      ORR      R6,R6,R12, LSL #+24
   \       0xD8   0xF897 0xC026      LDRB     R12,[R7, #+38]
   \       0xDC   0xEA46 0x260C      ORR      R6,R6,R12, LSL #+8
   \       0xE0   0xF897 0xC027      LDRB     R12,[R7, #+39]
   \       0xE4   0xEA4C 0x0606      ORR      R6,R12,R6
    133              GET_UINT32_BE( W[10], data, 40 );
   \       0xE8   0xF897 0xC028      LDRB     R12,[R7, #+40]
   \       0xEC   0xF897 0xE029      LDRB     LR,[R7, #+41]
   \       0xF0   0xEA4F 0x4E0E      LSL      LR,LR,#+16
   \       0xF4   0xEA4E 0x6E0C      ORR      LR,LR,R12, LSL #+24
   \       0xF8   0xF897 0xC02A      LDRB     R12,[R7, #+42]
   \       0xFC   0xEA4E 0x2E0C      ORR      LR,LR,R12, LSL #+8
   \      0x100   0xF897 0xC02B      LDRB     R12,[R7, #+43]
   \      0x104   0xEA4C 0x0E0E      ORR      LR,R12,LR
   \      0x108   0xF8CD 0xE014      STR      LR,[SP, #+20]
    134              GET_UINT32_BE( W[11], data, 44 );
   \      0x10C   0xF897 0xC02C      LDRB     R12,[R7, #+44]
   \      0x110   0xF897 0xE02D      LDRB     LR,[R7, #+45]
   \      0x114   0xEA4F 0x4E0E      LSL      LR,LR,#+16
   \      0x118   0xEA4E 0x6E0C      ORR      LR,LR,R12, LSL #+24
   \      0x11C   0xF897 0xC02E      LDRB     R12,[R7, #+46]
   \      0x120   0xEA4E 0x2E0C      ORR      LR,LR,R12, LSL #+8
   \      0x124   0xF897 0xC02F      LDRB     R12,[R7, #+47]
   \      0x128   0xEA4C 0x0E0E      ORR      LR,R12,LR
   \      0x12C   0xF8CD 0xE010      STR      LR,[SP, #+16]
    135              GET_UINT32_BE( W[12], data, 48 );
   \      0x130   0xF897 0xC030      LDRB     R12,[R7, #+48]
   \      0x134   0xF897 0xE031      LDRB     LR,[R7, #+49]
   \      0x138   0xEA4F 0x4E0E      LSL      LR,LR,#+16
   \      0x13C   0xEA4E 0x6E0C      ORR      LR,LR,R12, LSL #+24
   \      0x140   0xF897 0xC032      LDRB     R12,[R7, #+50]
   \      0x144   0xEA4E 0x2E0C      ORR      LR,LR,R12, LSL #+8
   \      0x148   0xF897 0xC033      LDRB     R12,[R7, #+51]
   \      0x14C   0xEA4C 0x0E0E      ORR      LR,R12,LR
   \      0x150   0xF8CD 0xE00C      STR      LR,[SP, #+12]
    136              GET_UINT32_BE( W[13], data, 52 );
   \      0x154   0xF897 0xC034      LDRB     R12,[R7, #+52]
   \      0x158   0xF897 0xE035      LDRB     LR,[R7, #+53]
   \      0x15C   0xEA4F 0x4E0E      LSL      LR,LR,#+16
   \      0x160   0xEA4E 0x6E0C      ORR      LR,LR,R12, LSL #+24
   \      0x164   0xF897 0xC036      LDRB     R12,[R7, #+54]
   \      0x168   0xEA4E 0x2E0C      ORR      LR,LR,R12, LSL #+8
   \      0x16C   0xF897 0xC037      LDRB     R12,[R7, #+55]
   \      0x170   0xEA4C 0x0E0E      ORR      LR,R12,LR
   \      0x174   0xF8CD 0xE008      STR      LR,[SP, #+8]
    137              GET_UINT32_BE( W[14], data, 56 );
   \      0x178   0xF897 0xC038      LDRB     R12,[R7, #+56]
   \      0x17C   0xF897 0xE039      LDRB     LR,[R7, #+57]
   \      0x180   0xEA4F 0x4E0E      LSL      LR,LR,#+16
   \      0x184   0xEA4E 0x6E0C      ORR      LR,LR,R12, LSL #+24
   \      0x188   0xF897 0xC03A      LDRB     R12,[R7, #+58]
   \      0x18C   0xEA4E 0x2E0C      ORR      LR,LR,R12, LSL #+8
   \      0x190   0xF897 0xC03B      LDRB     R12,[R7, #+59]
   \      0x194   0xEA4C 0x0E0E      ORR      LR,R12,LR
   \      0x198   0xF8CD 0xE004      STR      LR,[SP, #+4]
    138              GET_UINT32_BE( W[15], data, 60 );
   \      0x19C   0xF897 0xC03C      LDRB     R12,[R7, #+60]
   \      0x1A0   0xF897 0xE03D      LDRB     LR,[R7, #+61]
   \      0x1A4   0xEA4F 0x4E0E      LSL      LR,LR,#+16
   \      0x1A8   0xEA4E 0x6E0C      ORR      LR,LR,R12, LSL #+24
   \      0x1AC   0xF897 0xC03E      LDRB     R12,[R7, #+62]
   \      0x1B0   0xEA4E 0x2E0C      ORR      LR,LR,R12, LSL #+8
   \      0x1B4   0xF897 0x703F      LDRB     R7,[R7, #+63]
   \      0x1B8   0xEA47 0x0E0E      ORR      LR,R7,LR
   \      0x1BC   0xF8CD 0xE024      STR      LR,[SP, #+36]
    139          
    140          #define S(x,n) ((x << n) | ((x & 0xFFFFFFFF) >> (32 - n)))
    141          
    142          #define R(t)                                            \
    143          (                                                       \
    144              temp = W[( t -  3 ) & 0x0F] ^ W[( t - 8 ) & 0x0F] ^ \
    145                     W[( t - 14 ) & 0x0F] ^ W[  t       & 0x0F],  \
    146              ( W[t & 0x0F] = S(temp,1) )                         \
    147          )
    148          
    149          #define P(a,b,c,d,e,x)                                  \
    150          {                                                       \
    151              e += S(a,5) + F(b,c,d) + K + x; b = S(b,30);        \
    152          }
    153          
    154              A = ctx->state[0];
   \      0x1C0   0x9F0F             LDR      R7,[SP, #+60]
   \      0x1C2   0xF8D7 0x8008      LDR      R8,[R7, #+8]
    155              B = ctx->state[1];
   \      0x1C6   0xF8D7 0xB00C      LDR      R11,[R7, #+12]
    156              C = ctx->state[2];
   \      0x1CA   0xF8D7 0x9010      LDR      R9,[R7, #+16]
    157              D = ctx->state[3];
   \      0x1CE   0xF8D7 0xE014      LDR      LR,[R7, #+20]
    158              E = ctx->state[4];
    159          
    160          #define F(x,y,z) (z ^ (x & (y ^ z)))
    161          #define K 0x5A827999
    162          
    163              P( A, B, C, D, E, W[0]  );
   \      0x1D2   0x....'....        LDR.W    R7,??DataTable2  ;; 0x5a827999
   \      0x1D6   0xF8DD 0xC03C      LDR      R12,[SP, #+60]
   \      0x1DA   0xF8DC 0xA018      LDR      R10,[R12, #+24]
   \      0x1DE   0xEB0A 0x6AF8      ADD      R10,R10,R8, ROR #+27
   \      0x1E2   0xEA8E 0x0C09      EOR      R12,LR,R9
   \      0x1E6   0xEA0C 0x0C0B      AND      R12,R12,R11
   \      0x1EA   0xEA8C 0x0C0E      EOR      R12,R12,LR
   \      0x1EE   0x44E2             ADD      R10,R12,R10
   \      0x1F0   0x4482             ADD      R10,R0,R10
   \      0x1F2   0x44BA             ADD      R10,R7,R10
   \      0x1F4   0xEA4F 0x0CBB      ROR      R12,R11,#+2
    164              P( E, A, B, C, D, W[1]  );
   \      0x1F8   0xF8CD 0xE000      STR      LR,[SP, #+0]
   \      0x1FC   0xEA89 0x0B0C      EOR      R11,R9,R12
   \      0x200   0xEA0B 0x0B08      AND      R11,R11,R8
   \      0x204   0xEA8B 0x0B09      EOR      R11,R11,R9
   \      0x208   0xEB0B 0x6BFA      ADD      R11,R11,R10, ROR #+27
   \      0x20C   0xF8DD 0xE020      LDR      LR,[SP, #+32]
   \      0x210   0x44DE             ADD      LR,LR,R11
   \      0x212   0x44BE             ADD      LR,R7,LR
   \      0x214   0xF8DD 0xB000      LDR      R11,[SP, #+0]
   \      0x218   0x44DE             ADD      LR,LR,R11
    165              P( D, E, A, B, C, W[2]  );
   \      0x21A   0xEA8C 0x0BB8      EOR      R11,R12,R8, ROR #+2
   \      0x21E   0xEA0B 0x0B0A      AND      R11,R11,R10
   \      0x222   0xEA8B 0x0B0C      EOR      R11,R11,R12
   \      0x226   0xEB0B 0x6BFE      ADD      R11,R11,LR, ROR #+27
   \      0x22A   0x448B             ADD      R11,R1,R11
   \      0x22C   0x44BB             ADD      R11,R7,R11
   \      0x22E   0x44D9             ADD      R9,R11,R9
   \      0x230   0xEA4F 0x0ABA      ROR      R10,R10,#+2
    166              P( C, D, E, A, B, W[3]  );
   \      0x234   0xEA8A 0x0BB8      EOR      R11,R10,R8, ROR #+2
   \      0x238   0xEA0B 0x0B0E      AND      R11,R11,LR
   \      0x23C   0xEA8B 0x0BB8      EOR      R11,R11,R8, ROR #+2
   \      0x240   0xEB0B 0x6BF9      ADD      R11,R11,R9, ROR #+27
   \      0x244   0x4493             ADD      R11,R2,R11
   \      0x246   0x44BB             ADD      R11,R7,R11
   \      0x248   0x44DC             ADD      R12,R11,R12
   \      0x24A   0xEA4F 0x0EBE      ROR      LR,LR,#+2
    167              P( B, C, D, E, A, W[4]  );
   \      0x24E   0xEA8A 0x0B0E      EOR      R11,R10,LR
   \      0x252   0xEA0B 0x0B09      AND      R11,R11,R9
   \      0x256   0xEA8B 0x0B0A      EOR      R11,R11,R10
   \      0x25A   0xEB0B 0x6BFC      ADD      R11,R11,R12, ROR #+27
   \      0x25E   0x449B             ADD      R11,R3,R11
   \      0x260   0x44BB             ADD      R11,R7,R11
   \      0x262   0xEB0B 0x08B8      ADD      R8,R11,R8, ROR #+2
    168              P( A, B, C, D, E, W[5]  );
   \      0x266   0xF8CD 0xA000      STR      R10,[SP, #+0]
   \      0x26A   0xEA8E 0x0BB9      EOR      R11,LR,R9, ROR #+2
   \      0x26E   0xEA0B 0x0B0C      AND      R11,R11,R12
   \      0x272   0xEA8B 0x0B0E      EOR      R11,R11,LR
   \      0x276   0xEB0B 0x6BF8      ADD      R11,R11,R8, ROR #+27
   \      0x27A   0xF8DD 0xA038      LDR      R10,[SP, #+56]
   \      0x27E   0x44DA             ADD      R10,R10,R11
   \      0x280   0x44BA             ADD      R10,R7,R10
   \      0x282   0xF8DD 0xB000      LDR      R11,[SP, #+0]
   \      0x286   0x44DA             ADD      R10,R10,R11
   \      0x288   0xEA4F 0x0CBC      ROR      R12,R12,#+2
    169              P( E, A, B, C, D, W[6]  );
   \      0x28C   0xF8CD 0xE000      STR      LR,[SP, #+0]
   \      0x290   0xEA8C 0x0BB9      EOR      R11,R12,R9, ROR #+2
   \      0x294   0xEA0B 0x0B08      AND      R11,R11,R8
   \      0x298   0xEA8B 0x0BB9      EOR      R11,R11,R9, ROR #+2
   \      0x29C   0xEB0B 0x6BFA      ADD      R11,R11,R10, ROR #+27
   \      0x2A0   0xF8DD 0xE018      LDR      LR,[SP, #+24]
   \      0x2A4   0x44DE             ADD      LR,LR,R11
   \      0x2A6   0x44BE             ADD      LR,R7,LR
   \      0x2A8   0xF8DD 0xB000      LDR      R11,[SP, #+0]
   \      0x2AC   0x44DE             ADD      LR,LR,R11
    170              P( D, E, A, B, C, W[7]  );
   \      0x2AE   0xEA8C 0x0BB8      EOR      R11,R12,R8, ROR #+2
   \      0x2B2   0xEA0B 0x0B0A      AND      R11,R11,R10
   \      0x2B6   0xEA8B 0x0B0C      EOR      R11,R11,R12
   \      0x2BA   0xEB0B 0x6BFE      ADD      R11,R11,LR, ROR #+27
   \      0x2BE   0x44A3             ADD      R11,R4,R11
   \      0x2C0   0x44BB             ADD      R11,R7,R11
   \      0x2C2   0xEB0B 0x09B9      ADD      R9,R11,R9, ROR #+2
   \      0x2C6   0xEA4F 0x0ABA      ROR      R10,R10,#+2
    171              P( C, D, E, A, B, W[8]  );
   \      0x2CA   0xEA8A 0x0BB8      EOR      R11,R10,R8, ROR #+2
   \      0x2CE   0xEA0B 0x0B0E      AND      R11,R11,LR
   \      0x2D2   0xEA8B 0x0BB8      EOR      R11,R11,R8, ROR #+2
   \      0x2D6   0xEB0B 0x6BF9      ADD      R11,R11,R9, ROR #+27
   \      0x2DA   0x44AB             ADD      R11,R5,R11
   \      0x2DC   0x44BB             ADD      R11,R7,R11
   \      0x2DE   0x44DC             ADD      R12,R11,R12
   \      0x2E0   0xEA4F 0x0EBE      ROR      LR,LR,#+2
    172              P( B, C, D, E, A, W[9]  );
   \      0x2E4   0xEA8A 0x0B0E      EOR      R11,R10,LR
   \      0x2E8   0xEA0B 0x0B09      AND      R11,R11,R9
   \      0x2EC   0xEA8B 0x0B0A      EOR      R11,R11,R10
   \      0x2F0   0xEB0B 0x6BFC      ADD      R11,R11,R12, ROR #+27
   \      0x2F4   0x44B3             ADD      R11,R6,R11
   \      0x2F6   0x44BB             ADD      R11,R7,R11
   \      0x2F8   0xEB0B 0x08B8      ADD      R8,R11,R8, ROR #+2
   \      0x2FC   0xEA4F 0x09B9      ROR      R9,R9,#+2
    173              P( A, B, C, D, E, W[10] );
   \      0x300   0xF8CD 0xA000      STR      R10,[SP, #+0]
   \      0x304   0xEA8E 0x0B09      EOR      R11,LR,R9
   \      0x308   0xEA0B 0x0B0C      AND      R11,R11,R12
   \      0x30C   0xEA8B 0x0B0E      EOR      R11,R11,LR
   \      0x310   0xEB0B 0x6BF8      ADD      R11,R11,R8, ROR #+27
   \      0x314   0xF8DD 0xA014      LDR      R10,[SP, #+20]
   \      0x318   0x44DA             ADD      R10,R10,R11
   \      0x31A   0x44BA             ADD      R10,R7,R10
   \      0x31C   0xF8DD 0xB000      LDR      R11,[SP, #+0]
   \      0x320   0x44DA             ADD      R10,R10,R11
   \      0x322   0xEA4F 0x0CBC      ROR      R12,R12,#+2
    174              P( E, A, B, C, D, W[11] );
   \      0x326   0xF8CD 0xE000      STR      LR,[SP, #+0]
   \      0x32A   0xEA89 0x0B0C      EOR      R11,R9,R12
   \      0x32E   0xEA0B 0x0B08      AND      R11,R11,R8
   \      0x332   0xEA8B 0x0B09      EOR      R11,R11,R9
   \      0x336   0xEB0B 0x6BFA      ADD      R11,R11,R10, ROR #+27
   \      0x33A   0xF8DD 0xE010      LDR      LR,[SP, #+16]
   \      0x33E   0x44DE             ADD      LR,LR,R11
   \      0x340   0x44BE             ADD      LR,R7,LR
   \      0x342   0xF8DD 0xB000      LDR      R11,[SP, #+0]
   \      0x346   0x44DE             ADD      LR,LR,R11
   \      0x348   0xEA4F 0x08B8      ROR      R8,R8,#+2
    175              P( D, E, A, B, C, W[12] );
   \      0x34C   0xF8CD 0x9000      STR      R9,[SP, #+0]
   \      0x350   0xEA8C 0x0B08      EOR      R11,R12,R8
   \      0x354   0xEA0B 0x0B0A      AND      R11,R11,R10
   \      0x358   0xEA8B 0x0B0C      EOR      R11,R11,R12
   \      0x35C   0xEB0B 0x6BFE      ADD      R11,R11,LR, ROR #+27
   \      0x360   0xF8DD 0x900C      LDR      R9,[SP, #+12]
   \      0x364   0x44D9             ADD      R9,R9,R11
   \      0x366   0x44B9             ADD      R9,R7,R9
   \      0x368   0xF8DD 0xB000      LDR      R11,[SP, #+0]
   \      0x36C   0x44D9             ADD      R9,R9,R11
   \      0x36E   0xEA4F 0x0ABA      ROR      R10,R10,#+2
    176              P( C, D, E, A, B, W[13] );
   \      0x372   0xF8CD 0xC000      STR      R12,[SP, #+0]
   \      0x376   0xEA88 0x0B0A      EOR      R11,R8,R10
   \      0x37A   0xEA0B 0x0B0E      AND      R11,R11,LR
   \      0x37E   0xEA8B 0x0B08      EOR      R11,R11,R8
   \      0x382   0xEB0B 0x6BF9      ADD      R11,R11,R9, ROR #+27
   \      0x386   0xF8DD 0xC008      LDR      R12,[SP, #+8]
   \      0x38A   0x44DC             ADD      R12,R12,R11
   \      0x38C   0x44BC             ADD      R12,R7,R12
   \      0x38E   0xF8DD 0xB000      LDR      R11,[SP, #+0]
   \      0x392   0x44DC             ADD      R12,R12,R11
    177              P( B, C, D, E, A, W[14] );
   \      0x394   0xF8CD 0x8000      STR      R8,[SP, #+0]
   \      0x398   0xEA8A 0x0BBE      EOR      R11,R10,LR, ROR #+2
   \      0x39C   0xEA0B 0x0B09      AND      R11,R11,R9
   \      0x3A0   0xEA8B 0x0B0A      EOR      R11,R11,R10
   \      0x3A4   0xEB0B 0x6BFC      ADD      R11,R11,R12, ROR #+27
   \      0x3A8   0xF8DD 0x8004      LDR      R8,[SP, #+4]
   \      0x3AC   0x44D8             ADD      R8,R8,R11
   \      0x3AE   0x44B8             ADD      R8,R7,R8
   \      0x3B0   0xF8DD 0xB000      LDR      R11,[SP, #+0]
   \      0x3B4   0x44D8             ADD      R8,R8,R11
   \      0x3B6   0xEA4F 0x09B9      ROR      R9,R9,#+2
    178              P( A, B, C, D, E, W[15] );
   \      0x3BA   0xF8CD 0xA000      STR      R10,[SP, #+0]
   \      0x3BE   0xEA89 0x0BBE      EOR      R11,R9,LR, ROR #+2
   \      0x3C2   0xEA0B 0x0B0C      AND      R11,R11,R12
   \      0x3C6   0xEA8B 0x0BBE      EOR      R11,R11,LR, ROR #+2
   \      0x3CA   0xEB0B 0x6BF8      ADD      R11,R11,R8, ROR #+27
   \      0x3CE   0xF8DD 0xA024      LDR      R10,[SP, #+36]
   \      0x3D2   0x44DA             ADD      R10,R10,R11
   \      0x3D4   0x44BA             ADD      R10,R7,R10
   \      0x3D6   0xF8DD 0xB000      LDR      R11,[SP, #+0]
   \      0x3DA   0x44DA             ADD      R10,R10,R11
   \      0x3DC   0xEA4F 0x0BBC      ROR      R11,R12,#+2
    179              P( E, A, B, C, D, R(16) );
   \      0x3E0   0xF8DD 0xC008      LDR      R12,[SP, #+8]
   \      0x3E4   0xEA85 0x0C0C      EOR      R12,R5,R12
   \      0x3E8   0xEA81 0x0C0C      EOR      R12,R1,R12
   \      0x3EC   0xEA80 0x000C      EOR      R0,R0,R12
   \      0x3F0   0xEA4F 0x70F0      ROR      R0,R0,#+31
   \      0x3F4   0x900C             STR      R0,[SP, #+48]
   \      0x3F6   0xEA89 0x0C0B      EOR      R12,R9,R11
   \      0x3FA   0xEA0C 0x0C08      AND      R12,R12,R8
   \      0x3FE   0xEA8C 0x0C09      EOR      R12,R12,R9
   \      0x402   0xEB0C 0x6CFA      ADD      R12,R12,R10, ROR #+27
   \      0x406   0x4484             ADD      R12,R0,R12
   \      0x408   0x44BC             ADD      R12,R7,R12
   \      0x40A   0xEB0C 0x0EBE      ADD      LR,R12,LR, ROR #+2
   \      0x40E   0xEA4F 0x00B8      ROR      R0,R8,#+2
    180              P( D, E, A, B, C, R(17) );
   \      0x412   0xF8DD 0x8004      LDR      R8,[SP, #+4]
   \      0x416   0xEA86 0x0808      EOR      R8,R6,R8
   \      0x41A   0xEA82 0x0808      EOR      R8,R2,R8
   \      0x41E   0xF8DD 0xC020      LDR      R12,[SP, #+32]
   \      0x422   0xEA8C 0x0808      EOR      R8,R12,R8
   \      0x426   0xEA4F 0x78F8      ROR      R8,R8,#+31
   \      0x42A   0xF8CD 0x8020      STR      R8,[SP, #+32]
   \      0x42E   0xEA8B 0x0800      EOR      R8,R11,R0
   \      0x432   0xEA08 0x080A      AND      R8,R8,R10
   \      0x436   0xEA88 0x080B      EOR      R8,R8,R11
   \      0x43A   0xEB08 0x68FE      ADD      R8,R8,LR, ROR #+27
   \      0x43E   0xF8DD 0xC020      LDR      R12,[SP, #+32]
   \      0x442   0x44E0             ADD      R8,R12,R8
   \      0x444   0x44B8             ADD      R8,R7,R8
   \      0x446   0x44C1             ADD      R9,R8,R9
   \      0x448   0xEA4F 0x0CBA      ROR      R12,R10,#+2
    181              P( C, D, E, A, B, R(18) );
   \      0x44C   0xF8DD 0xA024      LDR      R10,[SP, #+36]
   \      0x450   0xF8DD 0x8014      LDR      R8,[SP, #+20]
   \      0x454   0xEA88 0x0A0A      EOR      R10,R8,R10
   \      0x458   0xEA83 0x0A0A      EOR      R10,R3,R10
   \      0x45C   0xEA81 0x010A      EOR      R1,R1,R10
   \      0x460   0xEA4F 0x78F1      ROR      R8,R1,#+31
   \      0x464   0xF8CD 0x8000      STR      R8,[SP, #+0]
   \      0x468   0xEA80 0x080C      EOR      R8,R0,R12
   \      0x46C   0xEA08 0x080E      AND      R8,R8,LR
   \      0x470   0xEA88 0x0800      EOR      R8,R8,R0
   \      0x474   0xEB08 0x68F9      ADD      R8,R8,R9, ROR #+27
   \      0x478   0x9900             LDR      R1,[SP, #+0]
   \      0x47A   0x4488             ADD      R8,R1,R8
   \      0x47C   0x44B8             ADD      R8,R7,R8
   \      0x47E   0x44C3             ADD      R11,R8,R11
   \      0x480   0xEA4F 0x01BE      ROR      R1,LR,#+2
    182              P( B, C, D, E, A, R(19) );
   \      0x484   0xF8DD 0x8030      LDR      R8,[SP, #+48]
   \      0x488   0xF8DD 0xE010      LDR      LR,[SP, #+16]
   \      0x48C   0xEA8E 0x0808      EOR      R8,LR,R8
   \      0x490   0xF8DD 0xE038      LDR      LR,[SP, #+56]
   \      0x494   0xEA8E 0x0808      EOR      R8,LR,R8
   \      0x498   0xEA82 0x0208      EOR      R2,R2,R8
   \      0x49C   0xEA4F 0x7EF2      ROR      LR,R2,#+31
   \      0x4A0   0xF8CD 0xE01C      STR      LR,[SP, #+28]
   \      0x4A4   0xEA8C 0x0E01      EOR      LR,R12,R1
   \      0x4A8   0xEA0E 0x0E09      AND      LR,LR,R9
   \      0x4AC   0xEA8E 0x0E0C      EOR      LR,LR,R12
   \      0x4B0   0xEB0E 0x6EFB      ADD      LR,LR,R11, ROR #+27
   \      0x4B4   0x9A07             LDR      R2,[SP, #+28]
   \      0x4B6   0x4496             ADD      LR,R2,LR
   \      0x4B8   0x4477             ADD      R7,R7,LR
   \      0x4BA   0x1838             ADDS     R0,R7,R0
   \      0x4BC   0xEA4F 0x02B9      ROR      R2,R9,#+2
    183          
    184          #undef K
    185          #undef F
    186          
    187          #define F(x,y,z) (x ^ y ^ z)
    188          #define K 0x6ED9EBA1
    189          
    190              P( A, B, C, D, E, R(20) );
   \      0x4C0   0xF8DD 0xE020      LDR      LR,[SP, #+32]
   \      0x4C4   0x9F03             LDR      R7,[SP, #+12]
   \      0x4C6   0xEA87 0x0E0E      EOR      LR,R7,LR
   \      0x4CA   0x9F06             LDR      R7,[SP, #+24]
   \      0x4CC   0xEA87 0x0E0E      EOR      LR,R7,LR
   \      0x4D0   0xEA83 0x030E      EOR      R3,R3,LR
   \      0x4D4   0xEA4F 0x77F3      ROR      R7,R3,#+31
   \      0x4D8   0x970D             STR      R7,[SP, #+52]
   \      0x4DA   0x....'....        LDR.W    R7,??DataTable3  ;; 0x6ed9eba1
   \      0x4DE   0xEA82 0x0E0B      EOR      LR,R2,R11
   \      0x4E2   0xEA81 0x0E0E      EOR      LR,R1,LR
   \      0x4E6   0xEB0E 0x6EF0      ADD      LR,LR,R0, ROR #+27
   \      0x4EA   0x9B0D             LDR      R3,[SP, #+52]
   \      0x4EC   0x449E             ADD      LR,R3,LR
   \      0x4EE   0x44BE             ADD      LR,R7,LR
   \      0x4F0   0x44F4             ADD      R12,LR,R12
    191              P( E, A, B, C, D, R(21) );
   \      0x4F2   0xF8DD 0x8000      LDR      R8,[SP, #+0]
   \      0x4F6   0xF8DD 0xE008      LDR      LR,[SP, #+8]
   \      0x4FA   0xEA8E 0x0808      EOR      R8,LR,R8
   \      0x4FE   0xEA84 0x0808      EOR      R8,R4,R8
   \      0x502   0xF8DD 0xE038      LDR      LR,[SP, #+56]
   \      0x506   0xEA8E 0x0808      EOR      R8,LR,R8
   \      0x50A   0xEA4F 0x7EF8      ROR      LR,R8,#+31
   \      0x50E   0xEA80 0x08BB      EOR      R8,R0,R11, ROR #+2
   \      0x512   0xEA82 0x0808      EOR      R8,R2,R8
   \      0x516   0xEB08 0x68FC      ADD      R8,R8,R12, ROR #+27
   \      0x51A   0x44F0             ADD      R8,LR,R8
   \      0x51C   0x44B8             ADD      R8,R7,R8
   \      0x51E   0x4441             ADD      R1,R8,R1
    192              P( D, E, A, B, C, R(22) );
   \      0x520   0xF8DD 0x901C      LDR      R9,[SP, #+28]
   \      0x524   0xF8DD 0x8004      LDR      R8,[SP, #+4]
   \      0x528   0xEA88 0x0909      EOR      R9,R8,R9
   \      0x52C   0xEA85 0x0909      EOR      R9,R5,R9
   \      0x530   0xF8DD 0x8018      LDR      R8,[SP, #+24]
   \      0x534   0xEA88 0x0909      EOR      R9,R8,R9
   \      0x538   0xEA4F 0x78F9      ROR      R8,R9,#+31
   \      0x53C   0xEA8C 0x09B0      EOR      R9,R12,R0, ROR #+2
   \      0x540   0xEA89 0x09BB      EOR      R9,R9,R11, ROR #+2
   \      0x544   0xEB09 0x69F1      ADD      R9,R9,R1, ROR #+27
   \      0x548   0x44C1             ADD      R9,R8,R9
   \      0x54A   0x44B9             ADD      R9,R7,R9
   \      0x54C   0x444A             ADD      R2,R9,R2
    193              P( C, D, E, A, B, R(23) );
   \      0x54E   0xF8DD 0xA034      LDR      R10,[SP, #+52]
   \      0x552   0xF8DD 0x9024      LDR      R9,[SP, #+36]
   \      0x556   0xEA89 0x0A0A      EOR      R10,R9,R10
   \      0x55A   0xEA86 0x0A0A      EOR      R10,R6,R10
   \      0x55E   0xEA84 0x040A      EOR      R4,R4,R10
   \      0x562   0xEA81 0x09BC      EOR      R9,R1,R12, ROR #+2
   \      0x566   0xEA89 0x09B0      EOR      R9,R9,R0, ROR #+2
   \      0x56A   0xEB09 0x69F2      ADD      R9,R9,R2, ROR #+27
   \      0x56E   0xEB09 0x79F4      ADD      R9,R9,R4, ROR #+31
   \      0x572   0x44B9             ADD      R9,R7,R9
   \      0x574   0xEB09 0x03BB      ADD      R3,R9,R11, ROR #+2
    194              P( B, C, D, E, A, R(24) );
   \      0x578   0xF8DD 0xA030      LDR      R10,[SP, #+48]
   \      0x57C   0xEA8A 0x0A0E      EOR      R10,R10,LR
   \      0x580   0xF8DD 0x9014      LDR      R9,[SP, #+20]
   \      0x584   0xEA89 0x0A0A      EOR      R10,R9,R10
   \      0x588   0xEA85 0x050A      EOR      R5,R5,R10
   \      0x58C   0xEA82 0x09B1      EOR      R9,R2,R1, ROR #+2
   \      0x590   0xEA89 0x09BC      EOR      R9,R9,R12, ROR #+2
   \      0x594   0xEB09 0x69F3      ADD      R9,R9,R3, ROR #+27
   \      0x598   0xEB09 0x79F5      ADD      R9,R9,R5, ROR #+31
   \      0x59C   0x44B9             ADD      R9,R7,R9
   \      0x59E   0xEB09 0x00B0      ADD      R0,R9,R0, ROR #+2
    195              P( A, B, C, D, E, R(25) );
   \      0x5A2   0xF8DD 0xA020      LDR      R10,[SP, #+32]
   \      0x5A6   0xEA8A 0x0A08      EOR      R10,R10,R8
   \      0x5AA   0xF8DD 0x9010      LDR      R9,[SP, #+16]
   \      0x5AE   0xEA89 0x0A0A      EOR      R10,R9,R10
   \      0x5B2   0xEA86 0x060A      EOR      R6,R6,R10
   \      0x5B6   0xEA83 0x09B2      EOR      R9,R3,R2, ROR #+2
   \      0x5BA   0xEA89 0x09B1      EOR      R9,R9,R1, ROR #+2
   \      0x5BE   0xEB09 0x69F0      ADD      R9,R9,R0, ROR #+27
   \      0x5C2   0xEB09 0x79F6      ADD      R9,R9,R6, ROR #+31
   \      0x5C6   0x44B9             ADD      R9,R7,R9
   \      0x5C8   0xEB09 0x0CBC      ADD      R12,R9,R12, ROR #+2
    196              P( E, A, B, C, D, R(26) );
   \      0x5CC   0xF8DD 0xA000      LDR      R10,[SP, #+0]
   \      0x5D0   0xEA8A 0x7AF4      EOR      R10,R10,R4, ROR #+31
   \      0x5D4   0xF8DD 0x900C      LDR      R9,[SP, #+12]
   \      0x5D8   0xEA89 0x0A0A      EOR      R10,R9,R10
   \      0x5DC   0xF8DD 0x9014      LDR      R9,[SP, #+20]
   \      0x5E0   0xEA89 0x0A0A      EOR      R10,R9,R10
   \      0x5E4   0xEA4F 0x7AFA      ROR      R10,R10,#+31
   \      0x5E8   0xF8CD 0xA014      STR      R10,[SP, #+20]
   \      0x5EC   0xEA80 0x0AB3      EOR      R10,R0,R3, ROR #+2
   \      0x5F0   0xEA8A 0x0AB2      EOR      R10,R10,R2, ROR #+2
   \      0x5F4   0xEB0A 0x6AFC      ADD      R10,R10,R12, ROR #+27
   \      0x5F8   0xF8DD 0x9014      LDR      R9,[SP, #+20]
   \      0x5FC   0x44CA             ADD      R10,R9,R10
   \      0x5FE   0x44BA             ADD      R10,R7,R10
   \      0x600   0xEB0A 0x01B1      ADD      R1,R10,R1, ROR #+2
    197              P( D, E, A, B, C, R(27) );
   \      0x604   0xF8DD 0xA01C      LDR      R10,[SP, #+28]
   \      0x608   0xEA8A 0x7AF5      EOR      R10,R10,R5, ROR #+31
   \      0x60C   0xF8DD 0x9008      LDR      R9,[SP, #+8]
   \      0x610   0xEA89 0x0A0A      EOR      R10,R9,R10
   \      0x614   0xF8DD 0x9010      LDR      R9,[SP, #+16]
   \      0x618   0xEA89 0x0A0A      EOR      R10,R9,R10
   \      0x61C   0xEA4F 0x7AFA      ROR      R10,R10,#+31
   \      0x620   0xF8CD 0xA010      STR      R10,[SP, #+16]
   \      0x624   0xEA8C 0x0AB0      EOR      R10,R12,R0, ROR #+2
   \      0x628   0xEA8A 0x0AB3      EOR      R10,R10,R3, ROR #+2
   \      0x62C   0xEB0A 0x6AF1      ADD      R10,R10,R1, ROR #+27
   \      0x630   0xF8DD 0x9010      LDR      R9,[SP, #+16]
   \      0x634   0x44CA             ADD      R10,R9,R10
   \      0x636   0x44BA             ADD      R10,R7,R10
   \      0x638   0xEB0A 0x02B2      ADD      R2,R10,R2, ROR #+2
    198              P( C, D, E, A, B, R(28) );
   \      0x63C   0xF8DD 0xA034      LDR      R10,[SP, #+52]
   \      0x640   0xEA8A 0x7AF6      EOR      R10,R10,R6, ROR #+31
   \      0x644   0xF8DD 0x9004      LDR      R9,[SP, #+4]
   \      0x648   0xEA89 0x0A0A      EOR      R10,R9,R10
   \      0x64C   0xF8DD 0x900C      LDR      R9,[SP, #+12]
   \      0x650   0xEA89 0x0A0A      EOR      R10,R9,R10
   \      0x654   0xEA4F 0x7AFA      ROR      R10,R10,#+31
   \      0x658   0xF8CD 0xA00C      STR      R10,[SP, #+12]
   \      0x65C   0xEA81 0x0ABC      EOR      R10,R1,R12, ROR #+2
   \      0x660   0xEA8A 0x0AB0      EOR      R10,R10,R0, ROR #+2
   \      0x664   0xEB0A 0x6AF2      ADD      R10,R10,R2, ROR #+27
   \      0x668   0xF8DD 0x900C      LDR      R9,[SP, #+12]
   \      0x66C   0x44CA             ADD      R10,R9,R10
   \      0x66E   0x44BA             ADD      R10,R7,R10
   \      0x670   0xEB0A 0x03B3      ADD      R3,R10,R3, ROR #+2
    199              P( B, C, D, E, A, R(29) );
   \      0x674   0xF8DD 0xA014      LDR      R10,[SP, #+20]
   \      0x678   0xEA8E 0x0A0A      EOR      R10,LR,R10
   \      0x67C   0xF8DD 0x9024      LDR      R9,[SP, #+36]
   \      0x680   0xEA89 0x0A0A      EOR      R10,R9,R10
   \      0x684   0xF8DD 0x9008      LDR      R9,[SP, #+8]
   \      0x688   0xEA89 0x0A0A      EOR      R10,R9,R10
   \      0x68C   0xEA4F 0x7AFA      ROR      R10,R10,#+31
   \      0x690   0xF8CD 0xA008      STR      R10,[SP, #+8]
   \      0x694   0xEA82 0x0AB1      EOR      R10,R2,R1, ROR #+2
   \      0x698   0xEA8A 0x0ABC      EOR      R10,R10,R12, ROR #+2
   \      0x69C   0xEB0A 0x6AF3      ADD      R10,R10,R3, ROR #+27
   \      0x6A0   0xF8DD 0x9008      LDR      R9,[SP, #+8]
   \      0x6A4   0x44CA             ADD      R10,R9,R10
   \      0x6A6   0x44BA             ADD      R10,R7,R10
   \      0x6A8   0xEB0A 0x00B0      ADD      R0,R10,R0, ROR #+2
    200              P( A, B, C, D, E, R(30) );
   \      0x6AC   0xF8DD 0xA010      LDR      R10,[SP, #+16]
   \      0x6B0   0xEA88 0x0A0A      EOR      R10,R8,R10
   \      0x6B4   0xF8DD 0x9030      LDR      R9,[SP, #+48]
   \      0x6B8   0xEA89 0x0A0A      EOR      R10,R9,R10
   \      0x6BC   0xF8DD 0x9004      LDR      R9,[SP, #+4]
   \      0x6C0   0xEA89 0x0A0A      EOR      R10,R9,R10
   \      0x6C4   0xEA4F 0x7AFA      ROR      R10,R10,#+31
   \      0x6C8   0xF8CD 0xA004      STR      R10,[SP, #+4]
   \      0x6CC   0xEA83 0x0AB2      EOR      R10,R3,R2, ROR #+2
   \      0x6D0   0xEA8A 0x0AB1      EOR      R10,R10,R1, ROR #+2
   \      0x6D4   0xEB0A 0x6AF0      ADD      R10,R10,R0, ROR #+27
   \      0x6D8   0xF8DD 0x9004      LDR      R9,[SP, #+4]
   \      0x6DC   0x44CA             ADD      R10,R9,R10
   \      0x6DE   0x44BA             ADD      R10,R7,R10
   \      0x6E0   0xEB0A 0x0CBC      ADD      R12,R10,R12, ROR #+2
    201              P( E, A, B, C, D, R(31) );
   \      0x6E4   0xF8DD 0xA00C      LDR      R10,[SP, #+12]
   \      0x6E8   0xEA8A 0x7AF4      EOR      R10,R10,R4, ROR #+31
   \      0x6EC   0xF8DD 0x9020      LDR      R9,[SP, #+32]
   \      0x6F0   0xEA89 0x0A0A      EOR      R10,R9,R10
   \      0x6F4   0xF8DD 0x9024      LDR      R9,[SP, #+36]
   \      0x6F8   0xEA89 0x0A0A      EOR      R10,R9,R10
   \      0x6FC   0xEA4F 0x79FA      ROR      R9,R10,#+31
   \      0x700   0xEA80 0x0AB3      EOR      R10,R0,R3, ROR #+2
   \      0x704   0xEA8A 0x0AB2      EOR      R10,R10,R2, ROR #+2
   \      0x708   0xEB0A 0x6AFC      ADD      R10,R10,R12, ROR #+27
   \      0x70C   0x44CA             ADD      R10,R9,R10
   \      0x70E   0x44BA             ADD      R10,R7,R10
   \      0x710   0xEB0A 0x01B1      ADD      R1,R10,R1, ROR #+2
   \      0x714   0xEA4F 0x0AB0      ROR      R10,R0,#+2
    202              P( D, E, A, B, C, R(32) );
   \      0x718   0xF8DD 0xB008      LDR      R11,[SP, #+8]
   \      0x71C   0xEA8B 0x7BF5      EOR      R11,R11,R5, ROR #+31
   \      0x720   0x9800             LDR      R0,[SP, #+0]
   \      0x722   0xEA80 0x0B0B      EOR      R11,R0,R11
   \      0x726   0x980C             LDR      R0,[SP, #+48]
   \      0x728   0xEA80 0x0B0B      EOR      R11,R0,R11
   \      0x72C   0xEA4F 0x7BFB      ROR      R11,R11,#+31
   \      0x730   0xF8CD 0xB030      STR      R11,[SP, #+48]
   \      0x734   0xEA8A 0x0B0C      EOR      R11,R10,R12
   \      0x738   0xEA8B 0x0BB3      EOR      R11,R11,R3, ROR #+2
   \      0x73C   0xEB0B 0x6BF1      ADD      R11,R11,R1, ROR #+27
   \      0x740   0x980C             LDR      R0,[SP, #+48]
   \      0x742   0x4483             ADD      R11,R0,R11
   \      0x744   0x44BB             ADD      R11,R7,R11
   \      0x746   0xEB0B 0x02B2      ADD      R2,R11,R2, ROR #+2
   \      0x74A   0xEA4F 0x00BC      ROR      R0,R12,#+2
    203              P( C, D, E, A, B, R(33) );
   \      0x74E   0xF8DD 0xB004      LDR      R11,[SP, #+4]
   \      0x752   0xEA8B 0x7BF6      EOR      R11,R11,R6, ROR #+31
   \      0x756   0xF8DD 0xC01C      LDR      R12,[SP, #+28]
   \      0x75A   0xEA8C 0x0B0B      EOR      R11,R12,R11
   \      0x75E   0xF8DD 0xC020      LDR      R12,[SP, #+32]
   \      0x762   0xEA8C 0x0B0B      EOR      R11,R12,R11
   \      0x766   0xEA4F 0x7BFB      ROR      R11,R11,#+31
   \      0x76A   0xF8CD 0xB020      STR      R11,[SP, #+32]
   \      0x76E   0xEA80 0x0B01      EOR      R11,R0,R1
   \      0x772   0xEA8A 0x0B0B      EOR      R11,R10,R11
   \      0x776   0xEB0B 0x6BF2      ADD      R11,R11,R2, ROR #+27
   \      0x77A   0xF8DD 0xC020      LDR      R12,[SP, #+32]
   \      0x77E   0x44E3             ADD      R11,R12,R11
   \      0x780   0x44BB             ADD      R11,R7,R11
   \      0x782   0xEB0B 0x03B3      ADD      R3,R11,R3, ROR #+2
    204              P( B, C, D, E, A, R(34) );
   \      0x786   0xF8DD 0xB014      LDR      R11,[SP, #+20]
   \      0x78A   0xEA8B 0x0B09      EOR      R11,R11,R9
   \      0x78E   0xF8DD 0xC034      LDR      R12,[SP, #+52]
   \      0x792   0xEA8C 0x0B0B      EOR      R11,R12,R11
   \      0x796   0xF8DD 0xC000      LDR      R12,[SP, #+0]
   \      0x79A   0xEA8C 0x0B0B      EOR      R11,R12,R11
   \      0x79E   0xEA4F 0x7BFB      ROR      R11,R11,#+31
   \      0x7A2   0xF8CD 0xB000      STR      R11,[SP, #+0]
   \      0x7A6   0xEA82 0x0BB1      EOR      R11,R2,R1, ROR #+2
   \      0x7AA   0xEA80 0x0B0B      EOR      R11,R0,R11
   \      0x7AE   0xEB0B 0x6BF3      ADD      R11,R11,R3, ROR #+27
   \      0x7B2   0xF8DD 0xC000      LDR      R12,[SP, #+0]
   \      0x7B6   0x44E3             ADD      R11,R12,R11
   \      0x7B8   0x44BB             ADD      R11,R7,R11
   \      0x7BA   0x44DA             ADD      R10,R11,R10
    205              P( A, B, C, D, E, R(35) );
   \      0x7BC   0xF8DD 0xB030      LDR      R11,[SP, #+48]
   \      0x7C0   0xF8DD 0xC010      LDR      R12,[SP, #+16]
   \      0x7C4   0xEA8C 0x0B0B      EOR      R11,R12,R11
   \      0x7C8   0xEA8E 0x0B0B      EOR      R11,LR,R11
   \      0x7CC   0xF8DD 0xC01C      LDR      R12,[SP, #+28]
   \      0x7D0   0xEA8C 0x0B0B      EOR      R11,R12,R11
   \      0x7D4   0xEA4F 0x7BFB      ROR      R11,R11,#+31
   \      0x7D8   0xF8CD 0xB01C      STR      R11,[SP, #+28]
   \      0x7DC   0xEA83 0x0BB2      EOR      R11,R3,R2, ROR #+2
   \      0x7E0   0xEA8B 0x0BB1      EOR      R11,R11,R1, ROR #+2
   \      0x7E4   0xEB0B 0x6BFA      ADD      R11,R11,R10, ROR #+27
   \      0x7E8   0xF8DD 0xC01C      LDR      R12,[SP, #+28]
   \      0x7EC   0x44E3             ADD      R11,R12,R11
   \      0x7EE   0x44BB             ADD      R11,R7,R11
   \      0x7F0   0x4458             ADD      R0,R11,R0
   \      0x7F2   0xEA4F 0x03B3      ROR      R3,R3,#+2
   \      0x7F6   0x9309             STR      R3,[SP, #+36]
    206              P( E, A, B, C, D, R(36) );
   \      0x7F8   0xF8DD 0xC020      LDR      R12,[SP, #+32]
   \      0x7FC   0x9B03             LDR      R3,[SP, #+12]
   \      0x7FE   0xEA83 0x0C0C      EOR      R12,R3,R12
   \      0x802   0xEA88 0x0C0C      EOR      R12,R8,R12
   \      0x806   0x9B0D             LDR      R3,[SP, #+52]
   \      0x808   0xEA83 0x0C0C      EOR      R12,R3,R12
   \      0x80C   0xEA4F 0x73FC      ROR      R3,R12,#+31
   \      0x810   0xF8DD 0xC024      LDR      R12,[SP, #+36]
   \      0x814   0xEA8C 0x0C0A      EOR      R12,R12,R10
   \      0x818   0xEA8C 0x0CB2      EOR      R12,R12,R2, ROR #+2
   \      0x81C   0xEB0C 0x6CF0      ADD      R12,R12,R0, ROR #+27
   \      0x820   0x449C             ADD      R12,R3,R12
   \      0x822   0x44BC             ADD      R12,R7,R12
   \      0x824   0xEB0C 0x01B1      ADD      R1,R12,R1, ROR #+2
   \      0x828   0xEA4F 0x0CBA      ROR      R12,R10,#+2
    207              P( D, E, A, B, C, R(37) );
   \      0x82C   0xF8DD 0xB000      LDR      R11,[SP, #+0]
   \      0x830   0xF8DD 0xA008      LDR      R10,[SP, #+8]
   \      0x834   0xEA8A 0x0B0B      EOR      R11,R10,R11
   \      0x838   0xEA8B 0x7BF4      EOR      R11,R11,R4, ROR #+31
   \      0x83C   0xEA8E 0x0E0B      EOR      LR,LR,R11
   \      0x840   0xEA8C 0x0B00      EOR      R11,R12,R0
   \      0x844   0xF8DD 0xA024      LDR      R10,[SP, #+36]
   \      0x848   0xEA8A 0x0B0B      EOR      R11,R10,R11
   \      0x84C   0xEB0B 0x6BF1      ADD      R11,R11,R1, ROR #+27
   \      0x850   0xEB0B 0x7BFE      ADD      R11,R11,LR, ROR #+31
   \      0x854   0x44BB             ADD      R11,R7,R11
   \      0x856   0xEB0B 0x02B2      ADD      R2,R11,R2, ROR #+2
    208              P( C, D, E, A, B, R(38) );
   \      0x85A   0xF8DD 0xB01C      LDR      R11,[SP, #+28]
   \      0x85E   0xF8DD 0xA004      LDR      R10,[SP, #+4]
   \      0x862   0xEA8A 0x0B0B      EOR      R11,R10,R11
   \      0x866   0xEA8B 0x7BF5      EOR      R11,R11,R5, ROR #+31
   \      0x86A   0xEA88 0x080B      EOR      R8,R8,R11
   \      0x86E   0xEA4F 0x7AF8      ROR      R10,R8,#+31
   \      0x872   0xF8CD 0xA018      STR      R10,[SP, #+24]
   \      0x876   0xF8DD 0x8024      LDR      R8,[SP, #+36]
   \      0x87A   0xEA81 0x0BB0      EOR      R11,R1,R0, ROR #+2
   \      0x87E   0xEA8C 0x0B0B      EOR      R11,R12,R11
   \      0x882   0xEB0B 0x6BF2      ADD      R11,R11,R2, ROR #+27
   \      0x886   0x44D3             ADD      R11,R10,R11
   \      0x888   0x44BB             ADD      R11,R7,R11
   \      0x88A   0x44D8             ADD      R8,R11,R8
    209              P( B, C, D, E, A, R(39) );
   \      0x88C   0xEA89 0x0A03      EOR      R10,R9,R3
   \      0x890   0xEA8A 0x7AF6      EOR      R10,R10,R6, ROR #+31
   \      0x894   0xEA8A 0x74F4      EOR      R4,R10,R4, ROR #+31
   \      0x898   0xEA4F 0x7AF4      ROR      R10,R4,#+31
   \      0x89C   0xF8CD 0xA02C      STR      R10,[SP, #+44]
   \      0x8A0   0xEA82 0x0AB1      EOR      R10,R2,R1, ROR #+2
   \      0x8A4   0xEA8A 0x0AB0      EOR      R10,R10,R0, ROR #+2
   \      0x8A8   0xEB0A 0x6AF8      ADD      R10,R10,R8, ROR #+27
   \      0x8AC   0x9C0B             LDR      R4,[SP, #+44]
   \      0x8AE   0x44A2             ADD      R10,R4,R10
   \      0x8B0   0x4457             ADD      R7,R7,R10
   \      0x8B2   0x44BC             ADD      R12,R7,R12
    210          
    211          #undef K
    212          #undef F
    213          
    214          #define F(x,y,z) ((x & y) | (z & (x | y)))
    215          #define K 0x8F1BBCDC
    216          
    217              P( A, B, C, D, E, R(40) );
   \      0x8B4   0x9F0C             LDR      R7,[SP, #+48]
   \      0x8B6   0xEA87 0x77FE      EOR      R7,R7,LR, ROR #+31
   \      0x8BA   0x9C05             LDR      R4,[SP, #+20]
   \      0x8BC   0x4067             EORS     R7,R4,R7
   \      0x8BE   0xEA97 0x75F5      EORS     R5,R7,R5, ROR #+31
   \      0x8C2   0xEA4F 0x75F5      ROR      R5,R5,#+31
   \      0x8C6   0x950A             STR      R5,[SP, #+40]
   \      0x8C8   0x....'....        LDR.W    R4,??DataTable3_2  ;; 0x8f1bbcdc
   \      0x8CC   0xEA08 0x07B2      AND      R7,R8,R2, ROR #+2
   \      0x8D0   0xEA48 0x05B2      ORR      R5,R8,R2, ROR #+2
   \      0x8D4   0xEA15 0x05B1      ANDS     R5,R5,R1, ROR #+2
   \      0x8D8   0x432F             ORRS     R7,R5,R7
   \      0x8DA   0xEB07 0x67FC      ADD      R7,R7,R12, ROR #+27
   \      0x8DE   0x9D0A             LDR      R5,[SP, #+40]
   \      0x8E0   0x19EF             ADDS     R7,R5,R7
   \      0x8E2   0x19E7             ADDS     R7,R4,R7
   \      0x8E4   0xEB17 0x00B0      ADDS     R0,R7,R0, ROR #+2
   \      0x8E8   0xEA4F 0x05B8      ROR      R5,R8,#+2
    218              P( E, A, B, C, D, R(41) );
   \      0x8EC   0xF8DD 0x8018      LDR      R8,[SP, #+24]
   \      0x8F0   0x9F08             LDR      R7,[SP, #+32]
   \      0x8F2   0xEA87 0x0808      EOR      R8,R7,R8
   \      0x8F6   0x9F04             LDR      R7,[SP, #+16]
   \      0x8F8   0xEA87 0x0808      EOR      R8,R7,R8
   \      0x8FC   0xEA88 0x76F6      EOR      R6,R8,R6, ROR #+31
   \      0x900   0xEA4F 0x77F6      ROR      R7,R6,#+31
   \      0x904   0x9709             STR      R7,[SP, #+36]
   \      0x906   0xEA05 0x070C      AND      R7,R5,R12
   \      0x90A   0xEA45 0x060C      ORR      R6,R5,R12
   \      0x90E   0xEA16 0x06B2      ANDS     R6,R6,R2, ROR #+2
   \      0x912   0x4337             ORRS     R7,R6,R7
   \      0x914   0xEB07 0x67F0      ADD      R7,R7,R0, ROR #+27
   \      0x918   0x9E09             LDR      R6,[SP, #+36]
   \      0x91A   0x19F7             ADDS     R7,R6,R7
   \      0x91C   0x19E7             ADDS     R7,R4,R7
   \      0x91E   0xEB17 0x01B1      ADDS     R1,R7,R1, ROR #+2
   \      0x922   0xEA4F 0x06BC      ROR      R6,R12,#+2
    219              P( D, E, A, B, C, R(42) );
   \      0x926   0xF8DD 0xC02C      LDR      R12,[SP, #+44]
   \      0x92A   0x9F00             LDR      R7,[SP, #+0]
   \      0x92C   0xEA87 0x0C0C      EOR      R12,R7,R12
   \      0x930   0x9F03             LDR      R7,[SP, #+12]
   \      0x932   0xEA87 0x0C0C      EOR      R12,R7,R12
   \      0x936   0x9F05             LDR      R7,[SP, #+20]
   \      0x938   0xEA87 0x0C0C      EOR      R12,R7,R12
   \      0x93C   0xEA4F 0x77FC      ROR      R7,R12,#+31
   \      0x940   0x9705             STR      R7,[SP, #+20]
   \      0x942   0xEA06 0x0C00      AND      R12,R6,R0
   \      0x946   0xEA46 0x0700      ORR      R7,R6,R0
   \      0x94A   0x402F             ANDS     R7,R7,R5
   \      0x94C   0xEA47 0x0C0C      ORR      R12,R7,R12
   \      0x950   0xEB0C 0x6CF1      ADD      R12,R12,R1, ROR #+27
   \      0x954   0x9F05             LDR      R7,[SP, #+20]
   \      0x956   0x44BC             ADD      R12,R7,R12
   \      0x958   0x44A4             ADD      R12,R4,R12
   \      0x95A   0xEB0C 0x02B2      ADD      R2,R12,R2, ROR #+2
    220              P( C, D, E, A, B, R(43) );
   \      0x95E   0xF8DD 0xC028      LDR      R12,[SP, #+40]
   \      0x962   0x9F07             LDR      R7,[SP, #+28]
   \      0x964   0xEA87 0x0C0C      EOR      R12,R7,R12
   \      0x968   0x9F02             LDR      R7,[SP, #+8]
   \      0x96A   0xEA87 0x0C0C      EOR      R12,R7,R12
   \      0x96E   0x9F04             LDR      R7,[SP, #+16]
   \      0x970   0xEA87 0x0C0C      EOR      R12,R7,R12
   \      0x974   0xEA4F 0x77FC      ROR      R7,R12,#+31
   \      0x978   0x9704             STR      R7,[SP, #+16]
   \      0x97A   0xEA01 0x0CB0      AND      R12,R1,R0, ROR #+2
   \      0x97E   0xEA41 0x07B0      ORR      R7,R1,R0, ROR #+2
   \      0x982   0x4037             ANDS     R7,R7,R6
   \      0x984   0xEA47 0x0C0C      ORR      R12,R7,R12
   \      0x988   0xEB0C 0x6CF2      ADD      R12,R12,R2, ROR #+27
   \      0x98C   0x9F04             LDR      R7,[SP, #+16]
   \      0x98E   0x44BC             ADD      R12,R7,R12
   \      0x990   0x44A4             ADD      R12,R4,R12
   \      0x992   0x4465             ADD      R5,R12,R5
    221              P( B, C, D, E, A, R(44) );
   \      0x994   0xF8DD 0xC024      LDR      R12,[SP, #+36]
   \      0x998   0xEA83 0x0C0C      EOR      R12,R3,R12
   \      0x99C   0x9F01             LDR      R7,[SP, #+4]
   \      0x99E   0xEA87 0x0C0C      EOR      R12,R7,R12
   \      0x9A2   0x9F03             LDR      R7,[SP, #+12]
   \      0x9A4   0xEA87 0x0C0C      EOR      R12,R7,R12
   \      0x9A8   0xEA4F 0x77FC      ROR      R7,R12,#+31
   \      0x9AC   0x9703             STR      R7,[SP, #+12]
   \      0x9AE   0xEA02 0x0CB1      AND      R12,R2,R1, ROR #+2
   \      0x9B2   0xEA42 0x07B1      ORR      R7,R2,R1, ROR #+2
   \      0x9B6   0xEA17 0x07B0      ANDS     R7,R7,R0, ROR #+2
   \      0x9BA   0xEA47 0x0C0C      ORR      R12,R7,R12
   \      0x9BE   0xEB0C 0x6CF5      ADD      R12,R12,R5, ROR #+27
   \      0x9C2   0x9F03             LDR      R7,[SP, #+12]
   \      0x9C4   0x44BC             ADD      R12,R7,R12
   \      0x9C6   0x44A4             ADD      R12,R4,R12
   \      0x9C8   0x4466             ADD      R6,R12,R6
    222              P( A, B, C, D, E, R(45) );
   \      0x9CA   0xF8DD 0xC014      LDR      R12,[SP, #+20]
   \      0x9CE   0xEA8C 0x7CFE      EOR      R12,R12,LR, ROR #+31
   \      0x9D2   0xEA89 0x0C0C      EOR      R12,R9,R12
   \      0x9D6   0x9F02             LDR      R7,[SP, #+8]
   \      0x9D8   0xEA87 0x0C0C      EOR      R12,R7,R12
   \      0x9DC   0xEA4F 0x77FC      ROR      R7,R12,#+31
   \      0x9E0   0x9702             STR      R7,[SP, #+8]
   \      0x9E2   0xEA05 0x0CB2      AND      R12,R5,R2, ROR #+2
   \      0x9E6   0xEA45 0x07B2      ORR      R7,R5,R2, ROR #+2
   \      0x9EA   0xEA17 0x07B1      ANDS     R7,R7,R1, ROR #+2
   \      0x9EE   0xEA47 0x0C0C      ORR      R12,R7,R12
   \      0x9F2   0xEB0C 0x6CF6      ADD      R12,R12,R6, ROR #+27
   \      0x9F6   0x9F02             LDR      R7,[SP, #+8]
   \      0x9F8   0x44BC             ADD      R12,R7,R12
   \      0x9FA   0x44A4             ADD      R12,R4,R12
   \      0x9FC   0xEB0C 0x00B0      ADD      R0,R12,R0, ROR #+2
    223              P( E, A, B, C, D, R(46) );
   \      0xA00   0xF8DD 0xC010      LDR      R12,[SP, #+16]
   \      0xA04   0x9F06             LDR      R7,[SP, #+24]
   \      0xA06   0xEA87 0x0C0C      EOR      R12,R7,R12
   \      0xA0A   0x9F0C             LDR      R7,[SP, #+48]
   \      0xA0C   0xEA87 0x0C0C      EOR      R12,R7,R12
   \      0xA10   0x9F01             LDR      R7,[SP, #+4]
   \      0xA12   0xEA87 0x0C0C      EOR      R12,R7,R12
   \      0xA16   0xEA4F 0x77FC      ROR      R7,R12,#+31
   \      0xA1A   0x9701             STR      R7,[SP, #+4]
   \      0xA1C   0xEA06 0x0CB5      AND      R12,R6,R5, ROR #+2
   \      0xA20   0xEA46 0x07B5      ORR      R7,R6,R5, ROR #+2
   \      0xA24   0xEA17 0x07B2      ANDS     R7,R7,R2, ROR #+2
   \      0xA28   0xEA47 0x0C0C      ORR      R12,R7,R12
   \      0xA2C   0xEB0C 0x6CF0      ADD      R12,R12,R0, ROR #+27
   \      0xA30   0x9F01             LDR      R7,[SP, #+4]
   \      0xA32   0x44BC             ADD      R12,R7,R12
   \      0xA34   0x44A4             ADD      R12,R4,R12
   \      0xA36   0xEB0C 0x01B1      ADD      R1,R12,R1, ROR #+2
    224              P( D, E, A, B, C, R(47) );
   \      0xA3A   0xF8DD 0xC00C      LDR      R12,[SP, #+12]
   \      0xA3E   0x9F0B             LDR      R7,[SP, #+44]
   \      0xA40   0xEA87 0x0C0C      EOR      R12,R7,R12
   \      0xA44   0x9F08             LDR      R7,[SP, #+32]
   \      0xA46   0xEA87 0x0C0C      EOR      R12,R7,R12
   \      0xA4A   0xEA89 0x090C      EOR      R9,R9,R12
   \      0xA4E   0xEA4F 0x77F9      ROR      R7,R9,#+31
   \      0xA52   0xEA00 0x0CB6      AND      R12,R0,R6, ROR #+2
   \      0xA56   0xEA40 0x08B6      ORR      R8,R0,R6, ROR #+2
   \      0xA5A   0xEA08 0x08B5      AND      R8,R8,R5, ROR #+2
   \      0xA5E   0xEA48 0x0C0C      ORR      R12,R8,R12
   \      0xA62   0xEB0C 0x6CF1      ADD      R12,R12,R1, ROR #+27
   \      0xA66   0x44BC             ADD      R12,R7,R12
   \      0xA68   0x44A4             ADD      R12,R4,R12
   \      0xA6A   0xEB0C 0x02B2      ADD      R2,R12,R2, ROR #+2
    225              P( C, D, E, A, B, R(48) );
   \      0xA6E   0xF8DD 0x8008      LDR      R8,[SP, #+8]
   \      0xA72   0xF8DD 0xC028      LDR      R12,[SP, #+40]
   \      0xA76   0xEA8C 0x0808      EOR      R8,R12,R8
   \      0xA7A   0xF8DD 0xC000      LDR      R12,[SP, #+0]
   \      0xA7E   0xEA8C 0x0808      EOR      R8,R12,R8
   \      0xA82   0xF8DD 0xC030      LDR      R12,[SP, #+48]
   \      0xA86   0xEA8C 0x0808      EOR      R8,R12,R8
   \      0xA8A   0xEA4F 0x7CF8      ROR      R12,R8,#+31
   \      0xA8E   0xEA01 0x08B0      AND      R8,R1,R0, ROR #+2
   \      0xA92   0xEA41 0x09B0      ORR      R9,R1,R0, ROR #+2
   \      0xA96   0xEA09 0x09B6      AND      R9,R9,R6, ROR #+2
   \      0xA9A   0xEA49 0x0808      ORR      R8,R9,R8
   \      0xA9E   0xEB08 0x68F2      ADD      R8,R8,R2, ROR #+27
   \      0xAA2   0x44E0             ADD      R8,R12,R8
   \      0xAA4   0x44A0             ADD      R8,R4,R8
   \      0xAA6   0xEB08 0x05B5      ADD      R5,R8,R5, ROR #+2
    226              P( B, C, D, E, A, R(49) );
   \      0xAAA   0xF8DD 0x9004      LDR      R9,[SP, #+4]
   \      0xAAE   0xF8DD 0x8024      LDR      R8,[SP, #+36]
   \      0xAB2   0xEA88 0x0909      EOR      R9,R8,R9
   \      0xAB6   0xF8DD 0x801C      LDR      R8,[SP, #+28]
   \      0xABA   0xEA88 0x0909      EOR      R9,R8,R9
   \      0xABE   0xF8DD 0x8020      LDR      R8,[SP, #+32]
   \      0xAC2   0xEA88 0x0909      EOR      R9,R8,R9
   \      0xAC6   0xEA4F 0x78F9      ROR      R8,R9,#+31
   \      0xACA   0xEA02 0x09B1      AND      R9,R2,R1, ROR #+2
   \      0xACE   0xEA42 0x0AB1      ORR      R10,R2,R1, ROR #+2
   \      0xAD2   0xEA0A 0x0AB0      AND      R10,R10,R0, ROR #+2
   \      0xAD6   0xEA4A 0x0909      ORR      R9,R10,R9
   \      0xADA   0xEB09 0x69F5      ADD      R9,R9,R5, ROR #+27
   \      0xADE   0x44C1             ADD      R9,R8,R9
   \      0xAE0   0x44A1             ADD      R9,R4,R9
   \      0xAE2   0xEB09 0x06B6      ADD      R6,R9,R6, ROR #+2
    227              P( A, B, C, D, E, R(50) );
   \      0xAE6   0xF8DD 0xA014      LDR      R10,[SP, #+20]
   \      0xAEA   0xEA8A 0x0A07      EOR      R10,R10,R7
   \      0xAEE   0xEA83 0x0A0A      EOR      R10,R3,R10
   \      0xAF2   0xF8DD 0x9000      LDR      R9,[SP, #+0]
   \      0xAF6   0xEA89 0x0A0A      EOR      R10,R9,R10
   \      0xAFA   0xEA4F 0x7AFA      ROR      R10,R10,#+31
   \      0xAFE   0xF8CD 0xA000      STR      R10,[SP, #+0]
   \      0xB02   0xEA05 0x0AB2      AND      R10,R5,R2, ROR #+2
   \      0xB06   0xEA45 0x09B2      ORR      R9,R5,R2, ROR #+2
   \      0xB0A   0xEA09 0x09B1      AND      R9,R9,R1, ROR #+2
   \      0xB0E   0xEA49 0x0A0A      ORR      R10,R9,R10
   \      0xB12   0xEB0A 0x6AF6      ADD      R10,R10,R6, ROR #+27
   \      0xB16   0xF8DD 0x9000      LDR      R9,[SP, #+0]
   \      0xB1A   0x44CA             ADD      R10,R9,R10
   \      0xB1C   0x44A2             ADD      R10,R4,R10
   \      0xB1E   0xEB0A 0x00B0      ADD      R0,R10,R0, ROR #+2
   \      0xB22   0xEA4F 0x09B5      ROR      R9,R5,#+2
    228              P( E, A, B, C, D, R(51) );
   \      0xB26   0xF8DD 0xA010      LDR      R10,[SP, #+16]
   \      0xB2A   0xEA8A 0x0A0C      EOR      R10,R10,R12
   \      0xB2E   0xEA8A 0x7AFE      EOR      R10,R10,LR, ROR #+31
   \      0xB32   0x9D07             LDR      R5,[SP, #+28]
   \      0xB34   0xEA85 0x0A0A      EOR      R10,R5,R10
   \      0xB38   0xEA4F 0x75FA      ROR      R5,R10,#+31
   \      0xB3C   0xEA09 0x0A06      AND      R10,R9,R6
   \      0xB40   0xEA49 0x0B06      ORR      R11,R9,R6
   \      0xB44   0xEA0B 0x0BB2      AND      R11,R11,R2, ROR #+2
   \      0xB48   0xEA4B 0x0A0A      ORR      R10,R11,R10
   \      0xB4C   0xEB0A 0x6AF0      ADD      R10,R10,R0, ROR #+27
   \      0xB50   0x44AA             ADD      R10,R5,R10
   \      0xB52   0x44A2             ADD      R10,R4,R10
   \      0xB54   0xEB0A 0x01B1      ADD      R1,R10,R1, ROR #+2
    229              P( D, E, A, B, C, R(52) );
   \      0xB58   0xF8DD 0xB00C      LDR      R11,[SP, #+12]
   \      0xB5C   0xEA8B 0x0B08      EOR      R11,R11,R8
   \      0xB60   0xF8DD 0xA018      LDR      R10,[SP, #+24]
   \      0xB64   0xEA8A 0x0B0B      EOR      R11,R10,R11
   \      0xB68   0xEA83 0x030B      EOR      R3,R3,R11
   \      0xB6C   0xEA00 0x0AB6      AND      R10,R0,R6, ROR #+2
   \      0xB70   0xEA40 0x0BB6      ORR      R11,R0,R6, ROR #+2
   \      0xB74   0xEA0B 0x0B09      AND      R11,R11,R9
   \      0xB78   0xEA4B 0x0A0A      ORR      R10,R11,R10
   \      0xB7C   0xEB0A 0x6AF1      ADD      R10,R10,R1, ROR #+27
   \      0xB80   0xEB0A 0x7AF3      ADD      R10,R10,R3, ROR #+31
   \      0xB84   0x44A2             ADD      R10,R4,R10
   \      0xB86   0xEB0A 0x02B2      ADD      R2,R10,R2, ROR #+2
   \      0xB8A   0xEA4F 0x0AB0      ROR      R10,R0,#+2
    230              P( C, D, E, A, B, R(53) );
   \      0xB8E   0xF8DD 0xB000      LDR      R11,[SP, #+0]
   \      0xB92   0x9802             LDR      R0,[SP, #+8]
   \      0xB94   0xEA80 0x0B0B      EOR      R11,R0,R11
   \      0xB98   0x980B             LDR      R0,[SP, #+44]
   \      0xB9A   0xEA80 0x0B0B      EOR      R11,R0,R11
   \      0xB9E   0xEA8B 0x7EFE      EOR      LR,R11,LR, ROR #+31
   \      0xBA2   0xEA0A 0x0001      AND      R0,R10,R1
   \      0xBA6   0xEA4A 0x0B01      ORR      R11,R10,R1
   \      0xBAA   0xEA0B 0x0BB6      AND      R11,R11,R6, ROR #+2
   \      0xBAE   0xEA4B 0x0000      ORR      R0,R11,R0
   \      0xBB2   0xEB00 0x60F2      ADD      R0,R0,R2, ROR #+27
   \      0xBB6   0xEB00 0x70FE      ADD      R0,R0,LR, ROR #+31
   \      0xBBA   0x1820             ADDS     R0,R4,R0
   \      0xBBC   0x4481             ADD      R9,R0,R9
    231              P( B, C, D, E, A, R(54) );
   \      0xBBE   0xF8DD 0xB004      LDR      R11,[SP, #+4]
   \      0xBC2   0xEA8B 0x0B05      EOR      R11,R11,R5
   \      0xBC6   0x980A             LDR      R0,[SP, #+40]
   \      0xBC8   0xEA80 0x0B0B      EOR      R11,R0,R11
   \      0xBCC   0x9806             LDR      R0,[SP, #+24]
   \      0xBCE   0xEA80 0x0B0B      EOR      R11,R0,R11
   \      0xBD2   0xEA4F 0x7BFB      ROR      R11,R11,#+31
   \      0xBD6   0xF8CD 0xB018      STR      R11,[SP, #+24]
   \      0xBDA   0xEA02 0x0BB1      AND      R11,R2,R1, ROR #+2
   \      0xBDE   0xEA42 0x00B1      ORR      R0,R2,R1, ROR #+2
   \      0xBE2   0xEA00 0x000A      AND      R0,R0,R10
   \      0xBE6   0xEA40 0x0B0B      ORR      R11,R0,R11
   \      0xBEA   0xEB0B 0x6BF9      ADD      R11,R11,R9, ROR #+27
   \      0xBEE   0x9806             LDR      R0,[SP, #+24]
   \      0xBF0   0x4483             ADD      R11,R0,R11
   \      0xBF2   0x44A3             ADD      R11,R4,R11
   \      0xBF4   0xEB0B 0x06B6      ADD      R6,R11,R6, ROR #+2
    232              P( A, B, C, D, E, R(55) );
   \      0xBF8   0xEA87 0x7BF3      EOR      R11,R7,R3, ROR #+31
   \      0xBFC   0x9809             LDR      R0,[SP, #+36]
   \      0xBFE   0xEA80 0x0B0B      EOR      R11,R0,R11
   \      0xC02   0x980B             LDR      R0,[SP, #+44]
   \      0xC04   0xEA80 0x0B0B      EOR      R11,R0,R11
   \      0xC08   0xEA4F 0x7BFB      ROR      R11,R11,#+31
   \      0xC0C   0xF8CD 0xB02C      STR      R11,[SP, #+44]
   \      0xC10   0xEA09 0x0BB2      AND      R11,R9,R2, ROR #+2
   \      0xC14   0xEA49 0x00B2      ORR      R0,R9,R2, ROR #+2
   \      0xC18   0xEA10 0x00B1      ANDS     R0,R0,R1, ROR #+2
   \      0xC1C   0xEA40 0x0B0B      ORR      R11,R0,R11
   \      0xC20   0xEB0B 0x6BF6      ADD      R11,R11,R6, ROR #+27
   \      0xC24   0x980B             LDR      R0,[SP, #+44]
   \      0xC26   0x4483             ADD      R11,R0,R11
   \      0xC28   0x44A3             ADD      R11,R4,R11
   \      0xC2A   0x44DA             ADD      R10,R11,R10
    233              P( E, A, B, C, D, R(56) );
   \      0xC2C   0xEA8C 0x7BFE      EOR      R11,R12,LR, ROR #+31
   \      0xC30   0x9805             LDR      R0,[SP, #+20]
   \      0xC32   0xEA80 0x0B0B      EOR      R11,R0,R11
   \      0xC36   0x980A             LDR      R0,[SP, #+40]
   \      0xC38   0xEA80 0x0B0B      EOR      R11,R0,R11
   \      0xC3C   0xEA4F 0x7BFB      ROR      R11,R11,#+31
   \      0xC40   0xF8CD 0xB028      STR      R11,[SP, #+40]
   \      0xC44   0xEA06 0x0BB9      AND      R11,R6,R9, ROR #+2
   \      0xC48   0xEA46 0x00B9      ORR      R0,R6,R9, ROR #+2
   \      0xC4C   0xEA10 0x00B2      ANDS     R0,R0,R2, ROR #+2
   \      0xC50   0xEA40 0x0B0B      ORR      R11,R0,R11
   \      0xC54   0xEB0B 0x6BFA      ADD      R11,R11,R10, ROR #+27
   \      0xC58   0x980A             LDR      R0,[SP, #+40]
   \      0xC5A   0x4483             ADD      R11,R0,R11
   \      0xC5C   0x44A3             ADD      R11,R4,R11
   \      0xC5E   0xEB0B 0x01B1      ADD      R1,R11,R1, ROR #+2
    234              P( D, E, A, B, C, R(57) );
   \      0xC62   0xF8DD 0xB018      LDR      R11,[SP, #+24]
   \      0xC66   0xEA88 0x0B0B      EOR      R11,R8,R11
   \      0xC6A   0x9804             LDR      R0,[SP, #+16]
   \      0xC6C   0xEA80 0x0B0B      EOR      R11,R0,R11
   \      0xC70   0x9809             LDR      R0,[SP, #+36]
   \      0xC72   0xEA80 0x0B0B      EOR      R11,R0,R11
   \      0xC76   0xEA4F 0x7BFB      ROR      R11,R11,#+31
   \      0xC7A   0xF8CD 0xB024      STR      R11,[SP, #+36]
   \      0xC7E   0xEA0A 0x0BB6      AND      R11,R10,R6, ROR #+2
   \      0xC82   0xEA4A 0x00B6      ORR      R0,R10,R6, ROR #+2
   \      0xC86   0xEA00 0x00B9      AND      R0,R0,R9, ROR #+2
   \      0xC8A   0xEA40 0x0B0B      ORR      R11,R0,R11
   \      0xC8E   0xEB0B 0x6BF1      ADD      R11,R11,R1, ROR #+27
   \      0xC92   0x9809             LDR      R0,[SP, #+36]
   \      0xC94   0x4483             ADD      R11,R0,R11
   \      0xC96   0x44A3             ADD      R11,R4,R11
   \      0xC98   0xEB0B 0x02B2      ADD      R2,R11,R2, ROR #+2
    235              P( C, D, E, A, B, R(58) );
   \      0xC9C   0xF8DD 0xB02C      LDR      R11,[SP, #+44]
   \      0xCA0   0x9800             LDR      R0,[SP, #+0]
   \      0xCA2   0xEA80 0x0B0B      EOR      R11,R0,R11
   \      0xCA6   0x9803             LDR      R0,[SP, #+12]
   \      0xCA8   0xEA80 0x0B0B      EOR      R11,R0,R11
   \      0xCAC   0x9805             LDR      R0,[SP, #+20]
   \      0xCAE   0xEA80 0x0B0B      EOR      R11,R0,R11
   \      0xCB2   0xEA4F 0x7BFB      ROR      R11,R11,#+31
   \      0xCB6   0xF8CD 0xB014      STR      R11,[SP, #+20]
   \      0xCBA   0xEA01 0x0BBA      AND      R11,R1,R10, ROR #+2
   \      0xCBE   0xEA41 0x00BA      ORR      R0,R1,R10, ROR #+2
   \      0xCC2   0xEA10 0x00B6      ANDS     R0,R0,R6, ROR #+2
   \      0xCC6   0xEA40 0x0B0B      ORR      R11,R0,R11
   \      0xCCA   0xEB0B 0x6BF2      ADD      R11,R11,R2, ROR #+27
   \      0xCCE   0x9805             LDR      R0,[SP, #+20]
   \      0xCD0   0x4483             ADD      R11,R0,R11
   \      0xCD2   0x44A3             ADD      R11,R4,R11
   \      0xCD4   0xEB0B 0x09B9      ADD      R9,R11,R9, ROR #+2
    236              P( B, C, D, E, A, R(59) );
   \      0xCD8   0xF8DD 0xB028      LDR      R11,[SP, #+40]
   \      0xCDC   0xEA85 0x0B0B      EOR      R11,R5,R11
   \      0xCE0   0x9802             LDR      R0,[SP, #+8]
   \      0xCE2   0xEA80 0x0B0B      EOR      R11,R0,R11
   \      0xCE6   0x9804             LDR      R0,[SP, #+16]
   \      0xCE8   0xEA80 0x0B0B      EOR      R11,R0,R11
   \      0xCEC   0xEA4F 0x7BFB      ROR      R11,R11,#+31
   \      0xCF0   0xF8CD 0xB010      STR      R11,[SP, #+16]
   \      0xCF4   0xEA02 0x00B1      AND      R0,R2,R1, ROR #+2
   \      0xCF8   0xEA42 0x0BB1      ORR      R11,R2,R1, ROR #+2
   \      0xCFC   0xEA0B 0x0BBA      AND      R11,R11,R10, ROR #+2
   \      0xD00   0xEA4B 0x0000      ORR      R0,R11,R0
   \      0xD04   0xEB00 0x60F9      ADD      R0,R0,R9, ROR #+27
   \      0xD08   0xF8DD 0xB010      LDR      R11,[SP, #+16]
   \      0xD0C   0x4458             ADD      R0,R11,R0
   \      0xD0E   0x1820             ADDS     R0,R4,R0
   \      0xD10   0xEB10 0x06B6      ADDS     R6,R0,R6, ROR #+2
    237          
    238          #undef K
    239          #undef F
    240          
    241          #define F(x,y,z) (x ^ y ^ z)
    242          #define K 0xCA62C1D6
    243          
    244              P( A, B, C, D, E, R(60) );
   \      0xD14   0x9C09             LDR      R4,[SP, #+36]
   \      0xD16   0xEA94 0x74F3      EORS     R4,R4,R3, ROR #+31
   \      0xD1A   0x9801             LDR      R0,[SP, #+4]
   \      0xD1C   0x4044             EORS     R4,R0,R4
   \      0xD1E   0x9803             LDR      R0,[SP, #+12]
   \      0xD20   0x4044             EORS     R4,R0,R4
   \      0xD22   0xEA4F 0x74F4      ROR      R4,R4,#+31
   \      0xD26   0x9403             STR      R4,[SP, #+12]
   \      0xD28   0x....'....        LDR.W    R4,??DataTable3_3  ;; 0xca62c1d6
   \      0xD2C   0xEA89 0x0BB2      EOR      R11,R9,R2, ROR #+2
   \      0xD30   0xEA8B 0x0BB1      EOR      R11,R11,R1, ROR #+2
   \      0xD34   0xEB0B 0x6BF6      ADD      R11,R11,R6, ROR #+27
   \      0xD38   0x9803             LDR      R0,[SP, #+12]
   \      0xD3A   0x4483             ADD      R11,R0,R11
   \      0xD3C   0x44A3             ADD      R11,R4,R11
   \      0xD3E   0xEB0B 0x0ABA      ADD      R10,R11,R10, ROR #+2
    245              P( E, A, B, C, D, R(61) );
   \      0xD42   0xF8DD 0xB014      LDR      R11,[SP, #+20]
   \      0xD46   0xEA8B 0x7BFE      EOR      R11,R11,LR, ROR #+31
   \      0xD4A   0xEA87 0x0B0B      EOR      R11,R7,R11
   \      0xD4E   0x9802             LDR      R0,[SP, #+8]
   \      0xD50   0xEA80 0x0B0B      EOR      R11,R0,R11
   \      0xD54   0xEA4F 0x7BFB      ROR      R11,R11,#+31
   \      0xD58   0xF8CD 0xB008      STR      R11,[SP, #+8]
   \      0xD5C   0xEA86 0x0BB9      EOR      R11,R6,R9, ROR #+2
   \      0xD60   0xEA8B 0x0BB2      EOR      R11,R11,R2, ROR #+2
   \      0xD64   0xEB0B 0x6BFA      ADD      R11,R11,R10, ROR #+27
   \      0xD68   0x9802             LDR      R0,[SP, #+8]
   \      0xD6A   0x4483             ADD      R11,R0,R11
   \      0xD6C   0x44A3             ADD      R11,R4,R11
   \      0xD6E   0xEB0B 0x01B1      ADD      R1,R11,R1, ROR #+2
    246              P( D, E, A, B, C, R(62) );
   \      0xD72   0xF8DD 0xB010      LDR      R11,[SP, #+16]
   \      0xD76   0x9806             LDR      R0,[SP, #+24]
   \      0xD78   0xEA80 0x0B0B      EOR      R11,R0,R11
   \      0xD7C   0xEA8C 0x0B0B      EOR      R11,R12,R11
   \      0xD80   0x9801             LDR      R0,[SP, #+4]
   \      0xD82   0xEA80 0x0B0B      EOR      R11,R0,R11
   \      0xD86   0xEA4F 0x7BFB      ROR      R11,R11,#+31
   \      0xD8A   0xF8CD 0xB004      STR      R11,[SP, #+4]
   \      0xD8E   0xEA8A 0x0BB6      EOR      R11,R10,R6, ROR #+2
   \      0xD92   0xEA8B 0x0BB9      EOR      R11,R11,R9, ROR #+2
   \      0xD96   0xEB0B 0x6BF1      ADD      R11,R11,R1, ROR #+27
   \      0xD9A   0x9801             LDR      R0,[SP, #+4]
   \      0xD9C   0x4483             ADD      R11,R0,R11
   \      0xD9E   0x44A3             ADD      R11,R4,R11
   \      0xDA0   0xEB0B 0x02B2      ADD      R2,R11,R2, ROR #+2
   \      0xDA4   0xEA4F 0x00BA      ROR      R0,R10,#+2
    247              P( C, D, E, A, B, R(63) );
   \      0xDA8   0xF8DD 0xB00C      LDR      R11,[SP, #+12]
   \      0xDAC   0xF8DD 0xA02C      LDR      R10,[SP, #+44]
   \      0xDB0   0xEA8A 0x0B0B      EOR      R11,R10,R11
   \      0xDB4   0xEA88 0x0B0B      EOR      R11,R8,R11
   \      0xDB8   0xEA87 0x070B      EOR      R7,R7,R11
   \      0xDBC   0xEA80 0x0A01      EOR      R10,R0,R1
   \      0xDC0   0xEA8A 0x0AB6      EOR      R10,R10,R6, ROR #+2
   \      0xDC4   0xEB0A 0x6AF2      ADD      R10,R10,R2, ROR #+27
   \      0xDC8   0xEB0A 0x7AF7      ADD      R10,R10,R7, ROR #+31
   \      0xDCC   0x44A2             ADD      R10,R4,R10
   \      0xDCE   0xEB0A 0x09B9      ADD      R9,R10,R9, ROR #+2
    248              P( B, C, D, E, A, R(64) );
   \      0xDD2   0xF8DD 0xB008      LDR      R11,[SP, #+8]
   \      0xDD6   0xF8DD 0xA028      LDR      R10,[SP, #+40]
   \      0xDDA   0xEA8A 0x0B0B      EOR      R11,R10,R11
   \      0xDDE   0xF8DD 0xA000      LDR      R10,[SP, #+0]
   \      0xDE2   0xEA8A 0x0B0B      EOR      R11,R10,R11
   \      0xDE6   0xEA8C 0x0C0B      EOR      R12,R12,R11
   \      0xDEA   0xEA82 0x0AB1      EOR      R10,R2,R1, ROR #+2
   \      0xDEE   0xEA80 0x0A0A      EOR      R10,R0,R10
   \      0xDF2   0xEB0A 0x6AF9      ADD      R10,R10,R9, ROR #+27
   \      0xDF6   0xEB0A 0x7AFC      ADD      R10,R10,R12, ROR #+31
   \      0xDFA   0x44A2             ADD      R10,R4,R10
   \      0xDFC   0xEB0A 0x06B6      ADD      R6,R10,R6, ROR #+2
    249              P( A, B, C, D, E, R(65) );
   \      0xE00   0xF8DD 0xB004      LDR      R11,[SP, #+4]
   \      0xE04   0xF8DD 0xA024      LDR      R10,[SP, #+36]
   \      0xE08   0xEA8A 0x0B0B      EOR      R11,R10,R11
   \      0xE0C   0xEA85 0x0B0B      EOR      R11,R5,R11
   \      0xE10   0xEA88 0x080B      EOR      R8,R8,R11
   \      0xE14   0xEA89 0x0AB2      EOR      R10,R9,R2, ROR #+2
   \      0xE18   0xEA8A 0x0AB1      EOR      R10,R10,R1, ROR #+2
   \      0xE1C   0xEB0A 0x6AF6      ADD      R10,R10,R6, ROR #+27
   \      0xE20   0xEB0A 0x7AF8      ADD      R10,R10,R8, ROR #+31
   \      0xE24   0x44A2             ADD      R10,R4,R10
   \      0xE26   0x4450             ADD      R0,R10,R0
    250              P( E, A, B, C, D, R(66) );
   \      0xE28   0xF8DD 0xB014      LDR      R11,[SP, #+20]
   \      0xE2C   0xEA8B 0x7BF7      EOR      R11,R11,R7, ROR #+31
   \      0xE30   0xEA8B 0x7BF3      EOR      R11,R11,R3, ROR #+31
   \      0xE34   0xF8DD 0xA000      LDR      R10,[SP, #+0]
   \      0xE38   0xEA8A 0x0B0B      EOR      R11,R10,R11
   \      0xE3C   0xEA4F 0x7AFB      ROR      R10,R11,#+31
   \      0xE40   0xEA86 0x0BB9      EOR      R11,R6,R9, ROR #+2
   \      0xE44   0xEA8B 0x0BB2      EOR      R11,R11,R2, ROR #+2
   \      0xE48   0xEB0B 0x6BF0      ADD      R11,R11,R0, ROR #+27
   \      0xE4C   0x44D3             ADD      R11,R10,R11
   \      0xE4E   0x44A3             ADD      R11,R4,R11
   \      0xE50   0xEB0B 0x0BB1      ADD      R11,R11,R1, ROR #+2
    251              P( D, E, A, B, C, R(67) );
   \      0xE54   0x9904             LDR      R1,[SP, #+16]
   \      0xE56   0xEA81 0x71FC      EOR      R1,R1,R12, ROR #+31
   \      0xE5A   0xEA81 0x71FE      EOR      R1,R1,LR, ROR #+31
   \      0xE5E   0x404D             EORS     R5,R5,R1
   \      0xE60   0xEA4F 0x75F5      ROR      R5,R5,#+31
   \      0xE64   0x9507             STR      R5,[SP, #+28]
   \      0xE66   0xEA80 0x05B6      EOR      R5,R0,R6, ROR #+2
   \      0xE6A   0xEA85 0x05B9      EOR      R5,R5,R9, ROR #+2
   \      0xE6E   0xEB05 0x65FB      ADD      R5,R5,R11, ROR #+27
   \      0xE72   0x9907             LDR      R1,[SP, #+28]
   \      0xE74   0x194D             ADDS     R5,R1,R5
   \      0xE76   0x1965             ADDS     R5,R4,R5
   \      0xE78   0xEB15 0x02B2      ADDS     R2,R5,R2, ROR #+2
   \      0xE7C   0xEA4F 0x01B0      ROR      R1,R0,#+2
    252              P( C, D, E, A, B, R(68) );
   \      0xE80   0x9D03             LDR      R5,[SP, #+12]
   \      0xE82   0xEA85 0x75F8      EOR      R5,R5,R8, ROR #+31
   \      0xE86   0x9806             LDR      R0,[SP, #+24]
   \      0xE88   0x4045             EORS     R5,R0,R5
   \      0xE8A   0xEA95 0x73F3      EORS     R3,R5,R3, ROR #+31
   \      0xE8E   0xEA4F 0x73F3      ROR      R3,R3,#+31
   \      0xE92   0x930D             STR      R3,[SP, #+52]
   \      0xE94   0xEA81 0x030B      EOR      R3,R1,R11
   \      0xE98   0xEA93 0x03B6      EORS     R3,R3,R6, ROR #+2
   \      0xE9C   0xEB03 0x63F2      ADD      R3,R3,R2, ROR #+27
   \      0xEA0   0x980D             LDR      R0,[SP, #+52]
   \      0xEA2   0x18C3             ADDS     R3,R0,R3
   \      0xEA4   0x18E3             ADDS     R3,R4,R3
   \      0xEA6   0xEB03 0x09B9      ADD      R9,R3,R9, ROR #+2
    253              P( B, C, D, E, A, R(69) );
   \      0xEAA   0x9D02             LDR      R5,[SP, #+8]
   \      0xEAC   0xEA85 0x050A      EOR      R5,R5,R10
   \      0xEB0   0x980B             LDR      R0,[SP, #+44]
   \      0xEB2   0x4045             EORS     R5,R0,R5
   \      0xEB4   0xEA85 0x7EFE      EOR      LR,R5,LR, ROR #+31
   \      0xEB8   0xEA4F 0x75FE      ROR      R5,LR,#+31
   \      0xEBC   0x950E             STR      R5,[SP, #+56]
   \      0xEBE   0xEA82 0x05BB      EOR      R5,R2,R11, ROR #+2
   \      0xEC2   0x404D             EORS     R5,R1,R5
   \      0xEC4   0xEB05 0x65F9      ADD      R5,R5,R9, ROR #+27
   \      0xEC8   0x980E             LDR      R0,[SP, #+56]
   \      0xECA   0x1945             ADDS     R5,R0,R5
   \      0xECC   0x1965             ADDS     R5,R4,R5
   \      0xECE   0xEB15 0x06B6      ADDS     R6,R5,R6, ROR #+2
    254              P( A, B, C, D, E, R(70) );
   \      0xED2   0x9D07             LDR      R5,[SP, #+28]
   \      0xED4   0x9801             LDR      R0,[SP, #+4]
   \      0xED6   0x4045             EORS     R5,R0,R5
   \      0xED8   0x980A             LDR      R0,[SP, #+40]
   \      0xEDA   0x4045             EORS     R5,R0,R5
   \      0xEDC   0x9806             LDR      R0,[SP, #+24]
   \      0xEDE   0x4045             EORS     R5,R0,R5
   \      0xEE0   0xEA4F 0x75F5      ROR      R5,R5,#+31
   \      0xEE4   0x9506             STR      R5,[SP, #+24]
   \      0xEE6   0xEA89 0x05B2      EOR      R5,R9,R2, ROR #+2
   \      0xEEA   0xEA95 0x05BB      EORS     R5,R5,R11, ROR #+2
   \      0xEEE   0xEB05 0x65F6      ADD      R5,R5,R6, ROR #+27
   \      0xEF2   0x9806             LDR      R0,[SP, #+24]
   \      0xEF4   0x1945             ADDS     R5,R0,R5
   \      0xEF6   0x1965             ADDS     R5,R4,R5
   \      0xEF8   0x1869             ADDS     R1,R5,R1
   \      0xEFA   0xEA4F 0x05B9      ROR      R5,R9,#+2
    255              P( E, A, B, C, D, R(71) );
   \      0xEFE   0xF8DD 0xE034      LDR      LR,[SP, #+52]
   \      0xF02   0xEA8E 0x7EF7      EOR      LR,LR,R7, ROR #+31
   \      0xF06   0x9809             LDR      R0,[SP, #+36]
   \      0xF08   0xEA80 0x0E0E      EOR      LR,R0,LR
   \      0xF0C   0x980B             LDR      R0,[SP, #+44]
   \      0xF0E   0xEA80 0x0E0E      EOR      LR,R0,LR
   \      0xF12   0xEA4F 0x70FE      ROR      R0,LR,#+31
   \      0xF16   0xEA85 0x0E06      EOR      LR,R5,R6
   \      0xF1A   0xEA8E 0x0EB2      EOR      LR,LR,R2, ROR #+2
   \      0xF1E   0xEB0E 0x6EF1      ADD      LR,LR,R1, ROR #+27
   \      0xF22   0x4486             ADD      LR,R0,LR
   \      0xF24   0x44A6             ADD      LR,R4,LR
   \      0xF26   0xEB0E 0x03BB      ADD      R3,LR,R11, ROR #+2
    256              P( D, E, A, B, C, R(72) );
   \      0xF2A   0xF8DD 0x9038      LDR      R9,[SP, #+56]
   \      0xF2E   0xEA89 0x79FC      EOR      R9,R9,R12, ROR #+31
   \      0xF32   0xF8DD 0xE014      LDR      LR,[SP, #+20]
   \      0xF36   0xEA8E 0x0909      EOR      R9,LR,R9
   \      0xF3A   0xF8DD 0xE028      LDR      LR,[SP, #+40]
   \      0xF3E   0xEA8E 0x0909      EOR      R9,LR,R9
   \      0xF42   0xEA4F 0x7EF9      ROR      LR,R9,#+31
   \      0xF46   0xEA81 0x09B6      EOR      R9,R1,R6, ROR #+2
   \      0xF4A   0xEA85 0x0909      EOR      R9,R5,R9
   \      0xF4E   0xEB09 0x69F3      ADD      R9,R9,R3, ROR #+27
   \      0xF52   0x44F1             ADD      R9,LR,R9
   \      0xF54   0x44A1             ADD      R9,R4,R9
   \      0xF56   0xEB09 0x02B2      ADD      R2,R9,R2, ROR #+2
    257              P( C, D, E, A, B, R(73) );
   \      0xF5A   0xF8DD 0xB018      LDR      R11,[SP, #+24]
   \      0xF5E   0xEA8B 0x7BF8      EOR      R11,R11,R8, ROR #+31
   \      0xF62   0xF8DD 0x9010      LDR      R9,[SP, #+16]
   \      0xF66   0xEA89 0x0B0B      EOR      R11,R9,R11
   \      0xF6A   0xF8DD 0x9024      LDR      R9,[SP, #+36]
   \      0xF6E   0xEA89 0x0B0B      EOR      R11,R9,R11
   \      0xF72   0xEA4F 0x79FB      ROR      R9,R11,#+31
   \      0xF76   0xEA83 0x0BB1      EOR      R11,R3,R1, ROR #+2
   \      0xF7A   0xEA8B 0x0BB6      EOR      R11,R11,R6, ROR #+2
   \      0xF7E   0xEB0B 0x6BF2      ADD      R11,R11,R2, ROR #+27
   \      0xF82   0x44CB             ADD      R11,R9,R11
   \      0xF84   0x44A3             ADD      R11,R4,R11
   \      0xF86   0x445D             ADD      R5,R11,R5
    258              P( B, C, D, E, A, R(74) );
   \      0xF88   0xEA8A 0x0A00      EOR      R10,R10,R0
   \      0xF8C   0xF8DD 0xB00C      LDR      R11,[SP, #+12]
   \      0xF90   0xEA8B 0x0A0A      EOR      R10,R11,R10
   \      0xF94   0xF8DD 0xB014      LDR      R11,[SP, #+20]
   \      0xF98   0xEA8B 0x0A0A      EOR      R10,R11,R10
   \      0xF9C   0xEA82 0x0BB3      EOR      R11,R2,R3, ROR #+2
   \      0xFA0   0xEA8B 0x0BB1      EOR      R11,R11,R1, ROR #+2
   \      0xFA4   0xEB0B 0x6BF5      ADD      R11,R11,R5, ROR #+27
   \      0xFA8   0xEB0B 0x7BFA      ADD      R11,R11,R10, ROR #+31
   \      0xFAC   0x44A3             ADD      R11,R4,R11
   \      0xFAE   0xEB0B 0x06B6      ADD      R6,R11,R6, ROR #+2
    259              P( A, B, C, D, E, R(75) );
   \      0xFB2   0x46F3             MOV      R11,LR
   \      0xFB4   0xF8DD 0xE01C      LDR      LR,[SP, #+28]
   \      0xFB8   0xEA8E 0x0B0B      EOR      R11,LR,R11
   \      0xFBC   0xF8DD 0xE008      LDR      LR,[SP, #+8]
   \      0xFC0   0xEA8E 0x0B0B      EOR      R11,LR,R11
   \      0xFC4   0xF8DD 0xE010      LDR      LR,[SP, #+16]
   \      0xFC8   0xEA8E 0x0B0B      EOR      R11,LR,R11
   \      0xFCC   0xEA4F 0x7EFB      ROR      LR,R11,#+31
   \      0xFD0   0xEA85 0x0BB2      EOR      R11,R5,R2, ROR #+2
   \      0xFD4   0xEA8B 0x0BB3      EOR      R11,R11,R3, ROR #+2
   \      0xFD8   0xEB0B 0x6BF6      ADD      R11,R11,R6, ROR #+27
   \      0xFDC   0x44F3             ADD      R11,LR,R11
   \      0xFDE   0x44A3             ADD      R11,R4,R11
   \      0xFE0   0xEB0B 0x01B1      ADD      R1,R11,R1, ROR #+2
    260              P( E, A, B, C, D, R(76) );
   \      0xFE4   0x46CB             MOV      R11,R9
   \      0xFE6   0xF8DD 0x9034      LDR      R9,[SP, #+52]
   \      0xFEA   0xEA89 0x0B0B      EOR      R11,R9,R11
   \      0xFEE   0xF8DD 0x9004      LDR      R9,[SP, #+4]
   \      0xFF2   0xEA89 0x0B0B      EOR      R11,R9,R11
   \      0xFF6   0xF8DD 0x900C      LDR      R9,[SP, #+12]
   \      0xFFA   0xEA89 0x0B0B      EOR      R11,R9,R11
   \      0xFFE   0xEA4F 0x79FB      ROR      R9,R11,#+31
   \     0x1002   0xEA86 0x0BB5      EOR      R11,R6,R5, ROR #+2
   \     0x1006   0xEA8B 0x0BB2      EOR      R11,R11,R2, ROR #+2
   \     0x100A   0xEB0B 0x6BF1      ADD      R11,R11,R1, ROR #+27
   \     0x100E   0x44CB             ADD      R11,R9,R11
   \     0x1010   0x44A3             ADD      R11,R4,R11
   \     0x1012   0xEB0B 0x03B3      ADD      R3,R11,R3, ROR #+2
   \     0x1016   0xEA4F 0x06B6      ROR      R6,R6,#+2
    261              P( D, E, A, B, C, R(77) );
   \     0x101A   0xF8DD 0xB038      LDR      R11,[SP, #+56]
   \     0x101E   0xEA8B 0x7AFA      EOR      R10,R11,R10, ROR #+31
   \     0x1022   0xEA8A 0x7AF7      EOR      R10,R10,R7, ROR #+31
   \     0x1026   0xF8DD 0xB008      LDR      R11,[SP, #+8]
   \     0x102A   0xEA8B 0x0B0A      EOR      R11,R11,R10
   \     0x102E   0xEA86 0x0A01      EOR      R10,R6,R1
   \     0x1032   0xEA8A 0x0AB5      EOR      R10,R10,R5, ROR #+2
   \     0x1036   0xEB0A 0x6AF3      ADD      R10,R10,R3, ROR #+27
   \     0x103A   0xEB0A 0x7AFB      ADD      R10,R10,R11, ROR #+31
   \     0x103E   0x44A2             ADD      R10,R4,R10
   \     0x1040   0xEB0A 0x02B2      ADD      R2,R10,R2, ROR #+2
    262              P( C, D, E, A, B, R(78) );
   \     0x1044   0xF8DD 0xA018      LDR      R10,[SP, #+24]
   \     0x1048   0xEA8A 0x0E0E      EOR      LR,R10,LR
   \     0x104C   0xEA8E 0x7CFC      EOR      R12,LR,R12, ROR #+31
   \     0x1050   0xF8DD 0xE004      LDR      LR,[SP, #+4]
   \     0x1054   0xEA8E 0x0C0C      EOR      R12,LR,R12
   \     0x1058   0xEA83 0x0EB1      EOR      LR,R3,R1, ROR #+2
   \     0x105C   0xEA86 0x0E0E      EOR      LR,R6,LR
   \     0x1060   0xEB0E 0x6EF2      ADD      LR,LR,R2, ROR #+27
   \     0x1064   0xEB0E 0x7EFC      ADD      LR,LR,R12, ROR #+31
   \     0x1068   0x44A6             ADD      LR,R4,LR
   \     0x106A   0xEB0E 0x05B5      ADD      R5,LR,R5, ROR #+2
    263              P( B, C, D, E, A, R(79) );
   \     0x106E   0xEA80 0x0009      EOR      R0,R0,R9
   \     0x1072   0xEA80 0x78F8      EOR      R8,R0,R8, ROR #+31
   \     0x1076   0xEA88 0x78F7      EOR      R8,R8,R7, ROR #+31
    264          
    265          #undef K
    266          #undef F
    267          
    268              ctx->state[0] += A;
   \     0x107A   0x980F             LDR      R0,[SP, #+60]
   \     0x107C   0x6880             LDR      R0,[R0, #+8]
   \     0x107E   0xEB06 0x66F5      ADD      R6,R6,R5, ROR #+27
   \     0x1082   0xEA82 0x07B3      EOR      R7,R2,R3, ROR #+2
   \     0x1086   0xEA97 0x07B1      EORS     R7,R7,R1, ROR #+2
   \     0x108A   0x19BE             ADDS     R6,R7,R6
   \     0x108C   0xEB06 0x76F8      ADD      R6,R6,R8, ROR #+31
   \     0x1090   0x19A6             ADDS     R6,R4,R6
   \     0x1092   0x1836             ADDS     R6,R6,R0
   \     0x1094   0x980F             LDR      R0,[SP, #+60]
   \     0x1096   0x6086             STR      R6,[R0, #+8]
    269              ctx->state[1] += B;
   \     0x1098   0x980F             LDR      R0,[SP, #+60]
   \     0x109A   0x68C0             LDR      R0,[R0, #+12]
   \     0x109C   0x182D             ADDS     R5,R5,R0
   \     0x109E   0x980F             LDR      R0,[SP, #+60]
   \     0x10A0   0x60C5             STR      R5,[R0, #+12]
    270              ctx->state[2] += C;
   \     0x10A2   0x980F             LDR      R0,[SP, #+60]
   \     0x10A4   0x6900             LDR      R0,[R0, #+16]
   \     0x10A6   0xEB00 0x00B2      ADD      R0,R0,R2, ROR #+2
   \     0x10AA   0x9A0F             LDR      R2,[SP, #+60]
   \     0x10AC   0x6110             STR      R0,[R2, #+16]
    271              ctx->state[3] += D;
   \     0x10AE   0x980F             LDR      R0,[SP, #+60]
   \     0x10B0   0x6940             LDR      R0,[R0, #+20]
   \     0x10B2   0xEB10 0x03B3      ADDS     R3,R0,R3, ROR #+2
   \     0x10B6   0x980F             LDR      R0,[SP, #+60]
   \     0x10B8   0x6143             STR      R3,[R0, #+20]
    272              ctx->state[4] += E;
   \     0x10BA   0x980F             LDR      R0,[SP, #+60]
   \     0x10BC   0x6980             LDR      R0,[R0, #+24]
   \     0x10BE   0xEB10 0x01B1      ADDS     R1,R0,R1, ROR #+2
   \     0x10C2   0x980F             LDR      R0,[SP, #+60]
   \     0x10C4   0x6181             STR      R1,[R0, #+24]
    273          
    274              return( 0 );
   \     0x10C6   0x2000             MOVS     R0,#+0
   \     0x10C8   0xB010             ADD      SP,SP,#+64
   \     0x10CA   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    275          }
    276          
    277          #if !defined(MBEDTLS_DEPRECATED_REMOVED)

   \                                 In section .text, align 2, keep-with-next
    278          void mbedtls_sha1_process( mbedtls_sha1_context *ctx,
    279                                     const unsigned char data[64] )
    280          {
    281              mbedtls_internal_sha1_process( ctx, data );
   \                     mbedtls_sha1_process: (+1)
   \        0x0   0x....'....        B.W      mbedtls_internal_sha1_process
    282          }
    283          #endif
    284          #endif /* !MBEDTLS_SHA1_PROCESS_ALT */
    285          
    286          /*
    287           * SHA-1 process buffer
    288           */

   \                                 In section .text, align 2, keep-with-next
    289          int mbedtls_sha1_update_ret( mbedtls_sha1_context *ctx,
    290                                       const unsigned char *input,
    291                                       size_t ilen )
    292          {
   \                     mbedtls_sha1_update_ret: (+1)
   \        0x0   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \        0x4   0x4680             MOV      R8,R0
   \        0x6   0x460E             MOV      R6,R1
   \        0x8   0x0014             MOVS     R4,R2
    293              int ret;
    294              size_t fill;
    295              uint32_t left;
    296          
    297              if( ilen == 0 )
   \        0xA   0xD03C             BEQ.N    ??mbedtls_sha1_update_ret_0
    298                  return( 0 );
    299          
    300              left = ctx->total[0] & 0x3F;
   \        0xC   0xF898 0x5000      LDRB     R5,[R8, #+0]
   \       0x10   0xF005 0x053F      AND      R5,R5,#0x3F
    301              fill = 64 - left;
   \       0x14   0xF1C5 0x0740      RSB      R7,R5,#+64
    302          
    303              ctx->total[0] += (uint32_t) ilen;
   \       0x18   0xF8D8 0x0000      LDR      R0,[R8, #+0]
   \       0x1C   0x1820             ADDS     R0,R4,R0
   \       0x1E   0xF8C8 0x0000      STR      R0,[R8, #+0]
    304              ctx->total[0] &= 0xFFFFFFFF;
   \       0x22   0xF8C8 0x0000      STR      R0,[R8, #+0]
    305          
    306              if( ctx->total[0] < (uint32_t) ilen )
   \       0x26   0x42A0             CMP      R0,R4
   \       0x28   0xD204             BCS.N    ??mbedtls_sha1_update_ret_1
    307                  ctx->total[1]++;
   \       0x2A   0xF8D8 0x0004      LDR      R0,[R8, #+4]
   \       0x2E   0x1C40             ADDS     R0,R0,#+1
   \       0x30   0xF8C8 0x0004      STR      R0,[R8, #+4]
    308          
    309              if( left && ilen >= fill )
   \                     ??mbedtls_sha1_update_ret_1: (+1)
   \       0x34   0x2D00             CMP      R5,#+0
   \       0x36   0xD014             BEQ.N    ??mbedtls_sha1_update_ret_2
   \       0x38   0x42BC             CMP      R4,R7
   \       0x3A   0xD312             BCC.N    ??mbedtls_sha1_update_ret_2
    310              {
    311                  memcpy( (void *) (ctx->buffer + left), input, fill );
   \       0x3C   0x463A             MOV      R2,R7
   \       0x3E   0xEB08 0x0005      ADD      R0,R8,R5
   \       0x42   0x301C             ADDS     R0,R0,#+28
   \       0x44   0x....'....        BL       __aeabi_memcpy
    312          
    313                  if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
   \       0x48   0xF108 0x011C      ADD      R1,R8,#+28
   \       0x4C   0x4640             MOV      R0,R8
   \       0x4E   0x....'....        BL       mbedtls_internal_sha1_process
   \       0x52   0x2800             CMP      R0,#+0
   \       0x54   0xD118             BNE.N    ??mbedtls_sha1_update_ret_3
    314                      return( ret );
    315          
    316                  input += fill;
   \       0x56   0x443E             ADD      R6,R6,R7
    317                  ilen  -= fill;
   \       0x58   0x1BE4             SUBS     R4,R4,R7
    318                  left = 0;
   \       0x5A   0x2500             MOVS     R5,#+0
   \       0x5C   0xE001             B.N      ??mbedtls_sha1_update_ret_2
    319              }
    320          
    321              while( ilen >= 64 )
    322              {
    323                  if( ( ret = mbedtls_internal_sha1_process( ctx, input ) ) != 0 )
    324                      return( ret );
    325          
    326                  input += 64;
   \                     ??mbedtls_sha1_update_ret_4: (+1)
   \       0x5E   0x3640             ADDS     R6,R6,#+64
    327                  ilen  -= 64;
   \       0x60   0x3C40             SUBS     R4,R4,#+64
   \                     ??mbedtls_sha1_update_ret_2: (+1)
   \       0x62   0x2C40             CMP      R4,#+64
   \       0x64   0xD306             BCC.N    ??mbedtls_sha1_update_ret_5
   \       0x66   0x4631             MOV      R1,R6
   \       0x68   0x4640             MOV      R0,R8
   \       0x6A   0x....'....        BL       mbedtls_internal_sha1_process
   \       0x6E   0x2800             CMP      R0,#+0
   \       0x70   0xD0F5             BEQ.N    ??mbedtls_sha1_update_ret_4
   \       0x72   0xE009             B.N      ??mbedtls_sha1_update_ret_3
    328              }
    329          
    330              if( ilen > 0 )
   \                     ??mbedtls_sha1_update_ret_5: (+1)
   \       0x74   0x2C00             CMP      R4,#+0
   \       0x76   0xD006             BEQ.N    ??mbedtls_sha1_update_ret_0
    331                  memcpy( (void *) (ctx->buffer + left), input, ilen );
   \       0x78   0x4622             MOV      R2,R4
   \       0x7A   0x4631             MOV      R1,R6
   \       0x7C   0xEB08 0x0005      ADD      R0,R8,R5
   \       0x80   0x301C             ADDS     R0,R0,#+28
   \       0x82   0x....'....        BL       __aeabi_memcpy
    332          
    333              return( 0 );
   \                     ??mbedtls_sha1_update_ret_0: (+1)
   \       0x86   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_sha1_update_ret_3: (+1)
   \       0x88   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    334          }
    335          
    336          #if !defined(MBEDTLS_DEPRECATED_REMOVED)

   \                                 In section .text, align 2, keep-with-next
    337          void mbedtls_sha1_update( mbedtls_sha1_context *ctx,
    338                                    const unsigned char *input,
    339                                    size_t ilen )
    340          {
    341              mbedtls_sha1_update_ret( ctx, input, ilen );
   \                     mbedtls_sha1_update: (+1)
   \        0x0   0x....             B.N      mbedtls_sha1_update_ret
    342          }
    343          #endif
    344          
    345          /*
    346           * SHA-1 final digest
    347           */

   \                                 In section .text, align 2, keep-with-next
    348          int mbedtls_sha1_finish_ret( mbedtls_sha1_context *ctx,
    349                                       unsigned char output[20] )
    350          {
   \                     mbedtls_sha1_finish_ret: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
    351              int ret;
    352              uint32_t used;
    353              uint32_t high, low;
    354          
    355              /*
    356               * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
    357               */
    358              used = ctx->total[0] & 0x3F;
   \        0x6   0x7820             LDRB     R0,[R4, #+0]
   \        0x8   0xF000 0x003F      AND      R0,R0,#0x3F
    359          
    360              ctx->buffer[used++] = 0x80;
   \        0xC   0x2180             MOVS     R1,#+128
   \        0xE   0x1822             ADDS     R2,R4,R0
   \       0x10   0x7711             STRB     R1,[R2, #+28]
   \       0x12   0x1C40             ADDS     R0,R0,#+1
    361          
    362              if( used <= 56 )
   \       0x14   0x2839             CMP      R0,#+57
   \       0x16   0xD207             BCS.N    ??mbedtls_sha1_finish_ret_0
    363              {
    364                  /* Enough room for padding + length in current block */
    365                  memset( ctx->buffer + used, 0, 56 - used );
   \       0x18   0x2200             MOVS     R2,#+0
   \       0x1A   0xF1C0 0x0138      RSB      R1,R0,#+56
   \       0x1E   0x4420             ADD      R0,R4,R0
   \       0x20   0x301C             ADDS     R0,R0,#+28
   \       0x22   0x....'....        BL       __aeabi_memset
    366              }
   \       0x26   0xE013             B.N      ??mbedtls_sha1_finish_ret_1
    367              else
    368              {
    369                  /* We'll need an extra block */
    370                  memset( ctx->buffer + used, 0, 64 - used );
   \                     ??mbedtls_sha1_finish_ret_0: (+1)
   \       0x28   0x2200             MOVS     R2,#+0
   \       0x2A   0xF1C0 0x0140      RSB      R1,R0,#+64
   \       0x2E   0x4420             ADD      R0,R4,R0
   \       0x30   0x301C             ADDS     R0,R0,#+28
   \       0x32   0x....'....        BL       __aeabi_memset
    371          
    372                  if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
   \       0x36   0xF104 0x011C      ADD      R1,R4,#+28
   \       0x3A   0x4620             MOV      R0,R4
   \       0x3C   0x....'....        BL       mbedtls_internal_sha1_process
   \       0x40   0x2800             CMP      R0,#+0
   \       0x42   0xD166             BNE.N    ??mbedtls_sha1_finish_ret_2
    373                      return( ret );
    374          
    375                  memset( ctx->buffer, 0, 56 );
   \       0x44   0x2200             MOVS     R2,#+0
   \       0x46   0x2138             MOVS     R1,#+56
   \       0x48   0xF104 0x001C      ADD      R0,R4,#+28
   \       0x4C   0x....'....        BL       __aeabi_memset4
    376              }
    377          
    378              /*
    379               * Add message length
    380               */
    381              high = ( ctx->total[0] >> 29 )
    382                   | ( ctx->total[1] <<  3 );
   \                     ??mbedtls_sha1_finish_ret_1: (+1)
   \       0x50   0x6821             LDR      R1,[R4, #+0]
   \       0x52   0x6860             LDR      R0,[R4, #+4]
   \       0x54   0x00C0             LSLS     R0,R0,#+3
   \       0x56   0xEA40 0x7051      ORR      R0,R0,R1, LSR #+29
    383              low  = ( ctx->total[0] <<  3 );
   \       0x5A   0x00C9             LSLS     R1,R1,#+3
    384          
    385              PUT_UINT32_BE( high, ctx->buffer, 56 );
   \       0x5C   0x4602             MOV      R2,R0
   \       0x5E   0x0E12             LSRS     R2,R2,#+24
   \       0x60   0xF884 0x2054      STRB     R2,[R4, #+84]
   \       0x64   0x4602             MOV      R2,R0
   \       0x66   0x0C12             LSRS     R2,R2,#+16
   \       0x68   0xF884 0x2055      STRB     R2,[R4, #+85]
   \       0x6C   0x4602             MOV      R2,R0
   \       0x6E   0x0A12             LSRS     R2,R2,#+8
   \       0x70   0xF884 0x2056      STRB     R2,[R4, #+86]
   \       0x74   0xF884 0x0057      STRB     R0,[R4, #+87]
    386              PUT_UINT32_BE( low,  ctx->buffer, 60 );
   \       0x78   0x4608             MOV      R0,R1
   \       0x7A   0x0E00             LSRS     R0,R0,#+24
   \       0x7C   0xF884 0x0058      STRB     R0,[R4, #+88]
   \       0x80   0x4608             MOV      R0,R1
   \       0x82   0x0C00             LSRS     R0,R0,#+16
   \       0x84   0xF884 0x0059      STRB     R0,[R4, #+89]
   \       0x88   0x4608             MOV      R0,R1
   \       0x8A   0x0A00             LSRS     R0,R0,#+8
   \       0x8C   0xF884 0x005A      STRB     R0,[R4, #+90]
   \       0x90   0xF884 0x105B      STRB     R1,[R4, #+91]
    387          
    388              if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
   \       0x94   0xF104 0x011C      ADD      R1,R4,#+28
   \       0x98   0x4620             MOV      R0,R4
   \       0x9A   0x....'....        BL       mbedtls_internal_sha1_process
   \       0x9E   0x2800             CMP      R0,#+0
   \       0xA0   0xD137             BNE.N    ??mbedtls_sha1_finish_ret_2
    389                  return( ret );
    390          
    391              /*
    392               * Output final state
    393               */
    394              PUT_UINT32_BE( ctx->state[0], output,  0 );
   \       0xA2   0x68A0             LDR      R0,[R4, #+8]
   \       0xA4   0x0E00             LSRS     R0,R0,#+24
   \       0xA6   0x7028             STRB     R0,[R5, #+0]
   \       0xA8   0x68A0             LDR      R0,[R4, #+8]
   \       0xAA   0x0C00             LSRS     R0,R0,#+16
   \       0xAC   0x7068             STRB     R0,[R5, #+1]
   \       0xAE   0x68A0             LDR      R0,[R4, #+8]
   \       0xB0   0x0A00             LSRS     R0,R0,#+8
   \       0xB2   0x70A8             STRB     R0,[R5, #+2]
   \       0xB4   0x68A0             LDR      R0,[R4, #+8]
   \       0xB6   0x70E8             STRB     R0,[R5, #+3]
    395              PUT_UINT32_BE( ctx->state[1], output,  4 );
   \       0xB8   0x68E0             LDR      R0,[R4, #+12]
   \       0xBA   0x0E00             LSRS     R0,R0,#+24
   \       0xBC   0x7128             STRB     R0,[R5, #+4]
   \       0xBE   0x68E0             LDR      R0,[R4, #+12]
   \       0xC0   0x0C00             LSRS     R0,R0,#+16
   \       0xC2   0x7168             STRB     R0,[R5, #+5]
   \       0xC4   0x68E0             LDR      R0,[R4, #+12]
   \       0xC6   0x0A00             LSRS     R0,R0,#+8
   \       0xC8   0x71A8             STRB     R0,[R5, #+6]
   \       0xCA   0x68E0             LDR      R0,[R4, #+12]
   \       0xCC   0x71E8             STRB     R0,[R5, #+7]
    396              PUT_UINT32_BE( ctx->state[2], output,  8 );
   \       0xCE   0x6920             LDR      R0,[R4, #+16]
   \       0xD0   0x0E00             LSRS     R0,R0,#+24
   \       0xD2   0x7228             STRB     R0,[R5, #+8]
   \       0xD4   0x6920             LDR      R0,[R4, #+16]
   \       0xD6   0x0C00             LSRS     R0,R0,#+16
   \       0xD8   0x7268             STRB     R0,[R5, #+9]
   \       0xDA   0x6920             LDR      R0,[R4, #+16]
   \       0xDC   0x0A00             LSRS     R0,R0,#+8
   \       0xDE   0x72A8             STRB     R0,[R5, #+10]
   \       0xE0   0x6920             LDR      R0,[R4, #+16]
   \       0xE2   0x72E8             STRB     R0,[R5, #+11]
    397              PUT_UINT32_BE( ctx->state[3], output, 12 );
   \       0xE4   0x6960             LDR      R0,[R4, #+20]
   \       0xE6   0x0E00             LSRS     R0,R0,#+24
   \       0xE8   0x7328             STRB     R0,[R5, #+12]
   \       0xEA   0x6960             LDR      R0,[R4, #+20]
   \       0xEC   0x0C00             LSRS     R0,R0,#+16
   \       0xEE   0x7368             STRB     R0,[R5, #+13]
   \       0xF0   0x6960             LDR      R0,[R4, #+20]
   \       0xF2   0x0A00             LSRS     R0,R0,#+8
   \       0xF4   0x73A8             STRB     R0,[R5, #+14]
   \       0xF6   0x6960             LDR      R0,[R4, #+20]
   \       0xF8   0x73E8             STRB     R0,[R5, #+15]
    398              PUT_UINT32_BE( ctx->state[4], output, 16 );
   \       0xFA   0x69A0             LDR      R0,[R4, #+24]
   \       0xFC   0x0E00             LSRS     R0,R0,#+24
   \       0xFE   0x7428             STRB     R0,[R5, #+16]
   \      0x100   0x69A0             LDR      R0,[R4, #+24]
   \      0x102   0x0C00             LSRS     R0,R0,#+16
   \      0x104   0x7468             STRB     R0,[R5, #+17]
   \      0x106   0x69A0             LDR      R0,[R4, #+24]
   \      0x108   0x0A00             LSRS     R0,R0,#+8
   \      0x10A   0x74A8             STRB     R0,[R5, #+18]
   \      0x10C   0x69A0             LDR      R0,[R4, #+24]
   \      0x10E   0x74E8             STRB     R0,[R5, #+19]
    399          
    400              return( 0 );
   \      0x110   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_sha1_finish_ret_2: (+1)
   \      0x112   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    401          }
    402          
    403          #if !defined(MBEDTLS_DEPRECATED_REMOVED)

   \                                 In section .text, align 2, keep-with-next
    404          void mbedtls_sha1_finish( mbedtls_sha1_context *ctx,
    405                                    unsigned char output[20] )
    406          {
    407              mbedtls_sha1_finish_ret( ctx, output );
   \                     mbedtls_sha1_finish: (+1)
   \        0x0   0x....             B.N      mbedtls_sha1_finish_ret
    408          }
    409          #endif
    410          
    411          #endif /* !MBEDTLS_SHA1_ALT */
    412          
    413          /*
    414           * output = SHA-1( input buffer )
    415           */

   \                                 In section .text, align 2, keep-with-next
    416          int mbedtls_sha1_ret( const unsigned char *input,
    417                                size_t ilen,
    418                                unsigned char output[20] )
    419          {
   \                     mbedtls_sha1_ret: (+1)
   \        0x0   0xB5F0             PUSH     {R4-R7,LR}
   \        0x2   0xB097             SUB      SP,SP,#+92
   \        0x4   0x4605             MOV      R5,R0
   \        0x6   0x460E             MOV      R6,R1
   \        0x8   0x4617             MOV      R7,R2
    420              int ret;
    421              mbedtls_sha1_context ctx;
    422          
    423              mbedtls_sha1_init( &ctx );
   \        0xA   0x4668             MOV      R0,SP
   \        0xC   0x....'....        BL       mbedtls_sha1_init
    424          
    425              if( ( ret = mbedtls_sha1_starts_ret( &ctx ) ) != 0 )
   \       0x10   0x4668             MOV      R0,SP
   \       0x12   0x....'....        BL       mbedtls_sha1_starts_ret
   \       0x16   0x0004             MOVS     R4,R0
   \       0x18   0xD10B             BNE.N    ??mbedtls_sha1_ret_0
    426                  goto exit;
    427          
    428              if( ( ret = mbedtls_sha1_update_ret( &ctx, input, ilen ) ) != 0 )
   \       0x1A   0x4632             MOV      R2,R6
   \       0x1C   0x4629             MOV      R1,R5
   \       0x1E   0x4668             MOV      R0,SP
   \       0x20   0x....'....        BL       mbedtls_sha1_update_ret
   \       0x24   0x0004             MOVS     R4,R0
   \       0x26   0xD104             BNE.N    ??mbedtls_sha1_ret_0
    429                  goto exit;
    430          
    431              if( ( ret = mbedtls_sha1_finish_ret( &ctx, output ) ) != 0 )
   \       0x28   0x4639             MOV      R1,R7
   \       0x2A   0x4668             MOV      R0,SP
   \       0x2C   0x....'....        BL       mbedtls_sha1_finish_ret
   \       0x30   0x4604             MOV      R4,R0
    432                  goto exit;
    433          
    434          exit:
    435              mbedtls_sha1_free( &ctx );
   \                     ??mbedtls_sha1_ret_0: (+1)
   \       0x32   0x4668             MOV      R0,SP
   \       0x34   0x....'....        BL       mbedtls_sha1_free
    436          
    437              return( ret );
   \       0x38   0x4620             MOV      R0,R4
   \       0x3A   0xB017             ADD      SP,SP,#+92
   \       0x3C   0xBDF0             POP      {R4-R7,PC}       ;; return
    438          }
    439          
    440          #if !defined(MBEDTLS_DEPRECATED_REMOVED)

   \                                 In section .text, align 2, keep-with-next
    441          void mbedtls_sha1( const unsigned char *input,
    442                             size_t ilen,
    443                             unsigned char output[20] )
    444          {
    445              mbedtls_sha1_ret( input, ilen, output );
   \                     mbedtls_sha1: (+1)
   \        0x0   0x....             B.N      mbedtls_sha1_ret
    446          }
    447          #endif
    448          
    449          #if defined(MBEDTLS_SELF_TEST)
    450          /*
    451           * FIPS-180-1 test vectors
    452           */

   \                                 In section .rodata, align 4
    453          static const unsigned char sha1_test_buf[3][57] =
   \                     sha1_test_buf:
   \        0x0   0x61 0x62          DC8 "abc"
   \              0x63 0x00    
   \        0x4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \       0x14   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \       0x24   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \       0x39   0x61 0x62          DC8 61H, 62H, 63H, 64H, 62H, 63H, 64H, 65H
   \              0x63 0x64    
   \              0x62 0x63    
   \              0x64 0x65    
   \       0x41   0x63 0x64          DC8 63H, 64H, 65H, 66H, 64H, 65H, 66H, 67H
   \              0x65 0x66    
   \              0x64 0x65    
   \              0x66 0x67    
   \       0x49   0x65 0x66          DC8 65H, 66H, 67H, 68H, 66H, 67H, 68H, 69H
   \              0x67 0x68    
   \              0x66 0x67    
   \              0x68 0x69    
   \       0x51   0x67 0x68          DC8 67H, 68H, 69H, 6AH, 68H, 69H, 6AH, 6BH
   \              0x69 0x6A    
   \              0x68 0x69    
   \              0x6A 0x6B    
   \       0x59   0x69 0x6A          DC8 69H, 6AH, 6BH, 6CH, 6AH, 6BH, 6CH, 6DH
   \              0x6B 0x6C    
   \              0x6A 0x6B    
   \              0x6C 0x6D    
   \       0x61   0x6B 0x6C          DC8 6BH, 6CH, 6DH, 6EH, 6CH, 6DH, 6EH, 6FH
   \              0x6D 0x6E    
   \              0x6C 0x6D    
   \              0x6E 0x6F    
   \       0x69   0x6D 0x6E          DC8 6DH, 6EH, 6FH, 70H, 6EH, 6FH, 70H, 71H
   \              0x6F 0x70    
   \              0x6E 0x6F    
   \              0x70 0x71    
   \       0x71   0x00               DC8 0
   \       0x72   0x00               DC8 ""
   \       0x73   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \       0x83   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \       0x93   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \       0xA3   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
    454          {
    455              { "abc" },
    456              { "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq" },
    457              { "" }
    458          };
    459          

   \                                 In section .rodata, align 4
    460          static const size_t sha1_test_buflen[3] =
   \                     sha1_test_buflen:
   \        0x0   0x0000'0003        DC32 3, 56, 1000
   \              0x0000'0038  
   \              0x0000'03E8  
    461          {
    462              3, 56, 1000
    463          };
    464          

   \                                 In section .rodata, align 4
    465          static const unsigned char sha1_test_sum[3][20] =
   \                     sha1_test_sum:
   \        0x0   0xA9 0x99          DC8 169, 153, 62, 54, 71, 6, 129, 106, 186, 62, 37, 113, 120, 80, 194
   \              0x3E 0x36    
   \              0x47 0x06    
   \              0x81 0x6A    
   \              0xBA 0x3E    
   \              0x25 0x71    
   \              0x78 0x50    
   \              0xC2         
   \        0xF   0x6C 0x9C          DC8 108, 156, 208, 216, 157, 132, 152, 62, 68, 28, 59, 210, 110, 186
   \              0xD0 0xD8    
   \              0x9D 0x84    
   \              0x98 0x3E    
   \              0x44 0x1C    
   \              0x3B 0xD2    
   \              0x6E 0xBA    
   \       0x1D   0xAE 0x4A          DC8 174, 74, 161, 249, 81, 41, 229, 229, 70, 112, 241, 52, 170, 151, 60
   \              0xA1 0xF9    
   \              0x51 0x29    
   \              0xE5 0xE5    
   \              0x46 0x70    
   \              0xF1 0x34    
   \              0xAA 0x97    
   \              0x3C         
   \       0x2C   0xD4 0xC4          DC8 212, 196, 218, 164, 246, 30, 235, 43, 219, 173, 39, 49, 101, 52, 1
   \              0xDA 0xA4    
   \              0xF6 0x1E    
   \              0xEB 0x2B    
   \              0xDB 0xAD    
   \              0x27 0x31    
   \              0x65 0x34    
   \              0x01         
   \       0x3B   0x6F               DC8 111
    466          {
    467              { 0xA9, 0x99, 0x3E, 0x36, 0x47, 0x06, 0x81, 0x6A, 0xBA, 0x3E,
    468                0x25, 0x71, 0x78, 0x50, 0xC2, 0x6C, 0x9C, 0xD0, 0xD8, 0x9D },
    469              { 0x84, 0x98, 0x3E, 0x44, 0x1C, 0x3B, 0xD2, 0x6E, 0xBA, 0xAE,
    470                0x4A, 0xA1, 0xF9, 0x51, 0x29, 0xE5, 0xE5, 0x46, 0x70, 0xF1 },
    471              { 0x34, 0xAA, 0x97, 0x3C, 0xD4, 0xC4, 0xDA, 0xA4, 0xF6, 0x1E,
    472                0xEB, 0x2B, 0xDB, 0xAD, 0x27, 0x31, 0x65, 0x34, 0x01, 0x6F }
    473          };
    474          
    475          /*
    476           * Checkup routine
    477           */

   \                                 In section .text, align 2, keep-with-next
    478          int mbedtls_sha1_self_test( int verbose )
    479          {
   \                     mbedtls_sha1_self_test: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0xF5AD 0x6D8E      SUB      SP,SP,#+1136
   \        0x6   0x4605             MOV      R5,R0
    480              int i, j, buflen, ret = 0;
   \        0x8   0x2400             MOVS     R4,#+0
    481              unsigned char buf[1024];
    482              unsigned char sha1sum[20];
    483              mbedtls_sha1_context ctx;
    484          
    485              mbedtls_sha1_init( &ctx );
   \        0xA   0xA805             ADD      R0,SP,#+20
   \        0xC   0x....'....        BL       mbedtls_sha1_init
    486          
    487              /*
    488               * SHA-1
    489               */
    490              for( i = 0; i < 3; i++ )
   \       0x10   0x4626             MOV      R6,R4
   \       0x12   0xE016             B.N      ??mbedtls_sha1_self_test_0
    491              {
    492                  if( verbose != 0 )
    493                      mbedtls_printf( "  SHA-1 test #%d: ", i + 1 );
    494          
    495                  if( ( ret = mbedtls_sha1_starts_ret( &ctx ) ) != 0 )
    496                      goto fail;
    497          
    498                  if( i == 2 )
    499                  {
    500                      memset( buf, 'a', buflen = 1000 );
    501          
    502                      for( j = 0; j < 1000; j++ )
    503                      {
    504                          ret = mbedtls_sha1_update_ret( &ctx, buf, buflen );
    505                          if( ret != 0 )
    506                              goto fail;
    507                      }
    508                  }
    509                  else
    510                  {
    511                      ret = mbedtls_sha1_update_ret( &ctx, sha1_test_buf[i],
    512                                                     sha1_test_buflen[i] );
    513                      if( ret != 0 )
    514                          goto fail;
    515                  }
    516          
    517                  if( ( ret = mbedtls_sha1_finish_ret( &ctx, sha1sum ) ) != 0 )
   \                     ??mbedtls_sha1_self_test_1: (+1)
   \       0x14   0x4669             MOV      R1,SP
   \       0x16   0xA805             ADD      R0,SP,#+20
   \       0x18   0x....'....        BL       mbedtls_sha1_finish_ret
   \       0x1C   0x0004             MOVS     R4,R0
   \       0x1E   0xD141             BNE.N    ??mbedtls_sha1_self_test_2
    518                      goto fail;
    519          
    520                  if( memcmp( sha1sum, sha1_test_sum[i], 20 ) != 0 )
   \       0x20   0x2214             MOVS     R2,#+20
   \       0x22   0x....             LDR.N    R0,??DataTable3_4
   \       0x24   0xEB06 0x0186      ADD      R1,R6,R6, LSL #+2
   \       0x28   0xEB00 0x0181      ADD      R1,R0,R1, LSL #+2
   \       0x2C   0x4668             MOV      R0,SP
   \       0x2E   0x....'....        BL       memcmp
   \       0x32   0x2800             CMP      R0,#+0
   \       0x34   0xD135             BNE.N    ??mbedtls_sha1_self_test_3
    521                  {
    522                      ret = 1;
    523                      goto fail;
    524                  }
    525          
    526                  if( verbose != 0 )
   \       0x36   0x2D00             CMP      R5,#+0
   \       0x38   0xD002             BEQ.N    ??mbedtls_sha1_self_test_4
    527                      mbedtls_printf( "passed\n\r" );
   \       0x3A   0x....             LDR.N    R0,??DataTable3_5
   \       0x3C   0x....'....        BL       DbgConsole_Printf
   \                     ??mbedtls_sha1_self_test_4: (+1)
   \       0x40   0x1C76             ADDS     R6,R6,#+1
   \                     ??mbedtls_sha1_self_test_0: (+1)
   \       0x42   0x2E03             CMP      R6,#+3
   \       0x44   0xDA3B             BGE.N    ??mbedtls_sha1_self_test_5
   \       0x46   0x2D00             CMP      R5,#+0
   \       0x48   0xD003             BEQ.N    ??mbedtls_sha1_self_test_6
   \       0x4A   0x1C71             ADDS     R1,R6,#+1
   \       0x4C   0x....             LDR.N    R0,??DataTable3_6
   \       0x4E   0x....'....        BL       DbgConsole_Printf
   \                     ??mbedtls_sha1_self_test_6: (+1)
   \       0x52   0xA805             ADD      R0,SP,#+20
   \       0x54   0x....'....        BL       mbedtls_sha1_starts_ret
   \       0x58   0x0004             MOVS     R4,R0
   \       0x5A   0xD123             BNE.N    ??mbedtls_sha1_self_test_2
   \       0x5C   0x2E02             CMP      R6,#+2
   \       0x5E   0xD113             BNE.N    ??mbedtls_sha1_self_test_7
   \       0x60   0x2261             MOVS     R2,#+97
   \       0x62   0xF44F 0x717A      MOV      R1,#+1000
   \       0x66   0xA81C             ADD      R0,SP,#+112
   \       0x68   0x....'....        BL       __aeabi_memset4
   \       0x6C   0x2700             MOVS     R7,#+0
   \                     ??mbedtls_sha1_self_test_8: (+1)
   \       0x6E   0xF5B7 0x7F7A      CMP      R7,#+1000
   \       0x72   0xDACF             BGE.N    ??mbedtls_sha1_self_test_1
   \       0x74   0xF44F 0x727A      MOV      R2,#+1000
   \       0x78   0xA91C             ADD      R1,SP,#+112
   \       0x7A   0xA805             ADD      R0,SP,#+20
   \       0x7C   0x....'....        BL       mbedtls_sha1_update_ret
   \       0x80   0x0004             MOVS     R4,R0
   \       0x82   0xD10F             BNE.N    ??mbedtls_sha1_self_test_2
   \       0x84   0x1C7F             ADDS     R7,R7,#+1
   \       0x86   0xE7F2             B.N      ??mbedtls_sha1_self_test_8
   \                     ??mbedtls_sha1_self_test_7: (+1)
   \       0x88   0x....             LDR.N    R0,??DataTable3_7
   \       0x8A   0xF850 0x2026      LDR      R2,[R0, R6, LSL #+2]
   \       0x8E   0x....             LDR.N    R0,??DataTable3_8
   \       0x90   0x2139             MOVS     R1,#+57
   \       0x92   0x4371             MULS     R1,R1,R6
   \       0x94   0x4401             ADD      R1,R0,R1
   \       0x96   0xA805             ADD      R0,SP,#+20
   \       0x98   0x....'....        BL       mbedtls_sha1_update_ret
   \       0x9C   0x0004             MOVS     R4,R0
   \       0x9E   0xD101             BNE.N    ??mbedtls_sha1_self_test_2
   \       0xA0   0xE7B8             B.N      ??mbedtls_sha1_self_test_1
   \                     ??mbedtls_sha1_self_test_3: (+1)
   \       0xA2   0x2401             MOVS     R4,#+1
    528              }
    529          
    530              if( verbose != 0 )
    531                  mbedtls_printf( "\n\r" );
    532          
    533              goto exit;
    534          
    535          fail:
    536              if( verbose != 0 )
   \                     ??mbedtls_sha1_self_test_2: (+1)
   \       0xA4   0x2D00             CMP      R5,#+0
   \       0xA6   0xD002             BEQ.N    ??mbedtls_sha1_self_test_9
    537                  mbedtls_printf( "failed\n\r" );
   \       0xA8   0x....             LDR.N    R0,??DataTable3_9
   \       0xAA   0x....'....        BL       DbgConsole_Printf
    538          
    539          exit:
    540              mbedtls_sha1_free( &ctx );
   \                     ??mbedtls_sha1_self_test_9: (+1)
   \       0xAE   0xA805             ADD      R0,SP,#+20
   \       0xB0   0x....'....        BL       mbedtls_sha1_free
    541          
    542              return( ret );
   \       0xB4   0x4620             MOV      R0,R4
   \       0xB6   0xF50D 0x6D80      ADD      SP,SP,#+1024
   \       0xBA   0xB01D             ADD      SP,SP,#+116
   \       0xBC   0xBDF0             POP      {R4-R7,PC}       ;; return
   \                     ??mbedtls_sha1_self_test_5: (+1)
   \       0xBE   0x2D00             CMP      R5,#+0
   \       0xC0   0xD0F5             BEQ.N    ??mbedtls_sha1_self_test_9
   \       0xC2   0x....             ADR.N    R0,??DataTable3_1  ;; 0x0A, 0x0D, 0x00, 0x00
   \       0xC4   0x....'....        BL       DbgConsole_Printf
   \       0xC8   0xE7F1             B.N      ??mbedtls_sha1_self_test_9
    543          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \        0x0   0x6745'2301        DC32     0x67452301

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \        0x0   0xEFCD'AB89        DC32     0xefcdab89

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \        0x0   0x98BA'DCFE        DC32     0x98badcfe

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \        0x0   0x1032'5476        DC32     0x10325476

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \        0x0   0xC3D2'E1F0        DC32     0xc3d2e1f0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \        0x0   0x5A82'7999        DC32     0x5a827999

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \        0x0   0x6ED9'EBA1        DC32     0x6ed9eba1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \        0x0   0x0A 0x0D          DC8      0x0A, 0x0D, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \        0x0   0x8F1B'BCDC        DC32     0x8f1bbcdc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \        0x0   0xCA62'C1D6        DC32     0xca62c1d6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \        0x0   0x....'....        DC32     sha1_test_sum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \        0x0   0x....'....        DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \        0x0   0x....'....        DC32     sha1_test_buflen

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \        0x0   0x....'....        DC32     sha1_test_buf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_9:
   \        0x0   0x....'....        DC32     ?_3

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x20 0x20          DC8 "  SHA-1 test #%d: "
   \              0x53 0x48    
   \              0x41 0x2D    
   \              0x31 0x20    
   \              0x74 0x65    
   \              0x73 0x74    
   \              0x20 0x23    
   \              0x25 0x64    
   \              0x3A 0x20    
   \              0x00         
   \       0x13   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_1:
   \        0x0   0x70 0x61          DC8 "passed\012\015"
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x0A 0x0D    
   \              0x00         
   \        0x9   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \        0x0   0x0A 0x0D          DC8 "\012\015"
   \              0x00         
   \        0x3   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_3:
   \        0x0   0x66 0x61          DC8 "failed\012\015"
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x0A 0x0D    
   \              0x00         
   \        0x9   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    544          
    545          #endif /* MBEDTLS_SELF_TEST */
    546          
    547          #endif /* MBEDTLS_SHA1_C */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
     100   mbedtls_internal_sha1_process
       0   mbedtls_sha1
         0   -> mbedtls_sha1_ret
       0   mbedtls_sha1_clone
         0   -> __aeabi_memcpy4
       0   mbedtls_sha1_finish
         0   -> mbedtls_sha1_finish_ret
      16   mbedtls_sha1_finish_ret
        16   -> __aeabi_memset
        16   -> __aeabi_memset4
        16   -> mbedtls_internal_sha1_process
       0   mbedtls_sha1_free
         0   -> mbedtls_platform_zeroize
       0   mbedtls_sha1_init
         0   -> __aeabi_memset4
       0   mbedtls_sha1_process
         0   -> mbedtls_internal_sha1_process
     112   mbedtls_sha1_ret
       112   -> mbedtls_sha1_finish_ret
       112   -> mbedtls_sha1_free
       112   -> mbedtls_sha1_init
       112   -> mbedtls_sha1_starts_ret
       112   -> mbedtls_sha1_update_ret
    1160   mbedtls_sha1_self_test
      1160   -> DbgConsole_Printf
      1160   -> __aeabi_memset4
      1160   -> mbedtls_sha1_finish_ret
      1160   -> mbedtls_sha1_free
      1160   -> mbedtls_sha1_init
      1160   -> mbedtls_sha1_starts_ret
      1160   -> mbedtls_sha1_update_ret
      1160   -> memcmp
       0   mbedtls_sha1_starts
         0   -> mbedtls_sha1_starts_ret
       0   mbedtls_sha1_starts_ret
       0   mbedtls_sha1_update
         0   -> mbedtls_sha1_update_ret
      24   mbedtls_sha1_update_ret
        24   -> __aeabi_memcpy
        24   -> mbedtls_internal_sha1_process


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable2
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
      20  ?_0
      12  ?_1
       4  ?_2
      12  ?_3
    4302  mbedtls_internal_sha1_process
       2  mbedtls_sha1
       6  mbedtls_sha1_clone
       2  mbedtls_sha1_finish
     276  mbedtls_sha1_finish_ret
      12  mbedtls_sha1_free
       8  mbedtls_sha1_init
       4  mbedtls_sha1_process
      62  mbedtls_sha1_ret
     202  mbedtls_sha1_self_test
       2  mbedtls_sha1_starts
      30  mbedtls_sha1_starts_ret
       2  mbedtls_sha1_update
     140  mbedtls_sha1_update_ret
     172  sha1_test_buf
      12  sha1_test_buflen
      60  sha1_test_sum

 
   292 bytes in section .rodata
 5 114 bytes in section .text
 
 5 114 bytes of CODE  memory
   292 bytes of CONST memory

Errors: none
Warnings: none
