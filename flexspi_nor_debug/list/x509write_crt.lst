###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.3.193/W32 for ARM         10/Jun/2019  13:49:00
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\Development\smart_washing_machine_3080\mbedtls\library\x509write_crt.c
#    Command line =  
#        -f C:\Users\nxf42695\AppData\Local\Temp\1\EW7947.tmp
#        (C:\Development\smart_washing_machine_3080\mbedtls\library\x509write_crt.c
#        -D DEBUG -D USE_RTOS -D XIP_EXTERNAL_FLASH=1 -D
#        XIP_BOOT_HEADER_ENABLE=1 -D CPU_MIMXRT1052DVL6B -D FSL_RTOS_FREE_RTOS
#        -D PRINTF_ADVANCED_ENABLE -D
#        "MBEDTLS_CONFIG_FILE=\"ksdk_mbedtls_config.h\"" -lC
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list -lA
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list
#        --diag_suppress Pa082,Pa050 -o
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_d16 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" --preinclude
#        C:\Development\smart_washing_machine_3080/source\app_preinclude.h -I
#        C:\Development\smart_washing_machine_3080/board\ -I
#        C:\Development\smart_washing_machine_3080/source\ -I
#        C:\Development\smart_washing_machine_3080/CMSIS\ -I
#        C:\Development\smart_washing_machine_3080/amazon-freertos/freertos/portable\
#        -I C:\Development\smart_washing_machine_3080/amazon-freertos/include\
#        -I C:\Development\smart_washing_machine_3080/component/lists\ -I
#        C:\Development\smart_washing_machine_3080/component/serial_manager\ -I
#        C:\Development\smart_washing_machine_3080/component/uart\ -I
#        C:\Development\smart_washing_machine_3080/component/kv\ -I
#        C:\Development\smart_washing_machine_3080/component/kv/include\ -I
#        C:\Development\smart_washing_machine_3080/device\ -I
#        C:\Development\smart_washing_machine_3080/doc\ -I
#        C:\Development\smart_washing_machine_3080/drivers\ -I
#        C:\Development\smart_washing_machine_3080/src\ -I
#        C:\Development\smart_washing_machine_3080/startup\ -I
#        C:\Development\smart_washing_machine_3080/utilities\ -I
#        C:\Development\smart_washing_machine_3080/xip\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\atm\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_model\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_sign\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\infra\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\mqtt\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\external_libs\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\coap_cloud\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\CoAPPacket\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\server\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\os\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\awss_reset\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\mbedtls\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\ -I
#        C:\Development\smart_washing_machine_3080\mbedtls\port\ksdk\ -Om)
#    Locale       =  C
#    List file    =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list\x509write_crt.lst
#    Object file  =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj\x509write_crt.o
#
###############################################################################

C:\Development\smart_washing_machine_3080\mbedtls\library\x509write_crt.c
      1          /*
      2           *  X.509 certificate writing
      3           *
      4           *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
      5           *  SPDX-License-Identifier: Apache-2.0
      6           *
      7           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
      8           *  not use this file except in compliance with the License.
      9           *  You may obtain a copy of the License at
     10           *
     11           *  http://www.apache.org/licenses/LICENSE-2.0
     12           *
     13           *  Unless required by applicable law or agreed to in writing, software
     14           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     15           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     16           *  See the License for the specific language governing permissions and
     17           *  limitations under the License.
     18           *
     19           *  This file is part of mbed TLS (https://tls.mbed.org)
     20           */
     21          /*
     22           * References:
     23           * - certificates: RFC 5280, updated by RFC 6818
     24           * - CSRs: PKCS#10 v1.7 aka RFC 2986
     25           * - attributes: PKCS#9 v2.0 aka RFC 2985
     26           */
     27          
     28          #if !defined(MBEDTLS_CONFIG_FILE)
     29          #include "mbedtls/config.h"
     30          #else
     31          #include MBEDTLS_CONFIG_FILE
     32          #endif
     33          
     34          #if defined(MBEDTLS_X509_CRT_WRITE_C)
     35          
     36          #include "mbedtls/x509_crt.h"
     37          #include "mbedtls/oid.h"
     38          #include "mbedtls/asn1write.h"
     39          #include "mbedtls/sha1.h"
     40          #include "mbedtls/platform_util.h"
     41          
     42          #include <string.h>
     43          
     44          #if defined(MBEDTLS_PEM_WRITE_C)
     45          #include "mbedtls/pem.h"
     46          #endif /* MBEDTLS_PEM_WRITE_C */
     47          

   \                                 In section .text, align 2, keep-with-next
     48          void mbedtls_x509write_crt_init( mbedtls_x509write_cert *ctx )
     49          {
   \                     mbedtls_x509write_crt_init: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x4604             MOV      R4,R0
     50              memset( ctx, 0, sizeof( mbedtls_x509write_cert ) );
   \        0x4   0x2200             MOVS     R2,#+0
   \        0x6   0x2148             MOVS     R1,#+72
   \        0x8   0x....'....        BL       __aeabi_memset4
     51          
     52              mbedtls_mpi_init( &ctx->serial );
   \        0xC   0x1D20             ADDS     R0,R4,#+4
   \        0xE   0x....'....        BL       mbedtls_mpi_init
     53              ctx->version = MBEDTLS_X509_CRT_VERSION_3;
   \       0x12   0x2002             MOVS     R0,#+2
   \       0x14   0x6020             STR      R0,[R4, #+0]
     54          }
   \       0x16   0xBD10             POP      {R4,PC}          ;; return
     55          

   \                                 In section .text, align 2, keep-with-next
     56          void mbedtls_x509write_crt_free( mbedtls_x509write_cert *ctx )
     57          {
   \                     mbedtls_x509write_crt_free: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x4604             MOV      R4,R0
     58              mbedtls_mpi_free( &ctx->serial );
   \        0x4   0x1D20             ADDS     R0,R4,#+4
   \        0x6   0x....'....        BL       mbedtls_mpi_free
     59          
     60              mbedtls_asn1_free_named_data_list( &ctx->subject );
   \        0xA   0xF104 0x0018      ADD      R0,R4,#+24
   \        0xE   0x....'....        BL       mbedtls_asn1_free_named_data_list
     61              mbedtls_asn1_free_named_data_list( &ctx->issuer );
   \       0x12   0xF104 0x001C      ADD      R0,R4,#+28
   \       0x16   0x....'....        BL       mbedtls_asn1_free_named_data_list
     62              mbedtls_asn1_free_named_data_list( &ctx->extensions );
   \       0x1A   0xF104 0x0044      ADD      R0,R4,#+68
   \       0x1E   0x....'....        BL       mbedtls_asn1_free_named_data_list
     63          
     64              mbedtls_platform_zeroize( ctx, sizeof( mbedtls_x509write_cert ) );
   \       0x22   0x2148             MOVS     R1,#+72
   \       0x24   0x4620             MOV      R0,R4
   \       0x26   0xE8BD 0x4010      POP      {R4,LR}
   \       0x2A   0x....'....        B.W      mbedtls_platform_zeroize
     65          }
     66          

   \                                 In section .text, align 2, keep-with-next
     67          void mbedtls_x509write_crt_set_version( mbedtls_x509write_cert *ctx, int version )
     68          {
     69              ctx->version = version;
   \                     mbedtls_x509write_crt_set_version: (+1)
   \        0x0   0x6001             STR      R1,[R0, #+0]
     70          }
   \        0x2   0x4770             BX       LR               ;; return
     71          

   \                                 In section .text, align 2, keep-with-next
     72          void mbedtls_x509write_crt_set_md_alg( mbedtls_x509write_cert *ctx, mbedtls_md_type_t md_alg )
     73          {
     74              ctx->md_alg = md_alg;
   \                     mbedtls_x509write_crt_set_md_alg: (+1)
   \        0x0   0xF880 0x1020      STRB     R1,[R0, #+32]
     75          }
   \        0x4   0x4770             BX       LR               ;; return
     76          

   \                                 In section .text, align 2, keep-with-next
     77          void mbedtls_x509write_crt_set_subject_key( mbedtls_x509write_cert *ctx, mbedtls_pk_context *key )
     78          {
     79              ctx->subject_key = key;
   \                     mbedtls_x509write_crt_set_subject_key: (+1)
   \        0x0   0x6101             STR      R1,[R0, #+16]
     80          }
   \        0x2   0x4770             BX       LR               ;; return
     81          

   \                                 In section .text, align 2, keep-with-next
     82          void mbedtls_x509write_crt_set_issuer_key( mbedtls_x509write_cert *ctx, mbedtls_pk_context *key )
     83          {
     84              ctx->issuer_key = key;
   \                     mbedtls_x509write_crt_set_issuer_key: (+1)
   \        0x0   0x6141             STR      R1,[R0, #+20]
     85          }
   \        0x2   0x4770             BX       LR               ;; return
     86          

   \                                 In section .text, align 2, keep-with-next
     87          int mbedtls_x509write_crt_set_subject_name( mbedtls_x509write_cert *ctx,
     88                                              const char *subject_name )
     89          {
     90              return mbedtls_x509_string_to_names( &ctx->subject, subject_name );
   \                     mbedtls_x509write_crt_set_subject_name: (+1)
   \        0x0   0x3018             ADDS     R0,R0,#+24
   \        0x2   0x....'....        B.W      mbedtls_x509_string_to_names
     91          }
     92          

   \                                 In section .text, align 2, keep-with-next
     93          int mbedtls_x509write_crt_set_issuer_name( mbedtls_x509write_cert *ctx,
     94                                             const char *issuer_name )
     95          {
     96              return mbedtls_x509_string_to_names( &ctx->issuer, issuer_name );
   \                     mbedtls_x509write_crt_set_issuer_name: (+1)
   \        0x0   0x301C             ADDS     R0,R0,#+28
   \        0x2   0x....'....        B.W      mbedtls_x509_string_to_names
     97          }
     98          

   \                                 In section .text, align 2, keep-with-next
     99          int mbedtls_x509write_crt_set_serial( mbedtls_x509write_cert *ctx, const mbedtls_mpi *serial )
    100          {
   \                     mbedtls_x509write_crt_set_serial: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    101              int ret;
    102          
    103              if( ( ret = mbedtls_mpi_copy( &ctx->serial, serial ) ) != 0 )
   \        0x2   0x1D00             ADDS     R0,R0,#+4
   \        0x4   0x....'....        BL       mbedtls_mpi_copy
   \        0x8   0x2800             CMP      R0,#+0
   \        0xA   0xD100             BNE.N    ??mbedtls_x509write_crt_set_serial_0
    104                  return( ret );
    105          
    106              return( 0 );
   \        0xC   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_x509write_crt_set_serial_0: (+1)
   \        0xE   0xBD02             POP      {R1,PC}          ;; return
    107          }
    108          

   \                                 In section .text, align 2, keep-with-next
    109          int mbedtls_x509write_crt_set_validity( mbedtls_x509write_cert *ctx, const char *not_before,
    110                                          const char *not_after )
    111          {
   \                     mbedtls_x509write_crt_set_validity: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
   \        0x6   0x4616             MOV      R6,R2
    112              if( strlen( not_before ) != MBEDTLS_X509_RFC5280_UTC_TIME_LEN - 1 ||
    113                  strlen( not_after )  != MBEDTLS_X509_RFC5280_UTC_TIME_LEN - 1 )
   \        0x8   0x4628             MOV      R0,R5
   \        0xA   0x....'....        BL       strlen
   \        0xE   0x280E             CMP      R0,#+14
   \       0x10   0xD104             BNE.N    ??mbedtls_x509write_crt_set_validity_0
   \       0x12   0x4630             MOV      R0,R6
   \       0x14   0x....'....        BL       strlen
   \       0x18   0x280E             CMP      R0,#+14
   \       0x1A   0xD002             BEQ.N    ??mbedtls_x509write_crt_set_validity_1
    114              {
    115                  return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   \                     ??mbedtls_x509write_crt_set_validity_0: (+1)
   \       0x1C   0x....'....        LDR.W    R0,??DataTable8  ;; 0xffffd800
   \       0x20   0xBD70             POP      {R4-R6,PC}
    116              }
    117              strncpy( ctx->not_before, not_before, MBEDTLS_X509_RFC5280_UTC_TIME_LEN );
   \                     ??mbedtls_x509write_crt_set_validity_1: (+1)
   \       0x22   0x220F             MOVS     R2,#+15
   \       0x24   0x4629             MOV      R1,R5
   \       0x26   0xF104 0x0021      ADD      R0,R4,#+33
   \       0x2A   0x....'....        BL       strncpy
    118              strncpy( ctx->not_after , not_after , MBEDTLS_X509_RFC5280_UTC_TIME_LEN );
   \       0x2E   0x220F             MOVS     R2,#+15
   \       0x30   0x4631             MOV      R1,R6
   \       0x32   0xF104 0x0031      ADD      R0,R4,#+49
   \       0x36   0x....'....        BL       strncpy
    119              ctx->not_before[MBEDTLS_X509_RFC5280_UTC_TIME_LEN - 1] = 'Z';
   \       0x3A   0x205A             MOVS     R0,#+90
   \       0x3C   0xF884 0x002F      STRB     R0,[R4, #+47]
    120              ctx->not_after[MBEDTLS_X509_RFC5280_UTC_TIME_LEN - 1] = 'Z';
   \       0x40   0xF884 0x003F      STRB     R0,[R4, #+63]
    121          
    122              return( 0 );
   \       0x44   0x2000             MOVS     R0,#+0
   \       0x46   0xBD70             POP      {R4-R6,PC}       ;; return
    123          }
    124          

   \                                 In section .text, align 2, keep-with-next
    125          int mbedtls_x509write_crt_set_extension( mbedtls_x509write_cert *ctx,
    126                                           const char *oid, size_t oid_len,
    127                                           int critical,
    128                                           const unsigned char *val, size_t val_len )
    129          {
   \                     mbedtls_x509write_crt_set_extension: (+1)
   \        0x0   0xB53E             PUSH     {R1-R5,LR}
   \        0x2   0x9C06             LDR      R4,[SP, #+24]
   \        0x4   0x9D07             LDR      R5,[SP, #+28]
    130              return mbedtls_x509_set_extension( &ctx->extensions, oid, oid_len,
    131                                         critical, val, val_len );
   \        0x6   0x9501             STR      R5,[SP, #+4]
   \        0x8   0x9400             STR      R4,[SP, #+0]
   \        0xA   0x3044             ADDS     R0,R0,#+68
   \        0xC   0x....'....        BL       mbedtls_x509_set_extension
   \       0x10   0xBD3E             POP      {R1-R5,PC}       ;; return
    132          }
    133          

   \                                 In section .text, align 2, keep-with-next
    134          int mbedtls_x509write_crt_set_basic_constraints( mbedtls_x509write_cert *ctx,
    135                                                   int is_ca, int max_pathlen )
    136          {
   \                     mbedtls_x509write_crt_set_basic_constraints: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0xB086             SUB      SP,SP,#+24
   \        0x4   0x4605             MOV      R5,R0
   \        0x6   0x460C             MOV      R4,R1
   \        0x8   0x4616             MOV      R6,R2
    137              int ret;
    138              unsigned char buf[9];
    139              unsigned char *c = buf + sizeof(buf);
   \        0xA   0xF10D 0x0015      ADD      R0,SP,#+21
   \        0xE   0x9002             STR      R0,[SP, #+8]
    140              size_t len = 0;
   \       0x10   0x2700             MOVS     R7,#+0
    141          
    142              memset( buf, 0, sizeof(buf) );
   \       0x12   0x463A             MOV      R2,R7
   \       0x14   0x2109             MOVS     R1,#+9
   \       0x16   0xA803             ADD      R0,SP,#+12
   \       0x18   0x....'....        BL       __aeabi_memset4
    143          
    144              if( is_ca && max_pathlen > 127 )
   \       0x1C   0x2C00             CMP      R4,#+0
   \       0x1E   0xD004             BEQ.N    ??mbedtls_x509write_crt_set_basic_constraints_0
   \       0x20   0x2E80             CMP      R6,#+128
   \       0x22   0xDB02             BLT.N    ??mbedtls_x509write_crt_set_basic_constraints_0
    145                  return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   \       0x24   0x....'....        LDR.W    R0,??DataTable8  ;; 0xffffd800
   \       0x28   0xE02E             B.N      ??mbedtls_x509write_crt_set_basic_constraints_1
    146          
    147              if( is_ca )
   \                     ??mbedtls_x509write_crt_set_basic_constraints_0: (+1)
   \       0x2A   0x2C00             CMP      R4,#+0
   \       0x2C   0xD010             BEQ.N    ??mbedtls_x509write_crt_set_basic_constraints_2
    148              {
    149                  if( max_pathlen >= 0 )
   \       0x2E   0x2E00             CMP      R6,#+0
   \       0x30   0xD406             BMI.N    ??mbedtls_x509write_crt_set_basic_constraints_3
    150                  {
    151                      MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_int( &c, buf, max_pathlen ) );
   \       0x32   0x4632             MOV      R2,R6
   \       0x34   0xA903             ADD      R1,SP,#+12
   \       0x36   0xA802             ADD      R0,SP,#+8
   \       0x38   0x....'....        BL       mbedtls_asn1_write_int
   \       0x3C   0x0007             MOVS     R7,R0
   \       0x3E   0xD423             BMI.N    ??mbedtls_x509write_crt_set_basic_constraints_1
    152                  }
    153                  MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_bool( &c, buf, 1 ) );
   \                     ??mbedtls_x509write_crt_set_basic_constraints_3: (+1)
   \       0x40   0x2201             MOVS     R2,#+1
   \       0x42   0xA903             ADD      R1,SP,#+12
   \       0x44   0xA802             ADD      R0,SP,#+8
   \       0x46   0x....'....        BL       mbedtls_asn1_write_bool
   \       0x4A   0x2800             CMP      R0,#+0
   \       0x4C   0xD41C             BMI.N    ??mbedtls_x509write_crt_set_basic_constraints_1
   \       0x4E   0x19C7             ADDS     R7,R0,R7
    154              }
    155          
    156              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &c, buf, len ) );
   \                     ??mbedtls_x509write_crt_set_basic_constraints_2: (+1)
   \       0x50   0x463A             MOV      R2,R7
   \       0x52   0xA903             ADD      R1,SP,#+12
   \       0x54   0xA802             ADD      R0,SP,#+8
   \       0x56   0x....'....        BL       mbedtls_asn1_write_len
   \       0x5A   0x2800             CMP      R0,#+0
   \       0x5C   0xD414             BMI.N    ??mbedtls_x509write_crt_set_basic_constraints_1
   \       0x5E   0x19C7             ADDS     R7,R0,R7
    157              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &c, buf, MBEDTLS_ASN1_CONSTRUCTED |
    158                                                          MBEDTLS_ASN1_SEQUENCE ) );
   \       0x60   0x2230             MOVS     R2,#+48
   \       0x62   0xA903             ADD      R1,SP,#+12
   \       0x64   0xA802             ADD      R0,SP,#+8
   \       0x66   0x....'....        BL       mbedtls_asn1_write_tag
   \       0x6A   0x2800             CMP      R0,#+0
   \       0x6C   0xD40C             BMI.N    ??mbedtls_x509write_crt_set_basic_constraints_1
   \       0x6E   0x19C7             ADDS     R7,R0,R7
    159          
    160              return mbedtls_x509write_crt_set_extension( ctx, MBEDTLS_OID_BASIC_CONSTRAINTS,
    161                                                  MBEDTLS_OID_SIZE( MBEDTLS_OID_BASIC_CONSTRAINTS ),
    162                                                  0, buf + sizeof(buf) - len, len );
   \       0x70   0x9701             STR      R7,[SP, #+4]
   \       0x72   0xA803             ADD      R0,SP,#+12
   \       0x74   0x427F             RSBS     R7,R7,#+0
   \       0x76   0x4438             ADD      R0,R0,R7
   \       0x78   0x3009             ADDS     R0,R0,#+9
   \       0x7A   0x9000             STR      R0,[SP, #+0]
   \       0x7C   0x2300             MOVS     R3,#+0
   \       0x7E   0x2203             MOVS     R2,#+3
   \       0x80   0x....             ADR.N    R1,??DataTable6  ;; "U\035\023"
   \       0x82   0x4628             MOV      R0,R5
   \       0x84   0x....'....        BL       mbedtls_x509write_crt_set_extension
   \                     ??mbedtls_x509write_crt_set_basic_constraints_1: (+1)
   \       0x88   0xB007             ADD      SP,SP,#+28
   \       0x8A   0xBDF0             POP      {R4-R7,PC}       ;; return
    163          }
    164          
    165          #if defined(MBEDTLS_SHA1_C)

   \                                 In section .text, align 2, keep-with-next
    166          int mbedtls_x509write_crt_set_subject_key_identifier( mbedtls_x509write_cert *ctx )
    167          {
   \                     mbedtls_x509write_crt_set_subject_key_identifier: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0xF5AD 0x6D84      SUB      SP,SP,#+1056
   \        0x6   0x4604             MOV      R4,R0
    168              int ret;
    169              unsigned char buf[MBEDTLS_MPI_MAX_SIZE * 2 + 20]; /* tag, length + 2xMPI */
    170              unsigned char *c = buf + sizeof(buf);
   \        0x8   0xF50D 0x6084      ADD      R0,SP,#+1056
   \        0xC   0x9002             STR      R0,[SP, #+8]
    171              size_t len = 0;
    172          
    173              memset( buf, 0, sizeof(buf) );
   \        0xE   0x2200             MOVS     R2,#+0
   \       0x10   0xF240 0x4114      MOVW     R1,#+1044
   \       0x14   0xA803             ADD      R0,SP,#+12
   \       0x16   0x....'....        BL       __aeabi_memset4
    174              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_pk_write_pubkey( &c, buf, ctx->subject_key ) );
   \       0x1A   0x6922             LDR      R2,[R4, #+16]
   \       0x1C   0xA903             ADD      R1,SP,#+12
   \       0x1E   0xA802             ADD      R0,SP,#+8
   \       0x20   0x....'....        BL       mbedtls_pk_write_pubkey
   \       0x24   0x2800             CMP      R0,#+0
   \       0x26   0xD42B             BMI.N    ??mbedtls_x509write_crt_set_subject_key_identif_0
    175          
    176              ret = mbedtls_sha1_ret( buf + sizeof( buf ) - len, len,
    177                                      buf + sizeof( buf ) - 20 );
   \       0x28   0xAAFF             ADD      R2,SP,#+1020
   \       0x2A   0x3210             ADDS     R2,R2,#+16
   \       0x2C   0x4601             MOV      R1,R0
   \       0x2E   0xAB03             ADD      R3,SP,#+12
   \       0x30   0x4240             RSBS     R0,R0,#+0
   \       0x32   0x4418             ADD      R0,R3,R0
   \       0x34   0xF200 0x4014      ADDW     R0,R0,#+1044
   \       0x38   0x....'....        BL       mbedtls_sha1_ret
    178              if( ret != 0 )
   \       0x3C   0x2800             CMP      R0,#+0
   \       0x3E   0xD11F             BNE.N    ??mbedtls_x509write_crt_set_subject_key_identif_0
    179                  return( ret );
    180              c = buf + sizeof( buf ) - 20;
   \       0x40   0xA8FF             ADD      R0,SP,#+1020
   \       0x42   0x3010             ADDS     R0,R0,#+16
   \       0x44   0x9002             STR      R0,[SP, #+8]
    181              len = 20;
    182          
    183              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &c, buf, len ) );
   \       0x46   0x2214             MOVS     R2,#+20
   \       0x48   0xA903             ADD      R1,SP,#+12
   \       0x4A   0xA802             ADD      R0,SP,#+8
   \       0x4C   0x....'....        BL       mbedtls_asn1_write_len
   \       0x50   0x0005             MOVS     R5,R0
   \       0x52   0xD415             BMI.N    ??mbedtls_x509write_crt_set_subject_key_identif_0
   \       0x54   0x3514             ADDS     R5,R5,#+20
    184              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &c, buf, MBEDTLS_ASN1_OCTET_STRING ) );
   \       0x56   0x2204             MOVS     R2,#+4
   \       0x58   0xA903             ADD      R1,SP,#+12
   \       0x5A   0xA802             ADD      R0,SP,#+8
   \       0x5C   0x....'....        BL       mbedtls_asn1_write_tag
   \       0x60   0x2800             CMP      R0,#+0
   \       0x62   0xD40D             BMI.N    ??mbedtls_x509write_crt_set_subject_key_identif_0
   \       0x64   0x1945             ADDS     R5,R0,R5
    185          
    186              return mbedtls_x509write_crt_set_extension( ctx, MBEDTLS_OID_SUBJECT_KEY_IDENTIFIER,
    187                                                  MBEDTLS_OID_SIZE( MBEDTLS_OID_SUBJECT_KEY_IDENTIFIER ),
    188                                                  0, buf + sizeof(buf) - len, len );
   \       0x66   0x9501             STR      R5,[SP, #+4]
   \       0x68   0xA803             ADD      R0,SP,#+12
   \       0x6A   0x426D             RSBS     R5,R5,#+0
   \       0x6C   0x4428             ADD      R0,R0,R5
   \       0x6E   0xF200 0x4014      ADDW     R0,R0,#+1044
   \       0x72   0x9000             STR      R0,[SP, #+0]
   \       0x74   0x2300             MOVS     R3,#+0
   \       0x76   0x2203             MOVS     R2,#+3
   \       0x78   0x....             ADR.N    R1,??DataTable6_1  ;; "U\035\016"
   \       0x7A   0x4620             MOV      R0,R4
   \       0x7C   0x....'....        BL       mbedtls_x509write_crt_set_extension
   \                     ??mbedtls_x509write_crt_set_subject_key_identif_0: (+1)
   \       0x80   0xF50D 0x6D80      ADD      SP,SP,#+1024
   \       0x84   0xB009             ADD      SP,SP,#+36
   \       0x86   0xBD30             POP      {R4,R5,PC}       ;; return
    189          }
    190          

   \                                 In section .text, align 2, keep-with-next
    191          int mbedtls_x509write_crt_set_authority_key_identifier( mbedtls_x509write_cert *ctx )
    192          {
   \                     mbedtls_x509write_crt_set_authority_key_identifier: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0xF5AD 0x6D84      SUB      SP,SP,#+1056
   \        0x6   0x4604             MOV      R4,R0
    193              int ret;
    194              unsigned char buf[MBEDTLS_MPI_MAX_SIZE * 2 + 20]; /* tag, length + 2xMPI */
    195              unsigned char *c = buf + sizeof( buf );
   \        0x8   0xF50D 0x6084      ADD      R0,SP,#+1056
   \        0xC   0x9002             STR      R0,[SP, #+8]
    196              size_t len = 0;
    197          
    198              memset( buf, 0, sizeof(buf) );
   \        0xE   0x2200             MOVS     R2,#+0
   \       0x10   0xF240 0x4114      MOVW     R1,#+1044
   \       0x14   0xA803             ADD      R0,SP,#+12
   \       0x16   0x....'....        BL       __aeabi_memset4
    199              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_pk_write_pubkey( &c, buf, ctx->issuer_key ) );
   \       0x1A   0x6962             LDR      R2,[R4, #+20]
   \       0x1C   0xA903             ADD      R1,SP,#+12
   \       0x1E   0xA802             ADD      R0,SP,#+8
   \       0x20   0x....'....        BL       mbedtls_pk_write_pubkey
   \       0x24   0x2800             CMP      R0,#+0
   \       0x26   0xD43B             BMI.N    ??mbedtls_x509write_crt_set_authority_key_ident_0
    200          
    201              ret = mbedtls_sha1_ret( buf + sizeof( buf ) - len, len,
    202                                      buf + sizeof( buf ) - 20 );
   \       0x28   0xAAFF             ADD      R2,SP,#+1020
   \       0x2A   0x3210             ADDS     R2,R2,#+16
   \       0x2C   0x4601             MOV      R1,R0
   \       0x2E   0xAB03             ADD      R3,SP,#+12
   \       0x30   0x4240             RSBS     R0,R0,#+0
   \       0x32   0x4418             ADD      R0,R3,R0
   \       0x34   0xF200 0x4014      ADDW     R0,R0,#+1044
   \       0x38   0x....'....        BL       mbedtls_sha1_ret
    203              if( ret != 0 )
   \       0x3C   0x2800             CMP      R0,#+0
   \       0x3E   0xD12F             BNE.N    ??mbedtls_x509write_crt_set_authority_key_ident_0
    204                  return( ret );
    205              c = buf + sizeof( buf ) - 20;
   \       0x40   0xA8FF             ADD      R0,SP,#+1020
   \       0x42   0x3010             ADDS     R0,R0,#+16
   \       0x44   0x9002             STR      R0,[SP, #+8]
    206              len = 20;
    207          
    208              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &c, buf, len ) );
   \       0x46   0x2214             MOVS     R2,#+20
   \       0x48   0xA903             ADD      R1,SP,#+12
   \       0x4A   0xA802             ADD      R0,SP,#+8
   \       0x4C   0x....'....        BL       mbedtls_asn1_write_len
   \       0x50   0x0005             MOVS     R5,R0
   \       0x52   0xD425             BMI.N    ??mbedtls_x509write_crt_set_authority_key_ident_0
   \       0x54   0x3514             ADDS     R5,R5,#+20
    209              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &c, buf, MBEDTLS_ASN1_CONTEXT_SPECIFIC | 0 ) );
   \       0x56   0x2280             MOVS     R2,#+128
   \       0x58   0xA903             ADD      R1,SP,#+12
   \       0x5A   0xA802             ADD      R0,SP,#+8
   \       0x5C   0x....'....        BL       mbedtls_asn1_write_tag
   \       0x60   0x2800             CMP      R0,#+0
   \       0x62   0xD41D             BMI.N    ??mbedtls_x509write_crt_set_authority_key_ident_0
   \       0x64   0x1945             ADDS     R5,R0,R5
    210          
    211              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &c, buf, len ) );
   \       0x66   0x462A             MOV      R2,R5
   \       0x68   0xA903             ADD      R1,SP,#+12
   \       0x6A   0xA802             ADD      R0,SP,#+8
   \       0x6C   0x....'....        BL       mbedtls_asn1_write_len
   \       0x70   0x2800             CMP      R0,#+0
   \       0x72   0xD415             BMI.N    ??mbedtls_x509write_crt_set_authority_key_ident_0
   \       0x74   0x1945             ADDS     R5,R0,R5
    212              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &c, buf, MBEDTLS_ASN1_CONSTRUCTED |
    213                                                          MBEDTLS_ASN1_SEQUENCE ) );
   \       0x76   0x2230             MOVS     R2,#+48
   \       0x78   0xA903             ADD      R1,SP,#+12
   \       0x7A   0xA802             ADD      R0,SP,#+8
   \       0x7C   0x....'....        BL       mbedtls_asn1_write_tag
   \       0x80   0x2800             CMP      R0,#+0
   \       0x82   0xD40D             BMI.N    ??mbedtls_x509write_crt_set_authority_key_ident_0
   \       0x84   0x1945             ADDS     R5,R0,R5
    214          
    215              return mbedtls_x509write_crt_set_extension( ctx, MBEDTLS_OID_AUTHORITY_KEY_IDENTIFIER,
    216                                             MBEDTLS_OID_SIZE( MBEDTLS_OID_AUTHORITY_KEY_IDENTIFIER ),
    217                                             0, buf + sizeof( buf ) - len, len );
   \       0x86   0x9501             STR      R5,[SP, #+4]
   \       0x88   0xA803             ADD      R0,SP,#+12
   \       0x8A   0x426D             RSBS     R5,R5,#+0
   \       0x8C   0x4428             ADD      R0,R0,R5
   \       0x8E   0xF200 0x4014      ADDW     R0,R0,#+1044
   \       0x92   0x9000             STR      R0,[SP, #+0]
   \       0x94   0x2300             MOVS     R3,#+0
   \       0x96   0x2203             MOVS     R2,#+3
   \       0x98   0x....             ADR.N    R1,??DataTable6_2  ;; "U\035#"
   \       0x9A   0x4620             MOV      R0,R4
   \       0x9C   0x....'....        BL       mbedtls_x509write_crt_set_extension
   \                     ??mbedtls_x509write_crt_set_authority_key_ident_0: (+1)
   \       0xA0   0xF50D 0x6D80      ADD      SP,SP,#+1024
   \       0xA4   0xB009             ADD      SP,SP,#+36
   \       0xA6   0xBD30             POP      {R4,R5,PC}       ;; return
    218          }
    219          #endif /* MBEDTLS_SHA1_C */
    220          

   \                                 In section .text, align 2, keep-with-next
    221          int mbedtls_x509write_crt_set_key_usage( mbedtls_x509write_cert *ctx,
    222                                                   unsigned int key_usage )
    223          {
   \                     mbedtls_x509write_crt_set_key_usage: (+1)
   \        0x0   0xB518             PUSH     {R3,R4,LR}
   \        0x2   0xB085             SUB      SP,SP,#+20
   \        0x4   0x4604             MOV      R4,R0
    224              unsigned char buf[4], ku;
    225              unsigned char *c;
    226              int ret;
    227          
    228              /* We currently only support 7 bits, from 0x80 to 0x02 */
    229              if( ( key_usage & ~0xfe ) != 0 )
   \        0x6   0xF031 0x00FE      BICS     R0,R1,#0xFE
   \        0xA   0xD002             BEQ.N    ??mbedtls_x509write_crt_set_key_usage_0
    230                  return( MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE );
   \        0xC   0x....'....        LDR.W    R0,??DataTable8_1  ;; 0xffffdf80
   \       0x10   0xE017             B.N      ??mbedtls_x509write_crt_set_key_usage_1
    231          
    232              c = buf + 4;
   \                     ??mbedtls_x509write_crt_set_key_usage_0: (+1)
   \       0x12   0xA804             ADD      R0,SP,#+16
   \       0x14   0x9004             STR      R0,[SP, #+16]
    233              ku = (unsigned char) key_usage;
   \       0x16   0xF88D 0x1008      STRB     R1,[SP, #+8]
    234          
    235              if( ( ret = mbedtls_asn1_write_bitstring( &c, buf, &ku, 7 ) ) != 4 )
   \       0x1A   0x2307             MOVS     R3,#+7
   \       0x1C   0xAA02             ADD      R2,SP,#+8
   \       0x1E   0xA903             ADD      R1,SP,#+12
   \       0x20   0x....'....        BL       mbedtls_asn1_write_bitstring
   \       0x24   0x2804             CMP      R0,#+4
   \       0x26   0xD10C             BNE.N    ??mbedtls_x509write_crt_set_key_usage_1
    236                  return( ret );
    237          
    238              ret = mbedtls_x509write_crt_set_extension( ctx, MBEDTLS_OID_KEY_USAGE,
    239                                                 MBEDTLS_OID_SIZE( MBEDTLS_OID_KEY_USAGE ),
    240                                                 1, buf, 4 );
   \       0x28   0x2004             MOVS     R0,#+4
   \       0x2A   0x9001             STR      R0,[SP, #+4]
   \       0x2C   0xA803             ADD      R0,SP,#+12
   \       0x2E   0x9000             STR      R0,[SP, #+0]
   \       0x30   0x2301             MOVS     R3,#+1
   \       0x32   0x2203             MOVS     R2,#+3
   \       0x34   0x....             ADR.N    R1,??DataTable6_3  ;; "U\035\017"
   \       0x36   0x4620             MOV      R0,R4
   \       0x38   0x....'....        BL       mbedtls_x509write_crt_set_extension
    241              if( ret != 0 )
   \       0x3C   0x2800             CMP      R0,#+0
   \       0x3E   0xD100             BNE.N    ??mbedtls_x509write_crt_set_key_usage_1
    242                  return( ret );
    243          
    244              return( 0 );
   \       0x40   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_x509write_crt_set_key_usage_1: (+1)
   \       0x42   0xB006             ADD      SP,SP,#+24
   \       0x44   0xBD10             POP      {R4,PC}          ;; return
    245          }
    246          

   \                                 In section .text, align 2, keep-with-next
    247          int mbedtls_x509write_crt_set_ns_cert_type( mbedtls_x509write_cert *ctx,
    248                                              unsigned char ns_cert_type )
    249          {
   \                     mbedtls_x509write_crt_set_ns_cert_type: (+1)
   \        0x0   0xB513             PUSH     {R0,R1,R4,LR}
   \        0x2   0xB084             SUB      SP,SP,#+16
   \        0x4   0x4604             MOV      R4,R0
    250              unsigned char buf[4];
    251              unsigned char *c;
    252              int ret;
    253          
    254              c = buf + 4;
   \        0x6   0xA803             ADD      R0,SP,#+12
   \        0x8   0x9003             STR      R0,[SP, #+12]
    255          
    256              if( ( ret = mbedtls_asn1_write_bitstring( &c, buf, &ns_cert_type, 8 ) ) != 4 )
   \        0xA   0x2308             MOVS     R3,#+8
   \        0xC   0xAA05             ADD      R2,SP,#+20
   \        0xE   0xA902             ADD      R1,SP,#+8
   \       0x10   0x....'....        BL       mbedtls_asn1_write_bitstring
   \       0x14   0x2804             CMP      R0,#+4
   \       0x16   0xD10D             BNE.N    ??mbedtls_x509write_crt_set_ns_cert_type_0
    257                  return( ret );
    258          
    259              ret = mbedtls_x509write_crt_set_extension( ctx, MBEDTLS_OID_NS_CERT_TYPE,
    260                                                 MBEDTLS_OID_SIZE( MBEDTLS_OID_NS_CERT_TYPE ),
    261                                                 0, buf, 4 );
   \       0x18   0x2004             MOVS     R0,#+4
   \       0x1A   0x9001             STR      R0,[SP, #+4]
   \       0x1C   0xA802             ADD      R0,SP,#+8
   \       0x1E   0x9000             STR      R0,[SP, #+0]
   \       0x20   0x2300             MOVS     R3,#+0
   \       0x22   0x2209             MOVS     R2,#+9
   \       0x24   0x....'....        LDR.W    R1,??DataTable8_2
   \       0x28   0x4620             MOV      R0,R4
   \       0x2A   0x....'....        BL       mbedtls_x509write_crt_set_extension
    262              if( ret != 0 )
   \       0x2E   0x2800             CMP      R0,#+0
   \       0x30   0xD100             BNE.N    ??mbedtls_x509write_crt_set_ns_cert_type_0
    263                  return( ret );
    264          
    265              return( 0 );
   \       0x32   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_x509write_crt_set_ns_cert_type_0: (+1)
   \       0x34   0xB006             ADD      SP,SP,#+24
   \       0x36   0xBD10             POP      {R4,PC}          ;; return
    266          }
    267          

   \                                 In section .text, align 2, keep-with-next
    268          static int x509_write_time( unsigned char **p, unsigned char *start,
    269                                      const char *t, size_t size )
    270          {
   \                     x509_write_time: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
    271              int ret;
    272              size_t len = 0;
    273          
    274              /*
    275               * write MBEDTLS_ASN1_UTC_TIME if year < 2050 (2 bytes shorter)
    276               */
    277              if( t[0] == '2' && t[1] == '0' && t[2] < '5' )
   \        0x6   0x7810             LDRB     R0,[R2, #+0]
   \        0x8   0x2832             CMP      R0,#+50
   \        0xA   0xD11F             BNE.N    ??x509_write_time_0
   \        0xC   0x7850             LDRB     R0,[R2, #+1]
   \        0xE   0x2830             CMP      R0,#+48
   \       0x10   0xD11C             BNE.N    ??x509_write_time_0
   \       0x12   0x7890             LDRB     R0,[R2, #+2]
   \       0x14   0x2835             CMP      R0,#+53
   \       0x16   0xDA19             BGE.N    ??x509_write_time_0
    278              {
    279                  MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_raw_buffer( p, start,
    280                                                       (const unsigned char *) t + 2,
    281                                                       size - 2 ) );
   \       0x18   0x1E9B             SUBS     R3,R3,#+2
   \       0x1A   0x1C92             ADDS     R2,R2,#+2
   \       0x1C   0x4620             MOV      R0,R4
   \       0x1E   0x....'....        BL       mbedtls_asn1_write_raw_buffer
   \       0x22   0x2800             CMP      R0,#+0
   \       0x24   0xD411             BMI.N    ??x509_write_time_1
   \       0x26   0x4606             MOV      R6,R0
    282                  MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
   \       0x28   0x4632             MOV      R2,R6
   \       0x2A   0x4629             MOV      R1,R5
   \       0x2C   0x4620             MOV      R0,R4
   \       0x2E   0x....'....        BL       mbedtls_asn1_write_len
   \       0x32   0x2800             CMP      R0,#+0
   \       0x34   0xD409             BMI.N    ??x509_write_time_1
   \       0x36   0x1980             ADDS     R0,R0,R6
   \       0x38   0x4606             MOV      R6,R0
    283                  MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_UTC_TIME ) );
   \       0x3A   0x2217             MOVS     R2,#+23
   \       0x3C   0x4629             MOV      R1,R5
   \       0x3E   0x4620             MOV      R0,R4
   \       0x40   0x....'....        BL       mbedtls_asn1_write_tag
   \       0x44   0x2800             CMP      R0,#+0
   \       0x46   0xD400             BMI.N    ??x509_write_time_1
    284              }
    285              else
    286              {
    287                  MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_raw_buffer( p, start,
    288                                                            (const unsigned char *) t,
    289                                                            size ) );
    290                  MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
    291                  MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_GENERALIZED_TIME ) );
    292              }
    293          
    294              return( (int) len );
   \                     ??x509_write_time_2: (+1)
   \       0x48   0x1980             ADDS     R0,R0,R6
   \                     ??x509_write_time_1: (+1)
   \       0x4A   0xBD70             POP      {R4-R6,PC}       ;; return
   \                     ??x509_write_time_0: (+1)
   \       0x4C   0x4620             MOV      R0,R4
   \       0x4E   0x....'....        BL       mbedtls_asn1_write_raw_buffer
   \       0x52   0x2800             CMP      R0,#+0
   \       0x54   0xD4F9             BMI.N    ??x509_write_time_1
   \       0x56   0x4606             MOV      R6,R0
   \       0x58   0x4632             MOV      R2,R6
   \       0x5A   0x4629             MOV      R1,R5
   \       0x5C   0x4620             MOV      R0,R4
   \       0x5E   0x....'....        BL       mbedtls_asn1_write_len
   \       0x62   0x2800             CMP      R0,#+0
   \       0x64   0xD4F1             BMI.N    ??x509_write_time_1
   \       0x66   0x1980             ADDS     R0,R0,R6
   \       0x68   0x4606             MOV      R6,R0
   \       0x6A   0x2218             MOVS     R2,#+24
   \       0x6C   0x4629             MOV      R1,R5
   \       0x6E   0x4620             MOV      R0,R4
   \       0x70   0x....'....        BL       mbedtls_asn1_write_tag
   \       0x74   0x2800             CMP      R0,#+0
   \       0x76   0xD5E7             BPL.N    ??x509_write_time_2
   \       0x78   0xBD70             POP      {R4-R6,PC}
    295          }
    296          

   \                                 In section .text, align 2, keep-with-next
    297          int mbedtls_x509write_crt_der( mbedtls_x509write_cert *ctx, unsigned char *buf, size_t size,
    298                                 int (*f_rng)(void *, unsigned char *, size_t),
    299                                 void *p_rng )
    300          {
   \                     mbedtls_x509write_crt_der: (+1)
   \        0x0   0xE92D 0x43F0      PUSH     {R4-R9,LR}
   \        0x4   0xF5AD 0x6D20      SUB      SP,SP,#+2560
   \        0x8   0xB099             SUB      SP,SP,#+100
   \        0xA   0x4606             MOV      R6,R0
   \        0xC   0x460C             MOV      R4,R1
   \        0xE   0x4615             MOV      R5,R2
   \       0x10   0x461F             MOV      R7,R3
    301              int ret;
    302              const char *sig_oid;
    303              size_t sig_oid_len = 0;
   \       0x12   0x2000             MOVS     R0,#+0
   \       0x14   0x9008             STR      R0,[SP, #+32]
    304              unsigned char *c, *c2;
    305              unsigned char hash[64];
    306              unsigned char sig[MBEDTLS_MPI_MAX_SIZE];
    307              unsigned char tmp_buf[2048];
    308              size_t sub_len = 0, pub_len = 0, sig_and_oid_len = 0, sig_len;
    309              size_t len = 0;
   \       0x16   0x4680             MOV      R8,R0
    310              mbedtls_pk_type_t pk_alg;
    311          
    312              /*
    313               * Prepare data to be signed in tmp_buf
    314               */
    315              c = tmp_buf + sizeof( tmp_buf );
   \       0x18   0xF640 0x0024      MOVW     R0,#+2084
   \       0x1C   0x4468             ADD      R0,R0,SP
   \       0x1E   0x9004             STR      R0,[SP, #+16]
    316          
    317              /* Signature algorithm needed in TBS, and later for actual signature */
    318          
    319              /* There's no direct way of extracting a signature algorithm
    320               * (represented as an element of mbedtls_pk_type_t) from a PK instance. */
    321              if( mbedtls_pk_can_do( ctx->issuer_key, MBEDTLS_PK_RSA ) )
   \       0x20   0x2101             MOVS     R1,#+1
   \       0x22   0x6970             LDR      R0,[R6, #+20]
   \       0x24   0x....'....        BL       mbedtls_pk_can_do
   \       0x28   0x2800             CMP      R0,#+0
   \       0x2A   0xD009             BEQ.N    ??mbedtls_x509write_crt_der_0
    322                  pk_alg = MBEDTLS_PK_RSA;
   \       0x2C   0x2001             MOVS     R0,#+1
    323              else if( mbedtls_pk_can_do( ctx->issuer_key, MBEDTLS_PK_ECDSA ) )
    324                  pk_alg = MBEDTLS_PK_ECDSA;
    325              else
    326                  return( MBEDTLS_ERR_X509_INVALID_ALG );
    327          
    328              if( ( ret = mbedtls_oid_get_oid_by_sig_alg( pk_alg, ctx->md_alg,
    329                                                    &sig_oid, &sig_oid_len ) ) != 0 )
   \                     ??mbedtls_x509write_crt_der_1: (+1)
   \       0x2E   0xAB08             ADD      R3,SP,#+32
   \       0x30   0xAA06             ADD      R2,SP,#+24
   \       0x32   0xF896 0x1020      LDRB     R1,[R6, #+32]
   \       0x36   0x....'....        BL       mbedtls_oid_get_oid_by_sig_alg
   \       0x3A   0x2800             CMP      R0,#+0
   \       0x3C   0xD00A             BEQ.N    ??mbedtls_x509write_crt_der_2
    330              {
    331                  return( ret );
   \       0x3E   0xE121             B.N      ??mbedtls_x509write_crt_der_3
    332              }
   \                     ??mbedtls_x509write_crt_der_0: (+1)
   \       0x40   0x2104             MOVS     R1,#+4
   \       0x42   0x6970             LDR      R0,[R6, #+20]
   \       0x44   0x....'....        BL       mbedtls_pk_can_do
   \       0x48   0x2800             CMP      R0,#+0
   \       0x4A   0xD001             BEQ.N    ??mbedtls_x509write_crt_der_4
   \       0x4C   0x2004             MOVS     R0,#+4
   \       0x4E   0xE7EE             B.N      ??mbedtls_x509write_crt_der_1
   \                     ??mbedtls_x509write_crt_der_4: (+1)
   \       0x50   0x....             LDR.N    R0,??DataTable8_3  ;; 0xffffdd00
   \       0x52   0xE117             B.N      ??mbedtls_x509write_crt_der_3
    333          
    334              /*
    335               *  Extensions  ::=  SEQUENCE SIZE (1..MAX) OF Extension
    336               */
    337          
    338              /* Only for v3 */
    339              if( ctx->version == MBEDTLS_X509_CRT_VERSION_3 )
   \                     ??mbedtls_x509write_crt_der_2: (+1)
   \       0x54   0x6830             LDR      R0,[R6, #+0]
   \       0x56   0x2802             CMP      R0,#+2
   \       0x58   0xD12D             BNE.N    ??mbedtls_x509write_crt_der_5
    340              {
    341                  MBEDTLS_ASN1_CHK_ADD( len, mbedtls_x509_write_extensions( &c, tmp_buf, ctx->extensions ) );
   \       0x5A   0x6C72             LDR      R2,[R6, #+68]
   \       0x5C   0xA909             ADD      R1,SP,#+36
   \       0x5E   0xA804             ADD      R0,SP,#+16
   \       0x60   0x....'....        BL       mbedtls_x509_write_extensions
   \       0x64   0x4680             MOV      R8,R0
   \       0x66   0xF1B8 0x0F00      CMP      R8,#+0
   \       0x6A   0xF100 0x810B      BMI.W    ??mbedtls_x509write_crt_der_3
    342                  MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &c, tmp_buf, len ) );
   \       0x6E   0x4642             MOV      R2,R8
   \       0x70   0xA909             ADD      R1,SP,#+36
   \       0x72   0xA804             ADD      R0,SP,#+16
   \       0x74   0x....'....        BL       mbedtls_asn1_write_len
   \       0x78   0x2800             CMP      R0,#+0
   \       0x7A   0xF100 0x8103      BMI.W    ??mbedtls_x509write_crt_der_3
   \       0x7E   0x4480             ADD      R8,R0,R8
    343                  MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &c, tmp_buf, MBEDTLS_ASN1_CONSTRUCTED |
    344                                                                     MBEDTLS_ASN1_SEQUENCE ) );
   \       0x80   0x2230             MOVS     R2,#+48
   \       0x82   0xA909             ADD      R1,SP,#+36
   \       0x84   0xA804             ADD      R0,SP,#+16
   \       0x86   0x....'....        BL       mbedtls_asn1_write_tag
   \       0x8A   0x2800             CMP      R0,#+0
   \       0x8C   0xF100 0x80FA      BMI.W    ??mbedtls_x509write_crt_der_3
   \       0x90   0x4480             ADD      R8,R0,R8
    345                  MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &c, tmp_buf, len ) );
   \       0x92   0x4642             MOV      R2,R8
   \       0x94   0xA909             ADD      R1,SP,#+36
   \       0x96   0xA804             ADD      R0,SP,#+16
   \       0x98   0x....'....        BL       mbedtls_asn1_write_len
   \       0x9C   0x2800             CMP      R0,#+0
   \       0x9E   0xF100 0x80F1      BMI.W    ??mbedtls_x509write_crt_der_3
   \       0xA2   0x4480             ADD      R8,R0,R8
    346                  MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &c, tmp_buf, MBEDTLS_ASN1_CONTEXT_SPECIFIC |
    347                                                                     MBEDTLS_ASN1_CONSTRUCTED | 3 ) );
   \       0xA4   0x22A3             MOVS     R2,#+163
   \       0xA6   0xA909             ADD      R1,SP,#+36
   \       0xA8   0xA804             ADD      R0,SP,#+16
   \       0xAA   0x....'....        BL       mbedtls_asn1_write_tag
   \       0xAE   0x2800             CMP      R0,#+0
   \       0xB0   0xF100 0x80E8      BMI.W    ??mbedtls_x509write_crt_der_3
   \       0xB4   0x4480             ADD      R8,R0,R8
    348              }
    349          
    350              /*
    351               *  SubjectPublicKeyInfo
    352               */
    353              MBEDTLS_ASN1_CHK_ADD( pub_len, mbedtls_pk_write_pubkey_der( ctx->subject_key,
    354                                                          tmp_buf, c - tmp_buf ) );
   \                     ??mbedtls_x509write_crt_der_5: (+1)
   \       0xB6   0x9A04             LDR      R2,[SP, #+16]
   \       0xB8   0xA809             ADD      R0,SP,#+36
   \       0xBA   0x1A12             SUBS     R2,R2,R0
   \       0xBC   0xA909             ADD      R1,SP,#+36
   \       0xBE   0x6930             LDR      R0,[R6, #+16]
   \       0xC0   0x....'....        BL       mbedtls_pk_write_pubkey_der
   \       0xC4   0x4681             MOV      R9,R0
   \       0xC6   0xF1B9 0x0F00      CMP      R9,#+0
   \       0xCA   0xF100 0x80DB      BMI.W    ??mbedtls_x509write_crt_der_3
    355              c -= pub_len;
   \       0xCE   0x9804             LDR      R0,[SP, #+16]
   \       0xD0   0xF1C9 0x0100      RSB      R1,R9,#+0
   \       0xD4   0x4408             ADD      R0,R0,R1
   \       0xD6   0x9004             STR      R0,[SP, #+16]
    356              len += pub_len;
    357          
    358              /*
    359               *  Subject  ::=  Name
    360               */
    361              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_x509_write_names( &c, tmp_buf, ctx->subject ) );
   \       0xD8   0x69B2             LDR      R2,[R6, #+24]
   \       0xDA   0xA909             ADD      R1,SP,#+36
   \       0xDC   0xA804             ADD      R0,SP,#+16
   \       0xDE   0x....'....        BL       mbedtls_x509_write_names
   \       0xE2   0x2800             CMP      R0,#+0
   \       0xE4   0xF100 0x80CE      BMI.W    ??mbedtls_x509write_crt_der_3
   \       0xE8   0x4481             ADD      R9,R0,R9
   \       0xEA   0x44C8             ADD      R8,R9,R8
    362          
    363              /*
    364               *  Validity ::= SEQUENCE {
    365               *       notBefore      Time,
    366               *       notAfter       Time }
    367               */
    368              sub_len = 0;
    369          
    370              MBEDTLS_ASN1_CHK_ADD( sub_len, x509_write_time( &c, tmp_buf, ctx->not_after,
    371                                                      MBEDTLS_X509_RFC5280_UTC_TIME_LEN ) );
   \       0xEC   0x230F             MOVS     R3,#+15
   \       0xEE   0xF106 0x0231      ADD      R2,R6,#+49
   \       0xF2   0xA909             ADD      R1,SP,#+36
   \       0xF4   0xA804             ADD      R0,SP,#+16
   \       0xF6   0x....'....        BL       x509_write_time
   \       0xFA   0x4681             MOV      R9,R0
   \       0xFC   0xF1B9 0x0F00      CMP      R9,#+0
   \      0x100   0xF100 0x80C0      BMI.W    ??mbedtls_x509write_crt_der_3
    372          
    373              MBEDTLS_ASN1_CHK_ADD( sub_len, x509_write_time( &c, tmp_buf, ctx->not_before,
    374                                                      MBEDTLS_X509_RFC5280_UTC_TIME_LEN ) );
   \      0x104   0x230F             MOVS     R3,#+15
   \      0x106   0xF106 0x0221      ADD      R2,R6,#+33
   \      0x10A   0xA909             ADD      R1,SP,#+36
   \      0x10C   0xA804             ADD      R0,SP,#+16
   \      0x10E   0x....'....        BL       x509_write_time
   \      0x112   0x2800             CMP      R0,#+0
   \      0x114   0xF100 0x80B6      BMI.W    ??mbedtls_x509write_crt_der_3
   \      0x118   0x4481             ADD      R9,R0,R9
    375          
    376              len += sub_len;
    377              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &c, tmp_buf, sub_len ) );
   \      0x11A   0x464A             MOV      R2,R9
   \      0x11C   0xA909             ADD      R1,SP,#+36
   \      0x11E   0xA804             ADD      R0,SP,#+16
   \      0x120   0x....'....        BL       mbedtls_asn1_write_len
   \      0x124   0x2800             CMP      R0,#+0
   \      0x126   0xF100 0x80AD      BMI.W    ??mbedtls_x509write_crt_der_3
   \      0x12A   0x4481             ADD      R9,R0,R9
   \      0x12C   0x44C8             ADD      R8,R9,R8
    378              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &c, tmp_buf, MBEDTLS_ASN1_CONSTRUCTED |
    379                                                              MBEDTLS_ASN1_SEQUENCE ) );
   \      0x12E   0x2230             MOVS     R2,#+48
   \      0x130   0xA909             ADD      R1,SP,#+36
   \      0x132   0xA804             ADD      R0,SP,#+16
   \      0x134   0x....'....        BL       mbedtls_asn1_write_tag
   \      0x138   0x2800             CMP      R0,#+0
   \      0x13A   0xF100 0x80A3      BMI.W    ??mbedtls_x509write_crt_der_3
   \      0x13E   0x4480             ADD      R8,R0,R8
    380          
    381              /*
    382               *  Issuer  ::=  Name
    383               */
    384              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_x509_write_names( &c, tmp_buf, ctx->issuer ) );
   \      0x140   0x69F2             LDR      R2,[R6, #+28]
   \      0x142   0xA909             ADD      R1,SP,#+36
   \      0x144   0xA804             ADD      R0,SP,#+16
   \      0x146   0x....'....        BL       mbedtls_x509_write_names
   \      0x14A   0x2800             CMP      R0,#+0
   \      0x14C   0xF100 0x809A      BMI.W    ??mbedtls_x509write_crt_der_3
   \      0x150   0x4480             ADD      R8,R0,R8
    385          
    386              /*
    387               *  Signature   ::=  AlgorithmIdentifier
    388               */
    389              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_algorithm_identifier( &c, tmp_buf,
    390                                 sig_oid, strlen( sig_oid ), 0 ) );
   \      0x152   0x9806             LDR      R0,[SP, #+24]
   \      0x154   0x....'....        BL       strlen
   \      0x158   0x2100             MOVS     R1,#+0
   \      0x15A   0x9100             STR      R1,[SP, #+0]
   \      0x15C   0x4603             MOV      R3,R0
   \      0x15E   0x9A06             LDR      R2,[SP, #+24]
   \      0x160   0xA909             ADD      R1,SP,#+36
   \      0x162   0xA804             ADD      R0,SP,#+16
   \      0x164   0x....'....        BL       mbedtls_asn1_write_algorithm_identifier
   \      0x168   0x2800             CMP      R0,#+0
   \      0x16A   0xF100 0x808B      BMI.W    ??mbedtls_x509write_crt_der_3
   \      0x16E   0x4480             ADD      R8,R0,R8
    391          
    392              /*
    393               *  Serial   ::=  INTEGER
    394               */
    395              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &c, tmp_buf, &ctx->serial ) );
   \      0x170   0x1D32             ADDS     R2,R6,#+4
   \      0x172   0xA909             ADD      R1,SP,#+36
   \      0x174   0xA804             ADD      R0,SP,#+16
   \      0x176   0x....'....        BL       mbedtls_asn1_write_mpi
   \      0x17A   0x2800             CMP      R0,#+0
   \      0x17C   0xF100 0x8082      BMI.W    ??mbedtls_x509write_crt_der_3
   \      0x180   0x4480             ADD      R8,R0,R8
    396          
    397              /*
    398               *  Version  ::=  INTEGER  {  v1(0), v2(1), v3(2)  }
    399               */
    400          
    401              /* Can be omitted for v1 */
    402              if( ctx->version != MBEDTLS_X509_CRT_VERSION_1 )
   \      0x182   0x6830             LDR      R0,[R6, #+0]
   \      0x184   0x2800             CMP      R0,#+0
   \      0x186   0xD019             BEQ.N    ??mbedtls_x509write_crt_der_6
    403              {
    404                  sub_len = 0;
    405                  MBEDTLS_ASN1_CHK_ADD( sub_len, mbedtls_asn1_write_int( &c, tmp_buf, ctx->version ) );
   \      0x188   0x4602             MOV      R2,R0
   \      0x18A   0xA909             ADD      R1,SP,#+36
   \      0x18C   0xA804             ADD      R0,SP,#+16
   \      0x18E   0x....'....        BL       mbedtls_asn1_write_int
   \      0x192   0x4681             MOV      R9,R0
   \      0x194   0xF1B9 0x0F00      CMP      R9,#+0
   \      0x198   0xD474             BMI.N    ??mbedtls_x509write_crt_der_3
    406                  len += sub_len;
    407                  MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &c, tmp_buf, sub_len ) );
   \      0x19A   0x464A             MOV      R2,R9
   \      0x19C   0xA909             ADD      R1,SP,#+36
   \      0x19E   0xA804             ADD      R0,SP,#+16
   \      0x1A0   0x....'....        BL       mbedtls_asn1_write_len
   \      0x1A4   0x2800             CMP      R0,#+0
   \      0x1A6   0xD46D             BMI.N    ??mbedtls_x509write_crt_der_3
   \      0x1A8   0x4481             ADD      R9,R0,R9
   \      0x1AA   0x44C8             ADD      R8,R9,R8
    408                  MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &c, tmp_buf, MBEDTLS_ASN1_CONTEXT_SPECIFIC |
    409                                                                     MBEDTLS_ASN1_CONSTRUCTED | 0 ) );
   \      0x1AC   0x22A0             MOVS     R2,#+160
   \      0x1AE   0xA909             ADD      R1,SP,#+36
   \      0x1B0   0xA804             ADD      R0,SP,#+16
   \      0x1B2   0x....'....        BL       mbedtls_asn1_write_tag
   \      0x1B6   0x2800             CMP      R0,#+0
   \      0x1B8   0xD464             BMI.N    ??mbedtls_x509write_crt_der_3
   \      0x1BA   0x4480             ADD      R8,R0,R8
    410              }
    411          
    412              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &c, tmp_buf, len ) );
   \                     ??mbedtls_x509write_crt_der_6: (+1)
   \      0x1BC   0x4642             MOV      R2,R8
   \      0x1BE   0xA909             ADD      R1,SP,#+36
   \      0x1C0   0xA804             ADD      R0,SP,#+16
   \      0x1C2   0x....'....        BL       mbedtls_asn1_write_len
   \      0x1C6   0x2800             CMP      R0,#+0
   \      0x1C8   0xD45C             BMI.N    ??mbedtls_x509write_crt_der_3
   \      0x1CA   0x4480             ADD      R8,R0,R8
    413              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &c, tmp_buf, MBEDTLS_ASN1_CONSTRUCTED |
    414                                                                 MBEDTLS_ASN1_SEQUENCE ) );
   \      0x1CC   0x2230             MOVS     R2,#+48
   \      0x1CE   0xA909             ADD      R1,SP,#+36
   \      0x1D0   0xA804             ADD      R0,SP,#+16
   \      0x1D2   0x....'....        BL       mbedtls_asn1_write_tag
   \      0x1D6   0x2800             CMP      R0,#+0
   \      0x1D8   0xD454             BMI.N    ??mbedtls_x509write_crt_der_3
   \      0x1DA   0x4480             ADD      R8,R0,R8
    415          
    416              /*
    417               * Make signature
    418               */
    419              if( ( ret = mbedtls_md( mbedtls_md_info_from_type( ctx->md_alg ), c,
    420                                      len, hash ) ) != 0 )
   \      0x1DC   0xF896 0x0020      LDRB     R0,[R6, #+32]
   \      0x1E0   0x....'....        BL       mbedtls_md_info_from_type
   \      0x1E4   0xF640 0x2324      MOVW     R3,#+2596
   \      0x1E8   0x446B             ADD      R3,R3,SP
   \      0x1EA   0x4642             MOV      R2,R8
   \      0x1EC   0x9904             LDR      R1,[SP, #+16]
   \      0x1EE   0x....'....        BL       mbedtls_md
   \      0x1F2   0x2800             CMP      R0,#+0
   \      0x1F4   0xD146             BNE.N    ??mbedtls_x509write_crt_der_3
    421              {
    422                  return( ret );
   \      0x1F6   0xF8DD 0x0A80      LDR      R0,[SP, #+2688]
    423              }
    424          
    425              if( ( ret = mbedtls_pk_sign( ctx->issuer_key, ctx->md_alg, hash, 0, sig, &sig_len,
    426                                   f_rng, p_rng ) ) != 0 )
   \      0x1FA   0x9003             STR      R0,[SP, #+12]
   \      0x1FC   0x9702             STR      R7,[SP, #+8]
   \      0x1FE   0xA807             ADD      R0,SP,#+28
   \      0x200   0x9001             STR      R0,[SP, #+4]
   \      0x202   0xF640 0x0024      MOVW     R0,#+2084
   \      0x206   0x4468             ADD      R0,R0,SP
   \      0x208   0x9000             STR      R0,[SP, #+0]
   \      0x20A   0x2300             MOVS     R3,#+0
   \      0x20C   0xF640 0x2224      MOVW     R2,#+2596
   \      0x210   0x446A             ADD      R2,R2,SP
   \      0x212   0xF896 0x1020      LDRB     R1,[R6, #+32]
   \      0x216   0x6970             LDR      R0,[R6, #+20]
   \      0x218   0x....'....        BL       mbedtls_pk_sign
   \      0x21C   0x2800             CMP      R0,#+0
   \      0x21E   0xD131             BNE.N    ??mbedtls_x509write_crt_der_3
    427              {
    428                  return( ret );
    429              }
    430          
    431              /*
    432               * Write data to output buffer
    433               */
    434              c2 = buf + size;
   \      0x220   0x1960             ADDS     R0,R4,R5
   \      0x222   0x9005             STR      R0,[SP, #+20]
    435              MBEDTLS_ASN1_CHK_ADD( sig_and_oid_len, mbedtls_x509_write_sig( &c2, buf,
    436                                                  sig_oid, sig_oid_len, sig, sig_len ) );
   \      0x224   0x9807             LDR      R0,[SP, #+28]
   \      0x226   0x9001             STR      R0,[SP, #+4]
   \      0x228   0xF640 0x0024      MOVW     R0,#+2084
   \      0x22C   0x4468             ADD      R0,R0,SP
   \      0x22E   0x9000             STR      R0,[SP, #+0]
   \      0x230   0x9B08             LDR      R3,[SP, #+32]
   \      0x232   0x9A06             LDR      R2,[SP, #+24]
   \      0x234   0x4621             MOV      R1,R4
   \      0x236   0xA805             ADD      R0,SP,#+20
   \      0x238   0x....'....        BL       mbedtls_x509_write_sig
   \      0x23C   0x0005             MOVS     R5,R0
   \      0x23E   0xD421             BMI.N    ??mbedtls_x509write_crt_der_3
    437          
    438              if( len > (size_t)( c2 - buf ) )
   \      0x240   0x9805             LDR      R0,[SP, #+20]
   \      0x242   0x1B00             SUBS     R0,R0,R4
   \      0x244   0x4540             CMP      R0,R8
   \      0x246   0xD202             BCS.N    ??mbedtls_x509write_crt_der_7
    439                  return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
   \      0x248   0xF06F 0x006B      MVN      R0,#+107
   \      0x24C   0xE01A             B.N      ??mbedtls_x509write_crt_der_3
    440          
    441              c2 -= len;
   \                     ??mbedtls_x509write_crt_der_7: (+1)
   \      0x24E   0x9805             LDR      R0,[SP, #+20]
   \      0x250   0xF1C8 0x0100      RSB      R1,R8,#+0
   \      0x254   0x4408             ADD      R0,R0,R1
   \      0x256   0x9005             STR      R0,[SP, #+20]
    442              memcpy( c2, c, len );
   \      0x258   0x4642             MOV      R2,R8
   \      0x25A   0x9904             LDR      R1,[SP, #+16]
   \      0x25C   0x....'....        BL       __aeabi_memcpy
    443          
    444              len += sig_and_oid_len;
   \      0x260   0x44A8             ADD      R8,R5,R8
    445              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &c2, buf, len ) );
   \      0x262   0x4642             MOV      R2,R8
   \      0x264   0x4621             MOV      R1,R4
   \      0x266   0xA805             ADD      R0,SP,#+20
   \      0x268   0x....'....        BL       mbedtls_asn1_write_len
   \      0x26C   0x2800             CMP      R0,#+0
   \      0x26E   0xD409             BMI.N    ??mbedtls_x509write_crt_der_3
   \      0x270   0x4480             ADD      R8,R0,R8
    446              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &c2, buf, MBEDTLS_ASN1_CONSTRUCTED |
    447                                                           MBEDTLS_ASN1_SEQUENCE ) );
   \      0x272   0x2230             MOVS     R2,#+48
   \      0x274   0x4621             MOV      R1,R4
   \      0x276   0xA805             ADD      R0,SP,#+20
   \      0x278   0x....'....        BL       mbedtls_asn1_write_tag
   \      0x27C   0x2800             CMP      R0,#+0
   \      0x27E   0xD401             BMI.N    ??mbedtls_x509write_crt_der_3
    448          
    449              return( (int) len );
   \      0x280   0x4480             ADD      R8,R0,R8
   \      0x282   0x4640             MOV      R0,R8
   \                     ??mbedtls_x509write_crt_der_3: (+1)
   \      0x284   0xF50D 0x6D20      ADD      SP,SP,#+2560
   \      0x288   0xB019             ADD      SP,SP,#+100
   \      0x28A   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
    450          }
    451          
    452          #define PEM_BEGIN_CRT           "-----BEGIN CERTIFICATE-----\n"
    453          #define PEM_END_CRT             "-----END CERTIFICATE-----\n"
    454          
    455          #if defined(MBEDTLS_PEM_WRITE_C)

   \                                 In section .text, align 2, keep-with-next
    456          int mbedtls_x509write_crt_pem( mbedtls_x509write_cert *crt, unsigned char *buf, size_t size,
    457                                 int (*f_rng)(void *, unsigned char *, size_t),
    458                                 void *p_rng )
    459          {
   \                     mbedtls_x509write_crt_pem: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0xF5AD 0x5D80      SUB      SP,SP,#+4096
   \        0x6   0xB084             SUB      SP,SP,#+16
   \        0x8   0x460C             MOV      R4,R1
   \        0xA   0x4615             MOV      R5,R2
   \        0xC   0xF50D 0x5180      ADD      R1,SP,#+4096
   \       0x10   0x6A09             LDR      R1,[R1, #+32]
    460              int ret;
    461              unsigned char output_buf[4096];
    462              size_t olen = 0;
   \       0x12   0x2200             MOVS     R2,#+0
   \       0x14   0x9203             STR      R2,[SP, #+12]
    463          
    464              if( ( ret = mbedtls_x509write_crt_der( crt, output_buf, sizeof(output_buf),
    465                                             f_rng, p_rng ) ) < 0 )
   \       0x16   0x9100             STR      R1,[SP, #+0]
   \       0x18   0xF44F 0x5280      MOV      R2,#+4096
   \       0x1C   0xA904             ADD      R1,SP,#+16
   \       0x1E   0x....'....        BL       mbedtls_x509write_crt_der
   \       0x22   0x2800             CMP      R0,#+0
   \       0x24   0xD410             BMI.N    ??mbedtls_x509write_crt_pem_0
    466              {
    467                  return( ret );
    468              }
    469          
    470              if( ( ret = mbedtls_pem_write_buffer( PEM_BEGIN_CRT, PEM_END_CRT,
    471                                            output_buf + sizeof(output_buf) - ret,
    472                                            ret, buf, size, &olen ) ) != 0 )
   \       0x26   0xA903             ADD      R1,SP,#+12
   \       0x28   0x9102             STR      R1,[SP, #+8]
   \       0x2A   0x9501             STR      R5,[SP, #+4]
   \       0x2C   0x9400             STR      R4,[SP, #+0]
   \       0x2E   0x4603             MOV      R3,R0
   \       0x30   0xA904             ADD      R1,SP,#+16
   \       0x32   0x4240             RSBS     R0,R0,#+0
   \       0x34   0x4408             ADD      R0,R1,R0
   \       0x36   0xF500 0x5280      ADD      R2,R0,#+4096
   \       0x3A   0x....             LDR.N    R1,??DataTable8_4
   \       0x3C   0x....             LDR.N    R0,??DataTable8_5
   \       0x3E   0x....'....        BL       mbedtls_pem_write_buffer
   \       0x42   0x2800             CMP      R0,#+0
   \       0x44   0xD100             BNE.N    ??mbedtls_x509write_crt_pem_0
    473              {
    474                  return( ret );
    475              }
    476          
    477              return( 0 );
   \       0x46   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_x509write_crt_pem_0: (+1)
   \       0x48   0xF50D 0x5D80      ADD      SP,SP,#+4096
   \       0x4C   0xB005             ADD      SP,SP,#+20
   \       0x4E   0xBD30             POP      {R4,R5,PC}       ;; return
    478          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \        0x0   0x55 0x1D          DC8      "U\035\023"
   \              0x13 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \        0x0   0x55 0x1D          DC8      "U\035\016"
   \              0x0E 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \        0x0   0x55 0x1D          DC8      "U\035#"
   \              0x23 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \        0x0   0x55 0x1D          DC8      "U\035\017"
   \              0x0F 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \        0x0   0xFFFF'D800        DC32     0xffffd800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \        0x0   0xFFFF'DF80        DC32     0xffffdf80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \        0x0   0x....'....        DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_3:
   \        0x0   0xFFFF'DD00        DC32     0xffffdd00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_4:
   \        0x0   0x....'....        DC32     ?_6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_5:
   \        0x0   0x....'....        DC32     ?_5

   \                                 In section .rodata, align 4
   \        0x0   0x55 0x1D          DC8 "U\035\023"
   \              0x13 0x00    

   \                                 In section .rodata, align 4
   \        0x0   0x55 0x1D          DC8 "U\035\016"
   \              0x0E 0x00    

   \                                 In section .rodata, align 4
   \        0x0   0x55 0x1D          DC8 "U\035#"
   \              0x23 0x00    

   \                                 In section .rodata, align 4
   \        0x0   0x55 0x1D          DC8 "U\035\017"
   \              0x0F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_4:
   \        0x0   0x60 0x86          DC8 "`\206H\001\206\370B\001\001"
   \              0x48 0x01    
   \              0x86 0xF8    
   \              0x42 0x01    
   \              0x01 0x00    
   \        0xA   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_5:
   \        0x0   0x2D 0x2D          DC8 "-----BEGIN CERTIFICATE-----\012"
   \              0x2D 0x2D    
   \              0x2D 0x42    
   \              0x45 0x47    
   \              0x49 0x4E    
   \              0x20 0x43    
   \              0x45 0x52    
   \              0x54 0x49    
   \              0x46 0x49    
   \              0x43 0x41    
   \              0x54 0x45    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x0A    
   \              0x00         
   \       0x1D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_6:
   \        0x0   0x2D 0x2D          DC8 "-----END CERTIFICATE-----\012"
   \              0x2D 0x2D    
   \              0x2D 0x45    
   \              0x4E 0x44    
   \              0x20 0x43    
   \              0x45 0x52    
   \              0x54 0x49    
   \              0x46 0x49    
   \              0x43 0x41    
   \              0x54 0x45    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x0A    
   \              0x00         
   \       0x1B   0x00               DC8 0
    479          #endif /* MBEDTLS_PEM_WRITE_C */
    480          
    481          #endif /* MBEDTLS_X509_CRT_WRITE_C */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
    2688   mbedtls_x509write_crt_der
      2688   -> __aeabi_memcpy
      2688   -> mbedtls_asn1_write_algorithm_identifier
      2688   -> mbedtls_asn1_write_int
      2688   -> mbedtls_asn1_write_len
      2688   -> mbedtls_asn1_write_mpi
      2688   -> mbedtls_asn1_write_tag
      2688   -> mbedtls_md
      2688   -> mbedtls_md_info_from_type
      2688   -> mbedtls_oid_get_oid_by_sig_alg
      2688   -> mbedtls_pk_can_do
      2688   -> mbedtls_pk_sign
      2688   -> mbedtls_pk_write_pubkey_der
      2688   -> mbedtls_x509_write_extensions
      2688   -> mbedtls_x509_write_names
      2688   -> mbedtls_x509_write_sig
      2688   -> strlen
      2688   -> x509_write_time
       8   mbedtls_x509write_crt_free
         8   -> mbedtls_asn1_free_named_data_list
         8   -> mbedtls_mpi_free
         0   -> mbedtls_platform_zeroize
       8   mbedtls_x509write_crt_init
         8   -> __aeabi_memset4
         8   -> mbedtls_mpi_init
    4128   mbedtls_x509write_crt_pem
      4128   -> mbedtls_pem_write_buffer
      4128   -> mbedtls_x509write_crt_der
    1072   mbedtls_x509write_crt_set_authority_key_identifier
      1072   -> __aeabi_memset4
      1072   -> mbedtls_asn1_write_len
      1072   -> mbedtls_asn1_write_tag
      1072   -> mbedtls_pk_write_pubkey
      1072   -> mbedtls_sha1_ret
      1072   -> mbedtls_x509write_crt_set_extension
      48   mbedtls_x509write_crt_set_basic_constraints
        48   -> __aeabi_memset4
        48   -> mbedtls_asn1_write_bool
        48   -> mbedtls_asn1_write_int
        48   -> mbedtls_asn1_write_len
        48   -> mbedtls_asn1_write_tag
        48   -> mbedtls_x509write_crt_set_extension
      24   mbedtls_x509write_crt_set_extension
        24   -> mbedtls_x509_set_extension
       0   mbedtls_x509write_crt_set_issuer_key
       0   mbedtls_x509write_crt_set_issuer_name
         0   -> mbedtls_x509_string_to_names
      32   mbedtls_x509write_crt_set_key_usage
        32   -> mbedtls_asn1_write_bitstring
        32   -> mbedtls_x509write_crt_set_extension
       0   mbedtls_x509write_crt_set_md_alg
      32   mbedtls_x509write_crt_set_ns_cert_type
        32   -> mbedtls_asn1_write_bitstring
        32   -> mbedtls_x509write_crt_set_extension
       8   mbedtls_x509write_crt_set_serial
         8   -> mbedtls_mpi_copy
       0   mbedtls_x509write_crt_set_subject_key
    1072   mbedtls_x509write_crt_set_subject_key_identifier
      1072   -> __aeabi_memset4
      1072   -> mbedtls_asn1_write_len
      1072   -> mbedtls_asn1_write_tag
      1072   -> mbedtls_pk_write_pubkey
      1072   -> mbedtls_sha1_ret
      1072   -> mbedtls_x509write_crt_set_extension
       0   mbedtls_x509write_crt_set_subject_name
         0   -> mbedtls_x509_string_to_names
      16   mbedtls_x509write_crt_set_validity
        16   -> strlen
        16   -> strncpy
       0   mbedtls_x509write_crt_set_version
      16   x509_write_time
        16   -> mbedtls_asn1_write_len
        16   -> mbedtls_asn1_write_raw_buffer
        16   -> mbedtls_asn1_write_tag


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_2
       4  ??DataTable8_3
       4  ??DataTable8_4
       4  ??DataTable8_5
       4  ?_0
       4  ?_1
       4  ?_2
       4  ?_3
      12  ?_4
      32  ?_5
      28  ?_6
     654  mbedtls_x509write_crt_der
      46  mbedtls_x509write_crt_free
      24  mbedtls_x509write_crt_init
      80  mbedtls_x509write_crt_pem
     168  mbedtls_x509write_crt_set_authority_key_identifier
     140  mbedtls_x509write_crt_set_basic_constraints
      18  mbedtls_x509write_crt_set_extension
       4  mbedtls_x509write_crt_set_issuer_key
       6  mbedtls_x509write_crt_set_issuer_name
      70  mbedtls_x509write_crt_set_key_usage
       6  mbedtls_x509write_crt_set_md_alg
      56  mbedtls_x509write_crt_set_ns_cert_type
      16  mbedtls_x509write_crt_set_serial
       4  mbedtls_x509write_crt_set_subject_key
     136  mbedtls_x509write_crt_set_subject_key_identifier
       6  mbedtls_x509write_crt_set_subject_name
      72  mbedtls_x509write_crt_set_validity
       4  mbedtls_x509write_crt_set_version
     122  x509_write_time

 
    88 bytes in section .rodata
 1 672 bytes in section .text
 
 1 672 bytes of CODE  memory
    88 bytes of CONST memory

Errors: none
Warnings: none
