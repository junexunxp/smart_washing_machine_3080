###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.3.193/W32 for ARM         10/Jun/2019  13:48:42
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\Development\smart_washing_machine_3080\mbedtls\library\pkwrite.c
#    Command line =  
#        -f C:\Users\nxf42695\AppData\Local\Temp\1\EW34E6.tmp
#        (C:\Development\smart_washing_machine_3080\mbedtls\library\pkwrite.c
#        -D DEBUG -D USE_RTOS -D XIP_EXTERNAL_FLASH=1 -D
#        XIP_BOOT_HEADER_ENABLE=1 -D CPU_MIMXRT1052DVL6B -D FSL_RTOS_FREE_RTOS
#        -D PRINTF_ADVANCED_ENABLE -D
#        "MBEDTLS_CONFIG_FILE=\"ksdk_mbedtls_config.h\"" -lC
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list -lA
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list
#        --diag_suppress Pa082,Pa050 -o
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_d16 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" --preinclude
#        C:\Development\smart_washing_machine_3080/source\app_preinclude.h -I
#        C:\Development\smart_washing_machine_3080/board\ -I
#        C:\Development\smart_washing_machine_3080/source\ -I
#        C:\Development\smart_washing_machine_3080/CMSIS\ -I
#        C:\Development\smart_washing_machine_3080/amazon-freertos/freertos/portable\
#        -I C:\Development\smart_washing_machine_3080/amazon-freertos/include\
#        -I C:\Development\smart_washing_machine_3080/component/lists\ -I
#        C:\Development\smart_washing_machine_3080/component/serial_manager\ -I
#        C:\Development\smart_washing_machine_3080/component/uart\ -I
#        C:\Development\smart_washing_machine_3080/component/kv\ -I
#        C:\Development\smart_washing_machine_3080/component/kv/include\ -I
#        C:\Development\smart_washing_machine_3080/device\ -I
#        C:\Development\smart_washing_machine_3080/doc\ -I
#        C:\Development\smart_washing_machine_3080/drivers\ -I
#        C:\Development\smart_washing_machine_3080/src\ -I
#        C:\Development\smart_washing_machine_3080/startup\ -I
#        C:\Development\smart_washing_machine_3080/utilities\ -I
#        C:\Development\smart_washing_machine_3080/xip\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\atm\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_model\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_sign\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\infra\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\mqtt\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\external_libs\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\coap_cloud\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\CoAPPacket\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\server\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\os\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\awss_reset\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\mbedtls\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\ -I
#        C:\Development\smart_washing_machine_3080\mbedtls\port\ksdk\ -Om)
#    Locale       =  C
#    List file    =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list\pkwrite.lst
#    Object file  =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj\pkwrite.o
#
###############################################################################

C:\Development\smart_washing_machine_3080\mbedtls\library\pkwrite.c
      1          /*
      2           *  Public Key layer for writing key files and structures
      3           *
      4           *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
      5           *  SPDX-License-Identifier: Apache-2.0
      6           *
      7           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
      8           *  not use this file except in compliance with the License.
      9           *  You may obtain a copy of the License at
     10           *
     11           *  http://www.apache.org/licenses/LICENSE-2.0
     12           *
     13           *  Unless required by applicable law or agreed to in writing, software
     14           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     15           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     16           *  See the License for the specific language governing permissions and
     17           *  limitations under the License.
     18           *
     19           *  This file is part of mbed TLS (https://tls.mbed.org)
     20           */
     21          
     22          #if !defined(MBEDTLS_CONFIG_FILE)
     23          #include "mbedtls/config.h"
     24          #else
     25          #include MBEDTLS_CONFIG_FILE
     26          #endif
     27          
     28          #if defined(MBEDTLS_PK_WRITE_C)
     29          
     30          #include "mbedtls/pk.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp mbedtls_rsa_context *mbedtls_pk_rsa(mbedtls_pk_context const)
   \                     mbedtls_pk_rsa: (+1)
   \        0x0   0x4608             MOV      R0,R1
   \        0x2   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp mbedtls_ecp_keypair *mbedtls_pk_ec(mbedtls_pk_context const)
   \                     mbedtls_pk_ec: (+1)
   \        0x0   0x4608             MOV      R0,R1
   \        0x2   0x4770             BX       LR               ;; return
     31          #include "mbedtls/asn1write.h"
     32          #include "mbedtls/oid.h"
     33          
     34          #include <string.h>
     35          
     36          #if defined(MBEDTLS_RSA_C)
     37          #include "mbedtls/rsa.h"
     38          #endif
     39          #if defined(MBEDTLS_ECP_C)
     40          #include "mbedtls/ecp.h"
     41          #endif
     42          #if defined(MBEDTLS_ECDSA_C)
     43          #include "mbedtls/ecdsa.h"
     44          #endif
     45          #if defined(MBEDTLS_PEM_WRITE_C)
     46          #include "mbedtls/pem.h"
     47          #endif
     48          
     49          #if defined(MBEDTLS_PLATFORM_C)
     50          #include "mbedtls/platform.h"
     51          #else
     52          #include <stdlib.h>
     53          #define mbedtls_calloc    calloc
     54          #define mbedtls_free       free
     55          #endif
     56          
     57          #if defined(MBEDTLS_RSA_C)
     58          /*
     59           *  RSAPublicKey ::= SEQUENCE {
     60           *      modulus           INTEGER,  -- n
     61           *      publicExponent    INTEGER   -- e
     62           *  }
     63           */

   \                                 In section .text, align 2, keep-with-next
     64          static int pk_write_rsa_pubkey( unsigned char **p, unsigned char *start,
     65                                          mbedtls_rsa_context *rsa )
     66          {
   \                     pk_write_rsa_pubkey: (+1)
   \        0x0   0xE92D 0x41F8      PUSH     {R3-R8,LR}
   \        0x4   0xB085             SUB      SP,SP,#+20
   \        0x6   0x4606             MOV      R6,R0
   \        0x8   0x460F             MOV      R7,R1
   \        0xA   0x4690             MOV      R8,R2
     67              int ret;
     68              size_t len = 0;
   \        0xC   0x2500             MOVS     R5,#+0
     69              mbedtls_mpi T;
     70          
     71              mbedtls_mpi_init( &T );
   \        0xE   0xA802             ADD      R0,SP,#+8
   \       0x10   0x....'....        BL       mbedtls_mpi_init
     72          
     73              /* Export E */
     74              if ( ( ret = mbedtls_rsa_export( rsa, NULL, NULL, NULL, NULL, &T ) ) != 0 ||
     75                   ( ret = mbedtls_asn1_write_mpi( p, start, &T ) ) < 0 )
   \       0x14   0xA802             ADD      R0,SP,#+8
   \       0x16   0x9001             STR      R0,[SP, #+4]
   \       0x18   0x4628             MOV      R0,R5
   \       0x1A   0x9000             STR      R0,[SP, #+0]
   \       0x1C   0x4603             MOV      R3,R0
   \       0x1E   0x4602             MOV      R2,R0
   \       0x20   0x4601             MOV      R1,R0
   \       0x22   0x4640             MOV      R0,R8
   \       0x24   0x....'....        BL       mbedtls_rsa_export
   \       0x28   0x0004             MOVS     R4,R0
   \       0x2A   0xD11A             BNE.N    ??pk_write_rsa_pubkey_0
   \       0x2C   0xAA02             ADD      R2,SP,#+8
   \       0x2E   0x4639             MOV      R1,R7
   \       0x30   0x4630             MOV      R0,R6
   \       0x32   0x....'....        BL       mbedtls_asn1_write_mpi
   \       0x36   0x0004             MOVS     R4,R0
   \       0x38   0xD413             BMI.N    ??pk_write_rsa_pubkey_0
     76                  goto end_of_export;
     77              len += ret;
   \       0x3A   0x4625             MOV      R5,R4
     78          
     79              /* Export N */
     80              if ( ( ret = mbedtls_rsa_export( rsa, &T, NULL, NULL, NULL, NULL ) ) != 0 ||
     81                   ( ret = mbedtls_asn1_write_mpi( p, start, &T ) ) < 0 )
   \       0x3C   0x2000             MOVS     R0,#+0
   \       0x3E   0x9001             STR      R0,[SP, #+4]
   \       0x40   0x9000             STR      R0,[SP, #+0]
   \       0x42   0x4603             MOV      R3,R0
   \       0x44   0x4602             MOV      R2,R0
   \       0x46   0xA902             ADD      R1,SP,#+8
   \       0x48   0x4640             MOV      R0,R8
   \       0x4A   0x....'....        BL       mbedtls_rsa_export
   \       0x4E   0x0004             MOVS     R4,R0
   \       0x50   0xD107             BNE.N    ??pk_write_rsa_pubkey_0
   \       0x52   0xAA02             ADD      R2,SP,#+8
   \       0x54   0x4639             MOV      R1,R7
   \       0x56   0x4630             MOV      R0,R6
   \       0x58   0x....'....        BL       mbedtls_asn1_write_mpi
   \       0x5C   0x0004             MOVS     R4,R0
   \       0x5E   0xD400             BMI.N    ??pk_write_rsa_pubkey_0
     82                  goto end_of_export;
     83              len += ret;
   \       0x60   0x1965             ADDS     R5,R4,R5
     84          
     85          end_of_export:
     86          
     87              mbedtls_mpi_free( &T );
   \                     ??pk_write_rsa_pubkey_0: (+1)
   \       0x62   0xA802             ADD      R0,SP,#+8
   \       0x64   0x....'....        BL       mbedtls_mpi_free
     88              if( ret < 0 )
   \       0x68   0x2C00             CMP      R4,#+0
   \       0x6A   0xD501             BPL.N    ??pk_write_rsa_pubkey_1
     89                  return( ret );
   \       0x6C   0x4620             MOV      R0,R4
   \       0x6E   0xE010             B.N      ??pk_write_rsa_pubkey_2
     90          
     91              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
   \                     ??pk_write_rsa_pubkey_1: (+1)
   \       0x70   0x462A             MOV      R2,R5
   \       0x72   0x4639             MOV      R1,R7
   \       0x74   0x4630             MOV      R0,R6
   \       0x76   0x....'....        BL       mbedtls_asn1_write_len
   \       0x7A   0x2800             CMP      R0,#+0
   \       0x7C   0xD409             BMI.N    ??pk_write_rsa_pubkey_2
   \       0x7E   0x1945             ADDS     R5,R0,R5
     92              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_CONSTRUCTED |
     93                                                           MBEDTLS_ASN1_SEQUENCE ) );
   \       0x80   0x2230             MOVS     R2,#+48
   \       0x82   0x4639             MOV      R1,R7
   \       0x84   0x4630             MOV      R0,R6
   \       0x86   0x....'....        BL       mbedtls_asn1_write_tag
   \       0x8A   0x2800             CMP      R0,#+0
   \       0x8C   0xD401             BMI.N    ??pk_write_rsa_pubkey_2
     94          
     95              return( (int) len );
   \       0x8E   0x1945             ADDS     R5,R0,R5
   \       0x90   0x4628             MOV      R0,R5
   \                     ??pk_write_rsa_pubkey_2: (+1)
   \       0x92   0xB006             ADD      SP,SP,#+24
   \       0x94   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
     96          }
     97          #endif /* MBEDTLS_RSA_C */
     98          
     99          #if defined(MBEDTLS_ECP_C)
    100          /*
    101           * EC public key is an EC point
    102           */

   \                                 In section .text, align 2, keep-with-next
    103          static int pk_write_ec_pubkey( unsigned char **p, unsigned char *start,
    104                                         mbedtls_ecp_keypair *ec )
    105          {
   \                     pk_write_ec_pubkey: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0xB09C             SUB      SP,SP,#+112
   \        0x4   0x4604             MOV      R4,R0
   \        0x6   0x460D             MOV      R5,R1
   \        0x8   0x4610             MOV      R0,R2
    106              int ret;
    107              size_t len = 0;
   \        0xA   0x2100             MOVS     R1,#+0
   \        0xC   0x9102             STR      R1,[SP, #+8]
    108              unsigned char buf[MBEDTLS_ECP_MAX_PT_LEN];
    109          
    110              if( ( ret = mbedtls_ecp_point_write_binary( &ec->grp, &ec->Q,
    111                                                  MBEDTLS_ECP_PF_UNCOMPRESSED,
    112                                                  &len, buf, sizeof( buf ) ) ) != 0 )
   \        0xE   0x2161             MOVS     R1,#+97
   \       0x10   0x9101             STR      R1,[SP, #+4]
   \       0x12   0xA903             ADD      R1,SP,#+12
   \       0x14   0x9100             STR      R1,[SP, #+0]
   \       0x16   0xAB02             ADD      R3,SP,#+8
   \       0x18   0x2200             MOVS     R2,#+0
   \       0x1A   0xF100 0x0188      ADD      R1,R0,#+136
   \       0x1E   0x....'....        BL       mbedtls_ecp_point_write_binary
   \       0x22   0x2800             CMP      R0,#+0
   \       0x24   0xD113             BNE.N    ??pk_write_ec_pubkey_0
    113              {
    114                  return( ret );
    115              }
    116          
    117              if( *p < start || (size_t)( *p - start ) < len )
   \       0x26   0x6820             LDR      R0,[R4, #+0]
   \       0x28   0x42A8             CMP      R0,R5
   \       0x2A   0xD303             BCC.N    ??pk_write_ec_pubkey_1
   \       0x2C   0x1B45             SUBS     R5,R0,R5
   \       0x2E   0x9802             LDR      R0,[SP, #+8]
   \       0x30   0x4285             CMP      R5,R0
   \       0x32   0xD202             BCS.N    ??pk_write_ec_pubkey_2
    118                  return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
   \                     ??pk_write_ec_pubkey_1: (+1)
   \       0x34   0xF06F 0x006B      MVN      R0,#+107
   \       0x38   0xE009             B.N      ??pk_write_ec_pubkey_0
    119          
    120              *p -= len;
   \                     ??pk_write_ec_pubkey_2: (+1)
   \       0x3A   0x6820             LDR      R0,[R4, #+0]
   \       0x3C   0x9902             LDR      R1,[SP, #+8]
   \       0x3E   0x4249             RSBS     R1,R1,#+0
   \       0x40   0x4408             ADD      R0,R0,R1
   \       0x42   0x6020             STR      R0,[R4, #+0]
    121              memcpy( *p, buf, len );
   \       0x44   0x9A02             LDR      R2,[SP, #+8]
   \       0x46   0xA903             ADD      R1,SP,#+12
   \       0x48   0x....'....        BL       __aeabi_memcpy
    122          
    123              return( (int) len );
   \       0x4C   0x9802             LDR      R0,[SP, #+8]
   \                     ??pk_write_ec_pubkey_0: (+1)
   \       0x4E   0xB01D             ADD      SP,SP,#+116
   \       0x50   0xBD30             POP      {R4,R5,PC}       ;; return
    124          }
    125          
    126          /*
    127           * ECParameters ::= CHOICE {
    128           *   namedCurve         OBJECT IDENTIFIER
    129           * }
    130           */

   \                                 In section .text, align 2, keep-with-next
    131          static int pk_write_ec_param( unsigned char **p, unsigned char *start,
    132                                        mbedtls_ecp_keypair *ec )
    133          {
   \                     pk_write_ec_param: (+1)
   \        0x0   0xB53E             PUSH     {R1-R5,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
   \        0x6   0x4610             MOV      R0,R2
    134              int ret;
    135              size_t len = 0;
    136              const char *oid;
    137              size_t oid_len;
    138          
    139              if( ( ret = mbedtls_oid_get_oid_by_ec_grp( ec->grp.id, &oid, &oid_len ) ) != 0 )
   \        0x8   0x466A             MOV      R2,SP
   \        0xA   0xA901             ADD      R1,SP,#+4
   \        0xC   0x7800             LDRB     R0,[R0, #+0]
   \        0xE   0x....'....        BL       mbedtls_oid_get_oid_by_ec_grp
   \       0x12   0x2800             CMP      R0,#+0
   \       0x14   0xD105             BNE.N    ??pk_write_ec_param_0
    140                  return( ret );
    141          
    142              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_oid( p, start, oid, oid_len ) );
   \       0x16   0x9B00             LDR      R3,[SP, #+0]
   \       0x18   0x9A01             LDR      R2,[SP, #+4]
   \       0x1A   0x4629             MOV      R1,R5
   \       0x1C   0x4620             MOV      R0,R4
   \       0x1E   0x....'....        BL       mbedtls_asn1_write_oid
    143          
    144              return( (int) len );
   \                     ??pk_write_ec_param_0: (+1)
   \       0x22   0xBD3E             POP      {R1-R5,PC}       ;; return
    145          }
    146          #endif /* MBEDTLS_ECP_C */
    147          

   \                                 In section .text, align 2, keep-with-next
    148          int mbedtls_pk_write_pubkey( unsigned char **p, unsigned char *start,
    149                                       const mbedtls_pk_context *key )
    150          {
   \                     mbedtls_pk_write_pubkey: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
   \        0x6   0x4616             MOV      R6,R2
    151              int ret;
    152              size_t len = 0;
    153          
    154          #if defined(MBEDTLS_RSA_C)
    155              if( mbedtls_pk_get_type( key ) == MBEDTLS_PK_RSA )
   \        0x8   0x4630             MOV      R0,R6
   \        0xA   0x....'....        BL       mbedtls_pk_get_type
   \        0xE   0x2801             CMP      R0,#+1
   \       0x10   0xD109             BNE.N    ??mbedtls_pk_write_pubkey_0
    156                  MBEDTLS_ASN1_CHK_ADD( len, pk_write_rsa_pubkey( p, start, mbedtls_pk_rsa( *key ) ) );
   \       0x12   0xE9D6 0x0100      LDRD     R0,R1,[R6, #+0]
   \       0x16   0x....'....        BL       mbedtls_pk_rsa
   \       0x1A   0x4602             MOV      R2,R0
   \       0x1C   0x4629             MOV      R1,R5
   \       0x1E   0x4620             MOV      R0,R4
   \       0x20   0xE8BD 0x4070      POP      {R4-R6,LR}
   \       0x24   0x....             B.N      pk_write_rsa_pubkey
    157              else
    158          #endif
    159          #if defined(MBEDTLS_ECP_C)
    160              if( mbedtls_pk_get_type( key ) == MBEDTLS_PK_ECKEY )
   \                     ??mbedtls_pk_write_pubkey_0: (+1)
   \       0x26   0x4630             MOV      R0,R6
   \       0x28   0x....'....        BL       mbedtls_pk_get_type
   \       0x2C   0x2802             CMP      R0,#+2
   \       0x2E   0xD109             BNE.N    ??mbedtls_pk_write_pubkey_1
    161                  MBEDTLS_ASN1_CHK_ADD( len, pk_write_ec_pubkey( p, start, mbedtls_pk_ec( *key ) ) );
   \       0x30   0xE9D6 0x0100      LDRD     R0,R1,[R6, #+0]
   \       0x34   0x....'....        BL       mbedtls_pk_ec
   \       0x38   0x4602             MOV      R2,R0
   \       0x3A   0x4629             MOV      R1,R5
   \       0x3C   0x4620             MOV      R0,R4
   \       0x3E   0xE8BD 0x4070      POP      {R4-R6,LR}
   \       0x42   0x....             B.N      pk_write_ec_pubkey
    162              else
    163          #endif
    164                  return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );
   \                     ??mbedtls_pk_write_pubkey_1: (+1)
   \       0x44   0x....'....        LDR.W    R0,??DataTable4  ;; 0xffffc680
   \       0x48   0xBD70             POP      {R4-R6,PC}       ;; return
    165          
    166              return( (int) len );
    167          }
    168          

   \                                 In section .text, align 2, keep-with-next
    169          int mbedtls_pk_write_pubkey_der( mbedtls_pk_context *key, unsigned char *buf, size_t size )
    170          {
   \                     mbedtls_pk_write_pubkey_der: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0xB084             SUB      SP,SP,#+16
   \        0x4   0x4606             MOV      R6,R0
   \        0x6   0x460C             MOV      R4,R1
    171              int ret;
    172              unsigned char *c;
    173              size_t len = 0, par_len = 0, oid_len;
   \        0x8   0x2700             MOVS     R7,#+0
    174              const char *oid;
    175          
    176              c = buf + size;
   \        0xA   0x18A0             ADDS     R0,R4,R2
   \        0xC   0x9001             STR      R0,[SP, #+4]
    177          
    178              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_pk_write_pubkey( &c, buf, key ) );
   \        0xE   0x4632             MOV      R2,R6
   \       0x10   0xA801             ADD      R0,SP,#+4
   \       0x12   0x....'....        BL       mbedtls_pk_write_pubkey
   \       0x16   0x0005             MOVS     R5,R0
   \       0x18   0xD451             BMI.N    ??mbedtls_pk_write_pubkey_der_0
    179          
    180              if( c - buf < 1 )
   \       0x1A   0x9801             LDR      R0,[SP, #+4]
   \       0x1C   0x1B00             SUBS     R0,R0,R4
   \       0x1E   0x2801             CMP      R0,#+1
   \       0x20   0xDA02             BGE.N    ??mbedtls_pk_write_pubkey_der_1
    181                  return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
   \       0x22   0xF06F 0x006B      MVN      R0,#+107
   \       0x26   0xE04A             B.N      ??mbedtls_pk_write_pubkey_der_0
    182          
    183              /*
    184               *  SubjectPublicKeyInfo  ::=  SEQUENCE  {
    185               *       algorithm            AlgorithmIdentifier,
    186               *       subjectPublicKey     BIT STRING }
    187               */
    188              *--c = 0;
   \                     ??mbedtls_pk_write_pubkey_der_1: (+1)
   \       0x28   0x9801             LDR      R0,[SP, #+4]
   \       0x2A   0x1E40             SUBS     R0,R0,#+1
   \       0x2C   0x9001             STR      R0,[SP, #+4]
   \       0x2E   0x4638             MOV      R0,R7
   \       0x30   0x9901             LDR      R1,[SP, #+4]
   \       0x32   0x7008             STRB     R0,[R1, #+0]
    189              len += 1;
   \       0x34   0x1C6D             ADDS     R5,R5,#+1
    190          
    191              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &c, buf, len ) );
   \       0x36   0x462A             MOV      R2,R5
   \       0x38   0x4621             MOV      R1,R4
   \       0x3A   0xA801             ADD      R0,SP,#+4
   \       0x3C   0x....'....        BL       mbedtls_asn1_write_len
   \       0x40   0x2800             CMP      R0,#+0
   \       0x42   0xD43C             BMI.N    ??mbedtls_pk_write_pubkey_der_0
   \       0x44   0x1945             ADDS     R5,R0,R5
    192              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &c, buf, MBEDTLS_ASN1_BIT_STRING ) );
   \       0x46   0x2203             MOVS     R2,#+3
   \       0x48   0x4621             MOV      R1,R4
   \       0x4A   0xA801             ADD      R0,SP,#+4
   \       0x4C   0x....'....        BL       mbedtls_asn1_write_tag
   \       0x50   0x2800             CMP      R0,#+0
   \       0x52   0xD434             BMI.N    ??mbedtls_pk_write_pubkey_der_0
   \       0x54   0x1945             ADDS     R5,R0,R5
    193          
    194              if( ( ret = mbedtls_oid_get_oid_by_pk_alg( mbedtls_pk_get_type( key ),
    195                                                 &oid, &oid_len ) ) != 0 )
   \       0x56   0x4630             MOV      R0,R6
   \       0x58   0x....'....        BL       mbedtls_pk_get_type
   \       0x5C   0xAA03             ADD      R2,SP,#+12
   \       0x5E   0xA902             ADD      R1,SP,#+8
   \       0x60   0x....'....        BL       mbedtls_oid_get_oid_by_pk_alg
   \       0x64   0x2800             CMP      R0,#+0
   \       0x66   0xD12A             BNE.N    ??mbedtls_pk_write_pubkey_der_0
    196              {
    197                  return( ret );
    198              }
    199          
    200          #if defined(MBEDTLS_ECP_C)
    201              if( mbedtls_pk_get_type( key ) == MBEDTLS_PK_ECKEY )
   \       0x68   0x4630             MOV      R0,R6
   \       0x6A   0x....'....        BL       mbedtls_pk_get_type
   \       0x6E   0x2802             CMP      R0,#+2
   \       0x70   0xD10A             BNE.N    ??mbedtls_pk_write_pubkey_der_2
    202              {
    203                  MBEDTLS_ASN1_CHK_ADD( par_len, pk_write_ec_param( &c, buf, mbedtls_pk_ec( *key ) ) );
   \       0x72   0xE9D6 0x0100      LDRD     R0,R1,[R6, #+0]
   \       0x76   0x....'....        BL       mbedtls_pk_ec
   \       0x7A   0x4602             MOV      R2,R0
   \       0x7C   0x4621             MOV      R1,R4
   \       0x7E   0xA801             ADD      R0,SP,#+4
   \       0x80   0x....'....        BL       pk_write_ec_param
   \       0x84   0x0007             MOVS     R7,R0
   \       0x86   0xD41A             BMI.N    ??mbedtls_pk_write_pubkey_der_0
    204              }
    205          #endif
    206          
    207              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_algorithm_identifier( &c, buf, oid, oid_len,
    208                                                                  par_len ) );
   \                     ??mbedtls_pk_write_pubkey_der_2: (+1)
   \       0x88   0x9700             STR      R7,[SP, #+0]
   \       0x8A   0x9B03             LDR      R3,[SP, #+12]
   \       0x8C   0x9A02             LDR      R2,[SP, #+8]
   \       0x8E   0x4621             MOV      R1,R4
   \       0x90   0xA801             ADD      R0,SP,#+4
   \       0x92   0x....'....        BL       mbedtls_asn1_write_algorithm_identifier
   \       0x96   0x2800             CMP      R0,#+0
   \       0x98   0xD411             BMI.N    ??mbedtls_pk_write_pubkey_der_0
   \       0x9A   0x1945             ADDS     R5,R0,R5
    209          
    210              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &c, buf, len ) );
   \       0x9C   0x462A             MOV      R2,R5
   \       0x9E   0x4621             MOV      R1,R4
   \       0xA0   0xA801             ADD      R0,SP,#+4
   \       0xA2   0x....'....        BL       mbedtls_asn1_write_len
   \       0xA6   0x2800             CMP      R0,#+0
   \       0xA8   0xD409             BMI.N    ??mbedtls_pk_write_pubkey_der_0
   \       0xAA   0x1945             ADDS     R5,R0,R5
    211              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &c, buf, MBEDTLS_ASN1_CONSTRUCTED |
    212                                                          MBEDTLS_ASN1_SEQUENCE ) );
   \       0xAC   0x2230             MOVS     R2,#+48
   \       0xAE   0x4621             MOV      R1,R4
   \       0xB0   0xA801             ADD      R0,SP,#+4
   \       0xB2   0x....'....        BL       mbedtls_asn1_write_tag
   \       0xB6   0x2800             CMP      R0,#+0
   \       0xB8   0xD401             BMI.N    ??mbedtls_pk_write_pubkey_der_0
    213          
    214              return( (int) len );
   \       0xBA   0x1945             ADDS     R5,R0,R5
   \       0xBC   0x4628             MOV      R0,R5
   \                     ??mbedtls_pk_write_pubkey_der_0: (+1)
   \       0xBE   0xB005             ADD      SP,SP,#+20
   \       0xC0   0xBDF0             POP      {R4-R7,PC}       ;; return
    215          }
    216          

   \                                 In section .text, align 2, keep-with-next
    217          int mbedtls_pk_write_key_der( mbedtls_pk_context *key, unsigned char *buf, size_t size )
    218          {
   \                     mbedtls_pk_write_key_der: (+1)
   \        0x0   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \        0x4   0xB086             SUB      SP,SP,#+24
   \        0x6   0x4604             MOV      R4,R0
   \        0x8   0x460D             MOV      R5,R1
    219              int ret;
    220              unsigned char *c = buf + size;
   \        0xA   0x18A8             ADDS     R0,R5,R2
   \        0xC   0x9002             STR      R0,[SP, #+8]
    221              size_t len = 0;
   \        0xE   0x2600             MOVS     R6,#+0
    222          
    223          #if defined(MBEDTLS_RSA_C)
    224              if( mbedtls_pk_get_type( key ) == MBEDTLS_PK_RSA )
   \       0x10   0x4620             MOV      R0,R4
   \       0x12   0x....'....        BL       mbedtls_pk_get_type
   \       0x16   0x2801             CMP      R0,#+1
   \       0x18   0xF040 0x80BE      BNE.W    ??mbedtls_pk_write_key_der_0
    225              {
    226                  mbedtls_mpi T; /* Temporary holding the exported parameters */
    227                  mbedtls_rsa_context *rsa = mbedtls_pk_rsa( *key );
   \       0x1C   0xE9D4 0x0100      LDRD     R0,R1,[R4, #+0]
   \       0x20   0x....'....        BL       mbedtls_pk_rsa
   \       0x24   0x4607             MOV      R7,R0
    228          
    229                  /*
    230                   * Export the parameters one after another to avoid simultaneous copies.
    231                   */
    232          
    233                  mbedtls_mpi_init( &T );
   \       0x26   0xA803             ADD      R0,SP,#+12
   \       0x28   0x....'....        BL       mbedtls_mpi_init
    234          
    235                  /* Export QP */
    236                  if( ( ret = mbedtls_rsa_export_crt( rsa, NULL, NULL, &T ) ) != 0 ||
    237                      ( ret = mbedtls_asn1_write_mpi( &c, buf, &T ) ) < 0 )
   \       0x2C   0xAB03             ADD      R3,SP,#+12
   \       0x2E   0x4632             MOV      R2,R6
   \       0x30   0x4611             MOV      R1,R2
   \       0x32   0x4638             MOV      R0,R7
   \       0x34   0x....'....        BL       mbedtls_rsa_export_crt
   \       0x38   0x0004             MOVS     R4,R0
   \       0x3A   0xF040 0x808A      BNE.W    ??mbedtls_pk_write_key_der_1
   \       0x3E   0xAA03             ADD      R2,SP,#+12
   \       0x40   0x4629             MOV      R1,R5
   \       0x42   0xA802             ADD      R0,SP,#+8
   \       0x44   0x....'....        BL       mbedtls_asn1_write_mpi
   \       0x48   0x0004             MOVS     R4,R0
   \       0x4A   0xF100 0x8082      BMI.W    ??mbedtls_pk_write_key_der_1
    238                      goto end_of_export;
    239                  len += ret;
   \       0x4E   0x4626             MOV      R6,R4
    240          
    241                  /* Export DQ */
    242                  if( ( ret = mbedtls_rsa_export_crt( rsa, NULL, &T, NULL ) ) != 0 ||
    243                      ( ret = mbedtls_asn1_write_mpi( &c, buf, &T ) ) < 0 )
   \       0x50   0x2300             MOVS     R3,#+0
   \       0x52   0xAA03             ADD      R2,SP,#+12
   \       0x54   0x4619             MOV      R1,R3
   \       0x56   0x4638             MOV      R0,R7
   \       0x58   0x....'....        BL       mbedtls_rsa_export_crt
   \       0x5C   0x0004             MOVS     R4,R0
   \       0x5E   0xD178             BNE.N    ??mbedtls_pk_write_key_der_1
   \       0x60   0xAA03             ADD      R2,SP,#+12
   \       0x62   0x4629             MOV      R1,R5
   \       0x64   0xA802             ADD      R0,SP,#+8
   \       0x66   0x....'....        BL       mbedtls_asn1_write_mpi
   \       0x6A   0x0004             MOVS     R4,R0
   \       0x6C   0xD471             BMI.N    ??mbedtls_pk_write_key_der_1
    244                      goto end_of_export;
    245                  len += ret;
   \       0x6E   0x19A6             ADDS     R6,R4,R6
    246          
    247                  /* Export DP */
    248                  if( ( ret = mbedtls_rsa_export_crt( rsa, &T, NULL, NULL ) ) != 0 ||
    249                      ( ret = mbedtls_asn1_write_mpi( &c, buf, &T ) ) < 0 )
   \       0x70   0x2300             MOVS     R3,#+0
   \       0x72   0x461A             MOV      R2,R3
   \       0x74   0xA903             ADD      R1,SP,#+12
   \       0x76   0x4638             MOV      R0,R7
   \       0x78   0x....'....        BL       mbedtls_rsa_export_crt
   \       0x7C   0x0004             MOVS     R4,R0
   \       0x7E   0xD168             BNE.N    ??mbedtls_pk_write_key_der_1
   \       0x80   0xAA03             ADD      R2,SP,#+12
   \       0x82   0x4629             MOV      R1,R5
   \       0x84   0xA802             ADD      R0,SP,#+8
   \       0x86   0x....'....        BL       mbedtls_asn1_write_mpi
   \       0x8A   0x0004             MOVS     R4,R0
   \       0x8C   0xD461             BMI.N    ??mbedtls_pk_write_key_der_1
    250                      goto end_of_export;
    251                  len += ret;
   \       0x8E   0x19A6             ADDS     R6,R4,R6
    252          
    253                  /* Export Q */
    254                  if ( ( ret = mbedtls_rsa_export( rsa, NULL, NULL,
    255                                                   &T, NULL, NULL ) ) != 0 ||
    256                       ( ret = mbedtls_asn1_write_mpi( &c, buf, &T ) ) < 0 )
   \       0x90   0x2000             MOVS     R0,#+0
   \       0x92   0x9001             STR      R0,[SP, #+4]
   \       0x94   0x9000             STR      R0,[SP, #+0]
   \       0x96   0xAB03             ADD      R3,SP,#+12
   \       0x98   0x4602             MOV      R2,R0
   \       0x9A   0x4601             MOV      R1,R0
   \       0x9C   0x4638             MOV      R0,R7
   \       0x9E   0x....'....        BL       mbedtls_rsa_export
   \       0xA2   0x0004             MOVS     R4,R0
   \       0xA4   0xD155             BNE.N    ??mbedtls_pk_write_key_der_1
   \       0xA6   0xAA03             ADD      R2,SP,#+12
   \       0xA8   0x4629             MOV      R1,R5
   \       0xAA   0xA802             ADD      R0,SP,#+8
   \       0xAC   0x....'....        BL       mbedtls_asn1_write_mpi
   \       0xB0   0x0004             MOVS     R4,R0
   \       0xB2   0xD44E             BMI.N    ??mbedtls_pk_write_key_der_1
    257                      goto end_of_export;
    258                  len += ret;
   \       0xB4   0x19A6             ADDS     R6,R4,R6
    259          
    260                  /* Export P */
    261                  if ( ( ret = mbedtls_rsa_export( rsa, NULL, &T,
    262                                                   NULL, NULL, NULL ) ) != 0 ||
    263                       ( ret = mbedtls_asn1_write_mpi( &c, buf, &T ) ) < 0 )
   \       0xB6   0x2000             MOVS     R0,#+0
   \       0xB8   0x9001             STR      R0,[SP, #+4]
   \       0xBA   0x9000             STR      R0,[SP, #+0]
   \       0xBC   0x4603             MOV      R3,R0
   \       0xBE   0xAA03             ADD      R2,SP,#+12
   \       0xC0   0x4601             MOV      R1,R0
   \       0xC2   0x4638             MOV      R0,R7
   \       0xC4   0x....'....        BL       mbedtls_rsa_export
   \       0xC8   0x0004             MOVS     R4,R0
   \       0xCA   0xD142             BNE.N    ??mbedtls_pk_write_key_der_1
   \       0xCC   0xAA03             ADD      R2,SP,#+12
   \       0xCE   0x4629             MOV      R1,R5
   \       0xD0   0xA802             ADD      R0,SP,#+8
   \       0xD2   0x....'....        BL       mbedtls_asn1_write_mpi
   \       0xD6   0x0004             MOVS     R4,R0
   \       0xD8   0xD43B             BMI.N    ??mbedtls_pk_write_key_der_1
    264                      goto end_of_export;
    265                  len += ret;
   \       0xDA   0x19A6             ADDS     R6,R4,R6
    266          
    267                  /* Export D */
    268                  if ( ( ret = mbedtls_rsa_export( rsa, NULL, NULL,
    269                                                   NULL, &T, NULL ) ) != 0 ||
    270                       ( ret = mbedtls_asn1_write_mpi( &c, buf, &T ) ) < 0 )
   \       0xDC   0x2000             MOVS     R0,#+0
   \       0xDE   0x9001             STR      R0,[SP, #+4]
   \       0xE0   0xA803             ADD      R0,SP,#+12
   \       0xE2   0x9000             STR      R0,[SP, #+0]
   \       0xE4   0x2300             MOVS     R3,#+0
   \       0xE6   0x461A             MOV      R2,R3
   \       0xE8   0x4611             MOV      R1,R2
   \       0xEA   0x4638             MOV      R0,R7
   \       0xEC   0x....'....        BL       mbedtls_rsa_export
   \       0xF0   0x0004             MOVS     R4,R0
   \       0xF2   0xD12E             BNE.N    ??mbedtls_pk_write_key_der_1
   \       0xF4   0xAA03             ADD      R2,SP,#+12
   \       0xF6   0x4629             MOV      R1,R5
   \       0xF8   0xA802             ADD      R0,SP,#+8
   \       0xFA   0x....'....        BL       mbedtls_asn1_write_mpi
   \       0xFE   0x0004             MOVS     R4,R0
   \      0x100   0xD427             BMI.N    ??mbedtls_pk_write_key_der_1
    271                      goto end_of_export;
    272                  len += ret;
   \      0x102   0x19A6             ADDS     R6,R4,R6
    273          
    274                  /* Export E */
    275                  if ( ( ret = mbedtls_rsa_export( rsa, NULL, NULL,
    276                                                   NULL, NULL, &T ) ) != 0 ||
    277                       ( ret = mbedtls_asn1_write_mpi( &c, buf, &T ) ) < 0 )
   \      0x104   0xA803             ADD      R0,SP,#+12
   \      0x106   0x9001             STR      R0,[SP, #+4]
   \      0x108   0x2000             MOVS     R0,#+0
   \      0x10A   0x9000             STR      R0,[SP, #+0]
   \      0x10C   0x4603             MOV      R3,R0
   \      0x10E   0x4602             MOV      R2,R0
   \      0x110   0x4601             MOV      R1,R0
   \      0x112   0x4638             MOV      R0,R7
   \      0x114   0x....'....        BL       mbedtls_rsa_export
   \      0x118   0x0004             MOVS     R4,R0
   \      0x11A   0xD11A             BNE.N    ??mbedtls_pk_write_key_der_1
   \      0x11C   0xAA03             ADD      R2,SP,#+12
   \      0x11E   0x4629             MOV      R1,R5
   \      0x120   0xA802             ADD      R0,SP,#+8
   \      0x122   0x....'....        BL       mbedtls_asn1_write_mpi
   \      0x126   0x0004             MOVS     R4,R0
   \      0x128   0xD413             BMI.N    ??mbedtls_pk_write_key_der_1
    278                      goto end_of_export;
    279                  len += ret;
   \      0x12A   0x19A6             ADDS     R6,R4,R6
    280          
    281                  /* Export N */
    282                  if ( ( ret = mbedtls_rsa_export( rsa, &T, NULL,
    283                                                   NULL, NULL, NULL ) ) != 0 ||
    284                       ( ret = mbedtls_asn1_write_mpi( &c, buf, &T ) ) < 0 )
   \      0x12C   0x2000             MOVS     R0,#+0
   \      0x12E   0x9001             STR      R0,[SP, #+4]
   \      0x130   0x9000             STR      R0,[SP, #+0]
   \      0x132   0x4603             MOV      R3,R0
   \      0x134   0x4602             MOV      R2,R0
   \      0x136   0xA903             ADD      R1,SP,#+12
   \      0x138   0x4638             MOV      R0,R7
   \      0x13A   0x....'....        BL       mbedtls_rsa_export
   \      0x13E   0x0004             MOVS     R4,R0
   \      0x140   0xD107             BNE.N    ??mbedtls_pk_write_key_der_1
   \      0x142   0xAA03             ADD      R2,SP,#+12
   \      0x144   0x4629             MOV      R1,R5
   \      0x146   0xA802             ADD      R0,SP,#+8
   \      0x148   0x....'....        BL       mbedtls_asn1_write_mpi
   \      0x14C   0x0004             MOVS     R4,R0
   \      0x14E   0xD400             BMI.N    ??mbedtls_pk_write_key_der_1
    285                      goto end_of_export;
    286                  len += ret;
   \      0x150   0x19A6             ADDS     R6,R4,R6
    287          
    288              end_of_export:
    289          
    290                  mbedtls_mpi_free( &T );
   \                     ??mbedtls_pk_write_key_der_1: (+1)
   \      0x152   0xA803             ADD      R0,SP,#+12
   \      0x154   0x....'....        BL       mbedtls_mpi_free
    291                  if( ret < 0 )
   \      0x158   0x2C00             CMP      R4,#+0
   \      0x15A   0xF100 0x809B      BMI.W    ??mbedtls_pk_write_key_der_2
    292                      return( ret );
    293          
    294                  MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_int( &c, buf, 0 ) );
   \      0x15E   0x2200             MOVS     R2,#+0
   \      0x160   0x4629             MOV      R1,R5
   \      0x162   0xA802             ADD      R0,SP,#+8
   \      0x164   0x....'....        BL       mbedtls_asn1_write_int
   \      0x168   0x0004             MOVS     R4,R0
   \      0x16A   0xF100 0x8093      BMI.W    ??mbedtls_pk_write_key_der_2
   \      0x16E   0x19A6             ADDS     R6,R4,R6
    295                  MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &c, buf, len ) );
   \      0x170   0x4632             MOV      R2,R6
   \      0x172   0x4629             MOV      R1,R5
   \      0x174   0xA802             ADD      R0,SP,#+8
   \      0x176   0x....'....        BL       mbedtls_asn1_write_len
   \      0x17A   0x0004             MOVS     R4,R0
   \      0x17C   0xF100 0x808A      BMI.W    ??mbedtls_pk_write_key_der_2
   \      0x180   0x19A6             ADDS     R6,R4,R6
    296                  MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &c,
    297                                                         buf, MBEDTLS_ASN1_CONSTRUCTED |
    298                                                         MBEDTLS_ASN1_SEQUENCE ) );
   \      0x182   0x2230             MOVS     R2,#+48
   \      0x184   0x4629             MOV      R1,R5
   \      0x186   0xA802             ADD      R0,SP,#+8
   \      0x188   0x....'....        BL       mbedtls_asn1_write_tag
   \      0x18C   0x0004             MOVS     R4,R0
   \      0x18E   0xF100 0x8081      BMI.W    ??mbedtls_pk_write_key_der_2
    299              }
    300              else
    301          #endif /* MBEDTLS_RSA_C */
    302          #if defined(MBEDTLS_ECP_C)
    303              if( mbedtls_pk_get_type( key ) == MBEDTLS_PK_ECKEY )
    304              {
    305                  mbedtls_ecp_keypair *ec = mbedtls_pk_ec( *key );
    306                  size_t pub_len = 0, par_len = 0;
    307          
    308                  /*
    309                   * RFC 5915, or SEC1 Appendix C.4
    310                   *
    311                   * ECPrivateKey ::= SEQUENCE {
    312                   *      version        INTEGER { ecPrivkeyVer1(1) } (ecPrivkeyVer1),
    313                   *      privateKey     OCTET STRING,
    314                   *      parameters [0] ECParameters {{ NamedCurve }} OPTIONAL,
    315                   *      publicKey  [1] BIT STRING OPTIONAL
    316                   *    }
    317                   */
    318          
    319                  /* publicKey */
    320                  MBEDTLS_ASN1_CHK_ADD( pub_len, pk_write_ec_pubkey( &c, buf, ec ) );
    321          
    322                  if( c - buf < 1 )
    323                      return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
    324                  *--c = 0;
    325                  pub_len += 1;
    326          
    327                  MBEDTLS_ASN1_CHK_ADD( pub_len, mbedtls_asn1_write_len( &c, buf, pub_len ) );
    328                  MBEDTLS_ASN1_CHK_ADD( pub_len, mbedtls_asn1_write_tag( &c, buf, MBEDTLS_ASN1_BIT_STRING ) );
    329          
    330                  MBEDTLS_ASN1_CHK_ADD( pub_len, mbedtls_asn1_write_len( &c, buf, pub_len ) );
    331                  MBEDTLS_ASN1_CHK_ADD( pub_len, mbedtls_asn1_write_tag( &c, buf,
    332                                      MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 1 ) );
    333                  len += pub_len;
    334          
    335                  /* parameters */
    336                  MBEDTLS_ASN1_CHK_ADD( par_len, pk_write_ec_param( &c, buf, ec ) );
    337          
    338                  MBEDTLS_ASN1_CHK_ADD( par_len, mbedtls_asn1_write_len( &c, buf, par_len ) );
    339                  MBEDTLS_ASN1_CHK_ADD( par_len, mbedtls_asn1_write_tag( &c, buf,
    340                                      MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 0 ) );
    341                  len += par_len;
    342          
    343                  /* privateKey: write as MPI then fix tag */
    344                  MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &c, buf, &ec->d ) );
    345                  *c = MBEDTLS_ASN1_OCTET_STRING;
    346          
    347                  /* version */
    348                  MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_int( &c, buf, 1 ) );
    349          
    350                  MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &c, buf, len ) );
    351                  MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &c, buf, MBEDTLS_ASN1_CONSTRUCTED |
    352                                                              MBEDTLS_ASN1_SEQUENCE ) );
    353              }
    354              else
    355          #endif /* MBEDTLS_ECP_C */
    356                  return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );
    357          
    358              return( (int) len );
   \                     ??mbedtls_pk_write_key_der_3: (+1)
   \      0x192   0x19A6             ADDS     R6,R4,R6
   \      0x194   0x4630             MOV      R0,R6
   \      0x196   0xE080             B.N      ??mbedtls_pk_write_key_der_4
   \                     ??mbedtls_pk_write_key_der_0: (+1)
   \      0x198   0x4620             MOV      R0,R4
   \      0x19A   0x....'....        BL       mbedtls_pk_get_type
   \      0x19E   0x2802             CMP      R0,#+2
   \      0x1A0   0xD17A             BNE.N    ??mbedtls_pk_write_key_der_5
   \      0x1A2   0xE9D4 0x0100      LDRD     R0,R1,[R4, #+0]
   \      0x1A6   0x....'....        BL       mbedtls_pk_ec
   \      0x1AA   0x4607             MOV      R7,R0
   \      0x1AC   0x463A             MOV      R2,R7
   \      0x1AE   0x4629             MOV      R1,R5
   \      0x1B0   0xA802             ADD      R0,SP,#+8
   \      0x1B2   0x....'....        BL       pk_write_ec_pubkey
   \      0x1B6   0x0004             MOVS     R4,R0
   \      0x1B8   0xD46C             BMI.N    ??mbedtls_pk_write_key_der_2
   \      0x1BA   0x9802             LDR      R0,[SP, #+8]
   \      0x1BC   0x1B40             SUBS     R0,R0,R5
   \      0x1BE   0x2801             CMP      R0,#+1
   \      0x1C0   0xDA02             BGE.N    ??mbedtls_pk_write_key_der_6
   \      0x1C2   0xF06F 0x006B      MVN      R0,#+107
   \      0x1C6   0xE068             B.N      ??mbedtls_pk_write_key_der_4
   \                     ??mbedtls_pk_write_key_der_6: (+1)
   \      0x1C8   0x9802             LDR      R0,[SP, #+8]
   \      0x1CA   0x1E40             SUBS     R0,R0,#+1
   \      0x1CC   0x9002             STR      R0,[SP, #+8]
   \      0x1CE   0x4630             MOV      R0,R6
   \      0x1D0   0x9902             LDR      R1,[SP, #+8]
   \      0x1D2   0x7008             STRB     R0,[R1, #+0]
   \      0x1D4   0x4626             MOV      R6,R4
   \      0x1D6   0x1C76             ADDS     R6,R6,#+1
   \      0x1D8   0x4632             MOV      R2,R6
   \      0x1DA   0x4629             MOV      R1,R5
   \      0x1DC   0xA802             ADD      R0,SP,#+8
   \      0x1DE   0x....'....        BL       mbedtls_asn1_write_len
   \      0x1E2   0x0004             MOVS     R4,R0
   \      0x1E4   0xD456             BMI.N    ??mbedtls_pk_write_key_der_2
   \      0x1E6   0x19A6             ADDS     R6,R4,R6
   \      0x1E8   0x2203             MOVS     R2,#+3
   \      0x1EA   0x4629             MOV      R1,R5
   \      0x1EC   0xA802             ADD      R0,SP,#+8
   \      0x1EE   0x....'....        BL       mbedtls_asn1_write_tag
   \      0x1F2   0x0004             MOVS     R4,R0
   \      0x1F4   0xD44E             BMI.N    ??mbedtls_pk_write_key_der_2
   \      0x1F6   0x19A6             ADDS     R6,R4,R6
   \      0x1F8   0x4632             MOV      R2,R6
   \      0x1FA   0x4629             MOV      R1,R5
   \      0x1FC   0xA802             ADD      R0,SP,#+8
   \      0x1FE   0x....'....        BL       mbedtls_asn1_write_len
   \      0x202   0x0004             MOVS     R4,R0
   \      0x204   0xD446             BMI.N    ??mbedtls_pk_write_key_der_2
   \      0x206   0x19A6             ADDS     R6,R4,R6
   \      0x208   0x22A1             MOVS     R2,#+161
   \      0x20A   0x4629             MOV      R1,R5
   \      0x20C   0xA802             ADD      R0,SP,#+8
   \      0x20E   0x....'....        BL       mbedtls_asn1_write_tag
   \      0x212   0x0004             MOVS     R4,R0
   \      0x214   0xD43E             BMI.N    ??mbedtls_pk_write_key_der_2
   \      0x216   0x19A6             ADDS     R6,R4,R6
   \      0x218   0x463A             MOV      R2,R7
   \      0x21A   0x4629             MOV      R1,R5
   \      0x21C   0xA802             ADD      R0,SP,#+8
   \      0x21E   0x....'....        BL       pk_write_ec_param
   \      0x222   0x0004             MOVS     R4,R0
   \      0x224   0xD436             BMI.N    ??mbedtls_pk_write_key_der_2
   \      0x226   0x46A0             MOV      R8,R4
   \      0x228   0x4642             MOV      R2,R8
   \      0x22A   0x4629             MOV      R1,R5
   \      0x22C   0xA802             ADD      R0,SP,#+8
   \      0x22E   0x....'....        BL       mbedtls_asn1_write_len
   \      0x232   0x0004             MOVS     R4,R0
   \      0x234   0xD42E             BMI.N    ??mbedtls_pk_write_key_der_2
   \      0x236   0x4444             ADD      R4,R4,R8
   \      0x238   0x46A0             MOV      R8,R4
   \      0x23A   0x22A0             MOVS     R2,#+160
   \      0x23C   0x4629             MOV      R1,R5
   \      0x23E   0xA802             ADD      R0,SP,#+8
   \      0x240   0x....'....        BL       mbedtls_asn1_write_tag
   \      0x244   0x0004             MOVS     R4,R0
   \      0x246   0xD425             BMI.N    ??mbedtls_pk_write_key_der_2
   \      0x248   0x4444             ADD      R4,R4,R8
   \      0x24A   0x19A6             ADDS     R6,R4,R6
   \      0x24C   0xF107 0x027C      ADD      R2,R7,#+124
   \      0x250   0x4629             MOV      R1,R5
   \      0x252   0xA802             ADD      R0,SP,#+8
   \      0x254   0x....'....        BL       mbedtls_asn1_write_mpi
   \      0x258   0x0004             MOVS     R4,R0
   \      0x25A   0xD41B             BMI.N    ??mbedtls_pk_write_key_der_2
   \      0x25C   0x19A6             ADDS     R6,R4,R6
   \      0x25E   0x2004             MOVS     R0,#+4
   \      0x260   0x9902             LDR      R1,[SP, #+8]
   \      0x262   0x7008             STRB     R0,[R1, #+0]
   \      0x264   0x2201             MOVS     R2,#+1
   \      0x266   0x4629             MOV      R1,R5
   \      0x268   0xA802             ADD      R0,SP,#+8
   \      0x26A   0x....'....        BL       mbedtls_asn1_write_int
   \      0x26E   0x0004             MOVS     R4,R0
   \      0x270   0xD410             BMI.N    ??mbedtls_pk_write_key_der_2
   \      0x272   0x19A6             ADDS     R6,R4,R6
   \      0x274   0x4632             MOV      R2,R6
   \      0x276   0x4629             MOV      R1,R5
   \      0x278   0xA802             ADD      R0,SP,#+8
   \      0x27A   0x....'....        BL       mbedtls_asn1_write_len
   \      0x27E   0x0004             MOVS     R4,R0
   \      0x280   0xD408             BMI.N    ??mbedtls_pk_write_key_der_2
   \      0x282   0x19A6             ADDS     R6,R4,R6
   \      0x284   0x2230             MOVS     R2,#+48
   \      0x286   0x4629             MOV      R1,R5
   \      0x288   0xA802             ADD      R0,SP,#+8
   \      0x28A   0x....'....        BL       mbedtls_asn1_write_tag
   \      0x28E   0x0004             MOVS     R4,R0
   \      0x290   0xF57F 0xAF7F      BPL.W    ??mbedtls_pk_write_key_der_3
   \                     ??mbedtls_pk_write_key_der_2: (+1)
   \      0x294   0x4620             MOV      R0,R4
   \      0x296   0xE000             B.N      ??mbedtls_pk_write_key_der_4
   \                     ??mbedtls_pk_write_key_der_5: (+1)
   \      0x298   0x....             LDR.N    R0,??DataTable4  ;; 0xffffc680
   \                     ??mbedtls_pk_write_key_der_4: (+1)
   \      0x29A   0xB006             ADD      SP,SP,#+24
   \      0x29C   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    359          }
    360          
    361          #if defined(MBEDTLS_PEM_WRITE_C)
    362          
    363          #define PEM_BEGIN_PUBLIC_KEY    "-----BEGIN PUBLIC KEY-----\n"
    364          #define PEM_END_PUBLIC_KEY      "-----END PUBLIC KEY-----\n"
    365          
    366          #define PEM_BEGIN_PRIVATE_KEY_RSA   "-----BEGIN RSA PRIVATE KEY-----\n"
    367          #define PEM_END_PRIVATE_KEY_RSA     "-----END RSA PRIVATE KEY-----\n"
    368          #define PEM_BEGIN_PRIVATE_KEY_EC    "-----BEGIN EC PRIVATE KEY-----\n"
    369          #define PEM_END_PRIVATE_KEY_EC      "-----END EC PRIVATE KEY-----\n"
    370          
    371          /*
    372           * Max sizes of key per types. Shown as tag + len (+ content).
    373           */
    374          
    375          #if defined(MBEDTLS_RSA_C)
    376          /*
    377           * RSA public keys:
    378           *  SubjectPublicKeyInfo  ::=  SEQUENCE  {          1 + 3
    379           *       algorithm            AlgorithmIdentifier,  1 + 1 (sequence)
    380           *                                                + 1 + 1 + 9 (rsa oid)
    381           *                                                + 1 + 1 (params null)
    382           *       subjectPublicKey     BIT STRING }          1 + 3 + (1 + below)
    383           *  RSAPublicKey ::= SEQUENCE {                     1 + 3
    384           *      modulus           INTEGER,  -- n            1 + 3 + MPI_MAX + 1
    385           *      publicExponent    INTEGER   -- e            1 + 3 + MPI_MAX + 1
    386           *  }
    387           */
    388          #define RSA_PUB_DER_MAX_BYTES   38 + 2 * MBEDTLS_MPI_MAX_SIZE
    389          
    390          /*
    391           * RSA private keys:
    392           *  RSAPrivateKey ::= SEQUENCE {                    1 + 3
    393           *      version           Version,                  1 + 1 + 1
    394           *      modulus           INTEGER,                  1 + 3 + MPI_MAX + 1
    395           *      publicExponent    INTEGER,                  1 + 3 + MPI_MAX + 1
    396           *      privateExponent   INTEGER,                  1 + 3 + MPI_MAX + 1
    397           *      prime1            INTEGER,                  1 + 3 + MPI_MAX / 2 + 1
    398           *      prime2            INTEGER,                  1 + 3 + MPI_MAX / 2 + 1
    399           *      exponent1         INTEGER,                  1 + 3 + MPI_MAX / 2 + 1
    400           *      exponent2         INTEGER,                  1 + 3 + MPI_MAX / 2 + 1
    401           *      coefficient       INTEGER,                  1 + 3 + MPI_MAX / 2 + 1
    402           *      otherPrimeInfos   OtherPrimeInfos OPTIONAL  0 (not supported)
    403           *  }
    404           */
    405          #define MPI_MAX_SIZE_2          MBEDTLS_MPI_MAX_SIZE / 2 + \
    406                                          MBEDTLS_MPI_MAX_SIZE % 2
    407          #define RSA_PRV_DER_MAX_BYTES   47 + 3 * MBEDTLS_MPI_MAX_SIZE \
    408                                             + 5 * MPI_MAX_SIZE_2
    409          
    410          #else /* MBEDTLS_RSA_C */
    411          
    412          #define RSA_PUB_DER_MAX_BYTES   0
    413          #define RSA_PRV_DER_MAX_BYTES   0
    414          
    415          #endif /* MBEDTLS_RSA_C */
    416          
    417          #if defined(MBEDTLS_ECP_C)
    418          /*
    419           * EC public keys:
    420           *  SubjectPublicKeyInfo  ::=  SEQUENCE  {      1 + 2
    421           *    algorithm         AlgorithmIdentifier,    1 + 1 (sequence)
    422           *                                            + 1 + 1 + 7 (ec oid)
    423           *                                            + 1 + 1 + 9 (namedCurve oid)
    424           *    subjectPublicKey  BIT STRING              1 + 2 + 1               [1]
    425           *                                            + 1 (point format)        [1]
    426           *                                            + 2 * ECP_MAX (coords)    [1]
    427           *  }
    428           */
    429          #define ECP_PUB_DER_MAX_BYTES   30 + 2 * MBEDTLS_ECP_MAX_BYTES
    430          
    431          /*
    432           * EC private keys:
    433           * ECPrivateKey ::= SEQUENCE {                  1 + 2
    434           *      version        INTEGER ,                1 + 1 + 1
    435           *      privateKey     OCTET STRING,            1 + 1 + ECP_MAX
    436           *      parameters [0] ECParameters OPTIONAL,   1 + 1 + (1 + 1 + 9)
    437           *      publicKey  [1] BIT STRING OPTIONAL      1 + 2 + [1] above
    438           *    }
    439           */
    440          #define ECP_PRV_DER_MAX_BYTES   29 + 3 * MBEDTLS_ECP_MAX_BYTES
    441          
    442          #else /* MBEDTLS_ECP_C */
    443          
    444          #define ECP_PUB_DER_MAX_BYTES   0
    445          #define ECP_PRV_DER_MAX_BYTES   0
    446          
    447          #endif /* MBEDTLS_ECP_C */
    448          
    449          #define PUB_DER_MAX_BYTES   RSA_PUB_DER_MAX_BYTES > ECP_PUB_DER_MAX_BYTES ? \
    450                                      RSA_PUB_DER_MAX_BYTES : ECP_PUB_DER_MAX_BYTES
    451          #define PRV_DER_MAX_BYTES   RSA_PRV_DER_MAX_BYTES > ECP_PRV_DER_MAX_BYTES ? \
    452                                      RSA_PRV_DER_MAX_BYTES : ECP_PRV_DER_MAX_BYTES
    453          

   \                                 In section .text, align 2, keep-with-next
    454          int mbedtls_pk_write_pubkey_pem( mbedtls_pk_context *key, unsigned char *buf, size_t size )
    455          {
   \                     mbedtls_pk_write_pubkey_pem: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0xF5AD 0x6D87      SUB      SP,SP,#+1080
   \        0x6   0x460C             MOV      R4,R1
   \        0x8   0x4615             MOV      R5,R2
    456              int ret;
    457              unsigned char output_buf[PUB_DER_MAX_BYTES];
    458              size_t olen = 0;
   \        0xA   0x2100             MOVS     R1,#+0
   \        0xC   0x9103             STR      R1,[SP, #+12]
    459          
    460              if( ( ret = mbedtls_pk_write_pubkey_der( key, output_buf,
    461                                               sizeof(output_buf) ) ) < 0 )
   \        0xE   0xF240 0x4226      MOVW     R2,#+1062
   \       0x12   0xA904             ADD      R1,SP,#+16
   \       0x14   0x....'....        BL       mbedtls_pk_write_pubkey_der
   \       0x18   0x2800             CMP      R0,#+0
   \       0x1A   0xD410             BMI.N    ??mbedtls_pk_write_pubkey_pem_0
    462              {
    463                  return( ret );
    464              }
    465          
    466              if( ( ret = mbedtls_pem_write_buffer( PEM_BEGIN_PUBLIC_KEY, PEM_END_PUBLIC_KEY,
    467                                            output_buf + sizeof(output_buf) - ret,
    468                                            ret, buf, size, &olen ) ) != 0 )
   \       0x1C   0xA903             ADD      R1,SP,#+12
   \       0x1E   0x9102             STR      R1,[SP, #+8]
   \       0x20   0x9501             STR      R5,[SP, #+4]
   \       0x22   0x9400             STR      R4,[SP, #+0]
   \       0x24   0x4603             MOV      R3,R0
   \       0x26   0xA904             ADD      R1,SP,#+16
   \       0x28   0x4240             RSBS     R0,R0,#+0
   \       0x2A   0x4408             ADD      R0,R1,R0
   \       0x2C   0xF200 0x4226      ADDW     R2,R0,#+1062
   \       0x30   0x....             LDR.N    R1,??DataTable4_1
   \       0x32   0x....             LDR.N    R0,??DataTable4_2
   \       0x34   0x....'....        BL       mbedtls_pem_write_buffer
   \       0x38   0x2800             CMP      R0,#+0
   \       0x3A   0xD100             BNE.N    ??mbedtls_pk_write_pubkey_pem_0
    469              {
    470                  return( ret );
    471              }
    472          
    473              return( 0 );
   \       0x3C   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_pk_write_pubkey_pem_0: (+1)
   \       0x3E   0xF50D 0x6D80      ADD      SP,SP,#+1024
   \       0x42   0xB00F             ADD      SP,SP,#+60
   \       0x44   0xBD30             POP      {R4,R5,PC}       ;; return
    474          }
    475          

   \                                 In section .text, align 2, keep-with-next
    476          int mbedtls_pk_write_key_pem( mbedtls_pk_context *key, unsigned char *buf, size_t size )
    477          {
   \                     mbedtls_pk_write_key_pem: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0xF5AD 0x6D34      SUB      SP,SP,#+2880
   \        0x6   0x4606             MOV      R6,R0
   \        0x8   0x460C             MOV      R4,R1
   \        0xA   0x4615             MOV      R5,R2
    478              int ret;
    479              unsigned char output_buf[PRV_DER_MAX_BYTES];
    480              const char *begin, *end;
    481              size_t olen = 0;
   \        0xC   0x2000             MOVS     R0,#+0
   \        0xE   0x9003             STR      R0,[SP, #+12]
    482          
    483              if( ( ret = mbedtls_pk_write_key_der( key, output_buf, sizeof(output_buf) ) ) < 0 )
   \       0x10   0xF640 0x322F      MOVW     R2,#+2863
   \       0x14   0xA904             ADD      R1,SP,#+16
   \       0x16   0x4630             MOV      R0,R6
   \       0x18   0x....'....        BL       mbedtls_pk_write_key_der
   \       0x1C   0x0007             MOVS     R7,R0
   \       0x1E   0xD420             BMI.N    ??mbedtls_pk_write_key_pem_0
    484                  return( ret );
    485          
    486          #if defined(MBEDTLS_RSA_C)
    487              if( mbedtls_pk_get_type( key ) == MBEDTLS_PK_RSA )
   \       0x20   0x4630             MOV      R0,R6
   \       0x22   0x....'....        BL       mbedtls_pk_get_type
   \       0x26   0x2801             CMP      R0,#+1
   \       0x28   0xD110             BNE.N    ??mbedtls_pk_write_key_pem_1
    488              {
    489                  begin = PEM_BEGIN_PRIVATE_KEY_RSA;
   \       0x2A   0x....             LDR.N    R0,??DataTable4_3
    490                  end = PEM_END_PRIVATE_KEY_RSA;
   \       0x2C   0x....             LDR.N    R1,??DataTable4_4
    491              }
    492              else
    493          #endif
    494          #if defined(MBEDTLS_ECP_C)
    495              if( mbedtls_pk_get_type( key ) == MBEDTLS_PK_ECKEY )
    496              {
    497                  begin = PEM_BEGIN_PRIVATE_KEY_EC;
    498                  end = PEM_END_PRIVATE_KEY_EC;
    499              }
    500              else
    501          #endif
    502                  return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );
    503          
    504              if( ( ret = mbedtls_pem_write_buffer( begin, end,
    505                                            output_buf + sizeof(output_buf) - ret,
    506                                            ret, buf, size, &olen ) ) != 0 )
   \                     ??mbedtls_pk_write_key_pem_2: (+1)
   \       0x2E   0xAA03             ADD      R2,SP,#+12
   \       0x30   0x9202             STR      R2,[SP, #+8]
   \       0x32   0x9501             STR      R5,[SP, #+4]
   \       0x34   0x9400             STR      R4,[SP, #+0]
   \       0x36   0x463B             MOV      R3,R7
   \       0x38   0xAA04             ADD      R2,SP,#+16
   \       0x3A   0x427F             RSBS     R7,R7,#+0
   \       0x3C   0x443A             ADD      R2,R2,R7
   \       0x3E   0xF602 0x322F      ADDW     R2,R2,#+2863
   \       0x42   0x....'....        BL       mbedtls_pem_write_buffer
   \       0x46   0x2800             CMP      R0,#+0
   \       0x48   0xD00A             BEQ.N    ??mbedtls_pk_write_key_pem_3
    507              {
    508                  return( ret );
   \       0x4A   0xE00A             B.N      ??mbedtls_pk_write_key_pem_0
    509              }
   \                     ??mbedtls_pk_write_key_pem_1: (+1)
   \       0x4C   0x4630             MOV      R0,R6
   \       0x4E   0x....'....        BL       mbedtls_pk_get_type
   \       0x52   0x2802             CMP      R0,#+2
   \       0x54   0xD102             BNE.N    ??mbedtls_pk_write_key_pem_4
   \       0x56   0x....             LDR.N    R0,??DataTable4_5
   \       0x58   0x....             LDR.N    R1,??DataTable4_6
   \       0x5A   0xE7E8             B.N      ??mbedtls_pk_write_key_pem_2
   \                     ??mbedtls_pk_write_key_pem_4: (+1)
   \       0x5C   0x....             LDR.N    R0,??DataTable4  ;; 0xffffc680
   \       0x5E   0xE000             B.N      ??mbedtls_pk_write_key_pem_0
    510          
    511              return( 0 );
   \                     ??mbedtls_pk_write_key_pem_3: (+1)
   \       0x60   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_pk_write_key_pem_0: (+1)
   \       0x62   0xF50D 0x6D30      ADD      SP,SP,#+2816
   \       0x66   0xB011             ADD      SP,SP,#+68
   \       0x68   0xBDF0             POP      {R4-R7,PC}       ;; return
    512          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \        0x0   0xFFFF'C680        DC32     0xffffc680

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \        0x0   0x....'....        DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \        0x0   0x....'....        DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \        0x0   0x....'....        DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \        0x0   0x....'....        DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \        0x0   0x....'....        DC32     ?_5

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x2D 0x2D          DC8 "-----BEGIN PUBLIC KEY-----\012"
   \              0x2D 0x2D    
   \              0x2D 0x42    
   \              0x45 0x47    
   \              0x49 0x4E    
   \              0x20 0x50    
   \              0x55 0x42    
   \              0x4C 0x49    
   \              0x43 0x20    
   \              0x4B 0x45    
   \              0x59 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_1:
   \        0x0   0x2D 0x2D          DC8 "-----END PUBLIC KEY-----\012"
   \              0x2D 0x2D    
   \              0x2D 0x45    
   \              0x4E 0x44    
   \              0x20 0x50    
   \              0x55 0x42    
   \              0x4C 0x49    
   \              0x43 0x20    
   \              0x4B 0x45    
   \              0x59 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x0A 0x00    
   \       0x1A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_2:
   \        0x0   0x2D 0x2D          DC8 "-----BEGIN RSA PRIVATE KEY-----\012"
   \              0x2D 0x2D    
   \              0x2D 0x42    
   \              0x45 0x47    
   \              0x49 0x4E    
   \              0x20 0x52    
   \              0x53 0x41    
   \              0x20 0x50    
   \              0x52 0x49    
   \              0x56 0x41    
   \              0x54 0x45    
   \              0x20 0x4B    
   \              0x45 0x59    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x0A    
   \              0x00         
   \       0x21   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_3:
   \        0x0   0x2D 0x2D          DC8 "-----END RSA PRIVATE KEY-----\012"
   \              0x2D 0x2D    
   \              0x2D 0x45    
   \              0x4E 0x44    
   \              0x20 0x52    
   \              0x53 0x41    
   \              0x20 0x50    
   \              0x52 0x49    
   \              0x56 0x41    
   \              0x54 0x45    
   \              0x20 0x4B    
   \              0x45 0x59    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x0A    
   \              0x00         
   \       0x1F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_4:
   \        0x0   0x2D 0x2D          DC8 "-----BEGIN EC PRIVATE KEY-----\012"
   \              0x2D 0x2D    
   \              0x2D 0x42    
   \              0x45 0x47    
   \              0x49 0x4E    
   \              0x20 0x45    
   \              0x43 0x20    
   \              0x50 0x52    
   \              0x49 0x56    
   \              0x41 0x54    
   \              0x45 0x20    
   \              0x4B 0x45    
   \              0x59 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_5:
   \        0x0   0x2D 0x2D          DC8 "-----END EC PRIVATE KEY-----\012"
   \              0x2D 0x2D    
   \              0x2D 0x45    
   \              0x4E 0x44    
   \              0x20 0x45    
   \              0x43 0x20    
   \              0x50 0x52    
   \              0x49 0x56    
   \              0x41 0x54    
   \              0x45 0x20    
   \              0x4B 0x45    
   \              0x59 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x0A 0x00    
   \       0x1E   0x00 0x00          DC8 0, 0
    513          #endif /* MBEDTLS_PEM_WRITE_C */
    514          
    515          #endif /* MBEDTLS_PK_WRITE_C */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   mbedtls_pk_ec
       0   mbedtls_pk_rsa
      48   mbedtls_pk_write_key_der
        48   -> mbedtls_asn1_write_int
        48   -> mbedtls_asn1_write_len
        48   -> mbedtls_asn1_write_mpi
        48   -> mbedtls_asn1_write_tag
        48   -> mbedtls_mpi_free
        48   -> mbedtls_mpi_init
        48   -> mbedtls_pk_ec
        48   -> mbedtls_pk_get_type
        48   -> mbedtls_pk_rsa
        48   -> mbedtls_rsa_export
        48   -> mbedtls_rsa_export_crt
        48   -> pk_write_ec_param
        48   -> pk_write_ec_pubkey
    2904   mbedtls_pk_write_key_pem
      2904   -> mbedtls_pem_write_buffer
      2904   -> mbedtls_pk_get_type
      2904   -> mbedtls_pk_write_key_der
      16   mbedtls_pk_write_pubkey
        16   -> mbedtls_pk_ec
        16   -> mbedtls_pk_get_type
        16   -> mbedtls_pk_rsa
         0   -> pk_write_ec_pubkey
         0   -> pk_write_rsa_pubkey
      40   mbedtls_pk_write_pubkey_der
        40   -> mbedtls_asn1_write_algorithm_identifier
        40   -> mbedtls_asn1_write_len
        40   -> mbedtls_asn1_write_tag
        40   -> mbedtls_oid_get_oid_by_pk_alg
        40   -> mbedtls_pk_ec
        40   -> mbedtls_pk_get_type
        40   -> mbedtls_pk_write_pubkey
        40   -> pk_write_ec_param
    1096   mbedtls_pk_write_pubkey_pem
      1096   -> mbedtls_pem_write_buffer
      1096   -> mbedtls_pk_write_pubkey_der
      24   pk_write_ec_param
        24   -> mbedtls_asn1_write_oid
        24   -> mbedtls_oid_get_oid_by_ec_grp
     128   pk_write_ec_pubkey
       128   -> __aeabi_memcpy
       128   -> mbedtls_ecp_point_write_binary
      48   pk_write_rsa_pubkey
        48   -> mbedtls_asn1_write_len
        48   -> mbedtls_asn1_write_mpi
        48   -> mbedtls_asn1_write_tag
        48   -> mbedtls_mpi_free
        48   -> mbedtls_mpi_init
        48   -> mbedtls_rsa_export


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
      28  ?_0
      28  ?_1
      36  ?_2
      32  ?_3
      32  ?_4
      32  ?_5
       4  mbedtls_pk_ec
       4  mbedtls_pk_rsa
     672  mbedtls_pk_write_key_der
     106  mbedtls_pk_write_key_pem
      74  mbedtls_pk_write_pubkey
     194  mbedtls_pk_write_pubkey_der
      70  mbedtls_pk_write_pubkey_pem
      36  pk_write_ec_param
      82  pk_write_ec_pubkey
     152  pk_write_rsa_pubkey

 
   188 bytes in section .rodata
 1 422 bytes in section .text
 
 1 422 bytes of CODE  memory
   188 bytes of CONST memory

Errors: none
Warnings: none
