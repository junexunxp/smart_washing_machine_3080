###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.3.193/W32 for ARM         10/Jun/2019  13:47:57
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\Development\smart_washing_machine_3080\mbedtls\library\asn1parse.c
#    Command line =  
#        -f C:\Users\nxf42695\AppData\Local\Temp\1\EW844B.tmp
#        (C:\Development\smart_washing_machine_3080\mbedtls\library\asn1parse.c
#        -D DEBUG -D USE_RTOS -D XIP_EXTERNAL_FLASH=1 -D
#        XIP_BOOT_HEADER_ENABLE=1 -D CPU_MIMXRT1052DVL6B -D FSL_RTOS_FREE_RTOS
#        -D PRINTF_ADVANCED_ENABLE -D
#        "MBEDTLS_CONFIG_FILE=\"ksdk_mbedtls_config.h\"" -lC
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list -lA
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list
#        --diag_suppress Pa082,Pa050 -o
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_d16 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" --preinclude
#        C:\Development\smart_washing_machine_3080/source\app_preinclude.h -I
#        C:\Development\smart_washing_machine_3080/board\ -I
#        C:\Development\smart_washing_machine_3080/source\ -I
#        C:\Development\smart_washing_machine_3080/CMSIS\ -I
#        C:\Development\smart_washing_machine_3080/amazon-freertos/freertos/portable\
#        -I C:\Development\smart_washing_machine_3080/amazon-freertos/include\
#        -I C:\Development\smart_washing_machine_3080/component/lists\ -I
#        C:\Development\smart_washing_machine_3080/component/serial_manager\ -I
#        C:\Development\smart_washing_machine_3080/component/uart\ -I
#        C:\Development\smart_washing_machine_3080/component/kv\ -I
#        C:\Development\smart_washing_machine_3080/component/kv/include\ -I
#        C:\Development\smart_washing_machine_3080/device\ -I
#        C:\Development\smart_washing_machine_3080/doc\ -I
#        C:\Development\smart_washing_machine_3080/drivers\ -I
#        C:\Development\smart_washing_machine_3080/src\ -I
#        C:\Development\smart_washing_machine_3080/startup\ -I
#        C:\Development\smart_washing_machine_3080/utilities\ -I
#        C:\Development\smart_washing_machine_3080/xip\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\atm\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_model\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_sign\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\infra\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\mqtt\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\external_libs\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\coap_cloud\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\CoAPPacket\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\server\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\os\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\awss_reset\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\mbedtls\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\ -I
#        C:\Development\smart_washing_machine_3080\mbedtls\port\ksdk\ -Om)
#    Locale       =  C
#    List file    =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list\asn1parse.lst
#    Object file  =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj\asn1parse.o
#
###############################################################################

C:\Development\smart_washing_machine_3080\mbedtls\library\asn1parse.c
      1          /*
      2           *  Generic ASN.1 parsing
      3           *
      4           *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
      5           *  SPDX-License-Identifier: Apache-2.0
      6           *
      7           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
      8           *  not use this file except in compliance with the License.
      9           *  You may obtain a copy of the License at
     10           *
     11           *  http://www.apache.org/licenses/LICENSE-2.0
     12           *
     13           *  Unless required by applicable law or agreed to in writing, software
     14           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     15           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     16           *  See the License for the specific language governing permissions and
     17           *  limitations under the License.
     18           *
     19           *  This file is part of mbed TLS (https://tls.mbed.org)
     20           */
     21          
     22          #if !defined(MBEDTLS_CONFIG_FILE)
     23          #include "mbedtls/config.h"
     24          #else
     25          #include MBEDTLS_CONFIG_FILE
     26          #endif
     27          
     28          #if defined(MBEDTLS_ASN1_PARSE_C)
     29          
     30          #include "mbedtls/asn1.h"
     31          #include "mbedtls/platform_util.h"
     32          
     33          #include <string.h>
     34          
     35          #if defined(MBEDTLS_BIGNUM_C)
     36          #include "mbedtls/bignum.h"
     37          #endif
     38          
     39          #if defined(MBEDTLS_PLATFORM_C)
     40          #include "mbedtls/platform.h"
     41          #else
     42          #include <stdlib.h>
     43          #define mbedtls_calloc    calloc
     44          #define mbedtls_free       free
     45          #endif
     46          
     47          /*
     48           * ASN.1 DER decoding routines
     49           */

   \                                 In section .text, align 4, keep-with-next
     50          int mbedtls_asn1_get_len( unsigned char **p,
     51                            const unsigned char *end,
     52                            size_t *len )
     53          {
   \                     mbedtls_asn1_get_len: (+1)
   \        0x0   0xB410             PUSH     {R4}
     54              if( ( end - *p ) < 1 )
   \        0x2   0x6803             LDR      R3,[R0, #+0]
   \        0x4   0x1ACB             SUBS     R3,R1,R3
   \        0x6   0x2B01             CMP      R3,#+1
   \        0x8   0xDA02             BGE.N    ??mbedtls_asn1_get_len_1
     55                  return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   \        0xA   0xF06F 0x005F      MVN      R0,#+95
   \        0xE   0xE06E             B.N      ??mbedtls_asn1_get_len_2
     56          
     57              if( ( **p & 0x80 ) == 0 )
   \                     ??mbedtls_asn1_get_len_1: (+1)
   \       0x10   0x6803             LDR      R3,[R0, #+0]
   \       0x12   0x781B             LDRB     R3,[R3, #+0]
   \       0x14   0x061B             LSLS     R3,R3,#+24
   \       0x16   0x6803             LDR      R3,[R0, #+0]
   \       0x18   0xD40B             BMI.N    ??mbedtls_asn1_get_len_3
     58                  *len = *(*p)++;
   \       0x1A   0x1C5C             ADDS     R4,R3,#+1
   \       0x1C   0x6004             STR      R4,[R0, #+0]
   \       0x1E   0x781B             LDRB     R3,[R3, #+0]
   \       0x20   0x6013             STR      R3,[R2, #+0]
     59              else
     60              {
     61                  switch( **p & 0x7F )
     62                  {
     63                  case 1:
     64                      if( ( end - *p ) < 2 )
     65                          return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
     66          
     67                      *len = (*p)[1];
     68                      (*p) += 2;
     69                      break;
     70          
     71                  case 2:
     72                      if( ( end - *p ) < 3 )
     73                          return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
     74          
     75                      *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
     76                      (*p) += 3;
     77                      break;
     78          
     79                  case 3:
     80                      if( ( end - *p ) < 4 )
     81                          return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
     82          
     83                      *len = ( (size_t)(*p)[1] << 16 ) |
     84                             ( (size_t)(*p)[2] << 8  ) | (*p)[3];
     85                      (*p) += 4;
     86                      break;
     87          
     88                  case 4:
     89                      if( ( end - *p ) < 5 )
     90                          return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
     91          
     92                      *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
     93                             ( (size_t)(*p)[3] << 8  ) |           (*p)[4];
     94                      (*p) += 5;
     95                      break;
     96          
     97                  default:
     98                      return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
     99                  }
    100              }
    101          
    102              if( *len > (size_t) ( end - *p ) )
   \                     ??mbedtls_asn1_get_len_4: (+1)
   \       0x22   0x6800             LDR      R0,[R0, #+0]
   \       0x24   0x1A09             SUBS     R1,R1,R0
   \       0x26   0x6810             LDR      R0,[R2, #+0]
   \       0x28   0x4281             CMP      R1,R0
   \       0x2A   0xD25F             BCS.N    ??mbedtls_asn1_get_len_5
    103                  return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   \       0x2C   0xF06F 0x005F      MVN      R0,#+95
   \       0x30   0xE05D             B.N      ??mbedtls_asn1_get_len_2
   \                     ??mbedtls_asn1_get_len_3: (+1)
   \       0x32   0x781B             LDRB     R3,[R3, #+0]
   \       0x34   0xF003 0x037F      AND      R3,R3,#0x7F
   \       0x38   0x1E5B             SUBS     R3,R3,#+1
   \       0x3A   0x2B03             CMP      R3,#+3
   \       0x3C   0xD853             BHI.N    ??mbedtls_asn1_get_len_6
   \       0x3E   0xE8DF 0xF003      TBB      [PC, R3]
   \                     ??mbedtls_asn1_get_len_0:
   \       0x42   0x02 0x10          DC8      0x2,0x10,0x22,0x38
   \              0x22 0x38    
   \                     ??mbedtls_asn1_get_len_7: (+1)
   \       0x46   0x6803             LDR      R3,[R0, #+0]
   \       0x48   0x1ACB             SUBS     R3,R1,R3
   \       0x4A   0x2B02             CMP      R3,#+2
   \       0x4C   0xDA02             BGE.N    ??mbedtls_asn1_get_len_8
   \       0x4E   0xF06F 0x005F      MVN      R0,#+95
   \       0x52   0xE04C             B.N      ??mbedtls_asn1_get_len_2
   \                     ??mbedtls_asn1_get_len_8: (+1)
   \       0x54   0x6803             LDR      R3,[R0, #+0]
   \       0x56   0x785B             LDRB     R3,[R3, #+1]
   \       0x58   0x6013             STR      R3,[R2, #+0]
   \       0x5A   0x6803             LDR      R3,[R0, #+0]
   \       0x5C   0x1C9B             ADDS     R3,R3,#+2
   \       0x5E   0x6003             STR      R3,[R0, #+0]
   \       0x60   0xE7DF             B.N      ??mbedtls_asn1_get_len_4
   \                     ??mbedtls_asn1_get_len_9: (+1)
   \       0x62   0x6803             LDR      R3,[R0, #+0]
   \       0x64   0x1ACB             SUBS     R3,R1,R3
   \       0x66   0x2B03             CMP      R3,#+3
   \       0x68   0xDA02             BGE.N    ??mbedtls_asn1_get_len_10
   \       0x6A   0xF06F 0x005F      MVN      R0,#+95
   \       0x6E   0xE03E             B.N      ??mbedtls_asn1_get_len_2
   \                     ??mbedtls_asn1_get_len_10: (+1)
   \       0x70   0x6803             LDR      R3,[R0, #+0]
   \       0x72   0x785B             LDRB     R3,[R3, #+1]
   \       0x74   0x6804             LDR      R4,[R0, #+0]
   \       0x76   0x78A4             LDRB     R4,[R4, #+2]
   \       0x78   0xEA44 0x2403      ORR      R4,R4,R3, LSL #+8
   \       0x7C   0x6014             STR      R4,[R2, #+0]
   \       0x7E   0x6803             LDR      R3,[R0, #+0]
   \       0x80   0x1CDB             ADDS     R3,R3,#+3
   \       0x82   0x6003             STR      R3,[R0, #+0]
   \       0x84   0xE7CD             B.N      ??mbedtls_asn1_get_len_4
   \                     ??mbedtls_asn1_get_len_11: (+1)
   \       0x86   0x6803             LDR      R3,[R0, #+0]
   \       0x88   0x1ACB             SUBS     R3,R1,R3
   \       0x8A   0x2B04             CMP      R3,#+4
   \       0x8C   0xDA02             BGE.N    ??mbedtls_asn1_get_len_12
   \       0x8E   0xF06F 0x005F      MVN      R0,#+95
   \       0x92   0xE02C             B.N      ??mbedtls_asn1_get_len_2
   \                     ??mbedtls_asn1_get_len_12: (+1)
   \       0x94   0x6803             LDR      R3,[R0, #+0]
   \       0x96   0x785B             LDRB     R3,[R3, #+1]
   \       0x98   0x6804             LDR      R4,[R0, #+0]
   \       0x9A   0x78A4             LDRB     R4,[R4, #+2]
   \       0x9C   0x0224             LSLS     R4,R4,#+8
   \       0x9E   0xEA44 0x4403      ORR      R4,R4,R3, LSL #+16
   \       0xA2   0x6803             LDR      R3,[R0, #+0]
   \       0xA4   0x78DB             LDRB     R3,[R3, #+3]
   \       0xA6   0x431C             ORRS     R4,R3,R4
   \       0xA8   0x6014             STR      R4,[R2, #+0]
   \       0xAA   0x6803             LDR      R3,[R0, #+0]
   \       0xAC   0x1D1B             ADDS     R3,R3,#+4
   \       0xAE   0x6003             STR      R3,[R0, #+0]
   \       0xB0   0xE7B7             B.N      ??mbedtls_asn1_get_len_4
   \                     ??mbedtls_asn1_get_len_13: (+1)
   \       0xB2   0x6803             LDR      R3,[R0, #+0]
   \       0xB4   0x1ACB             SUBS     R3,R1,R3
   \       0xB6   0x2B05             CMP      R3,#+5
   \       0xB8   0xDA02             BGE.N    ??mbedtls_asn1_get_len_14
   \       0xBA   0xF06F 0x005F      MVN      R0,#+95
   \       0xBE   0xE016             B.N      ??mbedtls_asn1_get_len_2
   \                     ??mbedtls_asn1_get_len_14: (+1)
   \       0xC0   0x6803             LDR      R3,[R0, #+0]
   \       0xC2   0x785B             LDRB     R3,[R3, #+1]
   \       0xC4   0x6804             LDR      R4,[R0, #+0]
   \       0xC6   0x78A4             LDRB     R4,[R4, #+2]
   \       0xC8   0x0424             LSLS     R4,R4,#+16
   \       0xCA   0xEA44 0x6403      ORR      R4,R4,R3, LSL #+24
   \       0xCE   0x6803             LDR      R3,[R0, #+0]
   \       0xD0   0x78DB             LDRB     R3,[R3, #+3]
   \       0xD2   0xEA44 0x2403      ORR      R4,R4,R3, LSL #+8
   \       0xD6   0x6803             LDR      R3,[R0, #+0]
   \       0xD8   0x791B             LDRB     R3,[R3, #+4]
   \       0xDA   0x431C             ORRS     R4,R3,R4
   \       0xDC   0x6014             STR      R4,[R2, #+0]
   \       0xDE   0x6803             LDR      R3,[R0, #+0]
   \       0xE0   0x1D5B             ADDS     R3,R3,#+5
   \       0xE2   0x6003             STR      R3,[R0, #+0]
   \       0xE4   0xE79D             B.N      ??mbedtls_asn1_get_len_4
   \                     ??mbedtls_asn1_get_len_6: (+1)
   \       0xE6   0xF06F 0x0063      MVN      R0,#+99
   \       0xEA   0xE000             B.N      ??mbedtls_asn1_get_len_2
    104          
    105              return( 0 );
   \                     ??mbedtls_asn1_get_len_5: (+1)
   \       0xEC   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_asn1_get_len_2: (+1)
   \       0xEE   0xBC10             POP      {R4}
   \       0xF0   0x4770             BX       LR               ;; return
    106          }
    107          

   \                                 In section .text, align 2, keep-with-next
    108          int mbedtls_asn1_get_tag( unsigned char **p,
    109                            const unsigned char *end,
    110                            size_t *len, int tag )
    111          {
   \                     mbedtls_asn1_get_tag: (+1)
   \        0x0   0xB418             PUSH     {R3,R4}
    112              if( ( end - *p ) < 1 )
   \        0x2   0x6804             LDR      R4,[R0, #+0]
   \        0x4   0x1B0C             SUBS     R4,R1,R4
   \        0x6   0x2C01             CMP      R4,#+1
   \        0x8   0xDA02             BGE.N    ??mbedtls_asn1_get_tag_0
    113                  return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   \        0xA   0xF06F 0x005F      MVN      R0,#+95
   \        0xE   0xE00B             B.N      ??mbedtls_asn1_get_tag_1
    114          
    115              if( **p != tag )
   \                     ??mbedtls_asn1_get_tag_0: (+1)
   \       0x10   0x6804             LDR      R4,[R0, #+0]
   \       0x12   0x7824             LDRB     R4,[R4, #+0]
   \       0x14   0x429C             CMP      R4,R3
   \       0x16   0xD002             BEQ.N    ??mbedtls_asn1_get_tag_2
    116                  return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
   \       0x18   0xF06F 0x0061      MVN      R0,#+97
   \       0x1C   0xE004             B.N      ??mbedtls_asn1_get_tag_1
    117          
    118              (*p)++;
   \                     ??mbedtls_asn1_get_tag_2: (+1)
   \       0x1E   0x6803             LDR      R3,[R0, #+0]
   \       0x20   0x1C5B             ADDS     R3,R3,#+1
   \       0x22   0x6003             STR      R3,[R0, #+0]
    119          
    120              return( mbedtls_asn1_get_len( p, end, len ) );
   \       0x24   0xBC18             POP      {R3,R4}
   \       0x26   0x....             B.N      mbedtls_asn1_get_len
   \                     ??mbedtls_asn1_get_tag_1: (+1)
   \       0x28   0xBC12             POP      {R1,R4}
   \       0x2A   0x4770             BX       LR               ;; return
    121          }
    122          

   \                                 In section .text, align 2, keep-with-next
    123          int mbedtls_asn1_get_bool( unsigned char **p,
    124                             const unsigned char *end,
    125                             int *val )
    126          {
   \                     mbedtls_asn1_get_bool: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x4615             MOV      R5,R2
    127              int ret;
    128              size_t len;
    129          
    130              if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
   \        0x6   0x2301             MOVS     R3,#+1
   \        0x8   0x466A             MOV      R2,SP
   \        0xA   0x....'....        BL       mbedtls_asn1_get_tag
   \        0xE   0x2800             CMP      R0,#+0
   \       0x10   0xD110             BNE.N    ??mbedtls_asn1_get_bool_0
    131                  return( ret );
    132          
    133              if( len != 1 )
   \       0x12   0x9800             LDR      R0,[SP, #+0]
   \       0x14   0x2801             CMP      R0,#+1
   \       0x16   0xD002             BEQ.N    ??mbedtls_asn1_get_bool_1
    134                  return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
   \       0x18   0xF06F 0x0063      MVN      R0,#+99
   \       0x1C   0xBD32             POP      {R1,R4,R5,PC}
    135          
    136              *val = ( **p != 0 ) ? 1 : 0;
   \                     ??mbedtls_asn1_get_bool_1: (+1)
   \       0x1E   0x6820             LDR      R0,[R4, #+0]
   \       0x20   0x7800             LDRB     R0,[R0, #+0]
   \       0x22   0x1E40             SUBS     R0,R0,#+1
   \       0x24   0x4180             SBCS     R0,R0,R0
   \       0x26   0x43C0             MVNS     R0,R0
   \       0x28   0x0FC0             LSRS     R0,R0,#+31
   \       0x2A   0x6028             STR      R0,[R5, #+0]
    137              (*p)++;
   \       0x2C   0x6820             LDR      R0,[R4, #+0]
   \       0x2E   0x1C40             ADDS     R0,R0,#+1
   \       0x30   0x6020             STR      R0,[R4, #+0]
    138          
    139              return( 0 );
   \       0x32   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_asn1_get_bool_0: (+1)
   \       0x34   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    140          }
    141          

   \                                 In section .text, align 2, keep-with-next
    142          int mbedtls_asn1_get_int( unsigned char **p,
    143                            const unsigned char *end,
    144                            int *val )
    145          {
   \                     mbedtls_asn1_get_int: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x4615             MOV      R5,R2
    146              int ret;
    147              size_t len;
    148          
    149              if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
   \        0x6   0x2302             MOVS     R3,#+2
   \        0x8   0x466A             MOV      R2,SP
   \        0xA   0x....'....        BL       mbedtls_asn1_get_tag
   \        0xE   0x2800             CMP      R0,#+0
   \       0x10   0xD11D             BNE.N    ??mbedtls_asn1_get_int_0
    150                  return( ret );
    151          
    152              if( len == 0 || len > sizeof( int ) || ( **p & 0x80 ) != 0 )
   \       0x12   0x9800             LDR      R0,[SP, #+0]
   \       0x14   0x2800             CMP      R0,#+0
   \       0x16   0xD005             BEQ.N    ??mbedtls_asn1_get_int_1
   \       0x18   0x2805             CMP      R0,#+5
   \       0x1A   0xD203             BCS.N    ??mbedtls_asn1_get_int_1
   \       0x1C   0x6820             LDR      R0,[R4, #+0]
   \       0x1E   0x7800             LDRB     R0,[R0, #+0]
   \       0x20   0x0600             LSLS     R0,R0,#+24
   \       0x22   0xD502             BPL.N    ??mbedtls_asn1_get_int_2
    153                  return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
   \                     ??mbedtls_asn1_get_int_1: (+1)
   \       0x24   0xF06F 0x0063      MVN      R0,#+99
   \       0x28   0xBD32             POP      {R1,R4,R5,PC}
    154          
    155              *val = 0;
   \                     ??mbedtls_asn1_get_int_2: (+1)
   \       0x2A   0x2000             MOVS     R0,#+0
   \       0x2C   0x6028             STR      R0,[R5, #+0]
   \       0x2E   0xE008             B.N      ??mbedtls_asn1_get_int_3
    156          
    157              while( len-- > 0 )
    158              {
    159                  *val = ( *val << 8 ) | **p;
   \                     ??mbedtls_asn1_get_int_4: (+1)
   \       0x30   0x6828             LDR      R0,[R5, #+0]
   \       0x32   0x6821             LDR      R1,[R4, #+0]
   \       0x34   0x7809             LDRB     R1,[R1, #+0]
   \       0x36   0xEA41 0x2100      ORR      R1,R1,R0, LSL #+8
   \       0x3A   0x6029             STR      R1,[R5, #+0]
    160                  (*p)++;
   \       0x3C   0x6820             LDR      R0,[R4, #+0]
   \       0x3E   0x1C40             ADDS     R0,R0,#+1
   \       0x40   0x6020             STR      R0,[R4, #+0]
    161              }
   \                     ??mbedtls_asn1_get_int_3: (+1)
   \       0x42   0x9800             LDR      R0,[SP, #+0]
   \       0x44   0x1E41             SUBS     R1,R0,#+1
   \       0x46   0x9100             STR      R1,[SP, #+0]
   \       0x48   0x2800             CMP      R0,#+0
   \       0x4A   0xD1F1             BNE.N    ??mbedtls_asn1_get_int_4
    162          
    163              return( 0 );
   \       0x4C   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_asn1_get_int_0: (+1)
   \       0x4E   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    164          }
    165          
    166          #if defined(MBEDTLS_BIGNUM_C)

   \                                 In section .text, align 2, keep-with-next
    167          int mbedtls_asn1_get_mpi( unsigned char **p,
    168                            const unsigned char *end,
    169                            mbedtls_mpi *X )
    170          {
   \                     mbedtls_asn1_get_mpi: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x4615             MOV      R5,R2
    171              int ret;
    172              size_t len;
    173          
    174              if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
   \        0x6   0x2302             MOVS     R3,#+2
   \        0x8   0x466A             MOV      R2,SP
   \        0xA   0x....'....        BL       mbedtls_asn1_get_tag
   \        0xE   0x2800             CMP      R0,#+0
   \       0x10   0xD108             BNE.N    ??mbedtls_asn1_get_mpi_0
    175                  return( ret );
    176          
    177              ret = mbedtls_mpi_read_binary( X, *p, len );
   \       0x12   0x9A00             LDR      R2,[SP, #+0]
   \       0x14   0x6821             LDR      R1,[R4, #+0]
   \       0x16   0x4628             MOV      R0,R5
   \       0x18   0x....'....        BL       mbedtls_mpi_read_binary
    178          
    179              *p += len;
   \       0x1C   0x6821             LDR      R1,[R4, #+0]
   \       0x1E   0x9A00             LDR      R2,[SP, #+0]
   \       0x20   0x4411             ADD      R1,R1,R2
   \       0x22   0x6021             STR      R1,[R4, #+0]
    180          
    181              return( ret );
   \                     ??mbedtls_asn1_get_mpi_0: (+1)
   \       0x24   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    182          }
    183          #endif /* MBEDTLS_BIGNUM_C */
    184          

   \                                 In section .text, align 2, keep-with-next
    185          int mbedtls_asn1_get_bitstring( unsigned char **p, const unsigned char *end,
    186                                  mbedtls_asn1_bitstring *bs)
    187          {
   \                     mbedtls_asn1_get_bitstring: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
   \        0x6   0x4616             MOV      R6,R2
    188              int ret;
    189          
    190              /* Certificate type is a single byte bitstring */
    191              if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
   \        0x8   0x2303             MOVS     R3,#+3
   \        0xA   0x....'....        BL       mbedtls_asn1_get_tag
   \        0xE   0x2800             CMP      R0,#+0
   \       0x10   0xD11D             BNE.N    ??mbedtls_asn1_get_bitstring_0
    192                  return( ret );
    193          
    194              /* Check length, subtract one for actual bit string length */
    195              if( bs->len < 1 )
   \       0x12   0x6830             LDR      R0,[R6, #+0]
   \       0x14   0x2800             CMP      R0,#+0
   \       0x16   0xD102             BNE.N    ??mbedtls_asn1_get_bitstring_1
    196                  return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   \       0x18   0xF06F 0x005F      MVN      R0,#+95
   \       0x1C   0xBD70             POP      {R4-R6,PC}
    197              bs->len -= 1;
   \                     ??mbedtls_asn1_get_bitstring_1: (+1)
   \       0x1E   0x1E40             SUBS     R0,R0,#+1
   \       0x20   0x6030             STR      R0,[R6, #+0]
    198          
    199              /* Get number of unused bits, ensure unused bits <= 7 */
    200              bs->unused_bits = **p;
   \       0x22   0x6820             LDR      R0,[R4, #+0]
   \       0x24   0x7800             LDRB     R0,[R0, #+0]
   \       0x26   0x7130             STRB     R0,[R6, #+4]
    201              if( bs->unused_bits > 7 )
   \       0x28   0x2808             CMP      R0,#+8
   \       0x2A   0xDB02             BLT.N    ??mbedtls_asn1_get_bitstring_2
    202                  return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
   \       0x2C   0xF06F 0x0063      MVN      R0,#+99
   \       0x30   0xBD70             POP      {R4-R6,PC}
    203              (*p)++;
   \                     ??mbedtls_asn1_get_bitstring_2: (+1)
   \       0x32   0x6820             LDR      R0,[R4, #+0]
   \       0x34   0x1C40             ADDS     R0,R0,#+1
   \       0x36   0x6020             STR      R0,[R4, #+0]
    204          
    205              /* Get actual bitstring */
    206              bs->p = *p;
   \       0x38   0x60B0             STR      R0,[R6, #+8]
    207              *p += bs->len;
   \       0x3A   0x6820             LDR      R0,[R4, #+0]
   \       0x3C   0x6831             LDR      R1,[R6, #+0]
   \       0x3E   0x4408             ADD      R0,R0,R1
   \       0x40   0x6020             STR      R0,[R4, #+0]
    208          
    209              if( *p != end )
   \       0x42   0x42A8             CMP      R0,R5
   \       0x44   0xD002             BEQ.N    ??mbedtls_asn1_get_bitstring_3
    210                  return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   \       0x46   0xF06F 0x0065      MVN      R0,#+101
   \       0x4A   0xBD70             POP      {R4-R6,PC}
    211          
    212              return( 0 );
   \                     ??mbedtls_asn1_get_bitstring_3: (+1)
   \       0x4C   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_asn1_get_bitstring_0: (+1)
   \       0x4E   0xBD70             POP      {R4-R6,PC}       ;; return
    213          }
    214          
    215          /*
    216           * Get a bit string without unused bits
    217           */

   \                                 In section .text, align 2, keep-with-next
    218          int mbedtls_asn1_get_bitstring_null( unsigned char **p, const unsigned char *end,
    219                                       size_t *len )
    220          {
   \                     mbedtls_asn1_get_bitstring_null: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x4615             MOV      R5,R2
    221              int ret;
    222          
    223              if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
   \        0x6   0x2303             MOVS     R3,#+3
   \        0x8   0x....'....        BL       mbedtls_asn1_get_tag
   \        0xC   0x2800             CMP      R0,#+0
   \        0xE   0xD10E             BNE.N    ??mbedtls_asn1_get_bitstring_null_0
    224                  return( ret );
    225          
    226              if( (*len)-- < 2 || *(*p)++ != 0 )
   \       0x10   0x6828             LDR      R0,[R5, #+0]
   \       0x12   0x1E41             SUBS     R1,R0,#+1
   \       0x14   0x6029             STR      R1,[R5, #+0]
   \       0x16   0x2802             CMP      R0,#+2
   \       0x18   0xD305             BCC.N    ??mbedtls_asn1_get_bitstring_null_1
   \       0x1A   0x6820             LDR      R0,[R4, #+0]
   \       0x1C   0x1C41             ADDS     R1,R0,#+1
   \       0x1E   0x6021             STR      R1,[R4, #+0]
   \       0x20   0x7800             LDRB     R0,[R0, #+0]
   \       0x22   0x2800             CMP      R0,#+0
   \       0x24   0xD002             BEQ.N    ??mbedtls_asn1_get_bitstring_null_2
    227                  return( MBEDTLS_ERR_ASN1_INVALID_DATA );
   \                     ??mbedtls_asn1_get_bitstring_null_1: (+1)
   \       0x26   0xF06F 0x0067      MVN      R0,#+103
   \       0x2A   0xBD32             POP      {R1,R4,R5,PC}
    228          
    229              return( 0 );
   \                     ??mbedtls_asn1_get_bitstring_null_2: (+1)
   \       0x2C   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_asn1_get_bitstring_null_0: (+1)
   \       0x2E   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    230          }
    231          
    232          
    233          
    234          /*
    235           *  Parses and splits an ASN.1 "SEQUENCE OF <tag>"
    236           */

   \                                 In section .text, align 2, keep-with-next
    237          int mbedtls_asn1_get_sequence_of( unsigned char **p,
    238                                    const unsigned char *end,
    239                                    mbedtls_asn1_sequence *cur,
    240                                    int tag)
    241          {
   \                     mbedtls_asn1_get_sequence_of: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
   \        0x6   0x4616             MOV      R6,R2
   \        0x8   0x461F             MOV      R7,R3
    242              int ret;
    243              size_t len;
    244              mbedtls_asn1_buf *buf;
    245          
    246              /* Get main sequence tag */
    247              if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
    248                      MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
   \        0xA   0x2330             MOVS     R3,#+48
   \        0xC   0x466A             MOV      R2,SP
   \        0xE   0x....'....        BL       mbedtls_asn1_get_tag
   \       0x12   0x2800             CMP      R0,#+0
   \       0x14   0xD128             BNE.N    ??mbedtls_asn1_get_sequence_of_0
    249                  return( ret );
    250          
    251              if( *p + len != end )
   \       0x16   0x6820             LDR      R0,[R4, #+0]
   \       0x18   0x9900             LDR      R1,[SP, #+0]
   \       0x1A   0x4408             ADD      R0,R0,R1
   \       0x1C   0x42A8             CMP      R0,R5
   \       0x1E   0xD003             BEQ.N    ??mbedtls_asn1_get_sequence_of_1
    252                  return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   \       0x20   0xF06F 0x0065      MVN      R0,#+101
   \       0x24   0xBDF2             POP      {R1,R4-R7,PC}
    253          
    254              while( *p < end )
    255              {
    256                  buf = &(cur->buf);
    257                  buf->tag = **p;
    258          
    259                  if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
    260                      return( ret );
    261          
    262                  buf->p = *p;
    263                  *p += buf->len;
    264          
    265                  /* Allocate and assign next pointer */
    266                  if( *p < end )
    267                  {
    268                      cur->next = (mbedtls_asn1_sequence*)mbedtls_calloc( 1,
    269                                                      sizeof( mbedtls_asn1_sequence ) );
    270          
    271                      if( cur->next == NULL )
    272                          return( MBEDTLS_ERR_ASN1_ALLOC_FAILED );
    273          
    274                      cur = cur->next;
   \                     ??mbedtls_asn1_get_sequence_of_2: (+1)
   \       0x26   0x4606             MOV      R6,R0
   \                     ??mbedtls_asn1_get_sequence_of_1: (+1)
   \       0x28   0x6820             LDR      R0,[R4, #+0]
   \       0x2A   0x42A8             CMP      R0,R5
   \       0x2C   0xD21D             BCS.N    ??mbedtls_asn1_get_sequence_of_3
   \       0x2E   0x7800             LDRB     R0,[R0, #+0]
   \       0x30   0x6030             STR      R0,[R6, #+0]
   \       0x32   0x463B             MOV      R3,R7
   \       0x34   0x1D32             ADDS     R2,R6,#+4
   \       0x36   0x4629             MOV      R1,R5
   \       0x38   0x4620             MOV      R0,R4
   \       0x3A   0x....'....        BL       mbedtls_asn1_get_tag
   \       0x3E   0x2800             CMP      R0,#+0
   \       0x40   0xD112             BNE.N    ??mbedtls_asn1_get_sequence_of_0
   \       0x42   0x6820             LDR      R0,[R4, #+0]
   \       0x44   0x60B0             STR      R0,[R6, #+8]
   \       0x46   0x6820             LDR      R0,[R4, #+0]
   \       0x48   0x6871             LDR      R1,[R6, #+4]
   \       0x4A   0x4408             ADD      R0,R0,R1
   \       0x4C   0x6020             STR      R0,[R4, #+0]
   \       0x4E   0x42A8             CMP      R0,R5
   \       0x50   0xD2EA             BCS.N    ??mbedtls_asn1_get_sequence_of_1
   \       0x52   0x2110             MOVS     R1,#+16
   \       0x54   0x2001             MOVS     R0,#+1
   \       0x56   0x....'....        BL       mbedtls_calloc
   \       0x5A   0x60F0             STR      R0,[R6, #+12]
   \       0x5C   0x2800             CMP      R0,#+0
   \       0x5E   0xD1E2             BNE.N    ??mbedtls_asn1_get_sequence_of_2
   \       0x60   0xF06F 0x0069      MVN      R0,#+105
   \       0x64   0xBDF2             POP      {R1,R4-R7,PC}
    275                  }
    276              }
    277          
    278              /* Set final sequence entry's next pointer to NULL */
    279              cur->next = NULL;
    280          
    281              if( *p != end )
    282                  return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    283          
    284              return( 0 );
   \                     ??mbedtls_asn1_get_sequence_of_4: (+1)
   \       0x66   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_asn1_get_sequence_of_0: (+1)
   \       0x68   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
   \                     ??mbedtls_asn1_get_sequence_of_3: (+1)
   \       0x6A   0x2000             MOVS     R0,#+0
   \       0x6C   0x60F0             STR      R0,[R6, #+12]
   \       0x6E   0x6820             LDR      R0,[R4, #+0]
   \       0x70   0x42A8             CMP      R0,R5
   \       0x72   0xD0F8             BEQ.N    ??mbedtls_asn1_get_sequence_of_4
   \       0x74   0xF06F 0x0065      MVN      R0,#+101
   \       0x78   0xBDF2             POP      {R1,R4-R7,PC}
    285          }
    286          

   \                                 In section .text, align 2, keep-with-next
    287          int mbedtls_asn1_get_alg( unsigned char **p,
    288                            const unsigned char *end,
    289                            mbedtls_asn1_buf *alg, mbedtls_asn1_buf *params )
    290          {
   \                     mbedtls_asn1_get_alg: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460F             MOV      R7,R1
   \        0x6   0x4616             MOV      R6,R2
   \        0x8   0x461D             MOV      R5,R3
    291              int ret;
    292              size_t len;
    293          
    294              if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
    295                      MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
   \        0xA   0x2330             MOVS     R3,#+48
   \        0xC   0x466A             MOV      R2,SP
   \        0xE   0x....'....        BL       mbedtls_asn1_get_tag
   \       0x12   0x2800             CMP      R0,#+0
   \       0x14   0xD139             BNE.N    ??mbedtls_asn1_get_alg_0
    296                  return( ret );
    297          
    298              if( ( end - *p ) < 1 )
   \       0x16   0x6820             LDR      R0,[R4, #+0]
   \       0x18   0x1A3F             SUBS     R7,R7,R0
   \       0x1A   0x2F01             CMP      R7,#+1
   \       0x1C   0xDA02             BGE.N    ??mbedtls_asn1_get_alg_1
    299                  return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   \       0x1E   0xF06F 0x005F      MVN      R0,#+95
   \       0x22   0xBDF2             POP      {R1,R4-R7,PC}
    300          
    301              alg->tag = **p;
   \                     ??mbedtls_asn1_get_alg_1: (+1)
   \       0x24   0x7800             LDRB     R0,[R0, #+0]
   \       0x26   0x6030             STR      R0,[R6, #+0]
    302              end = *p + len;
   \       0x28   0x6820             LDR      R0,[R4, #+0]
   \       0x2A   0x9900             LDR      R1,[SP, #+0]
   \       0x2C   0x1847             ADDS     R7,R0,R1
    303          
    304              if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
   \       0x2E   0x2306             MOVS     R3,#+6
   \       0x30   0x1D32             ADDS     R2,R6,#+4
   \       0x32   0x4639             MOV      R1,R7
   \       0x34   0x4620             MOV      R0,R4
   \       0x36   0x....'....        BL       mbedtls_asn1_get_tag
   \       0x3A   0x2800             CMP      R0,#+0
   \       0x3C   0xD125             BNE.N    ??mbedtls_asn1_get_alg_0
    305                  return( ret );
    306          
    307              alg->p = *p;
   \       0x3E   0x6820             LDR      R0,[R4, #+0]
   \       0x40   0x60B0             STR      R0,[R6, #+8]
    308              *p += alg->len;
   \       0x42   0x6820             LDR      R0,[R4, #+0]
   \       0x44   0x6871             LDR      R1,[R6, #+4]
   \       0x46   0x4408             ADD      R0,R0,R1
   \       0x48   0x6020             STR      R0,[R4, #+0]
    309          
    310              if( *p == end )
   \       0x4A   0x42B8             CMP      R0,R7
   \       0x4C   0xD105             BNE.N    ??mbedtls_asn1_get_alg_2
    311              {
    312                  mbedtls_platform_zeroize( params, sizeof(mbedtls_asn1_buf) );
   \       0x4E   0x210C             MOVS     R1,#+12
   \       0x50   0x4628             MOV      R0,R5
   \       0x52   0x....'....        BL       mbedtls_platform_zeroize
    313                  return( 0 );
   \       0x56   0x2000             MOVS     R0,#+0
   \       0x58   0xBDF2             POP      {R1,R4-R7,PC}
    314              }
    315          
    316              params->tag = **p;
   \                     ??mbedtls_asn1_get_alg_2: (+1)
   \       0x5A   0x7800             LDRB     R0,[R0, #+0]
   \       0x5C   0x6028             STR      R0,[R5, #+0]
    317              (*p)++;
   \       0x5E   0x6820             LDR      R0,[R4, #+0]
   \       0x60   0x1C40             ADDS     R0,R0,#+1
   \       0x62   0x6020             STR      R0,[R4, #+0]
    318          
    319              if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
   \       0x64   0x1D2A             ADDS     R2,R5,#+4
   \       0x66   0x4639             MOV      R1,R7
   \       0x68   0x4620             MOV      R0,R4
   \       0x6A   0x....'....        BL       mbedtls_asn1_get_len
   \       0x6E   0x2800             CMP      R0,#+0
   \       0x70   0xD10B             BNE.N    ??mbedtls_asn1_get_alg_0
    320                  return( ret );
    321          
    322              params->p = *p;
   \       0x72   0x6820             LDR      R0,[R4, #+0]
   \       0x74   0x60A8             STR      R0,[R5, #+8]
    323              *p += params->len;
   \       0x76   0x6820             LDR      R0,[R4, #+0]
   \       0x78   0x6869             LDR      R1,[R5, #+4]
   \       0x7A   0x4408             ADD      R0,R0,R1
   \       0x7C   0x6020             STR      R0,[R4, #+0]
    324          
    325              if( *p != end )
   \       0x7E   0x42B8             CMP      R0,R7
   \       0x80   0xD002             BEQ.N    ??mbedtls_asn1_get_alg_3
    326                  return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   \       0x82   0xF06F 0x0065      MVN      R0,#+101
   \       0x86   0xBDF2             POP      {R1,R4-R7,PC}
    327          
    328              return( 0 );
   \                     ??mbedtls_asn1_get_alg_3: (+1)
   \       0x88   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_asn1_get_alg_0: (+1)
   \       0x8A   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    329          }
    330          

   \                                 In section .text, align 2, keep-with-next
    331          int mbedtls_asn1_get_alg_null( unsigned char **p,
    332                                 const unsigned char *end,
    333                                 mbedtls_asn1_buf *alg )
    334          {
   \                     mbedtls_asn1_get_alg_null: (+1)
   \        0x0   0xB57F             PUSH     {R0-R6,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
   \        0x6   0x4616             MOV      R6,R2
    335              int ret;
    336              mbedtls_asn1_buf params;
    337          
    338              memset( &params, 0, sizeof(mbedtls_asn1_buf) );
   \        0x8   0x2200             MOVS     R2,#+0
   \        0xA   0x210C             MOVS     R1,#+12
   \        0xC   0x4668             MOV      R0,SP
   \        0xE   0x....'....        BL       __aeabi_memset4
    339          
    340              if( ( ret = mbedtls_asn1_get_alg( p, end, alg, &params ) ) != 0 )
   \       0x12   0x466B             MOV      R3,SP
   \       0x14   0x4632             MOV      R2,R6
   \       0x16   0x4629             MOV      R1,R5
   \       0x18   0x4620             MOV      R0,R4
   \       0x1A   0x....'....        BL       mbedtls_asn1_get_alg
   \       0x1E   0x2800             CMP      R0,#+0
   \       0x20   0xD10B             BNE.N    ??mbedtls_asn1_get_alg_null_0
    341                  return( ret );
    342          
    343              if( ( params.tag != MBEDTLS_ASN1_NULL && params.tag != 0 ) || params.len != 0 )
   \       0x22   0x9800             LDR      R0,[SP, #+0]
   \       0x24   0x2805             CMP      R0,#+5
   \       0x26   0xD001             BEQ.N    ??mbedtls_asn1_get_alg_null_1
   \       0x28   0x2800             CMP      R0,#+0
   \       0x2A   0xD102             BNE.N    ??mbedtls_asn1_get_alg_null_2
   \                     ??mbedtls_asn1_get_alg_null_1: (+1)
   \       0x2C   0x9801             LDR      R0,[SP, #+4]
   \       0x2E   0x2800             CMP      R0,#+0
   \       0x30   0xD002             BEQ.N    ??mbedtls_asn1_get_alg_null_3
    344                  return( MBEDTLS_ERR_ASN1_INVALID_DATA );
   \                     ??mbedtls_asn1_get_alg_null_2: (+1)
   \       0x32   0xF06F 0x0067      MVN      R0,#+103
   \       0x36   0xE000             B.N      ??mbedtls_asn1_get_alg_null_0
    345          
    346              return( 0 );
   \                     ??mbedtls_asn1_get_alg_null_3: (+1)
   \       0x38   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_asn1_get_alg_null_0: (+1)
   \       0x3A   0xB004             ADD      SP,SP,#+16
   \       0x3C   0xBD70             POP      {R4-R6,PC}       ;; return
    347          }
    348          

   \                                 In section .text, align 2, keep-with-next
    349          void mbedtls_asn1_free_named_data( mbedtls_asn1_named_data *cur )
    350          {
   \                     mbedtls_asn1_free_named_data: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
    351              if( cur == NULL )
   \        0x4   0xD00B             BEQ.N    ??mbedtls_asn1_free_named_data_0
    352                  return;
    353          
    354              mbedtls_free( cur->oid.p );
   \        0x6   0x68A0             LDR      R0,[R4, #+8]
   \        0x8   0x....'....        BL       mbedtls_free
    355              mbedtls_free( cur->val.p );
   \        0xC   0x6960             LDR      R0,[R4, #+20]
   \        0xE   0x....'....        BL       mbedtls_free
    356          
    357              mbedtls_platform_zeroize( cur, sizeof( mbedtls_asn1_named_data ) );
   \       0x12   0x2120             MOVS     R1,#+32
   \       0x14   0x4620             MOV      R0,R4
   \       0x16   0xE8BD 0x4010      POP      {R4,LR}
   \       0x1A   0x....'....        B.W      mbedtls_platform_zeroize
   \                     ??mbedtls_asn1_free_named_data_0: (+1)
   \       0x1E   0xBD10             POP      {R4,PC}          ;; return
    358          }
    359          

   \                                 In section .text, align 2, keep-with-next
    360          void mbedtls_asn1_free_named_data_list( mbedtls_asn1_named_data **head )
    361          {
   \                     mbedtls_asn1_free_named_data_list: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4605             MOV      R5,R0
   \        0x4   0xE007             B.N      ??mbedtls_asn1_free_named_data_list_0
    362              mbedtls_asn1_named_data *cur;
    363          
    364              while( ( cur = *head ) != NULL )
    365              {
    366                  *head = cur->next;
   \                     ??mbedtls_asn1_free_named_data_list_1: (+1)
   \        0x6   0x69A0             LDR      R0,[R4, #+24]
   \        0x8   0x6028             STR      R0,[R5, #+0]
    367                  mbedtls_asn1_free_named_data( cur );
   \        0xA   0x4620             MOV      R0,R4
   \        0xC   0x....'....        BL       mbedtls_asn1_free_named_data
    368                  mbedtls_free( cur );
   \       0x10   0x4620             MOV      R0,R4
   \       0x12   0x....'....        BL       mbedtls_free
    369              }
   \                     ??mbedtls_asn1_free_named_data_list_0: (+1)
   \       0x16   0x682C             LDR      R4,[R5, #+0]
   \       0x18   0x2C00             CMP      R4,#+0
   \       0x1A   0xD1F4             BNE.N    ??mbedtls_asn1_free_named_data_list_1
    370          }
   \       0x1C   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    371          

   \                                 In section .text, align 2, keep-with-next
    372          mbedtls_asn1_named_data *mbedtls_asn1_find_named_data( mbedtls_asn1_named_data *list,
    373                                                 const char *oid, size_t len )
    374          {
   \                     mbedtls_asn1_find_named_data: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
   \        0x6   0x4616             MOV      R6,R2
    375              while( list != NULL )
   \                     ??mbedtls_asn1_find_named_data_0: (+1)
   \        0x8   0x2C00             CMP      R4,#+0
   \        0xA   0xD00B             BEQ.N    ??mbedtls_asn1_find_named_data_1
    376              {
    377                  if( list->oid.len == len &&
    378                      memcmp( list->oid.p, oid, len ) == 0 )
   \        0xC   0x6860             LDR      R0,[R4, #+4]
   \        0xE   0x42B0             CMP      R0,R6
   \       0x10   0xD106             BNE.N    ??mbedtls_asn1_find_named_data_2
   \       0x12   0x4632             MOV      R2,R6
   \       0x14   0x4629             MOV      R1,R5
   \       0x16   0x68A0             LDR      R0,[R4, #+8]
   \       0x18   0x....'....        BL       memcmp
   \       0x1C   0x2800             CMP      R0,#+0
   \       0x1E   0xD001             BEQ.N    ??mbedtls_asn1_find_named_data_1
    379                  {
    380                      break;
    381                  }
    382          
    383                  list = list->next;
   \                     ??mbedtls_asn1_find_named_data_2: (+1)
   \       0x20   0x69A4             LDR      R4,[R4, #+24]
   \       0x22   0xE7F1             B.N      ??mbedtls_asn1_find_named_data_0
    384              }
    385          
    386              return( list );
   \                     ??mbedtls_asn1_find_named_data_1: (+1)
   \       0x24   0x4620             MOV      R0,R4
   \       0x26   0xBD70             POP      {R4-R6,PC}       ;; return
    387          }
    388          
    389          #endif /* MBEDTLS_ASN1_PARSE_C */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   mbedtls_asn1_find_named_data
        16   -> memcmp
       8   mbedtls_asn1_free_named_data
         8   -> mbedtls_free
         0   -> mbedtls_platform_zeroize
      16   mbedtls_asn1_free_named_data_list
        16   -> mbedtls_asn1_free_named_data
        16   -> mbedtls_free
      24   mbedtls_asn1_get_alg
        24   -> mbedtls_asn1_get_len
        24   -> mbedtls_asn1_get_tag
        24   -> mbedtls_platform_zeroize
      32   mbedtls_asn1_get_alg_null
        32   -> __aeabi_memset4
        32   -> mbedtls_asn1_get_alg
      16   mbedtls_asn1_get_bitstring
        16   -> mbedtls_asn1_get_tag
      16   mbedtls_asn1_get_bitstring_null
        16   -> mbedtls_asn1_get_tag
      16   mbedtls_asn1_get_bool
        16   -> mbedtls_asn1_get_tag
      16   mbedtls_asn1_get_int
        16   -> mbedtls_asn1_get_tag
       4   mbedtls_asn1_get_len
      16   mbedtls_asn1_get_mpi
        16   -> mbedtls_asn1_get_tag
        16   -> mbedtls_mpi_read_binary
      24   mbedtls_asn1_get_sequence_of
        24   -> mbedtls_asn1_get_tag
        24   -> mbedtls_calloc
       8   mbedtls_asn1_get_tag
         0   -> mbedtls_asn1_get_len


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      40  mbedtls_asn1_find_named_data
      32  mbedtls_asn1_free_named_data
      30  mbedtls_asn1_free_named_data_list
     140  mbedtls_asn1_get_alg
      62  mbedtls_asn1_get_alg_null
      80  mbedtls_asn1_get_bitstring
      48  mbedtls_asn1_get_bitstring_null
      54  mbedtls_asn1_get_bool
      80  mbedtls_asn1_get_int
     242  mbedtls_asn1_get_len
      38  mbedtls_asn1_get_mpi
     122  mbedtls_asn1_get_sequence_of
      44  mbedtls_asn1_get_tag

 
 1 012 bytes in section .text
 
 1 012 bytes of CODE memory

Errors: none
Warnings: none
