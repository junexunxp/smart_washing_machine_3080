###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.3.193/W32 for ARM         10/Jun/2019  13:48:30
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_model\iotx_cm_mqtt.c
#    Command line =  
#        -f C:\Users\nxf42695\AppData\Local\Temp\1\EW57F.tmp
#        (C:\Development\smart_washing_machine_3080\csdk\eng\dev_model\iotx_cm_mqtt.c
#        -D DEBUG -D USE_RTOS -D XIP_EXTERNAL_FLASH=1 -D
#        XIP_BOOT_HEADER_ENABLE=1 -D CPU_MIMXRT1052DVL6B -D FSL_RTOS_FREE_RTOS
#        -D PRINTF_ADVANCED_ENABLE -D
#        "MBEDTLS_CONFIG_FILE=\"ksdk_mbedtls_config.h\"" -lC
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list -lA
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list
#        --diag_suppress Pa082,Pa050 -o
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_d16 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" --preinclude
#        C:\Development\smart_washing_machine_3080/source\app_preinclude.h -I
#        C:\Development\smart_washing_machine_3080/board\ -I
#        C:\Development\smart_washing_machine_3080/source\ -I
#        C:\Development\smart_washing_machine_3080/CMSIS\ -I
#        C:\Development\smart_washing_machine_3080/amazon-freertos/freertos/portable\
#        -I C:\Development\smart_washing_machine_3080/amazon-freertos/include\
#        -I C:\Development\smart_washing_machine_3080/component/lists\ -I
#        C:\Development\smart_washing_machine_3080/component/serial_manager\ -I
#        C:\Development\smart_washing_machine_3080/component/uart\ -I
#        C:\Development\smart_washing_machine_3080/component/kv\ -I
#        C:\Development\smart_washing_machine_3080/component/kv/include\ -I
#        C:\Development\smart_washing_machine_3080/device\ -I
#        C:\Development\smart_washing_machine_3080/doc\ -I
#        C:\Development\smart_washing_machine_3080/drivers\ -I
#        C:\Development\smart_washing_machine_3080/src\ -I
#        C:\Development\smart_washing_machine_3080/startup\ -I
#        C:\Development\smart_washing_machine_3080/utilities\ -I
#        C:\Development\smart_washing_machine_3080/xip\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\atm\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_model\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_sign\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\infra\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\mqtt\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\external_libs\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\coap_cloud\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\CoAPPacket\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\server\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\os\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\awss_reset\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\mbedtls\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\ -I
#        C:\Development\smart_washing_machine_3080\mbedtls\port\ksdk\ -Om)
#    Locale       =  C
#    List file    =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list\iotx_cm_mqtt.lst
#    Object file  =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj\iotx_cm_mqtt.o
#
###############################################################################

C:\Development\smart_washing_machine_3080\csdk\eng\dev_model\iotx_cm_mqtt.c
      1          #include "iotx_cm_internal.h"
      2          
      3          #if defined(MQTT_COMM_ENABLED) || defined(MAL_ENABLED)
      4          

   \                                 In section .bss, align 4
      5          static iotx_cm_connection_t *_mqtt_conncection = NULL;
   \                     _mqtt_conncection:
   \        0x0                      DS8 4
      6          static void iotx_cloud_conn_mqtt_event_handle(void *pcontext, void *pclient, iotx_mqtt_event_msg_pt msg);
      7          static int  _mqtt_connect(uint32_t timeout);
      8          static int _mqtt_publish(iotx_cm_ext_params_t *params, const char *topic, const char *payload,
      9                                   unsigned int payload_len);
     10          static int _mqtt_sub(iotx_cm_ext_params_t *params, const char *topic,
     11                               iotx_cm_data_handle_cb topic_handle_func, void *pcontext);
     12          static iotx_mqtt_qos_t _get_mqtt_qos(iotx_cm_ack_types_t ack_type);
     13          static int _mqtt_unsub(const char *topic);
     14          static int _mqtt_close();
     15          static void _set_common_handlers();
     16          

   \                                 In section .text, align 2, keep-with-next
     17          iotx_cm_connection_t *iotx_cm_open_mqtt(iotx_cm_init_param_t *params)
     18          {
   \                     iotx_cm_open_mqtt: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4606             MOV      R6,R0
     19              iotx_mqtt_param_t *mqtt_param = NULL;
   \        0x4   0x2400             MOVS     R4,#+0
     20          
     21              if (_mqtt_conncection != NULL) {
   \        0x6   0x....'....        LDR.W    R5,??DataTable8
   \        0xA   0x6828             LDR      R0,[R5, #+0]
   \        0xC   0x2800             CMP      R0,#+0
   \        0xE   0xD132             BNE.N    ??iotx_cm_open_mqtt_0
     22                  cm_warning("mqtt connection is opened already,return it");
     23                  return _mqtt_conncection;
     24              }
     25          
     26              _mqtt_conncection = (iotx_cm_connection_t *)cm_malloc(sizeof(iotx_cm_connection_t));
   \       0x10   0x2034             MOVS     R0,#+52
   \       0x12   0x....'....        BL       HAL_Malloc
   \       0x16   0x6028             STR      R0,[R5, #+0]
     27              if (_mqtt_conncection == NULL) {
   \       0x18   0x2800             CMP      R0,#+0
   \       0x1A   0xD01F             BEQ.N    ??iotx_cm_open_mqtt_1
     28                  cm_err("_mqtt_conncection malloc failed!");
     29                  goto failed;
     30              }
     31          
     32              mqtt_param = (iotx_mqtt_param_t *)cm_malloc(sizeof(iotx_mqtt_param_t));
   \       0x1C   0x2034             MOVS     R0,#+52
   \       0x1E   0x....'....        BL       HAL_Malloc
   \       0x22   0x0004             MOVS     R4,R0
     33              if (mqtt_param == NULL) {
   \       0x24   0xD01A             BEQ.N    ??iotx_cm_open_mqtt_1
     34                  cm_err("mqtt_param malloc failed!");
     35                  goto failed;
     36              }
     37              _mqtt_conncection->open_params = mqtt_param;
   \       0x26   0x6828             LDR      R0,[R5, #+0]
   \       0x28   0x6044             STR      R4,[R0, #+4]
     38          
     39              mqtt_param->request_timeout_ms = params->request_timeout_ms;
   \       0x2A   0x6830             LDR      R0,[R6, #+0]
   \       0x2C   0x61E0             STR      R0,[R4, #+28]
     40              mqtt_param->clean_session = 0;
   \       0x2E   0x2000             MOVS     R0,#+0
   \       0x30   0x7620             STRB     R0,[R4, #+24]
     41              mqtt_param->keepalive_interval_ms = params->keepalive_interval_ms;
   \       0x32   0x6870             LDR      R0,[R6, #+4]
   \       0x34   0x6220             STR      R0,[R4, #+32]
     42              mqtt_param->read_buf_size = params->read_buf_size;
   \       0x36   0x68F0             LDR      R0,[R6, #+12]
   \       0x38   0x62A0             STR      R0,[R4, #+40]
     43              mqtt_param->write_buf_size = params->write_buf_size;
   \       0x3A   0x68B0             LDR      R0,[R6, #+8]
   \       0x3C   0x6260             STR      R0,[R4, #+36]
     44          
     45              mqtt_param->handle_event.h_fp = iotx_cloud_conn_mqtt_event_handle;
   \       0x3E   0x....'....        ADR.W    R0,iotx_cloud_conn_mqtt_event_handle
   \       0x42   0x62E0             STR      R0,[R4, #+44]
     46              mqtt_param->handle_event.pcontext = NULL;
   \       0x44   0x2000             MOVS     R0,#+0
   \       0x46   0x6320             STR      R0,[R4, #+48]
     47          
     48              _mqtt_conncection->event_handler = params->handle_event;
   \       0x48   0x6970             LDR      R0,[R6, #+20]
   \       0x4A   0x6829             LDR      R1,[R5, #+0]
   \       0x4C   0x62C8             STR      R0,[R1, #+44]
     49              _mqtt_conncection->cb_data = params->context;
   \       0x4E   0x69B0             LDR      R0,[R6, #+24]
   \       0x50   0x6829             LDR      R1,[R5, #+0]
   \       0x52   0x6308             STR      R0,[R1, #+48]
     50              _set_common_handlers();
   \       0x54   0x....'....        BL       _set_common_handlers
     51          
     52              return _mqtt_conncection;
   \       0x58   0x6828             LDR      R0,[R5, #+0]
   \       0x5A   0xBD70             POP      {R4-R6,PC}
     53          
     54          failed:
     55          
     56              if (_mqtt_conncection != NULL) {
   \                     ??iotx_cm_open_mqtt_1: (+1)
   \       0x5C   0x6828             LDR      R0,[R5, #+0]
   \       0x5E   0x2800             CMP      R0,#+0
   \       0x60   0xD003             BEQ.N    ??iotx_cm_open_mqtt_2
     57                  cm_free(_mqtt_conncection);
   \       0x62   0x....'....        BL       HAL_Free
   \       0x66   0x2000             MOVS     R0,#+0
   \       0x68   0x6028             STR      R0,[R5, #+0]
     58                  _mqtt_conncection = NULL;
     59              }
     60          
     61              if (mqtt_param != NULL) {
   \                     ??iotx_cm_open_mqtt_2: (+1)
   \       0x6A   0x2C00             CMP      R4,#+0
   \       0x6C   0xD002             BEQ.N    ??iotx_cm_open_mqtt_3
     62                  cm_free(mqtt_param);
   \       0x6E   0x4620             MOV      R0,R4
   \       0x70   0x....'....        BL       HAL_Free
     63              }
     64          
     65              return NULL;
   \                     ??iotx_cm_open_mqtt_3: (+1)
   \       0x74   0x2000             MOVS     R0,#+0
   \                     ??iotx_cm_open_mqtt_0: (+1)
   \       0x76   0xBD70             POP      {R4-R6,PC}       ;; return
     66          }
     67          
     68          

   \                                 In section .text, align 4, keep-with-next
     69          static void iotx_cloud_conn_mqtt_event_handle(void *pcontext, void *pclient, iotx_mqtt_event_msg_pt msg)
     70          {
   \                     iotx_cloud_conn_mqtt_event_handle: (+1)
   \        0x0   0xB5FE             PUSH     {R1-R7,LR}
   \        0x2   0x4606             MOV      R6,R0
     71              uintptr_t packet_id = (uintptr_t)msg->msg;
   \        0x4   0x6851             LDR      R1,[R2, #+4]
     72              if (_mqtt_conncection == NULL) {
   \        0x6   0x....'....        LDR.W    R5,??DataTable8
   \        0xA   0x6828             LDR      R0,[R5, #+0]
   \        0xC   0x2800             CMP      R0,#+0
   \        0xE   0xF000 0x80AE      BEQ.W    ??iotx_cloud_conn_mqtt_event_handle_1
     73                  return;
     74              }
     75          
     76              switch (msg->event_type) {
   \       0x12   0x7810             LDRB     R0,[R2, #+0]
   \       0x14   0x1E40             SUBS     R0,R0,#+1
   \       0x16   0x280B             CMP      R0,#+11
   \       0x18   0xF200 0x80A9      BHI.W    ??iotx_cloud_conn_mqtt_event_handle_1
   \       0x1C   0xE8DF 0xF000      TBB      [PC, R0]
   \                     ??iotx_cloud_conn_mqtt_event_handle_0:
   \       0x20   0x06 0x18          DC8      0x6,0x18,0x29,0x39
   \              0x29 0x39    
   \       0x24   0x39 0x49          DC8      0x39,0x49,0x59,0x59
   \              0x59 0x59    
   \       0x28   0x69 0x79          DC8      0x69,0x79,0x79,0x89
   \              0x79 0x89    
     77          
     78                  case IOTX_MQTT_EVENT_DISCONNECT: {
     79                      iotx_cm_event_msg_t event;
     80                      cm_info("disconnected,fd = %d", _mqtt_conncection->fd);
     81                      event.type = IOTX_CM_EVENT_CLOUD_DISCONNECT;
   \                     ??iotx_cloud_conn_mqtt_event_handle_2: (+1)
   \       0x2C   0x2002             MOVS     R0,#+2
   \       0x2E   0xF88D 0x0000      STRB     R0,[SP, #+0]
     82                      event.msg = NULL;
   \       0x32   0x2000             MOVS     R0,#+0
   \       0x34   0x9001             STR      R0,[SP, #+4]
     83                      if (_mqtt_conncection->event_handler) {
   \       0x36   0x6828             LDR      R0,[R5, #+0]
   \       0x38   0x6AC0             LDR      R0,[R0, #+44]
   \       0x3A   0x2800             CMP      R0,#+0
   \       0x3C   0xF000 0x8097      BEQ.W    ??iotx_cloud_conn_mqtt_event_handle_1
     84                          _mqtt_conncection->event_handler(_mqtt_conncection->fd, &event, _mqtt_conncection->cb_data);
   \       0x40   0x6828             LDR      R0,[R5, #+0]
   \       0x42   0x6B02             LDR      R2,[R0, #+48]
   \       0x44   0x4669             MOV      R1,SP
   \       0x46   0x6800             LDR      R0,[R0, #+0]
   \       0x48   0x682B             LDR      R3,[R5, #+0]
   \       0x4A   0x6ADB             LDR      R3,[R3, #+44]
   \       0x4C   0x4798             BLX      R3
   \       0x4E   0xBDF7             POP      {R0-R2,R4-R7,PC}
     85                      }
     86                  }
     87                  break;
     88          
     89                  case IOTX_MQTT_EVENT_RECONNECT: {
     90                      iotx_cm_event_msg_t event;
     91                      cm_info("connected,fd = %d", _mqtt_conncection->fd);
     92                      event.type = IOTX_CM_EVENT_CLOUD_CONNECTED;
   \                     ??iotx_cloud_conn_mqtt_event_handle_3: (+1)
   \       0x50   0x2000             MOVS     R0,#+0
   \       0x52   0xF88D 0x0000      STRB     R0,[SP, #+0]
     93                      event.msg = NULL;
   \       0x56   0x9001             STR      R0,[SP, #+4]
     94                      /* cm_info(cm_log_info_MQTT_reconnect); */
     95          
     96                      if (_mqtt_conncection->event_handler) {
   \       0x58   0x6828             LDR      R0,[R5, #+0]
   \       0x5A   0x6AC0             LDR      R0,[R0, #+44]
   \       0x5C   0x2800             CMP      R0,#+0
   \       0x5E   0xF000 0x8086      BEQ.W    ??iotx_cloud_conn_mqtt_event_handle_1
     97                          _mqtt_conncection->event_handler(_mqtt_conncection->fd, &event, _mqtt_conncection->cb_data);
   \       0x62   0x6828             LDR      R0,[R5, #+0]
   \       0x64   0x6B02             LDR      R2,[R0, #+48]
   \       0x66   0x4669             MOV      R1,SP
   \       0x68   0x6800             LDR      R0,[R0, #+0]
   \       0x6A   0x682B             LDR      R3,[R5, #+0]
   \       0x6C   0x6ADB             LDR      R3,[R3, #+44]
   \       0x6E   0x4798             BLX      R3
   \       0x70   0xBDF7             POP      {R0-R2,R4-R7,PC}
     98                      }
     99                  }
    100                  break;
    101          
    102                  case IOTX_MQTT_EVENT_SUBCRIBE_SUCCESS: {
    103                      iotx_cm_event_msg_t event;
    104                      event.type = IOTX_CM_EVENT_SUBCRIBE_SUCCESS;
   \                     ??iotx_cloud_conn_mqtt_event_handle_4: (+1)
   \       0x72   0x2003             MOVS     R0,#+3
   \       0x74   0xF88D 0x0000      STRB     R0,[SP, #+0]
    105                      event.msg = (void *)packet_id;
   \       0x78   0x9101             STR      R1,[SP, #+4]
    106          
    107                      if (_mqtt_conncection->event_handler) {
   \       0x7A   0x6828             LDR      R0,[R5, #+0]
   \       0x7C   0x6AC0             LDR      R0,[R0, #+44]
   \       0x7E   0x2800             CMP      R0,#+0
   \       0x80   0xD075             BEQ.N    ??iotx_cloud_conn_mqtt_event_handle_1
    108                          _mqtt_conncection->event_handler(_mqtt_conncection->fd, &event, _mqtt_conncection->cb_data);
   \       0x82   0x6828             LDR      R0,[R5, #+0]
   \       0x84   0x6B02             LDR      R2,[R0, #+48]
   \       0x86   0x4669             MOV      R1,SP
   \       0x88   0x6800             LDR      R0,[R0, #+0]
   \       0x8A   0x682B             LDR      R3,[R5, #+0]
   \       0x8C   0x6ADB             LDR      R3,[R3, #+44]
   \       0x8E   0x4798             BLX      R3
   \       0x90   0xBDF7             POP      {R0-R2,R4-R7,PC}
    109                      }
    110                  }
    111                  break;
    112          
    113                  case IOTX_MQTT_EVENT_SUBCRIBE_NACK:
    114                  case IOTX_MQTT_EVENT_SUBCRIBE_TIMEOUT: {
    115                      iotx_cm_event_msg_t event;
    116                      event.type = IOTX_CM_EVENT_SUBCRIBE_FAILED;
   \                     ??iotx_cloud_conn_mqtt_event_handle_5: (+1)
   \       0x92   0x2004             MOVS     R0,#+4
   \       0x94   0xF88D 0x0000      STRB     R0,[SP, #+0]
    117                      event.msg = (void *)packet_id;
   \       0x98   0x9101             STR      R1,[SP, #+4]
    118          
    119                      if (_mqtt_conncection->event_handler) {
   \       0x9A   0x6828             LDR      R0,[R5, #+0]
   \       0x9C   0x6AC0             LDR      R0,[R0, #+44]
   \       0x9E   0x2800             CMP      R0,#+0
   \       0xA0   0xD065             BEQ.N    ??iotx_cloud_conn_mqtt_event_handle_1
    120                          _mqtt_conncection->event_handler(_mqtt_conncection->fd, &event, _mqtt_conncection->cb_data);
   \       0xA2   0x6828             LDR      R0,[R5, #+0]
   \       0xA4   0x6B02             LDR      R2,[R0, #+48]
   \       0xA6   0x4669             MOV      R1,SP
   \       0xA8   0x6800             LDR      R0,[R0, #+0]
   \       0xAA   0x682B             LDR      R3,[R5, #+0]
   \       0xAC   0x6ADB             LDR      R3,[R3, #+44]
   \       0xAE   0x4798             BLX      R3
   \       0xB0   0xBDF7             POP      {R0-R2,R4-R7,PC}
    121                      }
    122                  }
    123                  break;
    124          
    125                  case IOTX_MQTT_EVENT_UNSUBCRIBE_SUCCESS: {
    126                      iotx_cm_event_msg_t event;
    127                      event.type = IOTX_CM_EVENT_UNSUB_SUCCESS;
   \                     ??iotx_cloud_conn_mqtt_event_handle_6: (+1)
   \       0xB2   0x2005             MOVS     R0,#+5
   \       0xB4   0xF88D 0x0000      STRB     R0,[SP, #+0]
    128                      event.msg = (void *)packet_id;
   \       0xB8   0x9101             STR      R1,[SP, #+4]
    129          
    130                      if (_mqtt_conncection->event_handler) {
   \       0xBA   0x6828             LDR      R0,[R5, #+0]
   \       0xBC   0x6AC0             LDR      R0,[R0, #+44]
   \       0xBE   0x2800             CMP      R0,#+0
   \       0xC0   0xD055             BEQ.N    ??iotx_cloud_conn_mqtt_event_handle_1
    131                          _mqtt_conncection->event_handler(_mqtt_conncection->fd, &event, _mqtt_conncection->cb_data);
   \       0xC2   0x6828             LDR      R0,[R5, #+0]
   \       0xC4   0x6B02             LDR      R2,[R0, #+48]
   \       0xC6   0x4669             MOV      R1,SP
   \       0xC8   0x6800             LDR      R0,[R0, #+0]
   \       0xCA   0x682B             LDR      R3,[R5, #+0]
   \       0xCC   0x6ADB             LDR      R3,[R3, #+44]
   \       0xCE   0x4798             BLX      R3
   \       0xD0   0xBDF7             POP      {R0-R2,R4-R7,PC}
    132                      }
    133                  }
    134                  break;
    135          
    136                  case IOTX_MQTT_EVENT_UNSUBCRIBE_NACK:
    137                  case IOTX_MQTT_EVENT_UNSUBCRIBE_TIMEOUT: {
    138                      iotx_cm_event_msg_t event;
    139                      event.type = IOTX_CM_EVENT_UNSUB_FAILED;
   \                     ??iotx_cloud_conn_mqtt_event_handle_7: (+1)
   \       0xD2   0x2006             MOVS     R0,#+6
   \       0xD4   0xF88D 0x0000      STRB     R0,[SP, #+0]
    140                      event.msg = (void *)packet_id;
   \       0xD8   0x9101             STR      R1,[SP, #+4]
    141          
    142                      if (_mqtt_conncection->event_handler) {
   \       0xDA   0x6828             LDR      R0,[R5, #+0]
   \       0xDC   0x6AC0             LDR      R0,[R0, #+44]
   \       0xDE   0x2800             CMP      R0,#+0
   \       0xE0   0xD045             BEQ.N    ??iotx_cloud_conn_mqtt_event_handle_1
    143                          _mqtt_conncection->event_handler(_mqtt_conncection->fd, &event, _mqtt_conncection->cb_data);
   \       0xE2   0x6828             LDR      R0,[R5, #+0]
   \       0xE4   0x6B02             LDR      R2,[R0, #+48]
   \       0xE6   0x4669             MOV      R1,SP
   \       0xE8   0x6800             LDR      R0,[R0, #+0]
   \       0xEA   0x682B             LDR      R3,[R5, #+0]
   \       0xEC   0x6ADB             LDR      R3,[R3, #+44]
   \       0xEE   0x4798             BLX      R3
   \       0xF0   0xBDF7             POP      {R0-R2,R4-R7,PC}
    144                      }
    145                  }
    146                  break;
    147          
    148                  case IOTX_MQTT_EVENT_PUBLISH_SUCCESS: {
    149                      iotx_cm_event_msg_t event;
    150                      event.type = IOTX_CM_EVENT_PUBLISH_SUCCESS;
   \                     ??iotx_cloud_conn_mqtt_event_handle_8: (+1)
   \       0xF2   0x2007             MOVS     R0,#+7
   \       0xF4   0xF88D 0x0000      STRB     R0,[SP, #+0]
    151                      event.msg = (void *)packet_id;
   \       0xF8   0x9101             STR      R1,[SP, #+4]
    152          
    153                      if (_mqtt_conncection->event_handler) {
   \       0xFA   0x6828             LDR      R0,[R5, #+0]
   \       0xFC   0x6AC0             LDR      R0,[R0, #+44]
   \       0xFE   0x2800             CMP      R0,#+0
   \      0x100   0xD035             BEQ.N    ??iotx_cloud_conn_mqtt_event_handle_1
    154                          _mqtt_conncection->event_handler(_mqtt_conncection->fd, &event, _mqtt_conncection->cb_data);
   \      0x102   0x6828             LDR      R0,[R5, #+0]
   \      0x104   0x6B02             LDR      R2,[R0, #+48]
   \      0x106   0x4669             MOV      R1,SP
   \      0x108   0x6800             LDR      R0,[R0, #+0]
   \      0x10A   0x682B             LDR      R3,[R5, #+0]
   \      0x10C   0x6ADB             LDR      R3,[R3, #+44]
   \      0x10E   0x4798             BLX      R3
   \      0x110   0xBDF7             POP      {R0-R2,R4-R7,PC}
    155                      }
    156                  }
    157                  break;
    158          
    159                  case IOTX_MQTT_EVENT_PUBLISH_NACK:
    160                  case IOTX_MQTT_EVENT_PUBLISH_TIMEOUT: {
    161                      iotx_cm_event_msg_t event;
    162                      event.type = IOTX_CM_EVENT_PUBLISH_FAILED;
   \                     ??iotx_cloud_conn_mqtt_event_handle_9: (+1)
   \      0x112   0x2008             MOVS     R0,#+8
   \      0x114   0xF88D 0x0000      STRB     R0,[SP, #+0]
    163                      event.msg = (void *)packet_id;
   \      0x118   0x9101             STR      R1,[SP, #+4]
    164          
    165                      if (_mqtt_conncection->event_handler) {
   \      0x11A   0x6828             LDR      R0,[R5, #+0]
   \      0x11C   0x6AC0             LDR      R0,[R0, #+44]
   \      0x11E   0x2800             CMP      R0,#+0
   \      0x120   0xD025             BEQ.N    ??iotx_cloud_conn_mqtt_event_handle_1
    166                          _mqtt_conncection->event_handler(_mqtt_conncection->fd, &event, _mqtt_conncection->cb_data);
   \      0x122   0x6828             LDR      R0,[R5, #+0]
   \      0x124   0x6B02             LDR      R2,[R0, #+48]
   \      0x126   0x4669             MOV      R1,SP
   \      0x128   0x6800             LDR      R0,[R0, #+0]
   \      0x12A   0x682B             LDR      R3,[R5, #+0]
   \      0x12C   0x6ADB             LDR      R3,[R3, #+44]
   \      0x12E   0x4798             BLX      R3
   \      0x130   0xBDF7             POP      {R0-R2,R4-R7,PC}
    167                      }
    168                  }
    169                  break;
    170          
    171                  case IOTX_MQTT_EVENT_PUBLISH_RECEIVED: {
    172                      iotx_mqtt_topic_info_pt topic_info = (iotx_mqtt_topic_info_pt)msg->msg;
   \                     ??iotx_cloud_conn_mqtt_event_handle_10: (+1)
   \      0x132   0x460F             MOV      R7,R1
    173                      iotx_cm_data_handle_cb topic_handle_func = (iotx_cm_data_handle_cb)pcontext;
    174          #ifndef DEVICE_MODEL_ALINK2
    175                      char *topic = NULL;
    176          #endif
    177                      if (topic_handle_func == NULL) {
   \      0x134   0x0030             MOVS     R0,R6
   \      0x136   0xD01A             BEQ.N    ??iotx_cloud_conn_mqtt_event_handle_1
    178                          cm_warning("bypass %d bytes on [%.*s]", topic_info->payload_len, topic_info->topic_len, topic_info->ptopic);
    179                          return;
    180                      }
    181          #ifdef DEVICE_MODEL_ALINK2
    182                      topic_handle_func(_mqtt_conncection->fd, topic_info->ptopic, topic_info->topic_len, topic_info->payload,
    183                                        topic_info->payload_len, NULL);
    184          #else
    185                      topic = cm_malloc(topic_info->topic_len + 1);
   \      0x138   0x88F8             LDRH     R0,[R7, #+6]
   \      0x13A   0x1C40             ADDS     R0,R0,#+1
   \      0x13C   0x....'....        BL       HAL_Malloc
   \      0x140   0x0004             MOVS     R4,R0
    186                      if (topic == NULL) {
   \      0x142   0xD014             BEQ.N    ??iotx_cloud_conn_mqtt_event_handle_1
    187                          cm_err("topic malloc failed");
    188                          return;
    189                      }
    190                      memset(topic, 0, topic_info->topic_len + 1);
   \      0x144   0x2200             MOVS     R2,#+0
   \      0x146   0x88F9             LDRH     R1,[R7, #+6]
   \      0x148   0x1C49             ADDS     R1,R1,#+1
   \      0x14A   0x....'....        BL       __aeabi_memset
    191                      memcpy(topic, topic_info->ptopic, topic_info->topic_len);
   \      0x14E   0x88FA             LDRH     R2,[R7, #+6]
   \      0x150   0x68F9             LDR      R1,[R7, #+12]
   \      0x152   0x4620             MOV      R0,R4
   \      0x154   0x....'....        BL       __aeabi_memcpy
    192          
    193                      topic_handle_func(_mqtt_conncection->fd, topic, topic_info->payload, topic_info->payload_len, NULL);
   \      0x158   0x2000             MOVS     R0,#+0
   \      0x15A   0x9000             STR      R0,[SP, #+0]
   \      0x15C   0x68BB             LDR      R3,[R7, #+8]
   \      0x15E   0x693A             LDR      R2,[R7, #+16]
   \      0x160   0x4621             MOV      R1,R4
   \      0x162   0x6828             LDR      R0,[R5, #+0]
   \      0x164   0x6800             LDR      R0,[R0, #+0]
   \      0x166   0x47B0             BLX      R6
    194          
    195                      cm_free(topic);
   \      0x168   0x4620             MOV      R0,R4
   \      0x16A   0x....'....        BL       HAL_Free
    196          #endif
    197                  }
    198                  break;
    199          
    200                  case IOTX_MQTT_EVENT_BUFFER_OVERFLOW:
    201                      cm_warning("buffer overflow", msg->msg);
    202                      break;
    203          
    204                  default:
    205                      cm_warning("msg type unkown, type = %d", msg->event_type);
    206                      break;
    207              }
    208          }
   \                     ??iotx_cloud_conn_mqtt_event_handle_1: (+1)
   \      0x16E   0xBDF7             POP      {R0-R2,R4-R7,PC}  ;; return
    209          
    210          

   \                                 In section .text, align 2, keep-with-next
    211          static int  _mqtt_connect(uint32_t timeout)
    212          {
   \                     _mqtt_connect: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0xB0A6             SUB      SP,SP,#+152
   \        0x4   0x4605             MOV      R5,R0
    213              void *pclient;
    214              iotx_time_t timer;
    215              iotx_mqtt_param_t *mqtt_param = NULL;
    216              iotx_conn_info_pt pconn_info = NULL;
   \        0x6   0x2000             MOVS     R0,#+0
   \        0x8   0x9000             STR      R0,[SP, #+0]
    217              iotx_cm_event_msg_t event;
    218          
    219              char product_key[IOTX_PRODUCT_KEY_LEN + 1] = {0};
   \        0xA   0xA806             ADD      R0,SP,#+24
   \        0xC   0x2118             MOVS     R1,#+24
   \        0xE   0x....'....        BL       __aeabi_memclr4
    220              char device_name[IOTX_DEVICE_NAME_LEN + 1] = {0};
   \       0x12   0xA80C             ADD      R0,SP,#+48
   \       0x14   0x2124             MOVS     R1,#+36
   \       0x16   0x....'....        BL       __aeabi_memclr4
    221              char device_secret[IOTX_DEVICE_SECRET_LEN + 1] = {0};
   \       0x1A   0xA815             ADD      R0,SP,#+84
   \       0x1C   0x2144             MOVS     R1,#+68
   \       0x1E   0x....'....        BL       __aeabi_memclr4
    222          
    223              if (_mqtt_conncection == NULL) {
   \       0x22   0x....             LDR.N    R4,??DataTable8
   \       0x24   0x6820             LDR      R0,[R4, #+0]
   \       0x26   0x2800             CMP      R0,#+0
   \       0x28   0xD102             BNE.N    ??_mqtt_connect_0
    224                  return NULL_VALUE_ERROR;
   \       0x2A   0xF06F 0x0001      MVN      R0,#+1
   \       0x2E   0xE05F             B.N      ??_mqtt_connect_1
    225              }
    226          
    227              mqtt_param = _mqtt_conncection->open_params;
   \                     ??_mqtt_connect_0: (+1)
   \       0x30   0x6846             LDR      R6,[R0, #+4]
    228          
    229              HAL_GetProductKey(product_key);
   \       0x32   0xA806             ADD      R0,SP,#+24
   \       0x34   0x....'....        BL       HAL_GetProductKey
    230              HAL_GetDeviceName(device_name);
   \       0x38   0xA80C             ADD      R0,SP,#+48
   \       0x3A   0x....'....        BL       HAL_GetDeviceName
    231              HAL_GetDeviceSecret(device_secret);
   \       0x3E   0xA815             ADD      R0,SP,#+84
   \       0x40   0x....'....        BL       HAL_GetDeviceSecret
    232          
    233              if (strlen(product_key) == 0 || strlen(device_name) == 0) {
   \       0x44   0xA806             ADD      R0,SP,#+24
   \       0x46   0x....'....        BL       strlen
   \       0x4A   0x2800             CMP      R0,#+0
   \       0x4C   0xD04E             BEQ.N    ??_mqtt_connect_2
   \       0x4E   0xA80C             ADD      R0,SP,#+48
   \       0x50   0x....'....        BL       strlen
   \       0x54   0x2800             CMP      R0,#+0
   \       0x56   0xD049             BEQ.N    ??_mqtt_connect_2
    234                  return FAIL_RETURN;
    235              }
    236          
    237              iotx_time_init(&timer);
   \       0x58   0xA801             ADD      R0,SP,#+4
   \       0x5A   0x....'....        BL       iotx_time_init
    238              utils_time_countdown_ms(&timer, timeout);
   \       0x5E   0x4629             MOV      R1,R5
   \       0x60   0xA801             ADD      R0,SP,#+4
   \       0x62   0x....'....        BL       utils_time_countdown_ms
    239              /* Device AUTH */
    240              do {
    241                  if (0 == IOT_SetupConnInfo(product_key, device_name, device_secret, (void **)&pconn_info)) {
   \                     ??_mqtt_connect_3: (+1)
   \       0x66   0x466B             MOV      R3,SP
   \       0x68   0xAA15             ADD      R2,SP,#+84
   \       0x6A   0xA90C             ADD      R1,SP,#+48
   \       0x6C   0xA806             ADD      R0,SP,#+24
   \       0x6E   0x....'....        BL       IOT_SetupConnInfo
   \       0x72   0x2800             CMP      R0,#+0
   \       0x74   0xD009             BEQ.N    ??_mqtt_connect_4
    242                      mqtt_param->port = pconn_info->port;
    243                      mqtt_param->host = pconn_info->host_name;
    244                      mqtt_param->client_id = pconn_info->client_id;
    245                      mqtt_param->username = pconn_info->username;
    246                      mqtt_param->password = pconn_info->password;
    247                      mqtt_param->pub_key = pconn_info->pub_key;
    248                      break;
    249                  }
    250                  cm_err("IOT_SetupConnInfo failed");
    251                  HAL_SleepMs(500);
   \       0x76   0xF44F 0x70FA      MOV      R0,#+500
   \       0x7A   0x....'....        BL       HAL_SleepMs
    252              } while (!utils_time_is_expired(&timer));
   \       0x7E   0xA801             ADD      R0,SP,#+4
   \       0x80   0x....'....        BL       utils_time_is_expired
   \       0x84   0x2800             CMP      R0,#+0
   \       0x86   0xD0EE             BEQ.N    ??_mqtt_connect_3
   \       0x88   0xE011             B.N      ??_mqtt_connect_5
   \                     ??_mqtt_connect_4: (+1)
   \       0x8A   0x9800             LDR      R0,[SP, #+0]
   \       0x8C   0x8800             LDRH     R0,[R0, #+0]
   \       0x8E   0x8030             STRH     R0,[R6, #+0]
   \       0x90   0x9800             LDR      R0,[SP, #+0]
   \       0x92   0x6840             LDR      R0,[R0, #+4]
   \       0x94   0x6070             STR      R0,[R6, #+4]
   \       0x96   0x9800             LDR      R0,[SP, #+0]
   \       0x98   0x6880             LDR      R0,[R0, #+8]
   \       0x9A   0x60B0             STR      R0,[R6, #+8]
   \       0x9C   0x9800             LDR      R0,[SP, #+0]
   \       0x9E   0x68C0             LDR      R0,[R0, #+12]
   \       0xA0   0x60F0             STR      R0,[R6, #+12]
   \       0xA2   0x9800             LDR      R0,[SP, #+0]
   \       0xA4   0x6900             LDR      R0,[R0, #+16]
   \       0xA6   0x6130             STR      R0,[R6, #+16]
   \       0xA8   0x9800             LDR      R0,[SP, #+0]
   \       0xAA   0x6940             LDR      R0,[R0, #+20]
   \       0xAC   0x6170             STR      R0,[R6, #+20]
    253          
    254              do {
    255                  pclient = IOT_MQTT_Construct((iotx_mqtt_param_t *)_mqtt_conncection->open_params);
   \                     ??_mqtt_connect_5: (+1)
   \       0xAE   0x6820             LDR      R0,[R4, #+0]
   \       0xB0   0x6840             LDR      R0,[R0, #+4]
   \       0xB2   0x....'....        BL       IOT_MQTT_Construct
    256                  if (pclient != NULL) {
   \       0xB6   0x2800             CMP      R0,#+0
   \       0xB8   0xD11C             BNE.N    ??_mqtt_connect_6
    257                      iotx_cm_event_msg_t event;
    258                      _mqtt_conncection->context = pclient;
    259                      event.type = IOTX_CM_EVENT_CLOUD_CONNECTED;
    260                      event.msg = NULL;
    261          
    262                      if (_mqtt_conncection->event_handler) {
    263                          _mqtt_conncection->event_handler(_mqtt_conncection->fd, &event, (void *)_mqtt_conncection);
    264                      }
    265                      return 0;
    266                  }
    267                  HAL_SleepMs(500);
   \       0xBA   0xF44F 0x70FA      MOV      R0,#+500
   \       0xBE   0x....'....        BL       HAL_SleepMs
    268              } while (!utils_time_is_expired(&timer));
   \       0xC2   0xA801             ADD      R0,SP,#+4
   \       0xC4   0x....'....        BL       utils_time_is_expired
   \       0xC8   0x2800             CMP      R0,#+0
   \       0xCA   0xD0F0             BEQ.N    ??_mqtt_connect_5
    269          
    270              event.type = IOTX_CM_EVENT_CLOUD_CONNECT_FAILED;
   \       0xCC   0x2001             MOVS     R0,#+1
   \       0xCE   0xF88D 0x0008      STRB     R0,[SP, #+8]
    271              event.msg = NULL;
   \       0xD2   0x2000             MOVS     R0,#+0
   \       0xD4   0x9003             STR      R0,[SP, #+12]
    272          
    273              if (_mqtt_conncection->event_handler) {
   \       0xD6   0x6820             LDR      R0,[R4, #+0]
   \       0xD8   0x6AC0             LDR      R0,[R0, #+44]
   \       0xDA   0x2800             CMP      R0,#+0
   \       0xDC   0xD006             BEQ.N    ??_mqtt_connect_2
    274                  _mqtt_conncection->event_handler(_mqtt_conncection->fd, &event, (void *)_mqtt_conncection);
   \       0xDE   0x6822             LDR      R2,[R4, #+0]
   \       0xE0   0xA902             ADD      R1,SP,#+8
   \       0xE2   0x4610             MOV      R0,R2
   \       0xE4   0x6800             LDR      R0,[R0, #+0]
   \       0xE6   0x4613             MOV      R3,R2
   \       0xE8   0x6ADB             LDR      R3,[R3, #+44]
   \       0xEA   0x4798             BLX      R3
    275              }
    276              cm_err("mqtt connect failed");
    277              return -1;
   \                     ??_mqtt_connect_2: (+1)
   \       0xEC   0xF04F 0x30FF      MOV      R0,#-1
   \                     ??_mqtt_connect_1: (+1)
   \       0xF0   0xB026             ADD      SP,SP,#+152
   \       0xF2   0xBD70             POP      {R4-R6,PC}       ;; return
   \                     ??_mqtt_connect_6: (+1)
   \       0xF4   0x6821             LDR      R1,[R4, #+0]
   \       0xF6   0x6088             STR      R0,[R1, #+8]
   \       0xF8   0x2000             MOVS     R0,#+0
   \       0xFA   0xF88D 0x0010      STRB     R0,[SP, #+16]
   \       0xFE   0x9005             STR      R0,[SP, #+20]
   \      0x100   0x6820             LDR      R0,[R4, #+0]
   \      0x102   0x6AC0             LDR      R0,[R0, #+44]
   \      0x104   0x2800             CMP      R0,#+0
   \      0x106   0xD006             BEQ.N    ??_mqtt_connect_7
   \      0x108   0x6822             LDR      R2,[R4, #+0]
   \      0x10A   0xA904             ADD      R1,SP,#+16
   \      0x10C   0x4610             MOV      R0,R2
   \      0x10E   0x6800             LDR      R0,[R0, #+0]
   \      0x110   0x4613             MOV      R3,R2
   \      0x112   0x6ADB             LDR      R3,[R3, #+44]
   \      0x114   0x4798             BLX      R3
   \                     ??_mqtt_connect_7: (+1)
   \      0x116   0x2000             MOVS     R0,#+0
   \      0x118   0xE7EA             B.N      ??_mqtt_connect_1
    278          }
    279          

   \                                 In section .text, align 2, keep-with-next
    280          static int _mqtt_publish(iotx_cm_ext_params_t *ext, const char *topic, const char *payload, unsigned int payload_len)
    281          {
   \                     _mqtt_publish: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x460C             MOV      R4,R1
   \        0x4   0x4615             MOV      R5,R2
   \        0x6   0x461E             MOV      R6,R3
    282              int qos = 0;
   \        0x8   0x2200             MOVS     R2,#+0
    283          
    284              if (_mqtt_conncection == NULL) {
   \        0xA   0x....             LDR.N    R7,??DataTable8
   \        0xC   0x6839             LDR      R1,[R7, #+0]
   \        0xE   0x2900             CMP      R1,#+0
   \       0x10   0xD102             BNE.N    ??_mqtt_publish_0
    285                  return NULL_VALUE_ERROR;
   \       0x12   0xF06F 0x0001      MVN      R0,#+1
   \       0x16   0xBDF2             POP      {R1,R4-R7,PC}
    286              }
    287          
    288              if (ext != NULL) {
   \                     ??_mqtt_publish_0: (+1)
   \       0x18   0x2800             CMP      R0,#+0
   \       0x1A   0xD003             BEQ.N    ??_mqtt_publish_1
    289                  qos = (int)_get_mqtt_qos(ext->ack_type);
   \       0x1C   0x7800             LDRB     R0,[R0, #+0]
   \       0x1E   0x....'....        BL       _get_mqtt_qos
   \       0x22   0x4602             MOV      R2,R0
    290              }
    291              return IOT_MQTT_Publish_Simple(_mqtt_conncection->context, topic, qos, (void *)payload, payload_len);
   \                     ??_mqtt_publish_1: (+1)
   \       0x24   0x9600             STR      R6,[SP, #+0]
   \       0x26   0x462B             MOV      R3,R5
   \       0x28   0x4621             MOV      R1,R4
   \       0x2A   0x6838             LDR      R0,[R7, #+0]
   \       0x2C   0x6880             LDR      R0,[R0, #+8]
   \       0x2E   0x....'....        BL       IOT_MQTT_Publish_Simple
   \       0x32   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    292          }
    293          

   \                                 In section .text, align 2, keep-with-next
    294          static int _mqtt_yield(uint32_t timeout)
    295          {
    296              if (_mqtt_conncection == NULL) {
   \                     _mqtt_yield: (+1)
   \        0x0   0x....             LDR.N    R2,??DataTable8
   \        0x2   0x6811             LDR      R1,[R2, #+0]
   \        0x4   0x2900             CMP      R1,#+0
   \        0x6   0xD102             BNE.N    ??_mqtt_yield_0
    297                  return NULL_VALUE_ERROR;
   \        0x8   0xF06F 0x0001      MVN      R0,#+1
   \        0xC   0x4770             BX       LR
    298              }
    299          
    300              return IOT_MQTT_Yield(_mqtt_conncection->context, timeout);
   \                     ??_mqtt_yield_0: (+1)
   \        0xE   0x4601             MOV      R1,R0
   \       0x10   0x6810             LDR      R0,[R2, #+0]
   \       0x12   0x6880             LDR      R0,[R0, #+8]
   \       0x14   0x....'....        B.W      IOT_MQTT_Yield
    301          }
    302          

   \                                 In section .text, align 2, keep-with-next
    303          static int _mqtt_sub(iotx_cm_ext_params_t *ext, const char *topic,
    304                               iotx_cm_data_handle_cb topic_handle_func, void *pcontext)
    305          {
   \                     _mqtt_sub: (+1)
   \        0x0   0xE92D 0x41FC      PUSH     {R2-R8,LR}
   \        0x4   0x460C             MOV      R4,R1
   \        0x6   0x4616             MOV      R6,R2
    306          
    307              int sync = 0;
   \        0x8   0x2500             MOVS     R5,#+0
    308              int qos = 0;
   \        0xA   0x462A             MOV      R2,R5
    309              int timeout = 0;
   \        0xC   0x4617             MOV      R7,R2
    310              int ret;
    311          
    312              if (_mqtt_conncection == NULL || topic == NULL || topic_handle_func == NULL) {
   \        0xE   0x....'....        LDR.W    R8,??DataTable8
   \       0x12   0xF8D8 0x1000      LDR      R1,[R8, #+0]
   \       0x16   0x2900             CMP      R1,#+0
   \       0x18   0xD003             BEQ.N    ??_mqtt_sub_0
   \       0x1A   0x2C00             CMP      R4,#+0
   \       0x1C   0xD001             BEQ.N    ??_mqtt_sub_0
   \       0x1E   0x0031             MOVS     R1,R6
   \       0x20   0xD102             BNE.N    ??_mqtt_sub_1
    313                  return NULL_VALUE_ERROR;
   \                     ??_mqtt_sub_0: (+1)
   \       0x22   0xF06F 0x0001      MVN      R0,#+1
   \       0x26   0xE01E             B.N      ??_mqtt_sub_2
    314              }
    315          
    316              if (ext != NULL) {
   \                     ??_mqtt_sub_1: (+1)
   \       0x28   0x2800             CMP      R0,#+0
   \       0x2A   0xD008             BEQ.N    ??_mqtt_sub_3
    317                  if (ext->sync_mode == IOTX_CM_ASYNC) {
   \       0x2C   0x7841             LDRB     R1,[R0, #+1]
   \       0x2E   0x2900             CMP      R1,#+0
   \       0x30   0xD001             BEQ.N    ??_mqtt_sub_4
    318                      sync = 0;
    319                  } else {
    320                      sync = 1;
   \       0x32   0x2501             MOVS     R5,#+1
    321                      timeout = ext->sync_timeout;
   \       0x34   0x6847             LDR      R7,[R0, #+4]
    322                  }
    323                  qos = (int)_get_mqtt_qos(ext->ack_type);
   \                     ??_mqtt_sub_4: (+1)
   \       0x36   0x7800             LDRB     R0,[R0, #+0]
   \       0x38   0x....'....        BL       _get_mqtt_qos
   \       0x3C   0x4602             MOV      R2,R0
    324              }
    325          
    326              if (sync != 0) {
   \                     ??_mqtt_sub_3: (+1)
   \       0x3E   0x2D00             CMP      R5,#+0
   \       0x40   0xD009             BEQ.N    ??_mqtt_sub_5
    327                  ret = IOT_MQTT_Subscribe_Sync(_mqtt_conncection->context,
    328                                                topic,
    329                                                qos,
                                                       ^
Warning[Pe188]: enumerated type mixed with another type
    330                                                iotx_cloud_conn_mqtt_event_handle,
    331                                                (void *)topic_handle_func,
    332                                                timeout);
   \       0x42   0x9701             STR      R7,[SP, #+4]
   \       0x44   0x9600             STR      R6,[SP, #+0]
   \       0x46   0x....             LDR.N    R3,??DataTable8_1
   \       0x48   0x4621             MOV      R1,R4
   \       0x4A   0xF8D8 0x0000      LDR      R0,[R8, #+0]
   \       0x4E   0x6880             LDR      R0,[R0, #+8]
   \       0x50   0x....'....        BL       IOT_MQTT_Subscribe_Sync
   \       0x54   0xE007             B.N      ??_mqtt_sub_2
    333              } else {
    334                  ret = IOT_MQTT_Subscribe(_mqtt_conncection->context,
    335                                           topic,
    336                                           qos,
                                                  ^
Warning[Pe188]: enumerated type mixed with another type
    337                                           iotx_cloud_conn_mqtt_event_handle,
    338                                           (void *)topic_handle_func);
   \                     ??_mqtt_sub_5: (+1)
   \       0x56   0x9600             STR      R6,[SP, #+0]
   \       0x58   0x....             LDR.N    R3,??DataTable8_1
   \       0x5A   0x4621             MOV      R1,R4
   \       0x5C   0xF8D8 0x0000      LDR      R0,[R8, #+0]
   \       0x60   0x6880             LDR      R0,[R0, #+8]
   \       0x62   0x....'....        BL       IOT_MQTT_Subscribe
    339              }
    340          
    341              return ret;
   \                     ??_mqtt_sub_2: (+1)
   \       0x66   0xE8BD 0x81F6      POP      {R1,R2,R4-R8,PC}  ;; return
    342          }
    343          

   \                                 In section .text, align 2, keep-with-next
    344          static int _mqtt_unsub(const char *topic)
    345          {
   \                     _mqtt_unsub: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    346              int ret;
    347          
    348              if (_mqtt_conncection == NULL) {
   \        0x2   0x....             LDR.N    R2,??DataTable8
   \        0x4   0x6811             LDR      R1,[R2, #+0]
   \        0x6   0x2900             CMP      R1,#+0
   \        0x8   0xD102             BNE.N    ??_mqtt_unsub_0
    349                  return NULL_VALUE_ERROR;
   \        0xA   0xF06F 0x0001      MVN      R0,#+1
   \        0xE   0xBD02             POP      {R1,PC}
    350              }
    351          
    352              ret = IOT_MQTT_Unsubscribe(_mqtt_conncection->context, topic);
   \                     ??_mqtt_unsub_0: (+1)
   \       0x10   0x4601             MOV      R1,R0
   \       0x12   0x6810             LDR      R0,[R2, #+0]
   \       0x14   0x6880             LDR      R0,[R0, #+8]
   \       0x16   0x....'....        BL       IOT_MQTT_Unsubscribe
    353          
    354              if (ret < 0) {
   \       0x1A   0x2800             CMP      R0,#+0
   \       0x1C   0xD501             BPL.N    ??_mqtt_unsub_1
    355                  return -1;
   \       0x1E   0xF04F 0x30FF      MOV      R0,#-1
    356              }
    357          
    358              return ret;
   \                     ??_mqtt_unsub_1: (+1)
   \       0x22   0xBD02             POP      {R1,PC}          ;; return
    359          }
    360          

   \                                 In section .text, align 2, keep-with-next
    361          static int _mqtt_close()
    362          {
   \                     _mqtt_close: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
    363              if (_mqtt_conncection == NULL) {
   \        0x2   0x....             LDR.N    R4,??DataTable8
   \        0x4   0x6820             LDR      R0,[R4, #+0]
   \        0x6   0x2800             CMP      R0,#+0
   \        0x8   0xD102             BNE.N    ??_mqtt_close_0
    364                  return NULL_VALUE_ERROR;
   \        0xA   0xF06F 0x0001      MVN      R0,#+1
   \        0xE   0xBD10             POP      {R4,PC}
    365              }
    366          
    367              cm_free(_mqtt_conncection->open_params);
   \                     ??_mqtt_close_0: (+1)
   \       0x10   0x6840             LDR      R0,[R0, #+4]
   \       0x12   0x....'....        BL       HAL_Free
   \       0x16   0x2000             MOVS     R0,#+0
   \       0x18   0x6821             LDR      R1,[R4, #+0]
   \       0x1A   0x6048             STR      R0,[R1, #+4]
    368              IOT_MQTT_Destroy(&_mqtt_conncection->context);
   \       0x1C   0x6820             LDR      R0,[R4, #+0]
   \       0x1E   0x3008             ADDS     R0,R0,#+8
   \       0x20   0x....'....        BL       IOT_MQTT_Destroy
    369              cm_free(_mqtt_conncection);
   \       0x24   0x6820             LDR      R0,[R4, #+0]
   \       0x26   0x....'....        BL       HAL_Free
   \       0x2A   0x2000             MOVS     R0,#+0
   \       0x2C   0x6020             STR      R0,[R4, #+0]
    370              _mqtt_conncection = NULL;
    371              return 0;
   \       0x2E   0xBD10             POP      {R4,PC}          ;; return
    372          }
    373          

   \                                 In section .text, align 2, keep-with-next
    374          static iotx_mqtt_qos_t _get_mqtt_qos(iotx_cm_ack_types_t ack_type)
    375          {
    376              switch (ack_type) {
   \                     _get_mqtt_qos: (+1)
   \        0x0   0x2801             CMP      R0,#+1
   \        0x2   0xD002             BEQ.N    ??_get_mqtt_qos_0
   \        0x4   0x2802             CMP      R0,#+2
   \        0x6   0xD002             BEQ.N    ??_get_mqtt_qos_1
   \        0x8   0xE003             B.N      ??_get_mqtt_qos_2
    377                  case IOTX_CM_MESSAGE_NO_ACK:
    378                      return IOTX_MQTT_QOS0;
    379          
    380                  case IOTX_CM_MESSAGE_NEED_ACK:
    381                      return IOTX_MQTT_QOS1;
   \                     ??_get_mqtt_qos_0: (+1)
   \        0xA   0x2001             MOVS     R0,#+1
   \        0xC   0x4770             BX       LR
    382          
    383                  case IOTX_CM_MESSAGE_SUB_LOCAL:
    384                      return IOTX_MQTT_QOS3_SUB_LOCAL;
   \                     ??_get_mqtt_qos_1: (+1)
   \        0xE   0x2003             MOVS     R0,#+3
   \       0x10   0x4770             BX       LR
    385          
    386                  default:
    387                      return IOTX_MQTT_QOS0;
   \                     ??_get_mqtt_qos_2: (+1)
   \       0x12   0x2000             MOVS     R0,#+0
   \       0x14   0x4770             BX       LR               ;; return
    388              }
    389          }
    390          
    391          

   \                                 In section .text, align 2, keep-with-next
    392          static void _set_common_handlers()
    393          {
    394              if (_mqtt_conncection != NULL) {
   \                     _set_common_handlers: (+1)
   \        0x0   0x....             LDR.N    R1,??DataTable8
   \        0x2   0x6808             LDR      R0,[R1, #+0]
   \        0x4   0x2800             CMP      R0,#+0
   \        0x6   0xD011             BEQ.N    ??_set_common_handlers_0
    395                  _mqtt_conncection->connect_func = _mqtt_connect;
   \        0x8   0x....             LDR.N    R0,??DataTable8_2
   \        0xA   0x680A             LDR      R2,[R1, #+0]
   \        0xC   0x6150             STR      R0,[R2, #+20]
    396                  _mqtt_conncection->sub_func = _mqtt_sub;
   \        0xE   0x....             LDR.N    R0,??DataTable8_3
   \       0x10   0x680A             LDR      R2,[R1, #+0]
   \       0x12   0x6190             STR      R0,[R2, #+24]
    397                  _mqtt_conncection->unsub_func = _mqtt_unsub;
   \       0x14   0x....             LDR.N    R0,??DataTable8_4
   \       0x16   0x680A             LDR      R2,[R1, #+0]
   \       0x18   0x61D0             STR      R0,[R2, #+28]
    398                  _mqtt_conncection->pub_func = _mqtt_publish;
   \       0x1A   0x....             LDR.N    R0,??DataTable8_5
   \       0x1C   0x680A             LDR      R2,[R1, #+0]
   \       0x1E   0x6210             STR      R0,[R2, #+32]
    399                  _mqtt_conncection->yield_func = (iotx_cm_yield_fp)_mqtt_yield;
   \       0x20   0x....             LDR.N    R0,??DataTable8_6
   \       0x22   0x680A             LDR      R2,[R1, #+0]
   \       0x24   0x6250             STR      R0,[R2, #+36]
    400                  _mqtt_conncection->close_func = _mqtt_close;
   \       0x26   0x....             LDR.N    R0,??DataTable8_7
   \       0x28   0x6809             LDR      R1,[R1, #+0]
   \       0x2A   0x6288             STR      R0,[R1, #+40]
    401              }
    402          }
   \                     ??_set_common_handlers_0: (+1)
   \       0x2C   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \        0x0   0x....'....        DC32     _mqtt_conncection

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \        0x0   0x....'....        DC32     iotx_cloud_conn_mqtt_event_handle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \        0x0   0x....'....        DC32     _mqtt_connect

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_3:
   \        0x0   0x....'....        DC32     _mqtt_sub

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_4:
   \        0x0   0x....'....        DC32     _mqtt_unsub

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_5:
   \        0x0   0x....'....        DC32     _mqtt_publish

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_6:
   \        0x0   0x....'....        DC32     _mqtt_yield

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_7:
   \        0x0   0x....'....        DC32     _mqtt_close

   \                                 In section .rodata, align 4
   \        0x0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \       0x15   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \        0x0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \       0x17   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         

   \                                 In section .rodata, align 4
   \        0x0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \       0x17   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \       0x2E   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
    403          
    404          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   _get_mqtt_qos
       8   _mqtt_close
         8   -> HAL_Free
         8   -> IOT_MQTT_Destroy
     168   _mqtt_connect
       168   -- Indirect call
       168   -> HAL_GetDeviceName
       168   -> HAL_GetDeviceSecret
       168   -> HAL_GetProductKey
       168   -> HAL_SleepMs
       168   -> IOT_MQTT_Construct
       168   -> IOT_SetupConnInfo
       168   -> __aeabi_memclr4
       168   -> iotx_time_init
       168   -> strlen
       168   -> utils_time_countdown_ms
       168   -> utils_time_is_expired
      24   _mqtt_publish
        24   -> IOT_MQTT_Publish_Simple
        24   -> _get_mqtt_qos
      32   _mqtt_sub
        32   -> IOT_MQTT_Subscribe
        32   -> IOT_MQTT_Subscribe_Sync
        32   -> _get_mqtt_qos
       8   _mqtt_unsub
         8   -> IOT_MQTT_Unsubscribe
       0   _mqtt_yield
         0   -> IOT_MQTT_Yield
       0   _set_common_handlers
      32   iotx_cloud_conn_mqtt_event_handle
        32   -- Indirect call
        32   -> HAL_Free
        32   -> HAL_Malloc
        32   -> __aeabi_memcpy
        32   -> __aeabi_memset
      16   iotx_cm_open_mqtt
        16   -> HAL_Free
        16   -> HAL_Malloc
        16   -> _set_common_handlers


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_2
       4  ??DataTable8_3
       4  ??DataTable8_4
       4  ??DataTable8_5
       4  ??DataTable8_6
       4  ??DataTable8_7
      24  ?_0
      36  ?_1
      68  ?_2
      22  _get_mqtt_qos
      48  _mqtt_close
       4  _mqtt_conncection
     282  _mqtt_connect
      52  _mqtt_publish
     106  _mqtt_sub
      36  _mqtt_unsub
      24  _mqtt_yield
      46  _set_common_handlers
     368  iotx_cloud_conn_mqtt_event_handle
     120  iotx_cm_open_mqtt

 
     4 bytes in section .bss
   128 bytes in section .rodata
 1 136 bytes in section .text
 
 1 136 bytes of CODE  memory
   128 bytes of CONST memory
     4 bytes of DATA  memory

Errors: none
Warnings: 2
