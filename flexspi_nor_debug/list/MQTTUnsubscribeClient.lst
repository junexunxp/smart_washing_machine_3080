###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.3.193/W32 for ARM         10/Jun/2019  13:48:38
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\Development\smart_washing_machine_3080\csdk\eng\mqtt\MQTTUnsubscribeClient.c
#    Command line =  
#        -f C:\Users\nxf42695\AppData\Local\Temp\1\EW23EF.tmp
#        (C:\Development\smart_washing_machine_3080\csdk\eng\mqtt\MQTTUnsubscribeClient.c
#        -D DEBUG -D USE_RTOS -D XIP_EXTERNAL_FLASH=1 -D
#        XIP_BOOT_HEADER_ENABLE=1 -D CPU_MIMXRT1052DVL6B -D FSL_RTOS_FREE_RTOS
#        -D PRINTF_ADVANCED_ENABLE -D
#        "MBEDTLS_CONFIG_FILE=\"ksdk_mbedtls_config.h\"" -lC
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list -lA
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list
#        --diag_suppress Pa082,Pa050 -o
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_d16 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" --preinclude
#        C:\Development\smart_washing_machine_3080/source\app_preinclude.h -I
#        C:\Development\smart_washing_machine_3080/board\ -I
#        C:\Development\smart_washing_machine_3080/source\ -I
#        C:\Development\smart_washing_machine_3080/CMSIS\ -I
#        C:\Development\smart_washing_machine_3080/amazon-freertos/freertos/portable\
#        -I C:\Development\smart_washing_machine_3080/amazon-freertos/include\
#        -I C:\Development\smart_washing_machine_3080/component/lists\ -I
#        C:\Development\smart_washing_machine_3080/component/serial_manager\ -I
#        C:\Development\smart_washing_machine_3080/component/uart\ -I
#        C:\Development\smart_washing_machine_3080/component/kv\ -I
#        C:\Development\smart_washing_machine_3080/component/kv/include\ -I
#        C:\Development\smart_washing_machine_3080/device\ -I
#        C:\Development\smart_washing_machine_3080/doc\ -I
#        C:\Development\smart_washing_machine_3080/drivers\ -I
#        C:\Development\smart_washing_machine_3080/src\ -I
#        C:\Development\smart_washing_machine_3080/startup\ -I
#        C:\Development\smart_washing_machine_3080/utilities\ -I
#        C:\Development\smart_washing_machine_3080/xip\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\atm\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_model\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_sign\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\infra\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\mqtt\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\external_libs\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\coap_cloud\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\CoAPPacket\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\server\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\os\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\awss_reset\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\mbedtls\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\ -I
#        C:\Development\smart_washing_machine_3080\mbedtls\port\ksdk\ -Om)
#    Locale       =  C
#    List file    =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list\MQTTUnsubscribeClient.lst
#    Object file  =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj\MQTTUnsubscribeClient.o
#
###############################################################################

C:\Development\smart_washing_machine_3080\csdk\eng\mqtt\MQTTUnsubscribeClient.c
      1          /*
      2           * Copyright (C) 2015-2018 Alibaba Group Holding Limited
      3           */
      4          
      5          #include "MQTTPacket.h"
      6          
      7          #include <string.h>
      8          
      9          /**
     10            * Determines the length of the MQTT unsubscribe packet that would be produced using the supplied parameters
     11            * @param count the number of topic filter strings in topicFilters
     12            * @param topicFilters the array of topic filter strings to be used in the publish
     13            * @return the length of buffer needed to contain the serialized version of the packet
     14            */

   \                                 In section .text, align 2, keep-with-next
     15          int MQTTSerialize_unsubscribeLength(int count, MQTTString topicFilters[])
     16          {
   \                     MQTTSerialize_unsubscribeLength: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
     17              int i;
     18              int len = 2; /* packetid */
   \        0x6   0x2602             MOVS     R6,#+2
     19          
     20              for (i = 0; i < count; ++i) {
   \        0x8   0x2700             MOVS     R7,#+0
   \        0xA   0xE009             B.N      ??MQTTSerialize_unsubscribeLength_0
     21                  len += 2 + MQTTstrlen(topicFilters[i]);    /* length + topic*/
   \                     ??MQTTSerialize_unsubscribeLength_1: (+1)
   \        0xC   0xEB07 0x0047      ADD      R0,R7,R7, LSL #+1
   \       0x10   0xEB05 0x0080      ADD      R0,R5,R0, LSL #+2
   \       0x14   0xC807             LDM      R0,{R0-R2}
   \       0x16   0x....'....        BL       MQTTstrlen
   \       0x1A   0x1C80             ADDS     R0,R0,#+2
   \       0x1C   0x1986             ADDS     R6,R0,R6
     22              }
   \       0x1E   0x1C7F             ADDS     R7,R7,#+1
   \                     ??MQTTSerialize_unsubscribeLength_0: (+1)
   \       0x20   0x42A7             CMP      R7,R4
   \       0x22   0xDBF3             BLT.N    ??MQTTSerialize_unsubscribeLength_1
     23              return len;
   \       0x24   0x4630             MOV      R0,R6
   \       0x26   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
     24          }
     25          
     26          
     27          /**
     28            * Serializes the supplied unsubscribe data into the supplied buffer, ready for sending
     29            * @param buf the raw buffer data, of the correct length determined by the remaining length field
     30            * @param buflen the length in bytes of the data in the supplied buffer
     31            * @param dup integer - the MQTT dup flag
     32            * @param packetid integer - the MQTT packet identifier
     33            * @param count - number of members in the topicFilters array
     34            * @param topicFilters - array of topic filter names
     35            * @return the length of the serialized data.  <= 0 indicates error
     36            */

   \                                 In section .text, align 2, keep-with-next
     37          int MQTTSerialize_unsubscribe(unsigned char *buf, int buflen, unsigned char dup, unsigned short packetid,
     38                                        int count, MQTTString topicFilters[])
     39          {
   \                     MQTTSerialize_unsubscribe: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \        0x4   0x4606             MOV      R6,R0
   \        0x6   0x4689             MOV      R9,R1
   \        0x8   0x4692             MOV      R10,R2
   \        0xA   0x4698             MOV      R8,R3
   \        0xC   0x9C0A             LDR      R4,[SP, #+40]
   \        0xE   0x9F0B             LDR      R7,[SP, #+44]
     40              unsigned char *ptr = buf;
   \       0x10   0x9600             STR      R6,[SP, #+0]
     41              MQTTHeader header = {0};
     42              int rem_len = 0;
     43              int rc = -1;
     44              int i = 0;
   \       0x12   0x2500             MOVS     R5,#+0
     45          
     46              if (MQTTPacket_len(rem_len = MQTTSerialize_unsubscribeLength(count, topicFilters)) > buflen) {
   \       0x14   0x4639             MOV      R1,R7
   \       0x16   0x4620             MOV      R0,R4
   \       0x18   0x....'....        BL       MQTTSerialize_unsubscribeLength
   \       0x1C   0x4683             MOV      R11,R0
   \       0x1E   0x....'....        BL       MQTTPacket_len
   \       0x22   0x4581             CMP      R9,R0
   \       0x24   0xDA02             BGE.N    ??MQTTSerialize_unsubscribe_0
     47                  rc = MQTTPACKET_BUFFER_TOO_SHORT;
   \       0x26   0xF06F 0x0001      MVN      R0,#+1
     48                  goto exit;
   \       0x2A   0xE024             B.N      ??MQTTSerialize_unsubscribe_1
     49              }
     50          
     51              header.byte = 0;
     52              MQTT_HEADER_SET_TYPE(header.byte, UNSUBSCRIBE);
     53              MQTT_HEADER_SET_DUP(header.byte, dup);
     54              MQTT_HEADER_SET_QOS(header.byte, 1);
     55              writeChar(&ptr, header.byte); /* write header */
   \                     ??MQTTSerialize_unsubscribe_0: (+1)
   \       0x2C   0xEA4F 0x0ACA      LSL      R10,R10,#+3
   \       0x30   0xF00A 0x0A08      AND      R10,R10,#0x8
   \       0x34   0xF04A 0x0AA2      ORR      R10,R10,#0xA2
   \       0x38   0x4651             MOV      R1,R10
   \       0x3A   0x4668             MOV      R0,SP
   \       0x3C   0x....'....        BL       writeChar
     56          
     57              ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   \       0x40   0x4659             MOV      R1,R11
   \       0x42   0x9800             LDR      R0,[SP, #+0]
   \       0x44   0x....'....        BL       MQTTPacket_encode
   \       0x48   0x9900             LDR      R1,[SP, #+0]
   \       0x4A   0x4408             ADD      R0,R1,R0
   \       0x4C   0x9000             STR      R0,[SP, #+0]
     58          
     59              writeInt(&ptr, packetid);
   \       0x4E   0x4641             MOV      R1,R8
   \       0x50   0x4668             MOV      R0,SP
   \       0x52   0x....'....        BL       writeInt
     60          
     61              for (i = 0; i < count; ++i) {
   \       0x56   0xE009             B.N      ??MQTTSerialize_unsubscribe_2
     62                  writeMQTTString(&ptr, topicFilters[i]);
   \                     ??MQTTSerialize_unsubscribe_3: (+1)
   \       0x58   0xEB05 0x0045      ADD      R0,R5,R5, LSL #+1
   \       0x5C   0xEB07 0x0080      ADD      R0,R7,R0, LSL #+2
   \       0x60   0xE890 0x000E      LDM      R0,{R1-R3}
   \       0x64   0x4668             MOV      R0,SP
   \       0x66   0x....'....        BL       writeMQTTString
     63              }
   \       0x6A   0x1C6D             ADDS     R5,R5,#+1
   \                     ??MQTTSerialize_unsubscribe_2: (+1)
   \       0x6C   0x42A5             CMP      R5,R4
   \       0x6E   0xDBF3             BLT.N    ??MQTTSerialize_unsubscribe_3
     64          
     65              rc = ptr - buf;
   \       0x70   0x9800             LDR      R0,[SP, #+0]
   \       0x72   0x1B86             SUBS     R6,R0,R6
   \       0x74   0x4630             MOV      R0,R6
     66          exit:
     67              return rc;
   \                     ??MQTTSerialize_unsubscribe_1: (+1)
   \       0x76   0xE8BD 0x8FF2      POP      {R1,R4-R11,PC}   ;; return
     68          }
     69          
     70          
     71          /**
     72            * Deserializes the supplied (wire) buffer into unsuback data
     73            * @param packetid returned integer - the MQTT packet identifier
     74            * @param buf the raw buffer data, of the correct length determined by the remaining length field
     75            * @param buflen the length in bytes of the data in the supplied buffer
     76            * @return error code.  1 is success, 0 is failure
     77            */

   \                                 In section .text, align 2, keep-with-next
     78          int MQTTDeserialize_unsuback(unsigned short *packetid, unsigned char *buf, int buflen)
     79          {
   \                     MQTTDeserialize_unsuback: (+1)
   \        0x0   0xB5E0             PUSH     {R5-R7,LR}
   \        0x2   0x460B             MOV      R3,R1
     80              unsigned char type = 0;
   \        0x4   0x2100             MOVS     R1,#+0
   \        0x6   0xF8AD 0x1004      STRH     R1,[SP, #+4]
     81              unsigned char dup = 0;
     82              int rc = 0;
     83          
     84              rc = MQTTDeserialize_ack(&type, &dup, packetid, buf, buflen);
   \        0xA   0x9200             STR      R2,[SP, #+0]
   \        0xC   0x4602             MOV      R2,R0
   \        0xE   0xF10D 0x0105      ADD      R1,SP,#+5
   \       0x12   0xA801             ADD      R0,SP,#+4
   \       0x14   0x....'....        BL       MQTTDeserialize_ack
     85              if (type == UNSUBACK) {
   \       0x18   0xF89D 0x1004      LDRB     R1,[SP, #+4]
   \       0x1C   0x290B             CMP      R1,#+11
   \       0x1E   0xD100             BNE.N    ??MQTTDeserialize_unsuback_0
     86                  rc = 1;
   \       0x20   0x2001             MOVS     R0,#+1
     87              }
     88              return rc;
   \                     ??MQTTDeserialize_unsuback_0: (+1)
   \       0x22   0xBD0E             POP      {R1-R3,PC}       ;; return
     89          }
     90          
     91          
     92          
     93          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   MQTTDeserialize_unsuback
        16   -> MQTTDeserialize_ack
      40   MQTTSerialize_unsubscribe
        40   -> MQTTPacket_encode
        40   -> MQTTPacket_len
        40   -> MQTTSerialize_unsubscribeLength
        40   -> writeChar
        40   -> writeInt
        40   -> writeMQTTString
      24   MQTTSerialize_unsubscribeLength
        24   -> MQTTstrlen


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      36  MQTTDeserialize_unsuback
     122  MQTTSerialize_unsubscribe
      40  MQTTSerialize_unsubscribeLength

 
 198 bytes in section .text
 
 198 bytes of CODE memory

Errors: none
Warnings: none
