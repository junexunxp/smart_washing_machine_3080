###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.3.193/W32 for ARM         10/Jun/2019  13:48:01
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\Development\smart_washing_machine_3080\mbedtls\library\base64.c
#    Command line =  
#        -f C:\Users\nxf42695\AppData\Local\Temp\1\EW915D.tmp
#        (C:\Development\smart_washing_machine_3080\mbedtls\library\base64.c -D
#        DEBUG -D USE_RTOS -D XIP_EXTERNAL_FLASH=1 -D XIP_BOOT_HEADER_ENABLE=1
#        -D CPU_MIMXRT1052DVL6B -D FSL_RTOS_FREE_RTOS -D PRINTF_ADVANCED_ENABLE
#        -D "MBEDTLS_CONFIG_FILE=\"ksdk_mbedtls_config.h\"" -lC
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list -lA
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list
#        --diag_suppress Pa082,Pa050 -o
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_d16 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" --preinclude
#        C:\Development\smart_washing_machine_3080/source\app_preinclude.h -I
#        C:\Development\smart_washing_machine_3080/board\ -I
#        C:\Development\smart_washing_machine_3080/source\ -I
#        C:\Development\smart_washing_machine_3080/CMSIS\ -I
#        C:\Development\smart_washing_machine_3080/amazon-freertos/freertos/portable\
#        -I C:\Development\smart_washing_machine_3080/amazon-freertos/include\
#        -I C:\Development\smart_washing_machine_3080/component/lists\ -I
#        C:\Development\smart_washing_machine_3080/component/serial_manager\ -I
#        C:\Development\smart_washing_machine_3080/component/uart\ -I
#        C:\Development\smart_washing_machine_3080/component/kv\ -I
#        C:\Development\smart_washing_machine_3080/component/kv/include\ -I
#        C:\Development\smart_washing_machine_3080/device\ -I
#        C:\Development\smart_washing_machine_3080/doc\ -I
#        C:\Development\smart_washing_machine_3080/drivers\ -I
#        C:\Development\smart_washing_machine_3080/src\ -I
#        C:\Development\smart_washing_machine_3080/startup\ -I
#        C:\Development\smart_washing_machine_3080/utilities\ -I
#        C:\Development\smart_washing_machine_3080/xip\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\atm\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_model\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_sign\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\infra\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\mqtt\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\external_libs\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\coap_cloud\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\CoAPPacket\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\server\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\os\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\awss_reset\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\mbedtls\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\ -I
#        C:\Development\smart_washing_machine_3080\mbedtls\port\ksdk\ -Om)
#    Locale       =  C
#    List file    =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list\base64.lst
#    Object file  =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj\base64.o
#
###############################################################################

C:\Development\smart_washing_machine_3080\mbedtls\library\base64.c
      1          /*
      2           *  RFC 1521 base64 encoding/decoding
      3           *
      4           *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
      5           *  SPDX-License-Identifier: Apache-2.0
      6           *
      7           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
      8           *  not use this file except in compliance with the License.
      9           *  You may obtain a copy of the License at
     10           *
     11           *  http://www.apache.org/licenses/LICENSE-2.0
     12           *
     13           *  Unless required by applicable law or agreed to in writing, software
     14           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     15           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     16           *  See the License for the specific language governing permissions and
     17           *  limitations under the License.
     18           *
     19           *  This file is part of mbed TLS (https://tls.mbed.org)
     20           */
     21          
     22          #if !defined(MBEDTLS_CONFIG_FILE)
     23          #include "mbedtls/config.h"
     24          #else
     25          #include MBEDTLS_CONFIG_FILE
     26          #endif
     27          
     28          #if defined(MBEDTLS_BASE64_C)
     29          
     30          #include "mbedtls/base64.h"
     31          
     32          #include <stdint.h>
     33          
     34          #if defined(MBEDTLS_SELF_TEST)
     35          #include <string.h>
     36          #if defined(MBEDTLS_PLATFORM_C)
     37          #include "mbedtls/platform.h"
     38          #else
     39          #include <stdio.h>
     40          #define mbedtls_printf printf
     41          #endif /* MBEDTLS_PLATFORM_C */
     42          #endif /* MBEDTLS_SELF_TEST */
     43          

   \                                 In section .rodata, align 4
     44          static const unsigned char base64_enc_map[64] =
   \                     base64_enc_map:
   \        0x0   0x41 0x42          DC8 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81
   \              0x43 0x44    
   \              0x45 0x46    
   \              0x47 0x48    
   \              0x49 0x4A    
   \              0x4B 0x4C    
   \              0x4D 0x4E    
   \              0x4F 0x50    
   \              0x51         
   \       0x11   0x52 0x53          DC8 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103
   \              0x54 0x55    
   \              0x56 0x57    
   \              0x58 0x59    
   \              0x5A 0x61    
   \              0x62 0x63    
   \              0x64 0x65    
   \              0x66 0x67    
   \       0x21   0x68 0x69          DC8 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116
   \              0x6A 0x6B    
   \              0x6C 0x6D    
   \              0x6E 0x6F    
   \              0x70 0x71    
   \              0x72 0x73    
   \              0x74         
   \       0x2E   0x75 0x76          DC8 117, 118, 119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56
   \              0x77 0x78    
   \              0x79 0x7A    
   \              0x30 0x31    
   \              0x32 0x33    
   \              0x34 0x35    
   \              0x36 0x37    
   \              0x38         
   \       0x3D   0x39 0x2B          DC8 57, 43, 47
   \              0x2F         
     45          {
     46              'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J',
     47              'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T',
     48              'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd',
     49              'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',
     50              'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x',
     51              'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7',
     52              '8', '9', '+', '/'
     53          };
     54          

   \                                 In section .rodata, align 4
     55          static const unsigned char base64_dec_map[128] =
   \                     base64_dec_map:
   \        0x0   0x7F 0x7F          DC8 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127
   \              0x7F 0x7F    
   \              0x7F 0x7F    
   \              0x7F 0x7F    
   \              0x7F 0x7F    
   \              0x7F 0x7F    
   \              0x7F         
   \        0xD   0x7F 0x7F          DC8 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127
   \              0x7F 0x7F    
   \              0x7F 0x7F    
   \              0x7F 0x7F    
   \              0x7F 0x7F    
   \              0x7F 0x7F    
   \              0x7F         
   \       0x1A   0x7F 0x7F          DC8 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127
   \              0x7F 0x7F    
   \              0x7F 0x7F    
   \              0x7F 0x7F    
   \              0x7F 0x7F    
   \              0x7F 0x7F    
   \              0x7F         
   \       0x27   0x7F 0x7F          DC8 127, 127, 127, 127, 62, 127, 127, 127, 63, 52, 53, 54, 55, 56, 57
   \              0x7F 0x7F    
   \              0x3E 0x7F    
   \              0x7F 0x7F    
   \              0x3F 0x34    
   \              0x35 0x36    
   \              0x37 0x38    
   \              0x39         
   \       0x36   0x3A 0x3B          DC8 58, 59, 60, 61, 127, 127, 127, 64, 127, 127, 127, 0, 1, 2, 3, 4, 5
   \              0x3C 0x3D    
   \              0x7F 0x7F    
   \              0x7F 0x40    
   \              0x7F 0x7F    
   \              0x7F 0x00    
   \              0x01 0x02    
   \              0x03 0x04    
   \              0x05         
   \       0x47   0x06 0x07          DC8 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23
   \              0x08 0x09    
   \              0x0A 0x0B    
   \              0x0C 0x0D    
   \              0x0E 0x0F    
   \              0x10 0x11    
   \              0x12 0x13    
   \              0x14 0x15    
   \              0x16 0x17    
   \       0x59   0x18 0x19          DC8 24, 25, 127, 127, 127, 127, 127, 127, 26, 27, 28, 29, 30, 31, 32
   \              0x7F 0x7F    
   \              0x7F 0x7F    
   \              0x7F 0x7F    
   \              0x1A 0x1B    
   \              0x1C 0x1D    
   \              0x1E 0x1F    
   \              0x20         
   \       0x68   0x21 0x22          DC8 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49
   \              0x23 0x24    
   \              0x25 0x26    
   \              0x27 0x28    
   \              0x29 0x2A    
   \              0x2B 0x2C    
   \              0x2D 0x2E    
   \              0x2F 0x30    
   \              0x31         
   \       0x79   0x32 0x33          DC8 50, 51, 127, 127, 127, 127, 127
   \              0x7F 0x7F    
   \              0x7F 0x7F    
   \              0x7F         
     56          {
     57              127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
     58              127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
     59              127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
     60              127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
     61              127, 127, 127,  62, 127, 127, 127,  63,  52,  53,
     62               54,  55,  56,  57,  58,  59,  60,  61, 127, 127,
     63              127,  64, 127, 127, 127,   0,   1,   2,   3,   4,
     64                5,   6,   7,   8,   9,  10,  11,  12,  13,  14,
     65               15,  16,  17,  18,  19,  20,  21,  22,  23,  24,
     66               25, 127, 127, 127, 127, 127, 127,  26,  27,  28,
     67               29,  30,  31,  32,  33,  34,  35,  36,  37,  38,
     68               39,  40,  41,  42,  43,  44,  45,  46,  47,  48,
     69               49,  50,  51, 127, 127, 127, 127, 127
     70          };
     71          
     72          #define BASE64_SIZE_T_MAX   ( (size_t) -1 ) /* SIZE_T_MAX is not standard */
     73          
     74          /*
     75           * Encode a buffer into base64 format
     76           */

   \                                 In section .text, align 2, keep-with-next
     77          int mbedtls_base64_encode( unsigned char *dst, size_t dlen, size_t *olen,
     78                             const unsigned char *src, size_t slen )
     79          {
   \                     mbedtls_base64_encode: (+1)
   \        0x0   0xE92D 0x43F0      PUSH     {R4-R9,LR}
   \        0x4   0x4614             MOV      R4,R2
   \        0x6   0x9A07             LDR      R2,[SP, #+28]
     80              size_t i, n;
     81              int C1, C2, C3;
     82              unsigned char *p;
     83          
     84              if( slen == 0 )
   \        0x8   0x2A00             CMP      R2,#+0
   \        0xA   0xD102             BNE.N    ??mbedtls_base64_encode_0
     85              {
     86                  *olen = 0;
   \        0xC   0x2000             MOVS     R0,#+0
   \        0xE   0x6020             STR      R0,[R4, #+0]
     87                  return( 0 );
   \       0x10   0xE083             B.N      ??mbedtls_base64_encode_1
     88              }
     89          
     90              n = slen / 3 + ( slen % 3 != 0 );
   \                     ??mbedtls_base64_encode_0: (+1)
   \       0x12   0x2503             MOVS     R5,#+3
   \       0x14   0xFBB2 0xF5F5      UDIV     R5,R2,R5
   \       0x18   0xEB05 0x0545      ADD      R5,R5,R5, LSL #+1
   \       0x1C   0x1B55             SUBS     R5,R2,R5
   \       0x1E   0x1E6D             SUBS     R5,R5,#+1
   \       0x20   0x41AD             SBCS     R5,R5,R5
   \       0x22   0x43ED             MVNS     R5,R5
   \       0x24   0x2603             MOVS     R6,#+3
   \       0x26   0xFBB2 0xF6F6      UDIV     R6,R2,R6
   \       0x2A   0xEB16 0x75D5      ADDS     R5,R6,R5, LSR #+31
     91          
     92              if( n > ( BASE64_SIZE_T_MAX - 1 ) / 4 )
   \       0x2E   0xF1B5 0x4F80      CMP      R5,#+1073741824
   \       0x32   0xD305             BCC.N    ??mbedtls_base64_encode_2
     93              {
     94                  *olen = BASE64_SIZE_T_MAX;
   \       0x34   0xF04F 0x30FF      MOV      R0,#-1
   \       0x38   0x6020             STR      R0,[R4, #+0]
     95                  return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
   \       0x3A   0xF06F 0x0029      MVN      R0,#+41
   \       0x3E   0xE06C             B.N      ??mbedtls_base64_encode_1
     96              }
     97          
     98              n *= 4;
   \                     ??mbedtls_base64_encode_2: (+1)
   \       0x40   0x00AD             LSLS     R5,R5,#+2
     99          
    100              if( ( dlen < n + 1 ) || ( NULL == dst ) )
   \       0x42   0x1C6E             ADDS     R6,R5,#+1
   \       0x44   0x42B1             CMP      R1,R6
   \       0x46   0xD301             BCC.N    ??mbedtls_base64_encode_3
   \       0x48   0x2800             CMP      R0,#+0
   \       0x4A   0xD104             BNE.N    ??mbedtls_base64_encode_4
    101              {
    102                  *olen = n + 1;
   \                     ??mbedtls_base64_encode_3: (+1)
   \       0x4C   0x1C6D             ADDS     R5,R5,#+1
   \       0x4E   0x6025             STR      R5,[R4, #+0]
    103                  return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
   \       0x50   0xF06F 0x0029      MVN      R0,#+41
   \       0x54   0xE061             B.N      ??mbedtls_base64_encode_1
    104              }
    105          
    106              n = ( slen / 3 ) * 3;
   \                     ??mbedtls_base64_encode_4: (+1)
   \       0x56   0x2103             MOVS     R1,#+3
   \       0x58   0xFBB2 0xFEF1      UDIV     LR,R2,R1
   \       0x5C   0xEB0E 0x0E4E      ADD      LR,LR,LR, LSL #+1
    107          
    108              for( i = 0, p = dst; i < n; i += 3 )
   \       0x60   0x2100             MOVS     R1,#+0
   \       0x62   0x4605             MOV      R5,R0
   \       0x64   0x....'....        LDR.W    R12,??DataTable2
   \       0x68   0xE027             B.N      ??mbedtls_base64_encode_5
    109              {
    110                  C1 = *src++;
   \                     ??mbedtls_base64_encode_6: (+1)
   \       0x6A   0xF893 0x8000      LDRB     R8,[R3, #+0]
    111                  C2 = *src++;
   \       0x6E   0x785E             LDRB     R6,[R3, #+1]
    112                  C3 = *src++;
   \       0x70   0x789F             LDRB     R7,[R3, #+2]
   \       0x72   0x1CDB             ADDS     R3,R3,#+3
    113          
    114                  *p++ = base64_enc_map[(C1 >> 2) & 0x3F];
   \       0x74   0xF3C8 0x0985      UBFX     R9,R8,#+2,#+6
   \       0x78   0xF81C 0x9009      LDRB     R9,[R12, R9]
   \       0x7C   0xF805 0x9B01      STRB     R9,[R5], #+1
    115                  *p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
   \       0x80   0x46B1             MOV      R9,R6
   \       0x82   0xEA4F 0x1929      ASR      R9,R9,#+4
   \       0x86   0xEB09 0x1908      ADD      R9,R9,R8, LSL #+4
   \       0x8A   0xF009 0x093F      AND      R9,R9,#0x3F
   \       0x8E   0xF81C 0x8009      LDRB     R8,[R12, R9]
   \       0x92   0xF805 0x8B01      STRB     R8,[R5], #+1
    116                  *p++ = base64_enc_map[(((C2 & 15) << 2) + (C3 >> 6)) & 0x3F];
   \       0x96   0x46B8             MOV      R8,R7
   \       0x98   0xEA4F 0x18A8      ASR      R8,R8,#+6
   \       0x9C   0xEB08 0x0886      ADD      R8,R8,R6, LSL #+2
   \       0xA0   0xF008 0x083F      AND      R8,R8,#0x3F
   \       0xA4   0xF81C 0x6008      LDRB     R6,[R12, R8]
   \       0xA8   0xF805 0x6B01      STRB     R6,[R5], #+1
    117                  *p++ = base64_enc_map[C3 & 0x3F];
   \       0xAC   0xF007 0x073F      AND      R7,R7,#0x3F
   \       0xB0   0xF81C 0x6007      LDRB     R6,[R12, R7]
   \       0xB4   0xF805 0x6B01      STRB     R6,[R5], #+1
    118              }
   \       0xB8   0x1CC9             ADDS     R1,R1,#+3
   \                     ??mbedtls_base64_encode_5: (+1)
   \       0xBA   0x4571             CMP      R1,LR
   \       0xBC   0xD3D5             BCC.N    ??mbedtls_base64_encode_6
    119          
    120              if( i < slen )
   \       0xBE   0x4291             CMP      R1,R2
   \       0xC0   0xD227             BCS.N    ??mbedtls_base64_encode_7
    121              {
    122                  C1 = *src++;
   \       0xC2   0x781E             LDRB     R6,[R3, #+0]
    123                  C2 = ( ( i + 1 ) < slen ) ? *src++ : 0;
   \       0xC4   0x1C4F             ADDS     R7,R1,#+1
   \       0xC6   0x4297             CMP      R7,R2
   \       0xC8   0xD201             BCS.N    ??mbedtls_base64_encode_8
   \       0xCA   0x785B             LDRB     R3,[R3, #+1]
   \       0xCC   0xE000             B.N      ??mbedtls_base64_encode_9
   \                     ??mbedtls_base64_encode_8: (+1)
   \       0xCE   0x2300             MOVS     R3,#+0
    124          
    125                  *p++ = base64_enc_map[(C1 >> 2) & 0x3F];
   \                     ??mbedtls_base64_encode_9: (+1)
   \       0xD0   0x4667             MOV      R7,R12
   \       0xD2   0xF3C6 0x0C85      UBFX     R12,R6,#+2,#+6
   \       0xD6   0xF817 0xC00C      LDRB     R12,[R7, R12]
   \       0xDA   0xF885 0xC000      STRB     R12,[R5, #+0]
    126                  *p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
   \       0xDE   0x469C             MOV      R12,R3
   \       0xE0   0xEA4F 0x1C2C      ASR      R12,R12,#+4
   \       0xE4   0xEB0C 0x1C06      ADD      R12,R12,R6, LSL #+4
   \       0xE8   0xF00C 0x0C3F      AND      R12,R12,#0x3F
   \       0xEC   0xF817 0x600C      LDRB     R6,[R7, R12]
   \       0xF0   0x706E             STRB     R6,[R5, #+1]
    127          
    128                  if( ( i + 1 ) < slen )
   \       0xF2   0x1C49             ADDS     R1,R1,#+1
   \       0xF4   0x4291             CMP      R1,R2
   \       0xF6   0xD206             BCS.N    ??mbedtls_base64_encode_10
    129                       *p++ = base64_enc_map[((C2 & 15) << 2) & 0x3F];
   \       0xF8   0x009B             LSLS     R3,R3,#+2
   \       0xFA   0xF003 0x033F      AND      R3,R3,#0x3F
   \       0xFE   0x5CF9             LDRB     R1,[R7, R3]
   \      0x100   0x70A9             STRB     R1,[R5, #+2]
   \      0x102   0x1CED             ADDS     R5,R5,#+3
   \      0x104   0xE002             B.N      ??mbedtls_base64_encode_11
    130                  else *p++ = '=';
   \                     ??mbedtls_base64_encode_10: (+1)
   \      0x106   0x213D             MOVS     R1,#+61
   \      0x108   0x70A9             STRB     R1,[R5, #+2]
   \      0x10A   0x1CED             ADDS     R5,R5,#+3
    131          
    132                  *p++ = '=';
   \                     ??mbedtls_base64_encode_11: (+1)
   \      0x10C   0x213D             MOVS     R1,#+61
   \      0x10E   0xF805 0x1B01      STRB     R1,[R5], #+1
    133              }
    134          
    135              *olen = p - dst;
   \                     ??mbedtls_base64_encode_7: (+1)
   \      0x112   0x1A28             SUBS     R0,R5,R0
   \      0x114   0x6020             STR      R0,[R4, #+0]
    136              *p = 0;
   \      0x116   0x2000             MOVS     R0,#+0
   \      0x118   0x7028             STRB     R0,[R5, #+0]
    137          
    138              return( 0 );
   \                     ??mbedtls_base64_encode_1: (+1)
   \      0x11A   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
    139          }
    140          
    141          /*
    142           * Decode a base64-formatted buffer
    143           */

   \                                 In section .text, align 2, keep-with-next
    144          int mbedtls_base64_decode( unsigned char *dst, size_t dlen, size_t *olen,
    145                             const unsigned char *src, size_t slen )
    146          {
   \                     mbedtls_base64_decode: (+1)
   \        0x0   0xB5F0             PUSH     {R4-R7,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
   \        0x6   0x4616             MOV      R6,R2
   \        0x8   0xF8DD 0xC014      LDR      R12,[SP, #+20]
    147              size_t i, n;
    148              uint32_t j, x;
    149              unsigned char *p;
    150          
    151              /* First pass: check for validity and get output length */
    152              for( i = n = j = 0; i < slen; i++ )
   \        0xC   0x2000             MOVS     R0,#+0
   \        0xE   0x4607             MOV      R7,R0
   \       0x10   0x4602             MOV      R2,R0
   \       0x12   0xE031             B.N      ??mbedtls_base64_decode_0
    153              {
    154                  /* Skip spaces before checking for EOL */
    155                  x = 0;
    156                  while( i < slen && src[i] == ' ' )
    157                  {
    158                      ++i;
    159                      ++x;
    160                  }
    161          
    162                  /* Spaces at end of buffer are OK */
    163                  if( i == slen )
   \                     ??mbedtls_base64_decode_1: (+1)
   \       0x14   0x4562             CMP      R2,R12
   \       0x16   0xD03F             BEQ.N    ??mbedtls_base64_decode_2
    164                      break;
    165          
    166                  if( ( slen - i ) >= 2 &&
    167                      src[i] == '\r' && src[i + 1] == '\n' )
   \       0x18   0xEBAC 0x0E02      SUB      LR,R12,R2
   \       0x1C   0xF1BE 0x0F02      CMP      LR,#+2
   \       0x20   0xD30B             BCC.N    ??mbedtls_base64_decode_3
   \       0x22   0xF813 0xE002      LDRB     LR,[R3, R2]
   \       0x26   0xF1BE 0x0F0D      CMP      LR,#+13
   \       0x2A   0xD106             BNE.N    ??mbedtls_base64_decode_3
   \       0x2C   0xEB03 0x0E02      ADD      LR,R3,R2
   \       0x30   0xF89E 0xE001      LDRB     LR,[LR, #+1]
   \       0x34   0xF1BE 0x0F0A      CMP      LR,#+10
   \       0x38   0xD01D             BEQ.N    ??mbedtls_base64_decode_4
    168                      continue;
    169          
    170                  if( src[i] == '\n' )
   \                     ??mbedtls_base64_decode_3: (+1)
   \       0x3A   0xF813 0xE002      LDRB     LR,[R3, R2]
   \       0x3E   0xF1BE 0x0F0A      CMP      LR,#+10
   \       0x42   0xD018             BEQ.N    ??mbedtls_base64_decode_4
    171                      continue;
    172          
    173                  /* Space inside a line is an error */
    174                  if( x != 0 )
   \       0x44   0x2900             CMP      R1,#+0
   \       0x46   0xD124             BNE.N    ??mbedtls_base64_decode_5
    175                      return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
    176          
    177                  if( src[i] == '=' && ++j > 2 )
   \       0x48   0x4671             MOV      R1,LR
   \       0x4A   0x293D             CMP      R1,#+61
   \       0x4C   0xD102             BNE.N    ??mbedtls_base64_decode_6
   \       0x4E   0x1C40             ADDS     R0,R0,#+1
   \       0x50   0x2803             CMP      R0,#+3
   \       0x52   0xD21E             BCS.N    ??mbedtls_base64_decode_5
    178                      return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
    179          
    180                  if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
   \                     ??mbedtls_base64_decode_6: (+1)
   \       0x54   0x2980             CMP      R1,#+128
   \       0x56   0xDA1C             BGE.N    ??mbedtls_base64_decode_5
   \       0x58   0x....             LDR.N    R1,??DataTable2_1
   \       0x5A   0xF811 0xE00E      LDRB     LR,[R1, LR]
   \       0x5E   0xF1BE 0x0F7F      CMP      LR,#+127
   \       0x62   0xD016             BEQ.N    ??mbedtls_base64_decode_5
    181                      return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
    182          
    183                  if( base64_dec_map[src[i]] < 64 && j != 0 )
   \       0x64   0xF813 0xE002      LDRB     LR,[R3, R2]
   \       0x68   0xF811 0x100E      LDRB     R1,[R1, LR]
   \       0x6C   0x2940             CMP      R1,#+64
   \       0x6E   0xDA01             BGE.N    ??mbedtls_base64_decode_7
   \       0x70   0x2800             CMP      R0,#+0
   \       0x72   0xD10E             BNE.N    ??mbedtls_base64_decode_5
    184                      return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
    185          
    186                  n++;
   \                     ??mbedtls_base64_decode_7: (+1)
   \       0x74   0x1C7F             ADDS     R7,R7,#+1
   \                     ??mbedtls_base64_decode_4: (+1)
   \       0x76   0x1C52             ADDS     R2,R2,#+1
   \                     ??mbedtls_base64_decode_0: (+1)
   \       0x78   0x4562             CMP      R2,R12
   \       0x7A   0xD20D             BCS.N    ??mbedtls_base64_decode_2
   \       0x7C   0x2100             MOVS     R1,#+0
   \                     ??mbedtls_base64_decode_8: (+1)
   \       0x7E   0x4562             CMP      R2,R12
   \       0x80   0xD2C8             BCS.N    ??mbedtls_base64_decode_1
   \       0x82   0xF813 0xE002      LDRB     LR,[R3, R2]
   \       0x86   0xF1BE 0x0F20      CMP      LR,#+32
   \       0x8A   0xD1C3             BNE.N    ??mbedtls_base64_decode_1
   \       0x8C   0x1C52             ADDS     R2,R2,#+1
   \       0x8E   0x1C49             ADDS     R1,R1,#+1
   \       0x90   0xE7F5             B.N      ??mbedtls_base64_decode_8
   \                     ??mbedtls_base64_decode_5: (+1)
   \       0x92   0xF06F 0x002B      MVN      R0,#+43
   \       0x96   0xBDF0             POP      {R4-R7,PC}
    187              }
    188          
    189              if( n == 0 )
   \                     ??mbedtls_base64_decode_2: (+1)
   \       0x98   0x2F00             CMP      R7,#+0
   \       0x9A   0xD102             BNE.N    ??mbedtls_base64_decode_9
    190              {
    191                  *olen = 0;
   \       0x9C   0x2000             MOVS     R0,#+0
   \       0x9E   0x6030             STR      R0,[R6, #+0]
    192                  return( 0 );
   \       0xA0   0xBDF0             POP      {R4-R7,PC}
    193              }
    194          
    195              /* The following expression is to calculate the following formula without
    196               * risk of integer overflow in n:
    197               *     n = ( ( n * 6 ) + 7 ) >> 3;
    198               */
    199              n = ( 6 * ( n >> 3 ) ) + ( ( 6 * ( n & 0x7 ) + 7 ) >> 3 );
    200              n -= j;
   \                     ??mbedtls_base64_decode_9: (+1)
   \       0xA2   0x2106             MOVS     R1,#+6
   \       0xA4   0x46BC             MOV      R12,R7
   \       0xA6   0xEA4F 0x0CDC      LSR      R12,R12,#+3
   \       0xAA   0xF007 0x0707      AND      R7,R7,#0x7
   \       0xAE   0xFB11 0xF707      SMULBB   R7,R1,R7
   \       0xB2   0x1DFF             ADDS     R7,R7,#+7
   \       0xB4   0x08FF             LSRS     R7,R7,#+3
   \       0xB6   0xFB01 0x770C      MLA      R7,R1,R12,R7
   \       0xBA   0x1A38             SUBS     R0,R7,R0
    201          
    202              if( dst == NULL || dlen < n )
   \       0xBC   0x2C00             CMP      R4,#+0
   \       0xBE   0xD001             BEQ.N    ??mbedtls_base64_decode_10
   \       0xC0   0x4285             CMP      R5,R0
   \       0xC2   0xD203             BCS.N    ??mbedtls_base64_decode_11
    203              {
    204                  *olen = n;
   \                     ??mbedtls_base64_decode_10: (+1)
   \       0xC4   0x6030             STR      R0,[R6, #+0]
    205                  return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
   \       0xC6   0xF06F 0x0029      MVN      R0,#+41
   \       0xCA   0xBDF0             POP      {R4-R7,PC}
    206              }
    207          
    208             for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
   \                     ??mbedtls_base64_decode_11: (+1)
   \       0xCC   0x2003             MOVS     R0,#+3
   \       0xCE   0x2700             MOVS     R7,#+0
   \       0xD0   0x463D             MOV      R5,R7
   \       0xD2   0x46A4             MOV      R12,R4
   \       0xD4   0x4611             MOV      R1,R2
   \       0xD6   0xE02D             B.N      ??mbedtls_base64_decode_12
    209             {
    210                  if( *src == '\r' || *src == '\n' || *src == ' ' )
   \                     ??mbedtls_base64_decode_13: (+1)
   \       0xD8   0x781A             LDRB     R2,[R3, #+0]
   \       0xDA   0x2A0D             CMP      R2,#+13
   \       0xDC   0xD028             BEQ.N    ??mbedtls_base64_decode_14
   \       0xDE   0x2A0A             CMP      R2,#+10
   \       0xE0   0xD026             BEQ.N    ??mbedtls_base64_decode_14
   \       0xE2   0x2A20             CMP      R2,#+32
   \       0xE4   0xD024             BEQ.N    ??mbedtls_base64_decode_14
    211                      continue;
    212          
    213                  j -= ( base64_dec_map[*src] == 64 );
   \       0xE6   0x....             LDR.N    R2,??DataTable2_1
   \       0xE8   0xF893 0xE000      LDRB     LR,[R3, #+0]
   \       0xEC   0xF812 0xE00E      LDRB     LR,[R2, LR]
   \       0xF0   0xF1BE 0x0F40      CMP      LR,#+64
   \       0xF4   0xD100             BNE.N    ??mbedtls_base64_decode_15
   \       0xF6   0x1E40             SUBS     R0,R0,#+1
    214                  x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
   \                     ??mbedtls_base64_decode_15: (+1)
   \       0xF8   0xF893 0xE000      LDRB     LR,[R3, #+0]
   \       0xFC   0xF812 0x200E      LDRB     R2,[R2, LR]
   \      0x100   0xF002 0x023F      AND      R2,R2,#0x3F
   \      0x104   0xEA42 0x1787      ORR      R7,R2,R7, LSL #+6
    215          
    216                  if( ++n == 4 )
   \      0x108   0x1C6D             ADDS     R5,R5,#+1
   \      0x10A   0x2D04             CMP      R5,#+4
   \      0x10C   0xD110             BNE.N    ??mbedtls_base64_decode_14
    217                  {
    218                      n = 0;
   \      0x10E   0x2500             MOVS     R5,#+0
    219                      if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
   \      0x110   0x2800             CMP      R0,#+0
   \      0x112   0xD003             BEQ.N    ??mbedtls_base64_decode_16
   \      0x114   0x463A             MOV      R2,R7
   \      0x116   0x0C12             LSRS     R2,R2,#+16
   \      0x118   0xF80C 0x2B01      STRB     R2,[R12], #+1
    220                      if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
   \                     ??mbedtls_base64_decode_16: (+1)
   \      0x11C   0x2802             CMP      R0,#+2
   \      0x11E   0xD303             BCC.N    ??mbedtls_base64_decode_17
   \      0x120   0x463A             MOV      R2,R7
   \      0x122   0x0A12             LSRS     R2,R2,#+8
   \      0x124   0xF80C 0x2B01      STRB     R2,[R12], #+1
    221                      if( j > 2 ) *p++ = (unsigned char)( x       );
   \                     ??mbedtls_base64_decode_17: (+1)
   \      0x128   0x2803             CMP      R0,#+3
   \      0x12A   0xD301             BCC.N    ??mbedtls_base64_decode_14
   \      0x12C   0xF80C 0x7B01      STRB     R7,[R12], #+1
    222                  }
    223              }
   \                     ??mbedtls_base64_decode_14: (+1)
   \      0x130   0x1E49             SUBS     R1,R1,#+1
   \      0x132   0x1C5B             ADDS     R3,R3,#+1
   \                     ??mbedtls_base64_decode_12: (+1)
   \      0x134   0x2900             CMP      R1,#+0
   \      0x136   0xD1CF             BNE.N    ??mbedtls_base64_decode_13
    224          
    225              *olen = p - dst;
   \      0x138   0xEBAC 0x0404      SUB      R4,R12,R4
   \      0x13C   0x6034             STR      R4,[R6, #+0]
    226          
    227              return( 0 );
   \      0x13E   0x2000             MOVS     R0,#+0
   \      0x140   0xBDF0             POP      {R4-R7,PC}       ;; return
    228          }
    229          
    230          #if defined(MBEDTLS_SELF_TEST)
    231          

   \                                 In section .rodata, align 4
    232          static const unsigned char base64_test_dec[64] =
   \                     base64_test_dec:
   \        0x0   0x24 0x48          DC8 36, 72, 110, 86, 135, 98, 90, 189, 191, 23, 217, 162, 196, 23, 26
   \              0x6E 0x56    
   \              0x87 0x62    
   \              0x5A 0xBD    
   \              0xBF 0x17    
   \              0xD9 0xA2    
   \              0xC4 0x17    
   \              0x1A         
   \        0xF   0x01 0x94          DC8 1, 148, 237, 143, 30, 17, 179, 215, 9, 12, 182, 233, 16, 111, 34
   \              0xED 0x8F    
   \              0x1E 0x11    
   \              0xB3 0xD7    
   \              0x09 0x0C    
   \              0xB6 0xE9    
   \              0x10 0x6F    
   \              0x22         
   \       0x1E   0xEE 0x13          DC8 238, 19, 202, 179, 7, 5, 118, 201, 250, 49, 108, 8, 52, 255, 141
   \              0xCA 0xB3    
   \              0x07 0x05    
   \              0x76 0xC9    
   \              0xFA 0x31    
   \              0x6C 0x08    
   \              0x34 0xFF    
   \              0x8D         
   \       0x2D   0xC2 0x6C          DC8 194, 108, 56, 0, 67, 233, 84, 151, 175, 80, 75, 209, 65, 186, 149
   \              0x38 0x00    
   \              0x43 0xE9    
   \              0x54 0x97    
   \              0xAF 0x50    
   \              0x4B 0xD1    
   \              0x41 0xBA    
   \              0x95         
   \       0x3C   0x31 0x5A          DC8 49, 90, 11, 151
   \              0x0B 0x97    
    233          {
    234              0x24, 0x48, 0x6E, 0x56, 0x87, 0x62, 0x5A, 0xBD,
    235              0xBF, 0x17, 0xD9, 0xA2, 0xC4, 0x17, 0x1A, 0x01,
    236              0x94, 0xED, 0x8F, 0x1E, 0x11, 0xB3, 0xD7, 0x09,
    237              0x0C, 0xB6, 0xE9, 0x10, 0x6F, 0x22, 0xEE, 0x13,
    238              0xCA, 0xB3, 0x07, 0x05, 0x76, 0xC9, 0xFA, 0x31,
    239              0x6C, 0x08, 0x34, 0xFF, 0x8D, 0xC2, 0x6C, 0x38,
    240              0x00, 0x43, 0xE9, 0x54, 0x97, 0xAF, 0x50, 0x4B,
    241              0xD1, 0x41, 0xBA, 0x95, 0x31, 0x5A, 0x0B, 0x97
    242          };
    243          

   \                                 In section .rodata, align 4
    244          static const unsigned char base64_test_enc[] =
   \                     base64_test_enc:
   \        0x0   0x4A 0x45          DC8 4AH, 45H, 68H, 75H, 56H, 6FH, 64H, 69H
   \              0x68 0x75    
   \              0x56 0x6F    
   \              0x64 0x69    
   \        0x8   0x57 0x72          DC8 57H, 72H, 32H, 2FH, 46H, 39H, 6DH, 69H
   \              0x32 0x2F    
   \              0x46 0x39    
   \              0x6D 0x69    
   \       0x10   0x78 0x42          DC8 78H, 42H, 63H, 61H, 41H, 5AH, 54H, 74H
   \              0x63 0x61    
   \              0x41 0x5A    
   \              0x54 0x74    
   \       0x18   0x6A 0x78          DC8 6AH, 78H, 34H, 52H, 73H, 39H, 63H, 4AH
   \              0x34 0x52    
   \              0x73 0x39    
   \              0x63 0x4A    
   \       0x20   0x44 0x4C          DC8 44H, 4CH, 62H, 70H, 45H, 47H, 38H, 69H
   \              0x62 0x70    
   \              0x45 0x47    
   \              0x38 0x69    
   \       0x28   0x37 0x68          DC8 37H, 68H, 50H, 4BH, 73H, 77H, 63H, 46H
   \              0x50 0x4B    
   \              0x73 0x77    
   \              0x63 0x46    
   \       0x30   0x64 0x73          DC8 64H, 73H, 6EH, 36H, 4DH, 57H, 77H, 49H
   \              0x6E 0x36    
   \              0x4D 0x57    
   \              0x77 0x49    
   \       0x38   0x4E 0x50          DC8 4EH, 50H, 2BH, 4EH, 77H, 6DH, 77H, 34H
   \              0x2B 0x4E    
   \              0x77 0x6D    
   \              0x77 0x34    
   \       0x40   0x41 0x45          DC8 41H, 45H, 50H, 70H, 56H, 4AH, 65H, 76H
   \              0x50 0x70    
   \              0x56 0x4A    
   \              0x65 0x76    
   \       0x48   0x55 0x45          DC8 55H, 45H, 76H, 52H, 51H, 62H, 71H, 56H
   \              0x76 0x52    
   \              0x51 0x62    
   \              0x71 0x56    
   \       0x50   0x4D 0x56          DC8 4DH, 56H, 6FH, 4CH, 6CH, 77H, 3DH, 3DH
   \              0x6F 0x4C    
   \              0x6C 0x77    
   \              0x3D 0x3D    
   \       0x58   0x00               DC8 0
   \       0x59   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    245              "JEhuVodiWr2/F9mixBcaAZTtjx4Rs9cJDLbpEG8i7hPK"
    246              "swcFdsn6MWwINP+Nwmw4AEPpVJevUEvRQbqVMVoLlw==";
    247          
    248          /*
    249           * Checkup routine
    250           */

   \                                 In section .text, align 2, keep-with-next
    251          int mbedtls_base64_self_test( int verbose )
    252          {
   \                     mbedtls_base64_self_test: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0xB0A2             SUB      SP,SP,#+136
   \        0x4   0x0004             MOVS     R4,R0
    253              size_t len;
    254              const unsigned char *src;
    255              unsigned char buffer[128];
    256          
    257              if( verbose != 0 )
   \        0x6   0xD002             BEQ.N    ??mbedtls_base64_self_test_0
    258                  mbedtls_printf( "  Base64 encoding test: " );
   \        0x8   0x....             LDR.N    R0,??DataTable2_2
   \        0xA   0x....'....        BL       DbgConsole_Printf
    259          
    260              src = base64_test_dec;
    261          
    262              if( mbedtls_base64_encode( buffer, sizeof( buffer ), &len, src, 64 ) != 0 ||
    263                   memcmp( base64_test_enc, buffer, 88 ) != 0 )
   \                     ??mbedtls_base64_self_test_0: (+1)
   \        0xE   0x....             LDR.N    R5,??DataTable2_3
   \       0x10   0x2040             MOVS     R0,#+64
   \       0x12   0x9000             STR      R0,[SP, #+0]
   \       0x14   0x462B             MOV      R3,R5
   \       0x16   0xAA01             ADD      R2,SP,#+4
   \       0x18   0x2180             MOVS     R1,#+128
   \       0x1A   0xA802             ADD      R0,SP,#+8
   \       0x1C   0x....'....        BL       mbedtls_base64_encode
   \       0x20   0x2800             CMP      R0,#+0
   \       0x22   0xD107             BNE.N    ??mbedtls_base64_self_test_1
   \       0x24   0x....             LDR.N    R6,??DataTable2_4
   \       0x26   0x2258             MOVS     R2,#+88
   \       0x28   0xA902             ADD      R1,SP,#+8
   \       0x2A   0x4630             MOV      R0,R6
   \       0x2C   0x....'....        BL       memcmp
   \       0x30   0x2800             CMP      R0,#+0
   \       0x32   0xD005             BEQ.N    ??mbedtls_base64_self_test_2
    264              {
    265                  if( verbose != 0 )
   \                     ??mbedtls_base64_self_test_1: (+1)
   \       0x34   0x2C00             CMP      R4,#+0
   \       0x36   0xD01E             BEQ.N    ??mbedtls_base64_self_test_3
    266                      mbedtls_printf( "failed\n\r" );
   \       0x38   0x....             LDR.N    R0,??DataTable2_5
   \       0x3A   0x....'....        BL       DbgConsole_Printf
   \       0x3E   0xE01A             B.N      ??mbedtls_base64_self_test_3
    267          
    268                  return( 1 );
    269              }
    270          
    271              if( verbose != 0 )
   \                     ??mbedtls_base64_self_test_2: (+1)
   \       0x40   0x2C00             CMP      R4,#+0
   \       0x42   0xD002             BEQ.N    ??mbedtls_base64_self_test_4
    272                  mbedtls_printf( "passed\n\r  Base64 decoding test: " );
   \       0x44   0x....             LDR.N    R0,??DataTable2_6
   \       0x46   0x....'....        BL       DbgConsole_Printf
    273          
    274              src = base64_test_enc;
    275          
    276              if( mbedtls_base64_decode( buffer, sizeof( buffer ), &len, src, 88 ) != 0 ||
    277                   memcmp( base64_test_dec, buffer, 64 ) != 0 )
   \                     ??mbedtls_base64_self_test_4: (+1)
   \       0x4A   0x2058             MOVS     R0,#+88
   \       0x4C   0x9000             STR      R0,[SP, #+0]
   \       0x4E   0x4633             MOV      R3,R6
   \       0x50   0xAA01             ADD      R2,SP,#+4
   \       0x52   0x2180             MOVS     R1,#+128
   \       0x54   0xA802             ADD      R0,SP,#+8
   \       0x56   0x....'....        BL       mbedtls_base64_decode
   \       0x5A   0x2800             CMP      R0,#+0
   \       0x5C   0xD106             BNE.N    ??mbedtls_base64_self_test_5
   \       0x5E   0x2240             MOVS     R2,#+64
   \       0x60   0xA902             ADD      R1,SP,#+8
   \       0x62   0x4628             MOV      R0,R5
   \       0x64   0x....'....        BL       memcmp
   \       0x68   0x2800             CMP      R0,#+0
   \       0x6A   0xD006             BEQ.N    ??mbedtls_base64_self_test_6
    278              {
    279                  if( verbose != 0 )
   \                     ??mbedtls_base64_self_test_5: (+1)
   \       0x6C   0x2C00             CMP      R4,#+0
   \       0x6E   0xD002             BEQ.N    ??mbedtls_base64_self_test_3
    280                      mbedtls_printf( "failed\n\r" );
   \       0x70   0x....             LDR.N    R0,??DataTable2_5
   \       0x72   0x....'....        BL       DbgConsole_Printf
    281          
    282                  return( 1 );
   \                     ??mbedtls_base64_self_test_3: (+1)
   \       0x76   0x2001             MOVS     R0,#+1
   \       0x78   0xE005             B.N      ??mbedtls_base64_self_test_7
    283              }
    284          
    285              if( verbose != 0 )
   \                     ??mbedtls_base64_self_test_6: (+1)
   \       0x7A   0x2C00             CMP      R4,#+0
   \       0x7C   0xD002             BEQ.N    ??mbedtls_base64_self_test_8
    286                  mbedtls_printf( "passed\n\n\r" );
   \       0x7E   0x....             LDR.N    R0,??DataTable2_7
   \       0x80   0x....'....        BL       DbgConsole_Printf
    287          
    288              return( 0 );
   \                     ??mbedtls_base64_self_test_8: (+1)
   \       0x84   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_base64_self_test_7: (+1)
   \       0x86   0xB022             ADD      SP,SP,#+136
   \       0x88   0xBD70             POP      {R4-R6,PC}       ;; return
    289          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \        0x0   0x....'....        DC32     base64_enc_map

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \        0x0   0x....'....        DC32     base64_dec_map

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \        0x0   0x....'....        DC32     base64_test_dec

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \        0x0   0x....'....        DC32     base64_test_enc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \        0x0   0x....'....        DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \        0x0   0x....'....        DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \        0x0   0x....'....        DC32     ?_3

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x20 0x20          DC8 "  Base64 encoding test: "
   \              0x42 0x61    
   \              0x73 0x65    
   \              0x36 0x34    
   \              0x20 0x65    
   \              0x6E 0x63    
   \              0x6F 0x64    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x74 0x65    
   \              0x73 0x74    
   \              0x3A 0x20    
   \              0x00         
   \       0x19   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_1:
   \        0x0   0x66 0x61          DC8 "failed\012\015"
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x0A 0x0D    
   \              0x00         
   \        0x9   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_2:
   \        0x0   0x70 0x61          DC8 "passed\012\015  Base64 decoding test: "
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x0A 0x0D    
   \              0x20 0x20    
   \              0x42 0x61    
   \              0x73 0x65    
   \              0x36 0x34    
   \              0x20 0x64    
   \              0x65 0x63    
   \              0x6F 0x64    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x74 0x65    
   \              0x73 0x74    
   \              0x3A 0x20    
   \              0x00         
   \       0x21   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_3:
   \        0x0   0x70 0x61          DC8 "passed\012\012\015"
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x0A 0x0A    
   \              0x0D 0x00    
   \        0xA   0x00 0x00          DC8 0, 0
    290          
    291          #endif /* MBEDTLS_SELF_TEST */
    292          
    293          #endif /* MBEDTLS_BASE64_C */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      20   mbedtls_base64_decode
      28   mbedtls_base64_encode
     152   mbedtls_base64_self_test
       152   -> DbgConsole_Printf
       152   -> mbedtls_base64_decode
       152   -> mbedtls_base64_encode
       152   -> memcmp


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
      28  ?_0
      12  ?_1
      36  ?_2
      12  ?_3
     128  base64_dec_map
      64  base64_enc_map
      64  base64_test_dec
      92  base64_test_enc
     322  mbedtls_base64_decode
     286  mbedtls_base64_encode
     138  mbedtls_base64_self_test

 
 436 bytes in section .rodata
 778 bytes in section .text
 
 778 bytes of CODE  memory
 436 bytes of CONST memory

Errors: none
Warnings: none
