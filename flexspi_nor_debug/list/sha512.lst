###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.3.193/W32 for ARM         10/Jun/2019  13:48:48
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\Development\smart_washing_machine_3080\mbedtls\library\sha512.c
#    Command line =  
#        -f C:\Users\nxf42695\AppData\Local\Temp\1\EW48CA.tmp
#        (C:\Development\smart_washing_machine_3080\mbedtls\library\sha512.c -D
#        DEBUG -D USE_RTOS -D XIP_EXTERNAL_FLASH=1 -D XIP_BOOT_HEADER_ENABLE=1
#        -D CPU_MIMXRT1052DVL6B -D FSL_RTOS_FREE_RTOS -D PRINTF_ADVANCED_ENABLE
#        -D "MBEDTLS_CONFIG_FILE=\"ksdk_mbedtls_config.h\"" -lC
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list -lA
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list
#        --diag_suppress Pa082,Pa050 -o
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_d16 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" --preinclude
#        C:\Development\smart_washing_machine_3080/source\app_preinclude.h -I
#        C:\Development\smart_washing_machine_3080/board\ -I
#        C:\Development\smart_washing_machine_3080/source\ -I
#        C:\Development\smart_washing_machine_3080/CMSIS\ -I
#        C:\Development\smart_washing_machine_3080/amazon-freertos/freertos/portable\
#        -I C:\Development\smart_washing_machine_3080/amazon-freertos/include\
#        -I C:\Development\smart_washing_machine_3080/component/lists\ -I
#        C:\Development\smart_washing_machine_3080/component/serial_manager\ -I
#        C:\Development\smart_washing_machine_3080/component/uart\ -I
#        C:\Development\smart_washing_machine_3080/component/kv\ -I
#        C:\Development\smart_washing_machine_3080/component/kv/include\ -I
#        C:\Development\smart_washing_machine_3080/device\ -I
#        C:\Development\smart_washing_machine_3080/doc\ -I
#        C:\Development\smart_washing_machine_3080/drivers\ -I
#        C:\Development\smart_washing_machine_3080/src\ -I
#        C:\Development\smart_washing_machine_3080/startup\ -I
#        C:\Development\smart_washing_machine_3080/utilities\ -I
#        C:\Development\smart_washing_machine_3080/xip\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\atm\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_model\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_sign\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\infra\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\mqtt\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\external_libs\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\coap_cloud\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\CoAPPacket\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\server\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\os\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\awss_reset\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\mbedtls\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\ -I
#        C:\Development\smart_washing_machine_3080\mbedtls\port\ksdk\ -Om)
#    Locale       =  C
#    List file    =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list\sha512.lst
#    Object file  =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj\sha512.o
#
###############################################################################

C:\Development\smart_washing_machine_3080\mbedtls\library\sha512.c
      1          /*
      2           *  FIPS-180-2 compliant SHA-384/512 implementation
      3           *
      4           *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
      5           *  SPDX-License-Identifier: Apache-2.0
      6           *
      7           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
      8           *  not use this file except in compliance with the License.
      9           *  You may obtain a copy of the License at
     10           *
     11           *  http://www.apache.org/licenses/LICENSE-2.0
     12           *
     13           *  Unless required by applicable law or agreed to in writing, software
     14           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     15           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     16           *  See the License for the specific language governing permissions and
     17           *  limitations under the License.
     18           *
     19           *  This file is part of mbed TLS (https://tls.mbed.org)
     20           */
     21          /*
     22           *  The SHA-512 Secure Hash Standard was published by NIST in 2002.
     23           *
     24           *  http://csrc.nist.gov/publications/fips/fips180-2/fips180-2.pdf
     25           */
     26          
     27          #if !defined(MBEDTLS_CONFIG_FILE)
     28          #include "mbedtls/config.h"
     29          #else
     30          #include MBEDTLS_CONFIG_FILE
     31          #endif
     32          
     33          #if defined(MBEDTLS_SHA512_C)
     34          
     35          #include "mbedtls/sha512.h"
     36          #include "mbedtls/platform_util.h"
     37          
     38          #if defined(_MSC_VER) || defined(__WATCOMC__)
     39            #define UL64(x) x##ui64
     40          #else
     41            #define UL64(x) x##ULL
     42          #endif
     43          
     44          #include <string.h>
     45          
     46          #if defined(MBEDTLS_SELF_TEST)
     47          #if defined(MBEDTLS_PLATFORM_C)
     48          #include "mbedtls/platform.h"
     49          #else
     50          #include <stdio.h>
     51          #include <stdlib.h>
     52          #define mbedtls_printf printf
     53          #define mbedtls_calloc    calloc
     54          #define mbedtls_free       free
     55          #endif /* MBEDTLS_PLATFORM_C */
     56          #endif /* MBEDTLS_SELF_TEST */
     57          
     58          #if !defined(MBEDTLS_SHA512_ALT)
     59          
     60          /*
     61           * 64-bit integer manipulation macros (big endian)
     62           */
     63          #ifndef GET_UINT64_BE
     64          #define GET_UINT64_BE(n,b,i)                            \
     65          {                                                       \
     66              (n) = ( (uint64_t) (b)[(i)    ] << 56 )       \
     67                  | ( (uint64_t) (b)[(i) + 1] << 48 )       \
     68                  | ( (uint64_t) (b)[(i) + 2] << 40 )       \
     69                  | ( (uint64_t) (b)[(i) + 3] << 32 )       \
     70                  | ( (uint64_t) (b)[(i) + 4] << 24 )       \
     71                  | ( (uint64_t) (b)[(i) + 5] << 16 )       \
     72                  | ( (uint64_t) (b)[(i) + 6] <<  8 )       \
     73                  | ( (uint64_t) (b)[(i) + 7]       );      \
     74          }
     75          #endif /* GET_UINT64_BE */
     76          
     77          #ifndef PUT_UINT64_BE
     78          #define PUT_UINT64_BE(n,b,i)                            \
     79          {                                                       \
     80              (b)[(i)    ] = (unsigned char) ( (n) >> 56 );       \
     81              (b)[(i) + 1] = (unsigned char) ( (n) >> 48 );       \
     82              (b)[(i) + 2] = (unsigned char) ( (n) >> 40 );       \
     83              (b)[(i) + 3] = (unsigned char) ( (n) >> 32 );       \
     84              (b)[(i) + 4] = (unsigned char) ( (n) >> 24 );       \
     85              (b)[(i) + 5] = (unsigned char) ( (n) >> 16 );       \
     86              (b)[(i) + 6] = (unsigned char) ( (n) >>  8 );       \
     87              (b)[(i) + 7] = (unsigned char) ( (n)       );       \
     88          }
     89          #endif /* PUT_UINT64_BE */
     90          

   \                                 In section .text, align 2, keep-with-next
     91          void mbedtls_sha512_init( mbedtls_sha512_context *ctx )
     92          {
     93              memset( ctx, 0, sizeof( mbedtls_sha512_context ) );
   \                     mbedtls_sha512_init: (+1)
   \        0x0   0x2200             MOVS     R2,#+0
   \        0x2   0x21D8             MOVS     R1,#+216
   \        0x4   0x....'....        B.W      __aeabi_memset4
     94          }
     95          

   \                                 In section .text, align 2, keep-with-next
     96          void mbedtls_sha512_free( mbedtls_sha512_context *ctx )
     97          {
     98              if( ctx == NULL )
   \                     mbedtls_sha512_free: (+1)
   \        0x0   0x2800             CMP      R0,#+0
   \        0x2   0xD002             BEQ.N    ??mbedtls_sha512_free_0
     99                  return;
    100          
    101              mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha512_context ) );
   \        0x4   0x21D8             MOVS     R1,#+216
   \        0x6   0x....'....        B.W      mbedtls_platform_zeroize
   \                     ??mbedtls_sha512_free_0: (+1)
   \        0xA   0x4770             BX       LR               ;; return
    102          }
    103          

   \                                 In section .text, align 2, keep-with-next
    104          void mbedtls_sha512_clone( mbedtls_sha512_context *dst,
    105                                     const mbedtls_sha512_context *src )
    106          {
    107              *dst = *src;
   \                     mbedtls_sha512_clone: (+1)
   \        0x0   0x22D8             MOVS     R2,#+216
   \        0x2   0x....'....        B.W      __aeabi_memcpy4
    108          }
    109          
    110          /*
    111           * SHA-512 context setup
    112           */

   \                                 In section .text, align 2, keep-with-next
    113          int mbedtls_sha512_starts_ret( mbedtls_sha512_context *ctx, int is384 )
    114          {
    115              ctx->total[0] = 0;
   \                     mbedtls_sha512_starts_ret: (+1)
   \        0x0   0x2200             MOVS     R2,#+0
   \        0x2   0x4613             MOV      R3,R2
   \        0x4   0xE9C0 0x2300      STRD     R2,R3,[R0, #+0]
    116              ctx->total[1] = 0;
   \        0x8   0xE9C0 0x2302      STRD     R2,R3,[R0, #+8]
    117          
    118              if( is384 == 0 )
   \        0xC   0x2900             CMP      R1,#+0
   \        0xE   0xD120             BNE.N    ??mbedtls_sha512_starts_ret_0
    119              {
    120                  /* SHA-512 */
    121                  ctx->state[0] = UL64(0x6A09E667F3BCC908);
   \       0x10   0x....             LDR.N    R2,??DataTable1  ;; 0xf3bcc908
   \       0x12   0x....             LDR.N    R3,??DataTable1_1  ;; 0x6a09e667
   \       0x14   0xE9C0 0x2304      STRD     R2,R3,[R0, #+16]
    122                  ctx->state[1] = UL64(0xBB67AE8584CAA73B);
   \       0x18   0x....             LDR.N    R2,??DataTable1_2  ;; 0x84caa73b
   \       0x1A   0x....             LDR.N    R3,??DataTable1_3  ;; 0xbb67ae85
   \       0x1C   0xE9C0 0x2306      STRD     R2,R3,[R0, #+24]
    123                  ctx->state[2] = UL64(0x3C6EF372FE94F82B);
   \       0x20   0x....             LDR.N    R2,??DataTable1_4  ;; 0xfe94f82b
   \       0x22   0x....             LDR.N    R3,??DataTable1_5  ;; 0x3c6ef372
   \       0x24   0xE9C0 0x2308      STRD     R2,R3,[R0, #+32]
    124                  ctx->state[3] = UL64(0xA54FF53A5F1D36F1);
   \       0x28   0x....             LDR.N    R2,??DataTable1_6  ;; 0x5f1d36f1
   \       0x2A   0x....             LDR.N    R3,??DataTable1_7  ;; 0xa54ff53a
   \       0x2C   0xE9C0 0x230A      STRD     R2,R3,[R0, #+40]
    125                  ctx->state[4] = UL64(0x510E527FADE682D1);
   \       0x30   0x....             LDR.N    R2,??DataTable1_8  ;; 0xade682d1
   \       0x32   0x....             LDR.N    R3,??DataTable1_9  ;; 0x510e527f
   \       0x34   0xE9C0 0x230C      STRD     R2,R3,[R0, #+48]
    126                  ctx->state[5] = UL64(0x9B05688C2B3E6C1F);
   \       0x38   0x....             LDR.N    R2,??DataTable1_10  ;; 0x2b3e6c1f
   \       0x3A   0x....             LDR.N    R3,??DataTable1_11  ;; 0x9b05688c
   \       0x3C   0xE9C0 0x230E      STRD     R2,R3,[R0, #+56]
    127                  ctx->state[6] = UL64(0x1F83D9ABFB41BD6B);
   \       0x40   0x....             LDR.N    R2,??DataTable1_12  ;; 0xfb41bd6b
   \       0x42   0x....             LDR.N    R3,??DataTable1_13  ;; 0x1f83d9ab
   \       0x44   0xE9C0 0x2310      STRD     R2,R3,[R0, #+64]
    128                  ctx->state[7] = UL64(0x5BE0CD19137E2179);
   \       0x48   0x....             LDR.N    R2,??DataTable1_14  ;; 0x137e2179
   \       0x4A   0x....             LDR.N    R3,??DataTable1_15  ;; 0x5be0cd19
   \       0x4C   0xE9C0 0x2312      STRD     R2,R3,[R0, #+72]
   \       0x50   0xE02A             B.N      ??mbedtls_sha512_starts_ret_1
    129              }
    130              else
    131              {
    132                  /* SHA-384 */
    133                  ctx->state[0] = UL64(0xCBBB9D5DC1059ED8);
   \                     ??mbedtls_sha512_starts_ret_0: (+1)
   \       0x52   0x....             LDR.N    R2,??DataTable1_16  ;; 0xc1059ed8
   \       0x54   0x....             LDR.N    R3,??DataTable1_17  ;; 0xcbbb9d5d
   \       0x56   0xE9C0 0x2304      STRD     R2,R3,[R0, #+16]
    134                  ctx->state[1] = UL64(0x629A292A367CD507);
   \       0x5A   0x....             LDR.N    R2,??DataTable1_18  ;; 0x367cd507
   \       0x5C   0x....             LDR.N    R3,??DataTable1_19  ;; 0x629a292a
   \       0x5E   0xE9C0 0x2306      STRD     R2,R3,[R0, #+24]
    135                  ctx->state[2] = UL64(0x9159015A3070DD17);
   \       0x62   0x....             LDR.N    R2,??DataTable1_20  ;; 0x3070dd17
   \       0x64   0x....'....        LDR.W    R3,??DataTable2  ;; 0x9159015a
   \       0x68   0xE9C0 0x2308      STRD     R2,R3,[R0, #+32]
    136                  ctx->state[3] = UL64(0x152FECD8F70E5939);
   \       0x6C   0x....'....        LDR.W    R2,??DataTable2_1  ;; 0xf70e5939
   \       0x70   0x....'....        LDR.W    R3,??DataTable2_2  ;; 0x152fecd8
   \       0x74   0xE9C0 0x230A      STRD     R2,R3,[R0, #+40]
    137                  ctx->state[4] = UL64(0x67332667FFC00B31);
   \       0x78   0x....'....        LDR.W    R2,??DataTable2_3  ;; 0xffc00b31
   \       0x7C   0x....'....        LDR.W    R3,??DataTable2_4  ;; 0x67332667
   \       0x80   0xE9C0 0x230C      STRD     R2,R3,[R0, #+48]
    138                  ctx->state[5] = UL64(0x8EB44A8768581511);
   \       0x84   0x....'....        LDR.W    R2,??DataTable2_5  ;; 0x68581511
   \       0x88   0x....'....        LDR.W    R3,??DataTable2_6  ;; 0x8eb44a87
   \       0x8C   0xE9C0 0x230E      STRD     R2,R3,[R0, #+56]
    139                  ctx->state[6] = UL64(0xDB0C2E0D64F98FA7);
   \       0x90   0x....'....        LDR.W    R2,??DataTable2_7  ;; 0x64f98fa7
   \       0x94   0x....'....        LDR.W    R3,??DataTable2_8  ;; 0xdb0c2e0d
   \       0x98   0xE9C0 0x2310      STRD     R2,R3,[R0, #+64]
    140                  ctx->state[7] = UL64(0x47B5481DBEFA4FA4);
   \       0x9C   0x....'....        LDR.W    R2,??DataTable2_9  ;; 0xbefa4fa4
   \       0xA0   0x....'....        LDR.W    R3,??DataTable2_10  ;; 0x47b5481d
   \       0xA4   0xE9C0 0x2312      STRD     R2,R3,[R0, #+72]
    141              }
    142          
    143              ctx->is384 = is384;
   \                     ??mbedtls_sha512_starts_ret_1: (+1)
   \       0xA8   0xF8C0 0x10D0      STR      R1,[R0, #+208]
    144          
    145              return( 0 );
   \       0xAC   0x2000             MOVS     R0,#+0
   \       0xAE   0x4770             BX       LR               ;; return
    146          }
    147          
    148          #if !defined(MBEDTLS_DEPRECATED_REMOVED)

   \                                 In section .text, align 2, keep-with-next
    149          void mbedtls_sha512_starts( mbedtls_sha512_context *ctx,
    150                                      int is384 )
    151          {
    152              mbedtls_sha512_starts_ret( ctx, is384 );
   \                     mbedtls_sha512_starts: (+1)
   \        0x0   0x....             B.N      mbedtls_sha512_starts_ret
    153          }
    154          #endif
    155          
    156          #if !defined(MBEDTLS_SHA512_PROCESS_ALT)
    157          
    158          /*
    159           * Round constants
    160           */

   \                                 In section .rodata, align 8
    161          static const uint64_t K[80] =
   \                     K:
   \        0x0   0x428A'2F98'D      DC64 4794697086780616226, 8158064640168781261, -5349999486874862801
   \              728'AE22 0x71
   \              37'4491'23EF'
   \              65CD 0xB5C0'F
   \              BCF'EC4D'3B2F
   \       0x18   0xE9B5'DBA5'8      DC64 -1606136188198331460, 4131703408338449720, 6480981068601479193
   \              189'DBBC 0x39
   \              56'C25B'F348'
   \              B538 0x59F1'1
   \              1F1'B605'D019
   \       0x30   0x923F'82A4'A      DC64 -7908458776815382629, -6116909921290321640, -2880145864133508542
   \              F19'4F9B 0xAB
   \              1C'5ED5'DA6D'
   \              8118 0xD807'A
   \              A98'A303'0242
   \       0x48   0x1283'5B01'4      DC64 1334009975649890238, 2608012711638119052, 6128411473006802146
   \              570'6FBE 0x24
   \              31'85BE'4EE4'
   \              B28C 0x550C'7
   \              DC3'D5FF'B4E2
   \       0x60   0x72BE'5D74'F      DC64 8268148722764581231, -9160688886553864527, -7215885187991268811
   \              27B'896F 0x80
   \              DE'B1FE'3B16'
   \              96B1 0x9BDC'0
   \              6A7'25C7'1235
   \       0x78   0xC19B'F174'C      DC64 -4495734319001033068, -1973867731355612462, -1171420211273849373
   \              F69'2694 0xE4
   \              9B'69C1'9EF1'
   \              4AD2 0xEFBE'4
   \              786'384F'25E3
   \       0x90   0x0FC1'9DC6'8      DC64 1135362057144423861, 2597628984639134821, 3308224258029322869
   \              B8C'D5B5 0x24
   \              0C'A1CC'77AC'
   \              9C65 0x2DE9'2
   \              C6F'592B'0275
   \       0xA8   0x4A74'84AA'6      DC64 5365058923640841347, 6679025012923562964, 8573033837759648693
   \              EA6'E483 0x5C
   \              B0'A9DC'BD41'
   \              FBD4 0x76F9'8
   \              8DA'8311'53B5
   \       0xC0   0x983E'5152'E      DC64 -7476448914759557205, -6327057829258317296, -5763719355590565569
   \              E66'DFAB 0xA8
   \              31'C66D'2DB4'
   \              3210 0xB003'2
   \              7C8'98FB'213F
   \       0xD8   0xBF59'7FC7'B      DC64 -4658551843659510044, -4116276920077217854, -3051310485924567259
   \              EEF'0EE4 0xC6
   \              E0'0BF3'3DA8'
   \              8FC2 0xD5A7'9
   \              147'930A'A725
   \       0xF0   0x06CA'6351'E      DC64 489312712824947311, 1452737877330783856, 2861767655752347644
   \              003'826F 0x14
   \              29'2967'0A0E'
   \              6E70 0x27B7'0
   \              A85'46D2'2FFC
   \      0x108   0x2E1B'2138'5      DC64 3322285676063803686, 5560940570517711597, 5996557281743188959
   \              C26'C926 0x4D
   \              2C'6DFC'5AC4'
   \              2AED 0x5338'0
   \              D13'9D95'B3DF
   \      0x120   0x650A'7354'8      DC64 7280758554555802590, 8532644243296465576, -9096487096722542874
   \              BAF'63DE 0x76
   \              6A'0ABB'3C77'
   \              B2A8 0x81C2'C
   \              92E'47ED'AEE6
   \      0x138   0x9272'2C85'1      DC64 -7894198246740708037, -6719396339535248540, -6333637450476146687
   \              482'353B 0xA2
   \              BF'E8A1'4CF1'
   \              0364 0xA81A'6
   \              64B'BC42'3001
   \      0x150   0xC24B'8B70'D      DC64 -4446306890439682159, -4076793802049405392, -3345356375505022440
   \              0F8'9791 0xC7
   \              6C'51A3'0654'
   \              BE30 0xD192'E
   \              819'D6EF'5218
   \      0x168   0xD699'0624'5      DC64 -2983346525034927856, -860691631967231958, 1182934255886127544
   \              565'A910 0xF4
   \              0E'3585'5771'
   \              202A 0x106A'A
   \              070'32BB'D1B8
   \      0x180   0x19A4'C116'B      DC64 1847814050463011016, 2177327727835720531, 2830643537854262169
   \              8D2'D0C8 0x1E
   \              37'6C08'5141'
   \              AB53 0x2748'7
   \              74C'DF8E'EB99
   \      0x198   0x34B0'BCB5'E      DC64 3796741975233480872, 4115178125766777443, 5681478168544905931
   \              19B'48A8 0x39
   \              1C'0CB3'C5C9'
   \              5A63 0x4ED8'A
   \              A4A'E341'8ACB
   \      0x1B0   0x5B9C'CA4F'7      DC64 6601373596472566643, 7507060721942968483, 8399075790359081724
   \              763'E373 0x68
   \              2E'6FF3'D6B2'
   \              B8A3 0x748F'8
   \              2EE'5DEF'B2FC
   \      0x1C8   0x78A5'636F'4      DC64 8693463985226723168, -8878714635349349518, -8302665154208450068
   \              317'2F60 0x84
   \              C8'7814'A1F0'
   \              AB72 0x8CC7'0
   \              208'1A64'39EC
   \      0x1E0   0x90BE'FFFA'2      DC64 -8016688836872298968, -6606660893046293015, -4685533653050689259
   \              363'1E28 0xA4
   \              50'6CEB'DE82'
   \              BDE9 0xBEF9'A
   \              3F7'B2C6'7915
   \      0x1F8   0xC671'78F2'E      DC64 -4147400797238176981, -3880063495543823972, -3348786107499101689
   \              372'532B 0xCA
   \              27'3ECE'EA26'
   \              619C 0xD186'B
   \              8C7'21C0'C207
   \      0x210   0xEADA'7DD6'C      DC64 -1523767162380948706, -757361751448694408, 500013540394364858
   \              DE0'EB1E 0xF5
   \              7D'4F7F'EE6E'
   \              D178 0x06F0'6
   \              7AA'7217'6FBA
   \      0x228   0x0A63'7DC5'A      DC64 748580250866718886, 1242879168328830382, 1977374033974150939
   \              2C8'98A6 0x11
   \              3F'9804'BEF9'
   \              0DAE 0x1B71'0
   \              B35'131C'471B
   \      0x240   0x28DB'77F5'2      DC64 2944078676154940804, 3659926193048069267, 4368137639120453308
   \              304'7D84 0x32
   \              CA'AB7B'40C7'
   \              2493 0x3C9E'B
   \              E0A'15C9'BEBC
   \      0x258   0x431D'67C4'9      DC64 4836135668995329356, 5532061633213252278, 6448918945643986474
   \              C10'0D4C 0x4C
   \              C5'D4BE'CB3E'
   \              42B6 0x597F'2
   \              99C'FC65'7E2A
   \      0x270   0x5FCB'6FAB'3      DC64 6902733635092675308, 7801388544844847127
   \              AD6'FAEC 0x6C
   \              44'198C'4A47'
   \              5817         
    162          {
    163              UL64(0x428A2F98D728AE22),  UL64(0x7137449123EF65CD),
    164              UL64(0xB5C0FBCFEC4D3B2F),  UL64(0xE9B5DBA58189DBBC),
    165              UL64(0x3956C25BF348B538),  UL64(0x59F111F1B605D019),
    166              UL64(0x923F82A4AF194F9B),  UL64(0xAB1C5ED5DA6D8118),
    167              UL64(0xD807AA98A3030242),  UL64(0x12835B0145706FBE),
    168              UL64(0x243185BE4EE4B28C),  UL64(0x550C7DC3D5FFB4E2),
    169              UL64(0x72BE5D74F27B896F),  UL64(0x80DEB1FE3B1696B1),
    170              UL64(0x9BDC06A725C71235),  UL64(0xC19BF174CF692694),
    171              UL64(0xE49B69C19EF14AD2),  UL64(0xEFBE4786384F25E3),
    172              UL64(0x0FC19DC68B8CD5B5),  UL64(0x240CA1CC77AC9C65),
    173              UL64(0x2DE92C6F592B0275),  UL64(0x4A7484AA6EA6E483),
    174              UL64(0x5CB0A9DCBD41FBD4),  UL64(0x76F988DA831153B5),
    175              UL64(0x983E5152EE66DFAB),  UL64(0xA831C66D2DB43210),
    176              UL64(0xB00327C898FB213F),  UL64(0xBF597FC7BEEF0EE4),
    177              UL64(0xC6E00BF33DA88FC2),  UL64(0xD5A79147930AA725),
    178              UL64(0x06CA6351E003826F),  UL64(0x142929670A0E6E70),
    179              UL64(0x27B70A8546D22FFC),  UL64(0x2E1B21385C26C926),
    180              UL64(0x4D2C6DFC5AC42AED),  UL64(0x53380D139D95B3DF),
    181              UL64(0x650A73548BAF63DE),  UL64(0x766A0ABB3C77B2A8),
    182              UL64(0x81C2C92E47EDAEE6),  UL64(0x92722C851482353B),
    183              UL64(0xA2BFE8A14CF10364),  UL64(0xA81A664BBC423001),
    184              UL64(0xC24B8B70D0F89791),  UL64(0xC76C51A30654BE30),
    185              UL64(0xD192E819D6EF5218),  UL64(0xD69906245565A910),
    186              UL64(0xF40E35855771202A),  UL64(0x106AA07032BBD1B8),
    187              UL64(0x19A4C116B8D2D0C8),  UL64(0x1E376C085141AB53),
    188              UL64(0x2748774CDF8EEB99),  UL64(0x34B0BCB5E19B48A8),
    189              UL64(0x391C0CB3C5C95A63),  UL64(0x4ED8AA4AE3418ACB),
    190              UL64(0x5B9CCA4F7763E373),  UL64(0x682E6FF3D6B2B8A3),
    191              UL64(0x748F82EE5DEFB2FC),  UL64(0x78A5636F43172F60),
    192              UL64(0x84C87814A1F0AB72),  UL64(0x8CC702081A6439EC),
    193              UL64(0x90BEFFFA23631E28),  UL64(0xA4506CEBDE82BDE9),
    194              UL64(0xBEF9A3F7B2C67915),  UL64(0xC67178F2E372532B),
    195              UL64(0xCA273ECEEA26619C),  UL64(0xD186B8C721C0C207),
    196              UL64(0xEADA7DD6CDE0EB1E),  UL64(0xF57D4F7FEE6ED178),
    197              UL64(0x06F067AA72176FBA),  UL64(0x0A637DC5A2C898A6),
    198              UL64(0x113F9804BEF90DAE),  UL64(0x1B710B35131C471B),
    199              UL64(0x28DB77F523047D84),  UL64(0x32CAAB7B40C72493),
    200              UL64(0x3C9EBE0A15C9BEBC),  UL64(0x431D67C49C100D4C),
    201              UL64(0x4CC5D4BECB3E42B6),  UL64(0x597F299CFC657E2A),
    202              UL64(0x5FCB6FAB3AD6FAEC),  UL64(0x6C44198C4A475817)
    203          };
    204          

   \                                 In section .text, align 2, keep-with-next
    205          int mbedtls_internal_sha512_process( mbedtls_sha512_context *ctx,
    206                                               const unsigned char data[128] )
    207          {
   \                     mbedtls_internal_sha512_process: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \        0x4   0xF5AD 0x7D34      SUB      SP,SP,#+720
   \        0x8   0x4602             MOV      R2,R0
    208              int i;
    209              uint64_t temp1, temp2, W[80];
    210              uint64_t A, B, C, D, E, F, G, H;
    211          
    212          #define  SHR(x,n) (x >> n)
    213          #define ROTR(x,n) (SHR(x,n) | (x << (64 - n)))
    214          
    215          #define S0(x) (ROTR(x, 1) ^ ROTR(x, 8) ^  SHR(x, 7))
    216          #define S1(x) (ROTR(x,19) ^ ROTR(x,61) ^  SHR(x, 6))
    217          
    218          #define S2(x) (ROTR(x,28) ^ ROTR(x,34) ^ ROTR(x,39))
    219          #define S3(x) (ROTR(x,14) ^ ROTR(x,18) ^ ROTR(x,41))
    220          
    221          #define F0(x,y,z) ((x & y) | (z & (x | y)))
    222          #define F1(x,y,z) (z ^ (x & (y ^ z)))
    223          
    224          #define P(a,b,c,d,e,f,g,h,x,K)                  \
    225          {                                               \
    226              temp1 = h + S3(e) + F1(e,f,g) + K + x;      \
    227              temp2 = S2(a) + F0(a,b,c);                  \
    228              d += temp1; h = temp1 + temp2;              \
    229          }
    230          
    231              for( i = 0; i < 16; i++ )
   \        0xA   0x2400             MOVS     R4,#+0
   \        0xC   0x460B             MOV      R3,R1
   \        0xE   0xE02D             B.N      ??mbedtls_internal_sha512_process_0
    232              {
    233                  GET_UINT64_BE( W[i], data, i << 3 );
   \                     ??mbedtls_internal_sha512_process_1: (+1)
   \       0x10   0xF813 0x6034      LDRB     R6,[R3, R4, LSL #+3]
   \       0x14   0x0637             LSLS     R7,R6,#+24
   \       0x16   0x2600             MOVS     R6,#+0
   \       0x18   0xEB03 0x00C4      ADD      R0,R3,R4, LSL #+3
   \       0x1C   0x7840             LDRB     R0,[R0, #+1]
   \       0x1E   0xEA57 0x4700      ORRS     R7,R7,R0, LSL #+16
   \       0x22   0xEB03 0x00C4      ADD      R0,R3,R4, LSL #+3
   \       0x26   0x7880             LDRB     R0,[R0, #+2]
   \       0x28   0xEA57 0x2700      ORRS     R7,R7,R0, LSL #+8
   \       0x2C   0xEB03 0x00C4      ADD      R0,R3,R4, LSL #+3
   \       0x30   0x78C0             LDRB     R0,[R0, #+3]
   \       0x32   0x4601             MOV      R1,R0
   \       0x34   0x430F             ORRS     R7,R7,R1
   \       0x36   0xEB03 0x00C4      ADD      R0,R3,R4, LSL #+3
   \       0x3A   0x7900             LDRB     R0,[R0, #+4]
   \       0x3C   0x4631             MOV      R1,R6
   \       0x3E   0xEA56 0x6600      ORRS     R6,R6,R0, LSL #+24
   \       0x42   0xEB03 0x00C4      ADD      R0,R3,R4, LSL #+3
   \       0x46   0x7940             LDRB     R0,[R0, #+5]
   \       0x48   0xEA56 0x4600      ORRS     R6,R6,R0, LSL #+16
   \       0x4C   0xEB03 0x00C4      ADD      R0,R3,R4, LSL #+3
   \       0x50   0x7980             LDRB     R0,[R0, #+6]
   \       0x52   0xEA56 0x2600      ORRS     R6,R6,R0, LSL #+8
   \       0x56   0xEB03 0x00C4      ADD      R0,R3,R4, LSL #+3
   \       0x5A   0x79C0             LDRB     R0,[R0, #+7]
   \       0x5C   0x4330             ORRS     R0,R6,R0
   \       0x5E   0x4339             ORRS     R1,R7,R1
   \       0x60   0xAD14             ADD      R5,SP,#+80
   \       0x62   0xEB05 0x05C4      ADD      R5,R5,R4, LSL #+3
   \       0x66   0xE9C5 0x0100      STRD     R0,R1,[R5, #+0]
    234              }
   \       0x6A   0x1C64             ADDS     R4,R4,#+1
   \                     ??mbedtls_internal_sha512_process_0: (+1)
   \       0x6C   0x2C10             CMP      R4,#+16
   \       0x6E   0xDBCF             BLT.N    ??mbedtls_internal_sha512_process_1
    235          
    236              for( ; i < 80; i++ )
   \                     ??mbedtls_internal_sha512_process_2: (+1)
   \       0x70   0x2C50             CMP      R4,#+80
   \       0x72   0xDA79             BGE.N    ??mbedtls_internal_sha512_process_3
    237              {
    238                  W[i] = S1(W[i -  2]) + W[i -  7] +
    239                         S0(W[i - 15]) + W[i - 16];
   \       0x74   0xA814             ADD      R0,SP,#+80
   \       0x76   0xEB00 0x00C4      ADD      R0,R0,R4, LSL #+3
   \       0x7A   0xE950 0x0104      LDRD     R0,R1,[R0, #-16]
   \       0x7E   0x0CC0             LSRS     R0,R0,#+19
   \       0x80   0xEA40 0x3041      ORR      R0,R0,R1, LSL #+13
   \       0x84   0xAB14             ADD      R3,SP,#+80
   \       0x86   0xEB03 0x03C4      ADD      R3,R3,R4, LSL #+3
   \       0x8A   0xE953 0x6704      LDRD     R6,R7,[R3, #-16]
   \       0x8E   0x0377             LSLS     R7,R6,#+13
   \       0x90   0xEA57 0x41D1      ORRS     R1,R7,R1, LSR #+19
   \       0x94   0xAB14             ADD      R3,SP,#+80
   \       0x96   0xEB03 0x03C4      ADD      R3,R3,R4, LSL #+3
   \       0x9A   0xE953 0x6704      LDRD     R6,R7,[R3, #-16]
   \       0x9E   0x0F7E             LSRS     R6,R7,#+29
   \       0xA0   0x2700             MOVS     R7,#+0
   \       0xA2   0xAB14             ADD      R3,SP,#+80
   \       0xA4   0xEB03 0x03C4      ADD      R3,R3,R4, LSL #+3
   \       0xA8   0xE953 0x8904      LDRD     R8,R9,[R3, #-16]
   \       0xAC   0xEA4F 0x09C9      LSL      R9,R9,#+3
   \       0xB0   0xEA49 0x7958      ORR      R9,R9,R8, LSR #+29
   \       0xB4   0xEA46 0x06C8      ORR      R6,R6,R8, LSL #+3
   \       0xB8   0xEA47 0x0709      ORR      R7,R7,R9
   \       0xBC   0x4070             EORS     R0,R0,R6
   \       0xBE   0x4079             EORS     R1,R1,R7
   \       0xC0   0xAB14             ADD      R3,SP,#+80
   \       0xC2   0xEB03 0x03C4      ADD      R3,R3,R4, LSL #+3
   \       0xC6   0xE953 0x6704      LDRD     R6,R7,[R3, #-16]
   \       0xCA   0x09B6             LSRS     R6,R6,#+6
   \       0xCC   0xEA46 0x6687      ORR      R6,R6,R7, LSL #+26
   \       0xD0   0x4070             EORS     R0,R0,R6
   \       0xD2   0xEA91 0x1197      EORS     R1,R1,R7, LSR #+6
   \       0xD6   0xAB14             ADD      R3,SP,#+80
   \       0xD8   0xEB03 0x03C4      ADD      R3,R3,R4, LSL #+3
   \       0xDC   0xE953 0x670E      LDRD     R6,R7,[R3, #-56]
   \       0xE0   0x1980             ADDS     R0,R0,R6
   \       0xE2   0x4179             ADCS     R1,R1,R7
   \       0xE4   0xAB14             ADD      R3,SP,#+80
   \       0xE6   0xEB03 0x03C4      ADD      R3,R3,R4, LSL #+3
   \       0xEA   0xE953 0x671E      LDRD     R6,R7,[R3, #-120]
   \       0xEE   0x087F             LSRS     R7,R7,#+1
   \       0xF0   0xEA4F 0x0636      RRX      R6,R6
   \       0xF4   0xAB14             ADD      R3,SP,#+80
   \       0xF6   0xEB03 0x03C4      ADD      R3,R3,R4, LSL #+3
   \       0xFA   0xE953 0x891E      LDRD     R8,R9,[R3, #-120]
   \       0xFE   0xEA47 0x77C8      ORR      R7,R7,R8, LSL #+31
   \      0x102   0xAB14             ADD      R3,SP,#+80
   \      0x104   0xEB03 0x03C4      ADD      R3,R3,R4, LSL #+3
   \      0x108   0xE953 0x891E      LDRD     R8,R9,[R3, #-120]
   \      0x10C   0xEA4F 0x2818      LSR      R8,R8,#+8
   \      0x110   0xEA48 0x6809      ORR      R8,R8,R9, LSL #+24
   \      0x114   0xAB14             ADD      R3,SP,#+80
   \      0x116   0xEB03 0x03C4      ADD      R3,R3,R4, LSL #+3
   \      0x11A   0xE953 0xAB1E      LDRD     R10,R11,[R3, #-120]
   \      0x11E   0xEA4F 0x6B0A      LSL      R11,R10,#+24
   \      0x122   0xEA4B 0x2919      ORR      R9,R11,R9, LSR #+8
   \      0x126   0xEA86 0x0608      EOR      R6,R6,R8
   \      0x12A   0xEA87 0x0709      EOR      R7,R7,R9
   \      0x12E   0xAB14             ADD      R3,SP,#+80
   \      0x130   0xEB03 0x03C4      ADD      R3,R3,R4, LSL #+3
   \      0x134   0xE953 0x891E      LDRD     R8,R9,[R3, #-120]
   \      0x138   0xEA4F 0x18D8      LSR      R8,R8,#+7
   \      0x13C   0xEA48 0x6849      ORR      R8,R8,R9, LSL #+25
   \      0x140   0xEA86 0x0608      EOR      R6,R6,R8
   \      0x144   0xEA87 0x17D9      EOR      R7,R7,R9, LSR #+7
   \      0x148   0x1980             ADDS     R0,R0,R6
   \      0x14A   0x4179             ADCS     R1,R1,R7
   \      0x14C   0xAB14             ADD      R3,SP,#+80
   \      0x14E   0xEB03 0x03C4      ADD      R3,R3,R4, LSL #+3
   \      0x152   0xE953 0x6720      LDRD     R6,R7,[R3, #-128]
   \      0x156   0x1980             ADDS     R0,R0,R6
   \      0x158   0x4179             ADCS     R1,R1,R7
   \      0x15A   0xAB14             ADD      R3,SP,#+80
   \      0x15C   0xEB03 0x03C4      ADD      R3,R3,R4, LSL #+3
   \      0x160   0xE9C3 0x0100      STRD     R0,R1,[R3, #+0]
    240              }
   \      0x164   0x1C64             ADDS     R4,R4,#+1
   \      0x166   0xE783             B.N      ??mbedtls_internal_sha512_process_2
   \                     ??mbedtls_internal_sha512_process_3: (+1)
   \      0x168   0x9206             STR      R2,[SP, #+24]
    241          
    242              A = ctx->state[0];
   \      0x16A   0x4610             MOV      R0,R2
   \      0x16C   0xE9D0 0x0104      LDRD     R0,R1,[R0, #+16]
    243              B = ctx->state[1];
   \      0x170   0xE9D2 0x6706      LDRD     R6,R7,[R2, #+24]
    244              C = ctx->state[2];
   \      0x174   0xE9D2 0x2308      LDRD     R2,R3,[R2, #+32]
    245              D = ctx->state[3];
   \      0x178   0x9C06             LDR      R4,[SP, #+24]
   \      0x17A   0xE9D4 0x450A      LDRD     R4,R5,[R4, #+40]
    246              E = ctx->state[4];
   \      0x17E   0xF8DD 0xC018      LDR      R12,[SP, #+24]
   \      0x182   0xE9DC 0x890C      LDRD     R8,R9,[R12, #+48]
   \      0x186   0xE9CD 0x8900      STRD     R8,R9,[SP, #+0]
    247              F = ctx->state[5];
   \      0x18A   0xF8DD 0xC018      LDR      R12,[SP, #+24]
   \      0x18E   0xE9DC 0x890E      LDRD     R8,R9,[R12, #+56]
    248              G = ctx->state[6];
   \      0x192   0xE9DC 0xAB10      LDRD     R10,R11,[R12, #+64]
   \      0x196   0xE9CD 0xAB0C      STRD     R10,R11,[SP, #+48]
    249              H = ctx->state[7];
   \      0x19A   0xF8DD 0xC018      LDR      R12,[SP, #+24]
   \      0x19E   0xE9DC 0xAB12      LDRD     R10,R11,[R12, #+72]
   \      0x1A2   0xE9CD 0xAB0A      STRD     R10,R11,[SP, #+40]
    250              i = 0;
   \      0x1A6   0xF04F 0x0C00      MOV      R12,#+0
   \      0x1AA   0xE9CD 0x6708      STRD     R6,R7,[SP, #+32]
   \      0x1AE   0xE9DD 0x6700      LDRD     R6,R7,[SP, #+0]
   \      0x1B2   0xE9CD 0x8904      STRD     R8,R9,[SP, #+16]
    251          
    252              do
    253              {
    254                  P( A, B, C, D, E, F, G, H, W[i], K[i] ); i++;
   \                     ??mbedtls_internal_sha512_process_4: (+1)
   \      0x1B6   0xE9DD 0x890A      LDRD     R8,R9,[SP, #+40]
   \      0x1BA   0xE9CD 0x8902      STRD     R8,R9,[SP, #+8]
   \      0x1BE   0x46B2             MOV      R10,R6
   \      0x1C0   0x46BB             MOV      R11,R7
   \      0x1C2   0xEA4F 0x3A9A      LSR      R10,R10,#+14
   \      0x1C6   0xEA4A 0x4A8B      ORR      R10,R10,R11, LSL #+18
   \      0x1CA   0x46B0             MOV      R8,R6
   \      0x1CC   0xEA4F 0x4988      LSL      R9,R8,#+18
   \      0x1D0   0xF04F 0x0800      MOV      R8,#+0
   \      0x1D4   0xEA4A 0x0808      ORR      R8,R10,R8
   \      0x1D8   0xEA49 0x399B      ORR      R9,R9,R11, LSR #+14
   \      0x1DC   0xE9CD 0x8900      STRD     R8,R9,[SP, #+0]
   \      0x1E0   0x46B2             MOV      R10,R6
   \      0x1E2   0x46BB             MOV      R11,R7
   \      0x1E4   0xEA4F 0x4A9A      LSR      R10,R10,#+18
   \      0x1E8   0xEA4A 0x3A8B      ORR      R10,R10,R11, LSL #+14
   \      0x1EC   0x46B0             MOV      R8,R6
   \      0x1EE   0xEA4F 0x3988      LSL      R9,R8,#+14
   \      0x1F2   0xF04F 0x0800      MOV      R8,#+0
   \      0x1F6   0xEA4A 0x0808      ORR      R8,R10,R8
   \      0x1FA   0xEA49 0x499B      ORR      R9,R9,R11, LSR #+18
   \      0x1FE   0xE9DD 0xAB00      LDRD     R10,R11,[SP, #+0]
   \      0x202   0xEA8A 0x0808      EOR      R8,R10,R8
   \      0x206   0xEA8B 0x0909      EOR      R9,R11,R9
   \      0x20A   0xE9CD 0x8900      STRD     R8,R9,[SP, #+0]
   \      0x20E   0x46BB             MOV      R11,R7
   \      0x210   0x46B0             MOV      R8,R6
   \      0x212   0x46B9             MOV      R9,R7
   \      0x214   0xEA4F 0x59C9      LSL      R9,R9,#+23
   \      0x218   0xEA49 0x2958      ORR      R9,R9,R8, LSR #+9
   \      0x21C   0xEA4F 0x58C8      LSL      R8,R8,#+23
   \      0x220   0xEA48 0x285B      ORR      R8,R8,R11, LSR #+9
   \      0x224   0xE9DD 0xAB00      LDRD     R10,R11,[SP, #+0]
   \      0x228   0xEA8A 0x0808      EOR      R8,R10,R8
   \      0x22C   0xEA8B 0x0909      EOR      R9,R11,R9
   \      0x230   0xE9DD 0xAB02      LDRD     R10,R11,[SP, #+8]
   \      0x234   0xEB1A 0x0808      ADDS     R8,R10,R8
   \      0x238   0xEB4B 0x0909      ADC      R9,R11,R9
   \      0x23C   0xE9CD 0x8902      STRD     R8,R9,[SP, #+8]
   \      0x240   0xE9DD 0x890C      LDRD     R8,R9,[SP, #+48]
   \      0x244   0xE9CD 0x8900      STRD     R8,R9,[SP, #+0]
   \      0x248   0xE9DD 0xAB04      LDRD     R10,R11,[SP, #+16]
   \      0x24C   0xE9DD 0x890C      LDRD     R8,R9,[SP, #+48]
   \      0x250   0xEA8A 0x0808      EOR      R8,R10,R8
   \      0x254   0xEA8B 0x0909      EOR      R9,R11,R9
   \      0x258   0xEA06 0x0808      AND      R8,R6,R8
   \      0x25C   0xEA07 0x0909      AND      R9,R7,R9
   \      0x260   0xE9DD 0xAB00      LDRD     R10,R11,[SP, #+0]
   \      0x264   0xEA8A 0x0808      EOR      R8,R10,R8
   \      0x268   0xEA8B 0x0909      EOR      R9,R11,R9
   \      0x26C   0xE9DD 0xAB02      LDRD     R10,R11,[SP, #+8]
   \      0x270   0xEB1A 0x0A08      ADDS     R10,R10,R8
   \      0x274   0xEB4B 0x0B09      ADC      R11,R11,R9
   \      0x278   0x....'....        LDR.W    LR,??DataTable2_11
   \      0x27C   0xEB0E 0x0ECC      ADD      LR,LR,R12, LSL #+3
   \      0x280   0xE9DE 0x8900      LDRD     R8,R9,[LR, #+0]
   \      0x284   0xEB1A 0x0A08      ADDS     R10,R10,R8
   \      0x288   0xEB4B 0x0B09      ADC      R11,R11,R9
   \      0x28C   0xF10D 0x0E50      ADD      LR,SP,#+80
   \      0x290   0xEB0E 0x0ECC      ADD      LR,LR,R12, LSL #+3
   \      0x294   0xE9DE 0x8900      LDRD     R8,R9,[LR, #+0]
   \      0x298   0xEB1A 0x0808      ADDS     R8,R10,R8
   \      0x29C   0xEB4B 0x0909      ADC      R9,R11,R9
   \      0x2A0   0xEB14 0x0408      ADDS     R4,R4,R8
   \      0x2A4   0xEB45 0x0509      ADC      R5,R5,R9
   \      0x2A8   0xE9CD 0x450E      STRD     R4,R5,[SP, #+56]
   \      0x2AC   0xE9CD 0x8900      STRD     R8,R9,[SP, #+0]
   \      0x2B0   0x4680             MOV      R8,R0
   \      0x2B2   0x4689             MOV      R9,R1
   \      0x2B4   0xEA4F 0x7818      LSR      R8,R8,#+28
   \      0x2B8   0xEA48 0x1809      ORR      R8,R8,R9, LSL #+4
   \      0x2BC   0x4604             MOV      R4,R0
   \      0x2BE   0x0125             LSLS     R5,R4,#+4
   \      0x2C0   0x2400             MOVS     R4,#+0
   \      0x2C2   0xEA48 0x0A04      ORR      R10,R8,R4
   \      0x2C6   0xEA45 0x7B19      ORR      R11,R5,R9, LSR #+28
   \      0x2CA   0x4689             MOV      R9,R1
   \      0x2CC   0x4604             MOV      R4,R0
   \      0x2CE   0x460D             MOV      R5,R1
   \      0x2D0   0x07AD             LSLS     R5,R5,#+30
   \      0x2D2   0xEA45 0x0594      ORR      R5,R5,R4, LSR #+2
   \      0x2D6   0x07A4             LSLS     R4,R4,#+30
   \      0x2D8   0xEA44 0x0499      ORR      R4,R4,R9, LSR #+2
   \      0x2DC   0xEA8A 0x0A04      EOR      R10,R10,R4
   \      0x2E0   0xEA8B 0x0B05      EOR      R11,R11,R5
   \      0x2E4   0x4604             MOV      R4,R0
   \      0x2E6   0x460D             MOV      R5,R1
   \      0x2E8   0x066D             LSLS     R5,R5,#+25
   \      0x2EA   0xEA45 0x15D4      ORR      R5,R5,R4, LSR #+7
   \      0x2EE   0x0664             LSLS     R4,R4,#+25
   \      0x2F0   0xEA44 0x14D9      ORR      R4,R4,R9, LSR #+7
   \      0x2F4   0xEA8A 0x0404      EOR      R4,R10,R4
   \      0x2F8   0xEA8B 0x0505      EOR      R5,R11,R5
   \      0x2FC   0xE9DD 0x8900      LDRD     R8,R9,[SP, #+0]
   \      0x300   0xEB18 0x0A04      ADDS     R10,R8,R4
   \      0x304   0xEB49 0x0B05      ADC      R11,R9,R5
   \      0x308   0xE9DD 0x4508      LDRD     R4,R5,[SP, #+32]
   \      0x30C   0xEA00 0x0804      AND      R8,R0,R4
   \      0x310   0xEA01 0x0905      AND      R9,R1,R5
   \      0x314   0x4304             ORRS     R4,R0,R4
   \      0x316   0x430D             ORRS     R5,R1,R5
   \      0x318   0x4014             ANDS     R4,R2,R4
   \      0x31A   0x401D             ANDS     R5,R3,R5
   \      0x31C   0xEA48 0x0404      ORR      R4,R8,R4
   \      0x320   0xEA49 0x0505      ORR      R5,R9,R5
   \      0x324   0xEB1A 0x0404      ADDS     R4,R10,R4
   \      0x328   0xEB4B 0x0505      ADC      R5,R11,R5
   \      0x32C   0xF10C 0x0C01      ADD      R12,R12,#+1
    255                  P( H, A, B, C, D, E, F, G, W[i], K[i] ); i++;
   \      0x330   0xE9DD 0x890C      LDRD     R8,R9,[SP, #+48]
   \      0x334   0xE9CD 0x8902      STRD     R8,R9,[SP, #+8]
   \      0x338   0xE9DD 0xAB0E      LDRD     R10,R11,[SP, #+56]
   \      0x33C   0xEA4F 0x3A9A      LSR      R10,R10,#+14
   \      0x340   0xEA4A 0x4A8B      ORR      R10,R10,R11, LSL #+18
   \      0x344   0xE9DD 0x890E      LDRD     R8,R9,[SP, #+56]
   \      0x348   0xEA4F 0x4988      LSL      R9,R8,#+18
   \      0x34C   0xF04F 0x0800      MOV      R8,#+0
   \      0x350   0xEA4A 0x0808      ORR      R8,R10,R8
   \      0x354   0xEA49 0x399B      ORR      R9,R9,R11, LSR #+14
   \      0x358   0xE9CD 0x8900      STRD     R8,R9,[SP, #+0]
   \      0x35C   0xE9DD 0xAB0E      LDRD     R10,R11,[SP, #+56]
   \      0x360   0xEA4F 0x4A9A      LSR      R10,R10,#+18
   \      0x364   0xEA4A 0x3A8B      ORR      R10,R10,R11, LSL #+14
   \      0x368   0xE9DD 0x890E      LDRD     R8,R9,[SP, #+56]
   \      0x36C   0xEA4F 0x3988      LSL      R9,R8,#+14
   \      0x370   0xF04F 0x0800      MOV      R8,#+0
   \      0x374   0xEA4A 0x0808      ORR      R8,R10,R8
   \      0x378   0xEA49 0x499B      ORR      R9,R9,R11, LSR #+18
   \      0x37C   0xE9DD 0xAB00      LDRD     R10,R11,[SP, #+0]
   \      0x380   0xEA8A 0x0808      EOR      R8,R10,R8
   \      0x384   0xEA8B 0x0909      EOR      R9,R11,R9
   \      0x388   0xE9CD 0x8900      STRD     R8,R9,[SP, #+0]
   \      0x38C   0xE9DD 0xAB0E      LDRD     R10,R11,[SP, #+56]
   \      0x390   0xE9DD 0x890E      LDRD     R8,R9,[SP, #+56]
   \      0x394   0xEA4F 0x59C9      LSL      R9,R9,#+23
   \      0x398   0xEA49 0x2958      ORR      R9,R9,R8, LSR #+9
   \      0x39C   0xEA4F 0x58C8      LSL      R8,R8,#+23
   \      0x3A0   0xEA48 0x285B      ORR      R8,R8,R11, LSR #+9
   \      0x3A4   0xE9DD 0xAB00      LDRD     R10,R11,[SP, #+0]
   \      0x3A8   0xEA8A 0x0808      EOR      R8,R10,R8
   \      0x3AC   0xEA8B 0x0909      EOR      R9,R11,R9
   \      0x3B0   0xE9DD 0xAB02      LDRD     R10,R11,[SP, #+8]
   \      0x3B4   0xEB1A 0x0808      ADDS     R8,R10,R8
   \      0x3B8   0xEB4B 0x0909      ADC      R9,R11,R9
   \      0x3BC   0xE9CD 0x8902      STRD     R8,R9,[SP, #+8]
   \      0x3C0   0xE9DD 0x8904      LDRD     R8,R9,[SP, #+16]
   \      0x3C4   0xE9CD 0x8900      STRD     R8,R9,[SP, #+0]
   \      0x3C8   0xE9DD 0xAB0E      LDRD     R10,R11,[SP, #+56]
   \      0x3CC   0xE9DD 0x8904      LDRD     R8,R9,[SP, #+16]
   \      0x3D0   0xEA86 0x0808      EOR      R8,R6,R8
   \      0x3D4   0xEA87 0x0909      EOR      R9,R7,R9
   \      0x3D8   0xEA0A 0x0808      AND      R8,R10,R8
   \      0x3DC   0xEA0B 0x0909      AND      R9,R11,R9
   \      0x3E0   0xE9DD 0xAB00      LDRD     R10,R11,[SP, #+0]
   \      0x3E4   0xEA8A 0x0808      EOR      R8,R10,R8
   \      0x3E8   0xEA8B 0x0909      EOR      R9,R11,R9
   \      0x3EC   0xE9DD 0xAB02      LDRD     R10,R11,[SP, #+8]
   \      0x3F0   0xEB1A 0x0A08      ADDS     R10,R10,R8
   \      0x3F4   0xEB4B 0x0B09      ADC      R11,R11,R9
   \      0x3F8   0x....'....        LDR.W    LR,??DataTable2_11
   \      0x3FC   0xEB0E 0x0ECC      ADD      LR,LR,R12, LSL #+3
   \      0x400   0xE9DE 0x8900      LDRD     R8,R9,[LR, #+0]
   \      0x404   0xEB1A 0x0A08      ADDS     R10,R10,R8
   \      0x408   0xEB4B 0x0B09      ADC      R11,R11,R9
   \      0x40C   0xF10D 0x0E50      ADD      LR,SP,#+80
   \      0x410   0xEB0E 0x0ECC      ADD      LR,LR,R12, LSL #+3
   \      0x414   0xE9DE 0x8900      LDRD     R8,R9,[LR, #+0]
   \      0x418   0xEB1A 0x0808      ADDS     R8,R10,R8
   \      0x41C   0xEB4B 0x0909      ADC      R9,R11,R9
   \      0x420   0xEB12 0x0208      ADDS     R2,R2,R8
   \      0x424   0xEB43 0x0309      ADC      R3,R3,R9
   \      0x428   0xE9CD 0x2310      STRD     R2,R3,[SP, #+64]
   \      0x42C   0xE9CD 0x8900      STRD     R8,R9,[SP, #+0]
   \      0x430   0x46A0             MOV      R8,R4
   \      0x432   0x46A9             MOV      R9,R5
   \      0x434   0xEA4F 0x7818      LSR      R8,R8,#+28
   \      0x438   0xEA48 0x1809      ORR      R8,R8,R9, LSL #+4
   \      0x43C   0x4622             MOV      R2,R4
   \      0x43E   0x0113             LSLS     R3,R2,#+4
   \      0x440   0x2200             MOVS     R2,#+0
   \      0x442   0xEA48 0x0202      ORR      R2,R8,R2
   \      0x446   0xEA43 0x7319      ORR      R3,R3,R9, LSR #+28
   \      0x44A   0x46AB             MOV      R11,R5
   \      0x44C   0x46A0             MOV      R8,R4
   \      0x44E   0x46A9             MOV      R9,R5
   \      0x450   0xEA4F 0x7989      LSL      R9,R9,#+30
   \      0x454   0xEA49 0x0998      ORR      R9,R9,R8, LSR #+2
   \      0x458   0xEA4F 0x7888      LSL      R8,R8,#+30
   \      0x45C   0xEA48 0x089B      ORR      R8,R8,R11, LSR #+2
   \      0x460   0xEA82 0x0208      EOR      R2,R2,R8
   \      0x464   0xEA83 0x0309      EOR      R3,R3,R9
   \      0x468   0x46A0             MOV      R8,R4
   \      0x46A   0x46A9             MOV      R9,R5
   \      0x46C   0xEA4F 0x6949      LSL      R9,R9,#+25
   \      0x470   0xEA49 0x19D8      ORR      R9,R9,R8, LSR #+7
   \      0x474   0xEA4F 0x6848      LSL      R8,R8,#+25
   \      0x478   0xEA48 0x18DB      ORR      R8,R8,R11, LSR #+7
   \      0x47C   0xEA82 0x0208      EOR      R2,R2,R8
   \      0x480   0xEA83 0x0309      EOR      R3,R3,R9
   \      0x484   0xE9DD 0x8900      LDRD     R8,R9,[SP, #+0]
   \      0x488   0xEB18 0x0202      ADDS     R2,R8,R2
   \      0x48C   0xEB49 0x0303      ADC      R3,R9,R3
   \      0x490   0xE9CD 0x2300      STRD     R2,R3,[SP, #+0]
   \      0x494   0xEA04 0x0200      AND      R2,R4,R0
   \      0x498   0xEA05 0x0301      AND      R3,R5,R1
   \      0x49C   0xE9DD 0xAB08      LDRD     R10,R11,[SP, #+32]
   \      0x4A0   0xEA44 0x0800      ORR      R8,R4,R0
   \      0x4A4   0xEA45 0x0901      ORR      R9,R5,R1
   \      0x4A8   0xEA0A 0x0808      AND      R8,R10,R8
   \      0x4AC   0xEA0B 0x0909      AND      R9,R11,R9
   \      0x4B0   0xEA42 0x0208      ORR      R2,R2,R8
   \      0x4B4   0xEA43 0x0309      ORR      R3,R3,R9
   \      0x4B8   0xE9DD 0x8900      LDRD     R8,R9,[SP, #+0]
   \      0x4BC   0xEB18 0x0202      ADDS     R2,R8,R2
   \      0x4C0   0xEB49 0x0303      ADC      R3,R9,R3
   \      0x4C4   0xF10C 0x0C01      ADD      R12,R12,#+1
    256                  P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
   \      0x4C8   0xE9DD 0x8904      LDRD     R8,R9,[SP, #+16]
   \      0x4CC   0xE9CD 0x8902      STRD     R8,R9,[SP, #+8]
   \      0x4D0   0xE9DD 0xAB10      LDRD     R10,R11,[SP, #+64]
   \      0x4D4   0xEA4F 0x3A9A      LSR      R10,R10,#+14
   \      0x4D8   0xEA4A 0x4A8B      ORR      R10,R10,R11, LSL #+18
   \      0x4DC   0xE9DD 0x8910      LDRD     R8,R9,[SP, #+64]
   \      0x4E0   0xEA4F 0x4988      LSL      R9,R8,#+18
   \      0x4E4   0xF04F 0x0800      MOV      R8,#+0
   \      0x4E8   0xEA4A 0x0808      ORR      R8,R10,R8
   \      0x4EC   0xEA49 0x399B      ORR      R9,R9,R11, LSR #+14
   \      0x4F0   0xE9CD 0x8900      STRD     R8,R9,[SP, #+0]
   \      0x4F4   0xE9DD 0xAB10      LDRD     R10,R11,[SP, #+64]
   \      0x4F8   0xEA4F 0x4A9A      LSR      R10,R10,#+18
   \      0x4FC   0xEA4A 0x3A8B      ORR      R10,R10,R11, LSL #+14
   \      0x500   0xE9DD 0x8910      LDRD     R8,R9,[SP, #+64]
   \      0x504   0xEA4F 0x3988      LSL      R9,R8,#+14
   \      0x508   0xF04F 0x0800      MOV      R8,#+0
   \      0x50C   0xEA4A 0x0808      ORR      R8,R10,R8
   \      0x510   0xEA49 0x499B      ORR      R9,R9,R11, LSR #+18
   \      0x514   0xE9DD 0xAB00      LDRD     R10,R11,[SP, #+0]
   \      0x518   0xEA8A 0x0808      EOR      R8,R10,R8
   \      0x51C   0xEA8B 0x0909      EOR      R9,R11,R9
   \      0x520   0xE9CD 0x8900      STRD     R8,R9,[SP, #+0]
   \      0x524   0xE9DD 0xAB10      LDRD     R10,R11,[SP, #+64]
   \      0x528   0xE9DD 0x8910      LDRD     R8,R9,[SP, #+64]
   \      0x52C   0xEA4F 0x59C9      LSL      R9,R9,#+23
   \      0x530   0xEA49 0x2958      ORR      R9,R9,R8, LSR #+9
   \      0x534   0xEA4F 0x58C8      LSL      R8,R8,#+23
   \      0x538   0xEA48 0x285B      ORR      R8,R8,R11, LSR #+9
   \      0x53C   0xE9DD 0xAB00      LDRD     R10,R11,[SP, #+0]
   \      0x540   0xEA8A 0x0808      EOR      R8,R10,R8
   \      0x544   0xEA8B 0x0909      EOR      R9,R11,R9
   \      0x548   0xE9DD 0xAB02      LDRD     R10,R11,[SP, #+8]
   \      0x54C   0xEB1A 0x0808      ADDS     R8,R10,R8
   \      0x550   0xEB4B 0x0909      ADC      R9,R11,R9
   \      0x554   0xE9CD 0x8900      STRD     R8,R9,[SP, #+0]
   \      0x558   0xE9DD 0xAB10      LDRD     R10,R11,[SP, #+64]
   \      0x55C   0xE9DD 0x890E      LDRD     R8,R9,[SP, #+56]
   \      0x560   0xEA88 0x0806      EOR      R8,R8,R6
   \      0x564   0xEA89 0x0907      EOR      R9,R9,R7
   \      0x568   0xEA0A 0x0808      AND      R8,R10,R8
   \      0x56C   0xEA0B 0x0909      AND      R9,R11,R9
   \      0x570   0xEA86 0x0808      EOR      R8,R6,R8
   \      0x574   0xEA87 0x0909      EOR      R9,R7,R9
   \      0x578   0xE9DD 0xAB00      LDRD     R10,R11,[SP, #+0]
   \      0x57C   0xEB1A 0x0A08      ADDS     R10,R10,R8
   \      0x580   0xEB4B 0x0B09      ADC      R11,R11,R9
   \      0x584   0x....'....        LDR.W    LR,??DataTable2_11
   \      0x588   0xEB0E 0x0ECC      ADD      LR,LR,R12, LSL #+3
   \      0x58C   0xE9DE 0x8900      LDRD     R8,R9,[LR, #+0]
   \      0x590   0xEB1A 0x0A08      ADDS     R10,R10,R8
   \      0x594   0xEB4B 0x0B09      ADC      R11,R11,R9
   \      0x598   0xF10D 0x0E50      ADD      LR,SP,#+80
   \      0x59C   0xEB0E 0x0ECC      ADD      LR,LR,R12, LSL #+3
   \      0x5A0   0xE9DE 0x8900      LDRD     R8,R9,[LR, #+0]
   \      0x5A4   0xEB1A 0x0808      ADDS     R8,R10,R8
   \      0x5A8   0xEB4B 0x0909      ADC      R9,R11,R9
   \      0x5AC   0xE9DD 0xAB08      LDRD     R10,R11,[SP, #+32]
   \      0x5B0   0xEB1A 0x0A08      ADDS     R10,R10,R8
   \      0x5B4   0xEB4B 0x0B09      ADC      R11,R11,R9
   \      0x5B8   0xE9CD 0xAB08      STRD     R10,R11,[SP, #+32]
   \      0x5BC   0xE9CD 0x8902      STRD     R8,R9,[SP, #+8]
   \      0x5C0   0x4692             MOV      R10,R2
   \      0x5C2   0x469B             MOV      R11,R3
   \      0x5C4   0xEA4F 0x7A1A      LSR      R10,R10,#+28
   \      0x5C8   0xEA4A 0x1A0B      ORR      R10,R10,R11, LSL #+4
   \      0x5CC   0x4690             MOV      R8,R2
   \      0x5CE   0xEA4F 0x1908      LSL      R9,R8,#+4
   \      0x5D2   0xF04F 0x0800      MOV      R8,#+0
   \      0x5D6   0xEA4A 0x0808      ORR      R8,R10,R8
   \      0x5DA   0xEA49 0x791B      ORR      R9,R9,R11, LSR #+28
   \      0x5DE   0xE9CD 0x8900      STRD     R8,R9,[SP, #+0]
   \      0x5E2   0x469B             MOV      R11,R3
   \      0x5E4   0x4690             MOV      R8,R2
   \      0x5E6   0x4699             MOV      R9,R3
   \      0x5E8   0xEA4F 0x7989      LSL      R9,R9,#+30
   \      0x5EC   0xEA49 0x0998      ORR      R9,R9,R8, LSR #+2
   \      0x5F0   0xEA4F 0x7888      LSL      R8,R8,#+30
   \      0x5F4   0xEA48 0x089B      ORR      R8,R8,R11, LSR #+2
   \      0x5F8   0xE9DD 0xAB00      LDRD     R10,R11,[SP, #+0]
   \      0x5FC   0xEA8A 0x0808      EOR      R8,R10,R8
   \      0x600   0xEA8B 0x0909      EOR      R9,R11,R9
   \      0x604   0xE9CD 0x8900      STRD     R8,R9,[SP, #+0]
   \      0x608   0x469B             MOV      R11,R3
   \      0x60A   0x4690             MOV      R8,R2
   \      0x60C   0x4699             MOV      R9,R3
   \      0x60E   0xEA4F 0x6949      LSL      R9,R9,#+25
   \      0x612   0xEA49 0x19D8      ORR      R9,R9,R8, LSR #+7
   \      0x616   0xEA4F 0x6848      LSL      R8,R8,#+25
   \      0x61A   0xEA48 0x18DB      ORR      R8,R8,R11, LSR #+7
   \      0x61E   0xE9DD 0xAB00      LDRD     R10,R11,[SP, #+0]
   \      0x622   0xEA8A 0x0808      EOR      R8,R10,R8
   \      0x626   0xEA8B 0x0909      EOR      R9,R11,R9
   \      0x62A   0xE9DD 0xAB02      LDRD     R10,R11,[SP, #+8]
   \      0x62E   0xEB1A 0x0808      ADDS     R8,R10,R8
   \      0x632   0xEB4B 0x0909      ADC      R9,R11,R9
   \      0x636   0xE9CD 0x8900      STRD     R8,R9,[SP, #+0]
   \      0x63A   0xEA02 0x0A04      AND      R10,R2,R4
   \      0x63E   0xEA03 0x0B05      AND      R11,R3,R5
   \      0x642   0xEA42 0x0804      ORR      R8,R2,R4
   \      0x646   0xEA43 0x0905      ORR      R9,R3,R5
   \      0x64A   0xEA00 0x0808      AND      R8,R0,R8
   \      0x64E   0xEA01 0x0909      AND      R9,R1,R9
   \      0x652   0xEA4A 0x0808      ORR      R8,R10,R8
   \      0x656   0xEA4B 0x0909      ORR      R9,R11,R9
   \      0x65A   0xE9DD 0xAB00      LDRD     R10,R11,[SP, #+0]
   \      0x65E   0xEB1A 0x0808      ADDS     R8,R10,R8
   \      0x662   0xEB4B 0x0909      ADC      R9,R11,R9
   \      0x666   0xF10C 0x0C01      ADD      R12,R12,#+1
    257                  P( F, G, H, A, B, C, D, E, W[i], K[i] ); i++;
   \      0x66A   0xE9CD 0x6702      STRD     R6,R7,[SP, #+8]
   \      0x66E   0xE9DD 0xAB08      LDRD     R10,R11,[SP, #+32]
   \      0x672   0xEA4F 0x3A9A      LSR      R10,R10,#+14
   \      0x676   0xEA4A 0x4A8B      ORR      R10,R10,R11, LSL #+18
   \      0x67A   0xE9DD 0x6708      LDRD     R6,R7,[SP, #+32]
   \      0x67E   0x04B7             LSLS     R7,R6,#+18
   \      0x680   0x2600             MOVS     R6,#+0
   \      0x682   0xEA4A 0x0606      ORR      R6,R10,R6
   \      0x686   0xEA47 0x379B      ORR      R7,R7,R11, LSR #+14
   \      0x68A   0xE9CD 0x6700      STRD     R6,R7,[SP, #+0]
   \      0x68E   0xE9DD 0xAB08      LDRD     R10,R11,[SP, #+32]
   \      0x692   0xEA4F 0x4A9A      LSR      R10,R10,#+18
   \      0x696   0xEA4A 0x3A8B      ORR      R10,R10,R11, LSL #+14
   \      0x69A   0xE9DD 0x6708      LDRD     R6,R7,[SP, #+32]
   \      0x69E   0x03B7             LSLS     R7,R6,#+14
   \      0x6A0   0x2600             MOVS     R6,#+0
   \      0x6A2   0xEA4A 0x0606      ORR      R6,R10,R6
   \      0x6A6   0xEA47 0x479B      ORR      R7,R7,R11, LSR #+18
   \      0x6AA   0xE9DD 0xAB00      LDRD     R10,R11,[SP, #+0]
   \      0x6AE   0xEA8A 0x0606      EOR      R6,R10,R6
   \      0x6B2   0xEA8B 0x0707      EOR      R7,R11,R7
   \      0x6B6   0xE9CD 0x6700      STRD     R6,R7,[SP, #+0]
   \      0x6BA   0xE9DD 0xAB08      LDRD     R10,R11,[SP, #+32]
   \      0x6BE   0xE9DD 0x6708      LDRD     R6,R7,[SP, #+32]
   \      0x6C2   0x05FF             LSLS     R7,R7,#+23
   \      0x6C4   0xEA47 0x2756      ORR      R7,R7,R6, LSR #+9
   \      0x6C8   0x05F6             LSLS     R6,R6,#+23
   \      0x6CA   0xEA46 0x265B      ORR      R6,R6,R11, LSR #+9
   \      0x6CE   0xE9DD 0xAB00      LDRD     R10,R11,[SP, #+0]
   \      0x6D2   0xEA8A 0x0606      EOR      R6,R10,R6
   \      0x6D6   0xEA8B 0x0707      EOR      R7,R11,R7
   \      0x6DA   0xE9DD 0xAB02      LDRD     R10,R11,[SP, #+8]
   \      0x6DE   0xEB1A 0x0606      ADDS     R6,R10,R6
   \      0x6E2   0xEB4B 0x0707      ADC      R7,R11,R7
   \      0x6E6   0xE9CD 0x6704      STRD     R6,R7,[SP, #+16]
   \      0x6EA   0xE9DD 0x670E      LDRD     R6,R7,[SP, #+56]
   \      0x6EE   0xE9CD 0x6702      STRD     R6,R7,[SP, #+8]
   \      0x6F2   0xE9DD 0x6708      LDRD     R6,R7,[SP, #+32]
   \      0x6F6   0xE9CD 0x6700      STRD     R6,R7,[SP, #+0]
   \      0x6FA   0xE9DD 0xAB10      LDRD     R10,R11,[SP, #+64]
   \      0x6FE   0xE9DD 0x670E      LDRD     R6,R7,[SP, #+56]
   \      0x702   0xEA8A 0x0606      EOR      R6,R10,R6
   \      0x706   0xEA8B 0x0707      EOR      R7,R11,R7
   \      0x70A   0xE9DD 0xAB00      LDRD     R10,R11,[SP, #+0]
   \      0x70E   0xEA0A 0x0606      AND      R6,R10,R6
   \      0x712   0xEA0B 0x0707      AND      R7,R11,R7
   \      0x716   0xE9DD 0xAB02      LDRD     R10,R11,[SP, #+8]
   \      0x71A   0xEA8A 0x0606      EOR      R6,R10,R6
   \      0x71E   0xEA8B 0x0707      EOR      R7,R11,R7
   \      0x722   0xE9DD 0xAB04      LDRD     R10,R11,[SP, #+16]
   \      0x726   0xEB1A 0x0A06      ADDS     R10,R10,R6
   \      0x72A   0xEB4B 0x0B07      ADC      R11,R11,R7
   \      0x72E   0x....'....        LDR.W    R6,??DataTable2_11
   \      0x732   0xEB06 0x06CC      ADD      R6,R6,R12, LSL #+3
   \      0x736   0xE9D6 0x6700      LDRD     R6,R7,[R6, #+0]
   \      0x73A   0xEB1A 0x0A06      ADDS     R10,R10,R6
   \      0x73E   0xEB4B 0x0B07      ADC      R11,R11,R7
   \      0x742   0xAE14             ADD      R6,SP,#+80
   \      0x744   0xEB06 0x06CC      ADD      R6,R6,R12, LSL #+3
   \      0x748   0xE9D6 0x6700      LDRD     R6,R7,[R6, #+0]
   \      0x74C   0xEB1A 0x0606      ADDS     R6,R10,R6
   \      0x750   0xEB4B 0x0707      ADC      R7,R11,R7
   \      0x754   0x1980             ADDS     R0,R0,R6
   \      0x756   0x4179             ADCS     R1,R1,R7
   \      0x758   0xE9CD 0x0112      STRD     R0,R1,[SP, #+72]
   \      0x75C   0xE9CD 0x6700      STRD     R6,R7,[SP, #+0]
   \      0x760   0x4646             MOV      R6,R8
   \      0x762   0x464F             MOV      R7,R9
   \      0x764   0x0F36             LSRS     R6,R6,#+28
   \      0x766   0xEA46 0x1607      ORR      R6,R6,R7, LSL #+4
   \      0x76A   0x4640             MOV      R0,R8
   \      0x76C   0x0101             LSLS     R1,R0,#+4
   \      0x76E   0x2000             MOVS     R0,#+0
   \      0x770   0x4330             ORRS     R0,R6,R0
   \      0x772   0xEA51 0x7117      ORRS     R1,R1,R7, LSR #+28
   \      0x776   0x46CB             MOV      R11,R9
   \      0x778   0x4646             MOV      R6,R8
   \      0x77A   0x464F             MOV      R7,R9
   \      0x77C   0x07BF             LSLS     R7,R7,#+30
   \      0x77E   0xEA47 0x0796      ORR      R7,R7,R6, LSR #+2
   \      0x782   0x07B6             LSLS     R6,R6,#+30
   \      0x784   0xEA46 0x069B      ORR      R6,R6,R11, LSR #+2
   \      0x788   0x4070             EORS     R0,R0,R6
   \      0x78A   0x4079             EORS     R1,R1,R7
   \      0x78C   0x4646             MOV      R6,R8
   \      0x78E   0x464F             MOV      R7,R9
   \      0x790   0x067F             LSLS     R7,R7,#+25
   \      0x792   0xEA47 0x17D6      ORR      R7,R7,R6, LSR #+7
   \      0x796   0x0676             LSLS     R6,R6,#+25
   \      0x798   0xEA46 0x16DB      ORR      R6,R6,R11, LSR #+7
   \      0x79C   0x4070             EORS     R0,R0,R6
   \      0x79E   0x4079             EORS     R1,R1,R7
   \      0x7A0   0xE9DD 0x6700      LDRD     R6,R7,[SP, #+0]
   \      0x7A4   0x1830             ADDS     R0,R6,R0
   \      0x7A6   0x4179             ADCS     R1,R7,R1
   \      0x7A8   0xEA08 0x0A02      AND      R10,R8,R2
   \      0x7AC   0xEA09 0x0B03      AND      R11,R9,R3
   \      0x7B0   0xEA48 0x0602      ORR      R6,R8,R2
   \      0x7B4   0xEA49 0x0703      ORR      R7,R9,R3
   \      0x7B8   0x4026             ANDS     R6,R4,R6
   \      0x7BA   0x402F             ANDS     R7,R5,R7
   \      0x7BC   0xEA4A 0x0606      ORR      R6,R10,R6
   \      0x7C0   0xEA4B 0x0707      ORR      R7,R11,R7
   \      0x7C4   0x1980             ADDS     R0,R0,R6
   \      0x7C6   0x4179             ADCS     R1,R1,R7
   \      0x7C8   0xF10C 0x0C01      ADD      R12,R12,#+1
    258                  P( E, F, G, H, A, B, C, D, W[i], K[i] ); i++;
   \      0x7CC   0xE9DD 0x670E      LDRD     R6,R7,[SP, #+56]
   \      0x7D0   0xE9CD 0x6702      STRD     R6,R7,[SP, #+8]
   \      0x7D4   0xE9DD 0xAB12      LDRD     R10,R11,[SP, #+72]
   \      0x7D8   0xEA4F 0x3A9A      LSR      R10,R10,#+14
   \      0x7DC   0xEA4A 0x4A8B      ORR      R10,R10,R11, LSL #+18
   \      0x7E0   0xE9DD 0x6712      LDRD     R6,R7,[SP, #+72]
   \      0x7E4   0x04B7             LSLS     R7,R6,#+18
   \      0x7E6   0x2600             MOVS     R6,#+0
   \      0x7E8   0xEA4A 0x0606      ORR      R6,R10,R6
   \      0x7EC   0xEA47 0x379B      ORR      R7,R7,R11, LSR #+14
   \      0x7F0   0xE9CD 0x6700      STRD     R6,R7,[SP, #+0]
   \      0x7F4   0xE9DD 0xAB12      LDRD     R10,R11,[SP, #+72]
   \      0x7F8   0xEA4F 0x4A9A      LSR      R10,R10,#+18
   \      0x7FC   0xEA4A 0x3A8B      ORR      R10,R10,R11, LSL #+14
   \      0x800   0xE9DD 0x6712      LDRD     R6,R7,[SP, #+72]
   \      0x804   0x03B7             LSLS     R7,R6,#+14
   \      0x806   0x2600             MOVS     R6,#+0
   \      0x808   0xEA4A 0x0606      ORR      R6,R10,R6
   \      0x80C   0xEA47 0x479B      ORR      R7,R7,R11, LSR #+18
   \      0x810   0xE9DD 0xAB00      LDRD     R10,R11,[SP, #+0]
   \      0x814   0xEA8A 0x0606      EOR      R6,R10,R6
   \      0x818   0xEA8B 0x0707      EOR      R7,R11,R7
   \      0x81C   0xE9CD 0x6700      STRD     R6,R7,[SP, #+0]
   \      0x820   0xE9DD 0xAB12      LDRD     R10,R11,[SP, #+72]
   \      0x824   0xE9DD 0x6712      LDRD     R6,R7,[SP, #+72]
   \      0x828   0x05FF             LSLS     R7,R7,#+23
   \      0x82A   0xEA47 0x2756      ORR      R7,R7,R6, LSR #+9
   \      0x82E   0x05F6             LSLS     R6,R6,#+23
   \      0x830   0xEA46 0x265B      ORR      R6,R6,R11, LSR #+9
   \      0x834   0xE9DD 0xAB00      LDRD     R10,R11,[SP, #+0]
   \      0x838   0xEA8A 0x0606      EOR      R6,R10,R6
   \      0x83C   0xEA8B 0x0707      EOR      R7,R11,R7
   \      0x840   0xE9DD 0xAB02      LDRD     R10,R11,[SP, #+8]
   \      0x844   0xEB1A 0x0606      ADDS     R6,R10,R6
   \      0x848   0xEB4B 0x0707      ADC      R7,R11,R7
   \      0x84C   0xE9CD 0x6704      STRD     R6,R7,[SP, #+16]
   \      0x850   0xE9DD 0x6710      LDRD     R6,R7,[SP, #+64]
   \      0x854   0xE9CD 0x6702      STRD     R6,R7,[SP, #+8]
   \      0x858   0xE9DD 0x6712      LDRD     R6,R7,[SP, #+72]
   \      0x85C   0xE9CD 0x6700      STRD     R6,R7,[SP, #+0]
   \      0x860   0xE9DD 0xAB08      LDRD     R10,R11,[SP, #+32]
   \      0x864   0xE9DD 0x6710      LDRD     R6,R7,[SP, #+64]
   \      0x868   0xEA8A 0x0606      EOR      R6,R10,R6
   \      0x86C   0xEA8B 0x0707      EOR      R7,R11,R7
   \      0x870   0xE9DD 0xAB00      LDRD     R10,R11,[SP, #+0]
   \      0x874   0xEA0A 0x0606      AND      R6,R10,R6
   \      0x878   0xEA0B 0x0707      AND      R7,R11,R7
   \      0x87C   0xE9DD 0xAB02      LDRD     R10,R11,[SP, #+8]
   \      0x880   0xEA8A 0x0606      EOR      R6,R10,R6
   \      0x884   0xEA8B 0x0707      EOR      R7,R11,R7
   \      0x888   0xE9DD 0xAB04      LDRD     R10,R11,[SP, #+16]
   \      0x88C   0xEB1A 0x0A06      ADDS     R10,R10,R6
   \      0x890   0xEB4B 0x0B07      ADC      R11,R11,R7
   \      0x894   0x....'....        LDR.W    R6,??DataTable2_11
   \      0x898   0xEB06 0x06CC      ADD      R6,R6,R12, LSL #+3
   \      0x89C   0xE9D6 0x6700      LDRD     R6,R7,[R6, #+0]
   \      0x8A0   0xEB1A 0x0A06      ADDS     R10,R10,R6
   \      0x8A4   0xEB4B 0x0B07      ADC      R11,R11,R7
   \      0x8A8   0xAE14             ADD      R6,SP,#+80
   \      0x8AA   0xEB06 0x06CC      ADD      R6,R6,R12, LSL #+3
   \      0x8AE   0xE9D6 0x6700      LDRD     R6,R7,[R6, #+0]
   \      0x8B2   0xEB1A 0x0606      ADDS     R6,R10,R6
   \      0x8B6   0xEB4B 0x0707      ADC      R7,R11,R7
   \      0x8BA   0x19A4             ADDS     R4,R4,R6
   \      0x8BC   0x417D             ADCS     R5,R5,R7
   \      0x8BE   0xE9CD 0x450A      STRD     R4,R5,[SP, #+40]
   \      0x8C2   0xE9CD 0x6700      STRD     R6,R7,[SP, #+0]
   \      0x8C6   0x4606             MOV      R6,R0
   \      0x8C8   0x460F             MOV      R7,R1
   \      0x8CA   0x0F36             LSRS     R6,R6,#+28
   \      0x8CC   0xEA46 0x1607      ORR      R6,R6,R7, LSL #+4
   \      0x8D0   0x4604             MOV      R4,R0
   \      0x8D2   0x0125             LSLS     R5,R4,#+4
   \      0x8D4   0x2400             MOVS     R4,#+0
   \      0x8D6   0x4334             ORRS     R4,R6,R4
   \      0x8D8   0xEA55 0x7517      ORRS     R5,R5,R7, LSR #+28
   \      0x8DC   0x468B             MOV      R11,R1
   \      0x8DE   0x4606             MOV      R6,R0
   \      0x8E0   0x460F             MOV      R7,R1
   \      0x8E2   0x07BF             LSLS     R7,R7,#+30
   \      0x8E4   0xEA47 0x0796      ORR      R7,R7,R6, LSR #+2
   \      0x8E8   0x07B6             LSLS     R6,R6,#+30
   \      0x8EA   0xEA46 0x069B      ORR      R6,R6,R11, LSR #+2
   \      0x8EE   0x4074             EORS     R4,R4,R6
   \      0x8F0   0x407D             EORS     R5,R5,R7
   \      0x8F2   0x4606             MOV      R6,R0
   \      0x8F4   0x460F             MOV      R7,R1
   \      0x8F6   0x067F             LSLS     R7,R7,#+25
   \      0x8F8   0xEA47 0x17D6      ORR      R7,R7,R6, LSR #+7
   \      0x8FC   0x0676             LSLS     R6,R6,#+25
   \      0x8FE   0xEA46 0x16DB      ORR      R6,R6,R11, LSR #+7
   \      0x902   0x4074             EORS     R4,R4,R6
   \      0x904   0x407D             EORS     R5,R5,R7
   \      0x906   0xE9DD 0x6700      LDRD     R6,R7,[SP, #+0]
   \      0x90A   0x1934             ADDS     R4,R6,R4
   \      0x90C   0x417D             ADCS     R5,R7,R5
   \      0x90E   0xEA00 0x0A08      AND      R10,R0,R8
   \      0x912   0xEA01 0x0B09      AND      R11,R1,R9
   \      0x916   0xEA40 0x0608      ORR      R6,R0,R8
   \      0x91A   0xEA41 0x0709      ORR      R7,R1,R9
   \      0x91E   0x4016             ANDS     R6,R2,R6
   \      0x920   0x401F             ANDS     R7,R3,R7
   \      0x922   0xEA4A 0x0606      ORR      R6,R10,R6
   \      0x926   0xEA4B 0x0707      ORR      R7,R11,R7
   \      0x92A   0x19A4             ADDS     R4,R4,R6
   \      0x92C   0x417D             ADCS     R5,R5,R7
   \      0x92E   0xF10C 0x0C01      ADD      R12,R12,#+1
    259                  P( D, E, F, G, H, A, B, C, W[i], K[i] ); i++;
   \      0x932   0xE9DD 0x6710      LDRD     R6,R7,[SP, #+64]
   \      0x936   0xE9CD 0x6702      STRD     R6,R7,[SP, #+8]
   \      0x93A   0xE9DD 0xAB0A      LDRD     R10,R11,[SP, #+40]
   \      0x93E   0xEA4F 0x3A9A      LSR      R10,R10,#+14
   \      0x942   0xEA4A 0x4A8B      ORR      R10,R10,R11, LSL #+18
   \      0x946   0xE9DD 0x670A      LDRD     R6,R7,[SP, #+40]
   \      0x94A   0x04B7             LSLS     R7,R6,#+18
   \      0x94C   0x2600             MOVS     R6,#+0
   \      0x94E   0xEA4A 0x0606      ORR      R6,R10,R6
   \      0x952   0xEA47 0x379B      ORR      R7,R7,R11, LSR #+14
   \      0x956   0xE9CD 0x6700      STRD     R6,R7,[SP, #+0]
   \      0x95A   0xE9DD 0xAB0A      LDRD     R10,R11,[SP, #+40]
   \      0x95E   0xEA4F 0x4A9A      LSR      R10,R10,#+18
   \      0x962   0xEA4A 0x3A8B      ORR      R10,R10,R11, LSL #+14
   \      0x966   0xE9DD 0x670A      LDRD     R6,R7,[SP, #+40]
   \      0x96A   0x03B7             LSLS     R7,R6,#+14
   \      0x96C   0x2600             MOVS     R6,#+0
   \      0x96E   0xEA4A 0x0606      ORR      R6,R10,R6
   \      0x972   0xEA47 0x479B      ORR      R7,R7,R11, LSR #+18
   \      0x976   0xE9DD 0xAB00      LDRD     R10,R11,[SP, #+0]
   \      0x97A   0xEA8A 0x0606      EOR      R6,R10,R6
   \      0x97E   0xEA8B 0x0707      EOR      R7,R11,R7
   \      0x982   0xE9CD 0x6700      STRD     R6,R7,[SP, #+0]
   \      0x986   0xE9DD 0xAB0A      LDRD     R10,R11,[SP, #+40]
   \      0x98A   0xE9DD 0x670A      LDRD     R6,R7,[SP, #+40]
   \      0x98E   0x05FF             LSLS     R7,R7,#+23
   \      0x990   0xEA47 0x2756      ORR      R7,R7,R6, LSR #+9
   \      0x994   0x05F6             LSLS     R6,R6,#+23
   \      0x996   0xEA46 0x265B      ORR      R6,R6,R11, LSR #+9
   \      0x99A   0xE9DD 0xAB00      LDRD     R10,R11,[SP, #+0]
   \      0x99E   0xEA8A 0x0606      EOR      R6,R10,R6
   \      0x9A2   0xEA8B 0x0707      EOR      R7,R11,R7
   \      0x9A6   0xE9DD 0xAB02      LDRD     R10,R11,[SP, #+8]
   \      0x9AA   0xEB1A 0x0606      ADDS     R6,R10,R6
   \      0x9AE   0xEB4B 0x0707      ADC      R7,R11,R7
   \      0x9B2   0xE9CD 0x6704      STRD     R6,R7,[SP, #+16]
   \      0x9B6   0xE9DD 0x6708      LDRD     R6,R7,[SP, #+32]
   \      0x9BA   0xE9CD 0x6702      STRD     R6,R7,[SP, #+8]
   \      0x9BE   0xE9DD 0x670A      LDRD     R6,R7,[SP, #+40]
   \      0x9C2   0xE9CD 0x6700      STRD     R6,R7,[SP, #+0]
   \      0x9C6   0xE9DD 0xAB12      LDRD     R10,R11,[SP, #+72]
   \      0x9CA   0xE9DD 0x6708      LDRD     R6,R7,[SP, #+32]
   \      0x9CE   0xEA8A 0x0606      EOR      R6,R10,R6
   \      0x9D2   0xEA8B 0x0707      EOR      R7,R11,R7
   \      0x9D6   0xE9DD 0xAB00      LDRD     R10,R11,[SP, #+0]
   \      0x9DA   0xEA0A 0x0606      AND      R6,R10,R6
   \      0x9DE   0xEA0B 0x0707      AND      R7,R11,R7
   \      0x9E2   0xE9DD 0xAB02      LDRD     R10,R11,[SP, #+8]
   \      0x9E6   0xEA8A 0x0606      EOR      R6,R10,R6
   \      0x9EA   0xEA8B 0x0707      EOR      R7,R11,R7
   \      0x9EE   0xE9DD 0xAB04      LDRD     R10,R11,[SP, #+16]
   \      0x9F2   0xEB1A 0x0A06      ADDS     R10,R10,R6
   \      0x9F6   0xEB4B 0x0B07      ADC      R11,R11,R7
   \      0x9FA   0x....'....        LDR.W    R6,??DataTable2_11
   \      0x9FE   0xEB06 0x06CC      ADD      R6,R6,R12, LSL #+3
   \      0xA02   0xE9D6 0x6700      LDRD     R6,R7,[R6, #+0]
   \      0xA06   0xEB1A 0x0A06      ADDS     R10,R10,R6
   \      0xA0A   0xEB4B 0x0B07      ADC      R11,R11,R7
   \      0xA0E   0xAE14             ADD      R6,SP,#+80
   \      0xA10   0xEB06 0x06CC      ADD      R6,R6,R12, LSL #+3
   \      0xA14   0xE9D6 0x6700      LDRD     R6,R7,[R6, #+0]
   \      0xA18   0xEB1A 0x0606      ADDS     R6,R10,R6
   \      0xA1C   0xEB4B 0x0707      ADC      R7,R11,R7
   \      0xA20   0x1992             ADDS     R2,R2,R6
   \      0xA22   0x417B             ADCS     R3,R3,R7
   \      0xA24   0xE9CD 0x230C      STRD     R2,R3,[SP, #+48]
   \      0xA28   0xE9CD 0x6700      STRD     R6,R7,[SP, #+0]
   \      0xA2C   0x4626             MOV      R6,R4
   \      0xA2E   0x462F             MOV      R7,R5
   \      0xA30   0x0F36             LSRS     R6,R6,#+28
   \      0xA32   0xEA46 0x1607      ORR      R6,R6,R7, LSL #+4
   \      0xA36   0x4622             MOV      R2,R4
   \      0xA38   0x0113             LSLS     R3,R2,#+4
   \      0xA3A   0x2200             MOVS     R2,#+0
   \      0xA3C   0x4332             ORRS     R2,R6,R2
   \      0xA3E   0xEA53 0x7317      ORRS     R3,R3,R7, LSR #+28
   \      0xA42   0x46AB             MOV      R11,R5
   \      0xA44   0x4626             MOV      R6,R4
   \      0xA46   0x462F             MOV      R7,R5
   \      0xA48   0x07BF             LSLS     R7,R7,#+30
   \      0xA4A   0xEA47 0x0796      ORR      R7,R7,R6, LSR #+2
   \      0xA4E   0x07B6             LSLS     R6,R6,#+30
   \      0xA50   0xEA46 0x069B      ORR      R6,R6,R11, LSR #+2
   \      0xA54   0x4072             EORS     R2,R2,R6
   \      0xA56   0x407B             EORS     R3,R3,R7
   \      0xA58   0x4626             MOV      R6,R4
   \      0xA5A   0x462F             MOV      R7,R5
   \      0xA5C   0x067F             LSLS     R7,R7,#+25
   \      0xA5E   0xEA47 0x17D6      ORR      R7,R7,R6, LSR #+7
   \      0xA62   0x0676             LSLS     R6,R6,#+25
   \      0xA64   0xEA46 0x16DB      ORR      R6,R6,R11, LSR #+7
   \      0xA68   0x4072             EORS     R2,R2,R6
   \      0xA6A   0x407B             EORS     R3,R3,R7
   \      0xA6C   0xE9DD 0x6700      LDRD     R6,R7,[SP, #+0]
   \      0xA70   0x18B2             ADDS     R2,R6,R2
   \      0xA72   0x417B             ADCS     R3,R7,R3
   \      0xA74   0xEA04 0x0A00      AND      R10,R4,R0
   \      0xA78   0xEA05 0x0B01      AND      R11,R5,R1
   \      0xA7C   0xEA44 0x0600      ORR      R6,R4,R0
   \      0xA80   0xEA45 0x0701      ORR      R7,R5,R1
   \      0xA84   0xEA08 0x0606      AND      R6,R8,R6
   \      0xA88   0xEA09 0x0707      AND      R7,R9,R7
   \      0xA8C   0xEA4A 0x0606      ORR      R6,R10,R6
   \      0xA90   0xEA4B 0x0707      ORR      R7,R11,R7
   \      0xA94   0x1992             ADDS     R2,R2,R6
   \      0xA96   0x417B             ADCS     R3,R3,R7
   \      0xA98   0xF10C 0x0C01      ADD      R12,R12,#+1
    260                  P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
   \      0xA9C   0xE9DD 0x6708      LDRD     R6,R7,[SP, #+32]
   \      0xAA0   0xE9CD 0x6702      STRD     R6,R7,[SP, #+8]
   \      0xAA4   0xE9DD 0xAB0C      LDRD     R10,R11,[SP, #+48]
   \      0xAA8   0xEA4F 0x3A9A      LSR      R10,R10,#+14
   \      0xAAC   0xEA4A 0x4A8B      ORR      R10,R10,R11, LSL #+18
   \      0xAB0   0xE9DD 0x670C      LDRD     R6,R7,[SP, #+48]
   \      0xAB4   0x04B7             LSLS     R7,R6,#+18
   \      0xAB6   0x2600             MOVS     R6,#+0
   \      0xAB8   0xEA4A 0x0606      ORR      R6,R10,R6
   \      0xABC   0xEA47 0x379B      ORR      R7,R7,R11, LSR #+14
   \      0xAC0   0xE9CD 0x6700      STRD     R6,R7,[SP, #+0]
   \      0xAC4   0xE9DD 0xAB0C      LDRD     R10,R11,[SP, #+48]
   \      0xAC8   0xEA4F 0x4A9A      LSR      R10,R10,#+18
   \      0xACC   0xEA4A 0x3A8B      ORR      R10,R10,R11, LSL #+14
   \      0xAD0   0xE9DD 0x670C      LDRD     R6,R7,[SP, #+48]
   \      0xAD4   0x03B7             LSLS     R7,R6,#+14
   \      0xAD6   0x2600             MOVS     R6,#+0
   \      0xAD8   0xEA4A 0x0606      ORR      R6,R10,R6
   \      0xADC   0xEA47 0x479B      ORR      R7,R7,R11, LSR #+18
   \      0xAE0   0xE9DD 0xAB00      LDRD     R10,R11,[SP, #+0]
   \      0xAE4   0xEA8A 0x0606      EOR      R6,R10,R6
   \      0xAE8   0xEA8B 0x0707      EOR      R7,R11,R7
   \      0xAEC   0xE9CD 0x6700      STRD     R6,R7,[SP, #+0]
   \      0xAF0   0xE9DD 0xAB0C      LDRD     R10,R11,[SP, #+48]
   \      0xAF4   0xE9DD 0x670C      LDRD     R6,R7,[SP, #+48]
   \      0xAF8   0x05FF             LSLS     R7,R7,#+23
   \      0xAFA   0xEA47 0x2756      ORR      R7,R7,R6, LSR #+9
   \      0xAFE   0x05F6             LSLS     R6,R6,#+23
   \      0xB00   0xEA46 0x265B      ORR      R6,R6,R11, LSR #+9
   \      0xB04   0xE9DD 0xAB00      LDRD     R10,R11,[SP, #+0]
   \      0xB08   0xEA8A 0x0606      EOR      R6,R10,R6
   \      0xB0C   0xEA8B 0x0707      EOR      R7,R11,R7
   \      0xB10   0xE9DD 0xAB02      LDRD     R10,R11,[SP, #+8]
   \      0xB14   0xEB1A 0x0606      ADDS     R6,R10,R6
   \      0xB18   0xEB4B 0x0707      ADC      R7,R11,R7
   \      0xB1C   0xE9CD 0x6704      STRD     R6,R7,[SP, #+16]
   \      0xB20   0xE9DD 0x6712      LDRD     R6,R7,[SP, #+72]
   \      0xB24   0xE9CD 0x6702      STRD     R6,R7,[SP, #+8]
   \      0xB28   0xE9DD 0x670C      LDRD     R6,R7,[SP, #+48]
   \      0xB2C   0xE9CD 0x6700      STRD     R6,R7,[SP, #+0]
   \      0xB30   0xE9DD 0xAB0A      LDRD     R10,R11,[SP, #+40]
   \      0xB34   0xE9DD 0x6712      LDRD     R6,R7,[SP, #+72]
   \      0xB38   0xEA8A 0x0606      EOR      R6,R10,R6
   \      0xB3C   0xEA8B 0x0707      EOR      R7,R11,R7
   \      0xB40   0xE9DD 0xAB00      LDRD     R10,R11,[SP, #+0]
   \      0xB44   0xEA0A 0x0606      AND      R6,R10,R6
   \      0xB48   0xEA0B 0x0707      AND      R7,R11,R7
   \      0xB4C   0xE9DD 0xAB02      LDRD     R10,R11,[SP, #+8]
   \      0xB50   0xEA8A 0x0606      EOR      R6,R10,R6
   \      0xB54   0xEA8B 0x0707      EOR      R7,R11,R7
   \      0xB58   0xE9DD 0xAB04      LDRD     R10,R11,[SP, #+16]
   \      0xB5C   0xEB1A 0x0A06      ADDS     R10,R10,R6
   \      0xB60   0xEB4B 0x0B07      ADC      R11,R11,R7
   \      0xB64   0x....             LDR.N    R6,??DataTable2_11
   \      0xB66   0xEB06 0x06CC      ADD      R6,R6,R12, LSL #+3
   \      0xB6A   0xE9D6 0x6700      LDRD     R6,R7,[R6, #+0]
   \      0xB6E   0xEB1A 0x0A06      ADDS     R10,R10,R6
   \      0xB72   0xEB4B 0x0B07      ADC      R11,R11,R7
   \      0xB76   0xAE14             ADD      R6,SP,#+80
   \      0xB78   0xEB06 0x06CC      ADD      R6,R6,R12, LSL #+3
   \      0xB7C   0xE9D6 0x6700      LDRD     R6,R7,[R6, #+0]
   \      0xB80   0xEB1A 0x0606      ADDS     R6,R10,R6
   \      0xB84   0xEB4B 0x0707      ADC      R7,R11,R7
   \      0xB88   0xEB18 0x0806      ADDS     R8,R8,R6
   \      0xB8C   0xEB49 0x0907      ADC      R9,R9,R7
   \      0xB90   0xE9CD 0x8904      STRD     R8,R9,[SP, #+16]
   \      0xB94   0xE9CD 0x6700      STRD     R6,R7,[SP, #+0]
   \      0xB98   0x4690             MOV      R8,R2
   \      0xB9A   0x4699             MOV      R9,R3
   \      0xB9C   0xEA4F 0x7818      LSR      R8,R8,#+28
   \      0xBA0   0xEA48 0x1809      ORR      R8,R8,R9, LSL #+4
   \      0xBA4   0x4616             MOV      R6,R2
   \      0xBA6   0x0137             LSLS     R7,R6,#+4
   \      0xBA8   0x2600             MOVS     R6,#+0
   \      0xBAA   0xEA48 0x0606      ORR      R6,R8,R6
   \      0xBAE   0xEA47 0x7719      ORR      R7,R7,R9, LSR #+28
   \      0xBB2   0x469B             MOV      R11,R3
   \      0xBB4   0x4690             MOV      R8,R2
   \      0xBB6   0x4699             MOV      R9,R3
   \      0xBB8   0xEA4F 0x7989      LSL      R9,R9,#+30
   \      0xBBC   0xEA49 0x0998      ORR      R9,R9,R8, LSR #+2
   \      0xBC0   0xEA4F 0x7888      LSL      R8,R8,#+30
   \      0xBC4   0xEA48 0x089B      ORR      R8,R8,R11, LSR #+2
   \      0xBC8   0xEA86 0x0608      EOR      R6,R6,R8
   \      0xBCC   0xEA87 0x0709      EOR      R7,R7,R9
   \      0xBD0   0x4690             MOV      R8,R2
   \      0xBD2   0x4699             MOV      R9,R3
   \      0xBD4   0xEA4F 0x6949      LSL      R9,R9,#+25
   \      0xBD8   0xEA49 0x19D8      ORR      R9,R9,R8, LSR #+7
   \      0xBDC   0xEA4F 0x6848      LSL      R8,R8,#+25
   \      0xBE0   0xEA48 0x18DB      ORR      R8,R8,R11, LSR #+7
   \      0xBE4   0xEA86 0x0608      EOR      R6,R6,R8
   \      0xBE8   0xEA87 0x0709      EOR      R7,R7,R9
   \      0xBEC   0xE9DD 0x8900      LDRD     R8,R9,[SP, #+0]
   \      0xBF0   0xEB18 0x0606      ADDS     R6,R8,R6
   \      0xBF4   0xEB49 0x0707      ADC      R7,R9,R7
   \      0xBF8   0xEA02 0x0A04      AND      R10,R2,R4
   \      0xBFC   0xEA03 0x0B05      AND      R11,R3,R5
   \      0xC00   0xEA42 0x0804      ORR      R8,R2,R4
   \      0xC04   0xEA43 0x0905      ORR      R9,R3,R5
   \      0xC08   0xEA00 0x0808      AND      R8,R0,R8
   \      0xC0C   0xEA01 0x0909      AND      R9,R1,R9
   \      0xC10   0xEA4A 0x0808      ORR      R8,R10,R8
   \      0xC14   0xEA4B 0x0909      ORR      R9,R11,R9
   \      0xC18   0xEB16 0x0808      ADDS     R8,R6,R8
   \      0xC1C   0xEB47 0x0909      ADC      R9,R7,R9
   \      0xC20   0xE9CD 0x8908      STRD     R8,R9,[SP, #+32]
   \      0xC24   0xF10C 0x0C01      ADD      R12,R12,#+1
    261                  P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
   \      0xC28   0xE9DD 0x6712      LDRD     R6,R7,[SP, #+72]
   \      0xC2C   0xE9CD 0x6700      STRD     R6,R7,[SP, #+0]
   \      0xC30   0xE9DD 0x8904      LDRD     R8,R9,[SP, #+16]
   \      0xC34   0xEA4F 0x3898      LSR      R8,R8,#+14
   \      0xC38   0xEA48 0x4889      ORR      R8,R8,R9, LSL #+18
   \      0xC3C   0xE9DD 0x6704      LDRD     R6,R7,[SP, #+16]
   \      0xC40   0x04B7             LSLS     R7,R6,#+18
   \      0xC42   0x2600             MOVS     R6,#+0
   \      0xC44   0xEA48 0x0606      ORR      R6,R8,R6
   \      0xC48   0xEA47 0x3799      ORR      R7,R7,R9, LSR #+14
   \      0xC4C   0xE9DD 0xAB04      LDRD     R10,R11,[SP, #+16]
   \      0xC50   0xEA4F 0x4A9A      LSR      R10,R10,#+18
   \      0xC54   0xEA4A 0x3A8B      ORR      R10,R10,R11, LSL #+14
   \      0xC58   0xE9DD 0x8904      LDRD     R8,R9,[SP, #+16]
   \      0xC5C   0xEA4F 0x3988      LSL      R9,R8,#+14
   \      0xC60   0xF04F 0x0800      MOV      R8,#+0
   \      0xC64   0xEA4A 0x0808      ORR      R8,R10,R8
   \      0xC68   0xEA49 0x499B      ORR      R9,R9,R11, LSR #+18
   \      0xC6C   0xEA86 0x0608      EOR      R6,R6,R8
   \      0xC70   0xEA87 0x0709      EOR      R7,R7,R9
   \      0xC74   0xE9DD 0xAB04      LDRD     R10,R11,[SP, #+16]
   \      0xC78   0xE9DD 0x8904      LDRD     R8,R9,[SP, #+16]
   \      0xC7C   0xEA4F 0x59C9      LSL      R9,R9,#+23
   \      0xC80   0xEA49 0x2958      ORR      R9,R9,R8, LSR #+9
   \      0xC84   0xEA4F 0x58C8      LSL      R8,R8,#+23
   \      0xC88   0xEA48 0x285B      ORR      R8,R8,R11, LSR #+9
   \      0xC8C   0xEA86 0x0608      EOR      R6,R6,R8
   \      0xC90   0xEA87 0x0709      EOR      R7,R7,R9
   \      0xC94   0xE9DD 0x8900      LDRD     R8,R9,[SP, #+0]
   \      0xC98   0xEB18 0x0606      ADDS     R6,R8,R6
   \      0xC9C   0xEB49 0x0707      ADC      R7,R9,R7
   \      0xCA0   0xE9CD 0x6702      STRD     R6,R7,[SP, #+8]
   \      0xCA4   0xE9DD 0x670A      LDRD     R6,R7,[SP, #+40]
   \      0xCA8   0xE9CD 0x6700      STRD     R6,R7,[SP, #+0]
   \      0xCAC   0xE9DD 0x6704      LDRD     R6,R7,[SP, #+16]
   \      0xCB0   0xE9DD 0xAB0C      LDRD     R10,R11,[SP, #+48]
   \      0xCB4   0xE9DD 0x890A      LDRD     R8,R9,[SP, #+40]
   \      0xCB8   0xEA8A 0x0808      EOR      R8,R10,R8
   \      0xCBC   0xEA8B 0x0909      EOR      R9,R11,R9
   \      0xCC0   0xEA06 0x0608      AND      R6,R6,R8
   \      0xCC4   0xEA07 0x0709      AND      R7,R7,R9
   \      0xCC8   0xE9DD 0x8900      LDRD     R8,R9,[SP, #+0]
   \      0xCCC   0xEA88 0x0606      EOR      R6,R8,R6
   \      0xCD0   0xEA89 0x0707      EOR      R7,R9,R7
   \      0xCD4   0xE9DD 0x8902      LDRD     R8,R9,[SP, #+8]
   \      0xCD8   0xEB18 0x0606      ADDS     R6,R8,R6
   \      0xCDC   0xEB49 0x0707      ADC      R7,R9,R7
   \      0xCE0   0x....'....        LDR.W    LR,??DataTable2_11
   \      0xCE4   0xEB0E 0x0ECC      ADD      LR,LR,R12, LSL #+3
   \      0xCE8   0xE9DE 0x8900      LDRD     R8,R9,[LR, #+0]
   \      0xCEC   0xEB16 0x0608      ADDS     R6,R6,R8
   \      0xCF0   0xEB47 0x0709      ADC      R7,R7,R9
   \      0xCF4   0xF10D 0x0E50      ADD      LR,SP,#+80
   \      0xCF8   0xEB0E 0x0ECC      ADD      LR,LR,R12, LSL #+3
   \      0xCFC   0xE9DE 0x8900      LDRD     R8,R9,[LR, #+0]
   \      0xD00   0xEB16 0x0808      ADDS     R8,R6,R8
   \      0xD04   0xEB47 0x0909      ADC      R9,R7,R9
   \      0xD08   0xEB10 0x0608      ADDS     R6,R0,R8
   \      0xD0C   0xEB41 0x0709      ADC      R7,R1,R9
   \      0xD10   0xE9CD 0x8900      STRD     R8,R9,[SP, #+0]
   \      0xD14   0xE9DD 0x8908      LDRD     R8,R9,[SP, #+32]
   \      0xD18   0xEA4F 0x7818      LSR      R8,R8,#+28
   \      0xD1C   0xEA48 0x1809      ORR      R8,R8,R9, LSL #+4
   \      0xD20   0xE9DD 0x0108      LDRD     R0,R1,[SP, #+32]
   \      0xD24   0x0101             LSLS     R1,R0,#+4
   \      0xD26   0x2000             MOVS     R0,#+0
   \      0xD28   0xEA48 0x0000      ORR      R0,R8,R0
   \      0xD2C   0xEA41 0x7119      ORR      R1,R1,R9, LSR #+28
   \      0xD30   0xE9DD 0xAB08      LDRD     R10,R11,[SP, #+32]
   \      0xD34   0xE9DD 0x8908      LDRD     R8,R9,[SP, #+32]
   \      0xD38   0xEA4F 0x7989      LSL      R9,R9,#+30
   \      0xD3C   0xEA49 0x0998      ORR      R9,R9,R8, LSR #+2
   \      0xD40   0xEA4F 0x7888      LSL      R8,R8,#+30
   \      0xD44   0xEA48 0x089B      ORR      R8,R8,R11, LSR #+2
   \      0xD48   0xEA80 0x0008      EOR      R0,R0,R8
   \      0xD4C   0xEA81 0x0109      EOR      R1,R1,R9
   \      0xD50   0xE9DD 0x8908      LDRD     R8,R9,[SP, #+32]
   \      0xD54   0xEA4F 0x6949      LSL      R9,R9,#+25
   \      0xD58   0xEA49 0x19D8      ORR      R9,R9,R8, LSR #+7
   \      0xD5C   0xEA4F 0x6848      LSL      R8,R8,#+25
   \      0xD60   0xEA48 0x18DB      ORR      R8,R8,R11, LSR #+7
   \      0xD64   0xEA80 0x0008      EOR      R0,R0,R8
   \      0xD68   0xEA81 0x0109      EOR      R1,R1,R9
   \      0xD6C   0xE9DD 0x8900      LDRD     R8,R9,[SP, #+0]
   \      0xD70   0xEB18 0x0000      ADDS     R0,R8,R0
   \      0xD74   0xEB49 0x0101      ADC      R1,R9,R1
   \      0xD78   0xE9DD 0x8908      LDRD     R8,R9,[SP, #+32]
   \      0xD7C   0xEA08 0x0A02      AND      R10,R8,R2
   \      0xD80   0xEA09 0x0B03      AND      R11,R9,R3
   \      0xD84   0xEA48 0x0802      ORR      R8,R8,R2
   \      0xD88   0xEA49 0x0903      ORR      R9,R9,R3
   \      0xD8C   0xEA04 0x0808      AND      R8,R4,R8
   \      0xD90   0xEA05 0x0909      AND      R9,R5,R9
   \      0xD94   0xEA4A 0x0808      ORR      R8,R10,R8
   \      0xD98   0xEA4B 0x0909      ORR      R9,R11,R9
   \      0xD9C   0xEB10 0x0008      ADDS     R0,R0,R8
   \      0xDA0   0xEB41 0x0109      ADC      R1,R1,R9
   \      0xDA4   0xF10C 0x0C01      ADD      R12,R12,#+1
    262              }
    263              while( i < 80 );
   \      0xDA8   0xF1BC 0x0F50      CMP      R12,#+80
   \      0xDAC   0xF6FF 0xAA03      BLT.W    ??mbedtls_internal_sha512_process_4
   \      0xDB0   0xE9CD 0x2310      STRD     R2,R3,[SP, #+64]
   \      0xDB4   0xE9CD 0x450E      STRD     R4,R5,[SP, #+56]
   \      0xDB8   0xE9DD 0x2304      LDRD     R2,R3,[SP, #+16]
   \      0xDBC   0xE9DD 0x450C      LDRD     R4,R5,[SP, #+48]
   \      0xDC0   0xE9DD 0x890A      LDRD     R8,R9,[SP, #+40]
    264          
    265              ctx->state[0] += A;
   \      0xDC4   0xF8DD 0xC018      LDR      R12,[SP, #+24]
   \      0xDC8   0xE9DC 0xAB04      LDRD     R10,R11,[R12, #+16]
   \      0xDCC   0xEB1A 0x0000      ADDS     R0,R10,R0
   \      0xDD0   0xEB4B 0x0101      ADC      R1,R11,R1
   \      0xDD4   0xE9CC 0x0104      STRD     R0,R1,[R12, #+16]
    266              ctx->state[1] += B;
   \      0xDD8   0x9806             LDR      R0,[SP, #+24]
   \      0xDDA   0xE9D0 0x0106      LDRD     R0,R1,[R0, #+24]
   \      0xDDE   0xE9DD 0xAB08      LDRD     R10,R11,[SP, #+32]
   \      0xDE2   0xEB10 0x000A      ADDS     R0,R0,R10
   \      0xDE6   0xEB41 0x010B      ADC      R1,R1,R11
   \      0xDEA   0xF8DD 0xC018      LDR      R12,[SP, #+24]
   \      0xDEE   0xE9CC 0x0106      STRD     R0,R1,[R12, #+24]
    267              ctx->state[2] += C;
   \      0xDF2   0x9806             LDR      R0,[SP, #+24]
   \      0xDF4   0xE9D0 0x0108      LDRD     R0,R1,[R0, #+32]
   \      0xDF8   0xE9DD 0xAB10      LDRD     R10,R11,[SP, #+64]
   \      0xDFC   0xEB10 0x000A      ADDS     R0,R0,R10
   \      0xE00   0xEB41 0x010B      ADC      R1,R1,R11
   \      0xE04   0xF8DD 0xC018      LDR      R12,[SP, #+24]
   \      0xE08   0xE9CC 0x0108      STRD     R0,R1,[R12, #+32]
    268              ctx->state[3] += D;
   \      0xE0C   0x9806             LDR      R0,[SP, #+24]
   \      0xE0E   0xE9D0 0x010A      LDRD     R0,R1,[R0, #+40]
   \      0xE12   0xE9DD 0xAB0E      LDRD     R10,R11,[SP, #+56]
   \      0xE16   0xEB10 0x000A      ADDS     R0,R0,R10
   \      0xE1A   0xEB41 0x010B      ADC      R1,R1,R11
   \      0xE1E   0xF8DD 0xC018      LDR      R12,[SP, #+24]
   \      0xE22   0xE9CC 0x010A      STRD     R0,R1,[R12, #+40]
    269              ctx->state[4] += E;
   \      0xE26   0x9806             LDR      R0,[SP, #+24]
   \      0xE28   0xE9D0 0x010C      LDRD     R0,R1,[R0, #+48]
   \      0xE2C   0x1980             ADDS     R0,R0,R6
   \      0xE2E   0x4179             ADCS     R1,R1,R7
   \      0xE30   0x9E06             LDR      R6,[SP, #+24]
   \      0xE32   0xE9C6 0x010C      STRD     R0,R1,[R6, #+48]
    270              ctx->state[5] += F;
   \      0xE36   0x9806             LDR      R0,[SP, #+24]
   \      0xE38   0xE9D0 0x010E      LDRD     R0,R1,[R0, #+56]
   \      0xE3C   0x1880             ADDS     R0,R0,R2
   \      0xE3E   0x4159             ADCS     R1,R1,R3
   \      0xE40   0x9A06             LDR      R2,[SP, #+24]
   \      0xE42   0xE9C2 0x010E      STRD     R0,R1,[R2, #+56]
    271              ctx->state[6] += G;
   \      0xE46   0x9806             LDR      R0,[SP, #+24]
   \      0xE48   0xE9D0 0x0110      LDRD     R0,R1,[R0, #+64]
   \      0xE4C   0x1900             ADDS     R0,R0,R4
   \      0xE4E   0x4169             ADCS     R1,R1,R5
   \      0xE50   0x9A06             LDR      R2,[SP, #+24]
   \      0xE52   0xE9C2 0x0110      STRD     R0,R1,[R2, #+64]
    272              ctx->state[7] += H;
   \      0xE56   0x9806             LDR      R0,[SP, #+24]
   \      0xE58   0xE9D0 0x0112      LDRD     R0,R1,[R0, #+72]
   \      0xE5C   0xEB10 0x0008      ADDS     R0,R0,R8
   \      0xE60   0xEB41 0x0109      ADC      R1,R1,R9
   \      0xE64   0x9A06             LDR      R2,[SP, #+24]
   \      0xE66   0xE9C2 0x0112      STRD     R0,R1,[R2, #+72]
    273          
    274              return( 0 );
   \      0xE6A   0x2000             MOVS     R0,#+0
   \      0xE6C   0xF50D 0x7D35      ADD      SP,SP,#+724
   \      0xE70   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    275          }
    276          
    277          #if !defined(MBEDTLS_DEPRECATED_REMOVED)

   \                                 In section .text, align 2, keep-with-next
    278          void mbedtls_sha512_process( mbedtls_sha512_context *ctx,
    279                                       const unsigned char data[128] )
    280          {
    281              mbedtls_internal_sha512_process( ctx, data );
   \                     mbedtls_sha512_process: (+1)
   \        0x0   0x....'....        B.W      mbedtls_internal_sha512_process
    282          }
    283          #endif
    284          #endif /* !MBEDTLS_SHA512_PROCESS_ALT */
    285          
    286          /*
    287           * SHA-512 process buffer
    288           */

   \                                 In section .text, align 2, keep-with-next
    289          int mbedtls_sha512_update_ret( mbedtls_sha512_context *ctx,
    290                                         const unsigned char *input,
    291                                         size_t ilen )
    292          {
   \                     mbedtls_sha512_update_ret: (+1)
   \        0x0   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \        0x4   0x468C             MOV      R12,R1
   \        0x6   0x0014             MOVS     R4,R2
    293              int ret;
    294              size_t fill;
    295              unsigned int left;
    296          
    297              if( ilen == 0 )
   \        0x8   0xD047             BEQ.N    ??mbedtls_sha512_update_ret_0
   \        0xA   0x4606             MOV      R6,R0
    298                  return( 0 );
    299          
    300              left = (unsigned int) (ctx->total[0] & 0x7F);
   \        0xC   0x7835             LDRB     R5,[R6, #+0]
   \        0xE   0xF005 0x057F      AND      R5,R5,#0x7F
    301              fill = 128 - left;
   \       0x12   0xF1C5 0x0780      RSB      R7,R5,#+128
    302          
    303              ctx->total[0] += (uint64_t) ilen;
   \       0x16   0xE9D6 0x2300      LDRD     R2,R3,[R6, #+0]
   \       0x1A   0x4620             MOV      R0,R4
   \       0x1C   0x2100             MOVS     R1,#+0
   \       0x1E   0x1810             ADDS     R0,R2,R0
   \       0x20   0x4159             ADCS     R1,R3,R1
   \       0x22   0xE9C6 0x0100      STRD     R0,R1,[R6, #+0]
    304          
    305              if( ctx->total[0] < (uint64_t) ilen )
   \       0x26   0xE9D6 0x2300      LDRD     R2,R3,[R6, #+0]
   \       0x2A   0x4620             MOV      R0,R4
   \       0x2C   0x2100             MOVS     R1,#+0
   \       0x2E   0x428B             CMP      R3,R1
   \       0x30   0xD809             BHI.N    ??mbedtls_sha512_update_ret_1
   \       0x32   0xD301             BCC.N    ??mbedtls_sha512_update_ret_2
   \       0x34   0x4282             CMP      R2,R0
   \       0x36   0xD206             BCS.N    ??mbedtls_sha512_update_ret_1
    306                  ctx->total[1]++;
   \                     ??mbedtls_sha512_update_ret_2: (+1)
   \       0x38   0xE9D6 0x0102      LDRD     R0,R1,[R6, #+8]
   \       0x3C   0x1C40             ADDS     R0,R0,#+1
   \       0x3E   0xF161 0x31FF      SBC      R1,R1,#-1
   \       0x42   0xE9C6 0x0102      STRD     R0,R1,[R6, #+8]
   \                     ??mbedtls_sha512_update_ret_1: (+1)
   \       0x46   0x46E0             MOV      R8,R12
    307          
    308              if( left && ilen >= fill )
   \       0x48   0x2D00             CMP      R5,#+0
   \       0x4A   0xD015             BEQ.N    ??mbedtls_sha512_update_ret_3
   \       0x4C   0x42BC             CMP      R4,R7
   \       0x4E   0xD313             BCC.N    ??mbedtls_sha512_update_ret_3
    309              {
    310                  memcpy( (void *) (ctx->buffer + left), input, fill );
   \       0x50   0x463A             MOV      R2,R7
   \       0x52   0x4641             MOV      R1,R8
   \       0x54   0x1970             ADDS     R0,R6,R5
   \       0x56   0x3050             ADDS     R0,R0,#+80
   \       0x58   0x....'....        BL       __aeabi_memcpy
    311          
    312                  if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
   \       0x5C   0xF106 0x0150      ADD      R1,R6,#+80
   \       0x60   0x4630             MOV      R0,R6
   \       0x62   0x....'....        BL       mbedtls_internal_sha512_process
   \       0x66   0x2800             CMP      R0,#+0
   \       0x68   0xD118             BNE.N    ??mbedtls_sha512_update_ret_4
    313                      return( ret );
    314          
    315                  input += fill;
   \       0x6A   0x44B8             ADD      R8,R8,R7
    316                  ilen  -= fill;
   \       0x6C   0x1BE4             SUBS     R4,R4,R7
    317                  left = 0;
   \       0x6E   0x2500             MOVS     R5,#+0
   \       0x70   0xE002             B.N      ??mbedtls_sha512_update_ret_3
    318              }
    319          
    320              while( ilen >= 128 )
    321              {
    322                  if( ( ret = mbedtls_internal_sha512_process( ctx, input ) ) != 0 )
    323                      return( ret );
    324          
    325                  input += 128;
   \                     ??mbedtls_sha512_update_ret_5: (+1)
   \       0x72   0xF108 0x0880      ADD      R8,R8,#+128
    326                  ilen  -= 128;
   \       0x76   0x3C80             SUBS     R4,R4,#+128
   \                     ??mbedtls_sha512_update_ret_3: (+1)
   \       0x78   0x2C80             CMP      R4,#+128
   \       0x7A   0xD306             BCC.N    ??mbedtls_sha512_update_ret_6
   \       0x7C   0x4641             MOV      R1,R8
   \       0x7E   0x4630             MOV      R0,R6
   \       0x80   0x....'....        BL       mbedtls_internal_sha512_process
   \       0x84   0x2800             CMP      R0,#+0
   \       0x86   0xD0F4             BEQ.N    ??mbedtls_sha512_update_ret_5
   \       0x88   0xE008             B.N      ??mbedtls_sha512_update_ret_4
    327              }
    328          
    329              if( ilen > 0 )
   \                     ??mbedtls_sha512_update_ret_6: (+1)
   \       0x8A   0x2C00             CMP      R4,#+0
   \       0x8C   0xD005             BEQ.N    ??mbedtls_sha512_update_ret_0
    330                  memcpy( (void *) (ctx->buffer + left), input, ilen );
   \       0x8E   0x4622             MOV      R2,R4
   \       0x90   0x4641             MOV      R1,R8
   \       0x92   0x1970             ADDS     R0,R6,R5
   \       0x94   0x3050             ADDS     R0,R0,#+80
   \       0x96   0x....'....        BL       __aeabi_memcpy
    331          
    332              return( 0 );
   \                     ??mbedtls_sha512_update_ret_0: (+1)
   \       0x9A   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_sha512_update_ret_4: (+1)
   \       0x9C   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    333          }
    334          
    335          #if !defined(MBEDTLS_DEPRECATED_REMOVED)

   \                                 In section .text, align 2, keep-with-next
    336          void mbedtls_sha512_update( mbedtls_sha512_context *ctx,
    337                                      const unsigned char *input,
    338                                      size_t ilen )
    339          {
    340              mbedtls_sha512_update_ret( ctx, input, ilen );
   \                     mbedtls_sha512_update: (+1)
   \        0x0   0x....             B.N      mbedtls_sha512_update_ret
    341          }
    342          #endif
    343          
    344          /*
    345           * SHA-512 final digest
    346           */

   \                                 In section .text, align 2, keep-with-next
    347          int mbedtls_sha512_finish_ret( mbedtls_sha512_context *ctx,
    348                                         unsigned char output[64] )
    349          {
   \                     mbedtls_sha512_finish_ret: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
    350              int ret;
    351              unsigned used;
    352              uint64_t high, low;
    353          
    354              /*
    355               * Add padding: 0x80 then 0x00 until 16 bytes remain for the length
    356               */
    357              used = ctx->total[0] & 0x7F;
   \        0x6   0x7820             LDRB     R0,[R4, #+0]
   \        0x8   0xF000 0x007F      AND      R0,R0,#0x7F
    358          
    359              ctx->buffer[used++] = 0x80;
   \        0xC   0x2180             MOVS     R1,#+128
   \        0xE   0x1822             ADDS     R2,R4,R0
   \       0x10   0xF882 0x1050      STRB     R1,[R2, #+80]
   \       0x14   0x1C40             ADDS     R0,R0,#+1
    360          
    361              if( used <= 112 )
   \       0x16   0x2871             CMP      R0,#+113
   \       0x18   0xD207             BCS.N    ??mbedtls_sha512_finish_ret_0
    362              {
    363                  /* Enough room for padding + length in current block */
    364                  memset( ctx->buffer + used, 0, 112 - used );
   \       0x1A   0x2200             MOVS     R2,#+0
   \       0x1C   0xF1C0 0x0170      RSB      R1,R0,#+112
   \       0x20   0x4420             ADD      R0,R4,R0
   \       0x22   0x3050             ADDS     R0,R0,#+80
   \       0x24   0x....'....        BL       __aeabi_memset
    365              }
   \       0x28   0xE014             B.N      ??mbedtls_sha512_finish_ret_1
    366              else
    367              {
    368                  /* We'll need an extra block */
    369                  memset( ctx->buffer + used, 0, 128 - used );
   \                     ??mbedtls_sha512_finish_ret_0: (+1)
   \       0x2A   0x2200             MOVS     R2,#+0
   \       0x2C   0xF1C0 0x0180      RSB      R1,R0,#+128
   \       0x30   0x4420             ADD      R0,R4,R0
   \       0x32   0x3050             ADDS     R0,R0,#+80
   \       0x34   0x....'....        BL       __aeabi_memset
    370          
    371                  if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
   \       0x38   0xF104 0x0150      ADD      R1,R4,#+80
   \       0x3C   0x4620             MOV      R0,R4
   \       0x3E   0x....'....        BL       mbedtls_internal_sha512_process
   \       0x42   0x2800             CMP      R0,#+0
   \       0x44   0xF040 0x8171      BNE.W    ??mbedtls_sha512_finish_ret_2
    372                      return( ret );
    373          
    374                  memset( ctx->buffer, 0, 112 );
   \       0x48   0x2200             MOVS     R2,#+0
   \       0x4A   0x2170             MOVS     R1,#+112
   \       0x4C   0xF104 0x0050      ADD      R0,R4,#+80
   \       0x50   0x....'....        BL       __aeabi_memset4
    375              }
    376          
    377              /*
    378               * Add message length
    379               */
    380              high = ( ctx->total[0] >> 61 )
    381                   | ( ctx->total[1] <<  3 );
   \                     ??mbedtls_sha512_finish_ret_1: (+1)
   \       0x54   0xE9D4 0x0100      LDRD     R0,R1,[R4, #+0]
   \       0x58   0xE9D4 0x2302      LDRD     R2,R3,[R4, #+8]
   \       0x5C   0x00DB             LSLS     R3,R3,#+3
   \       0x5E   0xEA43 0x7352      ORR      R3,R3,R2, LSR #+29
   \       0x62   0x00D2             LSLS     R2,R2,#+3
   \       0x64   0xEA52 0x7251      ORRS     R2,R2,R1, LSR #+29
    382              low  = ( ctx->total[0] <<  3 );
   \       0x68   0xE9D4 0x6700      LDRD     R6,R7,[R4, #+0]
   \       0x6C   0x00FF             LSLS     R7,R7,#+3
   \       0x6E   0xEA47 0x7756      ORR      R7,R7,R6, LSR #+29
   \       0x72   0x00F6             LSLS     R6,R6,#+3
    383          
    384              PUT_UINT64_BE( high, ctx->buffer, 112 );
   \       0x74   0x4619             MOV      R1,R3
   \       0x76   0x0E08             LSRS     R0,R1,#+24
   \       0x78   0xF884 0x00C0      STRB     R0,[R4, #+192]
   \       0x7C   0x0C08             LSRS     R0,R1,#+16
   \       0x7E   0xF884 0x00C1      STRB     R0,[R4, #+193]
   \       0x82   0x0A08             LSRS     R0,R1,#+8
   \       0x84   0xF884 0x00C2      STRB     R0,[R4, #+194]
   \       0x88   0xF884 0x30C3      STRB     R3,[R4, #+195]
   \       0x8C   0x4610             MOV      R0,R2
   \       0x8E   0x0E00             LSRS     R0,R0,#+24
   \       0x90   0xF884 0x00C4      STRB     R0,[R4, #+196]
   \       0x94   0x4610             MOV      R0,R2
   \       0x96   0x0C00             LSRS     R0,R0,#+16
   \       0x98   0xF884 0x00C5      STRB     R0,[R4, #+197]
   \       0x9C   0x4610             MOV      R0,R2
   \       0x9E   0xB280             UXTH     R0,R0
   \       0xA0   0x0A00             LSRS     R0,R0,#+8
   \       0xA2   0xF884 0x00C6      STRB     R0,[R4, #+198]
   \       0xA6   0xF884 0x20C7      STRB     R2,[R4, #+199]
    385              PUT_UINT64_BE( low,  ctx->buffer, 120 );
   \       0xAA   0x4639             MOV      R1,R7
   \       0xAC   0x0E08             LSRS     R0,R1,#+24
   \       0xAE   0xF884 0x00C8      STRB     R0,[R4, #+200]
   \       0xB2   0x0C08             LSRS     R0,R1,#+16
   \       0xB4   0xF884 0x00C9      STRB     R0,[R4, #+201]
   \       0xB8   0x0A08             LSRS     R0,R1,#+8
   \       0xBA   0xF884 0x00CA      STRB     R0,[R4, #+202]
   \       0xBE   0xF884 0x70CB      STRB     R7,[R4, #+203]
   \       0xC2   0x4630             MOV      R0,R6
   \       0xC4   0x0E00             LSRS     R0,R0,#+24
   \       0xC6   0xF884 0x00CC      STRB     R0,[R4, #+204]
   \       0xCA   0x4630             MOV      R0,R6
   \       0xCC   0x0C00             LSRS     R0,R0,#+16
   \       0xCE   0xF884 0x00CD      STRB     R0,[R4, #+205]
   \       0xD2   0x4630             MOV      R0,R6
   \       0xD4   0xB280             UXTH     R0,R0
   \       0xD6   0x0A00             LSRS     R0,R0,#+8
   \       0xD8   0xF884 0x00CE      STRB     R0,[R4, #+206]
   \       0xDC   0xF884 0x60CF      STRB     R6,[R4, #+207]
    386          
    387              if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
   \       0xE0   0xF104 0x0150      ADD      R1,R4,#+80
   \       0xE4   0x4620             MOV      R0,R4
   \       0xE6   0x....'....        BL       mbedtls_internal_sha512_process
   \       0xEA   0x2800             CMP      R0,#+0
   \       0xEC   0xF040 0x811D      BNE.W    ??mbedtls_sha512_finish_ret_2
    388                  return( ret );
    389          
    390              /*
    391               * Output final state
    392               */
    393              PUT_UINT64_BE( ctx->state[0], output,  0 );
   \       0xF0   0xE9D4 0x0104      LDRD     R0,R1,[R4, #+16]
   \       0xF4   0x0E08             LSRS     R0,R1,#+24
   \       0xF6   0x7028             STRB     R0,[R5, #+0]
   \       0xF8   0xE9D4 0x0104      LDRD     R0,R1,[R4, #+16]
   \       0xFC   0x0C08             LSRS     R0,R1,#+16
   \       0xFE   0x7068             STRB     R0,[R5, #+1]
   \      0x100   0xE9D4 0x0104      LDRD     R0,R1,[R4, #+16]
   \      0x104   0x0A08             LSRS     R0,R1,#+8
   \      0x106   0x70A8             STRB     R0,[R5, #+2]
   \      0x108   0xE9D4 0x0104      LDRD     R0,R1,[R4, #+16]
   \      0x10C   0x70E9             STRB     R1,[R5, #+3]
   \      0x10E   0xE9D4 0x0104      LDRD     R0,R1,[R4, #+16]
   \      0x112   0x0E00             LSRS     R0,R0,#+24
   \      0x114   0x7128             STRB     R0,[R5, #+4]
   \      0x116   0xE9D4 0x0104      LDRD     R0,R1,[R4, #+16]
   \      0x11A   0x0C00             LSRS     R0,R0,#+16
   \      0x11C   0x7168             STRB     R0,[R5, #+5]
   \      0x11E   0xE9D4 0x0104      LDRD     R0,R1,[R4, #+16]
   \      0x122   0xB280             UXTH     R0,R0
   \      0x124   0x0A00             LSRS     R0,R0,#+8
   \      0x126   0x71A8             STRB     R0,[R5, #+6]
   \      0x128   0xE9D4 0x0104      LDRD     R0,R1,[R4, #+16]
   \      0x12C   0x71E8             STRB     R0,[R5, #+7]
    394              PUT_UINT64_BE( ctx->state[1], output,  8 );
   \      0x12E   0xE9D4 0x0106      LDRD     R0,R1,[R4, #+24]
   \      0x132   0x0E08             LSRS     R0,R1,#+24
   \      0x134   0x7228             STRB     R0,[R5, #+8]
   \      0x136   0xE9D4 0x0106      LDRD     R0,R1,[R4, #+24]
   \      0x13A   0x0C08             LSRS     R0,R1,#+16
   \      0x13C   0x7268             STRB     R0,[R5, #+9]
   \      0x13E   0xE9D4 0x0106      LDRD     R0,R1,[R4, #+24]
   \      0x142   0x0A08             LSRS     R0,R1,#+8
   \      0x144   0x72A8             STRB     R0,[R5, #+10]
   \      0x146   0xE9D4 0x0106      LDRD     R0,R1,[R4, #+24]
   \      0x14A   0x72E9             STRB     R1,[R5, #+11]
   \      0x14C   0xE9D4 0x0106      LDRD     R0,R1,[R4, #+24]
   \      0x150   0x0E00             LSRS     R0,R0,#+24
   \      0x152   0x7328             STRB     R0,[R5, #+12]
   \      0x154   0xE9D4 0x0106      LDRD     R0,R1,[R4, #+24]
   \      0x158   0x0C00             LSRS     R0,R0,#+16
   \      0x15A   0x7368             STRB     R0,[R5, #+13]
   \      0x15C   0xE9D4 0x0106      LDRD     R0,R1,[R4, #+24]
   \      0x160   0xB280             UXTH     R0,R0
   \      0x162   0x0A00             LSRS     R0,R0,#+8
   \      0x164   0x73A8             STRB     R0,[R5, #+14]
   \      0x166   0xE9D4 0x0106      LDRD     R0,R1,[R4, #+24]
   \      0x16A   0x73E8             STRB     R0,[R5, #+15]
    395              PUT_UINT64_BE( ctx->state[2], output, 16 );
   \      0x16C   0xE9D4 0x0108      LDRD     R0,R1,[R4, #+32]
   \      0x170   0x0E08             LSRS     R0,R1,#+24
   \      0x172   0x7428             STRB     R0,[R5, #+16]
   \      0x174   0xE9D4 0x0108      LDRD     R0,R1,[R4, #+32]
   \      0x178   0x0C08             LSRS     R0,R1,#+16
   \      0x17A   0x7468             STRB     R0,[R5, #+17]
   \      0x17C   0xE9D4 0x0108      LDRD     R0,R1,[R4, #+32]
   \      0x180   0x0A08             LSRS     R0,R1,#+8
   \      0x182   0x74A8             STRB     R0,[R5, #+18]
   \      0x184   0xE9D4 0x0108      LDRD     R0,R1,[R4, #+32]
   \      0x188   0x74E9             STRB     R1,[R5, #+19]
   \      0x18A   0xE9D4 0x0108      LDRD     R0,R1,[R4, #+32]
   \      0x18E   0x0E00             LSRS     R0,R0,#+24
   \      0x190   0x7528             STRB     R0,[R5, #+20]
   \      0x192   0xE9D4 0x0108      LDRD     R0,R1,[R4, #+32]
   \      0x196   0x0C00             LSRS     R0,R0,#+16
   \      0x198   0x7568             STRB     R0,[R5, #+21]
   \      0x19A   0xE9D4 0x0108      LDRD     R0,R1,[R4, #+32]
   \      0x19E   0xB280             UXTH     R0,R0
   \      0x1A0   0x0A00             LSRS     R0,R0,#+8
   \      0x1A2   0x75A8             STRB     R0,[R5, #+22]
   \      0x1A4   0xE9D4 0x0108      LDRD     R0,R1,[R4, #+32]
   \      0x1A8   0x75E8             STRB     R0,[R5, #+23]
    396              PUT_UINT64_BE( ctx->state[3], output, 24 );
   \      0x1AA   0xE9D4 0x010A      LDRD     R0,R1,[R4, #+40]
   \      0x1AE   0x0E08             LSRS     R0,R1,#+24
   \      0x1B0   0x7628             STRB     R0,[R5, #+24]
   \      0x1B2   0xE9D4 0x010A      LDRD     R0,R1,[R4, #+40]
   \      0x1B6   0x0C08             LSRS     R0,R1,#+16
   \      0x1B8   0x7668             STRB     R0,[R5, #+25]
   \      0x1BA   0xE9D4 0x010A      LDRD     R0,R1,[R4, #+40]
   \      0x1BE   0x0A08             LSRS     R0,R1,#+8
   \      0x1C0   0x76A8             STRB     R0,[R5, #+26]
   \      0x1C2   0xE9D4 0x010A      LDRD     R0,R1,[R4, #+40]
   \      0x1C6   0x76E9             STRB     R1,[R5, #+27]
   \      0x1C8   0xE9D4 0x010A      LDRD     R0,R1,[R4, #+40]
   \      0x1CC   0x0E00             LSRS     R0,R0,#+24
   \      0x1CE   0x7728             STRB     R0,[R5, #+28]
   \      0x1D0   0xE9D4 0x010A      LDRD     R0,R1,[R4, #+40]
   \      0x1D4   0x0C00             LSRS     R0,R0,#+16
   \      0x1D6   0x7768             STRB     R0,[R5, #+29]
   \      0x1D8   0xE9D4 0x010A      LDRD     R0,R1,[R4, #+40]
   \      0x1DC   0xB280             UXTH     R0,R0
   \      0x1DE   0x0A00             LSRS     R0,R0,#+8
   \      0x1E0   0x77A8             STRB     R0,[R5, #+30]
   \      0x1E2   0xE9D4 0x010A      LDRD     R0,R1,[R4, #+40]
   \      0x1E6   0x77E8             STRB     R0,[R5, #+31]
    397              PUT_UINT64_BE( ctx->state[4], output, 32 );
   \      0x1E8   0xE9D4 0x010C      LDRD     R0,R1,[R4, #+48]
   \      0x1EC   0x0E08             LSRS     R0,R1,#+24
   \      0x1EE   0xF885 0x0020      STRB     R0,[R5, #+32]
   \      0x1F2   0xE9D4 0x010C      LDRD     R0,R1,[R4, #+48]
   \      0x1F6   0x0C08             LSRS     R0,R1,#+16
   \      0x1F8   0xF885 0x0021      STRB     R0,[R5, #+33]
   \      0x1FC   0xE9D4 0x010C      LDRD     R0,R1,[R4, #+48]
   \      0x200   0x0A08             LSRS     R0,R1,#+8
   \      0x202   0xF885 0x0022      STRB     R0,[R5, #+34]
   \      0x206   0xE9D4 0x010C      LDRD     R0,R1,[R4, #+48]
   \      0x20A   0xF885 0x1023      STRB     R1,[R5, #+35]
   \      0x20E   0xE9D4 0x010C      LDRD     R0,R1,[R4, #+48]
   \      0x212   0x0E00             LSRS     R0,R0,#+24
   \      0x214   0xF885 0x0024      STRB     R0,[R5, #+36]
   \      0x218   0xE9D4 0x010C      LDRD     R0,R1,[R4, #+48]
   \      0x21C   0x0C00             LSRS     R0,R0,#+16
   \      0x21E   0xF885 0x0025      STRB     R0,[R5, #+37]
   \      0x222   0xE9D4 0x010C      LDRD     R0,R1,[R4, #+48]
   \      0x226   0xB280             UXTH     R0,R0
   \      0x228   0x0A00             LSRS     R0,R0,#+8
   \      0x22A   0xF885 0x0026      STRB     R0,[R5, #+38]
   \      0x22E   0xE9D4 0x010C      LDRD     R0,R1,[R4, #+48]
   \      0x232   0xF885 0x0027      STRB     R0,[R5, #+39]
    398              PUT_UINT64_BE( ctx->state[5], output, 40 );
   \      0x236   0xE9D4 0x010E      LDRD     R0,R1,[R4, #+56]
   \      0x23A   0x0E08             LSRS     R0,R1,#+24
   \      0x23C   0xF885 0x0028      STRB     R0,[R5, #+40]
   \      0x240   0xE9D4 0x010E      LDRD     R0,R1,[R4, #+56]
   \      0x244   0x0C08             LSRS     R0,R1,#+16
   \      0x246   0xF885 0x0029      STRB     R0,[R5, #+41]
   \      0x24A   0xE9D4 0x010E      LDRD     R0,R1,[R4, #+56]
   \      0x24E   0x0A08             LSRS     R0,R1,#+8
   \      0x250   0xF885 0x002A      STRB     R0,[R5, #+42]
   \      0x254   0xE9D4 0x010E      LDRD     R0,R1,[R4, #+56]
   \      0x258   0xF885 0x102B      STRB     R1,[R5, #+43]
   \      0x25C   0xE9D4 0x010E      LDRD     R0,R1,[R4, #+56]
   \      0x260   0x0E00             LSRS     R0,R0,#+24
   \      0x262   0xF885 0x002C      STRB     R0,[R5, #+44]
   \      0x266   0xE9D4 0x010E      LDRD     R0,R1,[R4, #+56]
   \      0x26A   0x0C00             LSRS     R0,R0,#+16
   \      0x26C   0xF885 0x002D      STRB     R0,[R5, #+45]
   \      0x270   0xE9D4 0x010E      LDRD     R0,R1,[R4, #+56]
   \      0x274   0xB280             UXTH     R0,R0
   \      0x276   0x0A00             LSRS     R0,R0,#+8
   \      0x278   0xF885 0x002E      STRB     R0,[R5, #+46]
   \      0x27C   0xE9D4 0x010E      LDRD     R0,R1,[R4, #+56]
   \      0x280   0xF885 0x002F      STRB     R0,[R5, #+47]
    399          
    400              if( ctx->is384 == 0 )
   \      0x284   0xF8D4 0x00D0      LDR      R0,[R4, #+208]
   \      0x288   0x2800             CMP      R0,#+0
   \      0x28A   0xD14D             BNE.N    ??mbedtls_sha512_finish_ret_3
    401              {
    402                  PUT_UINT64_BE( ctx->state[6], output, 48 );
   \      0x28C   0xE9D4 0x0110      LDRD     R0,R1,[R4, #+64]
   \      0x290   0x0E08             LSRS     R0,R1,#+24
   \      0x292   0xF885 0x0030      STRB     R0,[R5, #+48]
   \      0x296   0xE9D4 0x0110      LDRD     R0,R1,[R4, #+64]
   \      0x29A   0x0C08             LSRS     R0,R1,#+16
   \      0x29C   0xF885 0x0031      STRB     R0,[R5, #+49]
   \      0x2A0   0xE9D4 0x0110      LDRD     R0,R1,[R4, #+64]
   \      0x2A4   0x0A08             LSRS     R0,R1,#+8
   \      0x2A6   0xF885 0x0032      STRB     R0,[R5, #+50]
   \      0x2AA   0xE9D4 0x0110      LDRD     R0,R1,[R4, #+64]
   \      0x2AE   0xF885 0x1033      STRB     R1,[R5, #+51]
   \      0x2B2   0xE9D4 0x0110      LDRD     R0,R1,[R4, #+64]
   \      0x2B6   0x0E00             LSRS     R0,R0,#+24
   \      0x2B8   0xF885 0x0034      STRB     R0,[R5, #+52]
   \      0x2BC   0xE9D4 0x0110      LDRD     R0,R1,[R4, #+64]
   \      0x2C0   0x0C00             LSRS     R0,R0,#+16
   \      0x2C2   0xF885 0x0035      STRB     R0,[R5, #+53]
   \      0x2C6   0xE9D4 0x0110      LDRD     R0,R1,[R4, #+64]
   \      0x2CA   0xB280             UXTH     R0,R0
   \      0x2CC   0x0A00             LSRS     R0,R0,#+8
   \      0x2CE   0xF885 0x0036      STRB     R0,[R5, #+54]
   \      0x2D2   0xE9D4 0x0110      LDRD     R0,R1,[R4, #+64]
   \      0x2D6   0xF885 0x0037      STRB     R0,[R5, #+55]
    403                  PUT_UINT64_BE( ctx->state[7], output, 56 );
   \      0x2DA   0xE9D4 0x0112      LDRD     R0,R1,[R4, #+72]
   \      0x2DE   0x0E08             LSRS     R0,R1,#+24
   \      0x2E0   0xF885 0x0038      STRB     R0,[R5, #+56]
   \      0x2E4   0xE9D4 0x0112      LDRD     R0,R1,[R4, #+72]
   \      0x2E8   0x0C08             LSRS     R0,R1,#+16
   \      0x2EA   0xF885 0x0039      STRB     R0,[R5, #+57]
   \      0x2EE   0xE9D4 0x0112      LDRD     R0,R1,[R4, #+72]
   \      0x2F2   0x0A08             LSRS     R0,R1,#+8
   \      0x2F4   0xF885 0x003A      STRB     R0,[R5, #+58]
   \      0x2F8   0xE9D4 0x0112      LDRD     R0,R1,[R4, #+72]
   \      0x2FC   0xF885 0x103B      STRB     R1,[R5, #+59]
   \      0x300   0xE9D4 0x0112      LDRD     R0,R1,[R4, #+72]
   \      0x304   0x0E00             LSRS     R0,R0,#+24
   \      0x306   0xF885 0x003C      STRB     R0,[R5, #+60]
   \      0x30A   0xE9D4 0x0112      LDRD     R0,R1,[R4, #+72]
   \      0x30E   0x0C00             LSRS     R0,R0,#+16
   \      0x310   0xF885 0x003D      STRB     R0,[R5, #+61]
   \      0x314   0xE9D4 0x0112      LDRD     R0,R1,[R4, #+72]
   \      0x318   0xB280             UXTH     R0,R0
   \      0x31A   0x0A00             LSRS     R0,R0,#+8
   \      0x31C   0xF885 0x003E      STRB     R0,[R5, #+62]
   \      0x320   0xE9D4 0x0112      LDRD     R0,R1,[R4, #+72]
   \      0x324   0xF885 0x003F      STRB     R0,[R5, #+63]
    404              }
    405          
    406              return( 0 );
   \                     ??mbedtls_sha512_finish_ret_3: (+1)
   \      0x328   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_sha512_finish_ret_2: (+1)
   \      0x32A   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    407          }
    408          
    409          #if !defined(MBEDTLS_DEPRECATED_REMOVED)

   \                                 In section .text, align 2, keep-with-next
    410          void mbedtls_sha512_finish( mbedtls_sha512_context *ctx,
    411                                      unsigned char output[64] )
    412          {
    413              mbedtls_sha512_finish_ret( ctx, output );
   \                     mbedtls_sha512_finish: (+1)
   \        0x0   0x....             B.N      mbedtls_sha512_finish_ret
    414          }
    415          #endif
    416          
    417          #endif /* !MBEDTLS_SHA512_ALT */
    418          
    419          /*
    420           * output = SHA-512( input buffer )
    421           */

   \                                 In section .text, align 2, keep-with-next
    422          int mbedtls_sha512_ret( const unsigned char *input,
    423                              size_t ilen,
    424                              unsigned char output[64],
    425                              int is384 )
    426          {
   \                     mbedtls_sha512_ret: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0xB0B6             SUB      SP,SP,#+216
   \        0x4   0x4605             MOV      R5,R0
   \        0x6   0x460E             MOV      R6,R1
   \        0x8   0x4617             MOV      R7,R2
   \        0xA   0x461C             MOV      R4,R3
    427              int ret;
    428              mbedtls_sha512_context ctx;
    429          
    430              mbedtls_sha512_init( &ctx );
   \        0xC   0x4668             MOV      R0,SP
   \        0xE   0x....'....        BL       mbedtls_sha512_init
    431          
    432              if( ( ret = mbedtls_sha512_starts_ret( &ctx, is384 ) ) != 0 )
   \       0x12   0x4621             MOV      R1,R4
   \       0x14   0x4668             MOV      R0,SP
   \       0x16   0x....'....        BL       mbedtls_sha512_starts_ret
   \       0x1A   0x0004             MOVS     R4,R0
   \       0x1C   0xD10B             BNE.N    ??mbedtls_sha512_ret_0
    433                  goto exit;
    434          
    435              if( ( ret = mbedtls_sha512_update_ret( &ctx, input, ilen ) ) != 0 )
   \       0x1E   0x4632             MOV      R2,R6
   \       0x20   0x4629             MOV      R1,R5
   \       0x22   0x4668             MOV      R0,SP
   \       0x24   0x....'....        BL       mbedtls_sha512_update_ret
   \       0x28   0x0004             MOVS     R4,R0
   \       0x2A   0xD104             BNE.N    ??mbedtls_sha512_ret_0
    436                  goto exit;
    437          
    438              if( ( ret = mbedtls_sha512_finish_ret( &ctx, output ) ) != 0 )
   \       0x2C   0x4639             MOV      R1,R7
   \       0x2E   0x4668             MOV      R0,SP
   \       0x30   0x....'....        BL       mbedtls_sha512_finish_ret
   \       0x34   0x4604             MOV      R4,R0
    439                  goto exit;
    440          
    441          exit:
    442              mbedtls_sha512_free( &ctx );
   \                     ??mbedtls_sha512_ret_0: (+1)
   \       0x36   0x4668             MOV      R0,SP
   \       0x38   0x....'....        BL       mbedtls_sha512_free
    443          
    444              return( ret );
   \       0x3C   0x4620             MOV      R0,R4
   \       0x3E   0xB037             ADD      SP,SP,#+220
   \       0x40   0xBDF0             POP      {R4-R7,PC}       ;; return
    445          }
    446          
    447          #if !defined(MBEDTLS_DEPRECATED_REMOVED)

   \                                 In section .text, align 2, keep-with-next
    448          void mbedtls_sha512( const unsigned char *input,
    449                               size_t ilen,
    450                               unsigned char output[64],
    451                               int is384 )
    452          {
    453              mbedtls_sha512_ret( input, ilen, output, is384 );
   \                     mbedtls_sha512: (+1)
   \        0x0   0x....             B.N      mbedtls_sha512_ret
    454          }
    455          #endif
    456          
    457          #if defined(MBEDTLS_SELF_TEST)
    458          
    459          /*
    460           * FIPS-180-2 test vectors
    461           */

   \                                 In section .rodata, align 4
    462          static const unsigned char sha512_test_buf[3][113] =
   \                     sha512_test_buf:
   \        0x0   0x61 0x62          DC8 "abc"
   \              0x63 0x00    
   \        0x4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \       0x14   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \       0x24   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \       0x34   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \       0x44   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \       0x54   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \       0x64   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \       0x71   0x61 0x62          DC8 61H, 62H, 63H, 64H, 65H, 66H, 67H, 68H
   \              0x63 0x64    
   \              0x65 0x66    
   \              0x67 0x68    
   \       0x79   0x62 0x63          DC8 62H, 63H, 64H, 65H, 66H, 67H, 68H, 69H
   \              0x64 0x65    
   \              0x66 0x67    
   \              0x68 0x69    
   \       0x81   0x63 0x64          DC8 63H, 64H, 65H, 66H, 67H, 68H, 69H, 6AH
   \              0x65 0x66    
   \              0x67 0x68    
   \              0x69 0x6A    
   \       0x89   0x64 0x65          DC8 64H, 65H, 66H, 67H, 68H, 69H, 6AH, 6BH
   \              0x66 0x67    
   \              0x68 0x69    
   \              0x6A 0x6B    
   \       0x91   0x65 0x66          DC8 65H, 66H, 67H, 68H, 69H, 6AH, 6BH, 6CH
   \              0x67 0x68    
   \              0x69 0x6A    
   \              0x6B 0x6C    
   \       0x99   0x66 0x67          DC8 66H, 67H, 68H, 69H, 6AH, 6BH, 6CH, 6DH
   \              0x68 0x69    
   \              0x6A 0x6B    
   \              0x6C 0x6D    
   \       0xA1   0x67 0x68          DC8 67H, 68H, 69H, 6AH, 6BH, 6CH, 6DH, 6EH
   \              0x69 0x6A    
   \              0x6B 0x6C    
   \              0x6D 0x6E    
   \       0xA9   0x68 0x69          DC8 68H, 69H, 6AH, 6BH, 6CH, 6DH, 6EH, 6FH
   \              0x6A 0x6B    
   \              0x6C 0x6D    
   \              0x6E 0x6F    
   \       0xB1   0x69 0x6A          DC8 69H, 6AH, 6BH, 6CH, 6DH, 6EH, 6FH, 70H
   \              0x6B 0x6C    
   \              0x6D 0x6E    
   \              0x6F 0x70    
   \       0xB9   0x6A 0x6B          DC8 6AH, 6BH, 6CH, 6DH, 6EH, 6FH, 70H, 71H
   \              0x6C 0x6D    
   \              0x6E 0x6F    
   \              0x70 0x71    
   \       0xC1   0x6B 0x6C          DC8 6BH, 6CH, 6DH, 6EH, 6FH, 70H, 71H, 72H
   \              0x6D 0x6E    
   \              0x6F 0x70    
   \              0x71 0x72    
   \       0xC9   0x6C 0x6D          DC8 6CH, 6DH, 6EH, 6FH, 70H, 71H, 72H, 73H
   \              0x6E 0x6F    
   \              0x70 0x71    
   \              0x72 0x73    
   \       0xD1   0x6D 0x6E          DC8 6DH, 6EH, 6FH, 70H, 71H, 72H, 73H, 74H
   \              0x6F 0x70    
   \              0x71 0x72    
   \              0x73 0x74    
   \       0xD9   0x6E 0x6F          DC8 6EH, 6FH, 70H, 71H, 72H, 73H, 74H, 75H
   \              0x70 0x71    
   \              0x72 0x73    
   \              0x74 0x75    
   \       0xE1   0x00               DC8 0
   \       0xE2   0x00               DC8 ""
   \       0xE3   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \       0xF3   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x103   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x113   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x123   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x133   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x143   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
    463          {
    464              { "abc" },
    465              { "abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmn"
    466                "hijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu" },
    467              { "" }
    468          };
    469          

   \                                 In section .rodata, align 4
    470          static const size_t sha512_test_buflen[3] =
   \                     sha512_test_buflen:
   \        0x0   0x0000'0003        DC32 3, 112, 1000
   \              0x0000'0070  
   \              0x0000'03E8  
    471          {
    472              3, 112, 1000
    473          };
    474          

   \                                 In section .rodata, align 4
    475          static const unsigned char sha512_test_sum[6][64] =
   \                     sha512_test_sum:
   \        0x0   0xCB 0x00          DC8 203, 0, 117, 63, 69, 163, 94, 139, 181, 160, 61, 105, 154, 198, 80
   \              0x75 0x3F    
   \              0x45 0xA3    
   \              0x5E 0x8B    
   \              0xB5 0xA0    
   \              0x3D 0x69    
   \              0x9A 0xC6    
   \              0x50         
   \        0xF   0x07 0x27          DC8 7, 39, 44, 50, 171, 14, 222, 209, 99, 26, 139, 96, 90, 67, 255, 91
   \              0x2C 0x32    
   \              0xAB 0x0E    
   \              0xDE 0xD1    
   \              0x63 0x1A    
   \              0x8B 0x60    
   \              0x5A 0x43    
   \              0xFF 0x5B    
   \       0x1F   0xED 0x80          DC8 237, 128, 134, 7, 43, 161, 231, 204, 35, 88, 186, 236, 161, 52, 200
   \              0x86 0x07    
   \              0x2B 0xA1    
   \              0xE7 0xCC    
   \              0x23 0x58    
   \              0xBA 0xEC    
   \              0xA1 0x34    
   \              0xC8         
   \       0x2E   0x25 0xA7          DC8 37, 167, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 51, 12
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x09 0x33    
   \              0x0C         
   \       0x43   0x33 0xF7          DC8 51, 247, 17, 71, 232, 61, 25, 47, 199, 130, 205, 27, 71, 83, 17, 27
   \              0x11 0x47    
   \              0xE8 0x3D    
   \              0x19 0x2F    
   \              0xC7 0x82    
   \              0xCD 0x1B    
   \              0x47 0x53    
   \              0x11 0x1B    
   \       0x53   0x17 0x3B          DC8 23, 59, 59, 5, 210, 47, 160, 128, 134, 227, 176, 247, 18, 252, 199
   \              0x3B 0x05    
   \              0xD2 0x2F    
   \              0xA0 0x80    
   \              0x86 0xE3    
   \              0xB0 0xF7    
   \              0x12 0xFC    
   \              0xC7         
   \       0x62   0xC7 0x1A          DC8 199, 26, 85, 126, 45, 185, 102, 195, 233, 250, 145, 116, 96, 57, 0
   \              0x55 0x7E    
   \              0x2D 0xB9    
   \              0x66 0xC3    
   \              0xE9 0xFA    
   \              0x91 0x74    
   \              0x60 0x39    
   \              0x00         
   \       0x71   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 157, 14, 24, 9, 113
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x9D    
   \              0x0E 0x18    
   \              0x09 0x71    
   \       0x85   0x64 0x74          DC8 100, 116, 203, 8, 110, 131, 78, 49, 10, 74, 28, 237, 20, 158, 156
   \              0xCB 0x08    
   \              0x6E 0x83    
   \              0x4E 0x31    
   \              0x0A 0x4A    
   \              0x1C 0xED    
   \              0x14 0x9E    
   \              0x9C         
   \       0x94   0x00 0xF2          DC8 0, 242, 72, 82, 121, 114, 206, 197, 112, 76, 42, 91, 7, 184, 179
   \              0x48 0x52    
   \              0x79 0x72    
   \              0xCE 0xC5    
   \              0x70 0x4C    
   \              0x2A 0x5B    
   \              0x07 0xB8    
   \              0xB3         
   \       0xA3   0xDC 0x38          DC8 220, 56, 236, 196, 235, 174, 151, 221, 216, 127, 61, 137, 133, 0, 0
   \              0xEC 0xC4    
   \              0xEB 0xAE    
   \              0x97 0xDD    
   \              0xD8 0x7F    
   \              0x3D 0x89    
   \              0x85 0x00    
   \              0x00         
   \       0xB2   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 221, 175, 53, 161, 147
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0xDD 0xAF    
   \              0x35 0xA1    
   \              0x93         
   \       0xC5   0x61 0x7A          DC8 97, 122, 186, 204, 65, 115, 73, 174, 32, 65, 49, 18, 230, 250, 78
   \              0xBA 0xCC    
   \              0x41 0x73    
   \              0x49 0xAE    
   \              0x20 0x41    
   \              0x31 0x12    
   \              0xE6 0xFA    
   \              0x4E         
   \       0xD4   0x89 0xA9          DC8 137, 169, 126, 162, 10, 158, 238, 230, 75, 85, 211, 154, 33, 146
   \              0x7E 0xA2    
   \              0x0A 0x9E    
   \              0xEE 0xE6    
   \              0x4B 0x55    
   \              0xD3 0x9A    
   \              0x21 0x92    
   \       0xE2   0x99 0x2A          DC8 153, 42, 39, 79, 193, 168, 54, 186, 60, 35, 163, 254, 235, 189, 69
   \              0x27 0x4F    
   \              0xC1 0xA8    
   \              0x36 0xBA    
   \              0x3C 0x23    
   \              0xA3 0xFE    
   \              0xEB 0xBD    
   \              0x45         
   \       0xF1   0x4D 0x44          DC8 77, 68, 35, 100, 60, 232, 14, 42, 154, 201, 79, 165, 76, 164, 159
   \              0x23 0x64    
   \              0x3C 0xE8    
   \              0x0E 0x2A    
   \              0x9A 0xC9    
   \              0x4F 0xA5    
   \              0x4C 0xA4    
   \              0x9F         
   \      0x100   0x8E 0x95          DC8 142, 149, 155, 117, 218, 227, 19, 218, 140, 244, 247, 40, 20, 252
   \              0x9B 0x75    
   \              0xDA 0xE3    
   \              0x13 0xDA    
   \              0x8C 0xF4    
   \              0xF7 0x28    
   \              0x14 0xFC    
   \      0x10E   0x14 0x3F          DC8 20, 63, 143, 119, 121, 198, 235, 159, 127, 161, 114, 153, 174, 173
   \              0x8F 0x77    
   \              0x79 0xC6    
   \              0xEB 0x9F    
   \              0x7F 0xA1    
   \              0x72 0x99    
   \              0xAE 0xAD    
   \      0x11C   0xB6 0x88          DC8 182, 136, 144, 24, 80, 29, 40, 158, 73, 0, 247, 228, 51, 27, 153
   \              0x90 0x18    
   \              0x50 0x1D    
   \              0x28 0x9E    
   \              0x49 0x00    
   \              0xF7 0xE4    
   \              0x33 0x1B    
   \              0x99         
   \      0x12B   0xDE 0xC4          DC8 222, 196, 181, 67, 58, 199, 211, 41, 238, 182, 221, 38, 84, 94, 150
   \              0xB5 0x43    
   \              0x3A 0xC7    
   \              0xD3 0x29    
   \              0xEE 0xB6    
   \              0xDD 0x26    
   \              0x54 0x5E    
   \              0x96         
   \      0x13A   0xE5 0x5B          DC8 229, 91, 135, 75, 233, 9, 231, 24, 72, 61, 12, 231, 105, 100, 78
   \              0x87 0x4B    
   \              0xE9 0x09    
   \              0xE7 0x18    
   \              0x48 0x3D    
   \              0x0C 0xE7    
   \              0x69 0x64    
   \              0x4E         
   \      0x149   0x2E 0x42          DC8 46, 66, 199, 188, 21, 180, 99, 142, 31, 152, 177, 59, 32, 68, 40
   \              0xC7 0xBC    
   \              0x15 0xB4    
   \              0x63 0x8E    
   \              0x1F 0x98    
   \              0xB1 0x3B    
   \              0x20 0x44    
   \              0x28         
   \      0x158   0x56 0x32          DC8 86, 50, 168, 3, 175, 169, 115, 235, 222, 15, 242, 68, 135, 126, 166
   \              0xA8 0x03    
   \              0xAF 0xA9    
   \              0x73 0xEB    
   \              0xDE 0x0F    
   \              0xF2 0x44    
   \              0x87 0x7E    
   \              0xA6         
   \      0x167   0x0A 0x4C          DC8 10, 76, 176, 67, 44, 229, 119, 195, 27, 235, 0, 156, 92, 44, 73
   \              0xB0 0x43    
   \              0x2C 0xE5    
   \              0x77 0xC3    
   \              0x1B 0xEB    
   \              0x00 0x9C    
   \              0x5C 0x2C    
   \              0x49         
   \      0x176   0xAA 0x2E          DC8 170, 46, 78, 173, 178, 23, 173, 140, 192, 155
   \              0x4E 0xAD    
   \              0xB2 0x17    
   \              0xAD 0x8C    
   \              0xC0 0x9B    
    476          {
    477              /*
    478               * SHA-384 test vectors
    479               */
    480              { 0xCB, 0x00, 0x75, 0x3F, 0x45, 0xA3, 0x5E, 0x8B,
    481                0xB5, 0xA0, 0x3D, 0x69, 0x9A, 0xC6, 0x50, 0x07,
    482                0x27, 0x2C, 0x32, 0xAB, 0x0E, 0xDE, 0xD1, 0x63,
    483                0x1A, 0x8B, 0x60, 0x5A, 0x43, 0xFF, 0x5B, 0xED,
    484                0x80, 0x86, 0x07, 0x2B, 0xA1, 0xE7, 0xCC, 0x23,
    485                0x58, 0xBA, 0xEC, 0xA1, 0x34, 0xC8, 0x25, 0xA7 },
    486              { 0x09, 0x33, 0x0C, 0x33, 0xF7, 0x11, 0x47, 0xE8,
    487                0x3D, 0x19, 0x2F, 0xC7, 0x82, 0xCD, 0x1B, 0x47,
    488                0x53, 0x11, 0x1B, 0x17, 0x3B, 0x3B, 0x05, 0xD2,
    489                0x2F, 0xA0, 0x80, 0x86, 0xE3, 0xB0, 0xF7, 0x12,
    490                0xFC, 0xC7, 0xC7, 0x1A, 0x55, 0x7E, 0x2D, 0xB9,
    491                0x66, 0xC3, 0xE9, 0xFA, 0x91, 0x74, 0x60, 0x39 },
    492              { 0x9D, 0x0E, 0x18, 0x09, 0x71, 0x64, 0x74, 0xCB,
    493                0x08, 0x6E, 0x83, 0x4E, 0x31, 0x0A, 0x4A, 0x1C,
    494                0xED, 0x14, 0x9E, 0x9C, 0x00, 0xF2, 0x48, 0x52,
    495                0x79, 0x72, 0xCE, 0xC5, 0x70, 0x4C, 0x2A, 0x5B,
    496                0x07, 0xB8, 0xB3, 0xDC, 0x38, 0xEC, 0xC4, 0xEB,
    497                0xAE, 0x97, 0xDD, 0xD8, 0x7F, 0x3D, 0x89, 0x85 },
    498          
    499              /*
    500               * SHA-512 test vectors
    501               */
    502              { 0xDD, 0xAF, 0x35, 0xA1, 0x93, 0x61, 0x7A, 0xBA,
    503                0xCC, 0x41, 0x73, 0x49, 0xAE, 0x20, 0x41, 0x31,
    504                0x12, 0xE6, 0xFA, 0x4E, 0x89, 0xA9, 0x7E, 0xA2,
    505                0x0A, 0x9E, 0xEE, 0xE6, 0x4B, 0x55, 0xD3, 0x9A,
    506                0x21, 0x92, 0x99, 0x2A, 0x27, 0x4F, 0xC1, 0xA8,
    507                0x36, 0xBA, 0x3C, 0x23, 0xA3, 0xFE, 0xEB, 0xBD,
    508                0x45, 0x4D, 0x44, 0x23, 0x64, 0x3C, 0xE8, 0x0E,
    509                0x2A, 0x9A, 0xC9, 0x4F, 0xA5, 0x4C, 0xA4, 0x9F },
    510              { 0x8E, 0x95, 0x9B, 0x75, 0xDA, 0xE3, 0x13, 0xDA,
    511                0x8C, 0xF4, 0xF7, 0x28, 0x14, 0xFC, 0x14, 0x3F,
    512                0x8F, 0x77, 0x79, 0xC6, 0xEB, 0x9F, 0x7F, 0xA1,
    513                0x72, 0x99, 0xAE, 0xAD, 0xB6, 0x88, 0x90, 0x18,
    514                0x50, 0x1D, 0x28, 0x9E, 0x49, 0x00, 0xF7, 0xE4,
    515                0x33, 0x1B, 0x99, 0xDE, 0xC4, 0xB5, 0x43, 0x3A,
    516                0xC7, 0xD3, 0x29, 0xEE, 0xB6, 0xDD, 0x26, 0x54,
    517                0x5E, 0x96, 0xE5, 0x5B, 0x87, 0x4B, 0xE9, 0x09 },
    518              { 0xE7, 0x18, 0x48, 0x3D, 0x0C, 0xE7, 0x69, 0x64,
    519                0x4E, 0x2E, 0x42, 0xC7, 0xBC, 0x15, 0xB4, 0x63,
    520                0x8E, 0x1F, 0x98, 0xB1, 0x3B, 0x20, 0x44, 0x28,
    521                0x56, 0x32, 0xA8, 0x03, 0xAF, 0xA9, 0x73, 0xEB,
    522                0xDE, 0x0F, 0xF2, 0x44, 0x87, 0x7E, 0xA6, 0x0A,
    523                0x4C, 0xB0, 0x43, 0x2C, 0xE5, 0x77, 0xC3, 0x1B,
    524                0xEB, 0x00, 0x9C, 0x5C, 0x2C, 0x49, 0xAA, 0x2E,
    525                0x4E, 0xAD, 0xB2, 0x17, 0xAD, 0x8C, 0xC0, 0x9B }
    526          };
    527          
    528          /*
    529           * Checkup routine
    530           */

   \                                 In section .text, align 2, keep-with-next
    531          int mbedtls_sha512_self_test( int verbose )
    532          {
   \                     mbedtls_sha512_self_test: (+1)
   \        0x0   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \        0x4   0xB0C6             SUB      SP,SP,#+280
   \        0x6   0x4605             MOV      R5,R0
    533              int i, j, k, buflen, ret = 0;
   \        0x8   0x2400             MOVS     R4,#+0
    534              unsigned char *buf;
    535              unsigned char sha512sum[64];
    536              mbedtls_sha512_context ctx;
    537          
    538              buf = mbedtls_calloc( 1024, sizeof(unsigned char) );
   \        0xA   0x2101             MOVS     R1,#+1
   \        0xC   0xF44F 0x6080      MOV      R0,#+1024
   \       0x10   0x....'....        BL       mbedtls_calloc
   \       0x14   0x0006             MOVS     R6,R0
    539              if( NULL == buf )
   \       0x16   0xD106             BNE.N    ??mbedtls_sha512_self_test_0
    540              {
    541                  if( verbose != 0 )
   \       0x18   0x2D00             CMP      R5,#+0
   \       0x1A   0xD002             BEQ.N    ??mbedtls_sha512_self_test_1
    542                      mbedtls_printf( "Buffer allocation failed\n\r" );
   \       0x1C   0x....             LDR.N    R0,??DataTable3_1
   \       0x1E   0x....'....        BL       DbgConsole_Printf
    543          
    544                  return( 1 );
   \                     ??mbedtls_sha512_self_test_1: (+1)
   \       0x22   0x2001             MOVS     R0,#+1
   \       0x24   0xE071             B.N      ??mbedtls_sha512_self_test_2
    545              }
    546          
    547              mbedtls_sha512_init( &ctx );
   \                     ??mbedtls_sha512_self_test_0: (+1)
   \       0x26   0xA810             ADD      R0,SP,#+64
   \       0x28   0x....'....        BL       mbedtls_sha512_init
    548          
    549              for( i = 0; i < 6; i++ )
   \       0x2C   0x46A0             MOV      R8,R4
   \       0x2E   0xE018             B.N      ??mbedtls_sha512_self_test_3
    550              {
    551                  j = i % 3;
    552                  k = i < 3;
    553          
    554                  if( verbose != 0 )
    555                      mbedtls_printf( "  SHA-%d test #%d: ", 512 - k * 128, j + 1 );
    556          
    557                  if( ( ret = mbedtls_sha512_starts_ret( &ctx, k ) ) != 0 )
    558                      goto fail;
    559          
    560                  if( j == 2 )
    561                  {
    562                      memset( buf, 'a', buflen = 1000 );
    563          
    564                      for( j = 0; j < 1000; j++ )
    565                      {
    566                          ret = mbedtls_sha512_update_ret( &ctx, buf, buflen );
    567                          if( ret != 0 )
    568                              goto fail;
    569                      }
    570                  }
    571                  else
    572                  {
    573                      ret = mbedtls_sha512_update_ret( &ctx, sha512_test_buf[j],
    574                                                       sha512_test_buflen[j] );
    575                      if( ret != 0 )
    576                          goto fail;
    577                  }
    578          
    579                  if( ( ret = mbedtls_sha512_finish_ret( &ctx, sha512sum ) ) != 0 )
   \                     ??mbedtls_sha512_self_test_4: (+1)
   \       0x30   0x4669             MOV      R1,SP
   \       0x32   0xA810             ADD      R0,SP,#+64
   \       0x34   0x....'....        BL       mbedtls_sha512_finish_ret
   \       0x38   0x0004             MOVS     R4,R0
   \       0x3A   0xD15A             BNE.N    ??mbedtls_sha512_self_test_5
    580                      goto fail;
    581          
    582                  if( memcmp( sha512sum, sha512_test_sum[i], 64 - k * 16 ) != 0 )
   \       0x3C   0x013F             LSLS     R7,R7,#+4
   \       0x3E   0xF1C7 0x0740      RSB      R7,R7,#+64
   \       0x42   0x463A             MOV      R2,R7
   \       0x44   0x....             LDR.N    R0,??DataTable3_2
   \       0x46   0xEB00 0x1188      ADD      R1,R0,R8, LSL #+6
   \       0x4A   0x4668             MOV      R0,SP
   \       0x4C   0x....'....        BL       memcmp
   \       0x50   0x2800             CMP      R0,#+0
   \       0x52   0xD14D             BNE.N    ??mbedtls_sha512_self_test_6
    583                  {
    584                      ret = 1;
    585                      goto fail;
    586                  }
    587          
    588                  if( verbose != 0 )
   \       0x54   0x2D00             CMP      R5,#+0
   \       0x56   0xD002             BEQ.N    ??mbedtls_sha512_self_test_7
    589                      mbedtls_printf( "passed\n\r" );
   \       0x58   0x....             LDR.N    R0,??DataTable3_3
   \       0x5A   0x....'....        BL       DbgConsole_Printf
   \                     ??mbedtls_sha512_self_test_7: (+1)
   \       0x5E   0xF108 0x0801      ADD      R8,R8,#+1
   \                     ??mbedtls_sha512_self_test_3: (+1)
   \       0x62   0xF1B8 0x0F06      CMP      R8,#+6
   \       0x66   0xDA53             BGE.N    ??mbedtls_sha512_self_test_8
   \       0x68   0x2003             MOVS     R0,#+3
   \       0x6A   0xFB98 0xF9F0      SDIV     R9,R8,R0
   \       0x6E   0xEB09 0x0949      ADD      R9,R9,R9, LSL #+1
   \       0x72   0xEBA8 0x0909      SUB      R9,R8,R9
   \       0x76   0xF1B8 0x0F03      CMP      R8,#+3
   \       0x7A   0xDA01             BGE.N    ??mbedtls_sha512_self_test_9
   \       0x7C   0x2701             MOVS     R7,#+1
   \       0x7E   0xE000             B.N      ??mbedtls_sha512_self_test_10
   \                     ??mbedtls_sha512_self_test_9: (+1)
   \       0x80   0x2700             MOVS     R7,#+0
   \                     ??mbedtls_sha512_self_test_10: (+1)
   \       0x82   0x2D00             CMP      R5,#+0
   \       0x84   0xD007             BEQ.N    ??mbedtls_sha512_self_test_11
   \       0x86   0xF109 0x0201      ADD      R2,R9,#+1
   \       0x8A   0x01F9             LSLS     R1,R7,#+7
   \       0x8C   0xF5C1 0x7100      RSB      R1,R1,#+512
   \       0x90   0x....             LDR.N    R0,??DataTable3_4
   \       0x92   0x....'....        BL       DbgConsole_Printf
   \                     ??mbedtls_sha512_self_test_11: (+1)
   \       0x96   0x4639             MOV      R1,R7
   \       0x98   0xA810             ADD      R0,SP,#+64
   \       0x9A   0x....'....        BL       mbedtls_sha512_starts_ret
   \       0x9E   0x0004             MOVS     R4,R0
   \       0xA0   0xD127             BNE.N    ??mbedtls_sha512_self_test_5
   \       0xA2   0xF1B9 0x0F02      CMP      R9,#+2
   \       0xA6   0xD115             BNE.N    ??mbedtls_sha512_self_test_12
   \       0xA8   0x2261             MOVS     R2,#+97
   \       0xAA   0xF44F 0x717A      MOV      R1,#+1000
   \       0xAE   0x4630             MOV      R0,R6
   \       0xB0   0x....'....        BL       __aeabi_memset
   \       0xB4   0xF04F 0x0900      MOV      R9,#+0
   \                     ??mbedtls_sha512_self_test_13: (+1)
   \       0xB8   0xF5B9 0x7F7A      CMP      R9,#+1000
   \       0xBC   0xDAB8             BGE.N    ??mbedtls_sha512_self_test_4
   \       0xBE   0xF44F 0x727A      MOV      R2,#+1000
   \       0xC2   0x4631             MOV      R1,R6
   \       0xC4   0xA810             ADD      R0,SP,#+64
   \       0xC6   0x....'....        BL       mbedtls_sha512_update_ret
   \       0xCA   0x0004             MOVS     R4,R0
   \       0xCC   0xD111             BNE.N    ??mbedtls_sha512_self_test_5
   \       0xCE   0xF109 0x0901      ADD      R9,R9,#+1
   \       0xD2   0xE7F1             B.N      ??mbedtls_sha512_self_test_13
   \                     ??mbedtls_sha512_self_test_12: (+1)
   \       0xD4   0x....             LDR.N    R0,??DataTable3_5
   \       0xD6   0xF850 0x2029      LDR      R2,[R0, R9, LSL #+2]
   \       0xDA   0x....             LDR.N    R1,??DataTable3_6
   \       0xDC   0x2071             MOVS     R0,#+113
   \       0xDE   0xFB00 0xF909      MUL      R9,R0,R9
   \       0xE2   0x4449             ADD      R1,R1,R9
   \       0xE4   0xA810             ADD      R0,SP,#+64
   \       0xE6   0x....'....        BL       mbedtls_sha512_update_ret
   \       0xEA   0x0004             MOVS     R4,R0
   \       0xEC   0xD101             BNE.N    ??mbedtls_sha512_self_test_5
   \       0xEE   0xE79F             B.N      ??mbedtls_sha512_self_test_4
   \                     ??mbedtls_sha512_self_test_6: (+1)
   \       0xF0   0x2401             MOVS     R4,#+1
    590              }
    591          
    592              if( verbose != 0 )
    593                  mbedtls_printf( "\n\r" );
    594          
    595              goto exit;
    596          
    597          fail:
    598              if( verbose != 0 )
   \                     ??mbedtls_sha512_self_test_5: (+1)
   \       0xF2   0x2D00             CMP      R5,#+0
   \       0xF4   0xD002             BEQ.N    ??mbedtls_sha512_self_test_14
    599                  mbedtls_printf( "failed\n\r" );
   \       0xF6   0x....             LDR.N    R0,??DataTable3_7
   \       0xF8   0x....'....        BL       DbgConsole_Printf
    600          
    601          exit:
    602              mbedtls_sha512_free( &ctx );
   \                     ??mbedtls_sha512_self_test_14: (+1)
   \       0xFC   0xA810             ADD      R0,SP,#+64
   \       0xFE   0x....'....        BL       mbedtls_sha512_free
    603              mbedtls_free( buf );
   \      0x102   0x4630             MOV      R0,R6
   \      0x104   0x....'....        BL       mbedtls_free
    604          
    605              return( ret );
   \      0x108   0x4620             MOV      R0,R4
   \                     ??mbedtls_sha512_self_test_2: (+1)
   \      0x10A   0xB047             ADD      SP,SP,#+284
   \      0x10C   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
   \                     ??mbedtls_sha512_self_test_8: (+1)
   \      0x110   0x2D00             CMP      R5,#+0
   \      0x112   0xD0F3             BEQ.N    ??mbedtls_sha512_self_test_14
   \      0x114   0x....             ADR.N    R0,??DataTable3  ;; 0x0A, 0x0D, 0x00, 0x00
   \      0x116   0x....'....        BL       DbgConsole_Printf
   \      0x11A   0xE7EF             B.N      ??mbedtls_sha512_self_test_14
    606          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \        0x0   0xF3BC'C908        DC32     0xf3bcc908

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \        0x0   0x6A09'E667        DC32     0x6a09e667

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \        0x0   0x84CA'A73B        DC32     0x84caa73b

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \        0x0   0xBB67'AE85        DC32     0xbb67ae85

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \        0x0   0xFE94'F82B        DC32     0xfe94f82b

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \        0x0   0x3C6E'F372        DC32     0x3c6ef372

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \        0x0   0x5F1D'36F1        DC32     0x5f1d36f1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_7:
   \        0x0   0xA54F'F53A        DC32     0xa54ff53a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_8:
   \        0x0   0xADE6'82D1        DC32     0xade682d1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_9:
   \        0x0   0x510E'527F        DC32     0x510e527f

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_10:
   \        0x0   0x2B3E'6C1F        DC32     0x2b3e6c1f

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_11:
   \        0x0   0x9B05'688C        DC32     0x9b05688c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_12:
   \        0x0   0xFB41'BD6B        DC32     0xfb41bd6b

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_13:
   \        0x0   0x1F83'D9AB        DC32     0x1f83d9ab

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_14:
   \        0x0   0x137E'2179        DC32     0x137e2179

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_15:
   \        0x0   0x5BE0'CD19        DC32     0x5be0cd19

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_16:
   \        0x0   0xC105'9ED8        DC32     0xc1059ed8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_17:
   \        0x0   0xCBBB'9D5D        DC32     0xcbbb9d5d

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_18:
   \        0x0   0x367C'D507        DC32     0x367cd507

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_19:
   \        0x0   0x629A'292A        DC32     0x629a292a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_20:
   \        0x0   0x3070'DD17        DC32     0x3070dd17

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \        0x0   0x9159'015A        DC32     0x9159015a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \        0x0   0xF70E'5939        DC32     0xf70e5939

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \        0x0   0x152F'ECD8        DC32     0x152fecd8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \        0x0   0xFFC0'0B31        DC32     0xffc00b31

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \        0x0   0x6733'2667        DC32     0x67332667

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \        0x0   0x6858'1511        DC32     0x68581511

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \        0x0   0x8EB4'4A87        DC32     0x8eb44a87

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \        0x0   0x64F9'8FA7        DC32     0x64f98fa7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \        0x0   0xDB0C'2E0D        DC32     0xdb0c2e0d

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_9:
   \        0x0   0xBEFA'4FA4        DC32     0xbefa4fa4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_10:
   \        0x0   0x47B5'481D        DC32     0x47b5481d

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_11:
   \        0x0   0x....'....        DC32     K

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \        0x0   0x0A 0x0D          DC8      0x0A, 0x0D, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \        0x0   0x....'....        DC32     sha512_test_sum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \        0x0   0x....'....        DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \        0x0   0x....'....        DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \        0x0   0x....'....        DC32     sha512_test_buflen

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \        0x0   0x....'....        DC32     sha512_test_buf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \        0x0   0x....'....        DC32     ?_4

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x42 0x75          DC8 "Buffer allocation failed\012\015"
   \              0x66 0x66    
   \              0x65 0x72    
   \              0x20 0x61    
   \              0x6C 0x6C    
   \              0x6F 0x63    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x66 0x61    
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x0A 0x0D    
   \              0x00         
   \       0x1B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_1:
   \        0x0   0x20 0x20          DC8 "  SHA-%d test #%d: "
   \              0x53 0x48    
   \              0x41 0x2D    
   \              0x25 0x64    
   \              0x20 0x74    
   \              0x65 0x73    
   \              0x74 0x20    
   \              0x23 0x25    
   \              0x64 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_2:
   \        0x0   0x70 0x61          DC8 "passed\012\015"
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x0A 0x0D    
   \              0x00         
   \        0x9   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \        0x0   0x0A 0x0D          DC8 "\012\015"
   \              0x00         
   \        0x3   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_4:
   \        0x0   0x66 0x61          DC8 "failed\012\015"
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x0A 0x0D    
   \              0x00         
   \        0x9   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    607          
    608          #endif /* MBEDTLS_SELF_TEST */
    609          
    610          #endif /* MBEDTLS_SHA512_C */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
     760   mbedtls_internal_sha512_process
       0   mbedtls_sha512
         0   -> mbedtls_sha512_ret
       0   mbedtls_sha512_clone
         0   -> __aeabi_memcpy4
       0   mbedtls_sha512_finish
         0   -> mbedtls_sha512_finish_ret
      24   mbedtls_sha512_finish_ret
        24   -> __aeabi_memset
        24   -> __aeabi_memset4
        24   -> mbedtls_internal_sha512_process
       0   mbedtls_sha512_free
         0   -> mbedtls_platform_zeroize
       0   mbedtls_sha512_init
         0   -> __aeabi_memset4
       0   mbedtls_sha512_process
         0   -> mbedtls_internal_sha512_process
     240   mbedtls_sha512_ret
       240   -> mbedtls_sha512_finish_ret
       240   -> mbedtls_sha512_free
       240   -> mbedtls_sha512_init
       240   -> mbedtls_sha512_starts_ret
       240   -> mbedtls_sha512_update_ret
     312   mbedtls_sha512_self_test
       312   -> DbgConsole_Printf
       312   -> __aeabi_memset
       312   -> mbedtls_calloc
       312   -> mbedtls_free
       312   -> mbedtls_sha512_finish_ret
       312   -> mbedtls_sha512_free
       312   -> mbedtls_sha512_init
       312   -> mbedtls_sha512_starts_ret
       312   -> mbedtls_sha512_update_ret
       312   -> memcmp
       0   mbedtls_sha512_starts
         0   -> mbedtls_sha512_starts_ret
       0   mbedtls_sha512_starts_ret
       0   mbedtls_sha512_update
         0   -> mbedtls_sha512_update_ret
      24   mbedtls_sha512_update_ret
        24   -> __aeabi_memcpy
        24   -> mbedtls_internal_sha512_process


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_10
       4  ??DataTable1_11
       4  ??DataTable1_12
       4  ??DataTable1_13
       4  ??DataTable1_14
       4  ??DataTable1_15
       4  ??DataTable1_16
       4  ??DataTable1_17
       4  ??DataTable1_18
       4  ??DataTable1_19
       4  ??DataTable1_2
       4  ??DataTable1_20
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
       4  ??DataTable1_7
       4  ??DataTable1_8
       4  ??DataTable1_9
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_10
       4  ??DataTable2_11
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable2_9
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
      28  ?_0
      20  ?_1
      12  ?_2
       4  ?_3
      12  ?_4
     640  K
    3700  mbedtls_internal_sha512_process
       2  mbedtls_sha512
       6  mbedtls_sha512_clone
       2  mbedtls_sha512_finish
     812  mbedtls_sha512_finish_ret
      12  mbedtls_sha512_free
       8  mbedtls_sha512_init
       4  mbedtls_sha512_process
      66  mbedtls_sha512_ret
     284  mbedtls_sha512_self_test
       2  mbedtls_sha512_starts
     176  mbedtls_sha512_starts_ret
       2  mbedtls_sha512_update
     160  mbedtls_sha512_update_ret
     340  sha512_test_buf
      12  sha512_test_buflen
     384  sha512_test_sum

 
 1 452 bytes in section .rodata
 5 400 bytes in section .text
 
 5 400 bytes of CODE  memory
 1 452 bytes of CONST memory

Errors: none
Warnings: none
