###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.3.193/W32 for ARM         10/Jun/2019  13:48:15
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\Development\smart_washing_machine_3080\mbedtls\library\ecdh.c
#    Command line =  
#        -f C:\Users\nxf42695\AppData\Local\Temp\1\EWC988.tmp
#        (C:\Development\smart_washing_machine_3080\mbedtls\library\ecdh.c -D
#        DEBUG -D USE_RTOS -D XIP_EXTERNAL_FLASH=1 -D XIP_BOOT_HEADER_ENABLE=1
#        -D CPU_MIMXRT1052DVL6B -D FSL_RTOS_FREE_RTOS -D PRINTF_ADVANCED_ENABLE
#        -D "MBEDTLS_CONFIG_FILE=\"ksdk_mbedtls_config.h\"" -lC
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list -lA
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list
#        --diag_suppress Pa082,Pa050 -o
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_d16 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" --preinclude
#        C:\Development\smart_washing_machine_3080/source\app_preinclude.h -I
#        C:\Development\smart_washing_machine_3080/board\ -I
#        C:\Development\smart_washing_machine_3080/source\ -I
#        C:\Development\smart_washing_machine_3080/CMSIS\ -I
#        C:\Development\smart_washing_machine_3080/amazon-freertos/freertos/portable\
#        -I C:\Development\smart_washing_machine_3080/amazon-freertos/include\
#        -I C:\Development\smart_washing_machine_3080/component/lists\ -I
#        C:\Development\smart_washing_machine_3080/component/serial_manager\ -I
#        C:\Development\smart_washing_machine_3080/component/uart\ -I
#        C:\Development\smart_washing_machine_3080/component/kv\ -I
#        C:\Development\smart_washing_machine_3080/component/kv/include\ -I
#        C:\Development\smart_washing_machine_3080/device\ -I
#        C:\Development\smart_washing_machine_3080/doc\ -I
#        C:\Development\smart_washing_machine_3080/drivers\ -I
#        C:\Development\smart_washing_machine_3080/src\ -I
#        C:\Development\smart_washing_machine_3080/startup\ -I
#        C:\Development\smart_washing_machine_3080/utilities\ -I
#        C:\Development\smart_washing_machine_3080/xip\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\atm\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_model\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_sign\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\infra\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\mqtt\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\external_libs\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\coap_cloud\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\CoAPPacket\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\server\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\os\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\awss_reset\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\mbedtls\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\ -I
#        C:\Development\smart_washing_machine_3080\mbedtls\port\ksdk\ -Om)
#    Locale       =  C
#    List file    =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list\ecdh.lst
#    Object file  =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj\ecdh.o
#
###############################################################################

C:\Development\smart_washing_machine_3080\mbedtls\library\ecdh.c
      1          /*
      2           *  Elliptic curve Diffie-Hellman
      3           *
      4           *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
      5           *  SPDX-License-Identifier: Apache-2.0
      6           *
      7           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
      8           *  not use this file except in compliance with the License.
      9           *  You may obtain a copy of the License at
     10           *
     11           *  http://www.apache.org/licenses/LICENSE-2.0
     12           *
     13           *  Unless required by applicable law or agreed to in writing, software
     14           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     15           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     16           *  See the License for the specific language governing permissions and
     17           *  limitations under the License.
     18           *
     19           *  This file is part of mbed TLS (https://tls.mbed.org)
     20           */
     21          
     22          /*
     23           * References:
     24           *
     25           * SEC1 http://www.secg.org/index.php?action=secg,docs_secg
     26           * RFC 4492
     27           */
     28          
     29          #if !defined(MBEDTLS_CONFIG_FILE)
     30          #include "mbedtls/config.h"
     31          #else
     32          #include MBEDTLS_CONFIG_FILE
     33          #endif
     34          
     35          #if defined(MBEDTLS_ECDH_C)
     36          #if !defined(MBEDTLS_ECDH_ALT)
     37          #include "mbedtls/ecdh.h"
     38          
     39          #include <string.h>
     40          
     41          #if !defined(MBEDTLS_ECDH_GEN_PUBLIC_ALT)
     42          /*
     43           * Generate public key: simple wrapper around mbedtls_ecp_gen_keypair
     44           */

   \                                 In section .text, align 2, keep-with-next
     45          int mbedtls_ecdh_gen_public( mbedtls_ecp_group *grp, mbedtls_mpi *d, mbedtls_ecp_point *Q,
     46                               int (*f_rng)(void *, unsigned char *, size_t),
     47                               void *p_rng )
     48          {
   \                     mbedtls_ecdh_gen_public: (+1)
   \        0x0   0xB51C             PUSH     {R2-R4,LR}
   \        0x2   0x9C04             LDR      R4,[SP, #+16]
     49              return mbedtls_ecp_gen_keypair( grp, d, Q, f_rng, p_rng );
   \        0x4   0x9400             STR      R4,[SP, #+0]
   \        0x6   0x....'....        BL       mbedtls_ecp_gen_keypair
   \        0xA   0xBD16             POP      {R1,R2,R4,PC}    ;; return
     50          }
     51          #endif /* MBEDTLS_ECDH_GEN_PUBLIC_ALT */
     52          
     53          #if !defined(MBEDTLS_ECDH_COMPUTE_SHARED_ALT)
     54          /*
     55           * Compute shared secret (SEC1 3.3.1)
     56           */

   \                                 In section .text, align 2, keep-with-next
     57          int mbedtls_ecdh_compute_shared( mbedtls_ecp_group *grp, mbedtls_mpi *z,
     58                                   const mbedtls_ecp_point *Q, const mbedtls_mpi *d,
     59                                   int (*f_rng)(void *, unsigned char *, size_t),
     60                                   void *p_rng )
     61          {
   \                     mbedtls_ecdh_compute_shared: (+1)
   \        0x0   0xE92D 0x41F8      PUSH     {R3-R8,LR}
   \        0x4   0xB08B             SUB      SP,SP,#+44
   \        0x6   0x4605             MOV      R5,R0
   \        0x8   0x460E             MOV      R6,R1
   \        0xA   0x4617             MOV      R7,R2
   \        0xC   0x4698             MOV      R8,R3
     62              int ret;
     63              mbedtls_ecp_point P;
     64          
     65              mbedtls_ecp_point_init( &P );
   \        0xE   0xA802             ADD      R0,SP,#+8
   \       0x10   0x....'....        BL       mbedtls_ecp_point_init
     66          
     67              /*
     68               * Make sure Q is a valid pubkey before using it
     69               */
     70              MBEDTLS_MPI_CHK( mbedtls_ecp_check_pubkey( grp, Q ) );
   \       0x14   0x4639             MOV      R1,R7
   \       0x16   0x4628             MOV      R0,R5
   \       0x18   0x....'....        BL       mbedtls_ecp_check_pubkey
   \       0x1C   0x0004             MOVS     R4,R0
   \       0x1E   0xD117             BNE.N    ??mbedtls_ecdh_compute_shared_0
   \       0x20   0x9913             LDR      R1,[SP, #+76]
   \       0x22   0x9812             LDR      R0,[SP, #+72]
     71          
     72              MBEDTLS_MPI_CHK( mbedtls_ecp_mul( grp, &P, d, Q, f_rng, p_rng ) );
   \       0x24   0x9101             STR      R1,[SP, #+4]
   \       0x26   0x9000             STR      R0,[SP, #+0]
   \       0x28   0x463B             MOV      R3,R7
   \       0x2A   0x4642             MOV      R2,R8
   \       0x2C   0xA902             ADD      R1,SP,#+8
   \       0x2E   0x4628             MOV      R0,R5
   \       0x30   0x....'....        BL       mbedtls_ecp_mul
   \       0x34   0x0004             MOVS     R4,R0
   \       0x36   0xD10B             BNE.N    ??mbedtls_ecdh_compute_shared_0
     73          
     74              if( mbedtls_ecp_is_zero( &P ) )
   \       0x38   0xA802             ADD      R0,SP,#+8
   \       0x3A   0x....'....        BL       mbedtls_ecp_is_zero
   \       0x3E   0x2800             CMP      R0,#+0
   \       0x40   0xD001             BEQ.N    ??mbedtls_ecdh_compute_shared_1
     75              {
     76                  ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
   \       0x42   0x....             LDR.N    R4,??DataTable6  ;; 0xffffb080
     77                  goto cleanup;
   \       0x44   0xE004             B.N      ??mbedtls_ecdh_compute_shared_0
     78              }
     79          
     80              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( z, &P.X ) );
   \                     ??mbedtls_ecdh_compute_shared_1: (+1)
   \       0x46   0xA902             ADD      R1,SP,#+8
   \       0x48   0x4630             MOV      R0,R6
   \       0x4A   0x....'....        BL       mbedtls_mpi_copy
   \       0x4E   0x4604             MOV      R4,R0
     81          
     82          cleanup:
     83              mbedtls_ecp_point_free( &P );
   \                     ??mbedtls_ecdh_compute_shared_0: (+1)
   \       0x50   0xA802             ADD      R0,SP,#+8
   \       0x52   0x....'....        BL       mbedtls_ecp_point_free
     84          
     85              return( ret );
   \       0x56   0x4620             MOV      R0,R4
   \       0x58   0xB00C             ADD      SP,SP,#+48
   \       0x5A   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
     86          }
     87          #endif /* MBEDTLS_ECDH_COMPUTE_SHARED_ALT */
     88          
     89          /*
     90           * Initialize context
     91           */

   \                                 In section .text, align 2, keep-with-next
     92          void mbedtls_ecdh_init( mbedtls_ecdh_context *ctx )
     93          {
     94              memset( ctx, 0, sizeof( mbedtls_ecdh_context ) );
   \                     mbedtls_ecdh_init: (+1)
   \        0x0   0x2200             MOVS     R2,#+0
   \        0x2   0xF44F 0x719A      MOV      R1,#+308
   \        0x6   0x....'....        B.W      __aeabi_memset4
     95          }
     96          
     97          /*
     98           * Free context
     99           */

   \                                 In section .text, align 2, keep-with-next
    100          void mbedtls_ecdh_free( mbedtls_ecdh_context *ctx )
    101          {
   \                     mbedtls_ecdh_free: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
    102              if( ctx == NULL )
   \        0x4   0xD01F             BEQ.N    ??mbedtls_ecdh_free_0
    103                  return;
    104          
    105              mbedtls_ecp_group_free( &ctx->grp );
   \        0x6   0x....'....        BL       mbedtls_ecp_group_free
    106              mbedtls_ecp_point_free( &ctx->Q   );
   \        0xA   0xF104 0x0088      ADD      R0,R4,#+136
   \        0xE   0x....'....        BL       mbedtls_ecp_point_free
    107              mbedtls_ecp_point_free( &ctx->Qp  );
   \       0x12   0xF104 0x00AC      ADD      R0,R4,#+172
   \       0x16   0x....'....        BL       mbedtls_ecp_point_free
    108              mbedtls_ecp_point_free( &ctx->Vi  );
   \       0x1A   0xF104 0x00E0      ADD      R0,R4,#+224
   \       0x1E   0x....'....        BL       mbedtls_ecp_point_free
    109              mbedtls_ecp_point_free( &ctx->Vf  );
   \       0x22   0xF504 0x7082      ADD      R0,R4,#+260
   \       0x26   0x....'....        BL       mbedtls_ecp_point_free
    110              mbedtls_mpi_free( &ctx->d  );
   \       0x2A   0xF104 0x007C      ADD      R0,R4,#+124
   \       0x2E   0x....'....        BL       mbedtls_mpi_free
    111              mbedtls_mpi_free( &ctx->z  );
   \       0x32   0xF104 0x00D0      ADD      R0,R4,#+208
   \       0x36   0x....'....        BL       mbedtls_mpi_free
    112              mbedtls_mpi_free( &ctx->_d );
   \       0x3A   0xF504 0x7094      ADD      R0,R4,#+296
   \       0x3E   0xE8BD 0x4010      POP      {R4,LR}
   \       0x42   0x....'....        B.W      mbedtls_mpi_free
   \                     ??mbedtls_ecdh_free_0: (+1)
   \       0x46   0xBD10             POP      {R4,PC}          ;; return
    113          }
    114          
    115          /*
    116           * Setup and write the ServerKeyExhange parameters (RFC 4492)
    117           *      struct {
    118           *          ECParameters    curve_params;
    119           *          ECPoint         public;
    120           *      } ServerECDHParams;
    121           */

   \                                 In section .text, align 2, keep-with-next
    122          int mbedtls_ecdh_make_params( mbedtls_ecdh_context *ctx, size_t *olen,
    123                                unsigned char *buf, size_t blen,
    124                                int (*f_rng)(void *, unsigned char *, size_t),
    125                                void *p_rng )
    126          {
   \                     mbedtls_ecdh_make_params: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0xB084             SUB      SP,SP,#+16
   \        0x4   0x4604             MOV      R4,R0
   \        0x6   0x460D             MOV      R5,R1
   \        0x8   0x4616             MOV      R6,R2
   \        0xA   0x461F             MOV      R7,R3
    127              int ret;
    128              size_t grp_len, pt_len;
    129          
    130              if( ctx == NULL || ctx->grp.pbits == 0 )
   \        0xC   0x2C00             CMP      R4,#+0
   \        0xE   0xD002             BEQ.N    ??mbedtls_ecdh_make_params_0
   \       0x10   0x6DA0             LDR      R0,[R4, #+88]
   \       0x12   0x2800             CMP      R0,#+0
   \       0x14   0xD101             BNE.N    ??mbedtls_ecdh_make_params_1
    131                  return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   \                     ??mbedtls_ecdh_make_params_0: (+1)
   \       0x16   0x....             LDR.N    R0,??DataTable6  ;; 0xffffb080
   \       0x18   0xE028             B.N      ??mbedtls_ecdh_make_params_2
   \                     ??mbedtls_ecdh_make_params_1: (+1)
   \       0x1A   0x980B             LDR      R0,[SP, #+44]
   \       0x1C   0x9B0A             LDR      R3,[SP, #+40]
    132          
    133              if( ( ret = mbedtls_ecdh_gen_public( &ctx->grp, &ctx->d, &ctx->Q, f_rng, p_rng ) )
    134                          != 0 )
   \       0x1E   0x9000             STR      R0,[SP, #+0]
   \       0x20   0xF104 0x0288      ADD      R2,R4,#+136
   \       0x24   0xF104 0x017C      ADD      R1,R4,#+124
   \       0x28   0x4620             MOV      R0,R4
   \       0x2A   0x....'....        BL       mbedtls_ecdh_gen_public
   \       0x2E   0x2800             CMP      R0,#+0
   \       0x30   0xD11C             BNE.N    ??mbedtls_ecdh_make_params_2
    135                  return( ret );
    136          
    137              if( ( ret = mbedtls_ecp_tls_write_group( &ctx->grp, &grp_len, buf, blen ) )
    138                          != 0 )
   \       0x32   0x463B             MOV      R3,R7
   \       0x34   0x4632             MOV      R2,R6
   \       0x36   0xA902             ADD      R1,SP,#+8
   \       0x38   0x4620             MOV      R0,R4
   \       0x3A   0x....'....        BL       mbedtls_ecp_tls_write_group
   \       0x3E   0x2800             CMP      R0,#+0
   \       0x40   0xD114             BNE.N    ??mbedtls_ecdh_make_params_2
    139                  return( ret );
    140          
    141              buf += grp_len;
    142              blen -= grp_len;
    143          
    144              if( ( ret = mbedtls_ecp_tls_write_point( &ctx->grp, &ctx->Q, ctx->point_format,
    145                                               &pt_len, buf, blen ) ) != 0 )
   \       0x42   0x9802             LDR      R0,[SP, #+8]
   \       0x44   0x1A3F             SUBS     R7,R7,R0
   \       0x46   0x9701             STR      R7,[SP, #+4]
   \       0x48   0x9802             LDR      R0,[SP, #+8]
   \       0x4A   0x4430             ADD      R0,R6,R0
   \       0x4C   0x9000             STR      R0,[SP, #+0]
   \       0x4E   0xAB03             ADD      R3,SP,#+12
   \       0x50   0xF8D4 0x20DC      LDR      R2,[R4, #+220]
   \       0x54   0xF104 0x0188      ADD      R1,R4,#+136
   \       0x58   0x4620             MOV      R0,R4
   \       0x5A   0x....'....        BL       mbedtls_ecp_tls_write_point
   \       0x5E   0x2800             CMP      R0,#+0
   \       0x60   0xD104             BNE.N    ??mbedtls_ecdh_make_params_2
    146                  return( ret );
    147          
    148              *olen = grp_len + pt_len;
   \       0x62   0x9902             LDR      R1,[SP, #+8]
   \       0x64   0x9803             LDR      R0,[SP, #+12]
   \       0x66   0x1841             ADDS     R1,R0,R1
   \       0x68   0x6029             STR      R1,[R5, #+0]
    149              return( 0 );
   \       0x6A   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_ecdh_make_params_2: (+1)
   \       0x6C   0xB005             ADD      SP,SP,#+20
   \       0x6E   0xBDF0             POP      {R4-R7,PC}       ;; return
    150          }
    151          
    152          /*
    153           * Read the ServerKeyExhange parameters (RFC 4492)
    154           *      struct {
    155           *          ECParameters    curve_params;
    156           *          ECPoint         public;
    157           *      } ServerECDHParams;
    158           */

   \                                 In section .text, align 2, keep-with-next
    159          int mbedtls_ecdh_read_params( mbedtls_ecdh_context *ctx,
    160                                const unsigned char **buf, const unsigned char *end )
    161          {
   \                     mbedtls_ecdh_read_params: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
   \        0x6   0x4616             MOV      R6,R2
    162              int ret;
    163          
    164              if( ( ret = mbedtls_ecp_tls_read_group( &ctx->grp, buf, end - *buf ) ) != 0 )
   \        0x8   0x682A             LDR      R2,[R5, #+0]
   \        0xA   0x1AB2             SUBS     R2,R6,R2
   \        0xC   0x....'....        BL       mbedtls_ecp_tls_read_group
   \       0x10   0x2800             CMP      R0,#+0
   \       0x12   0xD10B             BNE.N    ??mbedtls_ecdh_read_params_0
    165                  return( ret );
    166          
    167              if( ( ret = mbedtls_ecp_tls_read_point( &ctx->grp, &ctx->Qp, buf, end - *buf ) )
    168                          != 0 )
   \       0x14   0x6828             LDR      R0,[R5, #+0]
   \       0x16   0x1A36             SUBS     R6,R6,R0
   \       0x18   0x4633             MOV      R3,R6
   \       0x1A   0x462A             MOV      R2,R5
   \       0x1C   0xF104 0x01AC      ADD      R1,R4,#+172
   \       0x20   0x4620             MOV      R0,R4
   \       0x22   0x....'....        BL       mbedtls_ecp_tls_read_point
   \       0x26   0x2800             CMP      R0,#+0
   \       0x28   0xD100             BNE.N    ??mbedtls_ecdh_read_params_0
    169                  return( ret );
    170          
    171              return( 0 );
   \       0x2A   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_ecdh_read_params_0: (+1)
   \       0x2C   0xBD70             POP      {R4-R6,PC}       ;; return
    172          }
    173          
    174          /*
    175           * Get parameters from a keypair
    176           */

   \                                 In section .text, align 2, keep-with-next
    177          int mbedtls_ecdh_get_params( mbedtls_ecdh_context *ctx, const mbedtls_ecp_keypair *key,
    178                               mbedtls_ecdh_side side )
    179          {
   \                     mbedtls_ecdh_get_params: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
   \        0x6   0x4616             MOV      R6,R2
    180              int ret;
    181          
    182              if( ( ret = mbedtls_ecp_group_copy( &ctx->grp, &key->grp ) ) != 0 )
   \        0x8   0x....'....        BL       mbedtls_ecp_group_copy
   \        0xC   0x2800             CMP      R0,#+0
   \        0xE   0xD11F             BNE.N    ??mbedtls_ecdh_get_params_0
    183                  return( ret );
    184          
    185              /* If it's not our key, just import the public part as Qp */
    186              if( side == MBEDTLS_ECDH_THEIRS )
   \       0x10   0x4630             MOV      R0,R6
   \       0x12   0x2801             CMP      R0,#+1
   \       0x14   0xD107             BNE.N    ??mbedtls_ecdh_get_params_1
    187                  return( mbedtls_ecp_copy( &ctx->Qp, &key->Q ) );
   \       0x16   0xF105 0x0188      ADD      R1,R5,#+136
   \       0x1A   0xF104 0x00AC      ADD      R0,R4,#+172
   \       0x1E   0xE8BD 0x4070      POP      {R4-R6,LR}
   \       0x22   0x....'....        B.W      mbedtls_ecp_copy
    188          
    189              /* Our key: import public (as Q) and private parts */
    190              if( side != MBEDTLS_ECDH_OURS )
   \                     ??mbedtls_ecdh_get_params_1: (+1)
   \       0x26   0x2E00             CMP      R6,#+0
   \       0x28   0xD001             BEQ.N    ??mbedtls_ecdh_get_params_2
    191                  return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   \       0x2A   0x....             LDR.N    R0,??DataTable6  ;; 0xffffb080
   \       0x2C   0xBD70             POP      {R4-R6,PC}
    192          
    193              if( ( ret = mbedtls_ecp_copy( &ctx->Q, &key->Q ) ) != 0 ||
    194                  ( ret = mbedtls_mpi_copy( &ctx->d, &key->d ) ) != 0 )
   \                     ??mbedtls_ecdh_get_params_2: (+1)
   \       0x2E   0xF105 0x0188      ADD      R1,R5,#+136
   \       0x32   0xF104 0x0088      ADD      R0,R4,#+136
   \       0x36   0x....'....        BL       mbedtls_ecp_copy
   \       0x3A   0x2800             CMP      R0,#+0
   \       0x3C   0xD108             BNE.N    ??mbedtls_ecdh_get_params_0
   \       0x3E   0xF105 0x017C      ADD      R1,R5,#+124
   \       0x42   0xF104 0x007C      ADD      R0,R4,#+124
   \       0x46   0x....'....        BL       mbedtls_mpi_copy
   \       0x4A   0x2800             CMP      R0,#+0
   \       0x4C   0xD100             BNE.N    ??mbedtls_ecdh_get_params_0
    195                  return( ret );
    196          
    197              return( 0 );
   \       0x4E   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_ecdh_get_params_0: (+1)
   \       0x50   0xBD70             POP      {R4-R6,PC}       ;; return
    198          }
    199          
    200          /*
    201           * Setup and export the client public value
    202           */

   \                                 In section .text, align 2, keep-with-next
    203          int mbedtls_ecdh_make_public( mbedtls_ecdh_context *ctx, size_t *olen,
    204                                unsigned char *buf, size_t blen,
    205                                int (*f_rng)(void *, unsigned char *, size_t),
    206                                void *p_rng )
    207          {
   \                     mbedtls_ecdh_make_public: (+1)
   \        0x0   0xB5FE             PUSH     {R1-R7,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
   \        0x6   0x4616             MOV      R6,R2
   \        0x8   0x461F             MOV      R7,R3
    208              int ret;
    209          
    210              if( ctx == NULL || ctx->grp.pbits == 0 )
   \        0xA   0x2C00             CMP      R4,#+0
   \        0xC   0xD002             BEQ.N    ??mbedtls_ecdh_make_public_0
   \        0xE   0x6DA0             LDR      R0,[R4, #+88]
   \       0x10   0x2800             CMP      R0,#+0
   \       0x12   0xD101             BNE.N    ??mbedtls_ecdh_make_public_1
    211                  return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   \                     ??mbedtls_ecdh_make_public_0: (+1)
   \       0x14   0x....             LDR.N    R0,??DataTable6  ;; 0xffffb080
   \       0x16   0xBDFE             POP      {R1-R7,PC}
   \                     ??mbedtls_ecdh_make_public_1: (+1)
   \       0x18   0x9809             LDR      R0,[SP, #+36]
   \       0x1A   0x9B08             LDR      R3,[SP, #+32]
    212          
    213              if( ( ret = mbedtls_ecdh_gen_public( &ctx->grp, &ctx->d, &ctx->Q, f_rng, p_rng ) )
    214                          != 0 )
   \       0x1C   0x9000             STR      R0,[SP, #+0]
   \       0x1E   0xF104 0x0288      ADD      R2,R4,#+136
   \       0x22   0xF104 0x017C      ADD      R1,R4,#+124
   \       0x26   0x4620             MOV      R0,R4
   \       0x28   0x....'....        BL       mbedtls_ecdh_gen_public
   \       0x2C   0x2800             CMP      R0,#+0
   \       0x2E   0xD109             BNE.N    ??mbedtls_ecdh_make_public_2
    215                  return( ret );
    216          
    217              return mbedtls_ecp_tls_write_point( &ctx->grp, &ctx->Q, ctx->point_format,
    218                                          olen, buf, blen );
   \       0x30   0x9701             STR      R7,[SP, #+4]
   \       0x32   0x9600             STR      R6,[SP, #+0]
   \       0x34   0x462B             MOV      R3,R5
   \       0x36   0xF8D4 0x20DC      LDR      R2,[R4, #+220]
   \       0x3A   0xF104 0x0188      ADD      R1,R4,#+136
   \       0x3E   0x4620             MOV      R0,R4
   \       0x40   0x....'....        BL       mbedtls_ecp_tls_write_point
   \                     ??mbedtls_ecdh_make_public_2: (+1)
   \       0x44   0xBDFE             POP      {R1-R7,PC}       ;; return
    219          }
    220          
    221          /*
    222           * Parse and import the client's public value
    223           */

   \                                 In section .text, align 2, keep-with-next
    224          int mbedtls_ecdh_read_public( mbedtls_ecdh_context *ctx,
    225                                const unsigned char *buf, size_t blen )
    226          {
   \                     mbedtls_ecdh_read_public: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x460C             MOV      R4,R1
   \        0x4   0x4615             MOV      R5,R2
    227              int ret;
    228              const unsigned char *p = buf;
   \        0x6   0x9400             STR      R4,[SP, #+0]
    229          
    230              if( ctx == NULL )
   \        0x8   0x2800             CMP      R0,#+0
   \        0xA   0xD101             BNE.N    ??mbedtls_ecdh_read_public_0
    231                  return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   \        0xC   0x....             LDR.N    R0,??DataTable6  ;; 0xffffb080
   \        0xE   0xBD32             POP      {R1,R4,R5,PC}
    232          
    233              if( ( ret = mbedtls_ecp_tls_read_point( &ctx->grp, &ctx->Qp, &p, blen ) ) != 0 )
   \                     ??mbedtls_ecdh_read_public_0: (+1)
   \       0x10   0x462B             MOV      R3,R5
   \       0x12   0x466A             MOV      R2,SP
   \       0x14   0xF100 0x01AC      ADD      R1,R0,#+172
   \       0x18   0x....'....        BL       mbedtls_ecp_tls_read_point
   \       0x1C   0x2800             CMP      R0,#+0
   \       0x1E   0xD106             BNE.N    ??mbedtls_ecdh_read_public_1
    234                  return( ret );
    235          
    236              if( (size_t)( p - buf ) != blen )
   \       0x20   0x9800             LDR      R0,[SP, #+0]
   \       0x22   0x1B04             SUBS     R4,R0,R4
   \       0x24   0x42AC             CMP      R4,R5
   \       0x26   0xD001             BEQ.N    ??mbedtls_ecdh_read_public_2
    237                  return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   \       0x28   0x....             LDR.N    R0,??DataTable6  ;; 0xffffb080
   \       0x2A   0xBD32             POP      {R1,R4,R5,PC}
    238          
    239              return( 0 );
   \                     ??mbedtls_ecdh_read_public_2: (+1)
   \       0x2C   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_ecdh_read_public_1: (+1)
   \       0x2E   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    240          }
    241          
    242          /*
    243           * Derive and export the shared secret
    244           */

   \                                 In section .text, align 2, keep-with-next
    245          int mbedtls_ecdh_calc_secret( mbedtls_ecdh_context *ctx, size_t *olen,
    246                                unsigned char *buf, size_t blen,
    247                                int (*f_rng)(void *, unsigned char *, size_t),
    248                                void *p_rng )
    249          {
   \                     mbedtls_ecdh_calc_secret: (+1)
   \        0x0   0xB5FE             PUSH     {R1-R7,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
   \        0x6   0x4616             MOV      R6,R2
   \        0x8   0x461F             MOV      R7,R3
    250              int ret;
    251          
    252              if( ctx == NULL )
   \        0xA   0x2C00             CMP      R4,#+0
   \        0xC   0xD014             BEQ.N    ??mbedtls_ecdh_calc_secret_0
   \        0xE   0x9909             LDR      R1,[SP, #+36]
   \       0x10   0x9808             LDR      R0,[SP, #+32]
    253                  return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
    254          
    255              if( ( ret = mbedtls_ecdh_compute_shared( &ctx->grp, &ctx->z, &ctx->Qp, &ctx->d,
    256                                               f_rng, p_rng ) ) != 0 )
   \       0x12   0x9101             STR      R1,[SP, #+4]
   \       0x14   0x9000             STR      R0,[SP, #+0]
   \       0x16   0xF104 0x037C      ADD      R3,R4,#+124
   \       0x1A   0xF104 0x02AC      ADD      R2,R4,#+172
   \       0x1E   0xF104 0x01D0      ADD      R1,R4,#+208
   \       0x22   0x4620             MOV      R0,R4
   \       0x24   0x....'....        BL       mbedtls_ecdh_compute_shared
   \       0x28   0x2800             CMP      R0,#+0
   \       0x2A   0xD11C             BNE.N    ??mbedtls_ecdh_calc_secret_1
    257              {
    258                  return( ret );
    259              }
    260          
    261              if( mbedtls_mpi_size( &ctx->z ) > blen )
   \       0x2C   0xF104 0x00D0      ADD      R0,R4,#+208
   \       0x30   0x....'....        BL       mbedtls_mpi_size
   \       0x34   0x4287             CMP      R7,R0
   \       0x36   0xD201             BCS.N    ??mbedtls_ecdh_calc_secret_2
    262                  return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   \                     ??mbedtls_ecdh_calc_secret_0: (+1)
   \       0x38   0x....             LDR.N    R0,??DataTable6  ;; 0xffffb080
   \       0x3A   0xBDFE             POP      {R1-R7,PC}
    263          
    264              *olen = ctx->grp.pbits / 8 + ( ( ctx->grp.pbits % 8 ) != 0 );
   \                     ??mbedtls_ecdh_calc_secret_2: (+1)
   \       0x3C   0xF894 0x0058      LDRB     R0,[R4, #+88]
   \       0x40   0xF000 0x0007      AND      R0,R0,#0x7
   \       0x44   0x1E40             SUBS     R0,R0,#+1
   \       0x46   0x4180             SBCS     R0,R0,R0
   \       0x48   0x43C0             MVNS     R0,R0
   \       0x4A   0x6DA1             LDR      R1,[R4, #+88]
   \       0x4C   0x08C9             LSRS     R1,R1,#+3
   \       0x4E   0xEB11 0x70D0      ADDS     R0,R1,R0, LSR #+31
   \       0x52   0x6028             STR      R0,[R5, #+0]
    265              return mbedtls_mpi_write_binary( &ctx->z, buf, *olen );
   \       0x54   0x4602             MOV      R2,R0
   \       0x56   0x4631             MOV      R1,R6
   \       0x58   0xF104 0x00D0      ADD      R0,R4,#+208
   \       0x5C   0xB003             ADD      SP,SP,#+12
   \       0x5E   0xE8BD 0x40F0      POP      {R4-R7,LR}
   \       0x62   0x....'....        B.W      mbedtls_mpi_write_binary
   \                     ??mbedtls_ecdh_calc_secret_1: (+1)
   \       0x66   0xBDFE             POP      {R1-R7,PC}       ;; return
    266          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \        0x0   0xFFFF'B080        DC32     0xffffb080
    267          
    268          
    269          #endif /*#if !defined(MBEDTLS_ECDH_ALT) */
    270          #endif /* MBEDTLS_ECDH_C */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   mbedtls_ecdh_calc_secret
        32   -> mbedtls_ecdh_compute_shared
        32   -> mbedtls_mpi_size
         0   -> mbedtls_mpi_write_binary
      72   mbedtls_ecdh_compute_shared
        72   -> mbedtls_ecp_check_pubkey
        72   -> mbedtls_ecp_is_zero
        72   -> mbedtls_ecp_mul
        72   -> mbedtls_ecp_point_free
        72   -> mbedtls_ecp_point_init
        72   -> mbedtls_mpi_copy
       8   mbedtls_ecdh_free
         8   -> mbedtls_ecp_group_free
         8   -> mbedtls_ecp_point_free
         0   -> mbedtls_mpi_free
         8   -> mbedtls_mpi_free
      16   mbedtls_ecdh_gen_public
        16   -> mbedtls_ecp_gen_keypair
      16   mbedtls_ecdh_get_params
         0   -> mbedtls_ecp_copy
        16   -> mbedtls_ecp_copy
        16   -> mbedtls_ecp_group_copy
        16   -> mbedtls_mpi_copy
       0   mbedtls_ecdh_init
         0   -> __aeabi_memset4
      40   mbedtls_ecdh_make_params
        40   -> mbedtls_ecdh_gen_public
        40   -> mbedtls_ecp_tls_write_group
        40   -> mbedtls_ecp_tls_write_point
      32   mbedtls_ecdh_make_public
        32   -> mbedtls_ecdh_gen_public
        32   -> mbedtls_ecp_tls_write_point
      16   mbedtls_ecdh_read_params
        16   -> mbedtls_ecp_tls_read_group
        16   -> mbedtls_ecp_tls_read_point
      16   mbedtls_ecdh_read_public
        16   -> mbedtls_ecp_tls_read_point


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
     104  mbedtls_ecdh_calc_secret
      94  mbedtls_ecdh_compute_shared
      72  mbedtls_ecdh_free
      12  mbedtls_ecdh_gen_public
      82  mbedtls_ecdh_get_params
      10  mbedtls_ecdh_init
     112  mbedtls_ecdh_make_params
      70  mbedtls_ecdh_make_public
      46  mbedtls_ecdh_read_params
      48  mbedtls_ecdh_read_public

 
 654 bytes in section .text
 
 654 bytes of CODE memory

Errors: none
Warnings: none
