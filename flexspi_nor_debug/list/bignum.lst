###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.3.193/W32 for ARM         10/Jun/2019  13:48:03
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\Development\smart_washing_machine_3080\mbedtls\library\bignum.c
#    Command line =  
#        -f C:\Users\nxf42695\AppData\Local\Temp\1\EW919D.tmp
#        (C:\Development\smart_washing_machine_3080\mbedtls\library\bignum.c -D
#        DEBUG -D USE_RTOS -D XIP_EXTERNAL_FLASH=1 -D XIP_BOOT_HEADER_ENABLE=1
#        -D CPU_MIMXRT1052DVL6B -D FSL_RTOS_FREE_RTOS -D PRINTF_ADVANCED_ENABLE
#        -D "MBEDTLS_CONFIG_FILE=\"ksdk_mbedtls_config.h\"" -lC
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list -lA
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list
#        --diag_suppress Pa082,Pa050 -o
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_d16 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" --preinclude
#        C:\Development\smart_washing_machine_3080/source\app_preinclude.h -I
#        C:\Development\smart_washing_machine_3080/board\ -I
#        C:\Development\smart_washing_machine_3080/source\ -I
#        C:\Development\smart_washing_machine_3080/CMSIS\ -I
#        C:\Development\smart_washing_machine_3080/amazon-freertos/freertos/portable\
#        -I C:\Development\smart_washing_machine_3080/amazon-freertos/include\
#        -I C:\Development\smart_washing_machine_3080/component/lists\ -I
#        C:\Development\smart_washing_machine_3080/component/serial_manager\ -I
#        C:\Development\smart_washing_machine_3080/component/uart\ -I
#        C:\Development\smart_washing_machine_3080/component/kv\ -I
#        C:\Development\smart_washing_machine_3080/component/kv/include\ -I
#        C:\Development\smart_washing_machine_3080/device\ -I
#        C:\Development\smart_washing_machine_3080/doc\ -I
#        C:\Development\smart_washing_machine_3080/drivers\ -I
#        C:\Development\smart_washing_machine_3080/src\ -I
#        C:\Development\smart_washing_machine_3080/startup\ -I
#        C:\Development\smart_washing_machine_3080/utilities\ -I
#        C:\Development\smart_washing_machine_3080/xip\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\atm\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_model\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_sign\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\infra\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\mqtt\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\external_libs\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\coap_cloud\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\CoAPPacket\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\server\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\os\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\awss_reset\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\mbedtls\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\ -I
#        C:\Development\smart_washing_machine_3080\mbedtls\port\ksdk\ -Om)
#    Locale       =  C
#    List file    =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list\bignum.lst
#    Object file  =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj\bignum.o
#
###############################################################################

C:\Development\smart_washing_machine_3080\mbedtls\library\bignum.c
      1          /*
      2           *  Multi-precision integer library
      3           *
      4           *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
      5           *  SPDX-License-Identifier: Apache-2.0
      6           *
      7           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
      8           *  not use this file except in compliance with the License.
      9           *  You may obtain a copy of the License at
     10           *
     11           *  http://www.apache.org/licenses/LICENSE-2.0
     12           *
     13           *  Unless required by applicable law or agreed to in writing, software
     14           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     15           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     16           *  See the License for the specific language governing permissions and
     17           *  limitations under the License.
     18           *
     19           *  This file is part of mbed TLS (https://tls.mbed.org)
     20           */
     21          
     22          /*
     23           *  The following sources were referenced in the design of this Multi-precision
     24           *  Integer library:
     25           *
     26           *  [1] Handbook of Applied Cryptography - 1997
     27           *      Menezes, van Oorschot and Vanstone
     28           *
     29           *  [2] Multi-Precision Math
     30           *      Tom St Denis
     31           *      https://github.com/libtom/libtommath/blob/develop/tommath.pdf
     32           *
     33           *  [3] GNU Multi-Precision Arithmetic Library
     34           *      https://gmplib.org/manual/index.html
     35           *
     36           */
     37          
     38          #if !defined(MBEDTLS_CONFIG_FILE)
     39          #include "mbedtls/config.h"
     40          #else
     41          #include MBEDTLS_CONFIG_FILE
     42          #endif
     43          
     44          #if defined(MBEDTLS_BIGNUM_C)
     45          
     46          #include "mbedtls/bignum.h"
     47          #include "mbedtls/bn_mul.h"
     48          #include "mbedtls/platform_util.h"
     49          
     50          #include <string.h>
     51          
     52          #if defined(MBEDTLS_PLATFORM_C)
     53          #include "mbedtls/platform.h"
     54          #else
     55          #include <stdio.h>
     56          #include <stdlib.h>
     57          #define mbedtls_printf     printf
     58          #define mbedtls_calloc    calloc
     59          #define mbedtls_free       free
     60          #endif
     61          
     62          #define ciL    (sizeof(mbedtls_mpi_uint))         /* chars in limb  */
     63          #define biL    (ciL << 3)               /* bits  in limb  */
     64          #define biH    (ciL << 2)               /* half limb size */
     65          
     66          #define MPI_SIZE_T_MAX  ( (size_t) -1 ) /* SIZE_T_MAX is not standard */
     67          
     68          /*
     69           * Convert between bits/chars and number of limbs
     70           * Divide first in order to avoid potential overflows
     71           */
     72          #define BITS_TO_LIMBS(i)  ( (i) / biL + ( (i) % biL != 0 ) )
     73          #define CHARS_TO_LIMBS(i) ( (i) / ciL + ( (i) % ciL != 0 ) )
     74          
     75          /* Implementation that should never be optimized out by the compiler */

   \                                 In section .text, align 2, keep-with-next
     76          static void mbedtls_mpi_zeroize( mbedtls_mpi_uint *v, size_t n )
     77          {
     78              mbedtls_platform_zeroize( v, ciL * n );
   \                     mbedtls_mpi_zeroize: (+1)
   \        0x0   0x0089             LSLS     R1,R1,#+2
   \        0x2   0x....'....        B.W      mbedtls_platform_zeroize
     79          }
     80          
     81          /*
     82           * Initialize one MPI
     83           */

   \                                 In section .text, align 2, keep-with-next
     84          void mbedtls_mpi_init( mbedtls_mpi *X )
     85          {
     86              if( X == NULL )
   \                     mbedtls_mpi_init: (+1)
   \        0x0   0x2800             CMP      R0,#+0
   \        0x2   0xD004             BEQ.N    ??mbedtls_mpi_init_0
     87                  return;
     88          
     89              X->s = 1;
   \        0x4   0x2101             MOVS     R1,#+1
   \        0x6   0x6001             STR      R1,[R0, #+0]
     90              X->n = 0;
   \        0x8   0x2100             MOVS     R1,#+0
   \        0xA   0x6041             STR      R1,[R0, #+4]
     91              X->p = NULL;
   \        0xC   0x6081             STR      R1,[R0, #+8]
     92          }
   \                     ??mbedtls_mpi_init_0: (+1)
   \        0xE   0x4770             BX       LR               ;; return
     93          
     94          /*
     95           * Unallocate one MPI
     96           */

   \                                 In section .text, align 2, keep-with-next
     97          void mbedtls_mpi_free( mbedtls_mpi *X )
     98          {
   \                     mbedtls_mpi_free: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
     99              if( X == NULL )
   \        0x4   0xD00D             BEQ.N    ??mbedtls_mpi_free_0
    100                  return;
    101          
    102              if( X->p != NULL )
   \        0x6   0x68A0             LDR      R0,[R4, #+8]
   \        0x8   0x2800             CMP      R0,#+0
   \        0xA   0xD005             BEQ.N    ??mbedtls_mpi_free_1
    103              {
    104                  mbedtls_mpi_zeroize( X->p, X->n );
   \        0xC   0x6861             LDR      R1,[R4, #+4]
   \        0xE   0x....'....        BL       mbedtls_mpi_zeroize
    105                  mbedtls_free( X->p );
   \       0x12   0x68A0             LDR      R0,[R4, #+8]
   \       0x14   0x....'....        BL       mbedtls_free
    106              }
    107          
    108              X->s = 1;
   \                     ??mbedtls_mpi_free_1: (+1)
   \       0x18   0x2001             MOVS     R0,#+1
   \       0x1A   0x6020             STR      R0,[R4, #+0]
    109              X->n = 0;
   \       0x1C   0x2000             MOVS     R0,#+0
   \       0x1E   0x6060             STR      R0,[R4, #+4]
    110              X->p = NULL;
   \       0x20   0x60A0             STR      R0,[R4, #+8]
    111          }
   \                     ??mbedtls_mpi_free_0: (+1)
   \       0x22   0xBD10             POP      {R4,PC}          ;; return
    112          
    113          /*
    114           * Enlarge to the specified number of limbs
    115           */

   \                                 In section .text, align 2, keep-with-next
    116          int mbedtls_mpi_grow( mbedtls_mpi *X, size_t nblimbs )
    117          {
   \                     mbedtls_mpi_grow: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4605             MOV      R5,R0
   \        0x4   0x460E             MOV      R6,R1
    118              mbedtls_mpi_uint *p;
    119          
    120              if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
   \        0x6   0xF242 0x7011      MOVW     R0,#+10001
   \        0xA   0x4286             CMP      R6,R0
   \        0xC   0xD208             BCS.N    ??mbedtls_mpi_grow_0
    121                  return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
    122          
    123              if( X->n < nblimbs )
   \        0xE   0x6868             LDR      R0,[R5, #+4]
   \       0x10   0x42B0             CMP      R0,R6
   \       0x12   0xD21A             BCS.N    ??mbedtls_mpi_grow_1
    124              {
    125                  if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
   \       0x14   0x2104             MOVS     R1,#+4
   \       0x16   0x4630             MOV      R0,R6
   \       0x18   0x....'....        BL       mbedtls_calloc
   \       0x1C   0x0004             MOVS     R4,R0
   \       0x1E   0xD102             BNE.N    ??mbedtls_mpi_grow_2
    126                      return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
   \                     ??mbedtls_mpi_grow_0: (+1)
   \       0x20   0xF06F 0x000F      MVN      R0,#+15
   \       0x24   0xBD70             POP      {R4-R6,PC}
    127          
    128                  if( X->p != NULL )
   \                     ??mbedtls_mpi_grow_2: (+1)
   \       0x26   0x68A8             LDR      R0,[R5, #+8]
   \       0x28   0x2800             CMP      R0,#+0
   \       0x2A   0xD00C             BEQ.N    ??mbedtls_mpi_grow_3
    129                  {
    130                      memcpy( p, X->p, X->n * ciL );
   \       0x2C   0x686A             LDR      R2,[R5, #+4]
   \       0x2E   0x0092             LSLS     R2,R2,#+2
   \       0x30   0x4601             MOV      R1,R0
   \       0x32   0x4620             MOV      R0,R4
   \       0x34   0x....'....        BL       __aeabi_memcpy4
    131                      mbedtls_mpi_zeroize( X->p, X->n );
   \       0x38   0x6869             LDR      R1,[R5, #+4]
   \       0x3A   0x68A8             LDR      R0,[R5, #+8]
   \       0x3C   0x....'....        BL       mbedtls_mpi_zeroize
    132                      mbedtls_free( X->p );
   \       0x40   0x68A8             LDR      R0,[R5, #+8]
   \       0x42   0x....'....        BL       mbedtls_free
    133                  }
    134          
    135                  X->n = nblimbs;
   \                     ??mbedtls_mpi_grow_3: (+1)
   \       0x46   0x606E             STR      R6,[R5, #+4]
    136                  X->p = p;
   \       0x48   0x60AC             STR      R4,[R5, #+8]
    137              }
    138          
    139              return( 0 );
   \                     ??mbedtls_mpi_grow_1: (+1)
   \       0x4A   0x2000             MOVS     R0,#+0
   \       0x4C   0xBD70             POP      {R4-R6,PC}       ;; return
    140          }
    141          
    142          /*
    143           * Resize down as much as possible,
    144           * while keeping at least the specified number of limbs
    145           */

   \                                 In section .text, align 2, keep-with-next
    146          int mbedtls_mpi_shrink( mbedtls_mpi *X, size_t nblimbs )
    147          {
   \                     mbedtls_mpi_shrink: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4605             MOV      R5,R0
   \        0x4   0x460E             MOV      R6,R1
    148              mbedtls_mpi_uint *p;
    149              size_t i;
    150          
    151              /* Actually resize up in this case */
    152              if( X->n <= nblimbs )
   \        0x6   0x6868             LDR      R0,[R5, #+4]
   \        0x8   0x4286             CMP      R6,R0
   \        0xA   0xD303             BCC.N    ??mbedtls_mpi_shrink_0
    153                  return( mbedtls_mpi_grow( X, nblimbs ) );
   \        0xC   0x4628             MOV      R0,R5
   \        0xE   0xE8BD 0x4070      POP      {R4-R6,LR}
   \       0x12   0x....             B.N      mbedtls_mpi_grow
    154          
    155              for( i = X->n - 1; i > 0; i-- )
   \                     ??mbedtls_mpi_shrink_0: (+1)
   \       0x14   0x4601             MOV      R1,R0
   \       0x16   0x1E49             SUBS     R1,R1,#+1
   \                     ??mbedtls_mpi_shrink_1: (+1)
   \       0x18   0x2900             CMP      R1,#+0
   \       0x1A   0xD019             BEQ.N    ??mbedtls_mpi_shrink_2
    156                  if( X->p[i] != 0 )
   \       0x1C   0x68A8             LDR      R0,[R5, #+8]
   \       0x1E   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \       0x22   0x2800             CMP      R0,#+0
   \       0x24   0xD114             BNE.N    ??mbedtls_mpi_shrink_2
   \       0x26   0x1E49             SUBS     R1,R1,#+1
   \       0x28   0xE7F6             B.N      ??mbedtls_mpi_shrink_1
    157                      break;
    158              i++;
    159          
    160              if( i < nblimbs )
    161                  i = nblimbs;
    162          
    163              if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( i, ciL ) ) == NULL )
    164                  return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
    165          
    166              if( X->p != NULL )
   \                     ??mbedtls_mpi_shrink_3: (+1)
   \       0x2A   0x68A8             LDR      R0,[R5, #+8]
   \       0x2C   0x2800             CMP      R0,#+0
   \       0x2E   0xD00B             BEQ.N    ??mbedtls_mpi_shrink_4
    167              {
    168                  memcpy( p, X->p, i * ciL );
   \       0x30   0x00B2             LSLS     R2,R6,#+2
   \       0x32   0x4601             MOV      R1,R0
   \       0x34   0x4620             MOV      R0,R4
   \       0x36   0x....'....        BL       __aeabi_memcpy4
    169                  mbedtls_mpi_zeroize( X->p, X->n );
   \       0x3A   0x6869             LDR      R1,[R5, #+4]
   \       0x3C   0x68A8             LDR      R0,[R5, #+8]
   \       0x3E   0x....'....        BL       mbedtls_mpi_zeroize
    170                  mbedtls_free( X->p );
   \       0x42   0x68A8             LDR      R0,[R5, #+8]
   \       0x44   0x....'....        BL       mbedtls_free
    171              }
    172          
    173              X->n = i;
   \                     ??mbedtls_mpi_shrink_4: (+1)
   \       0x48   0x606E             STR      R6,[R5, #+4]
    174              X->p = p;
   \       0x4A   0x60AC             STR      R4,[R5, #+8]
    175          
    176              return( 0 );
   \       0x4C   0x2000             MOVS     R0,#+0
   \       0x4E   0xBD70             POP      {R4-R6,PC}       ;; return
   \                     ??mbedtls_mpi_shrink_2: (+1)
   \       0x50   0x1C49             ADDS     R1,R1,#+1
   \       0x52   0x428E             CMP      R6,R1
   \       0x54   0xD200             BCS.N    ??mbedtls_mpi_shrink_5
   \       0x56   0x460E             MOV      R6,R1
   \                     ??mbedtls_mpi_shrink_5: (+1)
   \       0x58   0x2104             MOVS     R1,#+4
   \       0x5A   0x4630             MOV      R0,R6
   \       0x5C   0x....'....        BL       mbedtls_calloc
   \       0x60   0x0004             MOVS     R4,R0
   \       0x62   0xD1E2             BNE.N    ??mbedtls_mpi_shrink_3
   \       0x64   0xF06F 0x000F      MVN      R0,#+15
   \       0x68   0xBD70             POP      {R4-R6,PC}
    177          }
    178          
    179          /*
    180           * Copy the contents of Y into X
    181           */

   \                                 In section .text, align 2, keep-with-next
    182          int mbedtls_mpi_copy( mbedtls_mpi *X, const mbedtls_mpi *Y )
    183          {
   \                     mbedtls_mpi_copy: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x4605             MOV      R5,R0
   \        0x4   0x460F             MOV      R7,R1
    184              int ret = 0;
   \        0x6   0x2600             MOVS     R6,#+0
    185              size_t i;
    186          
    187              if( X == Y )
   \        0x8   0x42BD             CMP      R5,R7
   \        0xA   0xD101             BNE.N    ??mbedtls_mpi_copy_0
    188                  return( 0 );
   \        0xC   0x4630             MOV      R0,R6
   \        0xE   0xBDF2             POP      {R1,R4-R7,PC}
    189          
    190              if( Y->p == NULL )
   \                     ??mbedtls_mpi_copy_0: (+1)
   \       0x10   0x68B8             LDR      R0,[R7, #+8]
   \       0x12   0x2800             CMP      R0,#+0
   \       0x14   0xD104             BNE.N    ??mbedtls_mpi_copy_1
    191              {
    192                  mbedtls_mpi_free( X );
   \       0x16   0x4628             MOV      R0,R5
   \       0x18   0x....'....        BL       mbedtls_mpi_free
    193                  return( 0 );
   \       0x1C   0x4630             MOV      R0,R6
   \       0x1E   0xBDF2             POP      {R1,R4-R7,PC}
    194              }
    195          
    196              for( i = Y->n - 1; i > 0; i-- )
   \                     ??mbedtls_mpi_copy_1: (+1)
   \       0x20   0x687C             LDR      R4,[R7, #+4]
   \       0x22   0x1E64             SUBS     R4,R4,#+1
   \                     ??mbedtls_mpi_copy_2: (+1)
   \       0x24   0x2C00             CMP      R4,#+0
   \       0x26   0xD017             BEQ.N    ??mbedtls_mpi_copy_3
    197                  if( Y->p[i] != 0 )
   \       0x28   0x68B8             LDR      R0,[R7, #+8]
   \       0x2A   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \       0x2E   0x2800             CMP      R0,#+0
   \       0x30   0xD112             BNE.N    ??mbedtls_mpi_copy_3
   \       0x32   0x1E64             SUBS     R4,R4,#+1
   \       0x34   0xE7F6             B.N      ??mbedtls_mpi_copy_2
    198                      break;
    199              i++;
    200          
    201              X->s = Y->s;
    202          
    203              if( X->n < i )
    204              {
    205                  MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
    206              }
    207              else
    208              {
    209                  memset( X->p + i, 0, ( X->n - i ) * ciL );
   \                     ??mbedtls_mpi_copy_4: (+1)
   \       0x36   0x4632             MOV      R2,R6
   \       0x38   0x6869             LDR      R1,[R5, #+4]
   \       0x3A   0x1B09             SUBS     R1,R1,R4
   \       0x3C   0x0089             LSLS     R1,R1,#+2
   \       0x3E   0x68A8             LDR      R0,[R5, #+8]
   \       0x40   0xEB00 0x0084      ADD      R0,R0,R4, LSL #+2
   \       0x44   0x....'....        BL       __aeabi_memset
    210              }
    211          
    212              memcpy( X->p, Y->p, i * ciL );
   \                     ??mbedtls_mpi_copy_5: (+1)
   \       0x48   0x00A4             LSLS     R4,R4,#+2
   \       0x4A   0x4622             MOV      R2,R4
   \       0x4C   0x68B9             LDR      R1,[R7, #+8]
   \       0x4E   0x68A8             LDR      R0,[R5, #+8]
   \       0x50   0x....'....        BL       __aeabi_memcpy4
    213          
    214          cleanup:
    215          
    216              return( ret );
   \                     ??mbedtls_mpi_copy_6: (+1)
   \       0x54   0x4630             MOV      R0,R6
   \       0x56   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
   \                     ??mbedtls_mpi_copy_3: (+1)
   \       0x58   0x1C64             ADDS     R4,R4,#+1
   \       0x5A   0x6838             LDR      R0,[R7, #+0]
   \       0x5C   0x6028             STR      R0,[R5, #+0]
   \       0x5E   0x6868             LDR      R0,[R5, #+4]
   \       0x60   0x42A0             CMP      R0,R4
   \       0x62   0xD2E8             BCS.N    ??mbedtls_mpi_copy_4
   \       0x64   0x4621             MOV      R1,R4
   \       0x66   0x4628             MOV      R0,R5
   \       0x68   0x....'....        BL       mbedtls_mpi_grow
   \       0x6C   0x0006             MOVS     R6,R0
   \       0x6E   0xD1F1             BNE.N    ??mbedtls_mpi_copy_6
   \       0x70   0xE7EA             B.N      ??mbedtls_mpi_copy_5
    217          }
    218          
    219          /*
    220           * Swap the contents of X and Y
    221           */

   \                                 In section .text, align 2, keep-with-next
    222          void mbedtls_mpi_swap( mbedtls_mpi *X, mbedtls_mpi *Y )
    223          {
   \                     mbedtls_mpi_swap: (+1)
   \        0x0   0xB53E             PUSH     {R1-R5,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
    224              mbedtls_mpi T;
    225          
    226              memcpy( &T,  X, sizeof( mbedtls_mpi ) );
   \        0x6   0x220C             MOVS     R2,#+12
   \        0x8   0x4621             MOV      R1,R4
   \        0xA   0x4668             MOV      R0,SP
   \        0xC   0x....'....        BL       __aeabi_memcpy4
    227              memcpy(  X,  Y, sizeof( mbedtls_mpi ) );
   \       0x10   0x220C             MOVS     R2,#+12
   \       0x12   0x4629             MOV      R1,R5
   \       0x14   0x4620             MOV      R0,R4
   \       0x16   0x....'....        BL       __aeabi_memcpy4
    228              memcpy(  Y, &T, sizeof( mbedtls_mpi ) );
   \       0x1A   0x220C             MOVS     R2,#+12
   \       0x1C   0x4669             MOV      R1,SP
   \       0x1E   0x4628             MOV      R0,R5
   \       0x20   0x....'....        BL       __aeabi_memcpy4
    229          }
   \       0x24   0xBD37             POP      {R0-R2,R4,R5,PC}  ;; return
    230          
    231          /*
    232           * Conditionally assign X = Y, without leaking information
    233           * about whether the assignment was made or not.
    234           * (Leaking information about the respective sizes of X and Y is ok however.)
    235           */

   \                                 In section .text, align 2, keep-with-next
    236          int mbedtls_mpi_safe_cond_assign( mbedtls_mpi *X, const mbedtls_mpi *Y, unsigned char assign )
    237          {
   \                     mbedtls_mpi_safe_cond_assign: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
   \        0x6   0x4616             MOV      R6,R2
    238              int ret = 0;
    239              size_t i;
    240          
    241              /* make sure assign is 0 or 1 in a time-constant manner */
    242              assign = (assign | (unsigned char)-assign) >> 7;
   \        0x8   0x4270             RSBS     R0,R6,#+0
   \        0xA   0x4306             ORRS     R6,R0,R6
   \        0xC   0xB2F6             UXTB     R6,R6
   \        0xE   0x09F6             LSRS     R6,R6,#+7
    243          
    244              MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
   \       0x10   0x6869             LDR      R1,[R5, #+4]
   \       0x12   0x4620             MOV      R0,R4
   \       0x14   0x....'....        BL       mbedtls_mpi_grow
   \       0x18   0x2800             CMP      R0,#+0
   \       0x1A   0xD12F             BNE.N    ??mbedtls_mpi_safe_cond_assign_0
    245          
    246              X->s = X->s * ( 1 - assign ) + Y->s * assign;
   \       0x1C   0x6822             LDR      R2,[R4, #+0]
   \       0x1E   0x4633             MOV      R3,R6
   \       0x20   0xF1C3 0x0301      RSB      R3,R3,#+1
   \       0x24   0x682F             LDR      R7,[R5, #+0]
   \       0x26   0x4631             MOV      R1,R6
   \       0x28   0x434F             MULS     R7,R1,R7
   \       0x2A   0xFB03 0x7202      MLA      R2,R3,R2,R7
   \       0x2E   0x6022             STR      R2,[R4, #+0]
    247          
    248              for( i = 0; i < Y->n; i++ )
   \       0x30   0x2100             MOVS     R1,#+0
   \       0x32   0x46B4             MOV      R12,R6
   \       0x34   0xE010             B.N      ??mbedtls_mpi_safe_cond_assign_1
    249                  X->p[i] = X->p[i] * ( 1 - assign ) + Y->p[i] * assign;
   \                     ??mbedtls_mpi_safe_cond_assign_2: (+1)
   \       0x36   0x68A2             LDR      R2,[R4, #+8]
   \       0x38   0xF852 0x2021      LDR      R2,[R2, R1, LSL #+2]
   \       0x3C   0x4633             MOV      R3,R6
   \       0x3E   0xF1C3 0x0301      RSB      R3,R3,#+1
   \       0x42   0x68AF             LDR      R7,[R5, #+8]
   \       0x44   0xF857 0x7021      LDR      R7,[R7, R1, LSL #+2]
   \       0x48   0xFB0C 0xF707      MUL      R7,R12,R7
   \       0x4C   0xFB03 0x7202      MLA      R2,R3,R2,R7
   \       0x50   0x68A3             LDR      R3,[R4, #+8]
   \       0x52   0xF843 0x2021      STR      R2,[R3, R1, LSL #+2]
   \       0x56   0x1C49             ADDS     R1,R1,#+1
   \                     ??mbedtls_mpi_safe_cond_assign_1: (+1)
   \       0x58   0x686A             LDR      R2,[R5, #+4]
   \       0x5A   0x4291             CMP      R1,R2
   \       0x5C   0xD3EB             BCC.N    ??mbedtls_mpi_safe_cond_assign_2
    250          
    251              for( ; i < X->n; i++ )
   \                     ??mbedtls_mpi_safe_cond_assign_3: (+1)
   \       0x5E   0x6862             LDR      R2,[R4, #+4]
   \       0x60   0x4291             CMP      R1,R2
   \       0x62   0xD20B             BCS.N    ??mbedtls_mpi_safe_cond_assign_0
    252                  X->p[i] *= ( 1 - assign );
   \       0x64   0x68A2             LDR      R2,[R4, #+8]
   \       0x66   0xF852 0x2021      LDR      R2,[R2, R1, LSL #+2]
   \       0x6A   0x4633             MOV      R3,R6
   \       0x6C   0xF1C3 0x0301      RSB      R3,R3,#+1
   \       0x70   0x435A             MULS     R2,R3,R2
   \       0x72   0x68A3             LDR      R3,[R4, #+8]
   \       0x74   0xF843 0x2021      STR      R2,[R3, R1, LSL #+2]
   \       0x78   0x1C49             ADDS     R1,R1,#+1
   \       0x7A   0xE7F0             B.N      ??mbedtls_mpi_safe_cond_assign_3
    253          
    254          cleanup:
    255              return( ret );
   \                     ??mbedtls_mpi_safe_cond_assign_0: (+1)
   \       0x7C   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    256          }
    257          
    258          /*
    259           * Conditionally swap X and Y, without leaking information
    260           * about whether the swap was made or not.
    261           * Here it is not ok to simply swap the pointers, which whould lead to
    262           * different memory access patterns when X and Y are used afterwards.
    263           */

   \                                 In section .text, align 2, keep-with-next
    264          int mbedtls_mpi_safe_cond_swap( mbedtls_mpi *X, mbedtls_mpi *Y, unsigned char swap )
    265          {
   \                     mbedtls_mpi_safe_cond_swap: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
   \        0x6   0x4616             MOV      R6,R2
    266              int ret, s;
    267              size_t i;
    268              mbedtls_mpi_uint tmp;
    269          
    270              if( X == Y )
   \        0x8   0x42AC             CMP      R4,R5
   \        0xA   0xD101             BNE.N    ??mbedtls_mpi_safe_cond_swap_0
    271                  return( 0 );
   \        0xC   0x2000             MOVS     R0,#+0
   \        0xE   0xBDF2             POP      {R1,R4-R7,PC}
    272          
    273              /* make sure swap is 0 or 1 in a time-constant manner */
    274              swap = (swap | (unsigned char)-swap) >> 7;
   \                     ??mbedtls_mpi_safe_cond_swap_0: (+1)
   \       0x10   0x4270             RSBS     R0,R6,#+0
   \       0x12   0x4306             ORRS     R6,R0,R6
   \       0x14   0xB2F6             UXTB     R6,R6
   \       0x16   0x09F6             LSRS     R6,R6,#+7
    275          
    276              MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
   \       0x18   0x6869             LDR      R1,[R5, #+4]
   \       0x1A   0x4620             MOV      R0,R4
   \       0x1C   0x....'....        BL       mbedtls_mpi_grow
   \       0x20   0x2800             CMP      R0,#+0
   \       0x22   0xD141             BNE.N    ??mbedtls_mpi_safe_cond_swap_1
    277              MBEDTLS_MPI_CHK( mbedtls_mpi_grow( Y, X->n ) );
   \       0x24   0x6861             LDR      R1,[R4, #+4]
   \       0x26   0x4628             MOV      R0,R5
   \       0x28   0x....'....        BL       mbedtls_mpi_grow
   \       0x2C   0x2800             CMP      R0,#+0
   \       0x2E   0xD13B             BNE.N    ??mbedtls_mpi_safe_cond_swap_1
    278          
    279              s = X->s;
   \       0x30   0x6822             LDR      R2,[R4, #+0]
    280              X->s = X->s * ( 1 - swap ) + Y->s * swap;
   \       0x32   0x4613             MOV      R3,R2
   \       0x34   0x4637             MOV      R7,R6
   \       0x36   0xF1C7 0x0701      RSB      R7,R7,#+1
   \       0x3A   0xF8D5 0xC000      LDR      R12,[R5, #+0]
   \       0x3E   0x4631             MOV      R1,R6
   \       0x40   0xFB01 0xFC0C      MUL      R12,R1,R12
   \       0x44   0xFB07 0xC303      MLA      R3,R7,R3,R12
   \       0x48   0x6023             STR      R3,[R4, #+0]
    281              Y->s = Y->s * ( 1 - swap ) +    s * swap;
   \       0x4A   0x682B             LDR      R3,[R5, #+0]
   \       0x4C   0x4637             MOV      R7,R6
   \       0x4E   0xF1C7 0x0701      RSB      R7,R7,#+1
   \       0x52   0x434A             MULS     R2,R1,R2
   \       0x54   0xFB07 0x2203      MLA      R2,R7,R3,R2
   \       0x58   0x602A             STR      R2,[R5, #+0]
    282          
    283          
    284              for( i = 0; i < X->n; i++ )
   \       0x5A   0x2200             MOVS     R2,#+0
   \       0x5C   0xE021             B.N      ??mbedtls_mpi_safe_cond_swap_2
    285              {
    286                  tmp = X->p[i];
   \                     ??mbedtls_mpi_safe_cond_swap_3: (+1)
   \       0x5E   0x68A1             LDR      R1,[R4, #+8]
   \       0x60   0xF851 0x1022      LDR      R1,[R1, R2, LSL #+2]
    287                  X->p[i] = X->p[i] * ( 1 - swap ) + Y->p[i] * swap;
   \       0x64   0x460B             MOV      R3,R1
   \       0x66   0x4637             MOV      R7,R6
   \       0x68   0xF1C7 0x0701      RSB      R7,R7,#+1
   \       0x6C   0xF8D5 0xC008      LDR      R12,[R5, #+8]
   \       0x70   0xF85C 0xC022      LDR      R12,[R12, R2, LSL #+2]
   \       0x74   0x46B6             MOV      LR,R6
   \       0x76   0xFB0E 0xFC0C      MUL      R12,LR,R12
   \       0x7A   0xFB07 0xC303      MLA      R3,R7,R3,R12
   \       0x7E   0x68A7             LDR      R7,[R4, #+8]
   \       0x80   0xF847 0x3022      STR      R3,[R7, R2, LSL #+2]
    288                  Y->p[i] = Y->p[i] * ( 1 - swap ) +     tmp * swap;
   \       0x84   0x68AB             LDR      R3,[R5, #+8]
   \       0x86   0xF853 0x3022      LDR      R3,[R3, R2, LSL #+2]
   \       0x8A   0x4637             MOV      R7,R6
   \       0x8C   0xF1C7 0x0701      RSB      R7,R7,#+1
   \       0x90   0x46B4             MOV      R12,R6
   \       0x92   0xFB0C 0xF101      MUL      R1,R12,R1
   \       0x96   0xFB07 0x1103      MLA      R1,R7,R3,R1
   \       0x9A   0x68AB             LDR      R3,[R5, #+8]
   \       0x9C   0xF843 0x1022      STR      R1,[R3, R2, LSL #+2]
    289              }
   \       0xA0   0x1C52             ADDS     R2,R2,#+1
   \                     ??mbedtls_mpi_safe_cond_swap_2: (+1)
   \       0xA2   0x6861             LDR      R1,[R4, #+4]
   \       0xA4   0x428A             CMP      R2,R1
   \       0xA6   0xD3DA             BCC.N    ??mbedtls_mpi_safe_cond_swap_3
    290          
    291          cleanup:
    292              return( ret );
   \                     ??mbedtls_mpi_safe_cond_swap_1: (+1)
   \       0xA8   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    293          }
    294          
    295          /*
    296           * Set value from integer
    297           */

   \                                 In section .text, align 2, keep-with-next
    298          int mbedtls_mpi_lset( mbedtls_mpi *X, mbedtls_mpi_sint z )
    299          {
   \                     mbedtls_mpi_lset: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4605             MOV      R5,R0
   \        0x4   0x460E             MOV      R6,R1
    300              int ret;
    301          
    302              MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
   \        0x6   0x2101             MOVS     R1,#+1
   \        0x8   0x....'....        BL       mbedtls_mpi_grow
   \        0xC   0x0004             MOVS     R4,R0
   \        0xE   0xD113             BNE.N    ??mbedtls_mpi_lset_0
    303              memset( X->p, 0, X->n * ciL );
   \       0x10   0x2200             MOVS     R2,#+0
   \       0x12   0x6869             LDR      R1,[R5, #+4]
   \       0x14   0x0089             LSLS     R1,R1,#+2
   \       0x16   0x68A8             LDR      R0,[R5, #+8]
   \       0x18   0x....'....        BL       __aeabi_memset4
    304          
    305              X->p[0] = ( z < 0 ) ? -z : z;
   \       0x1C   0x2E00             CMP      R6,#+0
   \       0x1E   0xD501             BPL.N    ??mbedtls_mpi_lset_1
   \       0x20   0x4270             RSBS     R0,R6,#+0
   \       0x22   0xE000             B.N      ??mbedtls_mpi_lset_2
   \                     ??mbedtls_mpi_lset_1: (+1)
   \       0x24   0x4630             MOV      R0,R6
   \                     ??mbedtls_mpi_lset_2: (+1)
   \       0x26   0x68A9             LDR      R1,[R5, #+8]
   \       0x28   0x6008             STR      R0,[R1, #+0]
    306              X->s    = ( z < 0 ) ? -1 : 1;
   \       0x2A   0x2E00             CMP      R6,#+0
   \       0x2C   0xD502             BPL.N    ??mbedtls_mpi_lset_3
   \       0x2E   0xF04F 0x30FF      MOV      R0,#-1
   \       0x32   0xE000             B.N      ??mbedtls_mpi_lset_4
   \                     ??mbedtls_mpi_lset_3: (+1)
   \       0x34   0x2001             MOVS     R0,#+1
   \                     ??mbedtls_mpi_lset_4: (+1)
   \       0x36   0x6028             STR      R0,[R5, #+0]
    307          
    308          cleanup:
    309          
    310              return( ret );
   \                     ??mbedtls_mpi_lset_0: (+1)
   \       0x38   0x4620             MOV      R0,R4
   \       0x3A   0xBD70             POP      {R4-R6,PC}       ;; return
    311          }
    312          
    313          /*
    314           * Get a specific bit
    315           */

   \                                 In section .text, align 2, keep-with-next
    316          int mbedtls_mpi_get_bit( const mbedtls_mpi *X, size_t pos )
    317          {
    318              if( X->n * biL <= pos )
   \                     mbedtls_mpi_get_bit: (+1)
   \        0x0   0x6842             LDR      R2,[R0, #+4]
   \        0x2   0xEBB1 0x1F42      CMP      R1,R2, LSL #+5
   \        0x6   0xD301             BCC.N    ??mbedtls_mpi_get_bit_0
    319                  return( 0 );
   \        0x8   0x2000             MOVS     R0,#+0
   \        0xA   0x4770             BX       LR
    320          
    321              return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
   \                     ??mbedtls_mpi_get_bit_0: (+1)
   \        0xC   0x6880             LDR      R0,[R0, #+8]
   \        0xE   0x460A             MOV      R2,R1
   \       0x10   0x0952             LSRS     R2,R2,#+5
   \       0x12   0xF850 0x0022      LDR      R0,[R0, R2, LSL #+2]
   \       0x16   0xF001 0x011F      AND      R1,R1,#0x1F
   \       0x1A   0x40C8             LSRS     R0,R0,R1
   \       0x1C   0xF000 0x0001      AND      R0,R0,#0x1
   \       0x20   0x4770             BX       LR               ;; return
    322          }
    323          
    324          /*
    325           * Set a bit to a specific value of 0 or 1
    326           */

   \                                 In section .text, align 2, keep-with-next
    327          int mbedtls_mpi_set_bit( mbedtls_mpi *X, size_t pos, unsigned char val )
    328          {
   \                     mbedtls_mpi_set_bit: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x4607             MOV      R7,R0
   \        0x4   0x4614             MOV      R4,R2
    329              int ret = 0;
   \        0x6   0x2000             MOVS     R0,#+0
    330              size_t off = pos / biL;
   \        0x8   0x460D             MOV      R5,R1
   \        0xA   0x096D             LSRS     R5,R5,#+5
    331              size_t idx = pos % biL;
   \        0xC   0xF001 0x061F      AND      R6,R1,#0x1F
    332          
    333              if( val != 0 && val != 1 )
   \       0x10   0x0022             MOVS     R2,R4
   \       0x12   0xD004             BEQ.N    ??mbedtls_mpi_set_bit_0
   \       0x14   0x2A01             CMP      R2,#+1
   \       0x16   0xD002             BEQ.N    ??mbedtls_mpi_set_bit_0
    334                  return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
   \       0x18   0xF06F 0x0003      MVN      R0,#+3
   \       0x1C   0xBDF2             POP      {R1,R4-R7,PC}
    335          
    336              if( X->n * biL <= pos )
   \                     ??mbedtls_mpi_set_bit_0: (+1)
   \       0x1E   0x687A             LDR      R2,[R7, #+4]
   \       0x20   0xEBB1 0x1F42      CMP      R1,R2, LSL #+5
   \       0x24   0xD309             BCC.N    ??mbedtls_mpi_set_bit_1
    337              {
    338                  if( val == 0 )
   \       0x26   0x0020             MOVS     R0,R4
   \       0x28   0xD101             BNE.N    ??mbedtls_mpi_set_bit_2
    339                      return( 0 );
   \       0x2A   0x2000             MOVS     R0,#+0
   \       0x2C   0xBDF2             POP      {R1,R4-R7,PC}
    340          
    341                  MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, off + 1 ) );
   \                     ??mbedtls_mpi_set_bit_2: (+1)
   \       0x2E   0x1C69             ADDS     R1,R5,#+1
   \       0x30   0x4638             MOV      R0,R7
   \       0x32   0x....'....        BL       mbedtls_mpi_grow
   \       0x36   0x2800             CMP      R0,#+0
   \       0x38   0xD110             BNE.N    ??mbedtls_mpi_set_bit_3
    342              }
    343          
    344              X->p[off] &= ~( (mbedtls_mpi_uint) 0x01 << idx );
   \                     ??mbedtls_mpi_set_bit_1: (+1)
   \       0x3A   0x68B9             LDR      R1,[R7, #+8]
   \       0x3C   0xF851 0x1025      LDR      R1,[R1, R5, LSL #+2]
   \       0x40   0x2201             MOVS     R2,#+1
   \       0x42   0x40B2             LSLS     R2,R2,R6
   \       0x44   0x4391             BICS     R1,R1,R2
   \       0x46   0x68BA             LDR      R2,[R7, #+8]
   \       0x48   0xF842 0x1025      STR      R1,[R2, R5, LSL #+2]
    345              X->p[off] |= (mbedtls_mpi_uint) val << idx;
   \       0x4C   0x68B9             LDR      R1,[R7, #+8]
   \       0x4E   0xF851 0x1025      LDR      R1,[R1, R5, LSL #+2]
   \       0x52   0x40B4             LSLS     R4,R4,R6
   \       0x54   0x430C             ORRS     R4,R4,R1
   \       0x56   0x68B9             LDR      R1,[R7, #+8]
   \       0x58   0xF841 0x4025      STR      R4,[R1, R5, LSL #+2]
    346          
    347          cleanup:
    348          
    349              return( ret );
   \                     ??mbedtls_mpi_set_bit_3: (+1)
   \       0x5C   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    350          }
    351          
    352          /*
    353           * Return the number of less significant zero-bits
    354           */

   \                                 In section .text, align 2, keep-with-next
    355          size_t mbedtls_mpi_lsb( const mbedtls_mpi *X )
    356          {
   \                     mbedtls_mpi_lsb: (+1)
   \        0x0   0xB410             PUSH     {R4}
   \        0x2   0x4601             MOV      R1,R0
    357              size_t i, j, count = 0;
   \        0x4   0x2000             MOVS     R0,#+0
    358          
    359              for( i = 0; i < X->n; i++ )
   \        0x6   0x4602             MOV      R2,R0
   \        0x8   0xE00E             B.N      ??mbedtls_mpi_lsb_0
    360                  for( j = 0; j < biL; j++, count++ )
   \                     ??mbedtls_mpi_lsb_1: (+1)
   \        0xA   0x1C5B             ADDS     R3,R3,#+1
   \        0xC   0x1C40             ADDS     R0,R0,#+1
   \                     ??mbedtls_mpi_lsb_2: (+1)
   \        0xE   0x2B20             CMP      R3,#+32
   \       0x10   0xD209             BCS.N    ??mbedtls_mpi_lsb_3
    361                      if( ( ( X->p[i] >> j ) & 1 ) != 0 )
   \       0x12   0x688C             LDR      R4,[R1, #+8]
   \       0x14   0xF854 0x4022      LDR      R4,[R4, R2, LSL #+2]
   \       0x18   0x40DC             LSRS     R4,R4,R3
   \       0x1A   0x07E4             LSLS     R4,R4,#+31
   \       0x1C   0xD5F5             BPL.N    ??mbedtls_mpi_lsb_1
    362                          return( count );
   \       0x1E   0xE000             B.N      ??mbedtls_mpi_lsb_4
    363          
    364              return( 0 );
   \                     ??mbedtls_mpi_lsb_5: (+1)
   \       0x20   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_mpi_lsb_4: (+1)
   \       0x22   0xBC10             POP      {R4}
   \       0x24   0x4770             BX       LR               ;; return
   \                     ??mbedtls_mpi_lsb_3: (+1)
   \       0x26   0x1C52             ADDS     R2,R2,#+1
   \                     ??mbedtls_mpi_lsb_0: (+1)
   \       0x28   0x684B             LDR      R3,[R1, #+4]
   \       0x2A   0x429A             CMP      R2,R3
   \       0x2C   0xD2F8             BCS.N    ??mbedtls_mpi_lsb_5
   \       0x2E   0x2300             MOVS     R3,#+0
   \       0x30   0xE7ED             B.N      ??mbedtls_mpi_lsb_2
    365          }
    366          
    367          /*
    368           * Count leading zero bits in a given integer
    369           */

   \                                 In section .text, align 2, keep-with-next
    370          static size_t mbedtls_clz( const mbedtls_mpi_uint x )
    371          {
   \                     mbedtls_clz: (+1)
   \        0x0   0x4601             MOV      R1,R0
    372              size_t j;
    373              mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
   \        0x2   0xF04F 0x4200      MOV      R2,#-2147483648
    374          
    375              for( j = 0; j < biL; j++ )
   \        0x6   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_clz_0: (+1)
   \        0x8   0x2820             CMP      R0,#+32
   \        0xA   0xD204             BCS.N    ??mbedtls_clz_1
    376              {
    377                  if( x & mask ) break;
   \        0xC   0x4211             TST      R1,R2
   \        0xE   0xD102             BNE.N    ??mbedtls_clz_1
    378          
    379                  mask >>= 1;
   \       0x10   0x0852             LSRS     R2,R2,#+1
    380              }
   \       0x12   0x1C40             ADDS     R0,R0,#+1
   \       0x14   0xE7F8             B.N      ??mbedtls_clz_0
    381          
    382              return j;
   \                     ??mbedtls_clz_1: (+1)
   \       0x16   0x4770             BX       LR               ;; return
    383          }
    384          
    385          /*
    386           * Return the number of bits
    387           */

   \                                 In section .text, align 2, keep-with-next
    388          size_t mbedtls_mpi_bitlen( const mbedtls_mpi *X )
    389          {
   \                     mbedtls_mpi_bitlen: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
    390              size_t i, j;
    391          
    392              if( X->n == 0 )
   \        0x2   0x6841             LDR      R1,[R0, #+4]
   \        0x4   0x2900             CMP      R1,#+0
   \        0x6   0xD101             BNE.N    ??mbedtls_mpi_bitlen_0
    393                  return( 0 );
   \        0x8   0x2000             MOVS     R0,#+0
   \        0xA   0xBD10             POP      {R4,PC}
    394          
    395              for( i = X->n - 1; i > 0; i-- )
   \                     ??mbedtls_mpi_bitlen_0: (+1)
   \        0xC   0x460C             MOV      R4,R1
   \        0xE   0x1E64             SUBS     R4,R4,#+1
   \                     ??mbedtls_mpi_bitlen_1: (+1)
   \       0x10   0x2C00             CMP      R4,#+0
   \       0x12   0xD006             BEQ.N    ??mbedtls_mpi_bitlen_2
    396                  if( X->p[i] != 0 )
   \       0x14   0x6881             LDR      R1,[R0, #+8]
   \       0x16   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \       0x1A   0x2900             CMP      R1,#+0
   \       0x1C   0xD101             BNE.N    ??mbedtls_mpi_bitlen_2
   \       0x1E   0x1E64             SUBS     R4,R4,#+1
   \       0x20   0xE7F6             B.N      ??mbedtls_mpi_bitlen_1
    397                      break;
    398          
    399              j = biL - mbedtls_clz( X->p[i] );
   \                     ??mbedtls_mpi_bitlen_2: (+1)
   \       0x22   0x6880             LDR      R0,[R0, #+8]
   \       0x24   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \       0x28   0x....'....        BL       mbedtls_clz
   \       0x2C   0xF1C0 0x0020      RSB      R0,R0,#+32
    400          
    401              return( ( i * biL ) + j );
   \       0x30   0xEB00 0x1044      ADD      R0,R0,R4, LSL #+5
   \       0x34   0xBD10             POP      {R4,PC}          ;; return
    402          }
    403          
    404          /*
    405           * Return the total size in bytes
    406           */

   \                                 In section .text, align 2, keep-with-next
    407          size_t mbedtls_mpi_size( const mbedtls_mpi *X )
    408          {
   \                     mbedtls_mpi_size: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    409              return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );
   \        0x2   0x....'....        BL       mbedtls_mpi_bitlen
   \        0x6   0x1DC0             ADDS     R0,R0,#+7
   \        0x8   0x08C0             LSRS     R0,R0,#+3
   \        0xA   0xBD02             POP      {R1,PC}          ;; return
    410          }
    411          
    412          /*
    413           * Convert an ASCII character to digit value
    414           */

   \                                 In section .text, align 2, keep-with-next
    415          static int mpi_get_digit( mbedtls_mpi_uint *d, int radix, char c )
    416          {
    417              *d = 255;
   \                     mpi_get_digit: (+1)
   \        0x0   0x23FF             MOVS     R3,#+255
   \        0x2   0x6003             STR      R3,[R0, #+0]
    418          
    419              if( c >= 0x30 && c <= 0x39 ) *d = c - 0x30;
   \        0x4   0x4613             MOV      R3,R2
   \        0x6   0x3B30             SUBS     R3,R3,#+48
   \        0x8   0x2B0A             CMP      R3,#+10
   \        0xA   0xD202             BCS.N    ??mpi_get_digit_0
   \        0xC   0x4613             MOV      R3,R2
   \        0xE   0x3B30             SUBS     R3,R3,#+48
   \       0x10   0x6003             STR      R3,[R0, #+0]
    420              if( c >= 0x41 && c <= 0x46 ) *d = c - 0x37;
   \                     ??mpi_get_digit_0: (+1)
   \       0x12   0x4613             MOV      R3,R2
   \       0x14   0x3B41             SUBS     R3,R3,#+65
   \       0x16   0x2B06             CMP      R3,#+6
   \       0x18   0xD202             BCS.N    ??mpi_get_digit_1
   \       0x1A   0x4613             MOV      R3,R2
   \       0x1C   0x3B37             SUBS     R3,R3,#+55
   \       0x1E   0x6003             STR      R3,[R0, #+0]
    421              if( c >= 0x61 && c <= 0x66 ) *d = c - 0x57;
   \                     ??mpi_get_digit_1: (+1)
   \       0x20   0x4613             MOV      R3,R2
   \       0x22   0x3B61             SUBS     R3,R3,#+97
   \       0x24   0x2B06             CMP      R3,#+6
   \       0x26   0xD201             BCS.N    ??mpi_get_digit_2
   \       0x28   0x3A57             SUBS     R2,R2,#+87
   \       0x2A   0x6002             STR      R2,[R0, #+0]
    422          
    423              if( *d >= (mbedtls_mpi_uint) radix )
   \                     ??mpi_get_digit_2: (+1)
   \       0x2C   0x6800             LDR      R0,[R0, #+0]
   \       0x2E   0x4288             CMP      R0,R1
   \       0x30   0xD302             BCC.N    ??mpi_get_digit_3
    424                  return( MBEDTLS_ERR_MPI_INVALID_CHARACTER );
   \       0x32   0xF06F 0x0005      MVN      R0,#+5
   \       0x36   0x4770             BX       LR
    425          
    426              return( 0 );
   \                     ??mpi_get_digit_3: (+1)
   \       0x38   0x2000             MOVS     R0,#+0
   \       0x3A   0x4770             BX       LR               ;; return
    427          }
    428          
    429          /*
    430           * Import from an ASCII string
    431           */

   \                                 In section .text, align 2, keep-with-next
    432          int mbedtls_mpi_read_string( mbedtls_mpi *X, int radix, const char *s )
    433          {
   \                     mbedtls_mpi_read_string: (+1)
   \        0x0   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \        0x4   0xB084             SUB      SP,SP,#+16
   \        0x6   0x4607             MOV      R7,R0
   \        0x8   0x4688             MOV      R8,R1
   \        0xA   0x4616             MOV      R6,R2
    434              int ret;
    435              size_t i, j, slen, n;
    436              mbedtls_mpi_uint d;
    437              mbedtls_mpi T;
    438          
    439              if( radix < 2 || radix > 16 )
   \        0xC   0xF1A8 0x0002      SUB      R0,R8,#+2
   \       0x10   0x280F             CMP      R0,#+15
   \       0x12   0xD20C             BCS.N    ??mbedtls_mpi_read_string_0
    440                  return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
    441          
    442              mbedtls_mpi_init( &T );
   \       0x14   0xA801             ADD      R0,SP,#+4
   \       0x16   0x....'....        BL       mbedtls_mpi_init
    443          
    444              slen = strlen( s );
   \       0x1A   0x4630             MOV      R0,R6
   \       0x1C   0x....'....        BL       strlen
   \       0x20   0x4681             MOV      R9,R0
    445          
    446              if( radix == 16 )
   \       0x22   0xF1B8 0x0F10      CMP      R8,#+16
   \       0x26   0xD150             BNE.N    ??mbedtls_mpi_read_string_1
    447              {
    448                  if( slen > MPI_SIZE_T_MAX >> 2 )
   \       0x28   0xF1B9 0x4F80      CMP      R9,#+1073741824
   \       0x2C   0xD302             BCC.N    ??mbedtls_mpi_read_string_2
    449                      return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
   \                     ??mbedtls_mpi_read_string_0: (+1)
   \       0x2E   0xF06F 0x0003      MVN      R0,#+3
   \       0x32   0xE047             B.N      ??mbedtls_mpi_read_string_3
    450          
    451                  n = BITS_TO_LIMBS( slen << 2 );
   \                     ??mbedtls_mpi_read_string_2: (+1)
   \       0x34   0xEA4F 0x0089      LSL      R0,R9,#+2
   \       0x38   0xF000 0x001F      AND      R0,R0,#0x1F
   \       0x3C   0x1E40             SUBS     R0,R0,#+1
   \       0x3E   0x4180             SBCS     R0,R0,R0
   \       0x40   0x43C0             MVNS     R0,R0
   \       0x42   0xEA4F 0x0189      LSL      R1,R9,#+2
   \       0x46   0x0949             LSRS     R1,R1,#+5
   \       0x48   0xEB11 0x71D0      ADDS     R1,R1,R0, LSR #+31
    452          
    453                  MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, n ) );
   \       0x4C   0x4638             MOV      R0,R7
   \       0x4E   0x....'....        BL       mbedtls_mpi_grow
   \       0x52   0x0004             MOVS     R4,R0
   \       0x54   0xD132             BNE.N    ??mbedtls_mpi_read_string_4
    454                  MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
   \       0x56   0x2100             MOVS     R1,#+0
   \       0x58   0x4638             MOV      R0,R7
   \       0x5A   0x....'....        BL       mbedtls_mpi_lset
   \       0x5E   0x0004             MOVS     R4,R0
   \       0x60   0xD12C             BNE.N    ??mbedtls_mpi_read_string_4
    455          
    456                  for( i = slen, j = 0; i > 0; i--, j++ )
   \       0x62   0x464D             MOV      R5,R9
   \       0x64   0xF04F 0x0800      MOV      R8,#+0
   \       0x68   0xE01D             B.N      ??mbedtls_mpi_read_string_5
    457                  {
    458                      if( i == 1 && s[i - 1] == '-' )
    459                      {
    460                          X->s = -1;
    461                          break;
    462                      }
    463          
    464                      MBEDTLS_MPI_CHK( mpi_get_digit( &d, radix, s[i - 1] ) );
   \                     ??mbedtls_mpi_read_string_6: (+1)
   \       0x6A   0x1970             ADDS     R0,R6,R5
   \       0x6C   0xF810 0x2C01      LDRB     R2,[R0, #-1]
   \       0x70   0x2110             MOVS     R1,#+16
   \       0x72   0x4668             MOV      R0,SP
   \       0x74   0x....'....        BL       mpi_get_digit
   \       0x78   0x2800             CMP      R0,#+0
   \       0x7A   0xD159             BNE.N    ??mbedtls_mpi_read_string_7
    465                      X->p[j / ( 2 * ciL )] |= d << ( ( j % ( 2 * ciL ) ) << 2 );
   \       0x7C   0x68B9             LDR      R1,[R7, #+8]
   \       0x7E   0x4642             MOV      R2,R8
   \       0x80   0x08D2             LSRS     R2,R2,#+3
   \       0x82   0x460B             MOV      R3,R1
   \       0x84   0x4644             MOV      R4,R8
   \       0x86   0x08E4             LSRS     R4,R4,#+3
   \       0x88   0xF853 0x3024      LDR      R3,[R3, R4, LSL #+2]
   \       0x8C   0x9C00             LDR      R4,[SP, #+0]
   \       0x8E   0xEA4F 0x0C88      LSL      R12,R8,#+2
   \       0x92   0xF00C 0x0C1C      AND      R12,R12,#0x1C
   \       0x96   0xFA04 0xF40C      LSL      R4,R4,R12
   \       0x9A   0x4323             ORRS     R3,R4,R3
   \       0x9C   0xF841 0x3022      STR      R3,[R1, R2, LSL #+2]
   \       0xA0   0x1E6D             SUBS     R5,R5,#+1
   \       0xA2   0xF108 0x0801      ADD      R8,R8,#+1
   \                     ??mbedtls_mpi_read_string_5: (+1)
   \       0xA6   0x2D00             CMP      R5,#+0
   \       0xA8   0xD042             BEQ.N    ??mbedtls_mpi_read_string_7
   \       0xAA   0x2D01             CMP      R5,#+1
   \       0xAC   0xD1DD             BNE.N    ??mbedtls_mpi_read_string_6
   \       0xAE   0x7831             LDRB     R1,[R6, #+0]
   \       0xB0   0x292D             CMP      R1,#+45
   \       0xB2   0xD1DA             BNE.N    ??mbedtls_mpi_read_string_6
   \       0xB4   0x4604             MOV      R4,R0
   \       0xB6   0xF04F 0x30FF      MOV      R0,#-1
   \       0xBA   0x6038             STR      R0,[R7, #+0]
    466                  }
    467              }
    468              else
    469              {
    470                  MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
    471          
    472                  for( i = 0; i < slen; i++ )
    473                  {
    474                      if( i == 0 && s[i] == '-' )
    475                      {
    476                          X->s = -1;
    477                          continue;
    478                      }
    479          
    480                      MBEDTLS_MPI_CHK( mpi_get_digit( &d, radix, s[i] ) );
    481                      MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T, X, radix ) );
    482          
    483                      if( X->s == 1 )
    484                      {
    485                          MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( X, &T, d ) );
    486                      }
    487                      else
    488                      {
    489                          MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( X, &T, d ) );
    490                      }
    491                  }
    492              }
    493          
    494          cleanup:
    495          
    496              mbedtls_mpi_free( &T );
   \                     ??mbedtls_mpi_read_string_4: (+1)
   \       0xBC   0xA801             ADD      R0,SP,#+4
   \       0xBE   0x....'....        BL       mbedtls_mpi_free
    497          
    498              return( ret );
   \       0xC2   0x4620             MOV      R0,R4
   \                     ??mbedtls_mpi_read_string_3: (+1)
   \       0xC4   0xB005             ADD      SP,SP,#+20
   \       0xC6   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
   \                     ??mbedtls_mpi_read_string_1: (+1)
   \       0xCA   0x2100             MOVS     R1,#+0
   \       0xCC   0x4638             MOV      R0,R7
   \       0xCE   0x....'....        BL       mbedtls_mpi_lset
   \       0xD2   0x0004             MOVS     R4,R0
   \       0xD4   0xD1F2             BNE.N    ??mbedtls_mpi_read_string_4
   \       0xD6   0x2100             MOVS     R1,#+0
   \       0xD8   0x4635             MOV      R5,R6
   \       0xDA   0x464E             MOV      R6,R9
   \       0xDC   0x460C             MOV      R4,R1
   \       0xDE   0xE00B             B.N      ??mbedtls_mpi_read_string_8
   \                     ??mbedtls_mpi_read_string_9: (+1)
   \       0xE0   0x7829             LDRB     R1,[R5, #+0]
   \       0xE2   0x292D             CMP      R1,#+45
   \       0xE4   0xD10C             BNE.N    ??mbedtls_mpi_read_string_10
   \       0xE6   0xF04F 0x31FF      MOV      R1,#-1
   \       0xEA   0x6039             STR      R1,[R7, #+0]
   \       0xEC   0xE003             B.N      ??mbedtls_mpi_read_string_11
   \                     ??mbedtls_mpi_read_string_12: (+1)
   \       0xEE   0x....'....        BL       mbedtls_mpi_sub_int
   \       0xF2   0x2800             CMP      R0,#+0
   \       0xF4   0xD11C             BNE.N    ??mbedtls_mpi_read_string_7
   \                     ??mbedtls_mpi_read_string_11: (+1)
   \       0xF6   0x1C64             ADDS     R4,R4,#+1
   \                     ??mbedtls_mpi_read_string_8: (+1)
   \       0xF8   0x42B4             CMP      R4,R6
   \       0xFA   0xD219             BCS.N    ??mbedtls_mpi_read_string_7
   \       0xFC   0x2C00             CMP      R4,#+0
   \       0xFE   0xD0EF             BEQ.N    ??mbedtls_mpi_read_string_9
   \                     ??mbedtls_mpi_read_string_10: (+1)
   \      0x100   0x5D2A             LDRB     R2,[R5, R4]
   \      0x102   0x4641             MOV      R1,R8
   \      0x104   0x4668             MOV      R0,SP
   \      0x106   0x....'....        BL       mpi_get_digit
   \      0x10A   0x2800             CMP      R0,#+0
   \      0x10C   0xD110             BNE.N    ??mbedtls_mpi_read_string_7
   \      0x10E   0x4642             MOV      R2,R8
   \      0x110   0x4639             MOV      R1,R7
   \      0x112   0xA801             ADD      R0,SP,#+4
   \      0x114   0x....'....        BL       mbedtls_mpi_mul_int
   \      0x118   0x2800             CMP      R0,#+0
   \      0x11A   0xD109             BNE.N    ??mbedtls_mpi_read_string_7
   \      0x11C   0x6838             LDR      R0,[R7, #+0]
   \      0x11E   0x2801             CMP      R0,#+1
   \      0x120   0x9A00             LDR      R2,[SP, #+0]
   \      0x122   0xA901             ADD      R1,SP,#+4
   \      0x124   0x4638             MOV      R0,R7
   \      0x126   0xD1E2             BNE.N    ??mbedtls_mpi_read_string_12
   \      0x128   0x....'....        BL       mbedtls_mpi_add_int
   \      0x12C   0x2800             CMP      R0,#+0
   \      0x12E   0xD0E2             BEQ.N    ??mbedtls_mpi_read_string_11
   \                     ??mbedtls_mpi_read_string_7: (+1)
   \      0x130   0x4604             MOV      R4,R0
   \      0x132   0xE7C3             B.N      ??mbedtls_mpi_read_string_4
    499          }
    500          
    501          /*
    502           * Helper to write the digits high-order first
    503           */

   \                                 In section .text, align 2, keep-with-next
    504          static int mpi_write_hlp( mbedtls_mpi *X, int radix, char **p )
    505          {
   \                     mpi_write_hlp: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x4606             MOV      R6,R0
   \        0x4   0x460F             MOV      R7,R1
   \        0x6   0x4615             MOV      R5,R2
    506              int ret;
    507              mbedtls_mpi_uint r;
    508          
    509              if( radix < 2 || radix > 16 )
   \        0x8   0x1EB8             SUBS     R0,R7,#+2
   \        0xA   0x280F             CMP      R0,#+15
   \        0xC   0xD302             BCC.N    ??mpi_write_hlp_0
    510                  return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
   \        0xE   0xF06F 0x0003      MVN      R0,#+3
   \       0x12   0xBDF2             POP      {R1,R4-R7,PC}
    511          
    512              MBEDTLS_MPI_CHK( mbedtls_mpi_mod_int( &r, X, radix ) );
   \                     ??mpi_write_hlp_0: (+1)
   \       0x14   0x463A             MOV      R2,R7
   \       0x16   0x4631             MOV      R1,R6
   \       0x18   0x4668             MOV      R0,SP
   \       0x1A   0x....'....        BL       mbedtls_mpi_mod_int
   \       0x1E   0x0004             MOVS     R4,R0
   \       0x20   0xD123             BNE.N    ??mpi_write_hlp_1
    513              MBEDTLS_MPI_CHK( mbedtls_mpi_div_int( X, NULL, X, radix ) );
   \       0x22   0x463B             MOV      R3,R7
   \       0x24   0x4632             MOV      R2,R6
   \       0x26   0x2100             MOVS     R1,#+0
   \       0x28   0x4630             MOV      R0,R6
   \       0x2A   0x....'....        BL       mbedtls_mpi_div_int
   \       0x2E   0x0004             MOVS     R4,R0
   \       0x30   0xD11B             BNE.N    ??mpi_write_hlp_1
    514          
    515              if( mbedtls_mpi_cmp_int( X, 0 ) != 0 )
   \       0x32   0x2100             MOVS     R1,#+0
   \       0x34   0x4630             MOV      R0,R6
   \       0x36   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x3A   0x2800             CMP      R0,#+0
   \       0x3C   0xD006             BEQ.N    ??mpi_write_hlp_2
    516                  MBEDTLS_MPI_CHK( mpi_write_hlp( X, radix, p ) );
   \       0x3E   0x462A             MOV      R2,R5
   \       0x40   0x4639             MOV      R1,R7
   \       0x42   0x4630             MOV      R0,R6
   \       0x44   0xF7FF 0xFFDC      BL       mpi_write_hlp
   \       0x48   0x0004             MOVS     R4,R0
   \       0x4A   0xD10E             BNE.N    ??mpi_write_hlp_1
    517          
    518              if( r < 10 )
   \                     ??mpi_write_hlp_2: (+1)
   \       0x4C   0x9800             LDR      R0,[SP, #+0]
   \       0x4E   0x280A             CMP      R0,#+10
   \       0x50   0x6828             LDR      R0,[R5, #+0]
   \       0x52   0xD205             BCS.N    ??mpi_write_hlp_3
    519                  *(*p)++ = (char)( r + 0x30 );
   \       0x54   0x1C41             ADDS     R1,R0,#+1
   \       0x56   0x6029             STR      R1,[R5, #+0]
   \       0x58   0x9900             LDR      R1,[SP, #+0]
   \       0x5A   0x3130             ADDS     R1,R1,#+48
   \       0x5C   0x7001             STRB     R1,[R0, #+0]
   \       0x5E   0xE004             B.N      ??mpi_write_hlp_1
    520              else
    521                  *(*p)++ = (char)( r + 0x37 );
   \                     ??mpi_write_hlp_3: (+1)
   \       0x60   0x1C41             ADDS     R1,R0,#+1
   \       0x62   0x6029             STR      R1,[R5, #+0]
   \       0x64   0x9900             LDR      R1,[SP, #+0]
   \       0x66   0x3137             ADDS     R1,R1,#+55
   \       0x68   0x7001             STRB     R1,[R0, #+0]
    522          
    523          cleanup:
    524          
    525              return( ret );
   \                     ??mpi_write_hlp_1: (+1)
   \       0x6A   0x4620             MOV      R0,R4
   \       0x6C   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    526          }
    527          
    528          /*
    529           * Export into an ASCII string
    530           */

   \                                 In section .text, align 2, keep-with-next
    531          int mbedtls_mpi_write_string( const mbedtls_mpi *X, int radix,
    532                                        char *buf, size_t buflen, size_t *olen )
    533          {
   \                     mbedtls_mpi_write_string: (+1)
   \        0x0   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \        0x4   0xB084             SUB      SP,SP,#+16
   \        0x6   0x4688             MOV      R8,R1
   \        0x8   0x4616             MOV      R6,R2
   \        0xA   0x4699             MOV      R9,R3
    534              int ret = 0;
   \        0xC   0x2500             MOVS     R5,#+0
    535              size_t n;
    536              char *p;
    537              mbedtls_mpi T;
    538          
    539              if( radix < 2 || radix > 16 )
   \        0xE   0xF1A8 0x0102      SUB      R1,R8,#+2
   \       0x12   0x290F             CMP      R1,#+15
   \       0x14   0xD302             BCC.N    ??mbedtls_mpi_write_string_0
    540                  return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
   \       0x16   0xF06F 0x0003      MVN      R0,#+3
   \       0x1A   0xE084             B.N      ??mbedtls_mpi_write_string_1
   \                     ??mbedtls_mpi_write_string_0: (+1)
   \       0x1C   0x4607             MOV      R7,R0
    541          
    542              n = mbedtls_mpi_bitlen( X );
   \       0x1E   0x....'....        BL       mbedtls_mpi_bitlen
    543              if( radix >=  4 ) n >>= 1;
   \       0x22   0xF1B8 0x0F04      CMP      R8,#+4
   \       0x26   0xDB00             BLT.N    ??mbedtls_mpi_write_string_2
   \       0x28   0x0840             LSRS     R0,R0,#+1
    544              if( radix >= 16 ) n >>= 1;
   \                     ??mbedtls_mpi_write_string_2: (+1)
   \       0x2A   0xF1B8 0x0F10      CMP      R8,#+16
   \       0x2E   0xDB00             BLT.N    ??mbedtls_mpi_write_string_3
   \       0x30   0x0840             LSRS     R0,R0,#+1
    545              /*
    546               * Round up the buffer length to an even value to ensure that there is
    547               * enough room for hexadecimal values that can be represented in an odd
    548               * number of digits.
    549               */
    550              n += 3 + ( ( n + 1 ) & 1 );
   \                     ??mbedtls_mpi_write_string_3: (+1)
   \       0x32   0x1C41             ADDS     R1,R0,#+1
   \       0x34   0xF001 0x0101      AND      R1,R1,#0x1
   \       0x38   0x1CC9             ADDS     R1,R1,#+3
   \       0x3A   0x1808             ADDS     R0,R1,R0
   \       0x3C   0x9C0C             LDR      R4,[SP, #+48]
    551          
    552              if( buflen < n )
   \       0x3E   0x4581             CMP      R9,R0
   \       0x40   0xD203             BCS.N    ??mbedtls_mpi_write_string_4
    553              {
    554                  *olen = n;
   \       0x42   0x6020             STR      R0,[R4, #+0]
    555                  return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
   \       0x44   0xF06F 0x0007      MVN      R0,#+7
   \       0x48   0xE06D             B.N      ??mbedtls_mpi_write_string_1
    556              }
    557          
    558              p = buf;
   \                     ??mbedtls_mpi_write_string_4: (+1)
   \       0x4A   0x9600             STR      R6,[SP, #+0]
    559              mbedtls_mpi_init( &T );
   \       0x4C   0xA801             ADD      R0,SP,#+4
   \       0x4E   0x....'....        BL       mbedtls_mpi_init
    560          
    561              if( X->s == -1 )
   \       0x52   0x6838             LDR      R0,[R7, #+0]
   \       0x54   0xF110 0x0F01      CMN      R0,#+1
   \       0x58   0xD105             BNE.N    ??mbedtls_mpi_write_string_5
    562                  *p++ = '-';
   \       0x5A   0x202D             MOVS     R0,#+45
   \       0x5C   0x9900             LDR      R1,[SP, #+0]
   \       0x5E   0x7008             STRB     R0,[R1, #+0]
   \       0x60   0x9800             LDR      R0,[SP, #+0]
   \       0x62   0x1C40             ADDS     R0,R0,#+1
   \       0x64   0x9000             STR      R0,[SP, #+0]
    563          
    564              if( radix == 16 )
   \                     ??mbedtls_mpi_write_string_5: (+1)
   \       0x66   0xF1B8 0x0F10      CMP      R8,#+16
   \       0x6A   0xD13D             BNE.N    ??mbedtls_mpi_write_string_6
    565              {
    566                  int c;
    567                  size_t i, j, k;
    568          
    569                  for( i = X->n, k = 0; i > 0; i-- )
   \       0x6C   0xF8D7 0xE004      LDR      LR,[R7, #+4]
   \       0x70   0x462A             MOV      R2,R5
   \       0x72   0xF1BE 0x0F00      CMP      LR,#+0
   \       0x76   0xE033             B.N      ??mbedtls_mpi_write_string_7
    570                  {
    571                      for( j = ciL; j > 0; j-- )
    572                      {
    573                          c = ( X->p[i - 1] >> ( ( j - 1 ) << 3) ) & 0xFF;
   \                     ??mbedtls_mpi_write_string_8: (+1)
   \       0x78   0x6899             LDR      R1,[R3, #+8]
   \       0x7A   0xEB01 0x018E      ADD      R1,R1,LR, LSL #+2
   \       0x7E   0xF851 0x1C04      LDR      R1,[R1, #-4]
   \       0x82   0x4607             MOV      R7,R0
   \       0x84   0x1E7F             SUBS     R7,R7,#+1
   \       0x86   0x00FF             LSLS     R7,R7,#+3
   \       0x88   0x40F9             LSRS     R1,R1,R7
   \       0x8A   0xF001 0x01FF      AND      R1,R1,#0xFF
    574          
    575                          if( c == 0 && k == 0 && ( i + j ) != 2 )
   \       0x8E   0x2900             CMP      R1,#+0
   \       0x90   0xD105             BNE.N    ??mbedtls_mpi_write_string_9
   \       0x92   0x2A00             CMP      R2,#+0
   \       0x94   0xD103             BNE.N    ??mbedtls_mpi_write_string_9
   \       0x96   0xEB00 0x070E      ADD      R7,R0,LR
   \       0x9A   0x2F02             CMP      R7,#+2
   \       0x9C   0xD11B             BNE.N    ??mbedtls_mpi_write_string_10
    576                              continue;
    577          
    578                          *(p++) = "0123456789ABCDEF" [c / 16];
   \                     ??mbedtls_mpi_write_string_9: (+1)
   \       0x9E   0x....             LDR.N    R2,??DataTable1
   \       0xA0   0x460F             MOV      R7,R1
   \       0xA2   0x10FF             ASRS     R7,R7,#+3
   \       0xA4   0xEB01 0x7717      ADD      R7,R1,R7, LSR #+28
   \       0xA8   0x113F             ASRS     R7,R7,#+4
   \       0xAA   0x5DD7             LDRB     R7,[R2, R7]
   \       0xAC   0xF8DD 0xC000      LDR      R12,[SP, #+0]
   \       0xB0   0xF88C 0x7000      STRB     R7,[R12, #+0]
   \       0xB4   0x9F00             LDR      R7,[SP, #+0]
   \       0xB6   0x1C7F             ADDS     R7,R7,#+1
   \       0xB8   0x9700             STR      R7,[SP, #+0]
    579                          *(p++) = "0123456789ABCDEF" [c % 16];
   \       0xBA   0x460F             MOV      R7,R1
   \       0xBC   0x10FF             ASRS     R7,R7,#+3
   \       0xBE   0xEB01 0x7717      ADD      R7,R1,R7, LSR #+28
   \       0xC2   0x113F             ASRS     R7,R7,#+4
   \       0xC4   0xEBA1 0x1107      SUB      R1,R1,R7, LSL #+4
   \       0xC8   0x5C51             LDRB     R1,[R2, R1]
   \       0xCA   0x9A00             LDR      R2,[SP, #+0]
   \       0xCC   0x7011             STRB     R1,[R2, #+0]
   \       0xCE   0x9900             LDR      R1,[SP, #+0]
   \       0xD0   0x1C49             ADDS     R1,R1,#+1
   \       0xD2   0x9100             STR      R1,[SP, #+0]
    580                          k = 1;
   \       0xD4   0x2201             MOVS     R2,#+1
    581                      }
   \                     ??mbedtls_mpi_write_string_10: (+1)
   \       0xD6   0x1E40             SUBS     R0,R0,#+1
   \                     ??mbedtls_mpi_write_string_11: (+1)
   \       0xD8   0xD1CE             BNE.N    ??mbedtls_mpi_write_string_8
   \       0xDA   0x461F             MOV      R7,R3
   \       0xDC   0xF1BE 0x0E01      SUBS     LR,LR,#+1
   \                     ??mbedtls_mpi_write_string_7: (+1)
   \       0xE0   0xD015             BEQ.N    ??mbedtls_mpi_write_string_12
   \       0xE2   0x2004             MOVS     R0,#+4
   \       0xE4   0x463B             MOV      R3,R7
   \       0xE6   0xE7F7             B.N      ??mbedtls_mpi_write_string_11
    582                  }
    583              }
    584              else
    585              {
    586                  MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T, X ) );
   \                     ??mbedtls_mpi_write_string_6: (+1)
   \       0xE8   0x4639             MOV      R1,R7
   \       0xEA   0xA801             ADD      R0,SP,#+4
   \       0xEC   0x....'....        BL       mbedtls_mpi_copy
   \       0xF0   0x0005             MOVS     R5,R0
   \       0xF2   0xD114             BNE.N    ??mbedtls_mpi_write_string_13
    587          
    588                  if( T.s == -1 )
   \       0xF4   0x9801             LDR      R0,[SP, #+4]
   \       0xF6   0xF110 0x0F01      CMN      R0,#+1
   \       0xFA   0xD101             BNE.N    ??mbedtls_mpi_write_string_14
    589                      T.s = 1;
   \       0xFC   0x2001             MOVS     R0,#+1
   \       0xFE   0x9001             STR      R0,[SP, #+4]
    590          
    591                  MBEDTLS_MPI_CHK( mpi_write_hlp( &T, radix, &p ) );
   \                     ??mbedtls_mpi_write_string_14: (+1)
   \      0x100   0x466A             MOV      R2,SP
   \      0x102   0x4641             MOV      R1,R8
   \      0x104   0xA801             ADD      R0,SP,#+4
   \      0x106   0x....'....        BL       mpi_write_hlp
   \      0x10A   0x0005             MOVS     R5,R0
   \      0x10C   0xD107             BNE.N    ??mbedtls_mpi_write_string_13
    592              }
    593          
    594              *p++ = '\0';
   \                     ??mbedtls_mpi_write_string_12: (+1)
   \      0x10E   0x2000             MOVS     R0,#+0
   \      0x110   0x9900             LDR      R1,[SP, #+0]
   \      0x112   0x7008             STRB     R0,[R1, #+0]
   \      0x114   0x9800             LDR      R0,[SP, #+0]
   \      0x116   0x1C40             ADDS     R0,R0,#+1
   \      0x118   0x9000             STR      R0,[SP, #+0]
    595              *olen = p - buf;
   \      0x11A   0x1B86             SUBS     R6,R0,R6
   \      0x11C   0x6026             STR      R6,[R4, #+0]
    596          
    597          cleanup:
    598          
    599              mbedtls_mpi_free( &T );
   \                     ??mbedtls_mpi_write_string_13: (+1)
   \      0x11E   0xA801             ADD      R0,SP,#+4
   \      0x120   0x....'....        BL       mbedtls_mpi_free
    600          
    601              return( ret );
   \      0x124   0x4628             MOV      R0,R5
   \                     ??mbedtls_mpi_write_string_1: (+1)
   \      0x126   0xB005             ADD      SP,SP,#+20
   \      0x128   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
    602          }
    603          
    604          #if defined(MBEDTLS_FS_IO)
    605          /*
    606           * Read X from an opened file
    607           */
    608          int mbedtls_mpi_read_file( mbedtls_mpi *X, int radix, FILE *fin )
    609          {
    610              mbedtls_mpi_uint d;
    611              size_t slen;
    612              char *p;
    613              /*
    614               * Buffer should have space for (short) label and decimal formatted MPI,
    615               * newline characters and '\0'
    616               */
    617              char s[ MBEDTLS_MPI_RW_BUFFER_SIZE ];
    618          
    619              memset( s, 0, sizeof( s ) );
    620              if( fgets( s, sizeof( s ) - 1, fin ) == NULL )
    621                  return( MBEDTLS_ERR_MPI_FILE_IO_ERROR );
    622          
    623              slen = strlen( s );
    624              if( slen == sizeof( s ) - 2 )
    625                  return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
    626          
    627              if( slen > 0 && s[slen - 1] == '\n' ) { slen--; s[slen] = '\0'; }
    628              if( slen > 0 && s[slen - 1] == '\r' ) { slen--; s[slen] = '\0'; }
    629          
    630              p = s + slen;
    631              while( p-- > s )
    632                  if( mpi_get_digit( &d, radix, *p ) != 0 )
    633                      break;
    634          
    635              return( mbedtls_mpi_read_string( X, radix, p + 1 ) );
    636          }
    637          
    638          /*
    639           * Write X into an opened file (or stdout if fout == NULL)
    640           */
    641          int mbedtls_mpi_write_file( const char *p, const mbedtls_mpi *X, int radix, FILE *fout )
    642          {
    643              int ret;
    644              size_t n, slen, plen;
    645              /*
    646               * Buffer should have space for (short) label and decimal formatted MPI,
    647               * newline characters and '\0'
    648               */
    649              char s[ MBEDTLS_MPI_RW_BUFFER_SIZE ];
    650          
    651              memset( s, 0, sizeof( s ) );
    652          
    653              MBEDTLS_MPI_CHK( mbedtls_mpi_write_string( X, radix, s, sizeof( s ) - 2, &n ) );
    654          
    655              if( p == NULL ) p = "";
    656          
    657              plen = strlen( p );
    658              slen = strlen( s );
    659              s[slen++] = '\r';
    660              s[slen++] = '\n';
    661          
    662              if( fout != NULL )
    663              {
    664                  if( fwrite( p, 1, plen, fout ) != plen ||
    665                      fwrite( s, 1, slen, fout ) != slen )
    666                      return( MBEDTLS_ERR_MPI_FILE_IO_ERROR );
    667              }
    668              else
    669                  mbedtls_printf( "%s%s", p, s );
    670          
    671          cleanup:
    672          
    673              return( ret );
    674          }
    675          #endif /* MBEDTLS_FS_IO */
    676          
    677          /*
    678           * Import X from unsigned binary data, big endian
    679           */

   \                                 In section .text, align 2, keep-with-next
    680          int mbedtls_mpi_read_binary( mbedtls_mpi *X, const unsigned char *buf, size_t buflen )
    681          {
   \                     mbedtls_mpi_read_binary: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x4605             MOV      R5,R0
   \        0x4   0x460E             MOV      R6,R1
   \        0x6   0x4614             MOV      R4,R2
    682              int ret;
    683              size_t i, j;
    684              size_t const limbs = CHARS_TO_LIMBS( buflen );
   \        0x8   0xF004 0x0003      AND      R0,R4,#0x3
   \        0xC   0x1E40             SUBS     R0,R0,#+1
   \        0xE   0x4180             SBCS     R0,R0,R0
   \       0x10   0x43C0             MVNS     R0,R0
   \       0x12   0x4621             MOV      R1,R4
   \       0x14   0x0889             LSRS     R1,R1,#+2
   \       0x16   0xEB11 0x77D0      ADDS     R7,R1,R0, LSR #+31
    685          
    686              /* Ensure that target MPI has exactly the necessary number of limbs */
    687              if( X->n != limbs )
   \       0x1A   0x6868             LDR      R0,[R5, #+4]
   \       0x1C   0x42B8             CMP      R0,R7
   \       0x1E   0xD00B             BEQ.N    ??mbedtls_mpi_read_binary_0
    688              {
    689                  mbedtls_mpi_free( X );
   \       0x20   0x4628             MOV      R0,R5
   \       0x22   0x....'....        BL       mbedtls_mpi_free
    690                  mbedtls_mpi_init( X );
   \       0x26   0x4628             MOV      R0,R5
   \       0x28   0x....'....        BL       mbedtls_mpi_init
    691                  MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
   \       0x2C   0x4639             MOV      R1,R7
   \       0x2E   0x4628             MOV      R0,R5
   \       0x30   0x....'....        BL       mbedtls_mpi_grow
   \       0x34   0x2800             CMP      R0,#+0
   \       0x36   0xD122             BNE.N    ??mbedtls_mpi_read_binary_1
    692              }
    693          
    694              MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
   \                     ??mbedtls_mpi_read_binary_0: (+1)
   \       0x38   0x2100             MOVS     R1,#+0
   \       0x3A   0x4628             MOV      R0,R5
   \       0x3C   0x....'....        BL       mbedtls_mpi_lset
   \       0x40   0x2800             CMP      R0,#+0
   \       0x42   0xD11C             BNE.N    ??mbedtls_mpi_read_binary_1
    695          
    696              for( i = buflen, j = 0; i > 0; i--, j++ )
   \       0x44   0x2100             MOVS     R1,#+0
   \       0x46   0xE018             B.N      ??mbedtls_mpi_read_binary_2
    697                  X->p[j / ciL] |= ((mbedtls_mpi_uint) buf[i - 1]) << ((j % ciL) << 3);
   \                     ??mbedtls_mpi_read_binary_3: (+1)
   \       0x48   0x68AA             LDR      R2,[R5, #+8]
   \       0x4A   0x460B             MOV      R3,R1
   \       0x4C   0x089B             LSRS     R3,R3,#+2
   \       0x4E   0x4617             MOV      R7,R2
   \       0x50   0x468C             MOV      R12,R1
   \       0x52   0xEA4F 0x0C9C      LSR      R12,R12,#+2
   \       0x56   0xF857 0x702C      LDR      R7,[R7, R12, LSL #+2]
   \       0x5A   0xEB06 0x0C04      ADD      R12,R6,R4
   \       0x5E   0xF81C 0xCC01      LDRB     R12,[R12, #-1]
   \       0x62   0xEA4F 0x0EC1      LSL      LR,R1,#+3
   \       0x66   0xF00E 0x0E18      AND      LR,LR,#0x18
   \       0x6A   0xFA0C 0xFC0E      LSL      R12,R12,LR
   \       0x6E   0xEA4C 0x0707      ORR      R7,R12,R7
   \       0x72   0xF842 0x7023      STR      R7,[R2, R3, LSL #+2]
   \       0x76   0x1E64             SUBS     R4,R4,#+1
   \       0x78   0x1C49             ADDS     R1,R1,#+1
   \                     ??mbedtls_mpi_read_binary_2: (+1)
   \       0x7A   0x2C00             CMP      R4,#+0
   \       0x7C   0xD1E4             BNE.N    ??mbedtls_mpi_read_binary_3
    698          
    699          cleanup:
    700          
    701              return( ret );
   \                     ??mbedtls_mpi_read_binary_1: (+1)
   \       0x7E   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    702          }
    703          
    704          /*
    705           * Export X into unsigned binary data, big endian
    706           */

   \                                 In section .text, align 2, keep-with-next
    707          int mbedtls_mpi_write_binary( const mbedtls_mpi *X, unsigned char *buf, size_t buflen )
    708          {
   \                     mbedtls_mpi_write_binary: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x4605             MOV      R5,R0
   \        0x4   0x460E             MOV      R6,R1
   \        0x6   0x4617             MOV      R7,R2
    709              size_t i, j, n;
    710          
    711              n = mbedtls_mpi_size( X );
   \        0x8   0x....'....        BL       mbedtls_mpi_size
   \        0xC   0x4604             MOV      R4,R0
    712          
    713              if( buflen < n )
   \        0xE   0x42A7             CMP      R7,R4
   \       0x10   0xD202             BCS.N    ??mbedtls_mpi_write_binary_0
    714                  return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
   \       0x12   0xF06F 0x0007      MVN      R0,#+7
   \       0x16   0xBDF2             POP      {R1,R4-R7,PC}
    715          
    716              memset( buf, 0, buflen );
   \                     ??mbedtls_mpi_write_binary_0: (+1)
   \       0x18   0x2200             MOVS     R2,#+0
   \       0x1A   0x4639             MOV      R1,R7
   \       0x1C   0x4630             MOV      R0,R6
   \       0x1E   0x....'....        BL       __aeabi_memset
    717          
    718              for( i = buflen - 1, j = 0; n > 0; i--, j++, n-- )
   \       0x22   0x1E7F             SUBS     R7,R7,#+1
   \       0x24   0x2000             MOVS     R0,#+0
   \       0x26   0x2C00             CMP      R4,#+0
   \       0x28   0xE00C             B.N      ??mbedtls_mpi_write_binary_1
    719                  buf[i] = (unsigned char)( X->p[j / ciL] >> ((j % ciL) << 3) );
   \                     ??mbedtls_mpi_write_binary_2: (+1)
   \       0x2A   0x68A9             LDR      R1,[R5, #+8]
   \       0x2C   0x4602             MOV      R2,R0
   \       0x2E   0x0892             LSRS     R2,R2,#+2
   \       0x30   0xF851 0x1022      LDR      R1,[R1, R2, LSL #+2]
   \       0x34   0x00C2             LSLS     R2,R0,#+3
   \       0x36   0xF002 0x0218      AND      R2,R2,#0x18
   \       0x3A   0x40D1             LSRS     R1,R1,R2
   \       0x3C   0x55F1             STRB     R1,[R6, R7]
   \       0x3E   0x1E7F             SUBS     R7,R7,#+1
   \       0x40   0x1C40             ADDS     R0,R0,#+1
   \       0x42   0x1E64             SUBS     R4,R4,#+1
   \                     ??mbedtls_mpi_write_binary_1: (+1)
   \       0x44   0xD1F1             BNE.N    ??mbedtls_mpi_write_binary_2
    720          
    721              return( 0 );
   \       0x46   0x2000             MOVS     R0,#+0
   \       0x48   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    722          }
    723          
    724          /*
    725           * Left-shift: X <<= count
    726           */

   \                                 In section .text, align 2, keep-with-next
    727          int mbedtls_mpi_shift_l( mbedtls_mpi *X, size_t count )
    728          {
   \                     mbedtls_mpi_shift_l: (+1)
   \        0x0   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \        0x4   0x4606             MOV      R6,R0
   \        0x6   0x4688             MOV      R8,R1
    729              int ret;
    730              size_t i, v0, t1;
    731              mbedtls_mpi_uint r0 = 0, r1;
   \        0x8   0x2700             MOVS     R7,#+0
    732          
    733              v0 = count / (biL    );
   \        0xA   0x4645             MOV      R5,R8
   \        0xC   0x096D             LSRS     R5,R5,#+5
    734              t1 = count & (biL - 1);
   \        0xE   0xF008 0x041F      AND      R4,R8,#0x1F
    735          
    736              i = mbedtls_mpi_bitlen( X ) + count;
   \       0x12   0x....'....        BL       mbedtls_mpi_bitlen
   \       0x16   0x4480             ADD      R8,R8,R0
    737          
    738              if( X->n * biL < i )
   \       0x18   0x6870             LDR      R0,[R6, #+4]
   \       0x1A   0x0140             LSLS     R0,R0,#+5
   \       0x1C   0x4540             CMP      R0,R8
   \       0x1E   0xD20D             BCS.N    ??mbedtls_mpi_shift_l_0
    739                  MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
   \       0x20   0xF008 0x001F      AND      R0,R8,#0x1F
   \       0x24   0x1E40             SUBS     R0,R0,#+1
   \       0x26   0x4180             SBCS     R0,R0,R0
   \       0x28   0x43C0             MVNS     R0,R0
   \       0x2A   0xEA4F 0x1858      LSR      R8,R8,#+5
   \       0x2E   0xEB08 0x71D0      ADD      R1,R8,R0, LSR #+31
   \       0x32   0x4630             MOV      R0,R6
   \       0x34   0x....'....        BL       mbedtls_mpi_grow
   \       0x38   0x2800             CMP      R0,#+0
   \       0x3A   0xD136             BNE.N    ??mbedtls_mpi_shift_l_1
    740          
    741              ret = 0;
   \                     ??mbedtls_mpi_shift_l_0: (+1)
   \       0x3C   0x4638             MOV      R0,R7
    742          
    743              /*
    744               * shift by count / limb_size
    745               */
    746              if( v0 > 0 )
   \       0x3E   0x2D00             CMP      R5,#+0
   \       0x40   0xD035             BEQ.N    ??mbedtls_mpi_shift_l_2
    747              {
    748                  for( i = X->n; i > v0; i-- )
   \       0x42   0x6871             LDR      R1,[R6, #+4]
   \       0x44   0xE00C             B.N      ??mbedtls_mpi_shift_l_3
    749                      X->p[i - 1] = X->p[i - v0 - 1];
   \                     ??mbedtls_mpi_shift_l_4: (+1)
   \       0x46   0x68B2             LDR      R2,[R6, #+8]
   \       0x48   0xEB02 0x0281      ADD      R2,R2,R1, LSL #+2
   \       0x4C   0x68B3             LDR      R3,[R6, #+8]
   \       0x4E   0xEBA1 0x0C05      SUB      R12,R1,R5
   \       0x52   0xEB03 0x038C      ADD      R3,R3,R12, LSL #+2
   \       0x56   0xF853 0x3C04      LDR      R3,[R3, #-4]
   \       0x5A   0xF842 0x3C04      STR      R3,[R2, #-4]
   \       0x5E   0x1E49             SUBS     R1,R1,#+1
   \                     ??mbedtls_mpi_shift_l_3: (+1)
   \       0x60   0x428D             CMP      R5,R1
   \       0x62   0xD3F0             BCC.N    ??mbedtls_mpi_shift_l_4
    750          
    751                  for( ; i > 0; i-- )
   \                     ??mbedtls_mpi_shift_l_5: (+1)
   \       0x64   0x2900             CMP      R1,#+0
   \       0x66   0xD022             BEQ.N    ??mbedtls_mpi_shift_l_2
    752                      X->p[i - 1] = 0;
   \       0x68   0x68B2             LDR      R2,[R6, #+8]
   \       0x6A   0xEB02 0x0281      ADD      R2,R2,R1, LSL #+2
   \       0x6E   0x4603             MOV      R3,R0
   \       0x70   0xF842 0x3C04      STR      R3,[R2, #-4]
   \       0x74   0x1E49             SUBS     R1,R1,#+1
   \       0x76   0xE7F5             B.N      ??mbedtls_mpi_shift_l_5
    753              }
    754          
    755              /*
    756               * shift by count % limb_size
    757               */
    758              if( t1 > 0 )
    759              {
    760                  for( i = v0; i < X->n; i++ )
    761                  {
    762                      r1 = X->p[i] >> (biL - t1);
   \                     ??mbedtls_mpi_shift_l_6: (+1)
   \       0x78   0x68B1             LDR      R1,[R6, #+8]
   \       0x7A   0xF851 0x1025      LDR      R1,[R1, R5, LSL #+2]
   \       0x7E   0xF1C4 0x0220      RSB      R2,R4,#+32
   \       0x82   0x40D1             LSRS     R1,R1,R2
    763                      X->p[i] <<= t1;
   \       0x84   0x68B2             LDR      R2,[R6, #+8]
   \       0x86   0xF852 0x2025      LDR      R2,[R2, R5, LSL #+2]
   \       0x8A   0x40A2             LSLS     R2,R2,R4
   \       0x8C   0x68B3             LDR      R3,[R6, #+8]
   \       0x8E   0xF843 0x2025      STR      R2,[R3, R5, LSL #+2]
    764                      X->p[i] |= r0;
   \       0x92   0x68B2             LDR      R2,[R6, #+8]
   \       0x94   0xF852 0x2025      LDR      R2,[R2, R5, LSL #+2]
   \       0x98   0x4317             ORRS     R7,R7,R2
   \       0x9A   0x68B2             LDR      R2,[R6, #+8]
   \       0x9C   0xF842 0x7025      STR      R7,[R2, R5, LSL #+2]
    765                      r0 = r1;
   \       0xA0   0x460F             MOV      R7,R1
    766                  }
   \       0xA2   0x1C6D             ADDS     R5,R5,#+1
   \                     ??mbedtls_mpi_shift_l_7: (+1)
   \       0xA4   0x6871             LDR      R1,[R6, #+4]
   \       0xA6   0x428D             CMP      R5,R1
   \       0xA8   0xD3E6             BCC.N    ??mbedtls_mpi_shift_l_6
    767              }
    768          
    769          cleanup:
    770          
    771              return( ret );
   \                     ??mbedtls_mpi_shift_l_1: (+1)
   \       0xAA   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   \                     ??mbedtls_mpi_shift_l_2: (+1)
   \       0xAE   0x2C00             CMP      R4,#+0
   \       0xB0   0xD0FB             BEQ.N    ??mbedtls_mpi_shift_l_1
   \       0xB2   0xE7F7             B.N      ??mbedtls_mpi_shift_l_7
    772          }
    773          
    774          /*
    775           * Right-shift: X >>= count
    776           */

   \                                 In section .text, align 2, keep-with-next
    777          int mbedtls_mpi_shift_r( mbedtls_mpi *X, size_t count )
    778          {
   \                     mbedtls_mpi_shift_r: (+1)
   \        0x0   0xB478             PUSH     {R3-R6}
   \        0x2   0x4602             MOV      R2,R0
    779              size_t i, v0, v1;
    780              mbedtls_mpi_uint r0 = 0, r1;
   \        0x4   0x2400             MOVS     R4,#+0
    781          
    782              v0 = count /  biL;
   \        0x6   0x4608             MOV      R0,R1
   \        0x8   0x0940             LSRS     R0,R0,#+5
    783              v1 = count & (biL - 1);
   \        0xA   0xF001 0x011F      AND      R1,R1,#0x1F
    784          
    785              if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
   \        0xE   0x6853             LDR      R3,[R2, #+4]
   \       0x10   0x4283             CMP      R3,R0
   \       0x12   0xD303             BCC.N    ??mbedtls_mpi_shift_r_0
   \       0x14   0x4298             CMP      R0,R3
   \       0x16   0xD105             BNE.N    ??mbedtls_mpi_shift_r_1
   \       0x18   0x2900             CMP      R1,#+0
   \       0x1A   0xD003             BEQ.N    ??mbedtls_mpi_shift_r_1
    786                  return mbedtls_mpi_lset( X, 0 );
   \                     ??mbedtls_mpi_shift_r_0: (+1)
   \       0x1C   0x4621             MOV      R1,R4
   \       0x1E   0x4610             MOV      R0,R2
   \       0x20   0xBC74             POP      {R2,R4-R6}
   \       0x22   0x....             B.N      mbedtls_mpi_lset
    787          
    788              /*
    789               * shift by count / limb_size
    790               */
    791              if( v0 > 0 )
   \                     ??mbedtls_mpi_shift_r_1: (+1)
   \       0x24   0x2800             CMP      R0,#+0
   \       0x26   0xD03B             BEQ.N    ??mbedtls_mpi_shift_r_2
    792              {
    793                  for( i = 0; i < X->n - v0; i++ )
   \       0x28   0x4623             MOV      R3,R4
   \       0x2A   0xE007             B.N      ??mbedtls_mpi_shift_r_3
    794                      X->p[i] = X->p[i + v0];
   \                     ??mbedtls_mpi_shift_r_4: (+1)
   \       0x2C   0x6895             LDR      R5,[R2, #+8]
   \       0x2E   0x18C6             ADDS     R6,R0,R3
   \       0x30   0xF855 0x5026      LDR      R5,[R5, R6, LSL #+2]
   \       0x34   0x6896             LDR      R6,[R2, #+8]
   \       0x36   0xF846 0x5023      STR      R5,[R6, R3, LSL #+2]
   \       0x3A   0x1C5B             ADDS     R3,R3,#+1
   \                     ??mbedtls_mpi_shift_r_3: (+1)
   \       0x3C   0x6855             LDR      R5,[R2, #+4]
   \       0x3E   0x1A2D             SUBS     R5,R5,R0
   \       0x40   0x42AB             CMP      R3,R5
   \       0x42   0xD3F3             BCC.N    ??mbedtls_mpi_shift_r_4
    795          
    796                  for( ; i < X->n; i++ )
   \                     ??mbedtls_mpi_shift_r_5: (+1)
   \       0x44   0x6850             LDR      R0,[R2, #+4]
   \       0x46   0x4283             CMP      R3,R0
   \       0x48   0xD22A             BCS.N    ??mbedtls_mpi_shift_r_2
    797                      X->p[i] = 0;
   \       0x4A   0x4620             MOV      R0,R4
   \       0x4C   0x6895             LDR      R5,[R2, #+8]
   \       0x4E   0xF845 0x0023      STR      R0,[R5, R3, LSL #+2]
   \       0x52   0x1C5B             ADDS     R3,R3,#+1
   \       0x54   0xE7F6             B.N      ??mbedtls_mpi_shift_r_5
    798              }
    799          
    800              /*
    801               * shift by count % limb_size
    802               */
    803              if( v1 > 0 )
    804              {
    805                  for( i = X->n; i > 0; i-- )
    806                  {
    807                      r1 = X->p[i - 1] << (biL - v1);
   \                     ??mbedtls_mpi_shift_r_6: (+1)
   \       0x56   0x6893             LDR      R3,[R2, #+8]
   \       0x58   0xEB03 0x0380      ADD      R3,R3,R0, LSL #+2
   \       0x5C   0xF853 0x5C04      LDR      R5,[R3, #-4]
   \       0x60   0xF1C1 0x0320      RSB      R3,R1,#+32
   \       0x64   0xFA05 0xF303      LSL      R3,R5,R3
    808                      X->p[i - 1] >>= v1;
   \       0x68   0x6895             LDR      R5,[R2, #+8]
   \       0x6A   0xEB05 0x0580      ADD      R5,R5,R0, LSL #+2
   \       0x6E   0x6896             LDR      R6,[R2, #+8]
   \       0x70   0xEB06 0x0680      ADD      R6,R6,R0, LSL #+2
   \       0x74   0xF856 0x6C04      LDR      R6,[R6, #-4]
   \       0x78   0x40CE             LSRS     R6,R6,R1
   \       0x7A   0xF845 0x6C04      STR      R6,[R5, #-4]
    809                      X->p[i - 1] |= r0;
   \       0x7E   0x6895             LDR      R5,[R2, #+8]
   \       0x80   0xEB05 0x0580      ADD      R5,R5,R0, LSL #+2
   \       0x84   0x6896             LDR      R6,[R2, #+8]
   \       0x86   0xEB06 0x0680      ADD      R6,R6,R0, LSL #+2
   \       0x8A   0xF856 0x6C04      LDR      R6,[R6, #-4]
   \       0x8E   0x4334             ORRS     R4,R4,R6
   \       0x90   0xF845 0x4C04      STR      R4,[R5, #-4]
    810                      r0 = r1;
   \       0x94   0x461C             MOV      R4,R3
    811                  }
   \       0x96   0x1E40             SUBS     R0,R0,#+1
   \                     ??mbedtls_mpi_shift_r_7: (+1)
   \       0x98   0xD1DD             BNE.N    ??mbedtls_mpi_shift_r_6
    812              }
    813          
    814              return( 0 );
   \                     ??mbedtls_mpi_shift_r_8: (+1)
   \       0x9A   0x2000             MOVS     R0,#+0
   \       0x9C   0xBC72             POP      {R1,R4-R6}
   \       0x9E   0x4770             BX       LR               ;; return
   \                     ??mbedtls_mpi_shift_r_2: (+1)
   \       0xA0   0x2900             CMP      R1,#+0
   \       0xA2   0xD0FA             BEQ.N    ??mbedtls_mpi_shift_r_8
   \       0xA4   0x6850             LDR      R0,[R2, #+4]
   \       0xA6   0x2800             CMP      R0,#+0
   \       0xA8   0xE7F6             B.N      ??mbedtls_mpi_shift_r_7
    815          }
    816          
    817          /*
    818           * Compare unsigned values
    819           */

   \                                 In section .text, align 2, keep-with-next
    820          int mbedtls_mpi_cmp_abs( const mbedtls_mpi *X, const mbedtls_mpi *Y )
    821          {
   \                     mbedtls_mpi_cmp_abs: (+1)
   \        0x0   0xB470             PUSH     {R4-R6}
   \        0x2   0x4605             MOV      R5,R0
   \        0x4   0x460C             MOV      R4,R1
    822              size_t i, j;
    823          
    824              for( i = X->n; i > 0; i-- )
   \        0x6   0x686B             LDR      R3,[R5, #+4]
   \                     ??mbedtls_mpi_cmp_abs_0: (+1)
   \        0x8   0x2B00             CMP      R3,#+0
   \        0xA   0xD02D             BEQ.N    ??mbedtls_mpi_cmp_abs_1
    825                  if( X->p[i - 1] != 0 )
   \        0xC   0x68A8             LDR      R0,[R5, #+8]
   \        0xE   0xEB00 0x0083      ADD      R0,R0,R3, LSL #+2
   \       0x12   0xF850 0x0C04      LDR      R0,[R0, #-4]
   \       0x16   0x2800             CMP      R0,#+0
   \       0x18   0xD126             BNE.N    ??mbedtls_mpi_cmp_abs_1
   \       0x1A   0x1E5B             SUBS     R3,R3,#+1
   \       0x1C   0xE7F4             B.N      ??mbedtls_mpi_cmp_abs_0
    826                      break;
    827          
    828              for( j = Y->n; j > 0; j-- )
    829                  if( Y->p[j - 1] != 0 )
   \                     ??mbedtls_mpi_cmp_abs_2: (+1)
   \       0x1E   0x68A0             LDR      R0,[R4, #+8]
   \       0x20   0xEB00 0x0083      ADD      R0,R0,R3, LSL #+2
   \       0x24   0xF850 0x0C04      LDR      R0,[R0, #-4]
   \       0x28   0x2800             CMP      R0,#+0
   \       0x2A   0xD122             BNE.N    ??mbedtls_mpi_cmp_abs_3
   \       0x2C   0x1E5B             SUBS     R3,R3,#+1
   \       0x2E   0xE01E             B.N      ??mbedtls_mpi_cmp_abs_4
    830                      break;
    831          
    832              if( i == 0 && j == 0 )
    833                  return( 0 );
    834          
    835              if( i > j ) return(  1 );
    836              if( j > i ) return( -1 );
    837          
    838              for( ; i > 0; i-- )
    839              {
    840                  if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
    841                  if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
   \                     ??mbedtls_mpi_cmp_abs_5: (+1)
   \       0x30   0x4635             MOV      R5,R6
   \       0x32   0x68A6             LDR      R6,[R4, #+8]
   \       0x34   0xEB06 0x0680      ADD      R6,R6,R0, LSL #+2
   \       0x38   0xF856 0x6C04      LDR      R6,[R6, #-4]
   \       0x3C   0x42B5             CMP      R5,R6
   \       0x3E   0xD310             BCC.N    ??mbedtls_mpi_cmp_abs_6
   \       0x40   0x1E40             SUBS     R0,R0,#+1
   \                     ??mbedtls_mpi_cmp_abs_7: (+1)
   \       0x42   0x2800             CMP      R0,#+0
   \       0x44   0xD01F             BEQ.N    ??mbedtls_mpi_cmp_abs_8
   \       0x46   0x68A5             LDR      R5,[R4, #+8]
   \       0x48   0xEB05 0x0580      ADD      R5,R5,R0, LSL #+2
   \       0x4C   0xF855 0x5C04      LDR      R5,[R5, #-4]
   \       0x50   0x689E             LDR      R6,[R3, #+8]
   \       0x52   0xEB06 0x0680      ADD      R6,R6,R0, LSL #+2
   \       0x56   0xF856 0x6C04      LDR      R6,[R6, #-4]
   \       0x5A   0x42B5             CMP      R5,R6
   \       0x5C   0xD2E8             BCS.N    ??mbedtls_mpi_cmp_abs_5
   \                     ??mbedtls_mpi_cmp_abs_9: (+1)
   \       0x5E   0x2001             MOVS     R0,#+1
   \       0x60   0xE012             B.N      ??mbedtls_mpi_cmp_abs_10
   \                     ??mbedtls_mpi_cmp_abs_6: (+1)
   \       0x62   0xF04F 0x30FF      MOV      R0,#-1
   \       0x66   0xE00F             B.N      ??mbedtls_mpi_cmp_abs_10
    842              }
   \                     ??mbedtls_mpi_cmp_abs_1: (+1)
   \       0x68   0x4629             MOV      R1,R5
   \       0x6A   0x461A             MOV      R2,R3
   \       0x6C   0x6863             LDR      R3,[R4, #+4]
   \                     ??mbedtls_mpi_cmp_abs_4: (+1)
   \       0x6E   0x2B00             CMP      R3,#+0
   \       0x70   0xD1D5             BNE.N    ??mbedtls_mpi_cmp_abs_2
   \                     ??mbedtls_mpi_cmp_abs_3: (+1)
   \       0x72   0xEA53 0x0002      ORRS     R0,R3,R2
   \       0x76   0xD006             BEQ.N    ??mbedtls_mpi_cmp_abs_8
   \       0x78   0x4293             CMP      R3,R2
   \       0x7A   0xD3F0             BCC.N    ??mbedtls_mpi_cmp_abs_9
   \       0x7C   0x429A             CMP      R2,R3
   \       0x7E   0xD3F0             BCC.N    ??mbedtls_mpi_cmp_abs_6
   \       0x80   0x460B             MOV      R3,R1
   \       0x82   0x4610             MOV      R0,R2
   \       0x84   0xE7DD             B.N      ??mbedtls_mpi_cmp_abs_7
    843          
    844              return( 0 );
   \                     ??mbedtls_mpi_cmp_abs_8: (+1)
   \       0x86   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_mpi_cmp_abs_10: (+1)
   \       0x88   0xBC70             POP      {R4-R6}
   \       0x8A   0x4770             BX       LR               ;; return
    845          }
    846          
    847          /*
    848           * Compare signed values
    849           */

   \                                 In section .text, align 2, keep-with-next
    850          int mbedtls_mpi_cmp_mpi( const mbedtls_mpi *X, const mbedtls_mpi *Y )
    851          {
   \                     mbedtls_mpi_cmp_mpi: (+1)
   \        0x0   0xB470             PUSH     {R4-R6}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460B             MOV      R3,R1
    852              size_t i, j;
    853          
    854              for( i = X->n; i > 0; i-- )
   \        0x6   0x6862             LDR      R2,[R4, #+4]
   \                     ??mbedtls_mpi_cmp_mpi_0: (+1)
   \        0x8   0x2A00             CMP      R2,#+0
   \        0xA   0xD03E             BEQ.N    ??mbedtls_mpi_cmp_mpi_1
    855                  if( X->p[i - 1] != 0 )
   \        0xC   0x68A0             LDR      R0,[R4, #+8]
   \        0xE   0xEB00 0x0082      ADD      R0,R0,R2, LSL #+2
   \       0x12   0xF850 0x0C04      LDR      R0,[R0, #-4]
   \       0x16   0x2800             CMP      R0,#+0
   \       0x18   0xD137             BNE.N    ??mbedtls_mpi_cmp_mpi_1
   \       0x1A   0x1E52             SUBS     R2,R2,#+1
   \       0x1C   0xE7F4             B.N      ??mbedtls_mpi_cmp_mpi_0
    856                      break;
    857          
    858              for( j = Y->n; j > 0; j-- )
    859                  if( Y->p[j - 1] != 0 )
   \                     ??mbedtls_mpi_cmp_mpi_2: (+1)
   \       0x1E   0x6898             LDR      R0,[R3, #+8]
   \       0x20   0xEB00 0x0082      ADD      R0,R0,R2, LSL #+2
   \       0x24   0xF850 0x0C04      LDR      R0,[R0, #-4]
   \       0x28   0x2800             CMP      R0,#+0
   \       0x2A   0xD132             BNE.N    ??mbedtls_mpi_cmp_mpi_3
   \       0x2C   0x1E52             SUBS     R2,R2,#+1
   \       0x2E   0xE02E             B.N      ??mbedtls_mpi_cmp_mpi_4
    860                      break;
    861          
    862              if( i == 0 && j == 0 )
    863                  return( 0 );
    864          
    865              if( i > j ) return(  X->s );
    866              if( j > i ) return( -Y->s );
    867          
    868              if( X->s > 0 && Y->s < 0 ) return(  1 );
   \                     ??mbedtls_mpi_cmp_mpi_5: (+1)
   \       0x30   0x6820             LDR      R0,[R4, #+0]
   \       0x32   0x2801             CMP      R0,#+1
   \       0x34   0xDB04             BLT.N    ??mbedtls_mpi_cmp_mpi_6
   \       0x36   0x6818             LDR      R0,[R3, #+0]
   \       0x38   0x2800             CMP      R0,#+0
   \       0x3A   0xD501             BPL.N    ??mbedtls_mpi_cmp_mpi_6
   \       0x3C   0x2001             MOVS     R0,#+1
   \       0x3E   0xE036             B.N      ??mbedtls_mpi_cmp_mpi_7
    869              if( Y->s > 0 && X->s < 0 ) return( -1 );
   \                     ??mbedtls_mpi_cmp_mpi_6: (+1)
   \       0x40   0x6818             LDR      R0,[R3, #+0]
   \       0x42   0x2801             CMP      R0,#+1
   \       0x44   0xDB2F             BLT.N    ??mbedtls_mpi_cmp_mpi_8
   \       0x46   0x6820             LDR      R0,[R4, #+0]
   \       0x48   0x2800             CMP      R0,#+0
   \       0x4A   0xD52C             BPL.N    ??mbedtls_mpi_cmp_mpi_8
   \       0x4C   0xF04F 0x30FF      MOV      R0,#-1
   \       0x50   0xE02D             B.N      ??mbedtls_mpi_cmp_mpi_7
    870          
    871              for( ; i > 0; i-- )
    872              {
    873                  if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
    874                  if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
   \                     ??mbedtls_mpi_cmp_mpi_9: (+1)
   \       0x52   0x4635             MOV      R5,R6
   \       0x54   0x689E             LDR      R6,[R3, #+8]
   \       0x56   0xEB06 0x0680      ADD      R6,R6,R0, LSL #+2
   \       0x5A   0xF856 0x6C04      LDR      R6,[R6, #-4]
   \       0x5E   0x42B5             CMP      R5,R6
   \       0x60   0xD310             BCC.N    ??mbedtls_mpi_cmp_mpi_10
   \       0x62   0x1E40             SUBS     R0,R0,#+1
   \                     ??mbedtls_mpi_cmp_mpi_11: (+1)
   \       0x64   0x2800             CMP      R0,#+0
   \       0x66   0xD021             BEQ.N    ??mbedtls_mpi_cmp_mpi_12
   \       0x68   0x689D             LDR      R5,[R3, #+8]
   \       0x6A   0xEB05 0x0580      ADD      R5,R5,R0, LSL #+2
   \       0x6E   0xF855 0x5C04      LDR      R5,[R5, #-4]
   \       0x72   0x6896             LDR      R6,[R2, #+8]
   \       0x74   0xEB06 0x0680      ADD      R6,R6,R0, LSL #+2
   \       0x78   0xF856 0x6C04      LDR      R6,[R6, #-4]
   \       0x7C   0x42B5             CMP      R5,R6
   \       0x7E   0xD2E8             BCS.N    ??mbedtls_mpi_cmp_mpi_9
   \                     ??mbedtls_mpi_cmp_mpi_13: (+1)
   \       0x80   0x6820             LDR      R0,[R4, #+0]
   \       0x82   0xE014             B.N      ??mbedtls_mpi_cmp_mpi_7
   \                     ??mbedtls_mpi_cmp_mpi_10: (+1)
   \       0x84   0x6810             LDR      R0,[R2, #+0]
   \       0x86   0x4240             RSBS     R0,R0,#+0
   \       0x88   0xE011             B.N      ??mbedtls_mpi_cmp_mpi_7
    875              }
   \                     ??mbedtls_mpi_cmp_mpi_1: (+1)
   \       0x8A   0x4611             MOV      R1,R2
   \       0x8C   0x685A             LDR      R2,[R3, #+4]
   \                     ??mbedtls_mpi_cmp_mpi_4: (+1)
   \       0x8E   0x2A00             CMP      R2,#+0
   \       0x90   0xD1C5             BNE.N    ??mbedtls_mpi_cmp_mpi_2
   \                     ??mbedtls_mpi_cmp_mpi_3: (+1)
   \       0x92   0xEA52 0x0001      ORRS     R0,R2,R1
   \       0x96   0xD009             BEQ.N    ??mbedtls_mpi_cmp_mpi_12
   \       0x98   0x428A             CMP      R2,R1
   \       0x9A   0xD3F1             BCC.N    ??mbedtls_mpi_cmp_mpi_13
   \       0x9C   0x4291             CMP      R1,R2
   \       0x9E   0xD2C7             BCS.N    ??mbedtls_mpi_cmp_mpi_5
   \       0xA0   0x6818             LDR      R0,[R3, #+0]
   \       0xA2   0x4240             RSBS     R0,R0,#+0
   \       0xA4   0xE003             B.N      ??mbedtls_mpi_cmp_mpi_7
   \                     ??mbedtls_mpi_cmp_mpi_8: (+1)
   \       0xA6   0x4622             MOV      R2,R4
   \       0xA8   0x4608             MOV      R0,R1
   \       0xAA   0xE7DB             B.N      ??mbedtls_mpi_cmp_mpi_11
    876          
    877              return( 0 );
   \                     ??mbedtls_mpi_cmp_mpi_12: (+1)
   \       0xAC   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_mpi_cmp_mpi_7: (+1)
   \       0xAE   0xBC70             POP      {R4-R6}
   \       0xB0   0x4770             BX       LR               ;; return
    878          }
    879          
    880          /*
    881           * Compare signed values
    882           */

   \                                 In section .text, align 2, keep-with-next
    883          int mbedtls_mpi_cmp_int( const mbedtls_mpi *X, mbedtls_mpi_sint z )
    884          {
   \                     mbedtls_mpi_cmp_int: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
    885              mbedtls_mpi Y;
    886              mbedtls_mpi_uint p[1];
    887          
    888              *p  = ( z < 0 ) ? -z : z;
   \        0x2   0x2900             CMP      R1,#+0
   \        0x4   0xD502             BPL.N    ??mbedtls_mpi_cmp_int_0
   \        0x6   0x424A             RSBS     R2,R1,#+0
   \        0x8   0x9200             STR      R2,[SP, #+0]
   \        0xA   0xE000             B.N      ??mbedtls_mpi_cmp_int_1
   \                     ??mbedtls_mpi_cmp_int_0: (+1)
   \        0xC   0x9100             STR      R1,[SP, #+0]
    889              Y.s = ( z < 0 ) ? -1 : 1;
   \                     ??mbedtls_mpi_cmp_int_1: (+1)
   \        0xE   0x2900             CMP      R1,#+0
   \       0x10   0xD502             BPL.N    ??mbedtls_mpi_cmp_int_2
   \       0x12   0xF04F 0x31FF      MOV      R1,#-1
   \       0x16   0xE000             B.N      ??mbedtls_mpi_cmp_int_3
   \                     ??mbedtls_mpi_cmp_int_2: (+1)
   \       0x18   0x2101             MOVS     R1,#+1
   \                     ??mbedtls_mpi_cmp_int_3: (+1)
   \       0x1A   0x9101             STR      R1,[SP, #+4]
    890              Y.n = 1;
   \       0x1C   0x2101             MOVS     R1,#+1
   \       0x1E   0x9102             STR      R1,[SP, #+8]
    891              Y.p = p;
   \       0x20   0x4669             MOV      R1,SP
   \       0x22   0x9103             STR      R1,[SP, #+12]
    892          
    893              return( mbedtls_mpi_cmp_mpi( X, &Y ) );
   \       0x24   0xA901             ADD      R1,SP,#+4
   \       0x26   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \       0x2A   0xB005             ADD      SP,SP,#+20
   \       0x2C   0xBD00             POP      {PC}             ;; return
    894          }
    895          
    896          /*
    897           * Unsigned addition: X = |A| + |B|  (HAC 14.7)
    898           */
    899          #if defined(MBEDTLS_MPI_ADD_ABS_ALT)
    900          int mbedtls_mpi_add_abs_orig( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
    901          #else

   \                                 In section .text, align 2, keep-with-next
    902          int mbedtls_mpi_add_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
    903          #endif /* MBEDTLS_MPI_ADD_ABS_ALT */
    904          {
   \                     mbedtls_mpi_add_abs: (+1)
   \        0x0   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \        0x4   0x4607             MOV      R7,R0
   \        0x6   0x4614             MOV      R4,R2
    905              int ret;
    906              size_t i, j;
    907              mbedtls_mpi_uint *o, *p, c, tmp;
    908          
    909              if( X == B )
   \        0x8   0x42A7             CMP      R7,R4
   \        0xA   0xD101             BNE.N    ??mbedtls_mpi_add_abs_0
    910              {
    911                  const mbedtls_mpi *T = A; A = X; B = T;
   \        0xC   0x460C             MOV      R4,R1
   \        0xE   0x4639             MOV      R1,R7
    912              }
    913          
    914              if( X != A )
   \                     ??mbedtls_mpi_add_abs_0: (+1)
   \       0x10   0x428F             CMP      R7,R1
   \       0x12   0xD003             BEQ.N    ??mbedtls_mpi_add_abs_1
    915                  MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
   \       0x14   0x....'....        BL       mbedtls_mpi_copy
   \       0x18   0x0006             MOVS     R6,R0
   \       0x1A   0xD144             BNE.N    ??mbedtls_mpi_add_abs_2
    916          
    917              /*
    918               * X should always be positive as a result of unsigned additions.
    919               */
    920              X->s = 1;
   \                     ??mbedtls_mpi_add_abs_1: (+1)
   \       0x1C   0x2001             MOVS     R0,#+1
   \       0x1E   0x6038             STR      R0,[R7, #+0]
    921          
    922              for( j = B->n; j > 0; j-- )
   \       0x20   0x6865             LDR      R5,[R4, #+4]
   \                     ??mbedtls_mpi_add_abs_3: (+1)
   \       0x22   0x2D00             CMP      R5,#+0
   \       0x24   0xD034             BEQ.N    ??mbedtls_mpi_add_abs_4
    923                  if( B->p[j - 1] != 0 )
   \       0x26   0x68A0             LDR      R0,[R4, #+8]
   \       0x28   0xEB00 0x0085      ADD      R0,R0,R5, LSL #+2
   \       0x2C   0xF850 0x0C04      LDR      R0,[R0, #-4]
   \       0x30   0x2800             CMP      R0,#+0
   \       0x32   0xD12D             BNE.N    ??mbedtls_mpi_add_abs_4
   \       0x34   0x1E6D             SUBS     R5,R5,#+1
   \       0x36   0xE7F4             B.N      ??mbedtls_mpi_add_abs_3
    924                      break;
    925          
    926              MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
    927          
    928              o = B->p; p = X->p; c = 0;
    929          
    930              /*
    931               * tmp is used because it might happen that p == o
    932               */
    933              for( i = 0; i < j; i++, o++, p++ )
    934              {
    935                  tmp= *o;
   \                     ??mbedtls_mpi_add_abs_5: (+1)
   \       0x38   0x680A             LDR      R2,[R1, #+0]
    936                  *p +=  c; c  = ( *p <  c );
   \       0x3A   0x6803             LDR      R3,[R0, #+0]
   \       0x3C   0x18E3             ADDS     R3,R4,R3
   \       0x3E   0x6003             STR      R3,[R0, #+0]
   \       0x40   0x42A3             CMP      R3,R4
   \       0x42   0x41A4             SBCS     R4,R4,R4
   \       0x44   0x0FE4             LSRS     R4,R4,#+31
    937                  *p += tmp; c += ( *p < tmp );
   \       0x46   0x18D3             ADDS     R3,R2,R3
   \       0x48   0x6003             STR      R3,[R0, #+0]
   \       0x4A   0x4293             CMP      R3,R2
   \       0x4C   0xD200             BCS.N    ??mbedtls_mpi_add_abs_6
   \       0x4E   0x1C64             ADDS     R4,R4,#+1
    938              }
   \                     ??mbedtls_mpi_add_abs_6: (+1)
   \       0x50   0xF108 0x0801      ADD      R8,R8,#+1
   \       0x54   0x1D09             ADDS     R1,R1,#+4
   \       0x56   0x1D00             ADDS     R0,R0,#+4
   \                     ??mbedtls_mpi_add_abs_7: (+1)
   \       0x58   0x45A8             CMP      R8,R5
   \       0x5A   0xD3ED             BCC.N    ??mbedtls_mpi_add_abs_5
    939          
    940              while( c != 0 )
   \                     ??mbedtls_mpi_add_abs_8: (+1)
   \       0x5C   0x2C00             CMP      R4,#+0
   \       0x5E   0xD022             BEQ.N    ??mbedtls_mpi_add_abs_2
    941              {
    942                  if( i >= X->n )
   \       0x60   0x6879             LDR      R1,[R7, #+4]
   \       0x62   0x4588             CMP      R8,R1
   \       0x64   0xD309             BCC.N    ??mbedtls_mpi_add_abs_9
    943                  {
    944                      MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
   \       0x66   0xF108 0x0101      ADD      R1,R8,#+1
   \       0x6A   0x4638             MOV      R0,R7
   \       0x6C   0x....'....        BL       mbedtls_mpi_grow
   \       0x70   0x0006             MOVS     R6,R0
   \       0x72   0xD118             BNE.N    ??mbedtls_mpi_add_abs_2
    945                      p = X->p + i;
   \       0x74   0x68B8             LDR      R0,[R7, #+8]
   \       0x76   0xEB00 0x0088      ADD      R0,R0,R8, LSL #+2
    946                  }
    947          
    948                  *p += c; c = ( *p < c ); i++; p++;
   \                     ??mbedtls_mpi_add_abs_9: (+1)
   \       0x7A   0x6801             LDR      R1,[R0, #+0]
   \       0x7C   0x1861             ADDS     R1,R4,R1
   \       0x7E   0x6001             STR      R1,[R0, #+0]
   \       0x80   0xF850 0x1B04      LDR      R1,[R0], #+4
   \       0x84   0x42A1             CMP      R1,R4
   \       0x86   0x41A4             SBCS     R4,R4,R4
   \       0x88   0x0FE4             LSRS     R4,R4,#+31
   \       0x8A   0xF108 0x0801      ADD      R8,R8,#+1
   \       0x8E   0xE7E5             B.N      ??mbedtls_mpi_add_abs_8
    949              }
   \                     ??mbedtls_mpi_add_abs_4: (+1)
   \       0x90   0x4629             MOV      R1,R5
   \       0x92   0x4638             MOV      R0,R7
   \       0x94   0x....'....        BL       mbedtls_mpi_grow
   \       0x98   0x0006             MOVS     R6,R0
   \       0x9A   0xD104             BNE.N    ??mbedtls_mpi_add_abs_2
   \       0x9C   0x68A1             LDR      R1,[R4, #+8]
   \       0x9E   0x68B8             LDR      R0,[R7, #+8]
   \       0xA0   0x2400             MOVS     R4,#+0
   \       0xA2   0x46A0             MOV      R8,R4
   \       0xA4   0xE7D8             B.N      ??mbedtls_mpi_add_abs_7
    950          
    951          cleanup:
    952          
    953              return( ret );
   \                     ??mbedtls_mpi_add_abs_2: (+1)
   \       0xA6   0x4630             MOV      R0,R6
   \       0xA8   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    954          }
    955          
    956          /*
    957           * Helper for mbedtls_mpi subtraction
    958           */

   \                                 In section .text, align 2, keep-with-next
    959          static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
    960          {
   \                     mpi_sub_hlp: (+1)
   \        0x0   0xB470             PUSH     {R4-R6}
   \        0x2   0x4603             MOV      R3,R0
    961              size_t i;
    962              mbedtls_mpi_uint c, z;
    963          
    964              for( i = c = 0; i < n; i++, s++, d++ )
   \        0x4   0x2000             MOVS     R0,#+0
   \        0x6   0x4604             MOV      R4,R0
   \        0x8   0xE011             B.N      ??mpi_sub_hlp_0
    965              {
    966                  z = ( *d <  c );     *d -=  c;
   \                     ??mpi_sub_hlp_1: (+1)
   \        0xA   0x6815             LDR      R5,[R2, #+0]
   \        0xC   0x4285             CMP      R5,R0
   \        0xE   0x41AD             SBCS     R5,R5,R5
   \       0x10   0x6816             LDR      R6,[R2, #+0]
   \       0x12   0x1A30             SUBS     R0,R6,R0
   \       0x14   0x6010             STR      R0,[R2, #+0]
    967                  c = ( *d < *s ) + z; *d -= *s;
   \       0x16   0x680E             LDR      R6,[R1, #+0]
   \       0x18   0x42B0             CMP      R0,R6
   \       0x1A   0x4180             SBCS     R0,R0,R0
   \       0x1C   0x0FC0             LSRS     R0,R0,#+31
   \       0x1E   0xEB10 0x70D5      ADDS     R0,R0,R5, LSR #+31
   \       0x22   0x6815             LDR      R5,[R2, #+0]
   \       0x24   0x1BAD             SUBS     R5,R5,R6
   \       0x26   0x6015             STR      R5,[R2, #+0]
    968              }
   \       0x28   0x1C64             ADDS     R4,R4,#+1
   \       0x2A   0x1D09             ADDS     R1,R1,#+4
   \       0x2C   0x1D12             ADDS     R2,R2,#+4
   \                     ??mpi_sub_hlp_0: (+1)
   \       0x2E   0x429C             CMP      R4,R3
   \       0x30   0xD3EB             BCC.N    ??mpi_sub_hlp_1
    969          
    970              while( c != 0 )
   \                     ??mpi_sub_hlp_2: (+1)
   \       0x32   0x2800             CMP      R0,#+0
   \       0x34   0xD009             BEQ.N    ??mpi_sub_hlp_3
    971              {
    972                  z = ( *d < c ); *d -= c;
   \       0x36   0x6811             LDR      R1,[R2, #+0]
   \       0x38   0x4281             CMP      R1,R0
   \       0x3A   0x4189             SBCS     R1,R1,R1
   \       0x3C   0x0FC9             LSRS     R1,R1,#+31
   \       0x3E   0x6813             LDR      R3,[R2, #+0]
   \       0x40   0x1A1B             SUBS     R3,R3,R0
   \       0x42   0x6013             STR      R3,[R2, #+0]
    973                  c = z; d++;
   \       0x44   0x4608             MOV      R0,R1
   \       0x46   0x1D12             ADDS     R2,R2,#+4
   \       0x48   0xE7F3             B.N      ??mpi_sub_hlp_2
    974              }
    975          }
   \                     ??mpi_sub_hlp_3: (+1)
   \       0x4A   0xBC70             POP      {R4-R6}
   \       0x4C   0x4770             BX       LR               ;; return
    976          
    977          /*
    978           * Unsigned subtraction: X = |A| - |B|  (HAC 14.9)
    979           */
    980          #if defined(MBEDTLS_MPI_SUB_ABS_ALT)
    981          int mbedtls_mpi_sub_abs_orig( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
    982          #else

   \                                 In section .text, align 2, keep-with-next
    983          int mbedtls_mpi_sub_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
    984          #endif /* MBEDTLS_MPI_SUB_ABS_ALT */
    985          {
   \                     mbedtls_mpi_sub_abs: (+1)
   \        0x0   0xB5FE             PUSH     {R1-R7,LR}
   \        0x2   0x4605             MOV      R5,R0
   \        0x4   0x460F             MOV      R7,R1
   \        0x6   0x4616             MOV      R6,R2
    986              mbedtls_mpi TB;
    987              int ret;
    988              size_t n;
    989          
    990              if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
   \        0x8   0x4631             MOV      R1,R6
   \        0xA   0x4638             MOV      R0,R7
   \        0xC   0x....'....        BL       mbedtls_mpi_cmp_abs
   \       0x10   0x2800             CMP      R0,#+0
   \       0x12   0xD502             BPL.N    ??mbedtls_mpi_sub_abs_0
    991                  return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
   \       0x14   0xF06F 0x0009      MVN      R0,#+9
   \       0x18   0xBDFE             POP      {R1-R7,PC}
    992          
    993              mbedtls_mpi_init( &TB );
   \                     ??mbedtls_mpi_sub_abs_0: (+1)
   \       0x1A   0x4668             MOV      R0,SP
   \       0x1C   0x....'....        BL       mbedtls_mpi_init
    994          
    995              if( X == B )
   \       0x20   0x42B5             CMP      R5,R6
   \       0x22   0xD106             BNE.N    ??mbedtls_mpi_sub_abs_1
    996              {
    997                  MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
   \       0x24   0x4631             MOV      R1,R6
   \       0x26   0x4668             MOV      R0,SP
   \       0x28   0x....'....        BL       mbedtls_mpi_copy
   \       0x2C   0x0004             MOVS     R4,R0
   \       0x2E   0xD11C             BNE.N    ??mbedtls_mpi_sub_abs_2
    998                  B = &TB;
   \       0x30   0x466E             MOV      R6,SP
    999              }
   1000          
   1001              if( X != A )
   \                     ??mbedtls_mpi_sub_abs_1: (+1)
   \       0x32   0x42BD             CMP      R5,R7
   \       0x34   0xD005             BEQ.N    ??mbedtls_mpi_sub_abs_3
   1002                  MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
   \       0x36   0x4639             MOV      R1,R7
   \       0x38   0x4628             MOV      R0,R5
   \       0x3A   0x....'....        BL       mbedtls_mpi_copy
   \       0x3E   0x0004             MOVS     R4,R0
   \       0x40   0xD113             BNE.N    ??mbedtls_mpi_sub_abs_2
   1003          
   1004              /*
   1005               * X should always be positive as a result of unsigned subtractions.
   1006               */
   1007              X->s = 1;
   \                     ??mbedtls_mpi_sub_abs_3: (+1)
   \       0x42   0x2001             MOVS     R0,#+1
   \       0x44   0x6028             STR      R0,[R5, #+0]
   1008          
   1009              ret = 0;
   \       0x46   0x2400             MOVS     R4,#+0
   1010          
   1011              for( n = B->n; n > 0; n-- )
   \       0x48   0x6873             LDR      R3,[R6, #+4]
   \                     ??mbedtls_mpi_sub_abs_4: (+1)
   \       0x4A   0x2B00             CMP      R3,#+0
   \       0x4C   0xD008             BEQ.N    ??mbedtls_mpi_sub_abs_5
   1012                  if( B->p[n - 1] != 0 )
   \       0x4E   0x68B0             LDR      R0,[R6, #+8]
   \       0x50   0xEB00 0x0083      ADD      R0,R0,R3, LSL #+2
   \       0x54   0xF850 0x0C04      LDR      R0,[R0, #-4]
   \       0x58   0x2800             CMP      R0,#+0
   \       0x5A   0xD101             BNE.N    ??mbedtls_mpi_sub_abs_5
   \       0x5C   0x1E5B             SUBS     R3,R3,#+1
   \       0x5E   0xE7F4             B.N      ??mbedtls_mpi_sub_abs_4
   1013                      break;
   1014          
   1015              mpi_sub_hlp( n, B->p, X->p );
   \                     ??mbedtls_mpi_sub_abs_5: (+1)
   \       0x60   0x68AA             LDR      R2,[R5, #+8]
   \       0x62   0x68B1             LDR      R1,[R6, #+8]
   \       0x64   0x4618             MOV      R0,R3
   \       0x66   0x....'....        BL       mpi_sub_hlp
   1016          
   1017          cleanup:
   1018          
   1019              mbedtls_mpi_free( &TB );
   \                     ??mbedtls_mpi_sub_abs_2: (+1)
   \       0x6A   0x4668             MOV      R0,SP
   \       0x6C   0x....'....        BL       mbedtls_mpi_free
   1020          
   1021              return( ret );
   \       0x70   0x4620             MOV      R0,R4
   \       0x72   0xBDFE             POP      {R1-R7,PC}       ;; return
   1022          }
   1023          
   1024          /*
   1025           * Signed addition: X = A + B
   1026           */

   \                                 In section .text, align 2, keep-with-next
   1027          int mbedtls_mpi_add_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
   1028          {
   \                     mbedtls_mpi_add_mpi: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
   \        0x6   0x4616             MOV      R6,R2
   1029              int ret, s = A->s;
   \        0x8   0x682F             LDR      R7,[R5, #+0]
   1030          
   1031              if( A->s * B->s < 0 )
   \        0xA   0x4639             MOV      R1,R7
   \        0xC   0x6830             LDR      R0,[R6, #+0]
   \        0xE   0x4341             MULS     R1,R0,R1
   \       0x10   0xD518             BPL.N    ??mbedtls_mpi_add_mpi_0
   1032              {
   1033                  if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
   \       0x12   0x4631             MOV      R1,R6
   \       0x14   0x4628             MOV      R0,R5
   \       0x16   0x....'....        BL       mbedtls_mpi_cmp_abs
   \       0x1A   0x2800             CMP      R0,#+0
   \       0x1C   0xD408             BMI.N    ??mbedtls_mpi_add_mpi_1
   1034                  {
   1035                      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
   \       0x1E   0x4632             MOV      R2,R6
   \       0x20   0x4629             MOV      R1,R5
   \       0x22   0x4620             MOV      R0,R4
   \       0x24   0x....'....        BL       mbedtls_mpi_sub_abs
   \       0x28   0x2800             CMP      R0,#+0
   \       0x2A   0xD112             BNE.N    ??mbedtls_mpi_add_mpi_2
   1036                      X->s =  s;
   \       0x2C   0x6027             STR      R7,[R4, #+0]
   \       0x2E   0xBDF2             POP      {R1,R4-R7,PC}
   1037                  }
   1038                  else
   1039                  {
   1040                      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
   \                     ??mbedtls_mpi_add_mpi_1: (+1)
   \       0x30   0x462A             MOV      R2,R5
   \       0x32   0x4631             MOV      R1,R6
   \       0x34   0x4620             MOV      R0,R4
   \       0x36   0x....'....        BL       mbedtls_mpi_sub_abs
   \       0x3A   0x2800             CMP      R0,#+0
   \       0x3C   0xD109             BNE.N    ??mbedtls_mpi_add_mpi_2
   1041                      X->s = -s;
   \       0x3E   0x427F             RSBS     R7,R7,#+0
   \       0x40   0x6027             STR      R7,[R4, #+0]
   \       0x42   0xBDF2             POP      {R1,R4-R7,PC}
   1042                  }
   1043              }
   1044              else
   1045              {
   1046                  MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
   \                     ??mbedtls_mpi_add_mpi_0: (+1)
   \       0x44   0x4629             MOV      R1,R5
   \       0x46   0x4620             MOV      R0,R4
   \       0x48   0x....'....        BL       mbedtls_mpi_add_abs
   \       0x4C   0x2800             CMP      R0,#+0
   \       0x4E   0xD100             BNE.N    ??mbedtls_mpi_add_mpi_2
   1047                  X->s = s;
   \       0x50   0x6027             STR      R7,[R4, #+0]
   1048              }
   1049          
   1050          cleanup:
   1051          
   1052              return( ret );
   \                     ??mbedtls_mpi_add_mpi_2: (+1)
   \       0x52   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
   1053          }
   1054          
   1055          /*
   1056           * Signed subtraction: X = A - B
   1057           */

   \                                 In section .text, align 2, keep-with-next
   1058          int mbedtls_mpi_sub_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
   1059          {
   \                     mbedtls_mpi_sub_mpi: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
   \        0x6   0x4616             MOV      R6,R2
   1060              int ret, s = A->s;
   \        0x8   0x682F             LDR      R7,[R5, #+0]
   1061          
   1062              if( A->s * B->s > 0 )
   \        0xA   0x4639             MOV      R1,R7
   \        0xC   0x6830             LDR      R0,[R6, #+0]
   \        0xE   0x4341             MULS     R1,R0,R1
   \       0x10   0x2901             CMP      R1,#+1
   \       0x12   0xDB18             BLT.N    ??mbedtls_mpi_sub_mpi_0
   1063              {
   1064                  if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
   \       0x14   0x4631             MOV      R1,R6
   \       0x16   0x4628             MOV      R0,R5
   \       0x18   0x....'....        BL       mbedtls_mpi_cmp_abs
   \       0x1C   0x2800             CMP      R0,#+0
   \       0x1E   0xD408             BMI.N    ??mbedtls_mpi_sub_mpi_1
   1065                  {
   1066                      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
   \       0x20   0x4632             MOV      R2,R6
   \       0x22   0x4629             MOV      R1,R5
   \       0x24   0x4620             MOV      R0,R4
   \       0x26   0x....'....        BL       mbedtls_mpi_sub_abs
   \       0x2A   0x2800             CMP      R0,#+0
   \       0x2C   0xD112             BNE.N    ??mbedtls_mpi_sub_mpi_2
   1067                      X->s =  s;
   \       0x2E   0x6027             STR      R7,[R4, #+0]
   \       0x30   0xBDF2             POP      {R1,R4-R7,PC}
   1068                  }
   1069                  else
   1070                  {
   1071                      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
   \                     ??mbedtls_mpi_sub_mpi_1: (+1)
   \       0x32   0x462A             MOV      R2,R5
   \       0x34   0x4631             MOV      R1,R6
   \       0x36   0x4620             MOV      R0,R4
   \       0x38   0x....'....        BL       mbedtls_mpi_sub_abs
   \       0x3C   0x2800             CMP      R0,#+0
   \       0x3E   0xD109             BNE.N    ??mbedtls_mpi_sub_mpi_2
   1072                      X->s = -s;
   \       0x40   0x427F             RSBS     R7,R7,#+0
   \       0x42   0x6027             STR      R7,[R4, #+0]
   \       0x44   0xBDF2             POP      {R1,R4-R7,PC}
   1073                  }
   1074              }
   1075              else
   1076              {
   1077                  MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
   \                     ??mbedtls_mpi_sub_mpi_0: (+1)
   \       0x46   0x4629             MOV      R1,R5
   \       0x48   0x4620             MOV      R0,R4
   \       0x4A   0x....'....        BL       mbedtls_mpi_add_abs
   \       0x4E   0x2800             CMP      R0,#+0
   \       0x50   0xD100             BNE.N    ??mbedtls_mpi_sub_mpi_2
   1078                  X->s = s;
   \       0x52   0x6027             STR      R7,[R4, #+0]
   1079              }
   1080          
   1081          cleanup:
   1082          
   1083              return( ret );
   \                     ??mbedtls_mpi_sub_mpi_2: (+1)
   \       0x54   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
   1084          }
   1085          
   1086          /*
   1087           * Signed addition: X = A + b
   1088           */

   \                                 In section .text, align 2, keep-with-next
   1089          int mbedtls_mpi_add_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
   1090          {
   \                     mbedtls_mpi_add_int: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   1091              mbedtls_mpi _B;
   1092              mbedtls_mpi_uint p[1];
   1093          
   1094              p[0] = ( b < 0 ) ? -b : b;
   \        0x2   0x2A00             CMP      R2,#+0
   \        0x4   0xD502             BPL.N    ??mbedtls_mpi_add_int_0
   \        0x6   0x4253             RSBS     R3,R2,#+0
   \        0x8   0x9300             STR      R3,[SP, #+0]
   \        0xA   0xE000             B.N      ??mbedtls_mpi_add_int_1
   \                     ??mbedtls_mpi_add_int_0: (+1)
   \        0xC   0x9200             STR      R2,[SP, #+0]
   1095              _B.s = ( b < 0 ) ? -1 : 1;
   \                     ??mbedtls_mpi_add_int_1: (+1)
   \        0xE   0x2A00             CMP      R2,#+0
   \       0x10   0xD502             BPL.N    ??mbedtls_mpi_add_int_2
   \       0x12   0xF04F 0x32FF      MOV      R2,#-1
   \       0x16   0xE000             B.N      ??mbedtls_mpi_add_int_3
   \                     ??mbedtls_mpi_add_int_2: (+1)
   \       0x18   0x2201             MOVS     R2,#+1
   \                     ??mbedtls_mpi_add_int_3: (+1)
   \       0x1A   0x9201             STR      R2,[SP, #+4]
   1096              _B.n = 1;
   \       0x1C   0x2201             MOVS     R2,#+1
   \       0x1E   0x9202             STR      R2,[SP, #+8]
   1097              _B.p = p;
   \       0x20   0x466A             MOV      R2,SP
   \       0x22   0x9203             STR      R2,[SP, #+12]
   1098          
   1099              return( mbedtls_mpi_add_mpi( X, A, &_B ) );
   \       0x24   0xAA01             ADD      R2,SP,#+4
   \       0x26   0x....'....        BL       mbedtls_mpi_add_mpi
   \       0x2A   0xB005             ADD      SP,SP,#+20
   \       0x2C   0xBD00             POP      {PC}             ;; return
   1100          }
   1101          
   1102          /*
   1103           * Signed subtraction: X = A - b
   1104           */

   \                                 In section .text, align 2, keep-with-next
   1105          int mbedtls_mpi_sub_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
   1106          {
   \                     mbedtls_mpi_sub_int: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   1107              mbedtls_mpi _B;
   1108              mbedtls_mpi_uint p[1];
   1109          
   1110              p[0] = ( b < 0 ) ? -b : b;
   \        0x2   0x2A00             CMP      R2,#+0
   \        0x4   0xD502             BPL.N    ??mbedtls_mpi_sub_int_0
   \        0x6   0x4253             RSBS     R3,R2,#+0
   \        0x8   0x9300             STR      R3,[SP, #+0]
   \        0xA   0xE000             B.N      ??mbedtls_mpi_sub_int_1
   \                     ??mbedtls_mpi_sub_int_0: (+1)
   \        0xC   0x9200             STR      R2,[SP, #+0]
   1111              _B.s = ( b < 0 ) ? -1 : 1;
   \                     ??mbedtls_mpi_sub_int_1: (+1)
   \        0xE   0x2A00             CMP      R2,#+0
   \       0x10   0xD502             BPL.N    ??mbedtls_mpi_sub_int_2
   \       0x12   0xF04F 0x32FF      MOV      R2,#-1
   \       0x16   0xE000             B.N      ??mbedtls_mpi_sub_int_3
   \                     ??mbedtls_mpi_sub_int_2: (+1)
   \       0x18   0x2201             MOVS     R2,#+1
   \                     ??mbedtls_mpi_sub_int_3: (+1)
   \       0x1A   0x9201             STR      R2,[SP, #+4]
   1112              _B.n = 1;
   \       0x1C   0x2201             MOVS     R2,#+1
   \       0x1E   0x9202             STR      R2,[SP, #+8]
   1113              _B.p = p;
   \       0x20   0x466A             MOV      R2,SP
   \       0x22   0x9203             STR      R2,[SP, #+12]
   1114          
   1115              return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
   \       0x24   0xAA01             ADD      R2,SP,#+4
   \       0x26   0x....'....        BL       mbedtls_mpi_sub_mpi
   \       0x2A   0xB005             ADD      SP,SP,#+20
   \       0x2C   0xBD00             POP      {PC}             ;; return
   1116          }
   1117          
   1118          /*
   1119           * Helper for mbedtls_mpi multiplication
   1120           */

   \                                 In section .text, align 2, keep-with-next
   1121          static
   1122          #if defined(__APPLE__) && defined(__arm__)
   1123          /*
   1124           * Apple LLVM version 4.2 (clang-425.0.24) (based on LLVM 3.2svn)
   1125           * appears to need this to prevent bad ARM code generation at -O3.
   1126           */
   1127          __attribute__ ((noinline))
   1128          #endif
   1129          void mpi_mul_hlp( size_t i, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d, mbedtls_mpi_uint b )
   1130          {
   \                     mpi_mul_hlp: (+1)
   \        0x0   0xE92D 0x03F0      PUSH     {R4-R9}
   1131              mbedtls_mpi_uint c = 0, t = 0;
   \        0x4   0x2700             MOVS     R7,#+0
   \        0x6   0x460D             MOV      R5,R1
   \        0x8   0x4616             MOV      R6,R2
   \        0xA   0x461C             MOV      R4,R3
   \        0xC   0x4639             MOV      R1,R7
   \        0xE   0xE011             B.N      ??mpi_mul_hlp_0
   1132          
   1133          #if defined(MULADDC_HUIT)
   1134              for( ; i >= 8; i -= 8 )
   1135              {
   1136                  MULADDC_INIT
   1137                  MULADDC_HUIT
   1138                  MULADDC_STOP
   1139              }
   1140          
   1141              for( ; i > 0; i-- )
   1142              {
   1143                  MULADDC_INIT
   1144                  MULADDC_CORE
   1145                  MULADDC_STOP
   1146              }
   1147          #else /* MULADDC_HUIT */
   1148              for( ; i >= 16; i -= 16 )
   1149              {
   1150                  MULADDC_INIT
   1151                  MULADDC_CORE   MULADDC_CORE
   1152                  MULADDC_CORE   MULADDC_CORE
   1153                  MULADDC_CORE   MULADDC_CORE
   1154                  MULADDC_CORE   MULADDC_CORE
   1155          
   1156                  MULADDC_CORE   MULADDC_CORE
   1157                  MULADDC_CORE   MULADDC_CORE
   1158                  MULADDC_CORE   MULADDC_CORE
   1159                  MULADDC_CORE   MULADDC_CORE
   \                     ??mpi_mul_hlp_1: (+1)
   \       0x10   0x63B2             STR      R2,[R6, #+56]
   \       0x12   0x6BE9             LDR      R1,[R5, #+60]
   \       0x14   0xFBA4 0x2301      UMULL    R2,R3,R4,R1
   \       0x18   0x3540             ADDS     R5,R5,#+64
   \       0x1A   0x4619             MOV      R1,R3
   \       0x1C   0x18BA             ADDS     R2,R7,R2
   \       0x1E   0x42BA             CMP      R2,R7
   \       0x20   0xD200             BCS.N    ??mpi_mul_hlp_2
   \       0x22   0x1C49             ADDS     R1,R1,#+1
   \                     ??mpi_mul_hlp_2: (+1)
   \       0x24   0x6BF3             LDR      R3,[R6, #+60]
   \       0x26   0x189A             ADDS     R2,R3,R2
   \       0x28   0x429A             CMP      R2,R3
   \       0x2A   0xD200             BCS.N    ??mpi_mul_hlp_3
   \       0x2C   0x1C49             ADDS     R1,R1,#+1
   \                     ??mpi_mul_hlp_3: (+1)
   \       0x2E   0x63F2             STR      R2,[R6, #+60]
   \       0x30   0x3640             ADDS     R6,R6,#+64
   \       0x32   0x3810             SUBS     R0,R0,#+16
   \                     ??mpi_mul_hlp_0: (+1)
   \       0x34   0x2810             CMP      R0,#+16
   \       0x36   0xF0C0 0x80EC      BCC.W    ??mpi_mul_hlp_4
   \       0x3A   0x682A             LDR      R2,[R5, #+0]
   \       0x3C   0xFBA4 0x2302      UMULL    R2,R3,R4,R2
   \       0x40   0x188A             ADDS     R2,R1,R2
   \       0x42   0x428A             CMP      R2,R1
   \       0x44   0xD200             BCS.N    ??mpi_mul_hlp_5
   \       0x46   0x1C5B             ADDS     R3,R3,#+1
   \                     ??mpi_mul_hlp_5: (+1)
   \       0x48   0x6831             LDR      R1,[R6, #+0]
   \       0x4A   0x188A             ADDS     R2,R1,R2
   \       0x4C   0x428A             CMP      R2,R1
   \       0x4E   0xD200             BCS.N    ??mpi_mul_hlp_6
   \       0x50   0x1C5B             ADDS     R3,R3,#+1
   \                     ??mpi_mul_hlp_6: (+1)
   \       0x52   0x6032             STR      R2,[R6, #+0]
   \       0x54   0x6869             LDR      R1,[R5, #+4]
   \       0x56   0xFBA4 0x8901      UMULL    R8,R9,R4,R1
   \       0x5A   0x4498             ADD      R8,R3,R8
   \       0x5C   0x4598             CMP      R8,R3
   \       0x5E   0xD201             BCS.N    ??mpi_mul_hlp_7
   \       0x60   0xF109 0x0901      ADD      R9,R9,#+1
   \                     ??mpi_mul_hlp_7: (+1)
   \       0x64   0x6871             LDR      R1,[R6, #+4]
   \       0x66   0x4488             ADD      R8,R1,R8
   \       0x68   0x4588             CMP      R8,R1
   \       0x6A   0xD201             BCS.N    ??mpi_mul_hlp_8
   \       0x6C   0xF109 0x0901      ADD      R9,R9,#+1
   \                     ??mpi_mul_hlp_8: (+1)
   \       0x70   0xF8C6 0x8004      STR      R8,[R6, #+4]
   \       0x74   0x68A9             LDR      R1,[R5, #+8]
   \       0x76   0xFBA4 0x2301      UMULL    R2,R3,R4,R1
   \       0x7A   0x444A             ADD      R2,R9,R2
   \       0x7C   0x454A             CMP      R2,R9
   \       0x7E   0xD200             BCS.N    ??mpi_mul_hlp_9
   \       0x80   0x1C5B             ADDS     R3,R3,#+1
   \                     ??mpi_mul_hlp_9: (+1)
   \       0x82   0x68B1             LDR      R1,[R6, #+8]
   \       0x84   0x188A             ADDS     R2,R1,R2
   \       0x86   0x428A             CMP      R2,R1
   \       0x88   0xD200             BCS.N    ??mpi_mul_hlp_10
   \       0x8A   0x1C5B             ADDS     R3,R3,#+1
   \                     ??mpi_mul_hlp_10: (+1)
   \       0x8C   0x60B2             STR      R2,[R6, #+8]
   \       0x8E   0x68E9             LDR      R1,[R5, #+12]
   \       0x90   0xFBA4 0x8901      UMULL    R8,R9,R4,R1
   \       0x94   0x4498             ADD      R8,R3,R8
   \       0x96   0x4598             CMP      R8,R3
   \       0x98   0xD201             BCS.N    ??mpi_mul_hlp_11
   \       0x9A   0xF109 0x0901      ADD      R9,R9,#+1
   \                     ??mpi_mul_hlp_11: (+1)
   \       0x9E   0x68F1             LDR      R1,[R6, #+12]
   \       0xA0   0x4488             ADD      R8,R1,R8
   \       0xA2   0x4588             CMP      R8,R1
   \       0xA4   0xD201             BCS.N    ??mpi_mul_hlp_12
   \       0xA6   0xF109 0x0901      ADD      R9,R9,#+1
   \                     ??mpi_mul_hlp_12: (+1)
   \       0xAA   0xF8C6 0x800C      STR      R8,[R6, #+12]
   \       0xAE   0x6929             LDR      R1,[R5, #+16]
   \       0xB0   0xFBA4 0x2301      UMULL    R2,R3,R4,R1
   \       0xB4   0x444A             ADD      R2,R9,R2
   \       0xB6   0x454A             CMP      R2,R9
   \       0xB8   0xD200             BCS.N    ??mpi_mul_hlp_13
   \       0xBA   0x1C5B             ADDS     R3,R3,#+1
   \                     ??mpi_mul_hlp_13: (+1)
   \       0xBC   0x6931             LDR      R1,[R6, #+16]
   \       0xBE   0x188A             ADDS     R2,R1,R2
   \       0xC0   0x428A             CMP      R2,R1
   \       0xC2   0xD200             BCS.N    ??mpi_mul_hlp_14
   \       0xC4   0x1C5B             ADDS     R3,R3,#+1
   \                     ??mpi_mul_hlp_14: (+1)
   \       0xC6   0x6132             STR      R2,[R6, #+16]
   \       0xC8   0x6969             LDR      R1,[R5, #+20]
   \       0xCA   0xFBA4 0x8901      UMULL    R8,R9,R4,R1
   \       0xCE   0x4498             ADD      R8,R3,R8
   \       0xD0   0x4598             CMP      R8,R3
   \       0xD2   0xD201             BCS.N    ??mpi_mul_hlp_15
   \       0xD4   0xF109 0x0901      ADD      R9,R9,#+1
   \                     ??mpi_mul_hlp_15: (+1)
   \       0xD8   0x6971             LDR      R1,[R6, #+20]
   \       0xDA   0x4488             ADD      R8,R1,R8
   \       0xDC   0x4588             CMP      R8,R1
   \       0xDE   0xD201             BCS.N    ??mpi_mul_hlp_16
   \       0xE0   0xF109 0x0901      ADD      R9,R9,#+1
   \                     ??mpi_mul_hlp_16: (+1)
   \       0xE4   0xF8C6 0x8014      STR      R8,[R6, #+20]
   \       0xE8   0x69A9             LDR      R1,[R5, #+24]
   \       0xEA   0xFBA4 0x2301      UMULL    R2,R3,R4,R1
   \       0xEE   0x444A             ADD      R2,R9,R2
   \       0xF0   0x454A             CMP      R2,R9
   \       0xF2   0xD200             BCS.N    ??mpi_mul_hlp_17
   \       0xF4   0x1C5B             ADDS     R3,R3,#+1
   \                     ??mpi_mul_hlp_17: (+1)
   \       0xF6   0x69B1             LDR      R1,[R6, #+24]
   \       0xF8   0x188A             ADDS     R2,R1,R2
   \       0xFA   0x428A             CMP      R2,R1
   \       0xFC   0xD200             BCS.N    ??mpi_mul_hlp_18
   \       0xFE   0x1C5B             ADDS     R3,R3,#+1
   \                     ??mpi_mul_hlp_18: (+1)
   \      0x100   0x61B2             STR      R2,[R6, #+24]
   \      0x102   0x69E9             LDR      R1,[R5, #+28]
   \      0x104   0xFBA4 0x8901      UMULL    R8,R9,R4,R1
   \      0x108   0x4498             ADD      R8,R3,R8
   \      0x10A   0x4598             CMP      R8,R3
   \      0x10C   0xD201             BCS.N    ??mpi_mul_hlp_19
   \      0x10E   0xF109 0x0901      ADD      R9,R9,#+1
   \                     ??mpi_mul_hlp_19: (+1)
   \      0x112   0x69F1             LDR      R1,[R6, #+28]
   \      0x114   0x4488             ADD      R8,R1,R8
   \      0x116   0x4588             CMP      R8,R1
   \      0x118   0xD201             BCS.N    ??mpi_mul_hlp_20
   \      0x11A   0xF109 0x0901      ADD      R9,R9,#+1
   \                     ??mpi_mul_hlp_20: (+1)
   \      0x11E   0xF8C6 0x801C      STR      R8,[R6, #+28]
   \      0x122   0x6A29             LDR      R1,[R5, #+32]
   \      0x124   0xFBA4 0x2301      UMULL    R2,R3,R4,R1
   \      0x128   0x444A             ADD      R2,R9,R2
   \      0x12A   0x454A             CMP      R2,R9
   \      0x12C   0xD200             BCS.N    ??mpi_mul_hlp_21
   \      0x12E   0x1C5B             ADDS     R3,R3,#+1
   \                     ??mpi_mul_hlp_21: (+1)
   \      0x130   0x6A31             LDR      R1,[R6, #+32]
   \      0x132   0x188A             ADDS     R2,R1,R2
   \      0x134   0x428A             CMP      R2,R1
   \      0x136   0xD200             BCS.N    ??mpi_mul_hlp_22
   \      0x138   0x1C5B             ADDS     R3,R3,#+1
   \                     ??mpi_mul_hlp_22: (+1)
   \      0x13A   0x6232             STR      R2,[R6, #+32]
   \      0x13C   0x6A69             LDR      R1,[R5, #+36]
   \      0x13E   0xFBA4 0x8901      UMULL    R8,R9,R4,R1
   \      0x142   0x4498             ADD      R8,R3,R8
   \      0x144   0x4598             CMP      R8,R3
   \      0x146   0xD201             BCS.N    ??mpi_mul_hlp_23
   \      0x148   0xF109 0x0901      ADD      R9,R9,#+1
   \                     ??mpi_mul_hlp_23: (+1)
   \      0x14C   0x6A71             LDR      R1,[R6, #+36]
   \      0x14E   0x4488             ADD      R8,R1,R8
   \      0x150   0x4588             CMP      R8,R1
   \      0x152   0xD201             BCS.N    ??mpi_mul_hlp_24
   \      0x154   0xF109 0x0901      ADD      R9,R9,#+1
   \                     ??mpi_mul_hlp_24: (+1)
   \      0x158   0xF8C6 0x8024      STR      R8,[R6, #+36]
   \      0x15C   0x6AA9             LDR      R1,[R5, #+40]
   \      0x15E   0xFBA4 0x2301      UMULL    R2,R3,R4,R1
   \      0x162   0x444A             ADD      R2,R9,R2
   \      0x164   0x454A             CMP      R2,R9
   \      0x166   0xD200             BCS.N    ??mpi_mul_hlp_25
   \      0x168   0x1C5B             ADDS     R3,R3,#+1
   \                     ??mpi_mul_hlp_25: (+1)
   \      0x16A   0x6AB1             LDR      R1,[R6, #+40]
   \      0x16C   0x188A             ADDS     R2,R1,R2
   \      0x16E   0x428A             CMP      R2,R1
   \      0x170   0xD200             BCS.N    ??mpi_mul_hlp_26
   \      0x172   0x1C5B             ADDS     R3,R3,#+1
   \                     ??mpi_mul_hlp_26: (+1)
   \      0x174   0x62B2             STR      R2,[R6, #+40]
   \      0x176   0x6AE9             LDR      R1,[R5, #+44]
   \      0x178   0xFBA4 0x8901      UMULL    R8,R9,R4,R1
   \      0x17C   0x4498             ADD      R8,R3,R8
   \      0x17E   0x4598             CMP      R8,R3
   \      0x180   0xD201             BCS.N    ??mpi_mul_hlp_27
   \      0x182   0xF109 0x0901      ADD      R9,R9,#+1
   \                     ??mpi_mul_hlp_27: (+1)
   \      0x186   0x6AF1             LDR      R1,[R6, #+44]
   \      0x188   0x4488             ADD      R8,R1,R8
   \      0x18A   0x4588             CMP      R8,R1
   \      0x18C   0xD201             BCS.N    ??mpi_mul_hlp_28
   \      0x18E   0xF109 0x0901      ADD      R9,R9,#+1
   \                     ??mpi_mul_hlp_28: (+1)
   \      0x192   0xF8C6 0x802C      STR      R8,[R6, #+44]
   \      0x196   0x6B29             LDR      R1,[R5, #+48]
   \      0x198   0xFBA4 0x2301      UMULL    R2,R3,R4,R1
   \      0x19C   0x444A             ADD      R2,R9,R2
   \      0x19E   0x454A             CMP      R2,R9
   \      0x1A0   0xD200             BCS.N    ??mpi_mul_hlp_29
   \      0x1A2   0x1C5B             ADDS     R3,R3,#+1
   \                     ??mpi_mul_hlp_29: (+1)
   \      0x1A4   0x6B31             LDR      R1,[R6, #+48]
   \      0x1A6   0x188A             ADDS     R2,R1,R2
   \      0x1A8   0x428A             CMP      R2,R1
   \      0x1AA   0xD200             BCS.N    ??mpi_mul_hlp_30
   \      0x1AC   0x1C5B             ADDS     R3,R3,#+1
   \                     ??mpi_mul_hlp_30: (+1)
   \      0x1AE   0x6332             STR      R2,[R6, #+48]
   \      0x1B0   0x6B69             LDR      R1,[R5, #+52]
   \      0x1B2   0xFBA4 0x8901      UMULL    R8,R9,R4,R1
   \      0x1B6   0x4498             ADD      R8,R3,R8
   \      0x1B8   0x4598             CMP      R8,R3
   \      0x1BA   0xD201             BCS.N    ??mpi_mul_hlp_31
   \      0x1BC   0xF109 0x0901      ADD      R9,R9,#+1
   \                     ??mpi_mul_hlp_31: (+1)
   \      0x1C0   0x6B71             LDR      R1,[R6, #+52]
   \      0x1C2   0x4488             ADD      R8,R1,R8
   \      0x1C4   0x4588             CMP      R8,R1
   \      0x1C6   0xD201             BCS.N    ??mpi_mul_hlp_32
   \      0x1C8   0xF109 0x0901      ADD      R9,R9,#+1
   \                     ??mpi_mul_hlp_32: (+1)
   \      0x1CC   0xF8C6 0x8034      STR      R8,[R6, #+52]
   \      0x1D0   0x6BA9             LDR      R1,[R5, #+56]
   \      0x1D2   0xFBA4 0x2301      UMULL    R2,R3,R4,R1
   \      0x1D6   0x461F             MOV      R7,R3
   \      0x1D8   0x444A             ADD      R2,R9,R2
   \      0x1DA   0x454A             CMP      R2,R9
   \      0x1DC   0xD200             BCS.N    ??mpi_mul_hlp_33
   \      0x1DE   0x1C7F             ADDS     R7,R7,#+1
   \                     ??mpi_mul_hlp_33: (+1)
   \      0x1E0   0x6BB1             LDR      R1,[R6, #+56]
   \      0x1E2   0x188A             ADDS     R2,R1,R2
   \      0x1E4   0x428A             CMP      R2,R1
   \      0x1E6   0xF4BF 0xAF13      BCS.W    ??mpi_mul_hlp_1
   \      0x1EA   0x1C7F             ADDS     R7,R7,#+1
   \      0x1EC   0xE710             B.N      ??mpi_mul_hlp_1
   1160                  MULADDC_STOP
   1161              }
   1162          
   1163              for( ; i >= 8; i -= 8 )
   1164              {
   1165                  MULADDC_INIT
   1166                  MULADDC_CORE   MULADDC_CORE
   1167                  MULADDC_CORE   MULADDC_CORE
   1168          
   1169                  MULADDC_CORE   MULADDC_CORE
   1170                  MULADDC_CORE   MULADDC_CORE
   \                     ??mpi_mul_hlp_34: (+1)
   \      0x1EE   0x61B2             STR      R2,[R6, #+24]
   \      0x1F0   0x69E9             LDR      R1,[R5, #+28]
   \      0x1F2   0xFBA4 0x2301      UMULL    R2,R3,R4,R1
   \      0x1F6   0x3520             ADDS     R5,R5,#+32
   \      0x1F8   0x4619             MOV      R1,R3
   \      0x1FA   0x18BA             ADDS     R2,R7,R2
   \      0x1FC   0x42BA             CMP      R2,R7
   \      0x1FE   0xD200             BCS.N    ??mpi_mul_hlp_35
   \      0x200   0x1C49             ADDS     R1,R1,#+1
   \                     ??mpi_mul_hlp_35: (+1)
   \      0x202   0x69F3             LDR      R3,[R6, #+28]
   \      0x204   0x189A             ADDS     R2,R3,R2
   \      0x206   0x429A             CMP      R2,R3
   \      0x208   0xD200             BCS.N    ??mpi_mul_hlp_36
   \      0x20A   0x1C49             ADDS     R1,R1,#+1
   \                     ??mpi_mul_hlp_36: (+1)
   \      0x20C   0x61F2             STR      R2,[R6, #+28]
   \      0x20E   0x3620             ADDS     R6,R6,#+32
   \      0x210   0x3808             SUBS     R0,R0,#+8
   \                     ??mpi_mul_hlp_4: (+1)
   \      0x212   0x2808             CMP      R0,#+8
   \      0x214   0xD377             BCC.N    ??mpi_mul_hlp_37
   \      0x216   0x682A             LDR      R2,[R5, #+0]
   \      0x218   0xFBA4 0x2302      UMULL    R2,R3,R4,R2
   \      0x21C   0x188A             ADDS     R2,R1,R2
   \      0x21E   0x428A             CMP      R2,R1
   \      0x220   0xD200             BCS.N    ??mpi_mul_hlp_38
   \      0x222   0x1C5B             ADDS     R3,R3,#+1
   \                     ??mpi_mul_hlp_38: (+1)
   \      0x224   0x6831             LDR      R1,[R6, #+0]
   \      0x226   0x188A             ADDS     R2,R1,R2
   \      0x228   0x428A             CMP      R2,R1
   \      0x22A   0xD200             BCS.N    ??mpi_mul_hlp_39
   \      0x22C   0x1C5B             ADDS     R3,R3,#+1
   \                     ??mpi_mul_hlp_39: (+1)
   \      0x22E   0x6032             STR      R2,[R6, #+0]
   \      0x230   0x6869             LDR      R1,[R5, #+4]
   \      0x232   0xFBA4 0x8901      UMULL    R8,R9,R4,R1
   \      0x236   0x4498             ADD      R8,R3,R8
   \      0x238   0x4598             CMP      R8,R3
   \      0x23A   0xD201             BCS.N    ??mpi_mul_hlp_40
   \      0x23C   0xF109 0x0901      ADD      R9,R9,#+1
   \                     ??mpi_mul_hlp_40: (+1)
   \      0x240   0x6871             LDR      R1,[R6, #+4]
   \      0x242   0x4488             ADD      R8,R1,R8
   \      0x244   0x4588             CMP      R8,R1
   \      0x246   0xD201             BCS.N    ??mpi_mul_hlp_41
   \      0x248   0xF109 0x0901      ADD      R9,R9,#+1
   \                     ??mpi_mul_hlp_41: (+1)
   \      0x24C   0xF8C6 0x8004      STR      R8,[R6, #+4]
   \      0x250   0x68A9             LDR      R1,[R5, #+8]
   \      0x252   0xFBA4 0x2301      UMULL    R2,R3,R4,R1
   \      0x256   0x444A             ADD      R2,R9,R2
   \      0x258   0x454A             CMP      R2,R9
   \      0x25A   0xD200             BCS.N    ??mpi_mul_hlp_42
   \      0x25C   0x1C5B             ADDS     R3,R3,#+1
   \                     ??mpi_mul_hlp_42: (+1)
   \      0x25E   0x68B1             LDR      R1,[R6, #+8]
   \      0x260   0x188A             ADDS     R2,R1,R2
   \      0x262   0x428A             CMP      R2,R1
   \      0x264   0xD200             BCS.N    ??mpi_mul_hlp_43
   \      0x266   0x1C5B             ADDS     R3,R3,#+1
   \                     ??mpi_mul_hlp_43: (+1)
   \      0x268   0x60B2             STR      R2,[R6, #+8]
   \      0x26A   0x68E9             LDR      R1,[R5, #+12]
   \      0x26C   0xFBA4 0x8901      UMULL    R8,R9,R4,R1
   \      0x270   0x4498             ADD      R8,R3,R8
   \      0x272   0x4598             CMP      R8,R3
   \      0x274   0xD201             BCS.N    ??mpi_mul_hlp_44
   \      0x276   0xF109 0x0901      ADD      R9,R9,#+1
   \                     ??mpi_mul_hlp_44: (+1)
   \      0x27A   0x68F1             LDR      R1,[R6, #+12]
   \      0x27C   0x4488             ADD      R8,R1,R8
   \      0x27E   0x4588             CMP      R8,R1
   \      0x280   0xD201             BCS.N    ??mpi_mul_hlp_45
   \      0x282   0xF109 0x0901      ADD      R9,R9,#+1
   \                     ??mpi_mul_hlp_45: (+1)
   \      0x286   0xF8C6 0x800C      STR      R8,[R6, #+12]
   \      0x28A   0x6929             LDR      R1,[R5, #+16]
   \      0x28C   0xFBA4 0x2301      UMULL    R2,R3,R4,R1
   \      0x290   0x444A             ADD      R2,R9,R2
   \      0x292   0x454A             CMP      R2,R9
   \      0x294   0xD200             BCS.N    ??mpi_mul_hlp_46
   \      0x296   0x1C5B             ADDS     R3,R3,#+1
   \                     ??mpi_mul_hlp_46: (+1)
   \      0x298   0x6931             LDR      R1,[R6, #+16]
   \      0x29A   0x188A             ADDS     R2,R1,R2
   \      0x29C   0x428A             CMP      R2,R1
   \      0x29E   0xD200             BCS.N    ??mpi_mul_hlp_47
   \      0x2A0   0x1C5B             ADDS     R3,R3,#+1
   \                     ??mpi_mul_hlp_47: (+1)
   \      0x2A2   0x6132             STR      R2,[R6, #+16]
   \      0x2A4   0x6969             LDR      R1,[R5, #+20]
   \      0x2A6   0xFBA4 0x8901      UMULL    R8,R9,R4,R1
   \      0x2AA   0x4498             ADD      R8,R3,R8
   \      0x2AC   0x4598             CMP      R8,R3
   \      0x2AE   0xD201             BCS.N    ??mpi_mul_hlp_48
   \      0x2B0   0xF109 0x0901      ADD      R9,R9,#+1
   \                     ??mpi_mul_hlp_48: (+1)
   \      0x2B4   0x6971             LDR      R1,[R6, #+20]
   \      0x2B6   0x4488             ADD      R8,R1,R8
   \      0x2B8   0x4588             CMP      R8,R1
   \      0x2BA   0xD201             BCS.N    ??mpi_mul_hlp_49
   \      0x2BC   0xF109 0x0901      ADD      R9,R9,#+1
   \                     ??mpi_mul_hlp_49: (+1)
   \      0x2C0   0xF8C6 0x8014      STR      R8,[R6, #+20]
   \      0x2C4   0x69A9             LDR      R1,[R5, #+24]
   \      0x2C6   0xFBA4 0x2301      UMULL    R2,R3,R4,R1
   \      0x2CA   0x461F             MOV      R7,R3
   \      0x2CC   0x444A             ADD      R2,R9,R2
   \      0x2CE   0x454A             CMP      R2,R9
   \      0x2D0   0xD200             BCS.N    ??mpi_mul_hlp_50
   \      0x2D2   0x1C7F             ADDS     R7,R7,#+1
   \                     ??mpi_mul_hlp_50: (+1)
   \      0x2D4   0x69B1             LDR      R1,[R6, #+24]
   \      0x2D6   0x188A             ADDS     R2,R1,R2
   \      0x2D8   0x428A             CMP      R2,R1
   \      0x2DA   0xD288             BCS.N    ??mpi_mul_hlp_34
   \      0x2DC   0x1C7F             ADDS     R7,R7,#+1
   \      0x2DE   0xE786             B.N      ??mpi_mul_hlp_34
   1171                  MULADDC_STOP
   1172              }
   1173          
   1174              for( ; i > 0; i-- )
   1175              {
   1176                  MULADDC_INIT
   1177                  MULADDC_CORE
   \                     ??mpi_mul_hlp_51: (+1)
   \      0x2E0   0x4619             MOV      R1,R3
   \      0x2E2   0xE00D             B.N      ??mpi_mul_hlp_52
   \                     ??mpi_mul_hlp_53: (+1)
   \      0x2E4   0xF855 0x2B04      LDR      R2,[R5], #+4
   \      0x2E8   0xFBA4 0x2302      UMULL    R2,R3,R4,R2
   \      0x2EC   0x188A             ADDS     R2,R1,R2
   \      0x2EE   0x428A             CMP      R2,R1
   \      0x2F0   0xD200             BCS.N    ??mpi_mul_hlp_54
   \      0x2F2   0x1C5B             ADDS     R3,R3,#+1
   \                     ??mpi_mul_hlp_54: (+1)
   \      0x2F4   0x6831             LDR      R1,[R6, #+0]
   \      0x2F6   0x188A             ADDS     R2,R1,R2
   \      0x2F8   0x428A             CMP      R2,R1
   \      0x2FA   0xD2F1             BCS.N    ??mpi_mul_hlp_51
   \      0x2FC   0x1C5B             ADDS     R3,R3,#+1
   \      0x2FE   0x4619             MOV      R1,R3
   \                     ??mpi_mul_hlp_52: (+1)
   \      0x300   0xF846 0x2B04      STR      R2,[R6], #+4
   1178                  MULADDC_STOP
   1179              }
   \      0x304   0x1E40             SUBS     R0,R0,#+1
   \                     ??mpi_mul_hlp_37: (+1)
   \      0x306   0x2800             CMP      R0,#+0
   \      0x308   0xD1EC             BNE.N    ??mpi_mul_hlp_53
   1180          #endif /* MULADDC_HUIT */
   1181          
   1182              t++;
   1183          
   1184              do {
   1185                  *d += c; c = ( *d < c ); d++;
   \                     ??mpi_mul_hlp_55: (+1)
   \      0x30A   0x6830             LDR      R0,[R6, #+0]
   \      0x30C   0x1808             ADDS     R0,R1,R0
   \      0x30E   0x6030             STR      R0,[R6, #+0]
   \      0x310   0xF856 0x0B04      LDR      R0,[R6], #+4
   \      0x314   0x4288             CMP      R0,R1
   \      0x316   0x4189             SBCS     R1,R1,R1
   \      0x318   0x0FC9             LSRS     R1,R1,#+31
   1186              }
   1187              while( c != 0 );
   \      0x31A   0xD1F6             BNE.N    ??mpi_mul_hlp_55
   1188          }
   \      0x31C   0xE8BD 0x03F0      POP      {R4-R9}
   \      0x320   0x4770             BX       LR               ;; return
   1189          
   1190          /*
   1191           * Baseline multiplication: X = A * B  (HAC 14.12)
   1192           */
   1193          #if defined(MBEDTLS_MPI_MUL_MPI_ALT)
   1194          int mbedtls_mpi_mul_mpi_orig( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
   1195          #else

   \                                 In section .text, align 2, keep-with-next
   1196          int mbedtls_mpi_mul_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
   1197          #endif /* MBEDTLS_MPI_MUL_MPI_ALT */
   1198          {
   \                     mbedtls_mpi_mul_mpi: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \        0x4   0xB086             SUB      SP,SP,#+24
   \        0x6   0x4607             MOV      R7,R0
   \        0x8   0x460C             MOV      R4,R1
   \        0xA   0x4691             MOV      R9,R2
   1199              int ret;
   1200              size_t i, j;
   1201              mbedtls_mpi TA, TB;
   1202          
   1203              mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );
   \        0xC   0xA803             ADD      R0,SP,#+12
   \        0xE   0x....'....        BL       mbedtls_mpi_init
   \       0x12   0x4668             MOV      R0,SP
   \       0x14   0x....'....        BL       mbedtls_mpi_init
   1204          
   1205              if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
   \       0x18   0x42A7             CMP      R7,R4
   \       0x1A   0xD107             BNE.N    ??mbedtls_mpi_mul_mpi_0
   \       0x1C   0x4621             MOV      R1,R4
   \       0x1E   0xA803             ADD      R0,SP,#+12
   \       0x20   0x....'....        BL       mbedtls_mpi_copy
   \       0x24   0x4682             MOV      R10,R0
   \       0x26   0x2800             CMP      R0,#+0
   \       0x28   0xD137             BNE.N    ??mbedtls_mpi_mul_mpi_1
   \       0x2A   0xAC03             ADD      R4,SP,#+12
   1206              if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
   \                     ??mbedtls_mpi_mul_mpi_0: (+1)
   \       0x2C   0x454F             CMP      R7,R9
   \       0x2E   0xD107             BNE.N    ??mbedtls_mpi_mul_mpi_2
   \       0x30   0x4649             MOV      R1,R9
   \       0x32   0x4668             MOV      R0,SP
   \       0x34   0x....'....        BL       mbedtls_mpi_copy
   \       0x38   0x4682             MOV      R10,R0
   \       0x3A   0x2800             CMP      R0,#+0
   \       0x3C   0xD12D             BNE.N    ??mbedtls_mpi_mul_mpi_1
   \       0x3E   0x46E9             MOV      R9,SP
   1207          
   1208              for( i = A->n; i > 0; i-- )
   \                     ??mbedtls_mpi_mul_mpi_2: (+1)
   \       0x40   0x6861             LDR      R1,[R4, #+4]
   \                     ??mbedtls_mpi_mul_mpi_3: (+1)
   \       0x42   0x2900             CMP      R1,#+0
   \       0x44   0xD033             BEQ.N    ??mbedtls_mpi_mul_mpi_4
   1209                  if( A->p[i - 1] != 0 )
   \       0x46   0x68A0             LDR      R0,[R4, #+8]
   \       0x48   0xEB00 0x0081      ADD      R0,R0,R1, LSL #+2
   \       0x4C   0xF850 0x0C04      LDR      R0,[R0, #-4]
   \       0x50   0x2800             CMP      R0,#+0
   \       0x52   0xD12C             BNE.N    ??mbedtls_mpi_mul_mpi_4
   \       0x54   0x1E49             SUBS     R1,R1,#+1
   \       0x56   0xE7F4             B.N      ??mbedtls_mpi_mul_mpi_3
   1210                      break;
   1211          
   1212              for( j = B->n; j > 0; j-- )
   1213                  if( B->p[j - 1] != 0 )
   \                     ??mbedtls_mpi_mul_mpi_5: (+1)
   \       0x58   0xF8D9 0x0008      LDR      R0,[R9, #+8]
   \       0x5C   0xEB00 0x0084      ADD      R0,R0,R4, LSL #+2
   \       0x60   0xF850 0x0C04      LDR      R0,[R0, #-4]
   \       0x64   0x2800             CMP      R0,#+0
   \       0x66   0xD128             BNE.N    ??mbedtls_mpi_mul_mpi_6
   \       0x68   0x1E64             SUBS     R4,R4,#+1
   \       0x6A   0xE024             B.N      ??mbedtls_mpi_mul_mpi_7
   1214                      break;
   1215          
   1216              MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
   1217              MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
   1218          
   1219              for( ; j > 0; j-- )
   1220                  mpi_mul_hlp( i, A->p, X->p + j - 1, B->p[j - 1] );
   \                     ??mbedtls_mpi_mul_mpi_8: (+1)
   \       0x6C   0xF8D9 0x0008      LDR      R0,[R9, #+8]
   \       0x70   0xEB00 0x0084      ADD      R0,R0,R4, LSL #+2
   \       0x74   0xF850 0x3C04      LDR      R3,[R0, #-4]
   \       0x78   0x68B8             LDR      R0,[R7, #+8]
   \       0x7A   0xEB00 0x0084      ADD      R0,R0,R4, LSL #+2
   \       0x7E   0x1F02             SUBS     R2,R0,#+4
   \       0x80   0xF8D8 0x1008      LDR      R1,[R8, #+8]
   \       0x84   0x4658             MOV      R0,R11
   \       0x86   0x....'....        BL       mpi_mul_hlp
   \       0x8A   0x1E64             SUBS     R4,R4,#+1
   \                     ??mbedtls_mpi_mul_mpi_9: (+1)
   \       0x8C   0xD1EE             BNE.N    ??mbedtls_mpi_mul_mpi_8
   1221          
   1222              X->s = A->s * B->s;
   \       0x8E   0xF8D8 0x1000      LDR      R1,[R8, #+0]
   \       0x92   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \       0x96   0x4341             MULS     R1,R0,R1
   \       0x98   0x6039             STR      R1,[R7, #+0]
   1223          
   1224          cleanup:
   1225          
   1226              mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TA );
   \                     ??mbedtls_mpi_mul_mpi_1: (+1)
   \       0x9A   0x4668             MOV      R0,SP
   \       0x9C   0x....'....        BL       mbedtls_mpi_free
   \       0xA0   0xA803             ADD      R0,SP,#+12
   \       0xA2   0x....'....        BL       mbedtls_mpi_free
   1227          
   1228              return( ret );
   \       0xA6   0x4650             MOV      R0,R10
   \       0xA8   0xB007             ADD      SP,SP,#+28
   \       0xAA   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   \                     ??mbedtls_mpi_mul_mpi_4: (+1)
   \       0xAE   0x4625             MOV      R5,R4
   \       0xB0   0x460E             MOV      R6,R1
   \       0xB2   0xF8D9 0x4004      LDR      R4,[R9, #+4]
   \                     ??mbedtls_mpi_mul_mpi_7: (+1)
   \       0xB6   0x2C00             CMP      R4,#+0
   \       0xB8   0xD1CE             BNE.N    ??mbedtls_mpi_mul_mpi_5
   \                     ??mbedtls_mpi_mul_mpi_6: (+1)
   \       0xBA   0x19A1             ADDS     R1,R4,R6
   \       0xBC   0x4638             MOV      R0,R7
   \       0xBE   0x....'....        BL       mbedtls_mpi_grow
   \       0xC2   0x4682             MOV      R10,R0
   \       0xC4   0x2800             CMP      R0,#+0
   \       0xC6   0xD1E8             BNE.N    ??mbedtls_mpi_mul_mpi_1
   \       0xC8   0x2100             MOVS     R1,#+0
   \       0xCA   0x4638             MOV      R0,R7
   \       0xCC   0x....'....        BL       mbedtls_mpi_lset
   \       0xD0   0x4682             MOV      R10,R0
   \       0xD2   0x2800             CMP      R0,#+0
   \       0xD4   0xD1E1             BNE.N    ??mbedtls_mpi_mul_mpi_1
   \       0xD6   0x46A8             MOV      R8,R5
   \       0xD8   0x46B3             MOV      R11,R6
   \       0xDA   0x2C00             CMP      R4,#+0
   \       0xDC   0xE7D6             B.N      ??mbedtls_mpi_mul_mpi_9
   1229          }
   1230          
   1231          /*
   1232           * Baseline multiplication: X = A * b
   1233           */

   \                                 In section .text, align 2, keep-with-next
   1234          int mbedtls_mpi_mul_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_uint b )
   1235          {
   \                     mbedtls_mpi_mul_int: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   1236              mbedtls_mpi _B;
   1237              mbedtls_mpi_uint p[1];
   1238          
   1239              _B.s = 1;
   \        0x2   0x2301             MOVS     R3,#+1
   \        0x4   0x9301             STR      R3,[SP, #+4]
   1240              _B.n = 1;
   \        0x6   0x9302             STR      R3,[SP, #+8]
   1241              _B.p = p;
   \        0x8   0x466B             MOV      R3,SP
   \        0xA   0x9303             STR      R3,[SP, #+12]
   1242              p[0] = b;
   \        0xC   0x9200             STR      R2,[SP, #+0]
   1243          
   1244              return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
   \        0xE   0xAA01             ADD      R2,SP,#+4
   \       0x10   0x....'....        BL       mbedtls_mpi_mul_mpi
   \       0x14   0xB005             ADD      SP,SP,#+20
   \       0x16   0xBD00             POP      {PC}             ;; return
   1245          }
   1246          
   1247          /*
   1248           * Unsigned integer divide - double mbedtls_mpi_uint dividend, u1/u0, and
   1249           * mbedtls_mpi_uint divisor, d
   1250           */

   \                                 In section .text, align 2, keep-with-next
   1251          static mbedtls_mpi_uint mbedtls_int_div_int( mbedtls_mpi_uint u1,
   1252                      mbedtls_mpi_uint u0, mbedtls_mpi_uint d, mbedtls_mpi_uint *r )
   1253          {
   \                     mbedtls_int_div_int: (+1)
   \        0x0   0xE92D 0x4350      PUSH     {R4,R6,R8,R9,LR}
   \        0x4   0x4616             MOV      R6,R2
   \        0x6   0x461C             MOV      R4,R3
   1254          #if defined(MBEDTLS_HAVE_UDBL)
   1255              mbedtls_t_udbl dividend, quotient;
   1256          #else
   1257              const mbedtls_mpi_uint radix = (mbedtls_mpi_uint) 1 << biH;
   1258              const mbedtls_mpi_uint uint_halfword_mask = ( (mbedtls_mpi_uint) 1 << biH ) - 1;
   1259              mbedtls_mpi_uint d0, d1, q0, q1, rAX, r0, quotient;
   1260              mbedtls_mpi_uint u0_msw, u0_lsw;
   1261              size_t s;
   1262          #endif
   1263          
   1264              /*
   1265               * Check for overflow
   1266               */
   1267              if( 0 == d || u1 >= d )
   \        0x8   0x2E00             CMP      R6,#+0
   \        0xA   0xD001             BEQ.N    ??mbedtls_int_div_int_0
   \        0xC   0x42B0             CMP      R0,R6
   \        0xE   0xD307             BCC.N    ??mbedtls_int_div_int_1
   1268              {
   1269                  if (r != NULL) *r = ~0;
   \                     ??mbedtls_int_div_int_0: (+1)
   \       0x10   0x2C00             CMP      R4,#+0
   \       0x12   0xD002             BEQ.N    ??mbedtls_int_div_int_2
   \       0x14   0xF04F 0x30FF      MOV      R0,#-1
   \       0x18   0x6020             STR      R0,[R4, #+0]
   1270          
   1271                  return ( ~0 );
   \                     ??mbedtls_int_div_int_2: (+1)
   \       0x1A   0xF04F 0x30FF      MOV      R0,#-1
   \       0x1E   0xE016             B.N      ??mbedtls_int_div_int_3
   1272              }
   1273          
   1274          #if defined(MBEDTLS_HAVE_UDBL)
   1275              dividend  = (mbedtls_t_udbl) u1 << biL;
   1276              dividend |= (mbedtls_t_udbl) u0;
   \                     ??mbedtls_int_div_int_1: (+1)
   \       0x20   0x4681             MOV      R9,R0
   \       0x22   0x4688             MOV      R8,R1
   1277              quotient = dividend / d;
   \       0x24   0x4640             MOV      R0,R8
   \       0x26   0x4649             MOV      R1,R9
   \       0x28   0x2300             MOVS     R3,#+0
   \       0x2A   0x....'....        BL       __aeabi_uldivmod
   1278              if( quotient > ( (mbedtls_t_udbl) 1 << biL ) - 1 )
   \       0x2E   0x2200             MOVS     R2,#+0
   \       0x30   0x2301             MOVS     R3,#+1
   \       0x32   0x4299             CMP      R1,R3
   \       0x34   0xD304             BCC.N    ??mbedtls_int_div_int_4
   \       0x36   0xD801             BHI.N    ??mbedtls_int_div_int_5
   \       0x38   0x4290             CMP      R0,R2
   \       0x3A   0xD301             BCC.N    ??mbedtls_int_div_int_4
   1279                  quotient = ( (mbedtls_t_udbl) 1 << biL ) - 1;
   \                     ??mbedtls_int_div_int_5: (+1)
   \       0x3C   0xF04F 0x30FF      MOV      R0,#-1
   1280          
   1281              if( r != NULL )
   \                     ??mbedtls_int_div_int_4: (+1)
   \       0x40   0x2C00             CMP      R4,#+0
   \       0x42   0xD004             BEQ.N    ??mbedtls_int_div_int_3
   1282                  *r = (mbedtls_mpi_uint)( dividend - (quotient * d ) );
   \       0x44   0xFBA6 0x2300      UMULL    R2,R3,R6,R0
   \       0x48   0xEBA8 0x0202      SUB      R2,R8,R2
   \       0x4C   0x6022             STR      R2,[R4, #+0]
   1283          
   1284              return (mbedtls_mpi_uint) quotient;
   \                     ??mbedtls_int_div_int_3: (+1)
   \       0x4E   0xE8BD 0x8350      POP      {R4,R6,R8,R9,PC}  ;; return
   1285          #else
   1286          
   1287              /*
   1288               * Algorithm D, Section 4.3.1 - The Art of Computer Programming
   1289               *   Vol. 2 - Seminumerical Algorithms, Knuth
   1290               */
   1291          
   1292              /*
   1293               * Normalize the divisor, d, and dividend, u0, u1
   1294               */
   1295              s = mbedtls_clz( d );
   1296              d = d << s;
   1297          
   1298              u1 = u1 << s;
   1299              u1 |= ( u0 >> ( biL - s ) ) & ( -(mbedtls_mpi_sint)s >> ( biL - 1 ) );
   1300              u0 =  u0 << s;
   1301          
   1302              d1 = d >> biH;
   1303              d0 = d & uint_halfword_mask;
   1304          
   1305              u0_msw = u0 >> biH;
   1306              u0_lsw = u0 & uint_halfword_mask;
   1307          
   1308              /*
   1309               * Find the first quotient and remainder
   1310               */
   1311              q1 = u1 / d1;
   1312              r0 = u1 - d1 * q1;
   1313          
   1314              while( q1 >= radix || ( q1 * d0 > radix * r0 + u0_msw ) )
   1315              {
   1316                  q1 -= 1;
   1317                  r0 += d1;
   1318          
   1319                  if ( r0 >= radix ) break;
   1320              }
   1321          
   1322              rAX = ( u1 * radix ) + ( u0_msw - q1 * d );
   1323              q0 = rAX / d1;
   1324              r0 = rAX - q0 * d1;
   1325          
   1326              while( q0 >= radix || ( q0 * d0 > radix * r0 + u0_lsw ) )
   1327              {
   1328                  q0 -= 1;
   1329                  r0 += d1;
   1330          
   1331                  if ( r0 >= radix ) break;
   1332              }
   1333          
   1334              if (r != NULL)
   1335                  *r = ( rAX * radix + u0_lsw - q0 * d ) >> s;
   1336          
   1337              quotient = q1 * radix + q0;
   1338          
   1339              return quotient;
   1340          #endif
   1341          }
   1342          
   1343          /*
   1344           * Division by mbedtls_mpi: A = Q * B + R  (HAC 14.20)
   1345           */

   \                                 In section .text, align 2, keep-with-next
   1346          int mbedtls_mpi_div_mpi( mbedtls_mpi *Q, mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
   1347          {
   \                     mbedtls_mpi_div_mpi: (+1)
   \        0x0   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \        0x4   0xB08F             SUB      SP,SP,#+60
   \        0x6   0x4606             MOV      R6,R0
   \        0x8   0x460F             MOV      R7,R1
   \        0xA   0x4690             MOV      R8,R2
   \        0xC   0x4699             MOV      R9,R3
   1348              int ret;
   1349              size_t i, n, t, k;
   1350              mbedtls_mpi X, Y, Z, T1, T2;
   1351          
   1352              if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
   \        0xE   0x2100             MOVS     R1,#+0
   \       0x10   0x4648             MOV      R0,R9
   \       0x12   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x16   0x2800             CMP      R0,#+0
   \       0x18   0xD102             BNE.N    ??mbedtls_mpi_div_mpi_0
   1353                  return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
   \       0x1A   0xF06F 0x000B      MVN      R0,#+11
   \       0x1E   0xE1AF             B.N      ??mbedtls_mpi_div_mpi_1
   1354          
   1355              mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
   \                     ??mbedtls_mpi_div_mpi_0: (+1)
   \       0x20   0x4668             MOV      R0,SP
   \       0x22   0x....'....        BL       mbedtls_mpi_init
   \       0x26   0xA806             ADD      R0,SP,#+24
   \       0x28   0x....'....        BL       mbedtls_mpi_init
   \       0x2C   0xA803             ADD      R0,SP,#+12
   \       0x2E   0x....'....        BL       mbedtls_mpi_init
   1356              mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );
   \       0x32   0xA809             ADD      R0,SP,#+36
   \       0x34   0x....'....        BL       mbedtls_mpi_init
   \       0x38   0xA80C             ADD      R0,SP,#+48
   \       0x3A   0x....'....        BL       mbedtls_mpi_init
   1357          
   1358              if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
   \       0x3E   0x4649             MOV      R1,R9
   \       0x40   0x4640             MOV      R0,R8
   \       0x42   0x....'....        BL       mbedtls_mpi_cmp_abs
   \       0x46   0x2800             CMP      R0,#+0
   \       0x48   0xD515             BPL.N    ??mbedtls_mpi_div_mpi_2
   1359              {
   1360                  if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
   \       0x4A   0x2E00             CMP      R6,#+0
   \       0x4C   0xD007             BEQ.N    ??mbedtls_mpi_div_mpi_3
   \       0x4E   0x2100             MOVS     R1,#+0
   \       0x50   0x4630             MOV      R0,R6
   \       0x52   0x....'....        BL       mbedtls_mpi_lset
   \       0x56   0x4683             MOV      R11,R0
   \       0x58   0x2800             CMP      R0,#+0
   \       0x5A   0xF040 0x8181      BNE.W    ??mbedtls_mpi_div_mpi_4
   1361                  if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
   \                     ??mbedtls_mpi_div_mpi_3: (+1)
   \       0x5E   0x2F00             CMP      R7,#+0
   \       0x60   0xD007             BEQ.N    ??mbedtls_mpi_div_mpi_5
   \       0x62   0x4641             MOV      R1,R8
   \       0x64   0x4638             MOV      R0,R7
   \       0x66   0x....'....        BL       mbedtls_mpi_copy
   \       0x6A   0x4683             MOV      R11,R0
   \       0x6C   0x2800             CMP      R0,#+0
   \       0x6E   0xF040 0x8177      BNE.W    ??mbedtls_mpi_div_mpi_4
   1362                  return( 0 );
   \                     ??mbedtls_mpi_div_mpi_5: (+1)
   \       0x72   0x2000             MOVS     R0,#+0
   \       0x74   0xE184             B.N      ??mbedtls_mpi_div_mpi_1
   1363              }
   1364          
   1365              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
   \                     ??mbedtls_mpi_div_mpi_2: (+1)
   \       0x76   0x4641             MOV      R1,R8
   \       0x78   0x4668             MOV      R0,SP
   \       0x7A   0x....'....        BL       mbedtls_mpi_copy
   \       0x7E   0x4683             MOV      R11,R0
   \       0x80   0x2800             CMP      R0,#+0
   \       0x82   0xF040 0x816D      BNE.W    ??mbedtls_mpi_div_mpi_4
   1366              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
   \       0x86   0x4649             MOV      R1,R9
   \       0x88   0xA806             ADD      R0,SP,#+24
   \       0x8A   0x....'....        BL       mbedtls_mpi_copy
   \       0x8E   0x4683             MOV      R11,R0
   \       0x90   0x2800             CMP      R0,#+0
   \       0x92   0xF040 0x8165      BNE.W    ??mbedtls_mpi_div_mpi_4
   1367              X.s = Y.s = 1;
   \       0x96   0x2001             MOVS     R0,#+1
   \       0x98   0x9006             STR      R0,[SP, #+24]
   \       0x9A   0x9000             STR      R0,[SP, #+0]
   1368          
   1369              MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
   \       0x9C   0xF8D8 0x1004      LDR      R1,[R8, #+4]
   \       0xA0   0x1C89             ADDS     R1,R1,#+2
   \       0xA2   0xA803             ADD      R0,SP,#+12
   \       0xA4   0x....'....        BL       mbedtls_mpi_grow
   \       0xA8   0x4683             MOV      R11,R0
   \       0xAA   0x2800             CMP      R0,#+0
   \       0xAC   0xF040 0x8158      BNE.W    ??mbedtls_mpi_div_mpi_4
   1370              MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
   \       0xB0   0x2100             MOVS     R1,#+0
   \       0xB2   0xA803             ADD      R0,SP,#+12
   \       0xB4   0x....'....        BL       mbedtls_mpi_lset
   \       0xB8   0x4683             MOV      R11,R0
   \       0xBA   0x2800             CMP      R0,#+0
   \       0xBC   0xF040 0x8150      BNE.W    ??mbedtls_mpi_div_mpi_4
   1371              MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, 2 ) );
   \       0xC0   0x2102             MOVS     R1,#+2
   \       0xC2   0xA809             ADD      R0,SP,#+36
   \       0xC4   0x....'....        BL       mbedtls_mpi_grow
   \       0xC8   0x4683             MOV      R11,R0
   \       0xCA   0x2800             CMP      R0,#+0
   \       0xCC   0xF040 0x8148      BNE.W    ??mbedtls_mpi_div_mpi_4
   1372              MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );
   \       0xD0   0x2103             MOVS     R1,#+3
   \       0xD2   0xA80C             ADD      R0,SP,#+48
   \       0xD4   0x....'....        BL       mbedtls_mpi_grow
   \       0xD8   0x4683             MOV      R11,R0
   \       0xDA   0x2800             CMP      R0,#+0
   \       0xDC   0xF040 0x8140      BNE.W    ??mbedtls_mpi_div_mpi_4
   1373          
   1374              k = mbedtls_mpi_bitlen( &Y ) % biL;
   \       0xE0   0xA806             ADD      R0,SP,#+24
   \       0xE2   0x....'....        BL       mbedtls_mpi_bitlen
   \       0xE6   0xF000 0x001F      AND      R0,R0,#0x1F
   1375              if( k < biL - 1 )
   \       0xEA   0x281F             CMP      R0,#+31
   \       0xEC   0xD213             BCS.N    ??mbedtls_mpi_div_mpi_6
   1376              {
   1377                  k = biL - 1 - k;
   \       0xEE   0xF1C0 0x001F      RSB      R0,R0,#+31
   \       0xF2   0x4682             MOV      R10,R0
   1378                  MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
   \       0xF4   0x4651             MOV      R1,R10
   \       0xF6   0x4668             MOV      R0,SP
   \       0xF8   0x....'....        BL       mbedtls_mpi_shift_l
   \       0xFC   0x4683             MOV      R11,R0
   \       0xFE   0x2800             CMP      R0,#+0
   \      0x100   0xF040 0x812E      BNE.W    ??mbedtls_mpi_div_mpi_4
   1379                  MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
   \      0x104   0x4651             MOV      R1,R10
   \      0x106   0xA806             ADD      R0,SP,#+24
   \      0x108   0x....'....        BL       mbedtls_mpi_shift_l
   \      0x10C   0x4683             MOV      R11,R0
   \      0x10E   0x2800             CMP      R0,#+0
   \      0x110   0xF040 0x8126      BNE.W    ??mbedtls_mpi_div_mpi_4
   \      0x114   0xE001             B.N      ??mbedtls_mpi_div_mpi_7
   1380              }
   1381              else k = 0;
   \                     ??mbedtls_mpi_div_mpi_6: (+1)
   \      0x116   0xF04F 0x0A00      MOV      R10,#+0
   1382          
   1383              n = X.n - 1;
   \                     ??mbedtls_mpi_div_mpi_7: (+1)
   \      0x11A   0x9C01             LDR      R4,[SP, #+4]
   \      0x11C   0x1E64             SUBS     R4,R4,#+1
   1384              t = Y.n - 1;
   \      0x11E   0x9D07             LDR      R5,[SP, #+28]
   \      0x120   0x1E6D             SUBS     R5,R5,#+1
   1385              MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
   \      0x122   0x1B61             SUBS     R1,R4,R5
   \      0x124   0x0149             LSLS     R1,R1,#+5
   \      0x126   0xA806             ADD      R0,SP,#+24
   \      0x128   0x....'....        BL       mbedtls_mpi_shift_l
   \      0x12C   0x4683             MOV      R11,R0
   \      0x12E   0x2800             CMP      R0,#+0
   \      0x130   0xF040 0x8116      BNE.W    ??mbedtls_mpi_div_mpi_4
   1386          
   1387              while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
   \                     ??mbedtls_mpi_div_mpi_8: (+1)
   \      0x134   0xA906             ADD      R1,SP,#+24
   \      0x136   0x4668             MOV      R0,SP
   \      0x138   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \      0x13C   0x2800             CMP      R0,#+0
   \      0x13E   0xF100 0x8122      BMI.W    ??mbedtls_mpi_div_mpi_9
   1388              {
   1389                  Z.p[n - t]++;
   \      0x142   0x9805             LDR      R0,[SP, #+20]
   \      0x144   0x1B61             SUBS     R1,R4,R5
   \      0x146   0x4602             MOV      R2,R0
   \      0x148   0x1B63             SUBS     R3,R4,R5
   \      0x14A   0xF852 0x2023      LDR      R2,[R2, R3, LSL #+2]
   \      0x14E   0x1C52             ADDS     R2,R2,#+1
   \      0x150   0xF840 0x2021      STR      R2,[R0, R1, LSL #+2]
   1390                  MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
   \      0x154   0xAA06             ADD      R2,SP,#+24
   \      0x156   0x4669             MOV      R1,SP
   \      0x158   0x4668             MOV      R0,SP
   \      0x15A   0x....'....        BL       mbedtls_mpi_sub_mpi
   \      0x15E   0x2800             CMP      R0,#+0
   \      0x160   0xD0E8             BEQ.N    ??mbedtls_mpi_div_mpi_8
   \                     ??mbedtls_mpi_div_mpi_10: (+1)
   \      0x162   0x4683             MOV      R11,R0
   \      0x164   0xE0FC             B.N      ??mbedtls_mpi_div_mpi_4
   1391              }
   1392              MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
   1393          
   1394              for( i = n; i > t ; i-- )
   1395              {
   1396                  if( X.p[i] >= Y.p[t] )
   1397                      Z.p[i - t - 1] = ~0;
   1398                  else
   1399                  {
   1400                      Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
   1401                                                                      Y.p[t], NULL);
   1402                  }
   1403          
   1404                  Z.p[i - t - 1]++;
   1405                  do
   1406                  {
   1407                      Z.p[i - t - 1]--;
   1408          
   1409                      MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
   1410                      T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
   1411                      T1.p[1] = Y.p[t];
   1412                      MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
   1413          
   1414                      MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
   1415                      T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
   1416                      T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
   \                     ??mbedtls_mpi_div_mpi_11: (+1)
   \      0x166   0x9802             LDR      R0,[SP, #+8]
   \      0x168   0xEB00 0x0084      ADD      R0,R0,R4, LSL #+2
   \      0x16C   0xF850 0x0C04      LDR      R0,[R0, #-4]
   \      0x170   0xE072             B.N      ??mbedtls_mpi_div_mpi_12
   \                     ??mbedtls_mpi_div_mpi_13: (+1)
   \      0x172   0x9802             LDR      R0,[SP, #+8]
   \      0x174   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \      0x178   0x9908             LDR      R1,[SP, #+32]
   \      0x17A   0xF851 0x1025      LDR      R1,[R1, R5, LSL #+2]
   \      0x17E   0x4288             CMP      R0,R1
   \      0x180   0xD308             BCC.N    ??mbedtls_mpi_div_mpi_14
   \      0x182   0x9805             LDR      R0,[SP, #+20]
   \      0x184   0x1B61             SUBS     R1,R4,R5
   \      0x186   0xEB00 0x0081      ADD      R0,R0,R1, LSL #+2
   \      0x18A   0xF04F 0x31FF      MOV      R1,#-1
   \      0x18E   0xF840 0x1C04      STR      R1,[R0, #-4]
   \      0x192   0xE011             B.N      ??mbedtls_mpi_div_mpi_15
   \                     ??mbedtls_mpi_div_mpi_14: (+1)
   \      0x194   0x2300             MOVS     R3,#+0
   \      0x196   0x460A             MOV      R2,R1
   \      0x198   0x9802             LDR      R0,[SP, #+8]
   \      0x19A   0xEB00 0x0084      ADD      R0,R0,R4, LSL #+2
   \      0x19E   0xF850 0x1C04      LDR      R1,[R0, #-4]
   \      0x1A2   0x9802             LDR      R0,[SP, #+8]
   \      0x1A4   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \      0x1A8   0x....'....        BL       mbedtls_int_div_int
   \      0x1AC   0x9905             LDR      R1,[SP, #+20]
   \      0x1AE   0x1B62             SUBS     R2,R4,R5
   \      0x1B0   0xEB01 0x0182      ADD      R1,R1,R2, LSL #+2
   \      0x1B4   0xF841 0x0C04      STR      R0,[R1, #-4]
   \                     ??mbedtls_mpi_div_mpi_15: (+1)
   \      0x1B8   0x9805             LDR      R0,[SP, #+20]
   \      0x1BA   0x1B61             SUBS     R1,R4,R5
   \      0x1BC   0xEB00 0x0081      ADD      R0,R0,R1, LSL #+2
   \      0x1C0   0x9905             LDR      R1,[SP, #+20]
   \      0x1C2   0x1B62             SUBS     R2,R4,R5
   \      0x1C4   0xEB01 0x0182      ADD      R1,R1,R2, LSL #+2
   \      0x1C8   0xF851 0x1C04      LDR      R1,[R1, #-4]
   \      0x1CC   0x1C49             ADDS     R1,R1,#+1
   \      0x1CE   0xF840 0x1C04      STR      R1,[R0, #-4]
   \                     ??mbedtls_mpi_div_mpi_16: (+1)
   \      0x1D2   0x9805             LDR      R0,[SP, #+20]
   \      0x1D4   0x1B61             SUBS     R1,R4,R5
   \      0x1D6   0xEB00 0x0081      ADD      R0,R0,R1, LSL #+2
   \      0x1DA   0x9905             LDR      R1,[SP, #+20]
   \      0x1DC   0x1B62             SUBS     R2,R4,R5
   \      0x1DE   0xEB01 0x0182      ADD      R1,R1,R2, LSL #+2
   \      0x1E2   0xF851 0x1C04      LDR      R1,[R1, #-4]
   \      0x1E6   0x1E49             SUBS     R1,R1,#+1
   \      0x1E8   0xF840 0x1C04      STR      R1,[R0, #-4]
   \      0x1EC   0x2100             MOVS     R1,#+0
   \      0x1EE   0xA809             ADD      R0,SP,#+36
   \      0x1F0   0x....'....        BL       mbedtls_mpi_lset
   \      0x1F4   0x2800             CMP      R0,#+0
   \      0x1F6   0xD1B4             BNE.N    ??mbedtls_mpi_div_mpi_10
   \      0x1F8   0x2D00             CMP      R5,#+0
   \      0x1FA   0xD101             BNE.N    ??mbedtls_mpi_div_mpi_17
   \      0x1FC   0x2000             MOVS     R0,#+0
   \      0x1FE   0xE004             B.N      ??mbedtls_mpi_div_mpi_18
   \                     ??mbedtls_mpi_div_mpi_17: (+1)
   \      0x200   0x9808             LDR      R0,[SP, #+32]
   \      0x202   0xEB00 0x0085      ADD      R0,R0,R5, LSL #+2
   \      0x206   0xF850 0x0C04      LDR      R0,[R0, #-4]
   \                     ??mbedtls_mpi_div_mpi_18: (+1)
   \      0x20A   0x990B             LDR      R1,[SP, #+44]
   \      0x20C   0x6008             STR      R0,[R1, #+0]
   \      0x20E   0x9808             LDR      R0,[SP, #+32]
   \      0x210   0xF850 0x0025      LDR      R0,[R0, R5, LSL #+2]
   \      0x214   0x990B             LDR      R1,[SP, #+44]
   \      0x216   0x6048             STR      R0,[R1, #+4]
   \      0x218   0x9805             LDR      R0,[SP, #+20]
   \      0x21A   0x1B61             SUBS     R1,R4,R5
   \      0x21C   0xEB00 0x0081      ADD      R0,R0,R1, LSL #+2
   \      0x220   0xF850 0x2C04      LDR      R2,[R0, #-4]
   \      0x224   0xA909             ADD      R1,SP,#+36
   \      0x226   0xA809             ADD      R0,SP,#+36
   \      0x228   0x....'....        BL       mbedtls_mpi_mul_int
   \      0x22C   0x2800             CMP      R0,#+0
   \      0x22E   0xD198             BNE.N    ??mbedtls_mpi_div_mpi_10
   \      0x230   0x2100             MOVS     R1,#+0
   \      0x232   0xA80C             ADD      R0,SP,#+48
   \      0x234   0x....'....        BL       mbedtls_mpi_lset
   \      0x238   0x2800             CMP      R0,#+0
   \      0x23A   0xD192             BNE.N    ??mbedtls_mpi_div_mpi_10
   \      0x23C   0x2C02             CMP      R4,#+2
   \      0x23E   0xD201             BCS.N    ??mbedtls_mpi_div_mpi_19
   \      0x240   0x2000             MOVS     R0,#+0
   \      0x242   0xE004             B.N      ??mbedtls_mpi_div_mpi_20
   \                     ??mbedtls_mpi_div_mpi_19: (+1)
   \      0x244   0x9802             LDR      R0,[SP, #+8]
   \      0x246   0xEB00 0x0084      ADD      R0,R0,R4, LSL #+2
   \      0x24A   0xF850 0x0C08      LDR      R0,[R0, #-8]
   \                     ??mbedtls_mpi_div_mpi_20: (+1)
   \      0x24E   0x990E             LDR      R1,[SP, #+56]
   \      0x250   0x6008             STR      R0,[R1, #+0]
   \      0x252   0x2C00             CMP      R4,#+0
   \      0x254   0xD187             BNE.N    ??mbedtls_mpi_div_mpi_11
   \      0x256   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_mpi_div_mpi_12: (+1)
   \      0x258   0x990E             LDR      R1,[SP, #+56]
   \      0x25A   0x6048             STR      R0,[R1, #+4]
   1417                      T2.p[2] = X.p[i];
   \      0x25C   0x9802             LDR      R0,[SP, #+8]
   \      0x25E   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \      0x262   0x990E             LDR      R1,[SP, #+56]
   \      0x264   0x6088             STR      R0,[R1, #+8]
   1418                  }
   1419                  while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
   \      0x266   0xA90C             ADD      R1,SP,#+48
   \      0x268   0xA809             ADD      R0,SP,#+36
   \      0x26A   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \      0x26E   0x2801             CMP      R0,#+1
   \      0x270   0xDAAF             BGE.N    ??mbedtls_mpi_div_mpi_16
   1420          
   1421                  MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
   \      0x272   0x9805             LDR      R0,[SP, #+20]
   \      0x274   0x1B61             SUBS     R1,R4,R5
   \      0x276   0xEB00 0x0081      ADD      R0,R0,R1, LSL #+2
   \      0x27A   0xF850 0x2C04      LDR      R2,[R0, #-4]
   \      0x27E   0xA906             ADD      R1,SP,#+24
   \      0x280   0xA809             ADD      R0,SP,#+36
   \      0x282   0x....'....        BL       mbedtls_mpi_mul_int
   \      0x286   0x4683             MOV      R11,R0
   \      0x288   0x2800             CMP      R0,#+0
   \      0x28A   0xD169             BNE.N    ??mbedtls_mpi_div_mpi_4
   1422                  MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
   \      0x28C   0x1B61             SUBS     R1,R4,R5
   \      0x28E   0x1E49             SUBS     R1,R1,#+1
   \      0x290   0x0149             LSLS     R1,R1,#+5
   \      0x292   0xA809             ADD      R0,SP,#+36
   \      0x294   0x....'....        BL       mbedtls_mpi_shift_l
   \      0x298   0x4683             MOV      R11,R0
   \      0x29A   0x2800             CMP      R0,#+0
   \      0x29C   0xD160             BNE.N    ??mbedtls_mpi_div_mpi_4
   1423                  MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
   \      0x29E   0xAA09             ADD      R2,SP,#+36
   \      0x2A0   0x4669             MOV      R1,SP
   \      0x2A2   0x4668             MOV      R0,SP
   \      0x2A4   0x....'....        BL       mbedtls_mpi_sub_mpi
   \      0x2A8   0x4683             MOV      R11,R0
   \      0x2AA   0x2800             CMP      R0,#+0
   \      0x2AC   0xD158             BNE.N    ??mbedtls_mpi_div_mpi_4
   1424          
   1425                  if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )
   \      0x2AE   0x2100             MOVS     R1,#+0
   \      0x2B0   0x4668             MOV      R0,SP
   \      0x2B2   0x....'....        BL       mbedtls_mpi_cmp_int
   \      0x2B6   0x2800             CMP      R0,#+0
   \      0x2B8   0xD524             BPL.N    ??mbedtls_mpi_div_mpi_21
   1426                  {
   1427                      MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
   \      0x2BA   0xA906             ADD      R1,SP,#+24
   \      0x2BC   0xA809             ADD      R0,SP,#+36
   \      0x2BE   0x....'....        BL       mbedtls_mpi_copy
   \      0x2C2   0x4683             MOV      R11,R0
   \      0x2C4   0x2800             CMP      R0,#+0
   \      0x2C6   0xD14B             BNE.N    ??mbedtls_mpi_div_mpi_4
   1428                      MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
   \      0x2C8   0x1B61             SUBS     R1,R4,R5
   \      0x2CA   0x1E49             SUBS     R1,R1,#+1
   \      0x2CC   0x0149             LSLS     R1,R1,#+5
   \      0x2CE   0xA809             ADD      R0,SP,#+36
   \      0x2D0   0x....'....        BL       mbedtls_mpi_shift_l
   \      0x2D4   0x4683             MOV      R11,R0
   \      0x2D6   0x2800             CMP      R0,#+0
   \      0x2D8   0xD142             BNE.N    ??mbedtls_mpi_div_mpi_4
   1429                      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
   \      0x2DA   0xAA09             ADD      R2,SP,#+36
   \      0x2DC   0x4669             MOV      R1,SP
   \      0x2DE   0x4668             MOV      R0,SP
   \      0x2E0   0x....'....        BL       mbedtls_mpi_add_mpi
   \      0x2E4   0x4683             MOV      R11,R0
   \      0x2E6   0x2800             CMP      R0,#+0
   \      0x2E8   0xD13A             BNE.N    ??mbedtls_mpi_div_mpi_4
   1430                      Z.p[i - t - 1]--;
   \      0x2EA   0x9805             LDR      R0,[SP, #+20]
   \      0x2EC   0x1B61             SUBS     R1,R4,R5
   \      0x2EE   0xEB00 0x0081      ADD      R0,R0,R1, LSL #+2
   \      0x2F2   0x9905             LDR      R1,[SP, #+20]
   \      0x2F4   0x1B62             SUBS     R2,R4,R5
   \      0x2F6   0xEB01 0x0182      ADD      R1,R1,R2, LSL #+2
   \      0x2FA   0xF851 0x1C04      LDR      R1,[R1, #-4]
   \      0x2FE   0x1E49             SUBS     R1,R1,#+1
   \      0x300   0xF840 0x1C04      STR      R1,[R0, #-4]
   1431                  }
   1432              }
   \                     ??mbedtls_mpi_div_mpi_21: (+1)
   \      0x304   0x1E64             SUBS     R4,R4,#+1
   \                     ??mbedtls_mpi_div_mpi_22: (+1)
   \      0x306   0x42A5             CMP      R5,R4
   \      0x308   0xF4FF 0xAF33      BCC.W    ??mbedtls_mpi_div_mpi_13
   1433          
   1434              if( Q != NULL )
   \      0x30C   0x2E00             CMP      R6,#+0
   \      0x30E   0xD00C             BEQ.N    ??mbedtls_mpi_div_mpi_23
   1435              {
   1436                  MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
   \      0x310   0xA903             ADD      R1,SP,#+12
   \      0x312   0x4630             MOV      R0,R6
   \      0x314   0x....'....        BL       mbedtls_mpi_copy
   \      0x318   0x4683             MOV      R11,R0
   \      0x31A   0x2800             CMP      R0,#+0
   \      0x31C   0xD120             BNE.N    ??mbedtls_mpi_div_mpi_4
   1437                  Q->s = A->s * B->s;
   \      0x31E   0xF8D8 0x1000      LDR      R1,[R8, #+0]
   \      0x322   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \      0x326   0x4341             MULS     R1,R0,R1
   \      0x328   0x6031             STR      R1,[R6, #+0]
   1438              }
   1439          
   1440              if( R != NULL )
   \                     ??mbedtls_mpi_div_mpi_23: (+1)
   \      0x32A   0x2F00             CMP      R7,#+0
   \      0x32C   0xD018             BEQ.N    ??mbedtls_mpi_div_mpi_4
   1441              {
   1442                  MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
   \      0x32E   0x4651             MOV      R1,R10
   \      0x330   0x4668             MOV      R0,SP
   \      0x332   0x....'....        BL       mbedtls_mpi_shift_r
   \      0x336   0x4683             MOV      R11,R0
   \      0x338   0x2800             CMP      R0,#+0
   \      0x33A   0xD111             BNE.N    ??mbedtls_mpi_div_mpi_4
   1443                  X.s = A->s;
   \      0x33C   0xF8D8 0x0000      LDR      R0,[R8, #+0]
   \      0x340   0x9000             STR      R0,[SP, #+0]
   1444                  MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
   \      0x342   0x4669             MOV      R1,SP
   \      0x344   0x4638             MOV      R0,R7
   \      0x346   0x....'....        BL       mbedtls_mpi_copy
   \      0x34A   0x4683             MOV      R11,R0
   \      0x34C   0x2800             CMP      R0,#+0
   \      0x34E   0xD107             BNE.N    ??mbedtls_mpi_div_mpi_4
   1445          
   1446                  if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )
   \      0x350   0x2100             MOVS     R1,#+0
   \      0x352   0x4638             MOV      R0,R7
   \      0x354   0x....'....        BL       mbedtls_mpi_cmp_int
   \      0x358   0x2800             CMP      R0,#+0
   \      0x35A   0xD101             BNE.N    ??mbedtls_mpi_div_mpi_4
   1447                      R->s = 1;
   \      0x35C   0x2001             MOVS     R0,#+1
   \      0x35E   0x6038             STR      R0,[R7, #+0]
   1448              }
   1449          
   1450          cleanup:
   1451          
   1452              mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
   \                     ??mbedtls_mpi_div_mpi_4: (+1)
   \      0x360   0x4668             MOV      R0,SP
   \      0x362   0x....'....        BL       mbedtls_mpi_free
   \      0x366   0xA806             ADD      R0,SP,#+24
   \      0x368   0x....'....        BL       mbedtls_mpi_free
   \      0x36C   0xA803             ADD      R0,SP,#+12
   \      0x36E   0x....'....        BL       mbedtls_mpi_free
   1453              mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );
   \      0x372   0xA809             ADD      R0,SP,#+36
   \      0x374   0x....'....        BL       mbedtls_mpi_free
   \      0x378   0xA80C             ADD      R0,SP,#+48
   \      0x37A   0x....'....        BL       mbedtls_mpi_free
   1454          
   1455              return( ret );
   \      0x37E   0x4658             MOV      R0,R11
   \                     ??mbedtls_mpi_div_mpi_1: (+1)
   \      0x380   0xB00F             ADD      SP,SP,#+60
   \      0x382   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   \                     ??mbedtls_mpi_div_mpi_9: (+1)
   \      0x386   0x1B61             SUBS     R1,R4,R5
   \      0x388   0x0149             LSLS     R1,R1,#+5
   \      0x38A   0xA806             ADD      R0,SP,#+24
   \      0x38C   0x....'....        BL       mbedtls_mpi_shift_r
   \      0x390   0x4683             MOV      R11,R0
   \      0x392   0x2800             CMP      R0,#+0
   \      0x394   0xD1E4             BNE.N    ??mbedtls_mpi_div_mpi_4
   \      0x396   0xE7B6             B.N      ??mbedtls_mpi_div_mpi_22
   1456          }
   1457          
   1458          /*
   1459           * Division by int: A = Q * b + R
   1460           */

   \                                 In section .text, align 2, keep-with-next
   1461          int mbedtls_mpi_div_int( mbedtls_mpi *Q, mbedtls_mpi *R, const mbedtls_mpi *A, mbedtls_mpi_sint b )
   1462          {
   \                     mbedtls_mpi_div_int: (+1)
   \        0x0   0xB51F             PUSH     {R0-R4,LR}
   1463              mbedtls_mpi _B;
   1464              mbedtls_mpi_uint p[1];
   1465          
   1466              p[0] = ( b < 0 ) ? -b : b;
   \        0x2   0x2B00             CMP      R3,#+0
   \        0x4   0xD502             BPL.N    ??mbedtls_mpi_div_int_0
   \        0x6   0x425C             RSBS     R4,R3,#+0
   \        0x8   0x9400             STR      R4,[SP, #+0]
   \        0xA   0xE000             B.N      ??mbedtls_mpi_div_int_1
   \                     ??mbedtls_mpi_div_int_0: (+1)
   \        0xC   0x9300             STR      R3,[SP, #+0]
   1467              _B.s = ( b < 0 ) ? -1 : 1;
   \                     ??mbedtls_mpi_div_int_1: (+1)
   \        0xE   0x2B00             CMP      R3,#+0
   \       0x10   0xD502             BPL.N    ??mbedtls_mpi_div_int_2
   \       0x12   0xF04F 0x33FF      MOV      R3,#-1
   \       0x16   0xE000             B.N      ??mbedtls_mpi_div_int_3
   \                     ??mbedtls_mpi_div_int_2: (+1)
   \       0x18   0x2301             MOVS     R3,#+1
   \                     ??mbedtls_mpi_div_int_3: (+1)
   \       0x1A   0x9301             STR      R3,[SP, #+4]
   1468              _B.n = 1;
   \       0x1C   0x2301             MOVS     R3,#+1
   \       0x1E   0x9302             STR      R3,[SP, #+8]
   1469              _B.p = p;
   \       0x20   0x466B             MOV      R3,SP
   \       0x22   0x9303             STR      R3,[SP, #+12]
   1470          
   1471              return( mbedtls_mpi_div_mpi( Q, R, A, &_B ) );
   \       0x24   0xAB01             ADD      R3,SP,#+4
   \       0x26   0x....'....        BL       mbedtls_mpi_div_mpi
   \       0x2A   0xB004             ADD      SP,SP,#+16
   \       0x2C   0xBD10             POP      {R4,PC}          ;; return
   1472          }
   1473          
   1474          /*
   1475           * Modulo: R = A mod B
   1476           */
   1477          #if defined(MBEDTLS_MPI_MOD_MPI_ALT)
   1478          int mbedtls_mpi_mod_mpi_orig( mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
   1479          #else

   \                                 In section .text, align 2, keep-with-next
   1480          int mbedtls_mpi_mod_mpi( mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
   1481          #endif /* MBEDTLS_MPI_MOD_MPI_ALT */
   1482          {
   \                     mbedtls_mpi_mod_mpi: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4605             MOV      R5,R0
   \        0x4   0x460C             MOV      R4,R1
   \        0x6   0x4616             MOV      R6,R2
   1483              int ret;
   1484          
   1485              if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
   \        0x8   0x2100             MOVS     R1,#+0
   \        0xA   0x4630             MOV      R0,R6
   \        0xC   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x10   0x2800             CMP      R0,#+0
   \       0x12   0xD502             BPL.N    ??mbedtls_mpi_mod_mpi_0
   1486                  return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
   \       0x14   0xF06F 0x0009      MVN      R0,#+9
   \       0x18   0xBD70             POP      {R4-R6,PC}
   1487          
   1488              MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
   \                     ??mbedtls_mpi_mod_mpi_0: (+1)
   \       0x1A   0x4633             MOV      R3,R6
   \       0x1C   0x4622             MOV      R2,R4
   \       0x1E   0x4629             MOV      R1,R5
   \       0x20   0x2000             MOVS     R0,#+0
   \       0x22   0x....'....        BL       mbedtls_mpi_div_mpi
   \       0x26   0x0004             MOVS     R4,R0
   \       0x28   0xD10C             BNE.N    ??mbedtls_mpi_mod_mpi_1
   1489          
   1490              while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
   \                     ??mbedtls_mpi_mod_mpi_2: (+1)
   \       0x2A   0x2100             MOVS     R1,#+0
   \       0x2C   0x4628             MOV      R0,R5
   \       0x2E   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x32   0x2800             CMP      R0,#+0
   \       0x34   0xD508             BPL.N    ??mbedtls_mpi_mod_mpi_3
   1491                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
   \       0x36   0x4632             MOV      R2,R6
   \       0x38   0x4629             MOV      R1,R5
   \       0x3A   0x4628             MOV      R0,R5
   \       0x3C   0x....'....        BL       mbedtls_mpi_add_mpi
   \       0x40   0x0004             MOVS     R4,R0
   \       0x42   0xD0F2             BEQ.N    ??mbedtls_mpi_mod_mpi_2
   1492          
   1493              while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
   1494                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
   1495          
   1496          cleanup:
   1497          
   1498              return( ret );
   \                     ??mbedtls_mpi_mod_mpi_1: (+1)
   \       0x44   0x4620             MOV      R0,R4
   \       0x46   0xBD70             POP      {R4-R6,PC}       ;; return
   \                     ??mbedtls_mpi_mod_mpi_3: (+1)
   \       0x48   0x4631             MOV      R1,R6
   \       0x4A   0x4628             MOV      R0,R5
   \       0x4C   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \       0x50   0x2800             CMP      R0,#+0
   \       0x52   0xD4F7             BMI.N    ??mbedtls_mpi_mod_mpi_1
   \       0x54   0x4632             MOV      R2,R6
   \       0x56   0x4629             MOV      R1,R5
   \       0x58   0x4628             MOV      R0,R5
   \       0x5A   0x....'....        BL       mbedtls_mpi_sub_mpi
   \       0x5E   0x0004             MOVS     R4,R0
   \       0x60   0xD0F2             BEQ.N    ??mbedtls_mpi_mod_mpi_3
   \       0x62   0xE7EF             B.N      ??mbedtls_mpi_mod_mpi_1
   1499          }
   1500          
   1501          /*
   1502           * Modulo: r = A mod b
   1503           */

   \                                 In section .text, align 2, keep-with-next
   1504          int mbedtls_mpi_mod_int( mbedtls_mpi_uint *r, const mbedtls_mpi *A, mbedtls_mpi_sint b )
   1505          {
   \                     mbedtls_mpi_mod_int: (+1)
   \        0x0   0xB470             PUSH     {R4-R6}
   \        0x2   0x460B             MOV      R3,R1
   1506              size_t i;
   1507              mbedtls_mpi_uint x, y, z;
   1508          
   1509              if( b == 0 )
   \        0x4   0x2A00             CMP      R2,#+0
   \        0x6   0xD102             BNE.N    ??mbedtls_mpi_mod_int_0
   1510                  return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
   \        0x8   0xF06F 0x000B      MVN      R0,#+11
   \        0xC   0xE034             B.N      ??mbedtls_mpi_mod_int_1
   1511          
   1512              if( b < 0 )
   \                     ??mbedtls_mpi_mod_int_0: (+1)
   \        0xE   0xD502             BPL.N    ??mbedtls_mpi_mod_int_2
   1513                  return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
   \       0x10   0xF06F 0x0009      MVN      R0,#+9
   \       0x14   0xE030             B.N      ??mbedtls_mpi_mod_int_1
   1514          
   1515              /*
   1516               * handle trivial cases
   1517               */
   1518              if( b == 1 )
   \                     ??mbedtls_mpi_mod_int_2: (+1)
   \       0x16   0x2A01             CMP      R2,#+1
   \       0x18   0xD103             BNE.N    ??mbedtls_mpi_mod_int_3
   1519              {
   1520                  *r = 0;
   \       0x1A   0x2100             MOVS     R1,#+0
   \       0x1C   0x6001             STR      R1,[R0, #+0]
   1521                  return( 0 );
   \       0x1E   0x4608             MOV      R0,R1
   \       0x20   0xE02A             B.N      ??mbedtls_mpi_mod_int_1
   1522              }
   1523          
   1524              if( b == 2 )
   \                     ??mbedtls_mpi_mod_int_3: (+1)
   \       0x22   0x2A02             CMP      R2,#+2
   \       0x24   0xD106             BNE.N    ??mbedtls_mpi_mod_int_4
   1525              {
   1526                  *r = A->p[0] & 1;
   \       0x26   0x6899             LDR      R1,[R3, #+8]
   \       0x28   0x7809             LDRB     R1,[R1, #+0]
   \       0x2A   0xF001 0x0101      AND      R1,R1,#0x1
   \       0x2E   0x6001             STR      R1,[R0, #+0]
   1527                  return( 0 );
   \       0x30   0x2000             MOVS     R0,#+0
   \       0x32   0xE021             B.N      ??mbedtls_mpi_mod_int_1
   1528              }
   1529          
   1530              /*
   1531               * general case
   1532               */
   1533              for( i = A->n, y = 0; i > 0; i-- )
   \                     ??mbedtls_mpi_mod_int_4: (+1)
   \       0x34   0x6859             LDR      R1,[R3, #+4]
   \       0x36   0x2400             MOVS     R4,#+0
   \       0x38   0x2900             CMP      R1,#+0
   \       0x3A   0xE013             B.N      ??mbedtls_mpi_mod_int_5
   1534              {
   1535                  x  = A->p[i - 1];
   \                     ??mbedtls_mpi_mod_int_6: (+1)
   \       0x3C   0x689D             LDR      R5,[R3, #+8]
   \       0x3E   0xEB05 0x0581      ADD      R5,R5,R1, LSL #+2
   \       0x42   0xF855 0x6C04      LDR      R6,[R5, #-4]
   1536                  y  = ( y << biH ) | ( x >> biH );
   \       0x46   0x4635             MOV      R5,R6
   \       0x48   0x0C2D             LSRS     R5,R5,#+16
   \       0x4A   0xEA45 0x4504      ORR      R5,R5,R4, LSL #+16
   1537                  z  = y / b;
   1538                  y -= z * b;
   1539          
   1540                  x <<= biH;
   1541                  y  = ( y << biH ) | ( x >> biH );
   \       0x4E   0xFBB5 0xF4F2      UDIV     R4,R5,R2
   \       0x52   0xFB02 0x5514      MLS      R5,R2,R4,R5
   \       0x56   0xEAC6 0x4505      PKHBT    R5,R6,R5, LSL #+16
   1542                  z  = y / b;
   1543                  y -= z * b;
   \       0x5A   0xFBB5 0xF4F2      UDIV     R4,R5,R2
   \       0x5E   0xFB02 0x5414      MLS      R4,R2,R4,R5
   1544              }
   \       0x62   0x1E49             SUBS     R1,R1,#+1
   \                     ??mbedtls_mpi_mod_int_5: (+1)
   \       0x64   0xD1EA             BNE.N    ??mbedtls_mpi_mod_int_6
   1545          
   1546              /*
   1547               * If A is negative, then the current y represents a negative value.
   1548               * Flipping it to the positive side.
   1549               */
   1550              if( A->s < 0 && y != 0 )
   \       0x66   0x6819             LDR      R1,[R3, #+0]
   \       0x68   0x2900             CMP      R1,#+0
   \       0x6A   0xD503             BPL.N    ??mbedtls_mpi_mod_int_7
   \       0x6C   0x2C00             CMP      R4,#+0
   \       0x6E   0xD001             BEQ.N    ??mbedtls_mpi_mod_int_7
   1551                  y = b - y;
   \       0x70   0x1B12             SUBS     R2,R2,R4
   \       0x72   0x4614             MOV      R4,R2
   1552          
   1553              *r = y;
   \                     ??mbedtls_mpi_mod_int_7: (+1)
   \       0x74   0x6004             STR      R4,[R0, #+0]
   1554          
   1555              return( 0 );
   \       0x76   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_mpi_mod_int_1: (+1)
   \       0x78   0xBC70             POP      {R4-R6}
   \       0x7A   0x4770             BX       LR               ;; return
   1556          }
   1557          
   1558          /*
   1559           * Fast Montgomery initialization (thanks to Tom St Denis)
   1560           */

   \                                 In section .text, align 2, keep-with-next
   1561          static void mpi_montg_init( mbedtls_mpi_uint *mm, const mbedtls_mpi *N )
   1562          {
   \                     mpi_montg_init: (+1)
   \        0x0   0xB410             PUSH     {R4}
   1563              mbedtls_mpi_uint x, m0 = N->p[0];
   \        0x2   0x6889             LDR      R1,[R1, #+8]
   \        0x4   0x6809             LDR      R1,[R1, #+0]
   1564              unsigned int i;
   1565          
   1566              x  = m0;
   1567              x += ( ( m0 + 2 ) & 4 ) << 1;
   \        0x6   0x1C8A             ADDS     R2,R1,#+2
   \        0x8   0x0052             LSLS     R2,R2,#+1
   \        0xA   0xF002 0x0208      AND      R2,R2,#0x8
   \        0xE   0x1852             ADDS     R2,R2,R1
   1568          
   1569              for( i = biL; i >= 8; i /= 2 )
   \       0x10   0x2320             MOVS     R3,#+32
   \       0x12   0xE005             B.N      ??mpi_montg_init_0
   1570                  x *= ( 2 - ( m0 * x ) );
   \                     ??mpi_montg_init_1: (+1)
   \       0x14   0xFB02 0xF401      MUL      R4,R2,R1
   \       0x18   0xF1C4 0x0402      RSB      R4,R4,#+2
   \       0x1C   0x4362             MULS     R2,R4,R2
   \       0x1E   0x085B             LSRS     R3,R3,#+1
   \                     ??mpi_montg_init_0: (+1)
   \       0x20   0x2B08             CMP      R3,#+8
   \       0x22   0xD2F7             BCS.N    ??mpi_montg_init_1
   1571          
   1572              *mm = ~x + 1;
   \       0x24   0x43D2             MVNS     R2,R2
   \       0x26   0x1C52             ADDS     R2,R2,#+1
   \       0x28   0x6002             STR      R2,[R0, #+0]
   1573          }
   \       0x2A   0xBC10             POP      {R4}
   \       0x2C   0x4770             BX       LR               ;; return
   1574          
   1575          /*
   1576           * Montgomery multiplication: A = A * B * R^-1 mod N  (HAC 14.36)
   1577           */

   \                                 In section .text, align 2, keep-with-next
   1578          static int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
   1579                                   const mbedtls_mpi *T )
   1580          {
   \                     mpi_montmul: (+1)
   \        0x0   0xE92D 0x4FFE      PUSH     {R1-R11,LR}
   \        0x4   0x4681             MOV      R9,R0
   \        0x6   0x4614             MOV      R4,R2
   \        0x8   0x4698             MOV      R8,R3
   \        0xA   0x9F0C             LDR      R7,[SP, #+48]
   1581              size_t i, n, m;
   1582              mbedtls_mpi_uint u0, u1, *d;
   1583          
   1584              if( T->n < N->n + 1 || T->p == NULL )
   \        0xC   0x6878             LDR      R0,[R7, #+4]
   \        0xE   0x6862             LDR      R2,[R4, #+4]
   \       0x10   0x1C52             ADDS     R2,R2,#+1
   \       0x12   0x4290             CMP      R0,R2
   \       0x14   0xD302             BCC.N    ??mpi_montmul_0
   \       0x16   0x68B8             LDR      R0,[R7, #+8]
   \       0x18   0x2800             CMP      R0,#+0
   \       0x1A   0xD102             BNE.N    ??mpi_montmul_1
   1585                  return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
   \                     ??mpi_montmul_0: (+1)
   \       0x1C   0xF06F 0x0003      MVN      R0,#+3
   \       0x20   0xE051             B.N      ??mpi_montmul_2
   \                     ??mpi_montmul_1: (+1)
   \       0x22   0x460E             MOV      R6,R1
   1586          
   1587              memset( T->p, 0, T->n * ciL );
   \       0x24   0x2200             MOVS     R2,#+0
   \       0x26   0x6879             LDR      R1,[R7, #+4]
   \       0x28   0x0089             LSLS     R1,R1,#+2
   \       0x2A   0x....'....        BL       __aeabi_memset4
   1588          
   1589              d = T->p;
   \       0x2E   0x68BA             LDR      R2,[R7, #+8]
   1590              n = N->n;
   \       0x30   0x6861             LDR      R1,[R4, #+4]
   1591              m = ( B->n < n ) ? B->n : n;
   \       0x32   0x6870             LDR      R0,[R6, #+4]
   \       0x34   0x4288             CMP      R0,R1
   \       0x36   0xD900             BLS.N    ??mpi_montmul_3
   \       0x38   0x4608             MOV      R0,R1
   1592          
   1593              for( i = 0; i < n; i++ )
   \                     ??mpi_montmul_3: (+1)
   \       0x3A   0x2500             MOVS     R5,#+0
   \       0x3C   0x9600             STR      R6,[SP, #+0]
   \       0x3E   0xF8CD 0x8008      STR      R8,[SP, #+8]
   \       0x42   0x4616             MOV      R6,R2
   \       0x44   0x4688             MOV      R8,R1
   \       0x46   0x9001             STR      R0,[SP, #+4]
   \       0x48   0xE01F             B.N      ??mpi_montmul_4
   1594              {
   1595                  /*
   1596                   * T = (T + u0*B + u1*N) / 2^biL
   1597                   */
   1598                  u0 = A->p[i];
   \                     ??mpi_montmul_5: (+1)
   \       0x4A   0xF8D9 0x0008      LDR      R0,[R9, #+8]
   \       0x4E   0xF850 0xA025      LDR      R10,[R0, R5, LSL #+2]
   1599                  u1 = ( d[0] + u0 * B->p[0] ) * mm;
   \       0x52   0x6830             LDR      R0,[R6, #+0]
   \       0x54   0x9900             LDR      R1,[SP, #+0]
   \       0x56   0x6889             LDR      R1,[R1, #+8]
   \       0x58   0xF8D1 0xB000      LDR      R11,[R1, #+0]
   \       0x5C   0xFB0B 0x0B0A      MLA      R11,R11,R10,R0
   \       0x60   0x9802             LDR      R0,[SP, #+8]
   \       0x62   0xFB00 0xFB0B      MUL      R11,R0,R11
   1600          
   1601                  mpi_mul_hlp( m, B->p, d, u0 );
   \       0x66   0x4653             MOV      R3,R10
   \       0x68   0x4632             MOV      R2,R6
   \       0x6A   0x9801             LDR      R0,[SP, #+4]
   \       0x6C   0x....'....        BL       mpi_mul_hlp
   1602                  mpi_mul_hlp( n, N->p, d, u1 );
   \       0x70   0x465B             MOV      R3,R11
   \       0x72   0x4632             MOV      R2,R6
   \       0x74   0x68A1             LDR      R1,[R4, #+8]
   \       0x76   0x4640             MOV      R0,R8
   \       0x78   0x....'....        BL       mpi_mul_hlp
   1603          
   1604                  *d++ = u0; d[n + 1] = 0;
   \       0x7C   0xF846 0xAB04      STR      R10,[R6], #+4
   \       0x80   0x2000             MOVS     R0,#+0
   \       0x82   0xEB06 0x0188      ADD      R1,R6,R8, LSL #+2
   \       0x86   0x6048             STR      R0,[R1, #+4]
   1605              }
   \       0x88   0x1C6D             ADDS     R5,R5,#+1
   \                     ??mpi_montmul_4: (+1)
   \       0x8A   0x4545             CMP      R5,R8
   \       0x8C   0xD3DD             BCC.N    ??mpi_montmul_5
   \       0x8E   0x4631             MOV      R1,R6
   1606          
   1607              memcpy( A->p, d, ( n + 1 ) * ciL );
   \       0x90   0xF108 0x0201      ADD      R2,R8,#+1
   \       0x94   0x0092             LSLS     R2,R2,#+2
   \       0x96   0xF8D9 0x0008      LDR      R0,[R9, #+8]
   \       0x9A   0x....'....        BL       __aeabi_memcpy4
   1608          
   1609              if( mbedtls_mpi_cmp_abs( A, N ) >= 0 )
   \       0x9E   0x4621             MOV      R1,R4
   \       0xA0   0x4648             MOV      R0,R9
   \       0xA2   0x....'....        BL       mbedtls_mpi_cmp_abs
   \       0xA6   0x2800             CMP      R0,#+0
   \       0xA8   0xD406             BMI.N    ??mpi_montmul_6
   1610                  mpi_sub_hlp( n, N->p, A->p );
   \       0xAA   0xF8D9 0x2008      LDR      R2,[R9, #+8]
   \       0xAE   0x68A1             LDR      R1,[R4, #+8]
   \       0xB0   0x4640             MOV      R0,R8
   \       0xB2   0x....'....        BL       mpi_sub_hlp
   \       0xB6   0xE005             B.N      ??mpi_montmul_7
   1611              else
   1612                  /* prevent timing attacks */
   1613                  mpi_sub_hlp( n, A->p, T->p );
   \                     ??mpi_montmul_6: (+1)
   \       0xB8   0x68BA             LDR      R2,[R7, #+8]
   \       0xBA   0xF8D9 0x1008      LDR      R1,[R9, #+8]
   \       0xBE   0x4640             MOV      R0,R8
   \       0xC0   0x....'....        BL       mpi_sub_hlp
   1614          
   1615              return( 0 );
   \                     ??mpi_montmul_7: (+1)
   \       0xC4   0x2000             MOVS     R0,#+0
   \                     ??mpi_montmul_2: (+1)
   \       0xC6   0xE8BD 0x8FFE      POP      {R1-R11,PC}      ;; return
   1616          }
   1617          
   1618          /*
   1619           * Montgomery reduction: A = A * R^-1 mod N
   1620           */

   \                                 In section .text, align 2, keep-with-next
   1621          static int mpi_montred( mbedtls_mpi *A, const mbedtls_mpi *N, mbedtls_mpi_uint mm, const mbedtls_mpi *T )
   1622          {
   \                     mpi_montred: (+1)
   \        0x0   0xB518             PUSH     {R3,R4,LR}
   \        0x2   0xB085             SUB      SP,SP,#+20
   1623              mbedtls_mpi_uint z = 1;
   \        0x4   0x2401             MOVS     R4,#+1
   \        0x6   0x9401             STR      R4,[SP, #+4]
   1624              mbedtls_mpi U;
   1625          
   1626              U.n = U.s = (int) z;
   \        0x8   0x9402             STR      R4,[SP, #+8]
   \        0xA   0x9403             STR      R4,[SP, #+12]
   1627              U.p = &z;
   \        0xC   0xAC01             ADD      R4,SP,#+4
   \        0xE   0x9404             STR      R4,[SP, #+16]
   1628          
   1629              return( mpi_montmul( A, &U, N, mm, T ) );
   \       0x10   0x9300             STR      R3,[SP, #+0]
   \       0x12   0x4613             MOV      R3,R2
   \       0x14   0x460A             MOV      R2,R1
   \       0x16   0xA902             ADD      R1,SP,#+8
   \       0x18   0x....'....        BL       mpi_montmul
   \       0x1C   0xB006             ADD      SP,SP,#+24
   \       0x1E   0xBD10             POP      {R4,PC}          ;; return
   1630          }
   1631          
   1632          /*
   1633           * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
   1634           */
   1635          #if defined(MBEDTLS_MPI_EXP_MOD_ALT)
   1636          int mbedtls_mpi_exp_mod_orig( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *E, const mbedtls_mpi *N, mbedtls_mpi *_RR )
   1637          #else

   \                                 In section .text, align 2, keep-with-next
   1638          int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *E, const mbedtls_mpi *N, mbedtls_mpi *_RR )
   1639          #endif /* MBEDTLS_MPI_EXP_MOD_ALT */
   1640          {
   \                     mbedtls_mpi_exp_mod: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \        0x4   0xB09A             SUB      SP,SP,#+104
   \        0x6   0x4606             MOV      R6,R0
   \        0x8   0x460C             MOV      R4,R1
   \        0xA   0x4617             MOV      R7,R2
   \        0xC   0x461D             MOV      R5,R3
   1641              int ret;
   1642              size_t wbits, wsize, one = 1;
   1643              size_t i, j, nblimbs;
   1644              size_t bufsize, nbits;
   1645              mbedtls_mpi_uint ei, mm, state;
   1646              mbedtls_mpi RR, T, W[ 2 << MBEDTLS_MPI_WINDOW_SIZE ], Apos;
   1647              int neg;
   1648          
   1649              if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
   \        0xE   0x2100             MOVS     R1,#+0
   \       0x10   0x4628             MOV      R0,R5
   \       0x12   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x16   0x2801             CMP      R0,#+1
   \       0x18   0xDB0A             BLT.N    ??mbedtls_mpi_exp_mod_0
   \       0x1A   0x68A8             LDR      R0,[R5, #+8]
   \       0x1C   0x7800             LDRB     R0,[R0, #+0]
   \       0x1E   0x07C0             LSLS     R0,R0,#+31
   \       0x20   0xD506             BPL.N    ??mbedtls_mpi_exp_mod_0
   \       0x22   0x970C             STR      R7,[SP, #+48]
   1650                  return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
   1651          
   1652              if( mbedtls_mpi_cmp_int( E, 0 ) < 0 )
   \       0x24   0x2100             MOVS     R1,#+0
   \       0x26   0x4638             MOV      R0,R7
   \       0x28   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x2C   0x2800             CMP      R0,#+0
   \       0x2E   0xD502             BPL.N    ??mbedtls_mpi_exp_mod_1
   1653                  return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
   \                     ??mbedtls_mpi_exp_mod_0: (+1)
   \       0x30   0xF06F 0x0003      MVN      R0,#+3
   \       0x34   0xE1E9             B.N      ??mbedtls_mpi_exp_mod_2
   1654          
   1655              /*
   1656               * Init temps and window size
   1657               */
   1658              mpi_montg_init( &mm, N );
   \                     ??mbedtls_mpi_exp_mod_1: (+1)
   \       0x36   0x4629             MOV      R1,R5
   \       0x38   0xA801             ADD      R0,SP,#+4
   \       0x3A   0x....'....        BL       mpi_montg_init
   1659              mbedtls_mpi_init( &RR ); mbedtls_mpi_init( &T );
   \       0x3E   0xA805             ADD      R0,SP,#+20
   \       0x40   0x....'....        BL       mbedtls_mpi_init
   \       0x44   0xA802             ADD      R0,SP,#+8
   \       0x46   0x....'....        BL       mbedtls_mpi_init
   1660              mbedtls_mpi_init( &Apos );
   \       0x4A   0xA809             ADD      R0,SP,#+36
   \       0x4C   0x....'....        BL       mbedtls_mpi_init
   1661              memset( W, 0, sizeof( W ) );
   \       0x50   0x2200             MOVS     R2,#+0
   \       0x52   0x2130             MOVS     R1,#+48
   \       0x54   0xA80E             ADD      R0,SP,#+56
   \       0x56   0x....'....        BL       __aeabi_memset4
   1662          
   1663              i = mbedtls_mpi_bitlen( E );
   \       0x5A   0x980C             LDR      R0,[SP, #+48]
   \       0x5C   0x....'....        BL       mbedtls_mpi_bitlen
   1664          
   1665              wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
   1666                      ( i >  79 ) ? 4 : ( i >  23 ) ? 3 : 1;
   \       0x60   0xF5B0 0x7F28      CMP      R0,#+672
   \       0x64   0xD301             BCC.N    ??mbedtls_mpi_exp_mod_3
   \       0x66   0x2706             MOVS     R7,#+6
   \       0x68   0xE00C             B.N      ??mbedtls_mpi_exp_mod_4
   \                     ??mbedtls_mpi_exp_mod_3: (+1)
   \       0x6A   0x28F0             CMP      R0,#+240
   \       0x6C   0xD301             BCC.N    ??mbedtls_mpi_exp_mod_5
   \       0x6E   0x2705             MOVS     R7,#+5
   \       0x70   0xE008             B.N      ??mbedtls_mpi_exp_mod_4
   \                     ??mbedtls_mpi_exp_mod_5: (+1)
   \       0x72   0x2850             CMP      R0,#+80
   \       0x74   0xD301             BCC.N    ??mbedtls_mpi_exp_mod_6
   \       0x76   0x2704             MOVS     R7,#+4
   \       0x78   0xE004             B.N      ??mbedtls_mpi_exp_mod_4
   \                     ??mbedtls_mpi_exp_mod_6: (+1)
   \       0x7A   0x2818             CMP      R0,#+24
   \       0x7C   0xD301             BCC.N    ??mbedtls_mpi_exp_mod_7
   \       0x7E   0x2703             MOVS     R7,#+3
   \       0x80   0xE000             B.N      ??mbedtls_mpi_exp_mod_4
   \                     ??mbedtls_mpi_exp_mod_7: (+1)
   \       0x82   0x2701             MOVS     R7,#+1
   1667          
   1668              if( wsize > MBEDTLS_MPI_WINDOW_SIZE )
   \                     ??mbedtls_mpi_exp_mod_4: (+1)
   \       0x84   0x2F02             CMP      R7,#+2
   \       0x86   0xD300             BCC.N    ??mbedtls_mpi_exp_mod_8
   1669                  wsize = MBEDTLS_MPI_WINDOW_SIZE;
   \       0x88   0x2701             MOVS     R7,#+1
   \                     ??mbedtls_mpi_exp_mod_8: (+1)
   \       0x8A   0x9608             STR      R6,[SP, #+32]
   1670          
   1671              j = N->n + 1;
   \       0x8C   0x686E             LDR      R6,[R5, #+4]
   \       0x8E   0x1C76             ADDS     R6,R6,#+1
   1672              MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
   \       0x90   0x4631             MOV      R1,R6
   \       0x92   0x9808             LDR      R0,[SP, #+32]
   \       0x94   0x....'....        BL       mbedtls_mpi_grow
   \       0x98   0x4683             MOV      R11,R0
   \       0x9A   0x2800             CMP      R0,#+0
   \       0x9C   0xF040 0x8190      BNE.W    ??mbedtls_mpi_exp_mod_9
   1673              MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1],  j ) );
   \       0xA0   0x4631             MOV      R1,R6
   \       0xA2   0xA811             ADD      R0,SP,#+68
   \       0xA4   0x....'....        BL       mbedtls_mpi_grow
   \       0xA8   0x4683             MOV      R11,R0
   \       0xAA   0x2800             CMP      R0,#+0
   \       0xAC   0xF040 0x8188      BNE.W    ??mbedtls_mpi_exp_mod_9
   1674              MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T, j * 2 ) );
   \       0xB0   0x0076             LSLS     R6,R6,#+1
   \       0xB2   0x4631             MOV      R1,R6
   \       0xB4   0xA802             ADD      R0,SP,#+8
   \       0xB6   0x....'....        BL       mbedtls_mpi_grow
   \       0xBA   0x4683             MOV      R11,R0
   \       0xBC   0x2800             CMP      R0,#+0
   \       0xBE   0xF040 0x817F      BNE.W    ??mbedtls_mpi_exp_mod_9
   1675          
   1676              /*
   1677               * Compensate for negative A (and correct at the end)
   1678               */
   1679              neg = ( A->s == -1 );
   \       0xC2   0x6820             LDR      R0,[R4, #+0]
   \       0xC4   0xF110 0x0F01      CMN      R0,#+1
   \       0xC8   0xD102             BNE.N    ??mbedtls_mpi_exp_mod_10
   \       0xCA   0x2001             MOVS     R0,#+1
   \       0xCC   0x900D             STR      R0,[SP, #+52]
   \       0xCE   0xE001             B.N      ??mbedtls_mpi_exp_mod_11
   \                     ??mbedtls_mpi_exp_mod_10: (+1)
   \       0xD0   0x2000             MOVS     R0,#+0
   \       0xD2   0x900D             STR      R0,[SP, #+52]
   1680              if( neg )
   \                     ??mbedtls_mpi_exp_mod_11: (+1)
   \       0xD4   0x980D             LDR      R0,[SP, #+52]
   \       0xD6   0x2800             CMP      R0,#+0
   \       0xD8   0xD00A             BEQ.N    ??mbedtls_mpi_exp_mod_12
   1681              {
   1682                  MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Apos, A ) );
   \       0xDA   0x4621             MOV      R1,R4
   \       0xDC   0xA809             ADD      R0,SP,#+36
   \       0xDE   0x....'....        BL       mbedtls_mpi_copy
   \       0xE2   0x4683             MOV      R11,R0
   \       0xE4   0x2800             CMP      R0,#+0
   \       0xE6   0xF040 0x816B      BNE.W    ??mbedtls_mpi_exp_mod_9
   1683                  Apos.s = 1;
   \       0xEA   0x2001             MOVS     R0,#+1
   \       0xEC   0x9009             STR      R0,[SP, #+36]
   1684                  A = &Apos;
   \       0xEE   0xAC09             ADD      R4,SP,#+36
   1685              }
   1686          
   1687              /*
   1688               * If 1st call, pre-compute R^2 mod N
   1689               */
   1690              if( _RR == NULL || _RR->p == NULL )
   \                     ??mbedtls_mpi_exp_mod_12: (+1)
   \       0xF0   0x9824             LDR      R0,[SP, #+144]
   \       0xF2   0x2800             CMP      R0,#+0
   \       0xF4   0xD002             BEQ.N    ??mbedtls_mpi_exp_mod_13
   \       0xF6   0x6880             LDR      R0,[R0, #+8]
   \       0xF8   0x2800             CMP      R0,#+0
   \       0xFA   0xD121             BNE.N    ??mbedtls_mpi_exp_mod_14
   1691              {
   1692                  MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &RR, 1 ) );
   \                     ??mbedtls_mpi_exp_mod_13: (+1)
   \       0xFC   0x2101             MOVS     R1,#+1
   \       0xFE   0xA805             ADD      R0,SP,#+20
   \      0x100   0x....'....        BL       mbedtls_mpi_lset
   \      0x104   0x4683             MOV      R11,R0
   \      0x106   0x2800             CMP      R0,#+0
   \      0x108   0xF040 0x815A      BNE.W    ??mbedtls_mpi_exp_mod_9
   1693                  MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );
   \      0x10C   0x6869             LDR      R1,[R5, #+4]
   \      0x10E   0x0189             LSLS     R1,R1,#+6
   \      0x110   0xA805             ADD      R0,SP,#+20
   \      0x112   0x....'....        BL       mbedtls_mpi_shift_l
   \      0x116   0x4683             MOV      R11,R0
   \      0x118   0x2800             CMP      R0,#+0
   \      0x11A   0xF040 0x8151      BNE.W    ??mbedtls_mpi_exp_mod_9
   1694                  MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &RR, &RR, N ) );
   \      0x11E   0x462A             MOV      R2,R5
   \      0x120   0xA905             ADD      R1,SP,#+20
   \      0x122   0xA805             ADD      R0,SP,#+20
   \      0x124   0x....'....        BL       mbedtls_mpi_mod_mpi
   \      0x128   0x4683             MOV      R11,R0
   \      0x12A   0x2800             CMP      R0,#+0
   \      0x12C   0xF040 0x8148      BNE.W    ??mbedtls_mpi_exp_mod_9
   1695          
   1696                  if( _RR != NULL )
   \      0x130   0x9824             LDR      R0,[SP, #+144]
   \      0x132   0x2800             CMP      R0,#+0
   \      0x134   0xD009             BEQ.N    ??mbedtls_mpi_exp_mod_15
   1697                      memcpy( _RR, &RR, sizeof( mbedtls_mpi ) );
   \      0x136   0x220C             MOVS     R2,#+12
   \      0x138   0xA905             ADD      R1,SP,#+20
   \      0x13A   0x....'....        BL       __aeabi_memcpy4
   1698              }
   \      0x13E   0xE004             B.N      ??mbedtls_mpi_exp_mod_15
   1699              else
   1700                  memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );
   \                     ??mbedtls_mpi_exp_mod_14: (+1)
   \      0x140   0x220C             MOVS     R2,#+12
   \      0x142   0x9924             LDR      R1,[SP, #+144]
   \      0x144   0xA805             ADD      R0,SP,#+20
   \      0x146   0x....'....        BL       __aeabi_memcpy4
   1701          
   1702              /*
   1703               * W[1] = A * R^2 * R^-1 mod N = A * R mod N
   1704               */
   1705              if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
   \                     ??mbedtls_mpi_exp_mod_15: (+1)
   \      0x14A   0x4629             MOV      R1,R5
   \      0x14C   0x4620             MOV      R0,R4
   \      0x14E   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \      0x152   0x2800             CMP      R0,#+0
   \      0x154   0xD409             BMI.N    ??mbedtls_mpi_exp_mod_16
   1706                  MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
   \      0x156   0x462A             MOV      R2,R5
   \      0x158   0x4621             MOV      R1,R4
   \      0x15A   0xA811             ADD      R0,SP,#+68
   \      0x15C   0x....'....        BL       mbedtls_mpi_mod_mpi
   \      0x160   0x4683             MOV      R11,R0
   \      0x162   0x2800             CMP      R0,#+0
   \      0x164   0xF040 0x812C      BNE.W    ??mbedtls_mpi_exp_mod_9
   \      0x168   0xE007             B.N      ??mbedtls_mpi_exp_mod_17
   1707              else
   1708                  MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );
   \                     ??mbedtls_mpi_exp_mod_16: (+1)
   \      0x16A   0x4621             MOV      R1,R4
   \      0x16C   0xA811             ADD      R0,SP,#+68
   \      0x16E   0x....'....        BL       mbedtls_mpi_copy
   \      0x172   0x4683             MOV      R11,R0
   \      0x174   0x2800             CMP      R0,#+0
   \      0x176   0xF040 0x8123      BNE.W    ??mbedtls_mpi_exp_mod_9
   1709          
   1710              MBEDTLS_MPI_CHK( mpi_montmul( &W[1], &RR, N, mm, &T ) );
   \                     ??mbedtls_mpi_exp_mod_17: (+1)
   \      0x17A   0xA802             ADD      R0,SP,#+8
   \      0x17C   0x9000             STR      R0,[SP, #+0]
   \      0x17E   0x9B01             LDR      R3,[SP, #+4]
   \      0x180   0x462A             MOV      R2,R5
   \      0x182   0xA905             ADD      R1,SP,#+20
   \      0x184   0xA811             ADD      R0,SP,#+68
   \      0x186   0x....'....        BL       mpi_montmul
   \      0x18A   0x4683             MOV      R11,R0
   \      0x18C   0x2800             CMP      R0,#+0
   \      0x18E   0xF040 0x8117      BNE.W    ??mbedtls_mpi_exp_mod_9
   1711          
   1712              /*
   1713               * X = R^2 * R^-1 mod N = R mod N
   1714               */
   1715              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
   \      0x192   0xA905             ADD      R1,SP,#+20
   \      0x194   0x9808             LDR      R0,[SP, #+32]
   \      0x196   0x....'....        BL       mbedtls_mpi_copy
   \      0x19A   0x4683             MOV      R11,R0
   \      0x19C   0x2800             CMP      R0,#+0
   \      0x19E   0xF040 0x810F      BNE.W    ??mbedtls_mpi_exp_mod_9
   1716              MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
   \      0x1A2   0xAB02             ADD      R3,SP,#+8
   \      0x1A4   0x9A01             LDR      R2,[SP, #+4]
   \      0x1A6   0x4629             MOV      R1,R5
   \      0x1A8   0x9808             LDR      R0,[SP, #+32]
   \      0x1AA   0x....'....        BL       mpi_montred
   \      0x1AE   0x4683             MOV      R11,R0
   \      0x1B0   0x2800             CMP      R0,#+0
   \      0x1B2   0xF040 0x8105      BNE.W    ??mbedtls_mpi_exp_mod_9
   1717          
   1718              if( wsize > 1 )
   \      0x1B6   0x2F02             CMP      R7,#+2
   \      0x1B8   0xD366             BCC.N    ??mbedtls_mpi_exp_mod_18
   1719              {
   1720                  /*
   1721                   * W[1 << (wsize - 1)] = W[1] ^ (wsize - 1)
   1722                   */
   1723                  j =  one << ( wsize - 1 );
   \      0x1BA   0x2401             MOVS     R4,#+1
   \      0x1BC   0x4638             MOV      R0,R7
   \      0x1BE   0xF1A0 0x0801      SUB      R8,R0,#+1
   \      0x1C2   0xFA04 0xF808      LSL      R8,R4,R8
   1724          
   1725                  MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
   \      0x1C6   0x260C             MOVS     R6,#+12
   \      0x1C8   0x6869             LDR      R1,[R5, #+4]
   \      0x1CA   0x1C49             ADDS     R1,R1,#+1
   \      0x1CC   0xA80E             ADD      R0,SP,#+56
   \      0x1CE   0xFB06 0xF208      MUL      R2,R6,R8
   \      0x1D2   0x4410             ADD      R0,R0,R2
   \      0x1D4   0x....'....        BL       mbedtls_mpi_grow
   \      0x1D8   0x4683             MOV      R11,R0
   \      0x1DA   0x2800             CMP      R0,#+0
   \      0x1DC   0xF040 0x80F0      BNE.W    ??mbedtls_mpi_exp_mod_9
   1726                  MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );
   \      0x1E0   0xA911             ADD      R1,SP,#+68
   \      0x1E2   0xA80E             ADD      R0,SP,#+56
   \      0x1E4   0xFB06 0xF208      MUL      R2,R6,R8
   \      0x1E8   0x4410             ADD      R0,R0,R2
   \      0x1EA   0x....'....        BL       mbedtls_mpi_copy
   \      0x1EE   0x4683             MOV      R11,R0
   \      0x1F0   0x2800             CMP      R0,#+0
   \      0x1F2   0xF040 0x80E5      BNE.W    ??mbedtls_mpi_exp_mod_9
   1727          
   1728                  for( i = 0; i < wsize - 1; i++ )
   \      0x1F6   0xF04F 0x0900      MOV      R9,#+0
   \      0x1FA   0xE011             B.N      ??mbedtls_mpi_exp_mod_19
   1729                      MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );
   \                     ??mbedtls_mpi_exp_mod_20: (+1)
   \      0x1FC   0xA802             ADD      R0,SP,#+8
   \      0x1FE   0x9000             STR      R0,[SP, #+0]
   \      0x200   0x9B01             LDR      R3,[SP, #+4]
   \      0x202   0x462A             MOV      R2,R5
   \      0x204   0xA80E             ADD      R0,SP,#+56
   \      0x206   0xFB06 0xF108      MUL      R1,R6,R8
   \      0x20A   0x4401             ADD      R1,R0,R1
   \      0x20C   0xFB06 0xFC08      MUL      R12,R6,R8
   \      0x210   0x4460             ADD      R0,R0,R12
   \      0x212   0x....'....        BL       mpi_montmul
   \      0x216   0x2800             CMP      R0,#+0
   \      0x218   0xF040 0x80FA      BNE.W    ??mbedtls_mpi_exp_mod_21
   \      0x21C   0xF109 0x0901      ADD      R9,R9,#+1
   \                     ??mbedtls_mpi_exp_mod_19: (+1)
   \      0x220   0x1E78             SUBS     R0,R7,#+1
   \      0x222   0x4581             CMP      R9,R0
   \      0x224   0xD3EA             BCC.N    ??mbedtls_mpi_exp_mod_20
   1730          
   1731                  /*
   1732                   * W[i] = W[i - 1] * W[1]
   1733                   */
   1734                  for( i = j + 1; i < ( one << wsize ); i++ )
   \      0x226   0xF108 0x0801      ADD      R8,R8,#+1
   \      0x22A   0xE029             B.N      ??mbedtls_mpi_exp_mod_22
   1735                  {
   1736                      MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
   \                     ??mbedtls_mpi_exp_mod_23: (+1)
   \      0x22C   0x6869             LDR      R1,[R5, #+4]
   \      0x22E   0x1C49             ADDS     R1,R1,#+1
   \      0x230   0xA80E             ADD      R0,SP,#+56
   \      0x232   0xFB06 0xF208      MUL      R2,R6,R8
   \      0x236   0x4410             ADD      R0,R0,R2
   \      0x238   0x....'....        BL       mbedtls_mpi_grow
   \      0x23C   0x2800             CMP      R0,#+0
   \      0x23E   0xF040 0x80E7      BNE.W    ??mbedtls_mpi_exp_mod_21
   1737                      MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
   \      0x242   0xA80E             ADD      R0,SP,#+56
   \      0x244   0xFB06 0xF108      MUL      R1,R6,R8
   \      0x248   0x4408             ADD      R0,R0,R1
   \      0x24A   0xF1A0 0x010C      SUB      R1,R0,#+12
   \      0x24E   0xA80E             ADD      R0,SP,#+56
   \      0x250   0xFB06 0xF208      MUL      R2,R6,R8
   \      0x254   0x4410             ADD      R0,R0,R2
   \      0x256   0x....'....        BL       mbedtls_mpi_copy
   \      0x25A   0x2800             CMP      R0,#+0
   \      0x25C   0xF040 0x80D8      BNE.W    ??mbedtls_mpi_exp_mod_21
   1738          
   1739                      MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
   \      0x260   0xA802             ADD      R0,SP,#+8
   \      0x262   0x9000             STR      R0,[SP, #+0]
   \      0x264   0x9B01             LDR      R3,[SP, #+4]
   \      0x266   0x462A             MOV      R2,R5
   \      0x268   0xA911             ADD      R1,SP,#+68
   \      0x26A   0xA80E             ADD      R0,SP,#+56
   \      0x26C   0xFB06 0xFC08      MUL      R12,R6,R8
   \      0x270   0x4460             ADD      R0,R0,R12
   \      0x272   0x....'....        BL       mpi_montmul
   \      0x276   0x2800             CMP      R0,#+0
   \      0x278   0xF040 0x80CA      BNE.W    ??mbedtls_mpi_exp_mod_21
   1740                  }
   \      0x27C   0xF108 0x0801      ADD      R8,R8,#+1
   \                     ??mbedtls_mpi_exp_mod_22: (+1)
   \      0x280   0xFA04 0xF007      LSL      R0,R4,R7
   \      0x284   0x4580             CMP      R8,R0
   \      0x286   0xD3D1             BCC.N    ??mbedtls_mpi_exp_mod_23
   1741              }
   1742          
   1743              nblimbs = E->n;
   \                     ??mbedtls_mpi_exp_mod_18: (+1)
   \      0x288   0x980C             LDR      R0,[SP, #+48]
   \      0x28A   0xF8D0 0x8004      LDR      R8,[R0, #+4]
   1744              bufsize = 0;
   \      0x28E   0xF04F 0x0900      MOV      R9,#+0
   1745              nbits   = 0;
   \      0x292   0x464C             MOV      R4,R9
   1746              wbits   = 0;
   \      0x294   0x46A2             MOV      R10,R4
   1747              state   = 0;
   \      0x296   0x4626             MOV      R6,R4
   \      0x298   0xE020             B.N      ??mbedtls_mpi_exp_mod_24
   1748          
   1749              while( 1 )
   1750              {
   1751                  if( bufsize == 0 )
   1752                  {
   1753                      if( nblimbs == 0 )
   1754                          break;
   1755          
   1756                      nblimbs--;
   1757          
   1758                      bufsize = sizeof( mbedtls_mpi_uint ) << 3;
   1759                  }
   1760          
   1761                  bufsize--;
   1762          
   1763                  ei = (E->p[nblimbs] >> bufsize) & 1;
   1764          
   1765                  /*
   1766                   * skip leading 0s
   1767                   */
   1768                  if( ei == 0 && state == 0 )
   1769                      continue;
   1770          
   1771                  if( ei == 0 && state == 1 )
   1772                  {
   1773                      /*
   1774                       * out of window, square X
   1775                       */
   1776                      MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
   1777                      continue;
   1778                  }
   1779          
   1780                  /*
   1781                   * add ei to current window
   1782                   */
   1783                  state = 2;
   1784          
   1785                  nbits++;
   1786                  wbits |= ( ei << ( wsize - nbits ) );
   1787          
   1788                  if( nbits == wsize )
   1789                  {
   1790                      /*
   1791                       * X = X^wsize R^-1 mod N
   1792                       */
   1793                      for( i = 0; i < wsize; i++ )
   1794                          MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
   \                     ??mbedtls_mpi_exp_mod_25: (+1)
   \      0x29A   0xA802             ADD      R0,SP,#+8
   \      0x29C   0x9000             STR      R0,[SP, #+0]
   \      0x29E   0x9B01             LDR      R3,[SP, #+4]
   \      0x2A0   0x462A             MOV      R2,R5
   \      0x2A2   0x4621             MOV      R1,R4
   \      0x2A4   0x4620             MOV      R0,R4
   \      0x2A6   0x....'....        BL       mpi_montmul
   \      0x2AA   0x2800             CMP      R0,#+0
   \      0x2AC   0xF040 0x80B0      BNE.W    ??mbedtls_mpi_exp_mod_21
   \      0x2B0   0x1C76             ADDS     R6,R6,#+1
   \                     ??mbedtls_mpi_exp_mod_26: (+1)
   \      0x2B2   0x42BE             CMP      R6,R7
   \      0x2B4   0xD3F1             BCC.N    ??mbedtls_mpi_exp_mod_25
   \      0x2B6   0x9408             STR      R4,[SP, #+32]
   1795          
   1796                      /*
   1797                       * X = X * W[wbits] R^-1 mod N
   1798                       */
   1799                      MBEDTLS_MPI_CHK( mpi_montmul( X, &W[wbits], N, mm, &T ) );
   \      0x2B8   0xA802             ADD      R0,SP,#+8
   \      0x2BA   0x9000             STR      R0,[SP, #+0]
   \      0x2BC   0x9B01             LDR      R3,[SP, #+4]
   \      0x2BE   0x462A             MOV      R2,R5
   \      0x2C0   0xA80E             ADD      R0,SP,#+56
   \      0x2C2   0xEB0A 0x014A      ADD      R1,R10,R10, LSL #+1
   \      0x2C6   0xEB00 0x0181      ADD      R1,R0,R1, LSL #+2
   \      0x2CA   0x9808             LDR      R0,[SP, #+32]
   \      0x2CC   0x....'....        BL       mpi_montmul
   \      0x2D0   0x4683             MOV      R11,R0
   \      0x2D2   0x2800             CMP      R0,#+0
   \      0x2D4   0xD174             BNE.N    ??mbedtls_mpi_exp_mod_9
   1800          
   1801                      state--;
   \      0x2D6   0x2601             MOVS     R6,#+1
   1802                      nbits = 0;
   \      0x2D8   0x2400             MOVS     R4,#+0
   1803                      wbits = 0;
   \      0x2DA   0x46A2             MOV      R10,R4
   \                     ??mbedtls_mpi_exp_mod_24: (+1)
   \      0x2DC   0xF1B9 0x0F00      CMP      R9,#+0
   \      0x2E0   0xD10A             BNE.N    ??mbedtls_mpi_exp_mod_27
   \      0x2E2   0xF1B8 0x0F00      CMP      R8,#+0
   \      0x2E6   0xD103             BNE.N    ??mbedtls_mpi_exp_mod_28
   1804                  }
   1805              }
   1806          
   1807              /*
   1808               * process the remaining bits
   1809               */
   1810              for( i = 0; i < nbits; i++ )
   \      0x2E8   0xF04F 0x0800      MOV      R8,#+0
   \      0x2EC   0x9E08             LDR      R6,[SP, #+32]
   \      0x2EE   0xE047             B.N      ??mbedtls_mpi_exp_mod_29
   \                     ??mbedtls_mpi_exp_mod_28: (+1)
   \      0x2F0   0xF1A8 0x0801      SUB      R8,R8,#+1
   \      0x2F4   0xF04F 0x0920      MOV      R9,#+32
   \                     ??mbedtls_mpi_exp_mod_27: (+1)
   \      0x2F8   0xF1A9 0x0901      SUB      R9,R9,#+1
   \      0x2FC   0x980C             LDR      R0,[SP, #+48]
   \      0x2FE   0x6880             LDR      R0,[R0, #+8]
   \      0x300   0xF850 0x1028      LDR      R1,[R0, R8, LSL #+2]
   \      0x304   0xFA21 0xF109      LSR      R1,R1,R9
   \      0x308   0xF001 0x0101      AND      R1,R1,#0x1
   \      0x30C   0xEA56 0x0001      ORRS     R0,R6,R1
   \      0x310   0xD0E4             BEQ.N    ??mbedtls_mpi_exp_mod_24
   \      0x312   0x2900             CMP      R1,#+0
   \      0x314   0xD10D             BNE.N    ??mbedtls_mpi_exp_mod_30
   \      0x316   0x2E01             CMP      R6,#+1
   \      0x318   0xD10B             BNE.N    ??mbedtls_mpi_exp_mod_30
   \      0x31A   0xA802             ADD      R0,SP,#+8
   \      0x31C   0x9000             STR      R0,[SP, #+0]
   \      0x31E   0x9B01             LDR      R3,[SP, #+4]
   \      0x320   0x462A             MOV      R2,R5
   \      0x322   0x9908             LDR      R1,[SP, #+32]
   \      0x324   0x4608             MOV      R0,R1
   \      0x326   0x....'....        BL       mpi_montmul
   \      0x32A   0x4683             MOV      R11,R0
   \      0x32C   0x2800             CMP      R0,#+0
   \      0x32E   0xD147             BNE.N    ??mbedtls_mpi_exp_mod_9
   \      0x330   0xE7D4             B.N      ??mbedtls_mpi_exp_mod_24
   \                     ??mbedtls_mpi_exp_mod_30: (+1)
   \      0x332   0x2602             MOVS     R6,#+2
   \      0x334   0x1C64             ADDS     R4,R4,#+1
   \      0x336   0x1B38             SUBS     R0,R7,R4
   \      0x338   0x4081             LSLS     R1,R1,R0
   \      0x33A   0xEA41 0x0A0A      ORR      R10,R1,R10
   \      0x33E   0x42BC             CMP      R4,R7
   \      0x340   0xD1CC             BNE.N    ??mbedtls_mpi_exp_mod_24
   \      0x342   0x2600             MOVS     R6,#+0
   \      0x344   0x9C08             LDR      R4,[SP, #+32]
   \      0x346   0xE7B4             B.N      ??mbedtls_mpi_exp_mod_26
   1811              {
   1812                  MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
   \                     ??mbedtls_mpi_exp_mod_31: (+1)
   \      0x348   0xA802             ADD      R0,SP,#+8
   \      0x34A   0x9000             STR      R0,[SP, #+0]
   \      0x34C   0x9B01             LDR      R3,[SP, #+4]
   \      0x34E   0x462A             MOV      R2,R5
   \      0x350   0x4631             MOV      R1,R6
   \      0x352   0x4630             MOV      R0,R6
   \      0x354   0x....'....        BL       mpi_montmul
   \      0x358   0x2800             CMP      R0,#+0
   \      0x35A   0xD159             BNE.N    ??mbedtls_mpi_exp_mod_21
   1813          
   1814                  wbits <<= 1;
   \      0x35C   0xEA4F 0x0A4A      LSL      R10,R10,#+1
   1815          
   1816                  if( ( wbits & ( one << wsize ) ) != 0 )
   \      0x360   0x4650             MOV      R0,R10
   \      0x362   0x40F8             LSRS     R0,R0,R7
   \      0x364   0x07C0             LSLS     R0,R0,#+31
   \      0x366   0xD509             BPL.N    ??mbedtls_mpi_exp_mod_32
   1817                      MBEDTLS_MPI_CHK( mpi_montmul( X, &W[1], N, mm, &T ) );
   \      0x368   0xA802             ADD      R0,SP,#+8
   \      0x36A   0x9000             STR      R0,[SP, #+0]
   \      0x36C   0x9B01             LDR      R3,[SP, #+4]
   \      0x36E   0x462A             MOV      R2,R5
   \      0x370   0xA911             ADD      R1,SP,#+68
   \      0x372   0x4630             MOV      R0,R6
   \      0x374   0x....'....        BL       mpi_montmul
   \      0x378   0x2800             CMP      R0,#+0
   \      0x37A   0xD149             BNE.N    ??mbedtls_mpi_exp_mod_21
   1818              }
   \                     ??mbedtls_mpi_exp_mod_32: (+1)
   \      0x37C   0xF108 0x0801      ADD      R8,R8,#+1
   \                     ??mbedtls_mpi_exp_mod_29: (+1)
   \      0x380   0x45A0             CMP      R8,R4
   \      0x382   0xD3E1             BCC.N    ??mbedtls_mpi_exp_mod_31
   1819          
   1820              /*
   1821               * X = A^E * R * R^-1 mod N = A^E mod N
   1822               */
   1823              MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
   \      0x384   0xAB02             ADD      R3,SP,#+8
   \      0x386   0x9A01             LDR      R2,[SP, #+4]
   \      0x388   0x4629             MOV      R1,R5
   \      0x38A   0x4630             MOV      R0,R6
   \      0x38C   0x....'....        BL       mpi_montred
   \      0x390   0x4683             MOV      R11,R0
   \      0x392   0x2800             CMP      R0,#+0
   \      0x394   0xD114             BNE.N    ??mbedtls_mpi_exp_mod_9
   1824          
   1825              if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
   \      0x396   0x980D             LDR      R0,[SP, #+52]
   \      0x398   0x2800             CMP      R0,#+0
   \      0x39A   0xD011             BEQ.N    ??mbedtls_mpi_exp_mod_9
   \      0x39C   0x980C             LDR      R0,[SP, #+48]
   \      0x39E   0x6840             LDR      R0,[R0, #+4]
   \      0x3A0   0x2800             CMP      R0,#+0
   \      0x3A2   0xD00D             BEQ.N    ??mbedtls_mpi_exp_mod_9
   \      0x3A4   0x980C             LDR      R0,[SP, #+48]
   \      0x3A6   0x6880             LDR      R0,[R0, #+8]
   \      0x3A8   0x7800             LDRB     R0,[R0, #+0]
   \      0x3AA   0x07C0             LSLS     R0,R0,#+31
   \      0x3AC   0xD508             BPL.N    ??mbedtls_mpi_exp_mod_9
   1826              {
   1827                  X->s = -1;
   \      0x3AE   0xF04F 0x30FF      MOV      R0,#-1
   \      0x3B2   0x6030             STR      R0,[R6, #+0]
   1828                  MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
   \      0x3B4   0x4632             MOV      R2,R6
   \      0x3B6   0x4629             MOV      R1,R5
   \      0x3B8   0x4630             MOV      R0,R6
   \      0x3BA   0x....'....        BL       mbedtls_mpi_add_mpi
   \      0x3BE   0x4683             MOV      R11,R0
   1829              }
   1830          
   1831          cleanup:
   1832          
   1833              for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
   \                     ??mbedtls_mpi_exp_mod_9: (+1)
   \      0x3C0   0x2401             MOVS     R4,#+1
   \      0x3C2   0x4638             MOV      R0,R7
   \      0x3C4   0x1E45             SUBS     R5,R0,#+1
   \      0x3C6   0xFA04 0xF505      LSL      R5,R4,R5
   \      0x3CA   0xE007             B.N      ??mbedtls_mpi_exp_mod_33
   1834                  mbedtls_mpi_free( &W[i] );
   \                     ??mbedtls_mpi_exp_mod_34: (+1)
   \      0x3CC   0xA80E             ADD      R0,SP,#+56
   \      0x3CE   0xEB05 0x0145      ADD      R1,R5,R5, LSL #+1
   \      0x3D2   0xEB00 0x0081      ADD      R0,R0,R1, LSL #+2
   \      0x3D6   0x....'....        BL       mbedtls_mpi_free
   \      0x3DA   0x1C6D             ADDS     R5,R5,#+1
   \                     ??mbedtls_mpi_exp_mod_33: (+1)
   \      0x3DC   0xFA04 0xF007      LSL      R0,R4,R7
   \      0x3E0   0x4285             CMP      R5,R0
   \      0x3E2   0xD3F3             BCC.N    ??mbedtls_mpi_exp_mod_34
   1835          
   1836              mbedtls_mpi_free( &W[1] ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &Apos );
   \      0x3E4   0xA811             ADD      R0,SP,#+68
   \      0x3E6   0x....'....        BL       mbedtls_mpi_free
   \      0x3EA   0xA802             ADD      R0,SP,#+8
   \      0x3EC   0x....'....        BL       mbedtls_mpi_free
   \      0x3F0   0xA809             ADD      R0,SP,#+36
   \      0x3F2   0x....'....        BL       mbedtls_mpi_free
   1837          
   1838              if( _RR == NULL || _RR->p == NULL )
   \      0x3F6   0x9824             LDR      R0,[SP, #+144]
   \      0x3F8   0x2800             CMP      R0,#+0
   \      0x3FA   0xD002             BEQ.N    ??mbedtls_mpi_exp_mod_35
   \      0x3FC   0x6880             LDR      R0,[R0, #+8]
   \      0x3FE   0x2800             CMP      R0,#+0
   \      0x400   0xD102             BNE.N    ??mbedtls_mpi_exp_mod_36
   1839                  mbedtls_mpi_free( &RR );
   \                     ??mbedtls_mpi_exp_mod_35: (+1)
   \      0x402   0xA805             ADD      R0,SP,#+20
   \      0x404   0x....'....        BL       mbedtls_mpi_free
   1840          
   1841              return( ret );
   \                     ??mbedtls_mpi_exp_mod_36: (+1)
   \      0x408   0x4658             MOV      R0,R11
   \                     ??mbedtls_mpi_exp_mod_2: (+1)
   \      0x40A   0xB01B             ADD      SP,SP,#+108
   \      0x40C   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   \                     ??mbedtls_mpi_exp_mod_21: (+1)
   \      0x410   0x4683             MOV      R11,R0
   \      0x412   0xE7D5             B.N      ??mbedtls_mpi_exp_mod_9
   1842          }
   1843          
   1844          /*
   1845           * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)
   1846           */
   1847          #if defined(MBEDTLS_MPI_GCD_ALT)
   1848          int mbedtls_mpi_gcd_orig( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )
   1849          #else

   \                                 In section .text, align 2, keep-with-next
   1850          int mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )
   1851          #endif /* MBEDTLS_MPI_GCD_ALT */
   1852          {
   \                     mbedtls_mpi_gcd: (+1)
   \        0x0   0xB578             PUSH     {R3-R6,LR}
   \        0x2   0xB089             SUB      SP,SP,#+36
   \        0x4   0x4605             MOV      R5,R0
   \        0x6   0x460C             MOV      R4,R1
   \        0x8   0x4616             MOV      R6,R2
   1853              int ret;
   1854              size_t lz, lzt;
   1855              mbedtls_mpi TG, TA, TB;
   1856          
   1857              mbedtls_mpi_init( &TG ); mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );
   \        0xA   0xA806             ADD      R0,SP,#+24
   \        0xC   0x....'....        BL       mbedtls_mpi_init
   \       0x10   0xA803             ADD      R0,SP,#+12
   \       0x12   0x....'....        BL       mbedtls_mpi_init
   \       0x16   0x4668             MOV      R0,SP
   \       0x18   0x....'....        BL       mbedtls_mpi_init
   1858          
   1859              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
   \       0x1C   0x4621             MOV      R1,R4
   \       0x1E   0xA803             ADD      R0,SP,#+12
   \       0x20   0x....'....        BL       mbedtls_mpi_copy
   \       0x24   0x0004             MOVS     R4,R0
   \       0x26   0xD164             BNE.N    ??mbedtls_mpi_gcd_0
   1860              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
   \       0x28   0x4631             MOV      R1,R6
   \       0x2A   0x4668             MOV      R0,SP
   \       0x2C   0x....'....        BL       mbedtls_mpi_copy
   \       0x30   0x0004             MOVS     R4,R0
   \       0x32   0xD15E             BNE.N    ??mbedtls_mpi_gcd_0
   1861          
   1862              lz = mbedtls_mpi_lsb( &TA );
   \       0x34   0xA803             ADD      R0,SP,#+12
   \       0x36   0x....'....        BL       mbedtls_mpi_lsb
   \       0x3A   0x4604             MOV      R4,R0
   1863              lzt = mbedtls_mpi_lsb( &TB );
   \       0x3C   0x4668             MOV      R0,SP
   \       0x3E   0x....'....        BL       mbedtls_mpi_lsb
   \       0x42   0x4606             MOV      R6,R0
   1864          
   1865              if( lzt < lz )
   \       0x44   0x42A6             CMP      R6,R4
   \       0x46   0xD900             BLS.N    ??mbedtls_mpi_gcd_1
   \       0x48   0x4626             MOV      R6,R4
   1866                  lz = lzt;
   1867          
   1868              MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, lz ) );
   \                     ??mbedtls_mpi_gcd_1: (+1)
   \       0x4A   0x4631             MOV      R1,R6
   \       0x4C   0xA803             ADD      R0,SP,#+12
   \       0x4E   0x....'....        BL       mbedtls_mpi_shift_r
   \       0x52   0x0004             MOVS     R4,R0
   \       0x54   0xD14D             BNE.N    ??mbedtls_mpi_gcd_0
   1869              MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, lz ) );
   \       0x56   0x4631             MOV      R1,R6
   \       0x58   0x4668             MOV      R0,SP
   \       0x5A   0x....'....        BL       mbedtls_mpi_shift_r
   \       0x5E   0x0004             MOVS     R4,R0
   \       0x60   0xD147             BNE.N    ??mbedtls_mpi_gcd_0
   1870          
   1871              TA.s = TB.s = 1;
   \       0x62   0x2001             MOVS     R0,#+1
   \       0x64   0x9000             STR      R0,[SP, #+0]
   \       0x66   0x9003             STR      R0,[SP, #+12]
   1872          
   1873              while( mbedtls_mpi_cmp_int( &TA, 0 ) != 0 )
   \                     ??mbedtls_mpi_gcd_2: (+1)
   \       0x68   0x2100             MOVS     R1,#+0
   \       0x6A   0xA803             ADD      R0,SP,#+12
   \       0x6C   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x70   0x2800             CMP      R0,#+0
   \       0x72   0xD033             BEQ.N    ??mbedtls_mpi_gcd_3
   1874              {
   1875                  MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, mbedtls_mpi_lsb( &TA ) ) );
   \       0x74   0xA803             ADD      R0,SP,#+12
   \       0x76   0x....'....        BL       mbedtls_mpi_lsb
   \       0x7A   0x4601             MOV      R1,R0
   \       0x7C   0xA803             ADD      R0,SP,#+12
   \       0x7E   0x....'....        BL       mbedtls_mpi_shift_r
   \       0x82   0x0004             MOVS     R4,R0
   \       0x84   0xD135             BNE.N    ??mbedtls_mpi_gcd_0
   1876                  MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, mbedtls_mpi_lsb( &TB ) ) );
   \       0x86   0x4668             MOV      R0,SP
   \       0x88   0x....'....        BL       mbedtls_mpi_lsb
   \       0x8C   0x4601             MOV      R1,R0
   \       0x8E   0x4668             MOV      R0,SP
   \       0x90   0x....'....        BL       mbedtls_mpi_shift_r
   \       0x94   0x0004             MOVS     R4,R0
   \       0x96   0xD12C             BNE.N    ??mbedtls_mpi_gcd_0
   1877          
   1878                  if( mbedtls_mpi_cmp_mpi( &TA, &TB ) >= 0 )
   \       0x98   0x4669             MOV      R1,SP
   \       0x9A   0xA803             ADD      R0,SP,#+12
   \       0x9C   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \       0xA0   0x2800             CMP      R0,#+0
   \       0xA2   0xD40D             BMI.N    ??mbedtls_mpi_gcd_4
   1879                  {
   1880                      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TA, &TA, &TB ) );
   \       0xA4   0x466A             MOV      R2,SP
   \       0xA6   0xA903             ADD      R1,SP,#+12
   \       0xA8   0xA803             ADD      R0,SP,#+12
   \       0xAA   0x....'....        BL       mbedtls_mpi_sub_abs
   \       0xAE   0x0004             MOVS     R4,R0
   \       0xB0   0xD11F             BNE.N    ??mbedtls_mpi_gcd_0
   1881                      MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, 1 ) );
   \       0xB2   0x2101             MOVS     R1,#+1
   \       0xB4   0xA803             ADD      R0,SP,#+12
   \       0xB6   0x....'....        BL       mbedtls_mpi_shift_r
   \       0xBA   0x0004             MOVS     R4,R0
   \       0xBC   0xD119             BNE.N    ??mbedtls_mpi_gcd_0
   \       0xBE   0xE7D3             B.N      ??mbedtls_mpi_gcd_2
   1882                  }
   1883                  else
   1884                  {
   1885                      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TB, &TB, &TA ) );
   \                     ??mbedtls_mpi_gcd_4: (+1)
   \       0xC0   0xAA03             ADD      R2,SP,#+12
   \       0xC2   0x4669             MOV      R1,SP
   \       0xC4   0x4668             MOV      R0,SP
   \       0xC6   0x....'....        BL       mbedtls_mpi_sub_abs
   \       0xCA   0x0004             MOVS     R4,R0
   \       0xCC   0xD111             BNE.N    ??mbedtls_mpi_gcd_0
   1886                      MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
   \       0xCE   0x2101             MOVS     R1,#+1
   \       0xD0   0x4668             MOV      R0,SP
   \       0xD2   0x....'....        BL       mbedtls_mpi_shift_r
   \       0xD6   0x0004             MOVS     R4,R0
   \       0xD8   0xD10B             BNE.N    ??mbedtls_mpi_gcd_0
   \       0xDA   0xE7C5             B.N      ??mbedtls_mpi_gcd_2
   1887                  }
   1888              }
   1889          
   1890              MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &TB, lz ) );
   \                     ??mbedtls_mpi_gcd_3: (+1)
   \       0xDC   0x4631             MOV      R1,R6
   \       0xDE   0x4668             MOV      R0,SP
   \       0xE0   0x....'....        BL       mbedtls_mpi_shift_l
   \       0xE4   0x0004             MOVS     R4,R0
   \       0xE6   0xD104             BNE.N    ??mbedtls_mpi_gcd_0
   1891              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( G, &TB ) );
   \       0xE8   0x4669             MOV      R1,SP
   \       0xEA   0x4628             MOV      R0,R5
   \       0xEC   0x....'....        BL       mbedtls_mpi_copy
   \       0xF0   0x4604             MOV      R4,R0
   1892          
   1893          cleanup:
   1894          
   1895              mbedtls_mpi_free( &TG ); mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TB );
   \                     ??mbedtls_mpi_gcd_0: (+1)
   \       0xF2   0xA806             ADD      R0,SP,#+24
   \       0xF4   0x....'....        BL       mbedtls_mpi_free
   \       0xF8   0xA803             ADD      R0,SP,#+12
   \       0xFA   0x....'....        BL       mbedtls_mpi_free
   \       0xFE   0x4668             MOV      R0,SP
   \      0x100   0x....'....        BL       mbedtls_mpi_free
   1896          
   1897              return( ret );
   \      0x104   0x4620             MOV      R0,R4
   \      0x106   0xB00A             ADD      SP,SP,#+40
   \      0x108   0xBD70             POP      {R4-R6,PC}       ;; return
   1898          }
   1899          
   1900          /*
   1901           * Fill X with size bytes of random.
   1902           *
   1903           * Use a temporary bytes representation to make sure the result is the same
   1904           * regardless of the platform endianness (useful when f_rng is actually
   1905           * deterministic, eg for tests).
   1906           */

   \                                 In section .text, align 2, keep-with-next
   1907          int mbedtls_mpi_fill_random( mbedtls_mpi *X, size_t size,
   1908                               int (*f_rng)(void *, unsigned char *, size_t),
   1909                               void *p_rng )
   1910          {
   \                     mbedtls_mpi_fill_random: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0xF5AD 0x7D00      SUB      SP,SP,#+512
   \        0x6   0x4605             MOV      R5,R0
   \        0x8   0x460E             MOV      R6,R1
   \        0xA   0x4614             MOV      R4,R2
   1911              int ret;
   1912              unsigned char buf[MBEDTLS_MPI_MAX_SIZE];
   1913          
   1914              if( size > MBEDTLS_MPI_MAX_SIZE )
   \        0xC   0xF240 0x2001      MOVW     R0,#+513
   \       0x10   0x4286             CMP      R6,R0
   \       0x12   0xD302             BCC.N    ??mbedtls_mpi_fill_random_0
   1915                  return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
   \       0x14   0xF06F 0x0003      MVN      R0,#+3
   \       0x18   0xE011             B.N      ??mbedtls_mpi_fill_random_1
   1916          
   1917              MBEDTLS_MPI_CHK( f_rng( p_rng, buf, size ) );
   \                     ??mbedtls_mpi_fill_random_0: (+1)
   \       0x1A   0x4632             MOV      R2,R6
   \       0x1C   0x4669             MOV      R1,SP
   \       0x1E   0x4618             MOV      R0,R3
   \       0x20   0x47A0             BLX      R4
   \       0x22   0x0004             MOVS     R4,R0
   \       0x24   0xD105             BNE.N    ??mbedtls_mpi_fill_random_2
   1918              MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( X, buf, size ) );
   \       0x26   0x4632             MOV      R2,R6
   \       0x28   0x4669             MOV      R1,SP
   \       0x2A   0x4628             MOV      R0,R5
   \       0x2C   0x....'....        BL       mbedtls_mpi_read_binary
   \       0x30   0x4604             MOV      R4,R0
   1919          
   1920          cleanup:
   1921              mbedtls_platform_zeroize( buf, sizeof( buf ) );
   \                     ??mbedtls_mpi_fill_random_2: (+1)
   \       0x32   0xF44F 0x7100      MOV      R1,#+512
   \       0x36   0x4668             MOV      R0,SP
   \       0x38   0x....'....        BL       mbedtls_platform_zeroize
   1922              return( ret );
   \       0x3C   0x4620             MOV      R0,R4
   \                     ??mbedtls_mpi_fill_random_1: (+1)
   \       0x3E   0xF50D 0x7D00      ADD      SP,SP,#+512
   \       0x42   0xBD70             POP      {R4-R6,PC}       ;; return
   1923          }
   1924          
   1925          /*
   1926           * Modular inverse: X = A^-1 mod N  (HAC 14.61 / 14.64)
   1927           */
   1928          #if defined(MBEDTLS_MPI_INV_MOD_ALT)
   1929          int mbedtls_mpi_inv_mod_orig( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *N )
   1930          #else

   \                                 In section .text, align 2, keep-with-next
   1931          int mbedtls_mpi_inv_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *N )
   1932          #endif /* MBEDTLS_MPI_INV_MOD_ALT */
   1933          {
   \                     mbedtls_mpi_inv_mod: (+1)
   \        0x0   0xB5F0             PUSH     {R4-R7,LR}
   \        0x2   0xB09B             SUB      SP,SP,#+108
   \        0x4   0x4605             MOV      R5,R0
   \        0x6   0x460F             MOV      R7,R1
   \        0x8   0x4616             MOV      R6,R2
   1934              int ret;
   1935              mbedtls_mpi G, TA, TU, U1, U2, TB, TV, V1, V2;
   1936          
   1937              if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
   \        0xA   0x2101             MOVS     R1,#+1
   \        0xC   0x4630             MOV      R0,R6
   \        0xE   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x12   0x2801             CMP      R0,#+1
   \       0x14   0xDA02             BGE.N    ??mbedtls_mpi_inv_mod_0
   1938                  return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
   \       0x16   0xF06F 0x0003      MVN      R0,#+3
   \       0x1A   0xE136             B.N      ??mbedtls_mpi_inv_mod_1
   1939          
   1940              mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TU ); mbedtls_mpi_init( &U1 ); mbedtls_mpi_init( &U2 );
   \                     ??mbedtls_mpi_inv_mod_0: (+1)
   \       0x1C   0xA812             ADD      R0,SP,#+72
   \       0x1E   0x....'....        BL       mbedtls_mpi_init
   \       0x22   0xA80F             ADD      R0,SP,#+60
   \       0x24   0x....'....        BL       mbedtls_mpi_init
   \       0x28   0xA80C             ADD      R0,SP,#+48
   \       0x2A   0x....'....        BL       mbedtls_mpi_init
   \       0x2E   0xA809             ADD      R0,SP,#+36
   \       0x30   0x....'....        BL       mbedtls_mpi_init
   1941              mbedtls_mpi_init( &G ); mbedtls_mpi_init( &TB ); mbedtls_mpi_init( &TV );
   \       0x34   0xA818             ADD      R0,SP,#+96
   \       0x36   0x....'....        BL       mbedtls_mpi_init
   \       0x3A   0xA815             ADD      R0,SP,#+84
   \       0x3C   0x....'....        BL       mbedtls_mpi_init
   \       0x40   0xA806             ADD      R0,SP,#+24
   \       0x42   0x....'....        BL       mbedtls_mpi_init
   1942              mbedtls_mpi_init( &V1 ); mbedtls_mpi_init( &V2 );
   \       0x46   0x4668             MOV      R0,SP
   \       0x48   0x....'....        BL       mbedtls_mpi_init
   \       0x4C   0xA803             ADD      R0,SP,#+12
   \       0x4E   0x....'....        BL       mbedtls_mpi_init
   1943          
   1944              MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
   \       0x52   0x4632             MOV      R2,R6
   \       0x54   0x4639             MOV      R1,R7
   \       0x56   0xA818             ADD      R0,SP,#+96
   \       0x58   0x....'....        BL       mbedtls_mpi_gcd
   \       0x5C   0x0004             MOVS     R4,R0
   \       0x5E   0xF040 0x80F8      BNE.W    ??mbedtls_mpi_inv_mod_2
   1945          
   1946              if( mbedtls_mpi_cmp_int( &G, 1 ) != 0 )
   \       0x62   0x2101             MOVS     R1,#+1
   \       0x64   0xA818             ADD      R0,SP,#+96
   \       0x66   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x6A   0x2800             CMP      R0,#+0
   \       0x6C   0xD002             BEQ.N    ??mbedtls_mpi_inv_mod_3
   1947              {
   1948                  ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
   \       0x6E   0xF06F 0x040D      MVN      R4,#+13
   1949                  goto cleanup;
   \       0x72   0xE0EE             B.N      ??mbedtls_mpi_inv_mod_2
   1950              }
   1951          
   1952              MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &TA, A, N ) );
   \                     ??mbedtls_mpi_inv_mod_3: (+1)
   \       0x74   0x4632             MOV      R2,R6
   \       0x76   0x4639             MOV      R1,R7
   \       0x78   0xA812             ADD      R0,SP,#+72
   \       0x7A   0x....'....        BL       mbedtls_mpi_mod_mpi
   \       0x7E   0x0004             MOVS     R4,R0
   \       0x80   0xF040 0x80E7      BNE.W    ??mbedtls_mpi_inv_mod_2
   1953              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TU, &TA ) );
   \       0x84   0xA912             ADD      R1,SP,#+72
   \       0x86   0xA80F             ADD      R0,SP,#+60
   \       0x88   0x....'....        BL       mbedtls_mpi_copy
   \       0x8C   0x0004             MOVS     R4,R0
   \       0x8E   0xF040 0x80E0      BNE.W    ??mbedtls_mpi_inv_mod_2
   1954              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, N ) );
   \       0x92   0x4631             MOV      R1,R6
   \       0x94   0xA815             ADD      R0,SP,#+84
   \       0x96   0x....'....        BL       mbedtls_mpi_copy
   \       0x9A   0x0004             MOVS     R4,R0
   \       0x9C   0xF040 0x80D9      BNE.W    ??mbedtls_mpi_inv_mod_2
   1955              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TV, N ) );
   \       0xA0   0x4631             MOV      R1,R6
   \       0xA2   0xA806             ADD      R0,SP,#+24
   \       0xA4   0x....'....        BL       mbedtls_mpi_copy
   \       0xA8   0x0004             MOVS     R4,R0
   \       0xAA   0xF040 0x80D2      BNE.W    ??mbedtls_mpi_inv_mod_2
   1956          
   1957              MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U1, 1 ) );
   \       0xAE   0x2101             MOVS     R1,#+1
   \       0xB0   0xA80C             ADD      R0,SP,#+48
   \       0xB2   0x....'....        BL       mbedtls_mpi_lset
   \       0xB6   0x0004             MOVS     R4,R0
   \       0xB8   0xF040 0x80CB      BNE.W    ??mbedtls_mpi_inv_mod_2
   1958              MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U2, 0 ) );
   \       0xBC   0x2100             MOVS     R1,#+0
   \       0xBE   0xA809             ADD      R0,SP,#+36
   \       0xC0   0x....'....        BL       mbedtls_mpi_lset
   \       0xC4   0x0004             MOVS     R4,R0
   \       0xC6   0xF040 0x80C4      BNE.W    ??mbedtls_mpi_inv_mod_2
   1959              MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V1, 0 ) );
   \       0xCA   0x2100             MOVS     R1,#+0
   \       0xCC   0x4668             MOV      R0,SP
   \       0xCE   0x....'....        BL       mbedtls_mpi_lset
   \       0xD2   0x0004             MOVS     R4,R0
   \       0xD4   0xF040 0x80BD      BNE.W    ??mbedtls_mpi_inv_mod_2
   1960              MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V2, 1 ) );
   \       0xD8   0x2101             MOVS     R1,#+1
   \       0xDA   0xA803             ADD      R0,SP,#+12
   \       0xDC   0x....'....        BL       mbedtls_mpi_lset
   \       0xE0   0x0004             MOVS     R4,R0
   \       0xE2   0xF040 0x80B6      BNE.W    ??mbedtls_mpi_inv_mod_2
   1961          
   1962              do
   1963              {
   1964                  while( ( TU.p[0] & 1 ) == 0 )
   \                     ??mbedtls_mpi_inv_mod_4: (+1)
   \       0xE6   0x9811             LDR      R0,[SP, #+68]
   \       0xE8   0x7800             LDRB     R0,[R0, #+0]
   \       0xEA   0x07C0             LSLS     R0,R0,#+31
   \       0xEC   0xD455             BMI.N    ??mbedtls_mpi_inv_mod_5
   1965                  {
   1966                      MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TU, 1 ) );
   \       0xEE   0x2101             MOVS     R1,#+1
   \       0xF0   0xA80F             ADD      R0,SP,#+60
   \       0xF2   0x....'....        BL       mbedtls_mpi_shift_r
   \       0xF6   0x0004             MOVS     R4,R0
   \       0xF8   0xF040 0x80AB      BNE.W    ??mbedtls_mpi_inv_mod_2
   1967          
   1968                      if( ( U1.p[0] & 1 ) != 0 || ( U2.p[0] & 1 ) != 0 )
   \       0xFC   0x980E             LDR      R0,[SP, #+56]
   \       0xFE   0x7800             LDRB     R0,[R0, #+0]
   \      0x100   0x07C0             LSLS     R0,R0,#+31
   \      0x102   0xD403             BMI.N    ??mbedtls_mpi_inv_mod_6
   \      0x104   0x980B             LDR      R0,[SP, #+44]
   \      0x106   0x7800             LDRB     R0,[R0, #+0]
   \      0x108   0x07C0             LSLS     R0,R0,#+31
   \      0x10A   0xD50F             BPL.N    ??mbedtls_mpi_inv_mod_7
   1969                      {
   1970                          MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
   \                     ??mbedtls_mpi_inv_mod_6: (+1)
   \      0x10C   0xAA15             ADD      R2,SP,#+84
   \      0x10E   0xA90C             ADD      R1,SP,#+48
   \      0x110   0xA80C             ADD      R0,SP,#+48
   \      0x112   0x....'....        BL       mbedtls_mpi_add_mpi
   \      0x116   0x0004             MOVS     R4,R0
   \      0x118   0xF040 0x809B      BNE.W    ??mbedtls_mpi_inv_mod_2
   1971                          MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
   \      0x11C   0xAA12             ADD      R2,SP,#+72
   \      0x11E   0xA909             ADD      R1,SP,#+36
   \      0x120   0xA809             ADD      R0,SP,#+36
   \      0x122   0x....'....        BL       mbedtls_mpi_sub_mpi
   \      0x126   0x0004             MOVS     R4,R0
   \      0x128   0xF040 0x8093      BNE.W    ??mbedtls_mpi_inv_mod_2
   1972                      }
   1973          
   1974                      MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
   \                     ??mbedtls_mpi_inv_mod_7: (+1)
   \      0x12C   0x2101             MOVS     R1,#+1
   \      0x12E   0xA80C             ADD      R0,SP,#+48
   \      0x130   0x....'....        BL       mbedtls_mpi_shift_r
   \      0x134   0x0004             MOVS     R4,R0
   \      0x136   0xF040 0x808C      BNE.W    ??mbedtls_mpi_inv_mod_2
   1975                      MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
   \      0x13A   0x2101             MOVS     R1,#+1
   \      0x13C   0xA809             ADD      R0,SP,#+36
   \      0x13E   0x....'....        BL       mbedtls_mpi_shift_r
   \      0x142   0x0004             MOVS     R4,R0
   \      0x144   0xF040 0x8085      BNE.W    ??mbedtls_mpi_inv_mod_2
   \      0x148   0xE7CD             B.N      ??mbedtls_mpi_inv_mod_4
   1976                  }
   1977          
   1978                  while( ( TV.p[0] & 1 ) == 0 )
   1979                  {
   1980                      MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TV, 1 ) );
   \                     ??mbedtls_mpi_inv_mod_8: (+1)
   \      0x14A   0x2101             MOVS     R1,#+1
   \      0x14C   0xA806             ADD      R0,SP,#+24
   \      0x14E   0x....'....        BL       mbedtls_mpi_shift_r
   \      0x152   0x0004             MOVS     R4,R0
   \      0x154   0xD17D             BNE.N    ??mbedtls_mpi_inv_mod_2
   1981          
   1982                      if( ( V1.p[0] & 1 ) != 0 || ( V2.p[0] & 1 ) != 0 )
   \      0x156   0x9802             LDR      R0,[SP, #+8]
   \      0x158   0x7800             LDRB     R0,[R0, #+0]
   \      0x15A   0x07C0             LSLS     R0,R0,#+31
   \      0x15C   0xD403             BMI.N    ??mbedtls_mpi_inv_mod_9
   \      0x15E   0x9805             LDR      R0,[SP, #+20]
   \      0x160   0x7800             LDRB     R0,[R0, #+0]
   \      0x162   0x07C0             LSLS     R0,R0,#+31
   \      0x164   0xD50D             BPL.N    ??mbedtls_mpi_inv_mod_10
   1983                      {
   1984                          MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, &TB ) );
   \                     ??mbedtls_mpi_inv_mod_9: (+1)
   \      0x166   0xAA15             ADD      R2,SP,#+84
   \      0x168   0x4669             MOV      R1,SP
   \      0x16A   0x4668             MOV      R0,SP
   \      0x16C   0x....'....        BL       mbedtls_mpi_add_mpi
   \      0x170   0x0004             MOVS     R4,R0
   \      0x172   0xD16E             BNE.N    ??mbedtls_mpi_inv_mod_2
   1985                          MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &TA ) );
   \      0x174   0xAA12             ADD      R2,SP,#+72
   \      0x176   0xA903             ADD      R1,SP,#+12
   \      0x178   0xA803             ADD      R0,SP,#+12
   \      0x17A   0x....'....        BL       mbedtls_mpi_sub_mpi
   \      0x17E   0x0004             MOVS     R4,R0
   \      0x180   0xD167             BNE.N    ??mbedtls_mpi_inv_mod_2
   1986                      }
   1987          
   1988                      MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V1, 1 ) );
   \                     ??mbedtls_mpi_inv_mod_10: (+1)
   \      0x182   0x2101             MOVS     R1,#+1
   \      0x184   0x4668             MOV      R0,SP
   \      0x186   0x....'....        BL       mbedtls_mpi_shift_r
   \      0x18A   0x0004             MOVS     R4,R0
   \      0x18C   0xD161             BNE.N    ??mbedtls_mpi_inv_mod_2
   1989                      MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V2, 1 ) );
   \      0x18E   0x2101             MOVS     R1,#+1
   \      0x190   0xA803             ADD      R0,SP,#+12
   \      0x192   0x....'....        BL       mbedtls_mpi_shift_r
   \      0x196   0x0004             MOVS     R4,R0
   \      0x198   0xD15B             BNE.N    ??mbedtls_mpi_inv_mod_2
   1990                  }
   \                     ??mbedtls_mpi_inv_mod_5: (+1)
   \      0x19A   0x9808             LDR      R0,[SP, #+32]
   \      0x19C   0x7800             LDRB     R0,[R0, #+0]
   \      0x19E   0x07C0             LSLS     R0,R0,#+31
   \      0x1A0   0xD5D3             BPL.N    ??mbedtls_mpi_inv_mod_8
   1991          
   1992                  if( mbedtls_mpi_cmp_mpi( &TU, &TV ) >= 0 )
   \      0x1A2   0xA906             ADD      R1,SP,#+24
   \      0x1A4   0xA80F             ADD      R0,SP,#+60
   \      0x1A6   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \      0x1AA   0x2800             CMP      R0,#+0
   \      0x1AC   0xD415             BMI.N    ??mbedtls_mpi_inv_mod_11
   1993                  {
   1994                      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TU, &TU, &TV ) );
   \      0x1AE   0xAA06             ADD      R2,SP,#+24
   \      0x1B0   0xA90F             ADD      R1,SP,#+60
   \      0x1B2   0xA80F             ADD      R0,SP,#+60
   \      0x1B4   0x....'....        BL       mbedtls_mpi_sub_mpi
   \      0x1B8   0x0004             MOVS     R4,R0
   \      0x1BA   0xD14A             BNE.N    ??mbedtls_mpi_inv_mod_2
   1995                      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U1, &U1, &V1 ) );
   \      0x1BC   0x466A             MOV      R2,SP
   \      0x1BE   0xA90C             ADD      R1,SP,#+48
   \      0x1C0   0xA80C             ADD      R0,SP,#+48
   \      0x1C2   0x....'....        BL       mbedtls_mpi_sub_mpi
   \      0x1C6   0x0004             MOVS     R4,R0
   \      0x1C8   0xD143             BNE.N    ??mbedtls_mpi_inv_mod_2
   1996                      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &V2 ) );
   \      0x1CA   0xAA03             ADD      R2,SP,#+12
   \      0x1CC   0xA909             ADD      R1,SP,#+36
   \      0x1CE   0xA809             ADD      R0,SP,#+36
   \      0x1D0   0x....'....        BL       mbedtls_mpi_sub_mpi
   \      0x1D4   0x0004             MOVS     R4,R0
   \      0x1D6   0xD13C             BNE.N    ??mbedtls_mpi_inv_mod_2
   \      0x1D8   0xE014             B.N      ??mbedtls_mpi_inv_mod_12
   1997                  }
   1998                  else
   1999                  {
   2000                      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TV, &TV, &TU ) );
   \                     ??mbedtls_mpi_inv_mod_11: (+1)
   \      0x1DA   0xAA0F             ADD      R2,SP,#+60
   \      0x1DC   0xA906             ADD      R1,SP,#+24
   \      0x1DE   0xA806             ADD      R0,SP,#+24
   \      0x1E0   0x....'....        BL       mbedtls_mpi_sub_mpi
   \      0x1E4   0x0004             MOVS     R4,R0
   \      0x1E6   0xD134             BNE.N    ??mbedtls_mpi_inv_mod_2
   2001                      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, &U1 ) );
   \      0x1E8   0xAA0C             ADD      R2,SP,#+48
   \      0x1EA   0x4669             MOV      R1,SP
   \      0x1EC   0x4668             MOV      R0,SP
   \      0x1EE   0x....'....        BL       mbedtls_mpi_sub_mpi
   \      0x1F2   0x0004             MOVS     R4,R0
   \      0x1F4   0xD12D             BNE.N    ??mbedtls_mpi_inv_mod_2
   2002                      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
   \      0x1F6   0xAA09             ADD      R2,SP,#+36
   \      0x1F8   0xA903             ADD      R1,SP,#+12
   \      0x1FA   0xA803             ADD      R0,SP,#+12
   \      0x1FC   0x....'....        BL       mbedtls_mpi_sub_mpi
   \      0x200   0x0004             MOVS     R4,R0
   \      0x202   0xD126             BNE.N    ??mbedtls_mpi_inv_mod_2
   2003                  }
   2004              }
   2005              while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );
   \                     ??mbedtls_mpi_inv_mod_12: (+1)
   \      0x204   0x2100             MOVS     R1,#+0
   \      0x206   0xA80F             ADD      R0,SP,#+60
   \      0x208   0x....'....        BL       mbedtls_mpi_cmp_int
   \      0x20C   0x2800             CMP      R0,#+0
   \      0x20E   0xF47F 0xAF6A      BNE.W    ??mbedtls_mpi_inv_mod_4
   2006          
   2007              while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
   \                     ??mbedtls_mpi_inv_mod_13: (+1)
   \      0x212   0x2100             MOVS     R1,#+0
   \      0x214   0x4668             MOV      R0,SP
   \      0x216   0x....'....        BL       mbedtls_mpi_cmp_int
   \      0x21A   0x2800             CMP      R0,#+0
   \      0x21C   0xD50E             BPL.N    ??mbedtls_mpi_inv_mod_14
   2008                  MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );
   \      0x21E   0x4632             MOV      R2,R6
   \      0x220   0x4669             MOV      R1,SP
   \      0x222   0x4668             MOV      R0,SP
   \      0x224   0x....'....        BL       mbedtls_mpi_add_mpi
   \      0x228   0x0004             MOVS     R4,R0
   \      0x22A   0xD112             BNE.N    ??mbedtls_mpi_inv_mod_2
   \      0x22C   0xE7F1             B.N      ??mbedtls_mpi_inv_mod_13
   2009          
   2010              while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )
   2011                  MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, N ) );
   \                     ??mbedtls_mpi_inv_mod_15: (+1)
   \      0x22E   0x4632             MOV      R2,R6
   \      0x230   0x4669             MOV      R1,SP
   \      0x232   0x4668             MOV      R0,SP
   \      0x234   0x....'....        BL       mbedtls_mpi_sub_mpi
   \      0x238   0x0004             MOVS     R4,R0
   \      0x23A   0xD10A             BNE.N    ??mbedtls_mpi_inv_mod_2
   \                     ??mbedtls_mpi_inv_mod_14: (+1)
   \      0x23C   0x4631             MOV      R1,R6
   \      0x23E   0x4668             MOV      R0,SP
   \      0x240   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \      0x244   0x2800             CMP      R0,#+0
   \      0x246   0xD5F2             BPL.N    ??mbedtls_mpi_inv_mod_15
   2012          
   2013              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &V1 ) );
   \      0x248   0x4669             MOV      R1,SP
   \      0x24A   0x4628             MOV      R0,R5
   \      0x24C   0x....'....        BL       mbedtls_mpi_copy
   \      0x250   0x4604             MOV      R4,R0
   2014          
   2015          cleanup:
   2016          
   2017              mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TU ); mbedtls_mpi_free( &U1 ); mbedtls_mpi_free( &U2 );
   \                     ??mbedtls_mpi_inv_mod_2: (+1)
   \      0x252   0xA812             ADD      R0,SP,#+72
   \      0x254   0x....'....        BL       mbedtls_mpi_free
   \      0x258   0xA80F             ADD      R0,SP,#+60
   \      0x25A   0x....'....        BL       mbedtls_mpi_free
   \      0x25E   0xA80C             ADD      R0,SP,#+48
   \      0x260   0x....'....        BL       mbedtls_mpi_free
   \      0x264   0xA809             ADD      R0,SP,#+36
   \      0x266   0x....'....        BL       mbedtls_mpi_free
   2018              mbedtls_mpi_free( &G ); mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TV );
   \      0x26A   0xA818             ADD      R0,SP,#+96
   \      0x26C   0x....'....        BL       mbedtls_mpi_free
   \      0x270   0xA815             ADD      R0,SP,#+84
   \      0x272   0x....'....        BL       mbedtls_mpi_free
   \      0x276   0xA806             ADD      R0,SP,#+24
   \      0x278   0x....'....        BL       mbedtls_mpi_free
   2019              mbedtls_mpi_free( &V1 ); mbedtls_mpi_free( &V2 );
   \      0x27C   0x4668             MOV      R0,SP
   \      0x27E   0x....'....        BL       mbedtls_mpi_free
   \      0x282   0xA803             ADD      R0,SP,#+12
   \      0x284   0x....'....        BL       mbedtls_mpi_free
   2020          
   2021              return( ret );
   \      0x288   0x4620             MOV      R0,R4
   \                     ??mbedtls_mpi_inv_mod_1: (+1)
   \      0x28A   0xB01B             ADD      SP,SP,#+108
   \      0x28C   0xBDF0             POP      {R4-R7,PC}       ;; return
   2022          }
   2023          
   2024          #if defined(MBEDTLS_GENPRIME)
   2025          

   \                                 In section .rodata, align 4
   2026          static const int small_prime[] =
   \                     small_prime:
   \        0x0   0x0000'0003        DC32 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61
   \              0x0000'0005  
   \              0x0000'0007  
   \              0x0000'000B  
   \              0x0000'000D  
   \              0x0000'0011  
   \              0x0000'0013  
   \              0x0000'0017  
   \              0x0000'001D  
   \              0x0000'001F  
   \              0x0000'0025  
   \              0x0000'0029  
   \              0x0000'002B  
   \              0x0000'002F  
   \              0x0000'0035  
   \              0x0000'003B  
   \              0x0000'003D  
   \       0x44   0x0000'0043        DC32 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137
   \              0x0000'0047  
   \              0x0000'0049  
   \              0x0000'004F  
   \              0x0000'0053  
   \              0x0000'0059  
   \              0x0000'0061  
   \              0x0000'0065  
   \              0x0000'0067  
   \              0x0000'006B  
   \              0x0000'006D  
   \              0x0000'0071  
   \              0x0000'007F  
   \              0x0000'0083  
   \              0x0000'0089  
   \       0x80   0x0000'008B        DC32 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199
   \              0x0000'0095  
   \              0x0000'0097  
   \              0x0000'009D  
   \              0x0000'00A3  
   \              0x0000'00A7  
   \              0x0000'00AD  
   \              0x0000'00B3  
   \              0x0000'00B5  
   \              0x0000'00BF  
   \              0x0000'00C1  
   \              0x0000'00C5  
   \              0x0000'00C7  
   \       0xB4   0x0000'00D3        DC32 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277
   \              0x0000'00DF  
   \              0x0000'00E3  
   \              0x0000'00E5  
   \              0x0000'00E9  
   \              0x0000'00EF  
   \              0x0000'00F1  
   \              0x0000'00FB  
   \              0x0000'0101  
   \              0x0000'0107  
   \              0x0000'010D  
   \              0x0000'010F  
   \              0x0000'0115  
   \       0xE8   0x0000'0119        DC32 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359
   \              0x0000'011B  
   \              0x0000'0125  
   \              0x0000'0133  
   \              0x0000'0137  
   \              0x0000'0139  
   \              0x0000'013D  
   \              0x0000'014B  
   \              0x0000'0151  
   \              0x0000'015B  
   \              0x0000'015D  
   \              0x0000'0161  
   \              0x0000'0167  
   \      0x11C   0x0000'016F        DC32 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439
   \              0x0000'0175  
   \              0x0000'017B  
   \              0x0000'017F  
   \              0x0000'0185  
   \              0x0000'018D  
   \              0x0000'0191  
   \              0x0000'0199  
   \              0x0000'01A3  
   \              0x0000'01A5  
   \              0x0000'01AF  
   \              0x0000'01B1  
   \              0x0000'01B7  
   \      0x150   0x0000'01BB        DC32 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521
   \              0x0000'01C1  
   \              0x0000'01C9  
   \              0x0000'01CD  
   \              0x0000'01CF  
   \              0x0000'01D3  
   \              0x0000'01DF  
   \              0x0000'01E7  
   \              0x0000'01EB  
   \              0x0000'01F3  
   \              0x0000'01F7  
   \              0x0000'01FD  
   \              0x0000'0209  
   \      0x184   0x0000'020B        DC32 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607
   \              0x0000'021D  
   \              0x0000'0223  
   \              0x0000'022D  
   \              0x0000'0233  
   \              0x0000'0239  
   \              0x0000'023B  
   \              0x0000'0241  
   \              0x0000'024B  
   \              0x0000'0251  
   \              0x0000'0257  
   \              0x0000'0259  
   \              0x0000'025F  
   \      0x1B8   0x0000'0265        DC32 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683
   \              0x0000'0269  
   \              0x0000'026B  
   \              0x0000'0277  
   \              0x0000'0281  
   \              0x0000'0283  
   \              0x0000'0287  
   \              0x0000'028D  
   \              0x0000'0293  
   \              0x0000'0295  
   \              0x0000'02A1  
   \              0x0000'02A5  
   \              0x0000'02AB  
   \      0x1EC   0x0000'02B3        DC32 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773
   \              0x0000'02BD  
   \              0x0000'02C5  
   \              0x0000'02CF  
   \              0x0000'02D7  
   \              0x0000'02DD  
   \              0x0000'02E3  
   \              0x0000'02E7  
   \              0x0000'02EF  
   \              0x0000'02F5  
   \              0x0000'02F9  
   \              0x0000'0301  
   \              0x0000'0305  
   \      0x220   0x0000'0313        DC32 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863
   \              0x0000'031D  
   \              0x0000'0329  
   \              0x0000'032B  
   \              0x0000'0335  
   \              0x0000'0337  
   \              0x0000'033B  
   \              0x0000'033D  
   \              0x0000'0347  
   \              0x0000'0355  
   \              0x0000'0359  
   \              0x0000'035B  
   \              0x0000'035F  
   \      0x254   0x0000'036D        DC32 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967
   \              0x0000'0371  
   \              0x0000'0373  
   \              0x0000'0377  
   \              0x0000'038B  
   \              0x0000'038F  
   \              0x0000'0397  
   \              0x0000'03A1  
   \              0x0000'03A9  
   \              0x0000'03AD  
   \              0x0000'03B3  
   \              0x0000'03B9  
   \              0x0000'03C7  
   \      0x288   0x0000'03CB        DC32 971, 977, 983, 991, 997, -103
   \              0x0000'03D1  
   \              0x0000'03D7  
   \              0x0000'03DF  
   \              0x0000'03E5  
   \              0xFFFF'FF99  
   2027          {
   2028                  3,    5,    7,   11,   13,   17,   19,   23,
   2029                 29,   31,   37,   41,   43,   47,   53,   59,
   2030                 61,   67,   71,   73,   79,   83,   89,   97,
   2031                101,  103,  107,  109,  113,  127,  131,  137,
   2032                139,  149,  151,  157,  163,  167,  173,  179,
   2033                181,  191,  193,  197,  199,  211,  223,  227,
   2034                229,  233,  239,  241,  251,  257,  263,  269,
   2035                271,  277,  281,  283,  293,  307,  311,  313,
   2036                317,  331,  337,  347,  349,  353,  359,  367,
   2037                373,  379,  383,  389,  397,  401,  409,  419,
   2038                421,  431,  433,  439,  443,  449,  457,  461,
   2039                463,  467,  479,  487,  491,  499,  503,  509,
   2040                521,  523,  541,  547,  557,  563,  569,  571,
   2041                577,  587,  593,  599,  601,  607,  613,  617,
   2042                619,  631,  641,  643,  647,  653,  659,  661,
   2043                673,  677,  683,  691,  701,  709,  719,  727,
   2044                733,  739,  743,  751,  757,  761,  769,  773,
   2045                787,  797,  809,  811,  821,  823,  827,  829,
   2046                839,  853,  857,  859,  863,  877,  881,  883,
   2047                887,  907,  911,  919,  929,  937,  941,  947,
   2048                953,  967,  971,  977,  983,  991,  997, -103
   2049          };
   2050          
   2051          /*
   2052           * Small divisors test (X must be positive)
   2053           *
   2054           * Return values:
   2055           * 0: no small factor (possible prime, more tests needed)
   2056           * 1: certain prime
   2057           * MBEDTLS_ERR_MPI_NOT_ACCEPTABLE: certain non-prime
   2058           * other negative: error
   2059           */

   \                                 In section .text, align 2, keep-with-next
   2060          static int mpi_check_small_factors( const mbedtls_mpi *X )
   2061          {
   \                     mpi_check_small_factors: (+1)
   \        0x0   0xB57C             PUSH     {R2-R6,LR}
   \        0x2   0x4604             MOV      R4,R0
   2062              int ret = 0;
   \        0x4   0x2000             MOVS     R0,#+0
   2063              size_t i;
   2064              mbedtls_mpi_uint r;
   2065          
   2066              if( ( X->p[0] & 1 ) == 0 )
   \        0x6   0x68A1             LDR      R1,[R4, #+8]
   \        0x8   0x7809             LDRB     R1,[R1, #+0]
   \        0xA   0x07C9             LSLS     R1,R1,#+31
   \        0xC   0xD51A             BPL.N    ??mpi_check_small_factors_0
   2067                  return( MBEDTLS_ERR_MPI_NOT_ACCEPTABLE );
   2068          
   2069              for( i = 0; small_prime[i] > 0; i++ )
   \        0xE   0x4605             MOV      R5,R0
   \       0x10   0x....'....        LDR.W    R6,??DataTable4_1
   \       0x14   0xE00B             B.N      ??mpi_check_small_factors_1
   2070              {
   2071                  if( mbedtls_mpi_cmp_int( X, small_prime[i] ) <= 0 )
   2072                      return( 1 );
   2073          
   2074                  MBEDTLS_MPI_CHK( mbedtls_mpi_mod_int( &r, X, small_prime[i] ) );
   \                     ??mpi_check_small_factors_2: (+1)
   \       0x16   0xF856 0x2025      LDR      R2,[R6, R5, LSL #+2]
   \       0x1A   0x4621             MOV      R1,R4
   \       0x1C   0x4668             MOV      R0,SP
   \       0x1E   0x....'....        BL       mbedtls_mpi_mod_int
   \       0x22   0x2800             CMP      R0,#+0
   \       0x24   0xD110             BNE.N    ??mpi_check_small_factors_3
   2075          
   2076                  if( r == 0 )
   \       0x26   0x9900             LDR      R1,[SP, #+0]
   \       0x28   0x2900             CMP      R1,#+0
   \       0x2A   0xD00B             BEQ.N    ??mpi_check_small_factors_0
   \       0x2C   0x1C6D             ADDS     R5,R5,#+1
   \                     ??mpi_check_small_factors_1: (+1)
   \       0x2E   0xF856 0x1025      LDR      R1,[R6, R5, LSL #+2]
   \       0x32   0x2901             CMP      R1,#+1
   \       0x34   0xDB08             BLT.N    ??mpi_check_small_factors_3
   \       0x36   0x4620             MOV      R0,R4
   \       0x38   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x3C   0x2801             CMP      R0,#+1
   \       0x3E   0xDAEA             BGE.N    ??mpi_check_small_factors_2
   \       0x40   0x2001             MOVS     R0,#+1
   \       0x42   0xBD76             POP      {R1,R2,R4-R6,PC}
   2077                      return( MBEDTLS_ERR_MPI_NOT_ACCEPTABLE );
   \                     ??mpi_check_small_factors_0: (+1)
   \       0x44   0xF06F 0x000D      MVN      R0,#+13
   2078              }
   2079          
   2080          cleanup:
   2081              return( ret );
   \                     ??mpi_check_small_factors_3: (+1)
   \       0x48   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
   2082          }
   2083          
   2084          /*
   2085           * Miller-Rabin pseudo-primality test  (HAC 4.24)
   2086           */

   \                                 In section .text, align 2, keep-with-next
   2087          static int mpi_miller_rabin( const mbedtls_mpi *X,
   2088                                       int (*f_rng)(void *, unsigned char *, size_t),
   2089                                       void *p_rng )
   2090          {
   \                     mpi_miller_rabin: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \        0x4   0xB090             SUB      SP,SP,#+64
   \        0x6   0x4605             MOV      R5,R0
   \        0x8   0x468A             MOV      R10,R1
   \        0xA   0x4690             MOV      R8,R2
   2091              int ret, count;
   2092              size_t i, j, k, n, s;
   2093              mbedtls_mpi W, R, T, A, RR;
   2094          
   2095              mbedtls_mpi_init( &W ); mbedtls_mpi_init( &R ); mbedtls_mpi_init( &T ); mbedtls_mpi_init( &A );
   \        0xC   0xA804             ADD      R0,SP,#+16
   \        0xE   0x....'....        BL       mbedtls_mpi_init
   \       0x12   0xA80A             ADD      R0,SP,#+40
   \       0x14   0x....'....        BL       mbedtls_mpi_init
   \       0x18   0xA807             ADD      R0,SP,#+28
   \       0x1A   0x....'....        BL       mbedtls_mpi_init
   \       0x1E   0xA801             ADD      R0,SP,#+4
   \       0x20   0x....'....        BL       mbedtls_mpi_init
   2096              mbedtls_mpi_init( &RR );
   \       0x24   0xA80D             ADD      R0,SP,#+52
   \       0x26   0x....'....        BL       mbedtls_mpi_init
   2097          
   2098              /*
   2099               * W = |X| - 1
   2100               * R = W >> lsb( W )
   2101               */
   2102              MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &W, X, 1 ) );
   \       0x2A   0x2201             MOVS     R2,#+1
   \       0x2C   0x4629             MOV      R1,R5
   \       0x2E   0xA804             ADD      R0,SP,#+16
   \       0x30   0x....'....        BL       mbedtls_mpi_sub_int
   \       0x34   0x0004             MOVS     R4,R0
   \       0x36   0xF040 0x80D7      BNE.W    ??mpi_miller_rabin_0
   2103              s = mbedtls_mpi_lsb( &W );
   \       0x3A   0xA804             ADD      R0,SP,#+16
   \       0x3C   0x....'....        BL       mbedtls_mpi_lsb
   \       0x40   0x4606             MOV      R6,R0
   2104              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R, &W ) );
   \       0x42   0xA904             ADD      R1,SP,#+16
   \       0x44   0xA80A             ADD      R0,SP,#+40
   \       0x46   0x....'....        BL       mbedtls_mpi_copy
   \       0x4A   0x0004             MOVS     R4,R0
   \       0x4C   0xF040 0x80CC      BNE.W    ??mpi_miller_rabin_0
   2105              MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &R, s ) );
   \       0x50   0x4631             MOV      R1,R6
   \       0x52   0xA80A             ADD      R0,SP,#+40
   \       0x54   0x....'....        BL       mbedtls_mpi_shift_r
   \       0x58   0x0004             MOVS     R4,R0
   \       0x5A   0xF040 0x80C5      BNE.W    ??mpi_miller_rabin_0
   2106          
   2107              i = mbedtls_mpi_bitlen( X );
   \       0x5E   0x4628             MOV      R0,R5
   \       0x60   0x....'....        BL       mbedtls_mpi_bitlen
   2108              /*
   2109               * HAC, table 4.4
   2110               */
   2111              n = ( ( i >= 1300 ) ?  2 : ( i >=  850 ) ?  3 :
   2112                    ( i >=  650 ) ?  4 : ( i >=  350 ) ?  8 :
   2113                    ( i >=  250 ) ? 12 : ( i >=  150 ) ? 18 : 27 );
   \       0x64   0xF240 0x5114      MOVW     R1,#+1300
   \       0x68   0x4288             CMP      R0,R1
   \       0x6A   0xD301             BCC.N    ??mpi_miller_rabin_1
   \       0x6C   0x2702             MOVS     R7,#+2
   \       0x6E   0xE019             B.N      ??mpi_miller_rabin_2
   \                     ??mpi_miller_rabin_1: (+1)
   \       0x70   0xF240 0x3152      MOVW     R1,#+850
   \       0x74   0x4288             CMP      R0,R1
   \       0x76   0xD301             BCC.N    ??mpi_miller_rabin_3
   \       0x78   0x2703             MOVS     R7,#+3
   \       0x7A   0xE013             B.N      ??mpi_miller_rabin_2
   \                     ??mpi_miller_rabin_3: (+1)
   \       0x7C   0xF240 0x218A      MOVW     R1,#+650
   \       0x80   0x4288             CMP      R0,R1
   \       0x82   0xD301             BCC.N    ??mpi_miller_rabin_4
   \       0x84   0x2704             MOVS     R7,#+4
   \       0x86   0xE00D             B.N      ??mpi_miller_rabin_2
   \                     ??mpi_miller_rabin_4: (+1)
   \       0x88   0xF5B0 0x7FAF      CMP      R0,#+350
   \       0x8C   0xD301             BCC.N    ??mpi_miller_rabin_5
   \       0x8E   0x2708             MOVS     R7,#+8
   \       0x90   0xE008             B.N      ??mpi_miller_rabin_2
   \                     ??mpi_miller_rabin_5: (+1)
   \       0x92   0x28FA             CMP      R0,#+250
   \       0x94   0xD301             BCC.N    ??mpi_miller_rabin_6
   \       0x96   0x270C             MOVS     R7,#+12
   \       0x98   0xE004             B.N      ??mpi_miller_rabin_2
   \                     ??mpi_miller_rabin_6: (+1)
   \       0x9A   0x2896             CMP      R0,#+150
   \       0x9C   0xD301             BCC.N    ??mpi_miller_rabin_7
   \       0x9E   0x2712             MOVS     R7,#+18
   \       0xA0   0xE000             B.N      ??mpi_miller_rabin_2
   \                     ??mpi_miller_rabin_7: (+1)
   \       0xA2   0x271B             MOVS     R7,#+27
   2114          
   2115              for( i = 0; i < n; i++ )
   \                     ??mpi_miller_rabin_2: (+1)
   \       0xA4   0xF04F 0x0900      MOV      R9,#+0
   \       0xA8   0xE001             B.N      ??mpi_miller_rabin_8
   \                     ??mpi_miller_rabin_9: (+1)
   \       0xAA   0xF109 0x0901      ADD      R9,R9,#+1
   \                     ??mpi_miller_rabin_8: (+1)
   \       0xAE   0x45B9             CMP      R9,R7
   \       0xB0   0xF080 0x809A      BCS.W    ??mpi_miller_rabin_0
   2116              {
   2117                  /*
   2118                   * pick a random A, 1 < A < |X| - 1
   2119                   */
   2120                  MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &A, X->n * ciL, f_rng, p_rng ) );
   \       0xB4   0x4643             MOV      R3,R8
   \       0xB6   0x4652             MOV      R2,R10
   \       0xB8   0x6869             LDR      R1,[R5, #+4]
   \       0xBA   0x0089             LSLS     R1,R1,#+2
   \       0xBC   0xA801             ADD      R0,SP,#+4
   \       0xBE   0x....'....        BL       mbedtls_mpi_fill_random
   \       0xC2   0x0004             MOVS     R4,R0
   \       0xC4   0xF040 0x8090      BNE.W    ??mpi_miller_rabin_0
   2121          
   2122                  if( mbedtls_mpi_cmp_mpi( &A, &W ) >= 0 )
   \       0xC8   0xA904             ADD      R1,SP,#+16
   \       0xCA   0xA801             ADD      R0,SP,#+4
   \       0xCC   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \       0xD0   0x2800             CMP      R0,#+0
   \       0xD2   0xD40E             BMI.N    ??mpi_miller_rabin_10
   2123                  {
   2124                      j = mbedtls_mpi_bitlen( &A ) - mbedtls_mpi_bitlen( &W );
   \       0xD4   0xA801             ADD      R0,SP,#+4
   \       0xD6   0x....'....        BL       mbedtls_mpi_bitlen
   \       0xDA   0x4604             MOV      R4,R0
   \       0xDC   0xA804             ADD      R0,SP,#+16
   \       0xDE   0x....'....        BL       mbedtls_mpi_bitlen
   \       0xE2   0x1A20             SUBS     R0,R4,R0
   2125                      MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &A, j + 1 ) );
   \       0xE4   0x1C40             ADDS     R0,R0,#+1
   \       0xE6   0x4601             MOV      R1,R0
   \       0xE8   0xA801             ADD      R0,SP,#+4
   \       0xEA   0x....'....        BL       mbedtls_mpi_shift_r
   \       0xEE   0x0004             MOVS     R4,R0
   \       0xF0   0xD17A             BNE.N    ??mpi_miller_rabin_0
   2126                  }
   2127                  A.p[0] |= 3;
   \                     ??mpi_miller_rabin_10: (+1)
   \       0xF2   0x9803             LDR      R0,[SP, #+12]
   \       0xF4   0x6800             LDR      R0,[R0, #+0]
   \       0xF6   0xF040 0x0003      ORR      R0,R0,#0x3
   \       0xFA   0x9903             LDR      R1,[SP, #+12]
   \       0xFC   0x6008             STR      R0,[R1, #+0]
   2128          
   2129                  count = 0;
   \       0xFE   0xF04F 0x0B00      MOV      R11,#+0
   2130                  do {
   2131                      MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &A, X->n * ciL, f_rng, p_rng ) );
   \                     ??mpi_miller_rabin_11: (+1)
   \      0x102   0x4643             MOV      R3,R8
   \      0x104   0x4652             MOV      R2,R10
   \      0x106   0x6869             LDR      R1,[R5, #+4]
   \      0x108   0x0089             LSLS     R1,R1,#+2
   \      0x10A   0xA801             ADD      R0,SP,#+4
   \      0x10C   0x....'....        BL       mbedtls_mpi_fill_random
   \      0x110   0x0004             MOVS     R4,R0
   \      0x112   0xD169             BNE.N    ??mpi_miller_rabin_0
   2132          
   2133                      j = mbedtls_mpi_bitlen( &A );
   \      0x114   0xA801             ADD      R0,SP,#+4
   \      0x116   0x....'....        BL       mbedtls_mpi_bitlen
   \      0x11A   0x4604             MOV      R4,R0
   2134                      k = mbedtls_mpi_bitlen( &W );
   \      0x11C   0xA804             ADD      R0,SP,#+16
   \      0x11E   0x....'....        BL       mbedtls_mpi_bitlen
   2135                      if (j > k) {
   \      0x122   0x42A0             CMP      R0,R4
   \      0x124   0xD206             BCS.N    ??mpi_miller_rabin_12
   2136                          MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &A, j - k ) );
   \      0x126   0x1A24             SUBS     R4,R4,R0
   \      0x128   0x4621             MOV      R1,R4
   \      0x12A   0xA801             ADD      R0,SP,#+4
   \      0x12C   0x....'....        BL       mbedtls_mpi_shift_r
   \      0x130   0x0004             MOVS     R4,R0
   \      0x132   0xD159             BNE.N    ??mpi_miller_rabin_0
   2137                      }
   2138          
   2139                      if (count++ > 30) {
   \                     ??mpi_miller_rabin_12: (+1)
   \      0x134   0x4658             MOV      R0,R11
   \      0x136   0xF100 0x0B01      ADD      R11,R0,#+1
   \      0x13A   0x281F             CMP      R0,#+31
   \      0x13C   0xDB02             BLT.N    ??mpi_miller_rabin_13
   2140                          return MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
   \      0x13E   0xF06F 0x000D      MVN      R0,#+13
   \      0x142   0xE061             B.N      ??mpi_miller_rabin_14
   2141                      }
   2142          
   2143                  } while ( mbedtls_mpi_cmp_mpi( &A, &W ) >= 0 ||
   2144                            mbedtls_mpi_cmp_int( &A, 1 )  <= 0    );
   \                     ??mpi_miller_rabin_13: (+1)
   \      0x144   0xA904             ADD      R1,SP,#+16
   \      0x146   0xA801             ADD      R0,SP,#+4
   \      0x148   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \      0x14C   0x2800             CMP      R0,#+0
   \      0x14E   0xD5D8             BPL.N    ??mpi_miller_rabin_11
   \      0x150   0x2101             MOVS     R1,#+1
   \      0x152   0xA801             ADD      R0,SP,#+4
   \      0x154   0x....'....        BL       mbedtls_mpi_cmp_int
   \      0x158   0x2801             CMP      R0,#+1
   \      0x15A   0xDBD2             BLT.N    ??mpi_miller_rabin_11
   2145          
   2146                  /*
   2147                   * A = A^R mod |X|
   2148                   */
   2149                  MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &A, &A, &R, X, &RR ) );
   \      0x15C   0xA80D             ADD      R0,SP,#+52
   \      0x15E   0x9000             STR      R0,[SP, #+0]
   \      0x160   0x462B             MOV      R3,R5
   \      0x162   0xAA0A             ADD      R2,SP,#+40
   \      0x164   0xA901             ADD      R1,SP,#+4
   \      0x166   0xA801             ADD      R0,SP,#+4
   \      0x168   0x....'....        BL       mbedtls_mpi_exp_mod
   \      0x16C   0x0004             MOVS     R4,R0
   \      0x16E   0xD13B             BNE.N    ??mpi_miller_rabin_0
   2150          
   2151                  if( mbedtls_mpi_cmp_mpi( &A, &W ) == 0 ||
   2152                      mbedtls_mpi_cmp_int( &A,  1 ) == 0 )
   \      0x170   0xA904             ADD      R1,SP,#+16
   \      0x172   0xA801             ADD      R0,SP,#+4
   \      0x174   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \      0x178   0x2800             CMP      R0,#+0
   \      0x17A   0xD096             BEQ.N    ??mpi_miller_rabin_9
   \      0x17C   0x2101             MOVS     R1,#+1
   \      0x17E   0xA801             ADD      R0,SP,#+4
   \      0x180   0x....'....        BL       mbedtls_mpi_cmp_int
   \      0x184   0x2800             CMP      R0,#+0
   \      0x186   0xD090             BEQ.N    ??mpi_miller_rabin_9
   2153                      continue;
   2154          
   2155                  j = 1;
   \      0x188   0xF04F 0x0B01      MOV      R11,#+1
   2156                  while( j < s && mbedtls_mpi_cmp_mpi( &A, &W ) != 0 )
   \                     ??mpi_miller_rabin_15: (+1)
   \      0x18C   0x45B3             CMP      R11,R6
   \      0x18E   0xD21C             BCS.N    ??mpi_miller_rabin_16
   \      0x190   0xA904             ADD      R1,SP,#+16
   \      0x192   0xA801             ADD      R0,SP,#+4
   \      0x194   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \      0x198   0x2800             CMP      R0,#+0
   \      0x19A   0xD016             BEQ.N    ??mpi_miller_rabin_16
   2157                  {
   2158                      /*
   2159                       * A = A * A mod |X|
   2160                       */
   2161                      MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &A, &A ) );
   \      0x19C   0xAA01             ADD      R2,SP,#+4
   \      0x19E   0xA901             ADD      R1,SP,#+4
   \      0x1A0   0xA807             ADD      R0,SP,#+28
   \      0x1A2   0x....'....        BL       mbedtls_mpi_mul_mpi
   \      0x1A6   0x0004             MOVS     R4,R0
   \      0x1A8   0xD11E             BNE.N    ??mpi_miller_rabin_0
   2162                      MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &A, &T, X  ) );
   \      0x1AA   0x462A             MOV      R2,R5
   \      0x1AC   0xA907             ADD      R1,SP,#+28
   \      0x1AE   0xA801             ADD      R0,SP,#+4
   \      0x1B0   0x....'....        BL       mbedtls_mpi_mod_mpi
   \      0x1B4   0x0004             MOVS     R4,R0
   \      0x1B6   0xD117             BNE.N    ??mpi_miller_rabin_0
   2163          
   2164                      if( mbedtls_mpi_cmp_int( &A, 1 ) == 0 )
   \      0x1B8   0x2101             MOVS     R1,#+1
   \      0x1BA   0xA801             ADD      R0,SP,#+4
   \      0x1BC   0x....'....        BL       mbedtls_mpi_cmp_int
   \      0x1C0   0x2800             CMP      R0,#+0
   \      0x1C2   0xD002             BEQ.N    ??mpi_miller_rabin_16
   2165                          break;
   2166          
   2167                      j++;
   \      0x1C4   0xF10B 0x0B01      ADD      R11,R11,#+1
   \      0x1C8   0xE7E0             B.N      ??mpi_miller_rabin_15
   2168                  }
   2169          
   2170                  /*
   2171                   * not prime if A != |X| - 1 or A == 1
   2172                   */
   2173                  if( mbedtls_mpi_cmp_mpi( &A, &W ) != 0 ||
   2174                      mbedtls_mpi_cmp_int( &A,  1 ) == 0 )
   \                     ??mpi_miller_rabin_16: (+1)
   \      0x1CA   0xA904             ADD      R1,SP,#+16
   \      0x1CC   0xA801             ADD      R0,SP,#+4
   \      0x1CE   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \      0x1D2   0x2800             CMP      R0,#+0
   \      0x1D4   0xD106             BNE.N    ??mpi_miller_rabin_17
   \      0x1D6   0x2101             MOVS     R1,#+1
   \      0x1D8   0xA801             ADD      R0,SP,#+4
   \      0x1DA   0x....'....        BL       mbedtls_mpi_cmp_int
   \      0x1DE   0x2800             CMP      R0,#+0
   \      0x1E0   0xF47F 0xAF63      BNE.W    ??mpi_miller_rabin_9
   2175                  {
   2176                      ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
   \                     ??mpi_miller_rabin_17: (+1)
   \      0x1E4   0xF06F 0x040D      MVN      R4,#+13
   2177                      break;
   2178                  }
   2179              }
   2180          
   2181          cleanup:
   2182              mbedtls_mpi_free( &W ); mbedtls_mpi_free( &R ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &A );
   \                     ??mpi_miller_rabin_0: (+1)
   \      0x1E8   0xA804             ADD      R0,SP,#+16
   \      0x1EA   0x....'....        BL       mbedtls_mpi_free
   \      0x1EE   0xA80A             ADD      R0,SP,#+40
   \      0x1F0   0x....'....        BL       mbedtls_mpi_free
   \      0x1F4   0xA807             ADD      R0,SP,#+28
   \      0x1F6   0x....'....        BL       mbedtls_mpi_free
   \      0x1FA   0xA801             ADD      R0,SP,#+4
   \      0x1FC   0x....'....        BL       mbedtls_mpi_free
   2183              mbedtls_mpi_free( &RR );
   \      0x200   0xA80D             ADD      R0,SP,#+52
   \      0x202   0x....'....        BL       mbedtls_mpi_free
   2184          
   2185              return( ret );
   \      0x206   0x4620             MOV      R0,R4
   \                     ??mpi_miller_rabin_14: (+1)
   \      0x208   0xB011             ADD      SP,SP,#+68
   \      0x20A   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   2186          }
   2187          
   2188          /*
   2189           * Pseudo-primality test: small factors, then Miller-Rabin
   2190           */
   2191          #if defined(MBEDTLS_MPI_IS_PRIME_ALT)
   2192          int mbedtls_mpi_is_prime_orig( const mbedtls_mpi *X,
   2193                            int (*f_rng)(void *, unsigned char *, size_t),
   2194                            void *p_rng )
   2195          #else

   \                                 In section .text, align 2, keep-with-next
   2196          int mbedtls_mpi_is_prime( const mbedtls_mpi *X,
   2197                            int (*f_rng)(void *, unsigned char *, size_t),
   2198                            void *p_rng )
   2199          #endif /* MBEDTLS_MPI_IS_PRIME_ALT */
   2200          {
   \                     mbedtls_mpi_is_prime: (+1)
   \        0x0   0xB53E             PUSH     {R1-R5,LR}
   \        0x2   0x460C             MOV      R4,R1
   \        0x4   0x4615             MOV      R5,R2
   2201              int ret;
   2202              mbedtls_mpi XX;
   2203          
   2204              XX.s = 1;
   \        0x6   0x2101             MOVS     R1,#+1
   \        0x8   0x9100             STR      R1,[SP, #+0]
   2205              XX.n = X->n;
   \        0xA   0x6841             LDR      R1,[R0, #+4]
   \        0xC   0x9101             STR      R1,[SP, #+4]
   2206              XX.p = X->p;
   \        0xE   0x6880             LDR      R0,[R0, #+8]
   \       0x10   0x9002             STR      R0,[SP, #+8]
   2207          
   2208              if( mbedtls_mpi_cmp_int( &XX, 0 ) == 0 ||
   2209                  mbedtls_mpi_cmp_int( &XX, 1 ) == 0 )
   \       0x12   0x2100             MOVS     R1,#+0
   \       0x14   0x4668             MOV      R0,SP
   \       0x16   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x1A   0x2800             CMP      R0,#+0
   \       0x1C   0xD005             BEQ.N    ??mbedtls_mpi_is_prime_0
   \       0x1E   0x2101             MOVS     R1,#+1
   \       0x20   0x4668             MOV      R0,SP
   \       0x22   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x26   0x2800             CMP      R0,#+0
   \       0x28   0xD102             BNE.N    ??mbedtls_mpi_is_prime_1
   2210                  return( MBEDTLS_ERR_MPI_NOT_ACCEPTABLE );
   \                     ??mbedtls_mpi_is_prime_0: (+1)
   \       0x2A   0xF06F 0x000D      MVN      R0,#+13
   \       0x2E   0xBD3E             POP      {R1-R5,PC}
   2211          
   2212              if( mbedtls_mpi_cmp_int( &XX, 2 ) == 0 )
   \                     ??mbedtls_mpi_is_prime_1: (+1)
   \       0x30   0x2102             MOVS     R1,#+2
   \       0x32   0x4668             MOV      R0,SP
   \       0x34   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x38   0x2800             CMP      R0,#+0
   \       0x3A   0xD101             BNE.N    ??mbedtls_mpi_is_prime_2
   2213                  return( 0 );
   \       0x3C   0x2000             MOVS     R0,#+0
   \       0x3E   0xBD3E             POP      {R1-R5,PC}
   2214          
   2215              if( ( ret = mpi_check_small_factors( &XX ) ) != 0 )
   \                     ??mbedtls_mpi_is_prime_2: (+1)
   \       0x40   0x4668             MOV      R0,SP
   \       0x42   0x....'....        BL       mpi_check_small_factors
   \       0x46   0x2800             CMP      R0,#+0
   \       0x48   0xD003             BEQ.N    ??mbedtls_mpi_is_prime_3
   2216              {
   2217                  if( ret == 1 )
   \       0x4A   0x2801             CMP      R0,#+1
   \       0x4C   0xD106             BNE.N    ??mbedtls_mpi_is_prime_4
   2218                      return( 0 );
   \       0x4E   0x2000             MOVS     R0,#+0
   \       0x50   0xBD3E             POP      {R1-R5,PC}
   2219          
   2220                  return( ret );
   2221              }
   2222          
   2223              return( mpi_miller_rabin( &XX, f_rng, p_rng ) );
   \                     ??mbedtls_mpi_is_prime_3: (+1)
   \       0x52   0x462A             MOV      R2,R5
   \       0x54   0x4621             MOV      R1,R4
   \       0x56   0x4668             MOV      R0,SP
   \       0x58   0x....'....        BL       mpi_miller_rabin
   \                     ??mbedtls_mpi_is_prime_4: (+1)
   \       0x5C   0xBD3E             POP      {R1-R5,PC}       ;; return
   2224          }
   2225          
   2226          /*
   2227           * Prime number generation
   2228           *
   2229           * If dh_flag is 0 and nbits is at least 1024, then the procedure
   2230           * follows the RSA probably-prime generation method of FIPS 186-4.
   2231           * NB. FIPS 186-4 only allows the specific bit lengths of 1024 and 1536.
   2232           */

   \                                 In section .text, align 2, keep-with-next
   2233          int mbedtls_mpi_gen_prime( mbedtls_mpi *X, size_t nbits, int dh_flag,
   2234                             int (*f_rng)(void *, unsigned char *, size_t),
   2235                             void *p_rng )
   2236          {
   \                     mbedtls_mpi_gen_prime: (+1)
   \        0x0   0xE92D 0x47FF      PUSH     {R0-R10,LR}
   \        0x4   0x4680             MOV      R8,R0
   \        0x6   0x4689             MOV      R9,R1
   \        0x8   0x4615             MOV      R5,R2
   \        0xA   0x461E             MOV      R6,R3
   2237          #ifdef MBEDTLS_HAVE_INT64
   2238          // ceil(2^63.5)
   2239          #define CEIL_MAXUINT_DIV_SQRT2 0xb504f333f9de6485ULL
   2240          #else
   2241          // ceil(2^31.5)
   2242          #define CEIL_MAXUINT_DIV_SQRT2 0xb504f334U
   2243          #endif
   2244              int ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
   2245              size_t k, n;
   2246              mbedtls_mpi_uint r;
   2247              mbedtls_mpi Y;
   2248          
   2249              if( nbits < 3 || nbits > MBEDTLS_MPI_MAX_BITS )
   \        0xC   0xF1A9 0x0003      SUB      R0,R9,#+3
   \       0x10   0xF640 0x71FE      MOVW     R1,#+4094
   \       0x14   0x4288             CMP      R0,R1
   \       0x16   0xD302             BCC.N    ??mbedtls_mpi_gen_prime_0
   2250                  return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
   \       0x18   0xF06F 0x0003      MVN      R0,#+3
   \       0x1C   0xE09A             B.N      ??mbedtls_mpi_gen_prime_1
   2251          
   2252              mbedtls_mpi_init( &Y );
   \                     ??mbedtls_mpi_gen_prime_0: (+1)
   \       0x1E   0xA801             ADD      R0,SP,#+4
   \       0x20   0x....'....        BL       mbedtls_mpi_init
   2253          
   2254              n = BITS_TO_LIMBS( nbits );
   \       0x24   0xF009 0x001F      AND      R0,R9,#0x1F
   \       0x28   0x1E40             SUBS     R0,R0,#+1
   \       0x2A   0x4180             SBCS     R0,R0,R0
   \       0x2C   0x43C0             MVNS     R0,R0
   \       0x2E   0x4649             MOV      R1,R9
   \       0x30   0x0949             LSRS     R1,R1,#+5
   \       0x32   0xEB01 0x7AD0      ADD      R10,R1,R0, LSR #+31
   \       0x36   0x9F0C             LDR      R7,[SP, #+48]
   2255          
   2256              while( 1 )
   2257              {
   2258                  MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( X, n * ciL, f_rng, p_rng ) );
   \                     ??mbedtls_mpi_gen_prime_2: (+1)
   \       0x38   0x463B             MOV      R3,R7
   \       0x3A   0x4632             MOV      R2,R6
   \       0x3C   0xEA4F 0x018A      LSL      R1,R10,#+2
   \       0x40   0x4640             MOV      R0,R8
   \       0x42   0x....'....        BL       mbedtls_mpi_fill_random
   \       0x46   0x0004             MOVS     R4,R0
   \       0x48   0xF040 0x8080      BNE.W    ??mbedtls_mpi_gen_prime_3
   2259                  /* make sure generated number is at least (nbits-1)+0.5 bits (FIPS 186-4 §B.3.3 steps 4.4, 5.5) */
   2260                  if( X->p[n-1] < CEIL_MAXUINT_DIV_SQRT2 ) continue;
   \       0x4C   0xF8D8 0x0008      LDR      R0,[R8, #+8]
   \       0x50   0xEB00 0x008A      ADD      R0,R0,R10, LSL #+2
   \       0x54   0xF850 0x0C04      LDR      R0,[R0, #-4]
   \       0x58   0x....'....        LDR.W    R1,??DataTable4_2  ;; 0xb504f334
   \       0x5C   0x4288             CMP      R0,R1
   \       0x5E   0xD3EB             BCC.N    ??mbedtls_mpi_gen_prime_2
   2261          
   2262                  k = n * biL;
   \       0x60   0xEA4F 0x114A      LSL      R1,R10,#+5
   2263                  if( k > nbits ) MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( X, k - nbits ) );
   \       0x64   0x4589             CMP      R9,R1
   \       0x66   0xD206             BCS.N    ??mbedtls_mpi_gen_prime_4
   \       0x68   0xEBA1 0x0109      SUB      R1,R1,R9
   \       0x6C   0x4640             MOV      R0,R8
   \       0x6E   0x....'....        BL       mbedtls_mpi_shift_r
   \       0x72   0x0004             MOVS     R4,R0
   \       0x74   0xD16A             BNE.N    ??mbedtls_mpi_gen_prime_3
   2264                  X->p[0] |= 1;
   \                     ??mbedtls_mpi_gen_prime_4: (+1)
   \       0x76   0xF8D8 0x0008      LDR      R0,[R8, #+8]
   \       0x7A   0x6800             LDR      R0,[R0, #+0]
   \       0x7C   0xF040 0x0001      ORR      R0,R0,#0x1
   \       0x80   0xF8D8 0x1008      LDR      R1,[R8, #+8]
   \       0x84   0x6008             STR      R0,[R1, #+0]
   2265          
   2266                  if( dh_flag == 0 )
   \       0x86   0x2D00             CMP      R5,#+0
   \       0x88   0xD148             BNE.N    ??mbedtls_mpi_gen_prime_5
   2267                  {
   2268                      ret = mbedtls_mpi_is_prime( X, f_rng, p_rng );
   \       0x8A   0x463A             MOV      R2,R7
   \       0x8C   0x4631             MOV      R1,R6
   \       0x8E   0x4640             MOV      R0,R8
   \       0x90   0x....'....        BL       mbedtls_mpi_is_prime
   \       0x94   0x4604             MOV      R4,R0
   2269          
   2270                      if( ret != MBEDTLS_ERR_MPI_NOT_ACCEPTABLE )
   \       0x96   0xF114 0x0F0E      CMN      R4,#+14
   \       0x9A   0xD157             BNE.N    ??mbedtls_mpi_gen_prime_3
   \       0x9C   0xE7CC             B.N      ??mbedtls_mpi_gen_prime_2
   2271                          goto cleanup;
   2272                  }
   2273                  else
   2274                  {
   2275                      /*
   2276                       * An necessary condition for Y and X = 2Y + 1 to be prime
   2277                       * is X = 2 mod 3 (which is equivalent to Y = 2 mod 3).
   2278                       * Make sure it is satisfied, while keeping X = 3 mod 4
   2279                       */
   2280          
   2281                      X->p[0] |= 2;
   2282          
   2283                      MBEDTLS_MPI_CHK( mbedtls_mpi_mod_int( &r, X, 3 ) );
   2284                      if( r == 0 )
   2285                          MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( X, X, 8 ) );
   2286                      else if( r == 1 )
   \                     ??mbedtls_mpi_gen_prime_6: (+1)
   \       0x9E   0x2801             CMP      R0,#+1
   \       0xA0   0xD106             BNE.N    ??mbedtls_mpi_gen_prime_7
   2287                          MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( X, X, 4 ) );
   \       0xA2   0x2204             MOVS     R2,#+4
   \       0xA4   0x4629             MOV      R1,R5
   \       0xA6   0x4628             MOV      R0,R5
   \       0xA8   0x....'....        BL       mbedtls_mpi_add_int
   \       0xAC   0x0004             MOVS     R4,R0
   \       0xAE   0xD14D             BNE.N    ??mbedtls_mpi_gen_prime_3
   2288          
   2289                      /* Set Y = (X-1) / 2, which is X / 2 because X is odd */
   2290                      MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, X ) );
   \                     ??mbedtls_mpi_gen_prime_7: (+1)
   \       0xB0   0x4629             MOV      R1,R5
   \       0xB2   0xA801             ADD      R0,SP,#+4
   \       0xB4   0x....'....        BL       mbedtls_mpi_copy
   \       0xB8   0x0004             MOVS     R4,R0
   \       0xBA   0xD147             BNE.N    ??mbedtls_mpi_gen_prime_3
   2291                      MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, 1 ) );
   \       0xBC   0x2101             MOVS     R1,#+1
   \       0xBE   0xA801             ADD      R0,SP,#+4
   \       0xC0   0x....'....        BL       mbedtls_mpi_shift_r
   \       0xC4   0x0004             MOVS     R4,R0
   \       0xC6   0xD141             BNE.N    ??mbedtls_mpi_gen_prime_3
   2292          
   2293                      while( 1 )
   2294                      {
   2295                          /*
   2296                           * First, check small factors for X and Y
   2297                           * before doing Miller-Rabin on any of them
   2298                           */
   2299                          if( ( ret = mpi_check_small_factors(  X         ) ) == 0 &&
   2300                              ( ret = mpi_check_small_factors( &Y         ) ) == 0 &&
   2301                              ( ret = mpi_miller_rabin(  X, f_rng, p_rng  ) ) == 0 &&
   2302                              ( ret = mpi_miller_rabin( &Y, f_rng, p_rng  ) ) == 0 )
   \                     ??mbedtls_mpi_gen_prime_8: (+1)
   \       0xC8   0x4628             MOV      R0,R5
   \       0xCA   0x....'....        BL       mpi_check_small_factors
   \       0xCE   0x0004             MOVS     R4,R0
   \       0xD0   0xD112             BNE.N    ??mbedtls_mpi_gen_prime_9
   \       0xD2   0xA801             ADD      R0,SP,#+4
   \       0xD4   0x....'....        BL       mpi_check_small_factors
   \       0xD8   0x0004             MOVS     R4,R0
   \       0xDA   0xD10D             BNE.N    ??mbedtls_mpi_gen_prime_9
   \       0xDC   0x463A             MOV      R2,R7
   \       0xDE   0x4631             MOV      R1,R6
   \       0xE0   0x4628             MOV      R0,R5
   \       0xE2   0x....'....        BL       mpi_miller_rabin
   \       0xE6   0x0004             MOVS     R4,R0
   \       0xE8   0xD106             BNE.N    ??mbedtls_mpi_gen_prime_9
   \       0xEA   0x463A             MOV      R2,R7
   \       0xEC   0x4631             MOV      R1,R6
   \       0xEE   0xA801             ADD      R0,SP,#+4
   \       0xF0   0x....'....        BL       mpi_miller_rabin
   \       0xF4   0x0004             MOVS     R4,R0
   \       0xF6   0xD029             BEQ.N    ??mbedtls_mpi_gen_prime_3
   2303                              goto cleanup;
   2304          
   2305                          if( ret != MBEDTLS_ERR_MPI_NOT_ACCEPTABLE )
   \                     ??mbedtls_mpi_gen_prime_9: (+1)
   \       0xF8   0xF114 0x0F0E      CMN      R4,#+14
   \       0xFC   0xD126             BNE.N    ??mbedtls_mpi_gen_prime_3
   2306                              goto cleanup;
   2307          
   2308                          /*
   2309                           * Next candidates. We want to preserve Y = (X-1) / 2 and
   2310                           * Y = 1 mod 2 and Y = 2 mod 3 (eq X = 3 mod 4 and X = 2 mod 3)
   2311                           * so up Y by 6 and X by 12.
   2312                           */
   2313                          MBEDTLS_MPI_CHK( mbedtls_mpi_add_int(  X,  X, 12 ) );
   \       0xFE   0x220C             MOVS     R2,#+12
   \      0x100   0x4629             MOV      R1,R5
   \      0x102   0x4628             MOV      R0,R5
   \      0x104   0x....'....        BL       mbedtls_mpi_add_int
   \      0x108   0x0004             MOVS     R4,R0
   \      0x10A   0xD11F             BNE.N    ??mbedtls_mpi_gen_prime_3
   2314                          MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( &Y, &Y, 6  ) );
   \      0x10C   0x2206             MOVS     R2,#+6
   \      0x10E   0xA901             ADD      R1,SP,#+4
   \      0x110   0xA801             ADD      R0,SP,#+4
   \      0x112   0x....'....        BL       mbedtls_mpi_add_int
   \      0x116   0x0004             MOVS     R4,R0
   \      0x118   0xD0D6             BEQ.N    ??mbedtls_mpi_gen_prime_8
   \      0x11A   0xE017             B.N      ??mbedtls_mpi_gen_prime_3
   2315                      }
   \                     ??mbedtls_mpi_gen_prime_5: (+1)
   \      0x11C   0x4645             MOV      R5,R8
   \      0x11E   0x68A8             LDR      R0,[R5, #+8]
   \      0x120   0x6800             LDR      R0,[R0, #+0]
   \      0x122   0xF040 0x0002      ORR      R0,R0,#0x2
   \      0x126   0x68A9             LDR      R1,[R5, #+8]
   \      0x128   0x6008             STR      R0,[R1, #+0]
   \      0x12A   0x2203             MOVS     R2,#+3
   \      0x12C   0x4629             MOV      R1,R5
   \      0x12E   0x4668             MOV      R0,SP
   \      0x130   0x....'....        BL       mbedtls_mpi_mod_int
   \      0x134   0x0004             MOVS     R4,R0
   \      0x136   0xD109             BNE.N    ??mbedtls_mpi_gen_prime_3
   \      0x138   0x9800             LDR      R0,[SP, #+0]
   \      0x13A   0x2800             CMP      R0,#+0
   \      0x13C   0xD1AF             BNE.N    ??mbedtls_mpi_gen_prime_6
   \      0x13E   0x2208             MOVS     R2,#+8
   \      0x140   0x4629             MOV      R1,R5
   \      0x142   0x4628             MOV      R0,R5
   \      0x144   0x....'....        BL       mbedtls_mpi_add_int
   \      0x148   0x0004             MOVS     R4,R0
   \      0x14A   0xD0B1             BEQ.N    ??mbedtls_mpi_gen_prime_7
   2316                  }
   2317              }
   2318          
   2319          cleanup:
   2320          
   2321              mbedtls_mpi_free( &Y );
   \                     ??mbedtls_mpi_gen_prime_3: (+1)
   \      0x14C   0xA801             ADD      R0,SP,#+4
   \      0x14E   0x....'....        BL       mbedtls_mpi_free
   2322          
   2323              return( ret );
   \      0x152   0x4620             MOV      R0,R4
   \                     ??mbedtls_mpi_gen_prime_1: (+1)
   \      0x154   0xB004             ADD      SP,SP,#+16
   \      0x156   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
   2324          }
   2325          
   2326          #endif /* MBEDTLS_GENPRIME */
   2327          
   2328          #if defined(MBEDTLS_SELF_TEST)
   2329          
   2330          #define GCD_PAIR_COUNT  3
   2331          

   \                                 In section .rodata, align 4
   2332          static const int gcd_pairs[GCD_PAIR_COUNT][3] =
   \                     gcd_pairs:
   \        0x0   0x0000'02B5        DC32 693, 609, 21, 1764, 868, 28, 768454923, 542167814, 1
   \              0x0000'0261  
   \              0x0000'0015  
   \              0x0000'06E4  
   \              0x0000'0364  
   \              0x0000'001C  
   \              0x2DCD'B10B  
   \              0x2050'D306  
   \              0x0000'0001  
   2333          {
   2334              { 693, 609, 21 },
   2335              { 1764, 868, 28 },
   2336              { 768454923, 542167814, 1 }
   2337          };
   2338          
   2339          /*
   2340           * Checkup routine
   2341           */

   \                                 In section .text, align 2, keep-with-next
   2342          int mbedtls_mpi_self_test( int verbose )
   2343          {
   \                     mbedtls_mpi_self_test: (+1)
   \        0x0   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \        0x4   0xB096             SUB      SP,SP,#+88
   \        0x6   0x4605             MOV      R5,R0
   2344              int ret, i;
   2345              mbedtls_mpi A, E, N, X, Y, U, V;
   2346          
   2347              mbedtls_mpi_init( &A ); mbedtls_mpi_init( &E ); mbedtls_mpi_init( &N ); mbedtls_mpi_init( &X );
   \        0x8   0xA807             ADD      R0,SP,#+28
   \        0xA   0x....'....        BL       mbedtls_mpi_init
   \        0xE   0xA813             ADD      R0,SP,#+76
   \       0x10   0x....'....        BL       mbedtls_mpi_init
   \       0x14   0xA80D             ADD      R0,SP,#+52
   \       0x16   0x....'....        BL       mbedtls_mpi_init
   \       0x1A   0xA801             ADD      R0,SP,#+4
   \       0x1C   0x....'....        BL       mbedtls_mpi_init
   2348              mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &U ); mbedtls_mpi_init( &V );
   \       0x20   0xA80A             ADD      R0,SP,#+40
   \       0x22   0x....'....        BL       mbedtls_mpi_init
   \       0x26   0xA804             ADD      R0,SP,#+16
   \       0x28   0x....'....        BL       mbedtls_mpi_init
   \       0x2C   0xA810             ADD      R0,SP,#+64
   \       0x2E   0x....'....        BL       mbedtls_mpi_init
   2349          
   2350              MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &A, 16,
   2351                  "EFE021C2645FD1DC586E69184AF4A31E" \
   2352                  "D5F53E93B5F123FA41680867BA110131" \
   2353                  "944FE7952E2517337780CB0DB80E61AA" \
   2354                  "E7C8DDC6C5C6AADEB34EB38A2F40D5E6" ) );
   \       0x32   0x....             LDR.N    R2,??DataTable4_3
   \       0x34   0x2110             MOVS     R1,#+16
   \       0x36   0xA807             ADD      R0,SP,#+28
   \       0x38   0x....'....        BL       mbedtls_mpi_read_string
   \       0x3C   0x0004             MOVS     R4,R0
   \       0x3E   0xF040 0x80F4      BNE.W    ??mbedtls_mpi_self_test_0
   2355          
   2356              MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &E, 16,
   2357                  "B2E7EFD37075B9F03FF989C7C5051C20" \
   2358                  "34D2A323810251127E7BF8625A4F49A5" \
   2359                  "F3E27F4DA8BD59C47D6DAABA4C8127BD" \
   2360                  "5B5C25763222FEFCCFC38B832366C29E" ) );
   \       0x42   0x....             LDR.N    R2,??DataTable4_4
   \       0x44   0x2110             MOVS     R1,#+16
   \       0x46   0xA813             ADD      R0,SP,#+76
   \       0x48   0x....'....        BL       mbedtls_mpi_read_string
   \       0x4C   0x0004             MOVS     R4,R0
   \       0x4E   0xF040 0x80EC      BNE.W    ??mbedtls_mpi_self_test_0
   2361          
   2362              MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &N, 16,
   2363                  "0066A198186C18C10B2F5ED9B522752A" \
   2364                  "9830B69916E535C8F047518A889A43A5" \
   2365                  "94B6BED27A168D31D4A52F88925AA8F5" ) );
   \       0x52   0x....             LDR.N    R2,??DataTable4_5
   \       0x54   0x2110             MOVS     R1,#+16
   \       0x56   0xA80D             ADD      R0,SP,#+52
   \       0x58   0x....'....        BL       mbedtls_mpi_read_string
   \       0x5C   0x0004             MOVS     R4,R0
   \       0x5E   0xF040 0x80E4      BNE.W    ??mbedtls_mpi_self_test_0
   2366          
   2367              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &X, &A, &N ) );
   \       0x62   0xAA0D             ADD      R2,SP,#+52
   \       0x64   0xA907             ADD      R1,SP,#+28
   \       0x66   0xA801             ADD      R0,SP,#+4
   \       0x68   0x....'....        BL       mbedtls_mpi_mul_mpi
   \       0x6C   0x0004             MOVS     R4,R0
   \       0x6E   0xF040 0x80DC      BNE.W    ??mbedtls_mpi_self_test_0
   2368          
   2369              MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &U, 16,
   2370                  "602AB7ECA597A3D6B56FF9829A5E8B85" \
   2371                  "9E857EA95A03512E2BAE7391688D264A" \
   2372                  "A5663B0341DB9CCFD2C4C5F421FEC814" \
   2373                  "8001B72E848A38CAE1C65F78E56ABDEF" \
   2374                  "E12D3C039B8A02D6BE593F0BBBDA56F1" \
   2375                  "ECF677152EF804370C1A305CAF3B5BF1" \
   2376                  "30879B56C61DE584A0F53A2447A51E" ) );
   \       0x72   0x....             LDR.N    R2,??DataTable4_6
   \       0x74   0x2110             MOVS     R1,#+16
   \       0x76   0xA804             ADD      R0,SP,#+16
   \       0x78   0x....'....        BL       mbedtls_mpi_read_string
   \       0x7C   0x0004             MOVS     R4,R0
   \       0x7E   0xF040 0x80D4      BNE.W    ??mbedtls_mpi_self_test_0
   2377          
   2378              if( verbose != 0 )
   \       0x82   0x2D00             CMP      R5,#+0
   \       0x84   0xD002             BEQ.N    ??mbedtls_mpi_self_test_1
   2379                  mbedtls_printf( "  MPI test #1 (mul_mpi): " );
   \       0x86   0x....             LDR.N    R0,??DataTable4_7
   \       0x88   0x....'....        BL       DbgConsole_Printf
   2380          
   2381              if( mbedtls_mpi_cmp_mpi( &X, &U ) != 0 )
   \                     ??mbedtls_mpi_self_test_1: (+1)
   \       0x8C   0xA904             ADD      R1,SP,#+16
   \       0x8E   0xA801             ADD      R0,SP,#+4
   \       0x90   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \       0x94   0x2800             CMP      R0,#+0
   \       0x96   0xD006             BEQ.N    ??mbedtls_mpi_self_test_2
   2382              {
   2383                  if( verbose != 0 )
   \       0x98   0x2D00             CMP      R5,#+0
   \       0x9A   0xF000 0x80BF      BEQ.W    ??mbedtls_mpi_self_test_3
   2384                      mbedtls_printf( "failed\n\r" );
   \       0x9E   0x....             LDR.N    R0,??DataTable4_8
   \       0xA0   0x....'....        BL       DbgConsole_Printf
   \       0xA4   0xE0BA             B.N      ??mbedtls_mpi_self_test_3
   2385          
   2386                  ret = 1;
   2387                  goto cleanup;
   2388              }
   2389          
   2390              if( verbose != 0 )
   \                     ??mbedtls_mpi_self_test_2: (+1)
   \       0xA6   0x2D00             CMP      R5,#+0
   \       0xA8   0xD002             BEQ.N    ??mbedtls_mpi_self_test_4
   2391                  mbedtls_printf( "passed\n\r" );
   \       0xAA   0x....             LDR.N    R0,??DataTable4_9
   \       0xAC   0x....'....        BL       DbgConsole_Printf
   2392          
   2393              MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( &X, &Y, &A, &N ) );
   \                     ??mbedtls_mpi_self_test_4: (+1)
   \       0xB0   0xAB0D             ADD      R3,SP,#+52
   \       0xB2   0xAA07             ADD      R2,SP,#+28
   \       0xB4   0xA90A             ADD      R1,SP,#+40
   \       0xB6   0xA801             ADD      R0,SP,#+4
   \       0xB8   0x....'....        BL       mbedtls_mpi_div_mpi
   \       0xBC   0x0004             MOVS     R4,R0
   \       0xBE   0xF040 0x80B4      BNE.W    ??mbedtls_mpi_self_test_0
   2394          
   2395              MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &U, 16,
   2396                  "256567336059E52CAE22925474705F39A94" ) );
   \       0xC2   0x....             LDR.N    R2,??DataTable4_10
   \       0xC4   0x2110             MOVS     R1,#+16
   \       0xC6   0xA804             ADD      R0,SP,#+16
   \       0xC8   0x....'....        BL       mbedtls_mpi_read_string
   \       0xCC   0x0004             MOVS     R4,R0
   \       0xCE   0xF040 0x80AC      BNE.W    ??mbedtls_mpi_self_test_0
   2397          
   2398              MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &V, 16,
   2399                  "6613F26162223DF488E9CD48CC132C7A" \
   2400                  "0AC93C701B001B092E4E5B9F73BCD27B" \
   2401                  "9EE50D0657C77F374E903CDFA4C642" ) );
   \       0xD2   0x....             LDR.N    R2,??DataTable4_11
   \       0xD4   0x2110             MOVS     R1,#+16
   \       0xD6   0xA810             ADD      R0,SP,#+64
   \       0xD8   0x....'....        BL       mbedtls_mpi_read_string
   \       0xDC   0x0004             MOVS     R4,R0
   \       0xDE   0xF040 0x80A4      BNE.W    ??mbedtls_mpi_self_test_0
   2402          
   2403              if( verbose != 0 )
   \       0xE2   0x2D00             CMP      R5,#+0
   \       0xE4   0xD002             BEQ.N    ??mbedtls_mpi_self_test_5
   2404                  mbedtls_printf( "  MPI test #2 (div_mpi): " );
   \       0xE6   0x....             LDR.N    R0,??DataTable4_12
   \       0xE8   0x....'....        BL       DbgConsole_Printf
   2405          
   2406              if( mbedtls_mpi_cmp_mpi( &X, &U ) != 0 ||
   2407                  mbedtls_mpi_cmp_mpi( &Y, &V ) != 0 )
   \                     ??mbedtls_mpi_self_test_5: (+1)
   \       0xEC   0xA904             ADD      R1,SP,#+16
   \       0xEE   0xA801             ADD      R0,SP,#+4
   \       0xF0   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \       0xF4   0x2800             CMP      R0,#+0
   \       0xF6   0xD105             BNE.N    ??mbedtls_mpi_self_test_6
   \       0xF8   0xA910             ADD      R1,SP,#+64
   \       0xFA   0xA80A             ADD      R0,SP,#+40
   \       0xFC   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \      0x100   0x2800             CMP      R0,#+0
   \      0x102   0xD006             BEQ.N    ??mbedtls_mpi_self_test_7
   2408              {
   2409                  if( verbose != 0 )
   \                     ??mbedtls_mpi_self_test_6: (+1)
   \      0x104   0x2D00             CMP      R5,#+0
   \      0x106   0xF000 0x8089      BEQ.W    ??mbedtls_mpi_self_test_3
   2410                      mbedtls_printf( "failed\n\r" );
   \      0x10A   0x....             LDR.N    R0,??DataTable4_8
   \      0x10C   0x....'....        BL       DbgConsole_Printf
   \      0x110   0xE084             B.N      ??mbedtls_mpi_self_test_3
   2411          
   2412                  ret = 1;
   2413                  goto cleanup;
   2414              }
   2415          
   2416              if( verbose != 0 )
   \                     ??mbedtls_mpi_self_test_7: (+1)
   \      0x112   0x2D00             CMP      R5,#+0
   \      0x114   0xD002             BEQ.N    ??mbedtls_mpi_self_test_8
   2417                  mbedtls_printf( "passed\n\r" );
   \      0x116   0x....             LDR.N    R0,??DataTable4_9
   \      0x118   0x....'....        BL       DbgConsole_Printf
   2418          
   2419              MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &X, &A, &E, &N, NULL ) );
   \                     ??mbedtls_mpi_self_test_8: (+1)
   \      0x11C   0x2000             MOVS     R0,#+0
   \      0x11E   0x9000             STR      R0,[SP, #+0]
   \      0x120   0xAB0D             ADD      R3,SP,#+52
   \      0x122   0xAA13             ADD      R2,SP,#+76
   \      0x124   0xA907             ADD      R1,SP,#+28
   \      0x126   0xA801             ADD      R0,SP,#+4
   \      0x128   0x....'....        BL       mbedtls_mpi_exp_mod
   \      0x12C   0x0004             MOVS     R4,R0
   \      0x12E   0xD17C             BNE.N    ??mbedtls_mpi_self_test_0
   2420          
   2421              MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &U, 16,
   2422                  "36E139AEA55215609D2816998ED020BB" \
   2423                  "BD96C37890F65171D948E9BC7CBAA4D9" \
   2424                  "325D24D6A3C12710F10A09FA08AB87" ) );
   \      0x130   0x....             LDR.N    R2,??DataTable4_13
   \      0x132   0x2110             MOVS     R1,#+16
   \      0x134   0xA804             ADD      R0,SP,#+16
   \      0x136   0x....'....        BL       mbedtls_mpi_read_string
   \      0x13A   0x0004             MOVS     R4,R0
   \      0x13C   0xD175             BNE.N    ??mbedtls_mpi_self_test_0
   2425          
   2426              if( verbose != 0 )
   \      0x13E   0x2D00             CMP      R5,#+0
   \      0x140   0xD002             BEQ.N    ??mbedtls_mpi_self_test_9
   2427                  mbedtls_printf( "  MPI test #3 (exp_mod): " );
   \      0x142   0x....             LDR.N    R0,??DataTable4_14
   \      0x144   0x....'....        BL       DbgConsole_Printf
   2428          
   2429              if( mbedtls_mpi_cmp_mpi( &X, &U ) != 0 )
   \                     ??mbedtls_mpi_self_test_9: (+1)
   \      0x148   0xA904             ADD      R1,SP,#+16
   \      0x14A   0xA801             ADD      R0,SP,#+4
   \      0x14C   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \      0x150   0x2800             CMP      R0,#+0
   \      0x152   0xD005             BEQ.N    ??mbedtls_mpi_self_test_10
   2430              {
   2431                  if( verbose != 0 )
   \      0x154   0x2D00             CMP      R5,#+0
   \      0x156   0xD061             BEQ.N    ??mbedtls_mpi_self_test_3
   2432                      mbedtls_printf( "failed\n\r" );
   \      0x158   0x....             LDR.N    R0,??DataTable4_8
   \      0x15A   0x....'....        BL       DbgConsole_Printf
   \      0x15E   0xE05D             B.N      ??mbedtls_mpi_self_test_3
   2433          
   2434                  ret = 1;
   2435                  goto cleanup;
   2436              }
   2437          
   2438              if( verbose != 0 )
   \                     ??mbedtls_mpi_self_test_10: (+1)
   \      0x160   0x2D00             CMP      R5,#+0
   \      0x162   0xD002             BEQ.N    ??mbedtls_mpi_self_test_11
   2439                  mbedtls_printf( "passed\n\r" );
   \      0x164   0x....             LDR.N    R0,??DataTable4_9
   \      0x166   0x....'....        BL       DbgConsole_Printf
   2440          
   2441              MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &X, &A, &N ) );
   \                     ??mbedtls_mpi_self_test_11: (+1)
   \      0x16A   0xAA0D             ADD      R2,SP,#+52
   \      0x16C   0xA907             ADD      R1,SP,#+28
   \      0x16E   0xA801             ADD      R0,SP,#+4
   \      0x170   0x....'....        BL       mbedtls_mpi_inv_mod
   \      0x174   0x0004             MOVS     R4,R0
   \      0x176   0xD158             BNE.N    ??mbedtls_mpi_self_test_0
   2442          
   2443              MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &U, 16,
   2444                  "003A0AAEDD7E784FC07D8F9EC6E3BFD5" \
   2445                  "C3DBA76456363A10869622EAC2DD84EC" \
   2446                  "C5B8A74DAC4D09E03B5E0BE779F2DF61" ) );
   \      0x178   0x....             LDR.N    R2,??DataTable4_15
   \      0x17A   0x2110             MOVS     R1,#+16
   \      0x17C   0xA804             ADD      R0,SP,#+16
   \      0x17E   0x....'....        BL       mbedtls_mpi_read_string
   \      0x182   0x0004             MOVS     R4,R0
   \      0x184   0xD151             BNE.N    ??mbedtls_mpi_self_test_0
   2447          
   2448              if( verbose != 0 )
   \      0x186   0x2D00             CMP      R5,#+0
   \      0x188   0xD002             BEQ.N    ??mbedtls_mpi_self_test_12
   2449                  mbedtls_printf( "  MPI test #4 (inv_mod): " );
   \      0x18A   0x....             LDR.N    R0,??DataTable4_16
   \      0x18C   0x....'....        BL       DbgConsole_Printf
   2450          
   2451              if( mbedtls_mpi_cmp_mpi( &X, &U ) != 0 )
   \                     ??mbedtls_mpi_self_test_12: (+1)
   \      0x190   0xA904             ADD      R1,SP,#+16
   \      0x192   0xA801             ADD      R0,SP,#+4
   \      0x194   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \      0x198   0x2800             CMP      R0,#+0
   \      0x19A   0xD005             BEQ.N    ??mbedtls_mpi_self_test_13
   2452              {
   2453                  if( verbose != 0 )
   \      0x19C   0x2D00             CMP      R5,#+0
   \      0x19E   0xD03D             BEQ.N    ??mbedtls_mpi_self_test_3
   2454                      mbedtls_printf( "failed\n\r" );
   \      0x1A0   0x....             LDR.N    R0,??DataTable4_8
   \      0x1A2   0x....'....        BL       DbgConsole_Printf
   \      0x1A6   0xE039             B.N      ??mbedtls_mpi_self_test_3
   2455          
   2456                  ret = 1;
   2457                  goto cleanup;
   2458              }
   2459          
   2460              if( verbose != 0 )
   \                     ??mbedtls_mpi_self_test_13: (+1)
   \      0x1A8   0x2D00             CMP      R5,#+0
   \      0x1AA   0xD002             BEQ.N    ??mbedtls_mpi_self_test_14
   2461                  mbedtls_printf( "passed\n\r" );
   \      0x1AC   0x....             LDR.N    R0,??DataTable4_9
   \      0x1AE   0x....'....        BL       DbgConsole_Printf
   2462          
   2463              if( verbose != 0 )
   \                     ??mbedtls_mpi_self_test_14: (+1)
   \      0x1B2   0x2D00             CMP      R5,#+0
   \      0x1B4   0xD002             BEQ.N    ??mbedtls_mpi_self_test_15
   2464                  mbedtls_printf( "  MPI test #5 (simple gcd): " );
   \      0x1B6   0x....             LDR.N    R0,??DataTable4_17
   \      0x1B8   0x....'....        BL       DbgConsole_Printf
   2465          
   2466              for( i = 0; i < GCD_PAIR_COUNT; i++ )
   \                     ??mbedtls_mpi_self_test_15: (+1)
   \      0x1BC   0x2600             MOVS     R6,#+0
   \      0x1BE   0x....'....        LDR.W    R8,??DataTable4_18
   \      0x1C2   0xE000             B.N      ??mbedtls_mpi_self_test_16
   \                     ??mbedtls_mpi_self_test_17: (+1)
   \      0x1C4   0x1C76             ADDS     R6,R6,#+1
   \                     ??mbedtls_mpi_self_test_16: (+1)
   \      0x1C6   0x2E03             CMP      R6,#+3
   \      0x1C8   0xDA2A             BGE.N    ??mbedtls_mpi_self_test_18
   2467              {
   2468                  MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &X, gcd_pairs[i][0] ) );
   \      0x1CA   0x270C             MOVS     R7,#+12
   \      0x1CC   0xFB07 0xF006      MUL      R0,R7,R6
   \      0x1D0   0xF858 0x1000      LDR      R1,[R8, R0]
   \      0x1D4   0xA801             ADD      R0,SP,#+4
   \      0x1D6   0x....'....        BL       mbedtls_mpi_lset
   \      0x1DA   0x0004             MOVS     R4,R0
   \      0x1DC   0xD125             BNE.N    ??mbedtls_mpi_self_test_0
   2469                  MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Y, gcd_pairs[i][1] ) );
   \      0x1DE   0xFB07 0xF006      MUL      R0,R7,R6
   \      0x1E2   0x4440             ADD      R0,R8,R0
   \      0x1E4   0x6841             LDR      R1,[R0, #+4]
   \      0x1E6   0xA80A             ADD      R0,SP,#+40
   \      0x1E8   0x....'....        BL       mbedtls_mpi_lset
   \      0x1EC   0x0004             MOVS     R4,R0
   \      0x1EE   0xD11C             BNE.N    ??mbedtls_mpi_self_test_0
   2470          
   2471                  MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &A, &X, &Y ) );
   \      0x1F0   0xAA0A             ADD      R2,SP,#+40
   \      0x1F2   0xA901             ADD      R1,SP,#+4
   \      0x1F4   0xA807             ADD      R0,SP,#+28
   \      0x1F6   0x....'....        BL       mbedtls_mpi_gcd
   \      0x1FA   0x0004             MOVS     R4,R0
   \      0x1FC   0xD115             BNE.N    ??mbedtls_mpi_self_test_0
   2472          
   2473                  if( mbedtls_mpi_cmp_int( &A, gcd_pairs[i][2] ) != 0 )
   \      0x1FE   0x4377             MULS     R7,R7,R6
   \      0x200   0xEB08 0x0007      ADD      R0,R8,R7
   \      0x204   0x6881             LDR      R1,[R0, #+8]
   \      0x206   0xA807             ADD      R0,SP,#+28
   \      0x208   0x....'....        BL       mbedtls_mpi_cmp_int
   \      0x20C   0x2800             CMP      R0,#+0
   \      0x20E   0xD0D9             BEQ.N    ??mbedtls_mpi_self_test_17
   2474                  {
   2475                      if( verbose != 0 )
   \      0x210   0x2D00             CMP      R5,#+0
   \      0x212   0xD003             BEQ.N    ??mbedtls_mpi_self_test_3
   2476                          mbedtls_printf( "failed at %d\n\r", i );
   \      0x214   0x4631             MOV      R1,R6
   \      0x216   0x....             LDR.N    R0,??DataTable4_19
   \      0x218   0x....'....        BL       DbgConsole_Printf
   2477          
   2478                      ret = 1;
   \                     ??mbedtls_mpi_self_test_3: (+1)
   \      0x21C   0x2401             MOVS     R4,#+1
   2479                      goto cleanup;
   \      0x21E   0xE004             B.N      ??mbedtls_mpi_self_test_0
   2480                  }
   2481              }
   2482          
   2483              if( verbose != 0 )
   \                     ??mbedtls_mpi_self_test_18: (+1)
   \      0x220   0x2D00             CMP      R5,#+0
   \      0x222   0xD002             BEQ.N    ??mbedtls_mpi_self_test_0
   2484                  mbedtls_printf( "passed\n\r" );
   \      0x224   0x....             LDR.N    R0,??DataTable4_9
   \      0x226   0x....'....        BL       DbgConsole_Printf
   2485          
   2486          cleanup:
   2487          
   2488              if( ret != 0 && verbose != 0 )
   \                     ??mbedtls_mpi_self_test_0: (+1)
   \      0x22A   0x2C00             CMP      R4,#+0
   \      0x22C   0xD005             BEQ.N    ??mbedtls_mpi_self_test_19
   \      0x22E   0x2D00             CMP      R5,#+0
   \      0x230   0xD003             BEQ.N    ??mbedtls_mpi_self_test_19
   2489                  mbedtls_printf( "Unexpected error, return code = %08X\n\r", ret );
   \      0x232   0x4621             MOV      R1,R4
   \      0x234   0x....             LDR.N    R0,??DataTable4_20
   \      0x236   0x....'....        BL       DbgConsole_Printf
   2490          
   2491              mbedtls_mpi_free( &A ); mbedtls_mpi_free( &E ); mbedtls_mpi_free( &N ); mbedtls_mpi_free( &X );
   \                     ??mbedtls_mpi_self_test_19: (+1)
   \      0x23A   0xA807             ADD      R0,SP,#+28
   \      0x23C   0x....'....        BL       mbedtls_mpi_free
   \      0x240   0xA813             ADD      R0,SP,#+76
   \      0x242   0x....'....        BL       mbedtls_mpi_free
   \      0x246   0xA80D             ADD      R0,SP,#+52
   \      0x248   0x....'....        BL       mbedtls_mpi_free
   \      0x24C   0xA801             ADD      R0,SP,#+4
   \      0x24E   0x....'....        BL       mbedtls_mpi_free
   2492              mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &U ); mbedtls_mpi_free( &V );
   \      0x252   0xA80A             ADD      R0,SP,#+40
   \      0x254   0x....'....        BL       mbedtls_mpi_free
   \      0x258   0xA804             ADD      R0,SP,#+16
   \      0x25A   0x....'....        BL       mbedtls_mpi_free
   \      0x25E   0xA810             ADD      R0,SP,#+64
   \      0x260   0x....'....        BL       mbedtls_mpi_free
   2493          
   2494              if( verbose != 0 )
   \      0x264   0x2D00             CMP      R5,#+0
   \      0x266   0xD002             BEQ.N    ??mbedtls_mpi_self_test_20
   2495                  mbedtls_printf( "\n\r" );
   \      0x268   0x....             ADR.N    R0,??DataTable4  ;; 0x0A, 0x0D, 0x00, 0x00
   \      0x26A   0x....'....        BL       DbgConsole_Printf
   2496          
   2497              return( ret );
   \                     ??mbedtls_mpi_self_test_20: (+1)
   \      0x26E   0x4620             MOV      R0,R4
   \      0x270   0xB016             ADD      SP,SP,#+88
   \      0x272   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   2498          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \        0x0   0x0A 0x0D          DC8      0x0A, 0x0D, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \        0x0   0x....'....        DC32     small_prime

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \        0x0   0xB504'F334        DC32     0xb504f334

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \        0x0   0x....'....        DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \        0x0   0x....'....        DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \        0x0   0x....'....        DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \        0x0   0x....'....        DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \        0x0   0x....'....        DC32     ?_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \        0x0   0x....'....        DC32     ?_6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_9:
   \        0x0   0x....'....        DC32     ?_7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_10:
   \        0x0   0x....'....        DC32     ?_8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_11:
   \        0x0   0x....'....        DC32     ?_9

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_12:
   \        0x0   0x....'....        DC32     ?_10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_13:
   \        0x0   0x....'....        DC32     ?_11

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_14:
   \        0x0   0x....'....        DC32     ?_12

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_15:
   \        0x0   0x....'....        DC32     ?_13

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_16:
   \        0x0   0x....'....        DC32     ?_14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_17:
   \        0x0   0x....'....        DC32     ?_15

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_18:
   \        0x0   0x....'....        DC32     gcd_pairs

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_19:
   \        0x0   0x....'....        DC32     ?_16

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_20:
   \        0x0   0x....'....        DC32     ?_17

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x30 0x31          DC8 "0123456789ABCDEF"
   \              0x32 0x33    
   \              0x34 0x35    
   \              0x36 0x37    
   \              0x38 0x39    
   \              0x41 0x42    
   \              0x43 0x44    
   \              0x45 0x46    
   \              0x00         
   \       0x11   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_1:
   \        0x0   0x45 0x46          DC8 45H, 46H, 45H, 30H, 32H, 31H, 43H, 32H
   \              0x45 0x30    
   \              0x32 0x31    
   \              0x43 0x32    
   \        0x8   0x36 0x34          DC8 36H, 34H, 35H, 46H, 44H, 31H, 44H, 43H
   \              0x35 0x46    
   \              0x44 0x31    
   \              0x44 0x43    
   \       0x10   0x35 0x38          DC8 35H, 38H, 36H, 45H, 36H, 39H, 31H, 38H
   \              0x36 0x45    
   \              0x36 0x39    
   \              0x31 0x38    
   \       0x18   0x34 0x41          DC8 34H, 41H, 46H, 34H, 41H, 33H, 31H, 45H
   \              0x46 0x34    
   \              0x41 0x33    
   \              0x31 0x45    
   \       0x20   0x44 0x35          DC8 44H, 35H, 46H, 35H, 33H, 45H, 39H, 33H
   \              0x46 0x35    
   \              0x33 0x45    
   \              0x39 0x33    
   \       0x28   0x42 0x35          DC8 42H, 35H, 46H, 31H, 32H, 33H, 46H, 41H
   \              0x46 0x31    
   \              0x32 0x33    
   \              0x46 0x41    
   \       0x30   0x34 0x31          DC8 34H, 31H, 36H, 38H, 30H, 38H, 36H, 37H
   \              0x36 0x38    
   \              0x30 0x38    
   \              0x36 0x37    
   \       0x38   0x42 0x41          DC8 42H, 41H, 31H, 31H, 30H, 31H, 33H, 31H
   \              0x31 0x31    
   \              0x30 0x31    
   \              0x33 0x31    
   \       0x40   0x39 0x34          DC8 39H, 34H, 34H, 46H, 45H, 37H, 39H, 35H
   \              0x34 0x46    
   \              0x45 0x37    
   \              0x39 0x35    
   \       0x48   0x32 0x45          DC8 32H, 45H, 32H, 35H, 31H, 37H, 33H, 33H
   \              0x32 0x35    
   \              0x31 0x37    
   \              0x33 0x33    
   \       0x50   0x37 0x37          DC8 37H, 37H, 38H, 30H, 43H, 42H, 30H, 44H
   \              0x38 0x30    
   \              0x43 0x42    
   \              0x30 0x44    
   \       0x58   0x42 0x38          DC8 42H, 38H, 30H, 45H, 36H, 31H, 41H, 41H
   \              0x30 0x45    
   \              0x36 0x31    
   \              0x41 0x41    
   \       0x60   0x45 0x37          DC8 45H, 37H, 43H, 38H, 44H, 44H, 43H, 36H
   \              0x43 0x38    
   \              0x44 0x44    
   \              0x43 0x36    
   \       0x68   0x43 0x35          DC8 43H, 35H, 43H, 36H, 41H, 41H, 44H, 45H
   \              0x43 0x36    
   \              0x41 0x41    
   \              0x44 0x45    
   \       0x70   0x42 0x33          DC8 42H, 33H, 34H, 45H, 42H, 33H, 38H, 41H
   \              0x34 0x45    
   \              0x42 0x33    
   \              0x38 0x41    
   \       0x78   0x32 0x46          DC8 32H, 46H, 34H, 30H, 44H, 35H, 45H, 36H
   \              0x34 0x30    
   \              0x44 0x35    
   \              0x45 0x36    
   \       0x80   0x00               DC8 0
   \       0x81   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_2:
   \        0x0   0x42 0x32          DC8 42H, 32H, 45H, 37H, 45H, 46H, 44H, 33H
   \              0x45 0x37    
   \              0x45 0x46    
   \              0x44 0x33    
   \        0x8   0x37 0x30          DC8 37H, 30H, 37H, 35H, 42H, 39H, 46H, 30H
   \              0x37 0x35    
   \              0x42 0x39    
   \              0x46 0x30    
   \       0x10   0x33 0x46          DC8 33H, 46H, 46H, 39H, 38H, 39H, 43H, 37H
   \              0x46 0x39    
   \              0x38 0x39    
   \              0x43 0x37    
   \       0x18   0x43 0x35          DC8 43H, 35H, 30H, 35H, 31H, 43H, 32H, 30H
   \              0x30 0x35    
   \              0x31 0x43    
   \              0x32 0x30    
   \       0x20   0x33 0x34          DC8 33H, 34H, 44H, 32H, 41H, 33H, 32H, 33H
   \              0x44 0x32    
   \              0x41 0x33    
   \              0x32 0x33    
   \       0x28   0x38 0x31          DC8 38H, 31H, 30H, 32H, 35H, 31H, 31H, 32H
   \              0x30 0x32    
   \              0x35 0x31    
   \              0x31 0x32    
   \       0x30   0x37 0x45          DC8 37H, 45H, 37H, 42H, 46H, 38H, 36H, 32H
   \              0x37 0x42    
   \              0x46 0x38    
   \              0x36 0x32    
   \       0x38   0x35 0x41          DC8 35H, 41H, 34H, 46H, 34H, 39H, 41H, 35H
   \              0x34 0x46    
   \              0x34 0x39    
   \              0x41 0x35    
   \       0x40   0x46 0x33          DC8 46H, 33H, 45H, 32H, 37H, 46H, 34H, 44H
   \              0x45 0x32    
   \              0x37 0x46    
   \              0x34 0x44    
   \       0x48   0x41 0x38          DC8 41H, 38H, 42H, 44H, 35H, 39H, 43H, 34H
   \              0x42 0x44    
   \              0x35 0x39    
   \              0x43 0x34    
   \       0x50   0x37 0x44          DC8 37H, 44H, 36H, 44H, 41H, 41H, 42H, 41H
   \              0x36 0x44    
   \              0x41 0x41    
   \              0x42 0x41    
   \       0x58   0x34 0x43          DC8 34H, 43H, 38H, 31H, 32H, 37H, 42H, 44H
   \              0x38 0x31    
   \              0x32 0x37    
   \              0x42 0x44    
   \       0x60   0x35 0x42          DC8 35H, 42H, 35H, 43H, 32H, 35H, 37H, 36H
   \              0x35 0x43    
   \              0x32 0x35    
   \              0x37 0x36    
   \       0x68   0x33 0x32          DC8 33H, 32H, 32H, 32H, 46H, 45H, 46H, 43H
   \              0x32 0x32    
   \              0x46 0x45    
   \              0x46 0x43    
   \       0x70   0x43 0x46          DC8 43H, 46H, 43H, 33H, 38H, 42H, 38H, 33H
   \              0x43 0x33    
   \              0x38 0x42    
   \              0x38 0x33    
   \       0x78   0x32 0x33          DC8 32H, 33H, 36H, 36H, 43H, 32H, 39H, 45H
   \              0x36 0x36    
   \              0x43 0x32    
   \              0x39 0x45    
   \       0x80   0x00               DC8 0
   \       0x81   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_3:
   \        0x0   0x30 0x30          DC8 30H, 30H, 36H, 36H, 41H, 31H, 39H, 38H
   \              0x36 0x36    
   \              0x41 0x31    
   \              0x39 0x38    
   \        0x8   0x31 0x38          DC8 31H, 38H, 36H, 43H, 31H, 38H, 43H, 31H
   \              0x36 0x43    
   \              0x31 0x38    
   \              0x43 0x31    
   \       0x10   0x30 0x42          DC8 30H, 42H, 32H, 46H, 35H, 45H, 44H, 39H
   \              0x32 0x46    
   \              0x35 0x45    
   \              0x44 0x39    
   \       0x18   0x42 0x35          DC8 42H, 35H, 32H, 32H, 37H, 35H, 32H, 41H
   \              0x32 0x32    
   \              0x37 0x35    
   \              0x32 0x41    
   \       0x20   0x39 0x38          DC8 39H, 38H, 33H, 30H, 42H, 36H, 39H, 39H
   \              0x33 0x30    
   \              0x42 0x36    
   \              0x39 0x39    
   \       0x28   0x31 0x36          DC8 31H, 36H, 45H, 35H, 33H, 35H, 43H, 38H
   \              0x45 0x35    
   \              0x33 0x35    
   \              0x43 0x38    
   \       0x30   0x46 0x30          DC8 46H, 30H, 34H, 37H, 35H, 31H, 38H, 41H
   \              0x34 0x37    
   \              0x35 0x31    
   \              0x38 0x41    
   \       0x38   0x38 0x38          DC8 38H, 38H, 39H, 41H, 34H, 33H, 41H, 35H
   \              0x39 0x41    
   \              0x34 0x33    
   \              0x41 0x35    
   \       0x40   0x39 0x34          DC8 39H, 34H, 42H, 36H, 42H, 45H, 44H, 32H
   \              0x42 0x36    
   \              0x42 0x45    
   \              0x44 0x32    
   \       0x48   0x37 0x41          DC8 37H, 41H, 31H, 36H, 38H, 44H, 33H, 31H
   \              0x31 0x36    
   \              0x38 0x44    
   \              0x33 0x31    
   \       0x50   0x44 0x34          DC8 44H, 34H, 41H, 35H, 32H, 46H, 38H, 38H
   \              0x41 0x35    
   \              0x32 0x46    
   \              0x38 0x38    
   \       0x58   0x39 0x32          DC8 39H, 32H, 35H, 41H, 41H, 38H, 46H, 35H
   \              0x35 0x41    
   \              0x41 0x38    
   \              0x46 0x35    
   \       0x60   0x00               DC8 0
   \       0x61   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_4:
   \        0x0   0x36 0x30          DC8 36H, 30H, 32H, 41H, 42H, 37H, 45H, 43H
   \              0x32 0x41    
   \              0x42 0x37    
   \              0x45 0x43    
   \        0x8   0x41 0x35          DC8 41H, 35H, 39H, 37H, 41H, 33H, 44H, 36H
   \              0x39 0x37    
   \              0x41 0x33    
   \              0x44 0x36    
   \       0x10   0x42 0x35          DC8 42H, 35H, 36H, 46H, 46H, 39H, 38H, 32H
   \              0x36 0x46    
   \              0x46 0x39    
   \              0x38 0x32    
   \       0x18   0x39 0x41          DC8 39H, 41H, 35H, 45H, 38H, 42H, 38H, 35H
   \              0x35 0x45    
   \              0x38 0x42    
   \              0x38 0x35    
   \       0x20   0x39 0x45          DC8 39H, 45H, 38H, 35H, 37H, 45H, 41H, 39H
   \              0x38 0x35    
   \              0x37 0x45    
   \              0x41 0x39    
   \       0x28   0x35 0x41          DC8 35H, 41H, 30H, 33H, 35H, 31H, 32H, 45H
   \              0x30 0x33    
   \              0x35 0x31    
   \              0x32 0x45    
   \       0x30   0x32 0x42          DC8 32H, 42H, 41H, 45H, 37H, 33H, 39H, 31H
   \              0x41 0x45    
   \              0x37 0x33    
   \              0x39 0x31    
   \       0x38   0x36 0x38          DC8 36H, 38H, 38H, 44H, 32H, 36H, 34H, 41H
   \              0x38 0x44    
   \              0x32 0x36    
   \              0x34 0x41    
   \       0x40   0x41 0x35          DC8 41H, 35H, 36H, 36H, 33H, 42H, 30H, 33H
   \              0x36 0x36    
   \              0x33 0x42    
   \              0x30 0x33    
   \       0x48   0x34 0x31          DC8 34H, 31H, 44H, 42H, 39H, 43H, 43H, 46H
   \              0x44 0x42    
   \              0x39 0x43    
   \              0x43 0x46    
   \       0x50   0x44 0x32          DC8 44H, 32H, 43H, 34H, 43H, 35H, 46H, 34H
   \              0x43 0x34    
   \              0x43 0x35    
   \              0x46 0x34    
   \       0x58   0x32 0x31          DC8 32H, 31H, 46H, 45H, 43H, 38H, 31H, 34H
   \              0x46 0x45    
   \              0x43 0x38    
   \              0x31 0x34    
   \       0x60   0x38 0x30          DC8 38H, 30H, 30H, 31H, 42H, 37H, 32H, 45H
   \              0x30 0x31    
   \              0x42 0x37    
   \              0x32 0x45    
   \       0x68   0x38 0x34          DC8 38H, 34H, 38H, 41H, 33H, 38H, 43H, 41H
   \              0x38 0x41    
   \              0x33 0x38    
   \              0x43 0x41    
   \       0x70   0x45 0x31          DC8 45H, 31H, 43H, 36H, 35H, 46H, 37H, 38H
   \              0x43 0x36    
   \              0x35 0x46    
   \              0x37 0x38    
   \       0x78   0x45 0x35          DC8 45H, 35H, 36H, 41H, 42H, 44H, 45H, 46H
   \              0x36 0x41    
   \              0x42 0x44    
   \              0x45 0x46    
   \       0x80   0x45 0x31          DC8 45H, 31H, 32H, 44H, 33H, 43H, 30H, 33H
   \              0x32 0x44    
   \              0x33 0x43    
   \              0x30 0x33    
   \       0x88   0x39 0x42          DC8 39H, 42H, 38H, 41H, 30H, 32H, 44H, 36H
   \              0x38 0x41    
   \              0x30 0x32    
   \              0x44 0x36    
   \       0x90   0x42 0x45          DC8 42H, 45H, 35H, 39H, 33H, 46H, 30H, 42H
   \              0x35 0x39    
   \              0x33 0x46    
   \              0x30 0x42    
   \       0x98   0x42 0x42          DC8 42H, 42H, 44H, 41H, 35H, 36H, 46H, 31H
   \              0x44 0x41    
   \              0x35 0x36    
   \              0x46 0x31    
   \       0xA0   0x45 0x43          DC8 45H, 43H, 46H, 36H, 37H, 37H, 31H, 35H
   \              0x46 0x36    
   \              0x37 0x37    
   \              0x31 0x35    
   \       0xA8   0x32 0x45          DC8 32H, 45H, 46H, 38H, 30H, 34H, 33H, 37H
   \              0x46 0x38    
   \              0x30 0x34    
   \              0x33 0x37    
   \       0xB0   0x30 0x43          DC8 30H, 43H, 31H, 41H, 33H, 30H, 35H, 43H
   \              0x31 0x41    
   \              0x33 0x30    
   \              0x35 0x43    
   \       0xB8   0x41 0x46          DC8 41H, 46H, 33H, 42H, 35H, 42H, 46H, 31H
   \              0x33 0x42    
   \              0x35 0x42    
   \              0x46 0x31    
   \       0xC0   0x33 0x30          DC8 33H, 30H, 38H, 37H, 39H, 42H, 35H, 36H
   \              0x38 0x37    
   \              0x39 0x42    
   \              0x35 0x36    
   \       0xC8   0x43 0x36          DC8 43H, 36H, 31H, 44H, 45H, 35H, 38H, 34H
   \              0x31 0x44    
   \              0x45 0x35    
   \              0x38 0x34    
   \       0xD0   0x41 0x30          DC8 41H, 30H, 46H, 35H, 33H, 41H, 32H, 34H
   \              0x46 0x35    
   \              0x33 0x41    
   \              0x32 0x34    
   \       0xD8   0x34 0x37          DC8 34H, 37H, 41H, 35H, 31H, 45H, 0
   \              0x41 0x35    
   \              0x31 0x45    
   \              0x00         
   \       0xDF   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_5:
   \        0x0   0x20 0x20          DC8 "  MPI test #1 (mul_mpi): "
   \              0x4D 0x50    
   \              0x49 0x20    
   \              0x74 0x65    
   \              0x73 0x74    
   \              0x20 0x23    
   \              0x31 0x20    
   \              0x28 0x6D    
   \              0x75 0x6C    
   \              0x5F 0x6D    
   \              0x70 0x69    
   \              0x29 0x3A    
   \              0x20 0x00    
   \       0x1A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_6:
   \        0x0   0x66 0x61          DC8 "failed\012\015"
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x0A 0x0D    
   \              0x00         
   \        0x9   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_7:
   \        0x0   0x70 0x61          DC8 "passed\012\015"
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x0A 0x0D    
   \              0x00         
   \        0x9   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_8:
   \        0x0   0x32 0x35          DC8 "256567336059E52CAE22925474705F39A94"
   \              0x36 0x35    
   \              0x36 0x37    
   \              0x33 0x33    
   \              0x36 0x30    
   \              0x35 0x39    
   \              0x45 0x35    
   \              0x32 0x43    
   \              0x41 0x45    
   \              0x32 0x32    
   \              0x39 0x32    
   \              0x35 0x34    
   \              0x37 0x34    
   \              0x37 0x30    
   \              0x35 0x46    
   \              0x33 0x39    
   \              0x41 0x39    
   \              0x34 0x00    

   \                                 In section .rodata, align 4
   \                     ?_9:
   \        0x0   0x36 0x36          DC8 36H, 36H, 31H, 33H, 46H, 32H, 36H, 31H
   \              0x31 0x33    
   \              0x46 0x32    
   \              0x36 0x31    
   \        0x8   0x36 0x32          DC8 36H, 32H, 32H, 32H, 33H, 44H, 46H, 34H
   \              0x32 0x32    
   \              0x33 0x44    
   \              0x46 0x34    
   \       0x10   0x38 0x38          DC8 38H, 38H, 45H, 39H, 43H, 44H, 34H, 38H
   \              0x45 0x39    
   \              0x43 0x44    
   \              0x34 0x38    
   \       0x18   0x43 0x43          DC8 43H, 43H, 31H, 33H, 32H, 43H, 37H, 41H
   \              0x31 0x33    
   \              0x32 0x43    
   \              0x37 0x41    
   \       0x20   0x30 0x41          DC8 30H, 41H, 43H, 39H, 33H, 43H, 37H, 30H
   \              0x43 0x39    
   \              0x33 0x43    
   \              0x37 0x30    
   \       0x28   0x31 0x42          DC8 31H, 42H, 30H, 30H, 31H, 42H, 30H, 39H
   \              0x30 0x30    
   \              0x31 0x42    
   \              0x30 0x39    
   \       0x30   0x32 0x45          DC8 32H, 45H, 34H, 45H, 35H, 42H, 39H, 46H
   \              0x34 0x45    
   \              0x35 0x42    
   \              0x39 0x46    
   \       0x38   0x37 0x33          DC8 37H, 33H, 42H, 43H, 44H, 32H, 37H, 42H
   \              0x42 0x43    
   \              0x44 0x32    
   \              0x37 0x42    
   \       0x40   0x39 0x45          DC8 39H, 45H, 45H, 35H, 30H, 44H, 30H, 36H
   \              0x45 0x35    
   \              0x30 0x44    
   \              0x30 0x36    
   \       0x48   0x35 0x37          DC8 35H, 37H, 43H, 37H, 37H, 46H, 33H, 37H
   \              0x43 0x37    
   \              0x37 0x46    
   \              0x33 0x37    
   \       0x50   0x34 0x45          DC8 34H, 45H, 39H, 30H, 33H, 43H, 44H, 46H
   \              0x39 0x30    
   \              0x33 0x43    
   \              0x44 0x46    
   \       0x58   0x41 0x34          DC8 41H, 34H, 43H, 36H, 34H, 32H, 0
   \              0x43 0x36    
   \              0x34 0x32    
   \              0x00         
   \       0x5F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_10:
   \        0x0   0x20 0x20          DC8 "  MPI test #2 (div_mpi): "
   \              0x4D 0x50    
   \              0x49 0x20    
   \              0x74 0x65    
   \              0x73 0x74    
   \              0x20 0x23    
   \              0x32 0x20    
   \              0x28 0x64    
   \              0x69 0x76    
   \              0x5F 0x6D    
   \              0x70 0x69    
   \              0x29 0x3A    
   \              0x20 0x00    
   \       0x1A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_11:
   \        0x0   0x33 0x36          DC8 33H, 36H, 45H, 31H, 33H, 39H, 41H, 45H
   \              0x45 0x31    
   \              0x33 0x39    
   \              0x41 0x45    
   \        0x8   0x41 0x35          DC8 41H, 35H, 35H, 32H, 31H, 35H, 36H, 30H
   \              0x35 0x32    
   \              0x31 0x35    
   \              0x36 0x30    
   \       0x10   0x39 0x44          DC8 39H, 44H, 32H, 38H, 31H, 36H, 39H, 39H
   \              0x32 0x38    
   \              0x31 0x36    
   \              0x39 0x39    
   \       0x18   0x38 0x45          DC8 38H, 45H, 44H, 30H, 32H, 30H, 42H, 42H
   \              0x44 0x30    
   \              0x32 0x30    
   \              0x42 0x42    
   \       0x20   0x42 0x44          DC8 42H, 44H, 39H, 36H, 43H, 33H, 37H, 38H
   \              0x39 0x36    
   \              0x43 0x33    
   \              0x37 0x38    
   \       0x28   0x39 0x30          DC8 39H, 30H, 46H, 36H, 35H, 31H, 37H, 31H
   \              0x46 0x36    
   \              0x35 0x31    
   \              0x37 0x31    
   \       0x30   0x44 0x39          DC8 44H, 39H, 34H, 38H, 45H, 39H, 42H, 43H
   \              0x34 0x38    
   \              0x45 0x39    
   \              0x42 0x43    
   \       0x38   0x37 0x43          DC8 37H, 43H, 42H, 41H, 41H, 34H, 44H, 39H
   \              0x42 0x41    
   \              0x41 0x34    
   \              0x44 0x39    
   \       0x40   0x33 0x32          DC8 33H, 32H, 35H, 44H, 32H, 34H, 44H, 36H
   \              0x35 0x44    
   \              0x32 0x34    
   \              0x44 0x36    
   \       0x48   0x41 0x33          DC8 41H, 33H, 43H, 31H, 32H, 37H, 31H, 30H
   \              0x43 0x31    
   \              0x32 0x37    
   \              0x31 0x30    
   \       0x50   0x46 0x31          DC8 46H, 31H, 30H, 41H, 30H, 39H, 46H, 41H
   \              0x30 0x41    
   \              0x30 0x39    
   \              0x46 0x41    
   \       0x58   0x30 0x38          DC8 30H, 38H, 41H, 42H, 38H, 37H, 0
   \              0x41 0x42    
   \              0x38 0x37    
   \              0x00         
   \       0x5F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_12:
   \        0x0   0x20 0x20          DC8 "  MPI test #3 (exp_mod): "
   \              0x4D 0x50    
   \              0x49 0x20    
   \              0x74 0x65    
   \              0x73 0x74    
   \              0x20 0x23    
   \              0x33 0x20    
   \              0x28 0x65    
   \              0x78 0x70    
   \              0x5F 0x6D    
   \              0x6F 0x64    
   \              0x29 0x3A    
   \              0x20 0x00    
   \       0x1A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_13:
   \        0x0   0x30 0x30          DC8 30H, 30H, 33H, 41H, 30H, 41H, 41H, 45H
   \              0x33 0x41    
   \              0x30 0x41    
   \              0x41 0x45    
   \        0x8   0x44 0x44          DC8 44H, 44H, 37H, 45H, 37H, 38H, 34H, 46H
   \              0x37 0x45    
   \              0x37 0x38    
   \              0x34 0x46    
   \       0x10   0x43 0x30          DC8 43H, 30H, 37H, 44H, 38H, 46H, 39H, 45H
   \              0x37 0x44    
   \              0x38 0x46    
   \              0x39 0x45    
   \       0x18   0x43 0x36          DC8 43H, 36H, 45H, 33H, 42H, 46H, 44H, 35H
   \              0x45 0x33    
   \              0x42 0x46    
   \              0x44 0x35    
   \       0x20   0x43 0x33          DC8 43H, 33H, 44H, 42H, 41H, 37H, 36H, 34H
   \              0x44 0x42    
   \              0x41 0x37    
   \              0x36 0x34    
   \       0x28   0x35 0x36          DC8 35H, 36H, 33H, 36H, 33H, 41H, 31H, 30H
   \              0x33 0x36    
   \              0x33 0x41    
   \              0x31 0x30    
   \       0x30   0x38 0x36          DC8 38H, 36H, 39H, 36H, 32H, 32H, 45H, 41H
   \              0x39 0x36    
   \              0x32 0x32    
   \              0x45 0x41    
   \       0x38   0x43 0x32          DC8 43H, 32H, 44H, 44H, 38H, 34H, 45H, 43H
   \              0x44 0x44    
   \              0x38 0x34    
   \              0x45 0x43    
   \       0x40   0x43 0x35          DC8 43H, 35H, 42H, 38H, 41H, 37H, 34H, 44H
   \              0x42 0x38    
   \              0x41 0x37    
   \              0x34 0x44    
   \       0x48   0x41 0x43          DC8 41H, 43H, 34H, 44H, 30H, 39H, 45H, 30H
   \              0x34 0x44    
   \              0x30 0x39    
   \              0x45 0x30    
   \       0x50   0x33 0x42          DC8 33H, 42H, 35H, 45H, 30H, 42H, 45H, 37H
   \              0x35 0x45    
   \              0x30 0x42    
   \              0x45 0x37    
   \       0x58   0x37 0x39          DC8 37H, 39H, 46H, 32H, 44H, 46H, 36H, 31H
   \              0x46 0x32    
   \              0x44 0x46    
   \              0x36 0x31    
   \       0x60   0x00               DC8 0
   \       0x61   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_14:
   \        0x0   0x20 0x20          DC8 "  MPI test #4 (inv_mod): "
   \              0x4D 0x50    
   \              0x49 0x20    
   \              0x74 0x65    
   \              0x73 0x74    
   \              0x20 0x23    
   \              0x34 0x20    
   \              0x28 0x69    
   \              0x6E 0x76    
   \              0x5F 0x6D    
   \              0x6F 0x64    
   \              0x29 0x3A    
   \              0x20 0x00    
   \       0x1A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_15:
   \        0x0   0x20 0x20          DC8 "  MPI test #5 (simple gcd): "
   \              0x4D 0x50    
   \              0x49 0x20    
   \              0x74 0x65    
   \              0x73 0x74    
   \              0x20 0x23    
   \              0x35 0x20    
   \              0x28 0x73    
   \              0x69 0x6D    
   \              0x70 0x6C    
   \              0x65 0x20    
   \              0x67 0x63    
   \              0x64 0x29    
   \              0x3A 0x20    
   \              0x00         
   \       0x1D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_16:
   \        0x0   0x66 0x61          DC8 "failed at %d\012\015"
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x20 0x61    
   \              0x74 0x20    
   \              0x25 0x64    
   \              0x0A 0x0D    
   \              0x00         
   \        0xF   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_17:
   \        0x0   0x55 0x6E          DC8 "Unexpected error, return code = %08X\012\015"
   \              0x65 0x78    
   \              0x70 0x65    
   \              0x63 0x74    
   \              0x65 0x64    
   \              0x20 0x65    
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x2C 0x20    
   \              0x72 0x65    
   \              0x74 0x75    
   \              0x72 0x6E    
   \              0x20 0x63    
   \              0x6F 0x64    
   \              0x65 0x20    
   \              0x3D 0x20    
   \              0x25 0x30    
   \              0x38 0x58    
   \              0x0A 0x0D    
   \              0x00         
   \       0x27   0x00               DC8 0

   \                                 In section .rodata, align 4
   \        0x0   0x0A 0x0D          DC8 "\012\015"
   \              0x00         
   \        0x3   0x00               DC8 0
   2499          
   2500          #endif /* MBEDTLS_SELF_TEST */
   2501          
   2502          #endif /* MBEDTLS_BIGNUM_C */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   mbedtls_clz
      20   mbedtls_int_div_int
        20 __aeabi_uldivmod
      24   mbedtls_mpi_add_abs
        24   -> mbedtls_mpi_copy
        24   -> mbedtls_mpi_grow
      24   mbedtls_mpi_add_int
        24   -> mbedtls_mpi_add_mpi
      24   mbedtls_mpi_add_mpi
        24   -> mbedtls_mpi_add_abs
        24   -> mbedtls_mpi_cmp_abs
        24   -> mbedtls_mpi_sub_abs
       8   mbedtls_mpi_bitlen
         8   -> mbedtls_clz
      12   mbedtls_mpi_cmp_abs
      24   mbedtls_mpi_cmp_int
        24   -> mbedtls_mpi_cmp_mpi
      12   mbedtls_mpi_cmp_mpi
      24   mbedtls_mpi_copy
        24   -> __aeabi_memcpy4
        24   -> __aeabi_memset
        24   -> mbedtls_mpi_free
        24   -> mbedtls_mpi_grow
      24   mbedtls_mpi_div_int
        24   -> mbedtls_mpi_div_mpi
      96   mbedtls_mpi_div_mpi
        96   -> mbedtls_int_div_int
        96   -> mbedtls_mpi_add_mpi
        96   -> mbedtls_mpi_bitlen
        96   -> mbedtls_mpi_cmp_abs
        96   -> mbedtls_mpi_cmp_int
        96   -> mbedtls_mpi_cmp_mpi
        96   -> mbedtls_mpi_copy
        96   -> mbedtls_mpi_free
        96   -> mbedtls_mpi_grow
        96   -> mbedtls_mpi_init
        96   -> mbedtls_mpi_lset
        96   -> mbedtls_mpi_mul_int
        96   -> mbedtls_mpi_shift_l
        96   -> mbedtls_mpi_shift_r
        96   -> mbedtls_mpi_sub_mpi
     144   mbedtls_mpi_exp_mod
       144   -> __aeabi_memcpy4
       144   -> __aeabi_memset4
       144   -> mbedtls_mpi_add_mpi
       144   -> mbedtls_mpi_bitlen
       144   -> mbedtls_mpi_cmp_int
       144   -> mbedtls_mpi_cmp_mpi
       144   -> mbedtls_mpi_copy
       144   -> mbedtls_mpi_free
       144   -> mbedtls_mpi_grow
       144   -> mbedtls_mpi_init
       144   -> mbedtls_mpi_lset
       144   -> mbedtls_mpi_mod_mpi
       144   -> mbedtls_mpi_shift_l
       144   -> mpi_montg_init
       144   -> mpi_montmul
       144   -> mpi_montred
     528   mbedtls_mpi_fill_random
       528   -- Indirect call
       528   -> mbedtls_mpi_read_binary
       528   -> mbedtls_platform_zeroize
       8   mbedtls_mpi_free
         8   -> mbedtls_free
         8   -> mbedtls_mpi_zeroize
      56   mbedtls_mpi_gcd
        56   -> mbedtls_mpi_cmp_int
        56   -> mbedtls_mpi_cmp_mpi
        56   -> mbedtls_mpi_copy
        56   -> mbedtls_mpi_free
        56   -> mbedtls_mpi_init
        56   -> mbedtls_mpi_lsb
        56   -> mbedtls_mpi_shift_l
        56   -> mbedtls_mpi_shift_r
        56   -> mbedtls_mpi_sub_abs
      48   mbedtls_mpi_gen_prime
        48   -> mbedtls_mpi_add_int
        48   -> mbedtls_mpi_copy
        48   -> mbedtls_mpi_fill_random
        48   -> mbedtls_mpi_free
        48   -> mbedtls_mpi_init
        48   -> mbedtls_mpi_is_prime
        48   -> mbedtls_mpi_mod_int
        48   -> mbedtls_mpi_shift_r
        48   -> mpi_check_small_factors
        48   -> mpi_miller_rabin
       0   mbedtls_mpi_get_bit
      16   mbedtls_mpi_grow
        16   -> __aeabi_memcpy4
        16   -> mbedtls_calloc
        16   -> mbedtls_free
        16   -> mbedtls_mpi_zeroize
       0   mbedtls_mpi_init
     128   mbedtls_mpi_inv_mod
       128   -> mbedtls_mpi_add_mpi
       128   -> mbedtls_mpi_cmp_int
       128   -> mbedtls_mpi_cmp_mpi
       128   -> mbedtls_mpi_copy
       128   -> mbedtls_mpi_free
       128   -> mbedtls_mpi_gcd
       128   -> mbedtls_mpi_init
       128   -> mbedtls_mpi_lset
       128   -> mbedtls_mpi_mod_mpi
       128   -> mbedtls_mpi_shift_r
       128   -> mbedtls_mpi_sub_mpi
      24   mbedtls_mpi_is_prime
        24   -> mbedtls_mpi_cmp_int
        24   -> mpi_check_small_factors
        24   -> mpi_miller_rabin
       4   mbedtls_mpi_lsb
      16   mbedtls_mpi_lset
        16   -> __aeabi_memset4
        16   -> mbedtls_mpi_grow
      12   mbedtls_mpi_mod_int
      16   mbedtls_mpi_mod_mpi
        16   -> mbedtls_mpi_add_mpi
        16   -> mbedtls_mpi_cmp_int
        16   -> mbedtls_mpi_cmp_mpi
        16   -> mbedtls_mpi_div_mpi
        16   -> mbedtls_mpi_sub_mpi
      24   mbedtls_mpi_mul_int
        24   -> mbedtls_mpi_mul_mpi
      64   mbedtls_mpi_mul_mpi
        64   -> mbedtls_mpi_copy
        64   -> mbedtls_mpi_free
        64   -> mbedtls_mpi_grow
        64   -> mbedtls_mpi_init
        64   -> mbedtls_mpi_lset
        64   -> mpi_mul_hlp
      24   mbedtls_mpi_read_binary
        24   -> mbedtls_mpi_free
        24   -> mbedtls_mpi_grow
        24   -> mbedtls_mpi_init
        24   -> mbedtls_mpi_lset
      48   mbedtls_mpi_read_string
        48   -> mbedtls_mpi_add_int
        48   -> mbedtls_mpi_free
        48   -> mbedtls_mpi_grow
        48   -> mbedtls_mpi_init
        48   -> mbedtls_mpi_lset
        48   -> mbedtls_mpi_mul_int
        48   -> mbedtls_mpi_sub_int
        48   -> mpi_get_digit
        48   -> strlen
      24   mbedtls_mpi_safe_cond_assign
        24   -> mbedtls_mpi_grow
      24   mbedtls_mpi_safe_cond_swap
        24   -> mbedtls_mpi_grow
     112   mbedtls_mpi_self_test
       112   -> DbgConsole_Printf
       112   -> mbedtls_mpi_cmp_int
       112   -> mbedtls_mpi_cmp_mpi
       112   -> mbedtls_mpi_div_mpi
       112   -> mbedtls_mpi_exp_mod
       112   -> mbedtls_mpi_free
       112   -> mbedtls_mpi_gcd
       112   -> mbedtls_mpi_init
       112   -> mbedtls_mpi_inv_mod
       112   -> mbedtls_mpi_lset
       112   -> mbedtls_mpi_mul_mpi
       112   -> mbedtls_mpi_read_string
      24   mbedtls_mpi_set_bit
        24   -> mbedtls_mpi_grow
      24   mbedtls_mpi_shift_l
        24   -> mbedtls_mpi_bitlen
        24   -> mbedtls_mpi_grow
      16   mbedtls_mpi_shift_r
         0   -> mbedtls_mpi_lset
      16   mbedtls_mpi_shrink
        16   -> __aeabi_memcpy4
        16   -> mbedtls_calloc
        16   -> mbedtls_free
         0   -> mbedtls_mpi_grow
        16   -> mbedtls_mpi_zeroize
       8   mbedtls_mpi_size
         8   -> mbedtls_mpi_bitlen
      32   mbedtls_mpi_sub_abs
        32   -> mbedtls_mpi_cmp_abs
        32   -> mbedtls_mpi_copy
        32   -> mbedtls_mpi_free
        32   -> mbedtls_mpi_init
        32   -> mpi_sub_hlp
      24   mbedtls_mpi_sub_int
        24   -> mbedtls_mpi_sub_mpi
      24   mbedtls_mpi_sub_mpi
        24   -> mbedtls_mpi_add_abs
        24   -> mbedtls_mpi_cmp_abs
        24   -> mbedtls_mpi_sub_abs
      24   mbedtls_mpi_swap
        24   -> __aeabi_memcpy4
      24   mbedtls_mpi_write_binary
        24   -> __aeabi_memset
        24   -> mbedtls_mpi_size
      48   mbedtls_mpi_write_string
        48   -> mbedtls_mpi_bitlen
        48   -> mbedtls_mpi_copy
        48   -> mbedtls_mpi_free
        48   -> mbedtls_mpi_init
        48   -> mpi_write_hlp
       0   mbedtls_mpi_zeroize
         0   -> mbedtls_platform_zeroize
      24   mpi_check_small_factors
        24   -> mbedtls_mpi_cmp_int
        24   -> mbedtls_mpi_mod_int
       0   mpi_get_digit
     104   mpi_miller_rabin
       104   -> mbedtls_mpi_bitlen
       104   -> mbedtls_mpi_cmp_int
       104   -> mbedtls_mpi_cmp_mpi
       104   -> mbedtls_mpi_copy
       104   -> mbedtls_mpi_exp_mod
       104   -> mbedtls_mpi_fill_random
       104   -> mbedtls_mpi_free
       104   -> mbedtls_mpi_init
       104   -> mbedtls_mpi_lsb
       104   -> mbedtls_mpi_mod_mpi
       104   -> mbedtls_mpi_mul_mpi
       104   -> mbedtls_mpi_shift_r
       104   -> mbedtls_mpi_sub_int
       4   mpi_montg_init
      48   mpi_montmul
        48   -> __aeabi_memcpy4
        48   -> __aeabi_memset4
        48   -> mbedtls_mpi_cmp_abs
        48   -> mpi_mul_hlp
        48   -> mpi_sub_hlp
      32   mpi_montred
        32   -> mpi_montmul
      24   mpi_mul_hlp
      12   mpi_sub_hlp
      24   mpi_write_hlp
        24   -> mbedtls_mpi_cmp_int
        24   -> mbedtls_mpi_div_int
        24   -> mbedtls_mpi_mod_int
        24   -> mpi_write_hlp


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_10
       4  ??DataTable4_11
       4  ??DataTable4_12
       4  ??DataTable4_13
       4  ??DataTable4_14
       4  ??DataTable4_15
       4  ??DataTable4_16
       4  ??DataTable4_17
       4  ??DataTable4_18
       4  ??DataTable4_19
       4  ??DataTable4_2
       4  ??DataTable4_20
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
       4  ??DataTable4_9
      20  ?_0
     132  ?_1
      28  ?_10
      96  ?_11
      28  ?_12
     100  ?_13
      28  ?_14
      32  ?_15
      16  ?_16
      40  ?_17
       4  ?_18
     132  ?_2
     100  ?_3
     224  ?_4
      28  ?_5
      12  ?_6
      12  ?_7
      36  ?_8
      96  ?_9
      36  gcd_pairs
      24  mbedtls_clz
      82  mbedtls_int_div_int
     172  mbedtls_mpi_add_abs
      46  mbedtls_mpi_add_int
      84  mbedtls_mpi_add_mpi
      54  mbedtls_mpi_bitlen
     140  mbedtls_mpi_cmp_abs
      46  mbedtls_mpi_cmp_int
     178  mbedtls_mpi_cmp_mpi
     114  mbedtls_mpi_copy
      46  mbedtls_mpi_div_int
     920  mbedtls_mpi_div_mpi
    1044  mbedtls_mpi_exp_mod
      68  mbedtls_mpi_fill_random
      36  mbedtls_mpi_free
     266  mbedtls_mpi_gcd
     346  mbedtls_mpi_gen_prime
      34  mbedtls_mpi_get_bit
      78  mbedtls_mpi_grow
      16  mbedtls_mpi_init
     654  mbedtls_mpi_inv_mod
      94  mbedtls_mpi_is_prime
      50  mbedtls_mpi_lsb
      60  mbedtls_mpi_lset
     124  mbedtls_mpi_mod_int
     100  mbedtls_mpi_mod_mpi
      24  mbedtls_mpi_mul_int
     222  mbedtls_mpi_mul_mpi
     128  mbedtls_mpi_read_binary
     308  mbedtls_mpi_read_string
     126  mbedtls_mpi_safe_cond_assign
     170  mbedtls_mpi_safe_cond_swap
     630  mbedtls_mpi_self_test
      94  mbedtls_mpi_set_bit
     180  mbedtls_mpi_shift_l
     170  mbedtls_mpi_shift_r
     106  mbedtls_mpi_shrink
      12  mbedtls_mpi_size
     116  mbedtls_mpi_sub_abs
      46  mbedtls_mpi_sub_int
      86  mbedtls_mpi_sub_mpi
      38  mbedtls_mpi_swap
      74  mbedtls_mpi_write_binary
     300  mbedtls_mpi_write_string
       6  mbedtls_mpi_zeroize
      74  mpi_check_small_factors
      60  mpi_get_digit
     526  mpi_miller_rabin
      46  mpi_montg_init
     202  mpi_montmul
      32  mpi_montred
     802  mpi_mul_hlp
      78  mpi_sub_hlp
     110  mpi_write_hlp
     672  small_prime

 
 1 872 bytes in section .rodata
 9 730 bytes in section .text
 
 9 730 bytes of CODE  memory
 1 872 bytes of CONST memory

Errors: none
Warnings: none
