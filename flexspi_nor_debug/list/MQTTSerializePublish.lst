###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.3.193/W32 for ARM         10/Jun/2019  13:48:37
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\Development\smart_washing_machine_3080\csdk\eng\mqtt\MQTTSerializePublish.c
#    Command line =  
#        -f C:\Users\nxf42695\AppData\Local\Temp\1\EW21E9.tmp
#        (C:\Development\smart_washing_machine_3080\csdk\eng\mqtt\MQTTSerializePublish.c
#        -D DEBUG -D USE_RTOS -D XIP_EXTERNAL_FLASH=1 -D
#        XIP_BOOT_HEADER_ENABLE=1 -D CPU_MIMXRT1052DVL6B -D FSL_RTOS_FREE_RTOS
#        -D PRINTF_ADVANCED_ENABLE -D
#        "MBEDTLS_CONFIG_FILE=\"ksdk_mbedtls_config.h\"" -lC
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list -lA
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list
#        --diag_suppress Pa082,Pa050 -o
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_d16 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" --preinclude
#        C:\Development\smart_washing_machine_3080/source\app_preinclude.h -I
#        C:\Development\smart_washing_machine_3080/board\ -I
#        C:\Development\smart_washing_machine_3080/source\ -I
#        C:\Development\smart_washing_machine_3080/CMSIS\ -I
#        C:\Development\smart_washing_machine_3080/amazon-freertos/freertos/portable\
#        -I C:\Development\smart_washing_machine_3080/amazon-freertos/include\
#        -I C:\Development\smart_washing_machine_3080/component/lists\ -I
#        C:\Development\smart_washing_machine_3080/component/serial_manager\ -I
#        C:\Development\smart_washing_machine_3080/component/uart\ -I
#        C:\Development\smart_washing_machine_3080/component/kv\ -I
#        C:\Development\smart_washing_machine_3080/component/kv/include\ -I
#        C:\Development\smart_washing_machine_3080/device\ -I
#        C:\Development\smart_washing_machine_3080/doc\ -I
#        C:\Development\smart_washing_machine_3080/drivers\ -I
#        C:\Development\smart_washing_machine_3080/src\ -I
#        C:\Development\smart_washing_machine_3080/startup\ -I
#        C:\Development\smart_washing_machine_3080/utilities\ -I
#        C:\Development\smart_washing_machine_3080/xip\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\atm\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_model\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_sign\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\infra\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\mqtt\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\external_libs\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\coap_cloud\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\CoAPPacket\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\server\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\os\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\awss_reset\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\mbedtls\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\ -I
#        C:\Development\smart_washing_machine_3080\mbedtls\port\ksdk\ -Om)
#    Locale       =  C
#    List file    =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list\MQTTSerializePublish.lst
#    Object file  =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj\MQTTSerializePublish.o
#
###############################################################################

C:\Development\smart_washing_machine_3080\csdk\eng\mqtt\MQTTSerializePublish.c
      1          /*
      2           * Copyright (C) 2015-2018 Alibaba Group Holding Limited
      3           */
      4          
      5          #include "MQTTPacket.h"
      6          
      7          #include <string.h>
      8          
      9          
     10          /**
     11            * Determines the length of the MQTT publish packet that would be produced using the supplied parameters
     12            * @param qos the MQTT QoS of the publish (packetid is omitted for QoS 0)
     13            * @param topicName the topic name to be used in the publish
     14            * @param payloadlen the length of the payload to be sent
     15            * @return the length of buffer needed to contain the serialized version of the packet
     16            */

   \                                 In section .text, align 2, keep-with-next
     17          int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
     18          {
   \                     MQTTSerialize_publishLength: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x9D04             LDR      R5,[SP, #+16]
     19              int len = 0;
     20          
     21              len += 2 + MQTTstrlen(topicName) + payloadlen;
   \        0x6   0x4608             MOV      R0,R1
   \        0x8   0x4611             MOV      R1,R2
   \        0xA   0x461A             MOV      R2,R3
   \        0xC   0x....'....        BL       MQTTstrlen
   \       0x10   0x182D             ADDS     R5,R5,R0
   \       0x12   0x1CAD             ADDS     R5,R5,#+2
     22              if (qos > 0) {
   \       0x14   0x2C01             CMP      R4,#+1
   \       0x16   0xDB00             BLT.N    ??MQTTSerialize_publishLength_0
     23                  len += 2;    /* packetid */
   \       0x18   0x1CAD             ADDS     R5,R5,#+2
     24              }
     25              return len;
   \                     ??MQTTSerialize_publishLength_0: (+1)
   \       0x1A   0x4628             MOV      R0,R5
   \       0x1C   0xBD32             POP      {R1,R4,R5,PC}    ;; return
     26          }
     27          
     28          
     29          /**
     30            * Serializes the supplied publish data into the supplied buffer, ready for sending
     31            * @param buf the buffer into which the packet will be serialized
     32            * @param buflen the length in bytes of the supplied buffer
     33            * @param dup integer - the MQTT dup flag
     34            * @param qos integer - the MQTT QoS value
     35            * @param retained integer - the MQTT retained flag
     36            * @param packetid integer - the MQTT packet identifier
     37            * @param topicName MQTTString - the MQTT topic in the publish
     38            * @param payload byte buffer - the MQTT publish payload
     39            * @param payloadlen integer - the length of the MQTT payload
     40            * @return the length of the serialized data.  <= 0 indicates error
     41            */

   \                                 In section .text, align 2, keep-with-next
     42          int MQTTSerialize_publish(unsigned char *buf, int buflen, unsigned char dup, int qos, unsigned char retained,
     43                                    unsigned short packetid,
     44                                    MQTTString topicName, unsigned char *payload, int payloadlen)
     45          {
   \                     MQTTSerialize_publish: (+1)
   \        0x0   0xE92D 0x47FC      PUSH     {R2-R10,LR}
   \        0x4   0x4604             MOV      R4,R0
   \        0x6   0x4689             MOV      R9,R1
   \        0x8   0x4615             MOV      R5,R2
   \        0xA   0x461E             MOV      R6,R3
   \        0xC   0x9F10             LDR      R7,[SP, #+64]
     46              unsigned char *ptr = buf;
   \        0xE   0x9401             STR      R4,[SP, #+4]
     47              MQTTHeader header = {0};
   \       0x10   0x....             LDR.N    R0,??DataTable2
   \       0x12   0xF890 0x8000      LDRB     R8,[R0, #+0]
     48              int rem_len = 0;
     49              int rc = 0;
     50          
     51              if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen) {
   \       0x16   0x9700             STR      R7,[SP, #+0]
   \       0x18   0xA80C             ADD      R0,SP,#+48
   \       0x1A   0xE890 0x000E      LDM      R0,{R1-R3}
   \       0x1E   0x4630             MOV      R0,R6
   \       0x20   0x....'....        BL       MQTTSerialize_publishLength
   \       0x24   0x4682             MOV      R10,R0
   \       0x26   0x....'....        BL       MQTTPacket_len
   \       0x2A   0x4581             CMP      R9,R0
   \       0x2C   0xDA02             BGE.N    ??MQTTSerialize_publish_0
     52                  rc = MQTTPACKET_BUFFER_TOO_SHORT;
   \       0x2E   0xF06F 0x0001      MVN      R0,#+1
     53                  goto exit;
   \       0x32   0xE02E             B.N      ??MQTTSerialize_publish_1
     54              }
   \                     ??MQTTSerialize_publish_0: (+1)
   \       0x34   0x980A             LDR      R0,[SP, #+40]
   \       0x36   0x4629             MOV      R1,R5
     55          
     56              MQTT_HEADER_SET_TYPE(header.byte, PUBLISH);
     57              MQTT_HEADER_SET_DUP(header.byte, dup);
     58              MQTT_HEADER_SET_QOS(header.byte, qos);
     59              MQTT_HEADER_SET_RETAIN(header.byte, retained);
     60              writeChar(&ptr, header.byte); /* write header */
   \       0x38   0x00C9             LSLS     R1,R1,#+3
   \       0x3A   0xF001 0x0108      AND      R1,R1,#0x8
   \       0x3E   0xEA41 0x0108      ORR      R1,R1,R8
   \       0x42   0x0072             LSLS     R2,R6,#+1
   \       0x44   0xF002 0x0206      AND      R2,R2,#0x6
   \       0x48   0x4311             ORRS     R1,R2,R1
   \       0x4A   0xF000 0x0001      AND      R0,R0,#0x1
   \       0x4E   0x4301             ORRS     R1,R0,R1
   \       0x50   0xF041 0x0130      ORR      R1,R1,#0x30
   \       0x54   0xA801             ADD      R0,SP,#+4
   \       0x56   0x....'....        BL       writeChar
     61          
     62              ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   \       0x5A   0x4651             MOV      R1,R10
   \       0x5C   0x9801             LDR      R0,[SP, #+4]
   \       0x5E   0x....'....        BL       MQTTPacket_encode
   \       0x62   0x9901             LDR      R1,[SP, #+4]
   \       0x64   0x4408             ADD      R0,R1,R0
   \       0x66   0x9001             STR      R0,[SP, #+4]
     63          
     64              writeMQTTString(&ptr, topicName);
   \       0x68   0xA80C             ADD      R0,SP,#+48
   \       0x6A   0xE890 0x000E      LDM      R0,{R1-R3}
   \       0x6E   0xA801             ADD      R0,SP,#+4
   \       0x70   0x....'....        BL       writeMQTTString
     65          
     66              if (qos > 0) {
   \       0x74   0x2E01             CMP      R6,#+1
   \       0x76   0xDB03             BLT.N    ??MQTTSerialize_publish_2
   \       0x78   0x990B             LDR      R1,[SP, #+44]
     67                  writeInt(&ptr, packetid);
   \       0x7A   0xA801             ADD      R0,SP,#+4
   \       0x7C   0x....'....        BL       writeInt
   \                     ??MQTTSerialize_publish_2: (+1)
   \       0x80   0x990F             LDR      R1,[SP, #+60]
     68              }
     69          
     70              memcpy(ptr, payload, payloadlen);
   \       0x82   0x463A             MOV      R2,R7
   \       0x84   0x9801             LDR      R0,[SP, #+4]
   \       0x86   0x....'....        BL       __aeabi_memcpy
     71              ptr += payloadlen;
     72          
     73              rc = ptr - buf;
   \       0x8A   0x9801             LDR      R0,[SP, #+4]
   \       0x8C   0x4438             ADD      R0,R0,R7
   \       0x8E   0x1B04             SUBS     R4,R0,R4
   \       0x90   0x4620             MOV      R0,R4
     74          
     75          exit:
     76              return rc;
   \                     ??MQTTSerialize_publish_1: (+1)
   \       0x92   0xE8BD 0x87F6      POP      {R1,R2,R4-R10,PC}  ;; return
     77          }

   \                                 In section .rodata, align 1
   \                     ?_0:
   \        0x0   0x00               DC8 0
     78          
     79          
     80          
     81          /**
     82            * Serializes the ack packet into the supplied buffer.
     83            * @param buf the buffer into which the packet will be serialized
     84            * @param buflen the length in bytes of the supplied buffer
     85            * @param type the MQTT packet type
     86            * @param dup the MQTT dup flag
     87            * @param packetid the MQTT packet identifier
     88            * @return serialized length, or error if 0
     89            */

   \                                 In section .text, align 2, keep-with-next
     90          int MQTTSerialize_ack(unsigned char *buf, int buflen, unsigned char packettype, unsigned char dup,
     91                                unsigned short packetid)
     92          {
   \                     MQTTSerialize_ack: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4605             MOV      R5,R0
     93              MQTTHeader header = {0};
   \        0x4   0x....             LDR.N    R0,??DataTable2_1
   \        0x6   0x7800             LDRB     R0,[R0, #+0]
     94              int rc = 0;
     95              unsigned char *ptr = buf;
   \        0x8   0x9500             STR      R5,[SP, #+0]
     96          
     97              if (buflen < 4) {
   \        0xA   0x2904             CMP      R1,#+4
   \        0xC   0xDA02             BGE.N    ??MQTTSerialize_ack_0
     98                  rc = MQTTPACKET_BUFFER_TOO_SHORT;
   \        0xE   0xF06F 0x0501      MVN      R5,#+1
     99                  goto exit;
   \       0x12   0xE021             B.N      ??MQTTSerialize_ack_1
    100              }
    101              MQTT_HEADER_SET_TYPE(header.byte, packettype);
    102              MQTT_HEADER_SET_DUP(header.byte, dup);
   \                     ??MQTTSerialize_ack_0: (+1)
   \       0x14   0x00DB             LSLS     R3,R3,#+3
   \       0x16   0xF003 0x0308      AND      R3,R3,#0x8
   \       0x1A   0xEA43 0x1302      ORR      R3,R3,R2, LSL #+4
   \       0x1E   0x4303             ORRS     R3,R3,R0
    103              MQTT_HEADER_SET_QOS(header.byte, ((packettype == PUBREL) ? 1 : 0));
   \       0x20   0x2A06             CMP      R2,#+6
   \       0x22   0xD101             BNE.N    ??MQTTSerialize_ack_2
   \       0x24   0x2001             MOVS     R0,#+1
   \       0x26   0xE000             B.N      ??MQTTSerialize_ack_3
   \                     ??MQTTSerialize_ack_2: (+1)
   \       0x28   0x2000             MOVS     R0,#+0
   \                     ??MQTTSerialize_ack_3: (+1)
   \       0x2A   0x9C04             LDR      R4,[SP, #+16]
   \       0x2C   0x0040             LSLS     R0,R0,#+1
   \       0x2E   0xF000 0x0006      AND      R0,R0,#0x6
   \       0x32   0x4303             ORRS     R3,R0,R3
    104              writeChar(&ptr, header.byte); /* write header */
   \       0x34   0x4619             MOV      R1,R3
   \       0x36   0xB2C9             UXTB     R1,R1
   \       0x38   0x4668             MOV      R0,SP
   \       0x3A   0x....'....        BL       writeChar
    105          
    106              ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
   \       0x3E   0x2102             MOVS     R1,#+2
   \       0x40   0x9800             LDR      R0,[SP, #+0]
   \       0x42   0x....'....        BL       MQTTPacket_encode
   \       0x46   0x9900             LDR      R1,[SP, #+0]
   \       0x48   0x4408             ADD      R0,R1,R0
   \       0x4A   0x9000             STR      R0,[SP, #+0]
    107              writeInt(&ptr, packetid);
   \       0x4C   0x4621             MOV      R1,R4
   \       0x4E   0x4668             MOV      R0,SP
   \       0x50   0x....'....        BL       writeInt
    108              rc = ptr - buf;
   \       0x54   0x9800             LDR      R0,[SP, #+0]
   \       0x56   0x1B45             SUBS     R5,R0,R5
    109          exit:
    110              return rc;
   \                     ??MQTTSerialize_ack_1: (+1)
   \       0x58   0x4628             MOV      R0,R5
   \       0x5A   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    111          }

   \                                 In section .rodata, align 1
   \                     ?_1:
   \        0x0   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \        0x0   0x....'....        DC32     ?_1
    112          
    113          
    114          /**
    115            * Serializes a puback packet into the supplied buffer.
    116            * @param buf the buffer into which the packet will be serialized
    117            * @param buflen the length in bytes of the supplied buffer
    118            * @param packetid integer - the MQTT packet identifier
    119            * @return serialized length, or error if 0
    120            */
    121          /*  int MQTTSerialize_puback(unsigned char* buf, int buflen, unsigned short packetid) */
    122          /*  { */
    123          /*   return MQTTSerialize_ack(buf, buflen, PUBACK, 0, packetid); */
    124          /*  } */
    125          
    126          #if WITH_MQTT_QOS2_PACKET
    127          /**
    128            * Serializes a pubrel packet into the supplied buffer.
    129            * @param buf the buffer into which the packet will be serialized
    130            * @param buflen the length in bytes of the supplied buffer
    131            * @param dup integer - the MQTT dup flag
    132            * @param packetid integer - the MQTT packet identifier
    133            * @return serialized length, or error if 0
    134            */
    135          int MQTTSerialize_pubrel(unsigned char *buf, int buflen, unsigned char dup, unsigned short packetid)
    136          {
    137              return MQTTSerialize_ack(buf, buflen, PUBREL, dup, packetid);
    138          }
    139          
    140          
    141          /**
    142            * Serializes a pubrel packet into the supplied buffer.
    143            * @param buf the buffer into which the packet will be serialized
    144            * @param buflen the length in bytes of the supplied buffer
    145            * @param packetid integer - the MQTT packet identifier
    146            * @return serialized length, or error if 0
    147            */
    148          int MQTTSerialize_pubcomp(unsigned char *buf, int buflen, unsigned short packetid)
    149          {
    150              return MQTTSerialize_ack(buf, buflen, PUBCOMP, 0, packetid);
    151          }
    152          #endif  /* #if WITH_MQTT_QOS2_PACKET */
    153          
    154          
    155          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   MQTTSerialize_ack
        16   -> MQTTPacket_encode
        16   -> writeChar
        16   -> writeInt
      40   MQTTSerialize_publish
        40   -> MQTTPacket_encode
        40   -> MQTTPacket_len
        40   -> MQTTSerialize_publishLength
        40   -> __aeabi_memcpy
        40   -> writeChar
        40   -> writeInt
        40   -> writeMQTTString
      16   MQTTSerialize_publishLength
        16   -> MQTTstrlen


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       1  ?_0
       1  ?_1
      92  MQTTSerialize_ack
     150  MQTTSerialize_publish
      30  MQTTSerialize_publishLength

 
   2 bytes in section .rodata
 280 bytes in section .text
 
 280 bytes of CODE  memory
   2 bytes of CONST memory

Errors: none
Warnings: none
