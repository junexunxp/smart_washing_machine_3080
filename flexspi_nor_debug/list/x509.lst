###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.3.193/W32 for ARM         10/Jun/2019  13:48:57
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\Development\smart_washing_machine_3080\mbedtls\library\x509.c
#    Command line =  
#        -f C:\Users\nxf42695\AppData\Local\Temp\1\EW6F20.tmp
#        (C:\Development\smart_washing_machine_3080\mbedtls\library\x509.c -D
#        DEBUG -D USE_RTOS -D XIP_EXTERNAL_FLASH=1 -D XIP_BOOT_HEADER_ENABLE=1
#        -D CPU_MIMXRT1052DVL6B -D FSL_RTOS_FREE_RTOS -D PRINTF_ADVANCED_ENABLE
#        -D "MBEDTLS_CONFIG_FILE=\"ksdk_mbedtls_config.h\"" -lC
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list -lA
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list
#        --diag_suppress Pa082,Pa050 -o
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_d16 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" --preinclude
#        C:\Development\smart_washing_machine_3080/source\app_preinclude.h -I
#        C:\Development\smart_washing_machine_3080/board\ -I
#        C:\Development\smart_washing_machine_3080/source\ -I
#        C:\Development\smart_washing_machine_3080/CMSIS\ -I
#        C:\Development\smart_washing_machine_3080/amazon-freertos/freertos/portable\
#        -I C:\Development\smart_washing_machine_3080/amazon-freertos/include\
#        -I C:\Development\smart_washing_machine_3080/component/lists\ -I
#        C:\Development\smart_washing_machine_3080/component/serial_manager\ -I
#        C:\Development\smart_washing_machine_3080/component/uart\ -I
#        C:\Development\smart_washing_machine_3080/component/kv\ -I
#        C:\Development\smart_washing_machine_3080/component/kv/include\ -I
#        C:\Development\smart_washing_machine_3080/device\ -I
#        C:\Development\smart_washing_machine_3080/doc\ -I
#        C:\Development\smart_washing_machine_3080/drivers\ -I
#        C:\Development\smart_washing_machine_3080/src\ -I
#        C:\Development\smart_washing_machine_3080/startup\ -I
#        C:\Development\smart_washing_machine_3080/utilities\ -I
#        C:\Development\smart_washing_machine_3080/xip\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\atm\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_model\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_sign\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\infra\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\mqtt\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\external_libs\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\coap_cloud\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\CoAPPacket\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\server\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\os\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\awss_reset\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\mbedtls\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\ -I
#        C:\Development\smart_washing_machine_3080\mbedtls\port\ksdk\ -Om)
#    Locale       =  C
#    List file    =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list\x509.lst
#    Object file  =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj\x509.o
#
###############################################################################

C:\Development\smart_washing_machine_3080\mbedtls\library\x509.c
      1          /*
      2           *  X.509 common functions for parsing and verification
      3           *
      4           *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
      5           *  SPDX-License-Identifier: Apache-2.0
      6           *
      7           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
      8           *  not use this file except in compliance with the License.
      9           *  You may obtain a copy of the License at
     10           *
     11           *  http://www.apache.org/licenses/LICENSE-2.0
     12           *
     13           *  Unless required by applicable law or agreed to in writing, software
     14           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     15           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     16           *  See the License for the specific language governing permissions and
     17           *  limitations under the License.
     18           *
     19           *  This file is part of mbed TLS (https://tls.mbed.org)
     20           */
     21          /*
     22           *  The ITU-T X.509 standard defines a certificate format for PKI.
     23           *
     24           *  http://www.ietf.org/rfc/rfc5280.txt (Certificates and CRLs)
     25           *  http://www.ietf.org/rfc/rfc3279.txt (Alg IDs for CRLs)
     26           *  http://www.ietf.org/rfc/rfc2986.txt (CSRs, aka PKCS#10)
     27           *
     28           *  http://www.itu.int/ITU-T/studygroups/com17/languages/X.680-0207.pdf
     29           *  http://www.itu.int/ITU-T/studygroups/com17/languages/X.690-0207.pdf
     30           */
     31          
     32          #if !defined(MBEDTLS_CONFIG_FILE)
     33          #include "mbedtls/config.h"
     34          #else
     35          #include MBEDTLS_CONFIG_FILE
     36          #endif
     37          
     38          #if defined(MBEDTLS_X509_USE_C)
     39          
     40          #include "mbedtls/x509.h"
     41          #include "mbedtls/asn1.h"
     42          #include "mbedtls/oid.h"
     43          
     44          #include <stdio.h>
     45          #include <string.h>
     46          
     47          #if defined(MBEDTLS_PEM_PARSE_C)
     48          #include "mbedtls/pem.h"
     49          #endif
     50          
     51          #if defined(MBEDTLS_PLATFORM_C)
     52          #include "mbedtls/platform.h"
     53          #else
     54          #include <stdio.h>
     55          #include <stdlib.h>
     56          #define mbedtls_free      free
     57          #define mbedtls_calloc    calloc
     58          #define mbedtls_printf    printf
     59          #define mbedtls_snprintf  snprintf
     60          #endif
     61          
     62          #if defined(MBEDTLS_HAVE_TIME)
     63          #include "mbedtls/platform_time.h"
     64          #endif
     65          #if defined(MBEDTLS_HAVE_TIME_DATE)
     66          #include "mbedtls/platform_util.h"
     67          #include <time.h>
     68          #endif
     69          
     70          #define CHECK(code) if( ( ret = code ) != 0 ){ return( ret ); }
     71          #define CHECK_RANGE(min, max, val) if( val < min || val > max ){ return( ret ); }
     72          
     73          /*
     74           *  CertificateSerialNumber  ::=  INTEGER
     75           */

   \                                 In section .text, align 2, keep-with-next
     76          int mbedtls_x509_get_serial( unsigned char **p, const unsigned char *end,
     77                               mbedtls_x509_buf *serial )
     78          {
   \                     mbedtls_x509_get_serial: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x4615             MOV      R5,R2
     79              int ret;
     80          
     81              if( ( end - *p ) < 1 )
   \        0x6   0x6820             LDR      R0,[R4, #+0]
   \        0x8   0x1A08             SUBS     R0,R1,R0
   \        0xA   0x2801             CMP      R0,#+1
   \        0xC   0xDA02             BGE.N    ??mbedtls_x509_get_serial_0
     82                  return( MBEDTLS_ERR_X509_INVALID_SERIAL +
     83                          MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   \        0xE   0x....'....        LDR.W    R0,??DataTable16_4  ;; 0xffffdd20
   \       0x12   0xBD32             POP      {R1,R4,R5,PC}
     84          
     85              if( **p != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_PRIMITIVE | 2 ) &&
     86                  **p !=   MBEDTLS_ASN1_INTEGER )
   \                     ??mbedtls_x509_get_serial_0: (+1)
   \       0x14   0x6820             LDR      R0,[R4, #+0]
   \       0x16   0x7800             LDRB     R0,[R0, #+0]
   \       0x18   0x2882             CMP      R0,#+130
   \       0x1A   0xD006             BEQ.N    ??mbedtls_x509_get_serial_1
   \       0x1C   0x6820             LDR      R0,[R4, #+0]
   \       0x1E   0x7800             LDRB     R0,[R0, #+0]
   \       0x20   0x2802             CMP      R0,#+2
   \       0x22   0xD002             BEQ.N    ??mbedtls_x509_get_serial_1
     87                  return( MBEDTLS_ERR_X509_INVALID_SERIAL +
     88                          MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
   \       0x24   0x....'....        LDR.W    R0,??DataTable16_5  ;; 0xffffdd1e
   \       0x28   0xBD32             POP      {R1,R4,R5,PC}
     89          
     90              serial->tag = *(*p)++;
   \                     ??mbedtls_x509_get_serial_1: (+1)
   \       0x2A   0x6820             LDR      R0,[R4, #+0]
   \       0x2C   0x1C42             ADDS     R2,R0,#+1
   \       0x2E   0x6022             STR      R2,[R4, #+0]
   \       0x30   0x7800             LDRB     R0,[R0, #+0]
   \       0x32   0x6028             STR      R0,[R5, #+0]
     91          
     92              if( ( ret = mbedtls_asn1_get_len( p, end, &serial->len ) ) != 0 )
   \       0x34   0x1D2A             ADDS     R2,R5,#+4
   \       0x36   0x4620             MOV      R0,R4
   \       0x38   0x....'....        BL       mbedtls_asn1_get_len
   \       0x3C   0x2800             CMP      R0,#+0
   \       0x3E   0xD002             BEQ.N    ??mbedtls_x509_get_serial_2
     93                  return( MBEDTLS_ERR_X509_INVALID_SERIAL + ret );
   \       0x40   0xF5A0 0x500A      SUB      R0,R0,#+8832
   \       0x44   0xBD32             POP      {R1,R4,R5,PC}
     94          
     95              serial->p = *p;
   \                     ??mbedtls_x509_get_serial_2: (+1)
   \       0x46   0x6820             LDR      R0,[R4, #+0]
   \       0x48   0x60A8             STR      R0,[R5, #+8]
     96              *p += serial->len;
   \       0x4A   0x6820             LDR      R0,[R4, #+0]
   \       0x4C   0x6869             LDR      R1,[R5, #+4]
   \       0x4E   0x4408             ADD      R0,R0,R1
   \       0x50   0x6020             STR      R0,[R4, #+0]
     97          
     98              return( 0 );
   \       0x52   0x2000             MOVS     R0,#+0
   \       0x54   0xBD32             POP      {R1,R4,R5,PC}    ;; return
     99          }
    100          
    101          /* Get an algorithm identifier without parameters (eg for signatures)
    102           *
    103           *  AlgorithmIdentifier  ::=  SEQUENCE  {
    104           *       algorithm               OBJECT IDENTIFIER,
    105           *       parameters              ANY DEFINED BY algorithm OPTIONAL  }
    106           */

   \                                 In section .text, align 2, keep-with-next
    107          int mbedtls_x509_get_alg_null( unsigned char **p, const unsigned char *end,
    108                                 mbedtls_x509_buf *alg )
    109          {
   \                     mbedtls_x509_get_alg_null: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    110              int ret;
    111          
    112              if( ( ret = mbedtls_asn1_get_alg_null( p, end, alg ) ) != 0 )
   \        0x2   0x....'....        BL       mbedtls_asn1_get_alg_null
   \        0x6   0x2800             CMP      R0,#+0
   \        0x8   0xD002             BEQ.N    ??mbedtls_x509_get_alg_null_0
    113                  return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
   \        0xA   0xF5A0 0x500C      SUB      R0,R0,#+8960
   \        0xE   0xBD02             POP      {R1,PC}
    114          
    115              return( 0 );
   \                     ??mbedtls_x509_get_alg_null_0: (+1)
   \       0x10   0x2000             MOVS     R0,#+0
   \       0x12   0xBD02             POP      {R1,PC}          ;; return
    116          }
    117          
    118          /*
    119           * Parse an algorithm identifier with (optional) paramaters
    120           */

   \                                 In section .text, align 2, keep-with-next
    121          int mbedtls_x509_get_alg( unsigned char **p, const unsigned char *end,
    122                            mbedtls_x509_buf *alg, mbedtls_x509_buf *params )
    123          {
   \                     mbedtls_x509_get_alg: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    124              int ret;
    125          
    126              if( ( ret = mbedtls_asn1_get_alg( p, end, alg, params ) ) != 0 )
   \        0x2   0x....'....        BL       mbedtls_asn1_get_alg
   \        0x6   0x2800             CMP      R0,#+0
   \        0x8   0xD002             BEQ.N    ??mbedtls_x509_get_alg_0
    127                  return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
   \        0xA   0xF5A0 0x500C      SUB      R0,R0,#+8960
   \        0xE   0xBD02             POP      {R1,PC}
    128          
    129              return( 0 );
   \                     ??mbedtls_x509_get_alg_0: (+1)
   \       0x10   0x2000             MOVS     R0,#+0
   \       0x12   0xBD02             POP      {R1,PC}          ;; return
    130          }
    131          
    132          #if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
    133          /*
    134           * HashAlgorithm ::= AlgorithmIdentifier
    135           *
    136           * AlgorithmIdentifier  ::=  SEQUENCE  {
    137           *      algorithm               OBJECT IDENTIFIER,
    138           *      parameters              ANY DEFINED BY algorithm OPTIONAL  }
    139           *
    140           * For HashAlgorithm, parameters MUST be NULL or absent.
    141           */

   \                                 In section .text, align 2, keep-with-next
    142          static int x509_get_hash_alg( const mbedtls_x509_buf *alg, mbedtls_md_type_t *md_alg )
    143          {
   \                     x509_get_hash_alg: (+1)
   \        0x0   0xB530             PUSH     {R4,R5,LR}
   \        0x2   0xB085             SUB      SP,SP,#+20
   \        0x4   0x460C             MOV      R4,R1
    144              int ret;
    145              unsigned char *p;
    146              const unsigned char *end;
    147              mbedtls_x509_buf md_oid;
    148              size_t len;
    149          
    150              /* Make sure we got a SEQUENCE and setup bounds */
    151              if( alg->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
   \        0x6   0x6801             LDR      R1,[R0, #+0]
   \        0x8   0x2930             CMP      R1,#+48
   \        0xA   0xD002             BEQ.N    ??x509_get_hash_alg_0
    152                  return( MBEDTLS_ERR_X509_INVALID_ALG +
    153                          MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
   \        0xC   0x....'....        LDR.W    R0,??DataTable16_6  ;; 0xffffdc9e
   \       0x10   0xE039             B.N      ??x509_get_hash_alg_1
    154          
    155              p = (unsigned char *) alg->p;
   \                     ??x509_get_hash_alg_0: (+1)
   \       0x12   0x6881             LDR      R1,[R0, #+8]
   \       0x14   0x9100             STR      R1,[SP, #+0]
    156              end = p + alg->len;
   \       0x16   0x6840             LDR      R0,[R0, #+4]
   \       0x18   0x180D             ADDS     R5,R1,R0
    157          
    158              if( p >= end )
   \       0x1A   0x4608             MOV      R0,R1
   \       0x1C   0x42A8             CMP      R0,R5
   \       0x1E   0xD302             BCC.N    ??x509_get_hash_alg_2
    159                  return( MBEDTLS_ERR_X509_INVALID_ALG +
    160                          MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   \       0x20   0x....'....        LDR.W    R0,??DataTable16_7  ;; 0xffffdca0
   \       0x24   0xE02F             B.N      ??x509_get_hash_alg_1
    161          
    162              /* Parse md_oid */
    163              md_oid.tag = *p;
   \                     ??x509_get_hash_alg_2: (+1)
   \       0x26   0x7800             LDRB     R0,[R0, #+0]
   \       0x28   0x9002             STR      R0,[SP, #+8]
    164          
    165              if( ( ret = mbedtls_asn1_get_tag( &p, end, &md_oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
   \       0x2A   0x2306             MOVS     R3,#+6
   \       0x2C   0xAA03             ADD      R2,SP,#+12
   \       0x2E   0x4629             MOV      R1,R5
   \       0x30   0x4668             MOV      R0,SP
   \       0x32   0x....'....        BL       mbedtls_asn1_get_tag
   \       0x36   0x2800             CMP      R0,#+0
   \       0x38   0xD11B             BNE.N    ??x509_get_hash_alg_3
    166                  return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
    167          
    168              md_oid.p = p;
   \       0x3A   0x9800             LDR      R0,[SP, #+0]
   \       0x3C   0x9004             STR      R0,[SP, #+16]
    169              p += md_oid.len;
   \       0x3E   0x9800             LDR      R0,[SP, #+0]
   \       0x40   0x9903             LDR      R1,[SP, #+12]
   \       0x42   0x4408             ADD      R0,R0,R1
   \       0x44   0x9000             STR      R0,[SP, #+0]
    170          
    171              /* Get md_alg from md_oid */
    172              if( ( ret = mbedtls_oid_get_md_alg( &md_oid, md_alg ) ) != 0 )
   \       0x46   0x4621             MOV      R1,R4
   \       0x48   0xA802             ADD      R0,SP,#+8
   \       0x4A   0x....'....        BL       mbedtls_oid_get_md_alg
   \       0x4E   0x2800             CMP      R0,#+0
   \       0x50   0xD10F             BNE.N    ??x509_get_hash_alg_3
    173                  return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
    174          
    175              /* Make sure params is absent of NULL */
    176              if( p == end )
   \       0x52   0x9800             LDR      R0,[SP, #+0]
   \       0x54   0x42A8             CMP      R0,R5
   \       0x56   0xD101             BNE.N    ??x509_get_hash_alg_4
    177                  return( 0 );
   \       0x58   0x2000             MOVS     R0,#+0
   \       0x5A   0xE014             B.N      ??x509_get_hash_alg_1
    178          
    179              if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_NULL ) ) != 0 || len != 0 )
   \                     ??x509_get_hash_alg_4: (+1)
   \       0x5C   0x2305             MOVS     R3,#+5
   \       0x5E   0xAA01             ADD      R2,SP,#+4
   \       0x60   0x4629             MOV      R1,R5
   \       0x62   0x4668             MOV      R0,SP
   \       0x64   0x....'....        BL       mbedtls_asn1_get_tag
   \       0x68   0x2800             CMP      R0,#+0
   \       0x6A   0xD102             BNE.N    ??x509_get_hash_alg_3
   \       0x6C   0x9901             LDR      R1,[SP, #+4]
   \       0x6E   0x2900             CMP      R1,#+0
   \       0x70   0xD002             BEQ.N    ??x509_get_hash_alg_5
    180                  return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
   \                     ??x509_get_hash_alg_3: (+1)
   \       0x72   0xF5A0 0x500C      SUB      R0,R0,#+8960
   \       0x76   0xE006             B.N      ??x509_get_hash_alg_1
    181          
    182              if( p != end )
   \                     ??x509_get_hash_alg_5: (+1)
   \       0x78   0x9800             LDR      R0,[SP, #+0]
   \       0x7A   0x42A8             CMP      R0,R5
   \       0x7C   0xD002             BEQ.N    ??x509_get_hash_alg_6
    183                  return( MBEDTLS_ERR_X509_INVALID_ALG +
    184                          MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   \       0x7E   0x....'....        LDR.W    R0,??DataTable16_8  ;; 0xffffdc9a
   \       0x82   0xE000             B.N      ??x509_get_hash_alg_1
    185          
    186              return( 0 );
   \                     ??x509_get_hash_alg_6: (+1)
   \       0x84   0x2000             MOVS     R0,#+0
   \                     ??x509_get_hash_alg_1: (+1)
   \       0x86   0xB005             ADD      SP,SP,#+20
   \       0x88   0xBD30             POP      {R4,R5,PC}       ;; return
    187          }
    188          
    189          /*
    190           *    RSASSA-PSS-params  ::=  SEQUENCE  {
    191           *       hashAlgorithm     [0] HashAlgorithm DEFAULT sha1Identifier,
    192           *       maskGenAlgorithm  [1] MaskGenAlgorithm DEFAULT mgf1SHA1Identifier,
    193           *       saltLength        [2] INTEGER DEFAULT 20,
    194           *       trailerField      [3] INTEGER DEFAULT 1  }
    195           *    -- Note that the tags in this Sequence are explicit.
    196           *
    197           * RFC 4055 (which defines use of RSASSA-PSS in PKIX) states that the value
    198           * of trailerField MUST be 1, and PKCS#1 v2.2 doesn't even define any other
    199           * option. Enfore this at parsing time.
    200           */

   \                                 In section .text, align 2, keep-with-next
    201          int mbedtls_x509_get_rsassa_pss_params( const mbedtls_x509_buf *params,
    202                                          mbedtls_md_type_t *md_alg, mbedtls_md_type_t *mgf_md,
    203                                          int *salt_len )
    204          {
   \                     mbedtls_x509_get_rsassa_pss_params: (+1)
   \        0x0   0xE92D 0x41F8      PUSH     {R3-R8,LR}
   \        0x4   0xB089             SUB      SP,SP,#+36
   \        0x6   0x460C             MOV      R4,R1
   \        0x8   0x4615             MOV      R5,R2
   \        0xA   0x461E             MOV      R6,R3
    205              int ret;
    206              unsigned char *p;
    207              const unsigned char *end, *end2;
    208              size_t len;
    209              mbedtls_x509_buf alg_id, alg_params;
    210          
    211              /* First set everything to defaults */
    212              *md_alg = MBEDTLS_MD_SHA1;
   \        0xC   0x2104             MOVS     R1,#+4
   \        0xE   0x7021             STRB     R1,[R4, #+0]
    213              *mgf_md = MBEDTLS_MD_SHA1;
   \       0x10   0x7029             STRB     R1,[R5, #+0]
    214              *salt_len = 20;
   \       0x12   0x2114             MOVS     R1,#+20
   \       0x14   0x6031             STR      R1,[R6, #+0]
    215          
    216              /* Make sure params is a SEQUENCE and setup bounds */
    217              if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
   \       0x16   0x6801             LDR      R1,[R0, #+0]
   \       0x18   0x2930             CMP      R1,#+48
   \       0x1A   0xD002             BEQ.N    ??mbedtls_x509_get_rsassa_pss_params_0
    218                  return( MBEDTLS_ERR_X509_INVALID_ALG +
    219                          MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
   \       0x1C   0x....'....        LDR.W    R0,??DataTable16_6  ;; 0xffffdc9e
   \       0x20   0xE0B8             B.N      ??mbedtls_x509_get_rsassa_pss_params_1
    220          
    221              p = (unsigned char *) params->p;
   \                     ??mbedtls_x509_get_rsassa_pss_params_0: (+1)
   \       0x22   0x6881             LDR      R1,[R0, #+8]
   \       0x24   0x9100             STR      R1,[SP, #+0]
    222              end = p + params->len;
   \       0x26   0x6840             LDR      R0,[R0, #+4]
   \       0x28   0x180F             ADDS     R7,R1,R0
    223          
    224              if( p == end )
   \       0x2A   0x4608             MOV      R0,R1
   \       0x2C   0x42B8             CMP      R0,R7
   \       0x2E   0xD101             BNE.N    ??mbedtls_x509_get_rsassa_pss_params_2
    225                  return( 0 );
   \       0x30   0x2000             MOVS     R0,#+0
   \       0x32   0xE0AF             B.N      ??mbedtls_x509_get_rsassa_pss_params_1
    226          
    227              /*
    228               * HashAlgorithm
    229               */
    230              if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
    231                              MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 0 ) ) == 0 )
   \                     ??mbedtls_x509_get_rsassa_pss_params_2: (+1)
   \       0x34   0x23A0             MOVS     R3,#+160
   \       0x36   0xAA01             ADD      R2,SP,#+4
   \       0x38   0x4639             MOV      R1,R7
   \       0x3A   0x4668             MOV      R0,SP
   \       0x3C   0x....'....        BL       mbedtls_asn1_get_tag
   \       0x40   0x2800             CMP      R0,#+0
   \       0x42   0xD118             BNE.N    ??mbedtls_x509_get_rsassa_pss_params_3
    232              {
    233                  end2 = p + len;
   \       0x44   0x9800             LDR      R0,[SP, #+0]
   \       0x46   0x9901             LDR      R1,[SP, #+4]
   \       0x48   0xEB00 0x0801      ADD      R8,R0,R1
    234          
    235                  /* HashAlgorithm ::= AlgorithmIdentifier (without parameters) */
    236                  if( ( ret = mbedtls_x509_get_alg_null( &p, end2, &alg_id ) ) != 0 )
   \       0x4C   0xAA03             ADD      R2,SP,#+12
   \       0x4E   0x4641             MOV      R1,R8
   \       0x50   0x4668             MOV      R0,SP
   \       0x52   0x....'....        BL       mbedtls_x509_get_alg_null
   \       0x56   0x2800             CMP      R0,#+0
   \       0x58   0xF040 0x809C      BNE.W    ??mbedtls_x509_get_rsassa_pss_params_1
    237                      return( ret );
    238          
    239                  if( ( ret = mbedtls_oid_get_md_alg( &alg_id, md_alg ) ) != 0 )
   \       0x5C   0x4621             MOV      R1,R4
   \       0x5E   0xA803             ADD      R0,SP,#+12
   \       0x60   0x....'....        BL       mbedtls_oid_get_md_alg
   \       0x64   0x2800             CMP      R0,#+0
   \       0x66   0xF040 0x808B      BNE.W    ??mbedtls_x509_get_rsassa_pss_params_4
    240                      return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
    241          
    242                  if( p != end2 )
   \       0x6A   0x9800             LDR      R0,[SP, #+0]
   \       0x6C   0x4540             CMP      R0,R8
   \       0x6E   0xD006             BEQ.N    ??mbedtls_x509_get_rsassa_pss_params_5
    243                      return( MBEDTLS_ERR_X509_INVALID_ALG +
    244                              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   \       0x70   0x....'....        LDR.W    R0,??DataTable16_8  ;; 0xffffdc9a
   \       0x74   0xE08E             B.N      ??mbedtls_x509_get_rsassa_pss_params_1
    245              }
    246              else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   \                     ??mbedtls_x509_get_rsassa_pss_params_3: (+1)
   \       0x76   0xF110 0x0F62      CMN      R0,#+98
   \       0x7A   0xF040 0x8081      BNE.W    ??mbedtls_x509_get_rsassa_pss_params_4
    247                  return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
    248          
    249              if( p == end )
   \                     ??mbedtls_x509_get_rsassa_pss_params_5: (+1)
   \       0x7E   0x9800             LDR      R0,[SP, #+0]
   \       0x80   0x42B8             CMP      R0,R7
   \       0x82   0xD101             BNE.N    ??mbedtls_x509_get_rsassa_pss_params_6
    250                  return( 0 );
   \       0x84   0x2000             MOVS     R0,#+0
   \       0x86   0xE085             B.N      ??mbedtls_x509_get_rsassa_pss_params_1
    251          
    252              /*
    253               * MaskGenAlgorithm
    254               */
    255              if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
    256                              MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 1 ) ) == 0 )
   \                     ??mbedtls_x509_get_rsassa_pss_params_6: (+1)
   \       0x88   0x23A1             MOVS     R3,#+161
   \       0x8A   0xAA01             ADD      R2,SP,#+4
   \       0x8C   0x4639             MOV      R1,R7
   \       0x8E   0x4668             MOV      R0,SP
   \       0x90   0x....'....        BL       mbedtls_asn1_get_tag
   \       0x94   0x2800             CMP      R0,#+0
   \       0x96   0xD12A             BNE.N    ??mbedtls_x509_get_rsassa_pss_params_7
    257              {
    258                  end2 = p + len;
   \       0x98   0x9800             LDR      R0,[SP, #+0]
   \       0x9A   0x9901             LDR      R1,[SP, #+4]
   \       0x9C   0x1844             ADDS     R4,R0,R1
    259          
    260                  /* MaskGenAlgorithm ::= AlgorithmIdentifier (params = HashAlgorithm) */
    261                  if( ( ret = mbedtls_x509_get_alg( &p, end2, &alg_id, &alg_params ) ) != 0 )
   \       0x9E   0xAB06             ADD      R3,SP,#+24
   \       0xA0   0xAA03             ADD      R2,SP,#+12
   \       0xA2   0x4621             MOV      R1,R4
   \       0xA4   0x4668             MOV      R0,SP
   \       0xA6   0x....'....        BL       mbedtls_x509_get_alg
   \       0xAA   0x2800             CMP      R0,#+0
   \       0xAC   0xD172             BNE.N    ??mbedtls_x509_get_rsassa_pss_params_1
    262                      return( ret );
    263          
    264                  /* Only MFG1 is recognised for now */
    265                  if( MBEDTLS_OID_CMP( MBEDTLS_OID_MGF1, &alg_id ) != 0 )
   \       0xAE   0x9804             LDR      R0,[SP, #+16]
   \       0xB0   0x2809             CMP      R0,#+9
   \       0xB2   0xD10A             BNE.N    ??mbedtls_x509_get_rsassa_pss_params_8
   \       0xB4   0x2209             MOVS     R2,#+9
   \       0xB6   0x9905             LDR      R1,[SP, #+20]
   \       0xB8   0x....'....        LDR.W    R0,??DataTable16_9
   \       0xBC   0x....'....        BL       memcmp
   \       0xC0   0x1E40             SUBS     R0,R0,#+1
   \       0xC2   0x4180             SBCS     R0,R0,R0
   \       0xC4   0x43C0             MVNS     R0,R0
   \       0xC6   0x0FC0             LSRS     R0,R0,#+31
   \       0xC8   0xE000             B.N      ??mbedtls_x509_get_rsassa_pss_params_9
   \                     ??mbedtls_x509_get_rsassa_pss_params_8: (+1)
   \       0xCA   0x2001             MOVS     R0,#+1
   \                     ??mbedtls_x509_get_rsassa_pss_params_9: (+1)
   \       0xCC   0x2800             CMP      R0,#+0
   \       0xCE   0xD002             BEQ.N    ??mbedtls_x509_get_rsassa_pss_params_10
    266                      return( MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE +
    267                              MBEDTLS_ERR_OID_NOT_FOUND );
   \       0xD0   0x....'....        LDR.W    R0,??DataTable16_10  ;; 0xffffdf52
   \       0xD4   0xE05E             B.N      ??mbedtls_x509_get_rsassa_pss_params_1
    268          
    269                  /* Parse HashAlgorithm */
    270                  if( ( ret = x509_get_hash_alg( &alg_params, mgf_md ) ) != 0 )
   \                     ??mbedtls_x509_get_rsassa_pss_params_10: (+1)
   \       0xD6   0x4629             MOV      R1,R5
   \       0xD8   0xA806             ADD      R0,SP,#+24
   \       0xDA   0x....'....        BL       x509_get_hash_alg
   \       0xDE   0x2800             CMP      R0,#+0
   \       0xE0   0xD158             BNE.N    ??mbedtls_x509_get_rsassa_pss_params_1
    271                      return( ret );
    272          
    273                  if( p != end2 )
   \       0xE2   0x9800             LDR      R0,[SP, #+0]
   \       0xE4   0x42A0             CMP      R0,R4
   \       0xE6   0xD005             BEQ.N    ??mbedtls_x509_get_rsassa_pss_params_11
    274                      return( MBEDTLS_ERR_X509_INVALID_ALG +
    275                              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   \       0xE8   0x....'....        LDR.W    R0,??DataTable16_8  ;; 0xffffdc9a
   \       0xEC   0xE052             B.N      ??mbedtls_x509_get_rsassa_pss_params_1
    276              }
    277              else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   \                     ??mbedtls_x509_get_rsassa_pss_params_7: (+1)
   \       0xEE   0xF110 0x0F62      CMN      R0,#+98
   \       0xF2   0xD145             BNE.N    ??mbedtls_x509_get_rsassa_pss_params_4
    278                  return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
    279          
    280              if( p == end )
   \                     ??mbedtls_x509_get_rsassa_pss_params_11: (+1)
   \       0xF4   0x9800             LDR      R0,[SP, #+0]
   \       0xF6   0x42B8             CMP      R0,R7
   \       0xF8   0xD101             BNE.N    ??mbedtls_x509_get_rsassa_pss_params_12
    281                  return( 0 );
   \       0xFA   0x2000             MOVS     R0,#+0
   \       0xFC   0xE04A             B.N      ??mbedtls_x509_get_rsassa_pss_params_1
    282          
    283              /*
    284               * salt_len
    285               */
    286              if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
    287                              MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 2 ) ) == 0 )
   \                     ??mbedtls_x509_get_rsassa_pss_params_12: (+1)
   \       0xFE   0x23A2             MOVS     R3,#+162
   \      0x100   0xAA01             ADD      R2,SP,#+4
   \      0x102   0x4639             MOV      R1,R7
   \      0x104   0x4668             MOV      R0,SP
   \      0x106   0x....'....        BL       mbedtls_asn1_get_tag
   \      0x10A   0x2800             CMP      R0,#+0
   \      0x10C   0xD10F             BNE.N    ??mbedtls_x509_get_rsassa_pss_params_13
    288              {
    289                  end2 = p + len;
   \      0x10E   0x9800             LDR      R0,[SP, #+0]
   \      0x110   0x9901             LDR      R1,[SP, #+4]
   \      0x112   0x1844             ADDS     R4,R0,R1
    290          
    291                  if( ( ret = mbedtls_asn1_get_int( &p, end2, salt_len ) ) != 0 )
   \      0x114   0x4632             MOV      R2,R6
   \      0x116   0x4621             MOV      R1,R4
   \      0x118   0x4668             MOV      R0,SP
   \      0x11A   0x....'....        BL       mbedtls_asn1_get_int
   \      0x11E   0x2800             CMP      R0,#+0
   \      0x120   0xD12E             BNE.N    ??mbedtls_x509_get_rsassa_pss_params_4
    292                      return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
    293          
    294                  if( p != end2 )
   \      0x122   0x9800             LDR      R0,[SP, #+0]
   \      0x124   0x42A0             CMP      R0,R4
   \      0x126   0xD005             BEQ.N    ??mbedtls_x509_get_rsassa_pss_params_14
    295                      return( MBEDTLS_ERR_X509_INVALID_ALG +
    296                              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   \      0x128   0x....'....        LDR.W    R0,??DataTable16_8  ;; 0xffffdc9a
   \      0x12C   0xE032             B.N      ??mbedtls_x509_get_rsassa_pss_params_1
    297              }
    298              else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   \                     ??mbedtls_x509_get_rsassa_pss_params_13: (+1)
   \      0x12E   0xF110 0x0F62      CMN      R0,#+98
   \      0x132   0xD125             BNE.N    ??mbedtls_x509_get_rsassa_pss_params_4
    299                  return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
    300          
    301              if( p == end )
   \                     ??mbedtls_x509_get_rsassa_pss_params_14: (+1)
   \      0x134   0x9800             LDR      R0,[SP, #+0]
   \      0x136   0x42B8             CMP      R0,R7
   \      0x138   0xD101             BNE.N    ??mbedtls_x509_get_rsassa_pss_params_15
    302                  return( 0 );
   \      0x13A   0x2000             MOVS     R0,#+0
   \      0x13C   0xE02A             B.N      ??mbedtls_x509_get_rsassa_pss_params_1
    303          
    304              /*
    305               * trailer_field (if present, must be 1)
    306               */
    307              if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
    308                              MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 3 ) ) == 0 )
   \                     ??mbedtls_x509_get_rsassa_pss_params_15: (+1)
   \      0x13E   0x23A3             MOVS     R3,#+163
   \      0x140   0xAA01             ADD      R2,SP,#+4
   \      0x142   0x4639             MOV      R1,R7
   \      0x144   0x4668             MOV      R0,SP
   \      0x146   0x....'....        BL       mbedtls_asn1_get_tag
   \      0x14A   0x2800             CMP      R0,#+0
   \      0x14C   0xD115             BNE.N    ??mbedtls_x509_get_rsassa_pss_params_16
    309              {
    310                  int trailer_field;
    311          
    312                  end2 = p + len;
   \      0x14E   0x9800             LDR      R0,[SP, #+0]
   \      0x150   0x9901             LDR      R1,[SP, #+4]
   \      0x152   0x1844             ADDS     R4,R0,R1
    313          
    314                  if( ( ret = mbedtls_asn1_get_int( &p, end2, &trailer_field ) ) != 0 )
   \      0x154   0xAA02             ADD      R2,SP,#+8
   \      0x156   0x4621             MOV      R1,R4
   \      0x158   0x4668             MOV      R0,SP
   \      0x15A   0x....'....        BL       mbedtls_asn1_get_int
   \      0x15E   0x2800             CMP      R0,#+0
   \      0x160   0xD10E             BNE.N    ??mbedtls_x509_get_rsassa_pss_params_4
    315                      return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
    316          
    317                  if( p != end2 )
   \      0x162   0x9800             LDR      R0,[SP, #+0]
   \      0x164   0x42A0             CMP      R0,R4
   \      0x166   0xD002             BEQ.N    ??mbedtls_x509_get_rsassa_pss_params_17
    318                      return( MBEDTLS_ERR_X509_INVALID_ALG +
    319                              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   \      0x168   0x....'....        LDR.W    R0,??DataTable16_8  ;; 0xffffdc9a
   \      0x16C   0xE012             B.N      ??mbedtls_x509_get_rsassa_pss_params_1
    320          
    321                  if( trailer_field != 1 )
   \                     ??mbedtls_x509_get_rsassa_pss_params_17: (+1)
   \      0x16E   0x9802             LDR      R0,[SP, #+8]
   \      0x170   0x2801             CMP      R0,#+1
   \      0x172   0xD008             BEQ.N    ??mbedtls_x509_get_rsassa_pss_params_18
    322                      return( MBEDTLS_ERR_X509_INVALID_ALG );
   \      0x174   0x....'....        LDR.W    R0,??DataTable16_11  ;; 0xffffdd00
   \      0x178   0xE00C             B.N      ??mbedtls_x509_get_rsassa_pss_params_1
    323              }
    324              else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   \                     ??mbedtls_x509_get_rsassa_pss_params_16: (+1)
   \      0x17A   0xF110 0x0F62      CMN      R0,#+98
   \      0x17E   0xD002             BEQ.N    ??mbedtls_x509_get_rsassa_pss_params_18
    325                  return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
   \                     ??mbedtls_x509_get_rsassa_pss_params_4: (+1)
   \      0x180   0xF5A0 0x500C      SUB      R0,R0,#+8960
   \      0x184   0xE006             B.N      ??mbedtls_x509_get_rsassa_pss_params_1
    326          
    327              if( p != end )
   \                     ??mbedtls_x509_get_rsassa_pss_params_18: (+1)
   \      0x186   0x9800             LDR      R0,[SP, #+0]
   \      0x188   0x42B8             CMP      R0,R7
   \      0x18A   0xD002             BEQ.N    ??mbedtls_x509_get_rsassa_pss_params_19
    328                  return( MBEDTLS_ERR_X509_INVALID_ALG +
    329                          MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   \      0x18C   0x....'....        LDR.W    R0,??DataTable16_8  ;; 0xffffdc9a
   \      0x190   0xE000             B.N      ??mbedtls_x509_get_rsassa_pss_params_1
    330          
    331              return( 0 );
   \                     ??mbedtls_x509_get_rsassa_pss_params_19: (+1)
   \      0x192   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_x509_get_rsassa_pss_params_1: (+1)
   \      0x194   0xB00A             ADD      SP,SP,#+40
   \      0x196   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    332          }
    333          #endif /* MBEDTLS_X509_RSASSA_PSS_SUPPORT */
    334          
    335          /*
    336           *  AttributeTypeAndValue ::= SEQUENCE {
    337           *    type     AttributeType,
    338           *    value    AttributeValue }
    339           *
    340           *  AttributeType ::= OBJECT IDENTIFIER
    341           *
    342           *  AttributeValue ::= ANY DEFINED BY AttributeType
    343           */

   \                                 In section .text, align 2, keep-with-next
    344          static int x509_get_attr_type_value( unsigned char **p,
    345                                               const unsigned char *end,
    346                                               mbedtls_x509_name *cur )
    347          {
   \                     x509_get_attr_type_value: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460E             MOV      R6,R1
   \        0x6   0x4615             MOV      R5,R2
    348              int ret;
    349              size_t len;
    350              mbedtls_x509_buf *oid;
    351              mbedtls_x509_buf *val;
    352          
    353              if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
    354                      MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
   \        0x8   0x2330             MOVS     R3,#+48
   \        0xA   0x466A             MOV      R2,SP
   \        0xC   0x....'....        BL       mbedtls_asn1_get_tag
   \       0x10   0x2800             CMP      R0,#+0
   \       0x12   0xD002             BEQ.N    ??x509_get_attr_type_value_0
    355                  return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
   \       0x14   0xF5A0 0x500E      SUB      R0,R0,#+9088
   \       0x18   0xBDF2             POP      {R1,R4-R7,PC}
    356          
    357              if( ( end - *p ) < 1 )
   \                     ??x509_get_attr_type_value_0: (+1)
   \       0x1A   0x6820             LDR      R0,[R4, #+0]
   \       0x1C   0x1A30             SUBS     R0,R6,R0
   \       0x1E   0x2801             CMP      R0,#+1
   \       0x20   0xDB16             BLT.N    ??x509_get_attr_type_value_1
    358                  return( MBEDTLS_ERR_X509_INVALID_NAME +
    359                          MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    360          
    361              oid = &cur->oid;
    362              oid->tag = **p;
   \       0x22   0x6820             LDR      R0,[R4, #+0]
   \       0x24   0x7800             LDRB     R0,[R0, #+0]
   \       0x26   0x6028             STR      R0,[R5, #+0]
    363          
    364              if( ( ret = mbedtls_asn1_get_tag( p, end, &oid->len, MBEDTLS_ASN1_OID ) ) != 0 )
   \       0x28   0x2306             MOVS     R3,#+6
   \       0x2A   0x1D2A             ADDS     R2,R5,#+4
   \       0x2C   0x4631             MOV      R1,R6
   \       0x2E   0x4620             MOV      R0,R4
   \       0x30   0x....'....        BL       mbedtls_asn1_get_tag
   \       0x34   0x2800             CMP      R0,#+0
   \       0x36   0xD002             BEQ.N    ??x509_get_attr_type_value_2
    365                  return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
   \       0x38   0xF5A0 0x500E      SUB      R0,R0,#+9088
   \       0x3C   0xBDF2             POP      {R1,R4-R7,PC}
    366          
    367              oid->p = *p;
   \                     ??x509_get_attr_type_value_2: (+1)
   \       0x3E   0x6820             LDR      R0,[R4, #+0]
   \       0x40   0x60A8             STR      R0,[R5, #+8]
    368              *p += oid->len;
   \       0x42   0x6820             LDR      R0,[R4, #+0]
   \       0x44   0x6869             LDR      R1,[R5, #+4]
   \       0x46   0x4408             ADD      R0,R0,R1
   \       0x48   0x6020             STR      R0,[R4, #+0]
    369          
    370              if( ( end - *p ) < 1 )
   \       0x4A   0x1A30             SUBS     R0,R6,R0
   \       0x4C   0x2801             CMP      R0,#+1
   \       0x4E   0xDA02             BGE.N    ??x509_get_attr_type_value_3
    371                  return( MBEDTLS_ERR_X509_INVALID_NAME +
    372                          MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   \                     ??x509_get_attr_type_value_1: (+1)
   \       0x50   0x....'....        LDR.W    R0,??DataTable16_12  ;; 0xffffdc20
   \       0x54   0xBDF2             POP      {R1,R4-R7,PC}
    373          
    374              if( **p != MBEDTLS_ASN1_BMP_STRING && **p != MBEDTLS_ASN1_UTF8_STRING      &&
    375                  **p != MBEDTLS_ASN1_T61_STRING && **p != MBEDTLS_ASN1_PRINTABLE_STRING &&
    376                  **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
    377                  **p != MBEDTLS_ASN1_BIT_STRING )
   \                     ??x509_get_attr_type_value_3: (+1)
   \       0x56   0x6820             LDR      R0,[R4, #+0]
   \       0x58   0x7800             LDRB     R0,[R0, #+0]
   \       0x5A   0x281E             CMP      R0,#+30
   \       0x5C   0xD01A             BEQ.N    ??x509_get_attr_type_value_4
   \       0x5E   0x6820             LDR      R0,[R4, #+0]
   \       0x60   0x7800             LDRB     R0,[R0, #+0]
   \       0x62   0x280C             CMP      R0,#+12
   \       0x64   0xD016             BEQ.N    ??x509_get_attr_type_value_4
   \       0x66   0x6820             LDR      R0,[R4, #+0]
   \       0x68   0x7800             LDRB     R0,[R0, #+0]
   \       0x6A   0x2814             CMP      R0,#+20
   \       0x6C   0xD012             BEQ.N    ??x509_get_attr_type_value_4
   \       0x6E   0x6820             LDR      R0,[R4, #+0]
   \       0x70   0x7800             LDRB     R0,[R0, #+0]
   \       0x72   0x2813             CMP      R0,#+19
   \       0x74   0xD00E             BEQ.N    ??x509_get_attr_type_value_4
   \       0x76   0x6820             LDR      R0,[R4, #+0]
   \       0x78   0x7800             LDRB     R0,[R0, #+0]
   \       0x7A   0x2816             CMP      R0,#+22
   \       0x7C   0xD00A             BEQ.N    ??x509_get_attr_type_value_4
   \       0x7E   0x6820             LDR      R0,[R4, #+0]
   \       0x80   0x7800             LDRB     R0,[R0, #+0]
   \       0x82   0x281C             CMP      R0,#+28
   \       0x84   0xD006             BEQ.N    ??x509_get_attr_type_value_4
   \       0x86   0x6820             LDR      R0,[R4, #+0]
   \       0x88   0x7800             LDRB     R0,[R0, #+0]
   \       0x8A   0x2803             CMP      R0,#+3
   \       0x8C   0xD002             BEQ.N    ??x509_get_attr_type_value_4
    378                  return( MBEDTLS_ERR_X509_INVALID_NAME +
    379                          MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
   \       0x8E   0x....'....        LDR.W    R0,??DataTable16_13  ;; 0xffffdc1e
   \       0x92   0xBDF2             POP      {R1,R4-R7,PC}
    380          
    381              val = &cur->val;
   \                     ??x509_get_attr_type_value_4: (+1)
   \       0x94   0xF105 0x070C      ADD      R7,R5,#+12
    382              val->tag = *(*p)++;
   \       0x98   0x6820             LDR      R0,[R4, #+0]
   \       0x9A   0x1C41             ADDS     R1,R0,#+1
   \       0x9C   0x6021             STR      R1,[R4, #+0]
   \       0x9E   0x7800             LDRB     R0,[R0, #+0]
   \       0xA0   0x6038             STR      R0,[R7, #+0]
    383          
    384              if( ( ret = mbedtls_asn1_get_len( p, end, &val->len ) ) != 0 )
   \       0xA2   0x1D3A             ADDS     R2,R7,#+4
   \       0xA4   0x4631             MOV      R1,R6
   \       0xA6   0x4620             MOV      R0,R4
   \       0xA8   0x....'....        BL       mbedtls_asn1_get_len
   \       0xAC   0x2800             CMP      R0,#+0
   \       0xAE   0xD002             BEQ.N    ??x509_get_attr_type_value_5
    385                  return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
   \       0xB0   0xF5A0 0x500E      SUB      R0,R0,#+9088
   \       0xB4   0xBDF2             POP      {R1,R4-R7,PC}
    386          
    387              val->p = *p;
   \                     ??x509_get_attr_type_value_5: (+1)
   \       0xB6   0x6820             LDR      R0,[R4, #+0]
   \       0xB8   0x60B8             STR      R0,[R7, #+8]
    388              *p += val->len;
   \       0xBA   0x6820             LDR      R0,[R4, #+0]
   \       0xBC   0x6879             LDR      R1,[R7, #+4]
   \       0xBE   0x4408             ADD      R0,R0,R1
   \       0xC0   0x6020             STR      R0,[R4, #+0]
    389          
    390              cur->next = NULL;
   \       0xC2   0x2000             MOVS     R0,#+0
   \       0xC4   0x61A8             STR      R0,[R5, #+24]
    391          
    392              return( 0 );
   \       0xC6   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    393          }
    394          
    395          /*
    396           *  Name ::= CHOICE { -- only one possibility for now --
    397           *       rdnSequence  RDNSequence }
    398           *
    399           *  RDNSequence ::= SEQUENCE OF RelativeDistinguishedName
    400           *
    401           *  RelativeDistinguishedName ::=
    402           *    SET OF AttributeTypeAndValue
    403           *
    404           *  AttributeTypeAndValue ::= SEQUENCE {
    405           *    type     AttributeType,
    406           *    value    AttributeValue }
    407           *
    408           *  AttributeType ::= OBJECT IDENTIFIER
    409           *
    410           *  AttributeValue ::= ANY DEFINED BY AttributeType
    411           *
    412           * The data structure is optimized for the common case where each RDN has only
    413           * one element, which is represented as a list of AttributeTypeAndValue.
    414           * For the general case we still use a flat list, but we mark elements of the
    415           * same set so that they are "merged" together in the functions that consume
    416           * this list, eg mbedtls_x509_dn_gets().
    417           */

   \                                 In section .text, align 2, keep-with-next
    418          int mbedtls_x509_get_name( unsigned char **p, const unsigned char *end,
    419                             mbedtls_x509_name *cur )
    420          {
   \                     mbedtls_x509_get_name: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
   \        0x6   0x4616             MOV      R6,R2
   \        0x8   0xE007             B.N      ??mbedtls_x509_get_name_0
    421              int ret;
    422              size_t set_len;
    423              const unsigned char *end_set;
    424          
    425              /* don't use recursion, we'd risk stack overflow if not optimized */
    426              while( 1 )
    427              {
    428                  /*
    429                   * parse SET
    430                   */
    431                  if( ( ret = mbedtls_asn1_get_tag( p, end, &set_len,
    432                          MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SET ) ) != 0 )
    433                      return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
    434          
    435                  end_set  = *p + set_len;
    436          
    437                  while( 1 )
    438                  {
    439                      if( ( ret = x509_get_attr_type_value( p, end_set, cur ) ) != 0 )
    440                          return( ret );
    441          
    442                      if( *p == end_set )
    443                          break;
    444          
    445                      /* Mark this item as being no the only one in a set */
    446                      cur->next_merged = 1;
    447          
    448                      cur->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
    449          
    450                      if( cur->next == NULL )
    451                          return( MBEDTLS_ERR_X509_ALLOC_FAILED );
    452          
    453                      cur = cur->next;
    454                  }
    455          
    456                  /*
    457                   * continue until end of SEQUENCE is reached
    458                   */
    459                  if( *p == end )
    460                      return( 0 );
    461          
    462                  cur->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
   \                     ??mbedtls_x509_get_name_1: (+1)
   \        0xA   0x2120             MOVS     R1,#+32
   \        0xC   0x2001             MOVS     R0,#+1
   \        0xE   0x....'....        BL       mbedtls_calloc
   \       0x12   0x61B0             STR      R0,[R6, #+24]
    463          
    464                  if( cur->next == NULL )
   \       0x14   0x2800             CMP      R0,#+0
   \       0x16   0xD027             BEQ.N    ??mbedtls_x509_get_name_2
    465                      return( MBEDTLS_ERR_X509_ALLOC_FAILED );
    466          
    467                  cur = cur->next;
   \       0x18   0x4606             MOV      R6,R0
   \                     ??mbedtls_x509_get_name_0: (+1)
   \       0x1A   0x2331             MOVS     R3,#+49
   \       0x1C   0x466A             MOV      R2,SP
   \       0x1E   0x4629             MOV      R1,R5
   \       0x20   0x4620             MOV      R0,R4
   \       0x22   0x....'....        BL       mbedtls_asn1_get_tag
   \       0x26   0x2800             CMP      R0,#+0
   \       0x28   0xD103             BNE.N    ??mbedtls_x509_get_name_3
   \       0x2A   0x6820             LDR      R0,[R4, #+0]
   \       0x2C   0x9900             LDR      R1,[SP, #+0]
   \       0x2E   0x1847             ADDS     R7,R0,R1
   \       0x30   0xE00E             B.N      ??mbedtls_x509_get_name_4
   \                     ??mbedtls_x509_get_name_3: (+1)
   \       0x32   0xF5A0 0x500E      SUB      R0,R0,#+9088
   \       0x36   0xBDF2             POP      {R1,R4-R7,PC}
   \                     ??mbedtls_x509_get_name_5: (+1)
   \       0x38   0x6820             LDR      R0,[R4, #+0]
   \       0x3A   0x42B8             CMP      R0,R7
   \       0x3C   0xD010             BEQ.N    ??mbedtls_x509_get_name_6
   \       0x3E   0x2001             MOVS     R0,#+1
   \       0x40   0x7730             STRB     R0,[R6, #+28]
   \       0x42   0x2120             MOVS     R1,#+32
   \       0x44   0x....'....        BL       mbedtls_calloc
   \       0x48   0x61B0             STR      R0,[R6, #+24]
   \       0x4A   0x2800             CMP      R0,#+0
   \       0x4C   0xD00C             BEQ.N    ??mbedtls_x509_get_name_2
   \       0x4E   0x4606             MOV      R6,R0
   \                     ??mbedtls_x509_get_name_4: (+1)
   \       0x50   0x4632             MOV      R2,R6
   \       0x52   0x4639             MOV      R1,R7
   \       0x54   0x4620             MOV      R0,R4
   \       0x56   0x....'....        BL       x509_get_attr_type_value
   \       0x5A   0x2800             CMP      R0,#+0
   \       0x5C   0xD0EC             BEQ.N    ??mbedtls_x509_get_name_5
   \       0x5E   0xBDF2             POP      {R1,R4-R7,PC}
   \                     ??mbedtls_x509_get_name_6: (+1)
   \       0x60   0x42A8             CMP      R0,R5
   \       0x62   0xD1D2             BNE.N    ??mbedtls_x509_get_name_1
   \       0x64   0x2000             MOVS     R0,#+0
   \       0x66   0xBDF2             POP      {R1,R4-R7,PC}
   \                     ??mbedtls_x509_get_name_2: (+1)
   \       0x68   0x....'....        LDR.W    R0,??DataTable16_14  ;; 0xffffd780
   \       0x6C   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    468              }
    469          }
    470          

   \                                 In section .text, align 2, keep-with-next
    471          static int x509_parse_int( unsigned char **p, size_t n, int *res )
    472          {
   \                     x509_parse_int: (+1)
   \        0x0   0xB410             PUSH     {R4}
    473              *res = 0;
   \        0x2   0x2300             MOVS     R3,#+0
   \        0x4   0x6013             STR      R3,[R2, #+0]
   \        0x6   0xE00D             B.N      ??x509_parse_int_0
    474          
    475              for( ; n > 0; --n )
    476              {
    477                  if( ( **p < '0') || ( **p > '9' ) )
    478                      return ( MBEDTLS_ERR_X509_INVALID_DATE );
    479          
    480                  *res *= 10;
   \                     ??x509_parse_int_1: (+1)
   \        0x8   0x6813             LDR      R3,[R2, #+0]
   \        0xA   0xEB03 0x0483      ADD      R4,R3,R3, LSL #+2
   \        0xE   0x0063             LSLS     R3,R4,#+1
   \       0x10   0x6013             STR      R3,[R2, #+0]
    481                  *res += ( *(*p)++ - '0' );
   \       0x12   0x6803             LDR      R3,[R0, #+0]
   \       0x14   0x1C5C             ADDS     R4,R3,#+1
   \       0x16   0x6004             STR      R4,[R0, #+0]
   \       0x18   0x6814             LDR      R4,[R2, #+0]
   \       0x1A   0x781B             LDRB     R3,[R3, #+0]
   \       0x1C   0x3B30             SUBS     R3,R3,#+48
   \       0x1E   0x191C             ADDS     R4,R3,R4
   \       0x20   0x6014             STR      R4,[R2, #+0]
   \       0x22   0x1E49             SUBS     R1,R1,#+1
   \                     ??x509_parse_int_0: (+1)
   \       0x24   0x2900             CMP      R1,#+0
   \       0x26   0xD007             BEQ.N    ??x509_parse_int_2
   \       0x28   0x6803             LDR      R3,[R0, #+0]
   \       0x2A   0x781B             LDRB     R3,[R3, #+0]
   \       0x2C   0x3B30             SUBS     R3,R3,#+48
   \       0x2E   0x2B0A             CMP      R3,#+10
   \       0x30   0xD3EA             BCC.N    ??x509_parse_int_1
   \       0x32   0x....'....        LDR.W    R0,??DataTable16_15  ;; 0xffffdc00
   \       0x36   0xE000             B.N      ??x509_parse_int_3
    482              }
    483          
    484              return( 0 );
   \                     ??x509_parse_int_2: (+1)
   \       0x38   0x2000             MOVS     R0,#+0
   \                     ??x509_parse_int_3: (+1)
   \       0x3A   0xBC10             POP      {R4}
   \       0x3C   0x4770             BX       LR               ;; return
    485          }
    486          

   \                                 In section .text, align 4, keep-with-next
    487          static int x509_date_is_valid(const mbedtls_x509_time *t )
    488          {
    489              int ret = MBEDTLS_ERR_X509_INVALID_DATE;
    490              int month_len;
    491          
    492              CHECK_RANGE( 0, 9999, t->year );
   \                     x509_date_is_valid: (+1)
   \        0x0   0x6801             LDR      R1,[R0, #+0]
   \        0x2   0xF242 0x7210      MOVW     R2,#+10000
   \        0x6   0x4291             CMP      R1,R2
   \        0x8   0xD23B             BCS.N    ??x509_date_is_valid_1
    493              CHECK_RANGE( 0, 23,   t->hour );
   \        0xA   0x68C1             LDR      R1,[R0, #+12]
   \        0xC   0x2918             CMP      R1,#+24
   \        0xE   0xD238             BCS.N    ??x509_date_is_valid_1
    494              CHECK_RANGE( 0, 59,   t->min  );
   \       0x10   0x6901             LDR      R1,[R0, #+16]
   \       0x12   0x293C             CMP      R1,#+60
   \       0x14   0xD235             BCS.N    ??x509_date_is_valid_1
    495              CHECK_RANGE( 0, 59,   t->sec  );
   \       0x16   0x6941             LDR      R1,[R0, #+20]
   \       0x18   0x293C             CMP      R1,#+60
   \       0x1A   0xD232             BCS.N    ??x509_date_is_valid_1
    496          
    497              switch( t->mon )
   \       0x1C   0x6841             LDR      R1,[R0, #+4]
   \       0x1E   0x1E49             SUBS     R1,R1,#+1
   \       0x20   0x290B             CMP      R1,#+11
   \       0x22   0xD82E             BHI.N    ??x509_date_is_valid_1
   \       0x24   0xE8DF 0xF001      TBB      [PC, R1]
   \                     ??x509_date_is_valid_0:
   \       0x28   0x06 0x0A          DC8      0x6,0xA,0x6,0x8
   \              0x06 0x08    
   \       0x2C   0x06 0x08          DC8      0x6,0x8,0x6,0x6
   \              0x06 0x06    
   \       0x30   0x08 0x06          DC8      0x8,0x6,0x8,0x6
   \              0x08 0x06    
    498              {
    499                  case 1: case 3: case 5: case 7: case 8: case 10: case 12:
    500                      month_len = 31;
   \                     ??x509_date_is_valid_2: (+1)
   \       0x34   0x211F             MOVS     R1,#+31
    501                      break;
   \       0x36   0xE01E             B.N      ??x509_date_is_valid_3
    502                  case 4: case 6: case 9: case 11:
    503                      month_len = 30;
   \                     ??x509_date_is_valid_4: (+1)
   \       0x38   0x211E             MOVS     R1,#+30
    504                      break;
   \       0x3A   0xE01C             B.N      ??x509_date_is_valid_3
    505                  case 2:
    506                      if( ( !( t->year % 4 ) && t->year % 100 ) ||
    507                          !( t->year % 400 ) )
   \                     ??x509_date_is_valid_5: (+1)
   \       0x3C   0x6801             LDR      R1,[R0, #+0]
   \       0x3E   0x460A             MOV      R2,R1
   \       0x40   0x1052             ASRS     R2,R2,#+1
   \       0x42   0xEB01 0x7292      ADD      R2,R1,R2, LSR #+30
   \       0x46   0x1092             ASRS     R2,R2,#+2
   \       0x48   0xEBB1 0x0182      SUBS     R1,R1,R2, LSL #+2
   \       0x4C   0xD107             BNE.N    ??x509_date_is_valid_6
   \       0x4E   0x6801             LDR      R1,[R0, #+0]
   \       0x50   0x2264             MOVS     R2,#+100
   \       0x52   0xFB91 0xF3F2      SDIV     R3,R1,R2
   \       0x56   0xFB02 0x1113      MLS      R1,R2,R3,R1
   \       0x5A   0x2900             CMP      R1,#+0
   \       0x5C   0xD108             BNE.N    ??x509_date_is_valid_7
   \                     ??x509_date_is_valid_6: (+1)
   \       0x5E   0x6801             LDR      R1,[R0, #+0]
   \       0x60   0xF44F 0x72C8      MOV      R2,#+400
   \       0x64   0xFB91 0xF3F2      SDIV     R3,R1,R2
   \       0x68   0xFB02 0x1113      MLS      R1,R2,R3,R1
   \       0x6C   0x2900             CMP      R1,#+0
   \       0x6E   0xD101             BNE.N    ??x509_date_is_valid_8
    508                          month_len = 29;
   \                     ??x509_date_is_valid_7: (+1)
   \       0x70   0x211D             MOVS     R1,#+29
   \       0x72   0xE000             B.N      ??x509_date_is_valid_3
    509                      else
    510                          month_len = 28;
   \                     ??x509_date_is_valid_8: (+1)
   \       0x74   0x211C             MOVS     R1,#+28
    511                      break;
    512                  default:
    513                      return( ret );
    514              }
    515              CHECK_RANGE( 1, month_len, t->day );
   \                     ??x509_date_is_valid_3: (+1)
   \       0x76   0x6882             LDR      R2,[R0, #+8]
   \       0x78   0x2A01             CMP      R2,#+1
   \       0x7A   0xDB02             BLT.N    ??x509_date_is_valid_1
   \       0x7C   0x4610             MOV      R0,R2
   \       0x7E   0x4281             CMP      R1,R0
   \       0x80   0xDA02             BGE.N    ??x509_date_is_valid_9
   \                     ??x509_date_is_valid_1: (+1)
   \       0x82   0x....'....        LDR.W    R0,??DataTable16_15  ;; 0xffffdc00
   \       0x86   0x4770             BX       LR
    516          
    517              return( 0 );
   \                     ??x509_date_is_valid_9: (+1)
   \       0x88   0x2000             MOVS     R0,#+0
   \       0x8A   0x4770             BX       LR               ;; return
    518          }
    519          
    520          /*
    521           * Parse an ASN1_UTC_TIME (yearlen=2) or ASN1_GENERALIZED_TIME (yearlen=4)
    522           * field.
    523           */

   \                                 In section .text, align 2, keep-with-next
    524          static int x509_parse_time( unsigned char **p, size_t len, size_t yearlen,
    525                                      mbedtls_x509_time *tm )
    526          {
   \                     x509_parse_time: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x4605             MOV      R5,R0
   \        0x4   0x460C             MOV      R4,R1
   \        0x6   0x4617             MOV      R7,R2
   \        0x8   0x461E             MOV      R6,R3
    527              int ret;
    528          
    529              /*
    530               * Minimum length is 10 or 12 depending on yearlen
    531               */
    532              if ( len < yearlen + 8 )
   \        0xA   0xF107 0x0008      ADD      R0,R7,#+8
   \        0xE   0x4284             CMP      R4,R0
   \       0x10   0xD349             BCC.N    ??x509_parse_time_0
    533                  return ( MBEDTLS_ERR_X509_INVALID_DATE );
    534              len -= yearlen + 8;
   \       0x12   0x1BE4             SUBS     R4,R4,R7
   \       0x14   0x3C08             SUBS     R4,R4,#+8
    535          
    536              /*
    537               * Parse year, month, day, hour, minute
    538               */
    539              CHECK( x509_parse_int( p, yearlen, &tm->year ) );
   \       0x16   0x4632             MOV      R2,R6
   \       0x18   0x4639             MOV      R1,R7
   \       0x1A   0x4628             MOV      R0,R5
   \       0x1C   0x....'....        BL       x509_parse_int
   \       0x20   0x2800             CMP      R0,#+0
   \       0x22   0xD149             BNE.N    ??x509_parse_time_1
    540              if ( 2 == yearlen )
   \       0x24   0x2F02             CMP      R7,#+2
   \       0x26   0xD108             BNE.N    ??x509_parse_time_2
    541              {
    542                  if ( tm->year < 50 )
   \       0x28   0x6830             LDR      R0,[R6, #+0]
   \       0x2A   0x2832             CMP      R0,#+50
   \       0x2C   0xDA01             BGE.N    ??x509_parse_time_3
    543                      tm->year += 100;
   \       0x2E   0x3064             ADDS     R0,R0,#+100
   \       0x30   0x6030             STR      R0,[R6, #+0]
    544          
    545                  tm->year += 1900;
   \                     ??x509_parse_time_3: (+1)
   \       0x32   0x6830             LDR      R0,[R6, #+0]
   \       0x34   0xF200 0x706C      ADDW     R0,R0,#+1900
   \       0x38   0x6030             STR      R0,[R6, #+0]
    546              }
    547          
    548              CHECK( x509_parse_int( p, 2, &tm->mon ) );
   \                     ??x509_parse_time_2: (+1)
   \       0x3A   0x1D32             ADDS     R2,R6,#+4
   \       0x3C   0x2102             MOVS     R1,#+2
   \       0x3E   0x4628             MOV      R0,R5
   \       0x40   0x....'....        BL       x509_parse_int
   \       0x44   0x2800             CMP      R0,#+0
   \       0x46   0xD137             BNE.N    ??x509_parse_time_1
    549              CHECK( x509_parse_int( p, 2, &tm->day ) );
   \       0x48   0xF106 0x0208      ADD      R2,R6,#+8
   \       0x4C   0x2102             MOVS     R1,#+2
   \       0x4E   0x4628             MOV      R0,R5
   \       0x50   0x....'....        BL       x509_parse_int
   \       0x54   0x2800             CMP      R0,#+0
   \       0x56   0xD12F             BNE.N    ??x509_parse_time_1
    550              CHECK( x509_parse_int( p, 2, &tm->hour ) );
   \       0x58   0xF106 0x020C      ADD      R2,R6,#+12
   \       0x5C   0x2102             MOVS     R1,#+2
   \       0x5E   0x4628             MOV      R0,R5
   \       0x60   0x....'....        BL       x509_parse_int
   \       0x64   0x2800             CMP      R0,#+0
   \       0x66   0xD127             BNE.N    ??x509_parse_time_1
    551              CHECK( x509_parse_int( p, 2, &tm->min ) );
   \       0x68   0xF106 0x0210      ADD      R2,R6,#+16
   \       0x6C   0x2102             MOVS     R1,#+2
   \       0x6E   0x4628             MOV      R0,R5
   \       0x70   0x....'....        BL       x509_parse_int
   \       0x74   0x2800             CMP      R0,#+0
   \       0x76   0xD11F             BNE.N    ??x509_parse_time_1
    552          
    553              /*
    554               * Parse seconds if present
    555               */
    556              if ( len >= 2 )
   \       0x78   0x2C02             CMP      R4,#+2
   \       0x7A   0xD314             BCC.N    ??x509_parse_time_0
    557              {
    558                  CHECK( x509_parse_int( p, 2, &tm->sec ) );
   \       0x7C   0xF106 0x0214      ADD      R2,R6,#+20
   \       0x80   0x2102             MOVS     R1,#+2
   \       0x82   0x4628             MOV      R0,R5
   \       0x84   0x....'....        BL       x509_parse_int
   \       0x88   0x2800             CMP      R0,#+0
   \       0x8A   0xD115             BNE.N    ??x509_parse_time_1
    559                  len -= 2;
   \       0x8C   0x1EA4             SUBS     R4,R4,#+2
    560              }
    561              else
    562                  return ( MBEDTLS_ERR_X509_INVALID_DATE );
    563          
    564              /*
    565               * Parse trailing 'Z' if present
    566               */
    567              if ( 1 == len && 'Z' == **p )
   \       0x8E   0x2C01             CMP      R4,#+1
   \       0x90   0xD107             BNE.N    ??x509_parse_time_4
   \       0x92   0x6828             LDR      R0,[R5, #+0]
   \       0x94   0x7800             LDRB     R0,[R0, #+0]
   \       0x96   0x285A             CMP      R0,#+90
   \       0x98   0xD103             BNE.N    ??x509_parse_time_4
    568              {
    569                  (*p)++;
   \       0x9A   0x6828             LDR      R0,[R5, #+0]
   \       0x9C   0x1C40             ADDS     R0,R0,#+1
   \       0x9E   0x6028             STR      R0,[R5, #+0]
    570                  len--;
   \       0xA0   0x2400             MOVS     R4,#+0
    571              }
    572          
    573              /*
    574               * We should have parsed all characters at this point
    575               */
    576              if ( 0 != len )
   \                     ??x509_parse_time_4: (+1)
   \       0xA2   0x2C00             CMP      R4,#+0
   \       0xA4   0xD002             BEQ.N    ??x509_parse_time_5
    577                  return ( MBEDTLS_ERR_X509_INVALID_DATE );
   \                     ??x509_parse_time_0: (+1)
   \       0xA6   0x....'....        LDR.W    R0,??DataTable16_15  ;; 0xffffdc00
   \       0xAA   0xBDF2             POP      {R1,R4-R7,PC}
    578          
    579              CHECK( x509_date_is_valid( tm ) );
   \                     ??x509_parse_time_5: (+1)
   \       0xAC   0x4630             MOV      R0,R6
   \       0xAE   0x....'....        BL       x509_date_is_valid
   \       0xB2   0x2800             CMP      R0,#+0
   \       0xB4   0xD100             BNE.N    ??x509_parse_time_1
    580          
    581              return ( 0 );
   \       0xB6   0x2000             MOVS     R0,#+0
   \                     ??x509_parse_time_1: (+1)
   \       0xB8   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    582          }
    583          
    584          /*
    585           *  Time ::= CHOICE {
    586           *       utcTime        UTCTime,
    587           *       generalTime    GeneralizedTime }
    588           */

   \                                 In section .text, align 2, keep-with-next
    589          int mbedtls_x509_get_time( unsigned char **p, const unsigned char *end,
    590                                     mbedtls_x509_time *tm )
    591          {
   \                     mbedtls_x509_get_time: (+1)
   \        0x0   0xB57C             PUSH     {R2-R6,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x4615             MOV      R5,R2
    592              int ret;
    593              size_t len, year_len;
    594              unsigned char tag;
    595          
    596              if( ( end - *p ) < 1 )
   \        0x6   0x6820             LDR      R0,[R4, #+0]
   \        0x8   0x1A08             SUBS     R0,R1,R0
   \        0xA   0x2801             CMP      R0,#+1
   \        0xC   0xDA02             BGE.N    ??mbedtls_x509_get_time_0
    597                  return( MBEDTLS_ERR_X509_INVALID_DATE +
    598                          MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   \        0xE   0x....'....        LDR.W    R0,??DataTable16_16  ;; 0xffffdba0
   \       0x12   0xBD76             POP      {R1,R2,R4-R6,PC}
    599          
    600              tag = **p;
   \                     ??mbedtls_x509_get_time_0: (+1)
   \       0x14   0x6820             LDR      R0,[R4, #+0]
   \       0x16   0x7800             LDRB     R0,[R0, #+0]
    601          
    602              if( tag == MBEDTLS_ASN1_UTC_TIME )
   \       0x18   0x2817             CMP      R0,#+23
   \       0x1A   0xD10C             BNE.N    ??mbedtls_x509_get_time_1
    603                  year_len = 2;
   \       0x1C   0x2602             MOVS     R6,#+2
    604              else if( tag == MBEDTLS_ASN1_GENERALIZED_TIME )
    605                  year_len = 4;
    606              else
    607                  return( MBEDTLS_ERR_X509_INVALID_DATE +
    608                          MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
    609          
    610              (*p)++;
   \                     ??mbedtls_x509_get_time_2: (+1)
   \       0x1E   0x6820             LDR      R0,[R4, #+0]
   \       0x20   0x1C40             ADDS     R0,R0,#+1
   \       0x22   0x6020             STR      R0,[R4, #+0]
    611              ret = mbedtls_asn1_get_len( p, end, &len );
   \       0x24   0x466A             MOV      R2,SP
   \       0x26   0x4620             MOV      R0,R4
   \       0x28   0x....'....        BL       mbedtls_asn1_get_len
    612          
    613              if( ret != 0 )
   \       0x2C   0x2800             CMP      R0,#+0
   \       0x2E   0xD009             BEQ.N    ??mbedtls_x509_get_time_3
    614                  return( MBEDTLS_ERR_X509_INVALID_DATE + ret );
   \       0x30   0xF5A0 0x5010      SUB      R0,R0,#+9216
   \       0x34   0xBD76             POP      {R1,R2,R4-R6,PC}
   \                     ??mbedtls_x509_get_time_1: (+1)
   \       0x36   0x2818             CMP      R0,#+24
   \       0x38   0xD101             BNE.N    ??mbedtls_x509_get_time_4
   \       0x3A   0x2604             MOVS     R6,#+4
   \       0x3C   0xE7EF             B.N      ??mbedtls_x509_get_time_2
   \                     ??mbedtls_x509_get_time_4: (+1)
   \       0x3E   0x....'....        LDR.W    R0,??DataTable16_17  ;; 0xffffdb9e
   \       0x42   0xBD76             POP      {R1,R2,R4-R6,PC}
    615          
    616              return x509_parse_time( p, len, year_len, tm );
   \                     ??mbedtls_x509_get_time_3: (+1)
   \       0x44   0x462B             MOV      R3,R5
   \       0x46   0x4632             MOV      R2,R6
   \       0x48   0x9900             LDR      R1,[SP, #+0]
   \       0x4A   0x4620             MOV      R0,R4
   \       0x4C   0x....'....        BL       x509_parse_time
   \       0x50   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
    617          }
    618          

   \                                 In section .text, align 2, keep-with-next
    619          int mbedtls_x509_get_sig( unsigned char **p, const unsigned char *end, mbedtls_x509_buf *sig )
    620          {
   \                     mbedtls_x509_get_sig: (+1)
   \        0x0   0xB57C             PUSH     {R2-R6,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x4615             MOV      R5,R2
    621              int ret;
    622              size_t len;
    623              int tag_type;
    624          
    625              if( ( end - *p ) < 1 )
   \        0x6   0x6820             LDR      R0,[R4, #+0]
   \        0x8   0x1A08             SUBS     R0,R1,R0
   \        0xA   0x2801             CMP      R0,#+1
   \        0xC   0xDA02             BGE.N    ??mbedtls_x509_get_sig_0
    626                  return( MBEDTLS_ERR_X509_INVALID_SIGNATURE +
    627                          MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   \        0xE   0x....'....        LDR.W    R0,??DataTable16_18  ;; 0xffffdb20
   \       0x12   0xBD76             POP      {R1,R2,R4-R6,PC}
    628          
    629              tag_type = **p;
   \                     ??mbedtls_x509_get_sig_0: (+1)
   \       0x14   0x6820             LDR      R0,[R4, #+0]
   \       0x16   0x7806             LDRB     R6,[R0, #+0]
    630          
    631              if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
   \       0x18   0x466A             MOV      R2,SP
   \       0x1A   0x4620             MOV      R0,R4
   \       0x1C   0x....'....        BL       mbedtls_asn1_get_bitstring_null
   \       0x20   0x2800             CMP      R0,#+0
   \       0x22   0xD002             BEQ.N    ??mbedtls_x509_get_sig_1
    632                  return( MBEDTLS_ERR_X509_INVALID_SIGNATURE + ret );
   \       0x24   0xF5A0 0x5012      SUB      R0,R0,#+9344
   \       0x28   0xBD76             POP      {R1,R2,R4-R6,PC}
    633          
    634              sig->tag = tag_type;
   \                     ??mbedtls_x509_get_sig_1: (+1)
   \       0x2A   0x602E             STR      R6,[R5, #+0]
    635              sig->len = len;
   \       0x2C   0x9800             LDR      R0,[SP, #+0]
   \       0x2E   0x6068             STR      R0,[R5, #+4]
    636              sig->p = *p;
   \       0x30   0x6820             LDR      R0,[R4, #+0]
   \       0x32   0x60A8             STR      R0,[R5, #+8]
    637          
    638              *p += len;
   \       0x34   0x6820             LDR      R0,[R4, #+0]
   \       0x36   0x9900             LDR      R1,[SP, #+0]
   \       0x38   0x4408             ADD      R0,R0,R1
   \       0x3A   0x6020             STR      R0,[R4, #+0]
    639          
    640              return( 0 );
   \       0x3C   0x2000             MOVS     R0,#+0
   \       0x3E   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
    641          }
    642          
    643          /*
    644           * Get signature algorithm from alg OID and optional parameters
    645           */

   \                                 In section .text, align 2, keep-with-next
    646          int mbedtls_x509_get_sig_alg( const mbedtls_x509_buf *sig_oid, const mbedtls_x509_buf *sig_params,
    647                                mbedtls_md_type_t *md_alg, mbedtls_pk_type_t *pk_alg,
    648                                void **sig_opts )
    649          {
   \                     mbedtls_x509_get_sig_alg: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x460D             MOV      R5,R1
   \        0x4   0x4617             MOV      R7,R2
   \        0x6   0x461C             MOV      R4,R3
   \        0x8   0x9E06             LDR      R6,[SP, #+24]
    650              int ret;
    651          
    652              if( *sig_opts != NULL )
   \        0xA   0x6831             LDR      R1,[R6, #+0]
   \        0xC   0x2900             CMP      R1,#+0
   \        0xE   0xD002             BEQ.N    ??mbedtls_x509_get_sig_alg_0
    653                  return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   \       0x10   0x....'....        LDR.W    R0,??DataTable16_19  ;; 0xffffd800
   \       0x14   0xBDF2             POP      {R1,R4-R7,PC}
    654          
    655              if( ( ret = mbedtls_oid_get_sig_alg( sig_oid, md_alg, pk_alg ) ) != 0 )
   \                     ??mbedtls_x509_get_sig_alg_0: (+1)
   \       0x16   0x4622             MOV      R2,R4
   \       0x18   0x4639             MOV      R1,R7
   \       0x1A   0x....'....        BL       mbedtls_oid_get_sig_alg
   \       0x1E   0x2800             CMP      R0,#+0
   \       0x20   0xD002             BEQ.N    ??mbedtls_x509_get_sig_alg_1
    656                  return( MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG + ret );
   \       0x22   0xF5A0 0x5018      SUB      R0,R0,#+9728
   \       0x26   0xBDF2             POP      {R1,R4-R7,PC}
    657          
    658          #if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
    659              if( *pk_alg == MBEDTLS_PK_RSASSA_PSS )
   \                     ??mbedtls_x509_get_sig_alg_1: (+1)
   \       0x28   0x7820             LDRB     R0,[R4, #+0]
   \       0x2A   0x2806             CMP      R0,#+6
   \       0x2C   0xD118             BNE.N    ??mbedtls_x509_get_sig_alg_2
    660              {
    661                  mbedtls_pk_rsassa_pss_options *pss_opts;
    662          
    663                  pss_opts = mbedtls_calloc( 1, sizeof( mbedtls_pk_rsassa_pss_options ) );
   \       0x2E   0x2108             MOVS     R1,#+8
   \       0x30   0x2001             MOVS     R0,#+1
   \       0x32   0x....'....        BL       mbedtls_calloc
   \       0x36   0x0004             MOVS     R4,R0
    664                  if( pss_opts == NULL )
   \       0x38   0xD102             BNE.N    ??mbedtls_x509_get_sig_alg_3
    665                      return( MBEDTLS_ERR_X509_ALLOC_FAILED );
   \       0x3A   0x....'....        LDR.W    R0,??DataTable16_14  ;; 0xffffd780
   \       0x3E   0xBDF2             POP      {R1,R4-R7,PC}
    666          
    667                  ret = mbedtls_x509_get_rsassa_pss_params( sig_params,
    668                                                    md_alg,
    669                                                    &pss_opts->mgf1_hash_id,
    670                                                    &pss_opts->expected_salt_len );
   \                     ??mbedtls_x509_get_sig_alg_3: (+1)
   \       0x40   0x1D23             ADDS     R3,R4,#+4
   \       0x42   0x4622             MOV      R2,R4
   \       0x44   0x4639             MOV      R1,R7
   \       0x46   0x4628             MOV      R0,R5
   \       0x48   0x....'....        BL       mbedtls_x509_get_rsassa_pss_params
   \       0x4C   0x0005             MOVS     R5,R0
    671                  if( ret != 0 )
   \       0x4E   0xD004             BEQ.N    ??mbedtls_x509_get_sig_alg_4
    672                  {
    673                      mbedtls_free( pss_opts );
   \       0x50   0x4620             MOV      R0,R4
   \       0x52   0x....'....        BL       mbedtls_free
    674                      return( ret );
   \       0x56   0x4628             MOV      R0,R5
   \       0x58   0xBDF2             POP      {R1,R4-R7,PC}
    675                  }
    676          
    677                  *sig_opts = (void *) pss_opts;
   \                     ??mbedtls_x509_get_sig_alg_4: (+1)
   \       0x5A   0x6034             STR      R4,[R6, #+0]
    678              }
    679              else
    680          #endif /* MBEDTLS_X509_RSASSA_PSS_SUPPORT */
    681              {
    682                  /* Make sure parameters are absent or NULL */
    683                  if( ( sig_params->tag != MBEDTLS_ASN1_NULL && sig_params->tag != 0 ) ||
    684                        sig_params->len != 0 )
    685                  return( MBEDTLS_ERR_X509_INVALID_ALG );
    686              }
    687          
    688              return( 0 );
   \                     ??mbedtls_x509_get_sig_alg_5: (+1)
   \       0x5C   0x2000             MOVS     R0,#+0
   \       0x5E   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
   \                     ??mbedtls_x509_get_sig_alg_2: (+1)
   \       0x60   0x6828             LDR      R0,[R5, #+0]
   \       0x62   0x2805             CMP      R0,#+5
   \       0x64   0xD001             BEQ.N    ??mbedtls_x509_get_sig_alg_6
   \       0x66   0x2800             CMP      R0,#+0
   \       0x68   0xD102             BNE.N    ??mbedtls_x509_get_sig_alg_7
   \                     ??mbedtls_x509_get_sig_alg_6: (+1)
   \       0x6A   0x6868             LDR      R0,[R5, #+4]
   \       0x6C   0x2800             CMP      R0,#+0
   \       0x6E   0xD0F5             BEQ.N    ??mbedtls_x509_get_sig_alg_5
   \                     ??mbedtls_x509_get_sig_alg_7: (+1)
   \       0x70   0x....'....        LDR.W    R0,??DataTable16_11  ;; 0xffffdd00
   \       0x74   0xBDF2             POP      {R1,R4-R7,PC}
    689          }
    690          
    691          /*
    692           * X.509 Extensions (No parsing of extensions, pointer should
    693           * be either manually updated or extensions should be parsed!)
    694           */

   \                                 In section .text, align 2, keep-with-next
    695          int mbedtls_x509_get_ext( unsigned char **p, const unsigned char *end,
    696                            mbedtls_x509_buf *ext, int tag )
    697          {
   \                     mbedtls_x509_get_ext: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x4615             MOV      R5,R2
    698              int ret;
    699              size_t len;
    700          
    701              if( *p == end )
   \        0x6   0x6820             LDR      R0,[R4, #+0]
   \        0x8   0x4288             CMP      R0,R1
   \        0xA   0xD101             BNE.N    ??mbedtls_x509_get_ext_0
    702                  return( 0 );
   \        0xC   0x2000             MOVS     R0,#+0
   \        0xE   0xBD32             POP      {R1,R4,R5,PC}
    703          
    704              ext->tag = **p;
   \                     ??mbedtls_x509_get_ext_0: (+1)
   \       0x10   0x7800             LDRB     R0,[R0, #+0]
   \       0x12   0x6028             STR      R0,[R5, #+0]
    705          
    706              if( ( ret = mbedtls_asn1_get_tag( p, end, &ext->len,
    707                      MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | tag ) ) != 0 )
   \       0x14   0xF043 0x03A0      ORR      R3,R3,#0xA0
   \       0x18   0x1D2A             ADDS     R2,R5,#+4
   \       0x1A   0x4620             MOV      R0,R4
   \       0x1C   0x....'....        BL       mbedtls_asn1_get_tag
   \       0x20   0x2800             CMP      R0,#+0
   \       0x22   0xD118             BNE.N    ??mbedtls_x509_get_ext_1
    708                  return( ret );
    709          
    710              ext->p = *p;
   \       0x24   0x6820             LDR      R0,[R4, #+0]
   \       0x26   0x60A8             STR      R0,[R5, #+8]
    711              end = *p + ext->len;
   \       0x28   0x6820             LDR      R0,[R4, #+0]
   \       0x2A   0x6869             LDR      R1,[R5, #+4]
   \       0x2C   0x1845             ADDS     R5,R0,R1
    712          
    713              /*
    714               * Extensions  ::=  SEQUENCE SIZE (1..MAX) OF Extension
    715               *
    716               * Extension  ::=  SEQUENCE  {
    717               *      extnID      OBJECT IDENTIFIER,
    718               *      critical    BOOLEAN DEFAULT FALSE,
    719               *      extnValue   OCTET STRING  }
    720               */
    721              if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
    722                      MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
   \       0x2E   0x2330             MOVS     R3,#+48
   \       0x30   0x466A             MOV      R2,SP
   \       0x32   0x4629             MOV      R1,R5
   \       0x34   0x4620             MOV      R0,R4
   \       0x36   0x....'....        BL       mbedtls_asn1_get_tag
   \       0x3A   0x2800             CMP      R0,#+0
   \       0x3C   0xD002             BEQ.N    ??mbedtls_x509_get_ext_2
    723                  return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
   \       0x3E   0xF5A0 0x5014      SUB      R0,R0,#+9472
   \       0x42   0xBD32             POP      {R1,R4,R5,PC}
    724          
    725              if( end != *p + len )
   \                     ??mbedtls_x509_get_ext_2: (+1)
   \       0x44   0x6820             LDR      R0,[R4, #+0]
   \       0x46   0x9900             LDR      R1,[SP, #+0]
   \       0x48   0x4408             ADD      R0,R0,R1
   \       0x4A   0x4285             CMP      R5,R0
   \       0x4C   0xD002             BEQ.N    ??mbedtls_x509_get_ext_3
    726                  return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
    727                          MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   \       0x4E   0x....'....        LDR.W    R0,??DataTable16_20  ;; 0xffffda9a
   \       0x52   0xBD32             POP      {R1,R4,R5,PC}
    728          
    729              return( 0 );
   \                     ??mbedtls_x509_get_ext_3: (+1)
   \       0x54   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_x509_get_ext_1: (+1)
   \       0x56   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    730          }
    731          
    732          /*
    733           * Store the name in printable form into buf; no more
    734           * than size characters will be written
    735           */

   \                                 In section .text, align 2, keep-with-next
    736          int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn )
    737          {
   \                     mbedtls_x509_dn_gets: (+1)
   \        0x0   0xE92D 0x43F0      PUSH     {R4-R9,LR}
   \        0x4   0xB0C1             SUB      SP,SP,#+260
   \        0x6   0x4680             MOV      R8,R0
   \        0x8   0x460E             MOV      R6,R1
   \        0xA   0x4617             MOV      R7,R2
    738              int ret;
    739              size_t i, n;
    740              unsigned char c, merge = 0;
   \        0xC   0xF04F 0x0900      MOV      R9,#+0
    741              const mbedtls_x509_name *name;
    742              const char *short_name = NULL;
   \       0x10   0x4648             MOV      R0,R9
   \       0x12   0x9000             STR      R0,[SP, #+0]
    743              char s[MBEDTLS_X509_MAX_DN_NAME_SIZE], *p;
    744          
    745              memset( s, 0, sizeof( s ) );
   \       0x14   0x4602             MOV      R2,R0
   \       0x16   0xF44F 0x7180      MOV      R1,#+256
   \       0x1A   0xA801             ADD      R0,SP,#+4
   \       0x1C   0x....'....        BL       __aeabi_memset4
    746          
    747              name = dn;
   \       0x20   0x463D             MOV      R5,R7
    748              p = buf;
    749              n = size;
   \       0x22   0x4634             MOV      R4,R6
   \       0x24   0xE000             B.N      ??mbedtls_x509_dn_gets_0
    750          
    751              while( name != NULL )
    752              {
    753                  if( !name->oid.p )
    754                  {
    755                      name = name->next;
   \                     ??mbedtls_x509_dn_gets_1: (+1)
   \       0x26   0x69AD             LDR      R5,[R5, #+24]
    756                      continue;
    757                  }
   \                     ??mbedtls_x509_dn_gets_0: (+1)
   \       0x28   0x2D00             CMP      R5,#+0
   \       0x2A   0xD046             BEQ.N    ??mbedtls_x509_dn_gets_2
   \       0x2C   0x68A8             LDR      R0,[R5, #+8]
   \       0x2E   0x2800             CMP      R0,#+0
   \       0x30   0xD0F9             BEQ.N    ??mbedtls_x509_dn_gets_1
    758          
    759                  if( name != dn )
   \       0x32   0x42BD             CMP      R5,R7
   \       0x34   0xD00F             BEQ.N    ??mbedtls_x509_dn_gets_3
    760                  {
    761                      ret = mbedtls_snprintf( p, n, merge ? " + " : ", " );
   \       0x36   0xF1B9 0x0F00      CMP      R9,#+0
   \       0x3A   0xD001             BEQ.N    ??mbedtls_x509_dn_gets_4
   \       0x3C   0x....             ADR.N    R2,??DataTable15  ;; " + "
   \       0x3E   0xE000             B.N      ??mbedtls_x509_dn_gets_5
   \                     ??mbedtls_x509_dn_gets_4: (+1)
   \       0x40   0x....             ADR.N    R2,??DataTable15_1  ;; 0x2C, 0x20, 0x00, 0x00
   \                     ??mbedtls_x509_dn_gets_5: (+1)
   \       0x42   0x4621             MOV      R1,R4
   \       0x44   0x4640             MOV      R0,R8
   \       0x46   0x....'....        BL       snprintf
    762                      MBEDTLS_X509_SAFE_SNPRINTF;
   \       0x4A   0x2800             CMP      R0,#+0
   \       0x4C   0xD433             BMI.N    ??mbedtls_x509_dn_gets_6
   \       0x4E   0x42A0             CMP      R0,R4
   \       0x50   0xD231             BCS.N    ??mbedtls_x509_dn_gets_6
   \       0x52   0x1A24             SUBS     R4,R4,R0
   \       0x54   0x4480             ADD      R8,R8,R0
    763                  }
    764          
    765                  ret = mbedtls_oid_get_attr_short_name( &name->oid, &short_name );
    766          
    767                  if( ret == 0 )
   \                     ??mbedtls_x509_dn_gets_3: (+1)
   \       0x56   0x4669             MOV      R1,SP
   \       0x58   0x4628             MOV      R0,R5
   \       0x5A   0x....'....        BL       mbedtls_oid_get_attr_short_name
   \       0x5E   0x2800             CMP      R0,#+0
   \       0x60   0xD106             BNE.N    ??mbedtls_x509_dn_gets_7
    768                      ret = mbedtls_snprintf( p, n, "%s=", short_name );
   \       0x62   0x9B00             LDR      R3,[SP, #+0]
   \       0x64   0x....             ADR.N    R2,??DataTable15_2  ;; "%s="
   \       0x66   0x4621             MOV      R1,R4
   \       0x68   0x4640             MOV      R0,R8
   \       0x6A   0x....'....        BL       snprintf
   \       0x6E   0xE004             B.N      ??mbedtls_x509_dn_gets_8
    769                  else
    770                      ret = mbedtls_snprintf( p, n, "\?\?=" );
   \                     ??mbedtls_x509_dn_gets_7: (+1)
   \       0x70   0x....             ADR.N    R2,??DataTable15_3  ;; "??="
   \       0x72   0x4621             MOV      R1,R4
   \       0x74   0x4640             MOV      R0,R8
   \       0x76   0x....'....        BL       snprintf
    771                  MBEDTLS_X509_SAFE_SNPRINTF;
   \                     ??mbedtls_x509_dn_gets_8: (+1)
   \       0x7A   0x2800             CMP      R0,#+0
   \       0x7C   0xD41B             BMI.N    ??mbedtls_x509_dn_gets_6
   \       0x7E   0x42A0             CMP      R0,R4
   \       0x80   0xD219             BCS.N    ??mbedtls_x509_dn_gets_6
   \       0x82   0x1A24             SUBS     R4,R4,R0
   \       0x84   0x4480             ADD      R8,R8,R0
    772          
    773                  for( i = 0; i < name->val.len; i++ )
   \       0x86   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_x509_dn_gets_9: (+1)
   \       0x88   0x6929             LDR      R1,[R5, #+16]
   \       0x8A   0x4288             CMP      R0,R1
   \       0x8C   0xD21A             BCS.N    ??mbedtls_x509_dn_gets_10
    774                  {
    775                      if( i >= sizeof( s ) - 1 )
   \       0x8E   0x28FF             CMP      R0,#+255
   \       0x90   0xD218             BCS.N    ??mbedtls_x509_dn_gets_10
    776                          break;
    777          
    778                      c = name->val.p[i];
   \       0x92   0x6969             LDR      R1,[R5, #+20]
   \       0x94   0x5C09             LDRB     R1,[R1, R0]
    779                      if( c < 32 || c == 127 || ( c > 128 && c < 160 ) )
   \       0x96   0x2920             CMP      R1,#+32
   \       0x98   0xDB08             BLT.N    ??mbedtls_x509_dn_gets_11
   \       0x9A   0x297F             CMP      R1,#+127
   \       0x9C   0xD006             BEQ.N    ??mbedtls_x509_dn_gets_11
   \       0x9E   0xF1A1 0x0281      SUB      R2,R1,#+129
   \       0xA2   0x2A1F             CMP      R2,#+31
   \       0xA4   0xD302             BCC.N    ??mbedtls_x509_dn_gets_11
    780                           s[i] = '?';
    781                      else s[i] = c;
   \       0xA6   0xAA01             ADD      R2,SP,#+4
   \       0xA8   0x5411             STRB     R1,[R2, R0]
   \       0xAA   0xE002             B.N      ??mbedtls_x509_dn_gets_12
   \                     ??mbedtls_x509_dn_gets_11: (+1)
   \       0xAC   0x213F             MOVS     R1,#+63
   \       0xAE   0xAA01             ADD      R2,SP,#+4
   \       0xB0   0x5411             STRB     R1,[R2, R0]
    782                  }
   \                     ??mbedtls_x509_dn_gets_12: (+1)
   \       0xB2   0x1C40             ADDS     R0,R0,#+1
   \       0xB4   0xE7E8             B.N      ??mbedtls_x509_dn_gets_9
    783                  s[i] = '\0';
    784                  ret = mbedtls_snprintf( p, n, "%s", s );
    785                  MBEDTLS_X509_SAFE_SNPRINTF;
   \                     ??mbedtls_x509_dn_gets_6: (+1)
   \       0xB6   0x....             LDR.N    R0,??DataTable16_21  ;; 0xffffd680
   \       0xB8   0xE001             B.N      ??mbedtls_x509_dn_gets_13
    786          
    787                  merge = name->next_merged;
    788                  name = name->next;
    789              }
    790          
    791              return( (int) ( size - n ) );
   \                     ??mbedtls_x509_dn_gets_2: (+1)
   \       0xBA   0x1B36             SUBS     R6,R6,R4
   \       0xBC   0x4630             MOV      R0,R6
   \                     ??mbedtls_x509_dn_gets_13: (+1)
   \       0xBE   0xB041             ADD      SP,SP,#+260
   \       0xC0   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
   \                     ??mbedtls_x509_dn_gets_10: (+1)
   \       0xC4   0x2100             MOVS     R1,#+0
   \       0xC6   0xAA01             ADD      R2,SP,#+4
   \       0xC8   0x5411             STRB     R1,[R2, R0]
   \       0xCA   0xAB01             ADD      R3,SP,#+4
   \       0xCC   0x....             ADR.N    R2,??DataTable16  ;; 0x25, 0x73, 0x00, 0x00
   \       0xCE   0x4621             MOV      R1,R4
   \       0xD0   0x4640             MOV      R0,R8
   \       0xD2   0x....'....        BL       snprintf
   \       0xD6   0x2800             CMP      R0,#+0
   \       0xD8   0xD4ED             BMI.N    ??mbedtls_x509_dn_gets_6
   \       0xDA   0x42A0             CMP      R0,R4
   \       0xDC   0xD2EB             BCS.N    ??mbedtls_x509_dn_gets_6
   \       0xDE   0x1A24             SUBS     R4,R4,R0
   \       0xE0   0x4480             ADD      R8,R8,R0
   \       0xE2   0xF895 0x901C      LDRB     R9,[R5, #+28]
   \       0xE6   0x69AD             LDR      R5,[R5, #+24]
   \       0xE8   0xE79E             B.N      ??mbedtls_x509_dn_gets_0
    792          }
    793          
    794          /*
    795           * Store the serial in printable form into buf; no more
    796           * than size characters will be written
    797           */

   \                                 In section .text, align 2, keep-with-next
    798          int mbedtls_x509_serial_gets( char *buf, size_t size, const mbedtls_x509_buf *serial )
    799          {
   \                     mbedtls_x509_serial_gets: (+1)
   \        0x0   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \        0x4   0x4605             MOV      R5,R0
   \        0x6   0x460E             MOV      R6,R1
   \        0x8   0x4690             MOV      R8,R2
    800              int ret;
    801              size_t i, n, nr;
    802              char *p;
    803          
    804              p = buf;
    805              n = size;
   \        0xA   0x4637             MOV      R7,R6
    806          
    807              nr = ( serial->len <= 32 )
    808                  ? serial->len  : 28;
   \        0xC   0xF8D8 0x0004      LDR      R0,[R8, #+4]
   \       0x10   0x2821             CMP      R0,#+33
   \       0x12   0xD201             BCS.N    ??mbedtls_x509_serial_gets_0
   \       0x14   0x4681             MOV      R9,R0
   \       0x16   0xE001             B.N      ??mbedtls_x509_serial_gets_1
   \                     ??mbedtls_x509_serial_gets_0: (+1)
   \       0x18   0xF04F 0x091C      MOV      R9,#+28
    809          
    810              for( i = 0; i < nr; i++ )
   \                     ??mbedtls_x509_serial_gets_1: (+1)
   \       0x1C   0x2400             MOVS     R4,#+0
   \                     ??mbedtls_x509_serial_gets_2: (+1)
   \       0x1E   0x454C             CMP      R4,R9
   \       0x20   0xD226             BCS.N    ??mbedtls_x509_serial_gets_3
    811              {
    812                  if( i == 0 && nr > 1 && serial->p[i] == 0x0 )
   \       0x22   0x2C00             CMP      R4,#+0
   \       0x24   0xD107             BNE.N    ??mbedtls_x509_serial_gets_4
   \       0x26   0xF1B9 0x0F02      CMP      R9,#+2
   \       0x2A   0xD304             BCC.N    ??mbedtls_x509_serial_gets_4
   \       0x2C   0xF8D8 0x0008      LDR      R0,[R8, #+8]
   \       0x30   0x7800             LDRB     R0,[R0, #+0]
   \       0x32   0x2800             CMP      R0,#+0
   \       0x34   0xD015             BEQ.N    ??mbedtls_x509_serial_gets_5
    813                      continue;
    814          
    815                  ret = mbedtls_snprintf( p, n, "%02X%s",
    816                          serial->p[i], ( i < nr - 1 ) ? ":" : "" );
   \                     ??mbedtls_x509_serial_gets_4: (+1)
   \       0x36   0xF1A9 0x0001      SUB      R0,R9,#+1
   \       0x3A   0x4284             CMP      R4,R0
   \       0x3C   0xD301             BCC.N    ??mbedtls_x509_serial_gets_6
   \       0x3E   0x....             ADR.N    R0,??DataTable16_1  ;; ""
   \       0x40   0xE000             B.N      ??mbedtls_x509_serial_gets_7
   \                     ??mbedtls_x509_serial_gets_6: (+1)
   \       0x42   0x....             ADR.N    R0,??DataTable16_2  ;; ":"
   \                     ??mbedtls_x509_serial_gets_7: (+1)
   \       0x44   0x9000             STR      R0,[SP, #+0]
   \       0x46   0xF8D8 0x0008      LDR      R0,[R8, #+8]
   \       0x4A   0x5D03             LDRB     R3,[R0, R4]
   \       0x4C   0x....             LDR.N    R2,??DataTable16_22
   \       0x4E   0x4639             MOV      R1,R7
   \       0x50   0x4628             MOV      R0,R5
   \       0x52   0x....'....        BL       snprintf
    817                  MBEDTLS_X509_SAFE_SNPRINTF;
   \       0x56   0x2800             CMP      R0,#+0
   \       0x58   0xD417             BMI.N    ??mbedtls_x509_serial_gets_8
   \       0x5A   0x42B8             CMP      R0,R7
   \       0x5C   0xD215             BCS.N    ??mbedtls_x509_serial_gets_8
   \       0x5E   0x1A3F             SUBS     R7,R7,R0
   \       0x60   0x4405             ADD      R5,R5,R0
    818              }
   \                     ??mbedtls_x509_serial_gets_5: (+1)
   \       0x62   0x1C64             ADDS     R4,R4,#+1
   \       0x64   0xE7DB             B.N      ??mbedtls_x509_serial_gets_2
    819          
    820              if( nr != serial->len )
    821              {
    822                  ret = mbedtls_snprintf( p, n, "...." );
    823                  MBEDTLS_X509_SAFE_SNPRINTF;
   \                     ??mbedtls_x509_serial_gets_9: (+1)
   \       0x66   0x1A3F             SUBS     R7,R7,R0
    824              }
    825          
    826              return( (int) ( size - n ) );
   \                     ??mbedtls_x509_serial_gets_10: (+1)
   \       0x68   0x1BF6             SUBS     R6,R6,R7
   \       0x6A   0x4630             MOV      R0,R6
   \                     ??mbedtls_x509_serial_gets_11: (+1)
   \       0x6C   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
   \                     ??mbedtls_x509_serial_gets_3: (+1)
   \       0x70   0xF8D8 0x0004      LDR      R0,[R8, #+4]
   \       0x74   0x4581             CMP      R9,R0
   \       0x76   0xD0F7             BEQ.N    ??mbedtls_x509_serial_gets_10
   \       0x78   0x....             LDR.N    R2,??DataTable16_23
   \       0x7A   0x4639             MOV      R1,R7
   \       0x7C   0x4628             MOV      R0,R5
   \       0x7E   0x....'....        BL       snprintf
   \       0x82   0x2800             CMP      R0,#+0
   \       0x84   0xD401             BMI.N    ??mbedtls_x509_serial_gets_8
   \       0x86   0x42B8             CMP      R0,R7
   \       0x88   0xD3ED             BCC.N    ??mbedtls_x509_serial_gets_9
   \                     ??mbedtls_x509_serial_gets_8: (+1)
   \       0x8A   0x....             LDR.N    R0,??DataTable16_21  ;; 0xffffd680
   \       0x8C   0xE7EE             B.N      ??mbedtls_x509_serial_gets_11
    827          }
    828          
    829          /*
    830           * Helper for writing signature algorithms
    831           */

   \                                 In section .text, align 2, keep-with-next
    832          int mbedtls_x509_sig_alg_gets( char *buf, size_t size, const mbedtls_x509_buf *sig_oid,
    833                                 mbedtls_pk_type_t pk_alg, mbedtls_md_type_t md_alg,
    834                                 const void *sig_opts )
    835          {
   \                     mbedtls_x509_sig_alg_gets: (+1)
   \        0x0   0xE92D 0x43FE      PUSH     {R1-R9,LR}
   \        0x4   0x4607             MOV      R7,R0
   \        0x6   0x460D             MOV      R5,R1
   \        0x8   0x461C             MOV      R4,R3
    836              int ret;
    837              char *p = buf;
    838              size_t n = size;
    839              const char *desc = NULL;
   \        0xA   0x2000             MOVS     R0,#+0
   \        0xC   0x9002             STR      R0,[SP, #+8]
    840          
    841              ret = mbedtls_oid_get_sig_alg_desc( sig_oid, &desc );
    842              if( ret != 0 )
   \        0xE   0xA902             ADD      R1,SP,#+8
   \       0x10   0x4610             MOV      R0,R2
   \       0x12   0x....'....        BL       mbedtls_oid_get_sig_alg_desc
   \       0x16   0x2800             CMP      R0,#+0
   \       0x18   0xD005             BEQ.N    ??mbedtls_x509_sig_alg_gets_0
    843                  ret = mbedtls_snprintf( p, n, "???"  );
   \       0x1A   0x....             ADR.N    R2,??DataTable16_3  ;; "???"
   \       0x1C   0x4629             MOV      R1,R5
   \       0x1E   0x4638             MOV      R0,R7
   \       0x20   0x....'....        BL       snprintf
   \       0x24   0xE005             B.N      ??mbedtls_x509_sig_alg_gets_1
    844              else
    845                  ret = mbedtls_snprintf( p, n, "%s", desc );
   \                     ??mbedtls_x509_sig_alg_gets_0: (+1)
   \       0x26   0x9B02             LDR      R3,[SP, #+8]
   \       0x28   0x....             ADR.N    R2,??DataTable16  ;; 0x25, 0x73, 0x00, 0x00
   \       0x2A   0x4629             MOV      R1,R5
   \       0x2C   0x4638             MOV      R0,R7
   \       0x2E   0x....'....        BL       snprintf
    846              MBEDTLS_X509_SAFE_SNPRINTF;
   \                     ??mbedtls_x509_sig_alg_gets_1: (+1)
   \       0x32   0x2800             CMP      R0,#+0
   \       0x34   0xD42D             BMI.N    ??mbedtls_x509_sig_alg_gets_2
   \       0x36   0x42A8             CMP      R0,R5
   \       0x38   0xD22B             BCS.N    ??mbedtls_x509_sig_alg_gets_2
   \       0x3A   0x1A2E             SUBS     R6,R5,R0
   \       0x3C   0x4407             ADD      R7,R7,R0
    847          
    848          #if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
    849              if( pk_alg == MBEDTLS_PK_RSASSA_PSS )
   \       0x3E   0x2C06             CMP      R4,#+6
   \       0x40   0xD12B             BNE.N    ??mbedtls_x509_sig_alg_gets_3
   \       0x42   0xF8DD 0x802C      LDR      R8,[SP, #+44]
   \       0x46   0x980A             LDR      R0,[SP, #+40]
    850              {
    851                  const mbedtls_pk_rsassa_pss_options *pss_opts;
    852                  const mbedtls_md_info_t *md_info, *mgf_md_info;
    853          
    854                  pss_opts = (const mbedtls_pk_rsassa_pss_options *) sig_opts;
    855          
    856                  md_info = mbedtls_md_info_from_type( md_alg );
   \       0x48   0x....'....        BL       mbedtls_md_info_from_type
   \       0x4C   0x4604             MOV      R4,R0
    857                  mgf_md_info = mbedtls_md_info_from_type( pss_opts->mgf1_hash_id );
   \       0x4E   0xF898 0x0000      LDRB     R0,[R8, #+0]
   \       0x52   0x....'....        BL       mbedtls_md_info_from_type
    858          
    859                  ret = mbedtls_snprintf( p, n, " (%s, MGF1-%s, 0x%02X)",
    860                                        md_info ? mbedtls_md_get_name( md_info ) : "???",
    861                                        mgf_md_info ? mbedtls_md_get_name( mgf_md_info ) : "???",
    862                                        pss_opts->expected_salt_len );
   \       0x56   0x2800             CMP      R0,#+0
   \       0x58   0xD003             BEQ.N    ??mbedtls_x509_sig_alg_gets_4
   \       0x5A   0x....'....        BL       mbedtls_md_get_name
   \       0x5E   0x4681             MOV      R9,R0
   \       0x60   0xE001             B.N      ??mbedtls_x509_sig_alg_gets_5
   \                     ??mbedtls_x509_sig_alg_gets_4: (+1)
   \       0x62   0x....'....        ADR.W    R9,??DataTable16_3  ;; "???"
   \                     ??mbedtls_x509_sig_alg_gets_5: (+1)
   \       0x66   0x2C00             CMP      R4,#+0
   \       0x68   0xD003             BEQ.N    ??mbedtls_x509_sig_alg_gets_6
   \       0x6A   0x4620             MOV      R0,R4
   \       0x6C   0x....'....        BL       mbedtls_md_get_name
   \       0x70   0xE000             B.N      ??mbedtls_x509_sig_alg_gets_7
   \                     ??mbedtls_x509_sig_alg_gets_6: (+1)
   \       0x72   0x....             ADR.N    R0,??DataTable16_3  ;; "???"
   \                     ??mbedtls_x509_sig_alg_gets_7: (+1)
   \       0x74   0xF8D8 0x1004      LDR      R1,[R8, #+4]
   \       0x78   0x9101             STR      R1,[SP, #+4]
   \       0x7A   0xF8CD 0x9000      STR      R9,[SP, #+0]
   \       0x7E   0x4603             MOV      R3,R0
   \       0x80   0x....             LDR.N    R2,??DataTable16_24
   \       0x82   0x4631             MOV      R1,R6
   \       0x84   0x4638             MOV      R0,R7
   \       0x86   0x....'....        BL       snprintf
    863                  MBEDTLS_X509_SAFE_SNPRINTF;
   \       0x8A   0x2800             CMP      R0,#+0
   \       0x8C   0xD401             BMI.N    ??mbedtls_x509_sig_alg_gets_2
   \       0x8E   0x42B0             CMP      R0,R6
   \       0x90   0xD301             BCC.N    ??mbedtls_x509_sig_alg_gets_8
   \                     ??mbedtls_x509_sig_alg_gets_2: (+1)
   \       0x92   0x....             LDR.N    R0,??DataTable16_21  ;; 0xffffd680
   \       0x94   0xE003             B.N      ??mbedtls_x509_sig_alg_gets_9
   \                     ??mbedtls_x509_sig_alg_gets_8: (+1)
   \       0x96   0x1A30             SUBS     R0,R6,R0
   \       0x98   0x4606             MOV      R6,R0
    864              }
    865          #else
    866              ((void) pk_alg);
    867              ((void) md_alg);
    868              ((void) sig_opts);
    869          #endif /* MBEDTLS_X509_RSASSA_PSS_SUPPORT */
    870          
    871              return( (int)( size - n ) );
   \                     ??mbedtls_x509_sig_alg_gets_3: (+1)
   \       0x9A   0x1BAD             SUBS     R5,R5,R6
   \       0x9C   0x4628             MOV      R0,R5
   \                     ??mbedtls_x509_sig_alg_gets_9: (+1)
   \       0x9E   0xE8BD 0x83FE      POP      {R1-R9,PC}       ;; return
    872          }
    873          
    874          /*
    875           * Helper for writing "RSA key size", "EC key size", etc
    876           */

   \                                 In section .text, align 2, keep-with-next
    877          int mbedtls_x509_key_size_helper( char *buf, size_t buf_size, const char *name )
    878          {
   \                     mbedtls_x509_key_size_helper: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x460C             MOV      R4,R1
   \        0x4   0x4613             MOV      R3,R2
    879              char *p = buf;
    880              size_t n = buf_size;
    881              int ret;
    882          
    883              ret = mbedtls_snprintf( p, n, "%s key size", name );
   \        0x6   0x....             LDR.N    R2,??DataTable16_25
   \        0x8   0x....'....        BL       snprintf
    884              MBEDTLS_X509_SAFE_SNPRINTF;
   \        0xC   0x2800             CMP      R0,#+0
   \        0xE   0xD401             BMI.N    ??mbedtls_x509_key_size_helper_0
   \       0x10   0x42A0             CMP      R0,R4
   \       0x12   0xD301             BCC.N    ??mbedtls_x509_key_size_helper_1
   \                     ??mbedtls_x509_key_size_helper_0: (+1)
   \       0x14   0x....             LDR.N    R0,??DataTable16_21  ;; 0xffffd680
   \       0x16   0xBD10             POP      {R4,PC}
    885          
    886              return( 0 );
   \                     ??mbedtls_x509_key_size_helper_1: (+1)
   \       0x18   0x2000             MOVS     R0,#+0
   \       0x1A   0xBD10             POP      {R4,PC}          ;; return
    887          }
    888          
    889          #if defined(MBEDTLS_HAVE_TIME_DATE)
    890          /*
    891           * Set the time structure to the current time.
    892           * Return 0 on success, non-zero on failure.
    893           */
    894          static int x509_get_current_time( mbedtls_x509_time *now )
    895          {
    896              struct tm *lt, tm_buf;
    897              mbedtls_time_t tt;
    898              int ret = 0;
    899          
    900              tt = mbedtls_time( NULL );
    901              lt = mbedtls_platform_gmtime_r( &tt, &tm_buf );
    902          
    903              if( lt == NULL )
    904                  ret = -1;
    905              else
    906              {
    907                  now->year = lt->tm_year + 1900;
    908                  now->mon  = lt->tm_mon  + 1;
    909                  now->day  = lt->tm_mday;
    910                  now->hour = lt->tm_hour;
    911                  now->min  = lt->tm_min;
    912                  now->sec  = lt->tm_sec;
    913              }
    914          
    915              return( ret );
    916          }
    917          
    918          /*
    919           * Return 0 if before <= after, 1 otherwise
    920           */
    921          static int x509_check_time( const mbedtls_x509_time *before, const mbedtls_x509_time *after )
    922          {
    923              if( before->year  > after->year )
    924                  return( 1 );
    925          
    926              if( before->year == after->year &&
    927                  before->mon   > after->mon )
    928                  return( 1 );
    929          
    930              if( before->year == after->year &&
    931                  before->mon  == after->mon  &&
    932                  before->day   > after->day )
    933                  return( 1 );
    934          
    935              if( before->year == after->year &&
    936                  before->mon  == after->mon  &&
    937                  before->day  == after->day  &&
    938                  before->hour  > after->hour )
    939                  return( 1 );
    940          
    941              if( before->year == after->year &&
    942                  before->mon  == after->mon  &&
    943                  before->day  == after->day  &&
    944                  before->hour == after->hour &&
    945                  before->min   > after->min  )
    946                  return( 1 );
    947          
    948              if( before->year == after->year &&
    949                  before->mon  == after->mon  &&
    950                  before->day  == after->day  &&
    951                  before->hour == after->hour &&
    952                  before->min  == after->min  &&
    953                  before->sec   > after->sec  )
    954                  return( 1 );
    955          
    956              return( 0 );
    957          }
    958          
    959          int mbedtls_x509_time_is_past( const mbedtls_x509_time *to )
    960          {
    961              mbedtls_x509_time now;
    962          
    963              if( x509_get_current_time( &now ) != 0 )
    964                  return( 1 );
    965          
    966              return( x509_check_time( &now, to ) );
    967          }
    968          
    969          int mbedtls_x509_time_is_future( const mbedtls_x509_time *from )
    970          {
    971              mbedtls_x509_time now;
    972          
    973              if( x509_get_current_time( &now ) != 0 )
    974                  return( 1 );
    975          
    976              return( x509_check_time( from, &now ) );
    977          }
    978          
    979          #else  /* MBEDTLS_HAVE_TIME_DATE */
    980          

   \                                 In section .text, align 2, keep-with-next
    981          int mbedtls_x509_time_is_past( const mbedtls_x509_time *to )
    982          {
    983              ((void) to);
    984              return( 0 );
   \                     mbedtls_x509_time_is_past: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
    985          }
    986          

   \                                 In section .text, align 2, keep-with-next
    987          int mbedtls_x509_time_is_future( const mbedtls_x509_time *from )
    988          {
    989              ((void) from);
    990              return( 0 );
   \                     mbedtls_x509_time_is_future: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR               ;; return
    991          }
    992          #endif /* MBEDTLS_HAVE_TIME_DATE */
    993          
    994          #if defined(MBEDTLS_SELF_TEST)
    995          
    996          #include "mbedtls/x509_crt.h"
    997          #include "mbedtls/certs.h"
    998          
    999          /*
   1000           * Checkup routine
   1001           */

   \                                 In section .text, align 2, keep-with-next
   1002          int mbedtls_x509_self_test( int verbose )
   1003          {
   \                     mbedtls_x509_self_test: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0xF5AD 0x7D1E      SUB      SP,SP,#+632
   \        0x6   0x0004             MOVS     R4,R0
   1004          #if defined(MBEDTLS_CERTS_C) && defined(MBEDTLS_SHA256_C)
   1005              int ret;
   1006              uint32_t flags;
   1007              mbedtls_x509_crt cacert;
   1008              mbedtls_x509_crt clicert;
   1009          
   1010              if( verbose != 0 )
   \        0x8   0xD002             BEQ.N    ??mbedtls_x509_self_test_0
   1011                  mbedtls_printf( "  X.509 certificate load: " );
   \        0xA   0x....             LDR.N    R0,??DataTable16_26
   \        0xC   0x....'....        BL       DbgConsole_Printf
   1012          
   1013              mbedtls_x509_crt_init( &clicert );
   \                     ??mbedtls_x509_self_test_0: (+1)
   \       0x10   0xA804             ADD      R0,SP,#+16
   \       0x12   0x....'....        BL       mbedtls_x509_crt_init
   1014          
   1015              ret = mbedtls_x509_crt_parse( &clicert, (const unsigned char *) mbedtls_test_cli_crt,
   1016                                     mbedtls_test_cli_crt_len );
   \       0x16   0x....             LDR.N    R0,??DataTable16_27
   \       0x18   0x6802             LDR      R2,[R0, #+0]
   \       0x1A   0x....             LDR.N    R0,??DataTable16_28
   \       0x1C   0x6801             LDR      R1,[R0, #+0]
   \       0x1E   0xA804             ADD      R0,SP,#+16
   \       0x20   0x....'....        BL       mbedtls_x509_crt_parse
   \       0x24   0x0005             MOVS     R5,R0
   1017              if( ret != 0 )
   \       0x26   0xD005             BEQ.N    ??mbedtls_x509_self_test_1
   1018              {
   1019                  if( verbose != 0 )
   \       0x28   0x2C00             CMP      R4,#+0
   \       0x2A   0xD02C             BEQ.N    ??mbedtls_x509_self_test_2
   1020                      mbedtls_printf( "failed\n\r" );
   \       0x2C   0x....             LDR.N    R0,??DataTable16_29
   \       0x2E   0x....'....        BL       DbgConsole_Printf
   \       0x32   0xE028             B.N      ??mbedtls_x509_self_test_2
   1021          
   1022                  return( ret );
   1023              }
   1024          
   1025              mbedtls_x509_crt_init( &cacert );
   \                     ??mbedtls_x509_self_test_1: (+1)
   \       0x34   0xA851             ADD      R0,SP,#+324
   \       0x36   0x....'....        BL       mbedtls_x509_crt_init
   1026          
   1027              ret = mbedtls_x509_crt_parse( &cacert, (const unsigned char *) mbedtls_test_ca_crt,
   1028                                    mbedtls_test_ca_crt_len );
   \       0x3A   0x....             LDR.N    R0,??DataTable16_30
   \       0x3C   0x6802             LDR      R2,[R0, #+0]
   \       0x3E   0x....             LDR.N    R0,??DataTable16_31
   \       0x40   0x6801             LDR      R1,[R0, #+0]
   \       0x42   0xA851             ADD      R0,SP,#+324
   \       0x44   0x....'....        BL       mbedtls_x509_crt_parse
   \       0x48   0x0005             MOVS     R5,R0
   1029              if( ret != 0 )
   \       0x4A   0xD005             BEQ.N    ??mbedtls_x509_self_test_3
   1030              {
   1031                  if( verbose != 0 )
   \       0x4C   0x2C00             CMP      R4,#+0
   \       0x4E   0xD01A             BEQ.N    ??mbedtls_x509_self_test_2
   1032                      mbedtls_printf( "failed\n\r" );
   \       0x50   0x....             LDR.N    R0,??DataTable16_29
   \       0x52   0x....'....        BL       DbgConsole_Printf
   \       0x56   0xE016             B.N      ??mbedtls_x509_self_test_2
   1033          
   1034                  return( ret );
   1035              }
   1036          
   1037              if( verbose != 0 )
   \                     ??mbedtls_x509_self_test_3: (+1)
   \       0x58   0x2C00             CMP      R4,#+0
   \       0x5A   0xD002             BEQ.N    ??mbedtls_x509_self_test_4
   1038                  mbedtls_printf( "passed\n\r  X.509 signature verify: ");
   \       0x5C   0x....             LDR.N    R0,??DataTable16_32
   \       0x5E   0x....'....        BL       DbgConsole_Printf
   1039          
   1040              ret = mbedtls_x509_crt_verify( &clicert, &cacert, NULL, NULL, &flags, NULL, NULL );
   \                     ??mbedtls_x509_self_test_4: (+1)
   \       0x62   0x2000             MOVS     R0,#+0
   \       0x64   0x9002             STR      R0,[SP, #+8]
   \       0x66   0x9001             STR      R0,[SP, #+4]
   \       0x68   0xA803             ADD      R0,SP,#+12
   \       0x6A   0x9000             STR      R0,[SP, #+0]
   \       0x6C   0x2300             MOVS     R3,#+0
   \       0x6E   0x461A             MOV      R2,R3
   \       0x70   0xA951             ADD      R1,SP,#+324
   \       0x72   0xA804             ADD      R0,SP,#+16
   \       0x74   0x....'....        BL       mbedtls_x509_crt_verify
   \       0x78   0x0005             MOVS     R5,R0
   1041              if( ret != 0 )
   \       0x7A   0xD006             BEQ.N    ??mbedtls_x509_self_test_5
   1042              {
   1043                  if( verbose != 0 )
   \       0x7C   0x2C00             CMP      R4,#+0
   \       0x7E   0xD002             BEQ.N    ??mbedtls_x509_self_test_2
   1044                      mbedtls_printf( "failed\n\r" );
   \       0x80   0x....             LDR.N    R0,??DataTable16_29
   \       0x82   0x....'....        BL       DbgConsole_Printf
   1045          
   1046                  return( ret );
   \                     ??mbedtls_x509_self_test_2: (+1)
   \       0x86   0x4628             MOV      R0,R5
   \       0x88   0xE00B             B.N      ??mbedtls_x509_self_test_6
   1047              }
   1048          
   1049              if( verbose != 0 )
   \                     ??mbedtls_x509_self_test_5: (+1)
   \       0x8A   0x2C00             CMP      R4,#+0
   \       0x8C   0xD002             BEQ.N    ??mbedtls_x509_self_test_7
   1050                  mbedtls_printf( "passed\n\n\r");
   \       0x8E   0x....             LDR.N    R0,??DataTable16_33
   \       0x90   0x....'....        BL       DbgConsole_Printf
   1051          
   1052              mbedtls_x509_crt_free( &cacert  );
   \                     ??mbedtls_x509_self_test_7: (+1)
   \       0x94   0xA851             ADD      R0,SP,#+324
   \       0x96   0x....'....        BL       mbedtls_x509_crt_free
   1053              mbedtls_x509_crt_free( &clicert );
   \       0x9A   0xA804             ADD      R0,SP,#+16
   \       0x9C   0x....'....        BL       mbedtls_x509_crt_free
   1054          
   1055              return( 0 );
   \       0xA0   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_x509_self_test_6: (+1)
   \       0xA2   0xF50D 0x7D1F      ADD      SP,SP,#+636
   \       0xA6   0xBD30             POP      {R4,R5,PC}       ;; return
   1056          #else
   1057              ((void) verbose);
   1058              return( 0 );
   1059          #endif /* MBEDTLS_CERTS_C && MBEDTLS_SHA1_C */
   1060          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15:
   \        0x0   0x20 0x2B          DC8      " + "
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_1:
   \        0x0   0x2C 0x20          DC8      0x2C, 0x20, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_2:
   \        0x0   0x25 0x73          DC8      "%s="
   \              0x3D 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_3:
   \        0x0   0x3F 0x3F          DC8      "??="
   \              0x3D 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16:
   \        0x0   0x25 0x73          DC8      0x25, 0x73, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_1:
   \        0x0   0x00 0x00          DC8      "",0x0,0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_2:
   \        0x0   0x3A 0x00          DC8      ":",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_3:
   \        0x0   0x3F 0x3F          DC8      "???"
   \              0x3F 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_4:
   \        0x0   0xFFFF'DD20        DC32     0xffffdd20

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_5:
   \        0x0   0xFFFF'DD1E        DC32     0xffffdd1e

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_6:
   \        0x0   0xFFFF'DC9E        DC32     0xffffdc9e

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_7:
   \        0x0   0xFFFF'DCA0        DC32     0xffffdca0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_8:
   \        0x0   0xFFFF'DC9A        DC32     0xffffdc9a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_9:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_10:
   \        0x0   0xFFFF'DF52        DC32     0xffffdf52

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_11:
   \        0x0   0xFFFF'DD00        DC32     0xffffdd00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_12:
   \        0x0   0xFFFF'DC20        DC32     0xffffdc20

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_13:
   \        0x0   0xFFFF'DC1E        DC32     0xffffdc1e

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_14:
   \        0x0   0xFFFF'D780        DC32     0xffffd780

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_15:
   \        0x0   0xFFFF'DC00        DC32     0xffffdc00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_16:
   \        0x0   0xFFFF'DBA0        DC32     0xffffdba0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_17:
   \        0x0   0xFFFF'DB9E        DC32     0xffffdb9e

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_18:
   \        0x0   0xFFFF'DB20        DC32     0xffffdb20

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_19:
   \        0x0   0xFFFF'D800        DC32     0xffffd800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_20:
   \        0x0   0xFFFF'DA9A        DC32     0xffffda9a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_21:
   \        0x0   0xFFFF'D680        DC32     0xffffd680

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_22:
   \        0x0   0x....'....        DC32     ?_6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_23:
   \        0x0   0x....'....        DC32     ?_9

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_24:
   \        0x0   0x....'....        DC32     ?_11

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_25:
   \        0x0   0x....'....        DC32     ?_12

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_26:
   \        0x0   0x....'....        DC32     ?_13

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_27:
   \        0x0   0x....'....        DC32     mbedtls_test_cli_crt_len

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_28:
   \        0x0   0x....'....        DC32     mbedtls_test_cli_crt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_29:
   \        0x0   0x....'....        DC32     ?_14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_30:
   \        0x0   0x....'....        DC32     mbedtls_test_ca_crt_len

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_31:
   \        0x0   0x....'....        DC32     mbedtls_test_ca_crt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_32:
   \        0x0   0x....'....        DC32     ?_15

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_33:
   \        0x0   0x....'....        DC32     ?_16

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x2A 0x86          DC8 "*\206H\206\367\015\001\001\010"
   \              0x48 0x86    
   \              0xF7 0x0D    
   \              0x01 0x01    
   \              0x08 0x00    
   \        0xA   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \        0x0   0x20 0x2B          DC8 " + "
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \        0x0   0x2C 0x20          DC8 ", "
   \              0x00         
   \        0x3   0x00               DC8 0

   \                                 In section .rodata, align 4
   \        0x0   0x25 0x73          DC8 "%s="
   \              0x3D 0x00    

   \                                 In section .rodata, align 4
   \        0x0   0x3F 0x3F          DC8 "??="
   \              0x3D 0x00    

   \                                 In section .rodata, align 4
   \        0x0   0x25 0x73          DC8 "%s"
   \              0x00         
   \        0x3   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_6:
   \        0x0   0x25 0x30          DC8 "%02X%s"
   \              0x32 0x58    
   \              0x25 0x73    
   \              0x00         
   \        0x7   0x00               DC8 0

   \                                 In section .rodata, align 2
   \        0x0   0x3A 0x00          DC8 ":"

   \                                 In section .rodata, align 1
   \        0x0   0x00               DC8 ""

   \                                 In section .rodata, align 4
   \                     ?_9:
   \        0x0   0x2E 0x2E          DC8 "...."
   \              0x2E 0x2E    
   \              0x00         
   \        0x5   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \        0x0   0x3F 0x3F          DC8 "???"
   \              0x3F 0x00    

   \                                 In section .rodata, align 4
   \                     ?_11:
   \        0x0   0x20 0x28          DC8 " (%s, MGF1-%s, 0x%02X)"
   \              0x25 0x73    
   \              0x2C 0x20    
   \              0x4D 0x47    
   \              0x46 0x31    
   \              0x2D 0x25    
   \              0x73 0x2C    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x30 0x32    
   \              0x58 0x29    
   \              0x00         
   \       0x17   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_12:
   \        0x0   0x25 0x73          DC8 "%s key size"
   \              0x20 0x6B    
   \              0x65 0x79    
   \              0x20 0x73    
   \              0x69 0x7A    
   \              0x65 0x00    

   \                                 In section .rodata, align 4
   \                     ?_13:
   \        0x0   0x20 0x20          DC8 "  X.509 certificate load: "
   \              0x58 0x2E    
   \              0x35 0x30    
   \              0x39 0x20    
   \              0x63 0x65    
   \              0x72 0x74    
   \              0x69 0x66    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x6C 0x6F    
   \              0x61 0x64    
   \              0x3A 0x20    
   \              0x00         
   \       0x1B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_14:
   \        0x0   0x66 0x61          DC8 "failed\012\015"
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x0A 0x0D    
   \              0x00         
   \        0x9   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_15:
   \        0x0   0x70 0x61          DC8 "passed\012\015  X.509 signature verify: "
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x0A 0x0D    
   \              0x20 0x20    
   \              0x58 0x2E    
   \              0x35 0x30    
   \              0x39 0x20    
   \              0x73 0x69    
   \              0x67 0x6E    
   \              0x61 0x74    
   \              0x75 0x72    
   \              0x65 0x20    
   \              0x76 0x65    
   \              0x72 0x69    
   \              0x66 0x79    
   \              0x3A 0x20    
   \              0x00         
   \       0x23   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_16:
   \        0x0   0x70 0x61          DC8 "passed\012\012\015"
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x0A 0x0A    
   \              0x0D 0x00    
   \        0xA   0x00 0x00          DC8 0, 0
   1061          
   1062          #endif /* MBEDTLS_SELF_TEST */
   1063          
   1064          #endif /* MBEDTLS_X509_USE_C */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
     288   mbedtls_x509_dn_gets
       288   -> __aeabi_memset4
       288   -> mbedtls_oid_get_attr_short_name
       288   -> snprintf
       8   mbedtls_x509_get_alg
         8   -> mbedtls_asn1_get_alg
       8   mbedtls_x509_get_alg_null
         8   -> mbedtls_asn1_get_alg_null
      16   mbedtls_x509_get_ext
        16   -> mbedtls_asn1_get_tag
      24   mbedtls_x509_get_name
        24   -> mbedtls_asn1_get_tag
        24   -> mbedtls_calloc
        24   -> x509_get_attr_type_value
      64   mbedtls_x509_get_rsassa_pss_params
        64   -> mbedtls_asn1_get_int
        64   -> mbedtls_asn1_get_tag
        64   -> mbedtls_oid_get_md_alg
        64   -> mbedtls_x509_get_alg
        64   -> mbedtls_x509_get_alg_null
        64   -> memcmp
        64   -> x509_get_hash_alg
      16   mbedtls_x509_get_serial
        16   -> mbedtls_asn1_get_len
      24   mbedtls_x509_get_sig
        24   -> mbedtls_asn1_get_bitstring_null
      24   mbedtls_x509_get_sig_alg
        24   -> mbedtls_calloc
        24   -> mbedtls_free
        24   -> mbedtls_oid_get_sig_alg
        24   -> mbedtls_x509_get_rsassa_pss_params
      24   mbedtls_x509_get_time
        24   -> mbedtls_asn1_get_len
        24   -> x509_parse_time
       8   mbedtls_x509_key_size_helper
         8   -> snprintf
     648   mbedtls_x509_self_test
       648   -> DbgConsole_Printf
       648   -> mbedtls_x509_crt_free
       648   -> mbedtls_x509_crt_init
       648   -> mbedtls_x509_crt_parse
       648   -> mbedtls_x509_crt_verify
      32   mbedtls_x509_serial_gets
        32   -> snprintf
      40   mbedtls_x509_sig_alg_gets
        40   -> mbedtls_md_get_name
        40   -> mbedtls_md_info_from_type
        40   -> mbedtls_oid_get_sig_alg_desc
        40   -> snprintf
       0   mbedtls_x509_time_is_future
       0   mbedtls_x509_time_is_past
       0   x509_date_is_valid
      24   x509_get_attr_type_value
        24   -> mbedtls_asn1_get_len
        24   -> mbedtls_asn1_get_tag
      32   x509_get_hash_alg
        32   -> mbedtls_asn1_get_tag
        32   -> mbedtls_oid_get_md_alg
       4   x509_parse_int
      24   x509_parse_time
        24   -> x509_date_is_valid
        24   -> x509_parse_int


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable15
       4  ??DataTable15_1
       4  ??DataTable15_2
       4  ??DataTable15_3
       4  ??DataTable16
       4  ??DataTable16_1
       4  ??DataTable16_10
       4  ??DataTable16_11
       4  ??DataTable16_12
       4  ??DataTable16_13
       4  ??DataTable16_14
       4  ??DataTable16_15
       4  ??DataTable16_16
       4  ??DataTable16_17
       4  ??DataTable16_18
       4  ??DataTable16_19
       4  ??DataTable16_2
       4  ??DataTable16_20
       4  ??DataTable16_21
       4  ??DataTable16_22
       4  ??DataTable16_23
       4  ??DataTable16_24
       4  ??DataTable16_25
       4  ??DataTable16_26
       4  ??DataTable16_27
       4  ??DataTable16_28
       4  ??DataTable16_29
       4  ??DataTable16_3
       4  ??DataTable16_30
       4  ??DataTable16_31
       4  ??DataTable16_32
       4  ??DataTable16_33
       4  ??DataTable16_4
       4  ??DataTable16_5
       4  ??DataTable16_6
       4  ??DataTable16_7
       4  ??DataTable16_8
       4  ??DataTable16_9
      12  ?_0
       4  ?_1
       4  ?_10
      24  ?_11
      12  ?_12
      28  ?_13
      12  ?_14
      36  ?_15
      12  ?_16
       4  ?_2
       4  ?_3
       4  ?_4
       4  ?_5
       8  ?_6
       2  ?_7
       1  ?_8
       8  ?_9
     234  mbedtls_x509_dn_gets
      20  mbedtls_x509_get_alg
      20  mbedtls_x509_get_alg_null
      88  mbedtls_x509_get_ext
     110  mbedtls_x509_get_name
     410  mbedtls_x509_get_rsassa_pss_params
      86  mbedtls_x509_get_serial
      64  mbedtls_x509_get_sig
     118  mbedtls_x509_get_sig_alg
      82  mbedtls_x509_get_time
      28  mbedtls_x509_key_size_helper
     168  mbedtls_x509_self_test
     142  mbedtls_x509_serial_gets
     162  mbedtls_x509_sig_alg_gets
       4  mbedtls_x509_time_is_future
       4  mbedtls_x509_time_is_past
     140  x509_date_is_valid
     200  x509_get_attr_type_value
     138  x509_get_hash_alg
      62  x509_parse_int
     186  x509_parse_time

 
   179 bytes in section .rodata
 2 618 bytes in section .text
 
 2 618 bytes of CODE  memory
   179 bytes of CONST memory

Errors: none
Warnings: none
