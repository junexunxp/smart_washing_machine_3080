###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.3.193/W32 for ARM         10/Jun/2019  13:48:37
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\Development\smart_washing_machine_3080\csdk\eng\mqtt\MQTTSubscribeClient.c
#    Command line =  
#        -f C:\Users\nxf42695\AppData\Local\Temp\1\EW2371.tmp
#        (C:\Development\smart_washing_machine_3080\csdk\eng\mqtt\MQTTSubscribeClient.c
#        -D DEBUG -D USE_RTOS -D XIP_EXTERNAL_FLASH=1 -D
#        XIP_BOOT_HEADER_ENABLE=1 -D CPU_MIMXRT1052DVL6B -D FSL_RTOS_FREE_RTOS
#        -D PRINTF_ADVANCED_ENABLE -D
#        "MBEDTLS_CONFIG_FILE=\"ksdk_mbedtls_config.h\"" -lC
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list -lA
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list
#        --diag_suppress Pa082,Pa050 -o
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_d16 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" --preinclude
#        C:\Development\smart_washing_machine_3080/source\app_preinclude.h -I
#        C:\Development\smart_washing_machine_3080/board\ -I
#        C:\Development\smart_washing_machine_3080/source\ -I
#        C:\Development\smart_washing_machine_3080/CMSIS\ -I
#        C:\Development\smart_washing_machine_3080/amazon-freertos/freertos/portable\
#        -I C:\Development\smart_washing_machine_3080/amazon-freertos/include\
#        -I C:\Development\smart_washing_machine_3080/component/lists\ -I
#        C:\Development\smart_washing_machine_3080/component/serial_manager\ -I
#        C:\Development\smart_washing_machine_3080/component/uart\ -I
#        C:\Development\smart_washing_machine_3080/component/kv\ -I
#        C:\Development\smart_washing_machine_3080/component/kv/include\ -I
#        C:\Development\smart_washing_machine_3080/device\ -I
#        C:\Development\smart_washing_machine_3080/doc\ -I
#        C:\Development\smart_washing_machine_3080/drivers\ -I
#        C:\Development\smart_washing_machine_3080/src\ -I
#        C:\Development\smart_washing_machine_3080/startup\ -I
#        C:\Development\smart_washing_machine_3080/utilities\ -I
#        C:\Development\smart_washing_machine_3080/xip\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\atm\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_model\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_sign\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\infra\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\mqtt\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\external_libs\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\coap_cloud\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\CoAPPacket\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\server\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\os\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\awss_reset\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\mbedtls\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\ -I
#        C:\Development\smart_washing_machine_3080\mbedtls\port\ksdk\ -Om)
#    Locale       =  C
#    List file    =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list\MQTTSubscribeClient.lst
#    Object file  =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj\MQTTSubscribeClient.o
#
###############################################################################

C:\Development\smart_washing_machine_3080\csdk\eng\mqtt\MQTTSubscribeClient.c
      1          /*
      2           * Copyright (C) 2015-2018 Alibaba Group Holding Limited
      3           */
      4          
      5          #include "MQTTPacket.h"
      6          
      7          #include <string.h>
      8          
      9          /**
     10            * Determines the length of the MQTT subscribe packet that would be produced using the supplied parameters
     11            * @param count the number of topic filter strings in topicFilters
     12            * @param topicFilters the array of topic filter strings to be used in the publish
     13            * @return the length of buffer needed to contain the serialized version of the packet
     14            */

   \                                 In section .text, align 2, keep-with-next
     15          int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
     16          {
   \                     MQTTSerialize_subscribeLength: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
     17              int i;
     18              int len = 2; /* packetid */
   \        0x6   0x2602             MOVS     R6,#+2
     19          
     20              for (i = 0; i < count; ++i) {
   \        0x8   0x2700             MOVS     R7,#+0
   \        0xA   0xE009             B.N      ??MQTTSerialize_subscribeLength_0
     21                  len += 2 + MQTTstrlen(topicFilters[i]) + 1;    /* length + topic + req_qos */
   \                     ??MQTTSerialize_subscribeLength_1: (+1)
   \        0xC   0xEB07 0x0047      ADD      R0,R7,R7, LSL #+1
   \       0x10   0xEB05 0x0080      ADD      R0,R5,R0, LSL #+2
   \       0x14   0xC807             LDM      R0,{R0-R2}
   \       0x16   0x....'....        BL       MQTTstrlen
   \       0x1A   0x1CC0             ADDS     R0,R0,#+3
   \       0x1C   0x1986             ADDS     R6,R0,R6
     22              }
   \       0x1E   0x1C7F             ADDS     R7,R7,#+1
   \                     ??MQTTSerialize_subscribeLength_0: (+1)
   \       0x20   0x42A7             CMP      R7,R4
   \       0x22   0xDBF3             BLT.N    ??MQTTSerialize_subscribeLength_1
     23              return len;
   \       0x24   0x4630             MOV      R0,R6
   \       0x26   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
     24          }
     25          
     26          
     27          /**
     28            * Serializes the supplied subscribe data into the supplied buffer, ready for sending
     29            * @param buf the buffer into which the packet will be serialized
     30            * @param buflen the length in bytes of the supplied bufferr
     31            * @param dup integer - the MQTT dup flag
     32            * @param packetid integer - the MQTT packet identifier
     33            * @param count - number of members in the topicFilters and reqQos arrays
     34            * @param topicFilters - array of topic filter names
     35            * @param requestedQoSs - array of requested QoS
     36            * @return the length of the serialized data.  <= 0 indicates error
     37            */

   \                                 In section .text, align 2, keep-with-next
     38          int MQTTSerialize_subscribe(unsigned char *buf, int buflen, unsigned char dup, unsigned short packetid, int count,
     39                                      MQTTString topicFilters[], int requestedQoSs[])
     40          {
   \                     MQTTSerialize_subscribe: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \        0x4   0x4607             MOV      R7,R0
   \        0x6   0x4689             MOV      R9,R1
   \        0x8   0x4692             MOV      R10,R2
   \        0xA   0x461E             MOV      R6,R3
   \        0xC   0x9C0A             LDR      R4,[SP, #+40]
   \        0xE   0x9D0B             LDR      R5,[SP, #+44]
     41              unsigned char *ptr = buf;
   \       0x10   0x9700             STR      R7,[SP, #+0]
     42              MQTTHeader header = {0};
     43              int rem_len = 0;
     44              int rc = 0;
     45              int i = 0;
   \       0x12   0xF04F 0x0800      MOV      R8,#+0
     46          
     47              if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen) {
   \       0x16   0x4629             MOV      R1,R5
   \       0x18   0x4620             MOV      R0,R4
   \       0x1A   0x....'....        BL       MQTTSerialize_subscribeLength
   \       0x1E   0x4683             MOV      R11,R0
   \       0x20   0x....'....        BL       MQTTPacket_len
   \       0x24   0x4581             CMP      R9,R0
   \       0x26   0xDA02             BGE.N    ??MQTTSerialize_subscribe_0
     48                  rc = MQTTPACKET_BUFFER_TOO_SHORT;
   \       0x28   0xF06F 0x0001      MVN      R0,#+1
     49                  goto exit;
   \       0x2C   0xE02D             B.N      ??MQTTSerialize_subscribe_1
     50              }
     51          
     52              header.byte = 0;
     53              MQTT_HEADER_SET_TYPE(header.byte, SUBSCRIBE);
     54              MQTT_HEADER_SET_DUP(header.byte, dup);
     55              MQTT_HEADER_SET_QOS(header.byte, 1);
     56              writeChar(&ptr, header.byte); /* write header */
   \                     ??MQTTSerialize_subscribe_0: (+1)
   \       0x2E   0xEA4F 0x0ACA      LSL      R10,R10,#+3
   \       0x32   0xF00A 0x0A08      AND      R10,R10,#0x8
   \       0x36   0xF04A 0x0A82      ORR      R10,R10,#0x82
   \       0x3A   0x4651             MOV      R1,R10
   \       0x3C   0x4668             MOV      R0,SP
   \       0x3E   0x....'....        BL       writeChar
     57          
     58              ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   \       0x42   0x4659             MOV      R1,R11
   \       0x44   0x9800             LDR      R0,[SP, #+0]
   \       0x46   0x....'....        BL       MQTTPacket_encode
   \       0x4A   0x9900             LDR      R1,[SP, #+0]
   \       0x4C   0x4408             ADD      R0,R1,R0
   \       0x4E   0x9000             STR      R0,[SP, #+0]
     59          
     60              writeInt(&ptr, packetid);
   \       0x50   0x4631             MOV      R1,R6
   \       0x52   0x4668             MOV      R0,SP
   \       0x54   0x....'....        BL       writeInt
   \       0x58   0x9E0C             LDR      R6,[SP, #+48]
     61          
     62              for (i = 0; i < count; ++i) {
   \       0x5A   0xE011             B.N      ??MQTTSerialize_subscribe_2
     63                  writeMQTTString(&ptr, topicFilters[i]);
   \                     ??MQTTSerialize_subscribe_3: (+1)
   \       0x5C   0xEB08 0x0048      ADD      R0,R8,R8, LSL #+1
   \       0x60   0xEB05 0x0080      ADD      R0,R5,R0, LSL #+2
   \       0x64   0xE890 0x000E      LDM      R0,{R1-R3}
   \       0x68   0x4668             MOV      R0,SP
   \       0x6A   0x....'....        BL       writeMQTTString
     64                  writeChar(&ptr, requestedQoSs[i]);
   \       0x6E   0xF856 0x0028      LDR      R0,[R6, R8, LSL #+2]
   \       0x72   0x4601             MOV      R1,R0
   \       0x74   0xB2C9             UXTB     R1,R1
   \       0x76   0x4668             MOV      R0,SP
   \       0x78   0x....'....        BL       writeChar
     65              }
   \       0x7C   0xF108 0x0801      ADD      R8,R8,#+1
   \                     ??MQTTSerialize_subscribe_2: (+1)
   \       0x80   0x45A0             CMP      R8,R4
   \       0x82   0xDBEB             BLT.N    ??MQTTSerialize_subscribe_3
     66          
     67              rc = ptr - buf;
   \       0x84   0x9800             LDR      R0,[SP, #+0]
   \       0x86   0x1BC7             SUBS     R7,R0,R7
   \       0x88   0x4638             MOV      R0,R7
     68          exit:
     69              return rc;
   \                     ??MQTTSerialize_subscribe_1: (+1)
   \       0x8A   0xE8BD 0x8FF2      POP      {R1,R4-R11,PC}   ;; return
     70          }
     71          
     72          
     73          
     74          /**
     75            * Deserializes the supplied (wire) buffer into suback data
     76            * @param packetid returned integer - the MQTT packet identifier
     77            * @param maxcount - the maximum number of members allowed in the grantedQoSs array
     78            * @param count returned integer - number of members in the grantedQoSs array
     79            * @param grantedQoSs returned array of integers - the granted qualities of service
     80            * @param buf the raw buffer data, of the correct length determined by the remaining length field
     81            * @param buflen the length in bytes of the data in the supplied buffer
     82            * @return error code.  1 is success, 0 is failure
     83            */

   \                                 In section .text, align 2, keep-with-next
     84          int MQTTDeserialize_suback(unsigned short *packetid, int maxcount, int *count, int grantedQoSs[], unsigned char *buf,
     85                                     int buflen)
     86          {
   \                     MQTTDeserialize_suback: (+1)
   \        0x0   0xE92D 0x43FE      PUSH     {R1-R9,LR}
   \        0x4   0x4604             MOV      R4,R0
   \        0x6   0x460D             MOV      R5,R1
   \        0x8   0x4616             MOV      R6,R2
   \        0xA   0x461F             MOV      R7,R3
   \        0xC   0x980A             LDR      R0,[SP, #+40]
     87              MQTTHeader header = {0};
     88              unsigned char *curdata = buf;
   \        0xE   0x9000             STR      R0,[SP, #+0]
     89              unsigned char *enddata = NULL;
     90              int rc = 0;
   \       0x10   0xF04F 0x0800      MOV      R8,#+0
     91              int mylen;
     92          
     93              header.byte = readChar(&curdata);
   \       0x14   0x4668             MOV      R0,SP
   \       0x16   0x....'....        BL       readChar
     94              if (MQTT_HEADER_GET_TYPE(header.byte) != SUBACK) {
   \       0x1A   0x0900             LSRS     R0,R0,#+4
   \       0x1C   0x2809             CMP      R0,#+9
   \       0x1E   0xD128             BNE.N    ??MQTTDeserialize_suback_0
     95                  goto exit;
     96              }
     97          
     98              curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   \       0x20   0xA901             ADD      R1,SP,#+4
   \       0x22   0x9800             LDR      R0,[SP, #+0]
   \       0x24   0x....'....        BL       MQTTPacket_decodeBuf
   \       0x28   0x4680             MOV      R8,R0
   \       0x2A   0x9800             LDR      R0,[SP, #+0]
   \       0x2C   0x4440             ADD      R0,R0,R8
   \       0x2E   0x9000             STR      R0,[SP, #+0]
     99              enddata = curdata + mylen;
   \       0x30   0x9901             LDR      R1,[SP, #+4]
   \       0x32   0xEB00 0x0901      ADD      R9,R0,R1
    100              if (enddata - curdata < 2) {
   \       0x36   0xEBA9 0x0000      SUB      R0,R9,R0
   \       0x3A   0x2802             CMP      R0,#+2
   \       0x3C   0xDB19             BLT.N    ??MQTTDeserialize_suback_0
    101                  goto exit;
    102              }
    103          
    104              *packetid = readInt(&curdata);
   \       0x3E   0x4668             MOV      R0,SP
   \       0x40   0x....'....        BL       readInt
   \       0x44   0x8020             STRH     R0,[R4, #+0]
    105          
    106              *count = 0;
   \       0x46   0x2000             MOVS     R0,#+0
   \       0x48   0x6030             STR      R0,[R6, #+0]
   \       0x4A   0xE007             B.N      ??MQTTDeserialize_suback_1
    107              while (curdata < enddata) {
    108                  if (*count >= maxcount) {
    109                      rc = -1;
    110                      goto exit;
    111                  }
    112                  grantedQoSs[(*count)++] = readChar(&curdata);
   \                     ??MQTTDeserialize_suback_2: (+1)
   \       0x4C   0x4604             MOV      R4,R0
   \       0x4E   0x1C60             ADDS     R0,R4,#+1
   \       0x50   0x6030             STR      R0,[R6, #+0]
   \       0x52   0x4668             MOV      R0,SP
   \       0x54   0x....'....        BL       readChar
   \       0x58   0xF847 0x0024      STR      R0,[R7, R4, LSL #+2]
   \                     ??MQTTDeserialize_suback_1: (+1)
   \       0x5C   0x9800             LDR      R0,[SP, #+0]
   \       0x5E   0x4548             CMP      R0,R9
   \       0x60   0xD205             BCS.N    ??MQTTDeserialize_suback_3
   \       0x62   0x6830             LDR      R0,[R6, #+0]
   \       0x64   0x42A8             CMP      R0,R5
   \       0x66   0xDBF1             BLT.N    ??MQTTDeserialize_suback_2
   \       0x68   0xF04F 0x38FF      MOV      R8,#-1
   \       0x6C   0xE001             B.N      ??MQTTDeserialize_suback_0
    113              }
    114          
    115              rc = 1;
   \                     ??MQTTDeserialize_suback_3: (+1)
   \       0x6E   0xF04F 0x0801      MOV      R8,#+1
    116          exit:
    117              return rc;
   \                     ??MQTTDeserialize_suback_0: (+1)
   \       0x72   0x4640             MOV      R0,R8
   \       0x74   0xE8BD 0x83FE      POP      {R1-R9,PC}       ;; return
    118          }
    119          
    120          
    121          
    122          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      40   MQTTDeserialize_suback
        40   -> MQTTPacket_decodeBuf
        40   -> readChar
        40   -> readInt
      40   MQTTSerialize_subscribe
        40   -> MQTTPacket_encode
        40   -> MQTTPacket_len
        40   -> MQTTSerialize_subscribeLength
        40   -> writeChar
        40   -> writeInt
        40   -> writeMQTTString
      24   MQTTSerialize_subscribeLength
        24   -> MQTTstrlen


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     120  MQTTDeserialize_suback
     142  MQTTSerialize_subscribe
      40  MQTTSerialize_subscribeLength

 
 302 bytes in section .text
 
 302 bytes of CODE memory

Errors: none
Warnings: none
