###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.3.193/W32 for ARM         10/Jun/2019  13:48:12
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_model\dm_client_adapter.c
#    Command line =  
#        -f C:\Users\nxf42695\AppData\Local\Temp\1\EWBE7B.tmp
#        (C:\Development\smart_washing_machine_3080\csdk\eng\dev_model\dm_client_adapter.c
#        -D DEBUG -D USE_RTOS -D XIP_EXTERNAL_FLASH=1 -D
#        XIP_BOOT_HEADER_ENABLE=1 -D CPU_MIMXRT1052DVL6B -D FSL_RTOS_FREE_RTOS
#        -D PRINTF_ADVANCED_ENABLE -D
#        "MBEDTLS_CONFIG_FILE=\"ksdk_mbedtls_config.h\"" -lC
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list -lA
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list
#        --diag_suppress Pa082,Pa050 -o
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_d16 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" --preinclude
#        C:\Development\smart_washing_machine_3080/source\app_preinclude.h -I
#        C:\Development\smart_washing_machine_3080/board\ -I
#        C:\Development\smart_washing_machine_3080/source\ -I
#        C:\Development\smart_washing_machine_3080/CMSIS\ -I
#        C:\Development\smart_washing_machine_3080/amazon-freertos/freertos/portable\
#        -I C:\Development\smart_washing_machine_3080/amazon-freertos/include\
#        -I C:\Development\smart_washing_machine_3080/component/lists\ -I
#        C:\Development\smart_washing_machine_3080/component/serial_manager\ -I
#        C:\Development\smart_washing_machine_3080/component/uart\ -I
#        C:\Development\smart_washing_machine_3080/component/kv\ -I
#        C:\Development\smart_washing_machine_3080/component/kv/include\ -I
#        C:\Development\smart_washing_machine_3080/device\ -I
#        C:\Development\smart_washing_machine_3080/doc\ -I
#        C:\Development\smart_washing_machine_3080/drivers\ -I
#        C:\Development\smart_washing_machine_3080/src\ -I
#        C:\Development\smart_washing_machine_3080/startup\ -I
#        C:\Development\smart_washing_machine_3080/utilities\ -I
#        C:\Development\smart_washing_machine_3080/xip\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\atm\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_model\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_sign\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\infra\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\mqtt\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\external_libs\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\coap_cloud\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\CoAPPacket\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\server\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\os\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\awss_reset\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\mbedtls\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\ -I
#        C:\Development\smart_washing_machine_3080\mbedtls\port\ksdk\ -Om)
#    Locale       =  C
#    List file    =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list\dm_client_adapter.lst
#    Object file  =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj\dm_client_adapter.o
#
###############################################################################

C:\Development\smart_washing_machine_3080\csdk\eng\dev_model\dm_client_adapter.c
      1          #include "iotx_dm_internal.h"
      2          

   \                                 In section .bss, align 4
      3          static dm_client_ctx_t g_dm_client_ctx = {0};
   \                     g_dm_client_ctx:
   \        0x0                      DS8 12
      4          

   \                                 In section .text, align 2, keep-with-next
      5          static dm_client_ctx_t *dm_client_get_ctx(void)
      6          {
      7              return &g_dm_client_ctx;
   \                     dm_client_get_ctx: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable1
   \        0x2   0x4770             BX       LR               ;; return
      8          }
      9          

   \                                 In section .text, align 2, keep-with-next
     10          int dm_client_open(void)
     11          {
   \                     dm_client_open: (+1)
   \        0x0   0xB518             PUSH     {R3,R4,LR}
   \        0x2   0xB087             SUB      SP,SP,#+28
     12              int res = 0;
     13              dm_client_ctx_t *ctx = dm_client_get_ctx();
   \        0x4   0x....'....        BL       dm_client_get_ctx
   \        0x8   0x4604             MOV      R4,R0
     14              iotx_cm_init_param_t cm_param;
     15          
     16              memset(ctx, 0, sizeof(dm_client_ctx_t));
   \        0xA   0x2200             MOVS     R2,#+0
   \        0xC   0x210C             MOVS     R1,#+12
   \        0xE   0x....'....        BL       __aeabi_memset4
     17              memset(&cm_param, 0, sizeof(iotx_cm_init_param_t));
   \       0x12   0x2200             MOVS     R2,#+0
   \       0x14   0x211C             MOVS     R1,#+28
   \       0x16   0x4668             MOV      R0,SP
   \       0x18   0x....'....        BL       __aeabi_memset4
     18          
     19              cm_param.request_timeout_ms = IOTX_DM_CLIENT_REQUEST_TIMEOUT_MS;
   \       0x1C   0xF44F 0x60FA      MOV      R0,#+2000
   \       0x20   0x9000             STR      R0,[SP, #+0]
     20              cm_param.keepalive_interval_ms = IOTX_DM_CLIENT_KEEPALIVE_INTERVAL_MS;
   \       0x22   0xF247 0x5030      MOVW     R0,#+30000
   \       0x26   0x9001             STR      R0,[SP, #+4]
     21              cm_param.write_buf_size = CONFIG_MQTT_TX_MAXLEN;
   \       0x28   0xF44F 0x6080      MOV      R0,#+1024
   \       0x2C   0x9002             STR      R0,[SP, #+8]
     22              cm_param.read_buf_size = CONFIG_MQTT_RX_MAXLEN;
   \       0x2E   0x9003             STR      R0,[SP, #+12]
     23          #if defined(COAP_COMM_ENABLED) && !defined(MQTT_COMM_ENABLED)
     24              cm_param.protocol_type = IOTX_CM_PROTOCOL_TYPE_COAP;
     25          #else
     26              cm_param.protocol_type = IOTX_CM_PROTOCOL_TYPE_MQTT;
   \       0x30   0x2001             MOVS     R0,#+1
   \       0x32   0xF88D 0x0010      STRB     R0,[SP, #+16]
     27          #endif
     28              cm_param.handle_event = dm_client_event_handle;
   \       0x36   0x....             LDR.N    R0,??DataTable1_1
   \       0x38   0x9005             STR      R0,[SP, #+20]
     29          
     30              res = iotx_cm_open(&cm_param);
   \       0x3A   0x4668             MOV      R0,SP
   \       0x3C   0x....'....        BL       iotx_cm_open
     31          
     32              if (res < SUCCESS_RETURN) {
   \       0x40   0x2800             CMP      R0,#+0
   \       0x42   0xD401             BMI.N    ??dm_client_open_0
     33                  return res;
     34              }
     35              ctx->fd = res;
   \       0x44   0x6020             STR      R0,[R4, #+0]
     36          
     37              dm_log_info("CM Fd: %d", ctx->fd);
     38          
     39              return SUCCESS_RETURN;
   \       0x46   0x2000             MOVS     R0,#+0
   \                     ??dm_client_open_0: (+1)
   \       0x48   0xB008             ADD      SP,SP,#+32
   \       0x4A   0xBD10             POP      {R4,PC}          ;; return
     40          }
     41          

   \                                 In section .text, align 2, keep-with-next
     42          int dm_client_connect(int timeout_ms)
     43          {
   \                     dm_client_connect: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x4604             MOV      R4,R0
     44              int res = 0;
     45              dm_client_ctx_t *ctx = dm_client_get_ctx();
   \        0x4   0x....'....        BL       dm_client_get_ctx
     46          
     47              res = iotx_cm_connect(ctx->fd, timeout_ms);
   \        0x8   0x4621             MOV      R1,R4
   \        0xA   0x6800             LDR      R0,[R0, #+0]
   \        0xC   0x....'....        BL       iotx_cm_connect
     48              if (res < SUCCESS_RETURN) {
   \       0x10   0x2800             CMP      R0,#+0
   \       0x12   0xDD00             BLE.N    ??dm_client_connect_0
   \       0x14   0x2000             MOVS     R0,#+0
     49                  return res;
   \                     ??dm_client_connect_0: (+1)
   \       0x16   0xBD10             POP      {R4,PC}          ;; return
     50              }
     51          
     52              return SUCCESS_RETURN;
     53          }
     54          

   \                                 In section .text, align 2, keep-with-next
     55          int dm_client_close(void)
     56          {
   \                     dm_client_close: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     57              dm_client_ctx_t *ctx = dm_client_get_ctx();
   \        0x2   0x....'....        BL       dm_client_get_ctx
     58          
     59              return iotx_cm_close(ctx->fd);
   \        0x6   0x6800             LDR      R0,[R0, #+0]
   \        0x8   0xE8BD 0x4002      POP      {R1,LR}
   \        0xC   0x....'....        B.W      iotx_cm_close
     60          }
     61          

   \                                 In section .text, align 2, keep-with-next
     62          int dm_client_subscribe(char *uri, iotx_cm_data_handle_cb callback, void *context)
     63          {
   \                     dm_client_subscribe: (+1)
   \        0x0   0xE92D 0x41F8      PUSH     {R3-R8,LR}
   \        0x4   0xB085             SUB      SP,SP,#+20
   \        0x6   0x4605             MOV      R5,R0
   \        0x8   0x460E             MOV      R6,R1
   \        0xA   0x4614             MOV      R4,R2
     64              int res = 0;
     65              uint8_t local_sub = 0;
   \        0xC   0xF04F 0x0800      MOV      R8,#+0
     66              dm_client_ctx_t *ctx = dm_client_get_ctx();
   \       0x10   0x....'....        BL       dm_client_get_ctx
   \       0x14   0x4607             MOV      R7,R0
     67              iotx_cm_ext_params_t sub_params;
     68          
     69              memset(&sub_params, 0, sizeof(iotx_cm_ext_params_t));
   \       0x16   0x4642             MOV      R2,R8
   \       0x18   0x2110             MOVS     R1,#+16
   \       0x1A   0xA801             ADD      R0,SP,#+4
   \       0x1C   0x....'....        BL       __aeabi_memset4
     70              if (context != NULL) {
   \       0x20   0x2C00             CMP      R4,#+0
   \       0x22   0xD001             BEQ.N    ??dm_client_subscribe_0
     71                  local_sub = *((uint8_t *)context);
   \       0x24   0xF894 0x8000      LDRB     R8,[R4, #+0]
     72              }
     73          
     74              if (local_sub == 1) {
   \                     ??dm_client_subscribe_0: (+1)
   \       0x28   0xF1B8 0x0F01      CMP      R8,#+1
   \       0x2C   0xD106             BNE.N    ??dm_client_subscribe_1
     75                  sub_params.ack_type = IOTX_CM_MESSAGE_SUB_LOCAL;
   \       0x2E   0x2002             MOVS     R0,#+2
   \       0x30   0xF88D 0x0004      STRB     R0,[SP, #+4]
     76                  sub_params.sync_mode = IOTX_CM_ASYNC;
   \       0x34   0x2000             MOVS     R0,#+0
   \       0x36   0xF88D 0x0005      STRB     R0,[SP, #+5]
   \       0x3A   0xE005             B.N      ??dm_client_subscribe_2
     77              } else {
     78                  sub_params.ack_type = IOTX_CM_MESSAGE_NO_ACK;
   \                     ??dm_client_subscribe_1: (+1)
   \       0x3C   0x2000             MOVS     R0,#+0
   \       0x3E   0xF88D 0x0004      STRB     R0,[SP, #+4]
     79                  sub_params.sync_mode = IOTX_CM_SYNC;
   \       0x42   0x2001             MOVS     R0,#+1
   \       0x44   0xF88D 0x0005      STRB     R0,[SP, #+5]
     80              }
     81          
     82              sub_params.sync_timeout = IOTX_DM_CLIENT_SUB_TIMEOUT_MS;
   \                     ??dm_client_subscribe_2: (+1)
   \       0x48   0xF241 0x3088      MOVW     R0,#+5000
   \       0x4C   0x9002             STR      R0,[SP, #+8]
     83              sub_params.ack_cb = NULL;
   \       0x4E   0x2000             MOVS     R0,#+0
   \       0x50   0x9003             STR      R0,[SP, #+12]
     84          
     85              res = iotx_cm_sub(ctx->fd, &sub_params, (const char *)uri, callback, NULL);
   \       0x52   0x9000             STR      R0,[SP, #+0]
   \       0x54   0x4633             MOV      R3,R6
   \       0x56   0x462A             MOV      R2,R5
   \       0x58   0xA901             ADD      R1,SP,#+4
   \       0x5A   0x6838             LDR      R0,[R7, #+0]
   \       0x5C   0x....'....        BL       iotx_cm_sub
     86              dm_log_info("Subscribe Result: %d", res);
     87          
     88              if (res < SUCCESS_RETURN) {
   \       0x60   0x2800             CMP      R0,#+0
   \       0x62   0xDD00             BLE.N    ??dm_client_subscribe_3
   \       0x64   0x2000             MOVS     R0,#+0
     89                  return res;
   \                     ??dm_client_subscribe_3: (+1)
   \       0x66   0xB006             ADD      SP,SP,#+24
   \       0x68   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
     90              }
     91          
     92              return SUCCESS_RETURN;
     93          }
     94          

   \                                 In section .text, align 2, keep-with-next
     95          int dm_client_unsubscribe(char *uri)
     96          {
   \                     dm_client_unsubscribe: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x4604             MOV      R4,R0
     97              int res = 0;
     98              dm_client_ctx_t *ctx = dm_client_get_ctx();
   \        0x4   0x....'....        BL       dm_client_get_ctx
     99          
    100              res = iotx_cm_unsub(ctx->fd, uri);
    101          
    102              dm_log_info("Unsubscribe Result: %d", res);
    103          
    104              return res;
   \        0x8   0x4621             MOV      R1,R4
   \        0xA   0x6800             LDR      R0,[R0, #+0]
   \        0xC   0xE8BD 0x4010      POP      {R4,LR}
   \       0x10   0x....'....        B.W      iotx_cm_unsub
    105          }
    106          

   \                                 In section .text, align 2, keep-with-next
    107          int dm_client_publish(char *uri, unsigned char *payload, int payload_len, iotx_cm_data_handle_cb callback)
    108          {
   \                     dm_client_publish: (+1)
   \        0x0   0xB5F0             PUSH     {R4-R7,LR}
   \        0x2   0xB085             SUB      SP,SP,#+20
   \        0x4   0x4604             MOV      R4,R0
   \        0x6   0x460D             MOV      R5,R1
   \        0x8   0x4616             MOV      R6,R2
    109              int res = 0;
    110              char *pub_uri = NULL;
    111              dm_client_ctx_t *ctx = dm_client_get_ctx();
   \        0xA   0x....'....        BL       dm_client_get_ctx
   \        0xE   0x4607             MOV      R7,R0
    112              iotx_cm_ext_params_t pub_param;
    113          
    114              memset(&pub_param, 0, sizeof(iotx_cm_ext_params_t));
   \       0x10   0x2200             MOVS     R2,#+0
   \       0x12   0x2110             MOVS     R1,#+16
   \       0x14   0xA801             ADD      R0,SP,#+4
   \       0x16   0x....'....        BL       __aeabi_memset4
    115              pub_param.ack_type = IOTX_CM_MESSAGE_NO_ACK;
   \       0x1A   0x2000             MOVS     R0,#+0
   \       0x1C   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    116              pub_param.sync_mode = IOTX_CM_ASYNC;
    117              pub_param.sync_timeout = 0;
   \       0x20   0x9002             STR      R0,[SP, #+8]
    118              pub_param.ack_cb = NULL;
   \       0x22   0x9003             STR      R0,[SP, #+12]
    119          
    120          #if defined(COAP_COMM_ENABLED) && !defined(MQTT_COMM_ENABLED)
    121              pub_param.ack_cb = callback;
    122              res = dm_utils_uri_add_prefix("/topic", uri, &pub_uri);
    123              if (res < SUCCESS_RETURN) {
    124                  return FAIL_RETURN;
    125              }
    126          #else
    127              pub_uri = uri;
    128          #endif
    129          
    130              res = iotx_cm_pub(ctx->fd, &pub_param, (const char *)pub_uri, (const char *)payload, (unsigned int)payload_len);
    131              dm_log_info("Publish Result: %d", res);
    132          
    133          #if defined(COAP_COMM_ENABLED) && !defined(MQTT_COMM_ENABLED)
    134              DM_free(pub_uri);
    135          #endif
    136          
    137              return res;
   \       0x24   0x9600             STR      R6,[SP, #+0]
   \       0x26   0x462B             MOV      R3,R5
   \       0x28   0x4622             MOV      R2,R4
   \       0x2A   0xA901             ADD      R1,SP,#+4
   \       0x2C   0x6838             LDR      R0,[R7, #+0]
   \       0x2E   0x....'....        BL       iotx_cm_pub
   \       0x32   0xB005             ADD      SP,SP,#+20
   \       0x34   0xBDF0             POP      {R4-R7,PC}       ;; return
    138          }
    139          

   \                                 In section .text, align 2, keep-with-next
    140          int dm_client_yield(unsigned int timeout)
    141          {
   \                     dm_client_yield: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x4604             MOV      R4,R0
    142              dm_client_ctx_t *ctx = dm_client_get_ctx();
   \        0x4   0x....'....        BL       dm_client_get_ctx
    143          
    144              return iotx_cm_yield(ctx->fd, timeout);
   \        0x8   0x4621             MOV      R1,R4
   \        0xA   0x6800             LDR      R0,[R0, #+0]
   \        0xC   0xE8BD 0x4010      POP      {R4,LR}
   \       0x10   0x....'....        B.W      iotx_cm_yield
    145          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \        0x0   0x....'....        DC32     g_dm_client_ctx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \        0x0   0x....'....        DC32     dm_client_event_handle

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   dm_client_close
         8   -> dm_client_get_ctx
         0   -> iotx_cm_close
       8   dm_client_connect
         8   -> dm_client_get_ctx
         8   -> iotx_cm_connect
       0   dm_client_get_ctx
      40   dm_client_open
        40   -> __aeabi_memset4
        40   -> dm_client_get_ctx
        40   -> iotx_cm_open
      40   dm_client_publish
        40   -> __aeabi_memset4
        40   -> dm_client_get_ctx
        40   -> iotx_cm_pub
      48   dm_client_subscribe
        48   -> __aeabi_memset4
        48   -> dm_client_get_ctx
        48   -> iotx_cm_sub
       8   dm_client_unsubscribe
         8   -> dm_client_get_ctx
         0   -> iotx_cm_unsub
       8   dm_client_yield
         8   -> dm_client_get_ctx
         0   -> iotx_cm_yield


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
      16  dm_client_close
      24  dm_client_connect
       4  dm_client_get_ctx
      76  dm_client_open
      54  dm_client_publish
     108  dm_client_subscribe
      20  dm_client_unsubscribe
      20  dm_client_yield
      12  g_dm_client_ctx

 
  12 bytes in section .bss
 330 bytes in section .text
 
 330 bytes of CODE memory
  12 bytes of DATA memory

Errors: none
Warnings: none
