###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.3.193/W32 for ARM         10/Jun/2019  13:48:22
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\Development\smart_washing_machine_3080\drivers\fsl_gpio.c
#    Command line =  
#        -f C:\Users\nxf42695\AppData\Local\Temp\1\EWE6BC.tmp
#        (C:\Development\smart_washing_machine_3080\drivers\fsl_gpio.c -D DEBUG
#        -D USE_RTOS -D XIP_EXTERNAL_FLASH=1 -D XIP_BOOT_HEADER_ENABLE=1 -D
#        CPU_MIMXRT1052DVL6B -D FSL_RTOS_FREE_RTOS -D PRINTF_ADVANCED_ENABLE -D
#        "MBEDTLS_CONFIG_FILE=\"ksdk_mbedtls_config.h\"" -lC
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list -lA
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list
#        --diag_suppress Pa082,Pa050 -o
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_d16 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" --preinclude
#        C:\Development\smart_washing_machine_3080/source\app_preinclude.h -I
#        C:\Development\smart_washing_machine_3080/board\ -I
#        C:\Development\smart_washing_machine_3080/source\ -I
#        C:\Development\smart_washing_machine_3080/CMSIS\ -I
#        C:\Development\smart_washing_machine_3080/amazon-freertos/freertos/portable\
#        -I C:\Development\smart_washing_machine_3080/amazon-freertos/include\
#        -I C:\Development\smart_washing_machine_3080/component/lists\ -I
#        C:\Development\smart_washing_machine_3080/component/serial_manager\ -I
#        C:\Development\smart_washing_machine_3080/component/uart\ -I
#        C:\Development\smart_washing_machine_3080/component/kv\ -I
#        C:\Development\smart_washing_machine_3080/component/kv/include\ -I
#        C:\Development\smart_washing_machine_3080/device\ -I
#        C:\Development\smart_washing_machine_3080/doc\ -I
#        C:\Development\smart_washing_machine_3080/drivers\ -I
#        C:\Development\smart_washing_machine_3080/src\ -I
#        C:\Development\smart_washing_machine_3080/startup\ -I
#        C:\Development\smart_washing_machine_3080/utilities\ -I
#        C:\Development\smart_washing_machine_3080/xip\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\atm\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_model\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_sign\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\infra\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\mqtt\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\external_libs\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\coap_cloud\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\CoAPPacket\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\server\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\os\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\awss_reset\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\mbedtls\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\ -I
#        C:\Development\smart_washing_machine_3080\mbedtls\port\ksdk\ -Om)
#    Locale       =  C
#    List file    =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list\fsl_gpio.lst
#    Object file  =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj\fsl_gpio.o
#
###############################################################################

C:\Development\smart_washing_machine_3080\drivers\fsl_gpio.c
      1          /*
      2           * Copyright (c) 2016, Freescale Semiconductor, Inc.
      3           * Copyright 2016-2017 NXP
      4           * All rights reserved.
      5           *
      6           * SPDX-License-Identifier: BSD-3-Clause
      7           */
      8          
      9          #include "fsl_gpio.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void CLOCK_ControlGate(clock_ip_name_t, clock_gate_value_t)
   \                     CLOCK_ControlGate: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
   \        0x6   0x4626             MOV      R6,R4
   \        0x8   0x0A36             LSRS     R6,R6,#+8
   \        0xA   0xF004 0x041F      AND      R4,R4,#0x1F
   \        0xE   0x2E07             CMP      R6,#+7
   \       0x10   0xD307             BCC.N    ??CLOCK_ControlGate_0
   \       0x12   0xF240 0x32C1      MOVW     R2,#+961
   \       0x16   0x....             LDR.N    R1,??DataTable3
   \       0x18   0x....             LDR.N    R0,??DataTable3_1
   \       0x1A   0x....'....        BL       __aeabi_assert
   \       0x1E   0x....'....        BL       __iar_EmptyStepPoint
   \                     ??CLOCK_ControlGate_0: (+1)
   \       0x22   0x....             LDR.N    R0,??DataTable3_2  ;; 0x400fc068
   \       0x24   0xEB00 0x0086      ADD      R0,R0,R6, LSL #+2
   \       0x28   0x6801             LDR      R1,[R0, #+0]
   \       0x2A   0x2203             MOVS     R2,#+3
   \       0x2C   0x40A2             LSLS     R2,R2,R4
   \       0x2E   0x4391             BICS     R1,R1,R2
   \       0x30   0xFA05 0xF404      LSL      R4,R5,R4
   \       0x34   0x430C             ORRS     R4,R4,R1
   \       0x36   0x6004             STR      R4,[R0, #+0]
   \       0x38   0xBD70             POP      {R4-R6,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void CLOCK_EnableClock(clock_ip_name_t)
   \                     CLOCK_EnableClock: (+1)
   \        0x0   0x2103             MOVS     R1,#+3
   \        0x2   0x....             B.N      CLOCK_ControlGate

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void GPIO_SetPinInterruptConfig(GPIO_Type *, uint32_t, gpio_interrupt_mode_t)
   \                     GPIO_SetPinInterruptConfig: (+1)
   \        0x0   0x....             B.N      GPIO_PinSetInterruptConfig
     10          
     11          /* Component ID definition, used by tools. */
     12          #ifndef FSL_COMPONENT_ID
     13          #define FSL_COMPONENT_ID "platform.drivers.igpio"
     14          #endif
     15          
     16          /*******************************************************************************
     17           * Variables
     18           ******************************************************************************/
     19          
     20          /* Array of GPIO peripheral base address. */

   \                                 In section .rodata, align 4
     21          static GPIO_Type *const s_gpioBases[] = GPIO_BASE_PTRS;
   \                     s_gpioBases:
   \        0x0   0x0000'0000        DC32 0H, 401B8000H, 401BC000H, 401C0000H, 401C4000H, 400C0000H
   \              0x401B'8000  
   \              0x401B'C000  
   \              0x401C'0000  
   \              0x401C'4000  
   \              0x400C'0000  
     22          
     23          #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
     24          /* Array of GPIO clock name. */

   \                                 In section .rodata, align 4
     25          static const clock_ip_name_t s_gpioClock[] = GPIO_CLOCKS;
   \                     s_gpioClock:
   \        0x0   0xFFFF 0x011A      DC16 -1, 282, 30, 538, 780, 286
   \               0x001E 0x021
   \              A 0x030C 0x01
   \              1E           
     26          #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
     27          
     28          /*******************************************************************************
     29          * Prototypes
     30          ******************************************************************************/
     31          
     32          /*!
     33          * @brief Gets the GPIO instance according to the GPIO base
     34          *
     35          * @param base    GPIO peripheral base pointer(PTA, PTB, PTC, etc.)
     36          * @retval GPIO instance
     37          */
     38          static uint32_t GPIO_GetInstance(GPIO_Type *base);
     39          
     40          /*******************************************************************************
     41           * Code
     42           ******************************************************************************/
     43          

   \                                 In section .text, align 2, keep-with-next
     44          static uint32_t GPIO_GetInstance(GPIO_Type *base)
     45          {
   \                     GPIO_GetInstance: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
     46              uint32_t instance;
     47          
     48              /* Find the instance index from base address mappings. */
     49              for (instance = 0; instance < ARRAY_SIZE(s_gpioBases); instance++)
   \        0x2   0x2400             MOVS     R4,#+0
   \                     ??GPIO_GetInstance_0: (+1)
   \        0x4   0x2C06             CMP      R4,#+6
   \        0x6   0xD206             BCS.N    ??GPIO_GetInstance_1
     50              {
     51                  if (s_gpioBases[instance] == base)
   \        0x8   0x....             LDR.N    R1,??DataTable3_3
   \        0xA   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \        0xE   0x4281             CMP      R1,R0
   \       0x10   0xD001             BEQ.N    ??GPIO_GetInstance_1
     52                  {
     53                      break;
     54                  }
     55              }
   \       0x12   0x1C64             ADDS     R4,R4,#+1
   \       0x14   0xE7F6             B.N      ??GPIO_GetInstance_0
     56          
     57              assert(instance < ARRAY_SIZE(s_gpioBases));
   \                     ??GPIO_GetInstance_1: (+1)
   \       0x16   0x2C06             CMP      R4,#+6
   \       0x18   0xD306             BCC.N    ??GPIO_GetInstance_2
   \       0x1A   0x2239             MOVS     R2,#+57
   \       0x1C   0x....             LDR.N    R1,??DataTable3_4
   \       0x1E   0x....             LDR.N    R0,??DataTable3_5
   \       0x20   0x....'....        BL       __aeabi_assert
   \       0x24   0x....'....        BL       __iar_EmptyStepPoint
     58          
     59              return instance;
   \                     ??GPIO_GetInstance_2: (+1)
   \       0x28   0x4620             MOV      R0,R4
   \       0x2A   0xBD10             POP      {R4,PC}          ;; return
     60          }
     61          
     62          /*!
     63           * brief Initializes the GPIO peripheral according to the specified
     64           *        parameters in the initConfig.
     65           *
     66           * param base GPIO base pointer.
     67           * param pin Specifies the pin number
     68           * param initConfig pointer to a ref gpio_pin_config_t structure that
     69           *        contains the configuration information.
     70           */

   \                                 In section .text, align 2, keep-with-next
     71          void GPIO_PinInit(GPIO_Type *base, uint32_t pin, const gpio_pin_config_t *Config)
     72          {
   \                     GPIO_PinInit: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
   \        0x6   0x4616             MOV      R6,R2
     73          #if !(defined(FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL) && FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL)
     74              /* Enable GPIO clock. */
     75              CLOCK_EnableClock(s_gpioClock[GPIO_GetInstance(base)]);
   \        0x8   0x....'....        BL       GPIO_GetInstance
   \        0xC   0x....             LDR.N    R1,??DataTable3_6
   \        0xE   0xF931 0x0010      LDRSH    R0,[R1, R0, LSL #+1]
   \       0x12   0x....'....        BL       CLOCK_EnableClock
     76          #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */
     77          
     78              /* Register reset to default value */
     79              base->IMR &= ~(1U << pin);
   \       0x16   0x2701             MOVS     R7,#+1
   \       0x18   0x6961             LDR      R1,[R4, #+20]
   \       0x1A   0xFA07 0xF005      LSL      R0,R7,R5
   \       0x1E   0x4381             BICS     R1,R1,R0
   \       0x20   0x6161             STR      R1,[R4, #+20]
     80          
     81              /* Configure GPIO pin direction */
     82              if (Config->direction == kGPIO_DigitalInput)
   \       0x22   0x7830             LDRB     R0,[R6, #+0]
   \       0x24   0x2800             CMP      R0,#+0
   \       0x26   0xD105             BNE.N    ??GPIO_PinInit_0
     83              {
     84                  base->GDIR &= ~(1U << pin);
   \       0x28   0x6860             LDR      R0,[R4, #+4]
   \       0x2A   0x40AF             LSLS     R7,R7,R5
   \       0x2C   0xEA20 0x0707      BIC      R7,R0,R7
   \       0x30   0x6067             STR      R7,[R4, #+4]
   \       0x32   0xE008             B.N      ??GPIO_PinInit_1
     85              }
     86              else
     87              {
     88                  GPIO_PinWrite(base, pin, Config->outputLogic);
   \                     ??GPIO_PinInit_0: (+1)
   \       0x34   0x7872             LDRB     R2,[R6, #+1]
   \       0x36   0x4629             MOV      R1,R5
   \       0x38   0x4620             MOV      R0,R4
   \       0x3A   0x....'....        BL       GPIO_PinWrite
     89                  base->GDIR |= (1U << pin);
   \       0x3E   0x6860             LDR      R0,[R4, #+4]
   \       0x40   0x40AF             LSLS     R7,R7,R5
   \       0x42   0x4307             ORRS     R7,R7,R0
   \       0x44   0x6067             STR      R7,[R4, #+4]
     90              }
     91          
     92              /* Configure GPIO pin interrupt mode */
     93              GPIO_SetPinInterruptConfig(base, pin, Config->interruptMode);
   \                     ??GPIO_PinInit_1: (+1)
   \       0x46   0x78B2             LDRB     R2,[R6, #+2]
   \       0x48   0x4629             MOV      R1,R5
   \       0x4A   0x4620             MOV      R0,R4
   \       0x4C   0xE8BD 0x40F8      POP      {R3-R7,LR}
   \       0x50   0x....             B.N      GPIO_SetPinInterruptConfig
     94          }
     95          
     96          /*!
     97           * brief Sets the output level of the individual GPIO pin to logic 1 or 0.
     98           *
     99           * param base GPIO base pointer.
    100           * param pin GPIO port pin number.
    101           * param output GPIOpin output logic level.
    102           *        - 0: corresponding pin output low-logic level.
    103           *        - 1: corresponding pin output high-logic level.
    104           */

   \                                 In section .text, align 2, keep-with-next
    105          void GPIO_PinWrite(GPIO_Type *base, uint32_t pin, uint8_t output)
    106          {
   \                     GPIO_PinWrite: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
   \        0x6   0x4616             MOV      R6,R2
    107              assert(pin < 32);
   \        0x8   0x2D20             CMP      R5,#+32
   \        0xA   0xD306             BCC.N    ??GPIO_PinWrite_0
   \        0xC   0x226B             MOVS     R2,#+107
   \        0xE   0x....             LDR.N    R1,??DataTable3_4
   \       0x10   0x....             LDR.N    R0,??DataTable3_7
   \       0x12   0x....'....        BL       __aeabi_assert
   \       0x16   0x....'....        BL       __iar_EmptyStepPoint
    108              if (output == 0U)
   \                     ??GPIO_PinWrite_0: (+1)
   \       0x1A   0x2E00             CMP      R6,#+0
   \       0x1C   0x6820             LDR      R0,[R4, #+0]
   \       0x1E   0xD106             BNE.N    ??GPIO_PinWrite_1
    109              {
    110                  base->DR &= ~(1U << pin); /* Set pin output to low level.*/
   \       0x20   0x2101             MOVS     R1,#+1
   \       0x22   0xFA01 0xF505      LSL      R5,R1,R5
   \       0x26   0xEA20 0x0505      BIC      R5,R0,R5
   \       0x2A   0x6025             STR      R5,[R4, #+0]
   \       0x2C   0xBD70             POP      {R4-R6,PC}
    111              }
    112              else
    113              {
    114                  base->DR |= (1U << pin); /* Set pin output to high level.*/
   \                     ??GPIO_PinWrite_1: (+1)
   \       0x2E   0x2101             MOVS     R1,#+1
   \       0x30   0xFA01 0xF505      LSL      R5,R1,R5
   \       0x34   0x4305             ORRS     R5,R5,R0
   \       0x36   0x6025             STR      R5,[R4, #+0]
    115              }
    116          }
   \       0x38   0xBD70             POP      {R4-R6,PC}       ;; return
    117          
    118          /*!
    119           * brief Sets the current pin interrupt mode.
    120           *
    121           * param base GPIO base pointer.
    122           * param pin GPIO port pin number.
    123           * param pininterruptMode pointer to a ref gpio_interrupt_mode_t structure
    124           *        that contains the interrupt mode information.
    125           */

   \                                 In section .text, align 4, keep-with-next
    126          void GPIO_PinSetInterruptConfig(GPIO_Type *base, uint32_t pin, gpio_interrupt_mode_t pinInterruptMode)
    127          {
   \                     GPIO_PinSetInterruptConfig: (+1)
   \        0x0   0xB470             PUSH     {R4-R6}
    128              volatile uint32_t *icr;
    129              uint32_t icrShift;
    130          
    131              icrShift = pin;
   \        0x2   0x460C             MOV      R4,R1
    132          
    133              /* Register reset to default value */
    134              base->EDGE_SEL &= ~(1U << pin);
   \        0x4   0x2501             MOVS     R5,#+1
   \        0x6   0x69C6             LDR      R6,[R0, #+28]
   \        0x8   0xFA05 0xF301      LSL      R3,R5,R1
   \        0xC   0x439E             BICS     R6,R6,R3
   \        0xE   0x61C6             STR      R6,[R0, #+28]
    135          
    136              if (pin < 16)
   \       0x10   0x2910             CMP      R1,#+16
   \       0x12   0xD202             BCS.N    ??GPIO_PinSetInterruptConfig_1
    137              {
    138                  icr = &(base->ICR1);
   \       0x14   0xF100 0x030C      ADD      R3,R0,#+12
   \       0x18   0xE002             B.N      ??GPIO_PinSetInterruptConfig_2
    139              }
    140              else
    141              {
    142                  icr = &(base->ICR2);
   \                     ??GPIO_PinSetInterruptConfig_1: (+1)
   \       0x1A   0xF100 0x0310      ADD      R3,R0,#+16
    143                  icrShift -= 16;
   \       0x1E   0x3C10             SUBS     R4,R4,#+16
    144              }
    145              switch (pinInterruptMode)
   \                     ??GPIO_PinSetInterruptConfig_2: (+1)
   \       0x20   0x1E52             SUBS     R2,R2,#+1
   \       0x22   0x2A04             CMP      R2,#+4
   \       0x24   0xD82A             BHI.N    ??GPIO_PinSetInterruptConfig_3
   \       0x26   0xE8DF 0xF002      TBB      [PC, R2]
   \                     ??GPIO_PinSetInterruptConfig_0:
   \       0x2A   0x03 0x0A          DC8      0x3,0xA,0x13,0x1D
   \              0x13 0x1D    
   \       0x2E   0x24 0x00          DC8      0x24,0x0
    146              {
    147                  case (kGPIO_IntLowLevel):
    148                      *icr &= ~(3U << (2 * icrShift));
   \                     ??GPIO_PinSetInterruptConfig_4: (+1)
   \       0x30   0x6819             LDR      R1,[R3, #+0]
   \       0x32   0x2203             MOVS     R2,#+3
   \       0x34   0x0060             LSLS     R0,R4,#+1
   \       0x36   0x4082             LSLS     R2,R2,R0
   \       0x38   0x4391             BICS     R1,R1,R2
   \       0x3A   0x6019             STR      R1,[R3, #+0]
    149                      break;
   \       0x3C   0xE01E             B.N      ??GPIO_PinSetInterruptConfig_3
    150                  case (kGPIO_IntHighLevel):
    151                      *icr = (*icr & (~(3U << (2 * icrShift)))) | (1U << (2 * icrShift));
   \                     ??GPIO_PinSetInterruptConfig_5: (+1)
   \       0x3E   0x6819             LDR      R1,[R3, #+0]
   \       0x40   0x2203             MOVS     R2,#+3
   \       0x42   0x0060             LSLS     R0,R4,#+1
   \       0x44   0x4082             LSLS     R2,R2,R0
   \       0x46   0x4391             BICS     R1,R1,R2
   \       0x48   0x4085             LSLS     R5,R5,R0
   \       0x4A   0x430D             ORRS     R5,R5,R1
   \       0x4C   0x601D             STR      R5,[R3, #+0]
    152                      break;
   \       0x4E   0xE015             B.N      ??GPIO_PinSetInterruptConfig_3
    153                  case (kGPIO_IntRisingEdge):
    154                      *icr = (*icr & (~(3U << (2 * icrShift)))) | (2U << (2 * icrShift));
   \                     ??GPIO_PinSetInterruptConfig_6: (+1)
   \       0x50   0x6819             LDR      R1,[R3, #+0]
   \       0x52   0x2203             MOVS     R2,#+3
   \       0x54   0x0060             LSLS     R0,R4,#+1
   \       0x56   0x4082             LSLS     R2,R2,R0
   \       0x58   0x4391             BICS     R1,R1,R2
   \       0x5A   0x2202             MOVS     R2,#+2
   \       0x5C   0x4082             LSLS     R2,R2,R0
   \       0x5E   0x4311             ORRS     R1,R2,R1
   \       0x60   0x6019             STR      R1,[R3, #+0]
    155                      break;
   \       0x62   0xE00B             B.N      ??GPIO_PinSetInterruptConfig_3
    156                  case (kGPIO_IntFallingEdge):
    157                      *icr |= (3U << (2 * icrShift));
   \                     ??GPIO_PinSetInterruptConfig_7: (+1)
   \       0x64   0x6819             LDR      R1,[R3, #+0]
   \       0x66   0x2203             MOVS     R2,#+3
   \       0x68   0x0060             LSLS     R0,R4,#+1
   \       0x6A   0x4082             LSLS     R2,R2,R0
   \       0x6C   0x4311             ORRS     R1,R2,R1
   \       0x6E   0x6019             STR      R1,[R3, #+0]
    158                      break;
   \       0x70   0xE004             B.N      ??GPIO_PinSetInterruptConfig_3
    159                  case (kGPIO_IntRisingOrFallingEdge):
    160                      base->EDGE_SEL |= (1U << pin);
   \                     ??GPIO_PinSetInterruptConfig_8: (+1)
   \       0x72   0x69C2             LDR      R2,[R0, #+28]
   \       0x74   0xFA05 0xF101      LSL      R1,R5,R1
   \       0x78   0x4311             ORRS     R1,R1,R2
   \       0x7A   0x61C1             STR      R1,[R0, #+28]
    161                      break;
    162                  default:
    163                      break;
    164              }
    165          }
   \                     ??GPIO_PinSetInterruptConfig_3: (+1)
   \       0x7C   0xBC70             POP      {R4-R6}
   \       0x7E   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \        0x0   0x....'....        DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \        0x0   0x400F'C068        DC32     0x400fc068

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \        0x0   0x....'....        DC32     s_gpioBases

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \        0x0   0x....'....        DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \        0x0   0x....'....        DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \        0x0   0x....'....        DC32     s_gpioClock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \        0x0   0x....'....        DC32     ?_4

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x69 0x6E          DC8 "index <= 6"
   \              0x64 0x65    
   \              0x78 0x20    
   \              0x3C 0x3D    
   \              0x20 0x36    
   \              0x00         
   \        0xB   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_1:
   \        0x0   0x43 0x3A          DC8 43H, 3AH, 5CH, 44H, 65H, 76H, 65H, 6CH
   \              0x5C 0x44    
   \              0x65 0x76    
   \              0x65 0x6C    
   \        0x8   0x6F 0x70          DC8 6FH, 70H, 6DH, 65H, 6EH, 74H, 5CH, 73H
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x5C 0x73    
   \       0x10   0x6D 0x61          DC8 6DH, 61H, 72H, 74H, 5FH, 77H, 61H, 73H
   \              0x72 0x74    
   \              0x5F 0x77    
   \              0x61 0x73    
   \       0x18   0x68 0x69          DC8 68H, 69H, 6EH, 67H, 5FH, 6DH, 61H, 63H
   \              0x6E 0x67    
   \              0x5F 0x6D    
   \              0x61 0x63    
   \       0x20   0x68 0x69          DC8 68H, 69H, 6EH, 65H, 5FH, 33H, 30H, 38H
   \              0x6E 0x65    
   \              0x5F 0x33    
   \              0x30 0x38    
   \       0x28   0x30 0x5C          DC8 30H, 5CH, 64H, 72H, 69H, 76H, 65H, 72H
   \              0x64 0x72    
   \              0x69 0x76    
   \              0x65 0x72    
   \       0x30   0x73 0x5C          DC8 73H, 5CH, 66H, 73H, 6CH, 5FH, 63H, 6CH
   \              0x66 0x73    
   \              0x6C 0x5F    
   \              0x63 0x6C    
   \       0x38   0x6F 0x63          DC8 6FH, 63H, 6BH, 2EH, 68H, 0
   \              0x6B 0x2E    
   \              0x68 0x00    
   \       0x3E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_2:
   \        0x0   0x69 0x6E          DC8 69H, 6EH, 73H, 74H, 61H, 6EH, 63H, 65H
   \              0x73 0x74    
   \              0x61 0x6E    
   \              0x63 0x65    
   \        0x8   0x20 0x3C          DC8 20H, 3CH, 20H, 28H, 73H, 69H, 7AH, 65H
   \              0x20 0x28    
   \              0x73 0x69    
   \              0x7A 0x65    
   \       0x10   0x6F 0x66          DC8 6FH, 66H, 28H, 73H, 5FH, 67H, 70H, 69H
   \              0x28 0x73    
   \              0x5F 0x67    
   \              0x70 0x69    
   \       0x18   0x6F 0x42          DC8 6FH, 42H, 61H, 73H, 65H, 73H, 29H, 20H
   \              0x61 0x73    
   \              0x65 0x73    
   \              0x29 0x20    
   \       0x20   0x2F 0x20          DC8 2FH, 20H, 73H, 69H, 7AH, 65H, 6FH, 66H
   \              0x73 0x69    
   \              0x7A 0x65    
   \              0x6F 0x66    
   \       0x28   0x28 0x28          DC8 28H, 28H, 73H, 5FH, 67H, 70H, 69H, 6FH
   \              0x73 0x5F    
   \              0x67 0x70    
   \              0x69 0x6F    
   \       0x30   0x42 0x61          DC8 42H, 61H, 73H, 65H, 73H, 29H, 5BH, 30H
   \              0x73 0x65    
   \              0x73 0x29    
   \              0x5B 0x30    
   \       0x38   0x5D 0x29          DC8 5DH, 29H, 29H, 0
   \              0x29 0x00    

   \                                 In section .rodata, align 4
   \                     ?_3:
   \        0x0   0x43 0x3A          DC8 43H, 3AH, 5CH, 44H, 65H, 76H, 65H, 6CH
   \              0x5C 0x44    
   \              0x65 0x76    
   \              0x65 0x6C    
   \        0x8   0x6F 0x70          DC8 6FH, 70H, 6DH, 65H, 6EH, 74H, 5CH, 73H
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x5C 0x73    
   \       0x10   0x6D 0x61          DC8 6DH, 61H, 72H, 74H, 5FH, 77H, 61H, 73H
   \              0x72 0x74    
   \              0x5F 0x77    
   \              0x61 0x73    
   \       0x18   0x68 0x69          DC8 68H, 69H, 6EH, 67H, 5FH, 6DH, 61H, 63H
   \              0x6E 0x67    
   \              0x5F 0x6D    
   \              0x61 0x63    
   \       0x20   0x68 0x69          DC8 68H, 69H, 6EH, 65H, 5FH, 33H, 30H, 38H
   \              0x6E 0x65    
   \              0x5F 0x33    
   \              0x30 0x38    
   \       0x28   0x30 0x5C          DC8 30H, 5CH, 64H, 72H, 69H, 76H, 65H, 72H
   \              0x64 0x72    
   \              0x69 0x76    
   \              0x65 0x72    
   \       0x30   0x73 0x5C          DC8 73H, 5CH, 66H, 73H, 6CH, 5FH, 67H, 70H
   \              0x66 0x73    
   \              0x6C 0x5F    
   \              0x67 0x70    
   \       0x38   0x69 0x6F          DC8 69H, 6FH, 2EH, 63H, 0
   \              0x2E 0x63    
   \              0x00         
   \       0x3D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_4:
   \        0x0   0x70 0x69          DC8 "pin < 32"
   \              0x6E 0x20    
   \              0x3C 0x20    
   \              0x33 0x32    
   \              0x00         
   \        0x9   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   CLOCK_ControlGate
        16   -> __aeabi_assert
        16   -> __iar_EmptyStepPoint
       0   CLOCK_EnableClock
         0   -> CLOCK_ControlGate
       8   GPIO_GetInstance
         8   -> __aeabi_assert
         8   -> __iar_EmptyStepPoint
      24   GPIO_PinInit
        24   -> CLOCK_EnableClock
        24   -> GPIO_GetInstance
        24   -> GPIO_PinWrite
         0   -> GPIO_SetPinInterruptConfig
      12   GPIO_PinSetInterruptConfig
      16   GPIO_PinWrite
        16   -> __aeabi_assert
        16   -> __iar_EmptyStepPoint
       0   GPIO_SetPinInterruptConfig
         0   -> GPIO_PinSetInterruptConfig


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
      12  ?_0
      64  ?_1
      60  ?_2
      64  ?_3
      12  ?_4
      58  CLOCK_ControlGate
       4  CLOCK_EnableClock
      44  GPIO_GetInstance
      82  GPIO_PinInit
     128  GPIO_PinSetInterruptConfig
      58  GPIO_PinWrite
       2  GPIO_SetPinInterruptConfig
      24  s_gpioBases
      12  s_gpioClock

 
 248 bytes in section .rodata
 408 bytes in section .text
 
 408 bytes of CODE  memory
 248 bytes of CONST memory

Errors: none
Warnings: none
