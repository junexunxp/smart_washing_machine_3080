###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.3.193/W32 for ARM         10/Jun/2019  13:48:08
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\server\CoAPPlatform.c
#    Command line =  
#        -f C:\Users\nxf42695\AppData\Local\Temp\1\EWB0A2.tmp
#        (C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\server\CoAPPlatform.c
#        -D DEBUG -D USE_RTOS -D XIP_EXTERNAL_FLASH=1 -D
#        XIP_BOOT_HEADER_ENABLE=1 -D CPU_MIMXRT1052DVL6B -D FSL_RTOS_FREE_RTOS
#        -D PRINTF_ADVANCED_ENABLE -D
#        "MBEDTLS_CONFIG_FILE=\"ksdk_mbedtls_config.h\"" -lC
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list -lA
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list
#        --diag_suppress Pa082,Pa050 -o
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_d16 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" --preinclude
#        C:\Development\smart_washing_machine_3080/source\app_preinclude.h -I
#        C:\Development\smart_washing_machine_3080/board\ -I
#        C:\Development\smart_washing_machine_3080/source\ -I
#        C:\Development\smart_washing_machine_3080/CMSIS\ -I
#        C:\Development\smart_washing_machine_3080/amazon-freertos/freertos/portable\
#        -I C:\Development\smart_washing_machine_3080/amazon-freertos/include\
#        -I C:\Development\smart_washing_machine_3080/component/lists\ -I
#        C:\Development\smart_washing_machine_3080/component/serial_manager\ -I
#        C:\Development\smart_washing_machine_3080/component/uart\ -I
#        C:\Development\smart_washing_machine_3080/component/kv\ -I
#        C:\Development\smart_washing_machine_3080/component/kv/include\ -I
#        C:\Development\smart_washing_machine_3080/device\ -I
#        C:\Development\smart_washing_machine_3080/doc\ -I
#        C:\Development\smart_washing_machine_3080/drivers\ -I
#        C:\Development\smart_washing_machine_3080/src\ -I
#        C:\Development\smart_washing_machine_3080/startup\ -I
#        C:\Development\smart_washing_machine_3080/utilities\ -I
#        C:\Development\smart_washing_machine_3080/xip\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\atm\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_model\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_sign\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\infra\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\mqtt\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\external_libs\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\coap_cloud\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\CoAPPacket\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\server\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\os\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\awss_reset\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\mbedtls\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\ -I
#        C:\Development\smart_washing_machine_3080\mbedtls\port\ksdk\ -Om)
#    Locale       =  C
#    List file    =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list\CoAPPlatform.lst
#    Object file  =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj\CoAPPlatform.o
#
###############################################################################

C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\server\CoAPPlatform.c
      1          /*
      2           * Copyright (C) 2015-2018 Alibaba Group Holding Limited
      3           */
      4          
      5          #include <stdio.h>
      6          #include <ctype.h>
      7          

   \                                 In section .text, align 4, keep-with-next
      8          unsigned int platform_aton(const char *ip_str)
      9          {
   \                     platform_aton: (+1)
   \        0x0   0xE92D 0x41FF      PUSH     {R0-R8,LR}
   \        0x4   0x4606             MOV      R6,R0
     10              char c;
     11              unsigned char base;
     12              unsigned int  val = 0;
     13              unsigned int parts[4] = {0};
   \        0x6   0x4668             MOV      R0,SP
   \        0x8   0x2110             MOVS     R1,#+16
   \        0xA   0x....'....        BL       __aeabi_memclr4
     14              unsigned int *pp = parts;
   \        0xE   0x466F             MOV      R7,SP
     15          
     16              c = *ip_str;
   \       0x10   0x7834             LDRB     R4,[R6, #+0]
   \       0x12   0xE006             B.N      ??platform_aton_1
     17              for (;;) {
     18                  /*
     19                   * Collect number up to ``.''.
     20                   * Values are specified as for C:
     21                   * 0x=hex, 0=octal, 1-9=decimal.
     22                   */
     23                  if (!isdigit(c))
     24                      return (0);
     25          
     26                  val = 0;
     27                  base = 10;
     28                  if (c == '0') {
     29                      c = *++ip_str;
     30                      if (c == 'x' || c == 'X') {
     31                          base = 16;
     32                          c = *++ip_str;
     33                      } else {
     34                          base = 8;
     35                      }
     36                  }
     37                  for (;;) {
     38                      if (isdigit(c)) {
     39                          val = (val * base) + (int)(c - '0');
     40                          c = *++ip_str;
     41                      } else if (base == 16 && isxdigit(c)) {
     42                          val = (val << 4) | (int)(c + 10 - (islower(c) ? 'a' : 'A'));
     43                          c = *++ip_str;
     44                      } else {
     45                          break;
     46                      }
     47                  }
     48                  if (c == '.') {
     49                      /*
     50                       * Internet format:
     51                       *  a.b.c.d
     52                       *  a.b.c   (with c treated as 16 bits)
     53                       *  a.b (with b treated as 24 bits)
     54                       */
     55                      if (pp >= parts + 3)
   \                     ??platform_aton_2: (+1)
   \       0x14   0xA803             ADD      R0,SP,#+12
   \       0x16   0x4287             CMP      R7,R0
   \       0x18   0xD24B             BCS.N    ??platform_aton_3
     56                          return (0);
     57                      *pp++ = val;
   \       0x1A   0xF847 0x5B04      STR      R5,[R7], #+4
     58                      c = *++ip_str;
   \       0x1E   0xF816 0x4F01      LDRB     R4,[R6, #+1]!
     59                  } else {
   \                     ??platform_aton_1: (+1)
   \       0x22   0x4620             MOV      R0,R4
   \       0x24   0x....'....        BL       isdigit
   \       0x28   0x2800             CMP      R0,#+0
   \       0x2A   0xD042             BEQ.N    ??platform_aton_3
   \       0x2C   0x2500             MOVS     R5,#+0
   \       0x2E   0xF04F 0x080A      MOV      R8,#+10
   \       0x32   0x2C30             CMP      R4,#+48
   \       0x34   0xD113             BNE.N    ??platform_aton_4
   \       0x36   0xF816 0x4F01      LDRB     R4,[R6, #+1]!
   \       0x3A   0x2C78             CMP      R4,#+120
   \       0x3C   0xD001             BEQ.N    ??platform_aton_5
   \       0x3E   0x2C58             CMP      R4,#+88
   \       0x40   0xD104             BNE.N    ??platform_aton_6
   \                     ??platform_aton_5: (+1)
   \       0x42   0xF04F 0x0810      MOV      R8,#+16
   \       0x46   0xF816 0x4F01      LDRB     R4,[R6, #+1]!
   \       0x4A   0xE008             B.N      ??platform_aton_4
   \                     ??platform_aton_6: (+1)
   \       0x4C   0xF04F 0x0808      MOV      R8,#+8
   \       0x50   0xE005             B.N      ??platform_aton_4
   \                     ??platform_aton_7: (+1)
   \       0x52   0xFB08 0x4405      MLA      R4,R8,R5,R4
   \       0x56   0x3C30             SUBS     R4,R4,#+48
   \       0x58   0x4625             MOV      R5,R4
   \       0x5A   0xF816 0x4F01      LDRB     R4,[R6, #+1]!
   \                     ??platform_aton_4: (+1)
   \       0x5E   0x4620             MOV      R0,R4
   \       0x60   0x....'....        BL       isdigit
   \       0x64   0x2800             CMP      R0,#+0
   \       0x66   0xD1F4             BNE.N    ??platform_aton_7
   \       0x68   0xF1B8 0x0F10      CMP      R8,#+16
   \       0x6C   0xD130             BNE.N    ??platform_aton_8
   \       0x6E   0x4620             MOV      R0,R4
   \       0x70   0x....'....        BL       isxdigit
   \       0x74   0x2800             CMP      R0,#+0
   \       0x76   0xD02B             BEQ.N    ??platform_aton_8
   \       0x78   0x4620             MOV      R0,R4
   \       0x7A   0x....'....        BL       islower
   \       0x7E   0x2800             CMP      R0,#+0
   \       0x80   0xD001             BEQ.N    ??platform_aton_9
   \       0x82   0x2061             MOVS     R0,#+97
   \       0x84   0xE000             B.N      ??platform_aton_10
   \                     ??platform_aton_9: (+1)
   \       0x86   0x2041             MOVS     R0,#+65
   \                     ??platform_aton_10: (+1)
   \       0x88   0x340A             ADDS     R4,R4,#+10
   \       0x8A   0x1A24             SUBS     R4,R4,R0
   \       0x8C   0xEA44 0x1405      ORR      R4,R4,R5, LSL #+4
   \       0x90   0x4625             MOV      R5,R4
   \       0x92   0xF816 0x4F01      LDRB     R4,[R6, #+1]!
   \       0x96   0xE7E2             B.N      ??platform_aton_4
     60                      break;
     61                  }
     62              }
     63              /*
     64               * Check for trailing characters.
     65               */
     66              if (c != '\0' && !isspace(c))
     67                  return (0);
     68              /*
     69               * Concoct the address according to
     70               * the number of parts specified.
     71               */
     72              switch (pp - parts + 1) {
     73                  case 0:
     74                      return (0);                                    /* initial nondigit */
     75                  case 1:                                            /* a -- 32 bits */
     76                      break;
     77                  case 2:                                            /* a.b -- 8.24 bits */
     78                      if (val > 0xffffffUL)
     79                          return (0);
     80                      val |= parts[0] << 24;
     81                      break;
     82                  case 3:                                            /* a.b.c -- 8.8.16 bits */
     83                      if (val > 0xffff)
   \                     ??platform_aton_11: (+1)
   \       0x98   0xF5B5 0x3F80      CMP      R5,#+65536
   \       0x9C   0xD209             BCS.N    ??platform_aton_3
     84                          return (0);
     85                      val |= (parts[0] << 24) | (parts[1] << 16);
   \       0x9E   0x9800             LDR      R0,[SP, #+0]
   \       0xA0   0x9901             LDR      R1,[SP, #+4]
   \       0xA2   0x0409             LSLS     R1,R1,#+16
   \       0xA4   0xEA41 0x6100      ORR      R1,R1,R0, LSL #+24
   \       0xA8   0x430D             ORRS     R5,R1,R5
     86                      break;
   \       0xAA   0xE00D             B.N      ??platform_aton_12
     87                  case 4:                                            /* a.b.c.d -- 8.8.8.8 bits */
     88                      if (val > 0xff)
   \                     ??platform_aton_13: (+1)
   \       0xAC   0xF5B5 0x7F80      CMP      R5,#+256
   \       0xB0   0xD301             BCC.N    ??platform_aton_14
     89                          return (0);
   \                     ??platform_aton_3: (+1)
   \       0xB2   0x2000             MOVS     R0,#+0
   \       0xB4   0xE009             B.N      ??platform_aton_15
     90                      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
   \                     ??platform_aton_14: (+1)
   \       0xB6   0x9900             LDR      R1,[SP, #+0]
   \       0xB8   0x6842             LDR      R2,[R0, #+4]
   \       0xBA   0x0412             LSLS     R2,R2,#+16
   \       0xBC   0xEA42 0x6201      ORR      R2,R2,R1, LSL #+24
   \       0xC0   0x6880             LDR      R0,[R0, #+8]
   \       0xC2   0xEA42 0x2200      ORR      R2,R2,R0, LSL #+8
   \       0xC6   0x4315             ORRS     R5,R2,R5
     91                      break;
     92                  default:
     93                      break;
     94              }
     95          
     96              return val;
   \                     ??platform_aton_12: (+1)
   \       0xC8   0x4628             MOV      R0,R5
   \                     ??platform_aton_15: (+1)
   \       0xCA   0xB004             ADD      SP,SP,#+16
   \       0xCC   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   \                     ??platform_aton_8: (+1)
   \       0xD0   0x2C2E             CMP      R4,#+46
   \       0xD2   0xD09F             BEQ.N    ??platform_aton_2
   \       0xD4   0x2C00             CMP      R4,#+0
   \       0xD6   0xD004             BEQ.N    ??platform_aton_16
   \       0xD8   0x4620             MOV      R0,R4
   \       0xDA   0x....'....        BL       isspace
   \       0xDE   0x2800             CMP      R0,#+0
   \       0xE0   0xD0E7             BEQ.N    ??platform_aton_3
   \                     ??platform_aton_16: (+1)
   \       0xE2   0x4668             MOV      R0,SP
   \       0xE4   0x1A3F             SUBS     R7,R7,R0
   \       0xE6   0x10BF             ASRS     R7,R7,#+2
   \       0xE8   0x1C7F             ADDS     R7,R7,#+1
   \       0xEA   0x2F04             CMP      R7,#+4
   \       0xEC   0xD8EC             BHI.N    ??platform_aton_12
   \       0xEE   0xE8DF 0xF007      TBB      [PC, R7]
   \                     ??platform_aton_0:
   \       0xF2   0x06 0x03          DC8      0x6,0x3,0x7,0x5
   \              0x07 0x05    
   \       0xF6   0x04 0x00          DC8      0x4,0x0
   \                     ??platform_aton_17: (+1)
   \       0xF8   0xE7E6             B.N      ??platform_aton_12
   \                     ??platform_aton_18: (+1)
   \       0xFA   0xE7D7             B.N      ??platform_aton_13
   \                     ??platform_aton_19: (+1)
   \       0xFC   0xE7CC             B.N      ??platform_aton_11
   \                     ??platform_aton_20: (+1)
   \       0xFE   0xE7D8             B.N      ??platform_aton_3
   \                     ??platform_aton_21: (+1)
   \      0x100   0xF1B5 0x7F80      CMP      R5,#+16777216
   \      0x104   0xD2D5             BCS.N    ??platform_aton_3
   \      0x106   0x9800             LDR      R0,[SP, #+0]
   \      0x108   0xEA45 0x6500      ORR      R5,R5,R0, LSL #+24
   \      0x10C   0xE7DC             B.N      ??platform_aton_12
     97          }
     98          
     99          

   \                                 In section .text, align 2, keep-with-next
    100          int platform_is_multicast(const char *ip_str)
    101          {
   \                     platform_is_multicast: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    102              unsigned int addr_in;
    103              addr_in = platform_aton(ip_str);
    104              return (addr_in > 0xE00000FF && addr_in <= 0xEFFFFFFF);
   \        0x2   0x....'....        BL       platform_aton
   \        0x6   0x....             LDR.N    R1,??DataTable1  ;; 0x1fffff00
   \        0x8   0x1808             ADDS     R0,R1,R0
   \        0xA   0x....             LDR.N    R1,??DataTable1_1  ;; 0xfffff00
   \        0xC   0x4288             CMP      R0,R1
   \        0xE   0x4180             SBCS     R0,R0,R0
   \       0x10   0x0FC0             LSRS     R0,R0,#+31
   \       0x12   0xBD02             POP      {R1,PC}          ;; return
    105          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \        0x0   0x1FFF'FF00        DC32     0x1fffff00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \        0x0   0x0FFF'FF00        DC32     0xfffff00

   \                                 In section .rodata, align 4
   \        0x0   0x0000'0000        DC32 0, 0, 0, 0
   \              0x0000'0000  
   \              0x0000'0000  
   \              0x0000'0000  

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      40   platform_aton
        40   -> __aeabi_memclr4
        40   -> isdigit
        40   -> islower
        40   -> isspace
        40   -> isxdigit
       8   platform_is_multicast
         8   -> platform_aton


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
      16  ?_0
     270  platform_aton
      20  platform_is_multicast

 
  16 bytes in section .rodata
 298 bytes in section .text
 
 298 bytes of CODE  memory
  16 bytes of CONST memory

Errors: none
Warnings: none
