###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.3.193/W32 for ARM         10/Jun/2019  13:48:11
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\Development\smart_washing_machine_3080\mbedtls\library\dhm.c
#    Command line =  
#        -f C:\Users\nxf42695\AppData\Local\Temp\1\EWBB3C.tmp
#        (C:\Development\smart_washing_machine_3080\mbedtls\library\dhm.c -D
#        DEBUG -D USE_RTOS -D XIP_EXTERNAL_FLASH=1 -D XIP_BOOT_HEADER_ENABLE=1
#        -D CPU_MIMXRT1052DVL6B -D FSL_RTOS_FREE_RTOS -D PRINTF_ADVANCED_ENABLE
#        -D "MBEDTLS_CONFIG_FILE=\"ksdk_mbedtls_config.h\"" -lC
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list -lA
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list
#        --diag_suppress Pa082,Pa050 -o
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_d16 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" --preinclude
#        C:\Development\smart_washing_machine_3080/source\app_preinclude.h -I
#        C:\Development\smart_washing_machine_3080/board\ -I
#        C:\Development\smart_washing_machine_3080/source\ -I
#        C:\Development\smart_washing_machine_3080/CMSIS\ -I
#        C:\Development\smart_washing_machine_3080/amazon-freertos/freertos/portable\
#        -I C:\Development\smart_washing_machine_3080/amazon-freertos/include\
#        -I C:\Development\smart_washing_machine_3080/component/lists\ -I
#        C:\Development\smart_washing_machine_3080/component/serial_manager\ -I
#        C:\Development\smart_washing_machine_3080/component/uart\ -I
#        C:\Development\smart_washing_machine_3080/component/kv\ -I
#        C:\Development\smart_washing_machine_3080/component/kv/include\ -I
#        C:\Development\smart_washing_machine_3080/device\ -I
#        C:\Development\smart_washing_machine_3080/doc\ -I
#        C:\Development\smart_washing_machine_3080/drivers\ -I
#        C:\Development\smart_washing_machine_3080/src\ -I
#        C:\Development\smart_washing_machine_3080/startup\ -I
#        C:\Development\smart_washing_machine_3080/utilities\ -I
#        C:\Development\smart_washing_machine_3080/xip\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\atm\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_model\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_sign\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\infra\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\mqtt\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\external_libs\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\coap_cloud\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\CoAPPacket\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\server\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\os\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\awss_reset\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\mbedtls\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\ -I
#        C:\Development\smart_washing_machine_3080\mbedtls\port\ksdk\ -Om)
#    Locale       =  C
#    List file    =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list\dhm.lst
#    Object file  =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj\dhm.o
#
###############################################################################

C:\Development\smart_washing_machine_3080\mbedtls\library\dhm.c
      1          /*
      2           *  Diffie-Hellman-Merkle key exchange
      3           *
      4           *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
      5           *  SPDX-License-Identifier: Apache-2.0
      6           *
      7           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
      8           *  not use this file except in compliance with the License.
      9           *  You may obtain a copy of the License at
     10           *
     11           *  http://www.apache.org/licenses/LICENSE-2.0
     12           *
     13           *  Unless required by applicable law or agreed to in writing, software
     14           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     15           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     16           *  See the License for the specific language governing permissions and
     17           *  limitations under the License.
     18           *
     19           *  This file is part of mbed TLS (https://tls.mbed.org)
     20           */
     21          /*
     22           *  The following sources were referenced in the design of this implementation
     23           *  of the Diffie-Hellman-Merkle algorithm:
     24           *
     25           *  [1] Handbook of Applied Cryptography - 1997, Chapter 12
     26           *      Menezes, van Oorschot and Vanstone
     27           *
     28           */
     29          
     30          #if !defined(MBEDTLS_CONFIG_FILE)
     31          #include "mbedtls/config.h"
     32          #else
     33          #include MBEDTLS_CONFIG_FILE
     34          #endif
     35          
     36          #if defined(MBEDTLS_DHM_C)
     37          
     38          #include "mbedtls/dhm.h"
     39          #include "mbedtls/platform_util.h"
     40          
     41          #include <string.h>
     42          
     43          #if defined(MBEDTLS_PEM_PARSE_C)
     44          #include "mbedtls/pem.h"
     45          #endif
     46          
     47          #if defined(MBEDTLS_ASN1_PARSE_C)
     48          #include "mbedtls/asn1.h"
     49          #endif
     50          
     51          #if defined(MBEDTLS_PLATFORM_C)
     52          #include "mbedtls/platform.h"
     53          #else
     54          #include <stdlib.h>
     55          #include <stdio.h>
     56          #define mbedtls_printf     printf
     57          #define mbedtls_calloc    calloc
     58          #define mbedtls_free       free
     59          #endif
     60          
     61          #if !defined(MBEDTLS_DHM_ALT)
     62          
     63          /*
     64           * helper to validate the mbedtls_mpi size and import it
     65           */

   \                                 In section .text, align 2, keep-with-next
     66          static int dhm_read_bignum( mbedtls_mpi *X,
     67                                      unsigned char **p,
     68                                      const unsigned char *end )
     69          {
   \                     dhm_read_bignum: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x460C             MOV      R4,R1
     70              int ret, n;
     71          
     72              if( end - *p < 2 )
   \        0x4   0x6821             LDR      R1,[R4, #+0]
   \        0x6   0x1A51             SUBS     R1,R2,R1
   \        0x8   0x2902             CMP      R1,#+2
   \        0xA   0xDB0B             BLT.N    ??dhm_read_bignum_0
     73                  return( MBEDTLS_ERR_DHM_BAD_INPUT_DATA );
     74          
     75              n = ( (*p)[0] << 8 ) | (*p)[1];
   \        0xC   0x6821             LDR      R1,[R4, #+0]
   \        0xE   0x7809             LDRB     R1,[R1, #+0]
   \       0x10   0x6823             LDR      R3,[R4, #+0]
   \       0x12   0x785D             LDRB     R5,[R3, #+1]
   \       0x14   0xEA45 0x2501      ORR      R5,R5,R1, LSL #+8
     76              (*p) += 2;
   \       0x18   0x4619             MOV      R1,R3
   \       0x1A   0x1C89             ADDS     R1,R1,#+2
   \       0x1C   0x6021             STR      R1,[R4, #+0]
     77          
     78              if( (int)( end - *p ) < n )
   \       0x1E   0x1A52             SUBS     R2,R2,R1
   \       0x20   0x42AA             CMP      R2,R5
   \       0x22   0xDA02             BGE.N    ??dhm_read_bignum_1
     79                  return( MBEDTLS_ERR_DHM_BAD_INPUT_DATA );
   \                     ??dhm_read_bignum_0: (+1)
   \       0x24   0x....'....        LDR.W    R0,??DataTable8  ;; 0xffffcf80
   \       0x28   0xBD32             POP      {R1,R4,R5,PC}
     80          
     81              if( ( ret = mbedtls_mpi_read_binary( X, *p, n ) ) != 0 )
   \                     ??dhm_read_bignum_1: (+1)
   \       0x2A   0x462A             MOV      R2,R5
   \       0x2C   0x....'....        BL       mbedtls_mpi_read_binary
   \       0x30   0x2800             CMP      R0,#+0
   \       0x32   0xD002             BEQ.N    ??dhm_read_bignum_2
     82                  return( MBEDTLS_ERR_DHM_READ_PARAMS_FAILED + ret );
   \       0x34   0xF5A0 0x5044      SUB      R0,R0,#+12544
   \       0x38   0xBD32             POP      {R1,R4,R5,PC}
     83          
     84              (*p) += n;
   \                     ??dhm_read_bignum_2: (+1)
   \       0x3A   0x6820             LDR      R0,[R4, #+0]
   \       0x3C   0x4428             ADD      R0,R0,R5
   \       0x3E   0x6020             STR      R0,[R4, #+0]
     85          
     86              return( 0 );
   \       0x40   0x2000             MOVS     R0,#+0
   \       0x42   0xBD32             POP      {R1,R4,R5,PC}    ;; return
     87          }
     88          
     89          /*
     90           * Verify sanity of parameter with regards to P
     91           *
     92           * Parameter should be: 2 <= public_param <= P - 2
     93           *
     94           * This means that we need to return an error if
     95           *              public_param < 2 or public_param > P-2
     96           *
     97           * For more information on the attack, see:
     98           *  http://www.cl.cam.ac.uk/~rja14/Papers/psandqs.pdf
     99           *  http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2005-2643
    100           */

   \                                 In section .text, align 2, keep-with-next
    101          static int dhm_check_range( const mbedtls_mpi *param, const mbedtls_mpi *P )
    102          {
   \                     dhm_check_range: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0xB086             SUB      SP,SP,#+24
   \        0x4   0x4605             MOV      R5,R0
   \        0x6   0x460E             MOV      R6,R1
    103              mbedtls_mpi L, U;
    104              int ret = 0;
    105          
    106              mbedtls_mpi_init( &L ); mbedtls_mpi_init( &U );
   \        0x8   0xA803             ADD      R0,SP,#+12
   \        0xA   0x....'....        BL       mbedtls_mpi_init
   \        0xE   0x4668             MOV      R0,SP
   \       0x10   0x....'....        BL       mbedtls_mpi_init
    107          
    108              MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &L, 2 ) );
   \       0x14   0x2102             MOVS     R1,#+2
   \       0x16   0xA803             ADD      R0,SP,#+12
   \       0x18   0x....'....        BL       mbedtls_mpi_lset
   \       0x1C   0x0004             MOVS     R4,R0
   \       0x1E   0xD114             BNE.N    ??dhm_check_range_0
    109              MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &U, P, 2 ) );
   \       0x20   0x2202             MOVS     R2,#+2
   \       0x22   0x4631             MOV      R1,R6
   \       0x24   0x4668             MOV      R0,SP
   \       0x26   0x....'....        BL       mbedtls_mpi_sub_int
   \       0x2A   0x0004             MOVS     R4,R0
   \       0x2C   0xD10D             BNE.N    ??dhm_check_range_0
    110          
    111              if( mbedtls_mpi_cmp_mpi( param, &L ) < 0 ||
    112                  mbedtls_mpi_cmp_mpi( param, &U ) > 0 )
   \       0x2E   0xA903             ADD      R1,SP,#+12
   \       0x30   0x4628             MOV      R0,R5
   \       0x32   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \       0x36   0x2800             CMP      R0,#+0
   \       0x38   0xD405             BMI.N    ??dhm_check_range_1
   \       0x3A   0x4669             MOV      R1,SP
   \       0x3C   0x4628             MOV      R0,R5
   \       0x3E   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \       0x42   0x2801             CMP      R0,#+1
   \       0x44   0xDB01             BLT.N    ??dhm_check_range_0
    113              {
    114                  ret = MBEDTLS_ERR_DHM_BAD_INPUT_DATA;
   \                     ??dhm_check_range_1: (+1)
   \       0x46   0x....'....        LDR.W    R4,??DataTable8  ;; 0xffffcf80
    115              }
    116          
    117          cleanup:
    118              mbedtls_mpi_free( &L ); mbedtls_mpi_free( &U );
   \                     ??dhm_check_range_0: (+1)
   \       0x4A   0xA803             ADD      R0,SP,#+12
   \       0x4C   0x....'....        BL       mbedtls_mpi_free
   \       0x50   0x4668             MOV      R0,SP
   \       0x52   0x....'....        BL       mbedtls_mpi_free
    119              return( ret );
   \       0x56   0x4620             MOV      R0,R4
   \       0x58   0xB006             ADD      SP,SP,#+24
   \       0x5A   0xBD70             POP      {R4-R6,PC}       ;; return
    120          }
    121          

   \                                 In section .text, align 2, keep-with-next
    122          void mbedtls_dhm_init( mbedtls_dhm_context *ctx )
    123          {
    124              memset( ctx, 0, sizeof( mbedtls_dhm_context ) );
   \                     mbedtls_dhm_init: (+1)
   \        0x0   0x2200             MOVS     R2,#+0
   \        0x2   0x217C             MOVS     R1,#+124
   \        0x4   0x....'....        B.W      __aeabi_memset4
    125          }
    126          
    127          /*
    128           * Parse the ServerKeyExchange parameters
    129           */

   \                                 In section .text, align 2, keep-with-next
    130          int mbedtls_dhm_read_params( mbedtls_dhm_context *ctx,
    131                               unsigned char **p,
    132                               const unsigned char *end )
    133          {
   \                     mbedtls_dhm_read_params: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
   \        0x6   0x4616             MOV      R6,R2
    134              int ret;
    135          
    136              if( ( ret = dhm_read_bignum( &ctx->P,  p, end ) ) != 0 ||
    137                  ( ret = dhm_read_bignum( &ctx->G,  p, end ) ) != 0 ||
    138                  ( ret = dhm_read_bignum( &ctx->GY, p, end ) ) != 0 )
   \        0x8   0x1D20             ADDS     R0,R4,#+4
   \        0xA   0x....'....        BL       dhm_read_bignum
   \        0xE   0x2800             CMP      R0,#+0
   \       0x10   0xD11B             BNE.N    ??mbedtls_dhm_read_params_0
   \       0x12   0x4632             MOV      R2,R6
   \       0x14   0x4629             MOV      R1,R5
   \       0x16   0xF104 0x0010      ADD      R0,R4,#+16
   \       0x1A   0x....'....        BL       dhm_read_bignum
   \       0x1E   0x2800             CMP      R0,#+0
   \       0x20   0xD113             BNE.N    ??mbedtls_dhm_read_params_0
   \       0x22   0x4632             MOV      R2,R6
   \       0x24   0x4629             MOV      R1,R5
   \       0x26   0xF104 0x0034      ADD      R0,R4,#+52
   \       0x2A   0x....'....        BL       dhm_read_bignum
   \       0x2E   0x2800             CMP      R0,#+0
   \       0x30   0xD10B             BNE.N    ??mbedtls_dhm_read_params_0
    139                  return( ret );
    140          
    141              if( ( ret = dhm_check_range( &ctx->GY, &ctx->P ) ) != 0 )
   \       0x32   0x1D21             ADDS     R1,R4,#+4
   \       0x34   0xF104 0x0034      ADD      R0,R4,#+52
   \       0x38   0x....'....        BL       dhm_check_range
   \       0x3C   0x2800             CMP      R0,#+0
   \       0x3E   0xD104             BNE.N    ??mbedtls_dhm_read_params_0
    142                  return( ret );
    143          
    144              ctx->len = mbedtls_mpi_size( &ctx->P );
   \       0x40   0x1D20             ADDS     R0,R4,#+4
   \       0x42   0x....'....        BL       mbedtls_mpi_size
   \       0x46   0x6020             STR      R0,[R4, #+0]
    145          
    146              return( 0 );
   \       0x48   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_dhm_read_params_0: (+1)
   \       0x4A   0xBD70             POP      {R4-R6,PC}       ;; return
    147          }
    148          
    149          /*
    150           * Setup and write the ServerKeyExchange parameters
    151           */

   \                                 In section .text, align 2, keep-with-next
    152          int mbedtls_dhm_make_params( mbedtls_dhm_context *ctx, int x_size,
    153                               unsigned char *output, size_t *olen,
    154                               int (*f_rng)(void *, unsigned char *, size_t),
    155                               void *p_rng )
    156          {
   \                     mbedtls_dhm_make_params: (+1)
   \        0x0   0xE92D 0x47FC      PUSH     {R2-R10,LR}
   \        0x4   0x4682             MOV      R10,R0
   \        0x6   0x460C             MOV      R4,R1
   \        0x8   0x4615             MOV      R5,R2
   \        0xA   0x461E             MOV      R6,R3
   \        0xC   0x9F0A             LDR      R7,[SP, #+40]
   \        0xE   0xF8DD 0x802C      LDR      R8,[SP, #+44]
    157              int ret, count = 0;
   \       0x12   0xF04F 0x0900      MOV      R9,#+0
    158              size_t n1, n2, n3;
    159              unsigned char *p;
    160          
    161              if( mbedtls_mpi_cmp_int( &ctx->P, 0 ) == 0 )
   \       0x16   0x4649             MOV      R1,R9
   \       0x18   0xF10A 0x0004      ADD      R0,R10,#+4
   \       0x1C   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x20   0x2800             CMP      R0,#+0
   \       0x22   0xD102             BNE.N    ??mbedtls_dhm_make_params_0
    162                  return( MBEDTLS_ERR_DHM_BAD_INPUT_DATA );
   \       0x24   0x....'....        LDR.W    R0,??DataTable8  ;; 0xffffcf80
   \       0x28   0xE066             B.N      ??mbedtls_dhm_make_params_1
    163          
    164              /*
    165               * Generate X as large as possible ( < P )
    166               */
    167              do
    168              {
    169                  MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->X, x_size, f_rng, p_rng ) );
   \                     ??mbedtls_dhm_make_params_0: (+1)
   \       0x2A   0x4643             MOV      R3,R8
   \       0x2C   0x463A             MOV      R2,R7
   \       0x2E   0x4621             MOV      R1,R4
   \       0x30   0xF10A 0x001C      ADD      R0,R10,#+28
   \       0x34   0x....'....        BL       mbedtls_mpi_fill_random
   \       0x38   0x2800             CMP      R0,#+0
   \       0x3A   0xD157             BNE.N    ??mbedtls_dhm_make_params_2
    170          
    171                  while( mbedtls_mpi_cmp_mpi( &ctx->X, &ctx->P ) >= 0 )
   \                     ??mbedtls_dhm_make_params_3: (+1)
   \       0x3C   0xF10A 0x0104      ADD      R1,R10,#+4
   \       0x40   0xF10A 0x001C      ADD      R0,R10,#+28
   \       0x44   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \       0x48   0x2800             CMP      R0,#+0
   \       0x4A   0xD457             BMI.N    ??mbedtls_dhm_make_params_4
    172                      MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &ctx->X, 1 ) );
   \       0x4C   0x2101             MOVS     R1,#+1
   \       0x4E   0xF10A 0x001C      ADD      R0,R10,#+28
   \       0x52   0x....'....        BL       mbedtls_mpi_shift_r
   \       0x56   0x2800             CMP      R0,#+0
   \       0x58   0xD148             BNE.N    ??mbedtls_dhm_make_params_2
   \       0x5A   0xE7EF             B.N      ??mbedtls_dhm_make_params_3
    173          
    174                  if( count++ > 10 )
    175                      return( MBEDTLS_ERR_DHM_MAKE_PARAMS_FAILED );
   \                     ??mbedtls_dhm_make_params_5: (+1)
   \       0x5C   0x....'....        LDR.W    R0,??DataTable8_1  ;; 0xffffce80
   \       0x60   0xE04A             B.N      ??mbedtls_dhm_make_params_1
    176              }
    177              while( dhm_check_range( &ctx->X, &ctx->P ) != 0 );
    178          
    179              /*
    180               * Calculate GX = G^X mod P
    181               */
    182              MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &ctx->GX, &ctx->G, &ctx->X,
    183                                    &ctx->P , &ctx->RP ) );
    184          
    185              if( ( ret = dhm_check_range( &ctx->GX, &ctx->P ) ) != 0 )
    186                  return( ret );
    187          
    188              /*
    189               * export P, G, GX
    190               */
    191          #define DHM_MPI_EXPORT( X, n )                                          \
    192              do {                                                                \
    193                  MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( ( X ),               \
    194                                                             p + 2,               \
    195                                                             ( n ) ) );           \
    196                  *p++ = (unsigned char)( ( n ) >> 8 );                           \
    197                  *p++ = (unsigned char)( ( n )      );                           \
    198                  p += ( n );                                                     \
    199              } while( 0 )
    200          
    201              n1 = mbedtls_mpi_size( &ctx->P  );
   \                     ??mbedtls_dhm_make_params_6: (+1)
   \       0x62   0xF10A 0x0004      ADD      R0,R10,#+4
   \       0x66   0x....'....        BL       mbedtls_mpi_size
   \       0x6A   0x4604             MOV      R4,R0
    202              n2 = mbedtls_mpi_size( &ctx->G  );
   \       0x6C   0xF10A 0x0010      ADD      R0,R10,#+16
   \       0x70   0x....'....        BL       mbedtls_mpi_size
   \       0x74   0x4607             MOV      R7,R0
    203              n3 = mbedtls_mpi_size( &ctx->GX );
   \       0x76   0xF10A 0x0028      ADD      R0,R10,#+40
   \       0x7A   0x....'....        BL       mbedtls_mpi_size
   \       0x7E   0x4680             MOV      R8,R0
    204          
    205              p = output;
    206              DHM_MPI_EXPORT( &ctx->P , n1 );
   \       0x80   0x4622             MOV      R2,R4
   \       0x82   0x1CA9             ADDS     R1,R5,#+2
   \       0x84   0xF10A 0x0004      ADD      R0,R10,#+4
   \       0x88   0x....'....        BL       mbedtls_mpi_write_binary
   \       0x8C   0x2800             CMP      R0,#+0
   \       0x8E   0xD12D             BNE.N    ??mbedtls_dhm_make_params_2
   \       0x90   0x4620             MOV      R0,R4
   \       0x92   0x0A00             LSRS     R0,R0,#+8
   \       0x94   0x7028             STRB     R0,[R5, #+0]
   \       0x96   0x1C68             ADDS     R0,R5,#+1
   \       0x98   0xF800 0x4B01      STRB     R4,[R0], #+1
   \       0x9C   0xEB00 0x0904      ADD      R9,R0,R4
    207              DHM_MPI_EXPORT( &ctx->G , n2 );
   \       0xA0   0x463A             MOV      R2,R7
   \       0xA2   0xF109 0x0102      ADD      R1,R9,#+2
   \       0xA6   0xF10A 0x0010      ADD      R0,R10,#+16
   \       0xAA   0x....'....        BL       mbedtls_mpi_write_binary
   \       0xAE   0x2800             CMP      R0,#+0
   \       0xB0   0xD11C             BNE.N    ??mbedtls_dhm_make_params_2
   \       0xB2   0x4638             MOV      R0,R7
   \       0xB4   0x0A00             LSRS     R0,R0,#+8
   \       0xB6   0xF889 0x0000      STRB     R0,[R9, #+0]
   \       0xBA   0xF889 0x7001      STRB     R7,[R9, #+1]
   \       0xBE   0xEB09 0x0007      ADD      R0,R9,R7
   \       0xC2   0x1C87             ADDS     R7,R0,#+2
    208              DHM_MPI_EXPORT( &ctx->GX, n3 );
   \       0xC4   0x4642             MOV      R2,R8
   \       0xC6   0x1CB9             ADDS     R1,R7,#+2
   \       0xC8   0xF10A 0x0028      ADD      R0,R10,#+40
   \       0xCC   0x....'....        BL       mbedtls_mpi_write_binary
   \       0xD0   0x2800             CMP      R0,#+0
   \       0xD2   0xD10B             BNE.N    ??mbedtls_dhm_make_params_2
   \       0xD4   0x4641             MOV      R1,R8
   \       0xD6   0x0A09             LSRS     R1,R1,#+8
   \       0xD8   0x7039             STRB     R1,[R7, #+0]
   \       0xDA   0xF887 0x8001      STRB     R8,[R7, #+1]
    209          
    210              *olen = p - output;
   \       0xDE   0xEB07 0x0108      ADD      R1,R7,R8
   \       0xE2   0x1C89             ADDS     R1,R1,#+2
   \       0xE4   0x1B4D             SUBS     R5,R1,R5
   \       0xE6   0x6035             STR      R5,[R6, #+0]
    211          
    212              ctx->len = n1;
   \       0xE8   0xF8CA 0x4000      STR      R4,[R10, #+0]
    213          
    214          cleanup:
    215          
    216              if( ret != 0 )
   \                     ??mbedtls_dhm_make_params_2: (+1)
   \       0xEC   0x2800             CMP      R0,#+0
   \       0xEE   0xD002             BEQ.N    ??mbedtls_dhm_make_params_7
    217                  return( MBEDTLS_ERR_DHM_MAKE_PARAMS_FAILED + ret );
   \       0xF0   0xF5A0 0x5046      SUB      R0,R0,#+12672
   \       0xF4   0xE000             B.N      ??mbedtls_dhm_make_params_1
    218          
    219              return( 0 );
   \                     ??mbedtls_dhm_make_params_7: (+1)
   \       0xF6   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_dhm_make_params_1: (+1)
   \       0xF8   0xE8BD 0x87F6      POP      {R1,R2,R4-R10,PC}  ;; return
   \                     ??mbedtls_dhm_make_params_4: (+1)
   \       0xFC   0x4648             MOV      R0,R9
   \       0xFE   0xF100 0x0901      ADD      R9,R0,#+1
   \      0x102   0x280B             CMP      R0,#+11
   \      0x104   0xDAAA             BGE.N    ??mbedtls_dhm_make_params_5
   \      0x106   0xF10A 0x0104      ADD      R1,R10,#+4
   \      0x10A   0xF10A 0x001C      ADD      R0,R10,#+28
   \      0x10E   0x....'....        BL       dhm_check_range
   \      0x112   0x2800             CMP      R0,#+0
   \      0x114   0xD189             BNE.N    ??mbedtls_dhm_make_params_0
   \      0x116   0xF10A 0x004C      ADD      R0,R10,#+76
   \      0x11A   0x9000             STR      R0,[SP, #+0]
   \      0x11C   0xF10A 0x0304      ADD      R3,R10,#+4
   \      0x120   0xF10A 0x021C      ADD      R2,R10,#+28
   \      0x124   0xF10A 0x0110      ADD      R1,R10,#+16
   \      0x128   0xF10A 0x0028      ADD      R0,R10,#+40
   \      0x12C   0x....'....        BL       mbedtls_mpi_exp_mod
   \      0x130   0x2800             CMP      R0,#+0
   \      0x132   0xD1DB             BNE.N    ??mbedtls_dhm_make_params_2
   \      0x134   0xF10A 0x0104      ADD      R1,R10,#+4
   \      0x138   0xF10A 0x0028      ADD      R0,R10,#+40
   \      0x13C   0x....'....        BL       dhm_check_range
   \      0x140   0x2800             CMP      R0,#+0
   \      0x142   0xD08E             BEQ.N    ??mbedtls_dhm_make_params_6
   \      0x144   0xE7D8             B.N      ??mbedtls_dhm_make_params_1
    220          }
    221          
    222          /*
    223           * Set prime modulus and generator
    224           */

   \                                 In section .text, align 2, keep-with-next
    225          int mbedtls_dhm_set_group( mbedtls_dhm_context *ctx,
    226                                     const mbedtls_mpi *P,
    227                                     const mbedtls_mpi *G )
    228          {
   \                     mbedtls_dhm_set_group: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4605             MOV      R5,R0
   \        0x4   0x4614             MOV      R4,R2
    229              int ret;
    230          
    231              if( ctx == NULL || P == NULL || G == NULL )
   \        0x6   0x2D00             CMP      R5,#+0
   \        0x8   0xD003             BEQ.N    ??mbedtls_dhm_set_group_0
   \        0xA   0x2900             CMP      R1,#+0
   \        0xC   0xD001             BEQ.N    ??mbedtls_dhm_set_group_0
   \        0xE   0x2C00             CMP      R4,#+0
   \       0x10   0xD102             BNE.N    ??mbedtls_dhm_set_group_1
    232                  return( MBEDTLS_ERR_DHM_BAD_INPUT_DATA );
   \                     ??mbedtls_dhm_set_group_0: (+1)
   \       0x12   0x....'....        LDR.W    R0,??DataTable8  ;; 0xffffcf80
   \       0x16   0xBD32             POP      {R1,R4,R5,PC}
    233          
    234              if( ( ret = mbedtls_mpi_copy( &ctx->P, P ) ) != 0 ||
    235                  ( ret = mbedtls_mpi_copy( &ctx->G, G ) ) != 0 )
   \                     ??mbedtls_dhm_set_group_1: (+1)
   \       0x18   0x1D28             ADDS     R0,R5,#+4
   \       0x1A   0x....'....        BL       mbedtls_mpi_copy
   \       0x1E   0x2800             CMP      R0,#+0
   \       0x20   0xD106             BNE.N    ??mbedtls_dhm_set_group_2
   \       0x22   0x4621             MOV      R1,R4
   \       0x24   0xF105 0x0010      ADD      R0,R5,#+16
   \       0x28   0x....'....        BL       mbedtls_mpi_copy
   \       0x2C   0x2800             CMP      R0,#+0
   \       0x2E   0xD002             BEQ.N    ??mbedtls_dhm_set_group_3
    236              {
    237                  return( MBEDTLS_ERR_DHM_SET_GROUP_FAILED + ret );
   \                     ??mbedtls_dhm_set_group_2: (+1)
   \       0x30   0xF5A0 0x5056      SUB      R0,R0,#+13696
   \       0x34   0xBD32             POP      {R1,R4,R5,PC}
    238              }
    239          
    240              ctx->len = mbedtls_mpi_size( &ctx->P );
   \                     ??mbedtls_dhm_set_group_3: (+1)
   \       0x36   0x1D28             ADDS     R0,R5,#+4
   \       0x38   0x....'....        BL       mbedtls_mpi_size
   \       0x3C   0x6028             STR      R0,[R5, #+0]
    241              return( 0 );
   \       0x3E   0x2000             MOVS     R0,#+0
   \       0x40   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    242          }
    243          
    244          /*
    245           * Import the peer's public value G^Y
    246           */

   \                                 In section .text, align 2, keep-with-next
    247          int mbedtls_dhm_read_public( mbedtls_dhm_context *ctx,
    248                               const unsigned char *input, size_t ilen )
    249          {
   \                     mbedtls_dhm_read_public: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    250              int ret;
    251          
    252              if( ctx == NULL || ilen < 1 || ilen > ctx->len )
   \        0x2   0x2800             CMP      R0,#+0
   \        0x4   0xD004             BEQ.N    ??mbedtls_dhm_read_public_0
   \        0x6   0x2A00             CMP      R2,#+0
   \        0x8   0xD002             BEQ.N    ??mbedtls_dhm_read_public_0
   \        0xA   0x6803             LDR      R3,[R0, #+0]
   \        0xC   0x4293             CMP      R3,R2
   \        0xE   0xD202             BCS.N    ??mbedtls_dhm_read_public_1
    253                  return( MBEDTLS_ERR_DHM_BAD_INPUT_DATA );
   \                     ??mbedtls_dhm_read_public_0: (+1)
   \       0x10   0x....'....        LDR.W    R0,??DataTable8  ;; 0xffffcf80
   \       0x14   0xBD02             POP      {R1,PC}
    254          
    255              if( ( ret = mbedtls_mpi_read_binary( &ctx->GY, input, ilen ) ) != 0 )
   \                     ??mbedtls_dhm_read_public_1: (+1)
   \       0x16   0x3034             ADDS     R0,R0,#+52
   \       0x18   0x....'....        BL       mbedtls_mpi_read_binary
   \       0x1C   0x2800             CMP      R0,#+0
   \       0x1E   0xD002             BEQ.N    ??mbedtls_dhm_read_public_2
    256                  return( MBEDTLS_ERR_DHM_READ_PUBLIC_FAILED + ret );
   \       0x20   0xF5A0 0x5048      SUB      R0,R0,#+12800
   \       0x24   0xBD02             POP      {R1,PC}
    257          
    258              return( 0 );
   \                     ??mbedtls_dhm_read_public_2: (+1)
   \       0x26   0x2000             MOVS     R0,#+0
   \       0x28   0xBD02             POP      {R1,PC}          ;; return
    259          }
    260          
    261          /*
    262           * Create own private value X and export G^X
    263           */

   \                                 In section .text, align 2, keep-with-next
    264          int mbedtls_dhm_make_public( mbedtls_dhm_context *ctx, int x_size,
    265                               unsigned char *output, size_t olen,
    266                               int (*f_rng)(void *, unsigned char *, size_t),
    267                               void *p_rng )
    268          {
   \                     mbedtls_dhm_make_public: (+1)
   \        0x0   0xE92D 0x47FC      PUSH     {R2-R10,LR}
   \        0x4   0x4604             MOV      R4,R0
   \        0x6   0x460E             MOV      R6,R1
   \        0x8   0x4617             MOV      R7,R2
   \        0xA   0x461D             MOV      R5,R3
    269              int ret, count = 0;
   \        0xC   0xF04F 0x0A00      MOV      R10,#+0
    270          
    271              if( ctx == NULL || olen < 1 || olen > ctx->len )
   \       0x10   0x2C00             CMP      R4,#+0
   \       0x12   0xD00E             BEQ.N    ??mbedtls_dhm_make_public_0
   \       0x14   0x2D00             CMP      R5,#+0
   \       0x16   0xD00C             BEQ.N    ??mbedtls_dhm_make_public_0
   \       0x18   0x6820             LDR      R0,[R4, #+0]
   \       0x1A   0x42A8             CMP      R0,R5
   \       0x1C   0xD309             BCC.N    ??mbedtls_dhm_make_public_0
   \       0x1E   0xF8DD 0x8028      LDR      R8,[SP, #+40]
   \       0x22   0xF8DD 0x902C      LDR      R9,[SP, #+44]
    272                  return( MBEDTLS_ERR_DHM_BAD_INPUT_DATA );
    273          
    274              if( mbedtls_mpi_cmp_int( &ctx->P, 0 ) == 0 )
   \       0x26   0x4651             MOV      R1,R10
   \       0x28   0x1D20             ADDS     R0,R4,#+4
   \       0x2A   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x2E   0x2800             CMP      R0,#+0
   \       0x30   0xD102             BNE.N    ??mbedtls_dhm_make_public_1
    275                  return( MBEDTLS_ERR_DHM_BAD_INPUT_DATA );
   \                     ??mbedtls_dhm_make_public_0: (+1)
   \       0x32   0x....'....        LDR.W    R0,??DataTable8  ;; 0xffffcf80
   \       0x36   0xE026             B.N      ??mbedtls_dhm_make_public_2
    276          
    277              /*
    278               * generate X and calculate GX = G^X mod P
    279               */
    280              do
    281              {
    282                  MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->X, x_size, f_rng, p_rng ) );
   \                     ??mbedtls_dhm_make_public_1: (+1)
   \       0x38   0x464B             MOV      R3,R9
   \       0x3A   0x4642             MOV      R2,R8
   \       0x3C   0x4631             MOV      R1,R6
   \       0x3E   0xF104 0x001C      ADD      R0,R4,#+28
   \       0x42   0x....'....        BL       mbedtls_mpi_fill_random
   \       0x46   0x2800             CMP      R0,#+0
   \       0x48   0xD117             BNE.N    ??mbedtls_dhm_make_public_3
    283          
    284                  while( mbedtls_mpi_cmp_mpi( &ctx->X, &ctx->P ) >= 0 )
   \                     ??mbedtls_dhm_make_public_4: (+1)
   \       0x4A   0x1D21             ADDS     R1,R4,#+4
   \       0x4C   0xF104 0x001C      ADD      R0,R4,#+28
   \       0x50   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \       0x54   0x2800             CMP      R0,#+0
   \       0x56   0xD418             BMI.N    ??mbedtls_dhm_make_public_5
    285                      MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &ctx->X, 1 ) );
   \       0x58   0x2101             MOVS     R1,#+1
   \       0x5A   0xF104 0x001C      ADD      R0,R4,#+28
   \       0x5E   0x....'....        BL       mbedtls_mpi_shift_r
   \       0x62   0x2800             CMP      R0,#+0
   \       0x64   0xD109             BNE.N    ??mbedtls_dhm_make_public_3
   \       0x66   0xE7F0             B.N      ??mbedtls_dhm_make_public_4
    286          
    287                  if( count++ > 10 )
    288                      return( MBEDTLS_ERR_DHM_MAKE_PUBLIC_FAILED );
   \                     ??mbedtls_dhm_make_public_6: (+1)
   \       0x68   0x....'....        LDR.W    R0,??DataTable8_2  ;; 0xffffcd80
   \       0x6C   0xE00B             B.N      ??mbedtls_dhm_make_public_2
    289              }
    290              while( dhm_check_range( &ctx->X, &ctx->P ) != 0 );
    291          
    292              MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &ctx->GX, &ctx->G, &ctx->X,
    293                                    &ctx->P , &ctx->RP ) );
    294          
    295              if( ( ret = dhm_check_range( &ctx->GX, &ctx->P ) ) != 0 )
    296                  return( ret );
    297          
    298              MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &ctx->GX, output, olen ) );
   \                     ??mbedtls_dhm_make_public_7: (+1)
   \       0x6E   0x462A             MOV      R2,R5
   \       0x70   0x4639             MOV      R1,R7
   \       0x72   0xF104 0x0028      ADD      R0,R4,#+40
   \       0x76   0x....'....        BL       mbedtls_mpi_write_binary
    299          
    300          cleanup:
    301          
    302              if( ret != 0 )
   \                     ??mbedtls_dhm_make_public_3: (+1)
   \       0x7A   0x2800             CMP      R0,#+0
   \       0x7C   0xD002             BEQ.N    ??mbedtls_dhm_make_public_8
    303                  return( MBEDTLS_ERR_DHM_MAKE_PUBLIC_FAILED + ret );
   \       0x7E   0xF5A0 0x504A      SUB      R0,R0,#+12928
   \       0x82   0xE000             B.N      ??mbedtls_dhm_make_public_2
    304          
    305              return( 0 );
   \                     ??mbedtls_dhm_make_public_8: (+1)
   \       0x84   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_dhm_make_public_2: (+1)
   \       0x86   0xE8BD 0x87F6      POP      {R1,R2,R4-R10,PC}  ;; return
   \                     ??mbedtls_dhm_make_public_5: (+1)
   \       0x8A   0x4650             MOV      R0,R10
   \       0x8C   0xF100 0x0A01      ADD      R10,R0,#+1
   \       0x90   0x280B             CMP      R0,#+11
   \       0x92   0xDAE9             BGE.N    ??mbedtls_dhm_make_public_6
   \       0x94   0x1D21             ADDS     R1,R4,#+4
   \       0x96   0xF104 0x001C      ADD      R0,R4,#+28
   \       0x9A   0x....'....        BL       dhm_check_range
   \       0x9E   0x2800             CMP      R0,#+0
   \       0xA0   0xD1CA             BNE.N    ??mbedtls_dhm_make_public_1
   \       0xA2   0xF104 0x004C      ADD      R0,R4,#+76
   \       0xA6   0x9000             STR      R0,[SP, #+0]
   \       0xA8   0x1D23             ADDS     R3,R4,#+4
   \       0xAA   0xF104 0x021C      ADD      R2,R4,#+28
   \       0xAE   0xF104 0x0110      ADD      R1,R4,#+16
   \       0xB2   0xF104 0x0028      ADD      R0,R4,#+40
   \       0xB6   0x....'....        BL       mbedtls_mpi_exp_mod
   \       0xBA   0x2800             CMP      R0,#+0
   \       0xBC   0xD1DD             BNE.N    ??mbedtls_dhm_make_public_3
   \       0xBE   0x1D21             ADDS     R1,R4,#+4
   \       0xC0   0xF104 0x0028      ADD      R0,R4,#+40
   \       0xC4   0x....'....        BL       dhm_check_range
   \       0xC8   0x2800             CMP      R0,#+0
   \       0xCA   0xD0D0             BEQ.N    ??mbedtls_dhm_make_public_7
   \       0xCC   0xE7DB             B.N      ??mbedtls_dhm_make_public_2
    306          }
    307          
    308          /*
    309           * Use the blinding method and optimisation suggested in section 10 of:
    310           *  KOCHER, Paul C. Timing attacks on implementations of Diffie-Hellman, RSA,
    311           *  DSS, and other systems. In : Advances in Cryptology-CRYPTO'96. Springer
    312           *  Berlin Heidelberg, 1996. p. 104-113.
    313           */

   \                                 In section .text, align 2, keep-with-next
    314          static int dhm_update_blinding( mbedtls_dhm_context *ctx,
    315                              int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
    316          {
   \                     dhm_update_blinding: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
   \        0x6   0x4616             MOV      R6,R2
    317              int ret, count;
    318          
    319              /*
    320               * Don't use any blinding the first time a particular X is used,
    321               * but remember it to use blinding next time.
    322               */
    323              if( mbedtls_mpi_cmp_mpi( &ctx->X, &ctx->pX ) != 0 )
   \        0x8   0xF104 0x0170      ADD      R1,R4,#+112
   \        0xC   0xF104 0x001C      ADD      R0,R4,#+28
   \       0x10   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \       0x14   0x2800             CMP      R0,#+0
   \       0x16   0xD016             BEQ.N    ??dhm_update_blinding_0
    324              {
    325                  MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &ctx->pX, &ctx->X ) );
   \       0x18   0xF104 0x011C      ADD      R1,R4,#+28
   \       0x1C   0xF104 0x0070      ADD      R0,R4,#+112
   \       0x20   0x....'....        BL       mbedtls_mpi_copy
   \       0x24   0x2800             CMP      R0,#+0
   \       0x26   0xD17C             BNE.N    ??dhm_update_blinding_1
    326                  MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &ctx->Vi, 1 ) );
   \       0x28   0x2101             MOVS     R1,#+1
   \       0x2A   0xF104 0x0058      ADD      R0,R4,#+88
   \       0x2E   0x....'....        BL       mbedtls_mpi_lset
   \       0x32   0x2800             CMP      R0,#+0
   \       0x34   0xD175             BNE.N    ??dhm_update_blinding_1
    327                  MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &ctx->Vf, 1 ) );
   \       0x36   0x2101             MOVS     R1,#+1
   \       0x38   0xF104 0x0064      ADD      R0,R4,#+100
   \       0x3C   0x....'....        BL       mbedtls_mpi_lset
   \       0x40   0x2800             CMP      R0,#+0
   \       0x42   0xD16E             BNE.N    ??dhm_update_blinding_1
   \       0x44   0xE02C             B.N      ??dhm_update_blinding_2
    328          
    329                  return( 0 );
    330              }
    331          
    332              /*
    333               * Ok, we need blinding. Can we re-use existing values?
    334               * If yes, just update them by squaring them.
    335               */
    336              if( mbedtls_mpi_cmp_int( &ctx->Vi, 1 ) != 0 )
   \                     ??dhm_update_blinding_0: (+1)
   \       0x46   0x2101             MOVS     R1,#+1
   \       0x48   0xF104 0x0058      ADD      R0,R4,#+88
   \       0x4C   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0x50   0x2800             CMP      R0,#+0
   \       0x52   0xD027             BEQ.N    ??dhm_update_blinding_3
    337              {
    338                  MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vi, &ctx->Vi, &ctx->Vi ) );
   \       0x54   0xF104 0x0258      ADD      R2,R4,#+88
   \       0x58   0xF104 0x0158      ADD      R1,R4,#+88
   \       0x5C   0xF104 0x0058      ADD      R0,R4,#+88
   \       0x60   0x....'....        BL       mbedtls_mpi_mul_mpi
   \       0x64   0x2800             CMP      R0,#+0
   \       0x66   0xD15C             BNE.N    ??dhm_update_blinding_1
    339                  MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vi, &ctx->Vi, &ctx->P ) );
   \       0x68   0x1D22             ADDS     R2,R4,#+4
   \       0x6A   0xF104 0x0158      ADD      R1,R4,#+88
   \       0x6E   0xF104 0x0058      ADD      R0,R4,#+88
   \       0x72   0x....'....        BL       mbedtls_mpi_mod_mpi
   \       0x76   0x2800             CMP      R0,#+0
   \       0x78   0xD153             BNE.N    ??dhm_update_blinding_1
    340          
    341                  MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vf, &ctx->Vf, &ctx->Vf ) );
   \       0x7A   0xF104 0x0264      ADD      R2,R4,#+100
   \       0x7E   0xF104 0x0164      ADD      R1,R4,#+100
   \       0x82   0xF104 0x0064      ADD      R0,R4,#+100
   \       0x86   0x....'....        BL       mbedtls_mpi_mul_mpi
   \       0x8A   0x2800             CMP      R0,#+0
   \       0x8C   0xD149             BNE.N    ??dhm_update_blinding_1
    342                  MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vf, &ctx->Vf, &ctx->P ) );
   \       0x8E   0x1D22             ADDS     R2,R4,#+4
   \       0x90   0xF104 0x0164      ADD      R1,R4,#+100
   \       0x94   0xF104 0x0064      ADD      R0,R4,#+100
   \       0x98   0x....'....        BL       mbedtls_mpi_mod_mpi
   \       0x9C   0x2800             CMP      R0,#+0
   \       0x9E   0xD140             BNE.N    ??dhm_update_blinding_1
    343          
    344                  return( 0 );
   \                     ??dhm_update_blinding_2: (+1)
   \       0xA0   0x2000             MOVS     R0,#+0
   \       0xA2   0xBDF2             POP      {R1,R4-R7,PC}
    345              }
    346          
    347              /*
    348               * We need to generate blinding values from scratch
    349               */
    350          
    351              /* Vi = random( 2, P-1 ) */
    352              count = 0;
   \                     ??dhm_update_blinding_3: (+1)
   \       0xA4   0x2700             MOVS     R7,#+0
    353              do
    354              {
    355                  MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vi, mbedtls_mpi_size( &ctx->P ), f_rng, p_rng ) );
   \                     ??dhm_update_blinding_4: (+1)
   \       0xA6   0x1D20             ADDS     R0,R4,#+4
   \       0xA8   0x....'....        BL       mbedtls_mpi_size
   \       0xAC   0x4633             MOV      R3,R6
   \       0xAE   0x462A             MOV      R2,R5
   \       0xB0   0x4601             MOV      R1,R0
   \       0xB2   0xF104 0x0058      ADD      R0,R4,#+88
   \       0xB6   0x....'....        BL       mbedtls_mpi_fill_random
   \       0xBA   0x2800             CMP      R0,#+0
   \       0xBC   0xD131             BNE.N    ??dhm_update_blinding_1
    356          
    357                  while( mbedtls_mpi_cmp_mpi( &ctx->Vi, &ctx->P ) >= 0 )
   \                     ??dhm_update_blinding_5: (+1)
   \       0xBE   0x1D21             ADDS     R1,R4,#+4
   \       0xC0   0xF104 0x0058      ADD      R0,R4,#+88
   \       0xC4   0x....'....        BL       mbedtls_mpi_cmp_mpi
   \       0xC8   0x2800             CMP      R0,#+0
   \       0xCA   0xD40A             BMI.N    ??dhm_update_blinding_6
    358                      MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &ctx->Vi, 1 ) );
   \       0xCC   0x2101             MOVS     R1,#+1
   \       0xCE   0xF104 0x0058      ADD      R0,R4,#+88
   \       0xD2   0x....'....        BL       mbedtls_mpi_shift_r
   \       0xD6   0x2800             CMP      R0,#+0
   \       0xD8   0xD123             BNE.N    ??dhm_update_blinding_1
   \       0xDA   0xE7F0             B.N      ??dhm_update_blinding_5
    359          
    360                  if( count++ > 10 )
    361                      return( MBEDTLS_ERR_MPI_NOT_ACCEPTABLE );
   \                     ??dhm_update_blinding_7: (+1)
   \       0xDC   0xF06F 0x000D      MVN      R0,#+13
   \       0xE0   0xBDF2             POP      {R1,R4-R7,PC}
   \                     ??dhm_update_blinding_6: (+1)
   \       0xE2   0x4638             MOV      R0,R7
   \       0xE4   0x1C47             ADDS     R7,R0,#+1
   \       0xE6   0x280B             CMP      R0,#+11
   \       0xE8   0xDAF8             BGE.N    ??dhm_update_blinding_7
    362              }
    363              while( mbedtls_mpi_cmp_int( &ctx->Vi, 1 ) <= 0 );
   \       0xEA   0x2101             MOVS     R1,#+1
   \       0xEC   0xF104 0x0058      ADD      R0,R4,#+88
   \       0xF0   0x....'....        BL       mbedtls_mpi_cmp_int
   \       0xF4   0x2801             CMP      R0,#+1
   \       0xF6   0xDBD6             BLT.N    ??dhm_update_blinding_4
    364          
    365              /* Vf = Vi^-X mod P */
    366              MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &ctx->Vf, &ctx->Vi, &ctx->P ) );
   \       0xF8   0x1D22             ADDS     R2,R4,#+4
   \       0xFA   0xF104 0x0158      ADD      R1,R4,#+88
   \       0xFE   0xF104 0x0064      ADD      R0,R4,#+100
   \      0x102   0x....'....        BL       mbedtls_mpi_inv_mod
   \      0x106   0x2800             CMP      R0,#+0
   \      0x108   0xD10B             BNE.N    ??dhm_update_blinding_1
    367              MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &ctx->Vf, &ctx->Vf, &ctx->X, &ctx->P, &ctx->RP ) );
   \      0x10A   0xF104 0x004C      ADD      R0,R4,#+76
   \      0x10E   0x9000             STR      R0,[SP, #+0]
   \      0x110   0x1D23             ADDS     R3,R4,#+4
   \      0x112   0xF104 0x021C      ADD      R2,R4,#+28
   \      0x116   0xF104 0x0164      ADD      R1,R4,#+100
   \      0x11A   0xF104 0x0064      ADD      R0,R4,#+100
   \      0x11E   0x....'....        BL       mbedtls_mpi_exp_mod
    368          
    369          cleanup:
    370              return( ret );
   \                     ??dhm_update_blinding_1: (+1)
   \      0x122   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    371          }
    372          
    373          /*
    374           * Derive and export the shared secret (G^Y)^X mod P
    375           */

   \                                 In section .text, align 2, keep-with-next
    376          int mbedtls_dhm_calc_secret( mbedtls_dhm_context *ctx,
    377                               unsigned char *output, size_t output_size, size_t *olen,
    378                               int (*f_rng)(void *, unsigned char *, size_t),
    379                               void *p_rng )
    380          {
   \                     mbedtls_dhm_calc_secret: (+1)
   \        0x0   0xE92D 0x41FF      PUSH     {R0-R8,LR}
   \        0x4   0x4605             MOV      R5,R0
   \        0x6   0x460E             MOV      R6,R1
   \        0x8   0x461F             MOV      R7,R3
    381              int ret;
    382              mbedtls_mpi GYb;
    383          
    384              if( ctx == NULL || output_size < ctx->len )
   \        0xA   0x2D00             CMP      R5,#+0
   \        0xC   0xD002             BEQ.N    ??mbedtls_dhm_calc_secret_0
   \        0xE   0x6828             LDR      R0,[R5, #+0]
   \       0x10   0x4282             CMP      R2,R0
   \       0x12   0xD201             BCS.N    ??mbedtls_dhm_calc_secret_1
    385                  return( MBEDTLS_ERR_DHM_BAD_INPUT_DATA );
   \                     ??mbedtls_dhm_calc_secret_0: (+1)
   \       0x14   0x....             LDR.N    R0,??DataTable8  ;; 0xffffcf80
   \       0x16   0xE066             B.N      ??mbedtls_dhm_calc_secret_2
    386          
    387              if( ( ret = dhm_check_range( &ctx->GY, &ctx->P ) ) != 0 )
   \                     ??mbedtls_dhm_calc_secret_1: (+1)
   \       0x18   0x1D29             ADDS     R1,R5,#+4
   \       0x1A   0xF105 0x0034      ADD      R0,R5,#+52
   \       0x1E   0x....'....        BL       dhm_check_range
   \       0x22   0x2800             CMP      R0,#+0
   \       0x24   0xD15F             BNE.N    ??mbedtls_dhm_calc_secret_2
    388                  return( ret );
   \       0x26   0xF8DD 0x8028      LDR      R8,[SP, #+40]
    389          
    390              mbedtls_mpi_init( &GYb );
   \       0x2A   0xA801             ADD      R0,SP,#+4
   \       0x2C   0x....'....        BL       mbedtls_mpi_init
    391          
    392              /* Blind peer's value */
    393              if( f_rng != NULL )
   \       0x30   0x4640             MOV      R0,R8
   \       0x32   0x2800             CMP      R0,#+0
   \       0x34   0xD017             BEQ.N    ??mbedtls_dhm_calc_secret_3
   \       0x36   0x9A0B             LDR      R2,[SP, #+44]
    394              {
    395                  MBEDTLS_MPI_CHK( dhm_update_blinding( ctx, f_rng, p_rng ) );
   \       0x38   0x4641             MOV      R1,R8
   \       0x3A   0x4628             MOV      R0,R5
   \       0x3C   0x....'....        BL       dhm_update_blinding
   \       0x40   0x0004             MOVS     R4,R0
   \       0x42   0xD146             BNE.N    ??mbedtls_dhm_calc_secret_4
    396                  MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &GYb, &ctx->GY, &ctx->Vi ) );
   \       0x44   0xF105 0x0258      ADD      R2,R5,#+88
   \       0x48   0xF105 0x0134      ADD      R1,R5,#+52
   \       0x4C   0xA801             ADD      R0,SP,#+4
   \       0x4E   0x....'....        BL       mbedtls_mpi_mul_mpi
   \       0x52   0x0004             MOVS     R4,R0
   \       0x54   0xD13D             BNE.N    ??mbedtls_dhm_calc_secret_4
    397                  MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &GYb, &GYb, &ctx->P ) );
   \       0x56   0x1D2A             ADDS     R2,R5,#+4
   \       0x58   0xA901             ADD      R1,SP,#+4
   \       0x5A   0xA801             ADD      R0,SP,#+4
   \       0x5C   0x....'....        BL       mbedtls_mpi_mod_mpi
   \       0x60   0x0004             MOVS     R4,R0
   \       0x62   0xD136             BNE.N    ??mbedtls_dhm_calc_secret_4
   \       0x64   0xE006             B.N      ??mbedtls_dhm_calc_secret_5
    398              }
    399              else
    400                  MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &GYb, &ctx->GY ) );
   \                     ??mbedtls_dhm_calc_secret_3: (+1)
   \       0x66   0xF105 0x0134      ADD      R1,R5,#+52
   \       0x6A   0xA801             ADD      R0,SP,#+4
   \       0x6C   0x....'....        BL       mbedtls_mpi_copy
   \       0x70   0x0004             MOVS     R4,R0
   \       0x72   0xD12E             BNE.N    ??mbedtls_dhm_calc_secret_4
    401          
    402              /* Do modular exponentiation */
    403              MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &ctx->K, &GYb, &ctx->X,
    404                                    &ctx->P, &ctx->RP ) );
   \                     ??mbedtls_dhm_calc_secret_5: (+1)
   \       0x74   0xF105 0x004C      ADD      R0,R5,#+76
   \       0x78   0x9000             STR      R0,[SP, #+0]
   \       0x7A   0x1D2B             ADDS     R3,R5,#+4
   \       0x7C   0xF105 0x021C      ADD      R2,R5,#+28
   \       0x80   0xA901             ADD      R1,SP,#+4
   \       0x82   0xF105 0x0040      ADD      R0,R5,#+64
   \       0x86   0x....'....        BL       mbedtls_mpi_exp_mod
   \       0x8A   0x0004             MOVS     R4,R0
   \       0x8C   0xD121             BNE.N    ??mbedtls_dhm_calc_secret_4
    405          
    406              /* Unblind secret value */
    407              if( f_rng != NULL )
   \       0x8E   0xF1B8 0x0F00      CMP      R8,#+0
   \       0x92   0xD012             BEQ.N    ??mbedtls_dhm_calc_secret_6
    408              {
    409                  MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->K, &ctx->K, &ctx->Vf ) );
   \       0x94   0xF105 0x0264      ADD      R2,R5,#+100
   \       0x98   0xF105 0x0140      ADD      R1,R5,#+64
   \       0x9C   0xF105 0x0040      ADD      R0,R5,#+64
   \       0xA0   0x....'....        BL       mbedtls_mpi_mul_mpi
   \       0xA4   0x0004             MOVS     R4,R0
   \       0xA6   0xD114             BNE.N    ??mbedtls_dhm_calc_secret_4
    410                  MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->K, &ctx->K, &ctx->P ) );
   \       0xA8   0x1D2A             ADDS     R2,R5,#+4
   \       0xAA   0xF105 0x0140      ADD      R1,R5,#+64
   \       0xAE   0xF105 0x0040      ADD      R0,R5,#+64
   \       0xB2   0x....'....        BL       mbedtls_mpi_mod_mpi
   \       0xB6   0x0004             MOVS     R4,R0
   \       0xB8   0xD10B             BNE.N    ??mbedtls_dhm_calc_secret_4
    411              }
    412          
    413              *olen = mbedtls_mpi_size( &ctx->K );
   \                     ??mbedtls_dhm_calc_secret_6: (+1)
   \       0xBA   0xF105 0x0040      ADD      R0,R5,#+64
   \       0xBE   0x....'....        BL       mbedtls_mpi_size
   \       0xC2   0x6038             STR      R0,[R7, #+0]
    414          
    415              MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &ctx->K, output, *olen ) );
   \       0xC4   0x4602             MOV      R2,R0
   \       0xC6   0x4631             MOV      R1,R6
   \       0xC8   0xF105 0x0040      ADD      R0,R5,#+64
   \       0xCC   0x....'....        BL       mbedtls_mpi_write_binary
   \       0xD0   0x4604             MOV      R4,R0
    416          
    417          cleanup:
    418              mbedtls_mpi_free( &GYb );
   \                     ??mbedtls_dhm_calc_secret_4: (+1)
   \       0xD2   0xA801             ADD      R0,SP,#+4
   \       0xD4   0x....'....        BL       mbedtls_mpi_free
    419          
    420              if( ret != 0 )
   \       0xD8   0x2C00             CMP      R4,#+0
   \       0xDA   0xD003             BEQ.N    ??mbedtls_dhm_calc_secret_7
    421                  return( MBEDTLS_ERR_DHM_CALC_SECRET_FAILED + ret );
   \       0xDC   0xF5A4 0x544C      SUB      R4,R4,#+13056
   \       0xE0   0x4620             MOV      R0,R4
   \       0xE2   0xE000             B.N      ??mbedtls_dhm_calc_secret_2
    422          
    423              return( 0 );
   \                     ??mbedtls_dhm_calc_secret_7: (+1)
   \       0xE4   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_dhm_calc_secret_2: (+1)
   \       0xE6   0xB004             ADD      SP,SP,#+16
   \       0xE8   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    424          }
    425          
    426          /*
    427           * Free the components of a DHM key
    428           */

   \                                 In section .text, align 2, keep-with-next
    429          void mbedtls_dhm_free( mbedtls_dhm_context *ctx )
    430          {
   \                     mbedtls_dhm_free: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x4604             MOV      R4,R0
    431              mbedtls_mpi_free( &ctx->pX ); mbedtls_mpi_free( &ctx->Vf );
   \        0x4   0xF104 0x0070      ADD      R0,R4,#+112
   \        0x8   0x....'....        BL       mbedtls_mpi_free
   \        0xC   0xF104 0x0064      ADD      R0,R4,#+100
   \       0x10   0x....'....        BL       mbedtls_mpi_free
    432              mbedtls_mpi_free( &ctx->Vi ); mbedtls_mpi_free( &ctx->RP );
   \       0x14   0xF104 0x0058      ADD      R0,R4,#+88
   \       0x18   0x....'....        BL       mbedtls_mpi_free
   \       0x1C   0xF104 0x004C      ADD      R0,R4,#+76
   \       0x20   0x....'....        BL       mbedtls_mpi_free
    433              mbedtls_mpi_free( &ctx->K  ); mbedtls_mpi_free( &ctx->GY );
   \       0x24   0xF104 0x0040      ADD      R0,R4,#+64
   \       0x28   0x....'....        BL       mbedtls_mpi_free
   \       0x2C   0xF104 0x0034      ADD      R0,R4,#+52
   \       0x30   0x....'....        BL       mbedtls_mpi_free
    434              mbedtls_mpi_free( &ctx->GX ); mbedtls_mpi_free( &ctx->X  );
   \       0x34   0xF104 0x0028      ADD      R0,R4,#+40
   \       0x38   0x....'....        BL       mbedtls_mpi_free
   \       0x3C   0xF104 0x001C      ADD      R0,R4,#+28
   \       0x40   0x....'....        BL       mbedtls_mpi_free
    435              mbedtls_mpi_free( &ctx->G  ); mbedtls_mpi_free( &ctx->P  );
   \       0x44   0xF104 0x0010      ADD      R0,R4,#+16
   \       0x48   0x....'....        BL       mbedtls_mpi_free
   \       0x4C   0x1D20             ADDS     R0,R4,#+4
   \       0x4E   0x....'....        BL       mbedtls_mpi_free
    436          
    437              mbedtls_platform_zeroize( ctx, sizeof( mbedtls_dhm_context ) );
   \       0x52   0x217C             MOVS     R1,#+124
   \       0x54   0x4620             MOV      R0,R4
   \       0x56   0xE8BD 0x4010      POP      {R4,LR}
   \       0x5A   0x....'....        B.W      mbedtls_platform_zeroize
    438          }
    439          
    440          #if defined(MBEDTLS_ASN1_PARSE_C)
    441          /*
    442           * Parse DHM parameters
    443           */

   \                                 In section .text, align 2, keep-with-next
    444          int mbedtls_dhm_parse_dhm( mbedtls_dhm_context *dhm, const unsigned char *dhmin,
    445                             size_t dhminlen )
    446          {
   \                     mbedtls_dhm_parse_dhm: (+1)
   \        0x0   0xB576             PUSH     {R1,R2,R4-R6,LR}
   \        0x2   0xB088             SUB      SP,SP,#+32
   \        0x4   0x4605             MOV      R5,R0
   \        0x6   0x460E             MOV      R6,R1
    447              int ret;
    448              size_t len;
    449              unsigned char *p, *end;
    450          #if defined(MBEDTLS_PEM_PARSE_C)
    451              mbedtls_pem_context pem;
    452          
    453              mbedtls_pem_init( &pem );
   \        0x8   0xA805             ADD      R0,SP,#+20
   \        0xA   0x....'....        BL       mbedtls_pem_init
    454          
    455              /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    456              if( dhminlen == 0 || dhmin[dhminlen - 1] != '\0' )
   \        0xE   0x9809             LDR      R0,[SP, #+36]
   \       0x10   0x2800             CMP      R0,#+0
   \       0x12   0xD004             BEQ.N    ??mbedtls_dhm_parse_dhm_0
   \       0x14   0x4430             ADD      R0,R6,R0
   \       0x16   0xF810 0x0C01      LDRB     R0,[R0, #-1]
   \       0x1A   0x2800             CMP      R0,#+0
   \       0x1C   0xD001             BEQ.N    ??mbedtls_dhm_parse_dhm_1
    457                  ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
   \                     ??mbedtls_dhm_parse_dhm_0: (+1)
   \       0x1E   0x....             LDR.N    R4,??DataTable8_3  ;; 0xffffef80
   \       0x20   0xE00B             B.N      ??mbedtls_dhm_parse_dhm_2
    458              else
    459                  ret = mbedtls_pem_read_buffer( &pem,
    460                                         "-----BEGIN DH PARAMETERS-----",
    461                                         "-----END DH PARAMETERS-----",
    462                                         dhmin, NULL, 0, &dhminlen );
   \                     ??mbedtls_dhm_parse_dhm_1: (+1)
   \       0x22   0xA809             ADD      R0,SP,#+36
   \       0x24   0x9002             STR      R0,[SP, #+8]
   \       0x26   0x2000             MOVS     R0,#+0
   \       0x28   0x9001             STR      R0,[SP, #+4]
   \       0x2A   0x9000             STR      R0,[SP, #+0]
   \       0x2C   0x4633             MOV      R3,R6
   \       0x2E   0x....             LDR.N    R2,??DataTable8_4
   \       0x30   0x....             LDR.N    R1,??DataTable8_5
   \       0x32   0xA805             ADD      R0,SP,#+20
   \       0x34   0x....'....        BL       mbedtls_pem_read_buffer
   \       0x38   0x4604             MOV      R4,R0
    463          
    464              if( ret == 0 )
   \                     ??mbedtls_dhm_parse_dhm_2: (+1)
   \       0x3A   0x2C00             CMP      R4,#+0
   \       0x3C   0xD102             BNE.N    ??mbedtls_dhm_parse_dhm_3
    465              {
    466                  /*
    467                   * Was PEM encoded
    468                   */
    469                  dhminlen = pem.buflen;
   \       0x3E   0x9806             LDR      R0,[SP, #+24]
   \       0x40   0x9009             STR      R0,[SP, #+36]
   \       0x42   0xE002             B.N      ??mbedtls_dhm_parse_dhm_4
    470              }
    471              else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
   \                     ??mbedtls_dhm_parse_dhm_3: (+1)
   \       0x44   0xF514 0x5F84      CMN      R4,#+4224
   \       0x48   0xD13F             BNE.N    ??mbedtls_dhm_parse_dhm_5
    472                  goto exit;
    473          
    474              p = ( ret == 0 ) ? pem.buf : (unsigned char *) dhmin;
   \                     ??mbedtls_dhm_parse_dhm_4: (+1)
   \       0x4A   0x2C00             CMP      R4,#+0
   \       0x4C   0xD102             BNE.N    ??mbedtls_dhm_parse_dhm_6
   \       0x4E   0x9805             LDR      R0,[SP, #+20]
   \       0x50   0x9003             STR      R0,[SP, #+12]
   \       0x52   0xE000             B.N      ??mbedtls_dhm_parse_dhm_7
   \                     ??mbedtls_dhm_parse_dhm_6: (+1)
   \       0x54   0x9603             STR      R6,[SP, #+12]
    475          #else
    476              p = (unsigned char *) dhmin;
    477          #endif /* MBEDTLS_PEM_PARSE_C */
    478              end = p + dhminlen;
    479          
    480              /*
    481               *  DHParams ::= SEQUENCE {
    482               *      prime              INTEGER,  -- P
    483               *      generator          INTEGER,  -- g
    484               *      privateValueLength INTEGER OPTIONAL
    485               *  }
    486               */
    487              if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
    488                      MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
   \                     ??mbedtls_dhm_parse_dhm_7: (+1)
   \       0x56   0x2330             MOVS     R3,#+48
   \       0x58   0xAA04             ADD      R2,SP,#+16
   \       0x5A   0x9803             LDR      R0,[SP, #+12]
   \       0x5C   0x9909             LDR      R1,[SP, #+36]
   \       0x5E   0x4401             ADD      R1,R0,R1
   \       0x60   0xA803             ADD      R0,SP,#+12
   \       0x62   0x....'....        BL       mbedtls_asn1_get_tag
   \       0x66   0x0004             MOVS     R4,R0
   \       0x68   0xD122             BNE.N    ??mbedtls_dhm_parse_dhm_8
    489              {
    490                  ret = MBEDTLS_ERR_DHM_INVALID_FORMAT + ret;
    491                  goto exit;
    492              }
    493          
    494              end = p + len;
   \       0x6A   0x9803             LDR      R0,[SP, #+12]
   \       0x6C   0x9904             LDR      R1,[SP, #+16]
   \       0x6E   0x1846             ADDS     R6,R0,R1
    495          
    496              if( ( ret = mbedtls_asn1_get_mpi( &p, end, &dhm->P  ) ) != 0 ||
    497                  ( ret = mbedtls_asn1_get_mpi( &p, end, &dhm->G ) ) != 0 )
   \       0x70   0x1D2A             ADDS     R2,R5,#+4
   \       0x72   0x4631             MOV      R1,R6
   \       0x74   0xA803             ADD      R0,SP,#+12
   \       0x76   0x....'....        BL       mbedtls_asn1_get_mpi
   \       0x7A   0x0004             MOVS     R4,R0
   \       0x7C   0xD118             BNE.N    ??mbedtls_dhm_parse_dhm_8
   \       0x7E   0xF105 0x0210      ADD      R2,R5,#+16
   \       0x82   0x4631             MOV      R1,R6
   \       0x84   0xA803             ADD      R0,SP,#+12
   \       0x86   0x....'....        BL       mbedtls_asn1_get_mpi
   \       0x8A   0x0004             MOVS     R4,R0
   \       0x8C   0xD110             BNE.N    ??mbedtls_dhm_parse_dhm_8
    498              {
    499                  ret = MBEDTLS_ERR_DHM_INVALID_FORMAT + ret;
    500                  goto exit;
    501              }
    502          
    503              if( p != end )
   \       0x8E   0x9803             LDR      R0,[SP, #+12]
   \       0x90   0x42B0             CMP      R0,R6
   \       0x92   0xD015             BEQ.N    ??mbedtls_dhm_parse_dhm_9
    504              {
    505                  /* This might be the optional privateValueLength.
    506                   * If so, we can cleanly discard it */
    507                  mbedtls_mpi rec;
    508                  mbedtls_mpi_init( &rec );
   \       0x94   0x4668             MOV      R0,SP
   \       0x96   0x....'....        BL       mbedtls_mpi_init
    509                  ret = mbedtls_asn1_get_mpi( &p, end, &rec );
   \       0x9A   0x466A             MOV      R2,SP
   \       0x9C   0x4631             MOV      R1,R6
   \       0x9E   0xA803             ADD      R0,SP,#+12
   \       0xA0   0x....'....        BL       mbedtls_asn1_get_mpi
   \       0xA4   0x4604             MOV      R4,R0
    510                  mbedtls_mpi_free( &rec );
   \       0xA6   0x4668             MOV      R0,SP
   \       0xA8   0x....'....        BL       mbedtls_mpi_free
    511                  if ( ret != 0 )
   \       0xAC   0x2C00             CMP      R4,#+0
   \       0xAE   0xD002             BEQ.N    ??mbedtls_dhm_parse_dhm_10
    512                  {
    513                      ret = MBEDTLS_ERR_DHM_INVALID_FORMAT + ret;
   \                     ??mbedtls_dhm_parse_dhm_8: (+1)
   \       0xB0   0xF5A4 0x544E      SUB      R4,R4,#+13184
    514                      goto exit;
   \       0xB4   0xE009             B.N      ??mbedtls_dhm_parse_dhm_5
    515                  }
    516                  if ( p != end )
   \                     ??mbedtls_dhm_parse_dhm_10: (+1)
   \       0xB6   0x9803             LDR      R0,[SP, #+12]
   \       0xB8   0x42B0             CMP      R0,R6
   \       0xBA   0xD001             BEQ.N    ??mbedtls_dhm_parse_dhm_9
    517                  {
    518                      ret = MBEDTLS_ERR_DHM_INVALID_FORMAT +
    519                          MBEDTLS_ERR_ASN1_LENGTH_MISMATCH;
   \       0xBC   0x....             LDR.N    R4,??DataTable8_6  ;; 0xffffcc1a
    520                      goto exit;
   \       0xBE   0xE004             B.N      ??mbedtls_dhm_parse_dhm_5
    521                  }
    522              }
    523          
    524              ret = 0;
   \                     ??mbedtls_dhm_parse_dhm_9: (+1)
   \       0xC0   0x2400             MOVS     R4,#+0
    525          
    526              dhm->len = mbedtls_mpi_size( &dhm->P );
   \       0xC2   0x1D28             ADDS     R0,R5,#+4
   \       0xC4   0x....'....        BL       mbedtls_mpi_size
   \       0xC8   0x6028             STR      R0,[R5, #+0]
    527          
    528          exit:
    529          #if defined(MBEDTLS_PEM_PARSE_C)
    530              mbedtls_pem_free( &pem );
   \                     ??mbedtls_dhm_parse_dhm_5: (+1)
   \       0xCA   0xA805             ADD      R0,SP,#+20
   \       0xCC   0x....'....        BL       mbedtls_pem_free
    531          #endif
    532              if( ret != 0 )
   \       0xD0   0x2C00             CMP      R4,#+0
   \       0xD2   0xD002             BEQ.N    ??mbedtls_dhm_parse_dhm_11
    533                  mbedtls_dhm_free( dhm );
   \       0xD4   0x4628             MOV      R0,R5
   \       0xD6   0x....'....        BL       mbedtls_dhm_free
    534          
    535              return( ret );
   \                     ??mbedtls_dhm_parse_dhm_11: (+1)
   \       0xDA   0x4620             MOV      R0,R4
   \       0xDC   0xB00A             ADD      SP,SP,#+40
   \       0xDE   0xBD70             POP      {R4-R6,PC}       ;; return
    536          }
    537          
    538          #if defined(MBEDTLS_FS_IO)
    539          /*
    540           * Load all data from a file into a given buffer.
    541           *
    542           * The file is expected to contain either PEM or DER encoded data.
    543           * A terminating null byte is always appended. It is included in the announced
    544           * length only if the data looks like it is PEM encoded.
    545           */
    546          static int load_file( const char *path, unsigned char **buf, size_t *n )
    547          {
    548              FILE *f;
    549              long size;
    550          
    551              if( ( f = fopen( path, "rb" ) ) == NULL )
    552                  return( MBEDTLS_ERR_DHM_FILE_IO_ERROR );
    553          
    554              fseek( f, 0, SEEK_END );
    555              if( ( size = ftell( f ) ) == -1 )
    556              {
    557                  fclose( f );
    558                  return( MBEDTLS_ERR_DHM_FILE_IO_ERROR );
    559              }
    560              fseek( f, 0, SEEK_SET );
    561          
    562              *n = (size_t) size;
    563          
    564              if( *n + 1 == 0 ||
    565                  ( *buf = mbedtls_calloc( 1, *n + 1 ) ) == NULL )
    566              {
    567                  fclose( f );
    568                  return( MBEDTLS_ERR_DHM_ALLOC_FAILED );
    569              }
    570          
    571              if( fread( *buf, 1, *n, f ) != *n )
    572              {
    573                  fclose( f );
    574          
    575                  mbedtls_platform_zeroize( *buf, *n + 1 );
    576                  mbedtls_free( *buf );
    577          
    578                  return( MBEDTLS_ERR_DHM_FILE_IO_ERROR );
    579              }
    580          
    581              fclose( f );
    582          
    583              (*buf)[*n] = '\0';
    584          
    585              if( strstr( (const char *) *buf, "-----BEGIN " ) != NULL )
    586                  ++*n;
    587          
    588              return( 0 );
    589          }
    590          
    591          /*
    592           * Load and parse DHM parameters
    593           */
    594          int mbedtls_dhm_parse_dhmfile( mbedtls_dhm_context *dhm, const char *path )
    595          {
    596              int ret;
    597              size_t n;
    598              unsigned char *buf;
    599          
    600              if( ( ret = load_file( path, &buf, &n ) ) != 0 )
    601                  return( ret );
    602          
    603              ret = mbedtls_dhm_parse_dhm( dhm, buf, n );
    604          
    605              mbedtls_platform_zeroize( buf, n );
    606              mbedtls_free( buf );
    607          
    608              return( ret );
    609          }
    610          #endif /* MBEDTLS_FS_IO */
    611          #endif /* MBEDTLS_ASN1_PARSE_C */
    612          #endif /* MBEDTLS_DHM_ALT */
    613          
    614          #if defined(MBEDTLS_SELF_TEST)
    615          

   \                                 In section .rodata, align 4
    616          static const char mbedtls_test_dhm_params[] =
   \                     mbedtls_test_dhm_params:
   \        0x0   0x2D 0x2D          DC8 2DH, 2DH, 2DH, 2DH, 2DH, 42H, 45H, 47H
   \              0x2D 0x2D    
   \              0x2D 0x42    
   \              0x45 0x47    
   \        0x8   0x49 0x4E          DC8 49H, 4EH, 20H, 44H, 48H, 20H, 50H, 41H
   \              0x20 0x44    
   \              0x48 0x20    
   \              0x50 0x41    
   \       0x10   0x52 0x41          DC8 52H, 41H, 4DH, 45H, 54H, 45H, 52H, 53H
   \              0x4D 0x45    
   \              0x54 0x45    
   \              0x52 0x53    
   \       0x18   0x2D 0x2D          DC8 2DH, 2DH, 2DH, 2DH, 2DH, 0DH, 0AH, 4DH
   \              0x2D 0x2D    
   \              0x2D 0x0D    
   \              0x0A 0x4D    
   \       0x20   0x49 0x47          DC8 49H, 47H, 48H, 41H, 6FH, 47H, 42H, 41H
   \              0x48 0x41    
   \              0x6F 0x47    
   \              0x42 0x41    
   \       0x28   0x4A 0x34          DC8 4AH, 34H, 31H, 39H, 44H, 42H, 45H, 4FH
   \              0x31 0x39    
   \              0x44 0x42    
   \              0x45 0x4F    
   \       0x30   0x67 0x6D          DC8 67H, 6DH, 51H, 54H, 7AH, 6FH, 35H, 71H
   \              0x51 0x54    
   \              0x7A 0x6F    
   \              0x35 0x71    
   \       0x38   0x58 0x6C          DC8 58H, 6CH, 35H, 66H, 51H, 63H, 4EH, 39H
   \              0x35 0x66    
   \              0x51 0x63    
   \              0x4E 0x39    
   \       0x40   0x54 0x4E          DC8 54H, 4EH, 34H, 35H, 35H, 77H, 6BH, 4FH
   \              0x34 0x35    
   \              0x35 0x77    
   \              0x6B 0x4F    
   \       0x48   0x4C 0x37          DC8 4CH, 37H, 30H, 35H, 32H, 48H, 7AH, 78H
   \              0x30 0x35    
   \              0x32 0x48    
   \              0x7A 0x78    
   \       0x50   0x78 0x52          DC8 78H, 52H, 56H, 4DH, 79H, 68H, 59H, 6DH
   \              0x56 0x4D    
   \              0x79 0x68    
   \              0x59 0x6D    
   \       0x58   0x77 0x51          DC8 77H, 51H, 63H, 67H, 4AH, 76H, 68H, 0DH
   \              0x63 0x67    
   \              0x4A 0x76    
   \              0x68 0x0D    
   \       0x60   0x0A 0x31          DC8 0AH, 31H, 73H, 61H, 31H, 38H, 66H, 79H
   \              0x73 0x61    
   \              0x31 0x38    
   \              0x66 0x79    
   \       0x68   0x66 0x52          DC8 66H, 52H, 39H, 4FH, 69H, 56H, 45H, 4DH
   \              0x39 0x4F    
   \              0x69 0x56    
   \              0x45 0x4D    
   \       0x70   0x59 0x67          DC8 59H, 67H, 6CH, 4FH, 70H, 6BH, 71H, 56H
   \              0x6C 0x4F    
   \              0x70 0x6B    
   \              0x71 0x56    
   \       0x78   0x6F 0x47          DC8 6FH, 47H, 4CH, 4EH, 37H, 71H, 64H, 35H
   \              0x4C 0x4E    
   \              0x37 0x71    
   \              0x64 0x35    
   \       0x80   0x61 0x51          DC8 61H, 51H, 4EH, 4EH, 69H, 35H, 57H, 37H
   \              0x4E 0x4E    
   \              0x69 0x35    
   \              0x57 0x37    
   \       0x88   0x2F 0x43          DC8 2FH, 43H, 2BH, 56H, 42H, 64H, 48H, 54H
   \              0x2B 0x56    
   \              0x42 0x64    
   \              0x48 0x54    
   \       0x90   0x42 0x4A          DC8 42H, 4AH, 63H, 47H, 5AH, 4AH, 79H, 79H
   \              0x63 0x47    
   \              0x5A 0x4A    
   \              0x79 0x79    
   \       0x98   0x50 0x35          DC8 50H, 35H, 42H, 33H, 71H, 63H, 7AH, 33H
   \              0x42 0x33    
   \              0x71 0x63    
   \              0x7A 0x33    
   \       0xA0   0x32 0x0D          DC8 32H, 0DH, 0AH, 39H, 6DH, 4CH, 4AH, 4BH
   \              0x0A 0x39    
   \              0x6D 0x4C    
   \              0x4A 0x4B    
   \       0xA8   0x75 0x64          DC8 75H, 64H, 6CH, 56H, 75H, 64H, 56H, 30H
   \              0x6C 0x56    
   \              0x75 0x64    
   \              0x56 0x30    
   \       0xB0   0x51 0x78          DC8 51H, 78H, 6BH, 35H, 71H, 55H, 4AH, 61H
   \              0x6B 0x35    
   \              0x71 0x55    
   \              0x4A 0x61    
   \       0xB8   0x50 0x5A          DC8 50H, 5AH, 2FH, 78H, 75H, 70H, 7AH, 30H
   \              0x2F 0x78    
   \              0x75 0x70    
   \              0x7A 0x30    
   \       0xC0   0x4E 0x79          DC8 4EH, 79H, 6FH, 56H, 70H, 76H, 69H, 75H
   \              0x6F 0x56    
   \              0x70 0x76    
   \              0x69 0x75    
   \       0xC8   0x69 0x42          DC8 69H, 42H, 4FH, 49H, 31H, 67H, 4EH, 69H
   \              0x4F 0x49    
   \              0x31 0x67    
   \              0x4E 0x69    
   \       0xD0   0x38 0x6F          DC8 38H, 6FH, 76H, 53H, 58H, 57H, 7AH, 41H
   \              0x76 0x53    
   \              0x58 0x57    
   \              0x7A 0x41    
   \       0xD8   0x67 0x45          DC8 67H, 45H, 43H, 0DH, 0AH, 2DH, 2DH, 2DH
   \              0x43 0x0D    
   \              0x0A 0x2D    
   \              0x2D 0x2D    
   \       0xE0   0x2D 0x2D          DC8 2DH, 2DH, 45H, 4EH, 44H, 20H, 44H, 48H
   \              0x45 0x4E    
   \              0x44 0x20    
   \              0x44 0x48    
   \       0xE8   0x20 0x50          DC8 20H, 50H, 41H, 52H, 41H, 4DH, 45H, 54H
   \              0x41 0x52    
   \              0x41 0x4D    
   \              0x45 0x54    
   \       0xF0   0x45 0x52          DC8 45H, 52H, 53H, 2DH, 2DH, 2DH, 2DH, 2DH
   \              0x53 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \       0xF8   0x0D 0x0A          DC8 0DH, 0AH, 0
   \              0x00         
   \       0xFB   0x00               DC8 0
    617          "-----BEGIN DH PARAMETERS-----\r\n"
    618          "MIGHAoGBAJ419DBEOgmQTzo5qXl5fQcN9TN455wkOL7052HzxxRVMyhYmwQcgJvh\r\n"
    619          "1sa18fyfR9OiVEMYglOpkqVoGLN7qd5aQNNi5W7/C+VBdHTBJcGZJyyP5B3qcz32\r\n"
    620          "9mLJKudlVudV0Qxk5qUJaPZ/xupz0NyoVpviuiBOI1gNi8ovSXWzAgEC\r\n"
    621          "-----END DH PARAMETERS-----\r\n";
    622          
    623          static const size_t mbedtls_test_dhm_params_len = sizeof( mbedtls_test_dhm_params );
    624          
    625          /*
    626           * Checkup routine
    627           */

   \                                 In section .text, align 2, keep-with-next
    628          int mbedtls_dhm_self_test( int verbose )
    629          {
   \                     mbedtls_dhm_self_test: (+1)
   \        0x0   0xB530             PUSH     {R4,R5,LR}
   \        0x2   0xB09F             SUB      SP,SP,#+124
   \        0x4   0x4604             MOV      R4,R0
    630              int ret;
    631              mbedtls_dhm_context dhm;
    632          
    633              mbedtls_dhm_init( &dhm );
   \        0x6   0x4668             MOV      R0,SP
   \        0x8   0x....'....        BL       mbedtls_dhm_init
    634          
    635              if( verbose != 0 )
   \        0xC   0x2C00             CMP      R4,#+0
   \        0xE   0xD002             BEQ.N    ??mbedtls_dhm_self_test_0
    636                  mbedtls_printf( "  DHM parameter load: " );
   \       0x10   0x....             LDR.N    R0,??DataTable8_7
   \       0x12   0x....'....        BL       DbgConsole_Printf
    637          
    638              if( ( ret = mbedtls_dhm_parse_dhm( &dhm,
    639                              (const unsigned char *) mbedtls_test_dhm_params,
    640                              mbedtls_test_dhm_params_len ) ) != 0 )
   \                     ??mbedtls_dhm_self_test_0: (+1)
   \       0x16   0x22FB             MOVS     R2,#+251
   \       0x18   0x....             LDR.N    R1,??DataTable8_8
   \       0x1A   0x4668             MOV      R0,SP
   \       0x1C   0x....'....        BL       mbedtls_dhm_parse_dhm
   \       0x20   0x0005             MOVS     R5,R0
   \       0x22   0xD006             BEQ.N    ??mbedtls_dhm_self_test_1
    641              {
    642                  if( verbose != 0 )
   \       0x24   0x2C00             CMP      R4,#+0
   \       0x26   0xD002             BEQ.N    ??mbedtls_dhm_self_test_2
    643                      mbedtls_printf( "failed\n\r" );
   \       0x28   0x....             LDR.N    R0,??DataTable8_9
   \       0x2A   0x....'....        BL       DbgConsole_Printf
    644          
    645                  ret = 1;
   \                     ??mbedtls_dhm_self_test_2: (+1)
   \       0x2E   0x2501             MOVS     R5,#+1
    646                  goto exit;
   \       0x30   0xE004             B.N      ??mbedtls_dhm_self_test_3
    647              }
    648          
    649              if( verbose != 0 )
   \                     ??mbedtls_dhm_self_test_1: (+1)
   \       0x32   0x2C00             CMP      R4,#+0
   \       0x34   0xD002             BEQ.N    ??mbedtls_dhm_self_test_3
    650                  mbedtls_printf( "passed\n\n\r" );
   \       0x36   0x....             LDR.N    R0,??DataTable8_10
   \       0x38   0x....'....        BL       DbgConsole_Printf
    651          
    652          exit:
    653              mbedtls_dhm_free( &dhm );
   \                     ??mbedtls_dhm_self_test_3: (+1)
   \       0x3C   0x4668             MOV      R0,SP
   \       0x3E   0x....'....        BL       mbedtls_dhm_free
    654          
    655              return( ret );
   \       0x42   0x4628             MOV      R0,R5
   \       0x44   0xB01F             ADD      SP,SP,#+124
   \       0x46   0xBD30             POP      {R4,R5,PC}       ;; return
    656          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \        0x0   0xFFFF'CF80        DC32     0xffffcf80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \        0x0   0xFFFF'CE80        DC32     0xffffce80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \        0x0   0xFFFF'CD80        DC32     0xffffcd80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_3:
   \        0x0   0xFFFF'EF80        DC32     0xffffef80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_4:
   \        0x0   0x....'....        DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_5:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_6:
   \        0x0   0xFFFF'CC1A        DC32     0xffffcc1a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_7:
   \        0x0   0x....'....        DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_8:
   \        0x0   0x....'....        DC32     mbedtls_test_dhm_params

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_9:
   \        0x0   0x....'....        DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_10:
   \        0x0   0x....'....        DC32     ?_4

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x2D 0x2D          DC8 "-----BEGIN DH PARAMETERS-----"
   \              0x2D 0x2D    
   \              0x2D 0x42    
   \              0x45 0x47    
   \              0x49 0x4E    
   \              0x20 0x44    
   \              0x48 0x20    
   \              0x50 0x41    
   \              0x52 0x41    
   \              0x4D 0x45    
   \              0x54 0x45    
   \              0x52 0x53    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x00    
   \       0x1E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_1:
   \        0x0   0x2D 0x2D          DC8 "-----END DH PARAMETERS-----"
   \              0x2D 0x2D    
   \              0x2D 0x45    
   \              0x4E 0x44    
   \              0x20 0x44    
   \              0x48 0x20    
   \              0x50 0x41    
   \              0x52 0x41    
   \              0x4D 0x45    
   \              0x54 0x45    
   \              0x52 0x53    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x00    

   \                                 In section .rodata, align 4
   \                     ?_2:
   \        0x0   0x20 0x20          DC8 "  DHM parameter load: "
   \              0x44 0x48    
   \              0x4D 0x20    
   \              0x70 0x61    
   \              0x72 0x61    
   \              0x6D 0x65    
   \              0x74 0x65    
   \              0x72 0x20    
   \              0x6C 0x6F    
   \              0x61 0x64    
   \              0x3A 0x20    
   \              0x00         
   \       0x17   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_3:
   \        0x0   0x66 0x61          DC8 "failed\012\015"
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x0A 0x0D    
   \              0x00         
   \        0x9   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_4:
   \        0x0   0x70 0x61          DC8 "passed\012\012\015"
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x0A 0x0A    
   \              0x0D 0x00    
   \        0xA   0x00 0x00          DC8 0, 0
    657          
    658          #endif /* MBEDTLS_SELF_TEST */
    659          
    660          #endif /* MBEDTLS_DHM_C */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      40   dhm_check_range
        40   -> mbedtls_mpi_cmp_mpi
        40   -> mbedtls_mpi_free
        40   -> mbedtls_mpi_init
        40   -> mbedtls_mpi_lset
        40   -> mbedtls_mpi_sub_int
      16   dhm_read_bignum
        16   -> mbedtls_mpi_read_binary
      24   dhm_update_blinding
        24   -> mbedtls_mpi_cmp_int
        24   -> mbedtls_mpi_cmp_mpi
        24   -> mbedtls_mpi_copy
        24   -> mbedtls_mpi_exp_mod
        24   -> mbedtls_mpi_fill_random
        24   -> mbedtls_mpi_inv_mod
        24   -> mbedtls_mpi_lset
        24   -> mbedtls_mpi_mod_mpi
        24   -> mbedtls_mpi_mul_mpi
        24   -> mbedtls_mpi_shift_r
        24   -> mbedtls_mpi_size
      40   mbedtls_dhm_calc_secret
        40   -> dhm_check_range
        40   -> dhm_update_blinding
        40   -> mbedtls_mpi_copy
        40   -> mbedtls_mpi_exp_mod
        40   -> mbedtls_mpi_free
        40   -> mbedtls_mpi_init
        40   -> mbedtls_mpi_mod_mpi
        40   -> mbedtls_mpi_mul_mpi
        40   -> mbedtls_mpi_size
        40   -> mbedtls_mpi_write_binary
       8   mbedtls_dhm_free
         8   -> mbedtls_mpi_free
         0   -> mbedtls_platform_zeroize
       0   mbedtls_dhm_init
         0   -> __aeabi_memset4
      40   mbedtls_dhm_make_params
        40   -> dhm_check_range
        40   -> mbedtls_mpi_cmp_int
        40   -> mbedtls_mpi_cmp_mpi
        40   -> mbedtls_mpi_exp_mod
        40   -> mbedtls_mpi_fill_random
        40   -> mbedtls_mpi_shift_r
        40   -> mbedtls_mpi_size
        40   -> mbedtls_mpi_write_binary
      40   mbedtls_dhm_make_public
        40   -> dhm_check_range
        40   -> mbedtls_mpi_cmp_int
        40   -> mbedtls_mpi_cmp_mpi
        40   -> mbedtls_mpi_exp_mod
        40   -> mbedtls_mpi_fill_random
        40   -> mbedtls_mpi_shift_r
        40   -> mbedtls_mpi_write_binary
      56   mbedtls_dhm_parse_dhm
        56   -> mbedtls_asn1_get_mpi
        56   -> mbedtls_asn1_get_tag
        56   -> mbedtls_dhm_free
        56   -> mbedtls_mpi_free
        56   -> mbedtls_mpi_init
        56   -> mbedtls_mpi_size
        56   -> mbedtls_pem_free
        56   -> mbedtls_pem_init
        56   -> mbedtls_pem_read_buffer
      16   mbedtls_dhm_read_params
        16   -> dhm_check_range
        16   -> dhm_read_bignum
        16   -> mbedtls_mpi_size
       8   mbedtls_dhm_read_public
         8   -> mbedtls_mpi_read_binary
     136   mbedtls_dhm_self_test
       136   -> DbgConsole_Printf
       136   -> mbedtls_dhm_free
       136   -> mbedtls_dhm_init
       136   -> mbedtls_dhm_parse_dhm
      16   mbedtls_dhm_set_group
        16   -> mbedtls_mpi_copy
        16   -> mbedtls_mpi_size


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_10
       4  ??DataTable8_2
       4  ??DataTable8_3
       4  ??DataTable8_4
       4  ??DataTable8_5
       4  ??DataTable8_6
       4  ??DataTable8_7
       4  ??DataTable8_8
       4  ??DataTable8_9
      32  ?_0
      28  ?_1
      24  ?_2
      12  ?_3
      12  ?_4
      92  dhm_check_range
      68  dhm_read_bignum
     292  dhm_update_blinding
     236  mbedtls_dhm_calc_secret
      94  mbedtls_dhm_free
       8  mbedtls_dhm_init
     326  mbedtls_dhm_make_params
     206  mbedtls_dhm_make_public
     224  mbedtls_dhm_parse_dhm
      76  mbedtls_dhm_read_params
      42  mbedtls_dhm_read_public
      72  mbedtls_dhm_self_test
      66  mbedtls_dhm_set_group
     252  mbedtls_test_dhm_params

 
   360 bytes in section .rodata
 1 846 bytes in section .text
 
 1 846 bytes of CODE  memory
   360 bytes of CONST memory

Errors: none
Warnings: none
