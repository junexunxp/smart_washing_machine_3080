###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.3.193/W32 for ARM         10/Jun/2019  13:48:36
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\Development\smart_washing_machine_3080\csdk\eng\mqtt\mqtt_api.c
#    Command line =  
#        -f C:\Users\nxf42695\AppData\Local\Temp\1\EW1CD4.tmp
#        (C:\Development\smart_washing_machine_3080\csdk\eng\mqtt\mqtt_api.c -D
#        DEBUG -D USE_RTOS -D XIP_EXTERNAL_FLASH=1 -D XIP_BOOT_HEADER_ENABLE=1
#        -D CPU_MIMXRT1052DVL6B -D FSL_RTOS_FREE_RTOS -D PRINTF_ADVANCED_ENABLE
#        -D "MBEDTLS_CONFIG_FILE=\"ksdk_mbedtls_config.h\"" -lC
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list -lA
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list
#        --diag_suppress Pa082,Pa050 -o
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_d16 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" --preinclude
#        C:\Development\smart_washing_machine_3080/source\app_preinclude.h -I
#        C:\Development\smart_washing_machine_3080/board\ -I
#        C:\Development\smart_washing_machine_3080/source\ -I
#        C:\Development\smart_washing_machine_3080/CMSIS\ -I
#        C:\Development\smart_washing_machine_3080/amazon-freertos/freertos/portable\
#        -I C:\Development\smart_washing_machine_3080/amazon-freertos/include\
#        -I C:\Development\smart_washing_machine_3080/component/lists\ -I
#        C:\Development\smart_washing_machine_3080/component/serial_manager\ -I
#        C:\Development\smart_washing_machine_3080/component/uart\ -I
#        C:\Development\smart_washing_machine_3080/component/kv\ -I
#        C:\Development\smart_washing_machine_3080/component/kv/include\ -I
#        C:\Development\smart_washing_machine_3080/device\ -I
#        C:\Development\smart_washing_machine_3080/doc\ -I
#        C:\Development\smart_washing_machine_3080/drivers\ -I
#        C:\Development\smart_washing_machine_3080/src\ -I
#        C:\Development\smart_washing_machine_3080/startup\ -I
#        C:\Development\smart_washing_machine_3080/utilities\ -I
#        C:\Development\smart_washing_machine_3080/xip\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\atm\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_model\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_sign\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\infra\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\mqtt\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\external_libs\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\coap_cloud\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\CoAPPacket\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\server\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\os\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\awss_reset\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\mbedtls\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\ -I
#        C:\Development\smart_washing_machine_3080\mbedtls\port\ksdk\ -Om)
#    Locale       =  C
#    List file    =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list\mqtt_api.lst
#    Object file  =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj\mqtt_api.o
#
###############################################################################

C:\Development\smart_washing_machine_3080\csdk\eng\mqtt\mqtt_api.c
      1          #include "infra_types.h"
      2          #include "infra_defs.h"
      3          #include "infra_string.h"
      4          #include "infra_list.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void __dlist_add(dlist_t *, dlist_t *, dlist_t *)
   \                     __dlist_add: (+1)
   \        0x0   0x6042             STR      R2,[R0, #+4]
   \        0x2   0x6001             STR      R1,[R0, #+0]
   \        0x4   0x6048             STR      R0,[R1, #+4]
   \        0x6   0x6010             STR      R0,[R2, #+0]
   \        0x8   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void dlist_add_tail(dlist_t *, dlist_t *)
   \                     dlist_add_tail: (+1)
   \        0x0   0x460A             MOV      R2,R1
   \        0x2   0x6811             LDR      R1,[R2, #+0]
   \        0x4   0x....             B.N      __dlist_add

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void dlist_del(dlist_t *)
   \                     dlist_del: (+1)
   \        0x0   0x6801             LDR      R1,[R0, #+0]
   \        0x2   0x6840             LDR      R0,[R0, #+4]
   \        0x4   0x6048             STR      R0,[R1, #+4]
   \        0x6   0x6001             STR      R1,[R0, #+0]
   \        0x8   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void INIT_AOS_DLIST_HEAD(dlist_t *)
   \                     INIT_AOS_DLIST_HEAD: (+1)
   \        0x0   0x6040             STR      R0,[R0, #+4]
   \        0x2   0x6000             STR      R0,[R0, #+0]
   \        0x4   0x4770             BX       LR               ;; return
      5          #include "infra_report.h"
      6          #include "infra_sha256.h"
      7          #include "infra_compat.h"
      8          
      9          #include "dev_sign_api.h"
     10          #include "mqtt_api.h"
     11          #include "mqtt_wrapper.h"
     12          
     13          #ifdef PLATFORM_HAS_DYNMEM
     14              #ifdef INFRA_MEM_STATS
     15                  #include "infra_mem_stats.h"
     16                  #define mqtt_api_malloc(size)            LITE_malloc(size, MEM_MAGIC, "mqtt-api")
     17                  #define mqtt_api_free(ptr)               LITE_free(ptr)
     18              #else
     19                  #define mqtt_api_malloc(size)            HAL_Malloc(size)
     20                  #define mqtt_api_free(ptr)               {HAL_Free((void *)ptr);ptr = NULL;}
     21              #endif
     22          
     23          #else
     24              static iotx_mqtt_param_t g_iotx_mqtt_param;
     25          #endif
     26          
     27          #ifdef INFRA_LOG
     28              #include "infra_log.h"
     29              #define mqtt_emerg(...)             log_emerg("MQTT", __VA_ARGS__)
     30              #define mqtt_crit(...)              log_crit("MQTT", __VA_ARGS__)
     31              #define mqtt_err(...)               log_err("MQTT", __VA_ARGS__)
     32              #define mqtt_warning(...)           log_warning("MQTT", __VA_ARGS__)
     33              #define mqtt_info(...)              log_info("MQTT", __VA_ARGS__)
     34              #define mqtt_debug(...)             log_debug("MQTT", __VA_ARGS__)
     35          #else
     36              #define mqtt_emerg(...)             do{HAL_Printf(__VA_ARGS__);HAL_Printf("\r\n");}while(0)
     37              #define mqtt_crit(...)              do{HAL_Printf(__VA_ARGS__);HAL_Printf("\r\n");}while(0)
     38              #define mqtt_err(...)               do{HAL_Printf(__VA_ARGS__);HAL_Printf("\r\n");}while(0)
     39              #define mqtt_warning(...)           do{HAL_Printf(__VA_ARGS__);HAL_Printf("\r\n");}while(0)
     40              #define mqtt_info(...)              do{HAL_Printf(__VA_ARGS__);HAL_Printf("\r\n");}while(0)
     41              #define mqtt_debug(...)             do{HAL_Printf(__VA_ARGS__);HAL_Printf("\r\n");}while(0)
     42          #endif
     43          

   \                                 In section .bss, align 4
     44          static void        *g_mqtt_client = NULL;
   \                     g_mqtt_client:
   \        0x0                      DS8 4

   \                                 In section .bss, align 4
     45          iotx_sign_mqtt_t    g_default_sign;
   \                     g_default_sign:
   \        0x0                      DS8 396
     46          
     47          /* Handle structure of subscribed topic */
     48          typedef struct  {
     49          #ifdef PLATFORM_HAS_DYNMEM
     50              char *topic_filter;
     51          #else
     52              char topic_filter[CONFIG_MQTT_TOPIC_MAXLEN];
     53          #endif
     54              iotx_mqtt_event_handle_func_fpt handle;
     55              void *user_data;
     56              iotx_mqtt_qos_t qos;
     57          #ifdef PLATFORM_HAS_DYNMEM
     58              struct list_head linked_list;
     59          #else
     60              int used;
     61          #endif
     62          } iotx_mc_offline_subs_t;
     63          
     64          typedef struct {
     65              int init;
     66              void *mutex;
     67          #ifdef PLATFORM_HAS_DYNMEM
     68              struct list_head offline_sub_list;
     69          #else
     70              iotx_mc_offline_subs_t offline_sub_list[CONFIG_MQTT_OFFLINE_TOPIC_MAXNUM];
     71          #endif
     72          
     73          } offline_sub_list_t;
     74          

   \                                 In section .bss, align 4
     75          static offline_sub_list_t g_mqtt_offline_subs_list = {0};
   \                     g_mqtt_offline_subs_list:
   \        0x0                      DS8 16
     76          

   \                                 In section .text, align 2, keep-with-next
     77          static int _offline_subs_list_init(void)
     78          {
   \                     _offline_subs_list_init: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
     79              if (g_mqtt_offline_subs_list.init) {
   \        0x2   0x....'....        LDR.W    R4,??DataTable13
   \        0x6   0x6820             LDR      R0,[R4, #+0]
   \        0x8   0x2800             CMP      R0,#+0
   \        0xA   0xD001             BEQ.N    ??_offline_subs_list_init_0
     80                  return SUCCESS_RETURN;
   \        0xC   0x2000             MOVS     R0,#+0
   \        0xE   0xBD10             POP      {R4,PC}
     81              }
     82          
     83              memset(&g_mqtt_offline_subs_list, 0, sizeof(offline_sub_list_t));
   \                     ??_offline_subs_list_init_0: (+1)
   \       0x10   0x2200             MOVS     R2,#+0
   \       0x12   0x2110             MOVS     R1,#+16
   \       0x14   0x4620             MOV      R0,R4
   \       0x16   0x....'....        BL       __aeabi_memset4
     84              g_mqtt_offline_subs_list.init = 1;
   \       0x1A   0x2001             MOVS     R0,#+1
   \       0x1C   0x6020             STR      R0,[R4, #+0]
     85          
     86          #ifdef PLATFORM_HAS_DYNMEM
     87              INIT_LIST_HEAD(&g_mqtt_offline_subs_list.offline_sub_list);
   \       0x1E   0xF104 0x0008      ADD      R0,R4,#+8
   \       0x22   0x....'....        BL       INIT_AOS_DLIST_HEAD
     88          #endif
     89          
     90              g_mqtt_offline_subs_list.mutex = HAL_MutexCreate();
   \       0x26   0x....'....        BL       HAL_MutexCreate
   \       0x2A   0x6060             STR      R0,[R4, #+4]
     91          
     92              return SUCCESS_RETURN;
   \       0x2C   0x2000             MOVS     R0,#+0
   \       0x2E   0xBD10             POP      {R4,PC}          ;; return
     93          }
     94          

   \                                 In section .text, align 2, keep-with-next
     95          static int _offline_subs_list_deinit(void)
     96          {
   \                     _offline_subs_list_deinit: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
     97          #ifdef PLATFORM_HAS_DYNMEM
     98              iotx_mc_offline_subs_t *node = NULL, *next_node = NULL;
     99              list_for_each_entry_safe(node, next_node, &g_mqtt_offline_subs_list.offline_sub_list, linked_list,
    100                                       iotx_mc_offline_subs_t) {
   \        0x2   0x....'....        LDR.W    R4,??DataTable13
   \        0x6   0x68E0             LDR      R0,[R4, #+12]
   \        0x8   0xF1A0 0x0510      SUB      R5,R0,#+16
   \        0xC   0x6968             LDR      R0,[R5, #+20]
   \        0xE   0xF1A0 0x0610      SUB      R6,R0,#+16
   \       0x12   0xE00D             B.N      ??_offline_subs_list_deinit_0
    101                  list_del(&node->linked_list);
   \                     ??_offline_subs_list_deinit_1: (+1)
   \       0x14   0x....'....        BL       dlist_del
    102                  mqtt_api_free(node->topic_filter);
   \       0x18   0x6828             LDR      R0,[R5, #+0]
   \       0x1A   0x....'....        BL       HAL_Free
   \       0x1E   0x2000             MOVS     R0,#+0
   \       0x20   0x6028             STR      R0,[R5, #+0]
    103                  mqtt_api_free(node);
   \       0x22   0x4628             MOV      R0,R5
   \       0x24   0x....'....        BL       HAL_Free
    104              }
   \       0x28   0x4635             MOV      R5,R6
   \       0x2A   0x6970             LDR      R0,[R6, #+20]
   \       0x2C   0xF1A0 0x0610      SUB      R6,R0,#+16
   \                     ??_offline_subs_list_deinit_0: (+1)
   \       0x30   0xF105 0x0010      ADD      R0,R5,#+16
   \       0x34   0xF104 0x0108      ADD      R1,R4,#+8
   \       0x38   0x4288             CMP      R0,R1
   \       0x3A   0xD1EB             BNE.N    ??_offline_subs_list_deinit_1
    105          #endif
    106          
    107              if (g_mqtt_offline_subs_list.mutex) {
   \       0x3C   0x6860             LDR      R0,[R4, #+4]
   \       0x3E   0x2800             CMP      R0,#+0
   \       0x40   0xD001             BEQ.N    ??_offline_subs_list_deinit_2
    108                  HAL_MutexDestroy(g_mqtt_offline_subs_list.mutex);
   \       0x42   0x....'....        BL       HAL_MutexDestroy
    109              }
    110              memset(&g_mqtt_offline_subs_list, 0, sizeof(offline_sub_list_t));
   \                     ??_offline_subs_list_deinit_2: (+1)
   \       0x46   0x2200             MOVS     R2,#+0
   \       0x48   0x2110             MOVS     R1,#+16
   \       0x4A   0x4620             MOV      R0,R4
   \       0x4C   0x....'....        BL       __aeabi_memset4
    111          
    112              return 0;
   \       0x50   0x2000             MOVS     R0,#+0
   \       0x52   0xBD70             POP      {R4-R6,PC}       ;; return
    113          }
    114          

   \                                 In section .text, align 2, keep-with-next
    115          static int iotx_mqtt_offline_subscribe(const char *topic_filter, iotx_mqtt_qos_t qos,
    116                                                 iotx_mqtt_event_handle_func_fpt topic_handle_func, void *pcontext)
    117          {
   \                     iotx_mqtt_offline_subscribe: (+1)
   \        0x0   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \        0x4   0x4604             MOV      R4,R0
   \        0x6   0x460F             MOV      R7,R1
   \        0x8   0x4698             MOV      R8,R3
    118              int ret;
    119          #ifdef PLATFORM_HAS_DYNMEM
    120              iotx_mc_offline_subs_t *sub_info = NULL;
    121          #else
    122              int idx = 0;
    123          #endif
    124          
    125              if (topic_filter == NULL || topic_handle_func == NULL) {
   \        0xA   0x2C00             CMP      R4,#+0
   \        0xC   0xD001             BEQ.N    ??iotx_mqtt_offline_subscribe_0
   \        0xE   0x0016             MOVS     R6,R2
   \       0x10   0xD102             BNE.N    ??iotx_mqtt_offline_subscribe_1
    126                  return NULL_VALUE_ERROR;
   \                     ??iotx_mqtt_offline_subscribe_0: (+1)
   \       0x12   0xF06F 0x0001      MVN      R0,#+1
   \       0x16   0xE06D             B.N      ??iotx_mqtt_offline_subscribe_2
    127              }
    128          
    129              _offline_subs_list_init();
   \                     ??iotx_mqtt_offline_subscribe_1: (+1)
   \       0x18   0x....'....        BL       _offline_subs_list_init
    130          
    131          #ifdef PLATFORM_HAS_DYNMEM
    132              HAL_MutexLock(g_mqtt_offline_subs_list.mutex);
   \       0x1C   0x....'....        LDR.W    R9,??DataTable13
   \       0x20   0xF8D9 0x0004      LDR      R0,[R9, #+4]
   \       0x24   0x....'....        BL       HAL_MutexLock
    133              list_for_each_entry(sub_info, &g_mqtt_offline_subs_list.offline_sub_list, linked_list, iotx_mc_offline_subs_t) {
   \       0x28   0xF8D9 0x000C      LDR      R0,[R9, #+12]
   \       0x2C   0xF1A0 0x0510      SUB      R5,R0,#+16
   \       0x30   0xE002             B.N      ??iotx_mqtt_offline_subscribe_3
   \                     ??iotx_mqtt_offline_subscribe_4: (+1)
   \       0x32   0x6968             LDR      R0,[R5, #+20]
   \       0x34   0xF1A0 0x0510      SUB      R5,R0,#+16
   \                     ??iotx_mqtt_offline_subscribe_3: (+1)
   \       0x38   0xF105 0x0010      ADD      R0,R5,#+16
   \       0x3C   0xF109 0x0108      ADD      R1,R9,#+8
   \       0x40   0x4288             CMP      R0,R1
   \       0x42   0xD059             BEQ.N    ??iotx_mqtt_offline_subscribe_5
    134                  if ((strlen(sub_info->topic_filter) == strlen(topic_filter)) &&
    135                      memcmp(sub_info->topic_filter, topic_filter, strlen(topic_filter)) == 0) {
   \       0x44   0x6828             LDR      R0,[R5, #+0]
   \       0x46   0x....'....        BL       strlen
   \       0x4A   0x4682             MOV      R10,R0
   \       0x4C   0x4620             MOV      R0,R4
   \       0x4E   0x....'....        BL       strlen
   \       0x52   0x4582             CMP      R10,R0
   \       0x54   0xD1ED             BNE.N    ??iotx_mqtt_offline_subscribe_4
   \       0x56   0x4620             MOV      R0,R4
   \       0x58   0x....'....        BL       strlen
   \       0x5C   0x4602             MOV      R2,R0
   \       0x5E   0x4621             MOV      R1,R4
   \       0x60   0x6828             LDR      R0,[R5, #+0]
   \       0x62   0x....'....        BL       memcmp
   \       0x66   0x2800             CMP      R0,#+0
   \       0x68   0xD1E3             BNE.N    ??iotx_mqtt_offline_subscribe_4
    136                      sub_info->qos = qos;
   \       0x6A   0x732F             STRB     R7,[R5, #+12]
    137                      sub_info->handle = topic_handle_func;
   \       0x6C   0x606E             STR      R6,[R5, #+4]
    138                      sub_info->user_data = pcontext;
   \       0x6E   0xF8C5 0x8008      STR      R8,[R5, #+8]
    139                      HAL_MutexUnlock(g_mqtt_offline_subs_list.mutex);
   \       0x72   0xF8D9 0x0004      LDR      R0,[R9, #+4]
   \       0x76   0x....'....        BL       HAL_MutexUnlock
    140                      return SUCCESS_RETURN;
   \       0x7A   0x2000             MOVS     R0,#+0
   \       0x7C   0xE03A             B.N      ??iotx_mqtt_offline_subscribe_2
    141                  }
    142              }
    143          
    144              sub_info = mqtt_api_malloc(sizeof(iotx_mc_offline_subs_t));
    145              if (sub_info == NULL) {
    146                  HAL_MutexUnlock(g_mqtt_offline_subs_list.mutex);
    147                  return ERROR_MALLOC;
    148              }
    149          
    150              memset(sub_info, 0, sizeof(iotx_mc_offline_subs_t));
   \                     ??iotx_mqtt_offline_subscribe_6: (+1)
   \       0x7E   0x2200             MOVS     R2,#+0
   \       0x80   0x2118             MOVS     R1,#+24
   \       0x82   0x....'....        BL       __aeabi_memset4
    151              sub_info->topic_filter = mqtt_api_malloc(strlen(topic_filter) + 1);
   \       0x86   0x4620             MOV      R0,R4
   \       0x88   0x....'....        BL       strlen
   \       0x8C   0x1C40             ADDS     R0,R0,#+1
   \       0x8E   0x....'....        BL       HAL_Malloc
   \       0x92   0x6028             STR      R0,[R5, #+0]
    152              if (sub_info->topic_filter == NULL) {
   \       0x94   0x2800             CMP      R0,#+0
   \       0x96   0xD109             BNE.N    ??iotx_mqtt_offline_subscribe_7
    153                  mqtt_api_free(sub_info);
   \       0x98   0x4628             MOV      R0,R5
   \       0x9A   0x....'....        BL       HAL_Free
    154                  HAL_MutexUnlock(g_mqtt_offline_subs_list.mutex);
   \       0x9E   0xF8D9 0x0004      LDR      R0,[R9, #+4]
   \       0xA2   0x....'....        BL       HAL_MutexUnlock
    155                  return ERROR_MALLOC;
   \       0xA6   0x....'....        LDR.W    R0,??DataTable13_1  ;; 0xfffffc0a
   \       0xAA   0xE023             B.N      ??iotx_mqtt_offline_subscribe_2
    156              }
    157              memset(sub_info->topic_filter, 0, strlen(topic_filter) + 1);
   \                     ??iotx_mqtt_offline_subscribe_7: (+1)
   \       0xAC   0x4620             MOV      R0,R4
   \       0xAE   0x....'....        BL       strlen
   \       0xB2   0x1C40             ADDS     R0,R0,#+1
   \       0xB4   0x2200             MOVS     R2,#+0
   \       0xB6   0x4601             MOV      R1,R0
   \       0xB8   0x6828             LDR      R0,[R5, #+0]
   \       0xBA   0x....'....        BL       __aeabi_memset
    158              strncpy(sub_info->topic_filter, topic_filter, strlen(topic_filter));
   \       0xBE   0x4620             MOV      R0,R4
   \       0xC0   0x....'....        BL       strlen
   \       0xC4   0x4602             MOV      R2,R0
   \       0xC6   0x4621             MOV      R1,R4
   \       0xC8   0x6828             LDR      R0,[R5, #+0]
   \       0xCA   0x....'....        BL       strncpy
    159              sub_info->qos = qos;
   \       0xCE   0x732F             STRB     R7,[R5, #+12]
    160              sub_info->handle = topic_handle_func;
   \       0xD0   0x606E             STR      R6,[R5, #+4]
    161              sub_info->user_data = pcontext;
   \       0xD2   0xF8C5 0x8008      STR      R8,[R5, #+8]
    162              INIT_LIST_HEAD(&sub_info->linked_list);
   \       0xD6   0xF105 0x0010      ADD      R0,R5,#+16
   \       0xDA   0x....'....        BL       INIT_AOS_DLIST_HEAD
    163          
    164              list_add_tail(&sub_info->linked_list, &g_mqtt_offline_subs_list.offline_sub_list);
   \       0xDE   0xF109 0x0108      ADD      R1,R9,#+8
   \       0xE2   0xF105 0x0010      ADD      R0,R5,#+16
   \       0xE6   0x....'....        BL       dlist_add_tail
    165              HAL_MutexUnlock(g_mqtt_offline_subs_list.mutex);
   \       0xEA   0xF8D9 0x0004      LDR      R0,[R9, #+4]
   \       0xEE   0x....'....        BL       HAL_MutexUnlock
    166              ret = SUCCESS_RETURN;
    167          #else
    168              if (strlen(topic_filter) >= CONFIG_MQTT_TOPIC_MAXLEN) {
    169                  return MQTT_TOPIC_LEN_TOO_SHORT;
    170              }
    171          
    172              HAL_MutexLock(g_mqtt_offline_subs_list.mutex);
    173              for (idx = 0; idx < CONFIG_MQTT_OFFLINE_TOPIC_MAXNUM; idx++) {
    174                  if (g_mqtt_offline_subs_list.offline_sub_list[idx].used &&
    175                      (strlen(g_mqtt_offline_subs_list.offline_sub_list[idx].topic_filter) == strlen(topic_filter)) &&
    176                      memcmp(g_mqtt_offline_subs_list.offline_sub_list[idx].topic_filter, topic_filter, strlen(topic_filter)) == 0) {
    177                      g_mqtt_offline_subs_list.offline_sub_list[idx].qos = qos;
    178                      g_mqtt_offline_subs_list.offline_sub_list[idx].handle = topic_handle_func;
    179                      g_mqtt_offline_subs_list.offline_sub_list[idx].user_data = pcontext;
    180                      HAL_MutexUnlock(g_mqtt_offline_subs_list.mutex);
    181                      return SUCCESS_RETURN;
    182                  }
    183              }
    184              for (idx = 0; idx < CONFIG_MQTT_OFFLINE_TOPIC_MAXNUM; idx++) {
    185                  if (g_mqtt_offline_subs_list.offline_sub_list[idx].used == 0) {
    186                      memset(&g_mqtt_offline_subs_list.offline_sub_list[idx], 0, sizeof(iotx_mc_offline_subs_t));
    187                      memcpy(g_mqtt_offline_subs_list.offline_sub_list[idx].topic_filter, topic_filter, strlen(topic_filter));
    188                      g_mqtt_offline_subs_list.offline_sub_list[idx].qos = qos;
    189                      g_mqtt_offline_subs_list.offline_sub_list[idx].handle = topic_handle_func;
    190                      g_mqtt_offline_subs_list.offline_sub_list[idx].user_data = pcontext;
    191                      g_mqtt_offline_subs_list.offline_sub_list[idx].used = 1;
    192                      HAL_MutexUnlock(g_mqtt_offline_subs_list.mutex);
    193                      return SUCCESS_RETURN;
    194                  }
    195              }
    196              HAL_MutexUnlock(g_mqtt_offline_subs_list.mutex);
    197              ret = MQTT_OFFLINE_LIST_LEN_TOO_SHORT;
    198          #endif
    199          
    200              return ret;
   \       0xF2   0x2000             MOVS     R0,#+0
   \                     ??iotx_mqtt_offline_subscribe_2: (+1)
   \       0xF4   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
   \                     ??iotx_mqtt_offline_subscribe_5: (+1)
   \       0xF8   0x2018             MOVS     R0,#+24
   \       0xFA   0x....'....        BL       HAL_Malloc
   \       0xFE   0x0005             MOVS     R5,R0
   \      0x100   0xD1BD             BNE.N    ??iotx_mqtt_offline_subscribe_6
   \      0x102   0xF8D9 0x0004      LDR      R0,[R9, #+4]
   \      0x106   0x....'....        BL       HAL_MutexUnlock
   \      0x10A   0x....'....        LDR.W    R0,??DataTable13_1  ;; 0xfffffc0a
   \      0x10E   0xE7F1             B.N      ??iotx_mqtt_offline_subscribe_2
    201          }
    202          

   \                                 In section .text, align 2, keep-with-next
    203          static int iotx_mqtt_deal_offline_subs(void *client)
    204          {
   \                     iotx_mqtt_deal_offline_subs: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x4605             MOV      R5,R0
    205          #ifdef PLATFORM_HAS_DYNMEM
    206              iotx_mc_offline_subs_t *node = NULL, *next_node = NULL;
    207          #else
    208              int idx;
    209          #endif
    210              if (g_mqtt_offline_subs_list.init == 0) {
   \        0x4   0x....'....        LDR.W    R4,??DataTable13
   \        0x8   0x6820             LDR      R0,[R4, #+0]
   \        0xA   0x2800             CMP      R0,#+0
   \        0xC   0xD101             BNE.N    ??iotx_mqtt_deal_offline_subs_0
    211                  return SUCCESS_RETURN;
   \        0xE   0x2000             MOVS     R0,#+0
   \       0x10   0xBDF2             POP      {R1,R4-R7,PC}
    212              }
    213          
    214              HAL_MutexLock(g_mqtt_offline_subs_list.mutex);
   \                     ??iotx_mqtt_deal_offline_subs_0: (+1)
   \       0x12   0x6860             LDR      R0,[R4, #+4]
   \       0x14   0x....'....        BL       HAL_MutexLock
    215          #ifdef PLATFORM_HAS_DYNMEM
    216              list_for_each_entry_safe(node, next_node, &g_mqtt_offline_subs_list.offline_sub_list, linked_list,
    217                                       iotx_mc_offline_subs_t) {
   \       0x18   0x68E0             LDR      R0,[R4, #+12]
   \       0x1A   0xF1A0 0x0610      SUB      R6,R0,#+16
   \       0x1E   0x6970             LDR      R0,[R6, #+20]
   \       0x20   0xF1A0 0x0710      SUB      R7,R0,#+16
   \       0x24   0xE015             B.N      ??iotx_mqtt_deal_offline_subs_1
    218                  list_del(&node->linked_list);
   \                     ??iotx_mqtt_deal_offline_subs_2: (+1)
   \       0x26   0x....'....        BL       dlist_del
    219                  wrapper_mqtt_subscribe(client, node->topic_filter, node->qos, node->handle, node->user_data);
   \       0x2A   0x68B0             LDR      R0,[R6, #+8]
   \       0x2C   0x9000             STR      R0,[SP, #+0]
   \       0x2E   0x6873             LDR      R3,[R6, #+4]
   \       0x30   0x7B32             LDRB     R2,[R6, #+12]
   \       0x32   0x6831             LDR      R1,[R6, #+0]
   \       0x34   0x4628             MOV      R0,R5
   \       0x36   0x....'....        BL       wrapper_mqtt_subscribe
    220                  mqtt_api_free(node->topic_filter);
   \       0x3A   0x6830             LDR      R0,[R6, #+0]
   \       0x3C   0x....'....        BL       HAL_Free
   \       0x40   0x2000             MOVS     R0,#+0
   \       0x42   0x6030             STR      R0,[R6, #+0]
    221                  mqtt_api_free(node);
   \       0x44   0x4630             MOV      R0,R6
   \       0x46   0x....'....        BL       HAL_Free
    222              }
   \       0x4A   0x463E             MOV      R6,R7
   \       0x4C   0x6978             LDR      R0,[R7, #+20]
   \       0x4E   0xF1A0 0x0710      SUB      R7,R0,#+16
   \                     ??iotx_mqtt_deal_offline_subs_1: (+1)
   \       0x52   0xF106 0x0010      ADD      R0,R6,#+16
   \       0x56   0xF104 0x0108      ADD      R1,R4,#+8
   \       0x5A   0x4288             CMP      R0,R1
   \       0x5C   0xD1E3             BNE.N    ??iotx_mqtt_deal_offline_subs_2
    223          #else
    224              for (idx = 0; idx < CONFIG_MQTT_OFFLINE_TOPIC_MAXNUM; idx++) {
    225                  if (g_mqtt_offline_subs_list.offline_sub_list[idx].used) {
    226                      wrapper_mqtt_subscribe(client, g_mqtt_offline_subs_list.offline_sub_list[idx].topic_filter,
    227                                             g_mqtt_offline_subs_list.offline_sub_list[idx].qos,
    228                                             g_mqtt_offline_subs_list.offline_sub_list[idx].handle,
    229                                             g_mqtt_offline_subs_list.offline_sub_list[idx].user_data);
    230                      g_mqtt_offline_subs_list.offline_sub_list[idx].used = 0;
    231                  }
    232              }
    233          #endif
    234              HAL_MutexUnlock(g_mqtt_offline_subs_list.mutex);
   \       0x5E   0x6860             LDR      R0,[R4, #+4]
   \       0x60   0x....'....        BL       HAL_MutexUnlock
    235          
    236              _offline_subs_list_deinit();
   \       0x64   0x....'....        BL       _offline_subs_list_deinit
    237          
    238              return SUCCESS_RETURN;
   \       0x68   0x2000             MOVS     R0,#+0
   \       0x6A   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    239          }
    240          

   \                                 In section .text, align 2, keep-with-next
    241          static void iotx_mqtt_report_funcs(void *pclient)
    242          {
   \                     iotx_mqtt_report_funcs: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x4604             MOV      R4,R0
    243              int                 err;
    244          
    245              iotx_mqtt_deal_offline_subs(pclient);
   \        0x4   0x....'....        BL       iotx_mqtt_deal_offline_subs
    246          
    247          #ifndef ATHOST_MQTT_REPORT_DISBALED
    248              iotx_set_report_func(IOT_MQTT_Publish_Simple);
   \        0x8   0x....'....        ADR.W    R0,IOT_MQTT_Publish_Simple
   \        0xC   0x....'....        BL       iotx_set_report_func
    249              /* report module id */
    250              err = iotx_report_mid(pclient);
   \       0x10   0x4620             MOV      R0,R4
   \       0x12   0x....'....        BL       iotx_report_mid
    251              if (SUCCESS_RETURN != err) {
    252          #ifdef DEBUG_REPORT_MID_DEVINFO_FIRMWARE
    253                  mqtt_err("failed to report mid");
    254          #endif
    255              }
    256          
    257              /* report device info */
    258              err = iotx_report_devinfo(pclient);
   \       0x16   0x4620             MOV      R0,R4
   \       0x18   0x....'....        BL       iotx_report_devinfo
    259              if (SUCCESS_RETURN != err) {
    260          #ifdef DEBUG_REPORT_MID_DEVINFO_FIRMWARE
    261                  mqtt_err("failed to report devinfo");
    262          #endif
    263              }
    264          
    265              /* report firmware version */
    266          #if !defined(BUILD_AOS) && !defined(MUTE_VERSION_REPORT)
    267              err = iotx_report_firmware_version(pclient);
   \       0x1C   0x4620             MOV      R0,R4
   \       0x1E   0xE8BD 0x4010      POP      {R4,LR}
   \       0x22   0x....'....        B.W      iotx_report_firmware_version
    268          
    269              if (SUCCESS_RETURN != err) {
    270          #ifdef DEBUG_REPORT_MID_DEVINFO_FIRMWARE
    271                  mqtt_err("failed to report firmware version");
    272          #endif
    273              }
    274          #endif
    275          
    276          #endif
    277          }
    278          
    279          #ifdef DYNAMIC_REGISTER
    280          #include "dynreg_api.h"
    281          int HAL_SetDeviceSecret(char *device_secret);
    282          int HAL_GetProductSecret(char *product_secret);
    283          int HAL_Kv_Set(const char *key, const void *val, int len, int sync);
    284          int HAL_Kv_Get(const char *key, void *val, int *buffer_len);
    285          
    286          #define DYNAMIC_REG_KV_PREFIX       "DYNAMIC_REG_"
    287          #define DYNAMIC_REG_KV_PREFIX_LEN   12
    288          
    289          static int _iotx_dynamic_register(iotx_http_region_types_t region, iotx_dev_meta_info_t *meta_info)
    290          {
    291              char device_secret_kv[IOTX_DEVICE_SECRET_LEN + 1] = {0};
    292              int device_secret_len = IOTX_DEVICE_SECRET_LEN;
    293              char kv_key[IOTX_DEVICE_NAME_LEN + DYNAMIC_REG_KV_PREFIX_LEN] = DYNAMIC_REG_KV_PREFIX;
    294              int res = FAIL_RETURN;
    295          
    296              memcpy(kv_key + strlen(kv_key), meta_info->device_name, strlen(meta_info->device_name));
    297          
    298              /* Check if Device Secret exist in KV */
    299              if (HAL_Kv_Get(kv_key, device_secret_kv, &device_secret_len) == 0) {
    300                  mqtt_info("Get DeviceSecret from KV succeed");
    301          
    302                  *(device_secret_kv + device_secret_len) = 0;
    303                  HAL_SetDeviceSecret(device_secret_kv);
    304                  memset(meta_info->device_secret, 0, IOTX_DEVICE_SECRET_LEN + 1);
    305                  memcpy(meta_info->device_secret, device_secret_kv, strlen(device_secret_kv));
    306              } else {
    307                  char product_secret[IOTX_PRODUCT_SECRET_LEN + 1] = {0};
    308          
    309                  /* KV not exit, goto dynamic register */
    310                  mqtt_info("DeviceSecret KV not exist, Now We Need Dynamic Register...");
    311          
    312                  res = IOT_Dynamic_Register(region, meta_info);
    313                  if (res != SUCCESS_RETURN) {
    314                      mqtt_err("Dynamic Register Failed");
    315                      return FAIL_RETURN;
    316                  }
    317          
    318                  device_secret_len = strlen(meta_info->device_secret);
    319                  if (HAL_Kv_Set(kv_key, meta_info->device_secret, device_secret_len, 1) != 0) {
    320                      mqtt_err("Save Device Secret to KV Failed");
    321                      return FAIL_RETURN;
    322                  }
    323          
    324                  HAL_SetDeviceSecret(meta_info->device_secret);
    325              }
    326          
    327              return SUCCESS_RETURN;
    328          }
    329          #endif /* #ifdef DYNAMIC_REGISTER */
    330          
    331          #ifdef MQTT_PRE_AUTH
    332          #include "infra_preauth.h"
    333          extern int _sign_get_clientid(char *clientid_string, const char *device_id);
    334          extern int _iotx_generate_sign_string(const char *device_id, const char *device_name, const char *product_key,
    335                                                const char *device_secret, char *sign_string);
    336          
    337          static int _iotx_preauth(iotx_mqtt_region_types_t region, iotx_dev_meta_info_t *meta,
    338                                   iotx_pre_auth_output_t *preauth_out)
    339          {
    340              uint16_t length = 0;
    341              char device_id[IOTX_PRODUCT_KEY_LEN + IOTX_DEVICE_NAME_LEN + 1] = {0};
    342              char sign_string[65] = {0};
    343              int res;
    344          
    345              memset(preauth_out, 0, sizeof(iotx_pre_auth_output_t));
    346          
    347              /* setup device_id */
    348              memcpy(device_id, meta->product_key, strlen(meta->product_key));
    349              memcpy(device_id + strlen(device_id), ".", strlen("."));
    350              memcpy(device_id + strlen(device_id), meta->device_name, strlen(meta->device_name));
    351          
    352              /* setup clientid */
    353              if (_sign_get_clientid(preauth_out->clientid, device_id) != SUCCESS_RETURN) {
    354                  return ERROR_DEV_SIGN_CLIENT_ID_TOO_SHORT;
    355              }
    356          
    357              /* setup sign_string */
    358              res = _iotx_generate_sign_string(device_id, meta->device_name, meta->product_key, meta->device_secret, sign_string);
    359              if (res < SUCCESS_RETURN) {
    360                  return res;
    361              }
    362          
    363              return preauth_get_connection_info(region, meta, sign_string, device_id, preauth_out);
    364          }
    365          #endif /* #ifdef MQTT_PRE_AUTH */
    366          
    367          /************************  Public Interface ************************/

   \                                 In section .text, align 2, keep-with-next
    368          void *IOT_MQTT_Construct(iotx_mqtt_param_t *pInitParams)
    369          {
   \                     IOT_MQTT_Construct: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0xB0BE             SUB      SP,SP,#+248
   \        0x4   0x4604             MOV      R4,R0
    370              void *pclient;
    371              iotx_dev_meta_info_t meta_info;
    372              iotx_mqtt_param_t mqtt_params;
    373              int region = 0;
   \        0x6   0x2000             MOVS     R0,#+0
   \        0x8   0x9001             STR      R0,[SP, #+4]
    374              int dynamic = 0;
   \        0xA   0x900F             STR      R0,[SP, #+60]
    375              int ret;
    376              void *callback;
    377          
    378              if (g_mqtt_client != NULL) {
   \        0xC   0x....'....        LDR.W    R5,??DataTable13_2
   \       0x10   0x6828             LDR      R0,[R5, #+0]
   \       0x12   0x2800             CMP      R0,#+0
   \       0x14   0xF040 0x80EF      BNE.W    ??IOT_MQTT_Construct_0
    379                  mqtt_err("Already exist default MQTT connection, won't proceed another one");
    380                  return g_mqtt_client;
    381              }
    382          
    383              /* get region */
    384              IOT_Ioctl(IOTX_IOCTL_GET_REGION, (void *)&region);
   \       0x18   0xA901             ADD      R1,SP,#+4
   \       0x1A   0x2001             MOVS     R0,#+1
   \       0x1C   0x....'....        BL       IOT_Ioctl
    385          
    386              /* get dynamic option */
    387              IOT_Ioctl(IOTX_IOCTL_GET_DYNAMIC_REGISTER, (void *)&dynamic);
   \       0x20   0xA90F             ADD      R1,SP,#+60
   \       0x22   0x2005             MOVS     R0,#+5
   \       0x24   0x....'....        BL       IOT_Ioctl
    388          
    389              /* get meta_info from hal */
    390              memset(&meta_info, 0, sizeof(iotx_dev_meta_info_t));
   \       0x28   0x2200             MOVS     R2,#+0
   \       0x2A   0x21B8             MOVS     R1,#+184
   \       0x2C   0xA810             ADD      R0,SP,#+64
   \       0x2E   0x....'....        BL       __aeabi_memset4
    391              HAL_GetProductKey(meta_info.product_key);
   \       0x32   0xA810             ADD      R0,SP,#+64
   \       0x34   0x....'....        BL       HAL_GetProductKey
    392              HAL_GetDeviceName(meta_info.device_name);
   \       0x38   0xF10D 0x0096      ADD      R0,SP,#+150
   \       0x3C   0x....'....        BL       HAL_GetDeviceName
    393          
    394              if (meta_info.product_key[0] == '\0' || meta_info.product_key[IOTX_PRODUCT_KEY_LEN] != '\0') {
   \       0x40   0xF89D 0x0040      LDRB     R0,[SP, #+64]
   \       0x44   0x2800             CMP      R0,#+0
   \       0x46   0xF000 0x80BC      BEQ.W    ??IOT_MQTT_Construct_1
   \       0x4A   0xF89D 0x0054      LDRB     R0,[SP, #+84]
   \       0x4E   0x2800             CMP      R0,#+0
   \       0x50   0xF040 0x80B7      BNE.W    ??IOT_MQTT_Construct_1
    395                  mqtt_err("Invalid product key, abort!");
    396                  return NULL;
    397              }
    398              if (meta_info.device_name[0] == '\0' || meta_info.device_name[IOTX_DEVICE_NAME_LEN] != '\0') {
   \       0x54   0xF89D 0x0096      LDRB     R0,[SP, #+150]
   \       0x58   0x2800             CMP      R0,#+0
   \       0x5A   0xF000 0x80B2      BEQ.W    ??IOT_MQTT_Construct_1
   \       0x5E   0xF89D 0x00B6      LDRB     R0,[SP, #+182]
   \       0x62   0x2800             CMP      R0,#+0
   \       0x64   0xF040 0x80AD      BNE.W    ??IOT_MQTT_Construct_1
    399                  mqtt_err("Invalid device name, abort!");
    400                  return NULL;
    401              }
    402          
    403          #ifdef DYNAMIC_REGISTER /* get device secret through https dynamic register */
    404              if (dynamic) {
    405                  HAL_GetProductSecret(meta_info.product_secret);
    406                  if (meta_info.product_secret[0] == '\0' || meta_info.product_secret[IOTX_PRODUCT_SECRET_LEN] != '\0') {
    407                      mqtt_err("Product Secret doesn't exist");
    408                      return NULL;
    409                  }
    410          
    411                  ret = _iotx_dynamic_register(region, &meta_info);
    412                  if (ret < SUCCESS_RETURN) {
    413                      mqtt_err("ret = _iotx_dynamic_register() = %d, abort", ret);
    414                      return NULL;
    415                  }
    416              } else {
    417                  HAL_GetDeviceSecret(meta_info.device_secret);
    418                  if (meta_info.device_secret[0] == '\0' || meta_info.device_secret[IOTX_DEVICE_SECRET_LEN] != '\0') {
    419                      mqtt_err("Invalid device secret, abort!");
    420                      return NULL;
    421                  }
    422              }
    423          #else /* get device secret from hal */
    424              HAL_GetDeviceSecret(meta_info.device_secret);
   \       0x68   0xF10D 0x00B7      ADD      R0,SP,#+183
   \       0x6C   0x....'....        BL       HAL_GetDeviceSecret
    425              if (meta_info.device_secret[0] == '\0' || meta_info.device_secret[IOTX_DEVICE_SECRET_LEN] != '\0') {
   \       0x70   0xF89D 0x00B7      LDRB     R0,[SP, #+183]
   \       0x74   0x2800             CMP      R0,#+0
   \       0x76   0xF000 0x80A4      BEQ.W    ??IOT_MQTT_Construct_1
   \       0x7A   0xF89D 0x00F7      LDRB     R0,[SP, #+247]
   \       0x7E   0x2800             CMP      R0,#+0
   \       0x80   0xF040 0x809F      BNE.W    ??IOT_MQTT_Construct_1
    426                  mqtt_err("Invalid device secret, abort!");
    427                  return NULL;
    428              }
    429          #endif /* #ifdef DYNAMIC_REGISTER */
    430          
    431          #ifdef MQTT_PRE_AUTH /* preauth mode through https */
    432              ret = _iotx_preauth(region, &meta_info, (iotx_pre_auth_output_t *)&g_default_sign); /* type convert */
    433              if (ret < SUCCESS_RETURN) {
    434                  mqtt_err("ret = _iotx_preauth() = %d, abort", ret);
    435                  return NULL;
    436              }
    437          #else /* direct mode */
    438              ret = IOT_Sign_MQTT(region, &meta_info, &g_default_sign);
                                         ^
Warning[Pe188]: enumerated type mixed with another type
    439              if (ret < SUCCESS_RETURN) {
   \       0x84   0x....'....        LDR.W    R6,??DataTable13_3
   \       0x88   0x4632             MOV      R2,R6
   \       0x8A   0xA910             ADD      R1,SP,#+64
   \       0x8C   0x9801             LDR      R0,[SP, #+4]
   \       0x8E   0xB2C0             UXTB     R0,R0
   \       0x90   0x....'....        BL       IOT_Sign_MQTT
   \       0x94   0x2800             CMP      R0,#+0
   \       0x96   0xF100 0x8094      BMI.W    ??IOT_MQTT_Construct_1
    440                  mqtt_err("ret = IOT_Sign_MQTT() = %d, abort", ret);
    441                  return NULL;
    442              }
    443          #endif /* #ifdef MQTT_PRE_AUTH */
    444          
    445              /* Initialize MQTT parameter */
    446              memset(&mqtt_params, 0x0, sizeof(iotx_mqtt_param_t));
   \       0x9A   0x2200             MOVS     R2,#+0
   \       0x9C   0x2134             MOVS     R1,#+52
   \       0x9E   0xA802             ADD      R0,SP,#+8
   \       0xA0   0x....'....        BL       __aeabi_memset4
    447          
    448          #ifdef SUPPORT_TLS
    449              {
    450                  extern const char *iotx_ca_crt;
    451                  mqtt_params.pub_key = iotx_ca_crt;
   \       0xA4   0x....'....        LDR.W    R0,??DataTable13_4
   \       0xA8   0x6800             LDR      R0,[R0, #+0]
   \       0xAA   0x9007             STR      R0,[SP, #+28]
    452              }
    453          #endif
    454              mqtt_params.request_timeout_ms    = CONFIG_MQTT_REQUEST_TIMEOUT;
   \       0xAC   0xF44F 0x60FA      MOV      R0,#+2000
   \       0xB0   0x9009             STR      R0,[SP, #+36]
    455              mqtt_params.clean_session         = 0;
   \       0xB2   0x2000             MOVS     R0,#+0
   \       0xB4   0xF88D 0x0020      STRB     R0,[SP, #+32]
    456              mqtt_params.keepalive_interval_ms = CONFIG_MQTT_KEEPALIVE_INTERVAL * 1000;
   \       0xB8   0xF64E 0x2060      MOVW     R0,#+60000
   \       0xBC   0x900A             STR      R0,[SP, #+40]
    457              mqtt_params.read_buf_size         = CONFIG_MQTT_MESSAGE_MAXLEN;
   \       0xBE   0xF44F 0x6080      MOV      R0,#+1024
   \       0xC2   0x900C             STR      R0,[SP, #+48]
    458              mqtt_params.write_buf_size        = CONFIG_MQTT_MESSAGE_MAXLEN;
   \       0xC4   0x900B             STR      R0,[SP, #+44]
    459              mqtt_params.handle_event.h_fp     = NULL;
   \       0xC6   0x2000             MOVS     R0,#+0
   \       0xC8   0x900D             STR      R0,[SP, #+52]
    460              mqtt_params.handle_event.pcontext = NULL;
   \       0xCA   0x900E             STR      R0,[SP, #+56]
    461          
    462              /* optional configuration */
    463              if (pInitParams != NULL) {
   \       0xCC   0x2C00             CMP      R4,#+0
   \       0xCE   0xD064             BEQ.N    ??IOT_MQTT_Construct_2
    464                  if (pInitParams->host && strlen(pInitParams->host)) {
   \       0xD0   0x6860             LDR      R0,[R4, #+4]
   \       0xD2   0x2800             CMP      R0,#+0
   \       0xD4   0xD006             BEQ.N    ??IOT_MQTT_Construct_3
   \       0xD6   0x....'....        BL       strlen
   \       0xDA   0x2800             CMP      R0,#+0
   \       0xDC   0xD002             BEQ.N    ??IOT_MQTT_Construct_3
    465                      mqtt_params.host = pInitParams->host;
   \       0xDE   0x6860             LDR      R0,[R4, #+4]
   \       0xE0   0x9003             STR      R0,[SP, #+12]
   \       0xE2   0xE000             B.N      ??IOT_MQTT_Construct_4
    466                  } else {
    467                      mqtt_warning("Using default hostname: '%s'", g_default_sign.hostname);
    468                      mqtt_params.host = g_default_sign.hostname;
   \                     ??IOT_MQTT_Construct_3: (+1)
   \       0xE4   0x9603             STR      R6,[SP, #+12]
    469                  }
    470          
    471                  if (pInitParams->port) {
   \                     ??IOT_MQTT_Construct_4: (+1)
   \       0xE6   0x8820             LDRH     R0,[R4, #+0]
   \       0xE8   0x2800             CMP      R0,#+0
   \       0xEA   0xD002             BEQ.N    ??IOT_MQTT_Construct_5
    472                      mqtt_params.port = pInitParams->port;
   \       0xEC   0xF8AD 0x0008      STRH     R0,[SP, #+8]
   \       0xF0   0xE003             B.N      ??IOT_MQTT_Construct_6
    473                  } else {
    474                      mqtt_warning("Using default port: [%d]", g_default_sign.port);
    475                      mqtt_params.port = g_default_sign.port;
   \                     ??IOT_MQTT_Construct_5: (+1)
   \       0xF2   0xF8B6 0x0040      LDRH     R0,[R6, #+64]
   \       0xF6   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    476                  }
    477          
    478                  if (pInitParams->client_id && strlen(pInitParams->client_id)) {
   \                     ??IOT_MQTT_Construct_6: (+1)
   \       0xFA   0x68A0             LDR      R0,[R4, #+8]
   \       0xFC   0x2800             CMP      R0,#+0
   \       0xFE   0xD006             BEQ.N    ??IOT_MQTT_Construct_7
   \      0x100   0x....'....        BL       strlen
   \      0x104   0x2800             CMP      R0,#+0
   \      0x106   0xD002             BEQ.N    ??IOT_MQTT_Construct_7
    479                      mqtt_params.client_id = pInitParams->client_id;
   \      0x108   0x68A0             LDR      R0,[R4, #+8]
   \      0x10A   0x9004             STR      R0,[SP, #+16]
   \      0x10C   0xE002             B.N      ??IOT_MQTT_Construct_8
    480                  } else {
    481                      mqtt_warning("Using default client_id: %s", g_default_sign.clientid);
    482                      mqtt_params.client_id = g_default_sign.clientid;
   \                     ??IOT_MQTT_Construct_7: (+1)
   \      0x10E   0xF106 0x0042      ADD      R0,R6,#+66
   \      0x112   0x9004             STR      R0,[SP, #+16]
    483                  }
    484          
    485                  if (pInitParams->username && strlen(pInitParams->username)) {
   \                     ??IOT_MQTT_Construct_8: (+1)
   \      0x114   0x68E0             LDR      R0,[R4, #+12]
   \      0x116   0x2800             CMP      R0,#+0
   \      0x118   0xD006             BEQ.N    ??IOT_MQTT_Construct_9
   \      0x11A   0x....'....        BL       strlen
   \      0x11E   0x2800             CMP      R0,#+0
   \      0x120   0xD002             BEQ.N    ??IOT_MQTT_Construct_9
    486                      mqtt_params.username = pInitParams->username;
   \      0x122   0x68E0             LDR      R0,[R4, #+12]
   \      0x124   0x9005             STR      R0,[SP, #+20]
   \      0x126   0xE002             B.N      ??IOT_MQTT_Construct_10
    487                  } else {
    488                      mqtt_warning("Using default username: %s", g_default_sign.username);
    489                      mqtt_params.username = g_default_sign.username;
   \                     ??IOT_MQTT_Construct_9: (+1)
   \      0x128   0xF506 0x7085      ADD      R0,R6,#+266
   \      0x12C   0x9005             STR      R0,[SP, #+20]
    490                  }
    491          
    492                  if (pInitParams->password && strlen(pInitParams->password)) {
   \                     ??IOT_MQTT_Construct_10: (+1)
   \      0x12E   0x6920             LDR      R0,[R4, #+16]
   \      0x130   0x2800             CMP      R0,#+0
   \      0x132   0xD006             BEQ.N    ??IOT_MQTT_Construct_11
   \      0x134   0x....'....        BL       strlen
   \      0x138   0x2800             CMP      R0,#+0
   \      0x13A   0xD002             BEQ.N    ??IOT_MQTT_Construct_11
    493                      mqtt_params.password = pInitParams->password;
   \      0x13C   0x6920             LDR      R0,[R4, #+16]
   \      0x13E   0x9006             STR      R0,[SP, #+24]
   \      0x140   0xE002             B.N      ??IOT_MQTT_Construct_12
    494                  } else {
    495          #if 1
    496                      mqtt_warning("Using default password: %s", "******");
    497          #else
    498                      mqtt_warning("Using default password: %s", g_default_sign.password);
    499          #endif
    500                      mqtt_params.password = g_default_sign.password;
   \                     ??IOT_MQTT_Construct_11: (+1)
   \      0x142   0xF506 0x70A5      ADD      R0,R6,#+330
   \      0x146   0x9006             STR      R0,[SP, #+24]
    501                  }
    502          
    503                  if (pInitParams->request_timeout_ms < CONFIG_MQTT_REQ_TIMEOUT_MIN ||
    504                      pInitParams->request_timeout_ms > CONFIG_MQTT_REQ_TIMEOUT_MAX) {
   \                     ??IOT_MQTT_Construct_12: (+1)
   \      0x148   0x69E0             LDR      R0,[R4, #+28]
   \      0x14A   0xF5A0 0x70FA      SUB      R0,R0,#+500
   \      0x14E   0xF241 0x1195      MOVW     R1,#+4501
   \      0x152   0x4288             CMP      R0,R1
   \      0x154   0xD201             BCS.N    ??IOT_MQTT_Construct_13
    505                      mqtt_warning("Using default request_timeout_ms: %d, configured value(%d) out of [%d, %d]",
    506                                   mqtt_params.request_timeout_ms,
    507                                   pInitParams->request_timeout_ms,
    508                                   CONFIG_MQTT_REQ_TIMEOUT_MIN,
    509                                   CONFIG_MQTT_REQ_TIMEOUT_MAX);
    510                  } else {
    511                      mqtt_params.request_timeout_ms = pInitParams->request_timeout_ms;
   \      0x156   0x69E0             LDR      R0,[R4, #+28]
   \      0x158   0x9009             STR      R0,[SP, #+36]
    512                  }
    513          
    514                  if (pInitParams->clean_session == 0 || pInitParams->clean_session == 1) {
   \                     ??IOT_MQTT_Construct_13: (+1)
   \      0x15A   0x7E20             LDRB     R0,[R4, #+24]
   \      0x15C   0x2800             CMP      R0,#+0
   \      0x15E   0xD001             BEQ.N    ??IOT_MQTT_Construct_14
   \      0x160   0x2801             CMP      R0,#+1
   \      0x162   0xD101             BNE.N    ??IOT_MQTT_Construct_15
    515                      mqtt_params.clean_session = pInitParams->clean_session;
   \                     ??IOT_MQTT_Construct_14: (+1)
   \      0x164   0xF88D 0x0020      STRB     R0,[SP, #+32]
    516                  }
    517          
    518                  if (pInitParams->keepalive_interval_ms < CONFIG_MQTT_KEEPALIVE_INTERVAL_MIN * 1000 ||
    519                      pInitParams->keepalive_interval_ms > CONFIG_MQTT_KEEPALIVE_INTERVAL_MAX * 1000) {
   \                     ??IOT_MQTT_Construct_15: (+1)
   \      0x168   0x6A21             LDR      R1,[R4, #+32]
   \      0x16A   0x....             LDR.N    R0,??DataTable13_5  ;; 0xffff8ad0
   \      0x16C   0x1841             ADDS     R1,R0,R1
   \      0x16E   0x....             LDR.N    R0,??DataTable13_6  ;; 0x249f1
   \      0x170   0x4281             CMP      R1,R0
   \      0x172   0xD201             BCS.N    ??IOT_MQTT_Construct_16
    520                      mqtt_warning("Using default keepalive_interval_ms: %d, configured value(%d) out of [%d, %d]",
    521                                   mqtt_params.keepalive_interval_ms,
    522                                   pInitParams->keepalive_interval_ms,
    523                                   CONFIG_MQTT_KEEPALIVE_INTERVAL_MIN * 1000,
    524                                   CONFIG_MQTT_KEEPALIVE_INTERVAL_MAX * 1000);
    525                  } else {
    526                      mqtt_params.keepalive_interval_ms = pInitParams->keepalive_interval_ms;
   \      0x174   0x6A20             LDR      R0,[R4, #+32]
   \      0x176   0x900A             STR      R0,[SP, #+40]
    527                  }
    528          
    529                  if (!pInitParams->read_buf_size) {
   \                     ??IOT_MQTT_Construct_16: (+1)
   \      0x178   0x6AA0             LDR      R0,[R4, #+40]
   \      0x17A   0x2800             CMP      R0,#+0
   \      0x17C   0xD000             BEQ.N    ??IOT_MQTT_Construct_17
    530                      mqtt_warning("Using default read_buf_size: %d", mqtt_params.read_buf_size);
    531                  } else {
    532                      mqtt_params.read_buf_size = pInitParams->read_buf_size;
   \      0x17E   0x900C             STR      R0,[SP, #+48]
    533                  }
    534          
    535                  if (!pInitParams->write_buf_size) {
   \                     ??IOT_MQTT_Construct_17: (+1)
   \      0x180   0x6A60             LDR      R0,[R4, #+36]
   \      0x182   0x2800             CMP      R0,#+0
   \      0x184   0xD000             BEQ.N    ??IOT_MQTT_Construct_18
    536                      mqtt_warning("Using default write_buf_size: %d", mqtt_params.write_buf_size);
    537                  } else {
    538                      mqtt_params.write_buf_size = pInitParams->write_buf_size;
   \      0x186   0x900B             STR      R0,[SP, #+44]
    539                  }
    540          
    541                  if (pInitParams->handle_event.h_fp != NULL) {
   \                     ??IOT_MQTT_Construct_18: (+1)
   \      0x188   0x6AE0             LDR      R0,[R4, #+44]
   \      0x18A   0x2800             CMP      R0,#+0
   \      0x18C   0xD000             BEQ.N    ??IOT_MQTT_Construct_19
    542                      mqtt_params.handle_event.h_fp = pInitParams->handle_event.h_fp;
   \      0x18E   0x900D             STR      R0,[SP, #+52]
    543                  }
    544          
    545                  if (pInitParams->handle_event.pcontext != NULL) {
   \                     ??IOT_MQTT_Construct_19: (+1)
   \      0x190   0x6B20             LDR      R0,[R4, #+48]
   \      0x192   0x2800             CMP      R0,#+0
   \      0x194   0xD00F             BEQ.N    ??IOT_MQTT_Construct_20
    546                      mqtt_params.handle_event.pcontext = pInitParams->handle_event.pcontext;
   \      0x196   0x900E             STR      R0,[SP, #+56]
   \      0x198   0xE00D             B.N      ??IOT_MQTT_Construct_20
    547                  }
    548              } else {
    549                  mqtt_warning("Using default port: [%d]", g_default_sign.port);
    550                  mqtt_params.port = g_default_sign.port;
   \                     ??IOT_MQTT_Construct_2: (+1)
   \      0x19A   0xF8B6 0x0040      LDRH     R0,[R6, #+64]
   \      0x19E   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    551          
    552                  mqtt_warning("Using default hostname: '%s'", g_default_sign.hostname);
    553                  mqtt_params.host = g_default_sign.hostname;
   \      0x1A2   0x9603             STR      R6,[SP, #+12]
    554          
    555                  mqtt_warning("Using default client_id: %s", g_default_sign.clientid);
    556                  mqtt_params.client_id = g_default_sign.clientid;
   \      0x1A4   0xF106 0x0042      ADD      R0,R6,#+66
   \      0x1A8   0x9004             STR      R0,[SP, #+16]
    557          
    558                  mqtt_warning("Using default username: %s", g_default_sign.username);
    559                  mqtt_params.username = g_default_sign.username;
   \      0x1AA   0xF506 0x7085      ADD      R0,R6,#+266
   \      0x1AE   0x9005             STR      R0,[SP, #+20]
    560          
    561          #if 1
    562                  mqtt_warning("Using default password: %s", "******");
    563          #else
    564                  mqtt_warning("Using default password: %s", g_default_sign.password);
    565          #endif
    566                  mqtt_params.password = g_default_sign.password;
   \      0x1B0   0xF506 0x70A5      ADD      R0,R6,#+330
   \      0x1B4   0x9006             STR      R0,[SP, #+24]
    567              }
    568          
    569              pclient = wrapper_mqtt_init(&mqtt_params);
   \                     ??IOT_MQTT_Construct_20: (+1)
   \      0x1B6   0xA802             ADD      R0,SP,#+8
   \      0x1B8   0x....'....        BL       wrapper_mqtt_init
   \      0x1BC   0x9000             STR      R0,[SP, #+0]
    570              if (pclient == NULL) {
   \      0x1BE   0x2800             CMP      R0,#+0
   \      0x1C0   0xD101             BNE.N    ??IOT_MQTT_Construct_21
    571                  mqtt_err("wrapper_mqtt_init error");
    572                  return NULL;
   \                     ??IOT_MQTT_Construct_1: (+1)
   \      0x1C2   0x2000             MOVS     R0,#+0
   \      0x1C4   0xE017             B.N      ??IOT_MQTT_Construct_0
    573              }
    574          
    575              ret = wrapper_mqtt_connect(pclient);
   \                     ??IOT_MQTT_Construct_21: (+1)
   \      0x1C6   0x....'....        BL       wrapper_mqtt_connect
    576              if (SUCCESS_RETURN != ret) {
   \      0x1CA   0x2800             CMP      R0,#+0
   \      0x1CC   0xD007             BEQ.N    ??IOT_MQTT_Construct_22
    577                  if (MQTT_CONNECT_BLOCK != ret) {
   \      0x1CE   0xF110 0x0F2C      CMN      R0,#+44
   \      0x1D2   0xD004             BEQ.N    ??IOT_MQTT_Construct_22
    578                      mqtt_err("wrapper_mqtt_connect failed");
    579                      wrapper_mqtt_release(&pclient);
   \      0x1D4   0x4668             MOV      R0,SP
   \      0x1D6   0x....'....        BL       wrapper_mqtt_release
    580                      return NULL;
   \      0x1DA   0x2000             MOVS     R0,#+0
   \      0x1DC   0xE00B             B.N      ??IOT_MQTT_Construct_0
    581                  }
    582              }
    583          
    584          #ifndef ASYNC_PROTOCOL_STACK
    585              iotx_mqtt_report_funcs(pclient);
   \                     ??IOT_MQTT_Construct_22: (+1)
   \      0x1DE   0x9800             LDR      R0,[SP, #+0]
   \      0x1E0   0x....'....        BL       iotx_mqtt_report_funcs
    586          #endif
    587          
    588              g_mqtt_client = pclient;
   \      0x1E4   0x9800             LDR      R0,[SP, #+0]
   \      0x1E6   0x6028             STR      R0,[R5, #+0]
    589          
    590              /* Mqtt Connect Callback */
    591              callback = iotx_event_callback(ITE_MQTT_CONNECT_SUCC);
   \      0x1E8   0x2011             MOVS     R0,#+17
   \      0x1EA   0x....'....        BL       iotx_event_callback
    592              if (callback) {
   \      0x1EE   0x2800             CMP      R0,#+0
   \      0x1F0   0xD000             BEQ.N    ??IOT_MQTT_Construct_23
    593                  ((int (*)(void))callback)();
   \      0x1F2   0x4780             BLX      R0
    594              }
    595          
    596              return pclient;
   \                     ??IOT_MQTT_Construct_23: (+1)
   \      0x1F4   0x9800             LDR      R0,[SP, #+0]
   \                     ??IOT_MQTT_Construct_0: (+1)
   \      0x1F6   0xB03E             ADD      SP,SP,#+248
   \      0x1F8   0xBD70             POP      {R4-R6,PC}       ;; return
    597          }
    598          

   \                                 In section .text, align 2, keep-with-next
    599          int IOT_MQTT_Destroy(void **phandler)
    600          {
   \                     IOT_MQTT_Destroy: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    601              void *client;
    602              if (phandler != NULL) {
   \        0x2   0x2800             CMP      R0,#+0
   \        0x4   0xD004             BEQ.N    ??IOT_MQTT_Destroy_0
    603                  client = *phandler;
   \        0x6   0x6801             LDR      R1,[R0, #+0]
   \        0x8   0x9100             STR      R1,[SP, #+0]
    604                  *phandler = NULL;
   \        0xA   0x2100             MOVS     R1,#+0
   \        0xC   0x6001             STR      R1,[R0, #+0]
   \        0xE   0xE002             B.N      ??IOT_MQTT_Destroy_1
    605              } else {
    606                  client = g_mqtt_client;
   \                     ??IOT_MQTT_Destroy_0: (+1)
   \       0x10   0x....             LDR.N    R0,??DataTable13_2
   \       0x12   0x6800             LDR      R0,[R0, #+0]
   \       0x14   0x9000             STR      R0,[SP, #+0]
    607              }
    608          
    609              if (client == NULL) {
   \                     ??IOT_MQTT_Destroy_1: (+1)
   \       0x16   0x9800             LDR      R0,[SP, #+0]
   \       0x18   0x2800             CMP      R0,#+0
   \       0x1A   0xD102             BNE.N    ??IOT_MQTT_Destroy_2
    610                  mqtt_err("handler is null");
    611                  return NULL_VALUE_ERROR;
   \       0x1C   0xF06F 0x0001      MVN      R0,#+1
   \       0x20   0xBD02             POP      {R1,PC}
    612              }
    613          
    614              wrapper_mqtt_release(&client);
   \                     ??IOT_MQTT_Destroy_2: (+1)
   \       0x22   0x4668             MOV      R0,SP
   \       0x24   0x....'....        BL       wrapper_mqtt_release
    615              g_mqtt_client = NULL;
   \       0x28   0x2000             MOVS     R0,#+0
   \       0x2A   0x....             LDR.N    R1,??DataTable13_2
   \       0x2C   0x6008             STR      R0,[R1, #+0]
    616          
    617              return SUCCESS_RETURN;
   \       0x2E   0xBD02             POP      {R1,PC}          ;; return
    618          }
    619          

   \                                 In section .text, align 2, keep-with-next
    620          int IOT_MQTT_Yield(void *handle, int timeout_ms)
    621          {
    622              void *pClient = (handle ? handle : g_mqtt_client);
   \                     IOT_MQTT_Yield: (+1)
   \        0x0   0x2800             CMP      R0,#+0
   \        0x2   0xD101             BNE.N    ??IOT_MQTT_Yield_0
   \        0x4   0x....             LDR.N    R0,??DataTable13_2
   \        0x6   0x6800             LDR      R0,[R0, #+0]
    623              return wrapper_mqtt_yield(pClient, timeout_ms);
   \                     ??IOT_MQTT_Yield_0: (+1)
   \        0x8   0x....'....        B.W      wrapper_mqtt_yield
    624          }
    625          
    626          /* check whether MQTT connection is established or not */

   \                                 In section .text, align 2, keep-with-next
    627          int IOT_MQTT_CheckStateNormal(void *handle)
    628          {
    629              void *pClient = (handle ? handle : g_mqtt_client);
   \                     IOT_MQTT_CheckStateNormal: (+1)
   \        0x0   0x2800             CMP      R0,#+0
   \        0x2   0xD101             BNE.N    ??IOT_MQTT_CheckStateNormal_0
   \        0x4   0x....             LDR.N    R0,??DataTable13_2
   \        0x6   0x6800             LDR      R0,[R0, #+0]
    630              if (pClient == NULL) {
   \                     ??IOT_MQTT_CheckStateNormal_0: (+1)
   \        0x8   0x2800             CMP      R0,#+0
   \        0xA   0xD102             BNE.N    ??IOT_MQTT_CheckStateNormal_1
    631                  mqtt_err("handler is null");
    632                  return NULL_VALUE_ERROR;
   \        0xC   0xF06F 0x0001      MVN      R0,#+1
   \       0x10   0x4770             BX       LR
    633              }
    634          
    635              return wrapper_mqtt_check_state(pClient);
   \                     ??IOT_MQTT_CheckStateNormal_1: (+1)
   \       0x12   0x....'....        B.W      wrapper_mqtt_check_state
    636          }
    637          

   \                                 In section .text, align 2, keep-with-next
    638          int IOT_MQTT_Subscribe(void *handle,
    639                                 const char *topic_filter,
    640                                 iotx_mqtt_qos_t qos,
    641                                 iotx_mqtt_event_handle_func_fpt topic_handle_func,
    642                                 void *pcontext)
    643          {
   \                     IOT_MQTT_Subscribe: (+1)
   \        0x0   0xE92D 0x41FC      PUSH     {R2-R8,LR}
   \        0x4   0x4604             MOV      R4,R0
   \        0x6   0x460D             MOV      R5,R1
   \        0x8   0x4616             MOV      R6,R2
   \        0xA   0x461F             MOV      R7,R3
    644              void *client = handle ? handle : g_mqtt_client;
   \        0xC   0x2C00             CMP      R4,#+0
   \        0xE   0xD101             BNE.N    ??IOT_MQTT_Subscribe_0
   \       0x10   0x....             LDR.N    R0,??DataTable13_2
   \       0x12   0x6804             LDR      R4,[R0, #+0]
   \                     ??IOT_MQTT_Subscribe_0: (+1)
   \       0x14   0xF8DD 0x8020      LDR      R8,[SP, #+32]
    645          
    646              if (client == NULL) { /* do offline subscribe */
   \       0x18   0x2C00             CMP      R4,#+0
   \       0x1A   0xD107             BNE.N    ??IOT_MQTT_Subscribe_1
    647                  return iotx_mqtt_offline_subscribe(topic_filter, qos, topic_handle_func, pcontext);
   \       0x1C   0x4643             MOV      R3,R8
   \       0x1E   0x463A             MOV      R2,R7
   \       0x20   0x4631             MOV      R1,R6
   \       0x22   0x4628             MOV      R0,R5
   \       0x24   0xB002             ADD      SP,SP,#+8
   \       0x26   0xE8BD 0x41F0      POP      {R4-R8,LR}
   \       0x2A   0x....             B.N      iotx_mqtt_offline_subscribe
    648              }
    649          
    650              if (topic_filter == NULL || strlen(topic_filter) == 0 || topic_handle_func == NULL) {
   \                     ??IOT_MQTT_Subscribe_1: (+1)
   \       0x2C   0x2D00             CMP      R5,#+0
   \       0x2E   0xD006             BEQ.N    ??IOT_MQTT_Subscribe_2
   \       0x30   0x4628             MOV      R0,R5
   \       0x32   0x....'....        BL       strlen
   \       0x36   0x2800             CMP      R0,#+0
   \       0x38   0xD001             BEQ.N    ??IOT_MQTT_Subscribe_2
   \       0x3A   0x0038             MOVS     R0,R7
   \       0x3C   0xD102             BNE.N    ??IOT_MQTT_Subscribe_3
    651                  mqtt_err("params err");
    652                  return NULL_VALUE_ERROR;
   \                     ??IOT_MQTT_Subscribe_2: (+1)
   \       0x3E   0xF06F 0x0001      MVN      R0,#+1
   \       0x42   0xE00B             B.N      ??IOT_MQTT_Subscribe_4
    653              }
    654          
    655          #ifdef SUB_PERSISTENCE_ENABLED
    656              if (qos > IOTX_MQTT_QOS3_SUB_LOCAL) {
    657                  mqtt_warning("Invalid qos(%d) out of [%d, %d], using %d",
    658                               qos,
    659                               IOTX_MQTT_QOS0, IOTX_MQTT_QOS3_SUB_LOCAL, IOTX_MQTT_QOS0);
    660                  qos = IOTX_MQTT_QOS0;
    661              }
    662          #else
    663              if (qos > IOTX_MQTT_QOS2) {
   \                     ??IOT_MQTT_Subscribe_3: (+1)
   \       0x44   0x4630             MOV      R0,R6
   \       0x46   0x2803             CMP      R0,#+3
   \       0x48   0xDB00             BLT.N    ??IOT_MQTT_Subscribe_5
    664                  mqtt_warning("Invalid qos(%d) out of [%d, %d], using %d",
    665                               qos,
    666                               IOTX_MQTT_QOS0, IOTX_MQTT_QOS2, IOTX_MQTT_QOS0);
    667                  qos = IOTX_MQTT_QOS0;
   \       0x4A   0x2600             MOVS     R6,#+0
    668              }
    669          #endif
    670          
    671              return wrapper_mqtt_subscribe(client, topic_filter, qos, topic_handle_func, pcontext);
   \                     ??IOT_MQTT_Subscribe_5: (+1)
   \       0x4C   0xF8CD 0x8000      STR      R8,[SP, #+0]
   \       0x50   0x463B             MOV      R3,R7
   \       0x52   0x4632             MOV      R2,R6
   \       0x54   0x4629             MOV      R1,R5
   \       0x56   0x4620             MOV      R0,R4
   \       0x58   0x....'....        BL       wrapper_mqtt_subscribe
   \                     ??IOT_MQTT_Subscribe_4: (+1)
   \       0x5C   0xE8BD 0x81F6      POP      {R1,R2,R4-R8,PC}  ;; return
    672          }
    673          
    674          #define SUBSCRIBE_SYNC_TIMEOUT_MAX 10000

   \                                 In section .text, align 2, keep-with-next
    675          int IOT_MQTT_Subscribe_Sync(void *handle,
    676                                      const char *topic_filter,
    677                                      iotx_mqtt_qos_t qos,
    678                                      iotx_mqtt_event_handle_func_fpt topic_handle_func,
    679                                      void *pcontext,
    680                                      int timeout_ms)
    681          {
   \                     IOT_MQTT_Subscribe_Sync: (+1)
   \        0x0   0xE92D 0x43FE      PUSH     {R1-R9,LR}
   \        0x4   0x4604             MOV      R4,R0
   \        0x6   0x460D             MOV      R5,R1
   \        0x8   0x4616             MOV      R6,R2
   \        0xA   0x461F             MOV      R7,R3
    682              void *client = handle ? handle : g_mqtt_client;
   \        0xC   0x2C00             CMP      R4,#+0
   \        0xE   0xD101             BNE.N    ??IOT_MQTT_Subscribe_Sync_0
   \       0x10   0x....             LDR.N    R0,??DataTable13_2
   \       0x12   0x6804             LDR      R4,[R0, #+0]
   \                     ??IOT_MQTT_Subscribe_Sync_0: (+1)
   \       0x14   0xF8DD 0x8028      LDR      R8,[SP, #+40]
    683          
    684              if (client == NULL) { /* do offline subscribe */
   \       0x18   0x2C00             CMP      R4,#+0
   \       0x1A   0xD107             BNE.N    ??IOT_MQTT_Subscribe_Sync_1
    685                  return iotx_mqtt_offline_subscribe(topic_filter, qos, topic_handle_func, pcontext);
   \       0x1C   0x4643             MOV      R3,R8
   \       0x1E   0x463A             MOV      R2,R7
   \       0x20   0x4631             MOV      R1,R6
   \       0x22   0x4628             MOV      R0,R5
   \       0x24   0xB003             ADD      SP,SP,#+12
   \       0x26   0xE8BD 0x43F0      POP      {R4-R9,LR}
   \       0x2A   0x....             B.N      iotx_mqtt_offline_subscribe
    686              }
   \                     ??IOT_MQTT_Subscribe_Sync_1: (+1)
   \       0x2C   0xF8DD 0x902C      LDR      R9,[SP, #+44]
    687              if (timeout_ms > SUBSCRIBE_SYNC_TIMEOUT_MAX) {
   \       0x30   0xF242 0x7011      MOVW     R0,#+10001
   \       0x34   0x4581             CMP      R9,R0
   \       0x36   0xDB01             BLT.N    ??IOT_MQTT_Subscribe_Sync_2
    688                  timeout_ms = SUBSCRIBE_SYNC_TIMEOUT_MAX;
   \       0x38   0xF242 0x7910      MOVW     R9,#+10000
    689              }
    690          
    691              if (topic_filter == NULL || strlen(topic_filter) == 0 || topic_handle_func == NULL) {
   \                     ??IOT_MQTT_Subscribe_Sync_2: (+1)
   \       0x3C   0x2D00             CMP      R5,#+0
   \       0x3E   0xD006             BEQ.N    ??IOT_MQTT_Subscribe_Sync_3
   \       0x40   0x4628             MOV      R0,R5
   \       0x42   0x....'....        BL       strlen
   \       0x46   0x2800             CMP      R0,#+0
   \       0x48   0xD001             BEQ.N    ??IOT_MQTT_Subscribe_Sync_3
   \       0x4A   0x0038             MOVS     R0,R7
   \       0x4C   0xD102             BNE.N    ??IOT_MQTT_Subscribe_Sync_4
    692                  mqtt_err("params err");
    693                  return NULL_VALUE_ERROR;
   \                     ??IOT_MQTT_Subscribe_Sync_3: (+1)
   \       0x4E   0xF06F 0x0001      MVN      R0,#+1
   \       0x52   0xE00D             B.N      ??IOT_MQTT_Subscribe_Sync_5
    694              }
    695          
    696          #ifdef SUB_PERSISTENCE_ENABLED
    697              if (qos > IOTX_MQTT_QOS3_SUB_LOCAL) {
    698                  mqtt_warning("Invalid qos(%d) out of [%d, %d], using %d",
    699                               qos,
    700                               IOTX_MQTT_QOS0, IOTX_MQTT_QOS3_SUB_LOCAL, IOTX_MQTT_QOS0);
    701                  qos = IOTX_MQTT_QOS0;
    702              }
    703          #else
    704              if (qos > IOTX_MQTT_QOS2) {
   \                     ??IOT_MQTT_Subscribe_Sync_4: (+1)
   \       0x54   0x4630             MOV      R0,R6
   \       0x56   0x2803             CMP      R0,#+3
   \       0x58   0xDB00             BLT.N    ??IOT_MQTT_Subscribe_Sync_6
    705                  mqtt_warning("Invalid qos(%d) out of [%d, %d], using %d",
    706                               qos,
    707                               IOTX_MQTT_QOS0, IOTX_MQTT_QOS2, IOTX_MQTT_QOS0);
    708                  qos = IOTX_MQTT_QOS0;
   \       0x5A   0x2600             MOVS     R6,#+0
    709              }
    710          #endif
    711          
    712              return wrapper_mqtt_subscribe_sync(client, topic_filter, qos, topic_handle_func, pcontext, timeout_ms);
   \                     ??IOT_MQTT_Subscribe_Sync_6: (+1)
   \       0x5C   0xF8CD 0x9004      STR      R9,[SP, #+4]
   \       0x60   0xF8CD 0x8000      STR      R8,[SP, #+0]
   \       0x64   0x463B             MOV      R3,R7
   \       0x66   0x4632             MOV      R2,R6
   \       0x68   0x4629             MOV      R1,R5
   \       0x6A   0x4620             MOV      R0,R4
   \       0x6C   0x....'....        BL       wrapper_mqtt_subscribe_sync
   \                     ??IOT_MQTT_Subscribe_Sync_5: (+1)
   \       0x70   0xE8BD 0x83FE      POP      {R1-R9,PC}       ;; return
    713          }
    714          

   \                                 In section .text, align 2, keep-with-next
    715          int IOT_MQTT_Unsubscribe(void *handle, const char *topic_filter)
    716          {
   \                     IOT_MQTT_Unsubscribe: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
    717              void *client = handle ? handle : g_mqtt_client;
   \        0x6   0x2C00             CMP      R4,#+0
   \        0x8   0xD101             BNE.N    ??IOT_MQTT_Unsubscribe_0
   \        0xA   0x....             LDR.N    R0,??DataTable13_2
   \        0xC   0x6804             LDR      R4,[R0, #+0]
    718          
    719          
    720              if (client == NULL || topic_filter == NULL || strlen(topic_filter) == 0) {
   \                     ??IOT_MQTT_Unsubscribe_0: (+1)
   \        0xE   0x2C00             CMP      R4,#+0
   \       0x10   0xD006             BEQ.N    ??IOT_MQTT_Unsubscribe_1
   \       0x12   0x2D00             CMP      R5,#+0
   \       0x14   0xD004             BEQ.N    ??IOT_MQTT_Unsubscribe_1
   \       0x16   0x4628             MOV      R0,R5
   \       0x18   0x....'....        BL       strlen
   \       0x1C   0x2800             CMP      R0,#+0
   \       0x1E   0xD102             BNE.N    ??IOT_MQTT_Unsubscribe_2
    721                  mqtt_err("params err");
    722                  return NULL_VALUE_ERROR;
   \                     ??IOT_MQTT_Unsubscribe_1: (+1)
   \       0x20   0xF06F 0x0001      MVN      R0,#+1
   \       0x24   0xBD32             POP      {R1,R4,R5,PC}
    723              }
    724          
    725              return wrapper_mqtt_unsubscribe(client, topic_filter);
   \                     ??IOT_MQTT_Unsubscribe_2: (+1)
   \       0x26   0x4629             MOV      R1,R5
   \       0x28   0x4620             MOV      R0,R4
   \       0x2A   0xE8BD 0x4034      POP      {R2,R4,R5,LR}
   \       0x2E   0x....'....        B.W      wrapper_mqtt_unsubscribe
    726          }
    727          

   \                                 In section .text, align 2, keep-with-next
    728          int IOT_MQTT_Publish(void *handle, const char *topic_name, iotx_mqtt_topic_info_pt topic_msg)
    729          {
   \                     IOT_MQTT_Publish: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
   \        0x6   0x4616             MOV      R6,R2
    730              void *client = handle ? handle : g_mqtt_client;
   \        0x8   0x2C00             CMP      R4,#+0
   \        0xA   0xD101             BNE.N    ??IOT_MQTT_Publish_0
   \        0xC   0x....             LDR.N    R0,??DataTable13_2
   \        0xE   0x6804             LDR      R4,[R0, #+0]
    731              int                 rc = -1;
    732          
    733              if (client == NULL || topic_name == NULL || strlen(topic_name) == 0) {
   \                     ??IOT_MQTT_Publish_0: (+1)
   \       0x10   0x2C00             CMP      R4,#+0
   \       0x12   0xD006             BEQ.N    ??IOT_MQTT_Publish_1
   \       0x14   0x2D00             CMP      R5,#+0
   \       0x16   0xD004             BEQ.N    ??IOT_MQTT_Publish_1
   \       0x18   0x4628             MOV      R0,R5
   \       0x1A   0x....'....        BL       strlen
   \       0x1E   0x2800             CMP      R0,#+0
   \       0x20   0xD102             BNE.N    ??IOT_MQTT_Publish_2
    734                  mqtt_err("params err");
    735                  return NULL_VALUE_ERROR;
   \                     ??IOT_MQTT_Publish_1: (+1)
   \       0x22   0xF06F 0x0001      MVN      R0,#+1
   \       0x26   0xBD70             POP      {R4-R6,PC}
    736              }
    737          
    738              rc = wrapper_mqtt_publish(client, topic_name, topic_msg);
    739              return rc;
   \                     ??IOT_MQTT_Publish_2: (+1)
   \       0x28   0x4632             MOV      R2,R6
   \       0x2A   0x4629             MOV      R1,R5
   \       0x2C   0x4620             MOV      R0,R4
   \       0x2E   0xE8BD 0x4070      POP      {R4-R6,LR}
   \       0x32   0x....'....        B.W      wrapper_mqtt_publish
    740          }
    741          

   \                                 In section .text, align 4, keep-with-next
    742          int IOT_MQTT_Publish_Simple(void *handle, const char *topic_name, int qos, void *data, int len)
    743          {
   \                     IOT_MQTT_Publish_Simple: (+1)
   \        0x0   0xE92D 0x41F8      PUSH     {R3-R8,LR}
   \        0x4   0xB085             SUB      SP,SP,#+20
   \        0x6   0x4604             MOV      R4,R0
   \        0x8   0x460D             MOV      R5,R1
   \        0xA   0x4690             MOV      R8,R2
   \        0xC   0x461F             MOV      R7,R3
    744              iotx_mqtt_topic_info_t mqtt_msg;
    745              void *client = handle ? handle : g_mqtt_client;
   \        0xE   0x2C00             CMP      R4,#+0
   \       0x10   0xD101             BNE.N    ??IOT_MQTT_Publish_Simple_0
   \       0x12   0x....             LDR.N    R0,??DataTable13_2
   \       0x14   0x6804             LDR      R4,[R0, #+0]
    746              int rc = -1;
    747          
    748              if (client == NULL || topic_name == NULL || strlen(topic_name) == 0) {
   \                     ??IOT_MQTT_Publish_Simple_0: (+1)
   \       0x16   0x2C00             CMP      R4,#+0
   \       0x18   0xD006             BEQ.N    ??IOT_MQTT_Publish_Simple_1
   \       0x1A   0x2D00             CMP      R5,#+0
   \       0x1C   0xD004             BEQ.N    ??IOT_MQTT_Publish_Simple_1
   \       0x1E   0x4628             MOV      R0,R5
   \       0x20   0x....'....        BL       strlen
   \       0x24   0x2800             CMP      R0,#+0
   \       0x26   0xD102             BNE.N    ??IOT_MQTT_Publish_Simple_2
    749                  mqtt_err("params err");
    750                  return NULL_VALUE_ERROR;
   \                     ??IOT_MQTT_Publish_Simple_1: (+1)
   \       0x28   0xF06F 0x0001      MVN      R0,#+1
   \       0x2C   0xE017             B.N      ??IOT_MQTT_Publish_Simple_3
    751              }
   \                     ??IOT_MQTT_Publish_Simple_2: (+1)
   \       0x2E   0x9E0C             LDR      R6,[SP, #+48]
    752          
    753              memset(&mqtt_msg, 0x0, sizeof(iotx_mqtt_topic_info_t));
   \       0x30   0x2200             MOVS     R2,#+0
   \       0x32   0x2114             MOVS     R1,#+20
   \       0x34   0x4668             MOV      R0,SP
   \       0x36   0x....'....        BL       __aeabi_memset4
    754          
    755              mqtt_msg.qos         = qos;
   \       0x3A   0xF88D 0x8002      STRB     R8,[SP, #+2]
    756              mqtt_msg.retain      = 0;
   \       0x3E   0x2000             MOVS     R0,#+0
   \       0x40   0xF88D 0x0004      STRB     R0,[SP, #+4]
    757              mqtt_msg.dup         = 0;
   \       0x44   0xF88D 0x0003      STRB     R0,[SP, #+3]
    758              mqtt_msg.payload     = (void *)data;
   \       0x48   0x9704             STR      R7,[SP, #+16]
    759              mqtt_msg.payload_len = len;
   \       0x4A   0x9602             STR      R6,[SP, #+8]
    760          
    761              rc = wrapper_mqtt_publish(client, topic_name, &mqtt_msg);
   \       0x4C   0x466A             MOV      R2,SP
   \       0x4E   0x4629             MOV      R1,R5
   \       0x50   0x4620             MOV      R0,R4
   \       0x52   0x....'....        BL       wrapper_mqtt_publish
    762          
    763              if (rc < 0) {
   \       0x56   0x2800             CMP      R0,#+0
   \       0x58   0xD501             BPL.N    ??IOT_MQTT_Publish_Simple_3
    764                  mqtt_err("IOT_MQTT_Publish failed\n");
    765                  return -1;
   \       0x5A   0xF04F 0x30FF      MOV      R0,#-1
    766              }
    767          
    768              return rc;
   \                     ??IOT_MQTT_Publish_Simple_3: (+1)
   \       0x5E   0xB006             ADD      SP,SP,#+24
   \       0x60   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    769          }
    770          

   \                                 In section .text, align 2, keep-with-next
    771          int IOT_MQTT_Nwk_Event_Handler(void *handle, iotx_mqtt_nwk_event_t event, iotx_mqtt_nwk_param_t *param)
    772          {
    773          #ifdef ASYNC_PROTOCOL_STACK
    774              void *client = handle ? handle : g_mqtt_client;
    775              int rc = -1;
    776          
    777              if (client == NULL || event >= IOTX_MQTT_SOC_MAX || param == NULL) {
    778                  mqtt_err("params err");
    779                  return NULL_VALUE_ERROR;
    780              }
    781          
    782              rc = wrapper_mqtt_nwk_event_handler(client, event, param);
    783          
    784              if (rc < 0) {
    785                  mqtt_err("IOT_MQTT_Nwk_Event_Handler failed\n");
    786                  return -1;
    787              }
    788          
    789              switch (event) {
    790                  case IOTX_MQTT_SOC_CONNECTED: {
    791                      iotx_mqtt_report_funcs(client);
    792                  }
    793                  break;
    794                  default: {
    795                  }
    796                  break;
    797              }
    798          
    799              return rc;
    800          #else
    801              return -1;
   \                     IOT_MQTT_Nwk_Event_Handler: (+1)
   \        0x0   0xF04F 0x30FF      MOV      R0,#-1
   \        0x4   0x4770             BX       LR               ;; return
    802          #endif
    803          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13:
   \        0x0   0x....'....        DC32     g_mqtt_offline_subs_list

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_1:
   \        0x0   0xFFFF'FC0A        DC32     0xfffffc0a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_2:
   \        0x0   0x....'....        DC32     g_mqtt_client

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_3:
   \        0x0   0x....'....        DC32     g_default_sign

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_4:
   \        0x0   0x....'....        DC32     iotx_ca_crt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_5:
   \        0x0   0xFFFF'8AD0        DC32     0xffff8ad0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_6:
   \        0x0   0x0002'49F1        DC32     0x249f1

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   INIT_AOS_DLIST_HEAD
       0   IOT_MQTT_CheckStateNormal
         0   -> wrapper_mqtt_check_state
     264   IOT_MQTT_Construct
       264   -- Indirect call
       264   -> HAL_GetDeviceName
       264   -> HAL_GetDeviceSecret
       264   -> HAL_GetProductKey
       264   -> IOT_Ioctl
       264   -> IOT_Sign_MQTT
       264   -> __aeabi_memset4
       264   -> iotx_event_callback
       264   -> iotx_mqtt_report_funcs
       264   -> strlen
       264   -> wrapper_mqtt_connect
       264   -> wrapper_mqtt_init
       264   -> wrapper_mqtt_release
       8   IOT_MQTT_Destroy
         8   -> wrapper_mqtt_release
       0   IOT_MQTT_Nwk_Event_Handler
      16   IOT_MQTT_Publish
        16   -> strlen
         0   -> wrapper_mqtt_publish
      48   IOT_MQTT_Publish_Simple
        48   -> __aeabi_memset4
        48   -> strlen
        48   -> wrapper_mqtt_publish
      32   IOT_MQTT_Subscribe
         0   -> iotx_mqtt_offline_subscribe
        32   -> strlen
        32   -> wrapper_mqtt_subscribe
      40   IOT_MQTT_Subscribe_Sync
         0   -> iotx_mqtt_offline_subscribe
        40   -> strlen
        40   -> wrapper_mqtt_subscribe_sync
      16   IOT_MQTT_Unsubscribe
        16   -> strlen
         0   -> wrapper_mqtt_unsubscribe
       0   IOT_MQTT_Yield
         0   -> wrapper_mqtt_yield
       0   __dlist_add
      16   _offline_subs_list_deinit
        16   -> HAL_Free
        16   -> HAL_MutexDestroy
        16   -> __aeabi_memset4
        16   -> dlist_del
       8   _offline_subs_list_init
         8   -> HAL_MutexCreate
         8   -> INIT_AOS_DLIST_HEAD
         8   -> __aeabi_memset4
       0   dlist_add_tail
         0   -> __dlist_add
       0   dlist_del
      24   iotx_mqtt_deal_offline_subs
        24   -> HAL_Free
        24   -> HAL_MutexLock
        24   -> HAL_MutexUnlock
        24   -> _offline_subs_list_deinit
        24   -> dlist_del
        24   -> wrapper_mqtt_subscribe
      32   iotx_mqtt_offline_subscribe
        32   -> HAL_Free
        32   -> HAL_Malloc
        32   -> HAL_MutexLock
        32   -> HAL_MutexUnlock
        32   -> INIT_AOS_DLIST_HEAD
        32   -> __aeabi_memset
        32   -> __aeabi_memset4
        32   -> _offline_subs_list_init
        32   -> dlist_add_tail
        32   -> memcmp
        32   -> strlen
        32   -> strncpy
       8   iotx_mqtt_report_funcs
         8   -> iotx_mqtt_deal_offline_subs
         8   -> iotx_report_devinfo
         0   -> iotx_report_firmware_version
         8   -> iotx_report_mid
         8   -> iotx_set_report_func


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable13
       4  ??DataTable13_1
       4  ??DataTable13_2
       4  ??DataTable13_3
       4  ??DataTable13_4
       4  ??DataTable13_5
       4  ??DataTable13_6
       6  INIT_AOS_DLIST_HEAD
      22  IOT_MQTT_CheckStateNormal
     506  IOT_MQTT_Construct
      48  IOT_MQTT_Destroy
       6  IOT_MQTT_Nwk_Event_Handler
      54  IOT_MQTT_Publish
     100  IOT_MQTT_Publish_Simple
      96  IOT_MQTT_Subscribe
     116  IOT_MQTT_Subscribe_Sync
      50  IOT_MQTT_Unsubscribe
      12  IOT_MQTT_Yield
      10  __dlist_add
      84  _offline_subs_list_deinit
      48  _offline_subs_list_init
       6  dlist_add_tail
      10  dlist_del
     396  g_default_sign
       4  g_mqtt_client
      16  g_mqtt_offline_subs_list
     108  iotx_mqtt_deal_offline_subs
     272  iotx_mqtt_offline_subscribe
      38  iotx_mqtt_report_funcs

 
   416 bytes in section .bss
 1 620 bytes in section .text
 
 1 620 bytes of CODE memory
   416 bytes of DATA memory

Errors: none
Warnings: 1
