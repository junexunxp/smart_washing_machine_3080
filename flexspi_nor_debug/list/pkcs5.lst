###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.3.193/W32 for ARM         10/Jun/2019  13:48:42
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\Development\smart_washing_machine_3080\mbedtls\library\pkcs5.c
#    Command line =  
#        -f C:\Users\nxf42695\AppData\Local\Temp\1\EW3215.tmp
#        (C:\Development\smart_washing_machine_3080\mbedtls\library\pkcs5.c -D
#        DEBUG -D USE_RTOS -D XIP_EXTERNAL_FLASH=1 -D XIP_BOOT_HEADER_ENABLE=1
#        -D CPU_MIMXRT1052DVL6B -D FSL_RTOS_FREE_RTOS -D PRINTF_ADVANCED_ENABLE
#        -D "MBEDTLS_CONFIG_FILE=\"ksdk_mbedtls_config.h\"" -lC
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list -lA
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list
#        --diag_suppress Pa082,Pa050 -o
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M7 -e --fpu=VFPv5_d16 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.2\arm\inc\c\DLib_Config_Normal.h" --preinclude
#        C:\Development\smart_washing_machine_3080/source\app_preinclude.h -I
#        C:\Development\smart_washing_machine_3080/board\ -I
#        C:\Development\smart_washing_machine_3080/source\ -I
#        C:\Development\smart_washing_machine_3080/CMSIS\ -I
#        C:\Development\smart_washing_machine_3080/amazon-freertos/freertos/portable\
#        -I C:\Development\smart_washing_machine_3080/amazon-freertos/include\
#        -I C:\Development\smart_washing_machine_3080/component/lists\ -I
#        C:\Development\smart_washing_machine_3080/component/serial_manager\ -I
#        C:\Development\smart_washing_machine_3080/component/uart\ -I
#        C:\Development\smart_washing_machine_3080/component/kv\ -I
#        C:\Development\smart_washing_machine_3080/component/kv/include\ -I
#        C:\Development\smart_washing_machine_3080/device\ -I
#        C:\Development\smart_washing_machine_3080/doc\ -I
#        C:\Development\smart_washing_machine_3080/drivers\ -I
#        C:\Development\smart_washing_machine_3080/src\ -I
#        C:\Development\smart_washing_machine_3080/startup\ -I
#        C:\Development\smart_washing_machine_3080/utilities\ -I
#        C:\Development\smart_washing_machine_3080/xip\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\atm\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_model\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_sign\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\infra\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\mqtt\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\wrappers\external_libs\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\coap_cloud\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\CoAPPacket\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\coap_server\server\
#        -I C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\ -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\os\
#        -I
#        C:\Development\smart_washing_machine_3080\csdk\eng\dev_bind\impl\awss_reset\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\mbedtls\
#        -I C:\Development\smart_washing_machine_3080\mbedtls\include\ -I
#        C:\Development\smart_washing_machine_3080\mbedtls\port\ksdk\ -Om)
#    Locale       =  C
#    List file    =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\list\pkcs5.lst
#    Object file  =  
#        C:\Development\smart_washing_machine_3080\flexspi_nor_debug\obj\pkcs5.o
#
###############################################################################

C:\Development\smart_washing_machine_3080\mbedtls\library\pkcs5.c
      1          /**
      2           * \file pkcs5.c
      3           *
      4           * \brief PKCS#5 functions
      5           *
      6           * \author Mathias Olsson <mathias@kompetensum.com>
      7           *
      8           *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
      9           *  SPDX-License-Identifier: Apache-2.0
     10           *
     11           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
     12           *  not use this file except in compliance with the License.
     13           *  You may obtain a copy of the License at
     14           *
     15           *  http://www.apache.org/licenses/LICENSE-2.0
     16           *
     17           *  Unless required by applicable law or agreed to in writing, software
     18           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     19           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     20           *  See the License for the specific language governing permissions and
     21           *  limitations under the License.
     22           *
     23           *  This file is part of mbed TLS (https://tls.mbed.org)
     24           */
     25          /*
     26           * PKCS#5 includes PBKDF2 and more
     27           *
     28           * http://tools.ietf.org/html/rfc2898 (Specification)
     29           * http://tools.ietf.org/html/rfc6070 (Test vectors)
     30           */
     31          
     32          #if !defined(MBEDTLS_CONFIG_FILE)
     33          #include "mbedtls/config.h"
     34          #else
     35          #include MBEDTLS_CONFIG_FILE
     36          #endif
     37          
     38          #if defined(MBEDTLS_PKCS5_C)
     39          
     40          #include "mbedtls/pkcs5.h"
     41          
     42          #if defined(MBEDTLS_ASN1_PARSE_C)
     43          #include "mbedtls/asn1.h"
     44          #include "mbedtls/cipher.h"
     45          #include "mbedtls/oid.h"
     46          #endif /* MBEDTLS_ASN1_PARSE_C */
     47          
     48          #include <string.h>
     49          
     50          #if defined(MBEDTLS_PLATFORM_C)
     51          #include "mbedtls/platform.h"
     52          #else
     53          #include <stdio.h>
     54          #define mbedtls_printf printf
     55          #endif
     56          
     57          #if !defined(MBEDTLS_ASN1_PARSE_C)
     58          int mbedtls_pkcs5_pbes2( const mbedtls_asn1_buf *pbe_params, int mode,
     59                           const unsigned char *pwd,  size_t pwdlen,
     60                           const unsigned char *data, size_t datalen,
     61                           unsigned char *output )
     62          {
     63              ((void) pbe_params);
     64              ((void) mode);
     65              ((void) pwd);
     66              ((void) pwdlen);
     67              ((void) data);
     68              ((void) datalen);
     69              ((void) output);
     70              return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );
     71          }
     72          #else

   \                                 In section .text, align 2, keep-with-next
     73          static int pkcs5_parse_pbkdf2_params( const mbedtls_asn1_buf *params,
     74                                                mbedtls_asn1_buf *salt, int *iterations,
     75                                                int *keylen, mbedtls_md_type_t *md_type )
     76          {
   \                     pkcs5_parse_pbkdf2_params: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0xB084             SUB      SP,SP,#+16
   \        0x4   0x460E             MOV      R6,R1
   \        0x6   0x4614             MOV      R4,R2
   \        0x8   0x461D             MOV      R5,R3
     77              int ret;
     78              mbedtls_asn1_buf prf_alg_oid;
     79              unsigned char *p = params->p;
   \        0xA   0x6881             LDR      R1,[R0, #+8]
   \        0xC   0x9100             STR      R1,[SP, #+0]
     80              const unsigned char *end = params->p + params->len;
   \        0xE   0x6881             LDR      R1,[R0, #+8]
   \       0x10   0x6842             LDR      R2,[R0, #+4]
   \       0x12   0x188F             ADDS     R7,R1,R2
     81          
     82              if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
   \       0x14   0x6800             LDR      R0,[R0, #+0]
   \       0x16   0x2830             CMP      R0,#+48
   \       0x18   0xD002             BEQ.N    ??pkcs5_parse_pbkdf2_params_0
     83                  return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT +
     84                          MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
   \       0x1A   0x....'....        LDR.W    R0,??DataTable2_1  ;; 0xffffd09e
   \       0x1E   0xE042             B.N      ??pkcs5_parse_pbkdf2_params_1
     85              /*
     86               *  PBKDF2-params ::= SEQUENCE {
     87               *    salt              OCTET STRING,
     88               *    iterationCount    INTEGER,
     89               *    keyLength         INTEGER OPTIONAL
     90               *    prf               AlgorithmIdentifier DEFAULT algid-hmacWithSHA1
     91               *  }
     92               *
     93               */
     94              if( ( ret = mbedtls_asn1_get_tag( &p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
   \                     ??pkcs5_parse_pbkdf2_params_0: (+1)
   \       0x20   0x2304             MOVS     R3,#+4
   \       0x22   0x1D32             ADDS     R2,R6,#+4
   \       0x24   0x4639             MOV      R1,R7
   \       0x26   0x4668             MOV      R0,SP
   \       0x28   0x....'....        BL       mbedtls_asn1_get_tag
   \       0x2C   0x2800             CMP      R0,#+0
   \       0x2E   0xD127             BNE.N    ??pkcs5_parse_pbkdf2_params_2
     95                  return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );
     96          
     97              salt->p = p;
   \       0x30   0x9800             LDR      R0,[SP, #+0]
   \       0x32   0x60B0             STR      R0,[R6, #+8]
     98              p += salt->len;
   \       0x34   0x9800             LDR      R0,[SP, #+0]
   \       0x36   0x6871             LDR      R1,[R6, #+4]
   \       0x38   0x4408             ADD      R0,R0,R1
   \       0x3A   0x9000             STR      R0,[SP, #+0]
     99          
    100              if( ( ret = mbedtls_asn1_get_int( &p, end, iterations ) ) != 0 )
   \       0x3C   0x4622             MOV      R2,R4
   \       0x3E   0x4639             MOV      R1,R7
   \       0x40   0x4668             MOV      R0,SP
   \       0x42   0x....'....        BL       mbedtls_asn1_get_int
   \       0x46   0x2800             CMP      R0,#+0
   \       0x48   0xD11A             BNE.N    ??pkcs5_parse_pbkdf2_params_2
    101                  return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );
    102          
    103              if( p == end )
   \       0x4A   0x9800             LDR      R0,[SP, #+0]
   \       0x4C   0x42B8             CMP      R0,R7
   \       0x4E   0xD101             BNE.N    ??pkcs5_parse_pbkdf2_params_3
    104                  return( 0 );
   \       0x50   0x2000             MOVS     R0,#+0
   \       0x52   0xE028             B.N      ??pkcs5_parse_pbkdf2_params_1
    105          
    106              if( ( ret = mbedtls_asn1_get_int( &p, end, keylen ) ) != 0 )
   \                     ??pkcs5_parse_pbkdf2_params_3: (+1)
   \       0x54   0x462A             MOV      R2,R5
   \       0x56   0x4639             MOV      R1,R7
   \       0x58   0x4668             MOV      R0,SP
   \       0x5A   0x....'....        BL       mbedtls_asn1_get_int
   \       0x5E   0x2800             CMP      R0,#+0
   \       0x60   0xD002             BEQ.N    ??pkcs5_parse_pbkdf2_params_4
    107              {
    108                  if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   \       0x62   0xF110 0x0F62      CMN      R0,#+98
   \       0x66   0xD10B             BNE.N    ??pkcs5_parse_pbkdf2_params_2
    109                      return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );
    110              }
    111          
    112              if( p == end )
   \                     ??pkcs5_parse_pbkdf2_params_4: (+1)
   \       0x68   0x9800             LDR      R0,[SP, #+0]
   \       0x6A   0x42B8             CMP      R0,R7
   \       0x6C   0xD101             BNE.N    ??pkcs5_parse_pbkdf2_params_5
    113                  return( 0 );
   \       0x6E   0x2000             MOVS     R0,#+0
   \       0x70   0xE019             B.N      ??pkcs5_parse_pbkdf2_params_1
    114          
    115              if( ( ret = mbedtls_asn1_get_alg_null( &p, end, &prf_alg_oid ) ) != 0 )
   \                     ??pkcs5_parse_pbkdf2_params_5: (+1)
   \       0x72   0xAA01             ADD      R2,SP,#+4
   \       0x74   0x4639             MOV      R1,R7
   \       0x76   0x4668             MOV      R0,SP
   \       0x78   0x....'....        BL       mbedtls_asn1_get_alg_null
   \       0x7C   0x2800             CMP      R0,#+0
   \       0x7E   0xD002             BEQ.N    ??pkcs5_parse_pbkdf2_params_6
    116                  return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );
   \                     ??pkcs5_parse_pbkdf2_params_2: (+1)
   \       0x80   0xF5A0 0x503C      SUB      R0,R0,#+12032
   \       0x84   0xE00F             B.N      ??pkcs5_parse_pbkdf2_params_1
   \                     ??pkcs5_parse_pbkdf2_params_6: (+1)
   \       0x86   0x990A             LDR      R1,[SP, #+40]
    117          
    118              if( mbedtls_oid_get_md_hmac( &prf_alg_oid, md_type ) != 0 )
   \       0x88   0xA801             ADD      R0,SP,#+4
   \       0x8A   0x....'....        BL       mbedtls_oid_get_md_hmac
   \       0x8E   0x2800             CMP      R0,#+0
   \       0x90   0xD002             BEQ.N    ??pkcs5_parse_pbkdf2_params_7
    119                  return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );
   \       0x92   0x....'....        LDR.W    R0,??DataTable2_2  ;; 0xffffd180
   \       0x96   0xE006             B.N      ??pkcs5_parse_pbkdf2_params_1
    120          
    121              if( p != end )
   \                     ??pkcs5_parse_pbkdf2_params_7: (+1)
   \       0x98   0x9800             LDR      R0,[SP, #+0]
   \       0x9A   0x42B8             CMP      R0,R7
   \       0x9C   0xD002             BEQ.N    ??pkcs5_parse_pbkdf2_params_8
    122                  return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT +
    123                          MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   \       0x9E   0x....'....        LDR.W    R0,??DataTable2_3  ;; 0xffffd09a
   \       0xA2   0xE000             B.N      ??pkcs5_parse_pbkdf2_params_1
    124          
    125              return( 0 );
   \                     ??pkcs5_parse_pbkdf2_params_8: (+1)
   \       0xA4   0x2000             MOVS     R0,#+0
   \                     ??pkcs5_parse_pbkdf2_params_1: (+1)
   \       0xA6   0xB005             ADD      SP,SP,#+20
   \       0xA8   0xBDF0             POP      {R4-R7,PC}       ;; return
    126          }
    127          

   \                                 In section .text, align 2, keep-with-next
    128          int mbedtls_pkcs5_pbes2( const mbedtls_asn1_buf *pbe_params, int mode,
    129                           const unsigned char *pwd,  size_t pwdlen,
    130                           const unsigned char *data, size_t datalen,
    131                           unsigned char *output )
    132          {
   \                     mbedtls_pkcs5_pbes2: (+1)
   \        0x0   0xE92D 0x41F8      PUSH     {R3-R8,LR}
   \        0x4   0xB0BB             SUB      SP,SP,#+236
   \        0x6   0x460E             MOV      R6,R1
   \        0x8   0x4617             MOV      R7,R2
   \        0xA   0x4698             MOV      R8,R3
    133              int ret, iterations = 0, keylen = 0;
   \        0xC   0x2100             MOVS     R1,#+0
   \        0xE   0x9107             STR      R1,[SP, #+28]
   \       0x10   0x9106             STR      R1,[SP, #+24]
    134              unsigned char *p, *end;
    135              mbedtls_asn1_buf kdf_alg_oid, enc_scheme_oid, kdf_alg_params, enc_scheme_params;
    136              mbedtls_asn1_buf salt;
    137              mbedtls_md_type_t md_type = MBEDTLS_MD_SHA1;
   \       0x12   0x2104             MOVS     R1,#+4
   \       0x14   0xF88D 0x1011      STRB     R1,[SP, #+17]
    138              unsigned char key[32], iv[32];
    139              size_t olen = 0;
   \       0x18   0x2100             MOVS     R1,#+0
   \       0x1A   0x9108             STR      R1,[SP, #+32]
    140              const mbedtls_md_info_t *md_info;
    141              const mbedtls_cipher_info_t *cipher_info;
    142              mbedtls_md_context_t md_ctx;
    143              mbedtls_cipher_type_t cipher_alg;
    144              mbedtls_cipher_context_t cipher_ctx;
    145          
    146              p = pbe_params->p;
   \       0x1C   0x6881             LDR      R1,[R0, #+8]
   \       0x1E   0x9105             STR      R1,[SP, #+20]
    147              end = p + pbe_params->len;
   \       0x20   0x6842             LDR      R2,[R0, #+4]
   \       0x22   0x188D             ADDS     R5,R1,R2
    148          
    149              /*
    150               *  PBES2-params ::= SEQUENCE {
    151               *    keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},
    152               *    encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}
    153               *  }
    154               */
    155              if( pbe_params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
   \       0x24   0x6800             LDR      R0,[R0, #+0]
   \       0x26   0x2830             CMP      R0,#+48
   \       0x28   0xD001             BEQ.N    ??mbedtls_pkcs5_pbes2_0
    156                  return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT +
    157                          MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
   \       0x2A   0x....             LDR.N    R0,??DataTable2_1  ;; 0xffffd09e
   \       0x2C   0xE095             B.N      ??mbedtls_pkcs5_pbes2_1
    158          
    159              if( ( ret = mbedtls_asn1_get_alg( &p, end, &kdf_alg_oid, &kdf_alg_params ) ) != 0 )
   \                     ??mbedtls_pkcs5_pbes2_0: (+1)
   \       0x2E   0xAB12             ADD      R3,SP,#+72
   \       0x30   0xAA18             ADD      R2,SP,#+96
   \       0x32   0x4629             MOV      R1,R5
   \       0x34   0xA805             ADD      R0,SP,#+20
   \       0x36   0x....'....        BL       mbedtls_asn1_get_alg
   \       0x3A   0x2800             CMP      R0,#+0
   \       0x3C   0xD128             BNE.N    ??mbedtls_pkcs5_pbes2_2
    160                  return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );
    161          
    162              // Only PBKDF2 supported at the moment
    163              //
    164              if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS5_PBKDF2, &kdf_alg_oid ) != 0 )
   \       0x3E   0x9819             LDR      R0,[SP, #+100]
   \       0x40   0x2809             CMP      R0,#+9
   \       0x42   0xD109             BNE.N    ??mbedtls_pkcs5_pbes2_3
   \       0x44   0x2209             MOVS     R2,#+9
   \       0x46   0x991A             LDR      R1,[SP, #+104]
   \       0x48   0x....             LDR.N    R0,??DataTable2_4
   \       0x4A   0x....'....        BL       memcmp
   \       0x4E   0x1E40             SUBS     R0,R0,#+1
   \       0x50   0x4180             SBCS     R0,R0,R0
   \       0x52   0x43C0             MVNS     R0,R0
   \       0x54   0x0FC0             LSRS     R0,R0,#+31
   \       0x56   0xE000             B.N      ??mbedtls_pkcs5_pbes2_4
   \                     ??mbedtls_pkcs5_pbes2_3: (+1)
   \       0x58   0x2001             MOVS     R0,#+1
   \                     ??mbedtls_pkcs5_pbes2_4: (+1)
   \       0x5A   0x2800             CMP      R0,#+0
   \       0x5C   0xD127             BNE.N    ??mbedtls_pkcs5_pbes2_5
    165                  return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );
    166          
    167              if( ( ret = pkcs5_parse_pbkdf2_params( &kdf_alg_params,
    168                                                     &salt, &iterations, &keylen,
    169                                                     &md_type ) ) != 0 )
   \       0x5E   0xF10D 0x0011      ADD      R0,SP,#+17
   \       0x62   0x9000             STR      R0,[SP, #+0]
   \       0x64   0xAB06             ADD      R3,SP,#+24
   \       0x66   0xAA07             ADD      R2,SP,#+28
   \       0x68   0xA90F             ADD      R1,SP,#+60
   \       0x6A   0xA812             ADD      R0,SP,#+72
   \       0x6C   0x....'....        BL       pkcs5_parse_pbkdf2_params
   \       0x70   0x2800             CMP      R0,#+0
   \       0x72   0xD172             BNE.N    ??mbedtls_pkcs5_pbes2_1
    170              {
    171                  return( ret );
    172              }
    173          
    174              md_info = mbedtls_md_info_from_type( md_type );
   \       0x74   0xF89D 0x0011      LDRB     R0,[SP, #+17]
   \       0x78   0x....'....        BL       mbedtls_md_info_from_type
   \       0x7C   0x0004             MOVS     R4,R0
    175              if( md_info == NULL )
   \       0x7E   0xD016             BEQ.N    ??mbedtls_pkcs5_pbes2_5
    176                  return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );
    177          
    178              if( ( ret = mbedtls_asn1_get_alg( &p, end, &enc_scheme_oid,
    179                                        &enc_scheme_params ) ) != 0 )
   \       0x80   0xAB09             ADD      R3,SP,#+36
   \       0x82   0xAA15             ADD      R2,SP,#+84
   \       0x84   0x4629             MOV      R1,R5
   \       0x86   0xA805             ADD      R0,SP,#+20
   \       0x88   0x....'....        BL       mbedtls_asn1_get_alg
   \       0x8C   0x2800             CMP      R0,#+0
   \       0x8E   0xD002             BEQ.N    ??mbedtls_pkcs5_pbes2_6
    180              {
    181                  return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );
   \                     ??mbedtls_pkcs5_pbes2_2: (+1)
   \       0x90   0xF5A0 0x503C      SUB      R0,R0,#+12032
   \       0x94   0xE061             B.N      ??mbedtls_pkcs5_pbes2_1
    182              }
    183          
    184              if( mbedtls_oid_get_cipher_alg( &enc_scheme_oid, &cipher_alg ) != 0 )
   \                     ??mbedtls_pkcs5_pbes2_6: (+1)
   \       0x96   0xA904             ADD      R1,SP,#+16
   \       0x98   0xA815             ADD      R0,SP,#+84
   \       0x9A   0x....'....        BL       mbedtls_oid_get_cipher_alg
   \       0x9E   0x2800             CMP      R0,#+0
   \       0xA0   0xD105             BNE.N    ??mbedtls_pkcs5_pbes2_5
    185                  return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );
    186          
    187              cipher_info = mbedtls_cipher_info_from_type( cipher_alg );
   \       0xA2   0xF89D 0x0010      LDRB     R0,[SP, #+16]
   \       0xA6   0x....'....        BL       mbedtls_cipher_info_from_type
   \       0xAA   0x0005             MOVS     R5,R0
    188              if( cipher_info == NULL )
   \       0xAC   0xD101             BNE.N    ??mbedtls_pkcs5_pbes2_7
    189                  return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );
   \                     ??mbedtls_pkcs5_pbes2_5: (+1)
   \       0xAE   0x....             LDR.N    R0,??DataTable2_2  ;; 0xffffd180
   \       0xB0   0xE053             B.N      ??mbedtls_pkcs5_pbes2_1
    190          
    191              /*
    192               * The value of keylen from pkcs5_parse_pbkdf2_params() is ignored
    193               * since it is optional and we don't know if it was set or not
    194               */
    195              keylen = cipher_info->key_bitlen / 8;
   \                     ??mbedtls_pkcs5_pbes2_7: (+1)
   \       0xB2   0x6868             LDR      R0,[R5, #+4]
   \       0xB4   0x08C0             LSRS     R0,R0,#+3
   \       0xB6   0x9006             STR      R0,[SP, #+24]
    196          
    197              if( enc_scheme_params.tag != MBEDTLS_ASN1_OCTET_STRING ||
    198                  enc_scheme_params.len != cipher_info->iv_size )
   \       0xB8   0x9809             LDR      R0,[SP, #+36]
   \       0xBA   0x2804             CMP      R0,#+4
   \       0xBC   0xD103             BNE.N    ??mbedtls_pkcs5_pbes2_8
   \       0xBE   0x980A             LDR      R0,[SP, #+40]
   \       0xC0   0x68E9             LDR      R1,[R5, #+12]
   \       0xC2   0x4288             CMP      R0,R1
   \       0xC4   0xD001             BEQ.N    ??mbedtls_pkcs5_pbes2_9
    199              {
    200                  return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT );
   \                     ??mbedtls_pkcs5_pbes2_8: (+1)
   \       0xC6   0x....             LDR.N    R0,??DataTable2_5  ;; 0xffffd100
   \       0xC8   0xE047             B.N      ??mbedtls_pkcs5_pbes2_1
    201              }
    202          
    203              mbedtls_md_init( &md_ctx );
   \                     ??mbedtls_pkcs5_pbes2_9: (+1)
   \       0xCA   0xA80C             ADD      R0,SP,#+48
   \       0xCC   0x....'....        BL       mbedtls_md_init
    204              mbedtls_cipher_init( &cipher_ctx );
   \       0xD0   0xA81B             ADD      R0,SP,#+108
   \       0xD2   0x....'....        BL       mbedtls_cipher_init
    205          
    206              memcpy( iv, enc_scheme_params.p, enc_scheme_params.len );
   \       0xD6   0x9A0A             LDR      R2,[SP, #+40]
   \       0xD8   0x990B             LDR      R1,[SP, #+44]
   \       0xDA   0xA82B             ADD      R0,SP,#+172
   \       0xDC   0x....'....        BL       __aeabi_memcpy
    207          
    208              if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
   \       0xE0   0x2201             MOVS     R2,#+1
   \       0xE2   0x4621             MOV      R1,R4
   \       0xE4   0xA80C             ADD      R0,SP,#+48
   \       0xE6   0x....'....        BL       mbedtls_md_setup
   \       0xEA   0x0004             MOVS     R4,R0
   \       0xEC   0xD12E             BNE.N    ??mbedtls_pkcs5_pbes2_10
    209                  goto exit;
    210          
    211              if( ( ret = mbedtls_pkcs5_pbkdf2_hmac( &md_ctx, pwd, pwdlen, salt.p, salt.len,
    212                                             iterations, keylen, key ) ) != 0 )
   \       0xEE   0xA833             ADD      R0,SP,#+204
   \       0xF0   0x9003             STR      R0,[SP, #+12]
   \       0xF2   0x9806             LDR      R0,[SP, #+24]
   \       0xF4   0x9002             STR      R0,[SP, #+8]
   \       0xF6   0x9807             LDR      R0,[SP, #+28]
   \       0xF8   0x9001             STR      R0,[SP, #+4]
   \       0xFA   0x9810             LDR      R0,[SP, #+64]
   \       0xFC   0x9000             STR      R0,[SP, #+0]
   \       0xFE   0x9B11             LDR      R3,[SP, #+68]
   \      0x100   0x4642             MOV      R2,R8
   \      0x102   0x4639             MOV      R1,R7
   \      0x104   0xA80C             ADD      R0,SP,#+48
   \      0x106   0x....'....        BL       mbedtls_pkcs5_pbkdf2_hmac
   \      0x10A   0x0004             MOVS     R4,R0
   \      0x10C   0xD11E             BNE.N    ??mbedtls_pkcs5_pbes2_10
    213              {
    214                  goto exit;
    215              }
    216          
    217              if( ( ret = mbedtls_cipher_setup( &cipher_ctx, cipher_info ) ) != 0 )
   \      0x10E   0x4629             MOV      R1,R5
   \      0x110   0xA81B             ADD      R0,SP,#+108
   \      0x112   0x....'....        BL       mbedtls_cipher_setup
   \      0x116   0x0004             MOVS     R4,R0
   \      0x118   0xD118             BNE.N    ??mbedtls_pkcs5_pbes2_10
    218                  goto exit;
    219          
    220              if( ( ret = mbedtls_cipher_setkey( &cipher_ctx, key, 8 * keylen, (mbedtls_operation_t) mode ) ) != 0 )
   \      0x11A   0x4633             MOV      R3,R6
   \      0x11C   0xB25B             SXTB     R3,R3
   \      0x11E   0x9A06             LDR      R2,[SP, #+24]
   \      0x120   0x00D2             LSLS     R2,R2,#+3
   \      0x122   0xA933             ADD      R1,SP,#+204
   \      0x124   0xA81B             ADD      R0,SP,#+108
   \      0x126   0x....'....        BL       mbedtls_cipher_setkey
   \      0x12A   0x0004             MOVS     R4,R0
   \      0x12C   0xD10E             BNE.N    ??mbedtls_pkcs5_pbes2_10
   \      0x12E   0x9944             LDR      R1,[SP, #+272]
   \      0x130   0x9843             LDR      R0,[SP, #+268]
   \      0x132   0x9B42             LDR      R3,[SP, #+264]
    221                  goto exit;
    222          
    223              if( ( ret = mbedtls_cipher_crypt( &cipher_ctx, iv, enc_scheme_params.len,
    224                                        data, datalen, output, &olen ) ) != 0 )
   \      0x134   0xAA08             ADD      R2,SP,#+32
   \      0x136   0x9202             STR      R2,[SP, #+8]
   \      0x138   0x9101             STR      R1,[SP, #+4]
   \      0x13A   0x9000             STR      R0,[SP, #+0]
   \      0x13C   0x9A0A             LDR      R2,[SP, #+40]
   \      0x13E   0xA92B             ADD      R1,SP,#+172
   \      0x140   0xA81B             ADD      R0,SP,#+108
   \      0x142   0x....'....        BL       mbedtls_cipher_crypt
   \      0x146   0x0004             MOVS     R4,R0
   \      0x148   0xD000             BEQ.N    ??mbedtls_pkcs5_pbes2_10
    225                  ret = MBEDTLS_ERR_PKCS5_PASSWORD_MISMATCH;
   \      0x14A   0x....             LDR.N    R4,??DataTable2_6  ;; 0xffffd200
    226          
    227          exit:
    228              mbedtls_md_free( &md_ctx );
   \                     ??mbedtls_pkcs5_pbes2_10: (+1)
   \      0x14C   0xA80C             ADD      R0,SP,#+48
   \      0x14E   0x....'....        BL       mbedtls_md_free
    229              mbedtls_cipher_free( &cipher_ctx );
   \      0x152   0xA81B             ADD      R0,SP,#+108
   \      0x154   0x....'....        BL       mbedtls_cipher_free
    230          
    231              return( ret );
   \      0x158   0x4620             MOV      R0,R4
   \                     ??mbedtls_pkcs5_pbes2_1: (+1)
   \      0x15A   0xB03C             ADD      SP,SP,#+240
   \      0x15C   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    232          }
    233          #endif /* MBEDTLS_ASN1_PARSE_C */
    234          

   \                                 In section .text, align 2, keep-with-next
    235          int mbedtls_pkcs5_pbkdf2_hmac( mbedtls_md_context_t *ctx, const unsigned char *password,
    236                                 size_t plen, const unsigned char *salt, size_t slen,
    237                                 unsigned int iteration_count,
    238                                 uint32_t key_length, unsigned char *output )
    239          {
   \                     mbedtls_pkcs5_pbkdf2_hmac: (+1)
   \        0x0   0xE92D 0x4FFC      PUSH     {R2-R11,LR}
   \        0x4   0xB0A1             SUB      SP,SP,#+132
   \        0x6   0x4605             MOV      R5,R0
   \        0x8   0x460E             MOV      R6,R1
   \        0xA   0x4617             MOV      R7,R2
   \        0xC   0xF8DD 0x80B4      LDR      R8,[SP, #+180]
   \       0x10   0x9C2E             LDR      R4,[SP, #+184]
   \       0x12   0xF8DD 0xA0BC      LDR      R10,[SP, #+188]
    240              int ret, j;
    241              unsigned int i;
    242              unsigned char md1[MBEDTLS_MD_MAX_SIZE];
    243              unsigned char work[MBEDTLS_MD_MAX_SIZE];
    244              unsigned char md_size = mbedtls_md_get_size( ctx->md_info );
   \       0x16   0x6828             LDR      R0,[R5, #+0]
   \       0x18   0x....'....        BL       mbedtls_md_get_size
   \       0x1C   0x4681             MOV      R9,R0
    245              size_t use_len;
    246              unsigned char *out_p = output;
    247              unsigned char counter[4];
    248          
    249              memset( counter, 0, 4 );
   \       0x1E   0x2200             MOVS     R2,#+0
   \       0x20   0x2104             MOVS     R1,#+4
   \       0x22   0x4668             MOV      R0,SP
   \       0x24   0x....'....        BL       __aeabi_memset4
    250              counter[3] = 1;
   \       0x28   0x2001             MOVS     R0,#+1
   \       0x2A   0xF88D 0x0003      STRB     R0,[SP, #+3]
    251          
    252          #if UINT_MAX > 0xFFFFFFFF
    253              if( iteration_count > 0xFFFFFFFF )
    254                  return( MBEDTLS_ERR_PKCS5_BAD_INPUT_DATA );
    255          #endif
    256          
    257              while( key_length )
   \                     ??mbedtls_pkcs5_pbkdf2_hmac_0: (+1)
   \       0x2E   0x2C00             CMP      R4,#+0
   \       0x30   0xD065             BEQ.N    ??mbedtls_pkcs5_pbkdf2_hmac_1
    258              {
    259                  // U1 ends up in work
    260                  //
    261                  if( ( ret = mbedtls_md_hmac_starts( ctx, password, plen ) ) != 0 )
   \       0x32   0x463A             MOV      R2,R7
   \       0x34   0x4631             MOV      R1,R6
   \       0x36   0x4628             MOV      R0,R5
   \       0x38   0x....'....        BL       mbedtls_md_hmac_starts
   \       0x3C   0x2800             CMP      R0,#+0
   \       0x3E   0xD15F             BNE.N    ??mbedtls_pkcs5_pbkdf2_hmac_2
    262                      return( ret );
    263          
    264                  if( ( ret = mbedtls_md_hmac_update( ctx, salt, slen ) ) != 0 )
   \       0x40   0x9A2C             LDR      R2,[SP, #+176]
   \       0x42   0x9922             LDR      R1,[SP, #+136]
   \       0x44   0x4628             MOV      R0,R5
   \       0x46   0x....'....        BL       mbedtls_md_hmac_update
   \       0x4A   0x2800             CMP      R0,#+0
   \       0x4C   0xD158             BNE.N    ??mbedtls_pkcs5_pbkdf2_hmac_2
    265                      return( ret );
    266          
    267                  if( ( ret = mbedtls_md_hmac_update( ctx, counter, 4 ) ) != 0 )
   \       0x4E   0x2204             MOVS     R2,#+4
   \       0x50   0x4669             MOV      R1,SP
   \       0x52   0x4628             MOV      R0,R5
   \       0x54   0x....'....        BL       mbedtls_md_hmac_update
   \       0x58   0x2800             CMP      R0,#+0
   \       0x5A   0xD151             BNE.N    ??mbedtls_pkcs5_pbkdf2_hmac_2
    268                      return( ret );
    269          
    270                  if( ( ret = mbedtls_md_hmac_finish( ctx, work ) ) != 0 )
   \       0x5C   0xA901             ADD      R1,SP,#+4
   \       0x5E   0x4628             MOV      R0,R5
   \       0x60   0x....'....        BL       mbedtls_md_hmac_finish
   \       0x64   0x2800             CMP      R0,#+0
   \       0x66   0xD14B             BNE.N    ??mbedtls_pkcs5_pbkdf2_hmac_2
    271                      return( ret );
    272          
    273                  memcpy( md1, work, md_size );
   \       0x68   0x464A             MOV      R2,R9
   \       0x6A   0xA901             ADD      R1,SP,#+4
   \       0x6C   0xA811             ADD      R0,SP,#+68
   \       0x6E   0x....'....        BL       __aeabi_memcpy4
    274          
    275                  for( i = 1; i < iteration_count; i++ )
   \       0x72   0xF04F 0x0B01      MOV      R11,#+1
   \       0x76   0xE009             B.N      ??mbedtls_pkcs5_pbkdf2_hmac_3
    276                  {
    277                      // U2 ends up in md1
    278                      //
    279                      if( ( ret = mbedtls_md_hmac_starts( ctx, password, plen ) ) != 0 )
    280                          return( ret );
    281          
    282                      if( ( ret = mbedtls_md_hmac_update( ctx, md1, md_size ) ) != 0 )
    283                          return( ret );
    284          
    285                      if( ( ret = mbedtls_md_hmac_finish( ctx, md1 ) ) != 0 )
    286                          return( ret );
    287          
    288                      // U1 xor U2
    289                      //
    290                      for( j = 0; j < md_size; j++ )
    291                          work[j] ^= md1[j];
   \                     ??mbedtls_pkcs5_pbkdf2_hmac_4: (+1)
   \       0x78   0x5C0A             LDRB     R2,[R1, R0]
   \       0x7A   0xAB11             ADD      R3,SP,#+68
   \       0x7C   0x5C1B             LDRB     R3,[R3, R0]
   \       0x7E   0x405A             EORS     R2,R3,R2
   \       0x80   0x540A             STRB     R2,[R1, R0]
   \       0x82   0x1C40             ADDS     R0,R0,#+1
   \                     ??mbedtls_pkcs5_pbkdf2_hmac_5: (+1)
   \       0x84   0x4548             CMP      R0,R9
   \       0x86   0xDBF7             BLT.N    ??mbedtls_pkcs5_pbkdf2_hmac_4
   \       0x88   0xF10B 0x0B01      ADD      R11,R11,#+1
   \                     ??mbedtls_pkcs5_pbkdf2_hmac_3: (+1)
   \       0x8C   0x45C3             CMP      R11,R8
   \       0x8E   0xD216             BCS.N    ??mbedtls_pkcs5_pbkdf2_hmac_6
   \       0x90   0x463A             MOV      R2,R7
   \       0x92   0x4631             MOV      R1,R6
   \       0x94   0x4628             MOV      R0,R5
   \       0x96   0x....'....        BL       mbedtls_md_hmac_starts
   \       0x9A   0x2800             CMP      R0,#+0
   \       0x9C   0xD130             BNE.N    ??mbedtls_pkcs5_pbkdf2_hmac_2
   \       0x9E   0x464A             MOV      R2,R9
   \       0xA0   0xA911             ADD      R1,SP,#+68
   \       0xA2   0x4628             MOV      R0,R5
   \       0xA4   0x....'....        BL       mbedtls_md_hmac_update
   \       0xA8   0x2800             CMP      R0,#+0
   \       0xAA   0xD129             BNE.N    ??mbedtls_pkcs5_pbkdf2_hmac_2
   \       0xAC   0xA911             ADD      R1,SP,#+68
   \       0xAE   0x4628             MOV      R0,R5
   \       0xB0   0x....'....        BL       mbedtls_md_hmac_finish
   \       0xB4   0x2800             CMP      R0,#+0
   \       0xB6   0xD123             BNE.N    ??mbedtls_pkcs5_pbkdf2_hmac_2
   \       0xB8   0x2000             MOVS     R0,#+0
   \       0xBA   0xA901             ADD      R1,SP,#+4
   \       0xBC   0xE7E2             B.N      ??mbedtls_pkcs5_pbkdf2_hmac_5
    292                  }
    293          
    294                  use_len = ( key_length < md_size ) ? key_length : md_size;
   \                     ??mbedtls_pkcs5_pbkdf2_hmac_6: (+1)
   \       0xBE   0x46A3             MOV      R11,R4
   \       0xC0   0x454C             CMP      R4,R9
   \       0xC2   0xD900             BLS.N    ??mbedtls_pkcs5_pbkdf2_hmac_7
   \       0xC4   0x46CB             MOV      R11,R9
    295                  memcpy( out_p, work, use_len );
   \                     ??mbedtls_pkcs5_pbkdf2_hmac_7: (+1)
   \       0xC6   0x465A             MOV      R2,R11
   \       0xC8   0xA901             ADD      R1,SP,#+4
   \       0xCA   0x4650             MOV      R0,R10
   \       0xCC   0x....'....        BL       __aeabi_memcpy
    296          
    297                  key_length -= (uint32_t) use_len;
   \       0xD0   0xEBA4 0x040B      SUB      R4,R4,R11
    298                  out_p += use_len;
   \       0xD4   0x44DA             ADD      R10,R10,R11
    299          
    300                  for( i = 4; i > 0; i-- )
   \       0xD6   0x2004             MOVS     R0,#+4
   \                     ??mbedtls_pkcs5_pbkdf2_hmac_8: (+1)
   \       0xD8   0x2800             CMP      R0,#+0
   \       0xDA   0xD0A8             BEQ.N    ??mbedtls_pkcs5_pbkdf2_hmac_0
    301                      if( ++counter[i - 1] != 0 )
   \       0xDC   0x4669             MOV      R1,SP
   \       0xDE   0x4401             ADD      R1,R1,R0
   \       0xE0   0xF811 0x1C01      LDRB     R1,[R1, #-1]
   \       0xE4   0x1C49             ADDS     R1,R1,#+1
   \       0xE6   0x466A             MOV      R2,SP
   \       0xE8   0x4402             ADD      R2,R2,R0
   \       0xEA   0xF802 0x1C01      STRB     R1,[R2, #-1]
   \       0xEE   0x4669             MOV      R1,SP
   \       0xF0   0x4401             ADD      R1,R1,R0
   \       0xF2   0xF811 0x1C01      LDRB     R1,[R1, #-1]
   \       0xF6   0x2900             CMP      R1,#+0
   \       0xF8   0xD199             BNE.N    ??mbedtls_pkcs5_pbkdf2_hmac_0
   \       0xFA   0x1E40             SUBS     R0,R0,#+1
   \       0xFC   0xE7EC             B.N      ??mbedtls_pkcs5_pbkdf2_hmac_8
    302                          break;
    303              }
    304          
    305              return( 0 );
   \                     ??mbedtls_pkcs5_pbkdf2_hmac_1: (+1)
   \       0xFE   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_pkcs5_pbkdf2_hmac_2: (+1)
   \      0x100   0xB023             ADD      SP,SP,#+140
   \      0x102   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    306          }
    307          
    308          #if defined(MBEDTLS_SELF_TEST)
    309          
    310          #if !defined(MBEDTLS_SHA1_C)
    311          int mbedtls_pkcs5_self_test( int verbose )
    312          {
    313              if( verbose != 0 )
    314                  mbedtls_printf( "  PBKDF2 (SHA1): skipped\n\n" );
    315          
    316              return( 0 );
    317          }
    318          #else
    319          
    320          #define MAX_TESTS   6
    321          

   \                                 In section .rodata, align 4
    322          static const size_t plen[MAX_TESTS] =
   \                     plen:
   \        0x0   0x0000'0008        DC32 8, 8, 8, 24, 9, 0
   \              0x0000'0008  
   \              0x0000'0008  
   \              0x0000'0018  
   \              0x0000'0009  
   \              0x0000'0000  
    323              { 8, 8, 8, 24, 9 };
    324          

   \                                 In section .rodata, align 4
    325          static const unsigned char password[MAX_TESTS][32] =
   \                     password:
   \        0x0   0x70 0x61          DC8 "password"
   \              0x73 0x73    
   \              0x77 0x6F    
   \              0x72 0x64    
   \              0x00         
   \        0x9   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \       0x20   0x70 0x61          DC8 "password"
   \              0x73 0x73    
   \              0x77 0x6F    
   \              0x72 0x64    
   \              0x00         
   \       0x29   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \       0x40   0x70 0x61          DC8 "password"
   \              0x73 0x73    
   \              0x77 0x6F    
   \              0x72 0x64    
   \              0x00         
   \       0x49   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \       0x60   0x70 0x61          DC8 "passwordPASSWORDpassword"
   \              0x73 0x73    
   \              0x77 0x6F    
   \              0x72 0x64    
   \              0x50 0x41    
   \              0x53 0x53    
   \              0x57 0x4F    
   \              0x52 0x44    
   \              0x70 0x61    
   \              0x73 0x73    
   \              0x77 0x6F    
   \              0x72 0x64    
   \              0x00         
   \       0x79   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \       0x80   0x70 0x61          DC8 70H, 61H, 73H, 73H, 0, 77H, 6FH, 72H
   \              0x73 0x73    
   \              0x00 0x77    
   \              0x6F 0x72    
   \       0x88   0x64 0x00          DC8 64H, 0
   \       0x8A   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \       0xA0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \       0xB0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
    326          {
    327              "password",
    328              "password",
    329              "password",
    330              "passwordPASSWORDpassword",
    331              "pass\0word",
    332          };
    333          

   \                                 In section .rodata, align 4
    334          static const size_t slen[MAX_TESTS] =
   \                     slen:
   \        0x0   0x0000'0004        DC32 4, 4, 4, 36, 5, 0
   \              0x0000'0004  
   \              0x0000'0004  
   \              0x0000'0024  
   \              0x0000'0005  
   \              0x0000'0000  
    335              { 4, 4, 4, 36, 5 };
    336          

   \                                 In section .rodata, align 4
    337          static const unsigned char salt[MAX_TESTS][40] =
   \                     salt:
   \        0x0   0x73 0x61          DC8 "salt"
   \              0x6C 0x74    
   \              0x00         
   \        0x5   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \       0x15   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \       0x28   0x73 0x61          DC8 "salt"
   \              0x6C 0x74    
   \              0x00         
   \       0x2D   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \       0x3D   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \       0x50   0x73 0x61          DC8 "salt"
   \              0x6C 0x74    
   \              0x00         
   \       0x55   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \       0x65   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \       0x78   0x73 0x61          DC8 "saltSALTsaltSALTsaltSALTsaltSALTsalt"
   \              0x6C 0x74    
   \              0x53 0x41    
   \              0x4C 0x54    
   \              0x73 0x61    
   \              0x6C 0x74    
   \              0x53 0x41    
   \              0x4C 0x54    
   \              0x73 0x61    
   \              0x6C 0x74    
   \              0x53 0x41    
   \              0x4C 0x54    
   \              0x73 0x61    
   \              0x6C 0x74    
   \              0x53 0x41    
   \              0x4C 0x54    
   \              0x73 0x61    
   \              0x6C 0x74    
   \              0x00         
   \       0x9D   0x00 0x00          DC8 0, 0, 0
   \              0x00         
   \       0xA0   0x73 0x61          DC8 73H, 61H, 0, 6CH, 74H, 0
   \              0x00 0x6C    
   \              0x74 0x00    
   \       0xA6   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \       0xB6   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \       0xC8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \       0xD8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \       0xE8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
    338          {
    339              "salt",
    340              "salt",
    341              "salt",
    342              "saltSALTsaltSALTsaltSALTsaltSALTsalt",
    343              "sa\0lt",
    344          };
    345          

   \                                 In section .rodata, align 4
    346          static const uint32_t it_cnt[MAX_TESTS] =
   \                     it_cnt:
   \        0x0   0x0000'0001        DC32 1, 2, 4096, 4096, 4096, 0
   \              0x0000'0002  
   \              0x0000'1000  
   \              0x0000'1000  
   \              0x0000'1000  
   \              0x0000'0000  
    347              { 1, 2, 4096, 4096, 4096 };
    348          

   \                                 In section .rodata, align 4
    349          static const uint32_t key_len[MAX_TESTS] =
   \                     key_len:
   \        0x0   0x0000'0014        DC32 20, 20, 20, 25, 16, 0
   \              0x0000'0014  
   \              0x0000'0014  
   \              0x0000'0019  
   \              0x0000'0010  
   \              0x0000'0000  
    350              { 20, 20, 20, 25, 16 };
    351          

   \                                 In section .rodata, align 4
    352          static const unsigned char result_key[MAX_TESTS][32] =
   \                     result_key:
   \        0x0   0x0C 0x60          DC8 12, 96, 200, 15, 150, 31, 14, 113, 243, 169, 181, 36, 175, 96, 18
   \              0xC8 0x0F    
   \              0x96 0x1F    
   \              0x0E 0x71    
   \              0xF3 0xA9    
   \              0xB5 0x24    
   \              0xAF 0x60    
   \              0x12         
   \        0xF   0x06 0x2F          DC8 6, 47, 224, 55, 166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 234, 108
   \              0xE0 0x37    
   \              0xA6 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0xEA    
   \              0x6C         
   \       0x22   0x01 0x4D          DC8 1, 77, 199, 45, 111, 140, 205, 30, 217, 42, 206, 29, 65, 240, 216
   \              0xC7 0x2D    
   \              0x6F 0x8C    
   \              0xCD 0x1E    
   \              0xD9 0x2A    
   \              0xCE 0x1D    
   \              0x41 0xF0    
   \              0xD8         
   \       0x31   0xDE 0x89          DC8 222, 137, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 0, 121, 1
   \              0x57 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x4B    
   \              0x00 0x79    
   \              0x01         
   \       0x44   0xB7 0x65          DC8 183, 101, 72, 154, 190, 173, 73, 217, 38, 247, 33, 208, 101, 164
   \              0x48 0x9A    
   \              0xBE 0xAD    
   \              0x49 0xD9    
   \              0x26 0xF7    
   \              0x21 0xD0    
   \              0x65 0xA4    
   \       0x52   0x29 0xC1          DC8 41, 193, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61, 46, 236, 79, 228
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x3D 0x2E    
   \              0xEC 0x4F    
   \              0xE4         
   \       0x65   0x1C 0x84          DC8 28, 132, 155, 128, 200, 216, 54, 98, 192, 228, 74, 139, 41, 26, 150
   \              0x9B 0x80    
   \              0xC8 0xD8    
   \              0x36 0x62    
   \              0xC0 0xE4    
   \              0x4A 0x8B    
   \              0x29 0x1A    
   \              0x96         
   \       0x74   0x4C 0xF2          DC8 76, 242, 240, 112, 56, 0, 0, 0, 0, 0, 0, 0, 86, 250, 106, 167, 85
   \              0xF0 0x70    
   \              0x38 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x56 0xFA    
   \              0x6A 0xA7    
   \              0x55         
   \       0x85   0x48 0x09          DC8 72, 9, 157, 204, 55, 215, 240, 52, 37, 224, 195, 0, 0, 0, 0, 0, 0
   \              0x9D 0xCC    
   \              0x37 0xD7    
   \              0xF0 0x34    
   \              0x25 0xE0    
   \              0xC3 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \       0x96   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \       0xAD   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
    353          {
    354              { 0x0c, 0x60, 0xc8, 0x0f, 0x96, 0x1f, 0x0e, 0x71,
    355                0xf3, 0xa9, 0xb5, 0x24, 0xaf, 0x60, 0x12, 0x06,
    356                0x2f, 0xe0, 0x37, 0xa6 },
    357              { 0xea, 0x6c, 0x01, 0x4d, 0xc7, 0x2d, 0x6f, 0x8c,
    358                0xcd, 0x1e, 0xd9, 0x2a, 0xce, 0x1d, 0x41, 0xf0,
    359                0xd8, 0xde, 0x89, 0x57 },
    360              { 0x4b, 0x00, 0x79, 0x01, 0xb7, 0x65, 0x48, 0x9a,
    361                0xbe, 0xad, 0x49, 0xd9, 0x26, 0xf7, 0x21, 0xd0,
    362                0x65, 0xa4, 0x29, 0xc1 },
    363              { 0x3d, 0x2e, 0xec, 0x4f, 0xe4, 0x1c, 0x84, 0x9b,
    364                0x80, 0xc8, 0xd8, 0x36, 0x62, 0xc0, 0xe4, 0x4a,
    365                0x8b, 0x29, 0x1a, 0x96, 0x4c, 0xf2, 0xf0, 0x70,
    366                0x38 },
    367              { 0x56, 0xfa, 0x6a, 0xa7, 0x55, 0x48, 0x09, 0x9d,
    368                0xcc, 0x37, 0xd7, 0xf0, 0x34, 0x25, 0xe0, 0xc3 },
    369          };
    370          

   \                                 In section .text, align 2, keep-with-next
    371          int mbedtls_pkcs5_self_test( int verbose )
    372          {
   \                     mbedtls_pkcs5_self_test: (+1)
   \        0x0   0xB5F0             PUSH     {R4-R7,LR}
   \        0x2   0xB097             SUB      SP,SP,#+92
   \        0x4   0x4605             MOV      R5,R0
    373              mbedtls_md_context_t sha1_ctx;
    374              const mbedtls_md_info_t *info_sha1;
    375              int ret, i;
    376              unsigned char key[64];
    377          
    378              mbedtls_md_init( &sha1_ctx );
   \        0x6   0xA804             ADD      R0,SP,#+16
   \        0x8   0x....'....        BL       mbedtls_md_init
    379          
    380              info_sha1 = mbedtls_md_info_from_type( MBEDTLS_MD_SHA1 );
   \        0xC   0x2004             MOVS     R0,#+4
   \        0xE   0x....'....        BL       mbedtls_md_info_from_type
   \       0x12   0x0001             MOVS     R1,R0
    381              if( info_sha1 == NULL )
   \       0x14   0xD04D             BEQ.N    ??mbedtls_pkcs5_self_test_0
    382              {
    383                  ret = 1;
    384                  goto exit;
    385              }
    386          
    387              if( ( ret = mbedtls_md_setup( &sha1_ctx, info_sha1, 1 ) ) != 0 )
   \       0x16   0x2201             MOVS     R2,#+1
   \       0x18   0xA804             ADD      R0,SP,#+16
   \       0x1A   0x....'....        BL       mbedtls_md_setup
   \       0x1E   0x0006             MOVS     R6,R0
   \       0x20   0xD147             BNE.N    ??mbedtls_pkcs5_self_test_0
    388              {
    389                  ret = 1;
    390                  goto exit;
    391              }
    392          
    393              for( i = 0; i < MAX_TESTS; i++ )
   \       0x22   0x2700             MOVS     R7,#+0
   \       0x24   0x....             LDR.N    R4,??DataTable2_7
   \                     ??mbedtls_pkcs5_self_test_1: (+1)
   \       0x26   0x2F06             CMP      R7,#+6
   \       0x28   0xDA33             BGE.N    ??mbedtls_pkcs5_self_test_2
    394              {
    395                  if( verbose != 0 )
   \       0x2A   0x2D00             CMP      R5,#+0
   \       0x2C   0xD003             BEQ.N    ??mbedtls_pkcs5_self_test_3
    396                      mbedtls_printf( "  PBKDF2 (SHA1) #%d: ", i );
   \       0x2E   0x4639             MOV      R1,R7
   \       0x30   0x....             LDR.N    R0,??DataTable2_8
   \       0x32   0x....'....        BL       DbgConsole_Printf
    397          
    398                  ret = mbedtls_pkcs5_pbkdf2_hmac( &sha1_ctx, password[i], plen[i], salt[i],
    399                                            slen[i], it_cnt[i], key_len[i], key );
   \                     ??mbedtls_pkcs5_self_test_3: (+1)
   \       0x36   0xA807             ADD      R0,SP,#+28
   \       0x38   0x9003             STR      R0,[SP, #+12]
   \       0x3A   0xF854 0x0027      LDR      R0,[R4, R7, LSL #+2]
   \       0x3E   0x9002             STR      R0,[SP, #+8]
   \       0x40   0x....             LDR.N    R0,??DataTable2_9
   \       0x42   0xF850 0x0027      LDR      R0,[R0, R7, LSL #+2]
   \       0x46   0x9001             STR      R0,[SP, #+4]
   \       0x48   0x....             LDR.N    R0,??DataTable2_10
   \       0x4A   0xF850 0x0027      LDR      R0,[R0, R7, LSL #+2]
   \       0x4E   0x9000             STR      R0,[SP, #+0]
   \       0x50   0x....             LDR.N    R0,??DataTable2_11
   \       0x52   0xEB07 0x0187      ADD      R1,R7,R7, LSL #+2
   \       0x56   0xEB10 0x03C1      ADDS     R3,R0,R1, LSL #+3
   \       0x5A   0x....             LDR.N    R0,??DataTable2_12
   \       0x5C   0xF850 0x2027      LDR      R2,[R0, R7, LSL #+2]
   \       0x60   0x....             LDR.N    R0,??DataTable2_13
   \       0x62   0xEB00 0x1147      ADD      R1,R0,R7, LSL #+5
   \       0x66   0xA804             ADD      R0,SP,#+16
   \       0x68   0x....'....        BL       mbedtls_pkcs5_pbkdf2_hmac
   \       0x6C   0x0006             MOVS     R6,R0
    400                  if( ret != 0 ||
    401                      memcmp( result_key[i], key, key_len[i] ) != 0 )
   \       0x6E   0xD11B             BNE.N    ??mbedtls_pkcs5_self_test_4
   \       0x70   0xF854 0x2027      LDR      R2,[R4, R7, LSL #+2]
   \       0x74   0xA907             ADD      R1,SP,#+28
   \       0x76   0x....             LDR.N    R0,??DataTable2_14
   \       0x78   0xEB00 0x1047      ADD      R0,R0,R7, LSL #+5
   \       0x7C   0x....'....        BL       memcmp
   \       0x80   0x2800             CMP      R0,#+0
   \       0x82   0xD111             BNE.N    ??mbedtls_pkcs5_self_test_4
    402                  {
    403                      if( verbose != 0 )
    404                          mbedtls_printf( "failed\n\r" );
    405          
    406                      ret = 1;
    407                      goto exit;
    408                  }
    409          
    410                  if( verbose != 0 )
   \       0x84   0x2D00             CMP      R5,#+0
   \       0x86   0xD002             BEQ.N    ??mbedtls_pkcs5_self_test_5
    411                      mbedtls_printf( "passed\n\r" );
   \       0x88   0x....             LDR.N    R0,??DataTable2_15
   \       0x8A   0x....'....        BL       DbgConsole_Printf
   \                     ??mbedtls_pkcs5_self_test_5: (+1)
   \       0x8E   0x1C7F             ADDS     R7,R7,#+1
   \       0x90   0xE7C9             B.N      ??mbedtls_pkcs5_self_test_1
    412              }
    413          
    414              if( verbose != 0 )
   \                     ??mbedtls_pkcs5_self_test_2: (+1)
   \       0x92   0x2D00             CMP      R5,#+0
   \       0x94   0xD002             BEQ.N    ??mbedtls_pkcs5_self_test_6
    415                  mbedtls_printf( "\n\r" );
   \       0x96   0x....             ADR.N    R0,??DataTable2  ;; 0x0A, 0x0D, 0x00, 0x00
   \       0x98   0x....'....        BL       DbgConsole_Printf
    416          
    417          exit:
    418              mbedtls_md_free( &sha1_ctx );
   \                     ??mbedtls_pkcs5_self_test_6: (+1)
   \       0x9C   0xA804             ADD      R0,SP,#+16
   \       0x9E   0x....'....        BL       mbedtls_md_free
    419          
    420              return( ret );
   \       0xA2   0x4630             MOV      R0,R6
   \       0xA4   0xB017             ADD      SP,SP,#+92
   \       0xA6   0xBDF0             POP      {R4-R7,PC}       ;; return
   \                     ??mbedtls_pkcs5_self_test_4: (+1)
   \       0xA8   0x2D00             CMP      R5,#+0
   \       0xAA   0xD002             BEQ.N    ??mbedtls_pkcs5_self_test_0
   \       0xAC   0x....             LDR.N    R0,??DataTable2_16
   \       0xAE   0x....'....        BL       DbgConsole_Printf
   \                     ??mbedtls_pkcs5_self_test_0: (+1)
   \       0xB2   0x2601             MOVS     R6,#+1
   \       0xB4   0xE7F2             B.N      ??mbedtls_pkcs5_self_test_6
    421          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \        0x0   0x0A 0x0D          DC8      0x0A, 0x0D, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \        0x0   0xFFFF'D09E        DC32     0xffffd09e

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \        0x0   0xFFFF'D180        DC32     0xffffd180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \        0x0   0xFFFF'D09A        DC32     0xffffd09a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \        0x0   0xFFFF'D100        DC32     0xffffd100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \        0x0   0xFFFF'D200        DC32     0xffffd200

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \        0x0   0x....'....        DC32     key_len

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \        0x0   0x....'....        DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_9:
   \        0x0   0x....'....        DC32     it_cnt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_10:
   \        0x0   0x....'....        DC32     slen

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_11:
   \        0x0   0x....'....        DC32     salt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_12:
   \        0x0   0x....'....        DC32     plen

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_13:
   \        0x0   0x....'....        DC32     password

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_14:
   \        0x0   0x....'....        DC32     result_key

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_15:
   \        0x0   0x....'....        DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_16:
   \        0x0   0x....'....        DC32     ?_2

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x2A 0x86          DC8 "*\206H\206\367\015\001\005\014"
   \              0x48 0x86    
   \              0xF7 0x0D    
   \              0x01 0x05    
   \              0x0C 0x00    
   \        0xA   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_1:
   \        0x0   0x20 0x20          DC8 "  PBKDF2 (SHA1) #%d: "
   \              0x50 0x42    
   \              0x4B 0x44    
   \              0x46 0x32    
   \              0x20 0x28    
   \              0x53 0x48    
   \              0x41 0x31    
   \              0x29 0x20    
   \              0x23 0x25    
   \              0x64 0x3A    
   \              0x20 0x00    
   \       0x16   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_2:
   \        0x0   0x66 0x61          DC8 "failed\012\015"
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x0A 0x0D    
   \              0x00         
   \        0x9   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_3:
   \        0x0   0x70 0x61          DC8 "passed\012\015"
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x0A 0x0D    
   \              0x00         
   \        0x9   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \        0x0   0x0A 0x0D          DC8 "\012\015"
   \              0x00         
   \        0x3   0x00               DC8 0
    422          #endif /* MBEDTLS_SHA1_C */
    423          
    424          #endif /* MBEDTLS_SELF_TEST */
    425          
    426          #endif /* MBEDTLS_PKCS5_C */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
     264   mbedtls_pkcs5_pbes2
       264   -> __aeabi_memcpy
       264   -> mbedtls_asn1_get_alg
       264   -> mbedtls_cipher_crypt
       264   -> mbedtls_cipher_free
       264   -> mbedtls_cipher_info_from_type
       264   -> mbedtls_cipher_init
       264   -> mbedtls_cipher_setkey
       264   -> mbedtls_cipher_setup
       264   -> mbedtls_md_free
       264   -> mbedtls_md_info_from_type
       264   -> mbedtls_md_init
       264   -> mbedtls_md_setup
       264   -> mbedtls_oid_get_cipher_alg
       264   -> mbedtls_pkcs5_pbkdf2_hmac
       264   -> memcmp
       264   -> pkcs5_parse_pbkdf2_params
     176   mbedtls_pkcs5_pbkdf2_hmac
       176   -> __aeabi_memcpy
       176   -> __aeabi_memcpy4
       176   -> __aeabi_memset4
       176   -> mbedtls_md_get_size
       176   -> mbedtls_md_hmac_finish
       176   -> mbedtls_md_hmac_starts
       176   -> mbedtls_md_hmac_update
     112   mbedtls_pkcs5_self_test
       112   -> DbgConsole_Printf
       112   -> mbedtls_md_free
       112   -> mbedtls_md_info_from_type
       112   -> mbedtls_md_init
       112   -> mbedtls_md_setup
       112   -> mbedtls_pkcs5_pbkdf2_hmac
       112   -> memcmp
      40   pkcs5_parse_pbkdf2_params
        40   -> mbedtls_asn1_get_alg_null
        40   -> mbedtls_asn1_get_int
        40   -> mbedtls_asn1_get_tag
        40   -> mbedtls_oid_get_md_hmac


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_10
       4  ??DataTable2_11
       4  ??DataTable2_12
       4  ??DataTable2_13
       4  ??DataTable2_14
       4  ??DataTable2_15
       4  ??DataTable2_16
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable2_9
      12  ?_0
      24  ?_1
      12  ?_2
      12  ?_3
       4  ?_4
      24  it_cnt
      24  key_len
     352  mbedtls_pkcs5_pbes2
     262  mbedtls_pkcs5_pbkdf2_hmac
     182  mbedtls_pkcs5_self_test
     192  password
     170  pkcs5_parse_pbkdf2_params
      24  plen
     192  result_key
     240  salt
      24  slen

 
   784 bytes in section .rodata
 1 034 bytes in section .text
 
 1 034 bytes of CODE  memory
   784 bytes of CONST memory

Errors: none
Warnings: none
